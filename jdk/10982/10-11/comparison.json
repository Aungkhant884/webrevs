{"files":[{"patch":"@@ -598,7 +598,7 @@\n-        --add-exports java.base\/jdk.classfile=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.attribute=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.constantpool=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.instruction=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.jdktypes=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.components=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.impl=ALL-UNNAMED\n+        --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.jdktypes=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\n","filename":"make\/RunTests.gmk","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-    jdk\/classfile\/snippet-files \\\n-    jdk\/classfile\/components\/snippet-files\n+    jdk\/internal\/classfile\/snippet-files \\\n+    jdk\/internal\/classfile\/components\/snippet-files\n","filename":"make\/modules\/java.base\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,7 +99,7 @@\n-        --add-exports java.base\/jdk.classfile=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.attribute=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.constantpool=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.instruction=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.jdktypes=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.components=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.classfile.impl=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.jdktypes=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED \\\n+        --add-exports java.base\/jdk.internal.classfile.impl=ALL-UNNAMED \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AnnotationImpl;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-\/**\n- * Models an annotation on a declaration.\n- *\n- * @see AnnotationElement\n- * @see AnnotationValue\n- * @see RuntimeVisibleAnnotationsAttribute\n- * @see RuntimeInvisibleAnnotationsAttribute\n- * @see RuntimeVisibleParameterAnnotationsAttribute\n- * @see RuntimeInvisibleParameterAnnotationsAttribute\n- *\/\n-public sealed interface Annotation\n-        extends WritableElement<Annotation>\n-        permits TypeAnnotation, AnnotationImpl {\n-\n-    \/**\n-     * {@return the class of the annotation}\n-     *\/\n-    Utf8Entry className();\n-\n-    \/**\n-     * {@return the class of the annotation, as a symbolic descriptor}\n-     *\/\n-    default ClassDesc classSymbol() {\n-        return ClassDesc.ofDescriptor(className().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the elements of the annotation}\n-     *\/\n-    List<AnnotationElement> elements();\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(Utf8Entry annotationClass,\n-                         List<AnnotationElement> elements) {\n-        return new AnnotationImpl(annotationClass, elements);\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(Utf8Entry annotationClass,\n-                         AnnotationElement... elements) {\n-        return of(annotationClass, List.of(elements));\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(ClassDesc annotationClass,\n-                         List<AnnotationElement> elements) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(ClassDesc annotationClass,\n-                         AnnotationElement... elements) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Annotation.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.attribute.CompilationIDAttribute;\n-import jdk.classfile.attribute.ConstantValueAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.InnerClassesAttribute;\n-import jdk.classfile.attribute.LineNumberTableAttribute;\n-import jdk.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.classfile.attribute.MethodParametersAttribute;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleHashesAttribute;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.classfile.attribute.ModuleTargetAttribute;\n-import jdk.classfile.attribute.NestHostAttribute;\n-import jdk.classfile.attribute.NestMembersAttribute;\n-import jdk.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.attribute.SourceIDAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.attribute.UnknownAttribute;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a classfile attribute (JVMS 4.7).  Many, though not all, subtypes of\n- * {@linkplain Attribute} will implement {@link ClassElement}, {@link\n- * MethodElement}, {@link FieldElement}, or {@link CodeElement}; attributes that\n- * are also elements will be delivered when traversing the elements of the\n- * corresponding model type. Additionally, all attributes are accessible\n- * directly from the corresponding model type through {@link\n- * AttributedElement#findAttribute(AttributeMapper)}.\n- *\/\n-public sealed interface Attribute<A extends Attribute<A>>\n-        extends WritableElement<A>\n-        permits AnnotationDefaultAttribute, BootstrapMethodsAttribute,\n-                CharacterRangeTableAttribute, CodeAttribute, CompilationIDAttribute,\n-                ConstantValueAttribute, DeprecatedAttribute, EnclosingMethodAttribute,\n-                ExceptionsAttribute, InnerClassesAttribute, LineNumberTableAttribute,\n-                LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n-                MethodParametersAttribute, ModuleAttribute, ModuleHashesAttribute,\n-                ModuleMainClassAttribute, ModulePackagesAttribute, ModuleResolutionAttribute,\n-                ModuleTargetAttribute, NestHostAttribute, NestMembersAttribute,\n-                PermittedSubclassesAttribute,\n-                RecordAttribute, RuntimeInvisibleAnnotationsAttribute,\n-                RuntimeInvisibleParameterAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleParameterAnnotationsAttribute,\n-                RuntimeVisibleTypeAnnotationsAttribute, SignatureAttribute,\n-                SourceDebugExtensionAttribute, SourceFileAttribute, SourceIDAttribute,\n-                StackMapTableAttribute, SyntheticAttribute,\n-                UnknownAttribute, BoundAttribute, UnboundAttribute {\n-    \/**\n-     * {@return the name of the attribute}\n-     *\/\n-    String attributeName();\n-\n-    \/**\n-     * {@return the {@link AttributeMapper} associated with this attribute}\n-     *\/\n-    AttributeMapper<A> attributeMapper();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Attribute.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile;\n-\n-import java.util.List;\n-\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.impl.ConcreteBootstrapMethodEntry;\n-\n-\/**\n- * Models an entry in the bootstrap method table.  The bootstrap method table\n- * is stored in the {@code BootstrapMethods} attribute, but is modeled by\n- * the {@link ConstantPool}, since the bootstrap method table is logically\n- * part of the constant pool.\n- *\/\n-public sealed interface BootstrapMethodEntry\n-        extends WritableElement<BootstrapMethodEntry>\n-        permits ConcreteBootstrapMethodEntry {\n-\n-    \/**\n-     * {@return the constant pool associated with this entry}\n-     *\/\n-    ConstantPool constantPool();\n-\n-    \/**\n-     * {@return the index into the bootstrap method table corresponding to this entry}\n-     *\/\n-    int bsmIndex();\n-\n-    \/**\n-     * {@return the bootstrap method}\n-     *\/\n-    MethodHandleEntry bootstrapMethod();\n-\n-    \/**\n-     * {@return the bootstrap arguments}\n-     *\/\n-    List<LoadableConstantEntry> arguments();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/BootstrapMethodEntry.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.CompilationIDAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.classfile.attribute.InnerClassesAttribute;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleHashesAttribute;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.classfile.attribute.ModuleTargetAttribute;\n-import jdk.classfile.attribute.NestHostAttribute;\n-import jdk.classfile.attribute.NestMembersAttribute;\n-import jdk.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.attribute.SourceIDAttribute;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link ClassModel} or be presented to a {@link ClassBuilder}.\n- *\/\n-public sealed interface ClassElement extends ClassfileElement\n-        permits AccessFlags, Superclass, Interfaces, ClassfileVersion,\n-                FieldModel, MethodModel,\n-                CustomAttribute, CompilationIDAttribute, DeprecatedAttribute,\n-                EnclosingMethodAttribute, InnerClassesAttribute,\n-                ModuleAttribute, ModuleHashesAttribute, ModuleMainClassAttribute,\n-                ModulePackagesAttribute, ModuleResolutionAttribute, ModuleTargetAttribute,\n-                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute,\n-                RecordAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SourceDebugExtensionAttribute,\n-                SourceFileAttribute, SourceIDAttribute, SyntheticAttribute, UnknownAttribute {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassElement.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link CodeModel} or be presented to a {@link CodeBuilder}.  Code elements\n- * are either an {@link Instruction}, which models an instruction in the body\n- * of a method, or a {@link PseudoInstruction}, which models metadata from\n- * the code attribute, such as line number metadata, local variable metadata,\n- * exception metadata, label target metadata, etc.\n- *\/\n-public sealed interface CodeElement extends ClassfileElement\n-        permits Instruction, PseudoInstruction,\n-                CustomAttribute, RuntimeVisibleTypeAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                StackMapTableAttribute {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CodeElement.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile;\n-\n-import java.util.List;\n-import java.util.Optional;\n-\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.impl.BufferedCodeBuilder;\n-import jdk.classfile.impl.CodeImpl;\n-import jdk.classfile.instruction.ExceptionCatch;\n-\n-\/**\n- * Models the body of a method (the {@code Code} attribute).  The instructions\n- * of the method body are accessed via a streaming view (e.g., {@link\n- * #elements()}).\n- *\/\n-public sealed interface CodeModel\n-        extends CompoundElement<CodeElement>, AttributedElement, MethodElement\n-        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n-\n-    \/**\n-     * {@return the maximum size of the local variable table}\n-     *\/\n-    int maxLocals();\n-\n-    \/**\n-     * {@return the maximum size of the operand stack}\n-     *\/\n-    int maxStack();\n-\n-    \/**\n-     * {@return the enclosing method, if known}\n-     *\/\n-    Optional<MethodModel> parent();\n-\n-    \/**\n-     * {@return the exception table of the method}  The exception table is also\n-     * modeled by {@link ExceptionCatch} elements in the streaming view.\n-     *\/\n-    List<ExceptionCatch> exceptionHandlers();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CodeModel.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.ConstantValueAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link FieldModel} or be presented to a {@link FieldBuilder}.\n- *\/\n-public sealed interface FieldElement extends ClassfileElement\n-        permits AccessFlags,\n-                CustomAttribute, ConstantValueAttribute, DeprecatedAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/FieldElement.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile;\n-\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.instruction.ArrayLoadInstruction;\n-import jdk.classfile.instruction.ArrayStoreInstruction;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.ConvertInstruction;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.LookupSwitchInstruction;\n-import jdk.classfile.instruction.MonitorInstruction;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewObjectInstruction;\n-import jdk.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.classfile.instruction.NopInstruction;\n-import jdk.classfile.instruction.OperatorInstruction;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StackInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.TableSwitchInstruction;\n-import jdk.classfile.instruction.ThrowInstruction;\n-import jdk.classfile.instruction.TypeCheckInstruction;\n-\n-\/**\n- * Models an executable instruction in a method body.\n- *\/\n-public sealed interface Instruction extends CodeElement\n-        permits ArrayLoadInstruction, ArrayStoreInstruction, BranchInstruction,\n-                ConstantInstruction, ConvertInstruction, FieldInstruction,\n-                InvokeDynamicInstruction, InvokeInstruction, LoadInstruction,\n-                StoreInstruction, IncrementInstruction,\n-                LookupSwitchInstruction, MonitorInstruction, NewMultiArrayInstruction,\n-                NewObjectInstruction, NewPrimitiveArrayInstruction, NewReferenceArrayInstruction,\n-                NopInstruction, OperatorInstruction, ReturnInstruction,\n-                StackInstruction, TableSwitchInstruction,\n-                ThrowInstruction, TypeCheckInstruction, AbstractInstruction {\n-\n-    \/**\n-     * {@return the opcode of this instruction}\n-     *\/\n-    Opcode opcode();\n-\n-    \/**\n-     * {@return the size in bytes of this instruction}\n-     *\/\n-    int sizeInBytes();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Instruction.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.MethodParametersAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link MethodModel} or be presented to a {@link MethodBuilder}.\n- *\/\n-public sealed interface MethodElement\n-        extends ClassfileElement\n-        permits AccessFlags, CodeModel, CustomAttribute,\n-                AnnotationDefaultAttribute, DeprecatedAttribute,\n-                ExceptionsAttribute, MethodParametersAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleParameterAnnotationsAttribute,\n-                RuntimeInvisibleTypeAnnotationsAttribute, RuntimeVisibleAnnotationsAttribute,\n-                RuntimeVisibleParameterAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/MethodElement.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.instruction.CharacterRange;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.LabelTarget;\n-import jdk.classfile.instruction.LineNumber;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-\n-\/**\n- * Models metadata about a {@link CodeAttribute}, such as entries in the\n- * exception table, line number table, local variable table, or the mapping\n- * between instructions and labels.  Pseudo-instructions are delivered as part\n- * of the element stream of a {@link CodeModel}.  Delivery of some\n- * pseudo-instructions can be disabled by modifying the value of classfile\n- * options (e.g., {@link Classfile.Option#processDebug(boolean)}).\n- *\/\n-public sealed interface PseudoInstruction\n-        extends CodeElement\n-        permits CharacterRange, ExceptionCatch, LabelTarget, LineNumber, LocalVariable, LocalVariableType, AbstractPseudoInstruction {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/PseudoInstruction.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.SuperclassImpl;\n-\n-\/**\n- * Models the superclass of a class.  Delivered as a {@link\n- * jdk.classfile.ClassElement} when traversing a {@link ClassModel}.\n- *\/\n-public sealed interface Superclass\n-        extends ClassElement\n-        permits SuperclassImpl {\n-\n-    \/** {@return the superclass} *\/\n-    ClassEntry superclassEntry();\n-\n-    \/**\n-     * {@return a {@linkplain Superclass} element}\n-     * @param superclassEntry the superclass\n-     *\/\n-    static Superclass of(ClassEntry superclassEntry) {\n-        return new SuperclassImpl(superclassEntry);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Superclass.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile;\n-\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.impl.DirectFieldBuilder;\n-import jdk.classfile.impl.DirectMethodBuilder;\n-\n-\/**\n- * A classfile element that can encode itself as a stream of bytes in the\n- * encoding expected by the classfile format.\n- *\n- * @param <T> the type of the entity\n- *\/\n-public sealed interface WritableElement<T> extends ClassfileElement\n-        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n-                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n-                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n-    \/**\n-     * Writes the element to the specified writer\n-     *\n-     * @param buf the writer\n-     *\/\n-    void writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/WritableElement.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.AnnotationValue;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code AnnotationDefault} attribute (JVMS 4.7.22), which can\n- * appear on methods of annotation types, and records the default value (JLS\n- * 9.6.2) for the element corresponding to this method.  Delivered as a {@link\n- * MethodElement} when traversing the elements of a {@link MethodModel}.\n- *\/\n-public sealed interface AnnotationDefaultAttribute\n-        extends Attribute<AnnotationDefaultAttribute>, MethodElement\n-        permits BoundAttribute.BoundAnnotationDefaultAttr,\n-                UnboundAttribute.UnboundAnnotationDefaultAttribute {\n-\n-    \/**\n-     * {@return the default value of the annotation type element represented by\n-     * this method}\n-     *\/\n-    AnnotationValue defaultValue();\n-\n-    \/**\n-     * {@return an {@code AnnotationDefault} attribute}\n-     * @param annotationDefault the default value of the annotation type element\n-     *\/\n-    static AnnotationDefaultAttribute of(AnnotationValue annotationDefault) {\n-        return new UnboundAttribute.UnboundAnnotationDefaultAttribute(annotationDefault);\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/AnnotationDefaultAttribute.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code BootstrapMethods} attribute (JVMS 4.7.23), which serves as\n- * an extension to the constant pool of a classfile.  Elements of the bootstrap\n- * method table are accessed through {@link ConstantPool}.\n- *\/\n-public sealed interface BootstrapMethodsAttribute\n-        extends Attribute<BootstrapMethodsAttribute>\n-        permits BoundAttribute.BoundBootstrapMethodsAttribute,\n-                UnboundAttribute.EmptyBootstrapAttribute {\n-\n-    \/**\n-     * {@return the elements of the bootstrap method table}\n-     *\/\n-    List<BootstrapMethodEntry> bootstrapMethods();\n-\n-    \/**\n-     * {@return the size of the bootstrap methods table}.  Calling this method\n-     * does not necessarily inflate the entire table.\n-     *\/\n-    int bootstrapMethodsSize();\n-\n-    \/\/ No factories; BMA is generated as part of constant pool\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/BootstrapMethodsAttribute.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a single character range in the {@link CharacterRangeTableAttribute}.\n- *\/\n-public sealed interface CharacterRangeInfo\n-        permits UnboundAttribute.UnboundCharacterRangeInfo {\n-\n-    \/**\n-     * {@return the start of the character range region (inclusive)}  This is\n-     * the index into the code array at which the code for this character range\n-     * begins.\n-     *\/\n-    int startPc();\n-\n-    \/**\n-     * {@return the end of the character range region (exclusive)}  This is the\n-     * index into the code array after which the code for this character range\n-     * ends.\n-     *\/\n-    int endPc();\n-\n-    \/**\n-     * {@return the encoded start of the character range region (inclusive)}\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeStart();\n-\n-    \/**\n-     * {@return the encoded end of the character range region (exclusive)}.\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeEnd();\n-\n-    \/**\n-     * The value of the flags item describes the kind of range. Multiple flags\n-     * may be set within flags.\n-     * <ul>\n-     * <li>{@link jdk.classfile.Classfile#CRT_STATEMENT} Range is a Statement\n-     * (except ExpressionStatement), StatementExpression (14.8), as well as each\n-     * VariableDeclaratorId = VariableInitializer of\n-     * LocalVariableDeclarationStatement (14.4) or FieldDeclaration (8.3) in the\n-     * grammar.\n-     * <li>{@link jdk.classfile.Classfile#CRT_BLOCK} Range is a Block in the\n-     * grammar.\n-     * <li>{@link jdk.classfile.Classfile#CRT_ASSIGNMENT} Range is an assignment\n-     * expression - Expression1 AssignmentOperator Expression1 in the grammar as\n-     * well as increment and decrement expressions (both prefix and postfix).\n-     * <li>{@link jdk.classfile.Classfile#CRT_FLOW_CONTROLLER} An expression\n-     * whose value will effect control flow. Flowcon in the following:\n-     * <pre>\n-     * if ( Flowcon ) Statement [else Statement]\n-     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Statement\n-     * while ( Flowcon ) Statement\n-     * do Statement while ( Flowcon ) ;\n-     * switch ( Flowcon ) { SwitchBlockStatementGroups }\n-     * Flowcon || Expression3\n-     * Flowcon &amp;&amp; Expression3\n-     * Flowcon ? Expression : Expression1\n-     * <\/pre>\n-     * <li>{@link jdk.classfile.Classfile#CRT_FLOW_TARGET} Statement or\n-     * expression effected by a CRT_FLOW_CONTROLLER. Flowtarg in the following:\n-     * <pre>\n-     * if ( Flowcon ) Flowtarg [else Flowtarg]\n-     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Flowtarg\n-     * while ( Flowcon ) Flowtarg\n-     * do Flowtarg while ( Flowcon ) ;\n-     * Flowcon || Flowtarg\n-     * Flowcon &amp;&amp; Flowtarg\n-     * Flowcon ? Flowtarg : Flowtarg\n-     * <\/pre>\n-     * <li>{@link jdk.classfile.Classfile#CRT_INVOKE} Method invocation. For\n-     * example: Identifier Arguments.\n-     * <li>{@link jdk.classfile.Classfile#CRT_CREATE} New object creation. For\n-     * example: new Creator.\n-     * <li>{@link jdk.classfile.Classfile#CRT_BRANCH_TRUE} A condition encoded\n-     * in the branch instruction immediately contained in the code range for\n-     * this item is not inverted towards the corresponding branch condition in\n-     * the source code. I.e. actual jump occurs if and only if the the source\n-     * code branch condition evaluates to true. Entries of this type are\n-     * produced only for conditions that are listed in the description of\n-     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n-     * controlling expression. start_pc field for an entry of this type must\n-     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n-     * if&lt;cond&gt;, ifnonull, ifnull or goto. CRT_BRANCH_TRUE and\n-     * CRT_BRANCH_FALSE are special kinds of entries that can be used to\n-     * determine what branch of a condition was chosen during the runtime.\n-     * <li>{@link jdk.classfile.Classfile#CRT_BRANCH_FALSE} A condition encoded\n-     * in the branch instruction immediately contained in the code range for\n-     * this item is inverted towards the corresponding branch condition in the\n-     * source code. I.e. actual jump occurs if and only if the the source code\n-     * branch condition evaluates to false. Entries of this type are produced\n-     * only for conditions that are listed in the description of\n-     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n-     * controlling expression. start_pc field for an entry of this type must\n-     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n-     * if&lt;cond&gt;, ifnonull, ifnull or goto.\n-     * <\/ul>\n-     * <p>\n-     * All bits of the flags item not assigned above are reserved for future use. They should be set to zero in generated class files and should be ignored by Java virtual machine implementations.\n-     *\n-     * @return the flags\n-     *\/\n-    int flags();\n-\n-    \/**\n-     * {@return a character range description}\n-     * @param startPc the start of the bytecode range, inclusive\n-     * @param endPc the end of the bytecode range, exclusive\n-     * @param characterRangeStart the start of the character range, inclusive,\n-     *                            encoded as {@code line_number << 10 + column_number}\n-     * @param characterRangeEnd the end of the character range, exclusive,\n-     *                          encoded as {@code line_number << 10 + column_number}\n-     * @param flags the range flags\n-     *\/\n-    static CharacterRangeInfo of(int startPc,\n-                                 int endPc,\n-                                 int characterRangeStart,\n-                                 int characterRangeEnd,\n-                                 int flags) {\n-        return new UnboundAttribute.UnboundCharacterRangeInfo(startPc, endPc,\n-                                                              characterRangeStart, characterRangeEnd,\n-                                                              flags);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/CharacterRangeInfo.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.impl.BoundAttribute;\n-\n-\/**\n- * Models the {@code Code} attribute (JVMS 4.7.3), appears on non-native,\n- * non-abstract methods and contains the bytecode of the method body.  Delivered\n- * as a {@link jdk.classfile.MethodElement} when traversing the elements of a\n- * {@link jdk.classfile.MethodModel}.\n- *\/\n-public sealed interface CodeAttribute extends Attribute<CodeAttribute>, CodeModel\n-        permits BoundAttribute.BoundCodeAttribute {\n-\n-    \/**\n-     * {@return The length of the code array in bytes}\n-     *\/\n-    int codeLength();\n-\n-    \/**\n-     * {@return the bytes (bytecode) of the code array}\n-     *\/\n-    byte[] codeArray();\n-\n-    int labelToBci(Label label);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/CodeAttribute.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code CompilationID} attribute (@@@ need reference), which can\n- * appear on classes and records the compilation time of the class.  Delivered\n- * as a {@link jdk.classfile.ClassElement} when traversing the elements of\n- * a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface CompilationIDAttribute\n-        extends Attribute<CompilationIDAttribute>, ClassElement\n-        permits BoundAttribute.BoundCompilationIDAttribute,\n-                UnboundAttribute.UnboundCompilationIDAttribute {\n-\n-    \/**\n-     * {@return the compilation ID}  The compilation ID is the value of\n-     * {@link System#currentTimeMillis()} when the classfile is generated.\n-     *\/\n-    Utf8Entry compilationId();\n-\n-    \/**\n-     * {@return a {@code CompilationID} attribute}\n-     * @param id the compilation ID\n-     *\/\n-    static CompilationIDAttribute of(Utf8Entry id) {\n-        return new UnboundAttribute.UnboundCompilationIDAttribute(id);\n-    }\n-\n-    \/**\n-     * {@return a {@code CompilationID} attribute}\n-     * @param id the compilation ID\n-     *\/\n-    static CompilationIDAttribute of(String id) {\n-        return new UnboundAttribute.UnboundCompilationIDAttribute(TemporaryConstantPool.INSTANCE.utf8Entry(id));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/CompilationIDAttribute.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ConstantDesc;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.constantpool.ConstantValueEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ConstantValue} attribute (JVMS 4.7.2), which can appear on\n- * fields and indicates that the field's value is a constant.  Delivered as a\n- * {@link jdk.classfile.FieldElement} when traversing the elements of a\n- * {@link jdk.classfile.FieldModel}.\n- *\/\n-public sealed interface ConstantValueAttribute\n-        extends Attribute<ConstantValueAttribute>, FieldElement\n-        permits BoundAttribute.BoundConstantValueAttribute,\n-                UnboundAttribute.UnboundConstantValueAttribute {\n-\n-    \/**\n-     * {@return the constant value of the field}\n-     *\/\n-    ConstantValueEntry constant();\n-\n-    \/**\n-     * {@return a {@code ConstantValue} attribute}\n-     * @param value the constant value\n-     *\/\n-    static ConstantValueAttribute of(ConstantValueEntry value) {\n-        return new UnboundAttribute.UnboundConstantValueAttribute(value);\n-    }\n-\n-    \/**\n-     * {@return a {@code ConstantValue} attribute}\n-     * @param value the constant value\n-     *\/\n-    static ConstantValueAttribute of(ConstantDesc value) {\n-        return of(switch(value) {\n-            case Integer i -> TemporaryConstantPool.INSTANCE.intEntry(i);\n-            case Float f -> TemporaryConstantPool.INSTANCE.floatEntry(f);\n-            case Long l -> TemporaryConstantPool.INSTANCE.longEntry(l);\n-            case Double d -> TemporaryConstantPool.INSTANCE.doubleEntry(d);\n-            case String s -> TemporaryConstantPool.INSTANCE.stringEntry(s);\n-            default -> throw new IllegalArgumentException(\"Invalid ConstantValueAtrtibute value: \" + value);\n-        });\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ConstantValueAttribute.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Deprecated} attribute (JVMS 4.7.15), which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n- *\/\n-public sealed interface DeprecatedAttribute\n-        extends Attribute<DeprecatedAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundDeprecatedAttribute,\n-                UnboundAttribute.UnboundDeprecatedAttribute {\n-\n-    \/**\n-     * {@return a {@code Deprecated} attribute}\n-     *\/\n-    static DeprecatedAttribute of() {\n-        return new UnboundAttribute.UnboundDeprecatedAttribute();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/DeprecatedAttribute.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.Optional;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code EnclosingMethod} attribute (JVMS 4.7.7), which can appear\n- * on classes, and indicates that the class is a local or anonymous class.\n- * Delivered as a {@link ClassElement} when traversing the elements of a {@link\n- * jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface EnclosingMethodAttribute\n-        extends Attribute<EnclosingMethodAttribute>, ClassElement\n-        permits BoundAttribute.BoundEnclosingMethodAttribute,\n-                UnboundAttribute.UnboundEnclosingMethodAttribute {\n-\n-    \/**\n-     * {@return the innermost class that encloses the declaration of the current\n-     * class}\n-     *\/\n-    ClassEntry enclosingClass();\n-\n-    \/**\n-     * {@return the name and type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    Optional<NameAndTypeEntry> enclosingMethod();\n-\n-    \/**\n-     * {@return the name of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<Utf8Entry> enclosingMethodName() {\n-        return enclosingMethod().map(NameAndTypeEntry::name);\n-    }\n-\n-    \/**\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<Utf8Entry> enclosingMethodType() {\n-        return enclosingMethod().map(NameAndTypeEntry::type);\n-    }\n-\n-    \/**\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<MethodTypeDesc> enclosingMethodTypeSymbol() {\n-        return enclosingMethodType().map(n -> MethodTypeDesc.ofDescriptor(n.stringValue()));\n-    }\n-\n-    \/**\n-     * {@return an {@code EnclosingMethod} attribute}\n-     * @param className the class name\n-     * @param method the name and type of the enclosing method\n-     *\/\n-    static EnclosingMethodAttribute of(ClassEntry className,\n-                                       Optional<NameAndTypeEntry> method) {\n-        return new UnboundAttribute.UnboundEnclosingMethodAttribute(className, method.orElse(null));\n-    }\n-\n-    \/**\n-     * {@return an {@code EnclosingMethod} attribute}\n-     * @param className the class name\n-     * @param methodName the name of the enclosing method\n-     * @param methodType the type of the enclosing method\n-     *\/\n-    static EnclosingMethodAttribute of(ClassDesc className,\n-                                       Optional<String> methodName,\n-                                       Optional<MethodTypeDesc> methodType) {\n-        return new UnboundAttribute.UnboundEnclosingMethodAttribute(\n-                        TemporaryConstantPool.INSTANCE.classEntry(className),\n-                        methodName.isPresent() && methodType.isPresent()\n-                                ? TemporaryConstantPool.INSTANCE.natEntry(methodName.get(), methodType.get())\n-                                : null);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/EnclosingMethodAttribute.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code Exceptions} attribute (JVMS 4.7.5), which can appear on\n- * methods, and records the exceptions declared to be thrown by this method.\n- * Delivered as a {@link MethodElement} when traversing the elements of a\n- * {@link jdk.classfile.MethodModel}.\n- *\/\n-public sealed interface ExceptionsAttribute\n-        extends Attribute<ExceptionsAttribute>, MethodElement\n-        permits BoundAttribute.BoundExceptionsAttribute,\n-                UnboundAttribute.UnboundExceptionsAttribute {\n-\n-    \/**\n-     * {@return the exceptions declared to be thrown by this method}\n-     *\/\n-    List<ClassEntry> exceptions();\n-\n-    \/**\n-     * {@return an {@code Exceptions} attribute}\n-     * @param exceptions the checked exceptions that may be thrown from this method\n-     *\/\n-    static ExceptionsAttribute of(List<ClassEntry> exceptions) {\n-        return new UnboundAttribute.UnboundExceptionsAttribute(exceptions);\n-    }\n-\n-    \/**\n-     * {@return an {@code Exceptions} attribute}\n-     * @param exceptions the checked exceptions that may be thrown from this method\n-     *\/\n-    static ExceptionsAttribute of(ClassEntry... exceptions) {\n-        return of(List.of(exceptions));\n-    }\n-\n-    \/**\n-     * {@return an {@code Exceptions} attribute}\n-     * @param exceptions the checked exceptions that may be thrown from this method\n-     *\/\n-    static ExceptionsAttribute ofSymbols(List<ClassDesc> exceptions) {\n-        return of(Util.entryList(exceptions));\n-    }\n-\n-    \/**\n-     * {@return an {@code Exceptions} attribute}\n-     * @param exceptions the checked exceptions that may be thrown from this method\n-     *\/\n-    static ExceptionsAttribute ofSymbols(ClassDesc... exceptions) {\n-        return ofSymbols(Arrays.asList(exceptions));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ExceptionsAttribute.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code InnerClasses} attribute (JVMS 4.7.6), which can\n- * appear on classes, and records which classes referenced by this classfile\n- * are inner classes. Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface InnerClassesAttribute\n-        extends Attribute<InnerClassesAttribute>, ClassElement\n-        permits BoundAttribute.BoundInnerClassesAttribute,\n-                UnboundAttribute.UnboundInnerClassesAttribute {\n-\n-    \/**\n-     * {@return the inner classes used by this class}\n-     *\/\n-    List<InnerClassInfo> classes();\n-\n-    \/**\n-     * {@return an {@code InnerClasses} attribute}\n-     * @param innerClasses descriptions of the inner classes\n-     *\/\n-    static InnerClassesAttribute of(List<InnerClassInfo> innerClasses) {\n-        return new UnboundAttribute.UnboundInnerClassesAttribute(innerClasses);\n-    }\n-\n-    \/**\n-     * {@return an {@code InnerClasses} attribute}\n-     * @param innerClasses descriptions of the inner classes\n-     *\/\n-    static InnerClassesAttribute of(InnerClassInfo... innerClasses) {\n-        return new UnboundAttribute.UnboundInnerClassesAttribute(List.of(innerClasses));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/InnerClassesAttribute.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code LineNumberTable} attribute (JVMS 4.7.12), which can appear\n- * on a {@code Code} attribute, and records the mapping between indexes into\n- * the code table and line numbers in the source file.\n- * Delivered as a {@link jdk.classfile.instruction.LineNumber} when traversing the\n- * elements of a {@link jdk.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.classfile.Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n- *\/\n-public sealed interface LineNumberTableAttribute\n-        extends Attribute<LineNumberTableAttribute>\n-        permits BoundAttribute.BoundLineNumberTableAttribute,\n-                UnboundAttribute.UnboundLineNumberTableAttribute {\n-\n-    \/**\n-     * {@return the table mapping bytecode offsets to source line numbers}\n-     *\/\n-    List<LineNumberInfo> lineNumbers();\n-\n-    \/**\n-     * {@return a {@code LineNumberTable} attribute}\n-     * @param lines the line number descriptions\n-     *\/\n-    static LineNumberTableAttribute of(List<LineNumberInfo> lines) {\n-        return new UnboundAttribute.UnboundLineNumberTableAttribute(lines);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LineNumberTableAttribute.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code LocalVariableTable} attribute (JVMS 4.7.13), which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link jdk.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link jdk.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n- *\/\n-public sealed interface LocalVariableTableAttribute\n-        extends Attribute<LocalVariableTableAttribute>\n-        permits BoundAttribute.BoundLocalVariableTableAttribute, UnboundAttribute.UnboundLocalVariableTableAttribute {\n-\n-    \/**\n-     * {@return debug information for the local variables in this method}\n-     *\/\n-    List<LocalVariableInfo> localVariables();\n-\n-    \/**\n-     * {@return a {@code LocalVariableTable} attribute}\n-     * @param locals the local variable descriptions\n-     *\/\n-    static LocalVariableTableAttribute of(List<LocalVariableInfo> locals) {\n-        return new UnboundAttribute.UnboundLocalVariableTableAttribute(locals);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code LocalVariableTypeTable} attribute (JVMS 4.7.14), which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link jdk.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link jdk.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n- *\/\n-public sealed interface LocalVariableTypeTableAttribute\n-        extends Attribute<LocalVariableTypeTableAttribute>\n-        permits BoundAttribute.BoundLocalVariableTypeTableAttribute, UnboundAttribute.UnboundLocalVariableTypeTableAttribute {\n-\n-    \/**\n-     * {@return debug information for the local variables in this method}\n-     *\/\n-    List<LocalVariableTypeInfo> localVariableTypes();\n-\n-    \/**\n-     * {@return a {@code LocalVariableTypeTable} attribute}\n-     * @param locals the local variable descriptions\n-     *\/\n-    static LocalVariableTypeTableAttribute of(List<LocalVariableTypeInfo> locals) {\n-        return new UnboundAttribute.UnboundLocalVariableTypeTableAttribute(locals);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code MethodParameters} attribute (JVMS 4.7.24), which can\n- * appear on methods, and records optional information about the method's\n- * parameters.  Delivered as a {@link jdk.classfile.MethodElement} when\n- * traversing the elements of a {@link jdk.classfile.MethodModel}.\n- *\/\n-public sealed interface MethodParametersAttribute\n-        extends Attribute<MethodParametersAttribute>, MethodElement\n-        permits BoundAttribute.BoundMethodParametersAttribute,\n-                UnboundAttribute.UnboundMethodParametersAttribute {\n-\n-    \/**\n-     * {@return information about the parameters of the method}  The i'th entry\n-     * in the list correponds to the i'th parameter in the method declaration.\n-     *\/\n-    List<MethodParameterInfo> parameters();\n-\n-    \/**\n-     * {@return a {@code MethodParameters} attribute}\n-     * @param parameters the method parameter descriptions\n-     *\/\n-    static MethodParametersAttribute of(List<MethodParameterInfo> parameters) {\n-        return new UnboundAttribute.UnboundMethodParametersAttribute(parameters);\n-    }\n-\n-    \/**\n-     * {@return a {@code MethodParameters} attribute}\n-     * @param parameters the method parameter descriptions\n-     *\/\n-    static MethodParametersAttribute of(MethodParameterInfo... parameters) {\n-        return of(List.of(parameters));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/MethodParametersAttribute.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,175 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Collection;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.Consumer;\n-import java.lang.reflect.AccessFlag;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n-import jdk.classfile.impl.ModuleAttributeBuilderImpl;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code Module} attribute (JVMS 4.7.25), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-\n-public sealed interface ModuleAttribute\n-        extends Attribute<ModuleAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleAttribute, UnboundAttribute.UnboundModuleAttribute {\n-\n-    \/**\n-     * {@return the name of the module}\n-     *\/\n-    ModuleEntry moduleName();\n-\n-    \/**\n-     * {@return the the module flags of the module, as a bit mask}\n-     *\/\n-    int moduleFlagsMask();\n-\n-    \/**\n-     * {@return the the module flags of the module, as a set of enum constants}\n-     *\/\n-    default Set<AccessFlag> moduleFlags() {\n-        return AccessFlag.maskToAccessFlags(moduleFlagsMask(), AccessFlag.Location.MODULE);\n-    }\n-\n-    default boolean has(AccessFlag flag) {\n-        return Util.has(AccessFlag.Location.MODULE, moduleFlagsMask(), flag);\n-    }\n-\n-    \/**\n-     * {@return version of the module, if present}\n-     *\/\n-    Optional<Utf8Entry> moduleVersion();\n-\n-    \/**\n-     * {@return the modules required by this module}\n-     *\/\n-    List<ModuleRequireInfo> requires();\n-\n-    \/**\n-     * {@return the packages exported by this module}\n-     *\/\n-    List<ModuleExportInfo> exports();\n-\n-    \/**\n-     * {@return the packages opened by this module}\n-     *\/\n-    List<ModuleOpenInfo> opens();\n-\n-    \/**\n-     * {@return the services used by this module}  Services may be discovered via\n-     * {@link java.util.ServiceLoader}.\n-     *\/\n-    List<ClassEntry> uses();\n-\n-    \/**\n-     * {@return the service implementations provided by this module}\n-     *\/\n-    List<ModuleProvideInfo> provides();\n-\n-    \/**\n-     * {@return a {@code Module} attribute}\n-     *\n-     * @param moduleName the module name\n-     * @param moduleFlags the module flags\n-     * @param moduleVersion the module version\n-     * @param requires the required packages\n-     * @param exports the exported packages\n-     * @param opens the opened packages\n-     * @param uses the consumed services\n-     * @param provides the provided services\n-     *\/\n-    static ModuleAttribute of(ModuleEntry moduleName, int moduleFlags,\n-                              Utf8Entry moduleVersion,\n-                              Collection<ModuleRequireInfo> requires,\n-                              Collection<ModuleExportInfo> exports,\n-                              Collection<ModuleOpenInfo> opens,\n-                              Collection<ClassEntry> uses,\n-                              Collection<ModuleProvideInfo> provides) {\n-        return new UnboundAttribute.UnboundModuleAttribute(moduleName, moduleFlags, moduleVersion, requires, exports, opens, uses, provides);\n-    }\n-\n-    static ModuleAttribute of(ModuleDesc moduleName,\n-                              Consumer<ModuleAttributeBuilder> attrHandler) {\n-        var mb = new ModuleAttributeBuilderImpl(moduleName);\n-        attrHandler.accept(mb);\n-        return  mb.build();\n-    }\n-\n-    public sealed interface ModuleAttributeBuilder\n-            permits ModuleAttributeBuilderImpl {\n-\n-        ModuleAttributeBuilder moduleName(ModuleDesc moduleName);\n-        ModuleAttributeBuilder moduleFlags(int flagsMask);\n-        default ModuleAttributeBuilder moduleFlags(AccessFlag... moduleFlags) {\n-            return moduleFlags(Util.flagsToBits(AccessFlag.Location.MODULE, moduleFlags));\n-        }\n-        ModuleAttributeBuilder moduleVersion(String version);\n-\n-        ModuleAttributeBuilder requires(ModuleDesc module, int requiresFlagsMask, String version);\n-        default ModuleAttributeBuilder requires(ModuleDesc module, Collection<AccessFlag> requiresFlags, String version) {\n-            return requires(module, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), version);\n-        }\n-        ModuleAttributeBuilder requires(ModuleRequireInfo requires);\n-\n-        ModuleAttributeBuilder exports(PackageDesc pkge, int exportsFlagsMask, ModuleDesc... exportsToModules);\n-        default ModuleAttributeBuilder exports(PackageDesc pkge, Collection<AccessFlag> exportsFlags, ModuleDesc... exportsToModules) {\n-            return exports(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportsFlags), exportsToModules);\n-        }\n-        ModuleAttributeBuilder exports(ModuleExportInfo exports);\n-\n-        ModuleAttributeBuilder opens(PackageDesc pkge, int opensFlagsMask, ModuleDesc... opensToModules);\n-        default ModuleAttributeBuilder opens(PackageDesc pkge, Collection<AccessFlag> opensFlags, ModuleDesc... opensToModules) {\n-            return opens(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensToModules);\n-        }\n-        ModuleAttributeBuilder opens(ModuleOpenInfo opens);\n-\n-        ModuleAttributeBuilder uses(ClassDesc service);\n-        ModuleAttributeBuilder uses(ClassEntry uses);\n-\n-        ModuleAttributeBuilder provides(ClassDesc service, ClassDesc... implClasses);\n-        ModuleAttributeBuilder provides(ModuleProvideInfo provides);\n-\n-        ModuleAttribute build();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleAttribute.java","additions":0,"deletions":175,"binary":false,"changes":175,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models hash information for a single module in the {@link jdk.classfile.attribute.ModuleHashesAttribute}.\n- *\/\n-public sealed interface ModuleHashInfo\n-        permits UnboundAttribute.UnboundModuleHashInfo {\n-\n-    \/**\n-     * {@return the name of the related module}\n-     *\/\n-    ModuleEntry moduleName();\n-\n-    \/**\n-     * {@return the hash of the related module}\n-     *\/\n-    byte[] hash();\n-\n-    \/**\n-     * {@return a module hash description}\n-     * @param moduleName the module name\n-     * @param hash the hash value\n-     *\/\n-    static ModuleHashInfo of(ModuleEntry moduleName, byte[] hash) {\n-        return new UnboundAttribute.UnboundModuleHashInfo(moduleName, hash);\n-    }\n-\n-    \/**\n-     * {@return a module hash description}\n-     * @param moduleDesc the module name\n-     * @param hash the hash value\n-     *\/\n-    static ModuleHashInfo of(ModuleDesc moduleDesc, byte[] hash) {\n-        return new UnboundAttribute.UnboundModuleHashInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleDesc.moduleName())), hash);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleHashInfo.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,120 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-\n-import java.util.List;\n-\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleHashes} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- * attribute, which captures the hashes of a set of co-delivered modules.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\n- *  <p>The specification of the {@code ModuleHashes} attribute is:\n- * <pre> {@code\n- *\n- * ModuleHashes_attribute {\n- *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n- *   \/\/ the string \"ModuleHashes\"\n- *   u2 attribute_name_index;\n- *   u4 attribute_length;\n- *\n- *   \/\/ index to CONSTANT_utf8_info structure with algorithm name\n- *   u2 algorithm_index;\n- *\n- *   \/\/ the number of entries in the hashes table\n- *   u2 hashes_count;\n- *   {   u2 module_name_index (index to CONSTANT_Module_info structure)\n- *       u2 hash_length;\n- *       u1 hash[hash_length];\n- *   } hashes[hashes_count];\n- *\n- * }\n- * } <\/pre>\n- *\/\n-public sealed interface ModuleHashesAttribute\n-        extends Attribute<ModuleHashesAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleHashesAttribute, UnboundAttribute.UnboundModuleHashesAttribute {\n-\n-    \/**\n-     * {@return the algorithm name used to compute the hash}\n-     *\/\n-    Utf8Entry algorithm();\n-\n-    \/**\n-     * {@return the hash information about related modules}\n-     *\/\n-    List<ModuleHashInfo> hashes();\n-\n-    \/**\n-     * {@return a {@code ModuleHashes} attribute}\n-     * @param algorithm the hashing algorithm\n-     * @param hashes the hash descriptions\n-     *\/\n-    static ModuleHashesAttribute of(String algorithm,\n-                                    List<ModuleHashInfo> hashes) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(algorithm), hashes);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleHashes} attribute}\n-     * @param algorithm the hashing algorithm\n-     * @param hashes the hash descriptions\n-     *\/\n-    static ModuleHashesAttribute of(String algorithm,\n-                                    ModuleHashInfo... hashes) {\n-        return of(algorithm, List.of(hashes));\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleHashes} attribute}\n-     * @param algorithm the hashing algorithm\n-     * @param hashes the hash descriptions\n-     *\/\n-    static ModuleHashesAttribute of(Utf8Entry algorithm,\n-                                    List<ModuleHashInfo> hashes) {\n-        return new UnboundAttribute.UnboundModuleHashesAttribute(algorithm, hashes);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleHashes} attribute}\n-     * @param algorithm the hashing algorithm\n-     * @param hashes the hash descriptions\n-     *\/\n-    static ModuleHashesAttribute of(Utf8Entry algorithm,\n-                                    ModuleHashInfo... hashes) {\n-        return of(algorithm, List.of(hashes));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleHashesAttribute.java","additions":0,"deletions":120,"binary":false,"changes":120,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code ModuleMainClass} attribute (JVMS 4.7.27), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface ModuleMainClassAttribute\n-        extends Attribute<ModuleMainClassAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleMainClassAttribute, UnboundAttribute.UnboundModuleMainClassAttribute {\n-\n-    \/**\n-     * {@return main class for this module}\n-     *\/\n-    ClassEntry mainClass();\n-\n-    \/**\n-     * {@return a {@code ModuleMainClass} attribute}\n-     * @param mainClass the main class\n-     *\/\n-    static ModuleMainClassAttribute of(ClassEntry mainClass) {\n-        return new UnboundAttribute.UnboundModuleMainClassAttribute(mainClass);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleMainClass} attribute}\n-     * @param mainClass the main class\n-     *\/\n-    static ModuleMainClassAttribute of(ClassDesc mainClass) {\n-        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(mainClass))));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,121 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Set;\n-\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import java.lang.reflect.AccessFlag;\n-\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a single \"opens\" declaration in the {@link jdk.classfile.attribute.ModuleAttribute}.\n- *\/\n-public sealed interface ModuleOpenInfo\n-        permits UnboundAttribute.UnboundModuleOpenInfo {\n-\n-    \/**\n-     * {@return the package being opened}\n-     *\/\n-    PackageEntry openedPackage();\n-\n-    \/**\n-     * {@return the flags associated with this open declaration, as a bit mask}\n-     * Valid flags include {@link jdk.classfile.Classfile#ACC_SYNTHETIC} and\n-     * {@link jdk.classfile.Classfile#ACC_MANDATED}\n-     *\/\n-    int opensFlagsMask();\n-\n-    default Set<AccessFlag> opensFlags() {\n-        return AccessFlag.maskToAccessFlags(opensFlagsMask(), AccessFlag.Location.MODULE_OPENS);\n-    }\n-\n-    \/**\n-     * {@return whether the specified access flag is set}\n-     * @param flag the access flag\n-     *\/\n-    default boolean has(AccessFlag flag) {\n-        return Util.has(AccessFlag.Location.MODULE_OPENS, opensFlagsMask(), flag);\n-    }\n-\n-    \/**\n-     * The list of modules to which this package is opened, if it is a\n-     * qualified open.\n-     *\n-     * @return the modules to which this package is opened\n-     *\/\n-    List<ModuleEntry> opensTo();\n-\n-    \/**\n-     * {@return a module open description}\n-     * @param opens the package to open\n-     * @param opensFlags the open flags\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n-     *\/\n-    static ModuleOpenInfo of(PackageEntry opens, int opensFlags,\n-                             List<ModuleEntry> opensTo) {\n-        return new UnboundAttribute.UnboundModuleOpenInfo(opens, opensFlags, opensTo);\n-    }\n-\n-    \/**\n-     * {@return a module open description}\n-     * @param opens the package to open\n-     * @param opensFlags the open flags\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n-     *\/\n-    static ModuleOpenInfo of(PackageEntry opens, Collection<AccessFlag> opensFlags,\n-                             List<ModuleEntry> opensTo) {\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n-    }\n-\n-    \/**\n-     * {@return a module open description}\n-     * @param opens the package to open\n-     * @param opensFlags the open flags\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n-     *\/\n-    static ModuleOpenInfo of(PackageEntry opens,\n-                             int opensFlags,\n-                             ModuleEntry... opensTo) {\n-        return of(opens, opensFlags, List.of(opensTo));\n-    }\n-\n-    \/**\n-     * {@return a module open description}\n-     * @param opens the package to open\n-     * @param opensFlags the open flags\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n-     *\/\n-    static ModuleOpenInfo of(PackageEntry opens,\n-                             Collection<AccessFlag> opensFlags,\n-                             ModuleEntry... opensTo) {\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleOpenInfo.java","additions":0,"deletions":121,"binary":false,"changes":121,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.impl.BoundAttribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.jdktypes.PackageDesc;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModulePackages} attribute (JVMS 4.7.26), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface ModulePackagesAttribute\n-        extends Attribute<ModulePackagesAttribute>, ClassElement\n-        permits BoundAttribute.BoundModulePackagesAttribute,\n-                UnboundAttribute.UnboundModulePackagesAttribute {\n-\n-    \/**\n-     * {@return the packages that are opened or exported by this module}\n-     *\/\n-    List<PackageEntry> packages();\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute of(List<PackageEntry> packages) {\n-        return new UnboundAttribute.UnboundModulePackagesAttribute(packages);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute of(PackageEntry... packages) {\n-        return of(List.of(packages));\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute ofNames(List<PackageDesc> packages) {\n-        var p = new PackageEntry[packages.size()];\n-        for (int i = 0; i < packages.size(); i++) {\n-            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).packageInternalName()));\n-        }\n-        return of(p);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute ofNames(PackageDesc... packages) {\n-        \/\/ List view, since ref to packages is temporary\n-        return ofNames(Arrays.asList(packages));\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModulePackagesAttribute.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import java.lang.reflect.AccessFlag;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a single \"requires\" declaration in the {@link jdk.classfile.attribute.ModuleAttribute}.\n- *\/\n-public sealed interface ModuleRequireInfo\n-        permits UnboundAttribute.UnboundModuleRequiresInfo {\n-\n-    \/**\n-     * {@return The module on which the current module depends}\n-     *\/\n-    ModuleEntry requires();\n-\n-    \/**\n-     * {@return the flags associated with this require declaration, as a bit mask}\n-     * Valid flags include {@link jdk.classfile.Classfile#ACC_TRANSITIVE},\n-     * {@link jdk.classfile.Classfile#ACC_STATIC_PHASE},\n-     * {@link jdk.classfile.Classfile#ACC_SYNTHETIC} and\n-     * {@link jdk.classfile.Classfile#ACC_MANDATED}\n-     *\/\n-    int requiresFlagsMask();\n-\n-    default Set<AccessFlag> requiresFlags() {\n-        return AccessFlag.maskToAccessFlags(requiresFlagsMask(), AccessFlag.Location.MODULE_REQUIRES);\n-    }\n-\n-    \/**\n-     * {@return the required version of the required module, if present}\n-     *\/\n-    Optional<Utf8Entry> requiresVersion();\n-\n-    \/**\n-     * {@return whether the specific access flag is set}\n-     * @param flag the access flag\n-     *\/\n-    default boolean has(AccessFlag flag) {\n-        return Util.has(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleEntry requires, int requiresFlags, Utf8Entry requiresVersion) {\n-        return new UnboundAttribute.UnboundModuleRequiresInfo(requires, requiresFlags, Optional.ofNullable(requiresVersion));\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleEntry requires, Collection<AccessFlag> requiresFlags, Utf8Entry requiresVersion) {\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleDesc requires, int requiresFlags, String requiresVersion) {\n-        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.moduleName())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleDesc requires, Collection<AccessFlag> requiresFlags, String requiresVersion) {\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleRequireInfo.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleResolution} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- *  * attribute, which captures resolution metadata for modules.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\n- *  <p>The specification of the {@code ModuleResolution} attribute is:\n- * <pre> {@code\n- *  ModuleResolution_attribute {\n- *    u2 attribute_name_index;    \/\/ \"ModuleResolution\"\n- *    u4 attribute_length;        \/\/ 2\n- *    u2 resolution_flags;\n- *\n- *  The value of the resolution_flags item is a mask of flags used to denote\n- *  properties of module resolution. The flags are as follows:\n- *\n- *   \/\/ Optional\n- *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n- *\n- *   \/\/ At most one of:\n- *   0x0002 (WARN_DEPRECATED)\n- *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n- *   0x0008 (WARN_INCUBATING)\n- *  }\n- * } <\/pre>\n- *\/\n-public sealed interface ModuleResolutionAttribute\n-        extends Attribute<ModuleResolutionAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleResolutionAttribute, UnboundAttribute.UnboundModuleResolutionAttribute {\n-\n-    \/**\n-     *  The value of the resolution_flags item is a mask of flags used to denote\n-     *  properties of module resolution. The flags are as follows:\n-     *\n-     *   \/\/ Optional\n-     *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n-     *\n-     *   \/\/ At most one of:\n-     *   0x0002 (WARN_DEPRECATED)\n-     *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n-     *   0x0008 (WARN_INCUBATING)\n-     *\/\n-    int resolutionFlags();\n-\n-    \/**\n-     * {@return a {@code ModuleResolution} attribute}\n-     * @param resolutionFlags the resolution falgs\n-     *\/\n-    static ModuleResolutionAttribute of(int resolutionFlags) {\n-        return new UnboundAttribute.UnboundModuleResolutionAttribute(resolutionFlags);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleTarget} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- * attribute, which captures constraints on the target platform.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\n- * <p>The specification of the {@code ModuleTarget} attribute is:\n- * <pre> {@code\n- * TargetPlatform_attribute {\n- *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n- *   \/\/ the string \"ModuleTarget\"\n- *   u2 attribute_name_index;\n- *   u4 attribute_length;\n- *\n- *   \/\/ index to CONSTANT_utf8_info structure with the target platform\n- *   u2 target_platform_index;\n- * }\n- * } <\/pre>\n- *\/\n-public sealed interface ModuleTargetAttribute\n-        extends Attribute<ModuleTargetAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleTargetAttribute, UnboundAttribute.UnboundModuleTargetAttribute {\n-\n-    \/**\n-     * {@return the target platform}\n-     *\/\n-    Utf8Entry targetPlatform();\n-\n-    \/**\n-     * {@return a {@code ModuleTarget} attribute}\n-     * @param targetPlatform the target platform\n-     *\/\n-    static ModuleTargetAttribute of(String targetPlatform) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(targetPlatform));\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleTarget} attribute}\n-     * @param targetPlatform the target platform\n-     *\/\n-    static ModuleTargetAttribute of(Utf8Entry targetPlatform) {\n-        return new UnboundAttribute.UnboundModuleTargetAttribute(targetPlatform);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleTargetAttribute.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code NestHost} attribute (JVMS 4.7.28), which can\n- * appear on classes to indicate that this class is a member of a nest.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface NestHostAttribute extends Attribute<NestHostAttribute>, ClassElement\n-        permits BoundAttribute.BoundNestHostAttribute,\n-                UnboundAttribute.UnboundNestHostAttribute {\n-\n-    \/**\n-     * {@return the host class of the nest to which this class belongs}\n-     *\/\n-    ClassEntry nestHost();\n-\n-    \/**\n-     * {@return a {@code NestHost} attribute}\n-     * @param nestHost the host class of the nest\n-     *\/\n-    static NestHostAttribute of(ClassEntry nestHost) {\n-        return new UnboundAttribute.UnboundNestHostAttribute(nestHost);\n-    }\n-\n-    \/**\n-     * {@return a {@code NestHost} attribute}\n-     * @param nestHost the host class of the nest\n-     *\/\n-    static NestHostAttribute of(ClassDesc nestHost) {\n-        return of(TemporaryConstantPool.INSTANCE.classEntry(nestHost));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/NestHostAttribute.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code NestMembers} attribute (JVMS 4.7.29), which can\n- * appear on classes to indicate that this class is the host of a nest.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface NestMembersAttribute extends Attribute<NestMembersAttribute>, ClassElement\n-        permits BoundAttribute.BoundNestMembersAttribute, UnboundAttribute.UnboundNestMembersAttribute {\n-\n-    \/**\n-     * {@return the classes belonging to the nest hosted by this class}\n-     *\/\n-    List<ClassEntry> nestMembers();\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute of(List<ClassEntry> nestMembers) {\n-        return new UnboundAttribute.UnboundNestMembersAttribute(nestMembers);\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute of(ClassEntry... nestMembers) {\n-        return of(List.of(nestMembers));\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute ofSymbols(List<ClassDesc> nestMembers) {\n-        return of(Util.entryList(nestMembers));\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute ofSymbols(ClassDesc... nestMembers) {\n-        \/\/ List view, since ref to nestMembers is temporary\n-        return ofSymbols(Arrays.asList(nestMembers));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/NestMembersAttribute.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code PermittedSubclasses} attribute (JVMS 4.7.31), which can\n- * appear on classes to indicate which classes may extend this class.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface PermittedSubclassesAttribute\n-        extends Attribute<PermittedSubclassesAttribute>, ClassElement\n-        permits BoundAttribute.BoundPermittedSubclassesAttribute, UnboundAttribute.UnboundPermittedSubclassesAttribute {\n-\n-    \/**\n-     * {@return the list of permitted subclasses}\n-     *\/\n-    List<ClassEntry> permittedSubclasses();\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute of(List<ClassEntry> permittedSubclasses) {\n-        return new UnboundAttribute.UnboundPermittedSubclassesAttribute(permittedSubclasses);\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute of(ClassEntry... permittedSubclasses) {\n-        return of(List.of(permittedSubclasses));\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute ofSymbols(List<ClassDesc> permittedSubclasses) {\n-        return of(Util.entryList(permittedSubclasses));\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute ofSymbols(ClassDesc... permittedSubclasses) {\n-        \/\/ List view, since ref to nestMembers is temporary\n-        return ofSymbols(Arrays.asList(permittedSubclasses));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/PermittedSubclassesAttribute.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Record} attribute (JVMS 4.7.30), which can\n- * appear on classes to indicate that this class is a record class.\n- * Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.classfile.ClassModel}.\n- *\/\n-public sealed interface RecordAttribute extends Attribute<RecordAttribute>, ClassElement\n-        permits BoundAttribute.BoundRecordAttribute, UnboundAttribute.UnboundRecordAttribute {\n-\n-    \/**\n-     * {@return the components of this record class}\n-     *\/\n-    List<RecordComponentInfo> components();\n-\n-    \/**\n-     * {@return a {@code Record} attribute}\n-     * @param components the record components\n-     *\/\n-    static RecordAttribute of(List<RecordComponentInfo> components) {\n-        return new UnboundAttribute.UnboundRecordAttribute(components);\n-    }\n-\n-    \/**\n-     * {@return a {@code Record} attribute}\n-     * @param components the record components\n-     *\/\n-    static RecordAttribute of(RecordComponentInfo... components) {\n-        return of(List.of(components));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RecordAttribute.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributedElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundRecordComponentInfo;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a single record component in the {@link jdk.classfile.attribute.RecordAttribute}.\n- *\/\n-public sealed interface RecordComponentInfo\n-        extends AttributedElement\n-        permits BoundRecordComponentInfo, UnboundAttribute.UnboundRecordComponentInfo {\n-    \/**\n-     * {@return the name of this component}\n-     *\/\n-    Utf8Entry name();\n-\n-    \/**\n-     * {@return the field descriptor of this component}\n-     *\/\n-    Utf8Entry descriptor();\n-\n-    \/**\n-     * {@return the field descriptor of this component, as a {@linkplain ClassDesc}}\n-     *\/\n-    default ClassDesc descriptorSymbol() {\n-        return ClassDesc.ofDescriptor(descriptor().stringValue());\n-    }\n-\n-    @Override\n-    default Kind attributedElementKind() {\n-        return Kind.RECORD_COMPONENT;\n-    }\n-\n-    \/**\n-     * {@return a record component description}\n-     * @param name the component name\n-     * @param descriptor the component field descriptor\n-     * @param attributes the component attributes\n-     *\/\n-    static RecordComponentInfo of(Utf8Entry name,\n-                                  Utf8Entry descriptor,\n-                                  List<Attribute<?>> attributes) {\n-        return new UnboundAttribute.UnboundRecordComponentInfo(name, descriptor, attributes);\n-    }\n-\n-    \/**\n-     * {@return a record component description}\n-     * @param name the component name\n-     * @param descriptor the component field descriptor\n-     * @param attributes the component attributes\n-     *\/\n-    static RecordComponentInfo of(Utf8Entry name,\n-                                  Utf8Entry descriptor,\n-                                  Attribute<?>... attributes) {\n-        return of(name, descriptor, List.of(attributes));\n-    }\n-\n-    \/**\n-     * {@return a record component description}\n-     * @param name the component name\n-     * @param descriptor the component field descriptor\n-     * @param attributes the component attributes\n-     *\/\n-    static RecordComponentInfo of(String name,\n-                                  ClassDesc descriptor,\n-                                  List<Attribute<?>> attributes) {\n-        return new UnboundAttribute.UnboundRecordComponentInfo(TemporaryConstantPool.INSTANCE.utf8Entry(name),\n-                                                               TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n-                                                               attributes);\n-    }\n-\n-    \/**\n-     * {@return a record component description}\n-     * @param name the component name\n-     * @param descriptor the component field descriptor\n-     * @param attributes the component attributes\n-     *\/\n-    static RecordComponentInfo of(String name,\n-                                  ClassDesc descriptor,\n-                                  Attribute<?>... attributes) {\n-        return of(name, descriptor, List.of(attributes));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RecordComponentInfo.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.*;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleAnnotations} attribute (JVMS 4.7.17), which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement}, or\n- * {@link jdk.classfile.MethodElement} when traversing the corresponding model type.\n- *\/\n-public sealed interface RuntimeInvisibleAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundRuntimeInvisibleAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the non-runtime-visible annotations on this class, field, or method}\n-     *\/\n-    List<Annotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleAnnotationsAttribute of(List<Annotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleAnnotationsAttribute of(Annotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeInvisibleAnnotationsAttribute.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Annotation;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleParameterAnnotations} attribute (JVMS\n- * 4.7.19), which can appear on methods. Delivered as a {@link\n- * jdk.classfile.MethodElement} when traversing a {@link MethodModel}.\n- *\/\n-public sealed interface RuntimeInvisibleParameterAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleParameterAnnotationsAttribute>, MethodElement\n-        permits BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the list of annotations corresponding to each method parameter}\n-     * The element at the i'th index corresponds to the annotations on the i'th\n-     * parameter.\n-     *\/\n-    List<List<Annotation>> parameterAnnotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleParameterAnnotations} attribute}\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n-     *\/\n-    static RuntimeInvisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute(parameterAnnotations);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeInvisibleParameterAnnotationsAttribute.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.TypeAnnotation;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleTypeAnnotations} attribute (JVMS 4.7.21), which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement},\n- * {@link jdk.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n- *\/\n-public sealed interface RuntimeInvisibleTypeAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleTypeAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement, CodeElement\n-        permits BoundAttribute.BoundRuntimeInvisibleTypeAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the non-runtime-visible type annotations on parts of this class, field, or method}\n-     *\/\n-    List<TypeAnnotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeInvisibleTypeAnnotationsAttribute.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.*;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * Models the {@code RuntimeVisibleAnnotations} attribute (JVMS 4.7.16), which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement}, or\n- * {@link jdk.classfile.MethodElement} when traversing the corresponding model type.\n- *\/\n-public sealed interface RuntimeVisibleAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the runtime-visible annotations on this class, field, or method}\n-     *\/\n-    List<Annotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleAnnotationsAttribute of(List<Annotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleAnnotationsAttribute of(Annotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Annotation;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeVisibleParameterAnnotations} attribute (JVMS 4.7.18), which\n- * can appear on methods. Delivered as a {@link jdk.classfile.MethodElement}\n- * when traversing a {@link MethodModel}.\n- *\/\n-public sealed interface RuntimeVisibleParameterAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleParameterAnnotationsAttribute>, MethodElement\n-        permits BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the list of annotations corresponding to each method parameter}\n-     * The element at the i'th index corresponds to the annotations on the i'th\n-     * parameter.\n-     *\/\n-    List<List<Annotation>> parameterAnnotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleParameterAnnotations} attribute}\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n-     *\/\n-    static RuntimeVisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute(parameterAnnotations);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeVisibleParameterAnnotationsAttribute.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.TypeAnnotation;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeVisibleTypeAnnotations} attribute (JVMS 4.7.20), which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement},\n- * {@link jdk.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n- *\/\n-public sealed interface RuntimeVisibleTypeAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleTypeAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement, CodeElement\n-        permits BoundAttribute.BoundRuntimeVisibleTypeAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the runtime-visible type annotations on parts of this class, field, or method}\n-     *\/\n-    List<TypeAnnotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/RuntimeVisibleTypeAnnotationsAttribute.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassSignature;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.MethodSignature;\n-import jdk.classfile.Signature;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Signature} attribute (JVMS 4.7.9), which\n- * can appear on classes, methods, or fields. Delivered as a\n- * {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement}, or\n- * {@link jdk.classfile.MethodElement} when traversing\n- * the corresponding model type.\n- *\/\n-public sealed interface SignatureAttribute\n-        extends Attribute<SignatureAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundSignatureAttribute, UnboundAttribute.UnboundSignatureAttribute {\n-\n-    \/**\n-     * {@return the signature for the class, method, or field}\n-     *\/\n-    Utf8Entry signature();\n-\n-    \/**\n-     * Parse the siganture as a class signature.\n-     * @return the class signature\n-     *\/\n-    default ClassSignature asClassSignature() {\n-        return ClassSignature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * Parse the siganture as a method signature.\n-     * @return the method signature\n-     *\/\n-    default MethodSignature asMethodSignature() {\n-        return MethodSignature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * Parse the siganture as a type signature.\n-     * @return the type signature\n-     *\/\n-    default Signature asTypeSignature() {\n-        return Signature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute for a class}\n-     * @param classSignature the signature\n-     *\/\n-    static SignatureAttribute of(ClassSignature classSignature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(classSignature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute for a method}\n-     * @param methodSignature the signature\n-     *\/\n-    static SignatureAttribute of(MethodSignature methodSignature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(methodSignature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute}\n-     * @param signature the signature\n-     *\/\n-    static SignatureAttribute of(Signature signature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute}\n-     * @param signature the signature\n-     *\/\n-    static SignatureAttribute of(Utf8Entry signature) {\n-        return new UnboundAttribute.UnboundSignatureAttribute(signature);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/SignatureAttribute.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * SourceDebugExtensionAttribute.\n- *\/\n-public sealed interface SourceDebugExtensionAttribute\n-        extends Attribute<SourceDebugExtensionAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceDebugExtensionAttribute, UnboundAttribute.UnboundSourceDebugExtensionAttribute {\n-\n-    \/**\n-     * {@return the debug extension payload}\n-     *\/\n-    byte[] contents();\n-\n-    \/**\n-     * {@return a {@code SourceDebugExtension} attribute}\n-     * @param contents the extension contents\n-     *\/\n-    static SourceDebugExtensionAttribute of(byte[] contents) {\n-        return new UnboundAttribute.UnboundSourceDebugExtensionAttribute(contents);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code SourceFile} attribute (JVMS 4.7.10), which\n- * can appear on classes. Delivered as a {@link jdk.classfile.ClassElement}\n- * when traversing a {@link ClassModel}.\n- *\/\n-public sealed interface SourceFileAttribute\n-        extends Attribute<SourceFileAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceFileAttribute, UnboundAttribute.UnboundSourceFileAttribute {\n-\n-    \/**\n-     * {@return the name of the source file from which this class was compiled}\n-     *\/\n-    Utf8Entry sourceFile();\n-\n-    static SourceFileAttribute of(String sourceFile) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceFile));\n-    }\n-\n-    static SourceFileAttribute of(Utf8Entry sourceFile) {\n-        return new UnboundAttribute.UnboundSourceFileAttribute(sourceFile);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/SourceFileAttribute.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code SourceFile} attribute (@@@ reference needed), which can\n- * appear on classes. Delivered as a {@link jdk.classfile.ClassElement} when\n- * traversing a {@link ClassModel}.\n- *\/\n-public sealed interface SourceIDAttribute\n-        extends Attribute<SourceIDAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceIDAttribute, UnboundAttribute.UnboundSourceIDAttribute {\n-\n-    \/**\n-     * {@return the source id}  The source id is the last modified time of the\n-     * source file (as reported by the filesystem, in milliseconds) when the\n-     * classfile is compiled.\n-     *\/\n-    Utf8Entry sourceId();\n-\n-    \/**\n-     * {@return a {@code SourceID} attribute}\n-     * @param sourceId the source id\n-     *\/\n-    static SourceIDAttribute of(Utf8Entry sourceId) {\n-        return new UnboundAttribute.UnboundSourceIDAttribute(sourceId);\n-    }\n-\n-    \/**\n-     * {@return a {@code SourceID} attribute}\n-     * @param sourceId the source id\n-     *\/\n-    static SourceIDAttribute of(String sourceId) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceId));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/SourceIDAttribute.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Label;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.StackMapDecoder;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import static jdk.classfile.Classfile.*;\n-\n-\/**\n- * Models the {@code StackMapTable} attribute (JVMS 4.7.4), which can appear\n- * on a {@code Code} attribute.\n- *\/\n-public sealed interface StackMapTableAttribute\n-        extends Attribute<StackMapTableAttribute>, CodeElement\n-        permits BoundAttribute.BoundStackMapTableAttribute, UnboundAttribute.UnboundStackMapTableAttribute {\n-\n-    \/**\n-     * {@return the stack map frames}\n-     *\/\n-    List<StackMapFrameInfo> entries();\n-\n-    public static StackMapTableAttribute of(List<StackMapFrameInfo> entries) {\n-        return new UnboundAttribute.UnboundStackMapTableAttribute(entries);\n-    }\n-\n-    \/**\n-     * The type of a stack value.\n-     *\/\n-    sealed interface VerificationTypeInfo {\n-        int tag();\n-    }\n-\n-    \/**\n-     * A simple stack value.\n-     *\/\n-    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n-        ITEM_TOP(VT_TOP),\n-        ITEM_INTEGER(VT_INTEGER),\n-        ITEM_FLOAT(VT_FLOAT),\n-        ITEM_DOUBLE(VT_DOUBLE),\n-        ITEM_LONG(VT_LONG),\n-        ITEM_NULL(VT_NULL),\n-        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n-\n-\n-        private final int tag;\n-\n-        SimpleVerificationTypeInfo(int tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public int tag() {\n-            return tag;\n-        }\n-    }\n-\n-    \/**\n-     * A stack value for an object type.\n-     *\/\n-    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n-\n-        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n-            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n-        }\n-\n-        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n-            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n-        }\n-\n-        \/**\n-         * {@return the class of the value}\n-         *\/\n-        ClassEntry className();\n-\n-        default ClassDesc classSymbol() {\n-            return className().asSymbol();\n-        }\n-    }\n-\n-    \/**\n-     * An uninitialized stack value.\n-     *\/\n-    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n-        Label newTarget();\n-\n-        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n-            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n-        }\n-    }\n-\n-    \/**\n-     * A stack map frame.\n-     *\/\n-    sealed interface StackMapFrameInfo\n-            permits StackMapDecoder.StackMapFrameImpl {\n-\n-        int frameType();\n-        Label target();\n-        List<VerificationTypeInfo> locals();\n-        List<VerificationTypeInfo> stack();\n-\n-        public static StackMapFrameInfo of(Label target,\n-                List<VerificationTypeInfo> locals,\n-                List<VerificationTypeInfo> stack) {\n-\n-            return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/StackMapTableAttribute.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Synthetic} attribute (JVMS 4.7.8), which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n- *\/\n-public sealed interface SyntheticAttribute\n-        extends Attribute<SyntheticAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundSyntheticAttribute, UnboundAttribute.UnboundSyntheticAttribute {\n-\n-    \/**\n-     * {@return a {@code Synthetic} attribute}\n-     *\/\n-    static SyntheticAttribute of() {\n-        return new UnboundAttribute.UnboundSyntheticAttribute();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/SyntheticAttribute.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.attribute;\n-\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.BoundAttribute;\n-\n-\/**\n- * Models an unknown attribute on a class, method, or field.\n- *\/\n-public sealed interface UnknownAttribute\n-        extends Attribute<UnknownAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundUnknownAttribute {\n-\n-    \/**\n-     * {@return the uninterpreted contents of the attribute payload}\n-     *\/\n-    byte[] contents();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/UnknownAttribute.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,401 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package jdk.classfile.components;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.DynamicCallSiteDesc;\n-import java.lang.constant.DynamicConstantDesc;\n-import java.lang.constant.MethodHandleDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-import jdk.classfile.Annotation;\n-import jdk.classfile.AnnotationElement;\n-import jdk.classfile.AnnotationValue;\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassSignature;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldBuilder;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.FieldTransform;\n-import jdk.classfile.Interfaces;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewObjectInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.classfile.instruction.TypeCheckInstruction;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.MethodSignature;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.Signature;\n-import jdk.classfile.Superclass;\n-import jdk.classfile.TypeAnnotation;\n-import jdk.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.InnerClassInfo;\n-import jdk.classfile.attribute.InnerClassesAttribute;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleProvideInfo;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n-import jdk.classfile.impl.Util;\n-import jdk.classfile.instruction.ConstantInstruction.LoadConstantInstruction;\n-\n-\/**\n- * ClassRemapper is a {@link jdk.classfile.ClassTransform}, {@link jdk.classfile.FieldTransform},\n- * {@link jdk.classfile.MethodTransform} and {@link jdk.classfile.CodeTransform}\n- * deeply re-mapping all class references in any form, according to given map or map function.\n- * <p>\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n- * all attributes referencing classes in any form (including all types of annotations),\n- * and to all instructions referencing to classes.\n- * <p>\n- * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n- * <p>\n- * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n- *\/\n-public sealed interface ClassRemapper extends ClassTransform {\n-\n-    \/**\n-     * Creates new instance of ClassRemapper instructed with a class map.\n-     * Map may contain only re-mapping entries, identity mapping is applied by default.\n-     * @param classMap class map\n-     * @return new instance of ClassRemapper\n-     *\/\n-    static ClassRemapper of(Map<ClassDesc, ClassDesc> classMap) {\n-        return of(desc -> classMap.getOrDefault(desc, desc));\n-    }\n-\n-    \/**\n-     * Creates new instance of ClassRemapper instructed with a map function.\n-     * Map function must return valid {@link java.lang.constant.ClassDesc} of an interface\n-     * or a class, even for identity mappings.\n-     * @param mapFunction class map function\n-     * @return new instance of ClassRemapper\n-     *\/\n-    static ClassRemapper of(Function<ClassDesc, ClassDesc> mapFunction) {\n-        return new ClassRemapperImpl(mapFunction);\n-    }\n-\n-    \/**\n-     * Access method to internal class mapping function.\n-     * @param desc source class\n-     * @return class target class\n-     *\/\n-    ClassDesc map(ClassDesc desc);\n-\n-    \/**\n-     * Returns this ClassRemapper as {@link jdk.classfile.FieldTransform} instance\n-     * @return this ClassRemapper as {@link jdk.classfile.FieldTransform} instance\n-     *\/\n-    FieldTransform asFieldTransform();\n-\n-    \/**\n-     * Returns this ClassRemapper as {@link jdk.classfile.MethodTransform} instance\n-     * @return this ClassRemapper as {@link jdk.classfile.MethodTransform} instance\n-     *\/\n-    MethodTransform asMethodTransform();\n-\n-    \/**\n-     * Returns this ClassRemapper as {@link jdk.classfile.CodeTransform} instance\n-     * @return this ClassRemapper as {@link jdk.classfile.CodeTransform} instance\n-     *\/\n-    CodeTransform asCodeTransform();\n-\n-    \/**\n-     * Remaps the whole ClassModel into a new class file, including the class name.\n-     * @param clm class model to re-map\n-     * @return re-mapped class file bytes\n-     *\/\n-    default byte[] remapClass(ClassModel clm) {\n-        return Classfile.build(map(clm.thisClass().asSymbol()),\n-                clb -> clm.forEachElement(resolve(clb).consumer()));\n-    }\n-\n-    record ClassRemapperImpl(Function<ClassDesc, ClassDesc> mapFunction) implements ClassRemapper {\n-\n-        @Override\n-        public void accept(ClassBuilder clb, ClassElement cle) {\n-            switch (cle) {\n-                case FieldModel fm ->\n-                    clb.withField(fm.fieldName().stringValue(), map(fm.fieldTypeSymbol()), fb -> fm.forEachElement(asFieldTransform().resolve(fb).consumer()));\n-                case MethodModel mm ->\n-                    clb.withMethod(mm.methodName().stringValue(), mapMethodDesc(mm.methodTypeSymbol()), mm.flags().flagsMask(), mb -> mm.forEachElement(asMethodTransform().resolve(mb).consumer()));\n-                case Superclass sc ->\n-                    clb.withSuperclass(map(sc.superclassEntry().asSymbol()));\n-                case Interfaces ins ->\n-                    clb.withInterfaceSymbols(Util.mappedList(ins.interfaces(), in -> map(in.asSymbol())));\n-                case SignatureAttribute sa ->\n-                    clb.with(SignatureAttribute.of(mapClassSignature(sa.asClassSignature())));\n-                case InnerClassesAttribute ica ->\n-                    clb.with(InnerClassesAttribute.of(ica.classes().stream().map(ici ->\n-                            InnerClassInfo.of(map(ici.innerClass().asSymbol()),\n-                                    ici.outerClass().map(oc -> map(oc.asSymbol())),\n-                                    ici.innerName().map(Utf8Entry::stringValue),\n-                                    ici.flagsMask())).toList()));\n-                case EnclosingMethodAttribute ema ->\n-                    clb.with(EnclosingMethodAttribute.of(map(ema.enclosingClass().asSymbol()),\n-                            ema.enclosingMethodName().map(Utf8Entry::stringValue),\n-                            ema.enclosingMethodTypeSymbol().map(this::mapMethodDesc)));\n-                case RecordAttribute ra ->\n-                    clb.with(RecordAttribute.of(ra.components().stream().map(this::mapRecordComponent).toList()));\n-                case ModuleAttribute ma ->\n-                    clb.with(ModuleAttribute.of(ma.moduleName(), ma.moduleFlagsMask(), ma.moduleVersion().orElse(null),\n-                            ma.requires(), ma.exports(), ma.opens(),\n-                            ma.uses().stream().map(ce -> clb.constantPool().classEntry(map(ce.asSymbol()))).toList(),\n-                            ma.provides().stream().map(mp -> ModuleProvideInfo.of(map(mp.provides().asSymbol()),\n-                                    mp.providesWith().stream().map(pw -> map(pw.asSymbol())).toList())).toList()));\n-                case RuntimeVisibleAnnotationsAttribute aa ->\n-                    clb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                case RuntimeInvisibleAnnotationsAttribute aa ->\n-                    clb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                case RuntimeVisibleTypeAnnotationsAttribute aa ->\n-                    clb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n-                    clb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                default ->\n-                    clb.with(cle);\n-            }\n-        }\n-\n-        @Override\n-        public FieldTransform asFieldTransform() {\n-            return (FieldBuilder fb, FieldElement fe) -> {\n-                switch (fe) {\n-                    case SignatureAttribute sa ->\n-                        fb.with(SignatureAttribute.of(mapSignature(sa.asTypeSignature())));\n-                    case RuntimeVisibleAnnotationsAttribute aa ->\n-                        fb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                    case RuntimeInvisibleAnnotationsAttribute aa ->\n-                        fb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n-                        fb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n-                        fb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    default ->\n-                        fb.with(fe);\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public MethodTransform asMethodTransform() {\n-            return (MethodBuilder mb, MethodElement me) -> {\n-                switch (me) {\n-                    case CodeModel com ->\n-                        mb.transformCode(com, asCodeTransform());\n-                    case ExceptionsAttribute ea ->\n-                        mb.with(ExceptionsAttribute.ofSymbols(ea.exceptions().stream().map(ce -> map(ce.asSymbol())).toList()));\n-                    case SignatureAttribute sa ->\n-                        mb.with(SignatureAttribute.of(mapMethodSignature(sa.asMethodSignature())));\n-                    case RuntimeVisibleAnnotationsAttribute aa ->\n-                        mb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                    case RuntimeInvisibleAnnotationsAttribute aa ->\n-                        mb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n-                    case RuntimeVisibleParameterAnnotationsAttribute paa ->\n-                        mb.with(RuntimeVisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n-                    case RuntimeInvisibleParameterAnnotationsAttribute paa ->\n-                        mb.with(RuntimeInvisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n-                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n-                        mb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n-                        mb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    default ->\n-                        mb.with(me);\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public CodeTransform asCodeTransform() {\n-            return (CodeBuilder cob, CodeElement coe) -> {\n-                switch (coe) {\n-                    case FieldInstruction fai ->\n-                        cob.fieldInstruction(fai.opcode(), map(fai.owner().asSymbol()), fai.name().stringValue(), map(fai.typeSymbol()));\n-                    case InvokeInstruction ii ->\n-                        cob.invokeInstruction(ii.opcode(), map(ii.owner().asSymbol()), ii.name().stringValue(), mapMethodDesc(ii.typeSymbol()), ii.isInterface());\n-                    case InvokeDynamicInstruction idi ->\n-                        cob.invokeDynamicInstruction(DynamicCallSiteDesc.of(idi.bootstrapMethod(), idi.name().stringValue(), mapMethodDesc(idi.typeSymbol())));\n-                    case NewObjectInstruction c ->\n-                        cob.newObjectInstruction(map(c.className().asSymbol()));\n-                    case NewReferenceArrayInstruction c ->\n-                        cob.anewarray(map(c.componentType().asSymbol()));\n-                    case NewMultiArrayInstruction c ->\n-                        cob.multianewarray(map(c.arrayType().asSymbol()), c.dimensions());\n-                    case TypeCheckInstruction c ->\n-                        cob.typeCheckInstruction(c.opcode(), map(c.type().asSymbol()));\n-                    case ExceptionCatch c ->\n-                        cob.exceptionCatch(c.tryStart(), c.tryEnd(), c.handler(), c.catchType().map(d -> TemporaryConstantPool.INSTANCE.classEntry(map(d.asSymbol()))));\n-                    case LocalVariable c ->\n-                        cob.localVariable(c.slot(), c.name().stringValue(), map(c.typeSymbol()), c.startScope(), c.endScope());\n-                    case LocalVariableType c ->\n-                        cob.localVariableType(c.slot(), c.name().stringValue(), mapSignature(c.signatureSymbol()), c.startScope(), c.endScope());\n-                    case LoadConstantInstruction ldc ->\n-                        cob.constantInstruction(ldc.opcode(), mapConstantValue(ldc.constantValue()));\n-                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n-                        cob.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n-                        cob.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n-                    default ->\n-                        cob.with(coe);\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public ClassDesc map(ClassDesc desc) {\n-            if (desc == null) return null;\n-            if (desc.isArray()) return map(desc.componentType()).arrayType();\n-            if (desc.isPrimitive()) return desc;\n-            return mapFunction.apply(desc);\n-        }\n-\n-        MethodTypeDesc mapMethodDesc(MethodTypeDesc desc) {\n-            return MethodTypeDesc.of(map(desc.returnType()), desc.parameterList().stream().map(this::map).toArray(ClassDesc[]::new));\n-        }\n-\n-        ClassSignature mapClassSignature(ClassSignature signature) {\n-            return ClassSignature.of(signature.typeParameters(),\n-                    mapSignature(signature.superclassSignature()),\n-                    signature.superinterfaceSignatures().stream().map(this::mapSignature).toArray(Signature.RefTypeSig[]::new));\n-        }\n-\n-        MethodSignature mapMethodSignature(MethodSignature signature) {\n-            return MethodSignature.of(signature.typeParameters(),\n-                    signature.throwableSignatures().stream().map(this::mapSignature).toList(),\n-                    mapSignature(signature.result()),\n-                    signature.arguments().stream().map(this::mapSignature).toArray(Signature[]::new));\n-        }\n-\n-        RecordComponentInfo mapRecordComponent(RecordComponentInfo component) {\n-            return RecordComponentInfo.of(component.name().stringValue(), map(component.descriptorSymbol()),\n-                    component.attributes().stream().map(atr ->\n-                        switch (atr) {\n-                            case SignatureAttribute sa ->\n-                                SignatureAttribute.of(mapSignature(sa.asTypeSignature()));\n-                            case RuntimeVisibleAnnotationsAttribute aa ->\n-                                RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n-                            case RuntimeInvisibleAnnotationsAttribute aa ->\n-                                RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n-                            case RuntimeVisibleTypeAnnotationsAttribute aa ->\n-                                RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n-                            case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n-                                RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n-                            default -> atr;\n-                        }).toList());\n-        }\n-\n-        DirectMethodHandleDesc mapDirectMethodHandle(DirectMethodHandleDesc dmhd) {\n-            return switch (dmhd.kind()) {\n-                case GETTER, SETTER, STATIC_GETTER, STATIC_SETTER ->\n-                    MethodHandleDesc.ofField(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), map(ClassDesc.ofDescriptor(dmhd.lookupDescriptor())));\n-                default ->\n-                    MethodHandleDesc.ofMethod(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), mapMethodDesc(MethodTypeDesc.ofDescriptor(dmhd.lookupDescriptor())));\n-            };\n-        }\n-\n-        ConstantDesc mapConstantValue(ConstantDesc value) {\n-            return switch (value) {\n-                case ClassDesc cd ->\n-                    map(cd);\n-                case DynamicConstantDesc<?> dcd ->\n-                    mapDynamicConstant(dcd);\n-                case DirectMethodHandleDesc dmhd ->\n-                    mapDirectMethodHandle(dmhd);\n-                case MethodTypeDesc mtd ->\n-                    mapMethodDesc(mtd);\n-                default -> value;\n-            };\n-        }\n-\n-        DynamicConstantDesc<?> mapDynamicConstant(DynamicConstantDesc<?> dcd) {\n-            return DynamicConstantDesc.ofNamed(mapDirectMethodHandle(dcd.bootstrapMethod()),\n-                    dcd.constantName(),\n-                    map(dcd.constantType()),\n-                    dcd.bootstrapArgsList().stream().map(this::mapConstantValue).toArray(ConstantDesc[]::new));\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        <S extends Signature> S mapSignature(S signature) {\n-            return (S) switch (signature) {\n-                case Signature.ArrayTypeSig ats ->\n-                    Signature.ArrayTypeSig.of(mapSignature(ats.componentSignature()));\n-                case Signature.ClassTypeSig cts ->\n-                    Signature.ClassTypeSig.of(cts.outerType().map(this::mapSignature).orElse(null),\n-                            map(cts.classDesc()), cts.typeArgs().stream().map(this::mapSignature).toArray(Signature[]::new));\n-                default -> signature;\n-            };\n-        }\n-\n-        List<Annotation> mapAnnotations(List<Annotation> annotations) {\n-            return annotations.stream().map(this::mapAnnotation).toList();\n-        }\n-\n-        Annotation mapAnnotation(Annotation a) {\n-            return Annotation.of(map(a.classSymbol()), a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList());\n-        }\n-\n-        AnnotationValue mapAnnotationValue(AnnotationValue val) {\n-            return switch (val) {\n-                case AnnotationValue.OfAnnotation oa -> AnnotationValue.ofAnnotation(mapAnnotation(oa.annotation()));\n-                case AnnotationValue.OfArray oa -> AnnotationValue.ofArray(oa.values().stream().map(this::mapAnnotationValue).toList());\n-                case AnnotationValue.OfConstant oc -> oc;\n-                case AnnotationValue.OfClass oc -> AnnotationValue.ofClass(map(oc.classSymbol()));\n-                case AnnotationValue.OfEnum oe -> AnnotationValue.ofEnum(map(oe.classSymbol()), oe.constantName().stringValue());\n-            };\n-        }\n-\n-        List<TypeAnnotation> mapTypeAnnotations(List<TypeAnnotation> typeAnnotations) {\n-            return typeAnnotations.stream().map(a -> TypeAnnotation.of(a.targetInfo(), a.targetPath(), map(a.classSymbol()),\n-                    a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList())).toList();\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/ClassRemapper.java","additions":0,"deletions":401,"binary":false,"changes":401,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package jdk.classfile.components;\n-\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.Arrays;\n-\n-import java.lang.reflect.AccessFlag;\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.Signature;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.LocalVariableType;\n-\n-\/**\n- * CodeLocalsShifter is a {@link jdk.classfile.CodeTransform} shifting locals to\n- * newly allocated positions to avoid conflicts during code injection.\n- * Locals pointing to the receiver or to method arguments slots are never shifted.\n- * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n- *\/\n-public sealed interface CodeLocalsShifter extends CodeTransform {\n-\n-    \/**\n-     * Creates a new instance of CodeLocalsShifter\n-     * with fixed local slots calculated from provided method information\n-     * @param methodFlags flags of the method to construct CodeLocalsShifter for\n-     * @param methodDescriptor descriptor of the method to construct CodeLocalsShifter for\n-     * @return new instance of CodeLocalsShifter\n-     *\/\n-    static CodeLocalsShifter of(AccessFlags methodFlags, MethodTypeDesc methodDescriptor) {\n-        int fixed = methodFlags.has(AccessFlag.STATIC) ? 0 : 1;\n-        for (var param : methodDescriptor.parameterList())\n-            fixed += TypeKind.fromDescriptor(param.descriptorString()).slotSize();\n-        return new CodeLocalsShifterImpl(fixed);\n-    }\n-\n-    final static class CodeLocalsShifterImpl implements CodeLocalsShifter {\n-\n-        private int[] locals = new int[0];\n-        private final int fixed;\n-\n-        private CodeLocalsShifterImpl(int fixed) {\n-            this.fixed = fixed;\n-        }\n-\n-        @Override\n-        public void accept(CodeBuilder cob, CodeElement coe) {\n-            switch (coe) {\n-                case LoadInstruction li ->\n-                    cob.loadInstruction(\n-                            li.typeKind(),\n-                            shift(cob, li.slot(), li.typeKind()));\n-                case StoreInstruction si ->\n-                    cob.storeInstruction(\n-                            si.typeKind(),\n-                            shift(cob, si.slot(), si.typeKind()));\n-                case IncrementInstruction ii ->\n-                    cob.incrementInstruction(\n-                            shift(cob, ii.slot(), TypeKind.IntType),\n-                            ii.constant());\n-                case LocalVariable lv ->\n-                    cob.localVariable(\n-                            shift(cob, lv.slot(), TypeKind.fromDescriptor(lv.type().stringValue())),\n-                            lv.name(),\n-                            lv.type(),\n-                            lv.startScope(),\n-                            lv.endScope());\n-                case LocalVariableType lvt ->\n-                    cob.localVariableType(\n-                            shift(cob, lvt.slot(),\n-                                    (lvt.signatureSymbol() instanceof Signature.BaseTypeSig bsig)\n-                                            ? TypeKind.fromDescriptor(bsig.signatureString())\n-                                            : TypeKind.ReferenceType),\n-                            lvt.name(),\n-                            lvt.signature(),\n-                            lvt.startScope(),\n-                            lvt.endScope());\n-                default -> cob.with(coe);\n-            }\n-        }\n-\n-        private int shift(CodeBuilder cob, int slot, TypeKind tk) {\n-            if (tk == TypeKind.VoidType)  throw new IllegalArgumentException(\"Illegal local void type\");\n-            if (slot >= fixed) {\n-                int key = 2*slot - fixed + tk.slotSize() - 1;\n-                if (key >= locals.length) locals = Arrays.copyOf(locals, key + 20);\n-                slot = locals[key] - 1;\n-                if (slot < 0) {\n-                    slot = cob.allocateLocal(tk);\n-                    locals[key] = slot + 1;\n-                    if (tk.slotSize() == 2) locals[key - 1] = slot + 1;\n-                }\n-            }\n-            return slot;\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/CodeLocalsShifter.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package jdk.classfile.components;\n-\n-import java.util.IdentityHashMap;\n-import java.util.Map;\n-import java.util.function.BiFunction;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.LookupSwitchInstruction;\n-import jdk.classfile.instruction.SwitchCase;\n-import jdk.classfile.instruction.TableSwitchInstruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.LabelTarget;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n-\n-\/**\n- * CodeRelabeler is a {@link jdk.classfile.CodeTransform} replacing all occurences\n- * of {@link jdk.classfile.Label} in the transformed code with new instances.\n- * All {@link jdk.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n- * Relabeled code graph is identical to the original.\n- * <p>\n- * Primary purpose of CodeRelabeler is for repeated injections of the same code blocks.\n- * Repeated injection of the same code block must be relabeled, so each instance of\n- * {@link jdk.classfile.Label} is bound in the target bytecode exactly once.\n- *\/\n-public sealed interface CodeRelabeler extends CodeTransform {\n-\n-    \/**\n-     * Creates new instance of CodeRelabeler\n-     * @return new instance of CodeRelabeler\n-     *\/\n-    static CodeRelabeler of() {\n-        return of(new IdentityHashMap<>());\n-    }\n-\n-    \/**\n-     * Creates new instance of CodeRelabeler storing the label mapping into the provided map\n-     * @param map label map actively used for relabeling\n-     * @return new instance of CodeRelabeler\n-     *\/\n-    static CodeRelabeler of(Map<Label, Label> map) {\n-        return of((l, cob) -> map.computeIfAbsent(l, ll -> cob.newLabel()));\n-    }\n-\n-    \/**\n-     * Creates new instance of CodeRelabeler using provided {@link java.util.function.BiFunction}\n-     * to re-label the code.\n-     * @param mapFunction\n-     * @return\n-     *\/\n-    static CodeRelabeler of(BiFunction<Label, CodeBuilder, Label> mapFunction) {\n-        return new CodeRelabelerImpl(mapFunction);\n-    }\n-\n-    \/**\n-     * Access method to internal re-labeling function.\n-     * @param label source label\n-     * @param codeBuilder builder to create new labels\n-     * @return target label\n-     *\/\n-    Label relabel(Label label, CodeBuilder codeBuilder);\n-\n-    record CodeRelabelerImpl(BiFunction<Label, CodeBuilder, Label> mapFunction) implements  CodeRelabeler {\n-\n-        @Override\n-        public Label relabel(Label label, CodeBuilder cob) {\n-            return mapFunction.apply(label, cob);\n-        }\n-\n-        @Override\n-        public void accept(CodeBuilder cob, CodeElement coe) {\n-            switch (coe) {\n-                case BranchInstruction bi ->\n-                    cob.branchInstruction(\n-                            bi.opcode(),\n-                            relabel(bi.target(), cob));\n-                case LookupSwitchInstruction lsi ->\n-                    cob.lookupSwitchInstruction(\n-                            relabel(lsi.defaultTarget(), cob),\n-                            lsi.cases().stream().map(c ->\n-                                    SwitchCase.of(\n-                                            c.caseValue(),\n-                                            relabel(c.target(), cob))).toList());\n-                case TableSwitchInstruction tsi ->\n-                    cob.tableSwitchInstruction(\n-                            tsi.lowValue(),\n-                            tsi.highValue(),\n-                            relabel(tsi.defaultTarget(), cob),\n-                            tsi.cases().stream().map(c ->\n-                                    SwitchCase.of(\n-                                            c.caseValue(),\n-                                            relabel(c.target(), cob))).toList());\n-                case LabelTarget lt ->\n-                    cob.labelBinding(\n-                            relabel(lt.label(), cob));\n-                case ExceptionCatch ec ->\n-                    cob.exceptionCatch(\n-                            relabel(ec.tryStart(), cob),\n-                            relabel(ec.tryEnd(), cob),\n-                            relabel(ec.handler(), cob),\n-                            ec.catchType());\n-                case LocalVariable lv ->\n-                    cob.localVariable(\n-                            lv.slot(),\n-                            lv.name().stringValue(),\n-                            lv.typeSymbol(),\n-                            relabel(lv.startScope(), cob),\n-                            relabel(lv.endScope(), cob));\n-                case LocalVariableType lvt ->\n-                    cob.localVariableType(\n-                            lvt.slot(),\n-                            lvt.name().stringValue(),\n-                            lvt.signatureSymbol(),\n-                            relabel(lvt.startScope(), cob),\n-                            relabel(lvt.endScope(), cob));\n-                default ->\n-                    cob.with(coe);\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/CodeRelabeler.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * <h2>Specific components, transformations, and tools built on top of the Classfile API<\/h2>\n- *\n- * The {@code jdk.classfile.components} package contains specific transformation components\n- * and utility classes helping to compose very complex tasks with minimal effort.\n- *\n- * <h3>{@link ClassPrinter}<\/h3>\n- * <p>\n- * {@link ClassPrinter} is a helper class providing seamless export of a {@link jdk.classfile.ClassModel},\n- * {@link jdk.classfile.FieldModel}, {@link jdk.classfile.MethodModel}, or {@link jdk.classfile.CodeModel}\n- * into human-readable structured text in JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n- * <p>\n- * Primary purpose of {@link ClassPrinter} is to provide human-readable class info for debugging,\n- * exception handling and logging purposes. The printed class also conforms to a standard format\n- * to support automated offline processing.\n- * <p>\n- * The most frequent use case is to simply print a class:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n- * <p>\n- * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n- * <p>\n- * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n- *\n- * <h3>{@link ClassRemapper}<\/h3>\n- * ClassRemapper is a {@link jdk.classfile.ClassTransform}, {@link jdk.classfile.FieldTransform},\n- * {@link jdk.classfile.MethodTransform} and {@link jdk.classfile.CodeTransform}\n- * deeply re-mapping all class references in any form, according to given map or map function.\n- * <p>\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n- * all attributes referencing classes in any form (including all types of annotations),\n- * and to all instructions referencing to classes.\n- * <p>\n- * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n- * <p>\n- * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n- * <p>\n- * Single class remappigng example:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"singleClassRemap\"}\n- * <p>\n- * Remapping of all classes under specific package:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"allPackageRemap\"}\n- *\n- * <h3>{@link CodeLocalsShifter}<\/h3>\n- * {@link CodeLocalsShifter} is a {@link jdk.classfile.CodeTransform} shifting locals to\n- * newly allocated positions to avoid conflicts during code injection.\n- * Locals pointing to the receiver or to method arguments slots are never shifted.\n- * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n- * <p>\n- * Sample of code transformation shifting all locals in all methods:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeLocalsShifting\"}\n- *\n- * <h3>{@link CodeRelabeler}<\/h3>\n- * {@link CodeRelabeler} is a {@link jdk.classfile.CodeTransform} replacing all occurences\n- * of {@link jdk.classfile.Label} in the transformed code with new instances.\n- * All {@link jdk.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n- * Relabeled code graph is identical to the original.\n- * <p>\n- * Primary purpose of {@link CodeRelabeler} is for repeated injections of the same code blocks.\n- * Repeated injection of the same code block must be relabeled, so each instance of\n- * {@link jdk.classfile.Label} is bound in the target bytecode exactly once.\n- * <p>\n- * Sample transformation relabeling all methods:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n- *\n- * <h3>Class Instrumentation Sample<\/h3>\n- * Following snippet is sample composition of {@link ClassRemapper}, {@link CodeLocalsShifter}\n- * and {@link CodeRelabeler} into fully functional class instrumenting transformation:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n- *\/\n-package jdk.classfile.components;\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/package-info.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.constantpool;\n-\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.impl.ClassReaderImpl;\n-\n-import static jdk.classfile.Classfile.TAG_CLASS;\n-import static jdk.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_DOUBLE;\n-import static jdk.classfile.Classfile.TAG_FIELDREF;\n-import static jdk.classfile.Classfile.TAG_FLOAT;\n-import static jdk.classfile.Classfile.TAG_INTEGER;\n-import static jdk.classfile.Classfile.TAG_INTERFACEMETHODREF;\n-import static jdk.classfile.Classfile.TAG_INVOKEDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_LONG;\n-import static jdk.classfile.Classfile.TAG_METHODHANDLE;\n-import static jdk.classfile.Classfile.TAG_METHODREF;\n-import static jdk.classfile.Classfile.TAG_METHODTYPE;\n-import static jdk.classfile.Classfile.TAG_MODULE;\n-import static jdk.classfile.Classfile.TAG_NAMEANDTYPE;\n-import static jdk.classfile.Classfile.TAG_PACKAGE;\n-import static jdk.classfile.Classfile.TAG_STRING;\n-import static jdk.classfile.Classfile.TAG_UTF8;\n-\n-\/**\n- * Provides read access to the constant pool and bootstrap method table of a\n- * classfile.\n- *\/\n-public sealed interface ConstantPool\n-        permits ClassReader, ConstantPoolBuilder {\n-\n-    \/**\n-     * {@return the entry at the specified index}\n-     *\n-     * @param index the index within the pool of the desired entry\n-     *\/\n-    PoolEntry entryByIndex(int index);\n-\n-    \/**\n-     * {@return the number of entries in the constant pool}\n-     *\/\n-    int entryCount();\n-\n-    \/**\n-     * {@return the {@link BootstrapMethodEntry} at the specified index within\n-     * the bootstrap method table}\n-     *\n-     * @param index the index within the bootstrap method table of the desired\n-     *              entry\n-     *\/\n-    BootstrapMethodEntry bootstrapMethodEntry(int index);\n-\n-    \/**\n-     * {@return the number of entries in the bootstrap method table}\n-     *\/\n-    int bootstrapMethodCount();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ConstantPool.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.impl;\n-\n-import java.lang.constant.ClassDesc;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.attribute.LocalVariableInfo;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.instruction.LocalVariable;\n-\n-\/**\n- * LocalVariableImpl\n- *\/\n-public final class BoundLocalVariable\n-        extends AbstractBoundLocalVariable\n-        implements LocalVariableInfo,\n-                   LocalVariable {\n-\n-    public BoundLocalVariable(CodeImpl code, int offset) {\n-        super(code, offset);\n-    }\n-\n-    @Override\n-    public Utf8Entry type() {\n-        return secondaryEntry();\n-    }\n-\n-    @Override\n-    public ClassDesc typeSymbol() {\n-        return ClassDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-    @Override\n-    public void writeTo(DirectCodeBuilder writer) {\n-        writer.addLocalVariable(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"LocalVariable[name=%s, slot=%d, type=%s]\", name().stringValue(), slot(), type().stringValue());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BoundLocalVariable.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import jdk.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.instruction.LocalVariableType;\n-\n-\/**\n- * LocalVariableTypeImpl\n- *\/\n-public final class BoundLocalVariableType\n-        extends AbstractBoundLocalVariable\n-        implements LocalVariableTypeInfo,\n-                   LocalVariableType {\n-\n-    public BoundLocalVariableType(CodeImpl code, int offset) {\n-        super(code, offset);\n-    }\n-\n-    @Override\n-    public Utf8Entry signature() {\n-        return secondaryEntry();\n-    }\n-\n-    @Override\n-    public void writeTo(DirectCodeBuilder writer) {\n-        writer.addLocalVariableType(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"LocalVariableType[name=%s, slot=%d, signature=%s]\", name().stringValue(), slot(), signature().stringValue());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BoundLocalVariableType.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-\n-\/**\n- * ChainedMethodBuilder\n- *\/\n-public final class ChainedMethodBuilder implements MethodBuilder {\n-    final MethodBuilder downstream;\n-    final TerminalMethodBuilder terminal;\n-    final Consumer<MethodElement> consumer;\n-\n-    public ChainedMethodBuilder(MethodBuilder downstream,\n-                                Consumer<MethodElement> consumer) {\n-        this.downstream = downstream;\n-        this.consumer = consumer;\n-        MethodBuilder b = downstream;\n-        while (b instanceof ChainedMethodBuilder cb)\n-            b = cb.downstream;\n-        terminal = (TerminalMethodBuilder) b;\n-    }\n-\n-    @Override\n-    public MethodBuilder with(MethodElement element) {\n-        consumer.accept(element);\n-        return this;\n-    }\n-\n-    @Override\n-    public MethodBuilder withCode(Consumer<? super CodeBuilder> handler) {\n-        return downstream.with(terminal.bufferedCodeBuilder(null)\n-                                       .run(handler)\n-                                       .toModel());\n-    }\n-\n-    @Override\n-    public MethodBuilder transformCode(CodeModel code, CodeTransform transform) {\n-        BufferedCodeBuilder builder = terminal.bufferedCodeBuilder(code);\n-        builder.transform(code, transform);\n-        return downstream.with(builder.toModel());\n-    }\n-\n-    @Override\n-    public ConstantPoolBuilder constantPool() {\n-        return terminal.constantPool();\n-    }\n-\n-    @Override\n-    public Optional<MethodModel> original() {\n-        return terminal.original();\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ChainedMethodBuilder.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,242 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.constantpool.ClassEntry;\n-import java.lang.reflect.AccessFlag;\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributeMapper;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassfileVersion;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.Interfaces;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Superclass;\n-import jdk.internal.access.SharedSecrets;\n-\n-public final class ClassImpl\n-        extends AbstractElement\n-        implements ClassModel {\n-\n-    final ClassReader reader;\n-    private final int attributesPos;\n-    private final List<MethodModel> methods;\n-    private final List<FieldModel> fields;\n-    private List<Attribute<?>> attributes;\n-    private List<ClassEntry> interfaces;\n-\n-    public ClassImpl(byte[] cfbytes,\n-                     Collection<Classfile.Option<?>> options) {\n-        this.reader = new ClassReaderImpl(cfbytes, options);\n-        ClassReaderImpl reader = (ClassReaderImpl) this.reader;\n-        int p = reader.interfacesPos;\n-        int icnt = reader.readU2(p);\n-        p += 2 + icnt * 2;\n-        int fcnt = reader.readU2(p);\n-        FieldImpl[] fields = new FieldImpl[fcnt];\n-        p += 2;\n-        for (int i = 0; i < fcnt; ++i) {\n-            int startPos = p;\n-            int attrStart = p + 6;\n-            p = reader.skipAttributeHolder(attrStart);\n-            fields[i] = new FieldImpl(reader, startPos, p, attrStart);\n-        }\n-        this.fields = List.of(fields);\n-        int mcnt = reader.readU2(p);\n-        MethodImpl[] methods = new MethodImpl[mcnt];\n-        p += 2;\n-        for (int i = 0; i < mcnt; ++i) {\n-            int startPos = p;\n-            int attrStart = p + 6;\n-            p = reader.skipAttributeHolder(attrStart);\n-            methods[i] = new MethodImpl(reader, startPos, p, attrStart);\n-        }\n-        this.methods = List.of(methods);\n-        this.attributesPos = p;\n-        reader.setContainedClass(this);\n-    }\n-\n-    @Override\n-    public AccessFlags flags() {\n-        return AccessFlags.ofClass(reader.flags());\n-    }\n-\n-    @Override\n-    public int majorVersion() {\n-        return reader.readU2(6);\n-    }\n-\n-    @Override\n-    public int minorVersion() {\n-        return reader.readU2(4);\n-    }\n-\n-    @Override\n-    public ConstantPool constantPool() {\n-        return reader;\n-    }\n-\n-    @Override\n-    public ClassEntry thisClass() {\n-        return reader.thisClassEntry();\n-    }\n-\n-    @Override\n-    public Optional<ClassEntry> superclass() {\n-        return reader.superclassEntry();\n-    }\n-\n-    @Override\n-    public List<ClassEntry> interfaces() {\n-        if (interfaces == null) {\n-            int pos = reader.thisClassPos() + 4;\n-            int cnt = reader.readU2(pos);\n-            pos += 2;\n-            var arr = new Object[cnt];\n-            for (int i = 0; i < cnt; ++i) {\n-                arr[i] = reader.readClassEntry(pos);\n-                pos += 2;\n-            }\n-            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(arr);\n-        }\n-        return interfaces;\n-    }\n-\n-    @Override\n-    public List<Attribute<?>> attributes() {\n-        if (attributes == null) {\n-            attributes = BoundAttribute.readAttributes(this, reader, attributesPos, reader.customAttributes());\n-        }\n-        return attributes;\n-    }\n-\n-    \/\/ ClassModel\n-\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.CLASS;\n-    }\n-\n-    @Override\n-    public void forEachElement(Consumer<ClassElement> consumer) {\n-        consumer.accept(flags());\n-        consumer.accept(ClassfileVersion.of(majorVersion(), minorVersion()));\n-        superclass().ifPresent(new Consumer<ClassEntry>() {\n-            @Override\n-            public void accept(ClassEntry entry) {\n-                consumer.accept(Superclass.of(entry));\n-            }\n-        });\n-        consumer.accept(Interfaces.of(interfaces()));\n-        fields().forEach(consumer);\n-        methods().forEach(consumer);\n-        for (Attribute<?> attr : attributes()) {\n-            if (attr instanceof ClassElement e)\n-                consumer.accept(e);\n-        }\n-    }\n-\n-    @Override\n-    public byte[] transform(ClassTransform transform) {\n-        ConstantPoolBuilder constantPool = ConstantPoolBuilder.of(this);\n-        return Classfile.build(thisClass(), constantPool,\n-                               new Consumer<ClassBuilder>() {\n-                                   @Override\n-                                   public void accept(ClassBuilder builder) {\n-                                       ((DirectClassBuilder) builder).setOriginal(ClassImpl.this);\n-                                       ((DirectClassBuilder) builder).setSizeHint(reader.classfileLength());\n-                                       builder.transform(ClassImpl.this, transform);\n-                                   }\n-                               });\n-    }\n-\n-    @Override\n-    public List<FieldModel> fields() {\n-        return fields;\n-    }\n-\n-    @Override\n-    public List<MethodModel> methods() {\n-        return methods;\n-    }\n-\n-    @Override\n-    public boolean isModuleInfo() {\n-        AccessFlags flags = flags();\n-        \/\/ move to where?\n-        return flags.has(AccessFlag.MODULE)\n-               && majorVersion() >= Classfile.JAVA_9_VERSION\n-               && thisClass().asInternalName().equals(\"module-info\")\n-               && (superclass().isEmpty())\n-               && interfaces().isEmpty()\n-               && fields().isEmpty()\n-               && methods().isEmpty()\n-               && verifyModuleAttributes();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"ClassModel[thisClass=%s, flags=%d]\", thisClass().name().stringValue(), flags().flagsMask());\n-    }\n-\n-    private boolean verifyModuleAttributes() {\n-        if (findAttribute(Attributes.MODULE).isEmpty())\n-            return false;\n-\n-        Set<AttributeMapper<?>> found = attributes().stream()\n-                                                    .map(Attribute::attributeMapper)\n-                                                    .collect(Collectors.toSet());\n-\n-        found.removeAll(allowedModuleAttributes);\n-        found.retainAll(Attributes.PREDEFINED_ATTRIBUTES.values());\n-        return found.isEmpty();\n-    }\n-\n-    private static final Set<AttributeMapper<?>> allowedModuleAttributes\n-            = Set.of(Attributes.MODULE,\n-                     Attributes.MODULE_PACKAGES,\n-                     Attributes.MODULE_MAIN_CLASS,\n-                     Attributes.INNER_CLASSES,\n-                     Attributes.SOURCE_FILE,\n-                     Attributes.SOURCE_DEBUG_EXTENSION,\n-                     Attributes.RUNTIME_VISIBLE_ANNOTATIONS,\n-                     Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ClassImpl.java","additions":0,"deletions":242,"binary":false,"changes":242,"status":"deleted"},{"patch":"@@ -1,508 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.instruction.ExceptionCatch;\n-\n-import static jdk.classfile.Classfile.ALOAD;\n-import static jdk.classfile.Classfile.ANEWARRAY;\n-import static jdk.classfile.Classfile.ASTORE;\n-import static jdk.classfile.Classfile.BIPUSH;\n-import static jdk.classfile.Classfile.CHECKCAST;\n-import static jdk.classfile.Classfile.DLOAD;\n-import static jdk.classfile.Classfile.DSTORE;\n-import static jdk.classfile.Classfile.FLOAD;\n-import static jdk.classfile.Classfile.FSTORE;\n-import static jdk.classfile.Classfile.GETFIELD;\n-import static jdk.classfile.Classfile.GETSTATIC;\n-import static jdk.classfile.Classfile.GOTO;\n-import static jdk.classfile.Classfile.GOTO_W;\n-import static jdk.classfile.Classfile.IFEQ;\n-import static jdk.classfile.Classfile.IFGE;\n-import static jdk.classfile.Classfile.IFGT;\n-import static jdk.classfile.Classfile.IFLE;\n-import static jdk.classfile.Classfile.IFLT;\n-import static jdk.classfile.Classfile.IFNE;\n-import static jdk.classfile.Classfile.IFNONNULL;\n-import static jdk.classfile.Classfile.IFNULL;\n-import static jdk.classfile.Classfile.IF_ACMPEQ;\n-import static jdk.classfile.Classfile.IF_ACMPNE;\n-import static jdk.classfile.Classfile.IF_ICMPEQ;\n-import static jdk.classfile.Classfile.IF_ICMPGE;\n-import static jdk.classfile.Classfile.IF_ICMPGT;\n-import static jdk.classfile.Classfile.IF_ICMPLE;\n-import static jdk.classfile.Classfile.IF_ICMPLT;\n-import static jdk.classfile.Classfile.IF_ICMPNE;\n-import static jdk.classfile.Classfile.IINC;\n-import static jdk.classfile.Classfile.ILOAD;\n-import static jdk.classfile.Classfile.INSTANCEOF;\n-import static jdk.classfile.Classfile.INVOKEDYNAMIC;\n-import static jdk.classfile.Classfile.INVOKEINTERFACE;\n-import static jdk.classfile.Classfile.INVOKESPECIAL;\n-import static jdk.classfile.Classfile.INVOKESTATIC;\n-import static jdk.classfile.Classfile.INVOKEVIRTUAL;\n-import static jdk.classfile.Classfile.ISTORE;\n-import static jdk.classfile.Classfile.JSR;\n-import static jdk.classfile.Classfile.JSR_W;\n-import static jdk.classfile.Classfile.LDC;\n-import static jdk.classfile.Classfile.LDC2_W;\n-import static jdk.classfile.Classfile.LDC_W;\n-import static jdk.classfile.Classfile.LLOAD;\n-import static jdk.classfile.Classfile.LOOKUPSWITCH;\n-import static jdk.classfile.Classfile.LSTORE;\n-import static jdk.classfile.Classfile.MULTIANEWARRAY;\n-import static jdk.classfile.Classfile.NEW;\n-import static jdk.classfile.Classfile.NEWARRAY;\n-import static jdk.classfile.Classfile.PUTFIELD;\n-import static jdk.classfile.Classfile.PUTSTATIC;\n-import static jdk.classfile.Classfile.RET;\n-import static jdk.classfile.Classfile.SIPUSH;\n-import static jdk.classfile.Classfile.TABLESWITCH;\n-import static jdk.classfile.Classfile.WIDE;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-\n-\/**\n- * CodeAttr\n- *\/\n-public final class CodeImpl\n-        extends BoundAttribute.BoundCodeAttribute\n-        implements CodeModel, LabelContext {\n-    List<ExceptionCatch> exceptionTable;\n-    List<Attribute<?>> attributes;\n-\n-    \/\/ Inflated for iteration\n-    LabelImpl[] labels;\n-    int[] lineNumbers;\n-    boolean inflated;\n-\n-    public CodeImpl(AttributedElement enclosing,\n-                    ClassReader reader,\n-                    AttributeMapper<CodeAttribute> mapper,\n-                    int payloadStart) {\n-        super(enclosing, reader, mapper, payloadStart);\n-    }\n-\n-    \/\/ LabelContext\n-\n-    @Override\n-    public Label newLabel() {\n-        throw new UnsupportedOperationException(\"CodeAttribute only supports fixed labels\");\n-    }\n-\n-    @Override\n-    public void setLabelTarget(Label label, int bci) {\n-        throw new UnsupportedOperationException(\"CodeAttribute only supports fixed labels\");\n-    }\n-\n-    @Override\n-    public Label getLabel(int bci) {\n-        if (labels == null)\n-            labels = new LabelImpl[codeLength + 1];\n-        LabelImpl l = labels[bci];\n-        if (l == null)\n-            l = labels[bci] = new LabelImpl(this, bci);\n-        return l;\n-    }\n-\n-    @Override\n-    public int labelToBci(Label label) {\n-        LabelImpl lab = (LabelImpl) label;\n-        if (lab.labelContext() != this)\n-            throw new IllegalArgumentException(String.format(\"Illegal label reuse; context=%s, label=%s\",\n-                                                             this, lab.labelContext()));\n-        return lab.getContextInfo();\n-    }\n-\n-    private void inflateMetadata() {\n-        if (!inflated) {\n-            if (labels == null)\n-                labels = new LabelImpl[codeLength + 1];\n-            if (classReader.optionValue(Classfile.Option.Key.PROCESS_LINE_NUMBERS))\n-                inflateLineNumbers();\n-            inflateJumpTargets();\n-            inflateTypeAnnotations();\n-            inflated = true;\n-        }\n-    }\n-\n-    \/\/ CodeAttribute\n-\n-    @Override\n-    public List<Attribute<?>> attributes() {\n-        if (attributes == null) {\n-            attributes = BoundAttribute.readAttributes(this, classReader, attributePos, classReader.customAttributes());\n-        }\n-        return attributes;\n-    }\n-\n-    @Override\n-    public void writeTo(BufWriter buf) {\n-        if (buf.canWriteDirect(classReader)) {\n-            super.writeTo(buf);\n-        }\n-        else {\n-            DirectCodeBuilder.build((MethodInfo) enclosingMethod,\n-                                    new Consumer<CodeBuilder>() {\n-                                        @Override\n-                                        public void accept(CodeBuilder cb) {\n-                                            forEachElement(cb);\n-                                        }\n-                                    },\n-                                    buf.constantPool(),\n-                                    null).writeTo(buf);\n-        }\n-    }\n-\n-    \/\/ CodeModel\n-\n-    @Override\n-    public Optional<MethodModel> parent() {\n-        return Optional.of(enclosingMethod);\n-    }\n-\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.CODE_ATTRIBUTE;\n-    }\n-\n-    @Override\n-    public void forEachElement(Consumer<CodeElement> consumer) {\n-        inflateMetadata();\n-        boolean doLineNumbers = (lineNumbers != null);\n-        generateCatchTargets(consumer);\n-        if (classReader.optionValue(Classfile.Option.Key.PROCESS_DEBUG))\n-            generateDebugElements(consumer);\n-        for (int pos=codeStart; pos<codeEnd; ) {\n-            if (labels[pos - codeStart] != null)\n-                consumer.accept(labels[pos - codeStart]);\n-            if (doLineNumbers && lineNumbers[pos - codeStart] != 0)\n-                consumer.accept(LineNumberImpl.of(lineNumbers[pos - codeStart]));\n-            int bc = classReader.readU1(pos);\n-            Instruction instr = bcToInstruction(bc, pos);\n-            consumer.accept(instr);\n-            pos += instr.sizeInBytes();\n-        }\n-        \/\/ There might be labels pointing to the bci at codeEnd\n-        if (labels[codeEnd-codeStart] != null)\n-            consumer.accept(labels[codeEnd - codeStart]);\n-        if (doLineNumbers && lineNumbers[codeEnd - codeStart] != 0)\n-            consumer.accept(LineNumberImpl.of(lineNumbers[codeEnd - codeStart]));\n-    }\n-\n-    @Override\n-    public List<ExceptionCatch> exceptionHandlers() {\n-        if (exceptionTable == null) {\n-            inflateMetadata();\n-            exceptionTable = new ArrayList<>(exceptionHandlerCnt);\n-            iterateExceptionHandlers(new ExceptionHandlerAction() {\n-                @Override\n-                public void accept(int s, int e, int h, int c) {\n-                    ClassEntry catchTypeEntry = c == 0\n-                                                             ? null\n-                                                             : (ClassEntry) constantPool().entryByIndex(c);\n-                    exceptionTable.add(new AbstractPseudoInstruction.ExceptionCatchImpl(getLabel(h), getLabel(s), getLabel(e), catchTypeEntry));\n-                }\n-            });\n-            exceptionTable = Collections.unmodifiableList(exceptionTable);\n-        }\n-        return exceptionTable;\n-    }\n-\n-    public boolean compareCodeBytes(BufWriter buf, int offset, int len) {\n-        return codeLength == len\n-               && classReader.compare(buf, offset, codeStart, codeLength);\n-    }\n-\n-    private int adjustForObjectOrUninitialized(int bci) {\n-        int vt = classReader.readU1(bci);\n-        \/\/inflate newTarget labels from Uninitialized VTIs\n-        if (vt == 8) inflateLabel(classReader.readU2(bci + 1));\n-        return (vt == 7 || vt == 8) ? bci + 3 : bci + 1;\n-    }\n-\n-    private void inflateLabel(int bci) {\n-        if (labels[bci] == null)\n-            labels[bci] = new LabelImpl(this, bci);\n-    }\n-\n-    private void inflateLineNumbers() {\n-        for (Attribute<?> a : attributes()) {\n-            if (a.attributeMapper() == Attributes.LINE_NUMBER_TABLE) {\n-                BoundLineNumberTableAttribute attr = (BoundLineNumberTableAttribute) a;\n-                if (lineNumbers == null)\n-                    lineNumbers = new int[codeLength + 1];\n-\n-                int nLn = classReader.readU2(attr.payloadStart);\n-                int p = attr.payloadStart + 2;\n-                int pEnd = p + (nLn * 4);\n-                for (; p < pEnd; p += 4) {\n-                    int startPc = classReader.readU2(p);\n-                    int lineNumber = classReader.readU2(p + 2);\n-                    lineNumbers[startPc] = lineNumber;\n-                }\n-            }\n-        }\n-    }\n-\n-    private void inflateJumpTargets() {\n-        Optional<StackMapTableAttribute> a = findAttribute(Attributes.STACK_MAP_TABLE);\n-        if (a.isEmpty())\n-            return;\n-        @SuppressWarnings(\"unchecked\")\n-        int stackMapPos = ((BoundAttribute<StackMapTableAttribute>) a.get()).payloadStart;\n-\n-        int bci = -1; \/\/compensate for offsetDelta + 1\n-        int nEntries = classReader.readU2(stackMapPos);\n-        int p = stackMapPos + 2;\n-        for (int i = 0; i < nEntries; ++i) {\n-            int frameType = classReader.readU1(p);\n-            int offsetDelta;\n-            if (frameType < 64) {\n-                offsetDelta = frameType;\n-                ++p;\n-            }\n-            else if (frameType < 128) {\n-                offsetDelta = frameType & 0x3f;\n-                p = adjustForObjectOrUninitialized(p + 1);\n-            }\n-            else\n-                switch (frameType) {\n-                    case 247 -> {\n-                        offsetDelta = classReader.readU2(p + 1);\n-                        p = adjustForObjectOrUninitialized(p + 3);\n-                    }\n-                    case 248, 249, 250, 251 -> {\n-                        offsetDelta = classReader.readU2(p + 1);\n-                        p += 3;\n-                    }\n-                    case 252, 253, 254 -> {\n-                        offsetDelta = classReader.readU2(p + 1);\n-                        int k = frameType - 251;\n-                        p += 3;\n-                        for (int c = 0; c < k; ++c) {\n-                            p = adjustForObjectOrUninitialized(p);\n-                        }\n-                    }\n-                    case 255 -> {\n-                        offsetDelta = classReader.readU2(p + 1);\n-                        p += 3;\n-                        int k = classReader.readU2(p);\n-                        p += 2;\n-                        for (int c = 0; c < k; ++c) {\n-                            p = adjustForObjectOrUninitialized(p);\n-                        }\n-                        k = classReader.readU2(p);\n-                        p += 2;\n-                        for (int c = 0; c < k; ++c) {\n-                            p = adjustForObjectOrUninitialized(p);\n-                        }\n-                    }\n-                    default -> throw new IllegalArgumentException(\"Bad frame type: \" + frameType);\n-                }\n-            bci += offsetDelta + 1;\n-            inflateLabel(bci);\n-        }\n-    }\n-\n-    private void inflateTypeAnnotations() {\n-        findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).ifPresent(RuntimeVisibleTypeAnnotationsAttribute::annotations);\n-        findAttribute(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS).ifPresent(RuntimeInvisibleTypeAnnotationsAttribute::annotations);\n-    }\n-\n-    private void generateCatchTargets(Consumer<CodeElement> consumer) {\n-        \/\/ We attach all catch targets to bci zero, because trying to attach them\n-        \/\/ to their range could subtly affect the order of exception processing\n-        iterateExceptionHandlers(new ExceptionHandlerAction() {\n-            @Override\n-            public void accept(int s, int e, int h, int c) {\n-                ClassEntry catchType = c == 0\n-                                                    ? null\n-                                                    : (ClassEntry) classReader.entryByIndex(c);\n-                consumer.accept(new AbstractPseudoInstruction.ExceptionCatchImpl(getLabel(h), getLabel(s), getLabel(e), catchType));\n-            }\n-        });\n-    }\n-\n-    private void generateDebugElements(Consumer<CodeElement> consumer) {\n-        for (Attribute<?> a : attributes()) {\n-            if (a.attributeMapper() == Attributes.CHARACTER_RANGE_TABLE) {\n-                var attr = (BoundCharacterRangeTableAttribute) a;\n-                int cnt = classReader.readU2(attr.payloadStart);\n-                int p = attr.payloadStart + 2;\n-                int pEnd = p + (cnt * 14);\n-                for (; p < pEnd; p += 14) {\n-                    var instruction = new BoundCharacterRange(this, p);\n-                    inflateLabel(instruction.startPc());\n-                    inflateLabel(instruction.endPc() + 1);\n-                    consumer.accept(instruction);\n-                }\n-            }\n-            else if (a.attributeMapper() == Attributes.LOCAL_VARIABLE_TABLE) {\n-                var attr = (BoundLocalVariableTableAttribute) a;\n-                int cnt = classReader.readU2(attr.payloadStart);\n-                int p = attr.payloadStart + 2;\n-                int pEnd = p + (cnt * 10);\n-                for (; p < pEnd; p += 10) {\n-                    BoundLocalVariable instruction = new BoundLocalVariable(this, p);\n-                    inflateLabel(instruction.startPc());\n-                    inflateLabel(instruction.startPc() + instruction.length());\n-                    consumer.accept(instruction);\n-                }\n-            }\n-            else if (a.attributeMapper() == Attributes.LOCAL_VARIABLE_TYPE_TABLE) {\n-                var attr = (BoundLocalVariableTypeTableAttribute) a;\n-                int cnt = classReader.readU2(attr.payloadStart);\n-                int p = attr.payloadStart + 2;\n-                int pEnd = p + (cnt * 10);\n-                for (; p < pEnd; p += 10) {\n-                    BoundLocalVariableType instruction = new BoundLocalVariableType(this, p);\n-                    inflateLabel(instruction.startPc());\n-                    inflateLabel(instruction.startPc() + instruction.length());\n-                    consumer.accept(instruction);\n-                }\n-            }\n-            else if (a.attributeMapper() == Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS) {\n-                consumer.accept((BoundRuntimeVisibleTypeAnnotationsAttribute) a);\n-            }\n-            else if (a.attributeMapper() == Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS) {\n-                consumer.accept((BoundRuntimeInvisibleTypeAnnotationsAttribute) a);\n-            }\n-        }\n-    }\n-\n-    public interface ExceptionHandlerAction {\n-        void accept(int start, int end, int handler, int catchTypeIndex);\n-    }\n-\n-    public void iterateExceptionHandlers(ExceptionHandlerAction a) {\n-        int p = exceptionHandlerPos + 2;\n-        for (int i = 0; i < exceptionHandlerCnt; ++i) {\n-            a.accept(classReader.readU2(p), classReader.readU2(p + 2), classReader.readU2(p + 4), classReader.readU2(p + 6));\n-            p += 8;\n-        }\n-    }\n-\n-    private Instruction bcToInstruction(int bc, int pos) {\n-        return switch (bc) {\n-            case BIPUSH -> new AbstractInstruction.BoundArgumentConstantInstruction(Opcode.BIPUSH, CodeImpl.this, pos);\n-            case SIPUSH -> new AbstractInstruction.BoundArgumentConstantInstruction(Opcode.SIPUSH, CodeImpl.this, pos);\n-            case LDC -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC, CodeImpl.this, pos);\n-            case LDC_W -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC_W, CodeImpl.this, pos);\n-            case LDC2_W -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC2_W, CodeImpl.this, pos);\n-            case ILOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ILOAD, CodeImpl.this, pos);\n-            case LLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.LLOAD, CodeImpl.this, pos);\n-            case FLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.FLOAD, CodeImpl.this, pos);\n-            case DLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.DLOAD, CodeImpl.this, pos);\n-            case ALOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ALOAD, CodeImpl.this, pos);\n-            case ISTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ISTORE, CodeImpl.this, pos);\n-            case LSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.LSTORE, CodeImpl.this, pos);\n-            case FSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.FSTORE, CodeImpl.this, pos);\n-            case DSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.DSTORE, CodeImpl.this, pos);\n-            case ASTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ASTORE, CodeImpl.this, pos);\n-            case IINC -> new AbstractInstruction.BoundIncrementInstruction(Opcode.IINC, CodeImpl.this, pos);\n-            case IFEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFEQ, CodeImpl.this, pos);\n-            case IFNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNE, CodeImpl.this, pos);\n-            case IFLT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFLT, CodeImpl.this, pos);\n-            case IFGE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFGE, CodeImpl.this, pos);\n-            case IFGT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFGT, CodeImpl.this, pos);\n-            case IFLE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFLE, CodeImpl.this, pos);\n-            case IF_ICMPEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPEQ, CodeImpl.this, pos);\n-            case IF_ICMPNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPNE, CodeImpl.this, pos);\n-            case IF_ICMPLT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPLT, CodeImpl.this, pos);\n-            case IF_ICMPGE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPGE, CodeImpl.this, pos);\n-            case IF_ICMPGT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPGT, CodeImpl.this, pos);\n-            case IF_ICMPLE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPLE, CodeImpl.this, pos);\n-            case IF_ACMPEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ACMPEQ, CodeImpl.this, pos);\n-            case IF_ACMPNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ACMPNE, CodeImpl.this, pos);\n-            case GOTO -> new AbstractInstruction.BoundBranchInstruction(Opcode.GOTO, CodeImpl.this, pos);\n-            case TABLESWITCH -> new AbstractInstruction.BoundTableSwitchInstruction(Opcode.TABLESWITCH, CodeImpl.this, pos);\n-            case LOOKUPSWITCH -> new AbstractInstruction.BoundLookupSwitchInstruction(Opcode.LOOKUPSWITCH, CodeImpl.this, pos);\n-            case GETSTATIC -> new AbstractInstruction.BoundFieldInstruction(Opcode.GETSTATIC, CodeImpl.this, pos);\n-            case PUTSTATIC -> new AbstractInstruction.BoundFieldInstruction(Opcode.PUTSTATIC, CodeImpl.this, pos);\n-            case GETFIELD -> new AbstractInstruction.BoundFieldInstruction(Opcode.GETFIELD, CodeImpl.this, pos);\n-            case PUTFIELD -> new AbstractInstruction.BoundFieldInstruction(Opcode.PUTFIELD, CodeImpl.this, pos);\n-            case INVOKEVIRTUAL -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKEVIRTUAL, CodeImpl.this, pos);\n-            case INVOKESPECIAL -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKESPECIAL, CodeImpl.this, pos);\n-            case INVOKESTATIC -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKESTATIC, CodeImpl.this, pos);\n-            case INVOKEINTERFACE -> new AbstractInstruction.BoundInvokeInterfaceInstruction(Opcode.INVOKEINTERFACE, CodeImpl.this, pos);\n-            case INVOKEDYNAMIC -> new AbstractInstruction.BoundInvokeDynamicInstruction(Opcode.INVOKEDYNAMIC, CodeImpl.this, pos);\n-            case NEW -> new AbstractInstruction.BoundNewObjectInstruction(CodeImpl.this, pos);\n-            case NEWARRAY -> new AbstractInstruction.BoundNewPrimitiveArrayInstruction(Opcode.NEWARRAY, CodeImpl.this, pos);\n-            case ANEWARRAY -> new AbstractInstruction.BoundNewReferenceArrayInstruction(Opcode.ANEWARRAY, CodeImpl.this, pos);\n-            case CHECKCAST -> new AbstractInstruction.BoundTypeCheckInstruction(Opcode.CHECKCAST, CodeImpl.this, pos);\n-            case INSTANCEOF -> new AbstractInstruction.BoundTypeCheckInstruction(Opcode.INSTANCEOF, CodeImpl.this, pos);\n-\n-            case WIDE -> {\n-                int bclow = classReader.readU1(pos + 1);\n-                yield switch (bclow) {\n-                    case ILOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ILOAD_W, this, pos);\n-                    case LLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.LLOAD_W, this, pos);\n-                    case FLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.FLOAD_W, this, pos);\n-                    case DLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.DLOAD_W, this, pos);\n-                    case ALOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ALOAD_W, this, pos);\n-                    case ISTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ISTORE_W, this, pos);\n-                    case LSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.LSTORE_W, this, pos);\n-                    case FSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.FSTORE_W, this, pos);\n-                    case DSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.DSTORE_W, this, pos);\n-                    case ASTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ASTORE_W, this, pos);\n-                    case IINC -> new AbstractInstruction.BoundIncrementInstruction(Opcode.IINC_W, this, pos);\n-                    case RET -> throw new UnsupportedOperationException(\"RET_W instruction not supported\");\n-                    default -> throw new UnsupportedOperationException(\"unknown wide instruction: \" + bclow);\n-                };\n-            }\n-\n-            case MULTIANEWARRAY -> new AbstractInstruction.BoundNewMultidimensionalArrayInstruction(Opcode.MULTIANEWARRAY, CodeImpl.this, pos);\n-            case IFNULL -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNULL, CodeImpl.this, pos);\n-            case IFNONNULL -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNONNULL, CodeImpl.this, pos);\n-            case GOTO_W -> new AbstractInstruction.BoundBranchInstruction(Opcode.GOTO_W, CodeImpl.this, pos);\n-\n-            case JSR -> throw new UnsupportedOperationException(\"JSR instruction not supported\");\n-            case RET -> throw new UnsupportedOperationException(\"RET instruction not supported\");\n-            case JSR_W -> throw new UnsupportedOperationException(\"JSR_W instruction not supported\");\n-            default -> {\n-                Instruction instr = InstructionData.singletonInstructions[bc];\n-                if (instr == null)\n-                    throw new UnsupportedOperationException(\"unknown instruction: \" + bc);\n-                yield instr;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"CodeModel[id=%d]\", System.identityHashCode(this));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/CodeImpl.java","additions":0,"deletions":508,"binary":false,"changes":508,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-\n-import static jdk.classfile.impl.ConcreteEntry.ConcreteMethodHandleEntry;\n-\n-public final class ConcreteBootstrapMethodEntry implements BootstrapMethodEntry {\n-\n-    final int index;\n-    final int hash;\n-    private final ConstantPool constantPool;\n-    private final ConcreteMethodHandleEntry handle;\n-    private final List<LoadableConstantEntry> arguments;\n-\n-    ConcreteBootstrapMethodEntry(ConstantPool constantPool, int bsmIndex, int hash,\n-                                 ConcreteMethodHandleEntry handle,\n-                                 List<LoadableConstantEntry> arguments) {\n-        this.index = bsmIndex;\n-        this.hash = hash;\n-        this.constantPool = constantPool;\n-        this.handle = handle;\n-        this.arguments = List.copyOf(arguments);\n-    }\n-\n-    @Override\n-    public ConstantPool constantPool() {\n-        return constantPool;\n-    }\n-\n-    @Override\n-    public MethodHandleEntry bootstrapMethod() {\n-        return handle;\n-    }\n-\n-    @Override\n-    public List<LoadableConstantEntry> arguments() {\n-        return arguments;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj instanceof BootstrapMethodEntry e\n-            && e.bootstrapMethod() == handle\n-            && e.arguments().size() == arguments.size()) {\n-                for (int i = 0; i < arguments.size(); ++i) {\n-                    if (e.arguments().get(i) != arguments.get(i)) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        else\n-            return false;\n-    }\n-\n-    static int computeHashCode(ConcreteMethodHandleEntry handle,\n-                               List<? extends LoadableConstantEntry> arguments) {\n-        int hash = handle.hashCode();\n-        for (LoadableConstantEntry a : arguments) {\n-            hash = 31 * hash + a.hashCode();\n-        }\n-        return ConcreteEntry.phiMix(hash);\n-    }\n-\n-    @Override\n-    public int bsmIndex() { return index; }\n-\n-    @Override\n-    public int hashCode() {\n-        return hash;\n-    }\n-\n-    @Override\n-    public void writeTo(BufWriter writer) {\n-        writer.writeIndex(bootstrapMethod());\n-        writer.writeListIndices(arguments());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ConcreteBootstrapMethodEntry.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.impl;\n-\n-import java.util.function.Consumer;\n-\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.FieldBuilder;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.WritableElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-\n-public final class DirectFieldBuilder\n-        extends AbstractDirectBuilder<FieldBuilder, FieldModel>\n-        implements TerminalFieldBuilder, WritableElement<FieldModel> {\n-    private final Utf8Entry name;\n-    private final Utf8Entry desc;\n-    private int flags;\n-\n-    public DirectFieldBuilder(ConstantPoolBuilder constantPool,\n-                              Utf8Entry name,\n-                              Utf8Entry type,\n-                              FieldModel original) {\n-        super(constantPool);\n-        setOriginal(original);\n-        this.name = name;\n-        this.desc = type;\n-        this.flags = 0;\n-    }\n-\n-    @Override\n-    public FieldBuilder with(FieldElement element) {\n-        ((AbstractElement) element).writeTo(this);\n-        return this;\n-    }\n-\n-    public DirectFieldBuilder run(Consumer<? super FieldBuilder> handler) {\n-        handler.accept(this);\n-        return this;\n-    }\n-\n-    void setFlags(int flags) {\n-        this.flags = flags;\n-    }\n-\n-    public void writeTo(BufWriter buf) {\n-        buf.writeU2(flags);\n-        buf.writeIndex(name);\n-        buf.writeIndex(desc);\n-        attributes.writeTo(buf);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/DirectFieldBuilder.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.classfile.impl;\n-\n-import java.util.function.Consumer;\n-\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.WritableElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n-\n-public final class DirectMethodBuilder\n-        extends AbstractDirectBuilder<MethodBuilder, MethodModel>\n-        implements TerminalMethodBuilder, WritableElement<MethodModel>, MethodInfo {\n-\n-    final Utf8Entry name;\n-    final Utf8Entry desc;\n-    int flags;\n-    int[] parameterSlots;\n-\n-    public DirectMethodBuilder(ConstantPoolBuilder constantPool,\n-                               Utf8Entry nameInfo,\n-                               Utf8Entry typeInfo,\n-                               int flags,\n-                               MethodModel original) {\n-        super(constantPool);\n-        setOriginal(original);\n-        this.name = nameInfo;\n-        this.desc = typeInfo;\n-        this.flags = flags;\n-    }\n-\n-    void setFlags(int flags) {\n-        boolean wasStatic = (this.flags & Classfile.ACC_STATIC) != 0;\n-        boolean isStatic = (flags & Classfile.ACC_STATIC) != 0;\n-        if (wasStatic != isStatic)\n-            throw new IllegalArgumentException(\"Cannot change ACC_STATIC flag of method\");\n-        this.flags = flags;\n-    }\n-\n-    @Override\n-    public Utf8Entry methodName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public Utf8Entry methodType() {\n-        return desc;\n-    }\n-\n-    @Override\n-    public int methodFlags() {\n-        return flags;\n-    }\n-\n-    @Override\n-    public int parameterSlot(int paramNo) {\n-        if (parameterSlots == null)\n-            parameterSlots = Util.parseParameterSlots(methodFlags(), methodType().stringValue());\n-        return parameterSlots[paramNo];\n-    }\n-\n-    @Override\n-    public BufferedCodeBuilder bufferedCodeBuilder(CodeModel original) {\n-        return new BufferedCodeBuilder(this, constantPool, original);\n-    }\n-\n-    @Override\n-    public MethodBuilder with(MethodElement element) {\n-        ((AbstractElement) element).writeTo(this);\n-        return this;\n-    }\n-\n-    private MethodBuilder withCode(CodeModel original,\n-                                  Consumer<? super CodeBuilder> handler) {\n-        var cb = DirectCodeBuilder.build(this, handler, constantPool, original);\n-        writeAttribute(cb);\n-        return this;\n-    }\n-\n-    @Override\n-    public MethodBuilder withCode(Consumer<? super CodeBuilder> handler) {\n-        return withCode(null, handler);\n-    }\n-\n-    @Override\n-    public MethodBuilder transformCode(CodeModel code, CodeTransform transform) {\n-        return withCode(code, new Consumer<>() {\n-            @Override\n-            public void accept(CodeBuilder builder) {\n-                builder.transform(code, transform);\n-            }\n-        });\n-    }\n-\n-    public DirectMethodBuilder run(Consumer<? super MethodBuilder> handler) {\n-        handler.accept(this);\n-        return this;\n-    }\n-\n-    @Override\n-    public void writeTo(BufWriter b) {\n-        BufWriterImpl buf = (BufWriterImpl) b;\n-        buf.writeU2(flags);\n-        buf.writeIndex(name);\n-        buf.writeIndex(desc);\n-        attributes.writeTo(buf);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/DirectMethodBuilder.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.List;\n-\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.instruction.ArrayLoadInstruction;\n-import jdk.classfile.instruction.ArrayStoreInstruction;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.ConvertInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.MonitorInstruction;\n-import jdk.classfile.instruction.NopInstruction;\n-import jdk.classfile.instruction.OperatorInstruction;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StackInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.ThrowInstruction;\n-\n-\/**\n- * InstructionData\n- *\/\n-public class InstructionData {\n-    static final Instruction[] singletonInstructions = new Instruction[256];\n-\n-    static {\n-        for (Opcode o : List.of(Opcode.NOP))\n-            singletonInstructions[o.bytecode()] = NopInstruction.of();\n-        for (Opcode o : List.of(Opcode.ACONST_NULL,\n-                                Opcode.ICONST_M1,\n-                                Opcode.ICONST_0, Opcode.ICONST_1, Opcode.ICONST_2, Opcode.ICONST_3, Opcode.ICONST_4, Opcode.ICONST_5,\n-                                Opcode.LCONST_0, Opcode.LCONST_1,\n-                                Opcode.FCONST_0, Opcode.FCONST_1, Opcode.FCONST_2,\n-                                Opcode.DCONST_0, Opcode.DCONST_1))\n-            singletonInstructions[o.bytecode()] = ConstantInstruction.ofIntrinsic(o);\n-        for (Opcode o : List.of(Opcode.ILOAD_0, Opcode.ILOAD_1, Opcode.ILOAD_2, Opcode.ILOAD_3,\n-                                Opcode.LLOAD_0, Opcode.LLOAD_1, Opcode.LLOAD_2, Opcode.LLOAD_3,\n-                                Opcode.FLOAD_0, Opcode.FLOAD_1, Opcode.FLOAD_2, Opcode.FLOAD_3,\n-                                Opcode.DLOAD_0, Opcode.DLOAD_1, Opcode.DLOAD_2, Opcode.DLOAD_3,\n-                                Opcode.ALOAD_0, Opcode.ALOAD_1, Opcode.ALOAD_2, Opcode.ALOAD_3))\n-            singletonInstructions[o.bytecode()] = LoadInstruction.of(o, o.slot());\n-        for (Opcode o : List.of(Opcode.ISTORE_0, Opcode.ISTORE_1, Opcode.ISTORE_2, Opcode.ISTORE_3,\n-                                Opcode.LSTORE_0, Opcode.LSTORE_1, Opcode.LSTORE_2, Opcode.LSTORE_3,\n-                                Opcode.FSTORE_0, Opcode.FSTORE_1, Opcode.FSTORE_2, Opcode.FSTORE_3,\n-                                Opcode.DSTORE_0, Opcode.DSTORE_1, Opcode.DSTORE_2, Opcode.DSTORE_3,\n-                                Opcode.ASTORE_0, Opcode.ASTORE_1, Opcode.ASTORE_2, Opcode.ASTORE_3))\n-            singletonInstructions[o.bytecode()] = StoreInstruction.of(o, o.slot());\n-        for (Opcode o : List.of(Opcode.IALOAD, Opcode.LALOAD, Opcode.FALOAD, Opcode.DALOAD, Opcode.AALOAD, Opcode.BALOAD, Opcode.CALOAD, Opcode.SALOAD))\n-            singletonInstructions[o.bytecode()] = ArrayLoadInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IASTORE, Opcode.LASTORE, Opcode.FASTORE, Opcode.DASTORE, Opcode.AASTORE, Opcode.BASTORE, Opcode.CASTORE, Opcode.SASTORE))\n-            singletonInstructions[o.bytecode()] = ArrayStoreInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.POP, Opcode.POP2, Opcode.DUP, Opcode.DUP_X1, Opcode.DUP_X2, Opcode.DUP2, Opcode.DUP2_X1, Opcode.DUP2_X2, Opcode.SWAP))\n-            singletonInstructions[o.bytecode()] = StackInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IADD, Opcode.LADD, Opcode.FADD, Opcode.DADD, Opcode.ISUB,\n-                                Opcode.LSUB, Opcode.FSUB, Opcode.DSUB,\n-                                Opcode.IMUL, Opcode.LMUL, Opcode.FMUL, Opcode.DMUL,\n-                                Opcode.IDIV, Opcode.LDIV, Opcode.FDIV, Opcode.DDIV,\n-                                Opcode.IREM, Opcode.LREM, Opcode.FREM, Opcode.DREM,\n-                                Opcode.INEG, Opcode.LNEG, Opcode.FNEG, Opcode.DNEG,\n-                                Opcode.ISHL, Opcode.LSHL, Opcode.ISHR, Opcode.LSHR, Opcode.IUSHR, Opcode.LUSHR,\n-                                Opcode.IAND, Opcode.LAND, Opcode.IOR, Opcode.LOR, Opcode.IXOR, Opcode.LXOR,\n-                                Opcode.LCMP, Opcode.FCMPL, Opcode.FCMPG, Opcode.DCMPL, Opcode.DCMPG,\n-                                Opcode.ARRAYLENGTH))\n-            singletonInstructions[o.bytecode()] = OperatorInstruction.of(o);\n-\n-        for (Opcode o : List.of(Opcode.I2L, Opcode.I2F, Opcode.I2D,\n-                                Opcode.L2I, Opcode.L2F, Opcode.L2D,\n-                                Opcode.F2I, Opcode.F2L, Opcode.F2D,\n-                                Opcode.D2I, Opcode.D2L, Opcode.D2F,\n-                                Opcode.I2B, Opcode.I2C, Opcode.I2S))\n-            singletonInstructions[o.bytecode()] = ConvertInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.IRETURN, Opcode.LRETURN, Opcode.FRETURN, Opcode.DRETURN, Opcode.ARETURN, Opcode.RETURN))\n-            singletonInstructions[o.bytecode()] = ReturnInstruction.of(o);\n-        for (Opcode o : List.of(Opcode.ATHROW))\n-            singletonInstructions[o.bytecode()] = ThrowInstruction.of();\n-        for (Opcode o : List.of(Opcode.MONITORENTER, Opcode.MONITOREXIT))\n-            singletonInstructions[o.bytecode()] = MonitorInstruction.of(o);\n-    }\n-\n-    private InstructionData() {\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/InstructionData.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,211 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.FloatEntry;\n-import jdk.classfile.constantpool.IntegerEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.MethodTypeEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.StringEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static jdk.classfile.Classfile.TAG_METHODTYPE;\n-\n-public final class TemporaryConstantPool implements ConstantPoolBuilder {\n-    private static final Options options = new Options(Collections.emptyList());\n-\n-    private TemporaryConstantPool() {};\n-\n-    public static final TemporaryConstantPool INSTANCE = new TemporaryConstantPool();\n-\n-    @Override\n-    public Utf8Entry utf8Entry(String s) {\n-        return new ConcreteEntry.ConcreteUtf8Entry(this, -1, s);\n-    }\n-\n-    @Override\n-    public IntegerEntry intEntry(int value) {\n-        return new ConcreteEntry.ConcreteIntegerEntry(this, -1, value);\n-    }\n-\n-    @Override\n-    public FloatEntry floatEntry(float value) {\n-        return new ConcreteEntry.ConcreteFloatEntry(this, -1, value);\n-    }\n-\n-    @Override\n-    public LongEntry longEntry(long value) {\n-        return new ConcreteEntry.ConcreteLongEntry(this, -1, value);\n-    }\n-\n-    @Override\n-    public DoubleEntry doubleEntry(double value) {\n-        return new ConcreteEntry.ConcreteDoubleEntry(this, -1, value);\n-    }\n-\n-    @Override\n-    public ClassEntry classEntry(Utf8Entry name) {\n-        return new ConcreteEntry.ConcreteClassEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n-    }\n-\n-    @Override\n-    public PackageEntry packageEntry(Utf8Entry name) {\n-        return new ConcreteEntry.ConcretePackageEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n-    }\n-\n-    @Override\n-    public ModuleEntry moduleEntry(Utf8Entry name) {\n-        return new ConcreteEntry.ConcreteModuleEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n-    }\n-\n-    @Override\n-    public NameAndTypeEntry natEntry(Utf8Entry nameEntry, Utf8Entry typeEntry) {\n-        return new ConcreteEntry.ConcreteNameAndTypeEntry(this, -3,\n-                                                          (ConcreteEntry.ConcreteUtf8Entry) nameEntry,\n-                                                          (ConcreteEntry.ConcreteUtf8Entry) typeEntry);\n-    }\n-\n-    @Override\n-    public FieldRefEntry fieldRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n-        return new ConcreteEntry.ConcreteFieldRefEntry(this, -3,\n-                                                       (ConcreteEntry.ConcreteClassEntry) owner,\n-                                                       (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n-    }\n-\n-    @Override\n-    public MethodRefEntry methodRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n-        return new ConcreteEntry.ConcreteMethodRefEntry(this, -3,\n-                                                        (ConcreteEntry.ConcreteClassEntry) owner,\n-                                                        (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n-    }\n-\n-    @Override\n-    public InterfaceMethodRefEntry interfaceMethodRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n-        return new ConcreteEntry.ConcreteInterfaceMethodRefEntry(this, -3,\n-                                                                 (ConcreteEntry.ConcreteClassEntry) owner,\n-                                                                 (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n-    }\n-\n-    @Override\n-    public MethodTypeEntry methodTypeEntry(MethodTypeDesc descriptor) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public MethodTypeEntry methodTypeEntry(Utf8Entry descriptor) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public MethodHandleEntry methodHandleEntry(int refKind, MemberRefEntry reference) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public InvokeDynamicEntry invokeDynamicEntry(BootstrapMethodEntry bootstrapMethodEntry, NameAndTypeEntry nameAndType) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public ConstantDynamicEntry constantDynamicEntry(BootstrapMethodEntry bootstrapMethodEntry, NameAndTypeEntry nameAndType) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public StringEntry stringEntry(Utf8Entry utf8) {\n-        return new ConcreteEntry.ConcreteStringEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) utf8);\n-    }\n-\n-    @Override\n-    public <T extends PoolEntry> T maybeClone(T entry) {\n-        return entry;\n-    }\n-\n-    @Override\n-    public BootstrapMethodEntry bsmEntry(MethodHandleEntry methodReference, List<LoadableConstantEntry> arguments) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public PoolEntry entryByIndex(int index) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public int entryCount() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public BootstrapMethodEntry bootstrapMethodEntry(int index) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public int bootstrapMethodCount() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public <T> T optionValue(Classfile.Option.Key option) {\n-        return options.value(option);\n-    }\n-\n-    @Override\n-    public boolean canWriteDirect(ConstantPool constantPool) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean writeBootstrapMethods(BufWriter buf) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void writeTo(BufWriter buf) {\n-        throw new UnsupportedOperationException();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":211,"binary":false,"changes":211,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeModel;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Label;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-\n-\/**\n- * TransformingCodeBuilder\n- *\/\n-public final class TransformingCodeBuilder implements TerminalCodeBuilder {\n-\n-    final CodeBuilder delegate;\n-    final Consumer<CodeElement> consumer;\n-\n-    public TransformingCodeBuilder(CodeBuilder delegate, Consumer<CodeElement> consumer) {\n-        this.delegate = delegate;\n-        this.consumer = consumer;\n-    }\n-\n-    @Override\n-    public CodeBuilder with(CodeElement e) {\n-        consumer.accept(e);\n-        return this;\n-    }\n-\n-    @Override\n-    public Optional<CodeModel> original() {\n-        return delegate.original();\n-    }\n-\n-    @Override\n-    public Label newLabel() {\n-        return delegate.newLabel();\n-    }\n-\n-    @Override\n-    public Label startLabel() {\n-        return delegate.startLabel();\n-    }\n-\n-    @Override\n-    public Label endLabel() {\n-        return delegate.endLabel();\n-    }\n-\n-    @Override\n-    public int receiverSlot() {\n-        return delegate.receiverSlot();\n-    }\n-\n-    @Override\n-    public int parameterSlot(int paramNo) {\n-        return delegate.parameterSlot(paramNo);\n-    }\n-\n-    @Override\n-    public int allocateLocal(TypeKind typeKind) {\n-        return delegate.allocateLocal(typeKind);\n-    }\n-\n-    @Override\n-    public ConstantPoolBuilder constantPool() {\n-        return delegate.constantPool();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TransformingCodeBuilder.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,950 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.impl;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import jdk.classfile.Annotation;\n-import jdk.classfile.AnnotationElement;\n-import jdk.classfile.AnnotationValue;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributeMapper;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeAnnotation;\n-import jdk.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.classfile.attribute.CharacterRangeInfo;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.attribute.CompilationIDAttribute;\n-import jdk.classfile.attribute.ConstantValueAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.InnerClassInfo;\n-import jdk.classfile.attribute.InnerClassesAttribute;\n-import jdk.classfile.attribute.LineNumberInfo;\n-import jdk.classfile.attribute.LineNumberTableAttribute;\n-import jdk.classfile.attribute.LocalVariableInfo;\n-import jdk.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.classfile.attribute.MethodParameterInfo;\n-import jdk.classfile.attribute.MethodParametersAttribute;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleExportInfo;\n-import jdk.classfile.attribute.ModuleHashInfo;\n-import jdk.classfile.attribute.ModuleHashesAttribute;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModuleOpenInfo;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.ModuleProvideInfo;\n-import jdk.classfile.attribute.ModuleRequireInfo;\n-import jdk.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.classfile.attribute.ModuleTargetAttribute;\n-import jdk.classfile.attribute.NestHostAttribute;\n-import jdk.classfile.attribute.NestMembersAttribute;\n-import jdk.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.attribute.SourceIDAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute.StackMapFrameInfo;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.constantpool.ConstantValueEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-\n-\/**\n- * UnboundAttribute\n- *\/\n-public abstract sealed class UnboundAttribute<T extends Attribute<T>>\n-        extends AbstractElement\n-        implements Attribute<T> {\n-    protected final AttributeMapper<T> mapper;\n-\n-    public UnboundAttribute(AttributeMapper<T> mapper) {\n-        this.mapper = mapper;\n-    }\n-\n-    @Override\n-    public AttributeMapper<T> attributeMapper() {\n-        return mapper;\n-    }\n-\n-    @Override\n-    public String attributeName() {\n-        return mapper.name();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void writeTo(BufWriter buf) {\n-        mapper.writeAttribute(buf, (T) this);\n-    }\n-\n-    @Override\n-    public void writeTo(DirectClassBuilder builder) {\n-        builder.writeAttribute(this);\n-    }\n-\n-    @Override\n-    public void writeTo(DirectCodeBuilder builder) {\n-        builder.writeAttribute(this);\n-    }\n-\n-    @Override\n-    public void writeTo(DirectMethodBuilder builder) {\n-        builder.writeAttribute(this);\n-    }\n-\n-    @Override\n-    public void writeTo(DirectFieldBuilder builder) {\n-        builder.writeAttribute(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"Attribute[name=%s]\", mapper.name());\n-    }\n-    public static final class UnboundConstantValueAttribute\n-            extends UnboundAttribute<ConstantValueAttribute>\n-            implements ConstantValueAttribute {\n-\n-        private final ConstantValueEntry entry;\n-\n-        public UnboundConstantValueAttribute(ConstantValueEntry entry) {\n-            super(Attributes.CONSTANT_VALUE);\n-            this.entry = entry;\n-        }\n-\n-        @Override\n-        public ConstantValueEntry constant() {\n-            return entry;\n-        }\n-\n-    }\n-\n-    public static final class UnboundDeprecatedAttribute\n-            extends UnboundAttribute<DeprecatedAttribute>\n-            implements DeprecatedAttribute {\n-        public UnboundDeprecatedAttribute() {\n-            super(Attributes.DEPRECATED);\n-        }\n-    }\n-\n-    public static final class UnboundSyntheticAttribute\n-            extends UnboundAttribute<SyntheticAttribute>\n-            implements SyntheticAttribute {\n-        public UnboundSyntheticAttribute() {\n-            super(Attributes.SYNTHETIC);\n-        }\n-    }\n-\n-    public static final class UnboundSignatureAttribute\n-            extends UnboundAttribute<SignatureAttribute>\n-            implements SignatureAttribute {\n-        private final Utf8Entry signature;\n-\n-        public UnboundSignatureAttribute(Utf8Entry signature) {\n-            super(Attributes.SIGNATURE);\n-            this.signature = signature;\n-        }\n-\n-        @Override\n-        public Utf8Entry signature() {\n-            return signature;\n-        }\n-    }\n-\n-    public static final class UnboundExceptionsAttribute\n-            extends UnboundAttribute<ExceptionsAttribute>\n-            implements ExceptionsAttribute {\n-        private final List<ClassEntry> exceptions;\n-\n-        public UnboundExceptionsAttribute(List<ClassEntry> exceptions) {\n-            super(Attributes.EXCEPTIONS);\n-            this.exceptions = List.copyOf(exceptions);\n-        }\n-\n-        @Override\n-        public List<ClassEntry> exceptions() {\n-            return exceptions;\n-        }\n-    }\n-\n-    public static final class UnboundAnnotationDefaultAttribute\n-            extends UnboundAttribute<AnnotationDefaultAttribute>\n-            implements AnnotationDefaultAttribute {\n-        private final AnnotationValue annotationDefault;\n-\n-        public UnboundAnnotationDefaultAttribute(AnnotationValue annotationDefault) {\n-            super(Attributes.ANNOTATION_DEFAULT);\n-            this.annotationDefault = annotationDefault;\n-        }\n-\n-        @Override\n-        public AnnotationValue defaultValue() {\n-            return annotationDefault;\n-        }\n-    }\n-\n-    public static final class UnboundSourceFileAttribute extends UnboundAttribute<SourceFileAttribute>\n-            implements SourceFileAttribute {\n-        private final Utf8Entry sourceFile;\n-\n-        public UnboundSourceFileAttribute(Utf8Entry sourceFile) {\n-            super(Attributes.SOURCE_FILE);\n-            this.sourceFile = sourceFile;\n-        }\n-\n-        @Override\n-        public Utf8Entry sourceFile() {\n-            return sourceFile;\n-        }\n-\n-    }\n-\n-    public static final class UnboundStackMapTableAttribute extends UnboundAttribute<StackMapTableAttribute>\n-            implements StackMapTableAttribute {\n-        private final List<StackMapFrameInfo> entries;\n-\n-        public UnboundStackMapTableAttribute(List<StackMapFrameInfo> entries) {\n-            super(Attributes.STACK_MAP_TABLE);\n-            this.entries = List.copyOf(entries);\n-        }\n-\n-        @Override\n-        public List<StackMapFrameInfo> entries() {\n-            return entries;\n-        }\n-    }\n-\n-    public static final class UnboundInnerClassesAttribute\n-            extends UnboundAttribute<InnerClassesAttribute>\n-            implements InnerClassesAttribute {\n-        private final List<InnerClassInfo> innerClasses;\n-\n-        public UnboundInnerClassesAttribute(List<InnerClassInfo> innerClasses) {\n-            super(Attributes.INNER_CLASSES);\n-            this.innerClasses = List.copyOf(innerClasses);\n-        }\n-\n-        @Override\n-        public List<InnerClassInfo> classes() {\n-            return innerClasses;\n-        }\n-    }\n-\n-    public static final class UnboundRecordAttribute\n-            extends UnboundAttribute<RecordAttribute>\n-            implements RecordAttribute {\n-        private final List<RecordComponentInfo> components;\n-\n-        public UnboundRecordAttribute(List<RecordComponentInfo> components) {\n-            super(Attributes.RECORD);\n-            this.components = List.copyOf(components);\n-        }\n-\n-        @Override\n-        public List<RecordComponentInfo> components() {\n-            return components;\n-        }\n-    }\n-\n-    public static final class UnboundEnclosingMethodAttribute\n-            extends UnboundAttribute<EnclosingMethodAttribute>\n-            implements EnclosingMethodAttribute {\n-        private final ClassEntry classEntry;\n-        private final NameAndTypeEntry method;\n-\n-        public UnboundEnclosingMethodAttribute(ClassEntry classEntry, NameAndTypeEntry method) {\n-            super(Attributes.ENCLOSING_METHOD);\n-            this.classEntry = classEntry;\n-            this.method = method;\n-        }\n-\n-        @Override\n-        public ClassEntry enclosingClass() {\n-            return classEntry;\n-        }\n-\n-        @Override\n-        public Optional<NameAndTypeEntry> enclosingMethod() {\n-            return Optional.ofNullable(method);\n-        }\n-    }\n-\n-    public static final class UnboundMethodParametersAttribute\n-            extends UnboundAttribute<MethodParametersAttribute>\n-            implements MethodParametersAttribute {\n-        private final List<MethodParameterInfo> parameters;\n-\n-        public UnboundMethodParametersAttribute(List<MethodParameterInfo> parameters) {\n-            super(Attributes.METHOD_PARAMETERS);\n-            this.parameters = List.copyOf(parameters);\n-        }\n-\n-        @Override\n-        public List<MethodParameterInfo> parameters() {\n-            return parameters;\n-        }\n-    }\n-\n-    public static final class UnboundModuleTargetAttribute\n-            extends UnboundAttribute<ModuleTargetAttribute>\n-            implements ModuleTargetAttribute {\n-        final Utf8Entry moduleTarget;\n-\n-        public UnboundModuleTargetAttribute(Utf8Entry moduleTarget) {\n-            super(Attributes.MODULE_TARGET);\n-            this.moduleTarget = moduleTarget;\n-        }\n-\n-        @Override\n-        public Utf8Entry targetPlatform() {\n-            return moduleTarget;\n-        }\n-    }\n-\n-    public static final class UnboundModuleMainClassAttribute\n-            extends UnboundAttribute<ModuleMainClassAttribute>\n-            implements ModuleMainClassAttribute {\n-        final ClassEntry mainClass;\n-\n-        public UnboundModuleMainClassAttribute(ClassEntry mainClass) {\n-            super(Attributes.MODULE_MAIN_CLASS);\n-            this.mainClass = mainClass;\n-        }\n-\n-        @Override\n-        public ClassEntry mainClass() {\n-            return mainClass;\n-        }\n-    }\n-\n-    public static final class UnboundModuleHashesAttribute\n-            extends UnboundAttribute<ModuleHashesAttribute>\n-            implements ModuleHashesAttribute {\n-        private final Utf8Entry algorithm;\n-        private final List<ModuleHashInfo> hashes;\n-\n-        public UnboundModuleHashesAttribute(Utf8Entry algorithm, List<ModuleHashInfo> hashes) {\n-            super(Attributes.MODULE_HASHES);\n-            this.algorithm = algorithm;\n-            this.hashes = List.copyOf(hashes);\n-        }\n-\n-        @Override\n-        public Utf8Entry algorithm() {\n-            return algorithm;\n-        }\n-\n-        @Override\n-        public List<ModuleHashInfo> hashes() {\n-            return hashes;\n-        }\n-    }\n-\n-    public static final class UnboundModulePackagesAttribute\n-            extends UnboundAttribute<ModulePackagesAttribute>\n-            implements ModulePackagesAttribute {\n-        private final Collection<PackageEntry> packages;\n-\n-        public UnboundModulePackagesAttribute(Collection<PackageEntry> packages) {\n-            super(Attributes.MODULE_PACKAGES);\n-            this.packages = List.copyOf(packages);\n-        }\n-\n-        @Override\n-        public List<PackageEntry> packages() {\n-            return List.copyOf(packages);\n-        }\n-    }\n-\n-    public static final class UnboundModuleResolutionAttribute\n-            extends UnboundAttribute<ModuleResolutionAttribute>\n-            implements ModuleResolutionAttribute {\n-        private final int resolutionFlags;\n-\n-        public UnboundModuleResolutionAttribute(int flags) {\n-            super(Attributes.MODULE_RESOLUTION);\n-            resolutionFlags = flags;\n-        }\n-\n-        @Override\n-        public int resolutionFlags() {\n-            return resolutionFlags;\n-        }\n-    }\n-\n-    public static final class UnboundPermittedSubclassesAttribute\n-            extends UnboundAttribute<PermittedSubclassesAttribute>\n-            implements PermittedSubclassesAttribute {\n-        private final List<ClassEntry> permittedSubclasses;\n-\n-        public UnboundPermittedSubclassesAttribute(List<ClassEntry> permittedSubclasses) {\n-            super(Attributes.PERMITTED_SUBCLASSES);\n-            this.permittedSubclasses = List.copyOf(permittedSubclasses);\n-        }\n-\n-        @Override\n-        public List<ClassEntry> permittedSubclasses() {\n-            return permittedSubclasses;\n-        }\n-    }\n-\n-    public static final class UnboundNestMembersAttribute\n-            extends UnboundAttribute<NestMembersAttribute>\n-            implements NestMembersAttribute {\n-        private final List<ClassEntry> memberEntries;\n-\n-        public UnboundNestMembersAttribute(List<ClassEntry> memberEntries) {\n-            super(Attributes.NEST_MEMBERS);\n-            this.memberEntries = List.copyOf(memberEntries);\n-        }\n-\n-        @Override\n-        public List<ClassEntry> nestMembers() {\n-            return memberEntries;\n-        }\n-    }\n-\n-    public static final class UnboundNestHostAttribute\n-            extends UnboundAttribute<NestHostAttribute>\n-            implements NestHostAttribute {\n-        private final ClassEntry hostEntry;\n-\n-        public UnboundNestHostAttribute(ClassEntry hostEntry) {\n-            super(Attributes.NEST_HOST);\n-            this.hostEntry = hostEntry;\n-        }\n-\n-        @Override\n-        public ClassEntry nestHost() {\n-            return hostEntry;\n-        }\n-    }\n-\n-    public static final class UnboundCompilationIDAttribute\n-            extends UnboundAttribute<CompilationIDAttribute>\n-            implements CompilationIDAttribute {\n-        private final Utf8Entry idEntry;\n-\n-        public UnboundCompilationIDAttribute(Utf8Entry idEntry) {\n-            super(Attributes.COMPILATION_ID);\n-            this.idEntry = idEntry;\n-        }\n-\n-        @Override\n-        public Utf8Entry compilationId() {\n-            return idEntry;\n-        }\n-    }\n-\n-    public static final class UnboundSourceIDAttribute\n-            extends UnboundAttribute<SourceIDAttribute>\n-            implements SourceIDAttribute {\n-        private final Utf8Entry idEntry;\n-\n-        public UnboundSourceIDAttribute(Utf8Entry idEntry) {\n-            super(Attributes.SOURCE_ID);\n-            this.idEntry = idEntry;\n-        }\n-\n-        @Override\n-        public Utf8Entry sourceId() {\n-            return idEntry;\n-        }\n-    }\n-\n-    public static final class UnboundSourceDebugExtensionAttribute\n-        extends UnboundAttribute<SourceDebugExtensionAttribute>\n-            implements SourceDebugExtensionAttribute {\n-        private final byte[] contents;\n-\n-        public UnboundSourceDebugExtensionAttribute(byte[] contents) {\n-            super(Attributes.SOURCE_DEBUG_EXTENSION);\n-            this.contents = contents;\n-        }\n-\n-        @Override\n-        public byte[] contents() {\n-            return contents;\n-        }\n-    }\n-\n-    public static final class UnboundCharacterRangeTableAttribute\n-        extends UnboundAttribute<CharacterRangeTableAttribute>\n-            implements CharacterRangeTableAttribute {\n-        private final List<CharacterRangeInfo> ranges;\n-\n-        public UnboundCharacterRangeTableAttribute(List<CharacterRangeInfo> ranges) {\n-            super(Attributes.CHARACTER_RANGE_TABLE);\n-            this.ranges = List.copyOf(ranges);\n-        }\n-\n-        @Override\n-        public List<CharacterRangeInfo> characterRangeTable() {\n-            return ranges;\n-        }\n-    }\n-\n-    public static final class UnboundLineNumberTableAttribute\n-        extends UnboundAttribute<LineNumberTableAttribute>\n-            implements LineNumberTableAttribute {\n-        private final List<LineNumberInfo> lines;\n-\n-        public UnboundLineNumberTableAttribute(List<LineNumberInfo> lines) {\n-            super(Attributes.LINE_NUMBER_TABLE);\n-            this.lines = List.copyOf(lines);\n-        }\n-\n-        @Override\n-        public List<LineNumberInfo> lineNumbers() {\n-            return lines;\n-        }\n-    }\n-\n-    public static final class UnboundLocalVariableTableAttribute\n-        extends UnboundAttribute<LocalVariableTableAttribute>\n-            implements LocalVariableTableAttribute {\n-        private final List<LocalVariableInfo> locals;\n-\n-        public UnboundLocalVariableTableAttribute(List<LocalVariableInfo> locals) {\n-            super(Attributes.LOCAL_VARIABLE_TABLE);\n-            this.locals = List.copyOf(locals);\n-        }\n-\n-        @Override\n-        public List<LocalVariableInfo> localVariables() {\n-            return locals;\n-        }\n-    }\n-\n-    public static final class UnboundLocalVariableTypeTableAttribute\n-        extends UnboundAttribute<LocalVariableTypeTableAttribute>\n-            implements LocalVariableTypeTableAttribute {\n-        private final List<LocalVariableTypeInfo> locals;\n-\n-        public UnboundLocalVariableTypeTableAttribute(List<LocalVariableTypeInfo> locals) {\n-            super(Attributes.LOCAL_VARIABLE_TYPE_TABLE);\n-            this.locals = List.copyOf(locals);\n-        }\n-\n-        @Override\n-        public List<LocalVariableTypeInfo> localVariableTypes() {\n-            return locals;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeVisibleAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeVisibleAnnotationsAttribute>\n-            implements RuntimeVisibleAnnotationsAttribute {\n-        private final List<Annotation> elements;\n-\n-        public UnboundRuntimeVisibleAnnotationsAttribute(List<Annotation> elements) {\n-            super(Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<Annotation> annotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeInvisibleAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeInvisibleAnnotationsAttribute>\n-            implements RuntimeInvisibleAnnotationsAttribute {\n-        private final List<Annotation> elements;\n-\n-        public UnboundRuntimeInvisibleAnnotationsAttribute(List<Annotation> elements) {\n-            super(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<Annotation> annotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeVisibleParameterAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeVisibleParameterAnnotationsAttribute>\n-            implements RuntimeVisibleParameterAnnotationsAttribute {\n-        private final List<List<Annotation>> elements;\n-\n-        public UnboundRuntimeVisibleParameterAnnotationsAttribute(List<List<Annotation>> elements) {\n-            super(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<List<Annotation>> parameterAnnotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeInvisibleParameterAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeInvisibleParameterAnnotationsAttribute>\n-            implements RuntimeInvisibleParameterAnnotationsAttribute {\n-        private final List<List<Annotation>> elements;\n-\n-        public UnboundRuntimeInvisibleParameterAnnotationsAttribute(List<List<Annotation>> elements) {\n-            super(Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<List<Annotation>> parameterAnnotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeVisibleTypeAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeVisibleTypeAnnotationsAttribute>\n-            implements RuntimeVisibleTypeAnnotationsAttribute {\n-        private final List<TypeAnnotation> elements;\n-\n-        public UnboundRuntimeVisibleTypeAnnotationsAttribute(List<TypeAnnotation> elements) {\n-            super(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<TypeAnnotation> annotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public static final class UnboundRuntimeInvisibleTypeAnnotationsAttribute\n-            extends UnboundAttribute<RuntimeInvisibleTypeAnnotationsAttribute>\n-            implements RuntimeInvisibleTypeAnnotationsAttribute {\n-        private final List<TypeAnnotation> elements;\n-\n-        public UnboundRuntimeInvisibleTypeAnnotationsAttribute(List<TypeAnnotation> elements) {\n-            super(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        @Override\n-        public List<TypeAnnotation> annotations() {\n-            return elements;\n-        }\n-    }\n-\n-    public record UnboundCharacterRangeInfo(int startPc, int endPc,\n-                                            int characterRangeStart,\n-                                            int characterRangeEnd,\n-                                            int flags)\n-            implements CharacterRangeInfo { }\n-\n-    public record UnboundInnerClassInfo(ClassEntry innerClass,\n-                                        Optional<ClassEntry> outerClass,\n-                                        Optional<Utf8Entry> innerName,\n-                                        int flagsMask)\n-            implements InnerClassInfo {}\n-\n-    public record UnboundLineNumberInfo(int startPc, int lineNumber)\n-            implements LineNumberInfo { }\n-\n-    public record UnboundLocalVariableInfo(int startPc, int length,\n-                                           Utf8Entry name,\n-                                           Utf8Entry type,\n-                                           int slot)\n-            implements LocalVariableInfo { }\n-\n-    public record UnboundLocalVariableTypeInfo(int startPc, int length,\n-                                               Utf8Entry name,\n-                                               Utf8Entry signature,\n-                                               int slot)\n-            implements LocalVariableTypeInfo { }\n-\n-    public record UnboundMethodParameterInfo(Optional<Utf8Entry> name, int flagsMask)\n-            implements MethodParameterInfo {}\n-\n-    public record UnboundModuleExportInfo(PackageEntry exportedPackage,\n-                                          int exportsFlagsMask,\n-                                          List<ModuleEntry> exportsTo)\n-            implements ModuleExportInfo {\n-        public UnboundModuleExportInfo(PackageEntry exportedPackage, int exportsFlagsMask,\n-                                       List<ModuleEntry> exportsTo) {\n-            this.exportedPackage = exportedPackage;\n-            this.exportsFlagsMask = exportsFlagsMask;\n-            this.exportsTo = List.copyOf(exportsTo);\n-        }\n-    }\n-\n-    public record UnboundModuleHashInfo(ModuleEntry moduleName,\n-                                        byte[] hash) implements ModuleHashInfo { }\n-\n-    public record UnboundModuleOpenInfo(PackageEntry openedPackage, int opensFlagsMask,\n-                                        List<ModuleEntry> opensTo)\n-            implements ModuleOpenInfo {\n-        public UnboundModuleOpenInfo(PackageEntry openedPackage, int opensFlagsMask,\n-                                     List<ModuleEntry> opensTo) {\n-            this.openedPackage = openedPackage;\n-            this.opensFlagsMask = opensFlagsMask;\n-            this.opensTo = List.copyOf(opensTo);\n-        }\n-    }\n-\n-    public record UnboundModuleProvideInfo(ClassEntry provides,\n-                                           List<ClassEntry> providesWith)\n-            implements ModuleProvideInfo {\n-        public UnboundModuleProvideInfo(ClassEntry provides, List<ClassEntry> providesWith) {\n-            this.provides = provides;\n-            this.providesWith = List.copyOf(providesWith);\n-        }\n-    }\n-\n-    public record UnboundModuleRequiresInfo(ModuleEntry requires, int requiresFlagsMask,\n-                                            Optional<Utf8Entry> requiresVersion)\n-            implements ModuleRequireInfo {}\n-\n-    public record UnboundRecordComponentInfo(Utf8Entry name,\n-                                             Utf8Entry descriptor,\n-                                             List<Attribute<?>> attributes)\n-            implements RecordComponentInfo {\n-        public UnboundRecordComponentInfo(Utf8Entry name, Utf8Entry descriptor, List<Attribute<?>> attributes) {\n-            this.name = name;\n-            this.descriptor = descriptor;\n-            this.attributes = List.copyOf(attributes);\n-        }\n-    }\n-\n-    public record UnboundTypeAnnotation(TargetInfo targetInfo,\n-                                        List<TypePathComponent> targetPath,\n-                                        Utf8Entry className,\n-                                        List<AnnotationElement> elements) implements TypeAnnotation {\n-\n-        public UnboundTypeAnnotation(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                                     Utf8Entry className, List<AnnotationElement> elements) {\n-            this.targetInfo = targetInfo;\n-            this.targetPath = List.copyOf(targetPath);\n-            this.className = className;\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        private int labelToBci(LabelContext lr, Label label) {\n-            \/\/helper method to avoid NPE\n-            if (lr == null) throw new IllegalArgumentException(\"Illegal targetType '%s' in TypeAnnotation outside of Code attribute\".formatted(targetInfo.targetType()));\n-            return lr.labelToBci(label);\n-        }\n-\n-        @Override\n-        public void writeTo(BufWriter buf) {\n-            LabelContext lr = ((BufWriterImpl) buf).labelContext();\n-            \/\/ target_type\n-            buf.writeU1(targetInfo.targetType().targetTypeValue());\n-\n-            \/\/ target_info\n-            switch (targetInfo) {\n-                case TypeParameterTarget tpt -> buf.writeU1(tpt.typeParameterIndex());\n-                case SupertypeTarget st -> buf.writeU2(st.supertypeIndex());\n-                case TypeParameterBoundTarget tpbt -> {\n-                    buf.writeU1(tpbt.typeParameterIndex());\n-                    buf.writeU1(tpbt.boundIndex());\n-                }\n-                case EmptyTarget et -> {\n-                    \/\/ nothing to write\n-                }\n-                case FormalParameterTarget fpt -> buf.writeU1(fpt.formalParameterIndex());\n-                case ThrowsTarget tt -> buf.writeU2(tt.throwsTargetIndex());\n-                case LocalVarTarget lvt -> {\n-                    buf.writeU2(lvt.table().size());\n-                    for (var e : lvt.table()) {\n-                        int startPc = labelToBci(lr, e.startLabel());\n-                        buf.writeU2(startPc);\n-                        buf.writeU2(labelToBci(lr, e.endLabel()) - startPc);\n-                        buf.writeU2(e.index());\n-                    }\n-                }\n-                case CatchTarget ct -> buf.writeU2(ct.exceptionTableIndex());\n-                case OffsetTarget ot -> buf.writeU2(labelToBci(lr, ot.target()));\n-                case TypeArgumentTarget tat -> {\n-                    buf.writeU2(labelToBci(lr, tat.target()));\n-                    buf.writeU1(tat.typeArgumentIndex());\n-                }\n-            }\n-\n-            \/\/ target_path\n-            buf.writeU1(targetPath().size());\n-            for (TypePathComponent component : targetPath()) {\n-                buf.writeU1(component.typePathKind().tag());\n-                buf.writeU1(component.typeArgumentIndex());\n-            }\n-\n-            \/\/ type_index\n-            buf.writeIndex(className);\n-\n-            \/\/ element_value_pairs\n-            buf.writeU2(elements.size());\n-            for (AnnotationElement pair : elements()) {\n-                buf.writeIndex(pair.name());\n-                pair.value().writeTo(buf);\n-            }\n-        }\n-    }\n-\n-    public record TypePathComponentImpl(TypeAnnotation.TypePathComponent.Kind typePathKind, int typeArgumentIndex)\n-            implements TypeAnnotation.TypePathComponent {}\n-\n-    public static final class UnboundModuleAttribute extends UnboundAttribute<ModuleAttribute> implements ModuleAttribute {\n-        private final ModuleEntry moduleName;\n-        private final int moduleFlags;\n-        private final Utf8Entry moduleVersion;\n-        private final List<ModuleRequireInfo> requires;\n-        private final List<ModuleExportInfo> exports;\n-        private final List<ModuleOpenInfo> opens;\n-        private final List<ClassEntry> uses;\n-        private final List<ModuleProvideInfo> provides;\n-\n-        public UnboundModuleAttribute(ModuleEntry moduleName,\n-                                      int moduleFlags,\n-                                      Utf8Entry moduleVersion,\n-                                      Collection<ModuleRequireInfo> requires,\n-                                      Collection<ModuleExportInfo> exports,\n-                                      Collection<ModuleOpenInfo> opens,\n-                                      Collection<ClassEntry> uses,\n-                                      Collection<ModuleProvideInfo> provides)\n-        {\n-            super(Attributes.MODULE);\n-            this.moduleName = moduleName;\n-            this.moduleFlags = moduleFlags;\n-            this.moduleVersion = moduleVersion;\n-            this.requires = List.copyOf(requires);\n-            this.exports = List.copyOf(exports);\n-            this.opens = List.copyOf(opens);\n-            this.uses = List.copyOf(uses);\n-            this.provides = List.copyOf(provides);\n-        }\n-\n-        @Override\n-        public ModuleEntry moduleName() {\n-            return moduleName;\n-        }\n-\n-        @Override\n-        public int moduleFlagsMask() {\n-            return moduleFlags;\n-        }\n-\n-        @Override\n-        public Optional<Utf8Entry> moduleVersion() {\n-            return Optional.ofNullable(moduleVersion);\n-        }\n-\n-        @Override\n-        public List<ModuleRequireInfo> requires() {\n-            return requires;\n-        }\n-\n-        @Override\n-        public List<ModuleExportInfo> exports() {\n-            return exports;\n-        }\n-\n-        @Override\n-        public List<ModuleOpenInfo> opens() {\n-            return opens;\n-        }\n-\n-        @Override\n-        public List<ClassEntry> uses() {\n-            return uses;\n-        }\n-\n-        @Override\n-        public List<ModuleProvideInfo> provides() {\n-            return provides;\n-        }\n-    }\n-\n-    public static abstract non-sealed class AdHocAttribute<T extends Attribute<T>>\n-            extends UnboundAttribute<T> {\n-\n-        public AdHocAttribute(AttributeMapper<T> mapper) {\n-            super(mapper);\n-        }\n-\n-        public abstract void writeBody(BufWriter b);\n-\n-        @Override\n-        public void writeTo(BufWriter b) {\n-            b.writeIndex(b.constantPool().utf8Entry(mapper.name()));\n-            b.writeInt(0);\n-            int start = b.size();\n-            writeBody(b);\n-            int written = b.size() - start;\n-            b.patchInt(start - 4, 4, written);\n-        }\n-    }\n-\n-    public static final class EmptyBootstrapAttribute\n-            extends UnboundAttribute<BootstrapMethodsAttribute>\n-            implements BootstrapMethodsAttribute {\n-        public EmptyBootstrapAttribute() {\n-            super(Attributes.BOOTSTRAP_METHODS);\n-        }\n-\n-        @Override\n-        public int bootstrapMethodsSize() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public List<BootstrapMethodEntry> bootstrapMethods() {\n-            return List.of();\n-        }\n-    }\n-\n-    public static abstract sealed class CustomAttribute<T extends CustomAttribute<T>>\n-            extends UnboundAttribute<T>\n-            permits jdk.classfile.CustomAttribute {\n-\n-        public CustomAttribute(AttributeMapper<T> mapper) {\n-            super(mapper);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/UnboundAttribute.java","additions":0,"deletions":950,"binary":false,"changes":950,"status":"deleted"},{"patch":"@@ -1,199 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package jdk.classfile.impl.verifier;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import java.lang.reflect.AccessFlag;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.attribute.LocalVariableInfo;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.CodeImpl;\n-import jdk.classfile.impl.Util;\n-\n-public final class VerificationWrapper {\n-    private final ClassModel clm;\n-    private final ConstantPoolWrapper cp;\n-\n-    public VerificationWrapper(ClassModel clm) {\n-        this.clm = clm;\n-        this.cp = new ConstantPoolWrapper(clm.constantPool());\n-     }\n-\n-    String thisClassName() {\n-        return clm.thisClass().asInternalName();\n-    }\n-\n-    int majorVersion() {\n-        return clm.majorVersion();\n-    }\n-\n-    String superclassName() {\n-        return clm.superclass().map(ClassEntry::asInternalName).orElse(null);\n-    }\n-\n-    Iterable<String> interfaceNames() {\n-        return Util.mappedList(clm.interfaces(), ClassEntry::asInternalName);\n-    }\n-\n-    ConstantPoolWrapper constantPool() {\n-        return cp;\n-    }\n-\n-    Iterable<MethodWrapper> methods() {\n-        return clm.methods().stream().map(m -> new MethodWrapper(m)).toList();\n-    }\n-\n-    boolean findField(String name, String sig) {\n-        for (var f : clm.fields())\n-            if (f.fieldName().stringValue().equals(name) && f.fieldType().stringValue().equals(sig))\n-                return true;\n-        return false;\n-    }\n-\n-    class MethodWrapper {\n-\n-        final MethodModel m;\n-        private final CodeImpl c;\n-        private final List<int[]> exc;\n-\n-        MethodWrapper(MethodModel m) {\n-            this.m = m;\n-            this.c = (CodeImpl)m.code().orElse(null);\n-            exc = new LinkedList<>();\n-            if (c != null) c.iterateExceptionHandlers((start, end, handler, catchType) -> {\n-                exc.add(new int[] {start, end, handler, catchType});\n-            });\n-        }\n-\n-        ConstantPoolWrapper constantPool() {\n-            return cp;\n-        }\n-\n-        boolean isNative() {\n-            return m.flags().has(AccessFlag.NATIVE);\n-        }\n-\n-        boolean isAbstract() {\n-            return m.flags().has(AccessFlag.ABSTRACT);\n-        }\n-\n-        boolean isBridge() {\n-            return m.flags().has(AccessFlag.BRIDGE);\n-        }\n-\n-        boolean isStatic() {\n-            return m.flags().has(AccessFlag.STATIC);\n-        }\n-\n-        String name() {\n-            return m.methodName().stringValue();\n-        }\n-\n-        int maxStack() {\n-            return c == null ? 0 : c.maxStack();\n-        }\n-\n-        int maxLocals() {\n-            return c == null ? 0 : c.maxLocals();\n-        }\n-\n-        String descriptor() {\n-            return m.methodType().stringValue();\n-        }\n-\n-        int codeLength() {\n-            return c == null ? 0 : c.codeLength();\n-        }\n-\n-        byte[] codeArray() {\n-            return c == null ? null : c.codeArray();\n-        }\n-\n-        List<int[]> exceptionTable() {\n-            return exc;\n-        }\n-\n-        List<LocalVariableInfo> localVariableTable() {\n-            var attro = c.findAttribute(Attributes.LOCAL_VARIABLE_TABLE);\n-            return attro.map(lvta -> lvta.localVariables()).orElse(List.of());\n-        }\n-\n-        byte[] stackMapTableRawData() {\n-            var attro = c.findAttribute(Attributes.STACK_MAP_TABLE);\n-            return attro.map(attr -> ((BoundAttribute) attr).contents()).orElse(null);\n-        }\n-\n-    }\n-\n-    static class ConstantPoolWrapper {\n-\n-        private final ConstantPool cp;\n-\n-        ConstantPoolWrapper(ConstantPool cp) {\n-            this.cp = cp;\n-        }\n-\n-        int entryCount() {\n-            return cp.entryCount();\n-        }\n-\n-        String classNameAt(int index) {\n-            return ((ClassEntry)cp.entryByIndex(index)).asInternalName();\n-        }\n-\n-        String dynamicConstantSignatureAt(int index) {\n-            return ((DynamicConstantPoolEntry)cp.entryByIndex(index)).type().stringValue();\n-        }\n-\n-        int tagAt(int index) {\n-            return cp.entryByIndex(index).tag();\n-        }\n-\n-        private NameAndTypeEntry _refNameType(int index) {\n-            var e = cp.entryByIndex(index);\n-            return (e instanceof DynamicConstantPoolEntry de) ? de.nameAndType() : ((MemberRefEntry)e).nameAndType();\n-        }\n-\n-        String refNameAt(int index) {\n-            return _refNameType(index).name().stringValue();\n-        }\n-\n-        String refSignatureAt(int index) {\n-            return _refNameType(index).type().stringValue();\n-        }\n-\n-        int refClassIndexAt(int index) {\n-            return ((MemberRefEntry)cp.entryByIndex(index)).owner().index();\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationWrapper.java","additions":0,"deletions":199,"binary":false,"changes":199,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models an array load instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ArrayLoadInstruction extends Instruction\n-        permits AbstractInstruction.UnboundArrayLoadInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an array load instruction}\n-     *\n-     * @param op the opcode for the specific type of array load instruction,\n-     *           which must be of kind {@link Opcode.Kind#ARRAY_LOAD}\n-     *\/\n-    static ArrayLoadInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.ARRAY_LOAD);\n-        return new AbstractInstruction.UnboundArrayLoadInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ArrayLoadInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models an array store instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ArrayStoreInstruction extends Instruction\n-        permits AbstractInstruction.UnboundArrayStoreInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an array store instruction}\n-     *\n-     * @param op the opcode for the specific type of array store instruction,\n-     *           which must be of kind {@link Opcode.Kind#ARRAY_STORE}\n-     *\/\n-    static ArrayStoreInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.ARRAY_STORE);\n-        return new AbstractInstruction.UnboundArrayStoreInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ArrayStoreInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a branching instruction (conditional or unconditional) in the {@code\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface BranchInstruction extends Instruction\n-        permits AbstractInstruction.BoundBranchInstruction,\n-                AbstractInstruction.UnboundBranchInstruction {\n-    \/**\n-     * {@return the target of the branch}\n-     *\/\n-    Label target();\n-\n-    \/**\n-     * {@return a branch instruction}\n-     *\n-     * @param op the opcode for the specific type of branch instruction,\n-     *           which must be of kind {@link Opcode.Kind#BRANCH}\n-     *\/\n-    static BranchInstruction of(Opcode op, Label target) {\n-        Util.checkKind(op, Opcode.Kind.BRANCH);\n-        return new AbstractInstruction.UnboundBranchInstruction(op, target);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/BranchInstruction.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-import jdk.classfile.impl.BoundCharacterRange;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n- *\/\n-public sealed interface CharacterRange extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundCharacterRange, BoundCharacterRange {\n-    \/**\n-     * {@return the start of the instruction range}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end of the instruction range}\n-     *\/\n-    Label endScope();\n-\n-    \/**\n-     * {@return the encoded start of the character range region (inclusive)}\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeStart();\n-\n-    \/**\n-     * {@return the encoded end of the character range region (exclusive)}.\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeEnd();\n-\n-    \/**\n-     * A flags word, indicating the kind of range.  Multiple flag bits\n-     * may be set.  Valid flags include\n-     * {@link jdk.classfile.Classfile#CRT_STATEMENT},\n-     * {@link jdk.classfile.Classfile#CRT_BLOCK},\n-     * {@link jdk.classfile.Classfile#CRT_ASSIGNMENT},\n-     * {@link jdk.classfile.Classfile#CRT_FLOW_CONTROLLER},\n-     * {@link jdk.classfile.Classfile#CRT_FLOW_TARGET},\n-     * {@link jdk.classfile.Classfile#CRT_INVOKE},\n-     * {@link jdk.classfile.Classfile#CRT_CREATE},\n-     * {@link jdk.classfile.Classfile#CRT_BRANCH_TRUE},\n-     * {@link jdk.classfile.Classfile#CRT_BRANCH_FALSE}.\n-     *\n-     * @see jdk.classfile.attribute.CharacterRangeInfo#flags()\n-     *\n-     * @return the flags\n-     *\/\n-    int flags();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/CharacterRange.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.BytecodeHelpers;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a primitive conversion instruction in the {@code code} array of a\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ConvertInstruction extends Instruction\n-        permits AbstractInstruction.UnboundConvertInstruction {\n-    \/**\n-     * {@return the source type to convert from}\n-     *\/\n-    TypeKind fromType();\n-\n-    \/**\n-     * {@return the destination type to convert to}\n-     *\/\n-    TypeKind toType();\n-\n-    \/**\n-     * {@return A conversion instruction}\n-     *\n-     * @param fromType the type to convert from\n-     * @param toType the type to convert to\n-     *\/\n-    static ConvertInstruction of(TypeKind fromType, TypeKind toType) {\n-        return of(BytecodeHelpers.convertOpcode(fromType, toType));\n-    }\n-\n-    \/**\n-     * {@return a conversion instruction}\n-     *\n-     * @param op the opcode for the specific type of conversion instruction,\n-     *           which must be of kind {@link Opcode.Kind#CONVERT}\n-     *\/\n-    static ConvertInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.CONVERT);\n-        return new AbstractInstruction.UnboundConvertInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ConvertInstruction.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a field access instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface FieldInstruction extends Instruction\n-        permits AbstractInstruction.BoundFieldInstruction, AbstractInstruction.UnboundFieldInstruction {\n-    \/**\n-     * {@return the {@link FieldRefEntry} constant described by this instruction}\n-     *\/\n-    FieldRefEntry field();\n-\n-    \/**\n-     * {@return the class holding the field}\n-     *\/\n-    default ClassEntry owner() {\n-        return field().owner();\n-    }\n-\n-    \/**\n-     * {@return the name of the field}\n-     *\/\n-    default Utf8Entry name() {\n-        return field().nameAndType().name();\n-    }\n-\n-    \/**\n-     * {@return the field descriptor of the field}\n-     *\/\n-    default Utf8Entry type() {\n-        return field().nameAndType().type();\n-    }\n-\n-    \/**\n-     * {@return a symbolic descriptor for the type of the field}\n-     *\/\n-    default ClassDesc typeSymbol() {\n-        return ClassDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param field a constant pool entry describing the field\n-     *\/\n-    static FieldInstruction of(Opcode op, FieldRefEntry field) {\n-        Util.checkKind(op, Opcode.Kind.FIELD_ACCESS);\n-        return new AbstractInstruction.UnboundFieldInstruction(op, field);\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param owner the class holding the field\n-     * @param name the name of the field\n-     * @param type the field descriptor\n-     *\/\n-    static FieldInstruction of(Opcode op,\n-                               ClassEntry owner,\n-                               Utf8Entry name,\n-                               Utf8Entry type) {\n-        return of(op, owner, TemporaryConstantPool.INSTANCE.natEntry(name, type));\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param owner the class holding the field\n-     * @param nameAndType the name and field descriptor of the field\n-     *\/\n-    static FieldInstruction of(Opcode op,\n-                               ClassEntry owner,\n-                               NameAndTypeEntry nameAndType) {\n-        return of(op, TemporaryConstantPool.INSTANCE.fieldRefEntry(owner, nameAndType));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/FieldInstruction.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a local variable increment instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface IncrementInstruction extends Instruction\n-        permits AbstractInstruction.BoundIncrementInstruction,\n-                AbstractInstruction.UnboundIncrementInstruction {\n-    \/**\n-     * {@return the local variable slot to increment}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the value to increment by}\n-     *\/\n-    int constant();\n-\n-    \/**\n-     * {@return an increment instruction}\n-     *\n-     * @param slot the local variable slot to increment\n-     * @param constant the value to increment by\n-     *\/\n-    static IncrementInstruction of(int slot, int constant) {\n-        return new AbstractInstruction.UnboundIncrementInstruction(slot, constant);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/IncrementInstruction.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.List;\n-import java.util.function.Function;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface InvokeDynamicInstruction extends Instruction\n-        permits AbstractInstruction.BoundInvokeDynamicInstruction, AbstractInstruction.UnboundInvokeDynamicInstruction {\n-    \/**\n-     * {@return an {@link InvokeDynamicEntry} describing the call site}\n-     *\/\n-    InvokeDynamicEntry invokedynamic();\n-\n-    \/**\n-     * {@return the invocation name of the call site}\n-     *\/\n-    default Utf8Entry name() {\n-        return invokedynamic().name();\n-    }\n-\n-    \/**\n-     * {@return the invocation type of the call site}\n-     *\/\n-    default Utf8Entry type() {\n-        return invokedynamic().type();\n-    }\n-\n-    \/**\n-     * {@return the invocation type of the call site, as a symbolic descriptor}\n-     *\/\n-    default MethodTypeDesc typeSymbol() {\n-        return MethodTypeDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the bootstrap method of the call site}\n-     *\/\n-    default DirectMethodHandleDesc bootstrapMethod() {\n-        return invokedynamic().bootstrap()\n-                              .bootstrapMethod()\n-                              .asSymbol();\n-    }\n-\n-    \/**\n-     * {@return the bootstrap arguments of the call site}\n-     *\/\n-    default List<ConstantDesc> bootstrapArgs() {\n-        return Util.mappedList(invokedynamic().bootstrap().arguments(), new Function<>() {\n-            @Override\n-            public ConstantDesc apply(LoadableConstantEntry loadableConstantEntry) {\n-                return loadableConstantEntry.constantValue();\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * {@return an invokedynamic instruction}\n-     *\n-     * @param invokedynamic the constant pool entry describing the call site\n-     *\/\n-    static InvokeDynamicInstruction of(InvokeDynamicEntry invokedynamic) {\n-        return new AbstractInstruction.UnboundInvokeDynamicInstruction(invokedynamic);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.lang.constant.MethodTypeDesc;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a method invocation instruction in the {@code code} array of a {@code\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface InvokeInstruction extends Instruction\n-        permits AbstractInstruction.BoundInvokeInterfaceInstruction, AbstractInstruction.BoundInvokeInstruction, AbstractInstruction.UnboundInvokeInstruction {\n-    \/**\n-     * {@return the {@link MethodRefEntry} or {@link InterfaceMethodRefEntry}\n-     * constant described by this instruction}\n-     *\/\n-    MemberRefEntry method();\n-\n-    \/**\n-     * {@return whether the class holding the method is an interface}\n-     *\/\n-    boolean isInterface();\n-\n-    \/**\n-     * {@return for an {@code invokeinterface}, the {@code count} value, as\n-     * defined in JVMS 6.5}\n-     *\/\n-    int count();\n-\n-    \/**\n-     * {@return the class holding the method}\n-     *\/\n-    default ClassEntry owner() {\n-        return method().owner();\n-    }\n-\n-    \/**\n-     * {@return the name of the method}\n-     *\/\n-    default Utf8Entry name() {\n-        return method().nameAndType().name();\n-    }\n-\n-    \/**\n-     * {@return the method descriptor of the method}\n-     *\/\n-    default Utf8Entry type() {\n-        return method().nameAndType().type();\n-    }\n-\n-    \/**\n-     * {@return a symbolic descriptor for the method type}\n-     *\/\n-    default MethodTypeDesc typeSymbol() {\n-        return MethodTypeDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param method a constant pool entry describing the method\n-     *\/\n-    static InvokeInstruction of(Opcode op, MemberRefEntry method) {\n-        Util.checkKind(op, Opcode.Kind.INVOKE);\n-        return new AbstractInstruction.UnboundInvokeInstruction(op, method);\n-    }\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param owner the class holding the method\n-     * @param name the name of the method\n-     * @param type the method descriptor\n-     * @param isInterface whether the class holding the method is an interface\n-     *\/\n-    static InvokeInstruction of(Opcode op,\n-                                ClassEntry owner,\n-                                Utf8Entry name,\n-                                Utf8Entry type,\n-                                boolean isInterface) {\n-        return of(op, owner, TemporaryConstantPool.INSTANCE.natEntry(name, type), isInterface);\n-    }\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param owner the class holding the method\n-     * @param nameAndType the name and type of the method\n-     * @param isInterface whether the class holding the method is an interface\n-     *\/\n-    static InvokeInstruction of(Opcode op,\n-                                ClassEntry owner,\n-                                NameAndTypeEntry nameAndType,\n-                                boolean isInterface) {\n-        return of(op, isInterface\n-                      ? TemporaryConstantPool.INSTANCE.interfaceMethodRefEntry(owner, nameAndType)\n-                      : TemporaryConstantPool.INSTANCE.methodRefEntry(owner, nameAndType));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/InvokeInstruction.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.impl.LabelImpl;\n-\n-\/**\n- * A pseudo-instruction which indicates that the specified label corresponds to\n- * the current position in the {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} during traversal of the elements of a {@link CodeModel}.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LabelTarget extends PseudoInstruction\n-        permits LabelImpl {\n-    Label label();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LabelTarget.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.attribute.LineNumberTableAttribute;\n-import jdk.classfile.impl.LineNumberImpl;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LineNumber extends PseudoInstruction\n-        permits LineNumberImpl {\n-    int line();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LineNumber.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.BytecodeHelpers;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a local variable load instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface LoadInstruction extends Instruction\n-        permits AbstractInstruction.BoundLoadInstruction,\n-                AbstractInstruction.UnboundLoadInstruction {\n-    int slot();\n-\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a local variable load instruction}\n-     *\n-     * @param kind the type of the value to be loaded\n-     * @param slot the local varaible slot to load from\n-     *\/\n-    static LoadInstruction of(TypeKind kind, int slot) {\n-        return of(BytecodeHelpers.loadOpcode(kind, slot), slot);\n-    }\n-\n-    \/**\n-     * {@return a local variable load instruction}\n-     *\n-     * @param op the opcode for the specific type of load instruction,\n-     *           which must be of kind {@link Opcode.Kind#LOAD}\n-     * @param slot the local varaible slot to load from\n-     *\/\n-    static LoadInstruction of(Opcode op, int slot) {\n-        Util.checkKind(op, Opcode.Kind.LOAD);\n-        return new AbstractInstruction.UnboundLoadInstruction(op, slot);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LoadInstruction.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-import jdk.classfile.impl.BoundLocalVariable;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LocalVariable extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundLocalVariable, BoundLocalVariable {\n-    \/**\n-     * {@return the local variable slot}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the local variable name}\n-     *\/\n-    Utf8Entry name();\n-\n-    \/**\n-     * {@return the local variable field descriptor}\n-     *\/\n-    Utf8Entry type();\n-\n-    \/**\n-     * {@return the local variable type, as a symbolic descriptor}\n-     *\/\n-    default ClassDesc typeSymbol() {\n-        return ClassDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the start range of the local variable scope}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end range of the local variable scope}\n-     *\/\n-    Label endScope();\n-\n-    boolean writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LocalVariable.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.Signature;\n-import jdk.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-import jdk.classfile.impl.BoundLocalVariableType;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the {@link\n- * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n- * traversal of the elements of a {@link CodeModel}, according to the setting of\n- * the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n- *\/\n-public sealed interface LocalVariableType extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundLocalVariableType, BoundLocalVariableType {\n-    \/**\n-     * {@return the local variable slot}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the local variable name}\n-     *\/\n-    Utf8Entry name();\n-\n-    \/**\n-     * {@return the local variable signature}\n-     *\/\n-    Utf8Entry signature();\n-\n-    \/**\n-     * {@return the local variable signature}\n-     *\/\n-    default Signature signatureSymbol() {\n-        return Signature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the start range of the local variable scope}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end range of the local variable scope}\n-     *\/\n-    Label endScope();\n-\n-    boolean writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LocalVariableType.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.util.List;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface LookupSwitchInstruction extends Instruction\n-        permits AbstractInstruction.BoundLookupSwitchInstruction,\n-                AbstractInstruction.UnboundLookupSwitchInstruction {\n-    \/**\n-     * {@return the target of the default case}\n-     *\/\n-    Label defaultTarget();\n-\n-    \/**\n-     * {@return the cases of the switch}\n-     *\/\n-    List<SwitchCase> cases();\n-\n-    \/**\n-     * {@return a lookup switch instruction}\n-     *\n-     * @param defaultTarget the default target of the switch\n-     * @param cases the cases of the switch\n-     *\/\n-    static LookupSwitchInstruction of(Label defaultTarget, List<SwitchCase> cases) {\n-        return new AbstractInstruction.UnboundLookupSwitchInstruction(defaultTarget, cases);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/LookupSwitchInstruction.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface MonitorInstruction extends Instruction\n-        permits AbstractInstruction.UnboundMonitorInstruction {\n-\n-    \/**\n-     * {@return a monitor instruction}\n-     *\n-     * @param op the opcode for the specific type of monitor instruction,\n-     *           which must be of kind {@link Opcode.Kind#MONITOR}\n-     *\/\n-    static MonitorInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.MONITOR);\n-        return new AbstractInstruction.UnboundMonitorInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/MonitorInstruction.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewMultiArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewMultidimensionalArrayInstruction,\n-                AbstractInstruction.UnboundNewMultidimensionalArrayInstruction {\n-\n-    \/**\n-     * {@return the type of the array, as a symbolic descriptor}\n-     *\/\n-    ClassEntry arrayType();\n-\n-    \/**\n-     * {@return the number of dimensions of the aray}\n-     *\/\n-    int dimensions();\n-\n-    \/**\n-     * {@return a new multi-dimensional array instruction}\n-     *\n-     * @param arrayTypeEntry the type of the array\n-     * @param dimensions the number of dimensions of the array\n-     *\/\n-    static NewMultiArrayInstruction of(ClassEntry arrayTypeEntry,\n-                                       int dimensions) {\n-        return new AbstractInstruction.UnboundNewMultidimensionalArrayInstruction(arrayTypeEntry, dimensions);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n- * attribute.  Delivered as a {@link CodeElement} when traversing the elements\n- * of a {@link CodeModel}.\n- *\/\n-public sealed interface NewObjectInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewObjectInstruction, AbstractInstruction.UnboundNewObjectInstruction {\n-\n-    \/**\n-     * {@return the type of object to create}\n-     *\/\n-    ClassEntry className();\n-\n-    \/**\n-     * {@return a new object instruction}\n-     *\n-     * @param className the type of object to create\n-     *\/\n-    static NewObjectInstruction of(ClassEntry className) {\n-        return new AbstractInstruction.UnboundNewObjectInstruction(className);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/NewObjectInstruction.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code newarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewPrimitiveArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewPrimitiveArrayInstruction,\n-                AbstractInstruction.UnboundNewPrimitiveArrayInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a new primitive array instruction}\n-     *\n-     * @param typeKind the component type of the array\n-     *\/\n-    static NewPrimitiveArrayInstruction of(TypeKind typeKind) {\n-        return new AbstractInstruction.UnboundNewPrimitiveArrayInstruction(typeKind);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewReferenceArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewReferenceArrayInstruction, AbstractInstruction.UnboundNewReferenceArrayInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    ClassEntry componentType();\n-\n-    \/**\n-     * {@return a new reference array instruction}\n-     *\n-     * @param componentType the component type of the array\n-     *\/\n-    static NewReferenceArrayInstruction of(ClassEntry componentType) {\n-        return new AbstractInstruction.UnboundNewReferenceArrayInstruction(componentType);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code nop} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NopInstruction extends Instruction\n-        permits AbstractInstruction.UnboundNopInstruction {\n-    \/**\n-     * {@return a no-op instruction}\n-     *\/\n-    static NopInstruction of() {\n-        return new AbstractInstruction.UnboundNopInstruction();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/NopInstruction.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models an arithmetic operator instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#OPERATOR}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface OperatorInstruction extends Instruction\n-        permits AbstractInstruction.UnboundOperatorInstruction {\n-    \/**\n-     * {@return the operand type of the instruction}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an operator instruction}\n-     *\n-     * @param op the opcode for the specific type of array load instruction,\n-     *           which must be of kind {@link Opcode.Kind#OPERATOR}\n-     *\/\n-    static OperatorInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.OPERATOR);\n-        return new AbstractInstruction.UnboundOperatorInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/OperatorInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.BytecodeHelpers;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a return-from-method instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#RETURN}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ReturnInstruction extends Instruction\n-        permits AbstractInstruction.UnboundReturnInstruction {\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a return instruction}\n-     *\n-     * @param typeKind the type of the return instruction\n-     *\/\n-    static ReturnInstruction of(TypeKind typeKind) {\n-        return of(BytecodeHelpers.returnOpcode(typeKind));\n-    }\n-\n-    \/**\n-     * {@return a return instruction}\n-     *\n-     * @param op the opcode for the specific type of return instruction,\n-     *           which must be of kind {@link Opcode.Kind#RETURN}\n-     *\/\n-    static ReturnInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.RETURN);\n-        return new AbstractInstruction.UnboundReturnInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ReturnInstruction.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a stack manipulation instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#STACK}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface StackInstruction extends Instruction\n-        permits AbstractInstruction.UnboundStackInstruction {\n-\n-    \/**\n-     * {@return a stack manipulation instruction}\n-     *\n-     * @param op the opcode for the specific type of stack instruction,\n-     *           which must be of kind {@link Opcode.Kind#STACK}\n-     *\/\n-    static StackInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.STACK);\n-        return new AbstractInstruction.UnboundStackInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/StackInstruction.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.BytecodeHelpers;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models a local variable store instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#STORE}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface StoreInstruction extends Instruction\n-        permits AbstractInstruction.BoundStoreInstruction, AbstractInstruction.UnboundStoreInstruction {\n-    int slot();\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a local variable store instruction}\n-     *\n-     * @param kind the type of the value to be stored\n-     * @param slot the local varaible slot to store to\n-     *\/\n-    static StoreInstruction of(TypeKind kind, int slot) {\n-        return of(BytecodeHelpers.storeOpcode(kind, slot), slot);\n-    }\n-\n-    \/**\n-     * {@return a local variable store instruction}\n-     *\n-     * @param op the opcode for the specific type of store instruction,\n-     *           which must be of kind {@link Opcode.Kind#STORE}\n-     * @param slot the local varaible slot to store to\n-     *\/\n-    static StoreInstruction of(Opcode op, int slot) {\n-        Util.checkKind(op, Opcode.Kind.STORE);\n-        return new AbstractInstruction.UnboundStoreInstruction(op, slot);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/StoreInstruction.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models an {@code athrow} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ThrowInstruction extends Instruction\n-        permits AbstractInstruction.UnboundThrowInstruction {\n-\n-    \/**\n-     * {@return a throw instruction}\n-     *\/\n-    static ThrowInstruction of() {\n-        return new AbstractInstruction.UnboundThrowInstruction();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ThrowInstruction.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.Util;\n-\n-\/**\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface TypeCheckInstruction extends Instruction\n-        permits AbstractInstruction.BoundTypeCheckInstruction,\n-                AbstractInstruction.UnboundTypeCheckInstruction {\n-    ClassEntry type();\n-\n-    \/**\n-     * {@return a type check instruction}\n-     *\n-     * @param op the opcode for the specific type of type check instruction,\n-     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n-     * @param type the type against which to check or cast\n-     *\/\n-    static TypeCheckInstruction of(Opcode op, ClassEntry type) {\n-        Util.checkKind(op, Opcode.Kind.TYPE_CHECK);\n-        return new AbstractInstruction.UnboundTypeCheckInstruction(op, type);\n-    }\n-\n-    \/**\n-     * {@return a type check instruction}\n-     *\n-     * @param op the opcode for the specific type of type check instruction,\n-     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n-     * @param type the type against which to check or cast\n-     *\/\n-    static TypeCheckInstruction of(Opcode op, ClassDesc type) {\n-        return of(op, TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(type))));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/TypeCheckInstruction.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,461 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * <h2>Classfile parsing, generation, and transformation<\/h2>\n- * The {@code jdk.classfile} package contains classes for reading, writing, and\n- * modifying Java class files, as specified in Chapter 4 of the <a\n- * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/index.html\">Java\n- * Java Virtual Machine Specification<\/a>.\n- *\n- * <h2>Reading classfiles<\/h2>\n- * The main class for reading classfiles is {@link jdk.classfile.ClassModel}; we\n- * convert bytes into a {@link jdk.classfile.ClassModel} with {@link\n- * jdk.classfile.Classfile#parse(byte[], jdk.classfile.Classfile.Option[])}:\n- * <p>\n- * {@snippet lang=java :\n- * ClassModel cm = ClassModel.of(bytes);\n- * }\n- * <p>\n- * There are several additional overloads of {@code parse} that let you specify\n- * various processing options.\n- * <p>\n- * A {@link jdk.classfile.ClassModel} is an immutable description of a class\n- * file.  It provides accessor methods to get at class metadata (e.g., {@link\n- * jdk.classfile.ClassModel#thisClass()}, {@link jdk.classfile.ClassModel#flags()}),\n- * as well as subordinate classfile entities ({@link jdk.classfile.ClassModel#fields()},\n- * {@link jdk.classfile.ClassModel#attributes()}). A {@link\n- * jdk.classfile.ClassModel} is inflated lazily; most parts of the classfile are\n- * not parsed until they are actually needed.\n- * <p>\n- * We can enumerate the names of the fields and methods in a class by:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n- * <p>\n- * When we enumerate the methods, we get a {@link jdk.classfile.MethodModel} for each method; like a\n- * {@code ClassModel}, it gives us access to method metadata and\n- * the ability to descend into subordinate entities such as the bytecodes of the\n- * method body. In this way, a {@code ClassModel} is the root of a\n- * tree, with children for fields, methods, and attributes, and {@code MethodModel} in\n- * turn has its own children (attributes, {@code CodeModel}, etc.)\n- * <p>\n- * Methods like {@link jdk.classfile.ClassModel#methods} allows us to traverse the class structure\n- * explicitly, going straight to the parts we are interested in.  This is useful\n- * for certain kinds of analysis, but if we wanted to process the whole\n- * classfile, we may want something more organized.  A {@link\n- * jdk.classfile.ClassModel} also provides us with a view of the classfile as a\n- * series of class <em>elements<\/em>, which may include methods, fields, attributes,\n- * and more, and which can be distinguished with pattern matching.  We could\n- * rewrite the above example as:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n- * <p>\n- * The models returned as elements from traversing {@code ClassModel} can in\n- * turn be sources of elements.  If we wanted to\n- * traverse a classfile and enumerate all the classes for which we access fields\n- * and methods, we can pick out the class elements that describe methods, then\n- * in turn pick out the method elements that describe the code attribute, and\n- * finally pick out the code elements that describe field access and invocation\n- * instructions:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies1\"}\n- * <p>\n- * This same query could alternately be processed as a stream pipeline over\n- * class elements:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies2\"}\n- *\n- * <h3>Models and elements<\/h3>\n- * The view of classfiles presented by this API is framed in terms of\n- * <em>models<\/em> and <em>elements<\/em>.  Models represent complex structures,\n- * such as classes, methods, fields, record elements, or the code body of a\n- * method.  Models can be explored either via random-access navigation (such as\n- * the {@link jdk.classfile.ClassModel#methods()} accessor) or as a linear\n- * sequence of <em>elements<\/em>. (Elements can in turn also be models; a {@link\n- * jdk.classfile.FieldModel} is also an element of a class.) For each model type\n- * (e.g., {@link jdk.classfile.MethodModel}), there is a corresponding element\n- * type ({@link jdk.classfile.MethodElement}).  Models and elements are immutable\n- * and are inflated lazily so creating a model does not necessarily require\n- * processing its entire content.\n- *\n- * <h3>The constant pool<\/h3>\n- * Much of the interesting content in a classfile lives in the <em>constant\n- * pool<\/em>. {@link jdk.classfile.ClassModel} provides a lazily-inflated,\n- * read-only view of the constant pool via {@link jdk.classfile.ClassModel#constantPool()}.\n- * Descriptions of classfile content is often exposed in the form of various\n- * subtypes of {@link jdk.classfile.constantpool.PoolEntry}, such as {@link\n- * jdk.classfile.constantpool.ClassEntry} or {@link jdk.classfile.constantpool.Utf8Entry}.\n- * <p>\n- * Constant pool entries are also exposed through models and elements; in the\n- * above traversal example, the {@link jdk.classfile.instruction.InvokeInstruction}\n- * element exposed a method for {@code owner} that corresponds to a {@code\n- * Constant_Class_info} entry in the constant pool.\n- *\n- * <h3>Attributes<\/h3>\n- * Much of the contents of a classfile is stored in attributes; attributes are\n- * found on classes, methods, fields, record components, and on the {@code Code}\n- * attribute.  Most attributes are surfaced as elements; for example, {@link\n- * jdk.classfile.attribute.SignatureAttribute} is a {@link\n- * jdk.classfile.ClassElement}, {@link jdk.classfile.MethodElement}, and {@link\n- * jdk.classfile.FieldElement} since it can appear in all of those places, and is\n- * included when iterating the elements of the corresponding model.\n- * <p>\n- * Some attributes are not surfaced as elements; these are attributes that are\n- * tightly coupled to -- and logically part of -- other parts of the class file.\n- * These include the {@code BootstrapMethods}, {@code LineNumberTable}, {@code\n- * StackMapTable}, {@code LocalVariableTable}, and {@code\n- * LocalVariableTypeTable} attributes.  These are processed by the library and\n- * treated as part of the structure they are coupled to (the entries of the\n- * {@code BootstrapMethods} attribute are treated as part of the constant pool;\n- * line numbers and local variable metadata are modeled as elements of {@link\n- * jdk.classfile.CodeModel}.)\n- * <p>\n- * The {@code Code} attribute, in addition to being modeled as a {@link\n- * jdk.classfile.MethodElement}, is also a model in its own right ({@link\n- * jdk.classfile.CodeModel}) due to its complex structure.\n- * <p>\n- * Each standard attribute has an interface (in {@code jdk.classfile.attribute})\n- * which exposes the contents of the attribute and provides factories to\n- * construct the attribute.  For example, the {@code Signature} attribute is\n- * defined by the {@link jdk.classfile.attribute.SignatureAttribute} class, and\n- * provides accessors for {@link jdk.classfile.attribute.SignatureAttribute#signature()}\n- * as well as factories taking {@link jdk.classfile.constantpool.Utf8Entry} or\n- * {@link java.lang.String}.\n- *\n- * <h3>Custom attributes<\/h3>\n- * Attributes are converted between their classfile form and their corresponding\n- * object form via an {@link jdk.classfile.AttributeMapper}.  An {@code\n- * AttributeMapper} provides the {@link jdk.classfile.AttributeMapper#readAttribute(AttributedElement, ClassReader, int)} method for mapping from the classfile format\n- * to an attribute instance, and the {@link jdk.classfile.AttributeMapper#writeAttribute(jdk.classfile.BufWriter,\n- * java.lang.Object)} method for mapping back to the classfile format.  It also\n- * contains metadata including the attribute name, the set of classfile entities\n- * where the attribute is applicable, and whether multiple attributes of the\n- * same kind are allowed on a single entity.\n- * <p>\n- * There are built-in attribute mappers (in {@link jdk.classfile.Attributes}) for\n- * each of the attribute types defined in section {@jvms 4.7} of <cite>The Java Virtual\n- * Machine Specification<\/cite>, as well as several common nonstandard attributes used by the\n- * JDK such as {@code CharacterRangeTable}.\n- * <p>\n- * Unrecognized attributes are delivered as elements of type {@link\n- * jdk.classfile.attribute.UnknownAttribute}, which provide access only to the\n- * {@code byte[]} contents of the attribute.\n- * <p>\n- * For nonstandard attributes, user-provided attribute mappers can be specified\n- * through the use of the {@link jdk.classfile.Classfile.Option#attributeMapper(java.util.function.Function)}}\n- * classfile option.  Implementations of custom attributes should extend {@link\n- * jdk.classfile.CustomAttribute}. Custom attributes will be delivered as\n- * elements in all of the contexts specified by {@link jdk.classfile.AttributeMapper#whereApplicable()}.\n- *\n- * <h3>Options<\/h3>\n- * <p>\n- * {@link jdk.classfile.Classfile#parse(byte[], jdk.classfile.Classfile.Option[])}\n- * accepts a list of options.  {@link jdk.classfile.Classfile.Option} exports some\n- * static boolean options, as well as factories for more complex options,\n- * including:\n- * <ul>\n- *   <li>{@link jdk.classfile.Classfile.Option#generateStackmap(boolean)} -- generate stackmaps (default is true)<\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#processDebug(boolean)} -- processing of debug information, such as local variable metadata (default is true) <\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#processLineNumbers(boolean)} -- processing of line numbers (default is true) <\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#processUnknownAttributes(boolean)} -- processing of unrecognized attributes (default is true)<\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#constantPoolSharing(boolean)}} -- share constant pool when transforming (default is true)<\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#classHierarchyResolver(jdk.classfile.ClassHierarchyResolver)} -- specify a custom class hierarchy\n- * resolver used by stack map generation<\/li>\n- *   <li>{@link jdk.classfile.Classfile.Option#attributeMapper(java.util.function.Function)} -- specify format of custom attributes<\/li>\n- * <\/ul>\n- * <p>\n- * Most options allow you to request that certain parts of the classfile be\n- * skipped during traversal, such as debug information or unrecognized\n- * attributes.  Some options allow you to suppress generation of portions of the\n- * classfile, such as stack maps.  Many of these options are to access\n- * performance tradeoffs; processing debug information and line numbers has a\n- * cost (both in writing and reading.)  If you don't need this information, you\n- * can suppress it with options to gain some performance.\n- *\n- * <h2>Writing classfiles<\/h2>\n- * Classfile generation is accomplished through <em>builders<\/em>.  For each\n- * entity type that has a model, there is also a corresponding builder type;\n- * classes are built through {@link jdk.classfile.ClassBuilder}, methods through\n- * {@link jdk.classfile.MethodBuilder}, etc.\n- * <p>\n- * Rather than creating builders directly, builders are provided as an argument\n- * to a user-provided lambda.  To generate the familiar \"hello world\" program,\n- * we ask for a class builder, and use that class builder to create method\n- * builders for the constructor and {@code main} method, and in turn use the\n- * method builders to create a {@code Code} attribute and use the code builders\n- * to generate the instructions:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld\"}\n- * <p>\n- * Builders often support multiple ways of expressing the same entity at\n- * different levels of abstraction.  For example, the {@code invokevirtual}\n- * instruction invoking {@code println} could have been generated with {@link\n- * jdk.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n- * jdk.classfile.CodeBuilder#invokeInstruction(jdk.classfile.Opcode,\n- * java.lang.constant.ClassDesc, java.lang.String, java.lang.constant.MethodTypeDesc,\n- * boolean) CodeBuilder.invokeInstruction}, or\n- * {@link jdk.classfile.CodeBuilder#with(jdk.classfile.ClassfileElement) CodeBuilder.with}.\n- * <p>\n- * The convenience method {@code CodeBuilder.invokevirtual} behaves as if it calls\n- * the convenience method {@code CodeBuilder.invokeInstruction}, which in turn behaves\n- * as if it calls method {@code CodeBuilder.with}. This composing of method calls on the\n- * builder enables the composing of transforms (as described later).\n- *\n- * <h3>Symbolic information<\/h3>\n- * To describe symbolic information for classes and types, the API uses the\n- * nominal descriptor abstractions from {@code java.lang.constant} such as {@link\n- * java.lang.constant.ClassDesc} and {@link java.lang.constant.MethodTypeDesc},\n- * which is less error-prone than using raw strings.\n- * <p>\n- * If a constant pool entry has a nominal representation then it provides a\n- * method returning the corresponding nominal descriptor type e.g.\n- * method {@link jdk.classfile.constantpool.ClassEntry#asSymbol} returns\n- * {@code ClassDesc}.\n- * <p>\n- * Where appropriate builders provide two methods for building an element with\n- * symbolic information, one accepting nominal descriptors, and the other\n- * accepting constant pool entries.\n- *\n- * <h2>Transforming classfiles<\/h2>\n- * Classfile Processing APIs are most frequently used to combine reading and\n- * writing into transformation, where a classfile is read, localized changes are\n- * made, but much of the classfile is passed through unchanged.  For each kind\n- * of builder, {@code XxxBuilder} has a method {@code with(XxxElement)} so that\n- * elements that we wish to pass through unchanged can be handed directly back\n- * to the builder.\n- * <p>\n- * If we wanted to strip out methods whose names starts with \"debug\", we could\n- * get an existing {@link jdk.classfile.ClassModel}, build a new classfile that\n- * provides a {@link jdk.classfile.ClassBuilder}, iterate the elements of the\n- * original {@link jdk.classfile.ClassModel}, and pass through all of them to\n- * the builder except the methods we want to drop:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods1\"}\n- * <p>\n- * This hands every class element, except for those corresponding to methods\n- * whose names start with {@code debug}, back to the builder.  Transformations\n- * can of course be more complicated, diving into method bodies and instructions\n- * and transforming those as well, but the same structure is repeated at every\n- * level, since every entity has corresponding model, builder, and element\n- * abstractions.\n- * <p>\n- * Transformation can be viewed as a \"flatMap\" operation on the sequence of\n- * elements; for every element, we could pass it through unchanged, drop it, or\n- * replace it with one or more elements.  Because transformation is such a\n- * common operation on classfiles, each model type has a corresponding {@code\n- * XxxTransform} type (which describes a transform on a sequence of {@code\n- * XxxElement}) and each builder type has {@code transformYyy} methods for transforming\n- * its child models.  A transform is simply a functional interface that takes a\n- * builder and an element, and an implementation \"flatMap\"s elements\n- * into the builder.  We could express the above as:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods2\"}\n- *\n- * <h3>Lifting transforms<\/h3>\n- * While the second example is only slightly shorter than the first, the\n- * advantage of expressing transformation in this way is that the transform\n- * operations can be more easily combined.  Suppose we want to redirect\n- * invocations of static methods on {@code Foo} to the corresponding method on\n- * {@code Bar} instead.  We could express this as a transformation on {@link\n- * jdk.classfile.CodeElement}:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarTransform\"}\n- * <p>\n- * We can then <em>lift<\/em> this transformation on code elements into a\n- * transformation on method elements.  This intercepts method elements that\n- * correspond to a {@code Code} attribute, dives into its code elements, and\n- * applies the code transform to them, and passes other method elements through\n- * unchanged:\n- * {@snippet lang=java :\n- * MethodTransform mt = MethodTransform.transformingCode(fooToBar);\n- * }\n- * <p>\n- * and further lift the transform on method elements into one on class\n- * elements:\n- * {@snippet lang=java :\n- * ClassTransform ct = ClassTransform.transformingMethods(mt);\n- * }\n- * <p>\n- * and then transform the classfile:\n- * {@snippet lang=java :\n- * byte[] newBytes = ClassModel.of(bytes).transform(ct);\n- * }\n- * <p>\n- * This is much more concise (and less error-prone) than the equivalent\n- * expressed by traversing the classfile structure directly:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarUnrolled\"}\n- *\n- * <h3>Composing transforms<\/h3>\n- * Transforms on the same type of element can be composed in sequence, where the\n- * output of the first is fed to the input of the second.  Suppose we want to\n- * instrument all method calls, where we print the name of a method before\n- * calling it:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"instrumentCallsTransform\"}\n- * <p>\n- * Then we can compose {@code fooToBar} and {@code instrumentCalls} with {@link\n- * jdk.classfile.CodeTransform#andThen(jdk.classfile.CodeTransform)}:\n- * <p>\n- * {@snippet lang=java :\n- * byte[] newBytes = ClassModel.of(bytes)\n- *                             .transform(ClassTransform.transformingMethods(\n- *                                 MethodTransform.transformingCode(\n- *                                     fooToBar.andThen(instrumentCalls))));\n- * }\n- *\n- * Transform {@code instrumentCalls} will receive all code elements produced by\n- * transform {@code forToBar}, either those code elements from the original classfile\n- * or replacements (replacing static invocations to {@code Foo} with those to {@code Bar}).\n- *\n- * <h3>Constant pool sharing<\/h3>\n- * Transformation doesn't merely handle the logistics of reading, transforming\n- * elements, and writing.  Most of the time when we are transforming a\n- * classfile, we are making relatively minor changes.  To optimize such cases,\n- * transformation seeds the new classfile with a copy of the constant pool from\n- * the original classfile; this enables significant optimizations (methods and\n- * attributes that are not transformed can be processed by bulk-copying their\n- * bytes, rather than parsing them and regenerating their contents.)  If\n- * constant pool sharing is not desired it can be suppressed\n- * with the {@link jdk.classfile.Classfile.Option#constantPoolSharing(boolean)} option.\n- * Such suppression may be beneficial when transformation removes many elements,\n- * resulting in many unreferenced constant pool entries.\n- *\n- * <h2>API conventions<\/h2>\n- * <p>\n- * The API is largely derived from a <a href=\"#data_model\"><em>data model<\/em><\/a>\n- * for the classfile format, which defines each element kind (which includes models and\n- * attributes) and its properties.  For each element kind, there is a\n- * corresponding interface to describe that element, and factory methods to\n- * create that element.  Some element kinds also have convenience methods on the\n- * corresponding builder (e.g., {@link jdk.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc)}).\n- * <p>\n- * Most symbolic information in elements is represented by constant pool entries\n- * (for example, the owner of a field is represented by a {@link\n- * jdk.classfile.constantpool.ClassEntry}.) Factories and builders also accept nominal\n- * descriptors from {@code java.lang.constant} (e.g., {@link\n- * java.lang.constant.ClassDesc}.)\n- *\n- * <h2><a id=\"data_model\"><\/a>Data model<\/h2>\n- * We define each kind of element by its name, an optional arity indicator (zero\n- * or more, zero or one, exactly one), and a list of components.  The elements\n- * of a class are fields, methods, and the attributes that can appear on\n- * classes:\n- * <p>\n- * {@snippet lang=\"text\" :\n- * ClassElement =\n- *     FieldModel*(UtfEntry name, Utf8Entry descriptor)\n- *     | MethodModel*(UtfEntry name, Utf8Entry descriptor)\n- *     | ModuleAttribute?(int flags, ModuleEntry moduleName, UtfEntry moduleVersion,\n- *                        List<ModuleRequireInfo> requires, List<ModuleOpenInfo> opens,\n- *                        List<ModuleExportInfo> exports, List<ModuleProvidesInfo> provides,\n- *                        List<ClassEntry> uses)\n- *     | ModulePackagesAttribute?(List<PackageEntry> packages)\n- *     | ModuleTargetAttribute?(Utf8Entry targetPlatform)\n- *     | ModuleHashesAttribute?(Utf8Entry algorithm, List<HashInfo> hashes)\n- *     | ModuleResolutionAttribute?(int resolutionFlags)\n- *     | SourceFileAttribute?(Utf8Entry sourceFile)\n- *     | SourceDebugExtensionsAttribute?(byte[] contents)\n- *     | CompilationIDAttribute?(Utf8Entry compilationId)\n- *     | SourceIDAttribute?(Utf8Entry sourceId)\n- *     | NestHostAttribute?(ClassEntry nestHost)\n- *     | NestMembersAttribute?(List<ClassEntry> nestMembers)\n- *     | RecordAttribute?(List<RecordComponent> components)\n- *     | EnclosingMethodAttribute?(ClassEntry className, NameAndTypeEntry method)\n- *     | InnerClassesAttribute?(List<InnerClassInfo> classes)\n- *     | PermittedSubclassesAttribute?(List<ClassEntry> permittedSubclasses)\n- *     | DeclarationElement*\n- * }\n- *<p>\n- * where {@code DeclarationElement} are the elements that are common to all declarations\n- * (classes,  methods, fields) and so are factored out:\n- *\n- * {@snippet lang=\"text\" :\n- * DeclarationElement =\n- *     SignatureAttribute?(Utf8Entry signature)\n- *     | SyntheticAttribute?()\n- *     | DeprecatedAttribute?()\n- *     | RuntimeInvisibleAnnotationsAttribute?(List<Annotation> annotations)\n- *     | RuntimeVisibleAnnotationsAttribute?(List<Annotation> annotations)\n- *     | CustomAttribute*\n- *     | UnknownAttribute*\n- * }\n- *\n- * Fields and methods are models with their own elements.  The elements of fields\n- * and methods are fairly simple; most of the complexity of methods lives in the\n- * {@link jdk.classfile.CodeModel} (which models the {@code Code} attribute\n- * along with the code-related attributes: stack map table, local variable table,\n- * line number table, etc.)\n- *\n- * {@snippet lang=\"text\" :\n- * FieldElement =\n- *     DeclarationElement\n- *     | ConstantValueAttribute?(ConstantValueEntry constant)\n- *\n- * MethodElement =\n- *     DeclarationElement\n- *     | CodeModel?()\n- *     | AnnotationDefaultAttribute?(ElementValue defaultValue)\n- *     | MethodParametersAttribute?(List<MethodParameterInfo> parameters)\n- *     | ExceptionsAttribute?(List<ClassEntry> exceptions)\n- * }\n- *\n- * {@link jdk.classfile.CodeModel} is unique in that its elements are <em>ordered<\/em>.\n- * Elements of {@code Code} include ordinary bytecodes, as well as a number of pseudo-instructions\n- * representing branch targets, line number metadata, local variable metadata, and\n- * catch blocks.\n- *\n- * {@snippet lang=\"text\" :\n- * CodeElement = Instruction | PseudoInstruction\n- *\n- * Instruction =\n- *     LoadInstruction(TypeKind type, int slot)\n- *     | StoreInstruction(TypeKind type, int slot)\n- *     | IncrementInstruction(int slot, int constant)\n- *     | BranchInstruction(Opcode opcode, Label target)\n- *     | LookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases)\n- *     | TableSwitchInstruction(Label defaultTarget, int low, int high,\n- *                              List<SwitchCase> cases)\n- *     | ReturnInstruction(TypeKind kind)\n- *     | ThrowInstruction()\n- *     | FieldInstruction(Opcode opcode, FieldRefEntry field)\n- *     | InvokeInstruction(Opcode opcode, MemberRefEntry method, boolean isInterface)\n- *     | InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic)\n- *     | NewObjectInstruction(ClassEntry className)\n- *     | NewReferenceArrayInstruction(ClassEntry componentType)\n- *     | NewPrimitiveArrayInstruction(TypeKind typeKind)\n- *     | NewMultiArrayInstruction(ClassEntry componentType, int dims)\n- *     | ArrayLoadInstruction(Opcode opcode)\n- *     | ArrayStoreInstruction(Opcode opcode)\n- *     | TypeCheckInstruction(Opcode opcode, ClassEntry className)\n- *     | ConvertInstruction(TypeKind from, TypeKind to)\n- *     | OperatorInstruction(Opcode opcode)\n- *     | ConstantInstruction(ConstantDesc constant)\n- *     | StackInstruction(Opcode opcode)\n- *     | MonitorInstruction(Opcode opcode)\n- *     | NopInstruction()\n- *\n- * PseudoInstruction =\n- *     | LabelTarget(Label label)\n- *     | LineNumber(int line)\n- *     | ExceptionCatch(Label tryStart, Label tryEnd, Label handler, ClassEntry exception)\n- *     | LocalVariable(int slot, UtfEntry name, Utf8Entry type, Label startScope, Label endScope)\n- *     | LocalVariableType(int slot, Utf8Entry name, Utf8Entry type, Label startScope, Label endScope)\n- *     | CharacterRange(int rangeStart, int rangeEnd, int flags, Label startScope, Label endScope)\n- * }\n- *\/\n-package jdk.classfile;\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/package-info.java","additions":0,"deletions":461,"binary":false,"changes":461,"status":"deleted"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -28,1 +28,1 @@\n-import jdk.classfile.impl.AccessFlagsImpl;\n+import jdk.internal.classfile.impl.AccessFlagsImpl;\n@@ -33,2 +33,2 @@\n- *  {@link jdk.classfile.ClassElement}, {@link jdk.classfile.FieldElement}, or\n- *  {@link jdk.classfile.MethodElement} when traversing\n+ *  {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n+ *  {@link jdk.internal.classfile.MethodElement} when traversing\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AccessFlags.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/AccessFlags.java","status":"renamed"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AnnotationImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+\/**\n+ * Models an annotation on a declaration.\n+ *\n+ * @see AnnotationElement\n+ * @see AnnotationValue\n+ * @see RuntimeVisibleAnnotationsAttribute\n+ * @see RuntimeInvisibleAnnotationsAttribute\n+ * @see RuntimeVisibleParameterAnnotationsAttribute\n+ * @see RuntimeInvisibleParameterAnnotationsAttribute\n+ *\/\n+public sealed interface Annotation\n+        extends WritableElement<Annotation>\n+        permits TypeAnnotation, AnnotationImpl {\n+\n+    \/**\n+     * {@return the class of the annotation}\n+     *\/\n+    Utf8Entry className();\n+\n+    \/**\n+     * {@return the class of the annotation, as a symbolic descriptor}\n+     *\/\n+    default ClassDesc classSymbol() {\n+        return ClassDesc.ofDescriptor(className().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the elements of the annotation}\n+     *\/\n+    List<AnnotationElement> elements();\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(Utf8Entry annotationClass,\n+                         List<AnnotationElement> elements) {\n+        return new AnnotationImpl(annotationClass, elements);\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(Utf8Entry annotationClass,\n+                         AnnotationElement... elements) {\n+        return of(annotationClass, List.of(elements));\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(ClassDesc annotationClass,\n+                         List<AnnotationElement> elements) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(ClassDesc annotationClass,\n+                         AnnotationElement... elements) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Annotation.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -29,3 +29,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AnnotationImpl;\n-import jdk.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AnnotationImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AnnotationElement.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/AnnotationElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -27,8 +27,8 @@\n-import jdk.classfile.constantpool.AnnotationConstantValueEntry;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.FloatEntry;\n-import jdk.classfile.constantpool.IntegerEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AnnotationImpl;\n-import jdk.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.constantpool.AnnotationConstantValueEntry;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AnnotationImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AnnotationValue.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/AnnotationValue.java","status":"renamed"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.CompilationIDAttribute;\n+import jdk.internal.classfile.attribute.ConstantValueAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n+import jdk.internal.classfile.attribute.NestHostAttribute;\n+import jdk.internal.classfile.attribute.NestMembersAttribute;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.attribute.SourceIDAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.attribute.UnknownAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models a classfile attribute (JVMS 4.7).  Many, though not all, subtypes of\n+ * {@linkplain Attribute} will implement {@link ClassElement}, {@link\n+ * MethodElement}, {@link FieldElement}, or {@link CodeElement}; attributes that\n+ * are also elements will be delivered when traversing the elements of the\n+ * corresponding model type. Additionally, all attributes are accessible\n+ * directly from the corresponding model type through {@link\n+ * AttributedElement#findAttribute(AttributeMapper)}.\n+ *\/\n+public sealed interface Attribute<A extends Attribute<A>>\n+        extends WritableElement<A>\n+        permits AnnotationDefaultAttribute, BootstrapMethodsAttribute,\n+                CharacterRangeTableAttribute, CodeAttribute, CompilationIDAttribute,\n+                ConstantValueAttribute, DeprecatedAttribute, EnclosingMethodAttribute,\n+                ExceptionsAttribute, InnerClassesAttribute, LineNumberTableAttribute,\n+                LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n+                MethodParametersAttribute, ModuleAttribute, ModuleHashesAttribute,\n+                ModuleMainClassAttribute, ModulePackagesAttribute, ModuleResolutionAttribute,\n+                ModuleTargetAttribute, NestHostAttribute, NestMembersAttribute,\n+                PermittedSubclassesAttribute,\n+                RecordAttribute, RuntimeInvisibleAnnotationsAttribute,\n+                RuntimeInvisibleParameterAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleParameterAnnotationsAttribute,\n+                RuntimeVisibleTypeAnnotationsAttribute, SignatureAttribute,\n+                SourceDebugExtensionAttribute, SourceFileAttribute, SourceIDAttribute,\n+                StackMapTableAttribute, SyntheticAttribute,\n+                UnknownAttribute, BoundAttribute, UnboundAttribute {\n+    \/**\n+     * {@return the name of the attribute}\n+     *\/\n+    String attributeName();\n+\n+    \/**\n+     * {@return the {@link AttributeMapper} associated with this attribute}\n+     *\/\n+    AttributeMapper<A> attributeMapper();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attribute.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/AttributeMapper.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -32,2 +32,2 @@\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.impl.AbstractUnboundModel;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.impl.AbstractUnboundModel;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributedElement.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/AttributedElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -30,53 +30,53 @@\n-import jdk.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.classfile.attribute.CharacterRangeInfo;\n-import jdk.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.attribute.CompilationIDAttribute;\n-import jdk.classfile.attribute.ConstantValueAttribute;\n-import jdk.classfile.attribute.DeprecatedAttribute;\n-import jdk.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.InnerClassInfo;\n-import jdk.classfile.attribute.InnerClassesAttribute;\n-import jdk.classfile.attribute.LineNumberInfo;\n-import jdk.classfile.attribute.LineNumberTableAttribute;\n-import jdk.classfile.attribute.LocalVariableInfo;\n-import jdk.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.classfile.attribute.MethodParameterInfo;\n-import jdk.classfile.attribute.MethodParametersAttribute;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleExportInfo;\n-import jdk.classfile.attribute.ModuleHashInfo;\n-import jdk.classfile.attribute.ModuleHashesAttribute;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModuleOpenInfo;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.ModuleProvideInfo;\n-import jdk.classfile.attribute.ModuleRequireInfo;\n-import jdk.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.classfile.attribute.ModuleTargetAttribute;\n-import jdk.classfile.attribute.NestHostAttribute;\n-import jdk.classfile.attribute.NestMembersAttribute;\n-import jdk.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.attribute.SourceIDAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.attribute.SyntheticAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractAttributeMapper;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.CodeImpl;\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.attribute.CharacterRangeInfo;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.CompilationIDAttribute;\n+import jdk.internal.classfile.attribute.ConstantValueAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.InnerClassInfo;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import jdk.internal.classfile.attribute.LineNumberInfo;\n+import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n+import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n+import jdk.internal.classfile.attribute.MethodParameterInfo;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleExportInfo;\n+import jdk.internal.classfile.attribute.ModuleHashInfo;\n+import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModuleOpenInfo;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.ModuleProvideInfo;\n+import jdk.internal.classfile.attribute.ModuleRequireInfo;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n+import jdk.internal.classfile.attribute.NestHostAttribute;\n+import jdk.internal.classfile.attribute.NestMembersAttribute;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.attribute.SourceIDAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractAttributeMapper;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.CodeImpl;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n@@ -85,6 +85,6 @@\n-import static jdk.classfile.AttributedElement.Kind.CLASS_ONLY;\n-import static jdk.classfile.AttributedElement.Kind.CODE_ONLY;\n-import static jdk.classfile.AttributedElement.Kind.EVERYWHERE;\n-import static jdk.classfile.AttributedElement.Kind.FIELD_ONLY;\n-import static jdk.classfile.AttributedElement.Kind.METHOD_ONLY;\n-import jdk.classfile.impl.StackMapDecoder;\n+import static jdk.internal.classfile.AttributedElement.Kind.CLASS_ONLY;\n+import static jdk.internal.classfile.AttributedElement.Kind.CODE_ONLY;\n+import static jdk.internal.classfile.AttributedElement.Kind.EVERYWHERE;\n+import static jdk.internal.classfile.AttributedElement.Kind.FIELD_ONLY;\n+import static jdk.internal.classfile.AttributedElement.Kind.METHOD_ONLY;\n+import jdk.internal.classfile.impl.StackMapDecoder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":60,"deletions":60,"binary":false,"changes":120,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Attributes.java","status":"renamed"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.impl.ConcreteBootstrapMethodEntry;\n+\n+\/**\n+ * Models an entry in the bootstrap method table.  The bootstrap method table\n+ * is stored in the {@code BootstrapMethods} attribute, but is modeled by\n+ * the {@link ConstantPool}, since the bootstrap method table is logically\n+ * part of the constant pool.\n+ *\/\n+public sealed interface BootstrapMethodEntry\n+        extends WritableElement<BootstrapMethodEntry>\n+        permits ConcreteBootstrapMethodEntry {\n+\n+    \/**\n+     * {@return the constant pool associated with this entry}\n+     *\/\n+    ConstantPool constantPool();\n+\n+    \/**\n+     * {@return the index into the bootstrap method table corresponding to this entry}\n+     *\/\n+    int bsmIndex();\n+\n+    \/**\n+     * {@return the bootstrap method}\n+     *\/\n+    MethodHandleEntry bootstrapMethod();\n+\n+    \/**\n+     * {@return the bootstrap arguments}\n+     *\/\n+    List<LoadableConstantEntry> arguments();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/BootstrapMethodEntry.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -30,4 +30,4 @@\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.impl.BufWriterImpl;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.impl.BufWriterImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/BufWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/BufWriter.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -36,5 +36,5 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.ChainedClassBuilder;\n-import jdk.classfile.impl.DirectClassBuilder;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ChainedClassBuilder;\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.impl.Util;\n@@ -42,1 +42,1 @@\n-import jdk.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.CompilationIDAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n+import jdk.internal.classfile.attribute.NestHostAttribute;\n+import jdk.internal.classfile.attribute.NestMembersAttribute;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.attribute.SourceIDAttribute;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.attribute.UnknownAttribute;\n+\n+\/**\n+ * A {@link ClassfileElement} that can appear when traversing the elements\n+ * of a {@link ClassModel} or be presented to a {@link ClassBuilder}.\n+ *\/\n+public sealed interface ClassElement extends ClassfileElement\n+        permits AccessFlags, Superclass, Interfaces, ClassfileVersion,\n+                FieldModel, MethodModel,\n+                CustomAttribute, CompilationIDAttribute, DeprecatedAttribute,\n+                EnclosingMethodAttribute, InnerClassesAttribute,\n+                ModuleAttribute, ModuleHashesAttribute, ModuleMainClassAttribute,\n+                ModulePackagesAttribute, ModuleResolutionAttribute, ModuleTargetAttribute,\n+                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute,\n+                RecordAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SourceDebugExtensionAttribute,\n+                SourceFileAttribute, SourceIDAttribute, SyntheticAttribute, UnknownAttribute {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassElement.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -34,1 +34,1 @@\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.Util;\n@@ -36,1 +36,1 @@\n-import jdk.classfile.impl.ClassHierarchyImpl;\n+import jdk.internal.classfile.impl.ClassHierarchyImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassHierarchyResolver.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -32,4 +32,4 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.impl.ClassImpl;\n-import jdk.classfile.impl.verifier.VerifierImpl;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.impl.ClassImpl;\n+import jdk.internal.classfile.impl.verifier.VerifierImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassModel.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassModel.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -27,9 +27,9 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.ClassReaderImpl;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ClassReaderImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassReader.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -28,1 +28,1 @@\n-import jdk.classfile.impl.SignaturesImpl;\n+import jdk.internal.classfile.impl.SignaturesImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassSignature.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassSignature.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,2 +31,2 @@\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.impl.TransformImpl;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.impl.TransformImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassTransform.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -38,10 +38,10 @@\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.UnknownAttribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.ClassImpl;\n-import jdk.classfile.impl.DirectClassBuilder;\n-import jdk.classfile.impl.Options;\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.UnknownAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ClassImpl;\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.impl.Options;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n@@ -49,5 +49,5 @@\n-import jdk.classfile.attribute.CharacterRangeInfo;\n-import jdk.classfile.attribute.LocalVariableInfo;\n-import jdk.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.attribute.CharacterRangeInfo;\n+import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":16,"deletions":16,"binary":false,"changes":32,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Classfile.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -30,2 +30,2 @@\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassfileBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassfileElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -30,1 +30,1 @@\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassfileTransform.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ClassfileVersionImpl;\n+import jdk.internal.classfile.impl.ClassfileVersionImpl;\n@@ -31,1 +31,1 @@\n- * jdk.classfile.ClassElement} when traversing the elements of a {@link\n+ * jdk.internal.classfile.ClassElement} when traversing the elements of a {@link\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileVersion.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassfileVersion.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -39,45 +39,45 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.BlockCodeBuilderImpl;\n-import jdk.classfile.impl.BytecodeHelpers;\n-import jdk.classfile.impl.CatchBuilderImpl;\n-import jdk.classfile.impl.ChainedCodeBuilder;\n-import jdk.classfile.impl.LabelImpl;\n-import jdk.classfile.impl.LineNumberImpl;\n-import jdk.classfile.impl.NonterminalCodeBuilder;\n-import jdk.classfile.impl.TerminalCodeBuilder;\n-import jdk.classfile.instruction.ArrayLoadInstruction;\n-import jdk.classfile.instruction.ArrayStoreInstruction;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.ConvertInstruction;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.LookupSwitchInstruction;\n-import jdk.classfile.instruction.MonitorInstruction;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewObjectInstruction;\n-import jdk.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.classfile.instruction.NopInstruction;\n-import jdk.classfile.instruction.OperatorInstruction;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StackInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.SwitchCase;\n-import jdk.classfile.instruction.TableSwitchInstruction;\n-import jdk.classfile.instruction.ThrowInstruction;\n-import jdk.classfile.instruction.TypeCheckInstruction;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BlockCodeBuilderImpl;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.CatchBuilderImpl;\n+import jdk.internal.classfile.impl.ChainedCodeBuilder;\n+import jdk.internal.classfile.impl.LabelImpl;\n+import jdk.internal.classfile.impl.LineNumberImpl;\n+import jdk.internal.classfile.impl.NonterminalCodeBuilder;\n+import jdk.internal.classfile.impl.TerminalCodeBuilder;\n+import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n+import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.ConvertInstruction;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n+import jdk.internal.classfile.instruction.MonitorInstruction;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewObjectInstruction;\n+import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.instruction.NopInstruction;\n+import jdk.internal.classfile.instruction.OperatorInstruction;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StackInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.SwitchCase;\n+import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import jdk.internal.classfile.instruction.ThrowInstruction;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n@@ -86,3 +86,3 @@\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-import static jdk.classfile.impl.BytecodeHelpers.handleDescToHandleInfo;\n-import jdk.classfile.impl.TransformingCodeBuilder;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import static jdk.internal.classfile.impl.BytecodeHelpers.handleDescToHandleInfo;\n+import jdk.internal.classfile.impl.TransformingCodeBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":49,"deletions":49,"binary":false,"changes":98,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CodeBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+\n+\/**\n+ * A {@link ClassfileElement} that can appear when traversing the elements\n+ * of a {@link CodeModel} or be presented to a {@link CodeBuilder}.  Code elements\n+ * are either an {@link Instruction}, which models an instruction in the body\n+ * of a method, or a {@link PseudoInstruction}, which models metadata from\n+ * the code attribute, such as line number metadata, local variable metadata,\n+ * exception metadata, label target metadata, etc.\n+ *\/\n+public sealed interface CodeElement extends ClassfileElement\n+        permits Instruction, PseudoInstruction,\n+                CustomAttribute, RuntimeVisibleTypeAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                StackMapTableAttribute {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeElement.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.impl.BufferedCodeBuilder;\n+import jdk.internal.classfile.impl.CodeImpl;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+\n+\/**\n+ * Models the body of a method (the {@code Code} attribute).  The instructions\n+ * of the method body are accessed via a streaming view (e.g., {@link\n+ * #elements()}).\n+ *\/\n+public sealed interface CodeModel\n+        extends CompoundElement<CodeElement>, AttributedElement, MethodElement\n+        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n+\n+    \/**\n+     * {@return the maximum size of the local variable table}\n+     *\/\n+    int maxLocals();\n+\n+    \/**\n+     * {@return the maximum size of the operand stack}\n+     *\/\n+    int maxStack();\n+\n+    \/**\n+     * {@return the enclosing method, if known}\n+     *\/\n+    Optional<MethodModel> parent();\n+\n+    \/**\n+     * {@return the exception table of the method}  The exception table is also\n+     * modeled by {@link ExceptionCatch} elements in the streaming view.\n+     *\/\n+    List<ExceptionCatch> exceptionHandlers();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeModel.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.TransformImpl;\n+import jdk.internal.classfile.impl.TransformImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CodeTransform.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -46,1 +46,1 @@\n-        permits ClassModel, CodeModel, FieldModel, MethodModel, jdk.classfile.impl.AbstractUnboundModel {\n+        permits ClassModel, CodeModel, FieldModel, MethodModel, jdk.internal.classfile.impl.AbstractUnboundModel {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CompoundElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CompoundElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CustomAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/CustomAttribute.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -28,3 +28,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.ChainedFieldBuilder;\n-import jdk.classfile.impl.TerminalFieldBuilder;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ChainedFieldBuilder;\n+import jdk.internal.classfile.impl.TerminalFieldBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/FieldBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.ConstantValueAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.attribute.UnknownAttribute;\n+\n+\/**\n+ * A {@link ClassfileElement} that can appear when traversing the elements\n+ * of a {@link FieldModel} or be presented to a {@link FieldBuilder}.\n+ *\/\n+public sealed interface FieldElement extends ClassfileElement\n+        permits AccessFlags,\n+                CustomAttribute, ConstantValueAttribute, DeprecatedAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldElement.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,3 +31,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BufferedFieldBuilder;\n-import jdk.classfile.impl.FieldImpl;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BufferedFieldBuilder;\n+import jdk.internal.classfile.impl.FieldImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldModel.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/FieldModel.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.TransformImpl;\n+import jdk.internal.classfile.impl.TransformImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/FieldTransform.java","status":"renamed"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n+import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.ConvertInstruction;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n+import jdk.internal.classfile.instruction.MonitorInstruction;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewObjectInstruction;\n+import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.instruction.NopInstruction;\n+import jdk.internal.classfile.instruction.OperatorInstruction;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StackInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import jdk.internal.classfile.instruction.ThrowInstruction;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+\n+\/**\n+ * Models an executable instruction in a method body.\n+ *\/\n+public sealed interface Instruction extends CodeElement\n+        permits ArrayLoadInstruction, ArrayStoreInstruction, BranchInstruction,\n+                ConstantInstruction, ConvertInstruction, FieldInstruction,\n+                InvokeDynamicInstruction, InvokeInstruction, LoadInstruction,\n+                StoreInstruction, IncrementInstruction,\n+                LookupSwitchInstruction, MonitorInstruction, NewMultiArrayInstruction,\n+                NewObjectInstruction, NewPrimitiveArrayInstruction, NewReferenceArrayInstruction,\n+                NopInstruction, OperatorInstruction, ReturnInstruction,\n+                StackInstruction, TableSwitchInstruction,\n+                ThrowInstruction, TypeCheckInstruction, AbstractInstruction {\n+\n+    \/**\n+     * {@return the opcode of this instruction}\n+     *\/\n+    Opcode opcode();\n+\n+    \/**\n+     * {@return the size in bytes of this instruction}\n+     *\/\n+    int sizeInBytes();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Instruction.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,3 +31,3 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.InterfacesImpl;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.InterfacesImpl;\n+import jdk.internal.classfile.impl.Util;\n@@ -37,1 +37,1 @@\n- * jdk.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ * jdk.internal.classfile.ClassElement} when traversing a {@link ClassModel}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Interfaces.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Interfaces.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.LabelImpl;\n+import jdk.internal.classfile.impl.LabelImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Label.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Label.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,3 +31,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.ChainedMethodBuilder;\n-import jdk.classfile.impl.TerminalMethodBuilder;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ChainedMethodBuilder;\n+import jdk.internal.classfile.impl.TerminalMethodBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/MethodBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.attribute.UnknownAttribute;\n+\n+\/**\n+ * A {@link ClassfileElement} that can appear when traversing the elements\n+ * of a {@link MethodModel} or be presented to a {@link MethodBuilder}.\n+ *\/\n+public sealed interface MethodElement\n+        extends ClassfileElement\n+        permits AccessFlags, CodeModel, CustomAttribute,\n+                AnnotationDefaultAttribute, DeprecatedAttribute,\n+                ExceptionsAttribute, MethodParametersAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleParameterAnnotationsAttribute,\n+                RuntimeInvisibleTypeAnnotationsAttribute, RuntimeVisibleAnnotationsAttribute,\n+                RuntimeVisibleParameterAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodElement.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,3 +31,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BufferedMethodBuilder;\n-import jdk.classfile.impl.MethodImpl;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BufferedMethodBuilder;\n+import jdk.internal.classfile.impl.MethodImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodModel.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/MethodModel.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -29,1 +29,1 @@\n-import jdk.classfile.impl.SignaturesImpl;\n+import jdk.internal.classfile.impl.SignaturesImpl;\n@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodSignature.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/MethodSignature.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.TransformImpl;\n+import jdk.internal.classfile.impl.TransformImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/MethodTransform.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Opcode.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Opcode.java","status":"renamed"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.instruction.CharacterRange;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.LabelTarget;\n+import jdk.internal.classfile.instruction.LineNumber;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+\n+\/**\n+ * Models metadata about a {@link CodeAttribute}, such as entries in the\n+ * exception table, line number table, local variable table, or the mapping\n+ * between instructions and labels.  Pseudo-instructions are delivered as part\n+ * of the element stream of a {@link CodeModel}.  Delivery of some\n+ * pseudo-instructions can be disabled by modifying the value of classfile\n+ * options (e.g., {@link Classfile.Option#processDebug(boolean)}).\n+ *\/\n+public sealed interface PseudoInstruction\n+        extends CodeElement\n+        permits CharacterRange, ExceptionCatch, LabelTarget, LineNumber, LocalVariable, LocalVariableType, AbstractPseudoInstruction {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/PseudoInstruction.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -28,1 +28,1 @@\n-import jdk.classfile.impl.SignaturesImpl;\n+import jdk.internal.classfile.impl.SignaturesImpl;\n@@ -33,1 +33,1 @@\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Signature.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/Signature.java","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.SuperclassImpl;\n+\n+\/**\n+ * Models the superclass of a class.  Delivered as a {@link\n+ * jdk.internal.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ *\/\n+public sealed interface Superclass\n+        extends ClassElement\n+        permits SuperclassImpl {\n+\n+    \/** {@return the superclass} *\/\n+    ClassEntry superclassEntry();\n+\n+    \/**\n+     * {@return a {@linkplain Superclass} element}\n+     * @param superclassEntry the superclass\n+     *\/\n+    static Superclass of(ClassEntry superclassEntry) {\n+        return new SuperclassImpl(superclassEntry);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Superclass.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n@@ -32,29 +32,29 @@\n-import jdk.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.TargetInfoImpl;\n-import jdk.classfile.impl.UnboundAttribute;\n-\n-import static jdk.classfile.Classfile.TAT_CAST;\n-import static jdk.classfile.Classfile.TAT_CLASS_EXTENDS;\n-import static jdk.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER;\n-import static jdk.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER_BOUND;\n-import static jdk.classfile.Classfile.TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n-import static jdk.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE;\n-import static jdk.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT;\n-import static jdk.classfile.Classfile.TAT_EXCEPTION_PARAMETER;\n-import static jdk.classfile.Classfile.TAT_FIELD;\n-import static jdk.classfile.Classfile.TAT_INSTANCEOF;\n-import static jdk.classfile.Classfile.TAT_LOCAL_VARIABLE;\n-import static jdk.classfile.Classfile.TAT_METHOD_FORMAL_PARAMETER;\n-import static jdk.classfile.Classfile.TAT_METHOD_INVOCATION_TYPE_ARGUMENT;\n-import static jdk.classfile.Classfile.TAT_METHOD_RECEIVER;\n-import static jdk.classfile.Classfile.TAT_METHOD_REFERENCE;\n-import static jdk.classfile.Classfile.TAT_METHOD_REFERENCE_TYPE_ARGUMENT;\n-import static jdk.classfile.Classfile.TAT_METHOD_RETURN;\n-import static jdk.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER;\n-import static jdk.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER_BOUND;\n-import static jdk.classfile.Classfile.TAT_NEW;\n-import static jdk.classfile.Classfile.TAT_RESOURCE_VARIABLE;\n-import static jdk.classfile.Classfile.TAT_THROWS;\n-import jdk.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.TargetInfoImpl;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import static jdk.internal.classfile.Classfile.TAT_CAST;\n+import static jdk.internal.classfile.Classfile.TAT_CLASS_EXTENDS;\n+import static jdk.internal.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER;\n+import static jdk.internal.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER_BOUND;\n+import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE;\n+import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.Classfile.TAT_EXCEPTION_PARAMETER;\n+import static jdk.internal.classfile.Classfile.TAT_FIELD;\n+import static jdk.internal.classfile.Classfile.TAT_INSTANCEOF;\n+import static jdk.internal.classfile.Classfile.TAT_LOCAL_VARIABLE;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_FORMAL_PARAMETER;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_INVOCATION_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_RECEIVER;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_REFERENCE;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_REFERENCE_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_RETURN;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER;\n+import static jdk.internal.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER_BOUND;\n+import static jdk.internal.classfile.Classfile.TAT_NEW;\n+import static jdk.internal.classfile.Classfile.TAT_RESOURCE_VARIABLE;\n+import static jdk.internal.classfile.Classfile.TAT_THROWS;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -451,1 +451,1 @@\n-         * @return index into the list jdk.classfile.attribute.ExceptionsAttribute.exceptions()\n+         * @return index into the list jdk.internal.classfile.attribute.ExceptionsAttribute.exceptions()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":31,"deletions":31,"binary":false,"changes":62,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/TypeAnnotation.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile;\n+package jdk.internal.classfile;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeKind.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/TypeKind.java","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile;\n+\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.impl.DirectFieldBuilder;\n+import jdk.internal.classfile.impl.DirectMethodBuilder;\n+\n+\/**\n+ * A classfile element that can encode itself as a stream of bytes in the\n+ * encoding expected by the classfile format.\n+ *\n+ * @param <T> the type of the entity\n+ *\/\n+public sealed interface WritableElement<T> extends ClassfileElement\n+        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n+                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n+                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n+    \/**\n+     * Writes the element to the specified writer\n+     *\n+     * @param buf the writer\n+     *\/\n+    void writeTo(BufWriter buf);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/WritableElement.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.AnnotationValue;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code AnnotationDefault} attribute (JVMS 4.7.22), which can\n+ * appear on methods of annotation types, and records the default value (JLS\n+ * 9.6.2) for the element corresponding to this method.  Delivered as a {@link\n+ * MethodElement} when traversing the elements of a {@link MethodModel}.\n+ *\/\n+public sealed interface AnnotationDefaultAttribute\n+        extends Attribute<AnnotationDefaultAttribute>, MethodElement\n+        permits BoundAttribute.BoundAnnotationDefaultAttr,\n+                UnboundAttribute.UnboundAnnotationDefaultAttribute {\n+\n+    \/**\n+     * {@return the default value of the annotation type element represented by\n+     * this method}\n+     *\/\n+    AnnotationValue defaultValue();\n+\n+    \/**\n+     * {@return an {@code AnnotationDefault} attribute}\n+     * @param annotationDefault the default value of the annotation type element\n+     *\/\n+    static AnnotationDefaultAttribute of(AnnotationValue annotationDefault) {\n+        return new UnboundAttribute.UnboundAnnotationDefaultAttribute(annotationDefault);\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/AnnotationDefaultAttribute.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code BootstrapMethods} attribute (JVMS 4.7.23), which serves as\n+ * an extension to the constant pool of a classfile.  Elements of the bootstrap\n+ * method table are accessed through {@link ConstantPool}.\n+ *\/\n+public sealed interface BootstrapMethodsAttribute\n+        extends Attribute<BootstrapMethodsAttribute>\n+        permits BoundAttribute.BoundBootstrapMethodsAttribute,\n+                UnboundAttribute.EmptyBootstrapAttribute {\n+\n+    \/**\n+     * {@return the elements of the bootstrap method table}\n+     *\/\n+    List<BootstrapMethodEntry> bootstrapMethods();\n+\n+    \/**\n+     * {@return the size of the bootstrap methods table}.  Calling this method\n+     * does not necessarily inflate the entire table.\n+     *\/\n+    int bootstrapMethodsSize();\n+\n+    \/\/ No factories; BMA is generated as part of constant pool\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/BootstrapMethodsAttribute.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models a single character range in the {@link CharacterRangeTableAttribute}.\n+ *\/\n+public sealed interface CharacterRangeInfo\n+        permits UnboundAttribute.UnboundCharacterRangeInfo {\n+\n+    \/**\n+     * {@return the start of the character range region (inclusive)}  This is\n+     * the index into the code array at which the code for this character range\n+     * begins.\n+     *\/\n+    int startPc();\n+\n+    \/**\n+     * {@return the end of the character range region (exclusive)}  This is the\n+     * index into the code array after which the code for this character range\n+     * ends.\n+     *\/\n+    int endPc();\n+\n+    \/**\n+     * {@return the encoded start of the character range region (inclusive)}\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeStart();\n+\n+    \/**\n+     * {@return the encoded end of the character range region (exclusive)}.\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeEnd();\n+\n+    \/**\n+     * The value of the flags item describes the kind of range. Multiple flags\n+     * may be set within flags.\n+     * <ul>\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_STATEMENT} Range is a Statement\n+     * (except ExpressionStatement), StatementExpression (14.8), as well as each\n+     * VariableDeclaratorId = VariableInitializer of\n+     * LocalVariableDeclarationStatement (14.4) or FieldDeclaration (8.3) in the\n+     * grammar.\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_BLOCK} Range is a Block in the\n+     * grammar.\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_ASSIGNMENT} Range is an assignment\n+     * expression - Expression1 AssignmentOperator Expression1 in the grammar as\n+     * well as increment and decrement expressions (both prefix and postfix).\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_FLOW_CONTROLLER} An expression\n+     * whose value will effect control flow. Flowcon in the following:\n+     * <pre>\n+     * if ( Flowcon ) Statement [else Statement]\n+     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Statement\n+     * while ( Flowcon ) Statement\n+     * do Statement while ( Flowcon ) ;\n+     * switch ( Flowcon ) { SwitchBlockStatementGroups }\n+     * Flowcon || Expression3\n+     * Flowcon &amp;&amp; Expression3\n+     * Flowcon ? Expression : Expression1\n+     * <\/pre>\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_FLOW_TARGET} Statement or\n+     * expression effected by a CRT_FLOW_CONTROLLER. Flowtarg in the following:\n+     * <pre>\n+     * if ( Flowcon ) Flowtarg [else Flowtarg]\n+     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Flowtarg\n+     * while ( Flowcon ) Flowtarg\n+     * do Flowtarg while ( Flowcon ) ;\n+     * Flowcon || Flowtarg\n+     * Flowcon &amp;&amp; Flowtarg\n+     * Flowcon ? Flowtarg : Flowtarg\n+     * <\/pre>\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_INVOKE} Method invocation. For\n+     * example: Identifier Arguments.\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_CREATE} New object creation. For\n+     * example: new Creator.\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_BRANCH_TRUE} A condition encoded\n+     * in the branch instruction immediately contained in the code range for\n+     * this item is not inverted towards the corresponding branch condition in\n+     * the source code. I.e. actual jump occurs if and only if the the source\n+     * code branch condition evaluates to true. Entries of this type are\n+     * produced only for conditions that are listed in the description of\n+     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n+     * controlling expression. start_pc field for an entry of this type must\n+     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n+     * if&lt;cond&gt;, ifnonull, ifnull or goto. CRT_BRANCH_TRUE and\n+     * CRT_BRANCH_FALSE are special kinds of entries that can be used to\n+     * determine what branch of a condition was chosen during the runtime.\n+     * <li>{@link jdk.internal.classfile.Classfile#CRT_BRANCH_FALSE} A condition encoded\n+     * in the branch instruction immediately contained in the code range for\n+     * this item is inverted towards the corresponding branch condition in the\n+     * source code. I.e. actual jump occurs if and only if the the source code\n+     * branch condition evaluates to false. Entries of this type are produced\n+     * only for conditions that are listed in the description of\n+     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n+     * controlling expression. start_pc field for an entry of this type must\n+     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n+     * if&lt;cond&gt;, ifnonull, ifnull or goto.\n+     * <\/ul>\n+     * <p>\n+     * All bits of the flags item not assigned above are reserved for future use. They should be set to zero in generated class files and should be ignored by Java virtual machine implementations.\n+     *\n+     * @return the flags\n+     *\/\n+    int flags();\n+\n+    \/**\n+     * {@return a character range description}\n+     * @param startPc the start of the bytecode range, inclusive\n+     * @param endPc the end of the bytecode range, exclusive\n+     * @param characterRangeStart the start of the character range, inclusive,\n+     *                            encoded as {@code line_number << 10 + column_number}\n+     * @param characterRangeEnd the end of the character range, exclusive,\n+     *                          encoded as {@code line_number << 10 + column_number}\n+     * @param flags the range flags\n+     *\/\n+    static CharacterRangeInfo of(int startPc,\n+                                 int endPc,\n+                                 int characterRangeStart,\n+                                 int characterRangeEnd,\n+                                 int flags) {\n+        return new UnboundAttribute.UnboundCharacterRangeInfo(startPc, endPc,\n+                                                              characterRangeStart, characterRangeEnd,\n+                                                              flags);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CharacterRangeInfo.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -30,3 +30,3 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.impl.BoundAttribute;\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CharacterRangeTableAttribute.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/CharacterRangeTableAttribute.java","status":"renamed"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+\n+\/**\n+ * Models the {@code Code} attribute (JVMS 4.7.3), appears on non-native,\n+ * non-abstract methods and contains the bytecode of the method body.  Delivered\n+ * as a {@link jdk.internal.classfile.MethodElement} when traversing the elements of a\n+ * {@link jdk.internal.classfile.MethodModel}.\n+ *\/\n+public sealed interface CodeAttribute extends Attribute<CodeAttribute>, CodeModel\n+        permits BoundAttribute.BoundCodeAttribute {\n+\n+    \/**\n+     * {@return The length of the code array in bytes}\n+     *\/\n+    int codeLength();\n+\n+    \/**\n+     * {@return the bytes (bytecode) of the code array}\n+     *\/\n+    byte[] codeArray();\n+\n+    int labelToBci(Label label);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CodeAttribute.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code CompilationID} attribute (@@@ need reference), which can\n+ * appear on classes and records the compilation time of the class.  Delivered\n+ * as a {@link jdk.internal.classfile.ClassElement} when traversing the elements of\n+ * a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface CompilationIDAttribute\n+        extends Attribute<CompilationIDAttribute>, ClassElement\n+        permits BoundAttribute.BoundCompilationIDAttribute,\n+                UnboundAttribute.UnboundCompilationIDAttribute {\n+\n+    \/**\n+     * {@return the compilation ID}  The compilation ID is the value of\n+     * {@link System#currentTimeMillis()} when the classfile is generated.\n+     *\/\n+    Utf8Entry compilationId();\n+\n+    \/**\n+     * {@return a {@code CompilationID} attribute}\n+     * @param id the compilation ID\n+     *\/\n+    static CompilationIDAttribute of(Utf8Entry id) {\n+        return new UnboundAttribute.UnboundCompilationIDAttribute(id);\n+    }\n+\n+    \/**\n+     * {@return a {@code CompilationID} attribute}\n+     * @param id the compilation ID\n+     *\/\n+    static CompilationIDAttribute of(String id) {\n+        return new UnboundAttribute.UnboundCompilationIDAttribute(TemporaryConstantPool.INSTANCE.utf8Entry(id));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CompilationIDAttribute.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ConstantDesc;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code ConstantValue} attribute (JVMS 4.7.2), which can appear on\n+ * fields and indicates that the field's value is a constant.  Delivered as a\n+ * {@link jdk.internal.classfile.FieldElement} when traversing the elements of a\n+ * {@link jdk.internal.classfile.FieldModel}.\n+ *\/\n+public sealed interface ConstantValueAttribute\n+        extends Attribute<ConstantValueAttribute>, FieldElement\n+        permits BoundAttribute.BoundConstantValueAttribute,\n+                UnboundAttribute.UnboundConstantValueAttribute {\n+\n+    \/**\n+     * {@return the constant value of the field}\n+     *\/\n+    ConstantValueEntry constant();\n+\n+    \/**\n+     * {@return a {@code ConstantValue} attribute}\n+     * @param value the constant value\n+     *\/\n+    static ConstantValueAttribute of(ConstantValueEntry value) {\n+        return new UnboundAttribute.UnboundConstantValueAttribute(value);\n+    }\n+\n+    \/**\n+     * {@return a {@code ConstantValue} attribute}\n+     * @param value the constant value\n+     *\/\n+    static ConstantValueAttribute of(ConstantDesc value) {\n+        return of(switch(value) {\n+            case Integer i -> TemporaryConstantPool.INSTANCE.intEntry(i);\n+            case Float f -> TemporaryConstantPool.INSTANCE.floatEntry(f);\n+            case Long l -> TemporaryConstantPool.INSTANCE.longEntry(l);\n+            case Double d -> TemporaryConstantPool.INSTANCE.doubleEntry(d);\n+            case String s -> TemporaryConstantPool.INSTANCE.stringEntry(s);\n+            default -> throw new IllegalArgumentException(\"Invalid ConstantValueAtrtibute value: \" + value);\n+        });\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ConstantValueAttribute.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code Deprecated} attribute (JVMS 4.7.15), which can appear on\n+ * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n+ * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n+ * of a corresponding model.\n+ *\/\n+public sealed interface DeprecatedAttribute\n+        extends Attribute<DeprecatedAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundDeprecatedAttribute,\n+                UnboundAttribute.UnboundDeprecatedAttribute {\n+\n+    \/**\n+     * {@return a {@code Deprecated} attribute}\n+     *\/\n+    static DeprecatedAttribute of() {\n+        return new UnboundAttribute.UnboundDeprecatedAttribute();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/DeprecatedAttribute.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.Optional;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code EnclosingMethod} attribute (JVMS 4.7.7), which can appear\n+ * on classes, and indicates that the class is a local or anonymous class.\n+ * Delivered as a {@link ClassElement} when traversing the elements of a {@link\n+ * jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface EnclosingMethodAttribute\n+        extends Attribute<EnclosingMethodAttribute>, ClassElement\n+        permits BoundAttribute.BoundEnclosingMethodAttribute,\n+                UnboundAttribute.UnboundEnclosingMethodAttribute {\n+\n+    \/**\n+     * {@return the innermost class that encloses the declaration of the current\n+     * class}\n+     *\/\n+    ClassEntry enclosingClass();\n+\n+    \/**\n+     * {@return the name and type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    Optional<NameAndTypeEntry> enclosingMethod();\n+\n+    \/**\n+     * {@return the name of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<Utf8Entry> enclosingMethodName() {\n+        return enclosingMethod().map(NameAndTypeEntry::name);\n+    }\n+\n+    \/**\n+     * {@return the type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<Utf8Entry> enclosingMethodType() {\n+        return enclosingMethod().map(NameAndTypeEntry::type);\n+    }\n+\n+    \/**\n+     * {@return the type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<MethodTypeDesc> enclosingMethodTypeSymbol() {\n+        return enclosingMethodType().map(n -> MethodTypeDesc.ofDescriptor(n.stringValue()));\n+    }\n+\n+    \/**\n+     * {@return an {@code EnclosingMethod} attribute}\n+     * @param className the class name\n+     * @param method the name and type of the enclosing method\n+     *\/\n+    static EnclosingMethodAttribute of(ClassEntry className,\n+                                       Optional<NameAndTypeEntry> method) {\n+        return new UnboundAttribute.UnboundEnclosingMethodAttribute(className, method.orElse(null));\n+    }\n+\n+    \/**\n+     * {@return an {@code EnclosingMethod} attribute}\n+     * @param className the class name\n+     * @param methodName the name of the enclosing method\n+     * @param methodType the type of the enclosing method\n+     *\/\n+    static EnclosingMethodAttribute of(ClassDesc className,\n+                                       Optional<String> methodName,\n+                                       Optional<MethodTypeDesc> methodType) {\n+        return new UnboundAttribute.UnboundEnclosingMethodAttribute(\n+                        TemporaryConstantPool.INSTANCE.classEntry(className),\n+                        methodName.isPresent() && methodType.isPresent()\n+                                ? TemporaryConstantPool.INSTANCE.natEntry(methodName.get(), methodType.get())\n+                                : null);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/EnclosingMethodAttribute.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models the {@code Exceptions} attribute (JVMS 4.7.5), which can appear on\n+ * methods, and records the exceptions declared to be thrown by this method.\n+ * Delivered as a {@link MethodElement} when traversing the elements of a\n+ * {@link jdk.internal.classfile.MethodModel}.\n+ *\/\n+public sealed interface ExceptionsAttribute\n+        extends Attribute<ExceptionsAttribute>, MethodElement\n+        permits BoundAttribute.BoundExceptionsAttribute,\n+                UnboundAttribute.UnboundExceptionsAttribute {\n+\n+    \/**\n+     * {@return the exceptions declared to be thrown by this method}\n+     *\/\n+    List<ClassEntry> exceptions();\n+\n+    \/**\n+     * {@return an {@code Exceptions} attribute}\n+     * @param exceptions the checked exceptions that may be thrown from this method\n+     *\/\n+    static ExceptionsAttribute of(List<ClassEntry> exceptions) {\n+        return new UnboundAttribute.UnboundExceptionsAttribute(exceptions);\n+    }\n+\n+    \/**\n+     * {@return an {@code Exceptions} attribute}\n+     * @param exceptions the checked exceptions that may be thrown from this method\n+     *\/\n+    static ExceptionsAttribute of(ClassEntry... exceptions) {\n+        return of(List.of(exceptions));\n+    }\n+\n+    \/**\n+     * {@return an {@code Exceptions} attribute}\n+     * @param exceptions the checked exceptions that may be thrown from this method\n+     *\/\n+    static ExceptionsAttribute ofSymbols(List<ClassDesc> exceptions) {\n+        return of(Util.entryList(exceptions));\n+    }\n+\n+    \/**\n+     * {@return an {@code Exceptions} attribute}\n+     * @param exceptions the checked exceptions that may be thrown from this method\n+     *\/\n+    static ExceptionsAttribute ofSymbols(ClassDesc... exceptions) {\n+        return ofSymbols(Arrays.asList(exceptions));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ExceptionsAttribute.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -31,2 +31,2 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -35,3 +35,3 @@\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/InnerClassInfo.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/InnerClassInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code InnerClasses} attribute (JVMS 4.7.6), which can\n+ * appear on classes, and records which classes referenced by this classfile\n+ * are inner classes. Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface InnerClassesAttribute\n+        extends Attribute<InnerClassesAttribute>, ClassElement\n+        permits BoundAttribute.BoundInnerClassesAttribute,\n+                UnboundAttribute.UnboundInnerClassesAttribute {\n+\n+    \/**\n+     * {@return the inner classes used by this class}\n+     *\/\n+    List<InnerClassInfo> classes();\n+\n+    \/**\n+     * {@return an {@code InnerClasses} attribute}\n+     * @param innerClasses descriptions of the inner classes\n+     *\/\n+    static InnerClassesAttribute of(List<InnerClassInfo> innerClasses) {\n+        return new UnboundAttribute.UnboundInnerClassesAttribute(innerClasses);\n+    }\n+\n+    \/**\n+     * {@return an {@code InnerClasses} attribute}\n+     * @param innerClasses descriptions of the inner classes\n+     *\/\n+    static InnerClassesAttribute of(InnerClassInfo... innerClasses) {\n+        return new UnboundAttribute.UnboundInnerClassesAttribute(List.of(innerClasses));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/InnerClassesAttribute.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LineNumberInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LineNumberInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code LineNumberTable} attribute (JVMS 4.7.12), which can appear\n+ * on a {@code Code} attribute, and records the mapping between indexes into\n+ * the code table and line numbers in the source file.\n+ * Delivered as a {@link jdk.internal.classfile.instruction.LineNumber} when traversing the\n+ * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n+ * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n+ *\/\n+public sealed interface LineNumberTableAttribute\n+        extends Attribute<LineNumberTableAttribute>\n+        permits BoundAttribute.BoundLineNumberTableAttribute,\n+                UnboundAttribute.UnboundLineNumberTableAttribute {\n+\n+    \/**\n+     * {@return the table mapping bytecode offsets to source line numbers}\n+     *\/\n+    List<LineNumberInfo> lineNumbers();\n+\n+    \/**\n+     * {@return a {@code LineNumberTable} attribute}\n+     * @param lines the line number descriptions\n+     *\/\n+    static LineNumberTableAttribute of(List<LineNumberInfo> lines) {\n+        return new UnboundAttribute.UnboundLineNumberTableAttribute(lines);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LineNumberTableAttribute.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -28,3 +28,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundLocalVariable;\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundLocalVariable;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LocalVariableInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+\n+\/**\n+ * Models the {@code LocalVariableTable} attribute (JVMS 4.7.13), which can appear\n+ * on a {@code Code} attribute, and records debug information about local\n+ * variables.\n+ * Delivered as a {@link jdk.internal.classfile.instruction.LocalVariable} when traversing the\n+ * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n+ * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n+ *\/\n+public sealed interface LocalVariableTableAttribute\n+        extends Attribute<LocalVariableTableAttribute>\n+        permits BoundAttribute.BoundLocalVariableTableAttribute, UnboundAttribute.UnboundLocalVariableTableAttribute {\n+\n+    \/**\n+     * {@return debug information for the local variables in this method}\n+     *\/\n+    List<LocalVariableInfo> localVariables();\n+\n+    \/**\n+     * {@return a {@code LocalVariableTable} attribute}\n+     * @param locals the local variable descriptions\n+     *\/\n+    static LocalVariableTableAttribute of(List<LocalVariableInfo> locals) {\n+        return new UnboundAttribute.UnboundLocalVariableTableAttribute(locals);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -27,3 +27,3 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.BoundLocalVariableType;\n-import jdk.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundLocalVariableType;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTypeInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/LocalVariableTypeInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+\n+\/**\n+ * Models the {@code LocalVariableTypeTable} attribute (JVMS 4.7.14), which can appear\n+ * on a {@code Code} attribute, and records debug information about local\n+ * variables.\n+ * Delivered as a {@link jdk.internal.classfile.instruction.LocalVariable} when traversing the\n+ * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n+ * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n+ *\/\n+public sealed interface LocalVariableTypeTableAttribute\n+        extends Attribute<LocalVariableTypeTableAttribute>\n+        permits BoundAttribute.BoundLocalVariableTypeTableAttribute, UnboundAttribute.UnboundLocalVariableTypeTableAttribute {\n+\n+    \/**\n+     * {@return debug information for the local variables in this method}\n+     *\/\n+    List<LocalVariableTypeInfo> localVariableTypes();\n+\n+    \/**\n+     * {@return a {@code LocalVariableTypeTable} attribute}\n+     * @param locals the local variable descriptions\n+     *\/\n+    static LocalVariableTypeTableAttribute of(List<LocalVariableTypeInfo> locals) {\n+        return new UnboundAttribute.UnboundLocalVariableTypeTableAttribute(locals);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -30,1 +30,1 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -32,4 +32,4 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/MethodParameterInfo.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/MethodParameterInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code MethodParameters} attribute (JVMS 4.7.24), which can\n+ * appear on methods, and records optional information about the method's\n+ * parameters.  Delivered as a {@link jdk.internal.classfile.MethodElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.MethodModel}.\n+ *\/\n+public sealed interface MethodParametersAttribute\n+        extends Attribute<MethodParametersAttribute>, MethodElement\n+        permits BoundAttribute.BoundMethodParametersAttribute,\n+                UnboundAttribute.UnboundMethodParametersAttribute {\n+\n+    \/**\n+     * {@return information about the parameters of the method}  The i'th entry\n+     * in the list correponds to the i'th parameter in the method declaration.\n+     *\/\n+    List<MethodParameterInfo> parameters();\n+\n+    \/**\n+     * {@return a {@code MethodParameters} attribute}\n+     * @param parameters the method parameter descriptions\n+     *\/\n+    static MethodParametersAttribute of(List<MethodParameterInfo> parameters) {\n+        return new UnboundAttribute.UnboundMethodParametersAttribute(parameters);\n+    }\n+\n+    \/**\n+     * {@return a {@code MethodParameters} attribute}\n+     * @param parameters the method parameter descriptions\n+     *\/\n+    static MethodParametersAttribute of(MethodParameterInfo... parameters) {\n+        return of(List.of(parameters));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/MethodParametersAttribute.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Collection;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.impl.ModuleAttributeBuilderImpl;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models the {@code Module} attribute (JVMS 4.7.25), which can\n+ * appear on classes that represent module descriptors.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+\n+public sealed interface ModuleAttribute\n+        extends Attribute<ModuleAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleAttribute, UnboundAttribute.UnboundModuleAttribute {\n+\n+    \/**\n+     * {@return the name of the module}\n+     *\/\n+    ModuleEntry moduleName();\n+\n+    \/**\n+     * {@return the the module flags of the module, as a bit mask}\n+     *\/\n+    int moduleFlagsMask();\n+\n+    \/**\n+     * {@return the the module flags of the module, as a set of enum constants}\n+     *\/\n+    default Set<AccessFlag> moduleFlags() {\n+        return AccessFlag.maskToAccessFlags(moduleFlagsMask(), AccessFlag.Location.MODULE);\n+    }\n+\n+    default boolean has(AccessFlag flag) {\n+        return Util.has(AccessFlag.Location.MODULE, moduleFlagsMask(), flag);\n+    }\n+\n+    \/**\n+     * {@return version of the module, if present}\n+     *\/\n+    Optional<Utf8Entry> moduleVersion();\n+\n+    \/**\n+     * {@return the modules required by this module}\n+     *\/\n+    List<ModuleRequireInfo> requires();\n+\n+    \/**\n+     * {@return the packages exported by this module}\n+     *\/\n+    List<ModuleExportInfo> exports();\n+\n+    \/**\n+     * {@return the packages opened by this module}\n+     *\/\n+    List<ModuleOpenInfo> opens();\n+\n+    \/**\n+     * {@return the services used by this module}  Services may be discovered via\n+     * {@link java.util.ServiceLoader}.\n+     *\/\n+    List<ClassEntry> uses();\n+\n+    \/**\n+     * {@return the service implementations provided by this module}\n+     *\/\n+    List<ModuleProvideInfo> provides();\n+\n+    \/**\n+     * {@return a {@code Module} attribute}\n+     *\n+     * @param moduleName the module name\n+     * @param moduleFlags the module flags\n+     * @param moduleVersion the module version\n+     * @param requires the required packages\n+     * @param exports the exported packages\n+     * @param opens the opened packages\n+     * @param uses the consumed services\n+     * @param provides the provided services\n+     *\/\n+    static ModuleAttribute of(ModuleEntry moduleName, int moduleFlags,\n+                              Utf8Entry moduleVersion,\n+                              Collection<ModuleRequireInfo> requires,\n+                              Collection<ModuleExportInfo> exports,\n+                              Collection<ModuleOpenInfo> opens,\n+                              Collection<ClassEntry> uses,\n+                              Collection<ModuleProvideInfo> provides) {\n+        return new UnboundAttribute.UnboundModuleAttribute(moduleName, moduleFlags, moduleVersion, requires, exports, opens, uses, provides);\n+    }\n+\n+    static ModuleAttribute of(ModuleDesc moduleName,\n+                              Consumer<ModuleAttributeBuilder> attrHandler) {\n+        var mb = new ModuleAttributeBuilderImpl(moduleName);\n+        attrHandler.accept(mb);\n+        return  mb.build();\n+    }\n+\n+    public sealed interface ModuleAttributeBuilder\n+            permits ModuleAttributeBuilderImpl {\n+\n+        ModuleAttributeBuilder moduleName(ModuleDesc moduleName);\n+        ModuleAttributeBuilder moduleFlags(int flagsMask);\n+        default ModuleAttributeBuilder moduleFlags(AccessFlag... moduleFlags) {\n+            return moduleFlags(Util.flagsToBits(AccessFlag.Location.MODULE, moduleFlags));\n+        }\n+        ModuleAttributeBuilder moduleVersion(String version);\n+\n+        ModuleAttributeBuilder requires(ModuleDesc module, int requiresFlagsMask, String version);\n+        default ModuleAttributeBuilder requires(ModuleDesc module, Collection<AccessFlag> requiresFlags, String version) {\n+            return requires(module, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), version);\n+        }\n+        ModuleAttributeBuilder requires(ModuleRequireInfo requires);\n+\n+        ModuleAttributeBuilder exports(PackageDesc pkge, int exportsFlagsMask, ModuleDesc... exportsToModules);\n+        default ModuleAttributeBuilder exports(PackageDesc pkge, Collection<AccessFlag> exportsFlags, ModuleDesc... exportsToModules) {\n+            return exports(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportsFlags), exportsToModules);\n+        }\n+        ModuleAttributeBuilder exports(ModuleExportInfo exports);\n+\n+        ModuleAttributeBuilder opens(PackageDesc pkge, int opensFlagsMask, ModuleDesc... opensToModules);\n+        default ModuleAttributeBuilder opens(PackageDesc pkge, Collection<AccessFlag> opensFlags, ModuleDesc... opensToModules) {\n+            return opens(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensToModules);\n+        }\n+        ModuleAttributeBuilder opens(ModuleOpenInfo opens);\n+\n+        ModuleAttributeBuilder uses(ClassDesc service);\n+        ModuleAttributeBuilder uses(ClassEntry uses);\n+\n+        ModuleAttributeBuilder provides(ClassDesc service, ClassDesc... implClasses);\n+        ModuleAttributeBuilder provides(ModuleProvideInfo provides);\n+\n+        ModuleAttribute build();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleAttribute.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -31,2 +31,2 @@\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n@@ -35,3 +35,3 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n@@ -40,1 +40,1 @@\n- * Models a single \"exports\" declaration in the {@link jdk.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"exports\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleExportInfo.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleExportInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models hash information for a single module in the {@link jdk.internal.classfile.attribute.ModuleHashesAttribute}.\n+ *\/\n+public sealed interface ModuleHashInfo\n+        permits UnboundAttribute.UnboundModuleHashInfo {\n+\n+    \/**\n+     * {@return the name of the related module}\n+     *\/\n+    ModuleEntry moduleName();\n+\n+    \/**\n+     * {@return the hash of the related module}\n+     *\/\n+    byte[] hash();\n+\n+    \/**\n+     * {@return a module hash description}\n+     * @param moduleName the module name\n+     * @param hash the hash value\n+     *\/\n+    static ModuleHashInfo of(ModuleEntry moduleName, byte[] hash) {\n+        return new UnboundAttribute.UnboundModuleHashInfo(moduleName, hash);\n+    }\n+\n+    \/**\n+     * {@return a module hash description}\n+     * @param moduleDesc the module name\n+     * @param hash the hash value\n+     *\/\n+    static ModuleHashInfo of(ModuleDesc moduleDesc, byte[] hash) {\n+        return new UnboundAttribute.UnboundModuleHashInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleDesc.moduleName())), hash);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashInfo.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code ModuleHashes} attribute, which can\n+ * appear on classes that represent module descriptors.  This is a JDK-specific\n+ * attribute, which captures the hashes of a set of co-delivered modules.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\n+ *  <p>The specification of the {@code ModuleHashes} attribute is:\n+ * <pre> {@code\n+ *\n+ * ModuleHashes_attribute {\n+ *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n+ *   \/\/ the string \"ModuleHashes\"\n+ *   u2 attribute_name_index;\n+ *   u4 attribute_length;\n+ *\n+ *   \/\/ index to CONSTANT_utf8_info structure with algorithm name\n+ *   u2 algorithm_index;\n+ *\n+ *   \/\/ the number of entries in the hashes table\n+ *   u2 hashes_count;\n+ *   {   u2 module_name_index (index to CONSTANT_Module_info structure)\n+ *       u2 hash_length;\n+ *       u1 hash[hash_length];\n+ *   } hashes[hashes_count];\n+ *\n+ * }\n+ * } <\/pre>\n+ *\/\n+public sealed interface ModuleHashesAttribute\n+        extends Attribute<ModuleHashesAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleHashesAttribute, UnboundAttribute.UnboundModuleHashesAttribute {\n+\n+    \/**\n+     * {@return the algorithm name used to compute the hash}\n+     *\/\n+    Utf8Entry algorithm();\n+\n+    \/**\n+     * {@return the hash information about related modules}\n+     *\/\n+    List<ModuleHashInfo> hashes();\n+\n+    \/**\n+     * {@return a {@code ModuleHashes} attribute}\n+     * @param algorithm the hashing algorithm\n+     * @param hashes the hash descriptions\n+     *\/\n+    static ModuleHashesAttribute of(String algorithm,\n+                                    List<ModuleHashInfo> hashes) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(algorithm), hashes);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleHashes} attribute}\n+     * @param algorithm the hashing algorithm\n+     * @param hashes the hash descriptions\n+     *\/\n+    static ModuleHashesAttribute of(String algorithm,\n+                                    ModuleHashInfo... hashes) {\n+        return of(algorithm, List.of(hashes));\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleHashes} attribute}\n+     * @param algorithm the hashing algorithm\n+     * @param hashes the hash descriptions\n+     *\/\n+    static ModuleHashesAttribute of(Utf8Entry algorithm,\n+                                    List<ModuleHashInfo> hashes) {\n+        return new UnboundAttribute.UnboundModuleHashesAttribute(algorithm, hashes);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleHashes} attribute}\n+     * @param algorithm the hashing algorithm\n+     * @param hashes the hash descriptions\n+     *\/\n+    static ModuleHashesAttribute of(Utf8Entry algorithm,\n+                                    ModuleHashInfo... hashes) {\n+        return of(algorithm, List.of(hashes));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashesAttribute.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models the {@code ModuleMainClass} attribute (JVMS 4.7.27), which can\n+ * appear on classes that represent module descriptors.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface ModuleMainClassAttribute\n+        extends Attribute<ModuleMainClassAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleMainClassAttribute, UnboundAttribute.UnboundModuleMainClassAttribute {\n+\n+    \/**\n+     * {@return main class for this module}\n+     *\/\n+    ClassEntry mainClass();\n+\n+    \/**\n+     * {@return a {@code ModuleMainClass} attribute}\n+     * @param mainClass the main class\n+     *\/\n+    static ModuleMainClassAttribute of(ClassEntry mainClass) {\n+        return new UnboundAttribute.UnboundModuleMainClassAttribute(mainClass);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleMainClass} attribute}\n+     * @param mainClass the main class\n+     *\/\n+    static ModuleMainClassAttribute of(ClassDesc mainClass) {\n+        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(mainClass))));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import java.lang.reflect.AccessFlag;\n+\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a single \"opens\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ *\/\n+public sealed interface ModuleOpenInfo\n+        permits UnboundAttribute.UnboundModuleOpenInfo {\n+\n+    \/**\n+     * {@return the package being opened}\n+     *\/\n+    PackageEntry openedPackage();\n+\n+    \/**\n+     * {@return the flags associated with this open declaration, as a bit mask}\n+     * Valid flags include {@link jdk.internal.classfile.Classfile#ACC_SYNTHETIC} and\n+     * {@link jdk.internal.classfile.Classfile#ACC_MANDATED}\n+     *\/\n+    int opensFlagsMask();\n+\n+    default Set<AccessFlag> opensFlags() {\n+        return AccessFlag.maskToAccessFlags(opensFlagsMask(), AccessFlag.Location.MODULE_OPENS);\n+    }\n+\n+    \/**\n+     * {@return whether the specified access flag is set}\n+     * @param flag the access flag\n+     *\/\n+    default boolean has(AccessFlag flag) {\n+        return Util.has(AccessFlag.Location.MODULE_OPENS, opensFlagsMask(), flag);\n+    }\n+\n+    \/**\n+     * The list of modules to which this package is opened, if it is a\n+     * qualified open.\n+     *\n+     * @return the modules to which this package is opened\n+     *\/\n+    List<ModuleEntry> opensTo();\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageEntry opens, int opensFlags,\n+                             List<ModuleEntry> opensTo) {\n+        return new UnboundAttribute.UnboundModuleOpenInfo(opens, opensFlags, opensTo);\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageEntry opens, Collection<AccessFlag> opensFlags,\n+                             List<ModuleEntry> opensTo) {\n+        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageEntry opens,\n+                             int opensFlags,\n+                             ModuleEntry... opensTo) {\n+        return of(opens, opensFlags, List.of(opensTo));\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageEntry opens,\n+                             Collection<AccessFlag> opensFlags,\n+                             ModuleEntry... opensTo) {\n+        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code ModulePackages} attribute (JVMS 4.7.26), which can\n+ * appear on classes that represent module descriptors.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface ModulePackagesAttribute\n+        extends Attribute<ModulePackagesAttribute>, ClassElement\n+        permits BoundAttribute.BoundModulePackagesAttribute,\n+                UnboundAttribute.UnboundModulePackagesAttribute {\n+\n+    \/**\n+     * {@return the packages that are opened or exported by this module}\n+     *\/\n+    List<PackageEntry> packages();\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute of(List<PackageEntry> packages) {\n+        return new UnboundAttribute.UnboundModulePackagesAttribute(packages);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute of(PackageEntry... packages) {\n+        return of(List.of(packages));\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute ofNames(List<PackageDesc> packages) {\n+        var p = new PackageEntry[packages.size()];\n+        for (int i = 0; i < packages.size(); i++) {\n+            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).packageInternalName()));\n+        }\n+        return of(p);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute ofNames(PackageDesc... packages) {\n+        \/\/ List view, since ref to packages is temporary\n+        return ofNames(Arrays.asList(packages));\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModulePackagesAttribute.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.attribute;\n+package jdk.internal.classfile.attribute;\n@@ -31,4 +31,4 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n@@ -37,1 +37,1 @@\n- * Models a single \"provides\" declaration in the {@link jdk.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"provides\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleProvideInfo.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/attribute\/ModuleProvideInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a single \"requires\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ *\/\n+public sealed interface ModuleRequireInfo\n+        permits UnboundAttribute.UnboundModuleRequiresInfo {\n+\n+    \/**\n+     * {@return The module on which the current module depends}\n+     *\/\n+    ModuleEntry requires();\n+\n+    \/**\n+     * {@return the flags associated with this require declaration, as a bit mask}\n+     * Valid flags include {@link jdk.internal.classfile.Classfile#ACC_TRANSITIVE},\n+     * {@link jdk.internal.classfile.Classfile#ACC_STATIC_PHASE},\n+     * {@link jdk.internal.classfile.Classfile#ACC_SYNTHETIC} and\n+     * {@link jdk.internal.classfile.Classfile#ACC_MANDATED}\n+     *\/\n+    int requiresFlagsMask();\n+\n+    default Set<AccessFlag> requiresFlags() {\n+        return AccessFlag.maskToAccessFlags(requiresFlagsMask(), AccessFlag.Location.MODULE_REQUIRES);\n+    }\n+\n+    \/**\n+     * {@return the required version of the required module, if present}\n+     *\/\n+    Optional<Utf8Entry> requiresVersion();\n+\n+    \/**\n+     * {@return whether the specific access flag is set}\n+     * @param flag the access flag\n+     *\/\n+    default boolean has(AccessFlag flag) {\n+        return Util.has(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleEntry requires, int requiresFlags, Utf8Entry requiresVersion) {\n+        return new UnboundAttribute.UnboundModuleRequiresInfo(requires, requiresFlags, Optional.ofNullable(requiresVersion));\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleEntry requires, Collection<AccessFlag> requiresFlags, Utf8Entry requiresVersion) {\n+        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleDesc requires, int requiresFlags, String requiresVersion) {\n+        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.moduleName())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleDesc requires, Collection<AccessFlag> requiresFlags, String requiresVersion) {\n+        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code ModuleResolution} attribute, which can\n+ * appear on classes that represent module descriptors.  This is a JDK-specific\n+ *  * attribute, which captures resolution metadata for modules.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\n+ *  <p>The specification of the {@code ModuleResolution} attribute is:\n+ * <pre> {@code\n+ *  ModuleResolution_attribute {\n+ *    u2 attribute_name_index;    \/\/ \"ModuleResolution\"\n+ *    u4 attribute_length;        \/\/ 2\n+ *    u2 resolution_flags;\n+ *\n+ *  The value of the resolution_flags item is a mask of flags used to denote\n+ *  properties of module resolution. The flags are as follows:\n+ *\n+ *   \/\/ Optional\n+ *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n+ *\n+ *   \/\/ At most one of:\n+ *   0x0002 (WARN_DEPRECATED)\n+ *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n+ *   0x0008 (WARN_INCUBATING)\n+ *  }\n+ * } <\/pre>\n+ *\/\n+public sealed interface ModuleResolutionAttribute\n+        extends Attribute<ModuleResolutionAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleResolutionAttribute, UnboundAttribute.UnboundModuleResolutionAttribute {\n+\n+    \/**\n+     *  The value of the resolution_flags item is a mask of flags used to denote\n+     *  properties of module resolution. The flags are as follows:\n+     *\n+     *   \/\/ Optional\n+     *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n+     *\n+     *   \/\/ At most one of:\n+     *   0x0002 (WARN_DEPRECATED)\n+     *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n+     *   0x0008 (WARN_INCUBATING)\n+     *\/\n+    int resolutionFlags();\n+\n+    \/**\n+     * {@return a {@code ModuleResolution} attribute}\n+     * @param resolutionFlags the resolution falgs\n+     *\/\n+    static ModuleResolutionAttribute of(int resolutionFlags) {\n+        return new UnboundAttribute.UnboundModuleResolutionAttribute(resolutionFlags);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code ModuleTarget} attribute, which can\n+ * appear on classes that represent module descriptors.  This is a JDK-specific\n+ * attribute, which captures constraints on the target platform.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\n+ * <p>The specification of the {@code ModuleTarget} attribute is:\n+ * <pre> {@code\n+ * TargetPlatform_attribute {\n+ *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n+ *   \/\/ the string \"ModuleTarget\"\n+ *   u2 attribute_name_index;\n+ *   u4 attribute_length;\n+ *\n+ *   \/\/ index to CONSTANT_utf8_info structure with the target platform\n+ *   u2 target_platform_index;\n+ * }\n+ * } <\/pre>\n+ *\/\n+public sealed interface ModuleTargetAttribute\n+        extends Attribute<ModuleTargetAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleTargetAttribute, UnboundAttribute.UnboundModuleTargetAttribute {\n+\n+    \/**\n+     * {@return the target platform}\n+     *\/\n+    Utf8Entry targetPlatform();\n+\n+    \/**\n+     * {@return a {@code ModuleTarget} attribute}\n+     * @param targetPlatform the target platform\n+     *\/\n+    static ModuleTargetAttribute of(String targetPlatform) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(targetPlatform));\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleTarget} attribute}\n+     * @param targetPlatform the target platform\n+     *\/\n+    static ModuleTargetAttribute of(Utf8Entry targetPlatform) {\n+        return new UnboundAttribute.UnboundModuleTargetAttribute(targetPlatform);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleTargetAttribute.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code NestHost} attribute (JVMS 4.7.28), which can\n+ * appear on classes to indicate that this class is a member of a nest.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface NestHostAttribute extends Attribute<NestHostAttribute>, ClassElement\n+        permits BoundAttribute.BoundNestHostAttribute,\n+                UnboundAttribute.UnboundNestHostAttribute {\n+\n+    \/**\n+     * {@return the host class of the nest to which this class belongs}\n+     *\/\n+    ClassEntry nestHost();\n+\n+    \/**\n+     * {@return a {@code NestHost} attribute}\n+     * @param nestHost the host class of the nest\n+     *\/\n+    static NestHostAttribute of(ClassEntry nestHost) {\n+        return new UnboundAttribute.UnboundNestHostAttribute(nestHost);\n+    }\n+\n+    \/**\n+     * {@return a {@code NestHost} attribute}\n+     * @param nestHost the host class of the nest\n+     *\/\n+    static NestHostAttribute of(ClassDesc nestHost) {\n+        return of(TemporaryConstantPool.INSTANCE.classEntry(nestHost));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/NestHostAttribute.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models the {@code NestMembers} attribute (JVMS 4.7.29), which can\n+ * appear on classes to indicate that this class is the host of a nest.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface NestMembersAttribute extends Attribute<NestMembersAttribute>, ClassElement\n+        permits BoundAttribute.BoundNestMembersAttribute, UnboundAttribute.UnboundNestMembersAttribute {\n+\n+    \/**\n+     * {@return the classes belonging to the nest hosted by this class}\n+     *\/\n+    List<ClassEntry> nestMembers();\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute of(List<ClassEntry> nestMembers) {\n+        return new UnboundAttribute.UnboundNestMembersAttribute(nestMembers);\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute of(ClassEntry... nestMembers) {\n+        return of(List.of(nestMembers));\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute ofSymbols(List<ClassDesc> nestMembers) {\n+        return of(Util.entryList(nestMembers));\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute ofSymbols(ClassDesc... nestMembers) {\n+        \/\/ List view, since ref to nestMembers is temporary\n+        return ofSymbols(Arrays.asList(nestMembers));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/NestMembersAttribute.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models the {@code PermittedSubclasses} attribute (JVMS 4.7.31), which can\n+ * appear on classes to indicate which classes may extend this class.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface PermittedSubclassesAttribute\n+        extends Attribute<PermittedSubclassesAttribute>, ClassElement\n+        permits BoundAttribute.BoundPermittedSubclassesAttribute, UnboundAttribute.UnboundPermittedSubclassesAttribute {\n+\n+    \/**\n+     * {@return the list of permitted subclasses}\n+     *\/\n+    List<ClassEntry> permittedSubclasses();\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute of(List<ClassEntry> permittedSubclasses) {\n+        return new UnboundAttribute.UnboundPermittedSubclassesAttribute(permittedSubclasses);\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute of(ClassEntry... permittedSubclasses) {\n+        return of(List.of(permittedSubclasses));\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute ofSymbols(List<ClassDesc> permittedSubclasses) {\n+        return of(Util.entryList(permittedSubclasses));\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute ofSymbols(ClassDesc... permittedSubclasses) {\n+        \/\/ List view, since ref to nestMembers is temporary\n+        return ofSymbols(Arrays.asList(permittedSubclasses));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/PermittedSubclassesAttribute.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code Record} attribute (JVMS 4.7.30), which can\n+ * appear on classes to indicate that this class is a record class.\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ *\/\n+public sealed interface RecordAttribute extends Attribute<RecordAttribute>, ClassElement\n+        permits BoundAttribute.BoundRecordAttribute, UnboundAttribute.UnboundRecordAttribute {\n+\n+    \/**\n+     * {@return the components of this record class}\n+     *\/\n+    List<RecordComponentInfo> components();\n+\n+    \/**\n+     * {@return a {@code Record} attribute}\n+     * @param components the record components\n+     *\/\n+    static RecordAttribute of(List<RecordComponentInfo> components) {\n+        return new UnboundAttribute.UnboundRecordAttribute(components);\n+    }\n+\n+    \/**\n+     * {@return a {@code Record} attribute}\n+     * @param components the record components\n+     *\/\n+    static RecordAttribute of(RecordComponentInfo... components) {\n+        return of(List.of(components));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RecordAttribute.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributedElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundRecordComponentInfo;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models a single record component in the {@link jdk.internal.classfile.attribute.RecordAttribute}.\n+ *\/\n+public sealed interface RecordComponentInfo\n+        extends AttributedElement\n+        permits BoundRecordComponentInfo, UnboundAttribute.UnboundRecordComponentInfo {\n+    \/**\n+     * {@return the name of this component}\n+     *\/\n+    Utf8Entry name();\n+\n+    \/**\n+     * {@return the field descriptor of this component}\n+     *\/\n+    Utf8Entry descriptor();\n+\n+    \/**\n+     * {@return the field descriptor of this component, as a {@linkplain ClassDesc}}\n+     *\/\n+    default ClassDesc descriptorSymbol() {\n+        return ClassDesc.ofDescriptor(descriptor().stringValue());\n+    }\n+\n+    @Override\n+    default Kind attributedElementKind() {\n+        return Kind.RECORD_COMPONENT;\n+    }\n+\n+    \/**\n+     * {@return a record component description}\n+     * @param name the component name\n+     * @param descriptor the component field descriptor\n+     * @param attributes the component attributes\n+     *\/\n+    static RecordComponentInfo of(Utf8Entry name,\n+                                  Utf8Entry descriptor,\n+                                  List<Attribute<?>> attributes) {\n+        return new UnboundAttribute.UnboundRecordComponentInfo(name, descriptor, attributes);\n+    }\n+\n+    \/**\n+     * {@return a record component description}\n+     * @param name the component name\n+     * @param descriptor the component field descriptor\n+     * @param attributes the component attributes\n+     *\/\n+    static RecordComponentInfo of(Utf8Entry name,\n+                                  Utf8Entry descriptor,\n+                                  Attribute<?>... attributes) {\n+        return of(name, descriptor, List.of(attributes));\n+    }\n+\n+    \/**\n+     * {@return a record component description}\n+     * @param name the component name\n+     * @param descriptor the component field descriptor\n+     * @param attributes the component attributes\n+     *\/\n+    static RecordComponentInfo of(String name,\n+                                  ClassDesc descriptor,\n+                                  List<Attribute<?>> attributes) {\n+        return new UnboundAttribute.UnboundRecordComponentInfo(TemporaryConstantPool.INSTANCE.utf8Entry(name),\n+                                                               TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n+                                                               attributes);\n+    }\n+\n+    \/**\n+     * {@return a record component description}\n+     * @param name the component name\n+     * @param descriptor the component field descriptor\n+     * @param attributes the component attributes\n+     *\/\n+    static RecordComponentInfo of(String name,\n+                                  ClassDesc descriptor,\n+                                  Attribute<?>... attributes) {\n+        return of(name, descriptor, List.of(attributes));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RecordComponentInfo.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleAnnotations} attribute (JVMS 4.7.17), which\n+ * can appear on classes, methods, and fields. Delivered as a\n+ * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n+ * {@link jdk.internal.classfile.MethodElement} when traversing the corresponding model type.\n+ *\/\n+public sealed interface RuntimeInvisibleAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundRuntimeInvisibleAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the non-runtime-visible annotations on this class, field, or method}\n+     *\/\n+    List<Annotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleAnnotationsAttribute of(List<Annotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleAnnotationsAttribute of(Annotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleAnnotationsAttribute.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleParameterAnnotations} attribute (JVMS\n+ * 4.7.19), which can appear on methods. Delivered as a {@link\n+ * jdk.internal.classfile.MethodElement} when traversing a {@link MethodModel}.\n+ *\/\n+public sealed interface RuntimeInvisibleParameterAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleParameterAnnotationsAttribute>, MethodElement\n+        permits BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the list of annotations corresponding to each method parameter}\n+     * The element at the i'th index corresponds to the annotations on the i'th\n+     * parameter.\n+     *\/\n+    List<List<Annotation>> parameterAnnotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleParameterAnnotations} attribute}\n+     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     *\/\n+    static RuntimeInvisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute(parameterAnnotations);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleParameterAnnotationsAttribute.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.TypeAnnotation;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleTypeAnnotations} attribute (JVMS 4.7.21), which\n+ * can appear on classes, methods, fields, and code attributes. Delivered as a\n+ * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement},\n+ * {@link jdk.internal.classfile.MethodElement}, or {@link CodeElement} when traversing\n+ * the corresponding model type.\n+ *\/\n+public sealed interface RuntimeInvisibleTypeAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleTypeAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement, CodeElement\n+        permits BoundAttribute.BoundRuntimeInvisibleTypeAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the non-runtime-visible type annotations on parts of this class, field, or method}\n+     *\/\n+    List<TypeAnnotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleTypeAnnotationsAttribute.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleAnnotations} attribute (JVMS 4.7.16), which\n+ * can appear on classes, methods, and fields. Delivered as a\n+ * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n+ * {@link jdk.internal.classfile.MethodElement} when traversing the corresponding model type.\n+ *\/\n+public sealed interface RuntimeVisibleAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the runtime-visible annotations on this class, field, or method}\n+     *\/\n+    List<Annotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleAnnotationsAttribute of(List<Annotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleAnnotationsAttribute of(Annotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleParameterAnnotations} attribute (JVMS 4.7.18), which\n+ * can appear on methods. Delivered as a {@link jdk.internal.classfile.MethodElement}\n+ * when traversing a {@link MethodModel}.\n+ *\/\n+public sealed interface RuntimeVisibleParameterAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleParameterAnnotationsAttribute>, MethodElement\n+        permits BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the list of annotations corresponding to each method parameter}\n+     * The element at the i'th index corresponds to the annotations on the i'th\n+     * parameter.\n+     *\/\n+    List<List<Annotation>> parameterAnnotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleParameterAnnotations} attribute}\n+     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     *\/\n+    static RuntimeVisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute(parameterAnnotations);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleParameterAnnotationsAttribute.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.TypeAnnotation;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleTypeAnnotations} attribute (JVMS 4.7.20), which\n+ * can appear on classes, methods, fields, and code attributes. Delivered as a\n+ * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement},\n+ * {@link jdk.internal.classfile.MethodElement}, or {@link CodeElement} when traversing\n+ * the corresponding model type.\n+ *\/\n+public sealed interface RuntimeVisibleTypeAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleTypeAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement, CodeElement\n+        permits BoundAttribute.BoundRuntimeVisibleTypeAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the runtime-visible type annotations on parts of this class, field, or method}\n+     *\/\n+    List<TypeAnnotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleTypeAnnotationsAttribute.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassSignature;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.MethodSignature;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code Signature} attribute (JVMS 4.7.9), which\n+ * can appear on classes, methods, or fields. Delivered as a\n+ * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n+ * {@link jdk.internal.classfile.MethodElement} when traversing\n+ * the corresponding model type.\n+ *\/\n+public sealed interface SignatureAttribute\n+        extends Attribute<SignatureAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundSignatureAttribute, UnboundAttribute.UnboundSignatureAttribute {\n+\n+    \/**\n+     * {@return the signature for the class, method, or field}\n+     *\/\n+    Utf8Entry signature();\n+\n+    \/**\n+     * Parse the siganture as a class signature.\n+     * @return the class signature\n+     *\/\n+    default ClassSignature asClassSignature() {\n+        return ClassSignature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * Parse the siganture as a method signature.\n+     * @return the method signature\n+     *\/\n+    default MethodSignature asMethodSignature() {\n+        return MethodSignature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * Parse the siganture as a type signature.\n+     * @return the type signature\n+     *\/\n+    default Signature asTypeSignature() {\n+        return Signature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute for a class}\n+     * @param classSignature the signature\n+     *\/\n+    static SignatureAttribute of(ClassSignature classSignature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(classSignature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute for a method}\n+     * @param methodSignature the signature\n+     *\/\n+    static SignatureAttribute of(MethodSignature methodSignature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(methodSignature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute}\n+     * @param signature the signature\n+     *\/\n+    static SignatureAttribute of(Signature signature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute}\n+     * @param signature the signature\n+     *\/\n+    static SignatureAttribute of(Utf8Entry signature) {\n+        return new UnboundAttribute.UnboundSignatureAttribute(signature);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SignatureAttribute.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * SourceDebugExtensionAttribute.\n+ *\/\n+public sealed interface SourceDebugExtensionAttribute\n+        extends Attribute<SourceDebugExtensionAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceDebugExtensionAttribute, UnboundAttribute.UnboundSourceDebugExtensionAttribute {\n+\n+    \/**\n+     * {@return the debug extension payload}\n+     *\/\n+    byte[] contents();\n+\n+    \/**\n+     * {@return a {@code SourceDebugExtension} attribute}\n+     * @param contents the extension contents\n+     *\/\n+    static SourceDebugExtensionAttribute of(byte[] contents) {\n+        return new UnboundAttribute.UnboundSourceDebugExtensionAttribute(contents);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code SourceFile} attribute (JVMS 4.7.10), which\n+ * can appear on classes. Delivered as a {@link jdk.internal.classfile.ClassElement}\n+ * when traversing a {@link ClassModel}.\n+ *\/\n+public sealed interface SourceFileAttribute\n+        extends Attribute<SourceFileAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceFileAttribute, UnboundAttribute.UnboundSourceFileAttribute {\n+\n+    \/**\n+     * {@return the name of the source file from which this class was compiled}\n+     *\/\n+    Utf8Entry sourceFile();\n+\n+    static SourceFileAttribute of(String sourceFile) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceFile));\n+    }\n+\n+    static SourceFileAttribute of(Utf8Entry sourceFile) {\n+        return new UnboundAttribute.UnboundSourceFileAttribute(sourceFile);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceFileAttribute.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code SourceFile} attribute (@@@ reference needed), which can\n+ * appear on classes. Delivered as a {@link jdk.internal.classfile.ClassElement} when\n+ * traversing a {@link ClassModel}.\n+ *\/\n+public sealed interface SourceIDAttribute\n+        extends Attribute<SourceIDAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceIDAttribute, UnboundAttribute.UnboundSourceIDAttribute {\n+\n+    \/**\n+     * {@return the source id}  The source id is the last modified time of the\n+     * source file (as reported by the filesystem, in milliseconds) when the\n+     * classfile is compiled.\n+     *\/\n+    Utf8Entry sourceId();\n+\n+    \/**\n+     * {@return a {@code SourceID} attribute}\n+     * @param sourceId the source id\n+     *\/\n+    static SourceIDAttribute of(Utf8Entry sourceId) {\n+        return new UnboundAttribute.UnboundSourceIDAttribute(sourceId);\n+    }\n+\n+    \/**\n+     * {@return a {@code SourceID} attribute}\n+     * @param sourceId the source id\n+     *\/\n+    static SourceIDAttribute of(String sourceId) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceId));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceIDAttribute.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.StackMapDecoder;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import static jdk.internal.classfile.Classfile.*;\n+\n+\/**\n+ * Models the {@code StackMapTable} attribute (JVMS 4.7.4), which can appear\n+ * on a {@code Code} attribute.\n+ *\/\n+public sealed interface StackMapTableAttribute\n+        extends Attribute<StackMapTableAttribute>, CodeElement\n+        permits BoundAttribute.BoundStackMapTableAttribute, UnboundAttribute.UnboundStackMapTableAttribute {\n+\n+    \/**\n+     * {@return the stack map frames}\n+     *\/\n+    List<StackMapFrameInfo> entries();\n+\n+    public static StackMapTableAttribute of(List<StackMapFrameInfo> entries) {\n+        return new UnboundAttribute.UnboundStackMapTableAttribute(entries);\n+    }\n+\n+    \/**\n+     * The type of a stack value.\n+     *\/\n+    sealed interface VerificationTypeInfo {\n+        int tag();\n+    }\n+\n+    \/**\n+     * A simple stack value.\n+     *\/\n+    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n+        ITEM_TOP(VT_TOP),\n+        ITEM_INTEGER(VT_INTEGER),\n+        ITEM_FLOAT(VT_FLOAT),\n+        ITEM_DOUBLE(VT_DOUBLE),\n+        ITEM_LONG(VT_LONG),\n+        ITEM_NULL(VT_NULL),\n+        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n+\n+\n+        private final int tag;\n+\n+        SimpleVerificationTypeInfo(int tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public int tag() {\n+            return tag;\n+        }\n+    }\n+\n+    \/**\n+     * A stack value for an object type.\n+     *\/\n+    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n+\n+        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n+            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n+        }\n+\n+        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n+            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n+        }\n+\n+        \/**\n+         * {@return the class of the value}\n+         *\/\n+        ClassEntry className();\n+\n+        default ClassDesc classSymbol() {\n+            return className().asSymbol();\n+        }\n+    }\n+\n+    \/**\n+     * An uninitialized stack value.\n+     *\/\n+    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n+        Label newTarget();\n+\n+        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n+            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n+        }\n+    }\n+\n+    \/**\n+     * A stack map frame.\n+     *\/\n+    sealed interface StackMapFrameInfo\n+            permits StackMapDecoder.StackMapFrameImpl {\n+\n+        int frameType();\n+        Label target();\n+        List<VerificationTypeInfo> locals();\n+        List<VerificationTypeInfo> stack();\n+\n+        public static StackMapFrameInfo of(Label target,\n+                List<VerificationTypeInfo> locals,\n+                List<VerificationTypeInfo> stack) {\n+\n+            return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+\/**\n+ * Models the {@code Synthetic} attribute (JVMS 4.7.8), which can appear on\n+ * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n+ * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n+ * of a corresponding model.\n+ *\/\n+public sealed interface SyntheticAttribute\n+        extends Attribute<SyntheticAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundSyntheticAttribute, UnboundAttribute.UnboundSyntheticAttribute {\n+\n+    \/**\n+     * {@return a {@code Synthetic} attribute}\n+     *\/\n+    static SyntheticAttribute of() {\n+        return new UnboundAttribute.UnboundSyntheticAttribute();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SyntheticAttribute.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.attribute;\n+\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+\n+\/**\n+ * Models an unknown attribute on a class, method, or field.\n+ *\/\n+public sealed interface UnknownAttribute\n+        extends Attribute<UnknownAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundUnknownAttribute {\n+\n+    \/**\n+     * {@return the uninterpreted contents of the attribute payload}\n+     *\/\n+    byte[] contents();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/UnknownAttribute.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -32,5 +32,5 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CompoundElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CompoundElement;\n@@ -38,1 +38,1 @@\n-import jdk.classfile.impl.ClassPrinterImpl;\n+import jdk.internal.classfile.impl.ClassPrinterImpl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassPrinter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/ClassPrinter.java","status":"renamed"},{"patch":"@@ -0,0 +1,401 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.classfile.components;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicCallSiteDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.AnnotationElement;\n+import jdk.internal.classfile.AnnotationValue;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassSignature;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.FieldTransform;\n+import jdk.internal.classfile.Interfaces;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewObjectInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.MethodSignature;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.Superclass;\n+import jdk.internal.classfile.TypeAnnotation;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.InnerClassInfo;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleProvideInfo;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.classfile.instruction.ConstantInstruction.LoadConstantInstruction;\n+\n+\/**\n+ * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link jdk.internal.classfile.FieldTransform},\n+ * {@link jdk.internal.classfile.MethodTransform} and {@link jdk.internal.classfile.CodeTransform}\n+ * deeply re-mapping all class references in any form, according to given map or map function.\n+ * <p>\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n+ * all attributes referencing classes in any form (including all types of annotations),\n+ * and to all instructions referencing to classes.\n+ * <p>\n+ * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n+ * <p>\n+ * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n+ *\/\n+public sealed interface ClassRemapper extends ClassTransform {\n+\n+    \/**\n+     * Creates new instance of ClassRemapper instructed with a class map.\n+     * Map may contain only re-mapping entries, identity mapping is applied by default.\n+     * @param classMap class map\n+     * @return new instance of ClassRemapper\n+     *\/\n+    static ClassRemapper of(Map<ClassDesc, ClassDesc> classMap) {\n+        return of(desc -> classMap.getOrDefault(desc, desc));\n+    }\n+\n+    \/**\n+     * Creates new instance of ClassRemapper instructed with a map function.\n+     * Map function must return valid {@link java.lang.constant.ClassDesc} of an interface\n+     * or a class, even for identity mappings.\n+     * @param mapFunction class map function\n+     * @return new instance of ClassRemapper\n+     *\/\n+    static ClassRemapper of(Function<ClassDesc, ClassDesc> mapFunction) {\n+        return new ClassRemapperImpl(mapFunction);\n+    }\n+\n+    \/**\n+     * Access method to internal class mapping function.\n+     * @param desc source class\n+     * @return class target class\n+     *\/\n+    ClassDesc map(ClassDesc desc);\n+\n+    \/**\n+     * Returns this ClassRemapper as {@link jdk.internal.classfile.FieldTransform} instance\n+     * @return this ClassRemapper as {@link jdk.internal.classfile.FieldTransform} instance\n+     *\/\n+    FieldTransform asFieldTransform();\n+\n+    \/**\n+     * Returns this ClassRemapper as {@link jdk.internal.classfile.MethodTransform} instance\n+     * @return this ClassRemapper as {@link jdk.internal.classfile.MethodTransform} instance\n+     *\/\n+    MethodTransform asMethodTransform();\n+\n+    \/**\n+     * Returns this ClassRemapper as {@link jdk.internal.classfile.CodeTransform} instance\n+     * @return this ClassRemapper as {@link jdk.internal.classfile.CodeTransform} instance\n+     *\/\n+    CodeTransform asCodeTransform();\n+\n+    \/**\n+     * Remaps the whole ClassModel into a new class file, including the class name.\n+     * @param clm class model to re-map\n+     * @return re-mapped class file bytes\n+     *\/\n+    default byte[] remapClass(ClassModel clm) {\n+        return Classfile.build(map(clm.thisClass().asSymbol()),\n+                clb -> clm.forEachElement(resolve(clb).consumer()));\n+    }\n+\n+    record ClassRemapperImpl(Function<ClassDesc, ClassDesc> mapFunction) implements ClassRemapper {\n+\n+        @Override\n+        public void accept(ClassBuilder clb, ClassElement cle) {\n+            switch (cle) {\n+                case FieldModel fm ->\n+                    clb.withField(fm.fieldName().stringValue(), map(fm.fieldTypeSymbol()), fb -> fm.forEachElement(asFieldTransform().resolve(fb).consumer()));\n+                case MethodModel mm ->\n+                    clb.withMethod(mm.methodName().stringValue(), mapMethodDesc(mm.methodTypeSymbol()), mm.flags().flagsMask(), mb -> mm.forEachElement(asMethodTransform().resolve(mb).consumer()));\n+                case Superclass sc ->\n+                    clb.withSuperclass(map(sc.superclassEntry().asSymbol()));\n+                case Interfaces ins ->\n+                    clb.withInterfaceSymbols(Util.mappedList(ins.interfaces(), in -> map(in.asSymbol())));\n+                case SignatureAttribute sa ->\n+                    clb.with(SignatureAttribute.of(mapClassSignature(sa.asClassSignature())));\n+                case InnerClassesAttribute ica ->\n+                    clb.with(InnerClassesAttribute.of(ica.classes().stream().map(ici ->\n+                            InnerClassInfo.of(map(ici.innerClass().asSymbol()),\n+                                    ici.outerClass().map(oc -> map(oc.asSymbol())),\n+                                    ici.innerName().map(Utf8Entry::stringValue),\n+                                    ici.flagsMask())).toList()));\n+                case EnclosingMethodAttribute ema ->\n+                    clb.with(EnclosingMethodAttribute.of(map(ema.enclosingClass().asSymbol()),\n+                            ema.enclosingMethodName().map(Utf8Entry::stringValue),\n+                            ema.enclosingMethodTypeSymbol().map(this::mapMethodDesc)));\n+                case RecordAttribute ra ->\n+                    clb.with(RecordAttribute.of(ra.components().stream().map(this::mapRecordComponent).toList()));\n+                case ModuleAttribute ma ->\n+                    clb.with(ModuleAttribute.of(ma.moduleName(), ma.moduleFlagsMask(), ma.moduleVersion().orElse(null),\n+                            ma.requires(), ma.exports(), ma.opens(),\n+                            ma.uses().stream().map(ce -> clb.constantPool().classEntry(map(ce.asSymbol()))).toList(),\n+                            ma.provides().stream().map(mp -> ModuleProvideInfo.of(map(mp.provides().asSymbol()),\n+                                    mp.providesWith().stream().map(pw -> map(pw.asSymbol())).toList())).toList()));\n+                case RuntimeVisibleAnnotationsAttribute aa ->\n+                    clb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                case RuntimeInvisibleAnnotationsAttribute aa ->\n+                    clb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                case RuntimeVisibleTypeAnnotationsAttribute aa ->\n+                    clb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n+                    clb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                default ->\n+                    clb.with(cle);\n+            }\n+        }\n+\n+        @Override\n+        public FieldTransform asFieldTransform() {\n+            return (FieldBuilder fb, FieldElement fe) -> {\n+                switch (fe) {\n+                    case SignatureAttribute sa ->\n+                        fb.with(SignatureAttribute.of(mapSignature(sa.asTypeSignature())));\n+                    case RuntimeVisibleAnnotationsAttribute aa ->\n+                        fb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    case RuntimeInvisibleAnnotationsAttribute aa ->\n+                        fb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n+                        fb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n+                        fb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    default ->\n+                        fb.with(fe);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public MethodTransform asMethodTransform() {\n+            return (MethodBuilder mb, MethodElement me) -> {\n+                switch (me) {\n+                    case CodeModel com ->\n+                        mb.transformCode(com, asCodeTransform());\n+                    case ExceptionsAttribute ea ->\n+                        mb.with(ExceptionsAttribute.ofSymbols(ea.exceptions().stream().map(ce -> map(ce.asSymbol())).toList()));\n+                    case SignatureAttribute sa ->\n+                        mb.with(SignatureAttribute.of(mapMethodSignature(sa.asMethodSignature())));\n+                    case RuntimeVisibleAnnotationsAttribute aa ->\n+                        mb.with(RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    case RuntimeInvisibleAnnotationsAttribute aa ->\n+                        mb.with(RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations())));\n+                    case RuntimeVisibleParameterAnnotationsAttribute paa ->\n+                        mb.with(RuntimeVisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n+                    case RuntimeInvisibleParameterAnnotationsAttribute paa ->\n+                        mb.with(RuntimeInvisibleParameterAnnotationsAttribute.of(paa.parameterAnnotations().stream().map(this::mapAnnotations).toList()));\n+                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n+                        mb.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n+                        mb.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    default ->\n+                        mb.with(me);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public CodeTransform asCodeTransform() {\n+            return (CodeBuilder cob, CodeElement coe) -> {\n+                switch (coe) {\n+                    case FieldInstruction fai ->\n+                        cob.fieldInstruction(fai.opcode(), map(fai.owner().asSymbol()), fai.name().stringValue(), map(fai.typeSymbol()));\n+                    case InvokeInstruction ii ->\n+                        cob.invokeInstruction(ii.opcode(), map(ii.owner().asSymbol()), ii.name().stringValue(), mapMethodDesc(ii.typeSymbol()), ii.isInterface());\n+                    case InvokeDynamicInstruction idi ->\n+                        cob.invokeDynamicInstruction(DynamicCallSiteDesc.of(idi.bootstrapMethod(), idi.name().stringValue(), mapMethodDesc(idi.typeSymbol())));\n+                    case NewObjectInstruction c ->\n+                        cob.newObjectInstruction(map(c.className().asSymbol()));\n+                    case NewReferenceArrayInstruction c ->\n+                        cob.anewarray(map(c.componentType().asSymbol()));\n+                    case NewMultiArrayInstruction c ->\n+                        cob.multianewarray(map(c.arrayType().asSymbol()), c.dimensions());\n+                    case TypeCheckInstruction c ->\n+                        cob.typeCheckInstruction(c.opcode(), map(c.type().asSymbol()));\n+                    case ExceptionCatch c ->\n+                        cob.exceptionCatch(c.tryStart(), c.tryEnd(), c.handler(), c.catchType().map(d -> TemporaryConstantPool.INSTANCE.classEntry(map(d.asSymbol()))));\n+                    case LocalVariable c ->\n+                        cob.localVariable(c.slot(), c.name().stringValue(), map(c.typeSymbol()), c.startScope(), c.endScope());\n+                    case LocalVariableType c ->\n+                        cob.localVariableType(c.slot(), c.name().stringValue(), mapSignature(c.signatureSymbol()), c.startScope(), c.endScope());\n+                    case LoadConstantInstruction ldc ->\n+                        cob.constantInstruction(ldc.opcode(), mapConstantValue(ldc.constantValue()));\n+                    case RuntimeVisibleTypeAnnotationsAttribute aa ->\n+                        cob.with(RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n+                        cob.with(RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations())));\n+                    default ->\n+                        cob.with(coe);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public ClassDesc map(ClassDesc desc) {\n+            if (desc == null) return null;\n+            if (desc.isArray()) return map(desc.componentType()).arrayType();\n+            if (desc.isPrimitive()) return desc;\n+            return mapFunction.apply(desc);\n+        }\n+\n+        MethodTypeDesc mapMethodDesc(MethodTypeDesc desc) {\n+            return MethodTypeDesc.of(map(desc.returnType()), desc.parameterList().stream().map(this::map).toArray(ClassDesc[]::new));\n+        }\n+\n+        ClassSignature mapClassSignature(ClassSignature signature) {\n+            return ClassSignature.of(signature.typeParameters(),\n+                    mapSignature(signature.superclassSignature()),\n+                    signature.superinterfaceSignatures().stream().map(this::mapSignature).toArray(Signature.RefTypeSig[]::new));\n+        }\n+\n+        MethodSignature mapMethodSignature(MethodSignature signature) {\n+            return MethodSignature.of(signature.typeParameters(),\n+                    signature.throwableSignatures().stream().map(this::mapSignature).toList(),\n+                    mapSignature(signature.result()),\n+                    signature.arguments().stream().map(this::mapSignature).toArray(Signature[]::new));\n+        }\n+\n+        RecordComponentInfo mapRecordComponent(RecordComponentInfo component) {\n+            return RecordComponentInfo.of(component.name().stringValue(), map(component.descriptorSymbol()),\n+                    component.attributes().stream().map(atr ->\n+                        switch (atr) {\n+                            case SignatureAttribute sa ->\n+                                SignatureAttribute.of(mapSignature(sa.asTypeSignature()));\n+                            case RuntimeVisibleAnnotationsAttribute aa ->\n+                                RuntimeVisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n+                            case RuntimeInvisibleAnnotationsAttribute aa ->\n+                                RuntimeInvisibleAnnotationsAttribute.of(mapAnnotations(aa.annotations()));\n+                            case RuntimeVisibleTypeAnnotationsAttribute aa ->\n+                                RuntimeVisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n+                            case RuntimeInvisibleTypeAnnotationsAttribute aa ->\n+                                RuntimeInvisibleTypeAnnotationsAttribute.of(mapTypeAnnotations(aa.annotations()));\n+                            default -> atr;\n+                        }).toList());\n+        }\n+\n+        DirectMethodHandleDesc mapDirectMethodHandle(DirectMethodHandleDesc dmhd) {\n+            return switch (dmhd.kind()) {\n+                case GETTER, SETTER, STATIC_GETTER, STATIC_SETTER ->\n+                    MethodHandleDesc.ofField(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), map(ClassDesc.ofDescriptor(dmhd.lookupDescriptor())));\n+                default ->\n+                    MethodHandleDesc.ofMethod(dmhd.kind(), map(dmhd.owner()), dmhd.methodName(), mapMethodDesc(MethodTypeDesc.ofDescriptor(dmhd.lookupDescriptor())));\n+            };\n+        }\n+\n+        ConstantDesc mapConstantValue(ConstantDesc value) {\n+            return switch (value) {\n+                case ClassDesc cd ->\n+                    map(cd);\n+                case DynamicConstantDesc<?> dcd ->\n+                    mapDynamicConstant(dcd);\n+                case DirectMethodHandleDesc dmhd ->\n+                    mapDirectMethodHandle(dmhd);\n+                case MethodTypeDesc mtd ->\n+                    mapMethodDesc(mtd);\n+                default -> value;\n+            };\n+        }\n+\n+        DynamicConstantDesc<?> mapDynamicConstant(DynamicConstantDesc<?> dcd) {\n+            return DynamicConstantDesc.ofNamed(mapDirectMethodHandle(dcd.bootstrapMethod()),\n+                    dcd.constantName(),\n+                    map(dcd.constantType()),\n+                    dcd.bootstrapArgsList().stream().map(this::mapConstantValue).toArray(ConstantDesc[]::new));\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        <S extends Signature> S mapSignature(S signature) {\n+            return (S) switch (signature) {\n+                case Signature.ArrayTypeSig ats ->\n+                    Signature.ArrayTypeSig.of(mapSignature(ats.componentSignature()));\n+                case Signature.ClassTypeSig cts ->\n+                    Signature.ClassTypeSig.of(cts.outerType().map(this::mapSignature).orElse(null),\n+                            map(cts.classDesc()), cts.typeArgs().stream().map(this::mapSignature).toArray(Signature[]::new));\n+                default -> signature;\n+            };\n+        }\n+\n+        List<Annotation> mapAnnotations(List<Annotation> annotations) {\n+            return annotations.stream().map(this::mapAnnotation).toList();\n+        }\n+\n+        Annotation mapAnnotation(Annotation a) {\n+            return Annotation.of(map(a.classSymbol()), a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList());\n+        }\n+\n+        AnnotationValue mapAnnotationValue(AnnotationValue val) {\n+            return switch (val) {\n+                case AnnotationValue.OfAnnotation oa -> AnnotationValue.ofAnnotation(mapAnnotation(oa.annotation()));\n+                case AnnotationValue.OfArray oa -> AnnotationValue.ofArray(oa.values().stream().map(this::mapAnnotationValue).toList());\n+                case AnnotationValue.OfConstant oc -> oc;\n+                case AnnotationValue.OfClass oc -> AnnotationValue.ofClass(map(oc.classSymbol()));\n+                case AnnotationValue.OfEnum oe -> AnnotationValue.ofEnum(map(oe.classSymbol()), oe.constantName().stringValue());\n+            };\n+        }\n+\n+        List<TypeAnnotation> mapTypeAnnotations(List<TypeAnnotation> typeAnnotations) {\n+            return typeAnnotations.stream().map(a -> TypeAnnotation.of(a.targetInfo(), a.targetPath(), map(a.classSymbol()),\n+                    a.elements().stream().map(el -> AnnotationElement.of(el.name(), mapAnnotationValue(el.value()))).toList())).toList();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassRemapper.java","additions":401,"deletions":0,"binary":false,"changes":401,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.classfile.components;\n+\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.Arrays;\n+\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+\n+\/**\n+ * CodeLocalsShifter is a {@link jdk.internal.classfile.CodeTransform} shifting locals to\n+ * newly allocated positions to avoid conflicts during code injection.\n+ * Locals pointing to the receiver or to method arguments slots are never shifted.\n+ * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n+ *\/\n+public sealed interface CodeLocalsShifter extends CodeTransform {\n+\n+    \/**\n+     * Creates a new instance of CodeLocalsShifter\n+     * with fixed local slots calculated from provided method information\n+     * @param methodFlags flags of the method to construct CodeLocalsShifter for\n+     * @param methodDescriptor descriptor of the method to construct CodeLocalsShifter for\n+     * @return new instance of CodeLocalsShifter\n+     *\/\n+    static CodeLocalsShifter of(AccessFlags methodFlags, MethodTypeDesc methodDescriptor) {\n+        int fixed = methodFlags.has(AccessFlag.STATIC) ? 0 : 1;\n+        for (var param : methodDescriptor.parameterList())\n+            fixed += TypeKind.fromDescriptor(param.descriptorString()).slotSize();\n+        return new CodeLocalsShifterImpl(fixed);\n+    }\n+\n+    final static class CodeLocalsShifterImpl implements CodeLocalsShifter {\n+\n+        private int[] locals = new int[0];\n+        private final int fixed;\n+\n+        private CodeLocalsShifterImpl(int fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        @Override\n+        public void accept(CodeBuilder cob, CodeElement coe) {\n+            switch (coe) {\n+                case LoadInstruction li ->\n+                    cob.loadInstruction(\n+                            li.typeKind(),\n+                            shift(cob, li.slot(), li.typeKind()));\n+                case StoreInstruction si ->\n+                    cob.storeInstruction(\n+                            si.typeKind(),\n+                            shift(cob, si.slot(), si.typeKind()));\n+                case IncrementInstruction ii ->\n+                    cob.incrementInstruction(\n+                            shift(cob, ii.slot(), TypeKind.IntType),\n+                            ii.constant());\n+                case LocalVariable lv ->\n+                    cob.localVariable(\n+                            shift(cob, lv.slot(), TypeKind.fromDescriptor(lv.type().stringValue())),\n+                            lv.name(),\n+                            lv.type(),\n+                            lv.startScope(),\n+                            lv.endScope());\n+                case LocalVariableType lvt ->\n+                    cob.localVariableType(\n+                            shift(cob, lvt.slot(),\n+                                    (lvt.signatureSymbol() instanceof Signature.BaseTypeSig bsig)\n+                                            ? TypeKind.fromDescriptor(bsig.signatureString())\n+                                            : TypeKind.ReferenceType),\n+                            lvt.name(),\n+                            lvt.signature(),\n+                            lvt.startScope(),\n+                            lvt.endScope());\n+                default -> cob.with(coe);\n+            }\n+        }\n+\n+        private int shift(CodeBuilder cob, int slot, TypeKind tk) {\n+            if (tk == TypeKind.VoidType)  throw new IllegalArgumentException(\"Illegal local void type\");\n+            if (slot >= fixed) {\n+                int key = 2*slot - fixed + tk.slotSize() - 1;\n+                if (key >= locals.length) locals = Arrays.copyOf(locals, key + 20);\n+                slot = locals[key] - 1;\n+                if (slot < 0) {\n+                    slot = cob.allocateLocal(tk);\n+                    locals[key] = slot + 1;\n+                    if (tk.slotSize() == 2) locals[key - 1] = slot + 1;\n+                }\n+            }\n+            return slot;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeLocalsShifter.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.classfile.components;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n+import jdk.internal.classfile.instruction.SwitchCase;\n+import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.LabelTarget;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+\n+\/**\n+ * CodeRelabeler is a {@link jdk.internal.classfile.CodeTransform} replacing all occurences\n+ * of {@link jdk.internal.classfile.Label} in the transformed code with new instances.\n+ * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n+ * Relabeled code graph is identical to the original.\n+ * <p>\n+ * Primary purpose of CodeRelabeler is for repeated injections of the same code blocks.\n+ * Repeated injection of the same code block must be relabeled, so each instance of\n+ * {@link jdk.internal.classfile.Label} is bound in the target bytecode exactly once.\n+ *\/\n+public sealed interface CodeRelabeler extends CodeTransform {\n+\n+    \/**\n+     * Creates new instance of CodeRelabeler\n+     * @return new instance of CodeRelabeler\n+     *\/\n+    static CodeRelabeler of() {\n+        return of(new IdentityHashMap<>());\n+    }\n+\n+    \/**\n+     * Creates new instance of CodeRelabeler storing the label mapping into the provided map\n+     * @param map label map actively used for relabeling\n+     * @return new instance of CodeRelabeler\n+     *\/\n+    static CodeRelabeler of(Map<Label, Label> map) {\n+        return of((l, cob) -> map.computeIfAbsent(l, ll -> cob.newLabel()));\n+    }\n+\n+    \/**\n+     * Creates new instance of CodeRelabeler using provided {@link java.util.function.BiFunction}\n+     * to re-label the code.\n+     * @param mapFunction\n+     * @return\n+     *\/\n+    static CodeRelabeler of(BiFunction<Label, CodeBuilder, Label> mapFunction) {\n+        return new CodeRelabelerImpl(mapFunction);\n+    }\n+\n+    \/**\n+     * Access method to internal re-labeling function.\n+     * @param label source label\n+     * @param codeBuilder builder to create new labels\n+     * @return target label\n+     *\/\n+    Label relabel(Label label, CodeBuilder codeBuilder);\n+\n+    record CodeRelabelerImpl(BiFunction<Label, CodeBuilder, Label> mapFunction) implements  CodeRelabeler {\n+\n+        @Override\n+        public Label relabel(Label label, CodeBuilder cob) {\n+            return mapFunction.apply(label, cob);\n+        }\n+\n+        @Override\n+        public void accept(CodeBuilder cob, CodeElement coe) {\n+            switch (coe) {\n+                case BranchInstruction bi ->\n+                    cob.branchInstruction(\n+                            bi.opcode(),\n+                            relabel(bi.target(), cob));\n+                case LookupSwitchInstruction lsi ->\n+                    cob.lookupSwitchInstruction(\n+                            relabel(lsi.defaultTarget(), cob),\n+                            lsi.cases().stream().map(c ->\n+                                    SwitchCase.of(\n+                                            c.caseValue(),\n+                                            relabel(c.target(), cob))).toList());\n+                case TableSwitchInstruction tsi ->\n+                    cob.tableSwitchInstruction(\n+                            tsi.lowValue(),\n+                            tsi.highValue(),\n+                            relabel(tsi.defaultTarget(), cob),\n+                            tsi.cases().stream().map(c ->\n+                                    SwitchCase.of(\n+                                            c.caseValue(),\n+                                            relabel(c.target(), cob))).toList());\n+                case LabelTarget lt ->\n+                    cob.labelBinding(\n+                            relabel(lt.label(), cob));\n+                case ExceptionCatch ec ->\n+                    cob.exceptionCatch(\n+                            relabel(ec.tryStart(), cob),\n+                            relabel(ec.tryEnd(), cob),\n+                            relabel(ec.handler(), cob),\n+                            ec.catchType());\n+                case LocalVariable lv ->\n+                    cob.localVariable(\n+                            lv.slot(),\n+                            lv.name().stringValue(),\n+                            lv.typeSymbol(),\n+                            relabel(lv.startScope(), cob),\n+                            relabel(lv.endScope(), cob));\n+                case LocalVariableType lvt ->\n+                    cob.localVariableType(\n+                            lvt.slot(),\n+                            lvt.name().stringValue(),\n+                            lvt.signatureSymbol(),\n+                            relabel(lvt.startScope(), cob),\n+                            relabel(lvt.endScope(), cob));\n+                default ->\n+                    cob.with(coe);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeRelabeler.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package jdk.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -34,7 +34,7 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.*;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.*;\n@@ -43,1 +43,1 @@\n- * CodeStackTracker is a {@link jdk.classfile.CodeTransform} synchronously tracking\n+ * CodeStackTracker is a {@link jdk.internal.classfile.CodeTransform} synchronously tracking\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeStackTracker.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/CodeStackTracker.java","status":"renamed"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Specific components, transformations, and tools built on top of the Classfile API<\/h2>\n+ *\n+ * The {@code jdk.internal.classfile.components} package contains specific transformation components\n+ * and utility classes helping to compose very complex tasks with minimal effort.\n+ *\n+ * <h3>{@link ClassPrinter}<\/h3>\n+ * <p>\n+ * {@link ClassPrinter} is a helper class providing seamless export of a {@link jdk.internal.classfile.ClassModel},\n+ * {@link jdk.internal.classfile.FieldModel}, {@link jdk.internal.classfile.MethodModel}, or {@link jdk.internal.classfile.CodeModel}\n+ * into human-readable structured text in JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n+ * <p>\n+ * Primary purpose of {@link ClassPrinter} is to provide human-readable class info for debugging,\n+ * exception handling and logging purposes. The printed class also conforms to a standard format\n+ * to support automated offline processing.\n+ * <p>\n+ * The most frequent use case is to simply print a class:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n+ * <p>\n+ * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n+ * <p>\n+ * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n+ *\n+ * <h3>{@link ClassRemapper}<\/h3>\n+ * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link jdk.internal.classfile.FieldTransform},\n+ * {@link jdk.internal.classfile.MethodTransform} and {@link jdk.internal.classfile.CodeTransform}\n+ * deeply re-mapping all class references in any form, according to given map or map function.\n+ * <p>\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors and signatures,\n+ * all attributes referencing classes in any form (including all types of annotations),\n+ * and to all instructions referencing to classes.\n+ * <p>\n+ * Primitive types and arrays are never subjects of mapping and are not allowed targets of mapping.\n+ * <p>\n+ * Arrays of reference types are always decomposed, mapped as the base reference types and composed back to arrays.\n+ * <p>\n+ * Single class remappigng example:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"singleClassRemap\"}\n+ * <p>\n+ * Remapping of all classes under specific package:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"allPackageRemap\"}\n+ *\n+ * <h3>{@link CodeLocalsShifter}<\/h3>\n+ * {@link CodeLocalsShifter} is a {@link jdk.internal.classfile.CodeTransform} shifting locals to\n+ * newly allocated positions to avoid conflicts during code injection.\n+ * Locals pointing to the receiver or to method arguments slots are never shifted.\n+ * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n+ * <p>\n+ * Sample of code transformation shifting all locals in all methods:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeLocalsShifting\"}\n+ *\n+ * <h3>{@link CodeRelabeler}<\/h3>\n+ * {@link CodeRelabeler} is a {@link jdk.internal.classfile.CodeTransform} replacing all occurences\n+ * of {@link jdk.internal.classfile.Label} in the transformed code with new instances.\n+ * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n+ * Relabeled code graph is identical to the original.\n+ * <p>\n+ * Primary purpose of {@link CodeRelabeler} is for repeated injections of the same code blocks.\n+ * Repeated injection of the same code block must be relabeled, so each instance of\n+ * {@link jdk.internal.classfile.Label} is bound in the target bytecode exactly once.\n+ * <p>\n+ * Sample transformation relabeling all methods:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n+ *\n+ * <h3>Class Instrumentation Sample<\/h3>\n+ * Following snippet is sample composition of {@link ClassRemapper}, {@link CodeLocalsShifter}\n+ * and {@link CodeRelabeler} into fully functional class instrumenting transformation:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n+ *\/\n+package jdk.internal.classfile.components;\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/package-info.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -33,8 +33,8 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -42,7 +42,7 @@\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.components.ClassPrinter;\n-import jdk.classfile.components.ClassRemapper;\n-import jdk.classfile.components.CodeLocalsShifter;\n-import jdk.classfile.components.CodeRelabeler;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":15,"deletions":15,"binary":false,"changes":30,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/snippet-files\/PackageSnippets.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/AnnotationConstantValueEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -32,3 +32,3 @@\n-import jdk.classfile.impl.ConcreteEntry;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ClassEntry.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ClassEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.TypeKind;\n+import jdk.internal.classfile.TypeKind;\n@@ -32,1 +32,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantDynamicEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ConstantDynamicEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.constantpool;\n+\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.impl.ClassReaderImpl;\n+\n+import static jdk.internal.classfile.Classfile.TAG_CLASS;\n+import static jdk.internal.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_DOUBLE;\n+import static jdk.internal.classfile.Classfile.TAG_FIELDREF;\n+import static jdk.internal.classfile.Classfile.TAG_FLOAT;\n+import static jdk.internal.classfile.Classfile.TAG_INTEGER;\n+import static jdk.internal.classfile.Classfile.TAG_INTERFACEMETHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_INVOKEDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_LONG;\n+import static jdk.internal.classfile.Classfile.TAG_METHODHANDLE;\n+import static jdk.internal.classfile.Classfile.TAG_METHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_MODULE;\n+import static jdk.internal.classfile.Classfile.TAG_NAMEANDTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_PACKAGE;\n+import static jdk.internal.classfile.Classfile.TAG_STRING;\n+import static jdk.internal.classfile.Classfile.TAG_UTF8;\n+\n+\/**\n+ * Provides read access to the constant pool and bootstrap method table of a\n+ * classfile.\n+ *\/\n+public sealed interface ConstantPool\n+        permits ClassReader, ConstantPoolBuilder {\n+\n+    \/**\n+     * {@return the entry at the specified index}\n+     *\n+     * @param index the index within the pool of the desired entry\n+     *\/\n+    PoolEntry entryByIndex(int index);\n+\n+    \/**\n+     * {@return the number of entries in the constant pool}\n+     *\/\n+    int entryCount();\n+\n+    \/**\n+     * {@return the {@link BootstrapMethodEntry} at the specified index within\n+     * the bootstrap method table}\n+     *\n+     * @param index the index within the bootstrap method table of the desired\n+     *              entry\n+     *\/\n+    BootstrapMethodEntry bootstrapMethodEntry(int index);\n+\n+    \/**\n+     * {@return the number of entries in the bootstrap method table}\n+     *\/\n+    int bootstrapMethodCount();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPool.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -36,14 +36,14 @@\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.impl.ClassReaderImpl;\n-import jdk.classfile.impl.Options;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n-import jdk.classfile.WritableElement;\n-import jdk.classfile.impl.SplitConstantPool;\n-import jdk.classfile.impl.TemporaryConstantPool;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.impl.ClassReaderImpl;\n+import jdk.internal.classfile.impl.Options;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.WritableElement;\n+import jdk.internal.classfile.impl.SplitConstantPool;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":15,"deletions":15,"binary":false,"changes":30,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ConstantPoolBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantValueEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ConstantValueEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DoubleEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/DoubleEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DynamicConstantPoolEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/DynamicConstantPoolEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FieldRefEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/FieldRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FloatEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/FloatEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/IntegerEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/IntegerEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InterfaceMethodRefEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/InterfaceMethodRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InvokeDynamicEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/InvokeDynamicEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -28,1 +28,1 @@\n-import jdk.classfile.TypeKind;\n+import jdk.internal.classfile.TypeKind;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LoadableConstantEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/LoadableConstantEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LongEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/LongEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MemberRefEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/MemberRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -29,1 +29,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodHandleEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/MethodHandleEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodRefEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/MethodRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -29,1 +29,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodTypeEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/MethodTypeEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.impl.ConcreteEntry;\n-import jdk.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ModuleEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/ModuleEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/NameAndTypeEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/NameAndTypeEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.impl.ConcreteEntry;\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PackageEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/PackageEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.WritableElement;\n+import jdk.internal.classfile.WritableElement;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PoolEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/PoolEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/StringEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/StringEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.constantpool;\n+package jdk.internal.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.impl.ConcreteEntry;\n+import jdk.internal.classfile.impl.ConcreteEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/Utf8Entry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/constantpool\/Utf8Entry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,4 +29,4 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributeMapper;\n-import jdk.classfile.AttributedElement;\n-import jdk.classfile.BufWriter;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.AttributedElement;\n+import jdk.internal.classfile.BufWriter;\n@@ -34,1 +34,1 @@\n-import static jdk.classfile.Classfile.JAVA_1_VERSION;\n+import static jdk.internal.classfile.Classfile.JAVA_1_VERSION;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractAttributeMapper.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,5 +27,5 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Label;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractBoundLocalVariable.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,2 +29,2 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractDirectBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,36 +31,36 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.instruction.SwitchCase;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.instruction.ArrayLoadInstruction;\n-import jdk.classfile.instruction.ArrayStoreInstruction;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.ConvertInstruction;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.LookupSwitchInstruction;\n-import jdk.classfile.instruction.MonitorInstruction;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewObjectInstruction;\n-import jdk.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.classfile.instruction.NopInstruction;\n-import jdk.classfile.instruction.OperatorInstruction;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StackInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.TableSwitchInstruction;\n-import jdk.classfile.instruction.ThrowInstruction;\n-import jdk.classfile.instruction.TypeCheckInstruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.instruction.SwitchCase;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n+import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.ConvertInstruction;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n+import jdk.internal.classfile.instruction.MonitorInstruction;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewObjectInstruction;\n+import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.instruction.NopInstruction;\n+import jdk.internal.classfile.instruction.OperatorInstruction;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StackInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import jdk.internal.classfile.instruction.ThrowInstruction;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":37,"deletions":37,"binary":false,"changes":74,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractInstruction.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,9 +29,9 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.instruction.CharacterRange;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.instruction.CharacterRange;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractPseudoInstruction.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,4 +31,4 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributedElement;\n-import jdk.classfile.ClassfileElement;\n-import jdk.classfile.CompoundElement;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributedElement;\n+import jdk.internal.classfile.ClassfileElement;\n+import jdk.internal.classfile.CompoundElement;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AbstractUnboundModel.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -28,1 +28,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AccessFlagsImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AccessFlagsImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AnnotationImpl.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -28,8 +28,8 @@\n-import jdk.classfile.Annotation;\n-import jdk.classfile.AnnotationElement;\n-import jdk.classfile.AnnotationValue;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.constantpool.*;\n-import jdk.classfile.TypeAnnotation;\n-import static jdk.classfile.Classfile.*;\n-import static jdk.classfile.TypeAnnotation.TargetInfo.*;\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.AnnotationElement;\n+import jdk.internal.classfile.AnnotationValue;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.TypeAnnotation;\n+import static jdk.internal.classfile.Classfile.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetInfo.*;\n@@ -38,2 +38,2 @@\n-import jdk.classfile.Label;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AnnotationReader.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,3 +31,3 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.AttributeMapper;\n-import jdk.classfile.BufWriter;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.BufWriter;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/AttributeHolder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,6 +27,6 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.LabelTarget;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.LabelTarget;\n@@ -35,1 +35,1 @@\n-import jdk.classfile.Instruction;\n+import jdk.internal.classfile.Instruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BlockCodeBuilderImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BlockCodeBuilderImpl.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -34,10 +34,10 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantValueEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BoundAttribute.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -28,4 +28,4 @@\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.instruction.CharacterRange;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.instruction.CharacterRange;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundCharacterRange.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BoundCharacterRange.java","status":"renamed"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.impl;\n+\n+import java.lang.constant.ClassDesc;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+\n+\/**\n+ * LocalVariableImpl\n+ *\/\n+public final class BoundLocalVariable\n+        extends AbstractBoundLocalVariable\n+        implements LocalVariableInfo,\n+                   LocalVariable {\n+\n+    public BoundLocalVariable(CodeImpl code, int offset) {\n+        super(code, offset);\n+    }\n+\n+    @Override\n+    public Utf8Entry type() {\n+        return secondaryEntry();\n+    }\n+\n+    @Override\n+    public ClassDesc typeSymbol() {\n+        return ClassDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+    @Override\n+    public void writeTo(DirectCodeBuilder writer) {\n+        writer.addLocalVariable(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"LocalVariable[name=%s, slot=%d, type=%s]\", name().stringValue(), slot(), type().stringValue());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariable.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n+\n+\/**\n+ * LocalVariableTypeImpl\n+ *\/\n+public final class BoundLocalVariableType\n+        extends AbstractBoundLocalVariable\n+        implements LocalVariableTypeInfo,\n+                   LocalVariableType {\n+\n+    public BoundLocalVariableType(CodeImpl code, int offset) {\n+        super(code, offset);\n+    }\n+\n+    @Override\n+    public Utf8Entry signature() {\n+        return secondaryEntry();\n+    }\n+\n+    @Override\n+    public void writeTo(DirectCodeBuilder writer) {\n+        writer.addLocalVariableType(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"LocalVariableType[name=%s, slot=%d, signature=%s]\", name().stringValue(), slot(), signature().stringValue());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariableType.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,4 +29,4 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundRecordComponentInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BoundRecordComponentInfo.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,5 +31,5 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.WritableElement;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.WritableElement;\n@@ -39,2 +39,2 @@\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BufWriterImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,12 +27,12 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.Label;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BufferedCodeBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -32,3 +32,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BufferedFieldBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -32,1 +32,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -34,11 +34,11 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BufferedMethodBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -39,10 +39,10 @@\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/BytecodeHelpers.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,3 +27,3 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CatchBuilderImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/CatchBuilderImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -30,3 +30,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ChainedClassBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,4 +27,4 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.Label;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.Label;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedCodeBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ChainedCodeBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -30,4 +30,4 @@\n-import jdk.classfile.FieldBuilder;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ChainedFieldBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+\n+\/**\n+ * ChainedMethodBuilder\n+ *\/\n+public final class ChainedMethodBuilder implements MethodBuilder {\n+    final MethodBuilder downstream;\n+    final TerminalMethodBuilder terminal;\n+    final Consumer<MethodElement> consumer;\n+\n+    public ChainedMethodBuilder(MethodBuilder downstream,\n+                                Consumer<MethodElement> consumer) {\n+        this.downstream = downstream;\n+        this.consumer = consumer;\n+        MethodBuilder b = downstream;\n+        while (b instanceof ChainedMethodBuilder cb)\n+            b = cb.downstream;\n+        terminal = (TerminalMethodBuilder) b;\n+    }\n+\n+    @Override\n+    public MethodBuilder with(MethodElement element) {\n+        consumer.accept(element);\n+        return this;\n+    }\n+\n+    @Override\n+    public MethodBuilder withCode(Consumer<? super CodeBuilder> handler) {\n+        return downstream.with(terminal.bufferedCodeBuilder(null)\n+                                       .run(handler)\n+                                       .toModel());\n+    }\n+\n+    @Override\n+    public MethodBuilder transformCode(CodeModel code, CodeTransform transform) {\n+        BufferedCodeBuilder builder = terminal.bufferedCodeBuilder(code);\n+        builder.transform(code, transform);\n+        return downstream.with(builder.toModel());\n+    }\n+\n+    @Override\n+    public ConstantPoolBuilder constantPool() {\n+        return terminal.constantPool();\n+    }\n+\n+    @Override\n+    public Optional<MethodModel> original() {\n+        return terminal.original();\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -37,1 +37,1 @@\n-import jdk.classfile.ClassHierarchyResolver;\n+import jdk.internal.classfile.ClassHierarchyResolver;\n@@ -64,1 +64,1 @@\n-            logger = System.getLogger(\"jdk.classfile\");\n+            logger = System.getLogger(\"jdk.internal.classfile\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ClassHierarchyImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassfileVersion;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.Interfaces;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Superclass;\n+import jdk.internal.access.SharedSecrets;\n+\n+public final class ClassImpl\n+        extends AbstractElement\n+        implements ClassModel {\n+\n+    final ClassReader reader;\n+    private final int attributesPos;\n+    private final List<MethodModel> methods;\n+    private final List<FieldModel> fields;\n+    private List<Attribute<?>> attributes;\n+    private List<ClassEntry> interfaces;\n+\n+    public ClassImpl(byte[] cfbytes,\n+                     Collection<Classfile.Option<?>> options) {\n+        this.reader = new ClassReaderImpl(cfbytes, options);\n+        ClassReaderImpl reader = (ClassReaderImpl) this.reader;\n+        int p = reader.interfacesPos;\n+        int icnt = reader.readU2(p);\n+        p += 2 + icnt * 2;\n+        int fcnt = reader.readU2(p);\n+        FieldImpl[] fields = new FieldImpl[fcnt];\n+        p += 2;\n+        for (int i = 0; i < fcnt; ++i) {\n+            int startPos = p;\n+            int attrStart = p + 6;\n+            p = reader.skipAttributeHolder(attrStart);\n+            fields[i] = new FieldImpl(reader, startPos, p, attrStart);\n+        }\n+        this.fields = List.of(fields);\n+        int mcnt = reader.readU2(p);\n+        MethodImpl[] methods = new MethodImpl[mcnt];\n+        p += 2;\n+        for (int i = 0; i < mcnt; ++i) {\n+            int startPos = p;\n+            int attrStart = p + 6;\n+            p = reader.skipAttributeHolder(attrStart);\n+            methods[i] = new MethodImpl(reader, startPos, p, attrStart);\n+        }\n+        this.methods = List.of(methods);\n+        this.attributesPos = p;\n+        reader.setContainedClass(this);\n+    }\n+\n+    @Override\n+    public AccessFlags flags() {\n+        return AccessFlags.ofClass(reader.flags());\n+    }\n+\n+    @Override\n+    public int majorVersion() {\n+        return reader.readU2(6);\n+    }\n+\n+    @Override\n+    public int minorVersion() {\n+        return reader.readU2(4);\n+    }\n+\n+    @Override\n+    public ConstantPool constantPool() {\n+        return reader;\n+    }\n+\n+    @Override\n+    public ClassEntry thisClass() {\n+        return reader.thisClassEntry();\n+    }\n+\n+    @Override\n+    public Optional<ClassEntry> superclass() {\n+        return reader.superclassEntry();\n+    }\n+\n+    @Override\n+    public List<ClassEntry> interfaces() {\n+        if (interfaces == null) {\n+            int pos = reader.thisClassPos() + 4;\n+            int cnt = reader.readU2(pos);\n+            pos += 2;\n+            var arr = new Object[cnt];\n+            for (int i = 0; i < cnt; ++i) {\n+                arr[i] = reader.readClassEntry(pos);\n+                pos += 2;\n+            }\n+            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(arr);\n+        }\n+        return interfaces;\n+    }\n+\n+    @Override\n+    public List<Attribute<?>> attributes() {\n+        if (attributes == null) {\n+            attributes = BoundAttribute.readAttributes(this, reader, attributesPos, reader.customAttributes());\n+        }\n+        return attributes;\n+    }\n+\n+    \/\/ ClassModel\n+\n+    @Override\n+    public Kind attributedElementKind() {\n+        return Kind.CLASS;\n+    }\n+\n+    @Override\n+    public void forEachElement(Consumer<ClassElement> consumer) {\n+        consumer.accept(flags());\n+        consumer.accept(ClassfileVersion.of(majorVersion(), minorVersion()));\n+        superclass().ifPresent(new Consumer<ClassEntry>() {\n+            @Override\n+            public void accept(ClassEntry entry) {\n+                consumer.accept(Superclass.of(entry));\n+            }\n+        });\n+        consumer.accept(Interfaces.of(interfaces()));\n+        fields().forEach(consumer);\n+        methods().forEach(consumer);\n+        for (Attribute<?> attr : attributes()) {\n+            if (attr instanceof ClassElement e)\n+                consumer.accept(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] transform(ClassTransform transform) {\n+        ConstantPoolBuilder constantPool = ConstantPoolBuilder.of(this);\n+        return Classfile.build(thisClass(), constantPool,\n+                               new Consumer<ClassBuilder>() {\n+                                   @Override\n+                                   public void accept(ClassBuilder builder) {\n+                                       ((DirectClassBuilder) builder).setOriginal(ClassImpl.this);\n+                                       ((DirectClassBuilder) builder).setSizeHint(reader.classfileLength());\n+                                       builder.transform(ClassImpl.this, transform);\n+                                   }\n+                               });\n+    }\n+\n+    @Override\n+    public List<FieldModel> fields() {\n+        return fields;\n+    }\n+\n+    @Override\n+    public List<MethodModel> methods() {\n+        return methods;\n+    }\n+\n+    @Override\n+    public boolean isModuleInfo() {\n+        AccessFlags flags = flags();\n+        \/\/ move to where?\n+        return flags.has(AccessFlag.MODULE)\n+               && majorVersion() >= Classfile.JAVA_9_VERSION\n+               && thisClass().asInternalName().equals(\"module-info\")\n+               && (superclass().isEmpty())\n+               && interfaces().isEmpty()\n+               && fields().isEmpty()\n+               && methods().isEmpty()\n+               && verifyModuleAttributes();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ClassModel[thisClass=%s, flags=%d]\", thisClass().name().stringValue(), flags().flagsMask());\n+    }\n+\n+    private boolean verifyModuleAttributes() {\n+        if (findAttribute(Attributes.MODULE).isEmpty())\n+            return false;\n+\n+        Set<AttributeMapper<?>> found = attributes().stream()\n+                                                    .map(Attribute::attributeMapper)\n+                                                    .collect(Collectors.toSet());\n+\n+        found.removeAll(allowedModuleAttributes);\n+        found.retainAll(Attributes.PREDEFINED_ATTRIBUTES.values());\n+        return found.isEmpty();\n+    }\n+\n+    private static final Set<AttributeMapper<?>> allowedModuleAttributes\n+            = Set.of(Attributes.MODULE,\n+                     Attributes.MODULE_PACKAGES,\n+                     Attributes.MODULE_MAIN_CLASS,\n+                     Attributes.INNER_CLASSES,\n+                     Attributes.SOURCE_FILE,\n+                     Attributes.SOURCE_DEBUG_EXTENSION,\n+                     Attributes.RUNTIME_VISIBLE_ANNOTATIONS,\n+                     Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -44,1 +44,1 @@\n-import jdk.classfile.Annotation;\n+import jdk.internal.classfile.Annotation;\n@@ -46,14 +46,14 @@\n-import jdk.classfile.AnnotationElement;\n-import jdk.classfile.AnnotationValue;\n-import jdk.classfile.AnnotationValue.*;\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.components.ClassPrinter.*;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.TypeAnnotation;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.attribute.StackMapTableAttribute.*;\n-import jdk.classfile.constantpool.*;\n-import jdk.classfile.instruction.*;\n+import jdk.internal.classfile.AnnotationElement;\n+import jdk.internal.classfile.AnnotationValue;\n+import jdk.internal.classfile.AnnotationValue.*;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.components.ClassPrinter.*;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.TypeAnnotation;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.*;\n@@ -61,4 +61,4 @@\n-import static jdk.classfile.Classfile.*;\n-import jdk.classfile.CompoundElement;\n-import jdk.classfile.FieldModel;\n-import static jdk.classfile.impl.ClassPrinterImpl.Style.*;\n+import static jdk.internal.classfile.Classfile.*;\n+import jdk.internal.classfile.CompoundElement;\n+import jdk.internal.classfile.FieldModel;\n+import static jdk.internal.classfile.impl.ClassPrinterImpl.Style.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":20,"deletions":20,"binary":false,"changes":40,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ClassPrinterImpl.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -35,10 +35,10 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -46,17 +46,17 @@\n-import static jdk.classfile.Classfile.TAG_CLASS;\n-import static jdk.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_DOUBLE;\n-import static jdk.classfile.Classfile.TAG_FIELDREF;\n-import static jdk.classfile.Classfile.TAG_FLOAT;\n-import static jdk.classfile.Classfile.TAG_INTEGER;\n-import static jdk.classfile.Classfile.TAG_INTERFACEMETHODREF;\n-import static jdk.classfile.Classfile.TAG_INVOKEDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_LONG;\n-import static jdk.classfile.Classfile.TAG_METHODHANDLE;\n-import static jdk.classfile.Classfile.TAG_METHODREF;\n-import static jdk.classfile.Classfile.TAG_METHODTYPE;\n-import static jdk.classfile.Classfile.TAG_MODULE;\n-import static jdk.classfile.Classfile.TAG_NAMEANDTYPE;\n-import static jdk.classfile.Classfile.TAG_PACKAGE;\n-import static jdk.classfile.Classfile.TAG_STRING;\n-import static jdk.classfile.Classfile.TAG_UTF8;\n+import static jdk.internal.classfile.Classfile.TAG_CLASS;\n+import static jdk.internal.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_DOUBLE;\n+import static jdk.internal.classfile.Classfile.TAG_FIELDREF;\n+import static jdk.internal.classfile.Classfile.TAG_FLOAT;\n+import static jdk.internal.classfile.Classfile.TAG_INTEGER;\n+import static jdk.internal.classfile.Classfile.TAG_INTERFACEMETHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_INVOKEDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_LONG;\n+import static jdk.internal.classfile.Classfile.TAG_METHODHANDLE;\n+import static jdk.internal.classfile.Classfile.TAG_METHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_MODULE;\n+import static jdk.internal.classfile.Classfile.TAG_NAMEANDTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_PACKAGE;\n+import static jdk.internal.classfile.Classfile.TAG_STRING;\n+import static jdk.internal.classfile.Classfile.TAG_UTF8;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":28,"deletions":28,"binary":false,"changes":56,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ClassReaderImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.ClassfileVersion;\n+import jdk.internal.classfile.ClassfileVersion;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassfileVersionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ClassfileVersionImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,508 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+\n+import static jdk.internal.classfile.Classfile.ALOAD;\n+import static jdk.internal.classfile.Classfile.ANEWARRAY;\n+import static jdk.internal.classfile.Classfile.ASTORE;\n+import static jdk.internal.classfile.Classfile.BIPUSH;\n+import static jdk.internal.classfile.Classfile.CHECKCAST;\n+import static jdk.internal.classfile.Classfile.DLOAD;\n+import static jdk.internal.classfile.Classfile.DSTORE;\n+import static jdk.internal.classfile.Classfile.FLOAD;\n+import static jdk.internal.classfile.Classfile.FSTORE;\n+import static jdk.internal.classfile.Classfile.GETFIELD;\n+import static jdk.internal.classfile.Classfile.GETSTATIC;\n+import static jdk.internal.classfile.Classfile.GOTO;\n+import static jdk.internal.classfile.Classfile.GOTO_W;\n+import static jdk.internal.classfile.Classfile.IFEQ;\n+import static jdk.internal.classfile.Classfile.IFGE;\n+import static jdk.internal.classfile.Classfile.IFGT;\n+import static jdk.internal.classfile.Classfile.IFLE;\n+import static jdk.internal.classfile.Classfile.IFLT;\n+import static jdk.internal.classfile.Classfile.IFNE;\n+import static jdk.internal.classfile.Classfile.IFNONNULL;\n+import static jdk.internal.classfile.Classfile.IFNULL;\n+import static jdk.internal.classfile.Classfile.IF_ACMPEQ;\n+import static jdk.internal.classfile.Classfile.IF_ACMPNE;\n+import static jdk.internal.classfile.Classfile.IF_ICMPEQ;\n+import static jdk.internal.classfile.Classfile.IF_ICMPGE;\n+import static jdk.internal.classfile.Classfile.IF_ICMPGT;\n+import static jdk.internal.classfile.Classfile.IF_ICMPLE;\n+import static jdk.internal.classfile.Classfile.IF_ICMPLT;\n+import static jdk.internal.classfile.Classfile.IF_ICMPNE;\n+import static jdk.internal.classfile.Classfile.IINC;\n+import static jdk.internal.classfile.Classfile.ILOAD;\n+import static jdk.internal.classfile.Classfile.INSTANCEOF;\n+import static jdk.internal.classfile.Classfile.INVOKEDYNAMIC;\n+import static jdk.internal.classfile.Classfile.INVOKEINTERFACE;\n+import static jdk.internal.classfile.Classfile.INVOKESPECIAL;\n+import static jdk.internal.classfile.Classfile.INVOKESTATIC;\n+import static jdk.internal.classfile.Classfile.INVOKEVIRTUAL;\n+import static jdk.internal.classfile.Classfile.ISTORE;\n+import static jdk.internal.classfile.Classfile.JSR;\n+import static jdk.internal.classfile.Classfile.JSR_W;\n+import static jdk.internal.classfile.Classfile.LDC;\n+import static jdk.internal.classfile.Classfile.LDC2_W;\n+import static jdk.internal.classfile.Classfile.LDC_W;\n+import static jdk.internal.classfile.Classfile.LLOAD;\n+import static jdk.internal.classfile.Classfile.LOOKUPSWITCH;\n+import static jdk.internal.classfile.Classfile.LSTORE;\n+import static jdk.internal.classfile.Classfile.MULTIANEWARRAY;\n+import static jdk.internal.classfile.Classfile.NEW;\n+import static jdk.internal.classfile.Classfile.NEWARRAY;\n+import static jdk.internal.classfile.Classfile.PUTFIELD;\n+import static jdk.internal.classfile.Classfile.PUTSTATIC;\n+import static jdk.internal.classfile.Classfile.RET;\n+import static jdk.internal.classfile.Classfile.SIPUSH;\n+import static jdk.internal.classfile.Classfile.TABLESWITCH;\n+import static jdk.internal.classfile.Classfile.WIDE;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+\n+\/**\n+ * CodeAttr\n+ *\/\n+public final class CodeImpl\n+        extends BoundAttribute.BoundCodeAttribute\n+        implements CodeModel, LabelContext {\n+    List<ExceptionCatch> exceptionTable;\n+    List<Attribute<?>> attributes;\n+\n+    \/\/ Inflated for iteration\n+    LabelImpl[] labels;\n+    int[] lineNumbers;\n+    boolean inflated;\n+\n+    public CodeImpl(AttributedElement enclosing,\n+                    ClassReader reader,\n+                    AttributeMapper<CodeAttribute> mapper,\n+                    int payloadStart) {\n+        super(enclosing, reader, mapper, payloadStart);\n+    }\n+\n+    \/\/ LabelContext\n+\n+    @Override\n+    public Label newLabel() {\n+        throw new UnsupportedOperationException(\"CodeAttribute only supports fixed labels\");\n+    }\n+\n+    @Override\n+    public void setLabelTarget(Label label, int bci) {\n+        throw new UnsupportedOperationException(\"CodeAttribute only supports fixed labels\");\n+    }\n+\n+    @Override\n+    public Label getLabel(int bci) {\n+        if (labels == null)\n+            labels = new LabelImpl[codeLength + 1];\n+        LabelImpl l = labels[bci];\n+        if (l == null)\n+            l = labels[bci] = new LabelImpl(this, bci);\n+        return l;\n+    }\n+\n+    @Override\n+    public int labelToBci(Label label) {\n+        LabelImpl lab = (LabelImpl) label;\n+        if (lab.labelContext() != this)\n+            throw new IllegalArgumentException(String.format(\"Illegal label reuse; context=%s, label=%s\",\n+                                                             this, lab.labelContext()));\n+        return lab.getContextInfo();\n+    }\n+\n+    private void inflateMetadata() {\n+        if (!inflated) {\n+            if (labels == null)\n+                labels = new LabelImpl[codeLength + 1];\n+            if (classReader.optionValue(Classfile.Option.Key.PROCESS_LINE_NUMBERS))\n+                inflateLineNumbers();\n+            inflateJumpTargets();\n+            inflateTypeAnnotations();\n+            inflated = true;\n+        }\n+    }\n+\n+    \/\/ CodeAttribute\n+\n+    @Override\n+    public List<Attribute<?>> attributes() {\n+        if (attributes == null) {\n+            attributes = BoundAttribute.readAttributes(this, classReader, attributePos, classReader.customAttributes());\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public void writeTo(BufWriter buf) {\n+        if (buf.canWriteDirect(classReader)) {\n+            super.writeTo(buf);\n+        }\n+        else {\n+            DirectCodeBuilder.build((MethodInfo) enclosingMethod,\n+                                    new Consumer<CodeBuilder>() {\n+                                        @Override\n+                                        public void accept(CodeBuilder cb) {\n+                                            forEachElement(cb);\n+                                        }\n+                                    },\n+                                    buf.constantPool(),\n+                                    null).writeTo(buf);\n+        }\n+    }\n+\n+    \/\/ CodeModel\n+\n+    @Override\n+    public Optional<MethodModel> parent() {\n+        return Optional.of(enclosingMethod);\n+    }\n+\n+    @Override\n+    public Kind attributedElementKind() {\n+        return Kind.CODE_ATTRIBUTE;\n+    }\n+\n+    @Override\n+    public void forEachElement(Consumer<CodeElement> consumer) {\n+        inflateMetadata();\n+        boolean doLineNumbers = (lineNumbers != null);\n+        generateCatchTargets(consumer);\n+        if (classReader.optionValue(Classfile.Option.Key.PROCESS_DEBUG))\n+            generateDebugElements(consumer);\n+        for (int pos=codeStart; pos<codeEnd; ) {\n+            if (labels[pos - codeStart] != null)\n+                consumer.accept(labels[pos - codeStart]);\n+            if (doLineNumbers && lineNumbers[pos - codeStart] != 0)\n+                consumer.accept(LineNumberImpl.of(lineNumbers[pos - codeStart]));\n+            int bc = classReader.readU1(pos);\n+            Instruction instr = bcToInstruction(bc, pos);\n+            consumer.accept(instr);\n+            pos += instr.sizeInBytes();\n+        }\n+        \/\/ There might be labels pointing to the bci at codeEnd\n+        if (labels[codeEnd-codeStart] != null)\n+            consumer.accept(labels[codeEnd - codeStart]);\n+        if (doLineNumbers && lineNumbers[codeEnd - codeStart] != 0)\n+            consumer.accept(LineNumberImpl.of(lineNumbers[codeEnd - codeStart]));\n+    }\n+\n+    @Override\n+    public List<ExceptionCatch> exceptionHandlers() {\n+        if (exceptionTable == null) {\n+            inflateMetadata();\n+            exceptionTable = new ArrayList<>(exceptionHandlerCnt);\n+            iterateExceptionHandlers(new ExceptionHandlerAction() {\n+                @Override\n+                public void accept(int s, int e, int h, int c) {\n+                    ClassEntry catchTypeEntry = c == 0\n+                                                             ? null\n+                                                             : (ClassEntry) constantPool().entryByIndex(c);\n+                    exceptionTable.add(new AbstractPseudoInstruction.ExceptionCatchImpl(getLabel(h), getLabel(s), getLabel(e), catchTypeEntry));\n+                }\n+            });\n+            exceptionTable = Collections.unmodifiableList(exceptionTable);\n+        }\n+        return exceptionTable;\n+    }\n+\n+    public boolean compareCodeBytes(BufWriter buf, int offset, int len) {\n+        return codeLength == len\n+               && classReader.compare(buf, offset, codeStart, codeLength);\n+    }\n+\n+    private int adjustForObjectOrUninitialized(int bci) {\n+        int vt = classReader.readU1(bci);\n+        \/\/inflate newTarget labels from Uninitialized VTIs\n+        if (vt == 8) inflateLabel(classReader.readU2(bci + 1));\n+        return (vt == 7 || vt == 8) ? bci + 3 : bci + 1;\n+    }\n+\n+    private void inflateLabel(int bci) {\n+        if (labels[bci] == null)\n+            labels[bci] = new LabelImpl(this, bci);\n+    }\n+\n+    private void inflateLineNumbers() {\n+        for (Attribute<?> a : attributes()) {\n+            if (a.attributeMapper() == Attributes.LINE_NUMBER_TABLE) {\n+                BoundLineNumberTableAttribute attr = (BoundLineNumberTableAttribute) a;\n+                if (lineNumbers == null)\n+                    lineNumbers = new int[codeLength + 1];\n+\n+                int nLn = classReader.readU2(attr.payloadStart);\n+                int p = attr.payloadStart + 2;\n+                int pEnd = p + (nLn * 4);\n+                for (; p < pEnd; p += 4) {\n+                    int startPc = classReader.readU2(p);\n+                    int lineNumber = classReader.readU2(p + 2);\n+                    lineNumbers[startPc] = lineNumber;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void inflateJumpTargets() {\n+        Optional<StackMapTableAttribute> a = findAttribute(Attributes.STACK_MAP_TABLE);\n+        if (a.isEmpty())\n+            return;\n+        @SuppressWarnings(\"unchecked\")\n+        int stackMapPos = ((BoundAttribute<StackMapTableAttribute>) a.get()).payloadStart;\n+\n+        int bci = -1; \/\/compensate for offsetDelta + 1\n+        int nEntries = classReader.readU2(stackMapPos);\n+        int p = stackMapPos + 2;\n+        for (int i = 0; i < nEntries; ++i) {\n+            int frameType = classReader.readU1(p);\n+            int offsetDelta;\n+            if (frameType < 64) {\n+                offsetDelta = frameType;\n+                ++p;\n+            }\n+            else if (frameType < 128) {\n+                offsetDelta = frameType & 0x3f;\n+                p = adjustForObjectOrUninitialized(p + 1);\n+            }\n+            else\n+                switch (frameType) {\n+                    case 247 -> {\n+                        offsetDelta = classReader.readU2(p + 1);\n+                        p = adjustForObjectOrUninitialized(p + 3);\n+                    }\n+                    case 248, 249, 250, 251 -> {\n+                        offsetDelta = classReader.readU2(p + 1);\n+                        p += 3;\n+                    }\n+                    case 252, 253, 254 -> {\n+                        offsetDelta = classReader.readU2(p + 1);\n+                        int k = frameType - 251;\n+                        p += 3;\n+                        for (int c = 0; c < k; ++c) {\n+                            p = adjustForObjectOrUninitialized(p);\n+                        }\n+                    }\n+                    case 255 -> {\n+                        offsetDelta = classReader.readU2(p + 1);\n+                        p += 3;\n+                        int k = classReader.readU2(p);\n+                        p += 2;\n+                        for (int c = 0; c < k; ++c) {\n+                            p = adjustForObjectOrUninitialized(p);\n+                        }\n+                        k = classReader.readU2(p);\n+                        p += 2;\n+                        for (int c = 0; c < k; ++c) {\n+                            p = adjustForObjectOrUninitialized(p);\n+                        }\n+                    }\n+                    default -> throw new IllegalArgumentException(\"Bad frame type: \" + frameType);\n+                }\n+            bci += offsetDelta + 1;\n+            inflateLabel(bci);\n+        }\n+    }\n+\n+    private void inflateTypeAnnotations() {\n+        findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).ifPresent(RuntimeVisibleTypeAnnotationsAttribute::annotations);\n+        findAttribute(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS).ifPresent(RuntimeInvisibleTypeAnnotationsAttribute::annotations);\n+    }\n+\n+    private void generateCatchTargets(Consumer<CodeElement> consumer) {\n+        \/\/ We attach all catch targets to bci zero, because trying to attach them\n+        \/\/ to their range could subtly affect the order of exception processing\n+        iterateExceptionHandlers(new ExceptionHandlerAction() {\n+            @Override\n+            public void accept(int s, int e, int h, int c) {\n+                ClassEntry catchType = c == 0\n+                                                    ? null\n+                                                    : (ClassEntry) classReader.entryByIndex(c);\n+                consumer.accept(new AbstractPseudoInstruction.ExceptionCatchImpl(getLabel(h), getLabel(s), getLabel(e), catchType));\n+            }\n+        });\n+    }\n+\n+    private void generateDebugElements(Consumer<CodeElement> consumer) {\n+        for (Attribute<?> a : attributes()) {\n+            if (a.attributeMapper() == Attributes.CHARACTER_RANGE_TABLE) {\n+                var attr = (BoundCharacterRangeTableAttribute) a;\n+                int cnt = classReader.readU2(attr.payloadStart);\n+                int p = attr.payloadStart + 2;\n+                int pEnd = p + (cnt * 14);\n+                for (; p < pEnd; p += 14) {\n+                    var instruction = new BoundCharacterRange(this, p);\n+                    inflateLabel(instruction.startPc());\n+                    inflateLabel(instruction.endPc() + 1);\n+                    consumer.accept(instruction);\n+                }\n+            }\n+            else if (a.attributeMapper() == Attributes.LOCAL_VARIABLE_TABLE) {\n+                var attr = (BoundLocalVariableTableAttribute) a;\n+                int cnt = classReader.readU2(attr.payloadStart);\n+                int p = attr.payloadStart + 2;\n+                int pEnd = p + (cnt * 10);\n+                for (; p < pEnd; p += 10) {\n+                    BoundLocalVariable instruction = new BoundLocalVariable(this, p);\n+                    inflateLabel(instruction.startPc());\n+                    inflateLabel(instruction.startPc() + instruction.length());\n+                    consumer.accept(instruction);\n+                }\n+            }\n+            else if (a.attributeMapper() == Attributes.LOCAL_VARIABLE_TYPE_TABLE) {\n+                var attr = (BoundLocalVariableTypeTableAttribute) a;\n+                int cnt = classReader.readU2(attr.payloadStart);\n+                int p = attr.payloadStart + 2;\n+                int pEnd = p + (cnt * 10);\n+                for (; p < pEnd; p += 10) {\n+                    BoundLocalVariableType instruction = new BoundLocalVariableType(this, p);\n+                    inflateLabel(instruction.startPc());\n+                    inflateLabel(instruction.startPc() + instruction.length());\n+                    consumer.accept(instruction);\n+                }\n+            }\n+            else if (a.attributeMapper() == Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS) {\n+                consumer.accept((BoundRuntimeVisibleTypeAnnotationsAttribute) a);\n+            }\n+            else if (a.attributeMapper() == Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS) {\n+                consumer.accept((BoundRuntimeInvisibleTypeAnnotationsAttribute) a);\n+            }\n+        }\n+    }\n+\n+    public interface ExceptionHandlerAction {\n+        void accept(int start, int end, int handler, int catchTypeIndex);\n+    }\n+\n+    public void iterateExceptionHandlers(ExceptionHandlerAction a) {\n+        int p = exceptionHandlerPos + 2;\n+        for (int i = 0; i < exceptionHandlerCnt; ++i) {\n+            a.accept(classReader.readU2(p), classReader.readU2(p + 2), classReader.readU2(p + 4), classReader.readU2(p + 6));\n+            p += 8;\n+        }\n+    }\n+\n+    private Instruction bcToInstruction(int bc, int pos) {\n+        return switch (bc) {\n+            case BIPUSH -> new AbstractInstruction.BoundArgumentConstantInstruction(Opcode.BIPUSH, CodeImpl.this, pos);\n+            case SIPUSH -> new AbstractInstruction.BoundArgumentConstantInstruction(Opcode.SIPUSH, CodeImpl.this, pos);\n+            case LDC -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC, CodeImpl.this, pos);\n+            case LDC_W -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC_W, CodeImpl.this, pos);\n+            case LDC2_W -> new AbstractInstruction.BoundLoadConstantInstruction(Opcode.LDC2_W, CodeImpl.this, pos);\n+            case ILOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ILOAD, CodeImpl.this, pos);\n+            case LLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.LLOAD, CodeImpl.this, pos);\n+            case FLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.FLOAD, CodeImpl.this, pos);\n+            case DLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.DLOAD, CodeImpl.this, pos);\n+            case ALOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ALOAD, CodeImpl.this, pos);\n+            case ISTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ISTORE, CodeImpl.this, pos);\n+            case LSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.LSTORE, CodeImpl.this, pos);\n+            case FSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.FSTORE, CodeImpl.this, pos);\n+            case DSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.DSTORE, CodeImpl.this, pos);\n+            case ASTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ASTORE, CodeImpl.this, pos);\n+            case IINC -> new AbstractInstruction.BoundIncrementInstruction(Opcode.IINC, CodeImpl.this, pos);\n+            case IFEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFEQ, CodeImpl.this, pos);\n+            case IFNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNE, CodeImpl.this, pos);\n+            case IFLT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFLT, CodeImpl.this, pos);\n+            case IFGE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFGE, CodeImpl.this, pos);\n+            case IFGT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFGT, CodeImpl.this, pos);\n+            case IFLE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFLE, CodeImpl.this, pos);\n+            case IF_ICMPEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPEQ, CodeImpl.this, pos);\n+            case IF_ICMPNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPNE, CodeImpl.this, pos);\n+            case IF_ICMPLT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPLT, CodeImpl.this, pos);\n+            case IF_ICMPGE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPGE, CodeImpl.this, pos);\n+            case IF_ICMPGT -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPGT, CodeImpl.this, pos);\n+            case IF_ICMPLE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ICMPLE, CodeImpl.this, pos);\n+            case IF_ACMPEQ -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ACMPEQ, CodeImpl.this, pos);\n+            case IF_ACMPNE -> new AbstractInstruction.BoundBranchInstruction(Opcode.IF_ACMPNE, CodeImpl.this, pos);\n+            case GOTO -> new AbstractInstruction.BoundBranchInstruction(Opcode.GOTO, CodeImpl.this, pos);\n+            case TABLESWITCH -> new AbstractInstruction.BoundTableSwitchInstruction(Opcode.TABLESWITCH, CodeImpl.this, pos);\n+            case LOOKUPSWITCH -> new AbstractInstruction.BoundLookupSwitchInstruction(Opcode.LOOKUPSWITCH, CodeImpl.this, pos);\n+            case GETSTATIC -> new AbstractInstruction.BoundFieldInstruction(Opcode.GETSTATIC, CodeImpl.this, pos);\n+            case PUTSTATIC -> new AbstractInstruction.BoundFieldInstruction(Opcode.PUTSTATIC, CodeImpl.this, pos);\n+            case GETFIELD -> new AbstractInstruction.BoundFieldInstruction(Opcode.GETFIELD, CodeImpl.this, pos);\n+            case PUTFIELD -> new AbstractInstruction.BoundFieldInstruction(Opcode.PUTFIELD, CodeImpl.this, pos);\n+            case INVOKEVIRTUAL -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKEVIRTUAL, CodeImpl.this, pos);\n+            case INVOKESPECIAL -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKESPECIAL, CodeImpl.this, pos);\n+            case INVOKESTATIC -> new AbstractInstruction.BoundInvokeInstruction(Opcode.INVOKESTATIC, CodeImpl.this, pos);\n+            case INVOKEINTERFACE -> new AbstractInstruction.BoundInvokeInterfaceInstruction(Opcode.INVOKEINTERFACE, CodeImpl.this, pos);\n+            case INVOKEDYNAMIC -> new AbstractInstruction.BoundInvokeDynamicInstruction(Opcode.INVOKEDYNAMIC, CodeImpl.this, pos);\n+            case NEW -> new AbstractInstruction.BoundNewObjectInstruction(CodeImpl.this, pos);\n+            case NEWARRAY -> new AbstractInstruction.BoundNewPrimitiveArrayInstruction(Opcode.NEWARRAY, CodeImpl.this, pos);\n+            case ANEWARRAY -> new AbstractInstruction.BoundNewReferenceArrayInstruction(Opcode.ANEWARRAY, CodeImpl.this, pos);\n+            case CHECKCAST -> new AbstractInstruction.BoundTypeCheckInstruction(Opcode.CHECKCAST, CodeImpl.this, pos);\n+            case INSTANCEOF -> new AbstractInstruction.BoundTypeCheckInstruction(Opcode.INSTANCEOF, CodeImpl.this, pos);\n+\n+            case WIDE -> {\n+                int bclow = classReader.readU1(pos + 1);\n+                yield switch (bclow) {\n+                    case ILOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ILOAD_W, this, pos);\n+                    case LLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.LLOAD_W, this, pos);\n+                    case FLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.FLOAD_W, this, pos);\n+                    case DLOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.DLOAD_W, this, pos);\n+                    case ALOAD -> new AbstractInstruction.BoundLoadInstruction(Opcode.ALOAD_W, this, pos);\n+                    case ISTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ISTORE_W, this, pos);\n+                    case LSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.LSTORE_W, this, pos);\n+                    case FSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.FSTORE_W, this, pos);\n+                    case DSTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.DSTORE_W, this, pos);\n+                    case ASTORE -> new AbstractInstruction.BoundStoreInstruction(Opcode.ASTORE_W, this, pos);\n+                    case IINC -> new AbstractInstruction.BoundIncrementInstruction(Opcode.IINC_W, this, pos);\n+                    case RET -> throw new UnsupportedOperationException(\"RET_W instruction not supported\");\n+                    default -> throw new UnsupportedOperationException(\"unknown wide instruction: \" + bclow);\n+                };\n+            }\n+\n+            case MULTIANEWARRAY -> new AbstractInstruction.BoundNewMultidimensionalArrayInstruction(Opcode.MULTIANEWARRAY, CodeImpl.this, pos);\n+            case IFNULL -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNULL, CodeImpl.this, pos);\n+            case IFNONNULL -> new AbstractInstruction.BoundBranchInstruction(Opcode.IFNONNULL, CodeImpl.this, pos);\n+            case GOTO_W -> new AbstractInstruction.BoundBranchInstruction(Opcode.GOTO_W, CodeImpl.this, pos);\n+\n+            case JSR -> throw new UnsupportedOperationException(\"JSR instruction not supported\");\n+            case RET -> throw new UnsupportedOperationException(\"RET instruction not supported\");\n+            case JSR_W -> throw new UnsupportedOperationException(\"JSR_W instruction not supported\");\n+            default -> {\n+                Instruction instr = InstructionData.singletonInstructions[bc];\n+                if (instr == null)\n+                    throw new UnsupportedOperationException(\"unknown instruction: \" + bc);\n+                yield instr;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"CodeModel[id=%d]\", System.identityHashCode(this));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":508,"deletions":0,"binary":false,"changes":508,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+\n+import static jdk.internal.classfile.impl.ConcreteEntry.ConcreteMethodHandleEntry;\n+\n+public final class ConcreteBootstrapMethodEntry implements BootstrapMethodEntry {\n+\n+    final int index;\n+    final int hash;\n+    private final ConstantPool constantPool;\n+    private final ConcreteMethodHandleEntry handle;\n+    private final List<LoadableConstantEntry> arguments;\n+\n+    ConcreteBootstrapMethodEntry(ConstantPool constantPool, int bsmIndex, int hash,\n+                                 ConcreteMethodHandleEntry handle,\n+                                 List<LoadableConstantEntry> arguments) {\n+        this.index = bsmIndex;\n+        this.hash = hash;\n+        this.constantPool = constantPool;\n+        this.handle = handle;\n+        this.arguments = List.copyOf(arguments);\n+    }\n+\n+    @Override\n+    public ConstantPool constantPool() {\n+        return constantPool;\n+    }\n+\n+    @Override\n+    public MethodHandleEntry bootstrapMethod() {\n+        return handle;\n+    }\n+\n+    @Override\n+    public List<LoadableConstantEntry> arguments() {\n+        return arguments;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof BootstrapMethodEntry e\n+            && e.bootstrapMethod() == handle\n+            && e.arguments().size() == arguments.size()) {\n+                for (int i = 0; i < arguments.size(); ++i) {\n+                    if (e.arguments().get(i) != arguments.get(i)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        else\n+            return false;\n+    }\n+\n+    static int computeHashCode(ConcreteMethodHandleEntry handle,\n+                               List<? extends LoadableConstantEntry> arguments) {\n+        int hash = handle.hashCode();\n+        for (LoadableConstantEntry a : arguments) {\n+            hash = 31 * hash + a.hashCode();\n+        }\n+        return ConcreteEntry.phiMix(hash);\n+    }\n+\n+    @Override\n+    public int bsmIndex() { return index; }\n+\n+    @Override\n+    public int hashCode() {\n+        return hash;\n+    }\n+\n+    @Override\n+    public void writeTo(BufWriter writer) {\n+        writer.writeIndex(bootstrapMethod());\n+        writer.writeListIndices(arguments());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ConcreteBootstrapMethodEntry.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -32,25 +32,25 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.FloatEntry;\n-import jdk.classfile.constantpool.IntegerEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.MethodTypeEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.StringEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.MethodTypeEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n@@ -658,1 +658,1 @@\n-            implements jdk.classfile.constantpool.MemberRefEntry {\n+            implements jdk.internal.classfile.constantpool.MemberRefEntry {\n@@ -917,3 +917,3 @@\n-                    ((jdk.classfile.constantpool.MemberRefEntry) reference()).owner().asSymbol(),\n-                    ((jdk.classfile.constantpool.MemberRefEntry) reference()).nameAndType().name().stringValue(),\n-                    ((jdk.classfile.constantpool.MemberRefEntry) reference()).nameAndType().type().stringValue());\n+                    ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).owner().asSymbol(),\n+                    ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).nameAndType().name().stringValue(),\n+                    ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).nameAndType().type().stringValue());\n@@ -936,2 +936,2 @@\n-            return tag() + \" \" + kind() + \":\" + ((jdk.classfile.constantpool.MemberRefEntry) reference()).owner().asInternalName() + \".\" + ((jdk.classfile.constantpool.MemberRefEntry) reference()).nameAndType().name().stringValue()\n-                   + \"-\" + ((jdk.classfile.constantpool.MemberRefEntry) reference()).nameAndType().type().stringValue();\n+            return tag() + \" \" + kind() + \":\" + ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).owner().asInternalName() + \".\" + ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).nameAndType().name().stringValue()\n+                   + \"-\" + ((jdk.internal.classfile.constantpool.MemberRefEntry) reference()).nameAndType().type().stringValue();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ConcreteEntry.java","additions":32,"deletions":32,"binary":false,"changes":64,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ConcreteEntry.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -34,15 +34,15 @@\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.FieldBuilder;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.FieldTransform;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.WritableElement;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.FieldTransform;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.WritableElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":16,"deletions":16,"binary":false,"changes":32,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/DirectClassBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -37,27 +37,27 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.SwitchCase;\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.attribute.LineNumberTableAttribute;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.instruction.CharacterRange;\n-import jdk.classfile.instruction.ExceptionCatch;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.SwitchCase;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.CharacterRange;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n@@ -65,6 +65,6 @@\n-import static jdk.classfile.Opcode.GOTO;\n-import static jdk.classfile.Opcode.GOTO_W;\n-import static jdk.classfile.Opcode.IINC;\n-import static jdk.classfile.Opcode.IINC_W;\n-import static jdk.classfile.Opcode.LDC2_W;\n-import static jdk.classfile.Opcode.LDC_W;\n+import static jdk.internal.classfile.Opcode.GOTO;\n+import static jdk.internal.classfile.Opcode.GOTO_W;\n+import static jdk.internal.classfile.Opcode.IINC;\n+import static jdk.internal.classfile.Opcode.IINC_W;\n+import static jdk.internal.classfile.Opcode.LDC2_W;\n+import static jdk.internal.classfile.Opcode.LDC_W;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":34,"deletions":34,"binary":false,"changes":68,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/DirectCodeBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.impl;\n+\n+import java.util.function.Consumer;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.WritableElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+public final class DirectFieldBuilder\n+        extends AbstractDirectBuilder<FieldBuilder, FieldModel>\n+        implements TerminalFieldBuilder, WritableElement<FieldModel> {\n+    private final Utf8Entry name;\n+    private final Utf8Entry desc;\n+    private int flags;\n+\n+    public DirectFieldBuilder(ConstantPoolBuilder constantPool,\n+                              Utf8Entry name,\n+                              Utf8Entry type,\n+                              FieldModel original) {\n+        super(constantPool);\n+        setOriginal(original);\n+        this.name = name;\n+        this.desc = type;\n+        this.flags = 0;\n+    }\n+\n+    @Override\n+    public FieldBuilder with(FieldElement element) {\n+        ((AbstractElement) element).writeTo(this);\n+        return this;\n+    }\n+\n+    public DirectFieldBuilder run(Consumer<? super FieldBuilder> handler) {\n+        handler.accept(this);\n+        return this;\n+    }\n+\n+    void setFlags(int flags) {\n+        this.flags = flags;\n+    }\n+\n+    public void writeTo(BufWriter buf) {\n+        buf.writeU2(flags);\n+        buf.writeIndex(name);\n+        buf.writeIndex(desc);\n+        attributes.writeTo(buf);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.impl;\n+\n+import java.util.function.Consumer;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.WritableElement;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+public final class DirectMethodBuilder\n+        extends AbstractDirectBuilder<MethodBuilder, MethodModel>\n+        implements TerminalMethodBuilder, WritableElement<MethodModel>, MethodInfo {\n+\n+    final Utf8Entry name;\n+    final Utf8Entry desc;\n+    int flags;\n+    int[] parameterSlots;\n+\n+    public DirectMethodBuilder(ConstantPoolBuilder constantPool,\n+                               Utf8Entry nameInfo,\n+                               Utf8Entry typeInfo,\n+                               int flags,\n+                               MethodModel original) {\n+        super(constantPool);\n+        setOriginal(original);\n+        this.name = nameInfo;\n+        this.desc = typeInfo;\n+        this.flags = flags;\n+    }\n+\n+    void setFlags(int flags) {\n+        boolean wasStatic = (this.flags & Classfile.ACC_STATIC) != 0;\n+        boolean isStatic = (flags & Classfile.ACC_STATIC) != 0;\n+        if (wasStatic != isStatic)\n+            throw new IllegalArgumentException(\"Cannot change ACC_STATIC flag of method\");\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public Utf8Entry methodName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Utf8Entry methodType() {\n+        return desc;\n+    }\n+\n+    @Override\n+    public int methodFlags() {\n+        return flags;\n+    }\n+\n+    @Override\n+    public int parameterSlot(int paramNo) {\n+        if (parameterSlots == null)\n+            parameterSlots = Util.parseParameterSlots(methodFlags(), methodType().stringValue());\n+        return parameterSlots[paramNo];\n+    }\n+\n+    @Override\n+    public BufferedCodeBuilder bufferedCodeBuilder(CodeModel original) {\n+        return new BufferedCodeBuilder(this, constantPool, original);\n+    }\n+\n+    @Override\n+    public MethodBuilder with(MethodElement element) {\n+        ((AbstractElement) element).writeTo(this);\n+        return this;\n+    }\n+\n+    private MethodBuilder withCode(CodeModel original,\n+                                  Consumer<? super CodeBuilder> handler) {\n+        var cb = DirectCodeBuilder.build(this, handler, constantPool, original);\n+        writeAttribute(cb);\n+        return this;\n+    }\n+\n+    @Override\n+    public MethodBuilder withCode(Consumer<? super CodeBuilder> handler) {\n+        return withCode(null, handler);\n+    }\n+\n+    @Override\n+    public MethodBuilder transformCode(CodeModel code, CodeTransform transform) {\n+        return withCode(code, new Consumer<>() {\n+            @Override\n+            public void accept(CodeBuilder builder) {\n+                builder.transform(code, transform);\n+            }\n+        });\n+    }\n+\n+    public DirectMethodBuilder run(Consumer<? super MethodBuilder> handler) {\n+        handler.accept(this);\n+        return this;\n+    }\n+\n+    @Override\n+    public void writeTo(BufWriter b) {\n+        BufWriterImpl buf = (BufWriterImpl) b;\n+        buf.writeU2(flags);\n+        buf.writeIndex(name);\n+        buf.writeIndex(desc);\n+        attributes.writeTo(buf);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/EntryMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/EntryMap.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,2 +31,2 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/FieldImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n+import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.ConvertInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.MonitorInstruction;\n+import jdk.internal.classfile.instruction.NopInstruction;\n+import jdk.internal.classfile.instruction.OperatorInstruction;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StackInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.ThrowInstruction;\n+\n+\/**\n+ * InstructionData\n+ *\/\n+public class InstructionData {\n+    static final Instruction[] singletonInstructions = new Instruction[256];\n+\n+    static {\n+        for (Opcode o : List.of(Opcode.NOP))\n+            singletonInstructions[o.bytecode()] = NopInstruction.of();\n+        for (Opcode o : List.of(Opcode.ACONST_NULL,\n+                                Opcode.ICONST_M1,\n+                                Opcode.ICONST_0, Opcode.ICONST_1, Opcode.ICONST_2, Opcode.ICONST_3, Opcode.ICONST_4, Opcode.ICONST_5,\n+                                Opcode.LCONST_0, Opcode.LCONST_1,\n+                                Opcode.FCONST_0, Opcode.FCONST_1, Opcode.FCONST_2,\n+                                Opcode.DCONST_0, Opcode.DCONST_1))\n+            singletonInstructions[o.bytecode()] = ConstantInstruction.ofIntrinsic(o);\n+        for (Opcode o : List.of(Opcode.ILOAD_0, Opcode.ILOAD_1, Opcode.ILOAD_2, Opcode.ILOAD_3,\n+                                Opcode.LLOAD_0, Opcode.LLOAD_1, Opcode.LLOAD_2, Opcode.LLOAD_3,\n+                                Opcode.FLOAD_0, Opcode.FLOAD_1, Opcode.FLOAD_2, Opcode.FLOAD_3,\n+                                Opcode.DLOAD_0, Opcode.DLOAD_1, Opcode.DLOAD_2, Opcode.DLOAD_3,\n+                                Opcode.ALOAD_0, Opcode.ALOAD_1, Opcode.ALOAD_2, Opcode.ALOAD_3))\n+            singletonInstructions[o.bytecode()] = LoadInstruction.of(o, o.slot());\n+        for (Opcode o : List.of(Opcode.ISTORE_0, Opcode.ISTORE_1, Opcode.ISTORE_2, Opcode.ISTORE_3,\n+                                Opcode.LSTORE_0, Opcode.LSTORE_1, Opcode.LSTORE_2, Opcode.LSTORE_3,\n+                                Opcode.FSTORE_0, Opcode.FSTORE_1, Opcode.FSTORE_2, Opcode.FSTORE_3,\n+                                Opcode.DSTORE_0, Opcode.DSTORE_1, Opcode.DSTORE_2, Opcode.DSTORE_3,\n+                                Opcode.ASTORE_0, Opcode.ASTORE_1, Opcode.ASTORE_2, Opcode.ASTORE_3))\n+            singletonInstructions[o.bytecode()] = StoreInstruction.of(o, o.slot());\n+        for (Opcode o : List.of(Opcode.IALOAD, Opcode.LALOAD, Opcode.FALOAD, Opcode.DALOAD, Opcode.AALOAD, Opcode.BALOAD, Opcode.CALOAD, Opcode.SALOAD))\n+            singletonInstructions[o.bytecode()] = ArrayLoadInstruction.of(o);\n+        for (Opcode o : List.of(Opcode.IASTORE, Opcode.LASTORE, Opcode.FASTORE, Opcode.DASTORE, Opcode.AASTORE, Opcode.BASTORE, Opcode.CASTORE, Opcode.SASTORE))\n+            singletonInstructions[o.bytecode()] = ArrayStoreInstruction.of(o);\n+        for (Opcode o : List.of(Opcode.POP, Opcode.POP2, Opcode.DUP, Opcode.DUP_X1, Opcode.DUP_X2, Opcode.DUP2, Opcode.DUP2_X1, Opcode.DUP2_X2, Opcode.SWAP))\n+            singletonInstructions[o.bytecode()] = StackInstruction.of(o);\n+        for (Opcode o : List.of(Opcode.IADD, Opcode.LADD, Opcode.FADD, Opcode.DADD, Opcode.ISUB,\n+                                Opcode.LSUB, Opcode.FSUB, Opcode.DSUB,\n+                                Opcode.IMUL, Opcode.LMUL, Opcode.FMUL, Opcode.DMUL,\n+                                Opcode.IDIV, Opcode.LDIV, Opcode.FDIV, Opcode.DDIV,\n+                                Opcode.IREM, Opcode.LREM, Opcode.FREM, Opcode.DREM,\n+                                Opcode.INEG, Opcode.LNEG, Opcode.FNEG, Opcode.DNEG,\n+                                Opcode.ISHL, Opcode.LSHL, Opcode.ISHR, Opcode.LSHR, Opcode.IUSHR, Opcode.LUSHR,\n+                                Opcode.IAND, Opcode.LAND, Opcode.IOR, Opcode.LOR, Opcode.IXOR, Opcode.LXOR,\n+                                Opcode.LCMP, Opcode.FCMPL, Opcode.FCMPG, Opcode.DCMPL, Opcode.DCMPG,\n+                                Opcode.ARRAYLENGTH))\n+            singletonInstructions[o.bytecode()] = OperatorInstruction.of(o);\n+\n+        for (Opcode o : List.of(Opcode.I2L, Opcode.I2F, Opcode.I2D,\n+                                Opcode.L2I, Opcode.L2F, Opcode.L2D,\n+                                Opcode.F2I, Opcode.F2L, Opcode.F2D,\n+                                Opcode.D2I, Opcode.D2L, Opcode.D2F,\n+                                Opcode.I2B, Opcode.I2C, Opcode.I2S))\n+            singletonInstructions[o.bytecode()] = ConvertInstruction.of(o);\n+        for (Opcode o : List.of(Opcode.IRETURN, Opcode.LRETURN, Opcode.FRETURN, Opcode.DRETURN, Opcode.ARETURN, Opcode.RETURN))\n+            singletonInstructions[o.bytecode()] = ReturnInstruction.of(o);\n+        for (Opcode o : List.of(Opcode.ATHROW))\n+            singletonInstructions[o.bytecode()] = ThrowInstruction.of();\n+        for (Opcode o : List.of(Opcode.MONITORENTER, Opcode.MONITOREXIT))\n+            singletonInstructions[o.bytecode()] = MonitorInstruction.of(o);\n+    }\n+\n+    private InstructionData() {\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/InstructionData.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -30,2 +30,2 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Interfaces;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Interfaces;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/InterfacesImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/InterfacesImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.Label;\n+import jdk.internal.classfile.Label;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/LabelContext.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,3 +29,3 @@\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.instruction.LabelTarget;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.instruction.LabelTarget;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/LabelImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.Opcode;\n-import jdk.classfile.instruction.LineNumber;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.instruction.LineNumber;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LineNumberImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/LineNumberImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/MethodImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -29,1 +29,1 @@\n-import static jdk.classfile.Classfile.ACC_STATIC;\n+import static jdk.internal.classfile.Classfile.ACC_STATIC;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/MethodInfo.java","status":"renamed"},{"patch":"@@ -26,9 +26,9 @@\n-package jdk.classfile.impl;\n-\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleAttributeBuilderImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ModuleAttributeBuilderImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleDescImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/ModuleDescImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,4 +29,4 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Label;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/NonterminalCodeBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/NonterminalCodeBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -30,4 +30,4 @@\n-import jdk.classfile.AttributeMapper;\n-import jdk.classfile.ClassHierarchyResolver;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.ClassHierarchyResolver;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -35,1 +35,1 @@\n-import static jdk.classfile.ClassHierarchyResolver.DEFAULT_CLASS_HIERARCHY_RESOLVER;\n+import static jdk.internal.classfile.ClassHierarchyResolver.DEFAULT_CLASS_HIERARCHY_RESOLVER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Options.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/Options.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/PackageDescImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/PackageDescImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -28,5 +28,5 @@\n-import static jdk.classfile.Classfile.ASTORE_3;\n-import static jdk.classfile.Classfile.ISTORE;\n-import static jdk.classfile.Classfile.LOOKUPSWITCH;\n-import static jdk.classfile.Classfile.TABLESWITCH;\n-import static jdk.classfile.Classfile.WIDE;\n+import static jdk.internal.classfile.Classfile.ASTORE_3;\n+import static jdk.internal.classfile.Classfile.ISTORE;\n+import static jdk.internal.classfile.Classfile.LOOKUPSWITCH;\n+import static jdk.internal.classfile.Classfile.TABLESWITCH;\n+import static jdk.internal.classfile.Classfile.WIDE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/RawBytecodeHelper.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -32,4 +32,4 @@\n-import jdk.classfile.ClassSignature;\n-import jdk.classfile.MethodSignature;\n-import jdk.classfile.Signature;\n-import jdk.classfile.Signature.*;\n+import jdk.internal.classfile.ClassSignature;\n+import jdk.internal.classfile.MethodSignature;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.Signature.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/SignaturesImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -33,29 +33,29 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.FloatEntry;\n-import jdk.classfile.constantpool.IntegerEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.MethodTypeEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.StringEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.MethodTypeEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -63,16 +63,16 @@\n-import static jdk.classfile.Classfile.TAG_CLASS;\n-import static jdk.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_DOUBLE;\n-import static jdk.classfile.Classfile.TAG_FIELDREF;\n-import static jdk.classfile.Classfile.TAG_FLOAT;\n-import static jdk.classfile.Classfile.TAG_INTEGER;\n-import static jdk.classfile.Classfile.TAG_INTERFACEMETHODREF;\n-import static jdk.classfile.Classfile.TAG_INVOKEDYNAMIC;\n-import static jdk.classfile.Classfile.TAG_LONG;\n-import static jdk.classfile.Classfile.TAG_METHODHANDLE;\n-import static jdk.classfile.Classfile.TAG_METHODREF;\n-import static jdk.classfile.Classfile.TAG_METHODTYPE;\n-import static jdk.classfile.Classfile.TAG_MODULE;\n-import static jdk.classfile.Classfile.TAG_NAMEANDTYPE;\n-import static jdk.classfile.Classfile.TAG_PACKAGE;\n-import static jdk.classfile.Classfile.TAG_STRING;\n+import static jdk.internal.classfile.Classfile.TAG_CLASS;\n+import static jdk.internal.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_DOUBLE;\n+import static jdk.internal.classfile.Classfile.TAG_FIELDREF;\n+import static jdk.internal.classfile.Classfile.TAG_FLOAT;\n+import static jdk.internal.classfile.Classfile.TAG_INTEGER;\n+import static jdk.internal.classfile.Classfile.TAG_INTERFACEMETHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_INVOKEDYNAMIC;\n+import static jdk.internal.classfile.Classfile.TAG_LONG;\n+import static jdk.internal.classfile.Classfile.TAG_METHODHANDLE;\n+import static jdk.internal.classfile.Classfile.TAG_METHODREF;\n+import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_MODULE;\n+import static jdk.internal.classfile.Classfile.TAG_NAMEANDTYPE;\n+import static jdk.internal.classfile.Classfile.TAG_PACKAGE;\n+import static jdk.internal.classfile.Classfile.TAG_STRING;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":46,"deletions":46,"binary":false,"changes":92,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/SplitConstantPool.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -33,1 +33,1 @@\n-import jdk.classfile.BufWriter;\n+import jdk.internal.classfile.BufWriter;\n@@ -35,3 +35,3 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.attribute.StackMapTableAttribute.*;\n-import jdk.classfile.ClassReader;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute.*;\n+import jdk.internal.classfile.ClassReader;\n@@ -39,3 +39,3 @@\n-import static jdk.classfile.Classfile.*;\n-import jdk.classfile.Label;\n-import jdk.classfile.MethodModel;\n+import static jdk.internal.classfile.Classfile.*;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.MethodModel;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/StackMapDecoder.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,6 +29,6 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n@@ -42,1 +42,1 @@\n-import jdk.classfile.Attribute;\n+import jdk.internal.classfile.Attribute;\n@@ -44,7 +44,7 @@\n-import static jdk.classfile.Classfile.*;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Label;\n-import jdk.classfile.attribute.StackMapTableAttribute;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.components.ClassPrinter;\n-import jdk.classfile.attribute.CodeAttribute;\n+import static jdk.internal.classfile.Classfile.*;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n@@ -148,1 +148,1 @@\n- * <dt><code>-Djdk.classfile.impl.StackMapGenerator.DEBUG=true<\/code>\n+ * <dt><code>-Djdk.internal.classfile.impl.StackMapGenerator.DEBUG=true<\/code>\n@@ -151,1 +151,1 @@\n- * <dt><code>-Djdk.classfile.impl.StackMapGenerator.TRACE=true<\/code>\n+ * <dt><code>-Djdk.internal.classfile.impl.StackMapGenerator.TRACE=true<\/code>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":17,"deletions":17,"binary":false,"changes":34,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/StackMapGenerator.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Superclass;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Superclass;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SuperclassImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/SuperclassImpl.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -29,3 +29,3 @@\n-import jdk.classfile.Label;\n-import jdk.classfile.TypeAnnotation.*;\n-import static jdk.classfile.Classfile.*;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.TypeAnnotation.*;\n+import static jdk.internal.classfile.Classfile.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TargetInfoImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TargetInfoImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.MethodTypeEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n+\n+public final class TemporaryConstantPool implements ConstantPoolBuilder {\n+    private static final Options options = new Options(Collections.emptyList());\n+\n+    private TemporaryConstantPool() {};\n+\n+    public static final TemporaryConstantPool INSTANCE = new TemporaryConstantPool();\n+\n+    @Override\n+    public Utf8Entry utf8Entry(String s) {\n+        return new ConcreteEntry.ConcreteUtf8Entry(this, -1, s);\n+    }\n+\n+    @Override\n+    public IntegerEntry intEntry(int value) {\n+        return new ConcreteEntry.ConcreteIntegerEntry(this, -1, value);\n+    }\n+\n+    @Override\n+    public FloatEntry floatEntry(float value) {\n+        return new ConcreteEntry.ConcreteFloatEntry(this, -1, value);\n+    }\n+\n+    @Override\n+    public LongEntry longEntry(long value) {\n+        return new ConcreteEntry.ConcreteLongEntry(this, -1, value);\n+    }\n+\n+    @Override\n+    public DoubleEntry doubleEntry(double value) {\n+        return new ConcreteEntry.ConcreteDoubleEntry(this, -1, value);\n+    }\n+\n+    @Override\n+    public ClassEntry classEntry(Utf8Entry name) {\n+        return new ConcreteEntry.ConcreteClassEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n+    }\n+\n+    @Override\n+    public PackageEntry packageEntry(Utf8Entry name) {\n+        return new ConcreteEntry.ConcretePackageEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n+    }\n+\n+    @Override\n+    public ModuleEntry moduleEntry(Utf8Entry name) {\n+        return new ConcreteEntry.ConcreteModuleEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) name);\n+    }\n+\n+    @Override\n+    public NameAndTypeEntry natEntry(Utf8Entry nameEntry, Utf8Entry typeEntry) {\n+        return new ConcreteEntry.ConcreteNameAndTypeEntry(this, -3,\n+                                                          (ConcreteEntry.ConcreteUtf8Entry) nameEntry,\n+                                                          (ConcreteEntry.ConcreteUtf8Entry) typeEntry);\n+    }\n+\n+    @Override\n+    public FieldRefEntry fieldRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n+        return new ConcreteEntry.ConcreteFieldRefEntry(this, -3,\n+                                                       (ConcreteEntry.ConcreteClassEntry) owner,\n+                                                       (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n+    }\n+\n+    @Override\n+    public MethodRefEntry methodRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n+        return new ConcreteEntry.ConcreteMethodRefEntry(this, -3,\n+                                                        (ConcreteEntry.ConcreteClassEntry) owner,\n+                                                        (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n+    }\n+\n+    @Override\n+    public InterfaceMethodRefEntry interfaceMethodRefEntry(ClassEntry owner, NameAndTypeEntry nameAndType) {\n+        return new ConcreteEntry.ConcreteInterfaceMethodRefEntry(this, -3,\n+                                                                 (ConcreteEntry.ConcreteClassEntry) owner,\n+                                                                 (ConcreteEntry.ConcreteNameAndTypeEntry) nameAndType);\n+    }\n+\n+    @Override\n+    public MethodTypeEntry methodTypeEntry(MethodTypeDesc descriptor) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public MethodTypeEntry methodTypeEntry(Utf8Entry descriptor) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public MethodHandleEntry methodHandleEntry(int refKind, MemberRefEntry reference) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public InvokeDynamicEntry invokeDynamicEntry(BootstrapMethodEntry bootstrapMethodEntry, NameAndTypeEntry nameAndType) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public ConstantDynamicEntry constantDynamicEntry(BootstrapMethodEntry bootstrapMethodEntry, NameAndTypeEntry nameAndType) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public StringEntry stringEntry(Utf8Entry utf8) {\n+        return new ConcreteEntry.ConcreteStringEntry(this, -2, (ConcreteEntry.ConcreteUtf8Entry) utf8);\n+    }\n+\n+    @Override\n+    public <T extends PoolEntry> T maybeClone(T entry) {\n+        return entry;\n+    }\n+\n+    @Override\n+    public BootstrapMethodEntry bsmEntry(MethodHandleEntry methodReference, List<LoadableConstantEntry> arguments) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public PoolEntry entryByIndex(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int entryCount() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public BootstrapMethodEntry bootstrapMethodEntry(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int bootstrapMethodCount() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public <T> T optionValue(Classfile.Option.Key option) {\n+        return options.value(option);\n+    }\n+\n+    @Override\n+    public boolean canWriteDirect(ConstantPool constantPool) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean writeBootstrapMethods(BufWriter buf) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void writeTo(BufWriter buf) {\n+        throw new UnsupportedOperationException();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TerminalCodeBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,1 +27,1 @@\n-import jdk.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TerminalFieldBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.MethodBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.MethodBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TerminalMethodBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -31,16 +31,16 @@\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.ClassfileTransform;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldBuilder;\n-import jdk.classfile.FieldElement;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.FieldTransform;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.MethodTransform;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.ClassfileTransform;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldBuilder;\n+import jdk.internal.classfile.FieldElement;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.FieldTransform;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.MethodTransform;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TransformImpl.java","additions":17,"deletions":17,"binary":false,"changes":34,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/TransformImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeModel;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+\n+\/**\n+ * TransformingCodeBuilder\n+ *\/\n+public final class TransformingCodeBuilder implements TerminalCodeBuilder {\n+\n+    final CodeBuilder delegate;\n+    final Consumer<CodeElement> consumer;\n+\n+    public TransformingCodeBuilder(CodeBuilder delegate, Consumer<CodeElement> consumer) {\n+        this.delegate = delegate;\n+        this.consumer = consumer;\n+    }\n+\n+    @Override\n+    public CodeBuilder with(CodeElement e) {\n+        consumer.accept(e);\n+        return this;\n+    }\n+\n+    @Override\n+    public Optional<CodeModel> original() {\n+        return delegate.original();\n+    }\n+\n+    @Override\n+    public Label newLabel() {\n+        return delegate.newLabel();\n+    }\n+\n+    @Override\n+    public Label startLabel() {\n+        return delegate.startLabel();\n+    }\n+\n+    @Override\n+    public Label endLabel() {\n+        return delegate.endLabel();\n+    }\n+\n+    @Override\n+    public int receiverSlot() {\n+        return delegate.receiverSlot();\n+    }\n+\n+    @Override\n+    public int parameterSlot(int paramNo) {\n+        return delegate.parameterSlot(paramNo);\n+    }\n+\n+    @Override\n+    public int allocateLocal(TypeKind typeKind) {\n+        return delegate.allocateLocal(typeKind);\n+    }\n+\n+    @Override\n+    public ConstantPoolBuilder constantPool() {\n+        return delegate.constantPool();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TransformingCodeBuilder.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,950 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.AnnotationElement;\n+import jdk.internal.classfile.AnnotationValue;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeAnnotation;\n+import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.attribute.CharacterRangeInfo;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.attribute.CompilationIDAttribute;\n+import jdk.internal.classfile.attribute.ConstantValueAttribute;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.InnerClassInfo;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import jdk.internal.classfile.attribute.LineNumberInfo;\n+import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n+import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n+import jdk.internal.classfile.attribute.MethodParameterInfo;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleExportInfo;\n+import jdk.internal.classfile.attribute.ModuleHashInfo;\n+import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModuleOpenInfo;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.ModuleProvideInfo;\n+import jdk.internal.classfile.attribute.ModuleRequireInfo;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n+import jdk.internal.classfile.attribute.NestHostAttribute;\n+import jdk.internal.classfile.attribute.NestMembersAttribute;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.attribute.SourceIDAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.classfile.attribute.StackMapTableAttribute.StackMapFrameInfo;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import jdk.internal.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+\/**\n+ * UnboundAttribute\n+ *\/\n+public abstract sealed class UnboundAttribute<T extends Attribute<T>>\n+        extends AbstractElement\n+        implements Attribute<T> {\n+    protected final AttributeMapper<T> mapper;\n+\n+    public UnboundAttribute(AttributeMapper<T> mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public AttributeMapper<T> attributeMapper() {\n+        return mapper;\n+    }\n+\n+    @Override\n+    public String attributeName() {\n+        return mapper.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void writeTo(BufWriter buf) {\n+        mapper.writeAttribute(buf, (T) this);\n+    }\n+\n+    @Override\n+    public void writeTo(DirectClassBuilder builder) {\n+        builder.writeAttribute(this);\n+    }\n+\n+    @Override\n+    public void writeTo(DirectCodeBuilder builder) {\n+        builder.writeAttribute(this);\n+    }\n+\n+    @Override\n+    public void writeTo(DirectMethodBuilder builder) {\n+        builder.writeAttribute(this);\n+    }\n+\n+    @Override\n+    public void writeTo(DirectFieldBuilder builder) {\n+        builder.writeAttribute(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"Attribute[name=%s]\", mapper.name());\n+    }\n+    public static final class UnboundConstantValueAttribute\n+            extends UnboundAttribute<ConstantValueAttribute>\n+            implements ConstantValueAttribute {\n+\n+        private final ConstantValueEntry entry;\n+\n+        public UnboundConstantValueAttribute(ConstantValueEntry entry) {\n+            super(Attributes.CONSTANT_VALUE);\n+            this.entry = entry;\n+        }\n+\n+        @Override\n+        public ConstantValueEntry constant() {\n+            return entry;\n+        }\n+\n+    }\n+\n+    public static final class UnboundDeprecatedAttribute\n+            extends UnboundAttribute<DeprecatedAttribute>\n+            implements DeprecatedAttribute {\n+        public UnboundDeprecatedAttribute() {\n+            super(Attributes.DEPRECATED);\n+        }\n+    }\n+\n+    public static final class UnboundSyntheticAttribute\n+            extends UnboundAttribute<SyntheticAttribute>\n+            implements SyntheticAttribute {\n+        public UnboundSyntheticAttribute() {\n+            super(Attributes.SYNTHETIC);\n+        }\n+    }\n+\n+    public static final class UnboundSignatureAttribute\n+            extends UnboundAttribute<SignatureAttribute>\n+            implements SignatureAttribute {\n+        private final Utf8Entry signature;\n+\n+        public UnboundSignatureAttribute(Utf8Entry signature) {\n+            super(Attributes.SIGNATURE);\n+            this.signature = signature;\n+        }\n+\n+        @Override\n+        public Utf8Entry signature() {\n+            return signature;\n+        }\n+    }\n+\n+    public static final class UnboundExceptionsAttribute\n+            extends UnboundAttribute<ExceptionsAttribute>\n+            implements ExceptionsAttribute {\n+        private final List<ClassEntry> exceptions;\n+\n+        public UnboundExceptionsAttribute(List<ClassEntry> exceptions) {\n+            super(Attributes.EXCEPTIONS);\n+            this.exceptions = List.copyOf(exceptions);\n+        }\n+\n+        @Override\n+        public List<ClassEntry> exceptions() {\n+            return exceptions;\n+        }\n+    }\n+\n+    public static final class UnboundAnnotationDefaultAttribute\n+            extends UnboundAttribute<AnnotationDefaultAttribute>\n+            implements AnnotationDefaultAttribute {\n+        private final AnnotationValue annotationDefault;\n+\n+        public UnboundAnnotationDefaultAttribute(AnnotationValue annotationDefault) {\n+            super(Attributes.ANNOTATION_DEFAULT);\n+            this.annotationDefault = annotationDefault;\n+        }\n+\n+        @Override\n+        public AnnotationValue defaultValue() {\n+            return annotationDefault;\n+        }\n+    }\n+\n+    public static final class UnboundSourceFileAttribute extends UnboundAttribute<SourceFileAttribute>\n+            implements SourceFileAttribute {\n+        private final Utf8Entry sourceFile;\n+\n+        public UnboundSourceFileAttribute(Utf8Entry sourceFile) {\n+            super(Attributes.SOURCE_FILE);\n+            this.sourceFile = sourceFile;\n+        }\n+\n+        @Override\n+        public Utf8Entry sourceFile() {\n+            return sourceFile;\n+        }\n+\n+    }\n+\n+    public static final class UnboundStackMapTableAttribute extends UnboundAttribute<StackMapTableAttribute>\n+            implements StackMapTableAttribute {\n+        private final List<StackMapFrameInfo> entries;\n+\n+        public UnboundStackMapTableAttribute(List<StackMapFrameInfo> entries) {\n+            super(Attributes.STACK_MAP_TABLE);\n+            this.entries = List.copyOf(entries);\n+        }\n+\n+        @Override\n+        public List<StackMapFrameInfo> entries() {\n+            return entries;\n+        }\n+    }\n+\n+    public static final class UnboundInnerClassesAttribute\n+            extends UnboundAttribute<InnerClassesAttribute>\n+            implements InnerClassesAttribute {\n+        private final List<InnerClassInfo> innerClasses;\n+\n+        public UnboundInnerClassesAttribute(List<InnerClassInfo> innerClasses) {\n+            super(Attributes.INNER_CLASSES);\n+            this.innerClasses = List.copyOf(innerClasses);\n+        }\n+\n+        @Override\n+        public List<InnerClassInfo> classes() {\n+            return innerClasses;\n+        }\n+    }\n+\n+    public static final class UnboundRecordAttribute\n+            extends UnboundAttribute<RecordAttribute>\n+            implements RecordAttribute {\n+        private final List<RecordComponentInfo> components;\n+\n+        public UnboundRecordAttribute(List<RecordComponentInfo> components) {\n+            super(Attributes.RECORD);\n+            this.components = List.copyOf(components);\n+        }\n+\n+        @Override\n+        public List<RecordComponentInfo> components() {\n+            return components;\n+        }\n+    }\n+\n+    public static final class UnboundEnclosingMethodAttribute\n+            extends UnboundAttribute<EnclosingMethodAttribute>\n+            implements EnclosingMethodAttribute {\n+        private final ClassEntry classEntry;\n+        private final NameAndTypeEntry method;\n+\n+        public UnboundEnclosingMethodAttribute(ClassEntry classEntry, NameAndTypeEntry method) {\n+            super(Attributes.ENCLOSING_METHOD);\n+            this.classEntry = classEntry;\n+            this.method = method;\n+        }\n+\n+        @Override\n+        public ClassEntry enclosingClass() {\n+            return classEntry;\n+        }\n+\n+        @Override\n+        public Optional<NameAndTypeEntry> enclosingMethod() {\n+            return Optional.ofNullable(method);\n+        }\n+    }\n+\n+    public static final class UnboundMethodParametersAttribute\n+            extends UnboundAttribute<MethodParametersAttribute>\n+            implements MethodParametersAttribute {\n+        private final List<MethodParameterInfo> parameters;\n+\n+        public UnboundMethodParametersAttribute(List<MethodParameterInfo> parameters) {\n+            super(Attributes.METHOD_PARAMETERS);\n+            this.parameters = List.copyOf(parameters);\n+        }\n+\n+        @Override\n+        public List<MethodParameterInfo> parameters() {\n+            return parameters;\n+        }\n+    }\n+\n+    public static final class UnboundModuleTargetAttribute\n+            extends UnboundAttribute<ModuleTargetAttribute>\n+            implements ModuleTargetAttribute {\n+        final Utf8Entry moduleTarget;\n+\n+        public UnboundModuleTargetAttribute(Utf8Entry moduleTarget) {\n+            super(Attributes.MODULE_TARGET);\n+            this.moduleTarget = moduleTarget;\n+        }\n+\n+        @Override\n+        public Utf8Entry targetPlatform() {\n+            return moduleTarget;\n+        }\n+    }\n+\n+    public static final class UnboundModuleMainClassAttribute\n+            extends UnboundAttribute<ModuleMainClassAttribute>\n+            implements ModuleMainClassAttribute {\n+        final ClassEntry mainClass;\n+\n+        public UnboundModuleMainClassAttribute(ClassEntry mainClass) {\n+            super(Attributes.MODULE_MAIN_CLASS);\n+            this.mainClass = mainClass;\n+        }\n+\n+        @Override\n+        public ClassEntry mainClass() {\n+            return mainClass;\n+        }\n+    }\n+\n+    public static final class UnboundModuleHashesAttribute\n+            extends UnboundAttribute<ModuleHashesAttribute>\n+            implements ModuleHashesAttribute {\n+        private final Utf8Entry algorithm;\n+        private final List<ModuleHashInfo> hashes;\n+\n+        public UnboundModuleHashesAttribute(Utf8Entry algorithm, List<ModuleHashInfo> hashes) {\n+            super(Attributes.MODULE_HASHES);\n+            this.algorithm = algorithm;\n+            this.hashes = List.copyOf(hashes);\n+        }\n+\n+        @Override\n+        public Utf8Entry algorithm() {\n+            return algorithm;\n+        }\n+\n+        @Override\n+        public List<ModuleHashInfo> hashes() {\n+            return hashes;\n+        }\n+    }\n+\n+    public static final class UnboundModulePackagesAttribute\n+            extends UnboundAttribute<ModulePackagesAttribute>\n+            implements ModulePackagesAttribute {\n+        private final Collection<PackageEntry> packages;\n+\n+        public UnboundModulePackagesAttribute(Collection<PackageEntry> packages) {\n+            super(Attributes.MODULE_PACKAGES);\n+            this.packages = List.copyOf(packages);\n+        }\n+\n+        @Override\n+        public List<PackageEntry> packages() {\n+            return List.copyOf(packages);\n+        }\n+    }\n+\n+    public static final class UnboundModuleResolutionAttribute\n+            extends UnboundAttribute<ModuleResolutionAttribute>\n+            implements ModuleResolutionAttribute {\n+        private final int resolutionFlags;\n+\n+        public UnboundModuleResolutionAttribute(int flags) {\n+            super(Attributes.MODULE_RESOLUTION);\n+            resolutionFlags = flags;\n+        }\n+\n+        @Override\n+        public int resolutionFlags() {\n+            return resolutionFlags;\n+        }\n+    }\n+\n+    public static final class UnboundPermittedSubclassesAttribute\n+            extends UnboundAttribute<PermittedSubclassesAttribute>\n+            implements PermittedSubclassesAttribute {\n+        private final List<ClassEntry> permittedSubclasses;\n+\n+        public UnboundPermittedSubclassesAttribute(List<ClassEntry> permittedSubclasses) {\n+            super(Attributes.PERMITTED_SUBCLASSES);\n+            this.permittedSubclasses = List.copyOf(permittedSubclasses);\n+        }\n+\n+        @Override\n+        public List<ClassEntry> permittedSubclasses() {\n+            return permittedSubclasses;\n+        }\n+    }\n+\n+    public static final class UnboundNestMembersAttribute\n+            extends UnboundAttribute<NestMembersAttribute>\n+            implements NestMembersAttribute {\n+        private final List<ClassEntry> memberEntries;\n+\n+        public UnboundNestMembersAttribute(List<ClassEntry> memberEntries) {\n+            super(Attributes.NEST_MEMBERS);\n+            this.memberEntries = List.copyOf(memberEntries);\n+        }\n+\n+        @Override\n+        public List<ClassEntry> nestMembers() {\n+            return memberEntries;\n+        }\n+    }\n+\n+    public static final class UnboundNestHostAttribute\n+            extends UnboundAttribute<NestHostAttribute>\n+            implements NestHostAttribute {\n+        private final ClassEntry hostEntry;\n+\n+        public UnboundNestHostAttribute(ClassEntry hostEntry) {\n+            super(Attributes.NEST_HOST);\n+            this.hostEntry = hostEntry;\n+        }\n+\n+        @Override\n+        public ClassEntry nestHost() {\n+            return hostEntry;\n+        }\n+    }\n+\n+    public static final class UnboundCompilationIDAttribute\n+            extends UnboundAttribute<CompilationIDAttribute>\n+            implements CompilationIDAttribute {\n+        private final Utf8Entry idEntry;\n+\n+        public UnboundCompilationIDAttribute(Utf8Entry idEntry) {\n+            super(Attributes.COMPILATION_ID);\n+            this.idEntry = idEntry;\n+        }\n+\n+        @Override\n+        public Utf8Entry compilationId() {\n+            return idEntry;\n+        }\n+    }\n+\n+    public static final class UnboundSourceIDAttribute\n+            extends UnboundAttribute<SourceIDAttribute>\n+            implements SourceIDAttribute {\n+        private final Utf8Entry idEntry;\n+\n+        public UnboundSourceIDAttribute(Utf8Entry idEntry) {\n+            super(Attributes.SOURCE_ID);\n+            this.idEntry = idEntry;\n+        }\n+\n+        @Override\n+        public Utf8Entry sourceId() {\n+            return idEntry;\n+        }\n+    }\n+\n+    public static final class UnboundSourceDebugExtensionAttribute\n+        extends UnboundAttribute<SourceDebugExtensionAttribute>\n+            implements SourceDebugExtensionAttribute {\n+        private final byte[] contents;\n+\n+        public UnboundSourceDebugExtensionAttribute(byte[] contents) {\n+            super(Attributes.SOURCE_DEBUG_EXTENSION);\n+            this.contents = contents;\n+        }\n+\n+        @Override\n+        public byte[] contents() {\n+            return contents;\n+        }\n+    }\n+\n+    public static final class UnboundCharacterRangeTableAttribute\n+        extends UnboundAttribute<CharacterRangeTableAttribute>\n+            implements CharacterRangeTableAttribute {\n+        private final List<CharacterRangeInfo> ranges;\n+\n+        public UnboundCharacterRangeTableAttribute(List<CharacterRangeInfo> ranges) {\n+            super(Attributes.CHARACTER_RANGE_TABLE);\n+            this.ranges = List.copyOf(ranges);\n+        }\n+\n+        @Override\n+        public List<CharacterRangeInfo> characterRangeTable() {\n+            return ranges;\n+        }\n+    }\n+\n+    public static final class UnboundLineNumberTableAttribute\n+        extends UnboundAttribute<LineNumberTableAttribute>\n+            implements LineNumberTableAttribute {\n+        private final List<LineNumberInfo> lines;\n+\n+        public UnboundLineNumberTableAttribute(List<LineNumberInfo> lines) {\n+            super(Attributes.LINE_NUMBER_TABLE);\n+            this.lines = List.copyOf(lines);\n+        }\n+\n+        @Override\n+        public List<LineNumberInfo> lineNumbers() {\n+            return lines;\n+        }\n+    }\n+\n+    public static final class UnboundLocalVariableTableAttribute\n+        extends UnboundAttribute<LocalVariableTableAttribute>\n+            implements LocalVariableTableAttribute {\n+        private final List<LocalVariableInfo> locals;\n+\n+        public UnboundLocalVariableTableAttribute(List<LocalVariableInfo> locals) {\n+            super(Attributes.LOCAL_VARIABLE_TABLE);\n+            this.locals = List.copyOf(locals);\n+        }\n+\n+        @Override\n+        public List<LocalVariableInfo> localVariables() {\n+            return locals;\n+        }\n+    }\n+\n+    public static final class UnboundLocalVariableTypeTableAttribute\n+        extends UnboundAttribute<LocalVariableTypeTableAttribute>\n+            implements LocalVariableTypeTableAttribute {\n+        private final List<LocalVariableTypeInfo> locals;\n+\n+        public UnboundLocalVariableTypeTableAttribute(List<LocalVariableTypeInfo> locals) {\n+            super(Attributes.LOCAL_VARIABLE_TYPE_TABLE);\n+            this.locals = List.copyOf(locals);\n+        }\n+\n+        @Override\n+        public List<LocalVariableTypeInfo> localVariableTypes() {\n+            return locals;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeVisibleAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeVisibleAnnotationsAttribute>\n+            implements RuntimeVisibleAnnotationsAttribute {\n+        private final List<Annotation> elements;\n+\n+        public UnboundRuntimeVisibleAnnotationsAttribute(List<Annotation> elements) {\n+            super(Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<Annotation> annotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeInvisibleAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeInvisibleAnnotationsAttribute>\n+            implements RuntimeInvisibleAnnotationsAttribute {\n+        private final List<Annotation> elements;\n+\n+        public UnboundRuntimeInvisibleAnnotationsAttribute(List<Annotation> elements) {\n+            super(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<Annotation> annotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeVisibleParameterAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeVisibleParameterAnnotationsAttribute>\n+            implements RuntimeVisibleParameterAnnotationsAttribute {\n+        private final List<List<Annotation>> elements;\n+\n+        public UnboundRuntimeVisibleParameterAnnotationsAttribute(List<List<Annotation>> elements) {\n+            super(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<List<Annotation>> parameterAnnotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeInvisibleParameterAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeInvisibleParameterAnnotationsAttribute>\n+            implements RuntimeInvisibleParameterAnnotationsAttribute {\n+        private final List<List<Annotation>> elements;\n+\n+        public UnboundRuntimeInvisibleParameterAnnotationsAttribute(List<List<Annotation>> elements) {\n+            super(Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<List<Annotation>> parameterAnnotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeVisibleTypeAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeVisibleTypeAnnotationsAttribute>\n+            implements RuntimeVisibleTypeAnnotationsAttribute {\n+        private final List<TypeAnnotation> elements;\n+\n+        public UnboundRuntimeVisibleTypeAnnotationsAttribute(List<TypeAnnotation> elements) {\n+            super(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<TypeAnnotation> annotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public static final class UnboundRuntimeInvisibleTypeAnnotationsAttribute\n+            extends UnboundAttribute<RuntimeInvisibleTypeAnnotationsAttribute>\n+            implements RuntimeInvisibleTypeAnnotationsAttribute {\n+        private final List<TypeAnnotation> elements;\n+\n+        public UnboundRuntimeInvisibleTypeAnnotationsAttribute(List<TypeAnnotation> elements) {\n+            super(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        @Override\n+        public List<TypeAnnotation> annotations() {\n+            return elements;\n+        }\n+    }\n+\n+    public record UnboundCharacterRangeInfo(int startPc, int endPc,\n+                                            int characterRangeStart,\n+                                            int characterRangeEnd,\n+                                            int flags)\n+            implements CharacterRangeInfo { }\n+\n+    public record UnboundInnerClassInfo(ClassEntry innerClass,\n+                                        Optional<ClassEntry> outerClass,\n+                                        Optional<Utf8Entry> innerName,\n+                                        int flagsMask)\n+            implements InnerClassInfo {}\n+\n+    public record UnboundLineNumberInfo(int startPc, int lineNumber)\n+            implements LineNumberInfo { }\n+\n+    public record UnboundLocalVariableInfo(int startPc, int length,\n+                                           Utf8Entry name,\n+                                           Utf8Entry type,\n+                                           int slot)\n+            implements LocalVariableInfo { }\n+\n+    public record UnboundLocalVariableTypeInfo(int startPc, int length,\n+                                               Utf8Entry name,\n+                                               Utf8Entry signature,\n+                                               int slot)\n+            implements LocalVariableTypeInfo { }\n+\n+    public record UnboundMethodParameterInfo(Optional<Utf8Entry> name, int flagsMask)\n+            implements MethodParameterInfo {}\n+\n+    public record UnboundModuleExportInfo(PackageEntry exportedPackage,\n+                                          int exportsFlagsMask,\n+                                          List<ModuleEntry> exportsTo)\n+            implements ModuleExportInfo {\n+        public UnboundModuleExportInfo(PackageEntry exportedPackage, int exportsFlagsMask,\n+                                       List<ModuleEntry> exportsTo) {\n+            this.exportedPackage = exportedPackage;\n+            this.exportsFlagsMask = exportsFlagsMask;\n+            this.exportsTo = List.copyOf(exportsTo);\n+        }\n+    }\n+\n+    public record UnboundModuleHashInfo(ModuleEntry moduleName,\n+                                        byte[] hash) implements ModuleHashInfo { }\n+\n+    public record UnboundModuleOpenInfo(PackageEntry openedPackage, int opensFlagsMask,\n+                                        List<ModuleEntry> opensTo)\n+            implements ModuleOpenInfo {\n+        public UnboundModuleOpenInfo(PackageEntry openedPackage, int opensFlagsMask,\n+                                     List<ModuleEntry> opensTo) {\n+            this.openedPackage = openedPackage;\n+            this.opensFlagsMask = opensFlagsMask;\n+            this.opensTo = List.copyOf(opensTo);\n+        }\n+    }\n+\n+    public record UnboundModuleProvideInfo(ClassEntry provides,\n+                                           List<ClassEntry> providesWith)\n+            implements ModuleProvideInfo {\n+        public UnboundModuleProvideInfo(ClassEntry provides, List<ClassEntry> providesWith) {\n+            this.provides = provides;\n+            this.providesWith = List.copyOf(providesWith);\n+        }\n+    }\n+\n+    public record UnboundModuleRequiresInfo(ModuleEntry requires, int requiresFlagsMask,\n+                                            Optional<Utf8Entry> requiresVersion)\n+            implements ModuleRequireInfo {}\n+\n+    public record UnboundRecordComponentInfo(Utf8Entry name,\n+                                             Utf8Entry descriptor,\n+                                             List<Attribute<?>> attributes)\n+            implements RecordComponentInfo {\n+        public UnboundRecordComponentInfo(Utf8Entry name, Utf8Entry descriptor, List<Attribute<?>> attributes) {\n+            this.name = name;\n+            this.descriptor = descriptor;\n+            this.attributes = List.copyOf(attributes);\n+        }\n+    }\n+\n+    public record UnboundTypeAnnotation(TargetInfo targetInfo,\n+                                        List<TypePathComponent> targetPath,\n+                                        Utf8Entry className,\n+                                        List<AnnotationElement> elements) implements TypeAnnotation {\n+\n+        public UnboundTypeAnnotation(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n+                                     Utf8Entry className, List<AnnotationElement> elements) {\n+            this.targetInfo = targetInfo;\n+            this.targetPath = List.copyOf(targetPath);\n+            this.className = className;\n+            this.elements = List.copyOf(elements);\n+        }\n+\n+        private int labelToBci(LabelContext lr, Label label) {\n+            \/\/helper method to avoid NPE\n+            if (lr == null) throw new IllegalArgumentException(\"Illegal targetType '%s' in TypeAnnotation outside of Code attribute\".formatted(targetInfo.targetType()));\n+            return lr.labelToBci(label);\n+        }\n+\n+        @Override\n+        public void writeTo(BufWriter buf) {\n+            LabelContext lr = ((BufWriterImpl) buf).labelContext();\n+            \/\/ target_type\n+            buf.writeU1(targetInfo.targetType().targetTypeValue());\n+\n+            \/\/ target_info\n+            switch (targetInfo) {\n+                case TypeParameterTarget tpt -> buf.writeU1(tpt.typeParameterIndex());\n+                case SupertypeTarget st -> buf.writeU2(st.supertypeIndex());\n+                case TypeParameterBoundTarget tpbt -> {\n+                    buf.writeU1(tpbt.typeParameterIndex());\n+                    buf.writeU1(tpbt.boundIndex());\n+                }\n+                case EmptyTarget et -> {\n+                    \/\/ nothing to write\n+                }\n+                case FormalParameterTarget fpt -> buf.writeU1(fpt.formalParameterIndex());\n+                case ThrowsTarget tt -> buf.writeU2(tt.throwsTargetIndex());\n+                case LocalVarTarget lvt -> {\n+                    buf.writeU2(lvt.table().size());\n+                    for (var e : lvt.table()) {\n+                        int startPc = labelToBci(lr, e.startLabel());\n+                        buf.writeU2(startPc);\n+                        buf.writeU2(labelToBci(lr, e.endLabel()) - startPc);\n+                        buf.writeU2(e.index());\n+                    }\n+                }\n+                case CatchTarget ct -> buf.writeU2(ct.exceptionTableIndex());\n+                case OffsetTarget ot -> buf.writeU2(labelToBci(lr, ot.target()));\n+                case TypeArgumentTarget tat -> {\n+                    buf.writeU2(labelToBci(lr, tat.target()));\n+                    buf.writeU1(tat.typeArgumentIndex());\n+                }\n+            }\n+\n+            \/\/ target_path\n+            buf.writeU1(targetPath().size());\n+            for (TypePathComponent component : targetPath()) {\n+                buf.writeU1(component.typePathKind().tag());\n+                buf.writeU1(component.typeArgumentIndex());\n+            }\n+\n+            \/\/ type_index\n+            buf.writeIndex(className);\n+\n+            \/\/ element_value_pairs\n+            buf.writeU2(elements.size());\n+            for (AnnotationElement pair : elements()) {\n+                buf.writeIndex(pair.name());\n+                pair.value().writeTo(buf);\n+            }\n+        }\n+    }\n+\n+    public record TypePathComponentImpl(TypeAnnotation.TypePathComponent.Kind typePathKind, int typeArgumentIndex)\n+            implements TypeAnnotation.TypePathComponent {}\n+\n+    public static final class UnboundModuleAttribute extends UnboundAttribute<ModuleAttribute> implements ModuleAttribute {\n+        private final ModuleEntry moduleName;\n+        private final int moduleFlags;\n+        private final Utf8Entry moduleVersion;\n+        private final List<ModuleRequireInfo> requires;\n+        private final List<ModuleExportInfo> exports;\n+        private final List<ModuleOpenInfo> opens;\n+        private final List<ClassEntry> uses;\n+        private final List<ModuleProvideInfo> provides;\n+\n+        public UnboundModuleAttribute(ModuleEntry moduleName,\n+                                      int moduleFlags,\n+                                      Utf8Entry moduleVersion,\n+                                      Collection<ModuleRequireInfo> requires,\n+                                      Collection<ModuleExportInfo> exports,\n+                                      Collection<ModuleOpenInfo> opens,\n+                                      Collection<ClassEntry> uses,\n+                                      Collection<ModuleProvideInfo> provides)\n+        {\n+            super(Attributes.MODULE);\n+            this.moduleName = moduleName;\n+            this.moduleFlags = moduleFlags;\n+            this.moduleVersion = moduleVersion;\n+            this.requires = List.copyOf(requires);\n+            this.exports = List.copyOf(exports);\n+            this.opens = List.copyOf(opens);\n+            this.uses = List.copyOf(uses);\n+            this.provides = List.copyOf(provides);\n+        }\n+\n+        @Override\n+        public ModuleEntry moduleName() {\n+            return moduleName;\n+        }\n+\n+        @Override\n+        public int moduleFlagsMask() {\n+            return moduleFlags;\n+        }\n+\n+        @Override\n+        public Optional<Utf8Entry> moduleVersion() {\n+            return Optional.ofNullable(moduleVersion);\n+        }\n+\n+        @Override\n+        public List<ModuleRequireInfo> requires() {\n+            return requires;\n+        }\n+\n+        @Override\n+        public List<ModuleExportInfo> exports() {\n+            return exports;\n+        }\n+\n+        @Override\n+        public List<ModuleOpenInfo> opens() {\n+            return opens;\n+        }\n+\n+        @Override\n+        public List<ClassEntry> uses() {\n+            return uses;\n+        }\n+\n+        @Override\n+        public List<ModuleProvideInfo> provides() {\n+            return provides;\n+        }\n+    }\n+\n+    public static abstract non-sealed class AdHocAttribute<T extends Attribute<T>>\n+            extends UnboundAttribute<T> {\n+\n+        public AdHocAttribute(AttributeMapper<T> mapper) {\n+            super(mapper);\n+        }\n+\n+        public abstract void writeBody(BufWriter b);\n+\n+        @Override\n+        public void writeTo(BufWriter b) {\n+            b.writeIndex(b.constantPool().utf8Entry(mapper.name()));\n+            b.writeInt(0);\n+            int start = b.size();\n+            writeBody(b);\n+            int written = b.size() - start;\n+            b.patchInt(start - 4, 4, written);\n+        }\n+    }\n+\n+    public static final class EmptyBootstrapAttribute\n+            extends UnboundAttribute<BootstrapMethodsAttribute>\n+            implements BootstrapMethodsAttribute {\n+        public EmptyBootstrapAttribute() {\n+            super(Attributes.BOOTSTRAP_METHODS);\n+        }\n+\n+        @Override\n+        public int bootstrapMethodsSize() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public List<BootstrapMethodEntry> bootstrapMethods() {\n+            return List.of();\n+        }\n+    }\n+\n+    public static abstract sealed class CustomAttribute<T extends CustomAttribute<T>>\n+            extends UnboundAttribute<T>\n+            permits jdk.internal.classfile.CustomAttribute {\n+\n+        public CustomAttribute(AttributeMapper<T> mapper) {\n+            super(mapper);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":950,"deletions":0,"binary":false,"changes":950,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl;\n+package jdk.internal.classfile.impl;\n@@ -35,3 +35,3 @@\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n@@ -40,1 +40,1 @@\n-import static jdk.classfile.Classfile.ACC_STATIC;\n+import static jdk.internal.classfile.Classfile.ACC_STATIC;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/Util.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n@@ -29,3 +29,3 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.impl.verifier.VerificationSignature.BasicType;\n-import static jdk.classfile.impl.verifier.VerificationSignature.BasicType.*;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.impl.verifier.VerificationSignature.BasicType;\n+import static jdk.internal.classfile.impl.verifier.VerificationSignature.BasicType.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationBytecodes.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationBytecodes.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationFrame.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationSignature.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationSignature.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n@@ -27,1 +27,1 @@\n-import static jdk.classfile.impl.verifier.VerificationType.*;\n+import static jdk.internal.classfile.impl.verifier.VerificationType.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationTable.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n@@ -32,4 +32,4 @@\n-import jdk.classfile.impl.ClassHierarchyImpl;\n-import jdk.classfile.impl.Util;\n-import static jdk.classfile.impl.verifier.VerifierImpl.*;\n-import static jdk.classfile.impl.verifier.VerificationSignature.BasicType.*;\n+import jdk.internal.classfile.impl.ClassHierarchyImpl;\n+import jdk.internal.classfile.impl.Util;\n+import static jdk.internal.classfile.impl.verifier.VerifierImpl.*;\n+import static jdk.internal.classfile.impl.verifier.VerificationSignature.BasicType.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationType.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerificationType.java","status":"renamed"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.classfile.impl.verifier;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.CodeImpl;\n+import jdk.internal.classfile.impl.Util;\n+\n+public final class VerificationWrapper {\n+    private final ClassModel clm;\n+    private final ConstantPoolWrapper cp;\n+\n+    public VerificationWrapper(ClassModel clm) {\n+        this.clm = clm;\n+        this.cp = new ConstantPoolWrapper(clm.constantPool());\n+     }\n+\n+    String thisClassName() {\n+        return clm.thisClass().asInternalName();\n+    }\n+\n+    int majorVersion() {\n+        return clm.majorVersion();\n+    }\n+\n+    String superclassName() {\n+        return clm.superclass().map(ClassEntry::asInternalName).orElse(null);\n+    }\n+\n+    Iterable<String> interfaceNames() {\n+        return Util.mappedList(clm.interfaces(), ClassEntry::asInternalName);\n+    }\n+\n+    ConstantPoolWrapper constantPool() {\n+        return cp;\n+    }\n+\n+    Iterable<MethodWrapper> methods() {\n+        return clm.methods().stream().map(m -> new MethodWrapper(m)).toList();\n+    }\n+\n+    boolean findField(String name, String sig) {\n+        for (var f : clm.fields())\n+            if (f.fieldName().stringValue().equals(name) && f.fieldType().stringValue().equals(sig))\n+                return true;\n+        return false;\n+    }\n+\n+    class MethodWrapper {\n+\n+        final MethodModel m;\n+        private final CodeImpl c;\n+        private final List<int[]> exc;\n+\n+        MethodWrapper(MethodModel m) {\n+            this.m = m;\n+            this.c = (CodeImpl)m.code().orElse(null);\n+            exc = new LinkedList<>();\n+            if (c != null) c.iterateExceptionHandlers((start, end, handler, catchType) -> {\n+                exc.add(new int[] {start, end, handler, catchType});\n+            });\n+        }\n+\n+        ConstantPoolWrapper constantPool() {\n+            return cp;\n+        }\n+\n+        boolean isNative() {\n+            return m.flags().has(AccessFlag.NATIVE);\n+        }\n+\n+        boolean isAbstract() {\n+            return m.flags().has(AccessFlag.ABSTRACT);\n+        }\n+\n+        boolean isBridge() {\n+            return m.flags().has(AccessFlag.BRIDGE);\n+        }\n+\n+        boolean isStatic() {\n+            return m.flags().has(AccessFlag.STATIC);\n+        }\n+\n+        String name() {\n+            return m.methodName().stringValue();\n+        }\n+\n+        int maxStack() {\n+            return c == null ? 0 : c.maxStack();\n+        }\n+\n+        int maxLocals() {\n+            return c == null ? 0 : c.maxLocals();\n+        }\n+\n+        String descriptor() {\n+            return m.methodType().stringValue();\n+        }\n+\n+        int codeLength() {\n+            return c == null ? 0 : c.codeLength();\n+        }\n+\n+        byte[] codeArray() {\n+            return c == null ? null : c.codeArray();\n+        }\n+\n+        List<int[]> exceptionTable() {\n+            return exc;\n+        }\n+\n+        List<LocalVariableInfo> localVariableTable() {\n+            var attro = c.findAttribute(Attributes.LOCAL_VARIABLE_TABLE);\n+            return attro.map(lvta -> lvta.localVariables()).orElse(List.of());\n+        }\n+\n+        byte[] stackMapTableRawData() {\n+            var attro = c.findAttribute(Attributes.STACK_MAP_TABLE);\n+            return attro.map(attr -> ((BoundAttribute) attr).contents()).orElse(null);\n+        }\n+\n+    }\n+\n+    static class ConstantPoolWrapper {\n+\n+        private final ConstantPool cp;\n+\n+        ConstantPoolWrapper(ConstantPool cp) {\n+            this.cp = cp;\n+        }\n+\n+        int entryCount() {\n+            return cp.entryCount();\n+        }\n+\n+        String classNameAt(int index) {\n+            return ((ClassEntry)cp.entryByIndex(index)).asInternalName();\n+        }\n+\n+        String dynamicConstantSignatureAt(int index) {\n+            return ((DynamicConstantPoolEntry)cp.entryByIndex(index)).type().stringValue();\n+        }\n+\n+        int tagAt(int index) {\n+            return cp.entryByIndex(index).tag();\n+        }\n+\n+        private NameAndTypeEntry _refNameType(int index) {\n+            var e = cp.entryByIndex(index);\n+            return (e instanceof DynamicConstantPoolEntry de) ? de.nameAndType() : ((MemberRefEntry)e).nameAndType();\n+        }\n+\n+        String refNameAt(int index) {\n+            return _refNameType(index).name().stringValue();\n+        }\n+\n+        String refSignatureAt(int index) {\n+            return _refNameType(index).type().stringValue();\n+        }\n+\n+        int refClassIndexAt(int index) {\n+            return ((MemberRefEntry)cp.entryByIndex(index)).owner().index();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationWrapper.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.impl.verifier;\n+package jdk.internal.classfile.impl.verifier;\n@@ -31,11 +31,11 @@\n-import jdk.classfile.ClassHierarchyResolver;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.components.ClassPrinter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.impl.ClassHierarchyImpl;\n-import jdk.classfile.impl.RawBytecodeHelper;\n-import static jdk.classfile.impl.RawBytecodeHelper.ILLEGAL;\n-import jdk.classfile.impl.verifier.VerificationWrapper.ConstantPoolWrapper;\n-import static jdk.classfile.impl.verifier.VerificationSignature.BasicType.*;\n-import jdk.classfile.impl.verifier.VerificationSignature.BasicType;\n-import static jdk.classfile.impl.verifier.VerificationFrame.FLAG_THIS_UNINIT;\n+import jdk.internal.classfile.ClassHierarchyResolver;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.impl.ClassHierarchyImpl;\n+import jdk.internal.classfile.impl.RawBytecodeHelper;\n+import static jdk.internal.classfile.impl.RawBytecodeHelper.ILLEGAL;\n+import jdk.internal.classfile.impl.verifier.VerificationWrapper.ConstantPoolWrapper;\n+import static jdk.internal.classfile.impl.verifier.VerificationSignature.BasicType.*;\n+import jdk.internal.classfile.impl.verifier.VerificationSignature.BasicType;\n+import static jdk.internal.classfile.impl.verifier.VerificationFrame.FLAG_THIS_UNINIT;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":12,"deletions":12,"binary":false,"changes":24,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/impl\/verifier\/VerifierImpl.java","status":"renamed"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models an array load instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface ArrayLoadInstruction extends Instruction\n+        permits AbstractInstruction.UnboundArrayLoadInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an array load instruction}\n+     *\n+     * @param op the opcode for the specific type of array load instruction,\n+     *           which must be of kind {@link Opcode.Kind#ARRAY_LOAD}\n+     *\/\n+    static ArrayLoadInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.ARRAY_LOAD);\n+        return new AbstractInstruction.UnboundArrayLoadInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ArrayLoadInstruction.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models an array store instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface ArrayStoreInstruction extends Instruction\n+        permits AbstractInstruction.UnboundArrayStoreInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an array store instruction}\n+     *\n+     * @param op the opcode for the specific type of array store instruction,\n+     *           which must be of kind {@link Opcode.Kind#ARRAY_STORE}\n+     *\/\n+    static ArrayStoreInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.ARRAY_STORE);\n+        return new AbstractInstruction.UnboundArrayStoreInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ArrayStoreInstruction.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a branching instruction (conditional or unconditional) in the {@code\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n+ * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface BranchInstruction extends Instruction\n+        permits AbstractInstruction.BoundBranchInstruction,\n+                AbstractInstruction.UnboundBranchInstruction {\n+    \/**\n+     * {@return the target of the branch}\n+     *\/\n+    Label target();\n+\n+    \/**\n+     * {@return a branch instruction}\n+     *\n+     * @param op the opcode for the specific type of branch instruction,\n+     *           which must be of kind {@link Opcode.Kind#BRANCH}\n+     *\/\n+    static BranchInstruction of(Opcode op, Label target) {\n+        Util.checkKind(op, Opcode.Kind.BRANCH);\n+        return new AbstractInstruction.UnboundBranchInstruction(op, target);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/BranchInstruction.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundCharacterRange;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ *\/\n+public sealed interface CharacterRange extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundCharacterRange, BoundCharacterRange {\n+    \/**\n+     * {@return the start of the instruction range}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end of the instruction range}\n+     *\/\n+    Label endScope();\n+\n+    \/**\n+     * {@return the encoded start of the character range region (inclusive)}\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeStart();\n+\n+    \/**\n+     * {@return the encoded end of the character range region (exclusive)}.\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeEnd();\n+\n+    \/**\n+     * A flags word, indicating the kind of range.  Multiple flag bits\n+     * may be set.  Valid flags include\n+     * {@link jdk.internal.classfile.Classfile#CRT_STATEMENT},\n+     * {@link jdk.internal.classfile.Classfile#CRT_BLOCK},\n+     * {@link jdk.internal.classfile.Classfile#CRT_ASSIGNMENT},\n+     * {@link jdk.internal.classfile.Classfile#CRT_FLOW_CONTROLLER},\n+     * {@link jdk.internal.classfile.Classfile#CRT_FLOW_TARGET},\n+     * {@link jdk.internal.classfile.Classfile#CRT_INVOKE},\n+     * {@link jdk.internal.classfile.Classfile#CRT_CREATE},\n+     * {@link jdk.internal.classfile.Classfile#CRT_BRANCH_TRUE},\n+     * {@link jdk.internal.classfile.Classfile#CRT_BRANCH_FALSE}.\n+     *\n+     * @see jdk.internal.classfile.attribute.CharacterRangeInfo#flags()\n+     *\n+     * @return the flags\n+     *\/\n+    int flags();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/CharacterRange.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.instruction;\n+package jdk.internal.classfile.instruction;\n@@ -29,9 +29,9 @@\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ConstantInstruction.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ConstantInstruction.java","status":"renamed"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a primitive conversion instruction in the {@code code} array of a\n+ * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n+ * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface ConvertInstruction extends Instruction\n+        permits AbstractInstruction.UnboundConvertInstruction {\n+    \/**\n+     * {@return the source type to convert from}\n+     *\/\n+    TypeKind fromType();\n+\n+    \/**\n+     * {@return the destination type to convert to}\n+     *\/\n+    TypeKind toType();\n+\n+    \/**\n+     * {@return A conversion instruction}\n+     *\n+     * @param fromType the type to convert from\n+     * @param toType the type to convert to\n+     *\/\n+    static ConvertInstruction of(TypeKind fromType, TypeKind toType) {\n+        return of(BytecodeHelpers.convertOpcode(fromType, toType));\n+    }\n+\n+    \/**\n+     * {@return a conversion instruction}\n+     *\n+     * @param op the opcode for the specific type of conversion instruction,\n+     *           which must be of kind {@link Opcode.Kind#CONVERT}\n+     *\/\n+    static ConvertInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.CONVERT);\n+        return new AbstractInstruction.UnboundConvertInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ConvertInstruction.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.instruction;\n+package jdk.internal.classfile.instruction;\n@@ -30,6 +30,6 @@\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.Label;\n-import jdk.classfile.PseudoInstruction;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ExceptionCatch.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/ExceptionCatch.java","status":"renamed"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a field access instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface FieldInstruction extends Instruction\n+        permits AbstractInstruction.BoundFieldInstruction, AbstractInstruction.UnboundFieldInstruction {\n+    \/**\n+     * {@return the {@link FieldRefEntry} constant described by this instruction}\n+     *\/\n+    FieldRefEntry field();\n+\n+    \/**\n+     * {@return the class holding the field}\n+     *\/\n+    default ClassEntry owner() {\n+        return field().owner();\n+    }\n+\n+    \/**\n+     * {@return the name of the field}\n+     *\/\n+    default Utf8Entry name() {\n+        return field().nameAndType().name();\n+    }\n+\n+    \/**\n+     * {@return the field descriptor of the field}\n+     *\/\n+    default Utf8Entry type() {\n+        return field().nameAndType().type();\n+    }\n+\n+    \/**\n+     * {@return a symbolic descriptor for the type of the field}\n+     *\/\n+    default ClassDesc typeSymbol() {\n+        return ClassDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param field a constant pool entry describing the field\n+     *\/\n+    static FieldInstruction of(Opcode op, FieldRefEntry field) {\n+        Util.checkKind(op, Opcode.Kind.FIELD_ACCESS);\n+        return new AbstractInstruction.UnboundFieldInstruction(op, field);\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param owner the class holding the field\n+     * @param name the name of the field\n+     * @param type the field descriptor\n+     *\/\n+    static FieldInstruction of(Opcode op,\n+                               ClassEntry owner,\n+                               Utf8Entry name,\n+                               Utf8Entry type) {\n+        return of(op, owner, TemporaryConstantPool.INSTANCE.natEntry(name, type));\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param owner the class holding the field\n+     * @param nameAndType the name and field descriptor of the field\n+     *\/\n+    static FieldInstruction of(Opcode op,\n+                               ClassEntry owner,\n+                               NameAndTypeEntry nameAndType) {\n+        return of(op, TemporaryConstantPool.INSTANCE.fieldRefEntry(owner, nameAndType));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/FieldInstruction.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a local variable increment instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface IncrementInstruction extends Instruction\n+        permits AbstractInstruction.BoundIncrementInstruction,\n+                AbstractInstruction.UnboundIncrementInstruction {\n+    \/**\n+     * {@return the local variable slot to increment}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the value to increment by}\n+     *\/\n+    int constant();\n+\n+    \/**\n+     * {@return an increment instruction}\n+     *\n+     * @param slot the local variable slot to increment\n+     * @param constant the value to increment by\n+     *\/\n+    static IncrementInstruction of(int slot, int constant) {\n+        return new AbstractInstruction.UnboundIncrementInstruction(slot, constant);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/IncrementInstruction.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models an {@code invokedynamic} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface InvokeDynamicInstruction extends Instruction\n+        permits AbstractInstruction.BoundInvokeDynamicInstruction, AbstractInstruction.UnboundInvokeDynamicInstruction {\n+    \/**\n+     * {@return an {@link InvokeDynamicEntry} describing the call site}\n+     *\/\n+    InvokeDynamicEntry invokedynamic();\n+\n+    \/**\n+     * {@return the invocation name of the call site}\n+     *\/\n+    default Utf8Entry name() {\n+        return invokedynamic().name();\n+    }\n+\n+    \/**\n+     * {@return the invocation type of the call site}\n+     *\/\n+    default Utf8Entry type() {\n+        return invokedynamic().type();\n+    }\n+\n+    \/**\n+     * {@return the invocation type of the call site, as a symbolic descriptor}\n+     *\/\n+    default MethodTypeDesc typeSymbol() {\n+        return MethodTypeDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the bootstrap method of the call site}\n+     *\/\n+    default DirectMethodHandleDesc bootstrapMethod() {\n+        return invokedynamic().bootstrap()\n+                              .bootstrapMethod()\n+                              .asSymbol();\n+    }\n+\n+    \/**\n+     * {@return the bootstrap arguments of the call site}\n+     *\/\n+    default List<ConstantDesc> bootstrapArgs() {\n+        return Util.mappedList(invokedynamic().bootstrap().arguments(), new Function<>() {\n+            @Override\n+            public ConstantDesc apply(LoadableConstantEntry loadableConstantEntry) {\n+                return loadableConstantEntry.constantValue();\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * {@return an invokedynamic instruction}\n+     *\n+     * @param invokedynamic the constant pool entry describing the call site\n+     *\/\n+    static InvokeDynamicInstruction of(InvokeDynamicEntry invokedynamic) {\n+        return new AbstractInstruction.UnboundInvokeDynamicInstruction(invokedynamic);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.lang.constant.MethodTypeDesc;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a method invocation instruction in the {@code code} array of a {@code\n+ * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n+ * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n+ * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface InvokeInstruction extends Instruction\n+        permits AbstractInstruction.BoundInvokeInterfaceInstruction, AbstractInstruction.BoundInvokeInstruction, AbstractInstruction.UnboundInvokeInstruction {\n+    \/**\n+     * {@return the {@link MethodRefEntry} or {@link InterfaceMethodRefEntry}\n+     * constant described by this instruction}\n+     *\/\n+    MemberRefEntry method();\n+\n+    \/**\n+     * {@return whether the class holding the method is an interface}\n+     *\/\n+    boolean isInterface();\n+\n+    \/**\n+     * {@return for an {@code invokeinterface}, the {@code count} value, as\n+     * defined in JVMS 6.5}\n+     *\/\n+    int count();\n+\n+    \/**\n+     * {@return the class holding the method}\n+     *\/\n+    default ClassEntry owner() {\n+        return method().owner();\n+    }\n+\n+    \/**\n+     * {@return the name of the method}\n+     *\/\n+    default Utf8Entry name() {\n+        return method().nameAndType().name();\n+    }\n+\n+    \/**\n+     * {@return the method descriptor of the method}\n+     *\/\n+    default Utf8Entry type() {\n+        return method().nameAndType().type();\n+    }\n+\n+    \/**\n+     * {@return a symbolic descriptor for the method type}\n+     *\/\n+    default MethodTypeDesc typeSymbol() {\n+        return MethodTypeDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param method a constant pool entry describing the method\n+     *\/\n+    static InvokeInstruction of(Opcode op, MemberRefEntry method) {\n+        Util.checkKind(op, Opcode.Kind.INVOKE);\n+        return new AbstractInstruction.UnboundInvokeInstruction(op, method);\n+    }\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param owner the class holding the method\n+     * @param name the name of the method\n+     * @param type the method descriptor\n+     * @param isInterface whether the class holding the method is an interface\n+     *\/\n+    static InvokeInstruction of(Opcode op,\n+                                ClassEntry owner,\n+                                Utf8Entry name,\n+                                Utf8Entry type,\n+                                boolean isInterface) {\n+        return of(op, owner, TemporaryConstantPool.INSTANCE.natEntry(name, type), isInterface);\n+    }\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param owner the class holding the method\n+     * @param nameAndType the name and type of the method\n+     * @param isInterface whether the class holding the method is an interface\n+     *\/\n+    static InvokeInstruction of(Opcode op,\n+                                ClassEntry owner,\n+                                NameAndTypeEntry nameAndType,\n+                                boolean isInterface) {\n+        return of(op, isInterface\n+                      ? TemporaryConstantPool.INSTANCE.interfaceMethodRefEntry(owner, nameAndType)\n+                      : TemporaryConstantPool.INSTANCE.methodRefEntry(owner, nameAndType));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/InvokeInstruction.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.impl.LabelImpl;\n+\n+\/**\n+ * A pseudo-instruction which indicates that the specified label corresponds to\n+ * the current position in the {@code Code} attribute.  Delivered as a {@link\n+ * CodeElement} during traversal of the elements of a {@link CodeModel}.\n+ *\n+ * @see PseudoInstruction\n+ *\/\n+public sealed interface LabelTarget extends PseudoInstruction\n+        permits LabelImpl {\n+    Label label();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LabelTarget.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.impl.LineNumberImpl;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n+ *\n+ * @see PseudoInstruction\n+ *\/\n+public sealed interface LineNumber extends PseudoInstruction\n+        permits LineNumberImpl {\n+    int line();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LineNumber.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a local variable load instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface LoadInstruction extends Instruction\n+        permits AbstractInstruction.BoundLoadInstruction,\n+                AbstractInstruction.UnboundLoadInstruction {\n+    int slot();\n+\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a local variable load instruction}\n+     *\n+     * @param kind the type of the value to be loaded\n+     * @param slot the local varaible slot to load from\n+     *\/\n+    static LoadInstruction of(TypeKind kind, int slot) {\n+        return of(BytecodeHelpers.loadOpcode(kind, slot), slot);\n+    }\n+\n+    \/**\n+     * {@return a local variable load instruction}\n+     *\n+     * @param op the opcode for the specific type of load instruction,\n+     *           which must be of kind {@link Opcode.Kind#LOAD}\n+     * @param slot the local varaible slot to load from\n+     *\/\n+    static LoadInstruction of(Opcode op, int slot) {\n+        Util.checkKind(op, Opcode.Kind.LOAD);\n+        return new AbstractInstruction.UnboundLoadInstruction(op, slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LoadInstruction.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundLocalVariable;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ *\n+ * @see PseudoInstruction\n+ *\/\n+public sealed interface LocalVariable extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundLocalVariable, BoundLocalVariable {\n+    \/**\n+     * {@return the local variable slot}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the local variable name}\n+     *\/\n+    Utf8Entry name();\n+\n+    \/**\n+     * {@return the local variable field descriptor}\n+     *\/\n+    Utf8Entry type();\n+\n+    \/**\n+     * {@return the local variable type, as a symbolic descriptor}\n+     *\/\n+    default ClassDesc typeSymbol() {\n+        return ClassDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the start range of the local variable scope}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end range of the local variable scope}\n+     *\/\n+    Label endScope();\n+\n+    boolean writeTo(BufWriter buf);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.PseudoInstruction;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundLocalVariableType;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n+ * traversal of the elements of a {@link CodeModel}, according to the setting of\n+ * the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ *\/\n+public sealed interface LocalVariableType extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundLocalVariableType, BoundLocalVariableType {\n+    \/**\n+     * {@return the local variable slot}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the local variable name}\n+     *\/\n+    Utf8Entry name();\n+\n+    \/**\n+     * {@return the local variable signature}\n+     *\/\n+    Utf8Entry signature();\n+\n+    \/**\n+     * {@return the local variable signature}\n+     *\/\n+    default Signature signatureSymbol() {\n+        return Signature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the start range of the local variable scope}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end range of the local variable scope}\n+     *\/\n+    Label endScope();\n+\n+    boolean writeTo(BufWriter buf);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.util.List;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code lookupswitch} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface LookupSwitchInstruction extends Instruction\n+        permits AbstractInstruction.BoundLookupSwitchInstruction,\n+                AbstractInstruction.UnboundLookupSwitchInstruction {\n+    \/**\n+     * {@return the target of the default case}\n+     *\/\n+    Label defaultTarget();\n+\n+    \/**\n+     * {@return the cases of the switch}\n+     *\/\n+    List<SwitchCase> cases();\n+\n+    \/**\n+     * {@return a lookup switch instruction}\n+     *\n+     * @param defaultTarget the default target of the switch\n+     * @param cases the cases of the switch\n+     *\/\n+    static LookupSwitchInstruction of(Label defaultTarget, List<SwitchCase> cases) {\n+        return new AbstractInstruction.UnboundLookupSwitchInstruction(defaultTarget, cases);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LookupSwitchInstruction.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n+ * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface MonitorInstruction extends Instruction\n+        permits AbstractInstruction.UnboundMonitorInstruction {\n+\n+    \/**\n+     * {@return a monitor instruction}\n+     *\n+     * @param op the opcode for the specific type of monitor instruction,\n+     *           which must be of kind {@link Opcode.Kind#MONITOR}\n+     *\/\n+    static MonitorInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.MONITOR);\n+        return new AbstractInstruction.UnboundMonitorInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/MonitorInstruction.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface NewMultiArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewMultidimensionalArrayInstruction,\n+                AbstractInstruction.UnboundNewMultidimensionalArrayInstruction {\n+\n+    \/**\n+     * {@return the type of the array, as a symbolic descriptor}\n+     *\/\n+    ClassEntry arrayType();\n+\n+    \/**\n+     * {@return the number of dimensions of the aray}\n+     *\/\n+    int dimensions();\n+\n+    \/**\n+     * {@return a new multi-dimensional array instruction}\n+     *\n+     * @param arrayTypeEntry the type of the array\n+     * @param dimensions the number of dimensions of the array\n+     *\/\n+    static NewMultiArrayInstruction of(ClassEntry arrayTypeEntry,\n+                                       int dimensions) {\n+        return new AbstractInstruction.UnboundNewMultidimensionalArrayInstruction(arrayTypeEntry, dimensions);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Delivered as a {@link CodeElement} when traversing the elements\n+ * of a {@link CodeModel}.\n+ *\/\n+public sealed interface NewObjectInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewObjectInstruction, AbstractInstruction.UnboundNewObjectInstruction {\n+\n+    \/**\n+     * {@return the type of object to create}\n+     *\/\n+    ClassEntry className();\n+\n+    \/**\n+     * {@return a new object instruction}\n+     *\n+     * @param className the type of object to create\n+     *\/\n+    static NewObjectInstruction of(ClassEntry className) {\n+        return new AbstractInstruction.UnboundNewObjectInstruction(className);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewObjectInstruction.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code newarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface NewPrimitiveArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewPrimitiveArrayInstruction,\n+                AbstractInstruction.UnboundNewPrimitiveArrayInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a new primitive array instruction}\n+     *\n+     * @param typeKind the component type of the array\n+     *\/\n+    static NewPrimitiveArrayInstruction of(TypeKind typeKind) {\n+        return new AbstractInstruction.UnboundNewPrimitiveArrayInstruction(typeKind);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface NewReferenceArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewReferenceArrayInstruction, AbstractInstruction.UnboundNewReferenceArrayInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    ClassEntry componentType();\n+\n+    \/**\n+     * {@return a new reference array instruction}\n+     *\n+     * @param componentType the component type of the array\n+     *\/\n+    static NewReferenceArrayInstruction of(ClassEntry componentType) {\n+        return new AbstractInstruction.UnboundNewReferenceArrayInstruction(componentType);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models a {@code nop} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface NopInstruction extends Instruction\n+        permits AbstractInstruction.UnboundNopInstruction {\n+    \/**\n+     * {@return a no-op instruction}\n+     *\/\n+    static NopInstruction of() {\n+        return new AbstractInstruction.UnboundNopInstruction();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NopInstruction.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models an arithmetic operator instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#OPERATOR}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface OperatorInstruction extends Instruction\n+        permits AbstractInstruction.UnboundOperatorInstruction {\n+    \/**\n+     * {@return the operand type of the instruction}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an operator instruction}\n+     *\n+     * @param op the opcode for the specific type of array load instruction,\n+     *           which must be of kind {@link Opcode.Kind#OPERATOR}\n+     *\/\n+    static OperatorInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.OPERATOR);\n+        return new AbstractInstruction.UnboundOperatorInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/OperatorInstruction.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a return-from-method instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#RETURN}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface ReturnInstruction extends Instruction\n+        permits AbstractInstruction.UnboundReturnInstruction {\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a return instruction}\n+     *\n+     * @param typeKind the type of the return instruction\n+     *\/\n+    static ReturnInstruction of(TypeKind typeKind) {\n+        return of(BytecodeHelpers.returnOpcode(typeKind));\n+    }\n+\n+    \/**\n+     * {@return a return instruction}\n+     *\n+     * @param op the opcode for the specific type of return instruction,\n+     *           which must be of kind {@link Opcode.Kind#RETURN}\n+     *\/\n+    static ReturnInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.RETURN);\n+        return new AbstractInstruction.UnboundReturnInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ReturnInstruction.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a stack manipulation instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#STACK}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface StackInstruction extends Instruction\n+        permits AbstractInstruction.UnboundStackInstruction {\n+\n+    \/**\n+     * {@return a stack manipulation instruction}\n+     *\n+     * @param op the opcode for the specific type of stack instruction,\n+     *           which must be of kind {@link Opcode.Kind#STACK}\n+     *\/\n+    static StackInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.STACK);\n+        return new AbstractInstruction.UnboundStackInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StackInstruction.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models a local variable store instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#STORE}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface StoreInstruction extends Instruction\n+        permits AbstractInstruction.BoundStoreInstruction, AbstractInstruction.UnboundStoreInstruction {\n+    int slot();\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a local variable store instruction}\n+     *\n+     * @param kind the type of the value to be stored\n+     * @param slot the local varaible slot to store to\n+     *\/\n+    static StoreInstruction of(TypeKind kind, int slot) {\n+        return of(BytecodeHelpers.storeOpcode(kind, slot), slot);\n+    }\n+\n+    \/**\n+     * {@return a local variable store instruction}\n+     *\n+     * @param op the opcode for the specific type of store instruction,\n+     *           which must be of kind {@link Opcode.Kind#STORE}\n+     * @param slot the local varaible slot to store to\n+     *\/\n+    static StoreInstruction of(Opcode op, int slot) {\n+        Util.checkKind(op, Opcode.Kind.STORE);\n+        return new AbstractInstruction.UnboundStoreInstruction(op, slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StoreInstruction.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.instruction;\n+package jdk.internal.classfile.instruction;\n@@ -27,2 +27,2 @@\n-import jdk.classfile.Label;\n-import jdk.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/SwitchCase.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/SwitchCase.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.instruction;\n+package jdk.internal.classfile.instruction;\n@@ -29,5 +29,5 @@\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TableSwitchInstruction.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/instruction\/TableSwitchInstruction.java","status":"renamed"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+\n+\/**\n+ * Models an {@code athrow} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface ThrowInstruction extends Instruction\n+        permits AbstractInstruction.UnboundThrowInstruction {\n+\n+    \/**\n+     * {@return a throw instruction}\n+     *\/\n+    static ThrowInstruction of() {\n+        return new AbstractInstruction.UnboundThrowInstruction();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ThrowInstruction.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+\n+\/**\n+ * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\/\n+public sealed interface TypeCheckInstruction extends Instruction\n+        permits AbstractInstruction.BoundTypeCheckInstruction,\n+                AbstractInstruction.UnboundTypeCheckInstruction {\n+    ClassEntry type();\n+\n+    \/**\n+     * {@return a type check instruction}\n+     *\n+     * @param op the opcode for the specific type of type check instruction,\n+     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n+     * @param type the type against which to check or cast\n+     *\/\n+    static TypeCheckInstruction of(Opcode op, ClassEntry type) {\n+        Util.checkKind(op, Opcode.Kind.TYPE_CHECK);\n+        return new AbstractInstruction.UnboundTypeCheckInstruction(op, type);\n+    }\n+\n+    \/**\n+     * {@return a type check instruction}\n+     *\n+     * @param op the opcode for the specific type of type check instruction,\n+     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n+     * @param type the type against which to check or cast\n+     *\/\n+    static TypeCheckInstruction of(Opcode op, ClassDesc type) {\n+        return of(op, TemporaryConstantPool.INSTANCE.classEntry(TemporaryConstantPool.INSTANCE.utf8Entry(Util.toInternalName(type))));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TypeCheckInstruction.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.jdktypes;\n+package jdk.internal.classfile.jdktypes;\n@@ -28,2 +28,2 @@\n-import jdk.classfile.impl.ModuleDescImpl;\n-import static jdk.classfile.impl.ModuleDescImpl.*;\n+import jdk.internal.classfile.impl.ModuleDescImpl;\n+import static jdk.internal.classfile.impl.ModuleDescImpl.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/jdktypes\/ModuleDesc.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/jdktypes\/ModuleDesc.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.classfile.jdktypes;\n+package jdk.internal.classfile.jdktypes;\n@@ -28,2 +28,2 @@\n-import jdk.classfile.impl.PackageDescImpl;\n-import static jdk.classfile.impl.PackageDescImpl.*;\n+import jdk.internal.classfile.impl.PackageDescImpl;\n+import static jdk.internal.classfile.impl.PackageDescImpl.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/jdktypes\/PackageDesc.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/jdktypes\/PackageDesc.java","status":"renamed"},{"patch":"@@ -0,0 +1,461 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Classfile parsing, generation, and transformation<\/h2>\n+ * The {@code jdk.internal.classfile} package contains classes for reading, writing, and\n+ * modifying Java class files, as specified in Chapter 4 of the <a\n+ * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/index.html\">Java\n+ * Java Virtual Machine Specification<\/a>.\n+ *\n+ * <h2>Reading classfiles<\/h2>\n+ * The main class for reading classfiles is {@link jdk.internal.classfile.ClassModel}; we\n+ * convert bytes into a {@link jdk.internal.classfile.ClassModel} with {@link\n+ * jdk.internal.classfile.Classfile#parse(byte[], jdk.internal.classfile.Classfile.Option[])}:\n+ * <p>\n+ * {@snippet lang=java :\n+ * ClassModel cm = ClassModel.of(bytes);\n+ * }\n+ * <p>\n+ * There are several additional overloads of {@code parse} that let you specify\n+ * various processing options.\n+ * <p>\n+ * A {@link jdk.internal.classfile.ClassModel} is an immutable description of a class\n+ * file.  It provides accessor methods to get at class metadata (e.g., {@link\n+ * jdk.internal.classfile.ClassModel#thisClass()}, {@link jdk.internal.classfile.ClassModel#flags()}),\n+ * as well as subordinate classfile entities ({@link jdk.internal.classfile.ClassModel#fields()},\n+ * {@link jdk.internal.classfile.ClassModel#attributes()}). A {@link\n+ * jdk.internal.classfile.ClassModel} is inflated lazily; most parts of the classfile are\n+ * not parsed until they are actually needed.\n+ * <p>\n+ * We can enumerate the names of the fields and methods in a class by:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n+ * <p>\n+ * When we enumerate the methods, we get a {@link jdk.internal.classfile.MethodModel} for each method; like a\n+ * {@code ClassModel}, it gives us access to method metadata and\n+ * the ability to descend into subordinate entities such as the bytecodes of the\n+ * method body. In this way, a {@code ClassModel} is the root of a\n+ * tree, with children for fields, methods, and attributes, and {@code MethodModel} in\n+ * turn has its own children (attributes, {@code CodeModel}, etc.)\n+ * <p>\n+ * Methods like {@link jdk.internal.classfile.ClassModel#methods} allows us to traverse the class structure\n+ * explicitly, going straight to the parts we are interested in.  This is useful\n+ * for certain kinds of analysis, but if we wanted to process the whole\n+ * classfile, we may want something more organized.  A {@link\n+ * jdk.internal.classfile.ClassModel} also provides us with a view of the classfile as a\n+ * series of class <em>elements<\/em>, which may include methods, fields, attributes,\n+ * and more, and which can be distinguished with pattern matching.  We could\n+ * rewrite the above example as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n+ * <p>\n+ * The models returned as elements from traversing {@code ClassModel} can in\n+ * turn be sources of elements.  If we wanted to\n+ * traverse a classfile and enumerate all the classes for which we access fields\n+ * and methods, we can pick out the class elements that describe methods, then\n+ * in turn pick out the method elements that describe the code attribute, and\n+ * finally pick out the code elements that describe field access and invocation\n+ * instructions:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies1\"}\n+ * <p>\n+ * This same query could alternately be processed as a stream pipeline over\n+ * class elements:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies2\"}\n+ *\n+ * <h3>Models and elements<\/h3>\n+ * The view of classfiles presented by this API is framed in terms of\n+ * <em>models<\/em> and <em>elements<\/em>.  Models represent complex structures,\n+ * such as classes, methods, fields, record elements, or the code body of a\n+ * method.  Models can be explored either via random-access navigation (such as\n+ * the {@link jdk.internal.classfile.ClassModel#methods()} accessor) or as a linear\n+ * sequence of <em>elements<\/em>. (Elements can in turn also be models; a {@link\n+ * jdk.internal.classfile.FieldModel} is also an element of a class.) For each model type\n+ * (e.g., {@link jdk.internal.classfile.MethodModel}), there is a corresponding element\n+ * type ({@link jdk.internal.classfile.MethodElement}).  Models and elements are immutable\n+ * and are inflated lazily so creating a model does not necessarily require\n+ * processing its entire content.\n+ *\n+ * <h3>The constant pool<\/h3>\n+ * Much of the interesting content in a classfile lives in the <em>constant\n+ * pool<\/em>. {@link jdk.internal.classfile.ClassModel} provides a lazily-inflated,\n+ * read-only view of the constant pool via {@link jdk.internal.classfile.ClassModel#constantPool()}.\n+ * Descriptions of classfile content is often exposed in the form of various\n+ * subtypes of {@link jdk.internal.classfile.constantpool.PoolEntry}, such as {@link\n+ * jdk.internal.classfile.constantpool.ClassEntry} or {@link jdk.internal.classfile.constantpool.Utf8Entry}.\n+ * <p>\n+ * Constant pool entries are also exposed through models and elements; in the\n+ * above traversal example, the {@link jdk.internal.classfile.instruction.InvokeInstruction}\n+ * element exposed a method for {@code owner} that corresponds to a {@code\n+ * Constant_Class_info} entry in the constant pool.\n+ *\n+ * <h3>Attributes<\/h3>\n+ * Much of the contents of a classfile is stored in attributes; attributes are\n+ * found on classes, methods, fields, record components, and on the {@code Code}\n+ * attribute.  Most attributes are surfaced as elements; for example, {@link\n+ * jdk.internal.classfile.attribute.SignatureAttribute} is a {@link\n+ * jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.MethodElement}, and {@link\n+ * jdk.internal.classfile.FieldElement} since it can appear in all of those places, and is\n+ * included when iterating the elements of the corresponding model.\n+ * <p>\n+ * Some attributes are not surfaced as elements; these are attributes that are\n+ * tightly coupled to -- and logically part of -- other parts of the class file.\n+ * These include the {@code BootstrapMethods}, {@code LineNumberTable}, {@code\n+ * StackMapTable}, {@code LocalVariableTable}, and {@code\n+ * LocalVariableTypeTable} attributes.  These are processed by the library and\n+ * treated as part of the structure they are coupled to (the entries of the\n+ * {@code BootstrapMethods} attribute are treated as part of the constant pool;\n+ * line numbers and local variable metadata are modeled as elements of {@link\n+ * jdk.internal.classfile.CodeModel}.)\n+ * <p>\n+ * The {@code Code} attribute, in addition to being modeled as a {@link\n+ * jdk.internal.classfile.MethodElement}, is also a model in its own right ({@link\n+ * jdk.internal.classfile.CodeModel}) due to its complex structure.\n+ * <p>\n+ * Each standard attribute has an interface (in {@code jdk.internal.classfile.attribute})\n+ * which exposes the contents of the attribute and provides factories to\n+ * construct the attribute.  For example, the {@code Signature} attribute is\n+ * defined by the {@link jdk.internal.classfile.attribute.SignatureAttribute} class, and\n+ * provides accessors for {@link jdk.internal.classfile.attribute.SignatureAttribute#signature()}\n+ * as well as factories taking {@link jdk.internal.classfile.constantpool.Utf8Entry} or\n+ * {@link java.lang.String}.\n+ *\n+ * <h3>Custom attributes<\/h3>\n+ * Attributes are converted between their classfile form and their corresponding\n+ * object form via an {@link jdk.internal.classfile.AttributeMapper}.  An {@code\n+ * AttributeMapper} provides the {@link jdk.internal.classfile.AttributeMapper#readAttribute(AttributedElement, ClassReader, int)} method for mapping from the classfile format\n+ * to an attribute instance, and the {@link jdk.internal.classfile.AttributeMapper#writeAttribute(jdk.internal.classfile.BufWriter,\n+ * java.lang.Object)} method for mapping back to the classfile format.  It also\n+ * contains metadata including the attribute name, the set of classfile entities\n+ * where the attribute is applicable, and whether multiple attributes of the\n+ * same kind are allowed on a single entity.\n+ * <p>\n+ * There are built-in attribute mappers (in {@link jdk.internal.classfile.Attributes}) for\n+ * each of the attribute types defined in section {@jvms 4.7} of <cite>The Java Virtual\n+ * Machine Specification<\/cite>, as well as several common nonstandard attributes used by the\n+ * JDK such as {@code CharacterRangeTable}.\n+ * <p>\n+ * Unrecognized attributes are delivered as elements of type {@link\n+ * jdk.internal.classfile.attribute.UnknownAttribute}, which provide access only to the\n+ * {@code byte[]} contents of the attribute.\n+ * <p>\n+ * For nonstandard attributes, user-provided attribute mappers can be specified\n+ * through the use of the {@link jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)}}\n+ * classfile option.  Implementations of custom attributes should extend {@link\n+ * jdk.internal.classfile.CustomAttribute}. Custom attributes will be delivered as\n+ * elements in all of the contexts specified by {@link jdk.internal.classfile.AttributeMapper#whereApplicable()}.\n+ *\n+ * <h3>Options<\/h3>\n+ * <p>\n+ * {@link jdk.internal.classfile.Classfile#parse(byte[], jdk.internal.classfile.Classfile.Option[])}\n+ * accepts a list of options.  {@link jdk.internal.classfile.Classfile.Option} exports some\n+ * static boolean options, as well as factories for more complex options,\n+ * including:\n+ * <ul>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#generateStackmap(boolean)} -- generate stackmaps (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processDebug(boolean)} -- processing of debug information, such as local variable metadata (default is true) <\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processLineNumbers(boolean)} -- processing of line numbers (default is true) <\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#processUnknownAttributes(boolean)} -- processing of unrecognized attributes (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#constantPoolSharing(boolean)}} -- share constant pool when transforming (default is true)<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#classHierarchyResolver(jdk.internal.classfile.ClassHierarchyResolver)} -- specify a custom class hierarchy\n+ * resolver used by stack map generation<\/li>\n+ *   <li>{@link jdk.internal.classfile.Classfile.Option#attributeMapper(java.util.function.Function)} -- specify format of custom attributes<\/li>\n+ * <\/ul>\n+ * <p>\n+ * Most options allow you to request that certain parts of the classfile be\n+ * skipped during traversal, such as debug information or unrecognized\n+ * attributes.  Some options allow you to suppress generation of portions of the\n+ * classfile, such as stack maps.  Many of these options are to access\n+ * performance tradeoffs; processing debug information and line numbers has a\n+ * cost (both in writing and reading.)  If you don't need this information, you\n+ * can suppress it with options to gain some performance.\n+ *\n+ * <h2>Writing classfiles<\/h2>\n+ * Classfile generation is accomplished through <em>builders<\/em>.  For each\n+ * entity type that has a model, there is also a corresponding builder type;\n+ * classes are built through {@link jdk.internal.classfile.ClassBuilder}, methods through\n+ * {@link jdk.internal.classfile.MethodBuilder}, etc.\n+ * <p>\n+ * Rather than creating builders directly, builders are provided as an argument\n+ * to a user-provided lambda.  To generate the familiar \"hello world\" program,\n+ * we ask for a class builder, and use that class builder to create method\n+ * builders for the constructor and {@code main} method, and in turn use the\n+ * method builders to create a {@code Code} attribute and use the code builders\n+ * to generate the instructions:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld\"}\n+ * <p>\n+ * Builders often support multiple ways of expressing the same entity at\n+ * different levels of abstraction.  For example, the {@code invokevirtual}\n+ * instruction invoking {@code println} could have been generated with {@link\n+ * jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n+ * java.lang.String, java.lang.constant.MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n+ * jdk.internal.classfile.CodeBuilder#invokeInstruction(jdk.internal.classfile.Opcode,\n+ * java.lang.constant.ClassDesc, java.lang.String, java.lang.constant.MethodTypeDesc,\n+ * boolean) CodeBuilder.invokeInstruction}, or\n+ * {@link jdk.internal.classfile.CodeBuilder#with(jdk.internal.classfile.ClassfileElement) CodeBuilder.with}.\n+ * <p>\n+ * The convenience method {@code CodeBuilder.invokevirtual} behaves as if it calls\n+ * the convenience method {@code CodeBuilder.invokeInstruction}, which in turn behaves\n+ * as if it calls method {@code CodeBuilder.with}. This composing of method calls on the\n+ * builder enables the composing of transforms (as described later).\n+ *\n+ * <h3>Symbolic information<\/h3>\n+ * To describe symbolic information for classes and types, the API uses the\n+ * nominal descriptor abstractions from {@code java.lang.constant} such as {@link\n+ * java.lang.constant.ClassDesc} and {@link java.lang.constant.MethodTypeDesc},\n+ * which is less error-prone than using raw strings.\n+ * <p>\n+ * If a constant pool entry has a nominal representation then it provides a\n+ * method returning the corresponding nominal descriptor type e.g.\n+ * method {@link jdk.internal.classfile.constantpool.ClassEntry#asSymbol} returns\n+ * {@code ClassDesc}.\n+ * <p>\n+ * Where appropriate builders provide two methods for building an element with\n+ * symbolic information, one accepting nominal descriptors, and the other\n+ * accepting constant pool entries.\n+ *\n+ * <h2>Transforming classfiles<\/h2>\n+ * Classfile Processing APIs are most frequently used to combine reading and\n+ * writing into transformation, where a classfile is read, localized changes are\n+ * made, but much of the classfile is passed through unchanged.  For each kind\n+ * of builder, {@code XxxBuilder} has a method {@code with(XxxElement)} so that\n+ * elements that we wish to pass through unchanged can be handed directly back\n+ * to the builder.\n+ * <p>\n+ * If we wanted to strip out methods whose names starts with \"debug\", we could\n+ * get an existing {@link jdk.internal.classfile.ClassModel}, build a new classfile that\n+ * provides a {@link jdk.internal.classfile.ClassBuilder}, iterate the elements of the\n+ * original {@link jdk.internal.classfile.ClassModel}, and pass through all of them to\n+ * the builder except the methods we want to drop:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods1\"}\n+ * <p>\n+ * This hands every class element, except for those corresponding to methods\n+ * whose names start with {@code debug}, back to the builder.  Transformations\n+ * can of course be more complicated, diving into method bodies and instructions\n+ * and transforming those as well, but the same structure is repeated at every\n+ * level, since every entity has corresponding model, builder, and element\n+ * abstractions.\n+ * <p>\n+ * Transformation can be viewed as a \"flatMap\" operation on the sequence of\n+ * elements; for every element, we could pass it through unchanged, drop it, or\n+ * replace it with one or more elements.  Because transformation is such a\n+ * common operation on classfiles, each model type has a corresponding {@code\n+ * XxxTransform} type (which describes a transform on a sequence of {@code\n+ * XxxElement}) and each builder type has {@code transformYyy} methods for transforming\n+ * its child models.  A transform is simply a functional interface that takes a\n+ * builder and an element, and an implementation \"flatMap\"s elements\n+ * into the builder.  We could express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods2\"}\n+ *\n+ * <h3>Lifting transforms<\/h3>\n+ * While the second example is only slightly shorter than the first, the\n+ * advantage of expressing transformation in this way is that the transform\n+ * operations can be more easily combined.  Suppose we want to redirect\n+ * invocations of static methods on {@code Foo} to the corresponding method on\n+ * {@code Bar} instead.  We could express this as a transformation on {@link\n+ * jdk.internal.classfile.CodeElement}:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarTransform\"}\n+ * <p>\n+ * We can then <em>lift<\/em> this transformation on code elements into a\n+ * transformation on method elements.  This intercepts method elements that\n+ * correspond to a {@code Code} attribute, dives into its code elements, and\n+ * applies the code transform to them, and passes other method elements through\n+ * unchanged:\n+ * {@snippet lang=java :\n+ * MethodTransform mt = MethodTransform.transformingCode(fooToBar);\n+ * }\n+ * <p>\n+ * and further lift the transform on method elements into one on class\n+ * elements:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethods(mt);\n+ * }\n+ * <p>\n+ * and then transform the classfile:\n+ * {@snippet lang=java :\n+ * byte[] newBytes = ClassModel.of(bytes).transform(ct);\n+ * }\n+ * <p>\n+ * This is much more concise (and less error-prone) than the equivalent\n+ * expressed by traversing the classfile structure directly:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarUnrolled\"}\n+ *\n+ * <h3>Composing transforms<\/h3>\n+ * Transforms on the same type of element can be composed in sequence, where the\n+ * output of the first is fed to the input of the second.  Suppose we want to\n+ * instrument all method calls, where we print the name of a method before\n+ * calling it:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"instrumentCallsTransform\"}\n+ * <p>\n+ * Then we can compose {@code fooToBar} and {@code instrumentCalls} with {@link\n+ * jdk.internal.classfile.CodeTransform#andThen(jdk.internal.classfile.CodeTransform)}:\n+ * <p>\n+ * {@snippet lang=java :\n+ * byte[] newBytes = ClassModel.of(bytes)\n+ *                             .transform(ClassTransform.transformingMethods(\n+ *                                 MethodTransform.transformingCode(\n+ *                                     fooToBar.andThen(instrumentCalls))));\n+ * }\n+ *\n+ * Transform {@code instrumentCalls} will receive all code elements produced by\n+ * transform {@code forToBar}, either those code elements from the original classfile\n+ * or replacements (replacing static invocations to {@code Foo} with those to {@code Bar}).\n+ *\n+ * <h3>Constant pool sharing<\/h3>\n+ * Transformation doesn't merely handle the logistics of reading, transforming\n+ * elements, and writing.  Most of the time when we are transforming a\n+ * classfile, we are making relatively minor changes.  To optimize such cases,\n+ * transformation seeds the new classfile with a copy of the constant pool from\n+ * the original classfile; this enables significant optimizations (methods and\n+ * attributes that are not transformed can be processed by bulk-copying their\n+ * bytes, rather than parsing them and regenerating their contents.)  If\n+ * constant pool sharing is not desired it can be suppressed\n+ * with the {@link jdk.internal.classfile.Classfile.Option#constantPoolSharing(boolean)} option.\n+ * Such suppression may be beneficial when transformation removes many elements,\n+ * resulting in many unreferenced constant pool entries.\n+ *\n+ * <h2>API conventions<\/h2>\n+ * <p>\n+ * The API is largely derived from a <a href=\"#data_model\"><em>data model<\/em><\/a>\n+ * for the classfile format, which defines each element kind (which includes models and\n+ * attributes) and its properties.  For each element kind, there is a\n+ * corresponding interface to describe that element, and factory methods to\n+ * create that element.  Some element kinds also have convenience methods on the\n+ * corresponding builder (e.g., {@link jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n+ * java.lang.String, java.lang.constant.MethodTypeDesc)}).\n+ * <p>\n+ * Most symbolic information in elements is represented by constant pool entries\n+ * (for example, the owner of a field is represented by a {@link\n+ * jdk.internal.classfile.constantpool.ClassEntry}.) Factories and builders also accept nominal\n+ * descriptors from {@code java.lang.constant} (e.g., {@link\n+ * java.lang.constant.ClassDesc}.)\n+ *\n+ * <h2><a id=\"data_model\"><\/a>Data model<\/h2>\n+ * We define each kind of element by its name, an optional arity indicator (zero\n+ * or more, zero or one, exactly one), and a list of components.  The elements\n+ * of a class are fields, methods, and the attributes that can appear on\n+ * classes:\n+ * <p>\n+ * {@snippet lang=\"text\" :\n+ * ClassElement =\n+ *     FieldModel*(UtfEntry name, Utf8Entry descriptor)\n+ *     | MethodModel*(UtfEntry name, Utf8Entry descriptor)\n+ *     | ModuleAttribute?(int flags, ModuleEntry moduleName, UtfEntry moduleVersion,\n+ *                        List<ModuleRequireInfo> requires, List<ModuleOpenInfo> opens,\n+ *                        List<ModuleExportInfo> exports, List<ModuleProvidesInfo> provides,\n+ *                        List<ClassEntry> uses)\n+ *     | ModulePackagesAttribute?(List<PackageEntry> packages)\n+ *     | ModuleTargetAttribute?(Utf8Entry targetPlatform)\n+ *     | ModuleHashesAttribute?(Utf8Entry algorithm, List<HashInfo> hashes)\n+ *     | ModuleResolutionAttribute?(int resolutionFlags)\n+ *     | SourceFileAttribute?(Utf8Entry sourceFile)\n+ *     | SourceDebugExtensionsAttribute?(byte[] contents)\n+ *     | CompilationIDAttribute?(Utf8Entry compilationId)\n+ *     | SourceIDAttribute?(Utf8Entry sourceId)\n+ *     | NestHostAttribute?(ClassEntry nestHost)\n+ *     | NestMembersAttribute?(List<ClassEntry> nestMembers)\n+ *     | RecordAttribute?(List<RecordComponent> components)\n+ *     | EnclosingMethodAttribute?(ClassEntry className, NameAndTypeEntry method)\n+ *     | InnerClassesAttribute?(List<InnerClassInfo> classes)\n+ *     | PermittedSubclassesAttribute?(List<ClassEntry> permittedSubclasses)\n+ *     | DeclarationElement*\n+ * }\n+ *<p>\n+ * where {@code DeclarationElement} are the elements that are common to all declarations\n+ * (classes,  methods, fields) and so are factored out:\n+ *\n+ * {@snippet lang=\"text\" :\n+ * DeclarationElement =\n+ *     SignatureAttribute?(Utf8Entry signature)\n+ *     | SyntheticAttribute?()\n+ *     | DeprecatedAttribute?()\n+ *     | RuntimeInvisibleAnnotationsAttribute?(List<Annotation> annotations)\n+ *     | RuntimeVisibleAnnotationsAttribute?(List<Annotation> annotations)\n+ *     | CustomAttribute*\n+ *     | UnknownAttribute*\n+ * }\n+ *\n+ * Fields and methods are models with their own elements.  The elements of fields\n+ * and methods are fairly simple; most of the complexity of methods lives in the\n+ * {@link jdk.internal.classfile.CodeModel} (which models the {@code Code} attribute\n+ * along with the code-related attributes: stack map table, local variable table,\n+ * line number table, etc.)\n+ *\n+ * {@snippet lang=\"text\" :\n+ * FieldElement =\n+ *     DeclarationElement\n+ *     | ConstantValueAttribute?(ConstantValueEntry constant)\n+ *\n+ * MethodElement =\n+ *     DeclarationElement\n+ *     | CodeModel?()\n+ *     | AnnotationDefaultAttribute?(ElementValue defaultValue)\n+ *     | MethodParametersAttribute?(List<MethodParameterInfo> parameters)\n+ *     | ExceptionsAttribute?(List<ClassEntry> exceptions)\n+ * }\n+ *\n+ * {@link jdk.internal.classfile.CodeModel} is unique in that its elements are <em>ordered<\/em>.\n+ * Elements of {@code Code} include ordinary bytecodes, as well as a number of pseudo-instructions\n+ * representing branch targets, line number metadata, local variable metadata, and\n+ * catch blocks.\n+ *\n+ * {@snippet lang=\"text\" :\n+ * CodeElement = Instruction | PseudoInstruction\n+ *\n+ * Instruction =\n+ *     LoadInstruction(TypeKind type, int slot)\n+ *     | StoreInstruction(TypeKind type, int slot)\n+ *     | IncrementInstruction(int slot, int constant)\n+ *     | BranchInstruction(Opcode opcode, Label target)\n+ *     | LookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases)\n+ *     | TableSwitchInstruction(Label defaultTarget, int low, int high,\n+ *                              List<SwitchCase> cases)\n+ *     | ReturnInstruction(TypeKind kind)\n+ *     | ThrowInstruction()\n+ *     | FieldInstruction(Opcode opcode, FieldRefEntry field)\n+ *     | InvokeInstruction(Opcode opcode, MemberRefEntry method, boolean isInterface)\n+ *     | InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic)\n+ *     | NewObjectInstruction(ClassEntry className)\n+ *     | NewReferenceArrayInstruction(ClassEntry componentType)\n+ *     | NewPrimitiveArrayInstruction(TypeKind typeKind)\n+ *     | NewMultiArrayInstruction(ClassEntry componentType, int dims)\n+ *     | ArrayLoadInstruction(Opcode opcode)\n+ *     | ArrayStoreInstruction(Opcode opcode)\n+ *     | TypeCheckInstruction(Opcode opcode, ClassEntry className)\n+ *     | ConvertInstruction(TypeKind from, TypeKind to)\n+ *     | OperatorInstruction(Opcode opcode)\n+ *     | ConstantInstruction(ConstantDesc constant)\n+ *     | StackInstruction(Opcode opcode)\n+ *     | MonitorInstruction(Opcode opcode)\n+ *     | NopInstruction()\n+ *\n+ * PseudoInstruction =\n+ *     | LabelTarget(Label label)\n+ *     | LineNumber(int line)\n+ *     | ExceptionCatch(Label tryStart, Label tryEnd, Label handler, ClassEntry exception)\n+ *     | LocalVariable(int slot, UtfEntry name, Utf8Entry type, Label startScope, Label endScope)\n+ *     | LocalVariableType(int slot, Utf8Entry name, Utf8Entry type, Label startScope, Label endScope)\n+ *     | CharacterRange(int rangeStart, int rangeEnd, int flags, Label startScope, Label endScope)\n+ * }\n+ *\/\n+package jdk.internal.classfile;\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":461,"deletions":0,"binary":false,"changes":461,"status":"added"},{"patch":"@@ -37,14 +37,14 @@\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -53,5 +53,5 @@\n-import jdk.classfile.components.ClassRemapper;\n-import jdk.classfile.components.CodeLocalsShifter;\n-import jdk.classfile.components.CodeRelabeler;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":19,"deletions":19,"binary":false,"changes":38,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/snippet-files\/PackageSnippets.java","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n","filename":"test\/jdk\/jdk\/classfile\/AccessFlagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n@@ -46,1 +46,1 @@\n-import jdk.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,10 +34,10 @@\n-import jdk.classfile.ClassHierarchyResolver;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.StackMapGenerator;\n-import jdk.classfile.components.ClassRemapper;\n-import jdk.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.ClassHierarchyResolver;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.StackMapGenerator;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n@@ -52,13 +52,13 @@\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.Signature;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.impl.AbstractInstruction;\n-import jdk.classfile.impl.RawBytecodeHelper;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.ReturnInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.RawBytecodeHelper;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.ReturnInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n@@ -66,3 +66,3 @@\n-import jdk.classfile.components.CodeRelabeler;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.components.ClassPrinter;\n@@ -73,1 +73,1 @@\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Attributes;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Attributes;\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationModelTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n@@ -48,1 +48,1 @@\n-import jdk.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,9 +31,9 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/ArrayTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -42,6 +42,6 @@\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.LoadableConstantEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n","filename":"test\/jdk\/jdk\/classfile\/BSMTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.Classfile;\n","filename":"test\/jdk\/jdk\/classfile\/BasicBlockTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -43,5 +43,5 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Label;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.impl.LabelImpl;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.impl.LabelImpl;\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.Classfile;\n@@ -38,1 +38,1 @@\n-import static jdk.classfile.Classfile.ACC_STATIC;\n+import static jdk.internal.classfile.Classfile.ACC_STATIC;\n","filename":"test\/jdk\/jdk\/classfile\/BuilderParamTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,8 +30,8 @@\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CompoundElement;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.ExceptionCatch;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CompoundElement;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n","filename":"test\/jdk\/jdk\/classfile\/BuilderTryCatchTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-import jdk.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n","filename":"test\/jdk\/jdk\/classfile\/ClassEntryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.classfile.ClassHierarchyResolver;\n+import jdk.internal.classfile.ClassHierarchyResolver;\n@@ -42,4 +42,4 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.impl.Util;\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,27 +31,27 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.classfile.constantpool.DoubleEntry;\n-import jdk.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.classfile.constantpool.FieldRefEntry;\n-import jdk.classfile.constantpool.FloatEntry;\n-import jdk.classfile.constantpool.IntegerEntry;\n-import jdk.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.classfile.constantpool.LongEntry;\n-import jdk.classfile.constantpool.MemberRefEntry;\n-import jdk.classfile.constantpool.MethodHandleEntry;\n-import jdk.classfile.constantpool.MethodRefEntry;\n-import jdk.classfile.constantpool.MethodTypeEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.NameAndTypeEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.StringEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.SplitConstantPool;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.BootstrapMethodEntry;\n-import jdk.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.constantpool.MethodTypeEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.SplitConstantPool;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n","filename":"test\/jdk\/jdk\/classfile\/ConstantPoolCopyTest.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -57,12 +57,12 @@\n-import jdk.classfile.Attributes;\n-import jdk.classfile.BufWriter;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.impl.DirectCodeBuilder;\n-import jdk.classfile.impl.UnboundAttribute;\n-import jdk.classfile.instruction.LineNumber;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.instruction.LineNumber;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.Classfile;\n@@ -38,3 +38,3 @@\n-import jdk.classfile.Attributes;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.Signature;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.Signature;\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.StringEntry;\n@@ -42,2 +42,2 @@\n-import static jdk.classfile.Opcode.*;\n-import static jdk.classfile.TypeKind.VoidType;\n+import static jdk.internal.classfile.Opcode.*;\n+import static jdk.internal.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/LDCTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.Classfile;\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -42,4 +42,4 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Opcode;\n-import jdk.classfile.TypeKind;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.TypeKind;\n@@ -47,2 +47,2 @@\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,8 +37,8 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"test\/jdk\/jdk\/classfile\/LowJCovAttributeTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,9 +37,9 @@\n-import jdk.classfile.Attribute;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.constantpool.ModuleEntry;\n-import jdk.classfile.constantpool.PackageEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.constantpool.PackageEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n","filename":"test\/jdk\/jdk\/classfile\/LowModuleTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -46,7 +46,7 @@\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.attribute.SourceFileAttribute;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.constantpool.Utf8Entry;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n@@ -65,3 +65,3 @@\n-import static jdk.classfile.Opcode.*;\n-import static jdk.classfile.Opcode.INVOKEVIRTUAL;\n-import static jdk.classfile.TypeKind.VoidType;\n+import static jdk.internal.classfile.Opcode.*;\n+import static jdk.internal.classfile.Opcode.INVOKEVIRTUAL;\n+import static jdk.internal.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,5 +32,5 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.MethodModel;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.MethodModel;\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyCodeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,9 +33,9 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.attribute.CodeAttribute;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyPrimitiveMatchCodeTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -33,10 +33,10 @@\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleExportInfo;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModuleOpenInfo;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.ModuleProvideInfo;\n-import jdk.classfile.attribute.ModuleRequireInfo;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleExportInfo;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModuleOpenInfo;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.ModuleProvideInfo;\n+import jdk.internal.classfile.attribute.ModuleRequireInfo;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"test\/jdk\/jdk\/classfile\/ModuleBuilderTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n","filename":"test\/jdk\/jdk\/classfile\/ModuleDescTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -38,7 +38,7 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.Label;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n@@ -48,7 +48,7 @@\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.OperatorInstruction;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.OperatorInstruction;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -60,1 +60,1 @@\n-import static jdk.classfile.Opcode.*;\n+import static jdk.internal.classfile.Opcode.*;\n","filename":"test\/jdk\/jdk\/classfile\/OneToOneTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Opcode;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Opcode;\n@@ -42,1 +42,1 @@\n-import static jdk.classfile.Opcode.*;\n+import static jdk.internal.classfile.Opcode.*;\n","filename":"test\/jdk\/jdk\/classfile\/OpcodesValidationTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n","filename":"test\/jdk\/jdk\/classfile\/PackageDescTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,8 +36,8 @@\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.Opcode;\n-import static jdk.classfile.Opcode.*;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.NopInstruction;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.Opcode;\n+import static jdk.internal.classfile.Opcode.*;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.NopInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -41,6 +41,6 @@\n-import jdk.classfile.ClassSignature;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.MethodSignature;\n-import jdk.classfile.Signature;\n-import jdk.classfile.Signature.*;\n-import jdk.classfile.Attributes;\n+import jdk.internal.classfile.ClassSignature;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.MethodSignature;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.Signature.*;\n+import jdk.internal.classfile.Attributes;\n","filename":"test\/jdk\/jdk\/classfile\/SignaturesTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.Classfile;\n@@ -41,1 +41,1 @@\n-import static jdk.classfile.Classfile.ACC_STATIC;\n+import static jdk.internal.classfile.Classfile.ACC_STATIC;\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.components.CodeStackTracker;\n-import static jdk.classfile.TypeKind.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.components.CodeStackTracker;\n+import static jdk.internal.classfile.TypeKind.*;\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,21 +31,21 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.Instruction;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.impl.DirectCodeBuilder;\n-import jdk.classfile.instruction.BranchInstruction;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.FieldInstruction;\n-import jdk.classfile.instruction.IncrementInstruction;\n-import jdk.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n-import jdk.classfile.instruction.LoadInstruction;\n-import jdk.classfile.instruction.LookupSwitchInstruction;\n-import jdk.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.classfile.instruction.NewObjectInstruction;\n-import jdk.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.classfile.instruction.StoreInstruction;\n-import jdk.classfile.instruction.TableSwitchInstruction;\n-import jdk.classfile.instruction.TypeCheckInstruction;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.Instruction;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.IncrementInstruction;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n+import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n+import jdk.internal.classfile.instruction.NewObjectInstruction;\n+import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n+import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import jdk.internal.classfile.instruction.StoreInstruction;\n+import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/StreamedVsListTest.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Classfile;\n","filename":"test\/jdk\/jdk\/classfile\/SwapTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,9 +4,9 @@\n-    java.base\/jdk.classfile \\\n-    java.base\/jdk.classfile.attribute \\\n-    java.base\/jdk.classfile.constantpool \\\n-    java.base\/jdk.classfile.instruction \\\n-    java.base\/jdk.classfile.impl \\\n-    java.base\/jdk.classfile.impl.verifier \\\n-    java.base\/jdk.classfile.jdktypes \\\n-    java.base\/jdk.classfile.components \\\n-    java.base\/jdk.classfile.util \\\n+    java.base\/jdk.internal.classfile \\\n+    java.base\/jdk.internal.classfile.attribute \\\n+    java.base\/jdk.internal.classfile.constantpool \\\n+    java.base\/jdk.internal.classfile.instruction \\\n+    java.base\/jdk.internal.classfile.impl \\\n+    java.base\/jdk.internal.classfile.impl.verifier \\\n+    java.base\/jdk.internal.classfile.jdktypes \\\n+    java.base\/jdk.internal.classfile.components \\\n+    java.base\/jdk.internal.classfile.util \\\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n@@ -43,2 +43,2 @@\n-import static jdk.classfile.Opcode.INVOKESPECIAL;\n-import static jdk.classfile.TypeKind.VoidType;\n+import static jdk.internal.classfile.Opcode.INVOKESPECIAL;\n+import static jdk.internal.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/TempConstantPoolBuilderTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,7 +41,7 @@\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.attribute.RecordAttribute;\n-import jdk.classfile.attribute.RecordComponentInfo;\n-import jdk.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.RecordAttribute;\n+import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n","filename":"test\/jdk\/jdk\/classfile\/TestRecordComponent.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,7 +37,7 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,6 +31,6 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.constantpool.ConstantPool;\n-import jdk.classfile.constantpool.PoolEntry;\n-import jdk.classfile.constantpool.StringEntry;\n-import jdk.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.constantpool.StringEntry;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -52,1 +52,1 @@\n-import static jdk.classfile.TypeKind.VoidType;\n+import static jdk.internal.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.classfile.impl.Util;\n+import jdk.internal.classfile.impl.Util;\n","filename":"test\/jdk\/jdk\/classfile\/UtilTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.MethodModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.MethodModel;\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -37,4 +37,4 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.Label;\n-import jdk.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n@@ -45,4 +45,4 @@\n-import static jdk.classfile.Opcode.*;\n-import static jdk.classfile.TypeKind.IntType;\n-import static jdk.classfile.TypeKind.ReferenceType;\n-import static jdk.classfile.TypeKind.VoidType;\n+import static jdk.internal.classfile.Opcode.*;\n+import static jdk.internal.classfile.TypeKind.IntType;\n+import static jdk.internal.classfile.TypeKind.ReferenceType;\n+import static jdk.internal.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/WriteTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,10 +35,10 @@\n-import jdk.classfile.Annotation;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/AnnotationsExamples.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,24 +36,24 @@\n-import jdk.classfile.AccessFlags;\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassSignature;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassfileVersion;\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.Interfaces;\n-import jdk.classfile.MethodBuilder;\n-import jdk.classfile.MethodElement;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.Signature;\n-import jdk.classfile.Signature.ClassTypeSig;\n-import jdk.classfile.Superclass;\n-import jdk.classfile.attribute.ExceptionsAttribute;\n-import jdk.classfile.attribute.SignatureAttribute;\n-import jdk.classfile.constantpool.ClassEntry;\n-import jdk.classfile.instruction.ConstantInstruction;\n-import jdk.classfile.instruction.InvokeInstruction;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassSignature;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassfileVersion;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.Interfaces;\n+import jdk.internal.classfile.MethodBuilder;\n+import jdk.internal.classfile.MethodElement;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.Signature;\n+import jdk.internal.classfile.Signature.ClassTypeSig;\n+import jdk.internal.classfile.Superclass;\n+import jdk.internal.classfile.attribute.ExceptionsAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExampleGallery.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExperimentalTransformExamples.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,12 +39,12 @@\n-import jdk.classfile.Annotation;\n-import jdk.classfile.AnnotationElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.attribute.ModuleAttribute;\n-import jdk.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n-import jdk.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.classfile.attribute.ModulePackagesAttribute;\n-import jdk.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.classfile.Attributes;\n-import jdk.classfile.jdktypes.PackageDesc;\n-import jdk.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.Annotation;\n+import jdk.internal.classfile.AnnotationElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n+import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n+import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ModuleExamples.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,5 +31,5 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.FieldModel;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.Attribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.FieldModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.Attribute;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/TransformExamples.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,4 +51,4 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.constantpool.*;\n-import jdk.classfile.instruction.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.*;\n@@ -58,2 +58,2 @@\n-import static jdk.classfile.Classfile.*;\n-import static jdk.classfile.Attributes.*;\n+import static jdk.internal.classfile.Classfile.*;\n+import static jdk.internal.classfile.Attributes.*;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import jdk.classfile.CodeBuilder;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.instruction.*;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.instruction.*;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/InstructionModelToCodeBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,7 +31,7 @@\n-import jdk.classfile.*;\n-import jdk.classfile.attribute.*;\n-import jdk.classfile.constantpool.*;\n-import jdk.classfile.instruction.*;\n-import jdk.classfile.jdktypes.ModuleDesc;\n-import jdk.classfile.jdktypes.PackageDesc;\n-import jdk.classfile.components.CodeStackTracker;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.*;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n+import jdk.internal.classfile.components.CodeStackTracker;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,4 +27,4 @@\n-import jdk.classfile.impl.LabelContext;\n-import jdk.classfile.impl.LabelImpl;\n-import jdk.classfile.instruction.LocalVariable;\n-import jdk.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.impl.LabelContext;\n+import jdk.internal.classfile.impl.LabelImpl;\n+import jdk.internal.classfile.instruction.LocalVariable;\n+import jdk.internal.classfile.instruction.LocalVariableType;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/TestUtil.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,11 +38,11 @@\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeTransform;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeTransform;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdHocAdapt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,8 +37,8 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassReader;\n-import jdk.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.classfile.impl.AbstractPseudoInstruction;\n-import jdk.classfile.impl.CodeImpl;\n-import jdk.classfile.impl.LabelContext;\n-import jdk.classfile.impl.SplitConstantPool;\n-import jdk.classfile.impl.StackMapGenerator;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.CodeImpl;\n+import jdk.internal.classfile.impl.LabelContext;\n+import jdk.internal.classfile.impl.SplitConstantPool;\n+import jdk.internal.classfile.impl.StackMapGenerator;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/GenerateStackMaps.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ParseOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,7 +27,7 @@\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.ClassfileElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CompoundElement;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.instruction.LoadInstruction;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassfileElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CompoundElement;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.instruction.LoadInstruction;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadDeep.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.FieldModel;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.FieldModel;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadMetadata.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,11 +38,11 @@\n-import jdk.classfile.ClassBuilder;\n-import jdk.classfile.ClassElement;\n-import jdk.classfile.ClassModel;\n-import jdk.classfile.ClassTransform;\n-import jdk.classfile.Classfile;\n-import jdk.classfile.CodeElement;\n-import jdk.classfile.CodeModel;\n-import jdk.classfile.CodeTransform;\n-import jdk.classfile.MethodModel;\n-import jdk.classfile.MethodTransform;\n-import jdk.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.ClassBuilder;\n+import jdk.internal.classfile.ClassElement;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeElement;\n+import jdk.internal.classfile.CodeModel;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.classfile.AccessFlags;\n+import jdk.internal.classfile.AccessFlags;\n@@ -29,3 +29,3 @@\n-import jdk.classfile.Classfile;\n-import jdk.classfile.TypeKind;\n-import jdk.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.TypeKind;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n@@ -46,3 +46,3 @@\n-import static jdk.classfile.Opcode.*;\n-import static jdk.classfile.TypeKind.*;\n-import static jdk.classfile.TypeKind.IntType;\n+import static jdk.internal.classfile.Opcode.*;\n+import static jdk.internal.classfile.TypeKind.*;\n+import static jdk.internal.classfile.TypeKind.IntType;\n@@ -158,2 +158,2 @@\n-                                  jdk.classfile.Label loopTop = c0.newLabel();\n-                                  jdk.classfile.Label loopEnd = c0.newLabel();\n+                                  jdk.internal.classfile.Label loopTop = c0.newLabel();\n+                                  jdk.internal.classfile.Label loopEnd = c0.newLabel();\n@@ -206,2 +206,2 @@\n-                                  jdk.classfile.Label loopTop = c0.newLabel();\n-                                  jdk.classfile.Label loopEnd = c0.newLabel();\n+                                  jdk.internal.classfile.Label loopTop = c0.newLabel();\n+                                  jdk.internal.classfile.Label loopEnd = c0.newLabel();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}