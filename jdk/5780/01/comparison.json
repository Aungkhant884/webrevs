{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.List;\n@@ -36,0 +37,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.APP_CONTENT;\n@@ -78,0 +80,5 @@\n+        List<String> items = APP_CONTENT.fetchFrom(params);\n+        for (String item : items) {\n+            IOUtils.copyRecursive(Path.of(item),\n+                appLayout.contentDirectory().resolve(Path.of(item).getFileName()));\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,6 @@\n-        LINUX_APPLAUNCHER_LIB\n+        LINUX_APPLAUNCHER_LIB,\n+\n+        \/**\n+         * Location of additional application content\n+         *\/\n+        CONTENT\n@@ -132,0 +137,7 @@\n+    \/**\n+     * Path to directory with additional application content.\n+     *\/\n+    public Path contentDirectory() {\n+        return pathGroup().getPath(PathRole.CONTENT);\n+    }\n+\n@@ -140,1 +152,2 @@\n-                PathRole.LINUX_APPLAUNCHER_LIB, Path.of(\"lib\/libapplauncher.so\")\n+                PathRole.LINUX_APPLAUNCHER_LIB, Path.of(\"lib\/libapplauncher.so\"),\n+                PathRole.CONTENT, Path.of(\"lib\")\n@@ -151,1 +164,2 @@\n-                PathRole.MODULES, Path.of(\"app\/mods\")\n+                PathRole.MODULES, Path.of(\"app\/mods\"),\n+                PathRole.CONTENT, Path.of(\"\")\n@@ -162,1 +176,2 @@\n-                PathRole.MODULES, Path.of(\"Contents\/app\/mods\")\n+                PathRole.MODULES, Path.of(\"Contents\/app\/mods\"),\n+                PathRole.CONTENT, Path.of(\"Contents\")\n@@ -197,1 +212,2 @@\n-                        \"lib\/libapplauncher.so\")\n+                        \"lib\/libapplauncher.so\"),\n+                PathRole.CONTENT, lib\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ApplicationLayout.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -209,0 +209,5 @@\n+        APP_CONTENT (\"app-content\", OptionCategories.PROPERTY, () -> {\n+            getArgumentList(popArg()).forEach(\n+                    a -> setOptionValue(\"app-content\", a));\n+        }),\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -297,0 +297,1 @@\n+            StandardBundlerParam.APP_CONTENT.getID(),\n@@ -309,2 +310,2 @@\n-                } else if (key.equals(\n-                        StandardBundlerParam.ADD_MODULES.getID())) {\n+                } else if (key.equals(StandardBundlerParam.ADD_MODULES.getID()) ||\n+                        key.equals(StandardBundlerParam.APP_CONTENT.getID())) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DeployParams.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -407,0 +407,10 @@\n+    @SuppressWarnings(\"unchecked\")\n+    static final StandardBundlerParam<List<String>> APP_CONTENT =\n+            new StandardBundlerParam<>(\n+                    Arguments.CLIOptions.APP_CONTENT.getId(),\n+                    (Class<List<String>>) (Object)List.class,\n+                    p->Collections.emptyList(),\n+                    (s, p) -> Arrays.asList(s.split(\",\"))\n+\n+            );\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+        options.put(CLIOptions.APP_CONTENT.getId(), USE.LAUNCHER);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -131,0 +131,4 @@\n+\\  --app-content <additional content>[,<additional content>...]\\n\\\n+\\          A comma separated list of paths to files and\/or directories\\n\\\n+\\          to add to the application payload.\\n\\\n+\\          This option can be used more than once.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,0 +131,4 @@\n+\\  --app-content <additional content>[,<additional content>...]\\n\\\n+\\          A comma separated list of paths to files and\/or directories\\n\\\n+\\          to add to the application payload.\\n\\\n+\\          This option can be used more than once.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_ja.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,0 +131,4 @@\n+\\  --app-content <additional content>[,<additional content>...]\\n\\\n+\\          A comma separated list of paths to files and\/or directories\\n\\\n+\\          to add to the application payload.\\n\\\n+\\          This option can be used more than once.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_zh_CN.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Parameters;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+\n+\/**\n+ * Tests generation of packages with input folder containing empty folders.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --app-content option\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build AppContentTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=AppContentTest\n+ *\/\n+public class AppContentTest {\n+\n+    private static final String TEST_JAVA = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\/PrintEnv.java\").toString();\n+    private static final String TEST_DUKE = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\/dukeplug.png\").toString();\n+    private static final String TEST_DIR = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\").toString();\n+    private static final String TEST_BAD = TKit.TEST_SRC_ROOT.resolve(\n+            \"non-existant\").toString();\n+\n+    private final List<String> testPathArgs;\n+\n+    @Parameters\n+    public static Collection data() {\n+        return List.of(new String[][]{\n+            {TEST_JAVA, TEST_DUKE}, \/\/ include two files in two options\n+            {TEST_JAVA, TEST_BAD},  \/\/ try to include non-existant content\n+            {TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR}, \/\/ two files in one option,\n+                                            \/\/ and a dir tree in another option.\n+        });\n+    }\n+\n+    public AppContentTest(String... testPathArgs) {\n+        this.testPathArgs = List.of(testPathArgs);\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+\n+        new PackageTest().configureHelloApp()\n+            .addInitializer(cmd -> {\n+                for (String arg : testPathArgs) {\n+                    cmd.addArguments(\"--app-content\", arg);\n+                }\n+            })\n+            .addInstallVerifier(cmd -> {\n+                ApplicationLayout appLayout = cmd.appLayout();\n+                Path contentDir = appLayout.contentDirectory();\n+                for (String arg : testPathArgs) {\n+                    List<String> paths = Arrays.asList(arg.split(\",\"));\n+                    for (String p : paths) {\n+                        Path name = Path.of(p).getFileName();\n+                        TKit.assertPathExists(contentDir.resolve(name), true);\n+                    }\n+                }\n+\n+            })\n+            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) ? 1 : 0)\n+            .run();\n+        }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}