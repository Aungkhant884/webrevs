{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.ref.SoftReference;\n-\n@@ -54,1 +52,1 @@\n-    protected static int hashValue(byte buf[], int off, int len) {\n+    protected static int hashValue(byte[] buf, int off, int len) {\n@@ -103,0 +101,5 @@\n+        @Override\n+        protected boolean nameEquals(Name that) {\n+            return ((NameImpl)that).getNameIndex() == getNameIndex();\n+        }\n+\n@@ -115,1 +118,1 @@\n-                throw new AssertionError();\n+                throw new AssertionError(\"invalid UTF8 data\", e);\n@@ -121,5 +124,0 @@\n-        @Override\n-        protected boolean nameEquals(Name that) {\n-            return ((NameImpl)that).getNameIndex() == getNameIndex();\n-        }\n-\n@@ -135,0 +133,8 @@\n+            \/\/ While most operations on Name that take a Name as an argument expect the argument\n+            \/\/ to come from the same table, in many cases, including here, that is not strictly\n+            \/\/ required. Moreover, java.util.Name implements javax.lang.model.element.Name,\n+            \/\/ which extends CharSequence, which provides\n+            \/\/   static int compare(CharSequence cs1, CharSequence cs2)\n+            \/\/ which ends up calling to this method when the two arguments have the same class.\n+            \/\/ Therefore, for this method, we relax \"same table\" to \"same class\".\n+            Assert.check(name0.getClass() == getClass());\n@@ -136,1 +142,0 @@\n-            Assert.check(name.table == table);\n@@ -183,1 +188,1 @@\n-                throw new AssertionError();\n+                throw new AssertionError(\"invalid UTF8 data\", e);\n@@ -205,1 +210,1 @@\n-                throw new AssertionError();\n+                throw new AssertionError(\"invalid UTF8 data\", e);\n@@ -255,1 +260,1 @@\n-        public void getUtf8Bytes(byte buf[], int off) {\n+        public void getUtf8Bytes(byte[] buf, int off) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Utf8NameTable.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315248\n+ * @summary AssertionError in Name.compareTo\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ *\n+ * @run main TestNameTables\n+ *\/\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Name;\n+import com.sun.tools.javac.util.Names;\n+import com.sun.tools.javac.util.Options;\n+\n+\/**\n+ * Tests that CharSequence.compareTo works on CharSequence objects that may\n+ * come from different name tables.\n+ *\n+ * While the java.util.Name class generally specifies that operations involving\n+ * multiple Name objects should use names from the same table, that restriction\n+ * is harder to specify when the names are widened CharSequence objects.\n+ *\n+ * The test can be extended if necessary to cover other methods on Name,\n+ * if the restrictions on Name are relaxed to permit more mix-and-match usages.\n+ *\/\n+public class TestNameTables {\n+    public static void main(String... args) {\n+        new TestNameTables().run();\n+    }\n+\n+    public static final String USE_SHARED_TABLE = \"useSharedTable\";\n+    public static final String USE_UNSHARED_TABLE = \"useUnsharedTable\";\n+    public static final String USE_STRING_TABLE = \"useStringTable\";\n+\n+    public final List<String> ALL_TABLES = List.of(USE_SHARED_TABLE, USE_UNSHARED_TABLE, USE_STRING_TABLE);\n+\n+    private final PrintStream out = System.err;\n+\n+    void run() {\n+        for (var s : ALL_TABLES) {\n+            test(createNameTable(s));\n+        }\n+\n+        for (var s1 : ALL_TABLES) {\n+            for (var s2 : ALL_TABLES) {\n+                test(createNameTable(s1), createNameTable(s2));\n+            }\n+        }\n+    }\n+\n+    Name.Table createNameTable(String option) {\n+        Context c = new Context();\n+        Options o = Options.instance(c);\n+        o.put(option, \"true\");\n+        Names n = new Names(c);\n+        return n.table;\n+    }\n+\n+    \/**\n+     * Tests operations using a single name tbale\n+     *\n+     * @param table the name table\n+     *\/\n+    void test(Name.Table table) {\n+        test(table, table);\n+    }\n+\n+    \/**\n+     * Tests operations using distinct name tables, of either the same\n+     * or different impl types.\n+     *\n+     * @param table1 the first name table\n+     * @param table2 the second name table\n+     *\/\n+    void test(Name.Table table1, Name.Table table2) {\n+        if (table1 == table2) {\n+            out.println(\"Testing \" + table1);\n+        } else {\n+            out.println(\"Testing \" + table1 + \" : \" + table2);\n+        }\n+\n+        \/\/ tests are primarily that there are no issues manipulating names from\n+        \/\/ distinct name tables\n+        testCharSequenceCompare(table1, table2);\n+    }\n+\n+    void testCharSequenceCompare(Name.Table table1, Name.Table table2) {\n+        Name n1 = table1.fromString(\"abc\");\n+        Name n2 = table2.fromString(\"abc\");\n+        checkEquals(CharSequence.compare(n1, n2), 0, \"CharSequence.compare\");\n+    }\n+\n+    void checkEquals(Object found, Object expect, String op) {\n+        if (!Objects.equals(found, expect)) {\n+            out.println(\"Failed: \" + op);\n+            out.println(\"     found: \" + found);\n+            out.println(\"    expect: \" + expect);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/nametable\/TestNameTables.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}