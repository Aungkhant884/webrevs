[{"commit":{"message":"Use 'hash_find_insert' to look for existing ConvI2L nodes"},"files":[{"filename":"src\/hotspot\/share\/opto\/convertnode.cpp"}],"sha":"6342b0e87f52eebddc8f050af10617338a6b6947"},{"commit":{"message":"Merge master"},"files":[],"sha":"4225e01539cacb090352f65fc0789914b1601198"},{"commit":{"message":"Update tests\n\nSimplify JVM arguments and run each test case 100000 times to still trigger\nC2. Use randomization to avoid constant propagation in C2. Increase the load of\nthe stress tests and their timeout to 30s to further reduce the risk of false\npositives."},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddIs.java"}],"sha":"d57479652f45b6de1cf8a08fa8a226f671a7207a"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/share\/opto\/convertnode.cpp"}],"sha":"b5cf7aab0e3bc251b480b618ec30cef81fec9fd1"},{"commit":{"message":"Generalize the fix to handle any input where AddIs are used multiple times by\nother AddIs, which could also lead to an exponential number of calls to\nConvI2LNode::Ideal(). This is achieved by (1) reusing existing ConvI2Ls if\npossible rather than eagerly creating new ones and (2) postponing the\noptimization of newly created ConvI2Ls. Remove \"hook\" node solution introduced\nin JDK-8217359 since this is subsumed by (2). Test that ConvI2LNode::Ideal() is\ncalled within iterative GVN using phase->is_IterGVN() rather than can_reshape,\nfor clarity.\n\nMerge all tests into a single class. Reimplement the microbenchmark as a test\ncase that should time out in case of a combinatorial explosion. Add a second\nsimilar microbenchmark that demonstrates the need for this generalization."},"files":[{"filename":"src\/hotspot\/share\/opto\/convertnode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddIs.java"}],"sha":"3c74173f69649a839decb3591a5f685646f81d3a"},{"commit":{"message":"Merge master"},"files":[],"sha":"60eaec254d58aaf28cbdcef2095a46f38b5ac576"},{"commit":{"message":"8254317: C2: Resource consumption of ConvI2LNode::Ideal() grows exponentially\n\nIn the optimization ConvI2L(AddI(x, y)) -> AddL(ConvI2L(x), ConvI2L(y)) within\nConvI2LNode::Ideal(), handle the special case x = y by feeding both inputs of\nAddL from a single ConvI2L node rather than creating two semantically equivalent\nConvI2L nodes. This avoids an exponential number of calls to\nConvI2LNode::Ideal() when dealing with long chains of AddI nodes. Disable the\noptimization for the pattern ConvI2L(SubI(x, x)), which is simplified to zero\nduring parsing anyway. Add a set of regression tests for the transformation that\ncover different shapes of AddI subgraphs. Also add a microbenchmark that\nexercises the special case, for performance regression testing."},"files":[{"filename":"src\/hotspot\/share\/opto\/convertnode.cpp"}],"sha":"dda815271e9b0e167b94cb0eabccd2a2762ee0f3"}]