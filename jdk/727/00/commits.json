[{"commit":{"message":"Merge master"},"files":[],"sha":"60eaec254d58aaf28cbdcef2095a46f38b5ac576"},{"commit":{"message":"8254317: C2: Resource consumption of ConvI2LNode::Ideal() grows exponentially\n\nIn the optimization ConvI2L(AddI(x, y)) -> AddL(ConvI2L(x), ConvI2L(y)) within\nConvI2LNode::Ideal(), handle the special case x = y by feeding both inputs of\nAddL from a single ConvI2L node rather than creating two semantically equivalent\nConvI2L nodes. This avoids an exponential number of calls to\nConvI2LNode::Ideal() when dealing with long chains of AddI nodes. Disable the\noptimization for the pattern ConvI2L(SubI(x, x)), which is simplified to zero\nduring parsing anyway. Add a set of regression tests for the transformation that\ncover different shapes of AddI subgraphs. Also add a microbenchmark that\nexercises the special case, for performance regression testing."},"files":[{"filename":"src\/hotspot\/share\/opto\/convertnode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddIChain.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddIDAG.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddITree.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/ConvertIntAddChainToLong.java"}],"sha":"dda815271e9b0e167b94cb0eabccd2a2762ee0f3"}]