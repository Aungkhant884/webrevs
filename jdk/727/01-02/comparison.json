{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Random;\n@@ -34,3 +35,6 @@\n- *          subgraphs. Contains three basic (small) tests and two stress tests\n- *          that resulted in a compilation time and memory explosion, triggering\n- *          the short specified timeout.\n+ *          subgraphs. Contains three small functional tests and two stress\n+ *          tests that resulted in a compilation time and memory explosion\n+ *          before fixing bug 8254317. The stress tests run with -Xbatch to wait\n+ *          for C2, so that a timeout or an out-of-memory error is triggered if\n+ *          there was an explosion. These tests use a timeout of 30s to catch\n+ *          the explosion earlier.\n@@ -38,5 +42,3 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:-Inline\n- *      -XX:CompileOnly=::testChain,::testTree,::testDAG\n- *      compiler.conversions.TestMoveConvI2LThroughAddIs basic\n- * @run main\/othervm\/timeout=1 -Xcomp -XX:-TieredCompilation -XX:-Inline\n- *      -XX:CompileOnly=::testStress1\n+ * @run main\/othervm\n+ *      compiler.conversions.TestMoveConvI2LThroughAddIs functional\n+ * @run main\/othervm\/timeout=30 -Xbatch\n@@ -44,2 +46,1 @@\n- * @run main\/othervm\/timeout=1 -Xcomp -XX:-TieredCompilation -XX:-Inline\n- *      -XX:CompileOnly=::testStress2\n+ * @run main\/othervm\/timeout=30 -Xbatch\n@@ -51,4 +52,3 @@\n-    \/\/ This guard is used to make C2 infer that the 'a' variables in the\n-    \/\/ different test methods are in a small value range, enabling the\n-    \/\/ optimization in ConvI2LNode::Ideal() for LP64 platforms.\n-    static boolean val = true;\n+    \/\/ Number of repetitions of each test. Should be sufficiently large for the\n+    \/\/ method under test to be compiled with C2.\n+    static final int N = 100_000;\n@@ -56,2 +56,3 @@\n-    static void testChain() {\n-        int a = val ? 2 : 10;\n+    \/\/ Chain-shaped functional test.\n+    static long testChain(boolean cnd) {\n+        int a = cnd ? 1 : 2;\n@@ -61,2 +62,1 @@\n-        long out = d;\n-        Asserts.assertEQ(out, 16L);\n+        return d;\n@@ -65,9 +65,10 @@\n-    static void testTree() {\n-        int a0 = val ? 2 : 10;\n-        int a1 = val ? 2 : 10;\n-        int a2 = val ? 2 : 10;\n-        int a3 = val ? 2 : 10;\n-        int a4 = val ? 2 : 10;\n-        int a5 = val ? 2 : 10;\n-        int a6 = val ? 2 : 10;\n-        int a7 = val ? 2 : 10;\n+    \/\/ Tree-shaped functional test.\n+    static long testTree(boolean cnd) {\n+        int a0 = cnd ? 1 : 2;\n+        int a1 = cnd ? 1 : 2;\n+        int a2 = cnd ? 1 : 2;\n+        int a3 = cnd ? 1 : 2;\n+        int a4 = cnd ? 1 : 2;\n+        int a5 = cnd ? 1 : 2;\n+        int a6 = cnd ? 1 : 2;\n+        int a7 = cnd ? 1 : 2;\n@@ -81,2 +82,1 @@\n-        long out = d;\n-        Asserts.assertEQ(out, 16L);\n+        return d;\n@@ -85,5 +85,6 @@\n-    static void testDAG() {\n-        int a0 = val ? 2 : 10;\n-        int a1 = val ? 2 : 10;\n-        int a2 = val ? 2 : 10;\n-        int a3 = val ? 2 : 10;\n+    \/\/ DAG-shaped functional test.\n+    static long testDAG(boolean cnd) {\n+        int a0 = cnd ? 1 : 2;\n+        int a1 = cnd ? 1 : 2;\n+        int a2 = cnd ? 1 : 2;\n+        int a3 = cnd ? 1 : 2;\n@@ -96,2 +97,1 @@\n-        long out = d;\n-        Asserts.assertEQ(out, 16L);\n+        return d;\n@@ -100,4 +100,9 @@\n-    static void testStress1() {\n-        int a = val ? 2 : 10;\n-        \/\/ This loop should be fully unrolled.\n-        for (int i = 0; i < 24; i++) {\n+    \/\/ Chain-shaped stress test. Before fixing bug 8254317, this test would\n+    \/\/ result in an out-of-memory error after minutes running.\n+    static long testStress1(boolean cnd) {\n+        \/\/ C2 infers a finite, small value range for a. Note that there are\n+        \/\/ different ways to achieve this, for example a might take the value of\n+        \/\/ the induction variable in an outer counted loop.\n+        int a = cnd ? 1 : 2;\n+        \/\/ C2 fully unrolls this loop, creating a long chain of AddIs.\n+        for (int i = 0; i < 28; i++) {\n@@ -106,2 +111,2 @@\n-        long out = a;\n-        Asserts.assertEQ(out, 33554432L);\n+        \/\/ C2 places a ConvI2L at the end of the AddI chain.\n+        return a;\n@@ -110,12 +115,13 @@\n-    static void testStress2() {\n-         int a = val ? 1 : 2;\n-         int b = a;\n-         int c = a + a;\n-         \/\/ This loop should be fully unrolled.\n-         for (int i = 0; i < 16; i++) {\n-             b = b + c;\n-             c = b + c;\n-         }\n-         long out = b + c;\n-         Asserts.assertEQ(out, 14930352L);\n-     }\n+    \/\/ DAG-shaped stress test. Before fixing bug 8254317, this test would result\n+    \/\/ in an out-of-memory error after minutes running.\n+    static long testStress2(boolean cnd) {\n+        int a = cnd ? 1 : 2;\n+        int b = a;\n+        int c = a + a;\n+        for (int i = 0; i < 20; i++) {\n+            b = b + c;\n+            c = b + c;\n+        }\n+        int d = b + c;\n+        return d;\n+    }\n@@ -124,0 +130,4 @@\n+        \/\/ We use a random number generator to avoid constant propagation in C2\n+        \/\/ and produce a variable (\"a\" in the different tests) with a finite,\n+        \/\/ small value range.\n+        Random rnd = new Random();\n@@ -125,4 +135,8 @@\n-        case \"basic\":\n-            testChain();\n-            testTree();\n-            testDAG();\n+        case \"functional\":\n+            \/\/ Small, functional tests.\n+            for (int i = 0; i < N; i++) {\n+                boolean cnd = rnd.nextBoolean();\n+                Asserts.assertEQ(testChain(cnd), cnd ? 8L : 16L);\n+                Asserts.assertEQ(testTree(cnd), cnd ? 8L : 16L);\n+                Asserts.assertEQ(testDAG(cnd), cnd ? 8L : 16L);\n+            }\n@@ -131,1 +145,7 @@\n-            testStress1();\n+            \/\/ Chain-shaped stress test.\n+            for (int i = 0; i < N; i++) {\n+                boolean cnd = rnd.nextBoolean();\n+                Asserts.assertEQ(testStress1(cnd),\n+                                 cnd ? 268435456L : 536870912L);\n+            }\n+            break;\n@@ -133,1 +153,7 @@\n-            testStress2();\n+            \/\/ DAG-shaped stress test.\n+            for (int i = 0; i < N; i++) {\n+                boolean cnd = rnd.nextBoolean();\n+                Asserts.assertEQ(testStress2(cnd),\n+                                 cnd ? 701408733L : 1402817466L);\n+            }\n+            break;\n","filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestMoveConvI2LThroughAddIs.java","additions":86,"deletions":60,"binary":false,"changes":146,"status":"modified"}]}