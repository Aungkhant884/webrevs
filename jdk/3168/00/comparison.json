{"files":[{"patch":"@@ -6263,0 +6263,1 @@\n+opclass vmem2(indirect, indIndex, indOffI2, indOffL2);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-instruct loadV2(vecD dst, memory mem)\n+instruct loadV2(vecD dst, vmem2 mem)\n@@ -44,0 +44,33 @@\n+\/\/ Load Vector (32 bits)\n+instruct loadV4(vecD dst, vmem4 mem)\n+%{\n+  predicate(n->as_LoadVector()->memory_size() == 4);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrs   $dst,$mem\\t# vector (32 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvS(dst, mem) );\n+  ins_pipe(vload_reg_mem64);\n+%}\n+\n+\/\/ Load Vector (64 bits)\n+instruct loadV8(vecD dst, vmem8 mem)\n+%{\n+  predicate(n->as_LoadVector()->memory_size() == 8);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrd   $dst,$mem\\t# vector (64 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvD(dst, mem) );\n+  ins_pipe(vload_reg_mem64);\n+%}\n+\n+\/\/ Load Vector (128 bits)\n+instruct loadV16(vecX dst, vmem16 mem)\n+%{\n+  predicate(UseSVE == 0 && n->as_LoadVector()->memory_size() == 16);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrq   $dst,$mem\\t# vector (128 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvQ(dst, mem) );\n+  ins_pipe(vload_reg_mem128);\n+%}\n+\n@@ -45,1 +78,1 @@\n-instruct storeV2(vecD src, memory mem)\n+instruct storeV2(vecD src, vmem2 mem)\n@@ -55,0 +88,33 @@\n+\/\/ Store Vector (32 bits)\n+instruct storeV4(vecD src, vmem4 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 4);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strs   $mem,$src\\t# vector (32 bits)\" %}\n+  ins_encode( aarch64_enc_strvS(src, mem) );\n+  ins_pipe(vstore_reg_mem64);\n+%}\n+\n+\/\/ Store Vector (64 bits)\n+instruct storeV8(vecD src, vmem8 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 8);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strd   $mem,$src\\t# vector (64 bits)\" %}\n+  ins_encode( aarch64_enc_strvD(src, mem) );\n+  ins_pipe(vstore_reg_mem64);\n+%}\n+\n+\/\/ Store Vector (128 bits)\n+instruct storeV16(vecX src, vmem16 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 16);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strq   $mem,$src\\t# vector (128 bits)\" %}\n+  ins_encode( aarch64_enc_strvQ(src, mem) );\n+  ins_pipe(vstore_reg_mem128);\n+%}\n+\n@@ -3706,66 +3772,0 @@\n-\/\/ Load Vector (32 bits)\n-instruct loadV4(vecD dst, vmem4 mem)\n-%{\n-  predicate(n->as_LoadVector()->memory_size() == 4);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrs   $dst,$mem\\t# vector (32 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvS(dst, mem) );\n-  ins_pipe(vload_reg_mem64);\n-%}\n-\n-\/\/ Load Vector (64 bits)\n-instruct loadV8(vecD dst, vmem8 mem)\n-%{\n-  predicate(n->as_LoadVector()->memory_size() == 8);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrd   $dst,$mem\\t# vector (64 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvD(dst, mem) );\n-  ins_pipe(vload_reg_mem64);\n-%}\n-\n-\/\/ Load Vector (128 bits)\n-instruct loadV16(vecX dst, vmem16 mem)\n-%{\n-  predicate(UseSVE == 0 && n->as_LoadVector()->memory_size() == 16);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrq   $dst,$mem\\t# vector (128 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvQ(dst, mem) );\n-  ins_pipe(vload_reg_mem128);\n-%}\n-\n-\/\/ Store Vector (32 bits)\n-instruct storeV4(vecD src, vmem4 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 4);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strs   $mem,$src\\t# vector (32 bits)\" %}\n-  ins_encode( aarch64_enc_strvS(src, mem) );\n-  ins_pipe(vstore_reg_mem64);\n-%}\n-\n-\/\/ Store Vector (64 bits)\n-instruct storeV8(vecD src, vmem8 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 8);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strd   $mem,$src\\t# vector (64 bits)\" %}\n-  ins_encode( aarch64_enc_strvD(src, mem) );\n-  ins_pipe(vstore_reg_mem64);\n-%}\n-\n-\/\/ Store Vector (128 bits)\n-instruct storeV16(vecX src, vmem16 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 16);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strq   $mem,$src\\t# vector (128 bits)\" %}\n-  ins_encode( aarch64_enc_strvQ(src, mem) );\n-  ins_pipe(vstore_reg_mem128);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":68,"deletions":68,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-instruct $3V$4`'(vec$5 $7, ifelse($4, 2, memory, vmem$4) mem)\n+instruct $3V$4`'(vec$5 $7, vmem$4 mem)\n@@ -73,0 +73,3 @@\n+VLoadStore(ldrs, S, load,  4,  D, 32,  dst, )\n+VLoadStore(ldrd, D, load,  8,  D, 64,  dst, )\n+VLoadStore(ldrq, Q, load, 16,  X, 128, dst, UseSVE == 0 && )\n@@ -74,0 +77,3 @@\n+VLoadStore(strs, S, store, 4,  D, 32,  src, )\n+VLoadStore(strd, D, store, 8,  D, 64,  src, )\n+VLoadStore(strq, Q, store, 16, X, 128, src, )\n@@ -1502,7 +1508,0 @@\n-VLoadStore(ldrs, S, load,  4,  D, 32,  dst, )\n-VLoadStore(ldrd, D, load,  8,  D, 64,  dst, )\n-VLoadStore(ldrq, Q, load, 16,  X, 128, dst, UseSVE == 0 && )\n-VLoadStore(strs, S, store, 4,  D, 32,  src, )\n-VLoadStore(strd, D, store, 8,  D, 64,  src, )\n-VLoadStore(strq, Q, store, 16, X, 128, src, )\n-dnl\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}