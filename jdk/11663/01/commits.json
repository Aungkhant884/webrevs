[{"commit":{"message":"Update the comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"87ac174512bd885c8249195a5bdf70700fbb0eb5"},{"commit":{"message":"8298244: AArch64: Optimize vector implementation of AddReduction for floating point\n\nThe patch optimizes floating-point AddReduction for Vector API on\nNEON via faddp instructions [1].\n\nTake AddReductionVF with 128-bit as an example.\n\nHere is the assembly code before the patch:\n```\nfadd    s18, s17, s16\nmov     v19.s[0], v16.s[1]\nfadd    s18, s18, s19\nmov     v19.s[0], v16.s[2]\nfadd    s18, s18, s19\nmov     v19.s[0], v16.s[3]\nfadd    s18, s18, s19\n```\n\nHere is the assembly code after the patch:\n```\nfaddp   v19.4s, v16.4s, v16.4s\nfaddp   s18, v19.2s\nfadd    s18, s18, s17\n```\n\nAs we can see, the patch adds all vector elements via faddp\ninstructions and then adds beginning value, which is different\nfrom the old code, i.e., adding vector elements sequentially\nfrom beginning to end. It helps reduce four instructions for\neach AddReductionVF.\n\nBut it may concern us that the patch will cause precision loss\nand generate incorrect results if superword vectorizes these\njava operations, because Java specifies a clear standard about\nprecision for floating-point add reduction, which requires that\nwe must add vector elements sequentially from beginning to end.\nFortunately, we can enjoy the benefit but don't need to pay for\nthe precision loss. Here are the reasons:\n\n1. JDK-8275275 disabled AddReductionVF\/D for superword on NEON\nsince no direct NEON instructions support them and, consequently,\nit's not profitable to auto-vectorize them. So, the vector\nimplementation of these two vector nodes is only used by\nVector API.\n\n2. Vector API relaxes the requirement for floating-point\nprecision of `ADD` [2]. \"The result of such an operation is a\nfunction both of the input values (vector and mask) as well as\nthe order of the scalar operations applied to combine lane values.\nIn such cases the order is intentionally not defined.\" \"If the\nplatform supports a vector instruction to add or multiply all\nvalues in the vector, or if there is some other efficient machine\ncode sequence, then the JVM has the option of generating this\nmachine code.\" To sum up, Vector API allows us to add all vector\nelements in an arbitrary order and then add the beginning value,\nto generate optimal machine code.\n\nTier 1~3 passed with no new failures on Linux AArch64 platform.\n\nHere is the perf data of jmh benchmark [3] for the patch:\n\nBenchmark                      size  Mode  Cnt  Before     After     Units\nDouble128Vector.addReduction   1024  thrpt  5   2167.146  2717.873   ops\/ms\nFloat128Vector.addReduction    1024  thrpt  5   1706.253  4890.909   ops\/ms\nFloat64Vector.addReduction     1024  thrpt  5   1907.425  2732.577   ops\/ms\n\n[1] https:\/\/developer.arm.com\/documentation\/ddi0602\/2022-06\/SIMD-FP-Instructions\/FADDP--scalar---Floating-point-Add-Pair-of-elements--scalar--\n    https:\/\/developer.arm.com\/documentation\/ddi0602\/2022-06\/SIMD-FP-Instructions\/FADDP--vector---Floating-point-Add-Pairwise--vector--\n[2] https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/api\/jdk.incubator.vector\/jdk\/incubator\/vector\/VectorOperators.html#fp_assoc\n[3] https:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java#L316\n    https:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java#L316\n    https:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java#L316"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"1c91fc6e53cd3da6f89e907019f0b2c5887507d9"}]