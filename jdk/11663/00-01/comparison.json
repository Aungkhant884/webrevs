{"files":[{"patch":"@@ -137,3 +137,3 @@\n-          \/\/ Specially, the current vector implementation of Op_AddReductionVD\/F works for\n-          \/\/ Vector API only. If re-enabling them for superword, precision loss will happen\n-          \/\/ because current generated code does not add elements sequentially from beginning to end.\n+          \/\/ The vector implementation of Op_AddReductionVD\/F is for the Vector API only.\n+          \/\/ It is not suitable for auto-vectorization because it does not add the elements\n+          \/\/ in the same order as sequential code, and FP addition is non-associative.\n@@ -2882,2 +2882,3 @@\n-\/\/ Specially, the current vector implementation of Op_AddReductionVF works for\n-\/\/ Vector API only because of the non-sequential order of element addition.\n+\/\/ Floating-point addition is not associative, so the rules for AddReductionVF\n+\/\/ on NEON can't be used to auto-vectorize floating-point reduce-add.\n+\/\/ Currently, on NEON, AddReductionVF is only generated by Vector API.\n@@ -2922,2 +2923,3 @@\n-\/\/ Specially, the current vector implementation of Op_AddReductionVD works for\n-\/\/ Vector API only because of the non-sequential order of element addition.\n+\/\/ Floating-point addition is not associative, so the rule for AddReductionVD\n+\/\/ on NEON can't be used to auto-vectorize floating-point reduce-add.\n+\/\/ Currently, on NEON, AddReductionVD is only generated by Vector API.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -127,3 +127,3 @@\n-          \/\/ Specially, the current vector implementation of Op_AddReductionVD\/F works for\n-          \/\/ Vector API only. If re-enabling them for superword, precision loss will happen\n-          \/\/ because current generated code does not add elements sequentially from beginning to end.\n+          \/\/ The vector implementation of Op_AddReductionVD\/F is for the Vector API only.\n+          \/\/ It is not suitable for auto-vectorization because it does not add the elements\n+          \/\/ in the same order as sequential code, and FP addition is non-associative.\n@@ -1814,2 +1814,3 @@\n-\/\/ Specially, the current vector implementation of Op_AddReductionVF works for\n-\/\/ Vector API only because of the non-sequential order of element addition.\n+\/\/ Floating-point addition is not associative, so the rules for AddReductionVF\n+\/\/ on NEON can't be used to auto-vectorize floating-point reduce-add.\n+\/\/ Currently, on NEON, AddReductionVF is only generated by Vector API.\n@@ -1859,2 +1860,3 @@\n-\/\/ Specially, the current vector implementation of Op_AddReductionVD works for\n-\/\/ Vector API only because of the non-sequential order of element addition.\n+\/\/ Floating-point addition is not associative, so the rule for AddReductionVD\n+\/\/ on NEON can't be used to auto-vectorize floating-point reduce-add.\n+\/\/ Currently, on NEON, AddReductionVD is only generated by Vector API.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}