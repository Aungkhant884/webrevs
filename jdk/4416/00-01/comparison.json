{"files":[{"patch":"@@ -140,1 +140,1 @@\n-                    throw new IllegalArgumentException(String.format(\"refKind=%d\", refKind));\n+                    throw new IllegalArgumentException(String.format(\"refKind=%d isInterface=%s\", refKind, isInterface));\n@@ -142,1 +142,2 @@\n-                if (kind.refKind == refKind && kind.isInterface == isInterface) {\n+                if (kind.refKind == refKind &&\n+                        (refKind != REF_invokeStatic || refKind != REF_invokeSpecial || kind.isInterface == isInterface)){\n@@ -146,1 +147,1 @@\n-            throw new IllegalArgumentException(String.format(\"refKind=%d\", refKind));\n+            throw new IllegalArgumentException(String.format(\"refKind=%d isInterface=%s\", refKind, isInterface));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import static java.lang.invoke.MethodHandleInfo.*;\n@@ -57,0 +58,1 @@\n+import static org.testng.Assert.assertNotEquals;\n@@ -365,0 +367,13 @@\n+        \/\/ let's now verify those cases for which the value of the isInterface parameter is ignored\n+        int[] isInterfaceIgnored = new int[] {\n+                REF_getField,\n+                REF_getStatic,\n+                REF_putField,\n+                REF_putStatic,\n+                REF_newInvokeSpecial,\n+                REF_invokeInterface\n+        };\n+\n+        for (int refKind : isInterfaceIgnored) {\n+            assertEquals(Kind.valueOf(refKind, false), Kind.valueOf(refKind, true));\n+        }\n","filename":"test\/jdk\/java\/lang\/constant\/MethodHandleDescTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}