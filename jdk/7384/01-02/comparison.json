{"files":[{"patch":"@@ -915,6 +915,4 @@\n-  \/\/ creates HPROF_GC_CLASS_DUMP record for the given class and each of its\n-  \/\/ array classes\n-  static void dump_class_and_array_classes(AbstractDumpWriter* writer, Klass* k);\n-  \/\/ creates HPROF_GC_CLASS_DUMP record for a given primitive array\n-  \/\/ class (and each multi-dimensional array class too)\n-  static void dump_basic_type_array_class(AbstractDumpWriter* writer, Klass* k);\n+  \/\/ creates HPROF_GC_CLASS_DUMP record for the given instance class\n+  static void dump_instance_class(AbstractDumpWriter* writer, Klass* k);\n+  \/\/ creates HPROF_GC_CLASS_DUMP record for a given array class\n+  static void dump_array_class(AbstractDumpWriter* writer, Klass* k);\n@@ -1246,3 +1244,2 @@\n-\/\/ creates HPROF_GC_CLASS_DUMP record for the given class and each of\n-\/\/ its array classes\n-void DumperSupport::dump_class_and_array_classes(AbstractDumpWriter* writer, Klass* k) {\n+\/\/ creates HPROF_GC_CLASS_DUMP record for the given instance class\n+void DumperSupport::dump_instance_class(AbstractDumpWriter* writer, Klass* k) {\n@@ -1301,0 +1298,1 @@\n+}\n@@ -1302,30 +1300,9 @@\n-  \/\/ array classes\n-  k = ik->array_klass_or_null();\n-  while (k != NULL) {\n-    assert(k->is_objArray_klass(), \"not an ObjArrayKlass\");\n-\n-    u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + 2;\n-    writer->start_sub_record(HPROF_GC_CLASS_DUMP, size);\n-    writer->write_classID(k);\n-    writer->write_u4(STACK_TRACE_ID);\n-\n-    \/\/ super class of array classes is java.lang.Object\n-    java_super = k->java_super();\n-    assert(java_super != NULL, \"checking\");\n-    writer->write_classID(java_super);\n-\n-    writer->write_objectID(ik->class_loader());\n-    writer->write_objectID(ik->signers());\n-    writer->write_objectID(ik->protection_domain());\n-\n-    writer->write_objectID(oop(NULL));    \/\/ reserved\n-    writer->write_objectID(oop(NULL));\n-    writer->write_u4(0);             \/\/ instance size\n-    writer->write_u2(0);             \/\/ constant pool\n-    writer->write_u2(0);             \/\/ static fields\n-    writer->write_u2(0);             \/\/ instance fields\n-\n-    writer->end_sub_record();\n-\n-    \/\/ get the array class for the next rank\n-    k = k->array_klass_or_null();\n+\/\/ creates HPROF_GC_CLASS_DUMP record for the given array class\n+void DumperSupport::dump_array_class(AbstractDumpWriter* writer, Klass* k) {\n+  InstanceKlass* ik = NULL; \/\/ bottom class for object arrays, NULL for primitive type arrays\n+  if (k->is_objArray_klass()) {\n+    Klass *bk = ObjArrayKlass::cast(k)->bottom_klass();\n+    assert(bk != NULL, \"checking\");\n+    if (bk->is_instance_klass()) {\n+      ik = InstanceKlass::cast(bk);\n+    }\n@@ -1333,1 +1310,0 @@\n-}\n@@ -1335,16 +1311,4 @@\n-\/\/ creates HPROF_GC_CLASS_DUMP record for a given primitive array\n-\/\/ class (and each multi-dimensional array class too)\n-void DumperSupport::dump_basic_type_array_class(AbstractDumpWriter* writer, Klass* k) {\n- \/\/ array classes\n- while (k != NULL) {\n-    Klass* klass = k;\n-\n-    u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + 2;\n-    writer->start_sub_record(HPROF_GC_CLASS_DUMP, size);\n-    writer->write_classID(klass);\n-    writer->write_u4(STACK_TRACE_ID);\n-\n-    \/\/ super class of array classes is java.lang.Object\n-    InstanceKlass* java_super = klass->java_super();\n-    assert(java_super != NULL, \"checking\");\n-    writer->write_classID(java_super);\n+  u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + 2;\n+  writer->start_sub_record(HPROF_GC_CLASS_DUMP, size);\n+  writer->write_classID(k);\n+  writer->write_u4(STACK_TRACE_ID);\n@@ -1352,3 +1316,4 @@\n-    writer->write_objectID(oop(NULL));    \/\/ loader\n-    writer->write_objectID(oop(NULL));    \/\/ signers\n-    writer->write_objectID(oop(NULL));    \/\/ protection domain\n+  \/\/ super class of array classes is java.lang.Object\n+  InstanceKlass* java_super = k->java_super();\n+  assert(java_super != NULL, \"checking\");\n+  writer->write_classID(java_super);\n@@ -1356,6 +1321,3 @@\n-    writer->write_objectID(oop(NULL));    \/\/ reserved\n-    writer->write_objectID(oop(NULL));\n-    writer->write_u4(0);             \/\/ instance size\n-    writer->write_u2(0);             \/\/ constant pool\n-    writer->write_u2(0);             \/\/ static fields\n-    writer->write_u2(0);             \/\/ instance fields\n+  writer->write_objectID(ik == NULL ? oop(NULL) : ik->class_loader());\n+  writer->write_objectID(ik == NULL ? oop(NULL) : ik->signers());\n+  writer->write_objectID(ik == NULL ? oop(NULL) : ik->protection_domain());\n@@ -1363,1 +1325,8 @@\n-    writer->end_sub_record();\n+  writer->write_objectID(oop(NULL));    \/\/ reserved\n+  writer->write_objectID(oop(NULL));\n+  writer->write_u4(0);             \/\/ instance size\n+  writer->write_u2(0);             \/\/ constant pool\n+  writer->write_u2(0);             \/\/ static fields\n+  writer->write_u2(0);             \/\/ instance fields\n+\n+  writer->end_sub_record();\n@@ -1365,3 +1334,0 @@\n-    \/\/ get the array class for the next rank\n-    k = klass->array_klass_or_null();\n-  }\n@@ -1942,1 +1908,0 @@\n-  \/\/ (and each array class too)\n@@ -1945,4 +1910,0 @@\n-  \/\/ writes a HPROF_GC_CLASS_DUMP records for a given basic type\n-  \/\/ array (and each multi-dimensional array too)\n-  static void do_basic_type_array_class_dump(Klass* k);\n-\n@@ -2058,1 +2019,3 @@\n-    DumperSupport::dump_class_and_array_classes(writer(), k);\n+    DumperSupport::dump_instance_class(writer(), k);\n+  } else {\n+    DumperSupport::dump_array_class(writer(), k);\n@@ -2062,6 +2025,0 @@\n-\/\/ writes a HPROF_GC_CLASS_DUMP records for a given basic type\n-\/\/ array (and each multi-dimensional array too)\n-void VM_HeapDumper::do_basic_type_array_class_dump(Klass* k) {\n-  DumperSupport::dump_basic_type_array_class(writer(), k);\n-}\n-\n@@ -2292,2 +2249,0 @@\n-    \/\/ For array classes we need signers and protection domain from their bottom classes\n-    \/\/ so do_class_dump skips array classes and dumps array classes with corresponding instance class.\n@@ -2298,2 +2253,0 @@\n-    \/\/ Need additionally dump basic array classes.\n-    Universe::basic_type_classes_do(&do_basic_type_array_class_dump);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":38,"deletions":85,"binary":false,"changes":123,"status":"modified"}]}