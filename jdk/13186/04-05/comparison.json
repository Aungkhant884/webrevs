{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.util.StringJoiner;\n@@ -99,6 +98,1 @@\n-        if (paramDescs.length == 0)\n-            return of(returnDesc);\n-        var params = paramDescs.clone();\n-        for (ClassDesc cr : params)\n-            MethodTypeDescImpl.validateParameter(cr);\n-        return new MethodTypeDescImpl(returnDesc, params);\n+        return MethodTypeDescImpl.ofTrusted(returnDesc, paramDescs.clone());\n@@ -204,7 +198,1 @@\n-    default String descriptorString() {\n-        var sj = new StringJoiner(\"\", \"(\", \")\" + returnType().descriptorString());\n-        for (int i = 0; i < parameterCount(); i++) {\n-            sj.add(parameterType(i).descriptorString());\n-        }\n-        return sj.toString();\n-    }\n+    String descriptorString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.StringJoiner;\n@@ -49,4 +50,10 @@\n-    static ClassDesc validateParameter(ClassDesc parameterType) {\n-        if (parameterType.isPrimitive() && parameterType.descriptorString().equals(\"V\"))\n-            throw new IllegalArgumentException(\"Void parameters not permitted\");\n-        return parameterType;\n+    \/**\n+     * Constructs a {@linkplain MethodTypeDesc} with the specified return type\n+     * and a trusted and already-validated parameter types array.\n+     *\n+     * @param returnType a {@link ClassDesc} describing the return type\n+     * @param validatedArgTypes {@link ClassDesc}s describing the trusted and validated parameter types\n+     *\/\n+    MethodTypeDescImpl(ClassDesc returnType, ClassDesc[] validatedArgTypes) {\n+        this.returnType = requireNonNull(returnType);\n+        this.argTypes = requireNonNull(validatedArgTypes);\n@@ -57,1 +64,1 @@\n-     * and a trusted and validated parameter types array\n+     * and a trusted parameter types array, which will be validated.\n@@ -60,1 +67,1 @@\n-     * @param trustedArgTypes {@link ClassDesc}s describing the trusted and validated parameter types\n+     * @param trustedArgTypes {@link ClassDesc}s describing the trusted parameter types\n@@ -62,3 +69,10 @@\n-    MethodTypeDescImpl(ClassDesc returnType, ClassDesc[] trustedArgTypes) {\n-        this.returnType = requireNonNull(returnType);\n-        this.argTypes = requireNonNull(trustedArgTypes);\n+    static MethodTypeDescImpl ofTrusted(ClassDesc returnType, ClassDesc[] trustedArgTypes) {\n+        Objects.requireNonNull(returnType);\n+        if (trustedArgTypes.length == 0) \/\/ implicit null check\n+            return new MethodTypeDescImpl(returnType, ConstantUtils.EMPTY_CLASSDESC);\n+\n+        for (ClassDesc cd : trustedArgTypes)\n+            if (cd.isPrimitive() && cd.descriptorString().charAt(0) == 'V') \/\/ implicit null check\n+                throw new IllegalArgumentException(\"Void parameters not permitted\");\n+\n+        return new MethodTypeDescImpl(returnType, trustedArgTypes);\n@@ -78,0 +92,1 @@\n+\n@@ -79,1 +94,3 @@\n-        ClassDesc[] paramTypes;\n+        ClassDesc returnType = ClassDesc.ofDescriptor(types.getFirst());\n+        MethodTypeDescImpl result;\n+\n@@ -82,1 +99,1 @@\n-            paramTypes = new ClassDesc[paramCount];\n+            var paramTypes = new ClassDesc[paramCount];\n@@ -84,1 +101,1 @@\n-                paramTypes[i] = validateParameter(ClassDesc.ofDescriptor(types.get(i + 1)));\n+                paramTypes[i] = ClassDesc.ofDescriptor(types.get(i + 1));\n@@ -86,0 +103,1 @@\n+            result = ofTrusted(returnType, paramTypes);\n@@ -87,1 +105,1 @@\n-            paramTypes = ConstantUtils.EMPTY_CLASSDESC;\n+            result = new MethodTypeDescImpl(returnType, ConstantUtils.EMPTY_CLASSDESC);\n@@ -90,3 +108,2 @@\n-        var ret = new MethodTypeDescImpl(ClassDesc.ofDescriptor(types.getFirst()), paramTypes);\n-        ret.cachedDescriptorString = descriptor;\n-        return ret;\n+        result.cachedDescriptorString = descriptor;\n+        return result;\n@@ -127,2 +144,0 @@\n-        validateParameter(paramType);\n-\n@@ -131,1 +146,1 @@\n-        return new MethodTypeDescImpl(returnType, newArgs);\n+        return ofTrusted(returnType, newArgs);\n@@ -142,1 +157,1 @@\n-        return new MethodTypeDescImpl(returnType, newArgs);\n+        return ofTrusted(returnType, newArgs);\n@@ -155,5 +170,1 @@\n-        for (int i = pos, end = pos + paramTypes.length; i < end; i++) {\n-            validateParameter(newArgs[i]);\n-        }\n-\n-        return new MethodTypeDescImpl(returnType, newArgs);\n+        return ofTrusted(returnType, newArgs);\n@@ -168,1 +179,5 @@\n-        return cachedDescriptorString = MethodTypeDesc.super.descriptorString();\n+        var sj = new StringJoiner(\"\", \"(\", \")\" + returnType().descriptorString());\n+        for (int i = 0; i < parameterCount(); i++) {\n+            sj.add(parameterType(i).descriptorString());\n+        }\n+        return cachedDescriptorString = sj.toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDescImpl.java","additions":41,"deletions":26,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -175,3 +175,2 @@\n-                                                var mtd = mm.methodTypeSymbol();\n-                                                for (int i = 0; i < mtd.parameterCount(); i++) {\n-                                                    var tk = TypeKind.from(mtd.parameterType(i));\n+                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n+                                                    var tk = TypeKind.from(pt);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-        for (int i = 0; i < methodDesc.parameterCount(); i++) {\n-            maxLocals += Util.slotSize(methodDesc.parameterType(i));\n+        for (var cd : methodDesc.parameterList()) {\n+            maxLocals += Util.slotSize(cd);\n@@ -308,3 +308,3 @@\n-                        var mDesc = Util.methodTypeSymbol(nameAndType);\n-                        for (int i = 0; i < mDesc.parameterCount(); i++) {\n-                            addStackSlot(-TypeKind.from(mDesc.parameterType(i)).slotSize());\n+                        var mDesc = MethodTypeDesc.ofDescriptor(nameAndType.type().stringValue());\n+                        for (var arg : mDesc.parameterList()) {\n+                            addStackSlot(-TypeKind.from(arg).slotSize());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-        for(int j = 0; j < methodType.parameterCount(); j++) {\n-            var arg = methodType.parameterType(j);\n+        for(var arg : methodType.parameterList()) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-                .mapToObj(r::parameterType)\n-                .toArray(ClassDesc[]::new)));\n+                                                                   .mapToObj(r::parameterType)\n+                                                                   .toArray(ClassDesc[]::new)));\n@@ -70,2 +70,2 @@\n-                .mapToObj(r::parameterType)\n-                .toList()));\n+                                                                   .mapToObj(r::parameterType)\n+                                                                   .toList()));\n@@ -92,1 +92,1 @@\n-                + returnType.descriptorString();\n+                            + returnType.descriptorString();\n@@ -137,3 +137,3 @@\n-                    .filter(j -> j != k)\n-                    .mapToObj(j -> paramTypes[j])\n-                    .toArray(ClassDesc[]::new);\n+                                      .filter(j -> j != k)\n+                                      .mapToObj(j -> paramTypes[j])\n+                                      .toArray(ClassDesc[]::new);\n@@ -161,2 +161,2 @@\n-                        .mapToObj(j -> (j < k) ? paramTypes[j] : (j == k) ? p : paramTypes[j-1])\n-                        .toArray(ClassDesc[]::new);\n+                                          .mapToObj(j -> (j < k) ? paramTypes[j] : (j == k) ? p : paramTypes[j-1])\n+                                          .toArray(ClassDesc[]::new);\n@@ -262,2 +262,2 @@\n-                \"(java.lang.String)V\", \"()[]\", \"(Ljava\/lang\/String)V\",\n-                \"(Ljava.lang.String;)V\", \"(java\/lang\/String)V\");\n+                                              \"(java.lang.String)V\", \"()[]\", \"(Ljava\/lang\/String)V\",\n+                                              \"(Ljava.lang.String;)V\", \"(java\/lang\/String)V\");\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}