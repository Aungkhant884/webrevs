{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.StringJoiner;\n@@ -98,1 +99,6 @@\n-        return new MethodTypeDescImpl(returnDesc, paramDescs);\n+        if (paramDescs.length == 0)\n+            return of(returnDesc);\n+        var params = paramDescs.clone();\n+        for (ClassDesc cr : params)\n+            MethodTypeDescImpl.validateParameter(cr);\n+        return new MethodTypeDescImpl(returnDesc, params);\n@@ -199,5 +205,5 @@\n-        return String.format(\"(%s)%s\",\n-                             Stream.of(parameterArray())\n-                                   .map(ClassDesc::descriptorString)\n-                                   .collect(Collectors.joining()),\n-                             returnType().descriptorString());\n+        var sj = new StringJoiner(\"\", \"(\", \")\" + returnType().descriptorString());\n+        for (int i = 0; i < parameterCount(); i++) {\n+            sj.add(parameterType(i).descriptorString());\n+        }\n+        return sj.toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.vm.annotation.Stable;\n+\n@@ -44,1 +46,8 @@\n-    private final ClassDesc[] argTypes;\n+    private final @Stable ClassDesc[] argTypes;\n+    private @Stable String cachedDescriptorString;\n+\n+    static ClassDesc validateParameter(ClassDesc parameterType) {\n+        if (parameterType.isPrimitive() && parameterType.descriptorString().equals(\"V\"))\n+            throw new IllegalArgumentException(\"Void parameters not permitted\");\n+        return parameterType;\n+    }\n@@ -48,1 +57,1 @@\n-     * and parameter types\n+     * and a trusted and validated parameter types array\n@@ -51,1 +60,1 @@\n-     * @param argTypes {@link ClassDesc}s describing the parameter types\n+     * @param trustedArgTypes {@link ClassDesc}s describing the trusted and validated parameter types\n@@ -53,1 +62,1 @@\n-    MethodTypeDescImpl(ClassDesc returnType, ClassDesc[] argTypes) {\n+    MethodTypeDescImpl(ClassDesc returnType, ClassDesc[] trustedArgTypes) {\n@@ -55,5 +64,1 @@\n-        this.argTypes = requireNonNull(argTypes);\n-\n-        for (ClassDesc cr : argTypes)\n-            if (cr.isPrimitive() && cr.descriptorString().equals(\"V\"))\n-                throw new IllegalArgumentException(\"Void parameters not permitted\");\n+        this.argTypes = requireNonNull(trustedArgTypes);\n@@ -74,2 +79,14 @@\n-        ClassDesc[] paramTypes = types.stream().skip(1).map(ClassDesc::ofDescriptor).toArray(ClassDesc[]::new);\n-        return new MethodTypeDescImpl(ClassDesc.ofDescriptor(types.get(0)), paramTypes);\n+        ClassDesc[] paramTypes;\n+        int paramCount = types.size() - 1;\n+        if (paramCount > 0) {\n+            paramTypes = new ClassDesc[paramCount];\n+            for (int i = 0; i < paramCount; i++) {\n+                paramTypes[i] = validateParameter(ClassDesc.ofDescriptor(types.get(i + 1)));\n+            }\n+        } else {\n+            paramTypes = ConstantUtils.EMPTY_CLASSDESC;\n+        }\n+\n+        var ret = new MethodTypeDescImpl(ClassDesc.ofDescriptor(types.getFirst()), paramTypes);\n+        ret.cachedDescriptorString = descriptor;\n+        return ret;\n@@ -105,1 +122,1 @@\n-        return MethodTypeDesc.of(returnType, argTypes);\n+        return new MethodTypeDescImpl(returnType, argTypes);\n@@ -110,0 +127,2 @@\n+        validateParameter(paramType);\n+\n@@ -112,1 +131,1 @@\n-        return MethodTypeDesc.of(returnType, newArgs);\n+        return new MethodTypeDescImpl(returnType, newArgs);\n@@ -123,1 +142,1 @@\n-        return MethodTypeDesc.of(returnType, newArgs);\n+        return new MethodTypeDescImpl(returnType, newArgs);\n@@ -130,0 +149,1 @@\n+\n@@ -134,1 +154,15 @@\n-        return MethodTypeDesc.of(returnType, newArgs);\n+\n+        for (int i = pos, end = pos + paramTypes.length; i < end; i++) {\n+            validateParameter(newArgs[i]);\n+        }\n+\n+        return new MethodTypeDescImpl(returnType, newArgs);\n+    }\n+\n+    @Override\n+    public String descriptorString() {\n+        var desc = this.cachedDescriptorString;\n+        if (desc != null)\n+            return desc;\n+\n+        return cachedDescriptorString = MethodTypeDesc.super.descriptorString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDescImpl.java","additions":50,"deletions":16,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -175,2 +175,3 @@\n-                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n-                                                    var tk = TypeKind.from(pt);\n+                                                var mtd = mm.methodTypeSymbol();\n+                                                for (int i = 0; i < mtd.parameterCount(); i++) {\n+                                                    var tk = TypeKind.from(mtd.parameterType(i));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-        for (var cd : methodDesc.parameterList()) {\n-            maxLocals += Util.slotSize(cd);\n+        for (int i = 0; i < methodDesc.parameterCount(); i++) {\n+            maxLocals += Util.slotSize(methodDesc.parameterType(i));\n@@ -308,3 +308,3 @@\n-                        var mDesc = MethodTypeDesc.ofDescriptor(nameAndType.type().stringValue());\n-                        for (var arg : mDesc.parameterList()) {\n-                            addStackSlot(-TypeKind.from(arg).slotSize());\n+                        var mDesc = Util.methodTypeSymbol(nameAndType);\n+                        for (int i = 0; i < mDesc.parameterCount(); i++) {\n+                            addStackSlot(-TypeKind.from(mDesc.parameterType(i)).slotSize());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -83,1 +83,2 @@\n-        for(var arg : methodType.parameterList()) {\n+        for(int j = 0; j < methodType.parameterCount(); j++) {\n+            var arg = methodType.parameterType(j);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.ArrayList;\n@@ -35,2 +36,1 @@\n-import static java.lang.constant.ConstantDescs.CD_int;\n-import static java.lang.constant.ConstantDescs.CD_void;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -39,3 +39,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertThrows;\n-import static org.testng.Assert.fail;\n+import static org.testng.Assert.*;\n@@ -45,0 +43,1 @@\n+ * @bug 8304932\n@@ -65,2 +64,2 @@\n-                                                                   .mapToObj(r::parameterType)\n-                                                                   .toArray(ClassDesc[]::new)));\n+                .mapToObj(r::parameterType)\n+                .toArray(ClassDesc[]::new)));\n@@ -71,2 +70,2 @@\n-                                                                   .mapToObj(r::parameterType)\n-                                                                   .toList()));\n+                .mapToObj(r::parameterType)\n+                .toList()));\n@@ -93,1 +92,1 @@\n-                            + returnType.descriptorString();\n+                + returnType.descriptorString();\n@@ -118,1 +117,1 @@\n-        try {\n+        expectThrows(NullPointerException.class, () -> {\n@@ -120,4 +119,1 @@\n-            fail(\"should fail with NPE\");\n-        } catch (NullPointerException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -141,3 +137,3 @@\n-                                      .filter(j -> j != k)\n-                                      .mapToObj(j -> paramTypes[j])\n-                                      .toArray(ClassDesc[]::new);\n+                    .filter(j -> j != k)\n+                    .mapToObj(j -> paramTypes[j])\n+                    .toArray(ClassDesc[]::new);\n@@ -147,0 +143,9 @@\n+\n+            \/\/ drop multiple params\n+            for (int j = i; j < paramTypes.length; j++) {\n+                var t = new ArrayList<>(Arrays.asList(paramTypes));\n+                t.subList(i, j).clear();\n+                MethodTypeDesc multiDrop = mtDesc.dropParameterTypes(i, j);\n+                assertEquals(multiDrop, MethodTypeDesc.of(returnType, t.toArray(ClassDesc[]::new)));\n+                testMethodTypeDesc(multiDrop, mt.dropParameterTypes(i, j));\n+            }\n@@ -156,2 +161,2 @@\n-                                          .mapToObj(j -> (j < k) ? paramTypes[j] : (j == k) ? p : paramTypes[j-1])\n-                                          .toArray(ClassDesc[]::new);\n+                        .mapToObj(j -> (j < k) ? paramTypes[j] : (j == k) ? p : paramTypes[j-1])\n+                        .toArray(ClassDesc[]::new);\n@@ -162,0 +167,15 @@\n+\n+            \/\/ add multiple params\n+            ClassDesc[] addition = {CD_int, CD_String};\n+            var a = new ArrayList<>(Arrays.asList(paramTypes));\n+            a.addAll(i, Arrays.asList(addition));\n+\n+            MethodTypeDesc newDesc = mtDesc.insertParameterTypes(i, addition);\n+            assertEquals(newDesc, MethodTypeDesc.of(returnType, a.toArray(ClassDesc[]::new)));\n+            testMethodTypeDesc(newDesc, mt.insertParameterTypes(i, Arrays.stream(addition).map(d -> {\n+                try {\n+                    return (Class<?>) d.resolveConstantDesc(LOOKUP);\n+                } catch (ReflectiveOperationException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n+            }).toArray(Class[]::new)));\n@@ -172,1 +192,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -174,4 +194,1 @@\n-            fail(\"pos < 0 should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -179,1 +196,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -181,4 +198,1 @@\n-            fail(\"pos > current arguments length should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -186,1 +200,1 @@\n-        try {\n+        expectThrows(IllegalArgumentException.class, () -> {\n@@ -191,4 +205,1 @@\n-            fail(\"shouldn't allow parameters with class descriptor CD_void\");\n-        } catch (IllegalArgumentException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -196,1 +207,1 @@\n-        try {\n+        expectThrows(NullPointerException.class, () -> {\n@@ -199,4 +210,1 @@\n-            fail(\"should fail with NPE\");\n-        } catch (NullPointerException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -204,1 +212,1 @@\n-        try {\n+        expectThrows(NullPointerException.class, () -> {\n@@ -209,4 +217,1 @@\n-            fail(\"should fail with NPE\");\n-        } catch (NullPointerException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -220,1 +225,2 @@\n-        try {\n+\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -222,4 +228,1 @@\n-            fail(\"start index < 0 should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -227,1 +230,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -229,4 +232,1 @@\n-            fail(\"start index = arguments.length should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -234,1 +234,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -236,4 +236,1 @@\n-            fail(\"start index > arguments.length should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -241,1 +238,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -243,4 +240,1 @@\n-            fail(\"end index > arguments.length should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -248,1 +242,1 @@\n-        try {\n+        expectThrows(IndexOutOfBoundsException.class, () -> {\n@@ -250,4 +244,1 @@\n-            fail(\"start index > end index should have failed\");\n-        } catch (IndexOutOfBoundsException ex) {\n-            \/\/ good\n-        }\n+        });\n@@ -271,2 +262,2 @@\n-                                              \"(java.lang.String)V\", \"()[]\", \"(Ljava\/lang\/String)V\",\n-                                              \"(Ljava.lang.String;)V\", \"(java\/lang\/String)V\");\n+                \"(java.lang.String)V\", \"()[]\", \"(Ljava\/lang\/String)V\",\n+                \"(Ljava.lang.String;)V\", \"(java\/lang\/String)V\");\n@@ -277,0 +268,1 @@\n+\n@@ -285,2 +277,0 @@\n-        \/\/ try with void arguments, this will stress another code path in particular\n-        \/\/ ConstantMethodTypeDesc::init\n@@ -294,0 +284,23 @@\n+\n+    public void testOfArrayImmutability() {\n+        ClassDesc[] args = {CD_Object, CD_int};\n+        var mtd = MethodTypeDesc.of(CD_void, args);\n+\n+        args[1] = CD_void;\n+        assertEquals(mtd, MethodTypeDesc.of(CD_void, CD_Object, CD_int));\n+\n+        mtd.parameterArray()[1] = CD_void;\n+        assertEquals(mtd, MethodTypeDesc.of(CD_void, CD_Object, CD_int));\n+    }\n+\n+    public void testOfListImmutability() {\n+        List<ClassDesc> args = Arrays.asList(CD_Object, CD_int);\n+        var mtd = MethodTypeDesc.of(CD_void, args);\n+\n+        args.set(1, CD_void);\n+        assertEquals(mtd, MethodTypeDesc.of(CD_void, CD_Object, CD_int));\n+\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                mtd.parameterList().set(1, CD_void));\n+        assertEquals(mtd, MethodTypeDesc.of(CD_void, CD_Object, CD_int));\n+    }\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":87,"deletions":74,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.constant;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Performance of conversion from and to method type descriptor symbols with\n+ * descriptor strings and class descriptor symbols\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 3, time = 2)\n+@Measurement(iterations = 6, time = 1)\n+@Fork(1)\n+@State(Scope.Benchmark)\n+public class MethodTypeDescFactories {\n+\n+    private static final ClassDesc DUMMY_CD = ClassDesc.of(\"Dummy_invalid\");\n+\n+    @Param({\n+            \"(Ljava\/lang\/Object;Ljava\/lang\/String;)I\",\n+            \"()V\",\n+            \"([IJLjava\/lang\/String;Z)Ljava\/util\/List;\",\n+            \"()[Ljava\/lang\/String;\"\n+    })\n+    public String descString;\n+    public MethodTypeDesc desc;\n+    public ClassDesc ret;\n+    public ClassDesc[] args;\n+    public List<ClassDesc> argsList;\n+\n+    @Setup\n+    public void setup() {\n+        desc = MethodTypeDesc.ofDescriptor(descString);\n+        ret = desc.returnType();\n+        args = desc.parameterArray();\n+        argsList = desc.parameterList();\n+    }\n+\n+    @Benchmark\n+    public String descriptorString(Blackhole blackhole) {\n+        \/\/ swaps return types with dummy classdesc;\n+        \/\/ this shares parameter arrays and avoids revalidation\n+        \/\/ while it drops the descriptor string cache\n+        var mtd = desc.changeReturnType(DUMMY_CD);\n+        blackhole.consume(mtd);\n+        mtd = mtd.changeReturnType(desc.returnType());\n+        blackhole.consume(mtd);\n+\n+        return mtd.descriptorString();\n+    }\n+\n+    @Benchmark\n+    public MethodTypeDesc ofDescriptor() {\n+        return MethodTypeDesc.ofDescriptor(descString);\n+    }\n+\n+    @Benchmark\n+    public MethodTypeDesc ofArray() {\n+        return MethodTypeDesc.of(ret, args);\n+    }\n+\n+    @Benchmark\n+    public MethodTypeDesc ofList() {\n+        return MethodTypeDesc.of(ret, argsList);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/constant\/MethodTypeDescFactories.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}