{"files":[{"patch":"@@ -230,1 +230,1 @@\n-  if (nm != NULL && nm->oops_do_try_claim()) {\n+  if (nm != NULL) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-  nmethod::oops_do_marking_prologue();\n@@ -90,4 +89,0 @@\n-ShenandoahCodeCacheRoots::~ShenandoahCodeCacheRoots() {\n-  nmethod::oops_do_marking_epilogue();\n-}\n-\n@@ -230,26 +225,49 @@\n-   ShenandoahRootProcessor(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _thread_roots(ShenandoahPhaseTimings::heap_iteration_roots, false \/*is par*\/),\n-   _vm_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, n_workers, true \/*heap iteration*\/),\n-   _weak_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _code_roots(ShenandoahPhaseTimings::heap_iteration_roots) {\n- }\n-\n- void ShenandoahHeapIterationRootScanner::roots_do(OopClosure* oops) {\n-   \/\/ Must use _claim_other to avoid interfering with concurrent CLDG iteration\n-   CLDToOopClosure clds(oops, ClassLoaderData::_claim_other);\n-   MarkingCodeBlobClosure code(oops, !CodeBlobToOopClosure::FixRelocations);\n-   ShenandoahParallelOopsDoThreadClosure tc_cl(oops, &code, NULL);\n-   AlwaysTrueClosure always_true;\n-\n-   ResourceMark rm;\n-\n-   \/\/ Process light-weight\/limited parallel roots then\n-   _vm_roots.oops_do(oops, 0);\n-   _weak_roots.oops_do<OopClosure>(oops, 0);\n-   _cld_roots.cld_do(&clds, 0);\n-\n-   \/\/ Process heavy-weight\/fully parallel roots the last\n-   _code_roots.code_blobs_do(&code, 0);\n-   _thread_roots.threads_do(&tc_cl, 0);\n- }\n+  ShenandoahRootProcessor(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _thread_roots(ShenandoahPhaseTimings::heap_iteration_roots, false \/*is par*\/),\n+  _vm_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, n_workers, true \/*heap iteration*\/),\n+  _weak_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _code_roots(ShenandoahPhaseTimings::heap_iteration_roots) {\n+}\n+\n+class ShenandoahMarkCodeBlobClosure : public CodeBlobClosure {\n+private:\n+  OopClosure* const _oops;\n+  BarrierSetNMethod* const _bs_nm;\n+\n+public:\n+  ShenandoahMarkCodeBlobClosure(OopClosure* oops) :\n+    _oops(oops),\n+    _bs_nm(BarrierSet::barrier_set()->barrier_set_nmethod()) {}\n+\n+  virtual void do_code_blob(CodeBlob* cb) {\n+    nmethod* const nm = cb->as_nmethod_or_null();\n+    if (nm != nullptr) {\n+      if (_bs_nm != nullptr) {\n+        \/\/ Make sure it only sees to-space objects\n+        _bs_nm->nmethod_entry_barrier(nm);\n+      }\n+      ShenandoahNMethod* const snm = ShenandoahNMethod::gc_data(nm);\n+      assert(snm != nullptr, \"Sanity\");\n+      snm->oops_do(_oops, false \/*fix_relocations*\/);\n+    }\n+  }\n+};\n+\n+void ShenandoahHeapIterationRootScanner::roots_do(OopClosure* oops) {\n+  \/\/ Must use _claim_other to avoid interfering with concurrent CLDG iteration\n+  CLDToOopClosure clds(oops, ClassLoaderData::_claim_other);\n+  ShenandoahMarkCodeBlobClosure code(oops);\n+  ShenandoahParallelOopsDoThreadClosure tc_cl(oops, &code, NULL);\n+\n+  ResourceMark rm;\n+\n+  \/\/ Process light-weight\/limited parallel roots then\n+  _vm_roots.oops_do(oops, 0);\n+  _weak_roots.oops_do<OopClosure>(oops, 0);\n+  _cld_roots.cld_do(&clds, 0);\n+\n+  \/\/ Process heavy-weight\/fully parallel roots the last\n+  _code_roots.code_blobs_do(&code, 0);\n+  _thread_roots.threads_do(&tc_cl, 0);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":49,"deletions":31,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  ~ShenandoahCodeCacheRoots();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}