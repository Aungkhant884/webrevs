{"files":[{"patch":"@@ -38,2 +38,4 @@\n-void G1CollectionSetCandidates::prune(uint keep_min_regions, size_t prune_total_bytes) {\n-  uint regions_left = _num_regions;\n+void G1CollectionSetCandidates::prune(uint keep_min_regions,\n+                                      size_t prune_total_bytes,\n+                                      HeapRegionClosure* cl) {\n+  uint regions_left;\n@@ -42,1 +44,1 @@\n-  while (regions_left > keep_min_regions) {\n+  for (regions_left = _num_regions; regions_left > keep_min_regions; regions_left--) {\n@@ -44,0 +46,1 @@\n+    HeapRegion* region = at(cur_idx);\n@@ -45,1 +48,1 @@\n-    if ((at(cur_idx)->reclaimable_bytes() + pruned_bytes) > prune_total_bytes) {\n+    if ((region->reclaimable_bytes() + pruned_bytes) > prune_total_bytes) {\n@@ -48,3 +51,2 @@\n-\n-    pruned_bytes += at(cur_idx)->reclaimable_bytes();\n-    at(cur_idx)->rem_set()->clear(true \/* only_cardset *\/);\n+    pruned_bytes += region->reclaimable_bytes();\n+    cl->do_heap_region(region);\n@@ -53,1 +55,0 @@\n-    regions_left--;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n-  \/\/ collection set candidate regions first.\n-  void prune(uint keep_min_regions, size_t prune_total_bytes);\n+  \/\/ collection set candidate regions first. Applies cl on the pruned regions.\n+  void prune(uint keep_min_regions, size_t prune_total_bytes, HeapRegionClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -267,0 +267,8 @@\n+  class PruneRegionClosure : public HeapRegionClosure {\n+  public:\n+    virtual bool do_heap_region(HeapRegion* r) {\n+      r->rem_set()->clear(true \/* only_cardset *\/); \/\/ Simply drop the remembered set cards.\n+      return false;\n+    }\n+  } prune_cl;\n+\n@@ -268,0 +276,1 @@\n+\n@@ -269,1 +278,1 @@\n-  p->prune_collection_set(result);\n+  p->prune_collection_set(result, &prune_cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1286,1 +1286,1 @@\n-void G1Policy::prune_collection_set(G1CollectionSetCandidates* candidates) {\n+void G1Policy::prune_collection_set(G1CollectionSetCandidates* candidates, HeapRegionClosure* cl) {\n@@ -1292,1 +1292,1 @@\n-  candidates->prune(calc_min_old_cset_length(candidates), accepted_waste);\n+  candidates->prune(calc_min_old_cset_length(candidates), accepted_waste, cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -352,2 +352,3 @@\n-  \/\/ of old collection set candidates for a single GC.\n-  void prune_collection_set(G1CollectionSetCandidates* candidates);\n+  \/\/ of old collection set candidates for a single GC. Applies cl onto the pruned\n+  \/\/ regions.\n+  void prune_collection_set(G1CollectionSetCandidates* candidates, HeapRegionClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}