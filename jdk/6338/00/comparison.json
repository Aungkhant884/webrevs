{"files":[{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BooleanSupplier;\n+\n+\/**\n+ * This microbenchmark models producer-consumer.\n+ *\n+ * The microbenchmark uses two thread: 1 for a producer, 1 for a consumer.\n+ * The microbenchmark uses BigInteger to have latencies of producing\/consuming\n+ * data comparable with synchronization operations.\n+ *\n+ * Thread.onSpinWait is used in a spin loop which is used to avoid heavy locks.\n+ * In the spin loop volatile fields are checked. To reduce overhead accessing them\n+ * they are only checked after a number of iterations.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Benchmark)\n+@Threads(1)\n+public class ThreadOnSpinWaitProducerConsumer {\n+    @Param({\"100\"})\n+    public int maxNum;\n+\n+    @Param({\"125\"})\n+    public int spinNum;\n+\n+    @Param({\"10\"})\n+    public int checkSpinCondAfterIters;\n+\n+    @Param({\"256\"})\n+    public int dataBitLength;\n+\n+    private Thread threadProducer;\n+    private Thread threadConsumer;\n+    private Object monitor;\n+\n+    private BigInteger a;\n+    private BigInteger b;\n+    private Blackhole bh;\n+\n+    private volatile int dataId;\n+    private volatile int seenDataId;\n+\n+    private int producedDataCount;\n+    private int consumedDataCount;\n+\n+    private void produceData() {\n+        if (!isDataSeen()) {\n+            return;\n+        }\n+\n+        b = a.not();\n+        ++dataId;\n+        ++producedDataCount;\n+    }\n+\n+    private void consumeData() {\n+        if (isDataSeen()) {\n+            return;\n+        }\n+        bh.consume(a.equals(b.not()));\n+        seenDataId = dataId;\n+        ++consumedDataCount;\n+    }\n+\n+    private boolean isDataSeen() {\n+        return seenDataId == dataId;\n+    }\n+\n+    private boolean isNewData() {\n+        return seenDataId != dataId;\n+    }\n+\n+    private boolean spinWaitForCondition(int spinNum, BooleanSupplier cond) {\n+        for (int i = 0; i < spinNum; ++i) {\n+            if ((i % checkSpinCondAfterIters) == 0 && cond.getAsBoolean()) {\n+                return true;\n+            }\n+            Thread.onSpinWait();\n+        }\n+        return cond.getAsBoolean();\n+    }\n+\n+    void produce() {\n+        try {\n+            while (dataId < maxNum) {\n+                if (spinWaitForCondition(this.spinNum, this::isDataSeen)) {\n+                    synchronized (monitor) {\n+                        produceData();\n+                        monitor.notify();\n+                    }\n+                } else {\n+                    synchronized (monitor) {\n+                        while (!isDataSeen()) {\n+                            monitor.wait();\n+                        }\n+\n+                        produceData();\n+                        monitor.notify();\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException e) {}\n+    }\n+\n+    void consume() {\n+        try {\n+            for (;;) {\n+                if (spinWaitForCondition(this.spinNum, this::isNewData)) {\n+                    synchronized (monitor) {\n+                         consumeData();\n+                         monitor.notify();\n+                    }\n+                } else {\n+                    synchronized (monitor) {\n+                        while (isDataSeen()) {\n+                            monitor.wait();\n+                        }\n+\n+                        consumeData();\n+                        monitor.notify();\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException e) {}\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void setup01() {\n+        Random rnd = new Random(111);\n+        a = BigInteger.probablePrime(dataBitLength, rnd);\n+        monitor = new Object();\n+    }\n+\n+    @Setup(Level.Invocation)\n+    public void setup02() {\n+        threadProducer = new Thread(this::produce);\n+        threadConsumer = new Thread(this::consume);\n+    }\n+\n+    @Benchmark\n+    public void trial(Blackhole bh) throws Exception {\n+        this.bh = bh;\n+        producedDataCount = 0;\n+        consumedDataCount = 0;\n+        dataId = 0;\n+        seenDataId = 0;\n+        threadProducer.start();\n+        threadConsumer.start();\n+        threadProducer.join();\n+\n+        synchronized (monitor) {\n+            while (!isDataSeen()) {\n+                monitor.wait();\n+            }\n+        }\n+        threadConsumer.interrupt();\n+\n+        if (producedDataCount != maxNum) {\n+            throw new RuntimeException(\"Produced: \" + producedDataCount + \". Expected: \" + maxNum);\n+        }\n+        if (producedDataCount != consumedDataCount) {\n+            throw new RuntimeException(\"produced != consumed: \" + producedDataCount + \" != \" + consumedDataCount);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ThreadOnSpinWaitProducerConsumer.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"}]}