{"files":[{"patch":"@@ -1024,4 +1024,0 @@\n-    \/\/ Can't continue because UseRTMLocking affects UseBiasedLocking flag\n-    \/\/ setting during arguments processing. See use_biased_locking().\n-    \/\/ VM_Version_init() is executed after UseBiasedLocking is used\n-    \/\/ in Thread::allocate().\n@@ -1035,2 +1031,0 @@\n-      \/\/ Can't continue because UseRTMLocking affects UseBiasedLocking flag\n-      \/\/ setting during arguments processing. See use_biased_locking().\n@@ -1074,2 +1068,0 @@\n-    \/\/ Can't continue because UseRTMLocking affects UseBiasedLocking flag\n-    \/\/ setting during arguments processing. See use_biased_locking().\n@@ -1748,21 +1740,0 @@\n-bool VM_Version::use_biased_locking() {\n-#if INCLUDE_RTM_OPT\n-  \/\/ RTM locking is most useful when there is high lock contention and\n-  \/\/ low data contention.  With high lock contention the lock is usually\n-  \/\/ inflated and biased locking is not suitable for that case.\n-  \/\/ RTM locking code requires that biased locking is off.\n-  \/\/ Note: we can't switch off UseBiasedLocking in get_processor_features()\n-  \/\/ because it is used by Thread::allocate() which is called before\n-  \/\/ VM_Version::initialize().\n-  if (UseRTMLocking && UseBiasedLocking) {\n-    if (FLAG_IS_DEFAULT(UseBiasedLocking)) {\n-      FLAG_SET_DEFAULT(UseBiasedLocking, false);\n-    } else {\n-      warning(\"Biased locking is not supported with RTM locking; ignoring UseBiasedLocking flag.\" );\n-      UseBiasedLocking = false;\n-    }\n-  }\n-#endif\n-  return UseBiasedLocking;\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-        wait_blocked(self->as_Java_thread(), now);\n+        wait_blocked(JavaThread::cast(self), now);\n@@ -304,1 +304,1 @@\n-    StackWatermarkSet::start_processing(_requester->as_Java_thread(), StackWatermarkKind::gc);\n+    StackWatermarkSet::start_processing(JavaThread::cast(_requester), StackWatermarkKind::gc);\n@@ -630,1 +630,1 @@\n-    JavaThread* current = thr->as_Java_thread();\n+    JavaThread* current = JavaThread::cast(thr);\n@@ -643,2 +643,2 @@\n-  if (_handshakee->is_exiting() ||\n-     _handshakee->threadObj() == NULL) {\n+  assert(_handshakee->threadObj() != NULL, \"cannot suspend with a NULL threadObj\");\n+  if (_handshakee->is_exiting()) {\n@@ -679,1 +679,1 @@\n-    JavaThread* target = thr->as_Java_thread();\n+    JavaThread* target = JavaThread::cast(thr);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -557,0 +557,1 @@\n+java\/lang\/invoke\/RicochetTest.java                              8251969 generic-all\n@@ -666,1 +667,0 @@\n-security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/BuypassCA.java  8243543 generic-all\n@@ -669,1 +669,0 @@\n-security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/LetsEncryptCA.java 8270280 generic-all\n@@ -749,3 +748,0 @@\n-javax\/swing\/JFileChooser\/FileSystemView\/SystemIconTest.java 8268280 windows-x64\n-\n-javax\/swing\/plaf\/basic\/BasicHTML\/4251579\/bug4251579.java 8137101 linux-x64\n@@ -833,1 +829,1 @@\n-jdk\/jfr\/event\/gc\/detailed\/TestEvacuationFailedEvent.java        8263461 linux-x64\n+jdk\/jfr\/event\/oldobject\/TestObjectSize.java                     8269418 macosx-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}