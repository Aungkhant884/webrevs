{"files":[{"patch":"@@ -105,0 +105,2 @@\n+    private static final Method METHOD_ENABLED = new Method(\"enabled\", Type.BOOLEAN_TYPE, new Type[0]);\n+    private static final Method METHOD_SHOULD_COMMIT_LONG = new Method(\"shouldCommit\", Type.BOOLEAN_TYPE, new Type[] { Type.LONG_TYPE });\n@@ -115,0 +117,1 @@\n+    private final boolean isJDK;\n@@ -116,1 +119,1 @@\n-    EventInstrumentation(Class<?> superClass, byte[] bytes, long id, boolean bootClass, boolean guardEventConfiguration) {\n+    EventInstrumentation(Class<?> superClass, byte[] bytes, long id, boolean isJDK, boolean guardEventConfiguration) {\n@@ -124,1 +127,1 @@\n-        this.staticCommitMethod = bootClass ? findStaticCommitMethod(classNode, fieldInfos) : null;\n+        this.staticCommitMethod = isJDK ? findStaticCommitMethod(classNode, fieldInfos) : null;\n@@ -130,0 +133,1 @@\n+        this.isJDK = isJDK;\n@@ -337,16 +341,2 @@\n-        updateMethod(METHOD_IS_ENABLED, methodVisitor -> {\n-            Label nullLabel = new Label();\n-            if (guardEventConfiguration) {\n-                getEventConfiguration(methodVisitor);\n-                methodVisitor.visitJumpInsn(Opcodes.IFNULL, nullLabel);\n-            }\n-            getEventConfiguration(methodVisitor);\n-            invokeVirtual(methodVisitor, TYPE_EVENT_CONFIGURATION, METHOD_IS_ENABLED);\n-            methodVisitor.visitInsn(Opcodes.IRETURN);\n-            if (guardEventConfiguration) {\n-                methodVisitor.visitLabel(nullLabel);\n-                methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);\n-                methodVisitor.visitInsn(Opcodes.ICONST_0);\n-                methodVisitor.visitInsn(Opcodes.IRETURN);\n-            }\n-        });\n+        \/\/ MyEvent#isEnabled()\n+        updateEnabledMethod(METHOD_IS_ENABLED);\n@@ -671,0 +661,68 @@\n+\n+        if (isJDK) {\n+            if (hasStaticMethod(METHOD_ENABLED)) {\n+                updateEnabledMethod(METHOD_ENABLED);\n+            };\n+            updateIfStaticMethodExists(METHOD_SHOULD_COMMIT_LONG, methodVisitor -> {\n+                Label fail = new Label();\n+                if (guardEventConfiguration) {\n+                    \/\/ if (eventConfiguration == null) goto fail;\n+                    getEventConfiguration(methodVisitor);\n+                    methodVisitor.visitJumpInsn(Opcodes.IFNULL, fail);\n+                }\n+                \/\/ return eventConfiguration.shouldCommit(duration);\n+                getEventConfiguration(methodVisitor);\n+                methodVisitor.visitVarInsn(Opcodes.LLOAD, 0);\n+                invokeVirtual(methodVisitor, TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT);\n+                methodVisitor.visitInsn(Opcodes.IRETURN);\n+                \/\/ fail:\n+                methodVisitor.visitLabel(fail);\n+                \/\/ return false\n+                methodVisitor.visitInsn(Opcodes.ICONST_0);\n+                methodVisitor.visitInsn(Opcodes.IRETURN);\n+                methodVisitor.visitMaxs(0, 0);\n+                methodVisitor.visitEnd();\n+            });\n+            updateIfStaticMethodExists(METHOD_TIME_STAMP, methodVisitor -> {\n+                invokeStatic(methodVisitor, TYPE_EVENT_CONFIGURATION.getInternalName(), METHOD_TIME_STAMP);\n+                methodVisitor.visitInsn(Opcodes.LRETURN);\n+                methodVisitor.visitMaxs(0, 0);\n+                methodVisitor.visitEnd();\n+            });\n+        }\n+    }\n+\n+    private void updateEnabledMethod(Method method) {\n+        updateMethod(method, methodVisitor -> {\n+            Label nullLabel = new Label();\n+            if (guardEventConfiguration) {\n+                getEventConfiguration(methodVisitor);\n+                methodVisitor.visitJumpInsn(Opcodes.IFNULL, nullLabel);\n+            }\n+            getEventConfiguration(methodVisitor);\n+            invokeVirtual(methodVisitor, TYPE_EVENT_CONFIGURATION, METHOD_IS_ENABLED);\n+            methodVisitor.visitInsn(Opcodes.IRETURN);\n+            if (guardEventConfiguration) {\n+                methodVisitor.visitLabel(nullLabel);\n+                methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);\n+                methodVisitor.visitInsn(Opcodes.ICONST_0);\n+                methodVisitor.visitInsn(Opcodes.IRETURN);\n+            }\n+            methodVisitor.visitMaxs(0, 0);\n+            methodVisitor.visitEnd();\n+        });\n+    }\n+\n+    private void updateIfStaticMethodExists(Method method, Consumer<MethodVisitor> code) {\n+        if (hasStaticMethod(method)) {\n+            updateMethod(method, code);\n+        }\n+    }\n+\n+    private boolean hasStaticMethod(Method method) {\n+        for (MethodNode m : classNode.methods) {\n+            if (m.name.equals(method.getName()) && m.desc.equals(method.getDescriptor())) {\n+                return Modifier.isStatic(m.access);\n+            }\n+        }\n+        return false;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":76,"deletions":18,"binary":false,"changes":94,"status":"modified"}]}