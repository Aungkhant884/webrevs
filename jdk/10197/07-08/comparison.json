{"files":[{"patch":"@@ -62,3 +62,1 @@\n-            for (InputNode n : nodeList) {\n-                nodes.add(n);\n-            }\n+            nodes.addAll(nodeList);\n@@ -91,1 +89,1 @@\n-        return new Action[]{(Action) SelectBytecodesAction.findObject(SelectBytecodesAction.class, true)};\n+        return new Action[]{SelectBytecodesAction.findObject(SelectBytecodesAction.class, true)};\n@@ -96,1 +94,1 @@\n-        return (Action) SelectBytecodesAction.findObject(SelectBytecodesAction.class, true);\n+        return SelectBytecodesAction.findObject(SelectBytecodesAction.class, true);\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeNode.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-    private ExplorerManager manager;\n-    private BeanTreeView treeView;\n+    private final ExplorerManager manager;\n+    private final BeanTreeView treeView;\n@@ -50,1 +50,1 @@\n-    private MethodNode rootNode;\n+    private final MethodNode rootNode;\n@@ -94,1 +94,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -168,10 +168,7 @@\n-            SwingUtilities.invokeLater(new Runnable() {\n-                @Override\n-                public void run() {\n-                if (p != null) {\n-                    InputGraph graph = p.getGraph();\n-                    if (graph != null) {\n-                        Group g = graph.getGroup();\n-                        rootNode.update(graph, g.getMethod());\n-                        return;\n-                    }\n+            SwingUtilities.invokeLater(() -> {\n+            if (p != null) {\n+                InputGraph graph = p.getGraph();\n+                if (graph != null) {\n+                    Group g = graph.getGroup();\n+                    rootNode.update(graph, g.getMethod());\n+                    return;\n@@ -179,3 +176,3 @@\n-                        rootNode.update(null, null);\n-                    }\n-            });\n+            }\n+                    rootNode.update(null, null);\n+                });\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeViewTopComponent.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        private String bciString;\n+        private final String bciString;\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/MethodNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private Set<InputNode> nodes;\n+    private final Set<InputNode> nodes;\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/SelectBytecodesCookie.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,4 +48,4 @@\n-    private BlockWidget from;\n-    private BlockWidget to;\n-    private Port inputSlot;\n-    private Port outputSlot;\n+    private final BlockWidget from;\n+    private final BlockWidget to;\n+    private final Port inputSlot;\n+    private final Port outputSlot;\n@@ -53,1 +53,1 @@\n-    private InputBlockEdge edge;\n+    private final InputBlockEdge edge;\n@@ -68,4 +68,0 @@\n-    public InputBlockEdge getEdge() {\n-        return edge;\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/BlockConnectionWidget.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-    private InputBlock block;\n-    private Port inputSlot;\n-    private Port outputSlot;\n+    private final InputBlock block;\n+    private final Port inputSlot;\n+    private final Port outputSlot;\n@@ -125,8 +125,0 @@\n-    public void setCluster(Cluster c) {\n-        cluster = c;\n-    }\n-\n-    public void setRoot(boolean b) {\n-        root = b;\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/BlockWidget.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    private HashSet<BlockWidget> selection;\n+    private final HashSet<BlockWidget> selection;\n@@ -59,6 +59,5 @@\n-    private LayerWidget edgeLayer;\n-    private LayerWidget mainLayer;\n-    private LayerWidget selectLayer;\n-    private WidgetAction hoverAction = this.createWidgetHoverAction();\n-    private WidgetAction selectAction = new DoubleClickSelectAction(this);\n-    private WidgetAction moveAction = ActionFactory.createMoveAction(null, this);\n+    private final LayerWidget edgeLayer;\n+    private final LayerWidget mainLayer;\n+    private final WidgetAction hoverAction = this.createWidgetHoverAction();\n+    private final WidgetAction selectAction = new DoubleClickSelectAction(this);\n+    private final WidgetAction moveAction = ActionFactory.createMoveAction(null, this);\n@@ -78,1 +77,1 @@\n-        selectLayer = new LayerWidget(this);\n+        LayerWidget selectLayer = new LayerWidget(this);\n@@ -232,0 +231,1 @@\n+            assert w.getBounds() != null;\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private ControlFlowScene scene;\n+    private final ControlFlowScene scene;\n@@ -89,1 +89,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -135,7 +135,4 @@\n-            SwingUtilities.invokeLater(new Runnable() {\n-\n-                public void run() {\n-                    InputGraph g = p.getGraph();\n-                    if (g != null) {\n-                        scene.setGraph(g);\n-                    }\n+            SwingUtilities.invokeLater(() -> {\n+                InputGraph g = p.getGraph();\n+                if (g != null) {\n+                    scene.setGraph(g);\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-        private VertexWrapper from;\n-        private VertexWrapper to;\n+        private final VertexWrapper from;\n+        private final VertexWrapper to;\n@@ -85,3 +85,3 @@\n-        private N node;\n-        private UniversalGraph<N, E> graph;\n-        private Port slot;\n+        private final N node;\n+        private final UniversalGraph<N, E> graph;\n+        private final Port slot;\n@@ -115,0 +115,1 @@\n+            assert w.getBounds() != null;\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/HierarchicalGraphLayout.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-    private InstanceContent content;\n-    private FolderChildren children;\n+    private final InstanceContent content;\n+    private final FolderChildren children;\n@@ -51,1 +51,1 @@\n-    private static Map<InputGraph, GraphNode> graphNode = new HashMap<>();\n+    private static final Map<InputGraph, GraphNode> graphNode = new HashMap<>();\n@@ -125,6 +125,3 @@\n-            content.add(new RemoveCookie() {\n-                @Override\n-                public void remove() {\n-                    children.destroyNodes(children.getNodes());\n-                    folderElement.getParent().removeElement(folderElement);\n-                }\n+            content.add((RemoveCookie) () -> {\n+                children.destroyNodes(children.getNodes());\n+                folderElement.getParent().removeElement(folderElement);\n@@ -146,1 +143,1 @@\n-        return (folder != null && folder instanceof GraphDocument);\n+        return (folder instanceof GraphDocument);\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/FolderNode.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        return new Action[]{(Action) DiffGraphAction.findObject(DiffGraphAction.class, true), (Action) CloneGraphAction.findObject(CloneGraphAction.class, true), (Action) OpenAction.findObject(OpenAction.class, true)};\n+        return new Action[]{DiffGraphAction.findObject(DiffGraphAction.class, true), CloneGraphAction.findObject(CloneGraphAction.class, true), OpenAction.findObject(OpenAction.class, true)};\n@@ -110,1 +110,1 @@\n-        return (Action) OpenAction.findObject(OpenAction.class, true);\n+        return OpenAction.findObject(OpenAction.class, true);\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/GraphNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    private GraphDocument document;\n+    private final GraphDocument document;\n@@ -67,1 +67,0 @@\n-    private Server server;\n@@ -100,1 +99,1 @@\n-        toolbar.add(((NodeAction) SaveAsAction.get(SaveAsAction.class)).createContextAwareInstance(this.getLookup()));\n+        toolbar.add((SaveAsAction.get(SaveAsAction.class)).createContextAwareInstance(this.getLookup()));\n@@ -106,1 +105,1 @@\n-        toolbar.add(((NodeAction) RemoveAction.get(RemoveAction.class)).createContextAwareInstance(this.getLookup()));\n+        toolbar.add((RemoveAction.get(RemoveAction.class)).createContextAwareInstance(this.getLookup()));\n@@ -129,8 +128,4 @@\n-        final GroupCallback callback = new GroupCallback() {\n-\n-            @Override\n-            public void started(Group g) {\n-                synchronized(OutlineTopComponent.this) {\n-                    g.setParent(getDocument());\n-                    getDocument().addElement(g);\n-                }\n+        final GroupCallback callback = g -> {\n+            synchronized(OutlineTopComponent.this) {\n+                g.setParent(getDocument());\n+                getDocument().addElement(g);\n@@ -140,1 +135,1 @@\n-        server = new Server(callback);\n+        Server server = new Server(callback);\n@@ -184,1 +179,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -259,1 +254,1 @@\n-        SwingUtilities.invokeLater(() -> updateGraphSelection());\n+        SwingUtilities.invokeLater(this::updateGraphSelection);\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private InputGraph graph;\n+    private final InputGraph graph;\n@@ -62,0 +62,1 @@\n+            assert other != null;\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/DiffGraphCookie.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -99,2 +99,1 @@\n-                                } catch (IOException ex) {\n-                                }\n+                                } catch (IOException ignored) {}\n@@ -121,7 +120,4 @@\n-                                        SwingUtilities.invokeLater(new Runnable(){\n-                                                @Override\n-                                                public void run() {\n-                                                    component.requestActive();\n-                                                    component.getDocument().addGraphDocument(document);\n-                                                }\n-                                            });\n+                                        SwingUtilities.invokeLater(() -> {\n+                                            component.requestActive();\n+                                            component.getDocument().addGraphDocument(document);\n+                                        });\n@@ -137,2 +133,0 @@\n-                } catch (FileNotFoundException ex) {\n-                    Exceptions.printStackTrace(ex);\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/ImportAction.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-        final OutlineTopComponent component = OutlineTopComponent.findInstance();\n@@ -91,2 +90,0 @@\n-            } catch (FileNotFoundException e) {\n-                e.printStackTrace();\n@@ -95,1 +92,0 @@\n-\n@@ -100,4 +96,0 @@\n-    protected int mode() {\n-        return CookieAction.MODE_SOME;\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/SaveAsAction.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    private T object;\n+    private final T object;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/ChangedEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private List<L> listener;\n+    private final List<L> listener;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Event.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-    private List<FolderElement> elements;\n-    private ChangedEvent<GraphDocument> changedEvent;\n+    private final List<FolderElement> elements;\n+    private final ChangedEvent<GraphDocument> changedEvent;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/GraphDocument.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private transient ChangedEvent<Group> changedEvent;\n+    private final transient ChangedEvent<Group> changedEvent;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Group.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-    private String name;\n-    private InputGraph graph;\n-    private Set<InputBlock> successors;\n+    private final String name;\n+    private final InputGraph graph;\n+    private final Set<InputBlock> successors;\n@@ -52,1 +52,1 @@\n-        if (o == null || (!(o instanceof InputBlock))) {\n+        if ((!(o instanceof InputBlock))) {\n@@ -116,3 +116,1 @@\n-        if (!successors.contains(b)) {\n-            successors.add(b);\n-        }\n+        successors.add(b);\n@@ -121,2 +119,2 @@\n-    void setArtificial(boolean artificial) {\n-        this.artificial = artificial;\n+    void setArtificial() {\n+        this.artificial = true;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputBlock.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-    private InputBlock from;\n-    private InputBlock to;\n+    private final InputBlock from;\n+    private final InputBlock to;\n@@ -41,1 +41,1 @@\n-    private String label;\n+    private final String label;\n@@ -73,1 +73,1 @@\n-        if (obj != null && obj instanceof InputBlockEdge) {\n+        if (obj instanceof InputBlockEdge) {\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputBlockEdge.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-    private int bci;\n-    private String name;\n-    private String operands;\n-    private String comment;\n+    private final int bci;\n+    private final String name;\n+    private final String operands;\n+    private final String comment;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputBytecode.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.util.Comparator;\n+import java.util.Objects;\n@@ -51,8 +51,0 @@\n-    public InputEdge(char toIndex, int from, int to) {\n-        this((char) 0, toIndex, from, to, null, null);\n-    }\n-\n-    public InputEdge(char fromIndex, char toIndex, int from, int to) {\n-        this(fromIndex, toIndex, from, to, null, null);\n-    }\n-\n@@ -135,1 +127,1 @@\n-        if (o == null || !(o instanceof InputEdge)) {\n+        if (!(o instanceof InputEdge)) {\n@@ -142,1 +134,1 @@\n-            return conn2.label == label && conn2.state == state;\n+            return Objects.equals(conn2.label, label) && conn2.state == state;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputEdge.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-    private Map<Integer, InputNode> nodes;\n-    private List<InputEdge> edges;\n+    private final Map<Integer, InputNode> nodes;\n+    private final List<InputEdge> edges;\n@@ -38,3 +38,3 @@\n-    private Map<String, InputBlock> blocks;\n-    private List<InputBlockEdge> blockEdges;\n-    private Map<Integer, InputBlock> nodeToBlock;\n+    private final Map<String, InputBlock> blocks;\n+    private final List<InputBlockEdge> blockEdges;\n+    private final Map<Integer, InputBlock> nodeToBlock;\n@@ -199,1 +199,1 @@\n-        b.setArtificial(true);\n+        b.setArtificial();\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputGraph.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-    private String name;\n-    private int bci;\n-    private String shortName;\n-    private List<InputMethod> inlined;\n+    private final String name;\n+    private final int bci;\n+    private final String shortName;\n+    private final List<InputMethod> inlined;\n@@ -43,2 +43,2 @@\n-    private Group group;\n-    private List<InputBytecode> bytecodes;\n+    private final Group group;\n+    private final List<InputBytecode> bytecodes;\n@@ -58,1 +58,1 @@\n-        if (o == null || (!(o instanceof InputMethod))) {\n+        if ((!(o instanceof InputMethod))) {\n@@ -61,2 +61,1 @@\n-\n-        final InputMethod im = (InputMethod)o;\n+        final InputMethod im = (InputMethod) o;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputMethod.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        if (o == null || !(o instanceof Pair)) {\n+        if (!(o instanceof Pair<?, ?>)) {\n@@ -64,1 +64,1 @@\n-        Pair<?,?> obj = (Pair<?,?>) o;\n+        Pair<?, ?> obj = (Pair<?, ?>) o;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Pair.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-        private PropertyMatcher matcher;\n+        private final PropertyMatcher matcher;\n@@ -212,2 +212,2 @@\n-        private String name;\n-        private String value;\n+        private final String name;\n+        private final String value;\n@@ -242,2 +242,2 @@\n-        private String name;\n-        private Pattern valuePattern;\n+        private final String name;\n+        private final Pattern valuePattern;\n@@ -314,7 +314,4 @@\n-        pairs.sort(new Comparator<String[]>() {\n-            @Override\n-            public int compare(String[] o1, String[] o2) {\n-                assert o1.length == 2;\n-                assert o2.length == 2;\n-                return o1[0].compareTo(o2[0]);\n-            }\n+        pairs.sort((o1, o2) -> {\n+            assert o1.length == 2;\n+            assert o2.length == 2;\n+            return o1[0].compareTo(o2[0]);\n@@ -339,1 +336,1 @@\n-        private Collection<T> objects;\n+        private final Collection<T> objects;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Properties.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-    private String name;\n-    private String value;\n+    private final String name;\n+    private final String value;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Property.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-    private List<InputNode> sourceNodes;\n-    private Set<Integer> set;\n+    private final List<InputNode> sourceNodes;\n+    private final Set<Integer> set;\n@@ -59,1 +59,1 @@\n-        public Source getSource();\n+        Source getSource();\n@@ -62,5 +62,0 @@\n-    public void addSourceNodes(Source s) {\n-        for (InputNode n : s.getSourceNodes()) {\n-            addSourceNode(n);\n-        }\n-    }\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Source.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    public GraphDocument parse() throws IOException;\n+    GraphDocument parse() throws IOException;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/GraphParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    public void updateProgress();\n+    void updateProgress();\n@@ -31,1 +31,1 @@\n-    public void setState(String state);\n+    void setState(String state);\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/ParseMonitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,6 +86,6 @@\n-    private TopElementHandler<GraphDocument> xmlDocument = new TopElementHandler<>();\n-    private Map<Group, Boolean> differenceEncoding = new HashMap<>();\n-    private Map<Group, InputGraph> lastParsedGraph = new HashMap<>();\n-    private GroupCallback groupCallback;\n-    private HashMap<String, Integer> idCache = new HashMap<>();\n-    private ArrayList<Pair<String, String>> blockConnections = new ArrayList<>();\n+    private final TopElementHandler<GraphDocument> xmlDocument = new TopElementHandler<>();\n+    private final Map<Group, Boolean> differenceEncoding = new HashMap<>();\n+    private final Map<Group, InputGraph> lastParsedGraph = new HashMap<>();\n+    private final GroupCallback groupCallback;\n+    private final HashMap<String, Integer> idCache = new HashMap<>();\n+    private final ArrayList<Pair<String, String>> blockConnections = new ArrayList<>();\n@@ -109,1 +109,1 @@\n-        return id.intValue();\n+        return id;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/Parser.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-        } catch (IOException ex) {\n-        }\n+        } catch (IOException ignored) {}\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/Printer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-        private String name;\n-\n@@ -46,1 +44,0 @@\n-            this.name = name;\n@@ -49,3 +46,0 @@\n-        public String getAttributeName() {\n-            return this.getMessage();\n-        }\n@@ -79,2 +73,2 @@\n-        private String name;\n-        private Stack<T> object = new Stack<>();\n+        private final String name;\n+        private final Stack<T> object = new Stack<>();\n@@ -84,4 +78,4 @@\n-        private HashMap<String, ElementHandler<?, ? super T>> hashtable;\n-        private boolean needsText;\n-        private Stack<ElementHandler<P, ?>> parentElement = new Stack<>();\n-        private Stack<P> parentObject = new Stack<>();\n+        private final HashMap<String, ElementHandler<?, ? super T>> hashtable;\n+        private final boolean needsText;\n+        private final Stack<ElementHandler<P, ?>> parentElement = new Stack<>();\n+        private final Stack<P> parentObject = new Stack<>();\n@@ -93,4 +87,0 @@\n-        public ElementHandler<P, ?> getParentElement() {\n-            return parentElement.peek();\n-        }\n-\n@@ -144,9 +134,0 @@\n-        public void processAttributesAsProperties(Properties p) {\n-            int length = attr.getLength();\n-            for (int i = 0; i < length; i++) {\n-                String val = attr.getValue(i);\n-                String localName = attr.getLocalName(i);\n-                p.setProperty(val, localName);\n-            }\n-        }\n-\n@@ -182,2 +163,2 @@\n-    private Stack<ElementHandler> stack;\n-    private ParseMonitor monitor;\n+    private final Stack<ElementHandler> stack;\n+    private final ParseMonitor monitor;\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/XMLParser.java","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-    private Writer inner;\n-    private Stack<String> elementStack;\n+    private final Writer inner;\n+    private final Stack<String> elementStack;\n@@ -117,1 +117,1 @@\n-        if (props.iterator().hasNext() == false) {\n+        if (!props.iterator().hasNext()) {\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/XMLWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-    private Cluster cluster;\n@@ -118,1 +117,1 @@\n-        return cluster;\n+        return null;\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/ClusterInputSlotNode.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,4 +46,0 @@\n-    public void doLayout(LayoutGraph graph) {\n-        doLayout(graph, new HashSet<>(), new HashSet<>(), new HashSet<>());\n-    }\n-\n@@ -62,1 +58,1 @@\n-    public void doLayout(LayoutGraph graph, Set<? extends Vertex> firstLayerHint, Set<? extends Vertex> lastLayerHint, Set<? extends Link> importantLinks) {\n+    public void doLayout(LayoutGraph graph) {\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalClusterLayoutManager.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,3 +59,3 @@\n-    private Combine combine;\n-    private int dummyWidth;\n-    private int dummyHeight;\n+    private final Combine combine;\n+    private final int dummyWidth;\n+    private final int dummyHeight;\n@@ -74,1 +74,0 @@\n-    private HashMap<LayoutEdge, LayoutEdge> bottomEdgeHash;\n@@ -81,1 +80,1 @@\n-    private Set<Link> linksToFollow;\n+    private final Set<Link> linksToFollow;\n@@ -126,1 +125,1 @@\n-    private abstract class AlgorithmPart {\n+    private abstract static class AlgorithmPart {\n@@ -162,4 +161,0 @@\n-    public HierarchicalLayoutManager() {\n-        this(Combine.NONE);\n-    }\n-\n@@ -186,4 +181,0 @@\n-    public int getMaxLayerLength() {\n-        return maxLayerLength;\n-    }\n-\n@@ -219,1 +210,1 @@\n-        doLayout(graph, new HashSet<Link>());\n+        doLayout(graph, new HashSet<>());\n@@ -234,1 +225,0 @@\n-        bottomEdgeHash = new HashMap<>();\n@@ -455,1 +445,0 @@\n-                                \/\/checkPoints(points);\n@@ -479,1 +468,0 @@\n-                            \/\/checkPoints(points);\n@@ -541,14 +529,7 @@\n-    private static class Segment {\n-\n-        public float d;\n-        public int orderNumber = -1;\n-        public ArrayList<LayoutNode> nodes = new ArrayList<>();\n-        public HashSet<Segment> succs = new HashSet<>();\n-        public HashSet<Segment> preds = new HashSet<>();\n-        public Region region;\n-    }\n-    private static final Comparator<Segment> segmentComparator = new Comparator<Segment>() {\n-\n-        @Override\n-        public int compare(Segment s1, Segment s2) {\n-            return s1.orderNumber - s2.orderNumber;\n+    private static final Comparator<LayoutNode> nodePositionComparator = Comparator.comparingInt(n -> n.pos);\n+    private static final Comparator<LayoutNode> nodeProcessingDownComparator = (n1, n2) -> {\n+        int n1VIP = 0;\n+        for (LayoutEdge e : n1.preds) {\n+            if (e.vip) {\n+                n1VIP++;\n+            }\n@@ -556,15 +537,5 @@\n-    };\n-\n-    private static class Region {\n-\n-        public float d;\n-        public int minOrderNumber;\n-        public SortedSet<Segment> segments = new TreeSet<>(segmentComparator);\n-        public HashSet<Region> succs = new HashSet<>(4);\n-        public HashSet<Region> preds = new HashSet<>(4);\n-    }\n-    private static final Comparator<Region> regionComparator = new Comparator<Region>() {\n-\n-        @Override\n-        public int compare(Region r1, Region r2) {\n-            return r1.minOrderNumber - r2.minOrderNumber;\n+        int n2VIP = 0;\n+        for (LayoutEdge e : n2.preds) {\n+            if (e.vip) {\n+                n2VIP++;\n+            }\n@@ -572,6 +543,2 @@\n-    };\n-    private static final Comparator<LayoutNode> nodePositionComparator = new Comparator<LayoutNode>() {\n-\n-        @Override\n-        public int compare(LayoutNode n1, LayoutNode n2) {\n-            return n1.pos - n2.pos;\n+        if (n1VIP != n2VIP) {\n+            return n2VIP - n1VIP;\n@@ -579,25 +546,1 @@\n-    };\n-    private static final Comparator<LayoutNode> nodeProcessingDownComparator = new Comparator<LayoutNode>() {\n-        @Override\n-        public int compare(LayoutNode n1, LayoutNode n2) {\n-            int n1VIP = 0;\n-            for (LayoutEdge e : n1.preds) {\n-                if (e.vip) {\n-                    n1VIP++;\n-                }\n-            }\n-            int n2VIP = 0;\n-            for (LayoutEdge e : n2.preds) {\n-                if (e.vip) {\n-                    n2VIP++;\n-                }\n-            }\n-            if (n1VIP != n2VIP) {\n-                return n2VIP - n1VIP;\n-            }\n-            if (n1.vertex == null) {\n-                if (n2.vertex == null) {\n-                    return 0;\n-                }\n-                return -1;\n-            }\n+        if (n1.vertex == null) {\n@@ -605,1 +548,1 @@\n-                return 1;\n+                return 0;\n@@ -607,1 +550,4 @@\n-            return n1.preds.size() - n2.preds.size();\n+            return -1;\n+        }\n+        if (n2.vertex == null) {\n+            return 1;\n@@ -609,0 +555,1 @@\n+        return n1.preds.size() - n2.preds.size();\n@@ -697,1 +644,0 @@\n-                \/\/               space[i] = new ArrayList<>();\n@@ -701,1 +647,0 @@\n-\/\/                    curX += n.width + xOffset;\n@@ -817,2 +762,2 @@\n-        private TreeSet<LayoutNode> treeSet;\n-        private ArrayList<Integer> space;\n+        private final TreeSet<LayoutNode> treeSet;\n+        private final ArrayList<Integer> space;\n@@ -835,1 +780,1 @@\n-            LayoutNode leftNeighbor = null;\n+            LayoutNode leftNeighbor;\n@@ -846,1 +791,1 @@\n-                LayoutNode rightNeighbor = null;\n+                LayoutNode rightNeighbor;\n@@ -854,5 +799,1 @@\n-                if (pos > maxX) {\n-                    n.x = maxX;\n-                } else {\n-                    n.x = pos;\n-                }\n+                n.x = Math.min(pos, maxX);\n@@ -866,7 +807,1 @@\n-    private static Comparator<LayoutNode> crossingNodeComparator = new Comparator<LayoutNode>() {\n-\n-        @Override\n-        public int compare(LayoutNode n1, LayoutNode n2) {\n-            return n1.crossingNumber - n2.crossingNumber;\n-        }\n-    };\n+    private static final Comparator<LayoutNode> crossingNodeComparator = Comparator.comparingInt(n -> n.crossingNumber);\n@@ -948,2 +883,1 @@\n-\n-            for (int i = 0; i < layers.length; i++) {\n+            for (List<LayoutNode> layer : layers) {\n@@ -951,1 +885,1 @@\n-                for (LayoutNode n : layers[i]) {\n+                for (LayoutNode n : layer) {\n@@ -1091,1 +1025,1 @@\n-            for (int i = 0; i < layers.length; i++) {\n+            for (List<LayoutNode> layer : layers) {\n@@ -1095,1 +1029,1 @@\n-                for (LayoutNode n : layers[i]) {\n+                for (LayoutNode n : layer) {\n@@ -1102,1 +1036,1 @@\n-                for (LayoutNode n : layers[i]) {\n+                for (LayoutNode n : layer) {\n@@ -1150,7 +1084,1 @@\n-                Comparator<LayoutEdge> comparator = new Comparator<LayoutEdge>() {\n-\n-                    @Override\n-                    public int compare(LayoutEdge e1, LayoutEdge e2) {\n-                        return e1.to.layer - e2.to.layer;\n-                    }\n-                };\n+                Comparator<LayoutEdge> comparator = Comparator.comparingInt(e -> e.to.layer);\n@@ -1168,1 +1096,1 @@\n-                            if (maxLayerLength != -1 && e.to.layer - e.from.layer > maxLayerLength\/* && e.to.preds.size() > 1 && e.from.succs.size() > 1*\/) {\n+                            if (maxLayerLength != -1 && e.to.layer - e.from.layer > maxLayerLength) {\n@@ -1173,1 +1101,1 @@\n-                                LayoutEdge topEdge = null;\n+                                LayoutEdge topEdge;\n@@ -1196,1 +1124,1 @@\n-                                    topEdge.relativeTo = topNode.width \/ 2;\n+                                    topEdge.relativeTo = 0;\n@@ -1203,1 +1131,1 @@\n-                                    bottomNodeHash.put(e.relativeFrom, new HashMap<Integer, LayoutNode>());\n+                                    bottomNodeHash.put(e.relativeFrom, new HashMap<>());\n@@ -1208,1 +1136,1 @@\n-                                LayoutNode bottomNode = null;\n+                                LayoutNode bottomNode;\n@@ -1229,1 +1157,0 @@\n-                                bottomEdgeHash.put(topEdge, bottomEdge);\n@@ -1235,1 +1162,1 @@\n-                                    portHash.put(i, new ArrayList<LayoutEdge>());\n+                                    portHash.put(i, new ArrayList<>());\n@@ -1764,7 +1691,4 @@\n-    private Comparator<Link> linkComparator = new Comparator<Link>() {\n-\n-        @Override\n-        public int compare(Link l1, Link l2) {\n-            if (l1.isVIP() && !l2.isVIP()) {\n-                return -1;\n-            }\n+    private final Comparator<Link> linkComparator = (l1, l2) -> {\n+        if (l1.isVIP() && !l2.isVIP()) {\n+            return -1;\n+        }\n@@ -1772,3 +1696,3 @@\n-            if (!l1.isVIP() && l2.isVIP()) {\n-                return 1;\n-            }\n+        if (!l1.isVIP() && l2.isVIP()) {\n+            return 1;\n+        }\n@@ -1776,13 +1700,10 @@\n-            int result = l1.getFrom().getVertex().compareTo(l2.getFrom().getVertex());\n-            if (result != 0) {\n-                return result;\n-            }\n-            result = l1.getTo().getVertex().compareTo(l2.getTo().getVertex());\n-            if (result != 0) {\n-                return result;\n-            }\n-            result = l1.getFrom().getRelativePosition().x - l2.getFrom().getRelativePosition().x;\n-            if (result != 0) {\n-                return result;\n-            }\n-            result = l1.getTo().getRelativePosition().x - l2.getTo().getRelativePosition().x;\n+        int result = l1.getFrom().getVertex().compareTo(l2.getFrom().getVertex());\n+        if (result != 0) {\n+            return result;\n+        }\n+        result = l1.getTo().getVertex().compareTo(l2.getTo().getVertex());\n+        if (result != 0) {\n+            return result;\n+        }\n+        result = l1.getFrom().getRelativePosition().x - l2.getFrom().getRelativePosition().x;\n+        if (result != 0) {\n@@ -1791,0 +1712,2 @@\n+        result = l1.getTo().getRelativePosition().x - l2.getTo().getRelativePosition().x;\n+        return result;\n@@ -1800,5 +1723,2 @@\n-            Collections.sort(vertices,\n-                             (Vertex a, Vertex b) ->\n-                             a.isRoot() == b.isRoot() ?\n-                             a.compareTo(b) :\n-                             Boolean.compare(b.isRoot(), a.isRoot()));\n+            vertices.sort((Vertex a, Vertex b) ->\n+                    a.isRoot() == b.isRoot() ? a.compareTo(b) : Boolean.compare(b.isRoot(), a.isRoot()));\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalLayoutManager.java","additions":66,"deletions":146,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-    private Port inputSlot;\n-    private Port outputSlot;\n+    private final Port inputSlot;\n+    private final Port outputSlot;\n@@ -42,2 +42,0 @@\n-    private ClusterInputSlotNode inputSlotNode;\n-    private ClusterOutputSlotNode outputSlotNode;\n@@ -46,2 +44,0 @@\n-        this.outputSlotNode = outputSlotNode;\n-        this.inputSlotNode = inputSlotNode;\n@@ -50,5 +46,1 @@\n-        intermediatePoints = new ArrayList<Point>();\n-    }\n-\n-    public ClusterOutputSlotNode getOutputSlotNode() {\n-        return outputSlotNode;\n+        this.intermediatePoints = new ArrayList<>();\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/InterClusterConnection.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        doLayout(graph, new HashSet<Link>());\n+        doLayout(graph, new HashSet<>());\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/LinearLayoutManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.hierarchicallayout;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class Node<N> {\n-\n-    private N data;\n-\n-    protected Node(N data) {\n-        setData(data);\n-    }\n-\n-    public void setData(N d) {\n-        data = d;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"Node: \" + data;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/Node.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -34,1 +34,1 @@\n-    private String name;\n+    private final String name;\n@@ -52,1 +52,1 @@\n-        System.out.println(toString());\n+        System.out.println();\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/Timing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    public void doLayout(LayoutGraph graph);\n+    void doLayout(LayoutGraph graph);\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/src\/main\/java\/com\/sun\/hotspot\/igv\/layout\/LayoutManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}