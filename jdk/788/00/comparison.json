{"files":[{"patch":"@@ -143,1 +143,1 @@\n-  free_strings();\n+  NOT_PRODUCT(free_strings();)\n@@ -270,0 +270,1 @@\n+#ifndef PRODUCT\n@@ -276,1 +277,1 @@\n-\n+#endif \/\/ !PRODUCT\n@@ -755,1 +756,1 @@\n-  dest_blob->set_strings(_code_strings);\n+  NOT_PRODUCT(dest_blob->set_strings(_code_strings);)\n@@ -960,2 +961,0 @@\n-  _decode_begin = NULL;  \/\/ sanity\n-\n@@ -966,0 +965,1 @@\n+  _decode_begin = NULL;  \/\/ sanity\n@@ -1035,4 +1035,0 @@\n-void CodeSection::decode() {\n-  Disassembler::decode(start(), end());\n-}\n-\n@@ -1057,0 +1053,2 @@\n+  static long allocated_code_strings;\n+\n@@ -1059,0 +1057,2 @@\n+    allocated_code_strings--;\n+    log_trace(codestrings)(\"Freeing CodeString [%s] (%p)\", _string, (void*)_string);\n@@ -1067,0 +1067,1 @@\n+    allocated_code_strings++;\n@@ -1068,0 +1069,1 @@\n+    log_trace(codestrings)(\"Created CodeString [%s] (%p)\", _string, (void*)_string);\n@@ -1072,1 +1074,1 @@\n-  CodeString* next()    const { return _next; }\n+  CodeString*  next()   const { return _next; }\n@@ -1097,0 +1099,4 @@\n+\/\/ For tracing statistics. Will use raw increment\/decrement, so it might not be\n+\/\/ exact\n+long CodeString::allocated_code_strings = 0;\n+\n@@ -1119,1 +1125,1 @@\n-  if (inspos) {\n+  if (inspos != NULL) {\n@@ -1133,11 +1139,0 @@\n-void CodeStrings::assign(CodeStrings& other) {\n-  other.check_valid();\n-  assert(is_null(), \"Cannot assign onto non-empty CodeStrings\");\n-  _strings = other._strings;\n-  _strings_last = other._strings_last;\n-#ifdef ASSERT\n-  _defunct = false;\n-#endif\n-  other.set_null_and_invalidate();\n-}\n-\n@@ -1145,2 +1140,0 @@\n-\/\/ Only used for actual disassembly so this is cheaper than reference counting\n-\/\/ for the \"normal\" fastdebug case.\n@@ -1148,0 +1141,2 @@\n+  log_debug(codestrings)(\"Copying %d Codestring(s)\", other.count());\n+\n@@ -1155,1 +1150,5 @@\n-    *ps = new CodeString(n->string(),n->offset());\n+    if (n->is_comment()) {\n+      *ps = new CodeString(n->string(), n->offset());\n+    } else {\n+      *ps = new CodeString(n->string());\n+    }\n@@ -1165,7 +1164,0 @@\n-\/\/ Check if any block comments are pending for the given offset.\n-bool CodeStrings::has_block_comment(intptr_t offset) const {\n-  if (_strings == NULL) return false;\n-  CodeString* c = find(offset);\n-  return c != NULL;\n-}\n-\n@@ -1187,1 +1179,11 @@\n-\/\/ Also sets isNull()\n+int CodeStrings::count() const {\n+  int i = 0;\n+  CodeString* s = _strings;\n+  while (s != NULL) {\n+    i++;\n+    s = s->_next;\n+  }\n+  return i;\n+}\n+\n+\/\/ Also sets is_null()\n@@ -1189,0 +1191,1 @@\n+  log_debug(codestrings)(\"Freeing %d out of approx. %ld CodeString(s), \", count(), CodeString::allocated_code_strings);\n@@ -1218,1 +1221,1 @@\n-  Disassembler::decode(decode_begin(), insts_end(), tty);\n+  Disassembler::decode(decode_begin(), insts_end(), tty NOT_PRODUCT(COMMA &strings()));\n@@ -1249,6 +1252,0 @@\n-\/\/ Directly disassemble code buffer.\n-void CodeBuffer::decode(address start, address end) {\n-  ttyLocker ttyl;\n-  Disassembler::decode(this, start, end, tty);\n-}\n-\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":37,"deletions":40,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -287,1 +287,0 @@\n-#endif\n@@ -293,1 +292,0 @@\n-#ifndef PRODUCT\n@@ -298,1 +296,0 @@\n-#endif\n@@ -301,0 +298,1 @@\n+#endif\n@@ -313,0 +311,1 @@\n+#ifndef PRODUCT\n@@ -321,1 +320,1 @@\n-  const char* add_string(const char * string) PRODUCT_RETURN_(return NULL;);\n+  const char* add_string(const char * string);\n@@ -323,5 +322,3 @@\n-  void add_comment(intptr_t offset, const char * comment) PRODUCT_RETURN;\n-  bool has_block_comment(intptr_t offset) const;\n-  void print_block_comment(outputStream* stream, intptr_t offset) const PRODUCT_RETURN;\n-  \/\/ MOVE strings from other to this; invalidate other.\n-  void assign(CodeStrings& other)  PRODUCT_RETURN;\n+  void add_comment(intptr_t offset, const char * comment);\n+  void print_block_comment(outputStream* stream, intptr_t offset) const;\n+  int  count() const;\n@@ -329,1 +326,1 @@\n-  void copy(CodeStrings& other)  PRODUCT_RETURN;\n+  void copy(CodeStrings& other);\n@@ -331,1 +328,1 @@\n-  void free() PRODUCT_RETURN;\n+  void free();\n@@ -335,1 +332,0 @@\n-#ifdef ASSERT\n@@ -337,1 +333,0 @@\n-#endif\n@@ -341,1 +336,0 @@\n-#ifndef PRODUCT\n@@ -343,1 +337,0 @@\n-#endif\n@@ -345,0 +338,1 @@\n+#endif \/\/ !PRODUCT\n@@ -413,2 +407,1 @@\n-  CodeStrings  _code_strings;\n-  bool         _collect_comments;      \/\/ Indicate if we need to collect block comments at all.\n+\n@@ -424,1 +417,4 @@\n-  address      _decode_begin;   \/\/ start address for decode\n+#ifndef PRODUCT\n+  CodeStrings  _code_strings;\n+  bool         _collect_comments; \/\/ Indicate if we need to collect block comments at all.\n+  address      _decode_begin;     \/\/ start address for decode\n@@ -426,0 +422,1 @@\n+#endif\n@@ -434,1 +431,0 @@\n-    _decode_begin    = NULL;\n@@ -436,1 +432,0 @@\n-    _code_strings    = CodeStrings();\n@@ -442,0 +437,3 @@\n+#ifndef PRODUCT\n+    _decode_begin    = NULL;\n+    _code_strings    = CodeStrings();\n@@ -450,0 +448,1 @@\n+#endif\n@@ -638,2 +637,1 @@\n-  OopRecorder* oop_recorder() const   { return _oop_recorder; }\n-  CodeStrings& strings()              { return _code_strings; }\n+  OopRecorder* oop_recorder() const { return _oop_recorder; }\n@@ -645,0 +643,3 @@\n+#ifndef PRODUCT\n+  CodeStrings& strings() { return _code_strings; }\n+\n@@ -651,1 +652,0 @@\n-  \/\/ Directly disassemble code buffer.\n@@ -654,1 +654,0 @@\n-#ifndef PRODUCT\n@@ -657,1 +656,0 @@\n-#endif\n@@ -659,6 +657,0 @@\n-  bool has_block_comment(address block_begin) {\n-#ifndef PRODUCT\n-    intptr_t offset = (intptr_t)(block_begin - _total_start);  \/\/ I assume total_start is not correct for all code sections.\n-    return _code_strings.has_block_comment(offset);\n-#else\n-    return false;\n@@ -666,1 +658,0 @@\n-  }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":23,"deletions":32,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-  _strings(CodeStrings()),\n@@ -92,0 +91,1 @@\n+  NOT_PRODUCT(COMMA _strings(CodeStrings()))\n@@ -118,1 +118,0 @@\n-  _strings(CodeStrings()),\n@@ -120,0 +119,1 @@\n+  NOT_PRODUCT(COMMA _strings(CodeStrings()))\n@@ -161,1 +161,1 @@\n-  _strings.free();\n+  NOT_PRODUCT(_strings.free();)\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  CodeStrings         _strings;\n+\n@@ -117,0 +117,2 @@\n+  NOT_PRODUCT(CodeStrings _strings;)\n+\n@@ -234,4 +236,0 @@\n-  bool has_block_comment(address block_begin) const {\n-    intptr_t offset = (intptr_t)(block_begin - code_begin());\n-    return _strings.has_block_comment(offset);\n-  }\n@@ -240,0 +238,1 @@\n+  #ifndef PRODUCT\n@@ -242,0 +241,1 @@\n+  #endif\n@@ -244,1 +244,1 @@\n-  \/\/ Transfer ownership of comments to this CodeBlob\n+#ifndef PRODUCT\n@@ -247,9 +247,1 @@\n-    _strings.assign(strings);\n-  }\n-\n-  static ByteSize name_field_offset() {\n-    return byte_offset_of(CodeBlob, _name);\n-  }\n-\n-  static ByteSize oop_maps_field_offset() {\n-    return byte_offset_of(CodeBlob, _oop_maps);\n+    _strings.copy(strings);\n@@ -257,0 +249,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -698,3 +698,1 @@\n-  bool has_block_comment(address block_begin) {\n-    return CodeBlob::has_block_comment(block_begin);\n-  }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  CodeStrings   _strings;\n+\n@@ -80,0 +80,1 @@\n+  NOT_PRODUCT(const CodeStrings* _strings;)\n@@ -217,3 +218,2 @@\n-  decode_env(CodeBuffer* code, outputStream* output);\n-  decode_env(CodeBlob*   code, outputStream* output, CodeStrings c = CodeStrings() \/* , ptrdiff_t offset *\/);\n-  decode_env(nmethod*    code, outputStream* output, CodeStrings c = CodeStrings());\n+  decode_env(CodeBlob*   code, outputStream* output);\n+  decode_env(nmethod*    code, outputStream* output);\n@@ -222,1 +222,1 @@\n-  decode_env(address start, address end, outputStream* output);\n+  decode_env(address start, address end, outputStream* output, const CodeStrings* strings = NULL);\n@@ -325,23 +325,1 @@\n-decode_env::decode_env(CodeBuffer* code, outputStream* output) :\n-  _output(output ? output : tty),\n-  _codeBuffer(code),\n-  _codeBlob(NULL),\n-  _nm(NULL),\n-  _strings(),\n-  _start(NULL),\n-  _end(NULL),\n-  _option_buf(),\n-  _print_raw(0),\n-  _cur_insn(NULL),\n-  _bytes_per_line(0),\n-  _pre_decode_alignment(0),\n-  _post_decode_alignment(0),\n-  _print_file_name(false),\n-  _print_help(false),\n-  _helpPrinted(false) {\n-\n-  memset(_option_buf, 0, sizeof(_option_buf));\n-  process_options(_output);\n-}\n-\n-decode_env::decode_env(CodeBlob* code, outputStream* output, CodeStrings c) :\n+decode_env::decode_env(CodeBlob* code, outputStream* output) :\n@@ -349,1 +327,0 @@\n-  _codeBuffer(NULL),\n@@ -352,1 +329,0 @@\n-  _strings(),\n@@ -363,1 +339,2 @@\n-  _helpPrinted(false) {\n+  _helpPrinted(false)\n+  NOT_PRODUCT(COMMA _strings(NULL)) {\n@@ -366,1 +343,0 @@\n-  _strings.copy(c);\n@@ -368,0 +344,1 @@\n+\n@@ -370,1 +347,1 @@\n-decode_env::decode_env(nmethod* code, outputStream* output, CodeStrings c) :\n+decode_env::decode_env(nmethod* code, outputStream* output) :\n@@ -372,1 +349,0 @@\n-  _codeBuffer(NULL),\n@@ -375,1 +351,0 @@\n-  _strings(),\n@@ -386,1 +361,2 @@\n-  _helpPrinted(false) {\n+  _helpPrinted(false)\n+  NOT_PRODUCT(COMMA _strings(NULL))  {\n@@ -389,1 +365,0 @@\n-  _strings.copy(c);\n@@ -395,1 +370,1 @@\n-decode_env::decode_env(address start, address end, outputStream* output) :\n+decode_env::decode_env(address start, address end, outputStream* output, const CodeStrings* c) :\n@@ -397,1 +372,0 @@\n-  _codeBuffer(NULL),\n@@ -400,1 +374,0 @@\n-  _strings(),\n@@ -411,1 +384,2 @@\n-  _helpPrinted(false) {\n+  _helpPrinted(false)\n+  NOT_PRODUCT(COMMA _strings(c))  {\n@@ -685,2 +659,3 @@\n-    if (_codeBuffer != NULL) {\n-      _codeBuffer->print_block_comment(st, p);\n+#ifndef PRODUCT\n+    if (_strings != NULL) {\n+      _strings->print_block_comment(st, (intptr_t)(p - _start));\n@@ -688,1 +663,1 @@\n-    _strings.print_block_comment(st, (intptr_t)(p - _start));\n+#endif\n@@ -922,36 +897,0 @@\n-\/\/ Directly disassemble code buffer.\n-void Disassembler::decode(CodeBuffer* cb, address start, address end, outputStream* st) {\n-#if defined(SUPPORT_ASSEMBLY) || defined(SUPPORT_ABSTRACT_ASSEMBLY)\n-  \/\/---<  Test memory before decoding  >---\n-  if (!(cb->contains(start) && cb->contains(end))) {\n-    \/\/---<  Allow output suppression, but prevent writing to a NULL stream. Could happen with +PrintStubCode.  >---\n-    if (st != NULL) {\n-      st->print(\"Memory range [\" PTR_FORMAT \"..\" PTR_FORMAT \"] not contained in CodeBuffer\", p2i(start), p2i(end));\n-    }\n-    return;\n-  }\n-  if (!os::is_readable_range(start, end)) {\n-    \/\/---<  Allow output suppression, but prevent writing to a NULL stream. Could happen with +PrintStubCode.  >---\n-    if (st != NULL) {\n-      st->print(\"Memory range [\" PTR_FORMAT \"..\" PTR_FORMAT \"] not readable\", p2i(start), p2i(end));\n-    }\n-    return;\n-  }\n-\n-  decode_env env(cb, st);\n-  env.output()->print_cr(\"--------------------------------------------------------------------------------\");\n-  env.output()->print(\"Decoding CodeBuffer (\" PTR_FORMAT \")\", p2i(cb));\n-  if (cb->name() != NULL) {\n-    env.output()->print(\", name: %s,\", cb->name());\n-  }\n-  env.output()->print_cr(\" at  [\" PTR_FORMAT \", \" PTR_FORMAT \"]  \" JLONG_FORMAT \" bytes\", p2i(start), p2i(end), ((jlong)(end - start)));\n-\n-  if (is_abstract()) {\n-    AbstractDisassembler::decode_abstract(start, end, env.output(), Assembler::instr_maxlen());\n-  } else {\n-    env.decode_instructions(start, end);\n-  }\n-  env.output()->print_cr(\"--------------------------------------------------------------------------------\");\n-#endif\n-}\n-\n@@ -959,1 +898,1 @@\n-void Disassembler::decode(CodeBlob* cb, outputStream* st, CodeStrings c) {\n+void Disassembler::decode(CodeBlob* cb, outputStream* st) {\n@@ -964,1 +903,1 @@\n-    decode((nmethod*)cb, st, c);\n+    decode((nmethod*)cb, st);\n@@ -1002,1 +941,1 @@\n-void Disassembler::decode(nmethod* nm, outputStream* st, CodeStrings c) {\n+void Disassembler::decode(nmethod* nm, outputStream* st) {\n@@ -1021,1 +960,1 @@\n-void Disassembler::decode(address start, address end, outputStream* st, CodeStrings c \/*, ptrdiff_t offset *\/) {\n+void Disassembler::decode(address start, address end, outputStream* st, const CodeStrings* c) {\n@@ -1049,1 +988,1 @@\n-    decode_env env(start, end, st);\n+    decode_env env(start, end, st, c);\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":24,"deletions":85,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-#include \"asm\/codeBuffer.hpp\"\n+#include \"code\/codeBlob.hpp\"\n+#include \"code\/nmethod.hpp\"\n@@ -91,1 +92,1 @@\n-    if (!_tried_to_load_library \/* && !UseAbstractDisassembler *\/) {\n+    if (!_tried_to_load_library) {\n@@ -94,1 +95,1 @@\n-    return ! _library_usable \/* || UseAbstractDisassembler *\/;  \/\/ Not available until DecodeErrorFile is supported.\n+    return ! _library_usable;\n@@ -108,2 +109,0 @@\n-  \/\/ Directly disassemble code buffer.\n-  static void decode(CodeBuffer* cb, address start, address end, outputStream* st = NULL);\n@@ -111,1 +110,1 @@\n-  static void decode(CodeBlob *cb,               outputStream* st = NULL, CodeStrings c = CodeStrings());\n+  static void decode(CodeBlob *cb,               outputStream* st = NULL);\n@@ -113,1 +112,1 @@\n-  static void decode(nmethod* nm,                outputStream* st = NULL, CodeStrings c = CodeStrings());\n+  static void decode(nmethod* nm,                outputStream* st = NULL);\n@@ -115,1 +114,1 @@\n-  static void decode(address start, address end, outputStream* st = NULL, CodeStrings c = CodeStrings() \/* , ptrdiff_t offset *\/);\n+  static void decode(address start, address end, outputStream* st = NULL, const CodeStrings* = NULL);\n","filename":"src\/hotspot\/share\/compiler\/disassembler.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    Disassembler::decode(code_begin(), code_end(), st, DEBUG_ONLY(_strings) NOT_DEBUG(CodeStrings()));\n+    Disassembler::decode(code_begin(), code_end(), st DEBUG_ONLY(COMMA &_strings));\n@@ -109,1 +109,2 @@\n-    AbstractInterpreter::code()->commit(committed_code_size, (*_masm)->code()->strings());\n+    CodeStrings cs NOT_PRODUCT(= (*_masm)->code()->strings());\n+    AbstractInterpreter::code()->commit(committed_code_size, cs);\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  DEBUG_ONLY(CodeStrings _strings;)              \/\/ Comments for annotating assembler output.\n+  NOT_PRODUCT(CodeStrings _strings;)              \/\/ Comments for annotating assembler output.\n@@ -58,2 +58,2 @@\n-                                                   DEBUG_ONLY(::new(&_strings) CodeStrings();)\n-                                                   DEBUG_ONLY(_strings.assign(strings);) }\n+                                                   NOT_PRODUCT(_strings = CodeStrings();)\n+                                                   NOT_PRODUCT(_strings.copy(strings);) }\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  NOT_PRODUCT(LOG_TAG(codestrings)) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,6 +76,5 @@\n-  if (PRODUCT_ONLY(_print_code) NOT_PRODUCT(true)) {\n-    CodeBuffer* cbuf = _masm->code();\n-    CodeBlob*   blob = CodeCache::find_blob_unsafe(cbuf->insts()->start());\n-    if (blob != NULL) {\n-      blob->set_strings(cbuf->strings());\n-    }\n+#ifndef PRODUCT\n+  CodeBuffer* cbuf = _masm->code();\n+  CodeBlob*   blob = CodeCache::find_blob_unsafe(cbuf->insts()->start());\n+  if (blob != NULL) {\n+    blob->set_strings(cbuf->strings());\n@@ -83,0 +82,1 @@\n+#endif\n@@ -91,2 +91,0 @@\n-    CodeStrings cs;\n-    ptrdiff_t offset = 0;\n@@ -96,4 +94,1 @@\n-    cs = outer_cbuf->strings();\n-    \/\/ The offset from the start of the outer CodeBuffer to the start\n-    \/\/ of this stub.\n-    offset = cdesc->begin() - outer_cbuf->insts()->start();\n+    CodeStrings* cs = &outer_cbuf->strings();\n@@ -105,1 +100,1 @@\n-    Disassembler::decode(cdesc->begin(), cdesc->end(), tty, cs \/*, offset *\/);\n+    Disassembler::decode(cdesc->begin(), cdesc->end(), tty NOT_PRODUCT(COMMA cs));\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.cpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"}]}