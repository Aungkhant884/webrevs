{"files":[{"patch":"@@ -1336,3 +1336,1 @@\n-     * The {@code AccessFlags} are the access flags of the class\n-     * that are specified for the class file format version;\n-     * any unspecified flags are omitted.\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -514,1 +514,0 @@\n-     * Mask bits not supported for the location are ignored.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -216,3 +216,1 @@\n-     * The {@code AccessFlags} are the access flags of the executable\n-     * that are specified for the class file format version;\n-     * any unspecified flags are omitted.\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,3 +217,1 @@\n-     * The {@code AccessFlags} are the access flags of the field\n-     * that are specified for the class file format version of the class;\n-     * any unspecified flags are omitted.\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-     * Returns the class file format version of the class.\n+     * Return the class file format version of the class.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/\/ The synthetic modifier (0x1000) is not defined for class file format version 50 (Release 6)\n-\n-super synthetic public class VersionedLocationsClass_50\n-\tversion 50:0\n-{\n-\n-public synthetic Field synField:\"I\";\n-\n-public synthetic Method \"synMethod\":\"()V\"\n-        stack 1 locals 1\n-{\n-        return;\n-}\n-\n-public Method \"<init>\":\"()V\"\n-        stack 1 locals 1\n-{\n-        aload_0;\n-        invokespecial   Method java\/lang\/Object.\"<init>\":\"()V\";\n-        return;\n-}\n-\n-} \/\/ end Class VersionedLocationClass_50\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsClass_50.jasm","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/\/ The synthetic modifier (0x1000)  is defined starting with class file format version 51 (Release 7)\n-\n-\n-\n-super synthetic public class VersionedLocationsClass_51\n-\tversion 51:0\n-{\n-\n-public synthetic Field synField:\"I\";\n-\n-public synthetic Method \"synMethod\":\"()V\"\n-        stack 1 locals 1\n-{\n-        return;\n-}\n-\n-public Method \"<init>\":\"()V\"\n-        stack 1 locals 1\n-{\n-        aload_0;\n-        invokespecial   Method java\/lang\/Object.\"<init>\":\"()V\";\n-        return;\n-}\n-\n-} \/\/ end Class VersionedLocationClass_51\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsClass_51.jasm","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -27,1 +27,0 @@\n- * @compile VersionedLocationsClass_50.jasm VersionedLocationsClass_51.jasm\n@@ -29,1 +28,0 @@\n- * @run main VersionedLocationsTest\n@@ -82,1 +80,0 @@\n-        testVersionedSyntheticClass();\n@@ -262,38 +259,1 @@\n-            compareLocations(expected, SYNTHETIC, cffv);\n-        }\n-    }\n-\n-    private record VersionedSyntheticTC(String label, boolean expectSynthetic,\n-                                        Set<AccessFlag> accessFlags) {};\n-\n-    private static void testVersionedSyntheticClass() throws Exception{\n-        final Class<?> syn51 = Class.forName(\"VersionedLocationsClass_51\");\n-        final Class<?> syn50 = Class.forName(\"VersionedLocationsClass_50\");\n-\n-        VersionedSyntheticTC[] testCases = {\n-                new VersionedSyntheticTC(\"clazz.accessFlags() - v51\", true,\n-                        syn51.accessFlags()),\n-\n-                new VersionedSyntheticTC(\"synMethod.accessFlags() - v51\", true,\n-                        syn51.getDeclaredMethod(\"synMethod\").accessFlags()),\n-\n-                new VersionedSyntheticTC(\"synField.accessFlags() - v51\", true,\n-                        syn51.getDeclaredField(\"synField\").accessFlags()),\n-\n-                new VersionedSyntheticTC(\"clazz.accessFlags() - v50\", false,\n-                        syn50.accessFlags()),\n-\n-                new VersionedSyntheticTC(\"synMethod.accessFlags() - v50\", false,\n-                        syn50.getDeclaredMethod(\"synMethod\").accessFlags()),\n-\n-                new VersionedSyntheticTC(\"synField.accessFlags() - v50\", false,\n-                        syn50.getDeclaredField(\"synField\").accessFlags()),\n-        };\n-\n-        for (VersionedSyntheticTC testcase : testCases) {\n-            final boolean hasSynthetic = testcase.accessFlags.contains(SYNTHETIC);\n-            if (testcase.expectSynthetic != hasSynthetic) {\n-                String err = testcase.expectSynthetic ? \"missing\" : \"unexpected\";\n-                throw new RuntimeException(testcase.label + \": \" + err +\n-                        \" SYNTHETIC in accessFlags: \" + testcase.accessFlags);\n-            }\n+        compareLocations(expected, SYNTHETIC, cffv);\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"}]}