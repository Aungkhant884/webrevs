{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.Character.UnicodeBlock;\n@@ -225,12 +226,15 @@\n-            return \"\\\"\" + ((String) value).codePoints()\n-                    .flatMap(cp ->\n-                        (cp == '\"')\n-                            ? \"\\\\\\\"\".codePoints()\n-                            : (cp < 256)\n-                                ? charRep[cp].codePoints()\n-                                : IntStream.of(cp))\n-                    .collect(\n-                            StringBuilder::new,\n-                            StringBuilder::appendCodePoint,\n-                            StringBuilder::append)\n-                    .toString() + \"\\\"\";\n+            StringBuilder result = new StringBuilder();\n+            result.append(\"\\\"\");\n+            var cpIt = ((String) value).codePoints().iterator();\n+            int idx = 0;\n+            while (cpIt.hasNext()) {\n+                int cp = cpIt.nextInt();\n+                if (cp == '\"') {\n+                    result.append(\"\\\\\\\"\");\n+                } else {\n+                    appendEscapedChar(idx, cp, result);\n+                }\n+                idx++;\n+            }\n+            result.append(\"\\\"\");\n+            return result.toString();\n@@ -239,6 +243,9 @@\n-            return \"'\" + (\n-                (cp == '\\'')\n-                    ? \"\\\\\\'\"\n-                    : (cp < 256)\n-                            ? charRep[cp]\n-                            : String.valueOf(cp)) + \"'\";\n+            StringBuilder result = new StringBuilder();\n+            result.append(\"'\");\n+            if (cp == '\\'') {\n+                result.append(\"\\\\\\'\");\n+            } else {\n+                appendEscapedChar(0, cp, result);\n+            }\n+            result.append(\"'\");\n+            return result.toString();\n@@ -280,0 +287,23 @@\n+    private static void appendEscapedChar(int idx, int cp, StringBuilder target) {\n+        if (cp < 256) {\n+            target.append(charRep[cp]);\n+        } else if (needsEscape(idx, cp)) {\n+            target.append(String.format(\"\\\\u%04X\", cp));\n+        } else {\n+            target.appendCodePoint(cp);\n+        }\n+    }\n+\n+    private static boolean needsEscape(int idx, int cp) {\n+        UnicodeBlock block = UnicodeBlock.of(cp);\n+        if (block == UnicodeBlock.COMBINING_DIACRITICAL_MARKS ||\n+            block == UnicodeBlock.COMBINING_DIACRITICAL_MARKS_EXTENDED ||\n+            block == UnicodeBlock.COMBINING_DIACRITICAL_MARKS_SUPPLEMENT) {\n+            \/\/escape leading combining diacritical marks,\n+            \/\/as those might be confusingly merged into the leading quotes:\n+            return idx == 0;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/DirectExecutionControl.java","additions":48,"deletions":18,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test 8130450 8158906 8154374 8166400 8171892 8173807 8173848\n+ * @test 8130450 8158906 8154374 8166400 8171892 8173807 8173848 8282434\n@@ -210,0 +210,4 @@\n+        assertEval(\"\\\"\\\\u032Ea\\\"\",\n+                   \"\\\"\\\\u032Ea\\\"\");\n+        assertEval(\"\\\"a\\\\u032Ea\\\"\",\n+                   \"\\\"a\\u032Ea\\\"\");\n@@ -225,0 +229,2 @@\n+        assertEval(\"\\\"\\\\u032E\\\".charAt(0)\",\n+                \"'\\\\u032E'\");\n","filename":"test\/langtools\/jdk\/jshell\/SimpleRegressionTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}