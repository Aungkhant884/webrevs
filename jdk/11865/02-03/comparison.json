{"files":[{"patch":"@@ -35,3 +35,2 @@\n-#include <stdint.h>\n-#include <string.h>\n-\n+#include <cstdint>\n+#include <cstring>\n@@ -41,6 +40,1 @@\n-template <typename To, typename From,\n-          ENABLE_IF(sizeof(To) == sizeof(From) &&\n-                    std::is_trivially_copyable<To>::value &&\n-                    std::is_trivially_copyable<From>::value &&\n-                    std::is_default_constructible<To>::value &&\n-                    std::is_same<From, To>::value)>\n+template <typename To, typename From, ENABLE_IF(std::is_same<From, To>::value)>\n@@ -199,7 +193,1 @@\n-#if HAS_BUILTIN(__builtin_addressof)\n-  ::memcpy(__builtin_addressof(to), __builtin_addressof(from), sizeof(To));\n-#else\n-  ::memcpy(reinterpret_cast<To*>(&const_cast<char&>(reinterpret_cast<const volatile char&>(to))),\n-           reinterpret_cast<From*>(&const_cast<char&>(reinterpret_cast<const volatile char&>(from))),\n-           sizeof(To));\n-#endif\n+  std::memcpy(&to, &from, sizeof(To));\n","filename":"src\/hotspot\/share\/utilities\/bitCast.hpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -148,4 +148,0 @@\n-\n-    const TrivialStruct1* operator&() const { return nullptr; }\n-\n-    TrivialStruct1* operator&() { return nullptr; }\n@@ -156,4 +152,0 @@\n-\n-    const TrivialStruct2* operator&() const { return nullptr; }\n-\n-    TrivialStruct2* operator&() { return nullptr; }\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitCast.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}