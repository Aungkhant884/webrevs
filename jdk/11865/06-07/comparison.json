{"files":[{"patch":"@@ -51,2 +51,1 @@\n-\/\/ From and To are integrals of the same size. We can simply static_cast without changing the bit\n-\/\/ representation.\n+\/\/ From and To are integrals of the same size.\n@@ -61,0 +60,6 @@\n+  \/\/ Use static_cast for conversion.  See C++14 4.7 Integral\n+  \/\/ conversions. If To is signed and From unsigned, the result is\n+  \/\/ implementation-defined.  All supported platforms provide two's\n+  \/\/ complement behavior, and that behavior is required by C++20.\n+  \/\/ Using an lvalue to reference cast (see C++03 3.10\/15) involves a\n+  \/\/ reinterpret_cast, which prevents constexpr support.\n@@ -65,1 +70,1 @@\n-\/\/ From is an integral and To is a enum. We can simply static_cast using the underlying type.\n+\/\/ From is an integral and To is a enum.\n@@ -74,0 +79,1 @@\n+  \/\/ We can simply static_cast using the underlying type.\n@@ -78,1 +84,1 @@\n-\/\/ From is an enum and To is an integral. We can simply static_cast using the underlying type.\n+\/\/ From is an enum and To is an integral.\n@@ -87,0 +93,1 @@\n+  \/\/ We can simply static_cast using the underlying type.\n@@ -91,1 +98,1 @@\n-\/\/ From is an enum and To is an enum. We can simply static_cast using the underlying type.\n+\/\/ From is an enum and To is an enum.\n@@ -100,0 +107,1 @@\n+  \/\/ We can simply static_cast using the underlying type.\n","filename":"src\/hotspot\/share\/utilities\/bitCast.hpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}