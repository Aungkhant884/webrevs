{"files":[{"patch":"@@ -385,7 +385,6 @@\n-                    \/\/ the results will either be a single perfect match\n-                    \/\/ or 1 or more imperfect matches\n-                    \/\/ if it's a perfect match, return immediately\n-                    EntryStatus status = results.get(0);\n-                    if (status.checkResult == CheckResult.OK) {\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n-                            SSLLogger.fine(\"KeyMgr: choosing key: \" + status);\n+                    for (EntryStatus status : results) {\n+                        if (status.checkResult == CheckResult.OK) {\n+                            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                                SSLLogger.fine(\"KeyMgr: choosing key: \" + status);\n+                            }\n+                            return makeAlias(status);\n@@ -393,1 +392,0 @@\n-                        return makeAlias(status);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8278560\n+ * @summary X509KeyManagerImpl::getAliases might return a good key with others\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ *\/\n+import jdk.test.lib.Asserts;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.util.KnownOIDs;\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.CertificateExtensions;\n+import sun.security.x509.ExtendedKeyUsageExtension;\n+import sun.security.x509.X500Name;\n+\n+import java.io.*;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.util.Date;\n+import java.util.Vector;\n+import javax.net.ssl.*;\n+\n+public class NoGoodKey {\n+    public static void main(String[] args) throws Exception {\n+\n+        PrintStream oldErr = System.err;\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+\n+        CertificateExtensions exts = new CertificateExtensions();\n+        Vector<ObjectIdentifier> xku = new Vector<>(1);\n+        xku.add(ObjectIdentifier.of(KnownOIDs.KP_TimeStamping));\n+        var ext = new ExtendedKeyUsageExtension(xku);\n+        exts.set(ext.getId(), ext);\n+\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        char[] pass = \"password\".toCharArray();\n+        ks.load(null, null);\n+\n+        CertAndKeyGen ckg;\n+\n+        \/\/ This is for the first keyType but wrong extendedKeyUsage\n+        ckg = new CertAndKeyGen(\"EC\", \"SHA256withECDSA\");\n+        ckg.generate(\"secp256r1\");\n+        ks.setKeyEntry(\"a\", ckg.getPrivateKey(), pass, new java.security.cert.Certificate[]\n+                { ckg.getSelfCertificate(new X500Name(\"CN=user\"), new Date(), 10000, exts) });\n+\n+        \/\/ This is for the 2nd keyType and is perfect\n+        ckg = new CertAndKeyGen(\"RSA\", \"SHA256withRSA\");\n+        ckg.generate(2048);\n+        ks.setKeyEntry(\"b\", ckg.getPrivateKey(), pass, new Certificate[]\n+                { ckg.getSelfCertificate(new X500Name(\"CN=user\"), 10000) });\n+\n+        try {\n+            System.setProperty(\"javax.net.debug\", \"keymanager\");\n+            System.setErr(new PrintStream(bout));\n+            var kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n+            kmf.init(ks, pass);\n+            var km = (X509ExtendedKeyManager) kmf.getKeyManagers()[0];\n+\n+            \/\/ b will be chosen anyway\n+            Asserts.assertEQ(km.chooseClientAlias(new String[]{\"EC\", \"RSA\"}, null, null), \"1.0.b\");\n+        } finally {\n+            System.setErr(oldErr);\n+        }\n+\n+        \/\/ make sure it's chosen as good matching key\n+        String log = bout.toString();\n+        Asserts.assertFalse(log.contains(\"no good matching key found\"), log);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NoGoodKey.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}