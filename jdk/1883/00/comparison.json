{"files":[{"patch":"@@ -511,1 +511,1 @@\n-        String P11MAC              = \"sun.security.pkcs11.P11MAC\";\n+        String P11Mac              = \"sun.security.pkcs11.P11Mac\";\n@@ -517,0 +517,1 @@\n+        String P11ECKeyFactory     = \"sun.security.pkcs11.P11ECKeyFactory\";\n@@ -555,1 +556,1 @@\n-        d(MAC, \"HmacMD5\",       P11MAC,\n+        d(MAC, \"HmacMD5\",       P11Mac,\n@@ -557,1 +558,1 @@\n-        dA(MAC, \"HmacSHA1\",      P11MAC,\n+        dA(MAC, \"HmacSHA1\",      P11Mac,\n@@ -559,1 +560,1 @@\n-        dA(MAC, \"HmacSHA224\",    P11MAC,\n+        dA(MAC, \"HmacSHA224\",    P11Mac,\n@@ -561,1 +562,1 @@\n-        dA(MAC, \"HmacSHA256\",    P11MAC,\n+        dA(MAC, \"HmacSHA256\",    P11Mac,\n@@ -563,1 +564,1 @@\n-        dA(MAC, \"HmacSHA384\",    P11MAC,\n+        dA(MAC, \"HmacSHA384\",    P11Mac,\n@@ -565,1 +566,1 @@\n-        dA(MAC, \"HmacSHA512\",    P11MAC,\n+        dA(MAC, \"HmacSHA512\",    P11Mac,\n@@ -567,1 +568,1 @@\n-        dA(MAC, \"HmacSHA512\/224\",    P11MAC,\n+        dA(MAC, \"HmacSHA512\/224\",    P11Mac,\n@@ -569,1 +570,1 @@\n-        dA(MAC, \"HmacSHA512\/256\",    P11MAC,\n+        dA(MAC, \"HmacSHA512\/256\",    P11Mac,\n@@ -571,1 +572,1 @@\n-        dA(MAC, \"HmacSHA3-224\",    P11MAC,\n+        dA(MAC, \"HmacSHA3-224\",    P11Mac,\n@@ -573,1 +574,1 @@\n-        dA(MAC, \"HmacSHA3-256\",    P11MAC,\n+        dA(MAC, \"HmacSHA3-256\",    P11Mac,\n@@ -575,1 +576,1 @@\n-        dA(MAC, \"HmacSHA3-384\",    P11MAC,\n+        dA(MAC, \"HmacSHA3-384\",    P11Mac,\n@@ -577,1 +578,1 @@\n-        dA(MAC, \"HmacSHA3-512\",    P11MAC,\n+        dA(MAC, \"HmacSHA3-512\",    P11Mac,\n@@ -579,1 +580,1 @@\n-        d(MAC, \"SslMacMD5\",     P11MAC,\n+        d(MAC, \"SslMacMD5\",     P11Mac,\n@@ -581,1 +582,1 @@\n-        d(MAC, \"SslMacSHA1\",    P11MAC,\n+        d(MAC, \"SslMacSHA1\",    P11Mac,\n@@ -643,1 +644,1 @@\n-        d(KF, \"EC\",             P11DHKeyFactory,\n+        d(KF, \"EC\",             P11ECKeyFactory,\n@@ -1136,0 +1137,1 @@\n+        @Override\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8258851\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main CheckRegistration\n+ * @summary Ensure SunPKCS11 provider service registration matches the actual\n+ *     impl class\n+ *\/\n+\n+import java.security.Provider;\n+import java.util.Set;\n+\n+public class CheckRegistration extends PKCS11Test {\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new CheckRegistration(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        Set<Provider.Service> services = p.getServices();\n+\n+        for (Provider.Service s : services) {\n+            String key = s.getType() + \".\" + s.getAlgorithm();\n+            Object val = p.get(key);\n+            System.out.println(\"Checking \" + key + \" : \" + s.getClassName());\n+            if (val == null) {\n+                throw new RuntimeException(\"Missing mapping\");\n+            }\n+            if (!s.getClassName().equals(val)) {\n+                System.out.println(\"Mapping value: \" + val);\n+                throw new RuntimeException(\"Mapping mismatches\");\n+            }\n+            Object o = s.newInstance(null);\n+            if (!s.getClassName().equals(o.getClass().getName())) {\n+                System.out.println(\"Actual impl: \" + o.getClass().getName());\n+                throw new RuntimeException(\"Impl class mismatches\");\n+            }\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/CheckRegistration.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}