{"files":[{"patch":"@@ -1008,2 +1008,8 @@\n-# supported in XML Signature generation and verification. It is set to\n-# \"true\" by default.\n+# supported in XML Signature generation and verification.\n+#\n+# If this property is set to false, the here() function is not supported.\n+# Generating an XML Signature that uses the here() function will throw an\n+# XMLSignatureException. Validating an existing XML Signature that uses the\n+# here() function will also throw an XMLSignatureException.\n+#\n+# The default value for this property is true.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -460,1 +460,2 @@\n-    protected int isVisibleDO(Node currentNode, int level) {\n+    protected int isVisibleDO(Node currentNode, int level)\n+            throws CanonicalizationException {\n@@ -463,3 +464,7 @@\n-                int i = filter.isNodeIncludeDO(currentNode, level);\n-                if (i != 1) {\n-                    return i;\n+                try {\n+                    int i = filter.isNodeIncludeDO(currentNode, level);\n+                    if (i != 1) {\n+                        return i;\n+                    }\n+                } catch (Exception e) {\n+                    throw new CanonicalizationException(e);\n@@ -475,1 +480,2 @@\n-    protected int isVisibleInt(Node currentNode) {\n+    protected int isVisibleInt(Node currentNode)\n+            throws CanonicalizationException {\n@@ -478,3 +484,7 @@\n-                int i = filter.isNodeInclude(currentNode);\n-                if (i != 1) {\n-                    return i;\n+                try {\n+                    int i = filter.isNodeInclude(currentNode);\n+                    if (i != 1) {\n+                        return i;\n+                    }\n+                } catch (Exception e) {\n+                    throw new CanonicalizationException(e);\n@@ -490,1 +500,1 @@\n-    protected boolean isVisible(Node currentNode) {\n+    protected boolean isVisible(Node currentNode) throws CanonicalizationException {\n@@ -493,2 +503,6 @@\n-                if (filter.isNodeInclude(currentNode) != 1) {\n-                    return false;\n+                try {\n+                    if (filter.isNodeInclude(currentNode) != 1) {\n+                        return false;\n+                    }\n+                } catch (Exception e) {\n+                    throw new CanonicalizationException(e);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/CanonicalizerBase.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import com.sun.org.apache.xml.internal.security.transforms.TransformationException;\n@@ -40,1 +41,1 @@\n-    int isNodeInclude(Node n);\n+    int isNodeInclude(Node n) throws TransformationException;\n@@ -53,1 +54,1 @@\n-    int isNodeIncludeDO(Node n, int level);\n+    int isNodeIncludeDO(Node n, int level) throws TransformationException;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/NodeFilter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,3 +58,0 @@\n-    private static final com.sun.org.slf4j.internal.Logger LOG =\n-            com.sun.org.slf4j.internal.LoggerFactory.getLogger(TransformXPath.class);\n-\n@@ -168,1 +165,1 @@\n-        public int isNodeInclude(Node currentNode) {\n+        public int isNodeInclude(Node currentNode) throws TransformationException {\n@@ -175,3 +172,2 @@\n-            } catch (TransformerException e) {\n-                LOG.debug(\"Error evaluating XPath expression\", e);\n-                return 0;\n+            } catch (TransformerException ex) {\n+                throw new TransformationException(ex);\n@@ -181,1 +177,1 @@\n-        public int isNodeIncludeDO(Node n, int level) {\n+        public int isNodeIncludeDO(Node n, int level) throws TransformationException {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/transforms\/implementations\/TransformXPath.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\n+import com.sun.org.apache.xml.internal.security.transforms.TransformationException;\n@@ -49,4 +51,0 @@\n-        if (xi.getNodeFilters() != null && !xi.getNodeFilters().isEmpty()) {\n-            return Collections.unmodifiableSet\n-                (getNodeSet(xi.getNodeFilters())).iterator();\n-        }\n@@ -54,0 +52,4 @@\n+            if (xi.getNodeFilters() != null && !xi.getNodeFilters().isEmpty()) {\n+                return Collections.unmodifiableSet\n+                        (getNodeSet(xi.getNodeFilters())).iterator();\n+            }\n@@ -66,1 +68,2 @@\n-    private Set<Node> getNodeSet(List<NodeFilter> nodeFilters) {\n+    private Set<Node> getNodeSet(List<NodeFilter> nodeFilters)\n+            throws TransformationException {\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheNodeSetData.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -48,1 +51,8 @@\n-import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.*;\n+import javax.xml.crypto.dsig.dom.DOMSignContext;\n+import javax.xml.crypto.dsig.dom.DOMValidateContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\n+import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.XPathFilterParameterSpec;\n+import javax.xml.parsers.DocumentBuilderFactory;\n@@ -50,0 +60,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -51,0 +63,3 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n@@ -54,1 +69,0 @@\n-    private static SignatureValidator validator;\n@@ -58,1 +72,1 @@\n-    private final static String KEYSTORE =\n+    private final static String KEYSTORE_VERIFY =\n@@ -61,0 +75,3 @@\n+    private final static String KEYSTORE_SIGN =\n+            DATA_DIR + System.getProperty(\"file.separator\") + \"certs\" +\n+                    System.getProperty(\"file.separator\") + \"test.jks\";\n@@ -65,0 +82,1 @@\n+    private final static char[] PASS = \"changeit\".toCharArray();\n@@ -66,2 +84,1 @@\n-    public static void main(String args[]) throws Exception {\n-\n+    public static void main(String args[]) throws Throwable {\n@@ -71,2 +88,0 @@\n-        boolean expected = Boolean.parseBoolean(args[1]);\n-\n@@ -76,1 +91,36 @@\n-        validator = new SignatureValidator(new File(DATA_DIR));\n+        boolean expected = Boolean.parseBoolean(args[1]);\n+\n+        sign(expected);\n+\n+        \/\/ Validating an old signature signed by JDK < 21\n+        validate(expected);\n+    }\n+\n+    static void validate(boolean expected) throws Exception {\n+        SignatureValidator validator = new SignatureValidator(new File(DATA_DIR));\n+\n+        KeyStore keystore = KeyStore.getInstance(new File(KEYSTORE_VERIFY), PASS);\n+        KeySelector ks = new X509KeySelector(keystore, false);\n+\n+        if (expected) {\n+            Asserts.assertTrue(validator.validate(\n+                    \"signature.xml\", ks, new HttpURIDereferencer(), false));\n+        } else {\n+            Utils.runAndCheckException(() -> validator.validate(\n+                    \"signature.xml\", ks, new HttpURIDereferencer(), false),\n+                    XMLSignatureException.class);\n+        }\n+    }\n+\n+    static void sign(boolean expected) throws Exception {\n+        XMLSignatureFactory fac = XMLSignatureFactory.getInstance();\n+        DigestMethod sha1 = fac.newDigestMethod(DigestMethod.SHA1, null);\n+        CanonicalizationMethod withoutComments = fac.newCanonicalizationMethod\n+                (CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec)null);\n+        SignatureMethod dsaSha1 = fac.newSignatureMethod(SignatureMethod.DSA_SHA1, null);\n+        KeyInfoFactory kifac = fac.getKeyInfoFactory();\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setNamespaceAware(true);\n+\n+        String ENVELOPE =\n+                DATA_DIR + System.getProperty(\"file.separator\") + \"envelope.xml\";\n@@ -78,5 +128,53 @@\n-        KeyStore keystore = KeyStore.getInstance(\"JKS\");\n-        KeySelector ks;\n-        try (FileInputStream fis = new FileInputStream(KEYSTORE)) {\n-            keystore.load(fis, \"changeit\".toCharArray());\n-            ks = new X509KeySelector(keystore, false);\n+        var ks = KeyStore.getInstance(new File(KEYSTORE_SIGN), PASS);\n+        var signingKey = ks.getKey(\"user\", PASS);\n+        var signingCert = ks.getCertificate(\"user\");\n+\n+        \/\/ create references\n+        List<Reference> refs = new ArrayList<>();\n+\n+        \/\/ Reference 1\n+        refs.add(fac.newReference(STYLESHEET, sha1));\n+\n+        \/\/ Reference 2\n+        String expr = \"\\n\"\n+                + \" ancestor-or-self::dsig:SignedInfo                  \" + \"\\n\"\n+                + \"  and                                               \" + \"\\n\"\n+                + \" count(ancestor-or-self::dsig:Reference |           \" + \"\\n\"\n+                + \"      here()\/ancestor::dsig:Reference[1]) >         \" + \"\\n\"\n+                + \" count(ancestor-or-self::dsig:Reference)            \" + \"\\n\"\n+                + \"  or                                                \" + \"\\n\"\n+                + \" count(ancestor-or-self::node() |                   \" + \"\\n\"\n+                + \"      id('notaries')) =                             \" + \"\\n\"\n+                + \" count(ancestor-or-self::node())                    \" + \"\\n\";\n+\n+        XPathFilterParameterSpec xfp = new XPathFilterParameterSpec(expr,\n+                Collections.singletonMap(\"dsig\", XMLSignature.XMLNS));\n+        refs.add(fac.newReference(\"\", sha1, Collections.singletonList\n+                        (fac.newTransform(Transform.XPATH, xfp)),\n+                XMLObject.TYPE, null));\n+\n+        \/\/ create SignedInfo\n+        SignedInfo si = fac.newSignedInfo(withoutComments, dsaSha1, refs);\n+\n+        \/\/ create keyinfo\n+        KeyInfo ki = kifac.newKeyInfo(List.of(\n+                kifac.newX509Data(List.of(signingCert))), null);\n+\n+        \/\/ create XMLSignature\n+        XMLSignature sig = fac.newXMLSignature(si, ki, null, \"signature\", null);\n+\n+        dbf.setValidating(false);\n+        Document envDoc = dbf.newDocumentBuilder()\n+                .parse(new FileInputStream(ENVELOPE));\n+        Element ys = (Element)\n+                envDoc.getElementsByTagName(\"YoursSincerely\").item(0);\n+\n+        DOMSignContext dsc = new DOMSignContext(signingKey, ys);\n+        dsc.setURIDereferencer(new HttpURIDereferencer());\n+\n+        if (expected) {\n+            sig.sign(dsc);\n+        } else {\n+            Utils.runAndCheckException(\n+                    () -> sig.sign(dsc), XMLSignatureException.class);\n+            return; \/\/ Signing fails, no need to validate\n@@ -85,2 +183,9 @@\n-        boolean actual = validator.validate(\n-                \"signature.xml\", ks, new HttpURIDereferencer(), false);\n+\/\/      StringWriter sw = new StringWriter();\n+\/\/        dumpDocument(envDoc, sw);\n+\n+        NodeList nl =\n+                envDoc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\");\n+        if (nl.getLength() == 0) {\n+            throw new Exception(\"Couldn't find signature Element\");\n+        }\n+        Element sigElement = (Element) nl.item(0);\n@@ -88,2 +193,18 @@\n-        if (actual != expected) {\n-            throw new Exception(\"Expected: \" + expected + \", actual: \" + actual);\n+        DOMValidateContext dvc = new DOMValidateContext\n+                (new X509KeySelector(ks), sigElement);\n+        dvc.setURIDereferencer(new HttpURIDereferencer());\n+        File f = new File(\n+                System.getProperty(\"dir.test.vector.baltimore\") +\n+                        System.getProperty(\"file.separator\") +\n+                        \"merlin-xmldsig-twenty-three\" +\n+                        System.getProperty(\"file.separator\"));\n+        dvc.setBaseURI(f.toURI().toString());\n+\n+        XMLSignature sig2 = fac.unmarshalXMLSignature(dvc);\n+\n+        if (sig.equals(sig2) == false) {\n+            throw new Exception\n+                    (\"Unmarshalled signature is not equal to generated signature\");\n+        }\n+        if (sig2.validate(dvc) == false) {\n+            throw new Exception(\"Validation of generated signature failed\");\n@@ -98,1 +219,1 @@\n-        private URIDereferencer defaultUd;\n+        private final URIDereferencer defaultUd;\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/HereFunction.java","additions":139,"deletions":18,"binary":false,"changes":157,"status":"modified"}]}