{"files":[{"patch":"@@ -1658,5 +1658,16 @@\n-  state = IsUnloadingState::create(state_is_unloading, state_unloading_cycle);\n-\n-  RawAccess<MO_RELAXED>::store(&_is_unloading_state, state);\n-\n-  return state_is_unloading;\n+  uint8_t new_state = IsUnloadingState::create(state_is_unloading, state_unloading_cycle);\n+\n+  \/\/ Note that if an nmethod has dead oops, everyone will agree that the\n+  \/\/ nmethod is_unloading. However, the is_cold heuristics can yield\n+  \/\/ different outcomes, so we guard the computed result with a CAS\n+  \/\/ to ensure all threads have a shared view of whether an nmethod\n+  \/\/ is_unloading or not.\n+  uint8_t found_state = Atomic::cmpxchg(&_is_unloading_state, state, new_state, memory_order_relaxed);\n+\n+  if (found_state == state) {\n+    \/\/ First to change state, we win\n+    return state_is_unloading;\n+  } else {\n+    \/\/ State already set, so use it\n+    return IsUnloadingState::is_unloading(found_state);\n+  }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}