{"files":[{"patch":"@@ -1665,2 +1665,4 @@\n-  if (Atomic::cmpxchg(&_is_unloading_state, state, new_state, memory_order_relaxed) == state) {\n-    \/\/ Our view of the world won\n+  uint8_t found_state = Atomic::cmpxchg(&_is_unloading_state, state, new_state, memory_order_relaxed);\n+\n+  if (found_state == state) {\n+    \/\/ First to change state, we win\n@@ -1668,0 +1670,3 @@\n+  } else {\n+    \/\/ State already set, so use it\n+    return IsUnloadingState::is_unloading(found_state);\n@@ -1669,5 +1674,0 @@\n-\n-  \/\/ If we lost the race, we call is_unloading again to see what the winner\n-  \/\/ determined. This can't recurse as the second time we call the state is\n-  \/\/ guaranteed to be cached for the current unloading cycle.\n-  return is_unloading();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}