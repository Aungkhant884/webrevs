[{"commit":{"message":"replace hi\/lo word shuffles and left-right shift\/or operations for vpshufd on byte-aligned rotations"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp"}],"sha":"8d4b7ba7951bf25ab97506be95bb2099d414ebdb"},{"commit":{"message":"Change intrinsic helper method name conform to convention"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java"}],"sha":"53b432e5aa629cd4cad4c1f9707915d858d2feda"},{"commit":{"message":"consolidate chacha macroAssembler routines into chacha stubGenerator file"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp"}],"sha":"0ce97d83f914dfd0cbddd8889f871cf4cd7f6c8e"},{"commit":{"message":"More indentation fixes on aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_chacha.cpp"}],"sha":"11bed1e9fb48897fb9cc1ce60559496d80a59a5f"},{"commit":{"message":"rename chapoly->chacha for macro file"},"files":[],"sha":"936272b6780c10b81009dbd28ab706270918c017"},{"commit":{"message":"rename chacha macro file to be consistent with x86_64 naming"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_chacha.cpp"}],"sha":"3262bc7d4a824f5404e5a44de339f4718443010f"},{"commit":{"message":"Fix indentation issues"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp"}],"sha":"adf0f25425274bf5bdf91de740cd97cc4810c3dd"},{"commit":{"message":"consolidate single-structure ld_st methods"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"c79abe3415ac56b4f175caccdf70f8ae9007c592"},{"commit":{"message":"Add intrinsic tests that target specific SIMD instruction sets"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/chacha\/ExerciseChaCha20.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/chacha\/TestChaCha20.java"}],"sha":"d1e6bc7236cdb3f713910bc720f85d7c6df6ebbc"},{"commit":{"message":"add explicit int cast on counter rollover protection"},"files":[{"filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java"}],"sha":"330d33d7268df49e2541776ed7c3aeaecbf3c3ab"},{"commit":{"message":"Merge with main"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"}],"sha":"35cec5ce579b6fc967fa8ee3567f17271f4bf523"},{"commit":{"message":"expand input sizes for ChaCha20 and ChaCha20-Poly1305 micro benchmarks"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/CipherBench.java"}],"sha":"b709841d4649296fed01c47095f2afdabccf6b6e"},{"commit":{"message":"rename chapoly to chacha"},"files":[],"sha":"1ab2e2b677238115fd57327b2bdbd7eef78781a4"},{"commit":{"message":"make alg-specific stub\/macro files exclusive to chacha20"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp"}],"sha":"854417cc1e7f1ae2f14221f5b102ad75908147e9"},{"commit":{"message":"Remove stubRoutines constant generation method, replace using emit_int64\/adr"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"a94b241f822b5552e5432b3e35331cbe99614f41"},{"commit":{"message":"Use block-parallel intrinsic, remove qr-parallel intrinsic, use sub\/cbnz for loop control"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"9d43157139e2412399bbeee45a6acbcafee1aa68"},{"commit":{"message":"Minor fixes from comments"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp"}],"sha":"e540dfaa7127a355ed1ce2913418ea4180b20100"},{"commit":{"message":"Compartmentalize chacha20 intrinsics similar to #10111, #10124 and #10152"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp"}],"sha":"a5be6bd4b84ebc0af06fa16c50ca53ab52d6404e"},{"commit":{"message":"Remove 32-bit intrinsics"},"files":[],"sha":"efe3ecfbd1efa4a24f118a5c6af5827078ebbbef"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp"},{"filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java"}],"sha":"de09a406be4298b8a1dd14835d394e137bff6151"},{"commit":{"message":"Move cc20 chapoly macroAssembler defs outside of 64-bit ifdef"},"files":[],"sha":"d8bc5f2c7d9f9b91eda11a7f472450fa8e806771"},{"commit":{"message":"Make block-parallel aarch64 intrinsic more compact.  Add more descriptive comments."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"7be7504e8e3144ed7e6befe2088288f04d5ae0af"},{"commit":{"message":"Refine aarch64 cpu feature check, refine x86 cpu feature check code"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp"}],"sha":"6695296e04202f5919376c776c7756135a0a7c15"},{"commit":{"message":"Add opcode info for st1\/2\/3 (single structure)"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"12ce92464f0bb6e03583ff3bf9b4e82bf6a8181c"},{"commit":{"message":"Coalesce AVX\/AVX2 intrinsics.  Use new block function macros.  Extend AVX\/AVX2 to 2 block function register groups, AVX-512 to 4"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java"}],"sha":"9c4580fc8642b04d79655d0bc76c032e5ecb6d8b"},{"commit":{"message":"Create x86 ChaCha20 macros"},"files":[],"sha":"7ebe0dc8f96a10123ee7b9f1451a9da5ce6ca09e"},{"commit":{"message":"Add missing macroAssembler chacha20 functions"},"files":[],"sha":"bf610bb54a0533ae55f938f44ba85f670e0f6c22"},{"commit":{"message":"(aarch64) Change C-style macros into macroAssember functions"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"724267f5cab660deff7a1d60823ff4615712816c"},{"commit":{"message":"Remove duplicate methods caused by merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"72fee767a2966a614e8628e439ecc9f3c4660c3a"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"d216323950c5048d9c25fcdfe40052f97b1b988c"},{"commit":{"message":"Add quarter-round parallel and block parallel implementations on aarch64 (draft)"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp"},{"filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java"}],"sha":"4a4cbf60ad4820cb2187445d53b4d01990839c82"},{"commit":{"message":"Add suppoorting code for constant vector generation methods"},"files":[],"sha":"b23ead9d7254c6216a74bb74bf6ce6a3029aef7f"},{"commit":{"message":"Create single-structure ld\/st opcode generation methods.  Add sli instruction."},"files":[],"sha":"515f113047359d4f77e580cfb04dc436754ac504"},{"commit":{"message":"Replace single-block intrinsic with 4-block QR-parallel and Block-parallel implementations"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"c3ac7eadb3dc527070bb92286f50eb2fcd1c1942"},{"commit":{"message":"Initial single-block aarch64 intrinsic implementation"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"1b4d255ed0cb6d732dc6f83dba181162656890f0"},{"commit":{"message":"Fix indentation"},"files":[],"sha":"f9008c10cec5d245ba54ccafcfe3f4df65d2bab7"},{"commit":{"message":"Store starting state on SIMD registers, reduce memory accesses for AVX\/AVX2"},"files":[],"sha":"8c480f3f3dacfa89239951116a4c58099afd83c9"},{"commit":{"message":"Store initial state on ymm registers, reduce memory accesses for x86_64 on AVX2"},"files":[],"sha":"bf5534abc0bd6a3c9df4b4801e254b67f8980df8"},{"commit":{"message":"Apply AVX-512 add mask directly to zmm_dState register, remove zmm_addMask register"},"files":[],"sha":"7bf16861ed1035bd035afde84571ab3b81f62f09"},{"commit":{"message":"Performance improvments for AVX-512 ChaCha20 block function intrinsic"},"files":[],"sha":"26103f282528b0eb9086a43b91ee86d96e2c542e"},{"commit":{"message":"Implement x86 32-bit AVX\/AVX2\/AVX512 ChaCha20 block function intrinsics"},"files":[],"sha":"ff86fdedbcd998e82a2e2aafcd1b9f6ea6fafbe3"},{"commit":{"message":"Remove AVX-512 scatter mask references"},"files":[],"sha":"8f024527fd5c85da22dc34a7175cc9cd781fae75"},{"commit":{"message":"Remove kxnorwl instruction"},"files":[],"sha":"be3f3798a9fe1e38b11869fb2f86ea76be0b1b93"},{"commit":{"message":"Add kxnorwl instruction for use in AVX512 block function intrinsic"},"files":[],"sha":"ddcb9b9ea0aeab662e551ff6ec6522191e38f9b9"},{"commit":{"message":"Fix vpshuflw\/hw instructions to assert AVX512BW instruction set guards\/attributes"},"files":[],"sha":"851cf312b4d7380c7904b990db6981d0a718ce0b"},{"commit":{"message":"consolidate counter setting into inlined method, add array bounds checking"},"files":[],"sha":"98f2f252c5d149f7ab5dbbb7986ccb00f19ea342"},{"commit":{"message":"Prototype SSE2+AVX, AVX2, AVX512 intrinsics for x86_64"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.hpp"}],"sha":"0af5328c6369d48d63364a69d94bb8a38dacdb92"}]