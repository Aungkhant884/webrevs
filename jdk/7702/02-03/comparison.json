{"files":[{"patch":"@@ -2425,0 +2425,23 @@\n+\/\/ Handle common single-structure ld\/st parameter sanity checks\n+\/\/ for all variations (1 to 4) of SIMD reigster inputs.  This\n+\/\/ method will call the routine that generates the opcode.\n+template<typename R, typename... Rx>\n+  void ldst_sstr(SIMD_RegVariant T, int index, const Address &a,\n+            int op1, int op2, R firstReg, Rx... otherRegs) {\n+    const FloatRegister vtSet[] = { firstReg, otherRegs... };\n+    const int regCount = sizeof...(otherRegs) + 1;\n+    assert(index >= 0 && (T <= D) && ((T == B && index <= 15) ||\n+              (T == H && index <= 7) || (T == S && index <= 3) ||\n+              (T == D && index <= 1)), \"invalid index\");\n+    assert(regCount >= 1 && regCount <= 4, \"illegal register count\");\n+\n+    \/\/ Check to make sure when multiple SIMD registers are used\n+    \/\/ that they are in successive order.\n+    for (int i = 0; i < regCount - 1; i++) {\n+      assert(vtSet[i]->successor() == vtSet[i + 1],\n+             \"Registers must be ordered\");\n+    }\n+\n+    ld_st(firstReg, T, index, a, op1, op2, regCount);\n+  }\n+\n@@ -2430,4 +2453,1 @@\n-    assert(index >= 0 && (T <= D) && ((T == B && index <= 15) ||        \\\n-                (T == H && index <= 7) || (T == S && index <= 3) ||     \\\n-                (T == D && index <= 1)), \"invalid index\");              \\\n-    ld_st(Vt, T, index, a, op1, op2, 1);                                \\\n+    ldst_sstr(T, index, a, op1, op2, Vt);                               \\\n@@ -2439,5 +2459,1 @@\n-    assert(index >= 0 && (T <= D) && ((T == B && index <= 15) ||        \\\n-                (T == H && index <= 7) || (T == S && index <= 3) ||     \\\n-                (T == D && index <= 1)), \"invalid index\");              \\\n-    assert(Vt->successor() == Vt2, \"Registers must be ordered\");        \\\n-    ld_st(Vt, T, index, a, op1, op2, 2);                                \\\n+    ldst_sstr(T, index, a, op1, op2, Vt, Vt2);                          \\\n@@ -2449,6 +2465,1 @@\n-    assert(index >= 0 && (T <= D) && ((T == B && index <= 15) ||        \\\n-                (T == H && index <= 7) || (T == S && index <= 3) ||     \\\n-                (T == D && index <= 1)), \"invalid index\");              \\\n-    assert(Vt->successor() == Vt2 && Vt2->successor() == Vt3,           \\\n-           \"Registers must be ordered\");                                \\\n-    ld_st(Vt, T, index, a, op1, op2, 3);                                \\\n+    ldst_sstr(T, index, a, op1, op2, Vt, Vt2, Vt3);                     \\\n@@ -2461,6 +2472,1 @@\n-    assert(index >= 0 && (T <= D) && ((T == B && index <= 15) ||        \\\n-                (T == H && index <= 7) || (T == S && index <= 3) ||     \\\n-                (T == D && index <= 1)), \"invalid index\");              \\\n-    assert(Vt->successor() == Vt2 && Vt2->successor() == Vt3 &&         \\\n-           Vt3->successor() == Vt4, \"Registers must be ordered\");       \\\n-    ld_st(Vt, T, index, a, op1, op2, 4);                                \\\n+    ldst_sstr(T, index, a, op1, op2, Vt, Vt2, Vt3, Vt4);                \\\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"}]}