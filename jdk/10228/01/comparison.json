{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,0 +242,4 @@\n+                 \/\/ javaRemoteLocation attribute (RMI stub will be created)\n+                 if (!VersionHelper.isSerialDataAllowed()) {\n+                     throw new NamingException(\"Object deserialization is not allowed\");\n+                 }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Obj.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-                \"com.sun.jndi.ldap.object.trustSerialData\", \"true\");\n+                \"com.sun.jndi.ldap.object.trustSerialData\", \"false\");\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/VersionHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,5 +82,10 @@\n- *          which allows to control the deserialization of java objects from the 'javaSerializedData'\n- *          LDAP attribute. To prevent the deserialization of java objects from the 'javaSerializedData'\n- *          attribute, the system property value can be set to 'false'.\n- *          <br>If the property is not specified then the deserialization of java objects\n- *          from the 'javaSerializedData' attribute is allowed.\n+ *          that controls the deserialization of java objects from the {@code javaSerializedData} LDAP\n+ *          attribute, reconstruction of RMI references from the {@code javaRemoteLocation} LDAP attribute, and\n+ *          reconstruction of {@linkplain javax.naming.BinaryRefAddr binary reference addresses} from\n+ *          the {@code javaReferenceAddress} LDAP attribute.\n+ *          To allow the deserialization or reconstruction of java objects from {@code javaSerializedData},\n+ *          {@code javaRemoteLocation} or {@code javaReferenceAddress} attributes, the system property value can be\n+ *          set to {@code true}.\n+ *          <br>If the property is not specified the deserialization of java objects\n+ *          from the {@code javaSerializedData}, the {@code javaRemoteLocation}, or {@code javaReferenceAddress}\n+ *          attributes is not allowed.\n","filename":"src\/java.naming\/share\/classes\/module-info.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.SocketAddress;\n+import java.util.Hashtable;\n+import javax.naming.CommunicationException;\n+import javax.naming.NamingException;\n+import javax.naming.ServiceUnavailableException;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n+\/**\n+ * @test\n+ * @bug 8290367\n+ * @summary Check if com.sun.jndi.ldap.object.trustSerialData covers the creation\n+ *          of RMI remote objects from the 'javaRemoteLocation' LDAP attribute.\n+ * @modules java.naming\/com.sun.jndi.ldap\n+ * @library \/test\/lib ..\/lib \/javax\/naming\/module\/src\/test\/test\/\n+ * @build LDAPServer LDAPTestUtils\n+ *\n+ * @run main\/othervm RemoteLocationAttributeTest\n+ * @run main\/othervm -Dcom.sun.jndi.ldap.object.trustSerialData\n+ *                   RemoteLocationAttributeTest\n+ * @run main\/othervm -Dcom.sun.jndi.ldap.object.trustSerialData=false\n+ *                   RemoteLocationAttributeTest\n+ * @run main\/othervm -Dcom.sun.jndi.ldap.object.trustSerialData=true\n+ *                   RemoteLocationAttributeTest\n+ *\/\n+\n+public class RemoteLocationAttributeTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Create unbound server socket\n+        ServerSocket serverSocket = new ServerSocket();\n+\n+        \/\/ Bind it to the loopback address\n+        SocketAddress sockAddr = new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0);\n+        serverSocket.bind(sockAddr);\n+\n+        \/\/ Construct the provider URL for LDAPTestUtils\n+        String providerURL = URIBuilder.newBuilder()\n+                .scheme(\"ldap\")\n+                .loopback()\n+                .port(serverSocket.getLocalPort())\n+                .buildUnchecked().toString();\n+\n+        Hashtable<Object, Object> env;\n+\n+        \/\/ Initialize test environment variables\n+        env = LDAPTestUtils.initEnv(serverSocket, providerURL,\n+                RemoteLocationAttributeTest.class.getName(), args, false);\n+\n+        DirContext ctx = null;\n+        try {\n+            System.err.println(env);\n+            \/\/ connect to server\n+            ctx = new InitialDirContext(env);\n+            Object lookupResult = ctx.lookup(\"Test\");\n+            System.err.println(\"Lookup result:\" + lookupResult);\n+            \/\/ Test doesn't provide RMI registry running at 127.0.0.1:1097, but if\n+            \/\/ there is one running on test host successful result is valid for\n+            \/\/ cases when reconstruction allowed.\n+            if (!RECONSTRUCTION_ALLOWED) {\n+                throw new AssertionError(\"Unexpected successful lookup\");\n+            }\n+        } catch (ServiceUnavailableException | CommunicationException connectionException) {\n+            \/\/ The remote location was properly reconstructed but connection to\n+            \/\/ RMI endpoint failed:\n+            \/\/    ServiceUnavailableException - no open socket on 127.0.0.1:1097\n+            \/\/    CommunicationException - 127.0.0.1:1097 is open, but it is not RMI registry\n+            System.err.println(\"Got one of connection exceptions:\" + connectionException);\n+            if (!RECONSTRUCTION_ALLOWED) {\n+                throw new AssertionError(\"Reconstruction not blocked, as expected\");\n+            }\n+        } catch (NamingException ne) {\n+            String message = ne.getMessage();\n+            System.err.printf(\"Got NamingException with message: '%s'%n\", message);\n+            if (RECONSTRUCTION_ALLOWED && EXPECTED_NAMING_EXCEPTION_MESSAGE.equals(message)) {\n+                throw new AssertionError(\"Reconstruction unexpectedly blocked\");\n+            }\n+            if (!RECONSTRUCTION_ALLOWED && !EXPECTED_NAMING_EXCEPTION_MESSAGE.equals(message)) {\n+                throw new AssertionError(\"Reconstruction not blocked\");\n+            }\n+        } finally {\n+            LDAPTestUtils.cleanup(ctx);\n+        }\n+    }\n+\n+    \/\/ Reconstruction of RMI remote objects is allowed if 'com.sun.jndi.ldap.object.trustSerialData'\n+    \/\/ is set to \"true\". If the system property is not specified it implies default \"false\" value\n+    private static final boolean RECONSTRUCTION_ALLOWED =\n+            Boolean.getBoolean(\"com.sun.jndi.ldap.object.trustSerialData\");\n+\n+    \/\/ NamingException message when reconstruction is not allowed\n+    private static final String EXPECTED_NAMING_EXCEPTION_MESSAGE = \"Object deserialization is not allowed\";\n+}\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/objects\/RemoteLocationAttributeTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# Capture file for RemoteLocationAttributeTest.java\n+#\n+# NOTE: This hexadecimal dump of LDAP protocol messages was generated by\n+#       running the RemoteLocationAttributeTest application program against\n+#       a real LDAP server and setting the JNDI\/LDAP environment property:\n+#       com.sun.jndi.ldap.trace.ber to activate LDAP message tracing.\n+#\n+################################################################################\n+\n+# LDAP BindRequest\n+0000: 30 0C 02 01 01 60 07 02   01 03 04 00 80 00        0....`........\n+\n+# LDAP BindResponse\n+0000: 30 0C 02 01 01 61 07 0A   01 00 04 00 04 00        0....a........\n+\n+# LDAP SearchRequest\n+0000: 30 46 02 01 02 63 24 04   04 54 65 73 74 0A 01 00  0F...c$..Test...\n+0010: 0A 01 03 02 01 00 02 01   00 01 01 00 87 0B 6F 62  ..............ob\n+0020: 6A 65 63 74 43 6C 61 73   73 30 00 A0 1B 30 19 04  jectClass0...0..\n+0030: 17 32 2E 31 36 2E 38 34   30 2E 31 2E 31 31 33 37  .2.16.840.1.1137\n+0040: 33 30 2E 33 2E 34 2E 32                            30.3.4.2\n+\n+# LDAP SearchResultEntry\n+0000: 30 5E 02 01 02 64 59 04   04 54 65 73 74 30 51 30  0^...dY..Test0Q0\n+0010: 16 04 0D 6A 61 76 61 43   6C 61 73 73 4E 61 6D 65  ...javaClassName\n+0020: 31 05 04 03 66 6F 6F 30   37 04 12 6A 61 76 61 52  1...foo07..javaR\n+0030: 65 6D 6F 74 65 4C 6F 63   61 74 69 6F 6E 31 21 04  emoteLocation1!.\n+0040: 1F 72 6D 69 3A 2F 2F 31   32 37 2E 30 2E 30 2E 31  .rmi:\/\/127.0.0.1\n+0050: 3A 31 30 39 37 2F 54 65   73 74 52 65 6D 6F 74 65  :1097\/TestRemote\n+\n+# LDAP SearchResultDone\n+0000: 30 0C 02 01 02 65 07 0A   01 00 04 00 04 00        0....e........\n+\n+# LDAP UnbindRequest\n+0000: 30 22 02 01 03 42 00 A0   1B 30 19 04 17 32 2E 31  0\"...B...0...2.1\n+0010: 36 2E 38 34 30 2E 31 2E   31 31 33 37 33 30 2E 33  6.840.1.113730.3\n+0020: 2E 34 2E 32                                        .4.2\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/objects\/RemoteLocationAttributeTest.ldap","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.ArrayList;\n@@ -95,4 +96,8 @@\n-        runTest(\"java.desktop\", \"test.StoreObject\");\n-        runTest(\"person\", \"test.StorePerson\");\n-        runTest(\"fruit\", \"test.StoreFruit\");\n-        runTest(\"hello\", \"test.StoreRemote\");\n+        runTest(\"java.desktop\", \"test.StoreObject\",\n+                \"-Dcom.sun.jndi.ldap.object.trustSerialData=true\");\n+        runTest(\"person\", \"test.StorePerson\",\n+                \"-Dcom.sun.jndi.ldap.object.trustSerialData=true\");\n+        runTest(\"fruit\", \"test.StoreFruit\",\n+                \"-Dcom.sun.jndi.ldap.object.trustSerialData=true\");\n+        runTest(\"hello\", \"test.StoreRemote\",\n+                \"-Dcom.sun.jndi.ldap.object.trustSerialData=true\");\n@@ -120,1 +125,11 @@\n-    private static void runTest(String desc, String clsName) throws Throwable {\n+    private static void runTest(String desc, String clsName, String... additionalVmOpts) throws Throwable {\n+        List<String> opts = new ArrayList<>();\n+        opts.add(\"-Dtest.src=\" + TEST_SRC);\n+        for (String opt : additionalVmOpts) {\n+            opts.add(opt);\n+        }\n+        opts.add(\"-p\");\n+        opts.add(\"mods\");\n+        opts.add(\"-m\");\n+        opts.add(\"test\/\" + clsName);\n+        opts.add(\"ldap:\/\/\" + HOST_NAME + \"\/dc=ie,dc=oracle,dc=com\");\n@@ -122,2 +137,1 @@\n-        runJava(\"-Dtest.src=\" + TEST_SRC, \"-p\", \"mods\", \"-m\", \"test\/\" + clsName,\n-                \"ldap:\/\/\" + HOST_NAME + \"\/dc=ie,dc=oracle,dc=com\");\n+        runJava(opts.toArray(String[]::new));\n","filename":"test\/jdk\/javax\/naming\/module\/RunBasic.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import javax.naming.directory.*;\n@@ -71,1 +70,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -137,0 +136,1 @@\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ConnectWithAuthzId.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -115,0 +115,1 @@\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ConnectWithFoo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -115,0 +115,1 @@\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ReadByUrl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -119,1 +119,1 @@\n-                return;\n+                throw e;\n@@ -129,1 +129,1 @@\n-                return;\n+                throw e;\n@@ -144,1 +144,1 @@\n-                return;\n+                throw e;\n@@ -155,1 +155,1 @@\n-                return;\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreFruit.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -117,1 +117,1 @@\n-                return;\n+                throw e;\n@@ -127,1 +127,1 @@\n-                return;\n+                throw e;\n@@ -142,1 +142,1 @@\n-                return;\n+                throw e;\n@@ -153,1 +153,1 @@\n-                return;\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreObject.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -127,1 +127,1 @@\n-                return;\n+                throw e;\n@@ -142,1 +142,1 @@\n-                return;\n+                throw e;\n@@ -164,1 +164,1 @@\n-                return;\n+                throw e;\n@@ -182,1 +182,1 @@\n-                return;\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StorePerson.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-\n@@ -69,1 +68,1 @@\n-            return;\n+            throw new IllegalArgumentException();\n@@ -123,1 +122,1 @@\n-                return;\n+                throw e;\n@@ -144,1 +143,1 @@\n-                return;\n+                throw e;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreRemote.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}