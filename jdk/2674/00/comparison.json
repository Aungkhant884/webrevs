{"files":[{"patch":"@@ -0,0 +1,325 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.shenandoah;\n+\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import sun.hotspot.WhiteBox;\n+\n+public class TestReferenceRefersToShenandoah {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private static final class TestObject {\n+        public final int value;\n+\n+        public TestObject(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    private static volatile TestObject testObjectNone = null;\n+    private static volatile TestObject testObject1 = null;\n+    private static volatile TestObject testObject2 = null;\n+    private static volatile TestObject testObject3 = null;\n+    private static volatile TestObject testObject4 = null;\n+\n+    private static ReferenceQueue<TestObject> queue = null;\n+\n+    private static PhantomReference<TestObject> testPhantom1 = null;\n+\n+    private static WeakReference<TestObject> testWeak2 = null;\n+    private static WeakReference<TestObject> testWeak3 = null;\n+    private static WeakReference<TestObject> testWeak4 = null;\n+\n+    private static void setup() {\n+        testObjectNone = new TestObject(0);\n+        testObject1 = new TestObject(1);\n+        testObject2 = new TestObject(2);\n+        testObject3 = new TestObject(3);\n+        testObject4 = new TestObject(4);\n+\n+        queue = new ReferenceQueue<TestObject>();\n+\n+        testPhantom1 = new PhantomReference<TestObject>(testObject1, queue);\n+\n+        testWeak2 = new WeakReference<TestObject>(testObject2, queue);\n+        testWeak3 = new WeakReference<TestObject>(testObject3, queue);\n+        testWeak4 = new WeakReference<TestObject>(testObject4, queue);\n+    }\n+\n+    private static void gcUntilOld(Object o) throws Exception {\n+        if (!WB.isObjectInOldGen(o)) {\n+            WB.fullGC();\n+            if (!WB.isObjectInOldGen(o)) {\n+                fail(\"object not promoted by full gc\");\n+            }\n+        }\n+    }\n+\n+    private static void gcUntilOld() throws Exception {\n+        gcUntilOld(testObjectNone);\n+        gcUntilOld(testObject1);\n+        gcUntilOld(testObject2);\n+        gcUntilOld(testObject3);\n+        gcUntilOld(testObject4);\n+\n+        gcUntilOld(testPhantom1);\n+\n+        gcUntilOld(testWeak2);\n+        gcUntilOld(testWeak3);\n+        gcUntilOld(testWeak4);\n+    }\n+\n+    private static void progress(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    private static void fail(String msg) throws Exception {\n+        throw new RuntimeException(msg);\n+    }\n+\n+    private static void expectCleared(Reference<TestObject> ref,\n+                                      String which) throws Exception {\n+        expectNotValue(ref, testObjectNone, which);\n+        if (!ref.refersTo(null)) {\n+            fail(\"expected \" + which + \" to be cleared\");\n+        }\n+    }\n+\n+    private static void expectNotCleared(Reference<TestObject> ref,\n+                                         String which) throws Exception {\n+        expectNotValue(ref, testObjectNone, which);\n+        if (ref.refersTo(null)) {\n+            fail(\"expected \" + which + \" to not be cleared\");\n+        }\n+    }\n+\n+    private static void expectValue(Reference<TestObject> ref,\n+                                    TestObject value,\n+                                    String which) throws Exception {\n+        expectNotValue(ref, testObjectNone, which);\n+        expectNotCleared(ref, which);\n+        if (!ref.refersTo(value)) {\n+            fail(which + \" doesn't refer to expected value\");\n+        }\n+    }\n+\n+    private static void expectNotValue(Reference<TestObject> ref,\n+                                       TestObject value,\n+                                       String which) throws Exception {\n+        if (ref.refersTo(value)) {\n+            fail(which + \" refers to unexpected value\");\n+        }\n+    }\n+\n+    private static void checkInitialStates() throws Exception {\n+        expectValue(testPhantom1, testObject1, \"testPhantom1\");\n+        expectValue(testWeak2, testObject2, \"testWeak2\");\n+        expectValue(testWeak3, testObject3, \"testWeak3\");\n+        expectValue(testWeak4, testObject4, \"testWeak4\");\n+    }\n+\n+    private static void discardStrongReferences() {\n+        \/\/ testObjectNone not dropped\n+        testObject1 = null;\n+        testObject2 = null;\n+        \/\/ testObject3 not dropped\n+        testObject4 = null;\n+    }\n+\n+    private static boolean isShenandoahIUMode() {\n+        return \"iu\".equals(WB.getStringVMFlag(\"ShenandoahGCMode\"));\n+    }\n+\n+    private static void testConcurrentCollection() throws Exception {\n+        progress(\"setup concurrent collection test\");\n+        setup();\n+        progress(\"gcUntilOld\");\n+        gcUntilOld();\n+\n+        progress(\"acquire control of concurrent cycles\");\n+        WB.concurrentGCAcquireControl();\n+        try {\n+            progress(\"check initial states\");\n+            checkInitialStates();\n+\n+            progress(\"discard strong references\");\n+            discardStrongReferences();\n+\n+            progress(\"run GC to before marking completed\");\n+            WB.concurrentGCRunTo(WB.BEFORE_MARKING_COMPLETED);\n+\n+            progress(\"fetch test objects, possibly keeping some alive\");\n+            expectNotCleared(testPhantom1, \"testPhantom1\");\n+            expectNotCleared(testWeak2, \"testWeak2\");\n+            expectValue(testWeak3, testObject3, \"testWeak3\");\n+\n+            \/\/ For some collectors, calling get() will keep testObject4 alive.\n+            if (testWeak4.get() == null) {\n+                fail(\"testWeak4 unexpectedly == null\");\n+            }\n+\n+            progress(\"finish collection\");\n+            WB.concurrentGCRunToIdle();\n+\n+            progress(\"verify expected clears\");\n+            expectCleared(testPhantom1, \"testPhantom1\");\n+            expectCleared(testWeak2, \"testWeak2\");\n+            expectValue(testWeak3, testObject3, \"testWeak3\");\n+            \/\/ This is true for all currently supported concurrent collectors,\n+            \/\/ except Shenandoah+IU, which allows clearing refs even when\n+            \/\/ accessed during concurrent marking.\n+            if (isShenandoahIUMode()) {\n+              expectCleared(testWeak4, \"testWeak4\");\n+            } else {\n+              expectNotCleared(testWeak4, \"testWeak4\");\n+            }\n+\n+            progress(\"verify get returns expected values\");\n+            if (testWeak2.get() != null) {\n+                fail(\"testWeak2.get() != null\");\n+            }\n+\n+            TestObject obj3 = testWeak3.get();\n+            if (obj3 == null) {\n+                fail(\"testWeak3.get() returned null\");\n+            } else if (obj3.value != 3) {\n+                fail(\"testWeak3.get().value is \" + obj3.value);\n+            }\n+\n+            TestObject obj4 = testWeak4.get();\n+            if (!isShenandoahIUMode()) {\n+                if (obj4 == null) {\n+                    fail(\"testWeak4.get() returned null\");\n+                } else if (obj4.value != 4) {\n+                    fail(\"testWeak4.get().value is \" + obj4.value);\n+                }\n+            }\n+\n+            progress(\"verify queue entries\");\n+            long timeout = 60000; \/\/ 1 minute of milliseconds.\n+            while (true) {\n+                Reference<? extends TestObject> ref = queue.remove(timeout);\n+                if (ref == null) {\n+                    break;\n+                } else if (ref == testPhantom1) {\n+                    testPhantom1 = null;\n+                } else if (ref == testWeak2) {\n+                    testWeak2 = null;\n+                } else if (ref == testWeak3) {\n+                    testWeak3 = null;\n+                } else if (ref == testWeak4) {\n+                    testWeak4 = null;\n+                } else {\n+                    fail(\"unexpected reference in queue\");\n+                }\n+            }\n+            if (testPhantom1 != null) {\n+                fail(\"testPhantom1 not notified\");\n+            } else if (testWeak2 != null) {\n+                fail(\"testWeak2 not notified\");\n+            } else if (testWeak3 == null) {\n+                fail(\"testWeak3 notified\");\n+            } else if (testWeak4 == null) {\n+                if (obj4 != null) {\n+                    fail(\"testWeak4 notified\");\n+                }\n+            }\n+\n+        } finally {\n+            progress(\"release control of concurrent cycles\");\n+            WB.concurrentGCReleaseControl();\n+        }\n+        progress(\"finished concurrent collection test\");\n+    }\n+\n+    private static void testSimpleCollection() throws Exception {\n+        progress(\"setup simple collection test\");\n+        setup();\n+        progress(\"gcUntilOld\");\n+        gcUntilOld();\n+\n+        progress(\"check initial states\");\n+        checkInitialStates();\n+\n+        progress(\"discard strong references\");\n+        TestObject tw4 = testWeak4.get(); \/\/ Keep testObject4 alive.\n+        discardStrongReferences();\n+\n+        progress(\"collect garbage\");\n+        WB.fullGC();\n+\n+        progress(\"verify expected clears\");\n+        expectCleared(testPhantom1, \"testPhantom1\");\n+        expectCleared(testWeak2, \"testWeak2\");\n+        expectValue(testWeak3, testObject3, \"testWeak3\");\n+        expectNotCleared(testWeak4, \"testWeak4\");\n+\n+        progress(\"verify get returns expected values\");\n+        if (testWeak2.get() != null) {\n+            fail(\"testWeak2.get() != null\");\n+        } else if (testWeak3.get() != testObject3) {\n+            fail(\"testWeak3.get() is not expected value\");\n+        } else if (testWeak4.get() != tw4) {\n+            fail(\"testWeak4.get() is not expected value\");\n+        }\n+\n+        progress(\"finished simple collection test\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (WB.supportsConcurrentGCBreakpoints()) {\n+            testConcurrentCollection();\n+        }\n+        testSimpleCollection();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":325,"deletions":0,"binary":false,"changes":325,"status":"added"}]}