{"files":[{"patch":"@@ -162,0 +162,18 @@\n+  \n+  if (FLAG_IS_DEFAULT(G1RemSetScanChunksPerRegion)) {\n+    \/\/ Limit the expected input values to current known possible values of the\n+    \/\/ (log) region size. Adjust as necessary after testing if changing the permissible\n+    \/\/ values for region size.\n+    assert(HeapRegion::LogOfHRGrainBytes >= 20 && HeapRegion::LogOfHRGrainBytes <= 29,\n+           \"expected value in [20,29], but got %u\", HeapRegion::LogOfHRGrainBytes);\n+\n+    \/\/ Return \"optimal\" number of chunks per region we want to use for claiming areas\n+    \/\/ within a region to claim. Dependent on the region size as proxy for the heap\n+    \/\/ size, we limit the total number of chunks to limit memory usage and maintenance\n+    \/\/ effort of that table vs. granularity of distributing scanning work.\n+    \/\/ Testing showed that 8 for 1M\/2M region, 16 for 4M\/8M regions, 32 for 16\/32M regions,\n+    \/\/ and so on seems to be such a good trade-off.\n+    FLAG_SET_ERGO(G1RemSetScanChunksPerRegion, 1u << (HeapRegion::LogOfHRGrainBytes \/ 2 - 7));\n+  } else if (G1RemSetScanChunksPerRegion >= HeapRegion::CardsPerRegion) {\n+    vm_exit_during_initialization(\"G1RemSetScanChunksPerRegion must be less than cards per region.\");\n+  }\n@@ -249,18 +267,0 @@\n-\n-  if (FLAG_IS_DEFAULT(G1RemSetScanChunksPerRegion)) {\n-    \/\/ Limit the expected input values to current known possible values of the\n-    \/\/ (log) region size. Adjust as necessary after testing if changing the permissible\n-    \/\/ values for region size.\n-    assert(HeapRegion::LogOfHRGrainBytes >= 20 && HeapRegion::LogOfHRGrainBytes <= 29,\n-           \"expected value in [20,29], but got %u\", HeapRegion::LogOfHRGrainBytes);\n-\n-    \/\/ Return \"optimal\" number of chunks per region we want to use for claiming areas\n-    \/\/ within a region to claim. Dependent on the region size as proxy for the heap\n-    \/\/ size, we limit the total number of chunks to limit memory usage and maintenance\n-    \/\/ effort of that table vs. granularity of distributing scanning work.\n-    \/\/ Testing showed that 8 for 1M\/2M region, 16 for 4M\/8M regions, 32 for 16\/32M regions,\n-    \/\/ and so on seems to be such a good trade-off.\n-    FLAG_SET_ERGO(G1RemSetScanChunksPerRegion, 1u << (HeapRegion::LogOfHRGrainBytes \/ 2 - 7));\n-  } else if (G1RemSetScanChunksPerRegion >= HeapRegion::CardsPerRegion) {\n-    vm_exit_during_initialization(\"G1RemSetScanChunksPerRegion must be less than cards per region.\");\n-  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}