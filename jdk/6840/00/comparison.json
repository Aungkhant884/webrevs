{"files":[{"patch":"@@ -249,0 +249,18 @@\n+\n+  if (FLAG_IS_DEFAULT(G1RemSetScanChunksPerRegion)) {\n+    \/\/ Limit the expected input values to current known possible values of the\n+    \/\/ (log) region size. Adjust as necessary after testing if changing the permissible\n+    \/\/ values for region size.\n+    assert(HeapRegion::LogOfHRGrainBytes >= 20 && HeapRegion::LogOfHRGrainBytes <= 29,\n+           \"expected value in [20,29], but got %u\", HeapRegion::LogOfHRGrainBytes);\n+\n+    \/\/ Return \"optimal\" number of chunks per region we want to use for claiming areas\n+    \/\/ within a region to claim. Dependent on the region size as proxy for the heap\n+    \/\/ size, we limit the total number of chunks to limit memory usage and maintenance\n+    \/\/ effort of that table vs. granularity of distributing scanning work.\n+    \/\/ Testing showed that 8 for 1M\/2M region, 16 for 4M\/8M regions, 32 for 16\/32M regions,\n+    \/\/ and so on seems to be such a good trade-off.\n+    FLAG_SET_ERGO(G1RemSetScanChunksPerRegion, 1u << (HeapRegion::LogOfHRGrainBytes \/ 2 - 7));\n+  } else if (G1RemSetScanChunksPerRegion >= HeapRegion::CardsPerRegion) {\n+    vm_exit_during_initialization(\"G1RemSetScanChunksPerRegion must be less than cards per region.\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -105,15 +105,0 @@\n-  \/\/ Return \"optimal\" number of chunks per region we want to use for claiming areas\n-  \/\/ within a region to claim. Dependent on the region size as proxy for the heap\n-  \/\/ size, we limit the total number of chunks to limit memory usage and maintenance\n-  \/\/ effort of that table vs. granularity of distributing scanning work.\n-  \/\/ Testing showed that 8 for 1M\/2M region, 16 for 4M\/8M regions, 32 for 16\/32M regions,\n-  \/\/ and so on seems to be such a good trade-off.\n-  static uint get_chunks_per_region(uint log_region_size) {\n-    \/\/ Limit the expected input values to current known possible values of the\n-    \/\/ (log) region size. Adjust as necessary after testing if changing the permissible\n-    \/\/ values for region size.\n-    assert(log_region_size >= 20 && log_region_size <= 29,\n-           \"expected value in [20,29], but got %u\", log_region_size);\n-    return 1u << (log_region_size \/ 2 - 7);\n-  }\n-\n@@ -286,1 +271,1 @@\n-    _scan_chunks_per_region(get_chunks_per_region(HeapRegion::LogOfHRGrainBytes)),\n+    _scan_chunks_per_region(G1RemSetScanChunksPerRegion),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -254,0 +254,5 @@\n+  product(uint, G1RemSetScanChunksPerRegion, 0,                              \\\n+          \"Number of cards per region to for thread to claim when \"         \\\n+          \"scanning the remembered set. This is configured ergonomically \"  \\\n+          \"by default based on region size.\")                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}