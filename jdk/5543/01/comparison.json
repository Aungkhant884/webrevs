{"files":[{"patch":"@@ -554,1 +554,1 @@\n-                            String msg = \"Provider class \" + cn + \" not in module\";\n+                            String msg = \"Provider class \" + cn + \" not in JAR file \" + fn;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.module.InvalidModuleDescriptorException;\n@@ -437,4 +438,22 @@\n-        JarUtils.createJarFile(dir.resolve(\"m.jar\"), tmpdir);\n-\n-        \/\/ should throw FindException\n-        ModuleFinder.of(dir).findAll();\n+        Path jarfile = dir.resolve(\"m.jar\");\n+        JarUtils.createJarFile(jarfile, tmpdir);\n+\n+        \/\/ catch FindException, inspect its cause's type and details, and rethrow\n+        var expectedMessage = \"Provider class q.P not in JAR file \" + jarfile.getFileName();\n+        try {\n+            ModuleFinder.of(dir).findAll();\n+        } catch (FindException exception) {\n+            if (exception.getCause() instanceof InvalidModuleDescriptorException imde) {\n+                var actualMessage = imde.getMessage();\n+                if (actualMessage.equals(expectedMessage)) {\n+                    throw exception; \/\/ rethrow as expected\n+                }\n+                throw new AssertionError(\n+                    \"\"\"\n+                    Unexpected detail message in InvalidModuleDescriptorException:\n+                      Expected message -> '%s'\n+                        Actual message -> '%s'\n+                    \"\"\".formatted(expectedMessage, actualMessage));\n+            }\n+            throw new AssertionError(\"Unexpected exception cause: \" + exception.getCause());\n+        }\n","filename":"test\/jdk\/java\/lang\/module\/AutomaticModulesTest.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"}]}