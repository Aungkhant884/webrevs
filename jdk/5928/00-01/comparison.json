{"files":[{"patch":"@@ -77,1 +77,1 @@\n-    private final PublicKey trustedPubKey;\n+    private PublicKey trustedPubKey;\n@@ -236,1 +236,2 @@\n-                \/\/ check constraints of trusted public key\n+                \/\/ check constraints of trusted public key (make sure\n+                \/\/ algorithm and size is not restricted)\n@@ -360,2 +361,2 @@\n-        \/\/ specified.\n-        if (prevPubKey == null) {\n+        \/\/ been specified.\n+        if (this.prevPubKey == null) {\n@@ -367,1 +368,0 @@\n-            \/\/ Don't bother to change the trustedPubKey.\n@@ -369,1 +369,1 @@\n-                prevPubKey = anchor.getTrustedCert().getPublicKey();\n+                this.trustedPubKey = anchor.getTrustedCert().getPublicKey();\n@@ -371,1 +371,1 @@\n-                prevPubKey = anchor.getCAPublicKey();\n+                this.trustedPubKey = anchor.getCAPublicKey();\n@@ -373,0 +373,1 @@\n+            this.prevPubKey = this.trustedPubKey;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Map.Entry;\n@@ -44,1 +45,4 @@\n-    private static final Map<String, String> CANONICAL_NAME =\n+    \/\/ A map of standard message digest algorithm names to decomposed names\n+    \/\/ so that a constraint can match for example, \"SHA-1\" and also\n+    \/\/ \"SHA1withRSA\".\n+    private static final Map<String, String> DECOMPOSED_DIGEST_NAMES =\n@@ -102,38 +106,9 @@\n-        \/\/ handle special name: SHA-1 and SHA1\n-        if (elements.contains(\"SHA1\") && !elements.contains(\"SHA-1\")) {\n-            elements.add(\"SHA-1\");\n-        }\n-        if (elements.contains(\"SHA-1\") && !elements.contains(\"SHA1\")) {\n-            elements.add(\"SHA1\");\n-        }\n-\n-        \/\/ handle special name: SHA-224 and SHA224\n-        if (elements.contains(\"SHA224\") && !elements.contains(\"SHA-224\")) {\n-            elements.add(\"SHA-224\");\n-        }\n-        if (elements.contains(\"SHA-224\") && !elements.contains(\"SHA224\")) {\n-            elements.add(\"SHA224\");\n-        }\n-\n-        \/\/ handle special name: SHA-256 and SHA256\n-        if (elements.contains(\"SHA256\") && !elements.contains(\"SHA-256\")) {\n-            elements.add(\"SHA-256\");\n-        }\n-        if (elements.contains(\"SHA-256\") && !elements.contains(\"SHA256\")) {\n-            elements.add(\"SHA256\");\n-        }\n-\n-        \/\/ handle special name: SHA-384 and SHA384\n-        if (elements.contains(\"SHA384\") && !elements.contains(\"SHA-384\")) {\n-            elements.add(\"SHA-384\");\n-        }\n-        if (elements.contains(\"SHA-384\") && !elements.contains(\"SHA384\")) {\n-            elements.add(\"SHA384\");\n-        }\n-\n-        \/\/ handle special name: SHA-512 and SHA512\n-        if (elements.contains(\"SHA512\") && !elements.contains(\"SHA-512\")) {\n-            elements.add(\"SHA-512\");\n-        }\n-        if (elements.contains(\"SHA-512\") && !elements.contains(\"SHA512\")) {\n-            elements.add(\"SHA512\");\n+        for (Map.Entry<String, String> e : DECOMPOSED_DIGEST_NAMES.entrySet()) {\n+            if (elements.contains(e.getValue()) &&\n+                    !elements.contains(e.getKey())) {\n+                elements.add(e.getKey());\n+            }\n+            if (elements.contains(e.getKey()) &&\n+                    !elements.contains(e.getValue())) {\n+                elements.add(e.getValue());\n+            }\n@@ -171,3 +146,4 @@\n-    \/*\n-     * This decomposes a standard name into sub-elements with a consistent\n-     * message digest algorithm name to avoid overly complicated checking.\n+    \/**\n+     * Decomposes a standard algorithm name into sub-elements and uses a\n+     * consistent message digest algorithm name to avoid overly complicated\n+     * checking.\n@@ -175,1 +151,1 @@\n-    public static Set<String> decomposeOneHash(String algorithm) {\n+    static Set<String> decomposeName(String algorithm) {\n@@ -182,5 +158,3 @@\n-        hasLoop(elements, \"SHA-1\", \"SHA1\");\n-        hasLoop(elements, \"SHA-224\", \"SHA224\");\n-        hasLoop(elements, \"SHA-256\", \"SHA256\");\n-        hasLoop(elements, \"SHA-384\", \"SHA384\");\n-        hasLoop(elements, \"SHA-512\", \"SHA512\");\n+        for (Map.Entry<String, String> e : DECOMPOSED_DIGEST_NAMES.entrySet()) {\n+            hasLoop(elements, e.getKey(), e.getValue());\n+        }\n@@ -191,2 +165,7 @@\n-    \/*\n-     * The provided algorithm name will return a consistent naming scheme.\n+    \/**\n+     * Decomposes a standard message digest algorithm name into a consistent\n+     * name for matching purposes.\n+     *\n+     * @param algorithm the name to be decomposed\n+     * @return the decomposed name, or the passed in algorithm name if\n+     *     it is not a digest algorithm or does not need to be decomposed\n@@ -194,2 +173,2 @@\n-    static String canonicalName(String algorithm) {\n-        return CANONICAL_NAME.getOrDefault(algorithm, algorithm);\n+    static String decomposeDigestName(String algorithm) {\n+        return DECOMPOSED_DIGEST_NAMES.getOrDefault(algorithm, algorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AlgorithmDecomposer.java","additions":31,"deletions":52,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-                String algorithm = AlgorithmDecomposer.canonicalName(\n+                String algorithm = AlgorithmDecomposer.decomposeDigestName(\n@@ -495,1 +495,1 @@\n-                algorithms.addAll(AlgorithmDecomposer.decomposeOneHash(algorithm));\n+                algorithms.addAll(AlgorithmDecomposer.decomposeName(algorithm));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}