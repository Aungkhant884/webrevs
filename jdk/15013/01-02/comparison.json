{"files":[{"patch":"@@ -5725,0 +5725,24 @@\n+  CountedLoopNode* CountedLoopNode::pre_loop_head() const {\n+    assert(is_main_loop(), \"Only main loop has pre loop\");\n+    assert(_pre_loop_end != nullptr && _pre_loop_end->loopnode() != nullptr,\n+           \"should find head from pre loop end\");\n+    return _pre_loop_end->loopnode();\n+  }\n+\n+  CountedLoopEndNode* CountedLoopNode::pre_loop_end() {\n+#ifdef ASSERT\n+    assert(is_main_loop(), \"Only main loop has pre loop\");\n+    assert(_pre_loop_end != nullptr, \"should be set when fetched\");\n+    Node* found_pre_end = find_pre_loop_end();\n+    assert(_pre_loop_end == found_pre_end && _pre_loop_end == pre_loop_head()->loopexit(),\n+           \"should find the pre loop end and must be the same result\");\n+#endif\n+    return _pre_loop_end;\n+  }\n+\n+  void CountedLoopNode::set_pre_loop_end(CountedLoopEndNode* pre_loop_end) {\n+    assert(is_main_loop(), \"Only main loop has pre loop\");\n+    assert(pre_loop_end, \"must be valid\");\n+    _pre_loop_end = pre_loop_end;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -235,2 +235,2 @@\n-  \/\/ The eventual count of vectorizable packs in slp\n-  int _slp_vector_pack_count;\n+  \/\/ Cached CountedLoopEndNode of pre loop for main loops\n+  CountedLoopEndNode* _pre_loop_end;\n@@ -242,1 +242,1 @@\n-      _slp_maximum_unroll_factor(0), _slp_vector_pack_count(0) {\n+      _slp_maximum_unroll_factor(0), _pre_loop_end(nullptr) {\n@@ -334,0 +334,3 @@\n+  CountedLoopNode* pre_loop_head() const;\n+  CountedLoopEndNode* pre_loop_end();\n+  void set_pre_loop_end(CountedLoopEndNode* pre_loop_end);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-  _pre_loop_end(nullptr),                                   \/\/ Pre loop CountedLoopEndNode\n@@ -159,1 +158,1 @@\n-    set_pre_loop_end(pre_end);\n+    cl->set_pre_loop_end(pre_end);\n@@ -923,1 +922,1 @@\n-  CountedLoopEndNode* pre_end = pre_loop_end();\n+  CountedLoopEndNode* pre_end = lp()->pre_loop_end();\n@@ -3634,1 +3633,1 @@\n-  CountedLoopEndNode* pre_end = pre_loop_end();\n+  CountedLoopEndNode* pre_end = lp()->pre_loop_end();\n@@ -3641,1 +3640,1 @@\n-  Node* pre_ctrl = pre_loop_head()->in(LoopNode::EntryControl);\n+  Node* pre_ctrl = lp()->pre_loop_head()->in(LoopNode::EntryControl);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -295,1 +295,0 @@\n-  CountedLoopEndNode* _pre_loop_end; \/\/ Current CountedLoopEndNode of pre loop\n@@ -322,19 +321,0 @@\n-  CountedLoopNode* pre_loop_head() const {\n-    assert(_pre_loop_end != nullptr && _pre_loop_end->loopnode() != nullptr, \"should find head from pre loop end\");\n-    return _pre_loop_end->loopnode();\n-  }\n-  void set_pre_loop_end(CountedLoopEndNode* pre_loop_end) {\n-    assert(pre_loop_end, \"must be valid\");\n-    _pre_loop_end = pre_loop_end;\n-  }\n-  CountedLoopEndNode* pre_loop_end() const {\n-#ifdef ASSERT\n-    assert(_lp != nullptr, \"sanity\");\n-    assert(_pre_loop_end != nullptr, \"should be set when fetched\");\n-    Node* found_pre_end = _lp->find_pre_loop_end();\n-    assert(_pre_loop_end == found_pre_end && _pre_loop_end == pre_loop_head()->loopexit(),\n-           \"should find the pre loop end and must be the same result\");\n-#endif\n-    return _pre_loop_end;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -131,1 +131,0 @@\n-  \/\/ TODO: Add more trace output for invariant check after later refactoring\n@@ -141,5 +140,2 @@\n-      CountedLoopEndNode* pre_loop_end = cl->find_pre_loop_end();\n-      if (pre_loop_end != nullptr) {\n-        Node* n_c = phase()->get_ctrl(n);\n-        return phase()->is_dominator(n_c, pre_loop_end->loopnode());\n-      }\n+      Node* n_c = phase()->get_ctrl(n);\n+      return phase()->is_dominator(n_c, cl->pre_loop_head());\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}