{"files":[{"patch":"@@ -138,0 +138,4 @@\n+\/\/ The parameter `sp` should be the actual sp and not the unextended sp because at\n+\/\/ least on PPC64 unextended_sp < sp is possible as interpreted frames are trimmed\n+\/\/ to the actual size of the expression stack before calls. The problem there is\n+\/\/ that even unextended_sp < entry_sp < sp is possible for an interpreted frame.\n@@ -139,0 +143,1 @@\n+  \/\/ entry_sp() returns the unextended_sp which is always greater or equal to the actual sp\n@@ -143,1 +148,1 @@\n-  return is_sp_in_continuation(entry, f.unextended_sp());\n+  return is_sp_in_continuation(entry, f.sp());\n@@ -163,1 +168,1 @@\n-  return f.is_heap_frame() || (get_continuation_entry_for_sp(thread, f.unextended_sp()) != nullptr);\n+  return f.is_heap_frame() || (get_continuation_entry_for_sp(thread, f.sp()) != nullptr);\n@@ -299,2 +304,2 @@\n-  ContinuationEntry* ce = get_continuation_entry_for_sp(thread, callee.unextended_sp());\n-  assert(ce != nullptr, \"callee.unextended_sp(): \" INTPTR_FORMAT, p2i(callee.unextended_sp()));\n+  ContinuationEntry* ce = get_continuation_entry_for_sp(thread, callee.sp());\n+  assert(ce != nullptr, \"callee.sp(): \" INTPTR_FORMAT, p2i(callee.sp()));\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}