{"files":[{"patch":"@@ -385,1 +385,1 @@\n-    if (t != Type::TOP && t_in != Type::TOP && t != t_in) {\n+    if (t != Type::TOP && t_in != Type::TOP) {\n@@ -387,5 +387,10 @@\n-      const TypeInt* ti = TypeInt::make(checked_cast<jint>(tl->_lo), checked_cast<jint>(tl->_hi), tl->_widen);\n-      Node* castii = phase->transform(new CastIINode(in(0), in1->in(1), ti));\n-      Node* convi2l = in1->clone();\n-      convi2l->set_req(1, castii);\n-      return convi2l;\n+      const TypeLong* t_in_l = t_in->is_long();\n+      assert(tl->_lo >= t_in_l->_lo && tl->_hi <= t_in_l->_hi, \"CastLL type should be narrower than or equal to the type of its input\");\n+      assert((tl != t_in_l) == (tl->_lo > t_in_l->_lo || tl->_hi < t_in_l->_hi), \"if type differs then this nodes's type must be narrower\");\n+      if (tl != t_in_l) {\n+        const TypeInt* ti = TypeInt::make(checked_cast<jint>(tl->_lo), checked_cast<jint>(tl->_hi), tl->_widen);\n+        Node* castii = phase->transform(new CastIINode(in(0), in1->in(1), ti));\n+        Node* convi2l = in1->clone();\n+        convi2l->set_req(1, castii);\n+        return convi2l;\n+      }\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1084,1 +1084,1 @@\n-\/\/ Check for having no control input; not pinned.  Allow\n+  \/\/ Check for having no control input; not pinned.  Allow\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}