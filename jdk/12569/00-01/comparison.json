{"files":[{"patch":"@@ -126,0 +126,19 @@\n+    \/\/ validate the key algorithm\/encoding and then returns the key bytes\n+    \/\/ which callers should erase after use\n+    private static byte[] checkKey(Key key, int fixedKeySize)\n+            throws InvalidKeyException {\n+\n+        byte[] keyBytes = key.getEncoded();\n+        if (keyBytes == null) {\n+            throw new InvalidKeyException(\"Null key\");\n+        }\n+        int keyLen = keyBytes.length;\n+        if (!key.getAlgorithm().equalsIgnoreCase(\"AES\") ||\n+            !AESCrypt.isKeySizeValid(keyLen) ||\n+            (fixedKeySize != -1 && fixedKeySize != keyLen)) {\n+                throw new InvalidKeyException(\"Invalid key length: \" +\n+                        keyLen + \" bytes\");\n+        }\n+        return keyBytes;\n+    }\n+\n@@ -295,9 +314,1 @@\n-        byte[] keyBytes = key.getEncoded();\n-        if (keyBytes == null) {\n-            throw new InvalidKeyException(\"Null key\");\n-        }\n-\n-        if (fixedKeySize != -1 && fixedKeySize != keyBytes.length) {\n-            throw new InvalidKeyException(\"Invalid key length: \" +\n-                    keyBytes.length + \" bytes, should be \" + fixedKeySize);\n-        }\n+        byte[] keyBytes = checkKey(key, fixedKeySize);\n@@ -665,4 +676,4 @@\n-        byte[] encoded = key.getEncoded();\n-        if (encoded == null)  {\n-            throw new InvalidKeyException(\"Cannot decide key length\");\n-        }\n+        byte[] keyBytes = checkKey(key, fixedKeySize);\n+        \/\/ only need length; erase immediately\n+        Arrays.fill(keyBytes, (byte) 0);\n+        return Math.multiplyExact(keyBytes.length, 8);\n@@ -670,10 +681,0 @@\n-        \/\/ only need length\n-        Arrays.fill(encoded, (byte) 0);\n-        int keyLen = encoded.length;\n-        if (!key.getAlgorithm().equalsIgnoreCase(\"AES\") ||\n-            !AESCrypt.isKeySizeValid(keyLen) ||\n-            (fixedKeySize != -1 && fixedKeySize != keyLen)) {\n-            throw new InvalidKeyException(\"Invalid key length: \" +\n-                    keyLen + \" bytes\");\n-        }\n-        return Math.multiplyExact(keyLen, 8);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyWrapCipher.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"}]}