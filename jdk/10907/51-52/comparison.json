{"files":[{"patch":"@@ -175,1 +175,2 @@\n-    return LockingMode == 1 && ((value() & lock_mask_in_place) == locked_value);\n+    assert(LockingMode == 1, \"should only be called with traditional stack locking\");\n+    return (value() & lock_mask_in_place) == locked_value;\n@@ -183,1 +184,2 @@\n-    return LockingMode == 2 && ((value() & lock_mask_in_place) == locked_value);\n+    assert(LockingMode == 2, \"should only be called with new lightweight locking\");\n+    return (value() & lock_mask_in_place) == locked_value;\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1607,1 +1607,1 @@\n-          if (mark.has_locker() && fr.sp() > (intptr_t*)mark.locker()) {\n+          if (LockingMode == 1 && mark.has_locker() && fr.sp() > (intptr_t*)mark.locker()) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1388,1 +1388,1 @@\n-  if (!UseHeavyMonitors && LockingMode == 2) {\n+  if (LockingMode == 2) {\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,7 +61,0 @@\n-#ifdef ASSERT\n-static bool is_stack_watermark_processing(JavaThread* thread) {\n-  StackWatermark* watermark = StackWatermarkSet::get(thread, StackWatermarkKind::gc);\n-  return watermark->processing_started() && !watermark->processing_completed();\n-}\n-#endif\n-\n@@ -70,7 +63,0 @@\n-  JavaThread* thread = get_thread();\n-  assert(is_self() || SafepointSynchronize::is_at_safepoint() || thread->is_handshake_safe_for(Thread::current()) || thread->is_suspended() || thread->is_obj_deopt_suspend() || is_stack_watermark_processing(thread),\n-         \"access only thread-local, or when target thread safely holds still\");\n-  verify_no_thread(msg);\n-}\n-\n-void LockStack::verify_no_thread(const char* msg) const {\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-  void verify_no_thread(const char* msg) const PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-  if (!thread->is_Java_thread()) {\n-    return false;\n-  }\n@@ -106,1 +103,1 @@\n-  if (!is_self() && !SafepointSynchronize::is_at_safepoint()) {\n+  if (!SafepointSynchronize::is_at_safepoint() && !is_self()) {\n@@ -124,1 +121,1 @@\n-  verify_no_thread(\"pre-oops-do\");\n+  verify(\"pre-oops-do\");\n@@ -129,1 +126,1 @@\n-  verify_no_thread(\"post-oops-do\");\n+  verify(\"post-oops-do\");\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -540,1 +540,1 @@\n-    guarantee(!obj->mark().has_locker() && !obj->mark().is_fast_locked(), \"must not be stack-locked or fast-locked\");\n+    guarantee((obj->mark().value() & markWord::lock_mask_in_place) != markWord::locked_value, \"must not be lightweight\/stack-locked\");\n@@ -620,1 +620,1 @@\n-    guarantee(!object->mark().has_locker(), \"must not be stack-locked\");\n+    guarantee((object->mark().value() & markWord::lock_mask_in_place) != markWord::locked_value, \"must not be lightweight\/stack-locked\");\n@@ -899,1 +899,1 @@\n-  return thread->is_Java_thread() ? JavaThread::cast(thread)->lock_stack().contains(obj) : false;\n+  return JavaThread::cast(thread)->lock_stack().contains(obj);\n@@ -911,1 +911,1 @@\n-      guarantee(!mark.has_locker(), \"must not be stack-locked\");\n+      guarantee((obj->mark().value() & markWord::lock_mask_in_place) != markWord::locked_value, \"must not be lightweight\/stack-locked\");\n@@ -956,1 +956,1 @@\n-    } else if (mark.is_fast_locked() && is_lock_owned(current, obj)) {\n+    } else if (LockingMode == 2 && mark.is_fast_locked() && is_lock_owned(current, obj)) {\n@@ -963,1 +963,1 @@\n-    } else if (mark.has_locker() && current->is_lock_owned((address)mark.locker())) {\n+    } else if (LockingMode == 1 && mark.has_locker() && current->is_lock_owned((address)mark.locker())) {\n@@ -1028,1 +1028,1 @@\n-  if (mark.has_locker()) {\n+  if (LockingMode == 1 && mark.has_locker()) {\n@@ -1033,1 +1033,1 @@\n-  if (mark.is_fast_locked()) {\n+  if (LockingMode == 2 && mark.is_fast_locked()) {\n@@ -1054,1 +1054,1 @@\n-  if (mark.has_locker()) {\n+  if (LockingMode == 1 && mark.has_locker()) {\n@@ -1060,1 +1060,1 @@\n-  if (mark.is_fast_locked()) {\n+  if (LockingMode == 2 && mark.is_fast_locked()) {\n@@ -1282,1 +1282,0 @@\n-        assert(current->is_Java_thread(), \"must be Java thread\");\n@@ -1313,2 +1312,1 @@\n-    if (mark.is_fast_locked()) {\n-      assert(LockingMode == 2, \"can only happen with new lightweight locking\");\n+    if (LockingMode == 2 && mark.is_fast_locked()) {\n@@ -1330,1 +1328,0 @@\n-          assert(current->is_Java_thread(), \"must be: checked in is_lock_owned()\");\n@@ -1367,1 +1364,1 @@\n-    if (mark.has_locker()) {\n+    if (LockingMode == 1 && mark.has_locker()) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1425,1 +1425,0 @@\n-  assert(SafepointSynchronize::is_at_safepoint(), \"not safe outside of safepoint\");\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1129,1 +1129,1 @@\n-  if (LockingMode != 2 && maxDepth == 0) {\n+  if (maxDepth == 0) {\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+          \/\/ Owned anonymously means that we are not the owner of\n+          \/\/ the monitor and must be waiting for the owner to\n+          \/\/ exit it.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaVFrame.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}