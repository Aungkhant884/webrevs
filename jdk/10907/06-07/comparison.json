{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/objectMonitor.hpp\"\n@@ -86,0 +87,14 @@\n+#ifdef _LP64\n+int C2FixAnonOMOwnerStub::max_size() const {\n+  return 17;\n+}\n+\n+void C2FixAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+  __ bind(entry());\n+  Register mon = monitor();\n+  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), r15_thread);\n+  __ subptr(Address(r15_thread, JavaThread::lock_stack_current_offset()), oopSize);\n+  __ jmp(continuation());\n+}\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -816,0 +816,6 @@\n+#ifdef _LP64\n+      C2FixAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2FixAnonOMOwnerStub(tmpReg);\n+      Compile::current()->output()->add_stub(stub);\n+      jcc(Assembler::notEqual, stub->entry());\n+      bind(stub->continuation());\n+#else\n@@ -817,0 +823,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,0 +97,12 @@\n+#ifdef _LP64\n+class C2FixAnonOMOwnerStub : public C2CodeStub {\n+private:\n+  Register _monitor;\n+public:\n+  C2FixAnonOMOwnerStub(Register monitor) : C2CodeStub(), _monitor(monitor) {}\n+  Register monitor() { return _monitor; }\n+  int max_size() const;\n+  void emit(C2_MacroAssembler& masm);\n+};\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}