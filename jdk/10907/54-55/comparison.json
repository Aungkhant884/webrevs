{"files":[{"patch":"@@ -113,0 +113,1 @@\n+\n@@ -137,0 +138,2 @@\n+    andi(t0, hdr, markWord::monitor_value);\n+    bnez(t0, slow_case, \/* is_far *\/ true);\n@@ -153,0 +156,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  return 20;\n+  return 20 DEBUG_ONLY(+8);\n@@ -95,0 +95,4 @@\n+#ifdef ASSERT\n+  __ add(t0, xthread, t);\n+  __ sd(zr, Address(t0, 0));\n+#endif\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -912,6 +912,11 @@\n-      Register tmp = header_reg;\n-      lwu(tmp, Address(xthread, JavaThread::lock_stack_top_offset()));\n-      subw(tmp, tmp, oopSize);\n-      add(tmp, xthread, tmp);\n-      ld(tmp, Address(tmp, 0));\n-      bne(tmp, obj_reg, slow_case);\n+      Register tmp1 = t0;\n+      Register tmp2 = header_reg;\n+      \/\/ First check for lock-stack underflow.\n+      lwu(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n+      mv(tmp2, (unsigned)LockStack::start_offset());\n+      ble(tmp1, tmp2, slow_case);\n+      \/\/ Then check if the top of the lock-stack matches the unlocked object.\n+      subw(tmp1, tmp1, oopSize);\n+      add(tmp1, xthread, tmp1);\n+      ld(tmp1, Address(tmp1, 0));\n+      bne(tmp1, obj_reg, slow_case);\n@@ -920,0 +925,2 @@\n+      andi(t0, header_reg, markWord::monitor_value);\n+      bnez(t0, slow_case);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+#define STOP(str) stop(str);\n@@ -4486,3 +4487,4 @@\n-\/\/ Attempt to fast-lock an object. Fall-through on success, branch to slow label\n-\/\/ on failure.\n-\/\/ Registers:\n+\/\/ Implements fast-locking.\n+\/\/ Branches to slow upon failure to lock the object.\n+\/\/ Falls through upon success.\n+\/\/\n@@ -4519,0 +4521,7 @@\n+\/\/ Implements fast-unlocking.\n+\/\/ Branches to slow upon failure.\n+\/\/ Falls through upon success.\n+\/\/\n+\/\/ - obj: the object to be unlocked\n+\/\/ - hdr: the (pre-loaded) header of the object\n+\/\/ - tmp1, tmp2: temporary registers\n@@ -4523,3 +4532,33 @@\n-  \/\/ Load the expected old header (lock-bits cleared to indicate 'locked') into hdr\n-  mv(tmp1, ~markWord::lock_mask_in_place);\n-  andr(hdr, hdr, tmp1);\n+#ifdef ASSERT\n+  {\n+    \/\/ The following checks rely on the fact that LockStack is only ever modified by\n+    \/\/ its owning thread, even if the lock got inflated concurrently; removal of LockStack\n+    \/\/ entries after inflation will happen delayed in that case.\n+\n+    \/\/ Check for lock-stack underflow.\n+    Label stack_ok;\n+    lwu(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n+    mv(tmp2, (unsigned)LockStack::start_offset());\n+    bgt(tmp1, tmp2, stack_ok);\n+    STOP(\"Lock-stack underflow\");\n+    bind(stack_ok);\n+  }\n+  {\n+    \/\/ Check if the top of the lock-stack matches the unlocked object.\n+    Label tos_ok;\n+    subw(tmp1, tmp1, oopSize);\n+    add(tmp1, xthread, tmp1);\n+    ld(tmp1, Address(tmp1, 0));\n+    beq(tmp1, obj, tos_ok);\n+    STOP(\"Top of lock-stack does not match the unlocked object\");\n+    bind(tos_ok);\n+  }\n+  {\n+    \/\/ Check that hdr is fast-locked.\n+   Label hdr_ok;\n+    andi(tmp1, hdr, markWord::lock_mask_in_place);\n+    beqz(tmp1, hdr_ok);\n+    STOP(\"Header is not fast-locked\");\n+    bind(hdr_ok);\n+  }\n+#endif\n@@ -4538,0 +4577,4 @@\n+#ifdef ASSERT\n+  add(tmp2, xthread, tmp1);\n+  sd(zr, Address(tmp2, 0));\n+#endif\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1816,0 +1816,2 @@\n+        __ andi(t0, old_hdr, markWord::monitor_value);\n+        __ bnez(t0, slow_path_unlock);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}