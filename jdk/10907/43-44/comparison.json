{"files":[{"patch":"@@ -84,1 +84,1 @@\n-  __ ldrw(t, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  __ ldrw(t, Address(rthread, JavaThread::lock_stack_top_offset()));\n@@ -89,1 +89,1 @@\n-  __ strw(t, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  __ strw(t, Address(rthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -882,1 +882,1 @@\n-      ldrw(tmp, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+      ldrw(tmp, Address(rthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6227,1 +6227,1 @@\n-  ldrw(t1, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  ldrw(t1, Address(rthread, JavaThread::lock_stack_top_offset()));\n@@ -6241,1 +6241,1 @@\n-  ldrw(t1, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  ldrw(t1, Address(rthread, JavaThread::lock_stack_top_offset()));\n@@ -6244,1 +6244,1 @@\n-  strw(t1, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  strw(t1, Address(rthread, JavaThread::lock_stack_top_offset()));\n@@ -6270,1 +6270,1 @@\n-  ldrw(t1, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  ldrw(t1, Address(rthread, JavaThread::lock_stack_top_offset()));\n@@ -6275,1 +6275,1 @@\n-  strw(t1, Address(rthread, JavaThread::lock_stack_offset_offset()));\n+  strw(t1, Address(rthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  __ lwu(t, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  __ lwu(t, Address(xthread, JavaThread::lock_stack_top_offset()));\n@@ -95,1 +95,1 @@\n-  __ sw(t, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  __ sw(t, Address(xthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -908,1 +908,1 @@\n-      lwu(tmp, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+      lwu(tmp, Address(xthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4497,1 +4497,1 @@\n-  lwu(tmp1, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  lwu(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n@@ -4512,1 +4512,1 @@\n-  lwu(tmp1, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  lwu(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n@@ -4516,1 +4516,1 @@\n-  sw(tmp1, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  sw(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n@@ -4536,1 +4536,1 @@\n-  lwu(tmp1, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  lwu(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n@@ -4538,1 +4538,1 @@\n-  sw(tmp1, Address(xthread, JavaThread::lock_stack_offset_offset()));\n+  sw(tmp1, Address(xthread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  __ subl(Address(r15_thread, JavaThread::lock_stack_offset_offset()), oopSize);\n+  __ subl(Address(r15_thread, JavaThread::lock_stack_top_offset()), oopSize);\n@@ -91,1 +91,1 @@\n-  __ movl(t, Address(r15_thread, JavaThread::lock_stack_offset_offset()));\n+  __ movl(t, Address(r15_thread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1359,1 +1359,1 @@\n-      movl(tmp, Address(thread, JavaThread::lock_stack_offset_offset()));\n+      movl(tmp, Address(thread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9695,1 +9695,1 @@\n-  cmpl(Address(thread, JavaThread::lock_stack_offset_offset()), LockStack::end_offset() - 1);\n+  cmpl(Address(thread, JavaThread::lock_stack_top_offset()), LockStack::end_offset() - 1);\n@@ -9709,1 +9709,1 @@\n-  movl(tmp, Address(thread, JavaThread::lock_stack_offset_offset()));\n+  movl(tmp, Address(thread, JavaThread::lock_stack_top_offset()));\n@@ -9712,1 +9712,1 @@\n-  movl(Address(thread, JavaThread::lock_stack_offset_offset()), tmp);\n+  movl(Address(thread, JavaThread::lock_stack_top_offset()), tmp);\n@@ -9739,1 +9739,1 @@\n-  subl(Address(thread, JavaThread::lock_stack_offset_offset()), oopSize);\n+  subl(Address(thread, JavaThread::lock_stack_top_offset()), oopSize);\n@@ -9741,1 +9741,1 @@\n-  movl(tmp, Address(thread, JavaThread::lock_stack_offset_offset()));\n+  movl(tmp, Address(thread, JavaThread::lock_stack_top_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -738,1 +738,1 @@\n-  assert(!UseFastLocking, \"Should call monitorenter_obj() when using UseFastLocking\");\n+  assert(!UseFastLocking || UseHeavyMonitors, \"Should call monitorenter_obj() when using UseFastLocking\");\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1155,3 +1155,3 @@\n-  static ByteSize lock_stack_offset()        { return byte_offset_of(JavaThread, _lock_stack); }\n-  static ByteSize lock_stack_offset_offset() { return lock_stack_offset() + LockStack::offset_offset(); }\n-  static ByteSize lock_stack_base_offset()   { return lock_stack_offset() + LockStack::base_offset(); }\n+  static ByteSize lock_stack_offset()      { return byte_offset_of(JavaThread, _lock_stack); }\n+  static ByteSize lock_stack_top_offset()  { return lock_stack_offset() + LockStack::top_offset(); }\n+  static ByteSize lock_stack_base_offset() { return lock_stack_offset() + LockStack::base_offset(); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-const size_t LockStack::lock_stack_offset =        in_bytes(JavaThread::lock_stack_offset());\n-const size_t LockStack::lock_stack_offset_offset = in_bytes(JavaThread::lock_stack_offset_offset());\n-const size_t LockStack::lock_stack_base_offset =   in_bytes(JavaThread::lock_stack_base_offset());\n+const size_t LockStack::lock_stack_offset =      in_bytes(JavaThread::lock_stack_offset());\n+const size_t LockStack::lock_stack_top_offset =  in_bytes(JavaThread::lock_stack_top_offset());\n+const size_t LockStack::lock_stack_base_offset = in_bytes(JavaThread::lock_stack_base_offset());\n@@ -40,1 +40,1 @@\n-  _offset(lock_stack_base_offset), _base()\n+  _top(lock_stack_base_offset), _base()\n@@ -76,3 +76,3 @@\n-  assert((_offset <  end_offset()), \"lockstack overflow: _offset %d end_offset %d\", _offset, end_offset());\n-  assert((_offset >= start_offset()), \"lockstack underflow: _offset %d end_offset %d\", _offset, start_offset());\n-  int top = to_index(_offset);\n+  assert((_top <  end_offset()), \"lockstack overflow: _top %d end_offset %d\", _top, end_offset());\n+  assert((_top >= start_offset()), \"lockstack underflow: _topt %d end_offset %d\", _top, start_offset());\n+  int top = to_index(_top);\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static const size_t lock_stack_offset_offset;\n+  static const size_t lock_stack_top_offset;\n@@ -50,1 +50,1 @@\n-  uint32_t _offset;\n+  uint32_t _top;\n@@ -62,2 +62,2 @@\n-  static ByteSize offset_offset() { return byte_offset_of(LockStack, _offset); }\n-  static ByteSize base_offset()   { return byte_offset_of(LockStack, _base); }\n+  static ByteSize top_offset()  { return byte_offset_of(LockStack, _top); }\n+  static ByteSize base_offset() { return byte_offset_of(LockStack, _base); }\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  return to_index(_offset) < CAPACITY;\n+  return to_index(_top) < CAPACITY;\n@@ -64,3 +64,3 @@\n-  assert(_base[to_index(_offset)] == nullptr, \"expect zapped entry\");\n-  _base[to_index(_offset)] = o;\n-  _offset += oopSize;\n+  assert(_base[to_index(_top)] == nullptr, \"expect zapped entry\");\n+  _base[to_index(_top)] = o;\n+  _top += oopSize;\n@@ -72,3 +72,3 @@\n-  assert(to_index(_offset) > 0, \"underflow, probably unbalanced push\/pop\");\n-  _offset -= oopSize;\n-  oop o = _base[to_index(_offset)];\n+  assert(to_index(_top) > 0, \"underflow, probably unbalanced push\/pop\");\n+  _top -= oopSize;\n+  oop o = _base[to_index(_top)];\n@@ -76,1 +76,1 @@\n-  _base[to_index(_offset)] = nullptr;\n+  _base[to_index(_top)] = nullptr;\n@@ -86,1 +86,1 @@\n-  int end = to_index(_offset);\n+  int end = to_index(_top);\n@@ -93,1 +93,1 @@\n-      _offset -= oopSize;\n+      _top -= oopSize;\n@@ -95,1 +95,1 @@\n-      _base[to_index(_offset)] = nullptr;\n+      _base[to_index(_top)] = nullptr;\n@@ -112,1 +112,1 @@\n-  int end = to_index(_offset);\n+  int end = to_index(_top);\n@@ -125,1 +125,1 @@\n-  int end = to_index(_offset);\n+  int end = to_index(_top);\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -707,1 +707,1 @@\n-  nonstatic_field(LockStack,                   _offset,                                       uint32_t)                              \\\n+  nonstatic_field(LockStack,                   _top,                                          uint32_t)                              \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  private static long          lockStackOffsetOffset;\n+  private static long          lockStackTopOffset;\n@@ -105,1 +105,1 @@\n-    lockStackOffsetOffset = type.getField(\"_lock_stack\").getOffset() + typeLockStack.getField(\"_offset\").getOffset();\n+    lockStackTopOffset = type.getField(\"_lock_stack\").getOffset() + typeLockStack.getField(\"_top\").getOffset();\n@@ -407,1 +407,1 @@\n-    long end = addr.getJIntAt(lockStackOffsetOffset);\n+    long end = addr.getJIntAt(lockStackTopOffset);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}