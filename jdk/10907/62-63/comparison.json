{"files":[{"patch":"@@ -3875,1 +3875,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n@@ -3956,1 +3956,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1813,1 +1813,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    log_trace(fastlock2)(\"C1_MacroAssembler::lock fast\");\n+    log_trace(fastlock)(\"C1_MacroAssembler::lock fast\");\n@@ -280,1 +280,1 @@\n-    log_trace(fastlock2)(\"C1_MacroAssembler::unlock fast\");\n+    log_trace(fastlock)(\"C1_MacroAssembler::unlock fast\");\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    log_trace(fastlock2)(\"C2_MacroAssembler::lock fast\");\n+    log_trace(fastlock)(\"C2_MacroAssembler::lock fast\");\n@@ -99,2 +99,1 @@\n-                  1 \/* savemask (save t1) *\/,\n-                  done);\n+                1 \/* savemask (save t1) *\/, done);\n@@ -148,1 +147,1 @@\n-    log_trace(fastlock2)(\"C2_MacroAssembler::unlock fast\");\n+    log_trace(fastlock)(\"C2_MacroAssembler::unlock fast\");\n@@ -151,2 +150,1 @@\n-                    1 \/* savemask (save t1) *\/,\n-                    done);\n+                  1 \/* savemask (save t1) *\/, done);\n","filename":"src\/hotspot\/cpu\/arm\/c2_MacroAssembler_arm.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -893,3 +893,1 @@\n-\n-      log_trace(fastlock2)(\"InterpreterMacroAssembler lock fast\");\n-\n+      log_trace(fastlock)(\"InterpreterMacroAssembler lock fast\");\n@@ -897,1 +895,0 @@\n-\n@@ -899,1 +896,0 @@\n-\n@@ -901,1 +897,0 @@\n-\n@@ -1013,1 +1008,1 @@\n-      log_trace(fastlock2)(\"InterpreterMacroAssembler unlock fast\");\n+      log_trace(fastlock)(\"InterpreterMacroAssembler unlock fast\");\n@@ -1024,2 +1019,1 @@\n-                      1 \/* savemask (save t1) *\/,\n-                      slow_case);\n+                    1 \/* savemask (save t1) *\/, slow_case);\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1764,1 +1764,1 @@\n-  POISON_REGS((~savemask), t1, t2, t3, 0x10000001);\n+  POISON_REGS((~savemask), t1, t2, t3, 0x20000002);\n@@ -1811,1 +1811,1 @@\n-\/\/  - obj: the object to be locked\n+\/\/  - obj: the object to be unlocked\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1023,1 +1023,1 @@\n-  \/\/  - obj: the object to be locked\n+  \/\/  - obj: the object to be unlocked\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-      log_trace(fastlock2)(\"SharedRuntime lock fast\");\n+      log_trace(fastlock)(\"SharedRuntime lock fast\");\n@@ -1245,2 +1245,3 @@\n-      log_trace(fastlock2)(\"SharedRuntime unlock fast\");\n-      __ fast_unlock_2(sync_obj, R2, tmp, Rtemp, 7, slow_unlock);\n+      log_trace(fastlock)(\"SharedRuntime unlock fast\");\n+      __ fast_unlock_2(sync_obj, R2 \/* t1 *\/, tmp \/* t2 *\/, Rtemp \/* t3 *\/,\n+                       7 \/* savemask *\/, slow_unlock);\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -9694,1 +9694,1 @@\n-  \/\/ Clear lowest two header bits (locked state).\n+  \/\/ Clear lock_mask bits (locked state).\n@@ -9697,1 +9697,1 @@\n-  \/\/ Set lowest bit (unlocked state).\n+  \/\/ Set unlocked_value bit.\n@@ -9721,1 +9721,1 @@\n-  \/\/ Mark-word must be 00 now, try to swing it back to 01 (unlocked)\n+  \/\/ Mark-word must be lock_mask now, try to swing it back to unlocked_value.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1717,1 +1717,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n@@ -1876,1 +1876,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2187,1 +2187,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n@@ -2331,1 +2331,1 @@\n-      assert(LockingMode == LM_LIGHTWEIGHT, \"\");\n+      assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -759,1 +759,1 @@\n-\/\/ As soon as traditional stack-locking goes away we could remove the other monitorenter() entry\n+\/\/ As soon as legacy stack-locking goes away we could remove the other monitorenter() entry\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  LOG_TAG(fastlock2) \\\n+  LOG_TAG(fastlock) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-    assert(LockingMode == LM_LEGACY, \"should only be called with traditional stack locking\");\n+    assert(LockingMode == LM_LEGACY, \"should only be called with legacy stack locking\");\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1993,0 +1993,5 @@\n+    if (FLAG_IS_CMDLINE(LockingMode) && LockingMode != LM_MONITOR) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"Conflicting -XX:+UseHeavyMonitors and -XX:LockingMode=%d flags\", LockingMode);\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1981,1 +1981,1 @@\n-          \"1: monitors & traditional stack-locking (default), \"             \\\n+          \"1: monitors & legacy stack-locking (default), \"                  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1161,1 +1161,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-  _top(lock_stack_base_offset), _base()\n-{\n+  _top(lock_stack_base_offset), _base() {\n@@ -63,3 +62,3 @@\n-  assert(LockingMode == LM_LIGHTWEIGHT, \"never use lock-stack when fast-locking is disabled\");\n-  assert((_top <=  end_offset()), \"lockstack overflow: _top %d end_offset %d\", _top, end_offset());\n-  assert((_top >= start_offset()), \"lockstack underflow: _topt %d end_offset %d\", _top, start_offset());\n+  assert(LockingMode == LM_LIGHTWEIGHT, \"never use lock-stack when light weight locking is disabled\");\n+  assert((_top <= end_offset()), \"lockstack overflow: _top %d end_offset %d\", _top, end_offset());\n+  assert((_top >= start_offset()), \"lockstack underflow: _top %d end_offset %d\", _top, start_offset());\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  assert(!contains(o), \"entries must be unique\");\n+  assert(!contains(o), \"entries must be unique: \" PTR_FORMAT, p2i(o));\n@@ -81,1 +81,1 @@\n-  assert(contains(o), \"entry must be present\");\n+  assert(contains(o), \"entry must be present: \" PTR_FORMAT, p2i(o));\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-      \/\/ Fast-locking does not use the 'lock' argument..\n+      \/\/ Fast-locking does not use the 'lock' argument.\n@@ -1049,1 +1049,1 @@\n-    \/\/ inflated monitor so header points to ObjectMonitor (tagged pointer).\n+    \/\/ Inflated monitor so header points to ObjectMonitor (tagged pointer).\n@@ -1077,1 +1077,1 @@\n-    \/\/ inflated monitor so header points to ObjectMonitor (tagged pointer).\n+    \/\/ Inflated monitor so header points to ObjectMonitor (tagged pointer).\n@@ -1086,0 +1086,5 @@\n+  \/\/ Unlocked case, header in place\n+  \/\/ Cannot have assertion since this object may have been\n+  \/\/ locked by another thread when reaching here.\n+  \/\/ assert(mark.is_neutral(), \"sanity check\");\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-        assert(VM.getVM().getCommandLineFlag(\"LockingMode\").getInt() != 2);\n+      assert(VM.getVM().getCommandLineFlag(\"LockingMode\").getInt() != 2 \/* LM_LIGHTWEIGHT *\/);\n@@ -231,1 +231,1 @@\n-        if (VM.getVM().getCommandLineFlag(\"LockingMode\").getInt() == 2) {\n+        if (VM.getVM().getCommandLineFlag(\"LockingMode\").getInt() == 2 \/* LM_LIGHTWEIGHT *\/) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Threads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}