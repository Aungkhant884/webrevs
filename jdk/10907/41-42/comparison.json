{"files":[{"patch":"@@ -3841,1 +3841,0 @@\n-        __ cmp(oop, oop); \/\/ Force ZF=1 to indicate success.\n@@ -3945,1 +3944,0 @@\n-        __ cmp(oop, oop);  \/\/ Force ZF=1 to indicate success.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6217,1 +6217,1 @@\n-\/\/ Falls through upon success with unspecified ZF.\n+\/\/ Falls through upon success with ZF set.\n@@ -6254,1 +6254,1 @@\n-\/\/ Falls through upon success, with unspecified ZF.\n+\/\/ Falls through upon success, with ZF set.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,2 +122,1 @@\n-  \/\/ at a safepoint, it must not be zero. fast-locking does allow the\n-  \/\/ mark to be zero at a safepoint.\n+  \/\/ at a safepoint, it must not be zero, except when UseFastLocking is turned on.\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-  intptr_t  is_entered(JavaThread* current) const;\n+  bool is_entered(JavaThread* current) const;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-inline intptr_t ObjectMonitor::is_entered(JavaThread* current) const {\n+inline bool ObjectMonitor::is_entered(JavaThread* current) const {\n@@ -39,1 +39,1 @@\n-      return current->lock_stack().contains(object()) ? 1 : 0;\n+      return current->lock_stack().contains(object());\n@@ -41,1 +41,1 @@\n-      return current == owner_raw() ? 1 : 0;\n+      return current == owner_raw();\n@@ -46,1 +46,1 @@\n-      return 1;\n+      return true;\n@@ -49,1 +49,1 @@\n-  return 0;\n+  return false;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -498,1 +498,1 @@\n-      \/\/ fast-locking does not use the 'lock' parameter.\n+      \/\/ Fast-locking does not use the 'lock' argument..\n@@ -502,16 +502,9 @@\n-        while (true) {\n-          if (mark.is_neutral()) {\n-            assert(!lock_stack.contains(obj()), \"thread must not already hold the lock\");\n-            \/\/ Try to swing into 'fast-locked' state without inflating.\n-            markWord locked_mark = mark.set_fast_locked();\n-            markWord old_mark = obj()->cas_set_mark(locked_mark, mark);\n-            if (old_mark == mark) {\n-              \/\/ Successfully fast-locked, push object to lock-stack and return.\n-              lock_stack.push(obj());\n-              return;\n-            }\n-            \/\/ Otherwise retry.\n-            mark = old_mark;\n-          } else {\n-            \/\/ Fall-through to inflate-enter.\n-            break;\n+        if (mark.is_neutral()) {\n+          assert(!lock_stack.contains(obj()), \"thread must not already hold the lock\");\n+          \/\/ Try to swing into 'fast-locked' state.\n+          markWord locked_mark = mark.set_fast_locked();\n+          markWord old_mark = obj()->cas_set_mark(locked_mark, mark);\n+          if (old_mark == mark) {\n+            \/\/ Successfully fast-locked, push object to lock-stack and return.\n+            lock_stack.push(obj());\n+            return;\n@@ -521,1 +514,1 @@\n-      \/\/ No room on the lock_stack so fall-through to inflate-enter.\n+      \/\/ All other paths fall-through to inflate-enter.\n@@ -567,1 +560,1 @@\n-      \/\/ fast-locking does not use the 'lock' parameter.\n+      \/\/ Fast-locking does not use the 'lock' argument.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"}]}