{"files":[{"patch":"@@ -42,0 +42,6 @@\n+uint32_t LockStack::start_offset() {\n+  int offset = in_bytes(JavaThread::lock_stack_base_offset());\n+  assert(offset > 0, \"must be positive offset\");\n+  return static_cast<uint32_t>(offset);\n+}\n+\n@@ -62,0 +68,2 @@\n+  assert((_offset <=  end_offset()), \"lockstack overflow: _offset %d end_offset %d\", _offset, end_offset());\n+  assert((_offset >= start_offset()), \"lockstack underflow: _offset %d end_offset %d\", _offset, start_offset());\n@@ -64,0 +72,1 @@\n+    assert(_base[i] != nullptr, \"no null on lock-stack\");\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+  static uint32_t start_offset();\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -96,1 +96,3 @@\n-    watermark->start_processing();\n+    if (watermark != nullptr) {\n+      watermark->start_processing();\n+    }\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}