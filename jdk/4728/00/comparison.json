{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/stackWatermarkSet.hpp\"\n@@ -80,4 +81,9 @@\n-  if (is_entry_frame())\n-    return sender_for_entry_frame(map);\n-  else\n-    return sender_for_nonentry_frame(map);\n+  frame result = zeroframe()->is_entry_frame() ?\n+                 sender_for_entry_frame(map) :\n+                 sender_for_nonentry_frame(map);\n+\n+  if (map->process_frames()) {\n+    StackWatermarkSet::on_iteration(map->thread(), result);\n+  }\n+\n+  return result;\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+\n+  constexpr static bool supports_stack_watermark_barrier() { return true; }\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,0 +203,4 @@\n+    \/\/ Notify the stack watermarks machinery that we are unwinding.\n+    \/\/ Should do this before resetting the frame anchor.\n+    stack_watermark_unwind_check(thread);\n+\n@@ -439,0 +443,4 @@\n+  \/\/ Notify the stack watermarks machinery that we are unwinding.\n+  \/\/ Should do this before resetting the frame anchor.\n+  stack_watermark_unwind_check(thread);\n+\n@@ -872,0 +880,10 @@\n+\n+void ZeroInterpreter::stack_watermark_unwind_check(JavaThread* thread) {\n+  \/\/ If frame pointer is in the danger zone, notify the runtime that\n+  \/\/ it needs to act before continuing the unwinding.\n+  uintptr_t fp = (uintptr_t)thread->last_Java_fp();\n+  uintptr_t watermark = thread->poll_data()->get_polling_word();\n+  if (fp > watermark) {\n+    InterpreterRuntime::at_unwind(thread);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+  \/\/ Stack watermark machinery\n+  static void stack_watermark_unwind_check(JavaThread* thread);\n+\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-#define SAFEPOINT                                                                                         \\\n+#define RETURN_SAFEPOINT                                                                                  \\\n@@ -1334,7 +1334,0 @@\n-      {\n-          \/\/ Allow a safepoint before returning to frame manager.\n-          SAFEPOINT;\n-\n-          goto handle_return;\n-      }\n-\n@@ -1343,1 +1336,1 @@\n-      {\n+      CASE(_return): {\n@@ -1345,1 +1338,1 @@\n-          SAFEPOINT;\n+          RETURN_SAFEPOINT;\n@@ -1350,1 +1343,0 @@\n-\n@@ -1358,6 +1350,0 @@\n-      CASE(_return): {\n-\n-          \/\/ Allow a safepoint before returning to frame manager.\n-          SAFEPOINT;\n-          goto handle_return;\n-      }\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"}]}