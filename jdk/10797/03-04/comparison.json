{"files":[{"patch":"@@ -154,4 +154,0 @@\n-    \/** If currentClass is an enum type, an ordered list of its identifiers.\n-     *\/\n-    List<Name> currentEnumNames;\n-\n@@ -233,0 +229,28 @@\n+    \/**\n+     * Get the enum constants for the given enum class symbol, if known.\n+     * They will only be found if they are defined within the same top-level\n+     * class as the class being compiled, so it's safe to assume that they\n+     * can't change at runtime due to a recompilation.\n+     *\/\n+    List<Name> enumNamesFor(ClassSymbol c) {\n+\n+        \/\/ Find the class definition and verify it is an enum class\n+        final JCClassDecl classDef = classDef(c);\n+        if (classDef == null ||\n+            (classDef.mods.flags & ENUM) == 0 ||\n+            (types.supertype(currentClass.type).tsym.flags() & ENUM) != 0) {\n+            return null;\n+        }\n+\n+        \/\/ Gather the enum identifiers\n+        ListBuffer<Name> idents = new ListBuffer<>();\n+        for (List<JCTree> defs = classDef.defs; defs.nonEmpty(); defs=defs.tail) {\n+            if (defs.head.hasTag(VARDEF) &&\n+                (((JCVariableDecl) defs.head).mods.flags & ENUM) != 0) {\n+                JCVariableDecl var = (JCVariableDecl)defs.head;\n+                idents.append(var.name);\n+            }\n+        }\n+        return idents.toList();\n+    }\n+\n@@ -433,2 +457,9 @@\n-        if (enumClass == currentClass)\n-            return new CompileTimeEnumMapping(currentEnumNames);\n+\n+        \/\/ If enum class is part of this compilation, just switch on ordinal value\n+        if (enumClass.kind == TYP) {\n+            final List<Name> idents = enumNamesFor((ClassSymbol)enumClass);\n+            if (idents != null)\n+                return new CompileTimeEnumMapping(idents);\n+        }\n+\n+        \/\/ Map identifiers to ordinal values at runtime, and then switch on that\n@@ -528,1 +559,1 @@\n-            ClassSymbol outerCacheClass = outerCacheClass();\n+            ClassSymbol enumMapClass = makeEmptyClass(STATIC | SYNTHETIC, outermostClassDef.sym).sym;\n@@ -532,2 +563,2 @@\n-                                        outerCacheClass);\n-            enterSynthetic(pos, mapVar, outerCacheClass.members());\n+                                        enumMapClass);\n+            enterSynthetic(pos, mapVar, enumMapClass.members());\n@@ -1918,17 +1949,0 @@\n-    \/** Return the symbol of a class to contain a cache of\n-     *  compiler-generated statics such as class$ and the\n-     *  $assertionsDisabled flag.  We create an anonymous nested class\n-     *  (unless one already exists) and return its symbol.  However,\n-     *  for backward compatibility in 1.4 and earlier we use the\n-     *  top-level class itself.\n-     *\/\n-    private ClassSymbol outerCacheClass() {\n-        ClassSymbol clazz = outermostClassDef.sym;\n-        Scope s = clazz.members();\n-        for (Symbol sym : s.getSymbols(NON_RECURSIVE))\n-            if (sym.kind == TYP &&\n-                sym.name == names.empty &&\n-                (sym.flags() & INTERFACE) == 0) return (ClassSymbol) sym;\n-        return makeEmptyClass(STATIC | SYNTHETIC, clazz).sym;\n-    }\n-\n@@ -2242,1 +2256,0 @@\n-        List<Name> currentEnumNamesPrev = currentEnumNames;\n@@ -2246,1 +2259,0 @@\n-        currentEnumNames = null;\n@@ -2340,1 +2352,0 @@\n-        currentEnumNames = currentEnumNamesPrev;\n@@ -2392,1 +2403,0 @@\n-        ListBuffer<Name> idents = new ListBuffer<>();\n@@ -2401,1 +2411,0 @@\n-                idents.append(var.name);\n@@ -2406,1 +2415,0 @@\n-        currentEnumNames = idents.toList();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":40,"deletions":32,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8219412\n+ * @summary Verify switched-on enum classes are not initialized until actual 'first use'\n+ *\/\n+\n+public class EnumExtraClassInit {\n+\n+    static boolean Ainit;\n+    static boolean Binit;\n+\n+    enum A {\n+        X;\n+        static {\n+            Ainit = true;\n+        }\n+    }\n+\n+    enum B {\n+        X;\n+        static {\n+            Binit = true;\n+        }\n+    }\n+\n+    static void testA(A x) {\n+        switch (x) {\n+        }\n+    }\n+\n+    static void testB(A x) {\n+        switch (x) {\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testA(A.X);\n+        if (!Ainit || Binit)\n+            throw new RuntimeException(\"Ainit=\" + Ainit + \", Binit=\" + Binit);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/enum\/EnumExtraClassInit.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7176515\n+ * @bug 7176515 8299760\n@@ -79,5 +79,4 @@\n-\/\/ Bug still occurs if this is uncommented\n-\/\/            switch (x) {\n-\/\/            default:\n-\/\/                break;\n-\/\/            }\n+            switch (x) {\n+            default:\n+                break;\n+            }\n","filename":"test\/langtools\/tools\/javac\/enum\/EnumLookupTableExceptionInInitializer.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}