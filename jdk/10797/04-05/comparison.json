{"files":[{"patch":"@@ -559,1 +559,1 @@\n-            ClassSymbol enumMapClass = makeEmptyClass(STATIC | SYNTHETIC, outermostClassDef.sym).sym;\n+            ClassSymbol outerCacheClass = outerCacheClass();\n@@ -563,2 +563,2 @@\n-                                        enumMapClass);\n-            enterSynthetic(pos, mapVar, enumMapClass.members());\n+                                        outerCacheClass);\n+            enterSynthetic(pos, mapVar, outerCacheClass.members());\n@@ -1949,0 +1949,17 @@\n+    \/** Return the symbol of a class to contain a cache of\n+     *  compiler-generated statics such as class$ and the\n+     *  $assertionsDisabled flag.  We create an anonymous nested class\n+     *  (unless one already exists) and return its symbol.  However,\n+     *  for backward compatibility in 1.4 and earlier we use the\n+     *  top-level class itself.\n+     *\/\n+    private ClassSymbol outerCacheClass() {\n+        ClassSymbol clazz = outermostClassDef.sym;\n+        Scope s = clazz.members();\n+        for (Symbol sym : s.getSymbols(NON_RECURSIVE))\n+            if (sym.kind == TYP &&\n+                sym.name == names.empty &&\n+                (sym.flags() & INTERFACE) == 0) return (ClassSymbol) sym;\n+        return makeEmptyClass(STATIC | SYNTHETIC, clazz).sym;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8219412\n- * @summary Verify switched-on enum classes are not initialized until actual 'first use'\n- *\/\n-\n-public class EnumExtraClassInit {\n-\n-    static boolean Ainit;\n-    static boolean Binit;\n-\n-    enum A {\n-        X;\n-        static {\n-            Ainit = true;\n-        }\n-    }\n-\n-    enum B {\n-        X;\n-        static {\n-            Binit = true;\n-        }\n-    }\n-\n-    static void testA(A x) {\n-        switch (x) {\n-        }\n-    }\n-\n-    static void testB(A x) {\n-        switch (x) {\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        testA(A.X);\n-        if (!Ainit || Binit)\n-            throw new RuntimeException(\"Ainit=\" + Ainit + \", Binit=\" + Binit);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/enum\/EnumExtraClassInit.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"}]}