{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.util.HashSet;\n@@ -36,0 +37,1 @@\n+import java.util.Locale;\n@@ -51,1 +53,1 @@\n-    static List<String> getAlgorithms(String propertyName) {\n+    static Set<String> getAlgorithms(String propertyName) {\n@@ -70,1 +72,1 @@\n-                algorithmsInProperty[i] = algorithmsInProperty[i].trim();\n+                algorithmsInProperty[i] = algorithmsInProperty[i].trim().toLowerCase(Locale.ENGLISH);\n@@ -76,1 +78,1 @@\n-            return Collections.emptyList();\n+            return Collections.emptySet();\n@@ -78,1 +80,1 @@\n-        return new ArrayList<>(Arrays.asList(algorithmsInProperty));\n+        return new HashSet<>(Arrays.asList(algorithmsInProperty));\n@@ -81,1 +83,1 @@\n-    static boolean checkAlgorithm(List<String> algorithms, String algorithm,\n+    static boolean checkAlgorithm(Set<String> algorithms, String algorithm,\n@@ -88,14 +90,3 @@\n-        for (String item : algorithms) {\n-            if (item == null || item.isEmpty()) {\n-                continue;\n-            }\n-\n-            \/\/ check the full name\n-            if (item.equalsIgnoreCase(algorithm)) {\n-                return false;\n-            }\n-\n-            \/\/ decompose the algorithm into sub-elements\n-            if (elements == null) {\n-                elements = decomposer.decompose(algorithm);\n-            }\n+        if (algorithms.contains(algorithm.toLowerCase())) {\n+            return false;\n+        }\n@@ -103,6 +94,9 @@\n-            \/\/ check the items of the algorithm\n-            for (String element : elements) {\n-                if (item.equalsIgnoreCase(element)) {\n-                    return false;\n-                }\n-            }\n+        \/\/ decompose the algorithm into sub-elements\n+        if (elements == null) {\n+            elements = decomposer.decompose(algorithm);\n+        }\n+        \/\/ check the element of the elements\n+        for (String element : elements) {\n+            if (algorithms.contains(element.toLowerCase())) {\n+                 return false;\n+             }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AbstractAlgorithmConstraints.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-    private final List<String> disabledAlgorithms;\n+    private final Set<String> disabledAlgorithms;\n@@ -133,1 +133,2 @@\n-        int ecindex = -1, i = 0;\n+        Pattern INCLUDE_PATTERN = Pattern.compile(\"include \" + PROPERTY_DISABLED_EC_CURVES, Pattern.CASE_INSENSITIVE);\n+        Matcher matcher;\n@@ -135,6 +136,4 @@\n-            if (s.regionMatches(true, 0,\"include \", 0, 8)) {\n-                if (s.regionMatches(true, 8, PROPERTY_DISABLED_EC_CURVES, 0,\n-                        PROPERTY_DISABLED_EC_CURVES.length())) {\n-                    ecindex = i;\n-                    break;\n-                }\n+            if ((matcher = INCLUDE_PATTERN.matcher(s)).matches()) {\n+                disabledAlgorithms.remove(matcher.group());\n+                disabledAlgorithms.addAll(getAlgorithms(PROPERTY_DISABLED_EC_CURVES));\n+                break;\n@@ -142,6 +141,0 @@\n-            i++;\n-        }\n-        if (ecindex > -1) {\n-            disabledAlgorithms.remove(ecindex);\n-            disabledAlgorithms.addAll(ecindex,\n-                    getAlgorithms(PROPERTY_DISABLED_EC_CURVES));\n@@ -332,1 +325,1 @@\n-                    \"denyAfter\\\\s+(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n+                    \"denyAfter\\\\s+(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\", Pattern.CASE_INSENSITIVE);\n@@ -335,1 +328,1 @@\n-        public Constraints(String propertyName, List<String> constraintArray) {\n+        public Constraints(String propertyName, Set<String> constraintArray) {\n@@ -383,1 +376,1 @@\n-                    if (entry.startsWith(\"keySize\")) {\n+                    if (entry.regionMatches(true, 0, \"keySize\", 0, 7)) {\n@@ -389,1 +382,1 @@\n-                        if (!\"keySize\".equals(tokens.nextToken())) {\n+                        if (!\"keySize\".equalsIgnoreCase(tokens.nextToken())) {\n@@ -410,1 +403,1 @@\n-                    } else if (entry.startsWith(\"denyAfter\") &&\n+                    } else if (entry.regionMatches(true, 0, \"denyAfter\", 0, 8) &&\n@@ -427,1 +420,1 @@\n-                    } else if (entry.startsWith(\"usage\")) {\n+                    } else if (entry.regionMatches(true, 0, \"usage\", 0, 5)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.HashSet;\n@@ -43,1 +44,1 @@\n-    private final List<String> legacyAlgorithms;\n+    private final Set<String> legacyAlgorithms;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/LegacyAlgorithmConstraints.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import sun.security.util.DisabledAlgorithmConstraints;\n+\n+import java.security.AlgorithmConstraints;\n+import java.security.CryptoPrimitive;\n+import java.util.concurrent.TimeUnit;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static sun.security.util.DisabledAlgorithmConstraints.PROPERTY_TLS_DISABLED_ALGS;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\"})\n+@State(Scope.Thread)\n+public class AlgorithmConstraintsPermits {\n+\n+    AlgorithmConstraints tlsDisabledAlgConstraints;\n+    Set<CryptoPrimitive> primitives = EnumSet.of(CryptoPrimitive.KEY_AGREEMENT);\n+\n+    @Param({\"SSLv3\", \"DES\", \"NULL\", \"TLS1.3\"})\n+    String algorithm;\n+\n+    @Setup\n+    public void setup() {\n+        tlsDisabledAlgConstraints = new DisabledAlgorithmConstraints(PROPERTY_TLS_DISABLED_ALGS);\n+    }\n+\n+    @Benchmark\n+    public boolean permits() {\n+        return tlsDisabledAlgConstraints.permits(primitives, algorithm, null);\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/AlgorithmConstraintsPermits.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}