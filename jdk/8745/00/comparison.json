{"files":[{"patch":"@@ -1801,0 +1801,4 @@\n+\n+                            if (TreeInfo.isBooleanWithValue(guard, 0)) {\n+                                log.error(guard.pos(), Errors.GuardHasConstantExpressionFalse);\n+                            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -515,0 +515,3 @@\n+compiler.err.guard.has.constant.expression.false=\\\n+    this case label has a when constant expression that is false\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1340,0 +1340,4 @@\n+        return isBooleanWithValue(guard, 1);\n+    }\n+\n+    public static boolean isBooleanWithValue(JCExpression guard, int value) {\n@@ -1342,2 +1346,2 @@\n-               guard.type.hasTag(BOOLEAN) &&\n-               ((int) constValue) == 1;\n+                guard.type.hasTag(BOOLEAN) &&\n+                ((int) constValue) == value;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286797\n+ * @summary  Guards of constant value false are not permitted\n+ * @compile\/fail\/ref=T8286797.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW T8286797.java\n+ *\/\n+\n+public class T8286797 {\n+\n+    public void testWithConstant(Object o) {\n+        switch (o) {\n+            case String s when false -> {}\n+            default -> {}\n+        }\n+    }\n+\n+    public void testWithSimpleName(Object o) {\n+        final int x = 0;\n+        switch (o) {\n+            case String s when x == 42 -> {}\n+            default -> {}\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8286797.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+T8286797.java:35:32: compiler.err.guard.has.constant.expression.false\n+T8286797.java:43:34: compiler.err.guard.has.constant.expression.false\n+- compiler.note.preview.filename: T8286797.java, DEFAULT\n+- compiler.note.preview.recompile\n+2 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8286797.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.guard.has.constant.expression.false\n+\/\/ key: compiler.misc.feature.pattern.switch\n+\/\/ key: compiler.warn.preview.feature.use.plural\n+\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n+\n+class GuardHasConstantFalse {\n+    private void doSwitch(Object o) {\n+        switch (o) {\n+            case String s when false -> {}\n+            default -> {}\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/GuardHasConstantFalse.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -67,1 +67,1 @@\n-            case EnumTypeChangesEnum e1 when false -> throw new AssertionError();\n+            case EnumTypeChangesEnum e1 when e1 == null -> throw new AssertionError();\n@@ -76,1 +76,1 @@\n-            case EnumTypeChangesEnum e1 when false -> throw new AssertionError();\n+            case EnumTypeChangesEnum e1 when e1 == null -> throw new AssertionError();\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -279,0 +279,1 @@\n+               \"Test.java:6:27: compiler.err.guard.has.constant.expression.false\",\n@@ -282,1 +283,1 @@\n-               \"1 error\");\n+               \"2 errors\");\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-            case RawTypeBindingWarning w when false -> {}\n+            case RawTypeBindingWarning w when w == null -> {}\n","filename":"test\/langtools\/tools\/javac\/patterns\/RawTypeBindingWarning.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}