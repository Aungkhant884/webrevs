{"files":[{"patch":"@@ -766,0 +766,2 @@\n+  _entry_end = _reader.get_position() + header._unit_length;\n+\n@@ -806,1 +808,1 @@\n-  } while (!is_terminating_entry(descriptor) && _reader.has_bytes_left());\n+  } while (!is_terminating_entry(header, descriptor) && _reader.has_bytes_left());\n@@ -822,2 +824,6 @@\n-bool DwarfFile::DebugAranges::is_terminating_entry(const AddressDescriptor& descriptor) {\n-  return descriptor.beginning_address == 0 && descriptor.range_length == 0;\n+bool DwarfFile::DebugAranges::is_terminating_entry(const DwarfFile::DebugAranges::DebugArangesSetHeader& header,\n+                                                   const AddressDescriptor& descriptor) {\n+  bool is_terminating = _reader.get_position() >= _entry_end;\n+  assert(!is_terminating || (descriptor.beginning_address == 0 && descriptor.range_length == 0),\n+         \"a terminating entry needs a pair of zero\");\n+  return is_terminating;\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -488,0 +488,3 @@\n+    \/\/ a calculated end position\n+    long _entry_end;\n+\n@@ -494,1 +497,2 @@\n-    static bool is_terminating_entry(const AddressDescriptor& descriptor);\n+    bool is_terminating_entry(const DwarfFile::DebugAranges::DebugArangesSetHeader& header,\n+                              const AddressDescriptor& descriptor);\n@@ -496,1 +500,2 @@\n-    DebugAranges(DwarfFile* dwarf_file) : _dwarf_file(dwarf_file), _reader(dwarf_file->fd()), _section_start_address(0) {}\n+    DebugAranges(DwarfFile* dwarf_file) : _dwarf_file(dwarf_file), _reader(dwarf_file->fd()),\n+                                          _section_start_address(0), _entry_end(0) {}\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}