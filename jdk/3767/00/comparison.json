{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=G1\n@@ -30,1 +30,1 @@\n- * @requires vm.gc.G1 & vm.gc.Shenandoah & vm.gc.Z & vm.gc.Epsilon\n+ * @requires vm.gc.G1\n@@ -32,1 +32,1 @@\n- * @run driver TestNoWarningLoopStripMiningIterSet\n+ * @run driver TestNoWarningLoopStripMiningIterSet G1\n@@ -35,0 +35,34 @@\n+\/*\n+ * @test id=Shenandoah\n+ * @bug 8241486\n+ * @summary G1\/Z give warning when using LoopStripMiningIter and turn off LoopStripMiningIter (0)\n+ * @requires vm.flagless\n+ * @requires vm.flavor == \"server\" & !vm.graal.enabled\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @run driver TestNoWarningLoopStripMiningIterSet Shenandoah\n+ *\/\n+\n+\/*\n+ * @test id=Z\n+ * @bug 8241486\n+ * @summary G1\/Z give warning when using LoopStripMiningIter and turn off LoopStripMiningIter (0)\n+ * @requires vm.flagless\n+ * @requires vm.flavor == \"server\" & !vm.graal.enabled\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @run driver TestNoWarningLoopStripMiningIterSet Z\n+ *\/\n+\n+\/*\n+ * @test id=Epsilon\n+ * @bug 8241486\n+ * @summary G1\/Z give warning when using LoopStripMiningIter and turn off LoopStripMiningIter (0)\n+ * @requires vm.flagless\n+ * @requires vm.flavor == \"server\" & !vm.graal.enabled\n+ * @requires vm.gc.Epsilon\n+ * @library \/test\/lib\n+ * @run driver TestNoWarningLoopStripMiningIterSet Epsilon\n+ *\/\n+\n+\n@@ -63,6 +97,5 @@\n-        for (String gc : List.of(\"-XX:+UseG1GC\", \"-XX:+UseZGC\", \"-XX:+UseShenandoahGC\", \"-XX:+UseEpsilonGC\")) {\n-            testWith(output -> output.shouldNotContain(CLSOffLSMGreaterZero), \"should have CLS and LSM enabled\", true, 100, \"-XX:LoopStripMiningIter=100\", gc);\n-            testWith(output -> output.shouldContain(CLSOffLSMGreaterZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=100\", gc);\n-            testWith(output -> output.shouldContain(CLSOnLSMEqualZero), \"should have CLS and LSM enabled\", true, 1, \"-XX:LoopStripMiningIter=0\", gc);\n-            testWith(output -> output.shouldNotContain(CLSOnLSMEqualZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=0\", gc);\n-        }\n+        String gc = \"-XX:+Use\" + args[0] + \"GC\";\n+        testWith(output -> output.shouldNotContain(CLSOffLSMGreaterZero), \"should have CLS and LSM enabled\", true, 100, \"-XX:LoopStripMiningIter=100\", gc);\n+        testWith(output -> output.shouldContain(CLSOffLSMGreaterZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=100\", gc);\n+        testWith(output -> output.shouldContain(CLSOnLSMEqualZero), \"should have CLS and LSM enabled\", true, 1, \"-XX:LoopStripMiningIter=0\", gc);\n+        testWith(output -> output.shouldNotContain(CLSOnLSMEqualZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=0\", gc);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestNoWarningLoopStripMiningIterSet.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"}]}