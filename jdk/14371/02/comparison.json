{"files":[{"patch":"@@ -3625,15 +3625,0 @@\n-int reflect_UnsafeStaticFieldAccessorImpl::_base_offset;\n-\n-#define UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(macro) \\\n-  macro(_base_offset, k, \"base\", object_signature, false)\n-\n-void reflect_UnsafeStaticFieldAccessorImpl::compute_offsets() {\n-  InstanceKlass* k = vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass();\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void reflect_UnsafeStaticFieldAccessorImpl::serialize_offsets(SerializeClosure* f) {\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n@@ -4636,1 +4621,2 @@\n-\/\/ the generated bytecodes for reflection.\n+\/\/ the generated bytecodes for serialization constructor returned\n+\/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n@@ -5226,1 +5212,0 @@\n-  f(reflect_UnsafeStaticFieldAccessorImpl) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -887,14 +887,0 @@\n-\/\/ Interface to jdk.internal.reflect.UnsafeStaticFieldAccessorImpl objects\n-class reflect_UnsafeStaticFieldAccessorImpl {\n- private:\n-  static int _base_offset;\n-  static void compute_offsets();\n-\n- public:\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n-  static int base_offset() { CHECK_INIT(_base_offset); }\n-\n-  \/\/ Debugging\n-  friend class JavaClasses;\n-};\n@@ -1497,1 +1483,2 @@\n-  \/\/ the generated bytecodes for reflection.\n+  \/\/ the generated bytecodes for serialization constructor returned\n+  \/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-  Klass* refl_magic_klass = vmClasses::reflect_MagicAccessorImpl_klass();\n+  Klass* refl_serialization_ctor_klass = vmClasses::reflect_SerializationConstructorAccessorImpl_klass();\n@@ -273,1 +273,2 @@\n-  bool is_reflect = refl_magic_klass != nullptr && klass->is_subtype_of(refl_magic_klass);\n+  bool is_reflect_accessor = refl_serialization_ctor_klass != nullptr &&\n+                                klass->is_subtype_of(refl_serialization_ctor_klass);\n@@ -293,2 +294,1 @@\n-    \/\/ dynamically-generated bytecodes associated with the 1.4\n-    \/\/ reflection implementation, not just those associated with\n+    \/\/ dynamically-generated bytecodes associated with\n@@ -296,4 +296,1 @@\n-    \/\/ NOTE: this is called too early in the bootstrapping process to be\n-    \/\/ guarded by Universe::is_gte_jdk14x_version().\n-    \/\/ Also for lambda generated code, gte jdk8\n-    (!is_reflect));\n+    (!is_reflect_accessor));\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,0 @@\n-  do_klass(reflect_MagicAccessorImpl_klass,             reflect_MagicAccessorImpl                             ) \\\n@@ -110,1 +109,0 @@\n-  do_klass(reflect_ConstructorAccessorImpl_klass,       reflect_ConstructorAccessorImpl                       ) \\\n@@ -113,1 +111,0 @@\n-  do_klass(reflect_UnsafeStaticFieldAccessorImpl_klass, reflect_UnsafeStaticFieldAccessorImpl                 ) \\\n@@ -115,1 +112,2 @@\n-  do_klass(reflect_NativeConstructorAccessorImpl_klass, reflect_NativeConstructorAccessorImpl                 ) \\\n+  do_klass(reflect_DirectConstructorHandleAccessor_NativeAccessor_klass, reflect_DirectConstructorHandleAccessor_NativeAccessor) \\\n+  do_klass(reflect_SerializationConstructorAccessorImpl_klass,           reflect_SerializationConstructorAccessorImpl ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -274,1 +274,0 @@\n-  template(reflect_MagicAccessorImpl,                 \"jdk\/internal\/reflect\/MagicAccessorImpl\")       \\\n@@ -276,1 +275,0 @@\n-  template(reflect_ConstructorAccessorImpl,           \"jdk\/internal\/reflect\/ConstructorAccessorImpl\") \\\n@@ -281,1 +279,2 @@\n-  template(reflect_NativeConstructorAccessorImpl,     \"jdk\/internal\/reflect\/NativeConstructorAccessorImpl\")\\\n+  template(reflect_DirectConstructorHandleAccessor_NativeAccessor,   \"jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor\") \\\n+  template(reflect_SerializationConstructorAccessorImpl,             \"jdk\/internal\/reflect\/SerializationConstructorAccessorImpl\") \\\n@@ -310,1 +309,0 @@\n-  template(reflect_UnsafeStaticFieldAccessorImpl,     \"jdk\/internal\/reflect\/UnsafeStaticFieldAccessorImpl\")\\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1450,1 +1450,1 @@\n-      vmClasses::reflect_NativeConstructorAccessorImpl_klass()) {\n+      vmClasses::reflect_DirectConstructorHandleAccessor_NativeAccessor_klass()) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1172,1 +1172,2 @@\n-    \/\/ Disable verification for the dynamically-generated reflection bytecodes.\n+    \/\/ Disable verification for the dynamically-generated reflection bytecodes\n+    \/\/ for serialization constructor accessor.\n@@ -1174,1 +1175,1 @@\n-                        vmClasses::reflect_MagicAccessorImpl_klass());\n+                        vmClasses::reflect_SerializationConstructorAccessorImpl_klass());\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -725,1 +725,1 @@\n-  \/\/ [0] [ @CallerSensitive public sun.reflect.Reflection.getCallerClass ]\n+  \/\/ [0] [ @CallerSensitive public jdk.internal.reflect.Reflection.getCallerClass ]\n@@ -3297,2 +3297,1 @@\n-      if (!ik->is_subclass_of(vmClasses::reflect_MethodAccessorImpl_klass()) &&\n-          !ik->is_subclass_of(vmClasses::reflect_ConstructorAccessorImpl_klass())) {\n+      if (!ik->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -453,2 +453,2 @@\n-  if (vmClasses::reflect_MagicAccessorImpl_klass_is_loaded() &&\n-      current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (vmClasses::reflect_SerializationConstructorAccessorImpl_klass_is_loaded() &&\n+      current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n@@ -667,1 +667,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -669,1 +669,1 @@\n-  if (current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,2 +81,0 @@\n-  offset = reflect_UnsafeStaticFieldAccessorImpl::base_offset();\n-  _filtered_fields->append(new FilteredField(vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass(), offset));\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,1 @@\n-    \/\/ Instance variables for shared functionality between\n-    \/\/ FieldAccessorGenerator and MethodAccessorGenerator\n+    \/\/ Instance variables for shared functionality\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/AccessorGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Constructor;\n-\n-\/** Uses Unsafe.allocateObject() to instantiate classes; only used for\n-    bootstrapping. *\/\n-\n-class BootstrapConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    private final Constructor<?> constructor;\n-\n-    BootstrapConstructorAccessorImpl(Constructor<?> c) {\n-        this.constructor = c;\n-    }\n-\n-    public Object newInstance(Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        try {\n-            return UnsafeFieldAccessorImpl.unsafe.\n-                allocateInstance(constructor.getDeclaringClass());\n-        } catch (InstantiationException e) {\n-            throw new InvocationTargetException(e);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/BootstrapConstructorAccessorImpl.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,5 @@\n-    creating a new class loader which delegates to the one needed in\n-    order for proper resolution of the given bytecodes to occur. *\/\n+ *  creating a new class loader which delegates to the one needed in\n+ *  order for proper resolution of the given bytecodes to occur.\n+ *\n+ *  This is only used to define SerializationConstructorAccessor.\n+ *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ClassDefiner.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Objects;\n-\n-\/** Delegates its invocation to another ConstructorAccessorImpl and can\n-    change its delegate at run time. *\/\n-\n-class DelegatingConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    \/\/ initial non-null delegate\n-    private final ConstructorAccessorImpl initialDelegate;\n-    \/\/ alternative delegate: starts as null;\n-    \/\/ only single change from null -> non-null is guaranteed\n-    @Stable\n-    private ConstructorAccessorImpl altDelegate;\n-\n-    DelegatingConstructorAccessorImpl(ConstructorAccessorImpl delegate) {\n-        initialDelegate = Objects.requireNonNull(delegate);\n-    }\n-\n-    public Object newInstance(Object[] args)\n-      throws InstantiationException,\n-             IllegalArgumentException,\n-             InvocationTargetException\n-    {\n-        return delegate().newInstance(args);\n-    }\n-\n-    private ConstructorAccessorImpl delegate() {\n-        var d = altDelegate;\n-        return  d != null ? d : initialDelegate;\n-    }\n-\n-    void setDelegate(ConstructorAccessorImpl delegate) {\n-        altDelegate = Objects.requireNonNull(delegate);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DelegatingConstructorAccessorImpl.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Objects;\n-\n-\/** Delegates its invocation to another MethodAccessorImpl and can\n-    change its delegate at run time. *\/\n-\n-class DelegatingMethodAccessorImpl extends MethodAccessorImpl {\n-    \/\/ initial non-null delegate\n-    private final MethodAccessorImpl initialDelegate;\n-    \/\/ alternative delegate: starts as null;\n-    \/\/ only single change from null -> non-null is guaranteed\n-    @Stable\n-    private MethodAccessorImpl altDelegate;\n-\n-    DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) {\n-        initialDelegate = Objects.requireNonNull(delegate);\n-    }\n-\n-    @Override\n-    public Object invoke(Object obj, Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        return delegate().invoke(obj, args);\n-    }\n-\n-    @Override\n-    public Object invoke(Object obj, Object[] args, Class<?> caller)\n-            throws IllegalArgumentException, InvocationTargetException\n-    {\n-        return delegate().invoke(obj, args, caller);\n-    }\n-\n-    private MethodAccessorImpl delegate() {\n-        var d = altDelegate;\n-        return  d != null ? d : initialDelegate;\n-    }\n-\n-    void setDelegate(MethodAccessorImpl delegate) {\n-        altDelegate = Objects.requireNonNull(delegate);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DelegatingMethodAccessorImpl.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -306,0 +306,11 @@\n+     *\n+     * Native accessor, i.e. VM reflection implementation, is used if one of\n+     * the following conditions is met:\n+     * 1. during VM early startup and method handle support is fully initialized\n+     * 2. a Java native method\n+     * 3. -Djdk.reflect.useNativeAccessorOnly=true is set\n+     * 4. the member takes a variable number of arguments and the last parameter\n+     *    is an array (see details below)\n+     * 5. the member's method type has an arity >= 255\n+     *\n+     * Otherwise, direct invocation of method handles is used.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.*;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Used only for the first few invocations of a Constructor;\n-    afterward, switches to bytecode-based implementation *\/\n-\n-class NativeConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    private static final Unsafe U = Unsafe.getUnsafe();\n-    private static final long GENERATED_OFFSET\n-        = U.objectFieldOffset(NativeConstructorAccessorImpl.class, \"generated\");\n-\n-    private final Constructor<?> c;\n-    private final DelegatingConstructorAccessorImpl parent;\n-    private int numInvocations;\n-    private volatile int generated;\n-\n-    NativeConstructorAccessorImpl(Constructor<?> c) {\n-        this.c = c;\n-        this.parent = new DelegatingConstructorAccessorImpl(this);\n-    }\n-\n-    public Object newInstance(Object[] args)\n-        throws InstantiationException,\n-               IllegalArgumentException,\n-               InvocationTargetException\n-    {\n-        \/\/ We can't inflate a constructor belonging to a hidden class\n-        \/\/ because that kind of class can't be referred to by name, hence can't\n-        \/\/ be found from the generated bytecode.\n-        if (++numInvocations > ReflectionFactory.inflationThreshold()\n-                && !c.getDeclaringClass().isHidden()\n-                && generated == 0\n-                && U.compareAndSetInt(this, GENERATED_OFFSET, 0, 1)) {\n-            try {\n-                ConstructorAccessorImpl acc = (ConstructorAccessorImpl)\n-                    new MethodAccessorGenerator().\n-                        generateConstructor(c.getDeclaringClass(),\n-                                            c.getParameterTypes(),\n-                                            c.getModifiers());\n-                parent.setDelegate(acc);\n-            } catch (Throwable t) {\n-                \/\/ Throwable happens in generateConstructor, restore generated to 0\n-                generated = 0;\n-                throw t;\n-            }\n-        }\n-\n-        return newInstance0(c, args);\n-    }\n-\n-    DelegatingConstructorAccessorImpl getParent() {\n-        return parent;\n-    }\n-\n-    private static native Object newInstance0(Constructor<?> c, Object[] args)\n-        throws InstantiationException,\n-               IllegalArgumentException,\n-               InvocationTargetException;\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/NativeConstructorAccessorImpl.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.*;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Used only for the first few invocations of a Method; afterward,\n-    switches to bytecode-based implementation *\/\n-\n-class NativeMethodAccessorImpl extends MethodAccessorImpl {\n-     private static final Unsafe U = Unsafe.getUnsafe();\n-     private static final long GENERATED_OFFSET\n-        = U.objectFieldOffset(NativeMethodAccessorImpl.class, \"generated\");\n-\n-    private final Method method;\n-    private final DelegatingMethodAccessorImpl parent;\n-    private int numInvocations;\n-    private volatile int generated;\n-\n-    NativeMethodAccessorImpl(Method method) {\n-        this.method = method;\n-        this.parent = new DelegatingMethodAccessorImpl(this);\n-    }\n-\n-    public Object invoke(Object obj, Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        \/\/ We can't inflate methods belonging to hidden classes because\n-        \/\/ that kind of class can't be referred to by name, hence can't be\n-        \/\/ found from the generated bytecode.\n-        if (++numInvocations > ReflectionFactory.inflationThreshold()\n-                && !method.getDeclaringClass().isHidden()\n-                && generated == 0\n-                && U.compareAndSetInt(this, GENERATED_OFFSET, 0, 1)) {\n-            try {\n-                MethodAccessorImpl acc = (MethodAccessorImpl)\n-                    new MethodAccessorGenerator().\n-                        generateMethod(method.getDeclaringClass(),\n-                                       method.getName(),\n-                                       method.getParameterTypes(),\n-                                       method.getReturnType(),\n-                                       method.getModifiers());\n-                parent.setDelegate(acc);\n-            } catch (Throwable t) {\n-                \/\/ Throwable happens in generateMethod, restore generated to 0\n-                generated = 0;\n-                throw t;\n-            }\n-        }\n-\n-        return invoke0(method, obj, args);\n-    }\n-\n-    DelegatingMethodAccessorImpl getParent() {\n-        return parent;\n-    }\n-\n-    private static native Object invoke0(Method m, Object obj, Object[] args);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/NativeMethodAccessorImpl.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -144,5 +144,1 @@\n-        if (useFieldHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        } else {\n-            return UnsafeFieldAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        }\n+        return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n@@ -158,23 +154,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n-        } else {\n-            if (noInflation() && !method.getDeclaringClass().isHidden()) {\n-                return generateMethodAccessor(method);\n-            } else {\n-                NativeMethodAccessorImpl acc = new NativeMethodAccessorImpl(method);\n-                return acc.getParent();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Generate the MethodAccessor that invokes the given method with\n-     * bytecode invocation.\n-     *\/\n-    static MethodAccessorImpl generateMethodAccessor(Method method) {\n-        return (MethodAccessorImpl)new MethodAccessorGenerator()\n-                .generateMethod(method.getDeclaringClass(),\n-                                method.getName(),\n-                                method.getParameterTypes(),\n-                                method.getReturnType(),\n-                                method.getModifiers());\n+        return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n@@ -199,20 +173,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newConstructorAccessor(c);\n-        } else {\n-            \/\/ Bootstrapping issue: since we use Class.newInstance() in\n-            \/\/ the ConstructorAccessor generation process, we have to\n-            \/\/ break the cycle here.\n-            if (Reflection.isSubclassOf(declaringClass, ConstructorAccessorImpl.class)) {\n-                return new BootstrapConstructorAccessorImpl(c);\n-            }\n-\n-            if (noInflation() && !c.getDeclaringClass().isHidden()) {\n-                return new MethodAccessorGenerator().\n-                        generateConstructor(c.getDeclaringClass(),\n-                                            c.getParameterTypes(),\n-                                            c.getModifiers());\n-            } else {\n-                NativeConstructorAccessorImpl acc = new NativeConstructorAccessorImpl(c);\n-                return acc.getParent();\n-            }\n-        }\n+        return MethodHandleAccessorFactory.newConstructorAccessor(c);\n@@ -419,1 +374,1 @@\n-        ConstructorAccessor acc = new MethodAccessorGenerator().\n+        ConstructorAccessor acc = new SerializationConstructorAccessorGenerator().\n@@ -588,18 +543,4 @@\n-    \/\/ Package-private to be accessible to NativeMethodAccessorImpl\n-    \/\/ and NativeConstructorAccessorImpl\n-    static int inflationThreshold() {\n-        return config().inflationThreshold;\n-    }\n-\n-    static boolean noInflation() {\n-        return config().noInflation;\n-    }\n-\n-    static boolean useMethodHandleAccessor() {\n-        return (config().useDirectMethodHandle & METHOD_MH_ACCESSOR) == METHOD_MH_ACCESSOR;\n-    }\n-\n-    static boolean useFieldHandleAccessor() {\n-        return (config().useDirectMethodHandle & FIELD_MH_ACCESSOR) == FIELD_MH_ACCESSOR;\n-    }\n-\n+    \/*\n+     * If -Djdk.reflect.useNativeAccessorOnly is set, use the native accessor only.\n+     * For testing purpose only.\n+     *\/\n@@ -614,5 +555,0 @@\n-    \/\/ New implementation uses direct invocation of method handles\n-    private static final int METHOD_MH_ACCESSOR = 0x1;\n-    private static final int FIELD_MH_ACCESSOR = 0x2;\n-    private static final int ALL_MH_ACCESSORS = METHOD_MH_ACCESSOR | FIELD_MH_ACCESSOR;\n-\n@@ -630,15 +566,1 @@\n-    \/\/ \"Inflation\" mechanism. Loading bytecodes to implement\n-    \/\/ Method.invoke() and Constructor.newInstance() currently costs\n-    \/\/ 3-4x more than an invocation via native code for the first\n-    \/\/ invocation (though subsequent invocations have been benchmarked\n-    \/\/ to be over 20x faster). Unfortunately this cost increases\n-    \/\/ startup time for certain applications that use reflection\n-    \/\/ intensively (but only once per class) to bootstrap themselves.\n-    \/\/ To avoid this penalty we reuse the existing JVM entry points\n-    \/\/ for the first few invocations of Methods and Constructors and\n-    \/\/ then switch to the bytecode-based implementations.\n-\n-    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ noInflation\n-                                                            15, \/\/ inflationThreshold\n-                                                            ALL_MH_ACCESSORS, \/\/ useDirectMethodHandle\n-                                                            false, \/\/ useNativeAccessorOnly\n+    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ useNativeAccessorOnly\n@@ -658,4 +580,1 @@\n-    private record Config(boolean noInflation,\n-                          int inflationThreshold,\n-                          int useDirectMethodHandle,\n-                          boolean useNativeAccessorOnly,\n+    private record Config(boolean useNativeAccessorOnly,\n@@ -671,3 +590,1 @@\n-        \/\/ Defer initialization until module system is initialized so as\n-        \/\/ to avoid inflation and spinning bytecode in unnamed modules\n-        \/\/ during early startup.\n+        \/\/ Always use the default configuration until the module system is initialized.\n@@ -684,6 +601,0 @@\n-        boolean noInflation = DEFAULT_CONFIG.noInflation;\n-        int inflationThreshold = DEFAULT_CONFIG.inflationThreshold;\n-        int useDirectMethodHandle = DEFAULT_CONFIG.useDirectMethodHandle;\n-        boolean useNativeAccessorOnly = DEFAULT_CONFIG.useNativeAccessorOnly;\n-        boolean disableSerialConstructorChecks = DEFAULT_CONFIG.disableSerialConstructorChecks;\n-\n@@ -691,29 +602,3 @@\n-        String val = props.getProperty(\"sun.reflect.noInflation\");\n-        if (val != null && val.equals(\"true\")) {\n-            noInflation = true;\n-        }\n-\n-        val = props.getProperty(\"sun.reflect.inflationThreshold\");\n-        if (val != null) {\n-            try {\n-                inflationThreshold = Integer.parseInt(val);\n-            } catch (NumberFormatException e) {\n-                throw new RuntimeException(\"Unable to parse property sun.reflect.inflationThreshold\", e);\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useDirectMethodHandle\");\n-        if (val != null) {\n-            if (val.equals(\"false\")) {\n-                useDirectMethodHandle = 0;\n-            } else if (val.equals(\"methods\")) {\n-                useDirectMethodHandle = METHOD_MH_ACCESSOR;\n-            } else if (val.equals(\"fields\")) {\n-                useDirectMethodHandle = FIELD_MH_ACCESSOR;\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useNativeAccessorOnly\");\n-        if (val != null && val.equals(\"true\")) {\n-            useNativeAccessorOnly = true;\n-        }\n-\n-        disableSerialConstructorChecks =\n+        boolean useNativeAccessorOnly =\n+            \"true\".equals(props.getProperty(\"jdk.reflect.useNativeAccessorOnly\"));\n+        boolean disableSerialConstructorChecks =\n@@ -722,5 +607,1 @@\n-        return new Config(noInflation,\n-                          inflationThreshold,\n-                          useDirectMethodHandle,\n-                          useNativeAccessorOnly,\n-                          disableSerialConstructorChecks);\n+        return new Config(useNativeAccessorOnly, disableSerialConstructorChecks);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":15,"deletions":134,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,7 +31,0 @@\n-\/** Generator for jdk.internal.reflect.MethodAccessor and\n-    jdk.internal.reflect.ConstructorAccessor objects using bytecodes to\n-    implement reflection. A java.lang.reflect.Method or\n-    java.lang.reflect.Constructor object can delegate its invoke or\n-    newInstance method to an accessor using native code or to one\n-    generated by this class. (Methods and Constructors were merged\n-    together in this class to ensure maximum code sharing.) *\/\n@@ -39,1 +32,5 @@\n-class MethodAccessorGenerator extends AccessorGenerator {\n+\/** Generator for jdk.internal.reflect.SerializationConstructorAccessorImpl\n+    objects using bytecodes to implement a constructor for serialization\n+    returned by ReflectionFactory::newConstructorForSerialization. *\/\n+\n+class SerializationConstructorAccessorGenerator extends AccessorGenerator {\n@@ -64,33 +61,1 @@\n-    MethodAccessorGenerator() {\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public MethodAccessor generateMethod(Class<?> declaringClass,\n-                                         String   name,\n-                                         Class<?>[] parameterTypes,\n-                                         Class<?>   returnType,\n-                                         int modifiers)\n-    {\n-        return (MethodAccessor) generate(declaringClass,\n-                                         name,\n-                                         parameterTypes,\n-                                         returnType,\n-                                         modifiers,\n-                                         false,\n-                                         false,\n-                                         null);\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public ConstructorAccessor generateConstructor(Class<?> declaringClass,\n-                                                   Class<?>[] parameterTypes,\n-                                                   int modifiers)\n-    {\n-        return (ConstructorAccessor) generate(declaringClass,\n-                                              \"<init>\",\n-                                              parameterTypes,\n-                                              Void.TYPE,\n-                                              modifiers,\n-                                              true,\n-                                              false,\n-                                              null);\n+    SerializationConstructorAccessorGenerator() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/SerializationConstructorAccessorGenerator.java","additions":7,"deletions":42,"binary":false,"changes":49,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","status":"renamed"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeBooleanFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeBooleanFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getBoolean(obj, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBoolean(obj, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBoolean(obj, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeBooleanFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeByteFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeByteFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getByte(obj, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByte(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByte(obj, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeByteFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeCharacterFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeCharacterFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getChar(obj, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putChar(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putChar(obj, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeCharacterFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,164 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeDoubleFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeDoubleFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getDouble(obj, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDouble(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDouble(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDouble(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDouble(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDouble(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDouble(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDouble(obj, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDouble(obj, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeDoubleFieldAccessorImpl.java","additions":0,"deletions":164,"binary":false,"changes":164,"status":"deleted"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-\n-class UnsafeFieldAccessorFactory {\n-    static FieldAccessor newFieldAccessor(Field field, boolean isReadOnly) {\n-        Class<?> type = field.getType();\n-        boolean isStatic = Modifier.isStatic(field.getModifiers());\n-        boolean isFinal = Modifier.isFinal(field.getModifiers());\n-        boolean isVolatile = Modifier.isVolatile(field.getModifiers());\n-        boolean isQualified = isFinal || isVolatile;\n-        if (isStatic) {\n-            \/\/ This code path does not guarantee that the field's\n-            \/\/ declaring class has been initialized, but it must be\n-            \/\/ before performing reflective operations.\n-            UnsafeFieldAccessorImpl.unsafe.ensureClassInitialized(field.getDeclaringClass());\n-\n-            if (!isQualified) {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeStaticBooleanFieldAccessorImpl(field);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeStaticByteFieldAccessorImpl(field);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeStaticShortFieldAccessorImpl(field);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeStaticCharacterFieldAccessorImpl(field);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeStaticIntegerFieldAccessorImpl(field);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeStaticLongFieldAccessorImpl(field);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeStaticFloatFieldAccessorImpl(field);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeStaticDoubleFieldAccessorImpl(field);\n-                } else {\n-                    return new UnsafeStaticObjectFieldAccessorImpl(field);\n-                }\n-            } else {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeQualifiedStaticBooleanFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeQualifiedStaticByteFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeQualifiedStaticShortFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeQualifiedStaticCharacterFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeQualifiedStaticIntegerFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeQualifiedStaticLongFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeQualifiedStaticFloatFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeQualifiedStaticDoubleFieldAccessorImpl(field, isReadOnly);\n-                } else {\n-                    return new UnsafeQualifiedStaticObjectFieldAccessorImpl(field, isReadOnly);\n-                }\n-            }\n-        } else {\n-            if (!isQualified) {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeBooleanFieldAccessorImpl(field);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeByteFieldAccessorImpl(field);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeShortFieldAccessorImpl(field);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeCharacterFieldAccessorImpl(field);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeIntegerFieldAccessorImpl(field);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeLongFieldAccessorImpl(field);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeFloatFieldAccessorImpl(field);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeDoubleFieldAccessorImpl(field);\n-                } else {\n-                    return new UnsafeObjectFieldAccessorImpl(field);\n-                }\n-            } else {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeQualifiedBooleanFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeQualifiedByteFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeQualifiedShortFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeQualifiedCharacterFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeQualifiedIntegerFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeQualifiedLongFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeQualifiedFloatFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeQualifiedDoubleFieldAccessorImpl(field, isReadOnly);\n-                } else {\n-                    return new UnsafeQualifiedObjectFieldAccessorImpl(field, isReadOnly);\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFieldAccessorFactory.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors. The\n-    observation is that there are only nine types of fields from the\n-    standpoint of reflection code: the eight primitive types and\n-    Object. Using class Unsafe instead of generated bytecodes saves\n-    memory and loading time for the dynamically-generated\n-    FieldAccessors. *\/\n-\n-abstract class UnsafeFieldAccessorImpl extends FieldAccessorImpl {\n-    static final Unsafe unsafe = Unsafe.getUnsafe();\n-\n-    protected final long    fieldOffset;\n-    protected final boolean isFinal;\n-\n-    UnsafeFieldAccessorImpl(Field field) {\n-        super(field);\n-        int mods = field.getModifiers();\n-        this.isFinal = Modifier.isFinal(mods);\n-        if (Modifier.isStatic(mods))\n-            fieldOffset = unsafe.staticFieldOffset(field);\n-        else\n-            fieldOffset = unsafe.objectFieldOffset(field);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFieldAccessorImpl.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,160 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeFloatFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeFloatFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getFloat(obj, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloat(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloat(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloat(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloat(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloat(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloat(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloat(obj, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFloatFieldAccessorImpl.java","additions":0,"deletions":160,"binary":false,"changes":160,"status":"deleted"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeIntegerFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeIntegerFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getInt(obj, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putInt(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putInt(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putInt(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putInt(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putInt(obj, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeIntegerFieldAccessorImpl.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -1,156 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeLongFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeLongFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getLong(obj, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLong(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLong(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLong(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLong(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLong(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLong(obj, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeLongFieldAccessorImpl.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeObjectFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeObjectFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getReference(obj, fieldOffset);\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value != null) {\n-            if (!field.getType().isInstance(value)) {\n-                throwSetIllegalArgumentException(value);\n-            }\n-        }\n-        unsafe.putReference(obj, fieldOffset, value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeObjectFieldAccessorImpl.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedBooleanFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedBooleanFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getBooleanVolatile(obj, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBooleanVolatile(obj, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBooleanVolatile(obj, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedBooleanFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedByteFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedByteFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getByteVolatile(obj, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByteVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByteVolatile(obj, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedByteFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedCharacterFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedCharacterFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getCharVolatile(obj, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putCharVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putCharVolatile(obj, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedCharacterFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedDoubleFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedDoubleFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getDoubleVolatile(obj, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDoubleVolatile(obj, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedDoubleFieldAccessorImpl.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import jdk.internal.misc.Unsafe;\n-\n-\/**\n- * Base class for jdk.internal.misc.Unsafe-based FieldAccessors for fields with\n- * final or volatile qualifiers. These differ from unqualified\n- * versions in that (1) they check for read-only status (2) they use\n- * the volatile forms of Unsafe get\/put methods. (When accessed via\n- * reflection, finals act as slightly \"lighter\" forms of volatiles. So\n- * the volatile forms are heavier than necessary in terms of\n- * underlying reordering rules and memory barriers, but preserve\n- * correctness.)\n- *\/\n-\n-abstract class UnsafeQualifiedFieldAccessorImpl\n-    extends UnsafeFieldAccessorImpl\n-{\n-    protected final boolean isReadOnly;\n-\n-    UnsafeQualifiedFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field);\n-        this.isReadOnly = isReadOnly;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedFieldAccessorImpl.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,162 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedFloatFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedFloatFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getFloatVolatile(obj, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloatVolatile(obj, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedFloatFieldAccessorImpl.java","additions":0,"deletions":162,"binary":false,"changes":162,"status":"deleted"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedIntegerFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedIntegerFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getIntVolatile(obj, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putIntVolatile(obj, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedIntegerFieldAccessorImpl.java","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"},{"patch":"@@ -1,158 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedLongFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedLongFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getLongVolatile(obj, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLongVolatile(obj, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedLongFieldAccessorImpl.java","additions":0,"deletions":158,"binary":false,"changes":158,"status":"deleted"},{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedObjectFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedObjectFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getReferenceVolatile(obj, fieldOffset);\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value != null) {\n-            if (!field.getType().isInstance(value)) {\n-                throwSetIllegalArgumentException(value);\n-            }\n-        }\n-        unsafe.putReferenceVolatile(obj, fieldOffset, value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedObjectFieldAccessorImpl.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedShortFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedShortFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getShortVolatile(obj, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShortVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShortVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShortVolatile(obj, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedShortFieldAccessorImpl.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticBooleanFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticBooleanFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        return unsafe.getBooleanVolatile(base, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBooleanVolatile(base, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBooleanVolatile(base, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticBooleanFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticByteFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticByteFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        return unsafe.getByteVolatile(base, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByteVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByteVolatile(base, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticByteFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticCharacterFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticCharacterFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        return unsafe.getCharVolatile(base, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putCharVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putCharVolatile(base, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticCharacterFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,163 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticDoubleFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticDoubleFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return unsafe.getDoubleVolatile(base, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDoubleVolatile(base, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticDoubleFieldAccessorImpl.java","additions":0,"deletions":163,"binary":false,"changes":163,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.security.AccessController;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors for final or\n-    static volatile fields.  *\/\n-\n-abstract class UnsafeQualifiedStaticFieldAccessorImpl\n-    extends UnsafeStaticFieldAccessorImpl\n-{\n-    protected final boolean isReadOnly;\n-\n-    UnsafeQualifiedStaticFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field);\n-        this.isReadOnly = isReadOnly;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticFieldAccessorImpl.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticFloatFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticFloatFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return unsafe.getFloatVolatile(base, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloatVolatile(base, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticFloatFieldAccessorImpl.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticIntegerFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticIntegerFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return unsafe.getIntVolatile(base, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putIntVolatile(base, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticIntegerFieldAccessorImpl.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticLongFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticLongFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return unsafe.getLongVolatile(base, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLongVolatile(base, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticLongFieldAccessorImpl.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticObjectFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticObjectFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return unsafe.getReferenceVolatile(base, fieldOffset);\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value != null) {\n-            if (!field.getType().isInstance(value)) {\n-                throwSetIllegalArgumentException(value);\n-            }\n-        }\n-        unsafe.putReferenceVolatile(base, fieldOffset, value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticObjectFieldAccessorImpl.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticShortFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticShortFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return unsafe.getShortVolatile(base, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShortVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShortVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShortVolatile(base, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticShortFieldAccessorImpl.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeShortFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeShortFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getShort(obj, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShort(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShort(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShort(obj, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeShortFieldAccessorImpl.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticBooleanFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticBooleanFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        return unsafe.getBoolean(base, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBoolean(base, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBoolean(base, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticBooleanFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticByteFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticByteFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        return unsafe.getByte(base, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByte(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByte(base, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticByteFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticCharacterFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticCharacterFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        return unsafe.getChar(base, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putChar(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putChar(base, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticCharacterFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticDoubleFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticDoubleFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return unsafe.getDouble(base, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDouble(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDouble(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDouble(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDouble(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDouble(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDouble(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDouble(base, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDouble(base, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticDoubleFieldAccessorImpl.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.util.Set;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors for static\n-    fields. The observation is that there are only nine types of\n-    fields from the standpoint of reflection code: the eight primitive\n-    types and Object. Using class Unsafe instead of generated\n-    bytecodes saves memory and loading time for the\n-    dynamically-generated FieldAccessors. *\/\n-\n-abstract class UnsafeStaticFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    static {\n-        Reflection.registerFieldsToFilter(UnsafeStaticFieldAccessorImpl.class,\n-                                          Set.of(\"base\"));\n-    }\n-\n-    protected final Object base; \/\/ base\n-\n-    UnsafeStaticFieldAccessorImpl(Field field) {\n-        super(field);\n-        base = unsafe.staticFieldBase(field);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticFieldAccessorImpl.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticFloatFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticFloatFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return unsafe.getFloat(base, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloat(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloat(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloat(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloat(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloat(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloat(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloat(base, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticFloatFieldAccessorImpl.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticIntegerFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticIntegerFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return unsafe.getInt(base, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putInt(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putInt(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putInt(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putInt(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putInt(base, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticIntegerFieldAccessorImpl.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticLongFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticLongFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return unsafe.getLong(base, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLong(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLong(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLong(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLong(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLong(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLong(base, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticLongFieldAccessorImpl.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticObjectFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticObjectFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return unsafe.getReference(base, fieldOffset);\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value != null) {\n-            if (!field.getType().isInstance(value)) {\n-                throwSetIllegalArgumentException(value);\n-            }\n-        }\n-        unsafe.putReference(base, fieldOffset, value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticObjectFieldAccessorImpl.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticShortFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticShortFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return unsafe.getShort(base, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShort(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShort(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShort(base, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticShortFieldAccessorImpl.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-#include \"jdk_internal_reflect_NativeConstructorAccessorImpl.h\"\n-#include \"jdk_internal_reflect_NativeMethodAccessorImpl.h\"\n@@ -32,12 +30,0 @@\n-JNIEXPORT jobject JNICALL Java_jdk_internal_reflect_NativeMethodAccessorImpl_invoke0\n-(JNIEnv *env, jclass unused, jobject m, jobject obj, jobjectArray args)\n-{\n-    return JVM_InvokeMethod(env, m, obj, args);\n-}\n-\n-JNIEXPORT jobject JNICALL Java_jdk_internal_reflect_NativeConstructorAccessorImpl_newInstance0\n-(JNIEnv *env, jclass unused, jobject c, jobjectArray args)\n-{\n-    return JVM_NewInstanceFromConstructor(env, c, args);\n-}\n-\n","filename":"src\/java.base\/share\/native\/libjava\/NativeAccessors.c","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-            aClass = Class.forName(\"jdk.internal.reflect.NativeMethodAccessorImpl\");\n+            aClass = Class.forName(\"jdk.internal.reflect.DirectMethodHandleAccessor$NativeAccessor\");\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MethodIsIgnoredBySecurityStackWalkTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestInterfaceMethodSelection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/methodSelection\/TestInterfaceMethodSelection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestMethodSelection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/methodSelection\/TestMethodSelection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateConstructors\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateMethods\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflectionHierarchy\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateMethods\/TestReflectionHierarchy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateStaticMethods\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,2 +49,0 @@\n-            \"jdk.internal.reflect.NativeMethodAccessorImpl\",\n-            \"jdk.internal.reflect.DelegatingMethodAccessorImpl\",\n","filename":"test\/jdk\/java\/lang\/StackWalker\/MultiThreadStackWalk.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-            \"jdk.internal.reflect.NativeMethodAccessorImpl\",\n-            \"jdk.internal.reflect.DelegatingMethodAccessorImpl\",\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackWalkTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true RepetitiveLambdaSerialization\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/RepetitiveLambdaSerialization.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true ReflectiveLookupTest\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/ReflectiveLookupTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @run testng\/othervm -Djdk.reflect.useDirectMethodHandle=true NegativeTest\n- * @run testng\/othervm -Djdk.reflect.useDirectMethodHandle=false NegativeTest\n+ * @run testng NegativeTest\n","filename":"test\/jdk\/java\/lang\/reflect\/Field\/NegativeTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @run junit\/othervm -Djdk.reflect.useDirectMethodHandle=false CallerSensitiveMethodInvoke\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/CallerSensitiveMethodInvoke.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestMethodReflectValueOf\n- * @run main\/othervm -Dsun.reflect.noInflation=false -Dsun.reflect.inflationThreshold=500 TestMethodReflectValueOf\n+ * @run main\/othervm TestMethodReflectValueOf\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/invoke\/TestMethodReflectValueOf.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=true -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n+ * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n@@ -32,7 +32,0 @@\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.reflect\n- * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n- *\/\n-\n-\n@@ -58,3 +51,0 @@\n-    static final boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n-\n-\n@@ -497,4 +487,2 @@\n-            new Object[] {\"public_static_I_I\", int.class, null, new Object[]{12, 13}, null,\n-                          newImpl ? wrong_argument_count_no_details : wrong_argument_count},\n-            new Object[] {\"public_I_I\",        int.class, inst, new Object[]{12, 13}, null,\n-                          newImpl ? wrong_argument_count_no_details : wrong_argument_count},\n+            new Object[] {\"public_static_I_I\", int.class, null, new Object[]{12, 13}, null, wrong_argument_count_no_details},\n+            new Object[] {\"public_I_I\",        int.class, inst, new Object[]{12, 13}, null, wrong_argument_count_no_details},\n@@ -504,4 +492,2 @@\n-            new Object[] {\"public_static_I_V\", int.class, null, null, null,\n-                          newImpl ? wrong_argument_count_no_details : null_argument},\n-            new Object[] {\"public_static_I_V\", int.class, null, new Object[]{null}, null,\n-                          newImpl ? null_argument_value_npe : null_argument_value},\n+            new Object[] {\"public_static_I_V\", int.class, null, null, null, wrong_argument_count_no_details},\n+            new Object[] {\"public_static_I_V\", int.class, null, new Object[]{null}, null, null_argument_value_npe},\n@@ -510,2 +496,1 @@\n-            new Object[] {\"public_I_I\", int.class, inst, new Object[]{null}, null,\n-                          newImpl ? null_argument_value_npe : null_argument_value},\n+            new Object[] {\"public_I_I\", int.class, inst, new Object[]{null}, null, null_argument_value_npe},\n@@ -527,6 +512,3 @@\n-                new Object[]{\"public_static_V_L3\", params_L3, null, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[0], null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{\"public_V_L5\", params_L5, inst, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{\"public_static_V_L3\", params_L3, null, null, null, wrong_argument_count_zero_args},\n+                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[0], null, wrong_argument_count_zero_args},\n+                new Object[]{\"public_V_L5\", params_L5, inst, null, null, wrong_argument_count_zero_args},\n@@ -618,4 +600,2 @@\n-                new Object[]{params_L3, new Object[]{}, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{params_L4, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{params_L3, new Object[]{}, null, wrong_argument_count_zero_args},\n+                new Object[]{params_L4, null, null, wrong_argument_count_zero_args},\n@@ -671,1 +651,0 @@\n-        boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n@@ -677,4 +656,2 @@\n-                new Object[]{\"s\", wrongInst, \"test\",\n-                        newImpl ? cannot_get_field : cannot_set_field},\n-                new Object[]{\"b\", wrongInst, 0,\n-                        newImpl ? cannot_get_field : cannot_set_field},\n+                new Object[]{\"s\", wrongInst, \"test\", cannot_get_field},\n+                new Object[]{\"b\", wrongInst, 0, cannot_get_field},\n","filename":"test\/jdk\/java\/lang\/reflect\/MethodHandleAccessorsTest.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run testng\/othervm -Dsun.reflect.noInflation=true CustomLoaderTest\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/CustomLoaderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=true GetCallerClassTest\n+ * @run main\/othervm -Xbootclasspath\/a:bcp GetCallerClassTest\n@@ -43,19 +43,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=true -Djdk.reflect.useNativeAccessorOnly=true GetCallerClassTest\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify NativeMethodAccessorImpl\n- * @modules java.base\/jdk.internal.reflect\n- * @build SetupGetCallerClass boot.GetCallerClass\n- * @run driver SetupGetCallerClass\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=false -Dsun.reflect.noInflation=false GetCallerClassTest\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify the old generated MethodAccessor\n- * @modules java.base\/jdk.internal.reflect\n- * @build SetupGetCallerClass boot.GetCallerClass\n- * @run driver SetupGetCallerClass\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=false -Dsun.reflect.noInflation=true GetCallerClassTest\n+ * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useNativeAccessorOnly=true GetCallerClassTest\n","filename":"test\/jdk\/jdk\/internal\/reflect\/Reflection\/GetCallerClassTest.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"}]}