{"files":[{"patch":"@@ -126,1 +126,5 @@\n-        if (!(publicKey instanceof RSAPublicKey)) {\n+        if (publicKey instanceof RSAPublicKey rsaPubKey) {\n+            this.pubKey = (RSAPublicKey) isPublicKeyValid(rsaPubKey);\n+            this.privKey = null;\n+            resetDigest();\n+        } else {\n@@ -129,3 +133,0 @@\n-        this.pubKey = (RSAPublicKey) isValid((RSAKey)publicKey);\n-        this.privKey = null;\n-        resetDigest();\n@@ -145,1 +146,7 @@\n-        if (!(privateKey instanceof RSAPrivateKey)) {\n+        if (privateKey instanceof RSAPrivateKey rsaPrivateKey) {\n+            this.privKey = (RSAPrivateKey) isPrivateKeyValid(rsaPrivateKey);\n+            this.pubKey = null;\n+            this.random =\n+                    (random == null ? JCAUtil.getSecureRandom() : random);\n+            resetDigest();\n+        } else {\n@@ -148,5 +155,0 @@\n-        this.privKey = (RSAPrivateKey) isValid((RSAKey)privateKey);\n-        this.pubKey = null;\n-        this.random =\n-            (random == null? JCAUtil.getSecureRandom() : random);\n-        resetDigest();\n@@ -204,0 +206,41 @@\n+    \/**\n+     * Validate the specified RSAPrivateKey\n+     *\/\n+    private RSAKey isPrivateKeyValid(RSAPrivateKey prKey)  throws InvalidKeyException {\n+        try {\n+            if (prKey instanceof RSAPrivateCrtKey crtKey) {\n+                RSAPrivateCrtKeyImpl.isValid(crtKey);\n+                RSAKeyFactory.checkRSAProviderKeyLengths(\n+                        crtKey.getModulus().bitLength(),\n+                        crtKey.getPublicExponent());\n+            } else {\n+                RSAKeyFactory.checkRSAProviderKeyLengths(\n+                        prKey.getModulus().bitLength(),\n+                        null);\n+            }\n+        } catch (InvalidKeyException ikEx) {\n+            throw ikEx;\n+        } catch (Exception e) {\n+            throw new InvalidKeyException(\n+                    \"Can not access private key components\", e);\n+        }\n+        return isValid(prKey);\n+    }\n+\n+    \/**\n+     * Validate the specified RSAPublicKey\n+     *\/\n+    private RSAKey isPublicKeyValid(RSAPublicKey pKey)  throws InvalidKeyException {\n+        try {\n+            RSAKeyFactory.checkRSAProviderKeyLengths(\n+                    pKey.getModulus().bitLength(),\n+                    pKey.getPublicExponent());\n+        } catch (InvalidKeyException ikEx) {\n+            throw ikEx;\n+        } catch (Exception e) {\n+            throw new InvalidKeyException(\n+                    \"Can not access public key components\", e);\n+        }\n+        return isValid(pKey);\n+    }\n+\n@@ -236,19 +279,0 @@\n-        \/\/ validate key attributes\n-        try {\n-            if (rsaKey.getModulus().signum() == 0 ||\n-                (rsaKey instanceof RSAPrivateKey rsaPrKey &&\n-                    (rsaPrKey.getPrivateExponent().signum() == 0 ||\n-                        (rsaPrKey instanceof RSAPrivateCrtKey crtKey &&\n-                            (crtKey.getPrimeP().signum() == 0 ||\n-                             crtKey.getPrimeQ().signum() == 0 ||\n-                             crtKey.getPrimeExponentP().signum() == 0 ||\n-                             crtKey.getPrimeExponentQ().signum() == 0 ||\n-                             crtKey.getCrtCoefficient().signum() == 0 ||\n-                             crtKey.getPublicExponent().signum() == 0 )))) ||\n-                (rsaKey instanceof RSAPublicKey rsaPubKey &&\n-                    rsaPubKey.getPublicExponent().signum() == 0)) {\n-                throw new InvalidKeyException(\"Invalid key attributes\");\n-            }\n-        } catch(Exception ex) {\n-            throw new InvalidKeyException(\"Invalid key attributes\", ex);\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPSSSignature.java","additions":53,"deletions":29,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -94,6 +94,3 @@\n-            if ((key.getPublicExponent().signum() == 0) ||\n-                (key.getPrimeExponentP().signum() == 0) ||\n-                (key.getPrimeExponentQ().signum() == 0) ||\n-                (key.getPrimeP().signum() == 0) ||\n-                (key.getPrimeQ().signum() == 0) ||\n-                (key.getCrtCoefficient().signum() == 0)) {\n+            try {\n+                return isValid(key);\n+            } catch (InvalidKeyException ikEx) {\n@@ -102,2 +99,0 @@\n-            } else {\n-                return key;\n@@ -127,0 +122,17 @@\n+    \/**\n+     * Validate if all CRT-specific components are available.\n+     *\/\n+    static RSAPrivateCrtKey isValid(RSAPrivateCrtKey key)\n+            throws InvalidKeyException {\n+        if ((key.getPublicExponent().signum() == 0) ||\n+            (key.getPrimeExponentP().signum() == 0) ||\n+            (key.getPrimeExponentQ().signum() == 0) ||\n+            (key.getPrimeP().signum() == 0) ||\n+            (key.getPrimeQ().signum() == 0) ||\n+            (key.getCrtCoefficient().signum() == 0)) {\n+            throw new InvalidKeyException(\n+                    \"Some of the CRT-specific components are not available\");\n+        }\n+        return key;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateCrtKeyImpl.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}