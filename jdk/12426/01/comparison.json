{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm ThreadDumpToFileTest\n+ * @run junit\/othervm ThreadDumpToFileTest\n@@ -40,2 +40,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -43,1 +43,1 @@\n-public class ThreadDumpToFileTest {\n+class ThreadDumpToFileTest {\n@@ -49,1 +49,1 @@\n-    public void testThreadDump() throws IOException {\n+    void testThreadDump() throws IOException {\n@@ -58,1 +58,1 @@\n-    public void testPlainThreadDump() throws IOException {\n+    void testPlainThreadDump() throws IOException {\n@@ -67,1 +67,1 @@\n-    public void testJsonThreadDump() throws IOException {\n+    void testJsonThreadDump() throws IOException {\n@@ -88,1 +88,1 @@\n-    public void testDoNotOverwriteFile() throws IOException {\n+    void testDoNotOverwriteFile() throws IOException {\n@@ -95,1 +95,1 @@\n-        assertEquals(Files.readString(file), \"xxx\");\n+        assertEquals(\"xxx\", Files.readString(file));\n@@ -102,1 +102,1 @@\n-    public void testOverwriteFile() throws IOException {\n+    void testOverwriteFile() throws IOException {\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/thread\/ThreadDumpToFileTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,4 @@\n- * @run testng\/othervm DumpThreads\n- * @run testng\/othervm -Djdk.trackAllThreads DumpThreads\n- * @run testng\/othervm -Djdk.trackAllThreads=true DumpThreads\n- * @run testng\/othervm -Djdk.trackAllThreadds=false DumpThreads\n+ * @run junit\/othervm DumpThreads\n+ * @run junit\/othervm -Djdk.trackAllThreads DumpThreads\n+ * @run junit\/othervm -Djdk.trackAllThreads=true DumpThreads\n+ * @run junit\/othervm -Djdk.trackAllThreadds=false DumpThreads\n@@ -50,2 +50,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-public class DumpThreads {\n+class DumpThreads {\n@@ -64,1 +64,1 @@\n-    public void testPlainText() throws Exception {\n+    void testPlainText() throws Exception {\n@@ -101,1 +101,1 @@\n-    public void testJson() throws Exception {\n+    void testJson() throws Exception {\n@@ -121,1 +121,1 @@\n-                assertEquals(threadDump.runtimeVersion(), Runtime.version().toString());\n+                assertEquals(Runtime.version().toString(), threadDump.runtimeVersion());\n@@ -153,1 +153,1 @@\n-    public void testFileAlreadyExsists() throws Exception {\n+    void testFileAlreadyExsists() throws Exception {\n@@ -166,1 +166,1 @@\n-    public void testRelativePath() throws Exception {\n+    void testRelativePath() throws Exception {\n@@ -178,1 +178,1 @@\n-    public void testNull() throws Exception {\n+    void testNull() throws Exception {\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng BuilderTest\n+ * @run junit BuilderTest\n@@ -36,3 +36,3 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -40,1 +40,1 @@\n-public class BuilderTest {\n+class BuilderTest {\n@@ -46,1 +46,1 @@\n-    public void testPlatformThread() throws Exception {\n+    void testPlatformThread() throws Exception {\n@@ -97,1 +97,1 @@\n-    public void testVirtualThread() throws Exception {\n+    void testVirtualThread() throws Exception {\n@@ -144,1 +144,1 @@\n-    public void testName1() {\n+    void testName1() {\n@@ -157,1 +157,1 @@\n-    public void testName2() {\n+    void testName2() {\n@@ -170,1 +170,1 @@\n-    public void testName3() {\n+    void testName3() {\n@@ -192,1 +192,1 @@\n-    public void testName4() {\n+    void testName4() {\n@@ -217,1 +217,1 @@\n-    public void testThreadGroup1() {\n+    void testThreadGroup1() {\n@@ -243,1 +243,1 @@\n-    public void testThreadGroup2() {\n+    void testThreadGroup2() {\n@@ -245,1 +245,1 @@\n-        assertEquals(vgroup.getName(), \"VirtualThreads\");\n+        assertEquals(\"VirtualThreads\", vgroup.getName());\n@@ -264,1 +264,1 @@\n-    public void testPriority1() {\n+    void testPriority1() {\n@@ -278,1 +278,1 @@\n-    public void testPriority2() {\n+    void testPriority2() {\n@@ -292,1 +292,1 @@\n-    public void testPriority3() {\n+    void testPriority3() {\n@@ -294,2 +294,1 @@\n-        if (currentThread.isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+        assumeFalse(currentThread.isVirtual(), \"Main test is a virtual thread\");\n@@ -311,1 +310,1 @@\n-    public void testPriority4() {\n+    void testPriority4() {\n@@ -318,1 +317,1 @@\n-    public void testPriority5() {\n+    void testPriority5() {\n@@ -328,1 +327,1 @@\n-    public void testDaemon1() {\n+    void testDaemon1() {\n@@ -341,1 +340,1 @@\n-    public void testDaemon2() {\n+    void testDaemon2() {\n@@ -354,1 +353,1 @@\n-    public void testDaemon3() {\n+    void testDaemon3() {\n@@ -367,1 +366,1 @@\n-    public void testDaemon4() {\n+    void testDaemon4() {\n@@ -385,1 +384,1 @@\n-    public void testDaemon5() {\n+    void testDaemon5() {\n@@ -402,1 +401,1 @@\n-    public void testStackSize1() {\n+    void testStackSize1() {\n@@ -410,1 +409,1 @@\n-    public void testStackSize2() {\n+    void testStackSize2() {\n@@ -418,1 +417,1 @@\n-    public void testStackSize3() {\n+    void testStackSize3() {\n@@ -427,1 +426,1 @@\n-    public void testUncaughtExceptionHandler1() throws Exception {\n+    void testUncaughtExceptionHandler1() throws Exception {\n@@ -444,1 +443,1 @@\n-    public void testUncaughtExceptionHandler2() throws Exception {\n+    void testUncaughtExceptionHandler2() throws Exception {\n@@ -461,1 +460,1 @@\n-    public void testUncaughtExceptionHandler3() throws Exception {\n+    void testUncaughtExceptionHandler3() throws Exception {\n@@ -480,1 +479,1 @@\n-    public void testUncaughtExceptionHandler4() throws Exception {\n+    void testUncaughtExceptionHandler4() throws Exception {\n@@ -566,1 +565,1 @@\n-    public void testThreadLocals1() throws Exception {\n+    void testThreadLocals1() throws Exception {\n@@ -572,1 +571,1 @@\n-    public void testThreadLocals2() throws Exception {\n+    void testThreadLocals2() throws Exception {\n@@ -582,1 +581,1 @@\n-    public void testThreadLocals3() throws Exception {\n+    void testThreadLocals3() throws Exception {\n@@ -595,1 +594,1 @@\n-    public void testThreadLocals4() throws Exception {\n+    void testThreadLocals4() throws Exception {\n@@ -676,1 +675,1 @@\n-    public void testInheritedThreadLocals1() throws Exception {\n+    void testInheritedThreadLocals1() throws Exception {\n@@ -690,1 +689,1 @@\n-    public void testInheritedThreadLocals2() throws Exception {\n+    void testInheritedThreadLocals2() throws Exception {\n@@ -704,1 +703,1 @@\n-    public void testInheritedThreadLocals3() throws Exception {\n+    void testInheritedThreadLocals3() throws Exception {\n@@ -724,1 +723,1 @@\n-    public void testInheritedThreadLocals4() throws Exception {\n+    void testInheritedThreadLocals4() throws Exception {\n@@ -827,1 +826,1 @@\n-    public void testContextClassLoader1() throws Exception {\n+    void testContextClassLoader1() throws Exception {\n@@ -841,1 +840,1 @@\n-    public void testContextClassLoader2() throws Exception {\n+    void testContextClassLoader2() throws Exception {\n@@ -855,1 +854,1 @@\n-    public void testContextClassLoader3() throws Exception {\n+    void testContextClassLoader3() throws Exception {\n@@ -875,1 +874,1 @@\n-    public void testContextClassLoader4() throws Exception {\n+    void testContextClassLoader4() throws Exception {\n@@ -898,1 +897,1 @@\n-    public void testNulls1() {\n+    void testNulls1() {\n@@ -909,1 +908,1 @@\n-    public void testNulls2() {\n+    void testNulls2() {\n","filename":"test\/jdk\/java\/lang\/Thread\/BuilderTest.java","additions":47,"deletions":48,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng JoinWithDuration\n+ * @run junit JoinWithDuration\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -37,1 +37,1 @@\n-public class JoinWithDuration {\n+class JoinWithDuration {\n@@ -42,1 +42,1 @@\n-    public void testJoinOnUnstartedThread() {\n+    void testJoinOnUnstartedThread() {\n@@ -56,1 +56,1 @@\n-    public void testJoinOnRunningThread() throws Exception {\n+    void testJoinOnRunningThread() throws Exception {\n@@ -79,1 +79,1 @@\n-    public void testJoinOnTerminatingThread() throws Exception {\n+    void testJoinOnTerminatingThread() throws Exception {\n@@ -93,1 +93,1 @@\n-    public void testJoinOnTerminatedThread() throws Exception {\n+    void testJoinOnTerminatedThread() throws Exception {\n@@ -106,1 +106,1 @@\n-    public void testJoinWithInterruptStatusSet() throws Exception {\n+    void testJoinWithInterruptStatusSet() throws Exception {\n@@ -125,2 +125,2 @@\n-    public void testInterruptJoin() throws Exception {\n-        \/\/ schedule current thread to interrupted after 1s\n+    void testInterruptJoin() throws Exception {\n+        \/\/ schedule current thread to be interrupted after 1s\n@@ -147,1 +147,3 @@\n-            wakerThread.interrupt();\n+            LockSupport.unpark(thread);\n+            thread.join();\n+            wakerThread.join();\n@@ -155,1 +157,1 @@\n-    public void testJoinSelf() throws Exception {\n+    void testJoinSelf() throws Exception {\n@@ -172,1 +174,1 @@\n-    public void testJoinNull() throws Exception {\n+    void testJoinNull() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/JoinWithDuration.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng SleepWithDuration\n+ * @run junit SleepWithDuration\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +36,1 @@\n-public class SleepWithDuration {\n+class SleepWithDuration {\n@@ -42,1 +42,1 @@\n-    public void testSleep() throws Exception {\n+    void testSleep() throws Exception {\n@@ -59,1 +59,1 @@\n-    public void testSleepWithInterruptStatusSet() throws Exception {\n+    void testSleepWithInterruptStatusSet() throws Exception {\n@@ -81,2 +81,2 @@\n-    public void testInterruptSleep() throws Exception {\n-        \/\/ schedule current thread to interrupted after 1s\n+    void testInterruptSleep() throws Exception {\n+        \/\/ schedule current thread to be interrupted after 1s\n@@ -100,1 +100,1 @@\n-            wakerThread.interrupt();\n+            wakerThread.join();\n","filename":"test\/jdk\/java\/lang\/Thread\/SleepWithDuration.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import java.util.stream.Stream;\n+\n@@ -26,2 +28,6 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +45,1 @@\n- * @run testng UncaughtExceptionsTest\n+ * @run junit UncaughtExceptionsTest\n@@ -41,1 +47,1 @@\n-public class UncaughtExceptionsTest {\n+class UncaughtExceptionsTest {\n@@ -43,21 +49,35 @@\n-    @DataProvider\n-    public Object[][] testCases() {\n-        return new Object[][] {\n-            new Object[] { \"ThreadIsDeadAfterJoin\",\n-                           0,\n-                           UncaughtExitSimulator.EXPECTED_RESULT,\n-                           \"Exception in thread \\\"Thread-\\\\d+\\\".*simulateUncaughtExitEvent\"\n-            },\n-            new Object[] {\n-                            \"MainThreadAbruptTermination\",\n-                            1,\n-                            UncaughtExitSimulator.EXPECTED_RESULT,\n-                            \"Exception in thread \\\"main\\\".*simulateUncaughtExitEvent\"\n-            },\n-            new Object[] { \"MainThreadNormalTermination\", 0, UncaughtExitSimulator.EXPECTED_RESULT, \"\"},\n-            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThread\", 1, UncaughtExitSimulator.EXPECTED_RESULT, \"\" },\n-            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThreadOverride\", 1, UncaughtExitSimulator.EXPECTED_RESULT, \"\" },\n-            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThreadOverride\", 0, UncaughtExitSimulator.EXPECTED_RESULT, \"\" },\n-            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThread\", 0, UncaughtExitSimulator.EXPECTED_RESULT, \"\" },\n-            new Object[] { \"ThreadGroupUncaughtExceptionHandlerOnNonMainThread\", 0, UncaughtExitSimulator.EXPECTED_RESULT, \"\" }\n-        };\n+    private static Stream<Arguments> testCases() {\n+        return Stream.of(\n+            Arguments.of(\"ThreadIsDeadAfterJoin\",\n+                         0,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"Exception in thread \\\"Thread-\\\\d+\\\".*simulateUncaughtExitEvent\"),\n+            Arguments.of(\"MainThreadAbruptTermination\",\n+                         1,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"Exception in thread \\\"main\\\".*simulateUncaughtExitEvent\"),\n+            Arguments.of(\"MainThreadNormalTermination\",\n+                         0,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\"),\n+            Arguments.of(\"DefaultUncaughtExceptionHandlerOnMainThread\",\n+                         1,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\"),\n+            Arguments.of(\"DefaultUncaughtExceptionHandlerOnMainThreadOverride\",\n+                         1,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\"),\n+            Arguments.of(\"DefaultUncaughtExceptionHandlerOnNonMainThreadOverride\",\n+                         0,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\"),\n+            Arguments.of(\"DefaultUncaughtExceptionHandlerOnNonMainThread\",\n+                         0,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\"),\n+            Arguments.of(\"ThreadGroupUncaughtExceptionHandlerOnNonMainThread\",\n+                         0,\n+                         UncaughtExitSimulator.EXPECTED_RESULT,\n+                         \"\")\n+        );\n@@ -66,2 +86,3 @@\n-    @Test(dataProvider = \"testCases\")\n-    public void test(String className, int exitValue, String stdOutMatch, String stdErrMatch) throws Throwable {\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    void test(String className, int exitValue, String stdOutMatch, String stdErrMatch) throws Throwable {\n@@ -94,1 +115,3 @@\n-    public static void throwRuntimeException() { throw new RuntimeException(\"simulateUncaughtExitEvent\"); }\n+    public static void throwRuntimeException() {\n+        throw new RuntimeException(\"simulateUncaughtExitEvent\");\n+    }\n","filename":"test\/jdk\/java\/lang\/Thread\/UncaughtExceptionsTest.java","additions":52,"deletions":29,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng Collectable\n+ * @run junit Collectable\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -37,1 +37,1 @@\n-public class Collectable {\n+class Collectable {\n@@ -43,1 +43,1 @@\n-    public void testUnstartedThread() {\n+    void testUnstartedThread() {\n@@ -54,1 +54,1 @@\n-    public void testTerminatedThread() throws Exception {\n+    void testTerminatedThread() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Collectable.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng CustomScheduler\n+ * @run junit CustomScheduler\n@@ -42,5 +42,5 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -48,1 +48,1 @@\n-public class CustomScheduler {\n+class CustomScheduler {\n@@ -50,2 +50,2 @@\n-    private static ExecutorService SCHEDULER_1;\n-    private static ExecutorService SCHEDULER_2;\n+    private static ExecutorService scheduler1;\n+    private static ExecutorService scheduler2;\n@@ -53,4 +53,4 @@\n-    @BeforeClass\n-    public void setup() {\n-        SCHEDULER_1 = Executors.newFixedThreadPool(1);\n-        SCHEDULER_2 = Executors.newFixedThreadPool(1);\n+    @BeforeAll\n+    static void setup() {\n+        scheduler1 = Executors.newFixedThreadPool(1);\n+        scheduler2 = Executors.newFixedThreadPool(1);\n@@ -59,4 +59,4 @@\n-    @AfterClass\n-    public void shutdown() {\n-        SCHEDULER_1.shutdown();\n-        SCHEDULER_2.shutdown();\n+    @AfterAll\n+    static void shutdown() {\n+        scheduler1.shutdown();\n+        scheduler2.shutdown();\n@@ -69,1 +69,1 @@\n-    public void testCustomScheduler1() throws Exception {\n+    void testCustomScheduler1() throws Exception {\n@@ -71,1 +71,1 @@\n-        ThreadBuilders.virtualThreadBuilder(SCHEDULER_1).start(() -> {\n+        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n@@ -74,1 +74,1 @@\n-        assertTrue(ref.get() == SCHEDULER_1);\n+        assertTrue(ref.get() == scheduler1);\n@@ -81,1 +81,1 @@\n-    public void testCustomScheduler2() throws Exception {\n+    void testCustomScheduler2() throws Exception {\n@@ -85,1 +85,1 @@\n-                ThreadBuilders.virtualThreadBuilder(SCHEDULER_1).start(() -> {\n+                ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n@@ -92,1 +92,1 @@\n-        assertTrue(ref.get() == SCHEDULER_1);\n+        assertTrue(ref.get() == scheduler1);\n@@ -100,1 +100,1 @@\n-    public void testCustomScheduler3() throws Exception {\n+    void testCustomScheduler3() throws Exception {\n@@ -102,1 +102,1 @@\n-        ThreadBuilders.virtualThreadBuilder(SCHEDULER_1).start(() -> {\n+        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n@@ -111,1 +111,1 @@\n-        assertTrue(ref.get() == SCHEDULER_1);\n+        assertTrue(ref.get() == scheduler1);\n@@ -119,1 +119,1 @@\n-    public void testCustomScheduler4() throws Exception {\n+    void testCustomScheduler4() throws Exception {\n@@ -121,1 +121,1 @@\n-        ThreadBuilders.virtualThreadBuilder(SCHEDULER_1).start(() -> {\n+        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n@@ -123,1 +123,1 @@\n-                ThreadBuilders.virtualThreadBuilder(SCHEDULER_2).start(() -> {\n+                ThreadBuilders.virtualThreadBuilder(scheduler2).start(() -> {\n@@ -130,1 +130,1 @@\n-        assertTrue(ref.get() == SCHEDULER_2);\n+        assertTrue(ref.get() == scheduler2);\n@@ -137,1 +137,1 @@\n-    public void testBadCarrier() {\n+    void testBadCarrier() {\n@@ -163,1 +163,1 @@\n-    public void testParkWithInterruptSet() {\n+    void testParkWithInterruptSet() {\n@@ -165,2 +165,1 @@\n-        if (carrier.isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+        assumeFalse(carrier.isVirtual(), \"Main test is a virtual thread\");\n@@ -185,1 +184,1 @@\n-    public void testTerminateWithInterruptSet() {\n+    void testTerminateWithInterruptSet() {\n@@ -187,2 +186,1 @@\n-        if (carrier.isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+        assumeFalse(carrier.isVirtual(), \"Main test is a virtual thread\");\n@@ -205,3 +203,2 @@\n-    public void testRunWithInterruptSet() throws Exception {\n-        if (Thread.currentThread().isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+    void testRunWithInterruptSet() throws Exception {\n+        assumeFalse(Thread.currentThread().isVirtual(), \"Main test is a virtual thread\");\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CustomScheduler.java","additions":38,"deletions":41,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/java.lang:+open\n+ * @requires vm.continuations\n@@ -30,1 +30,2 @@\n- * @run testng GetStackTrace\n+ * @modules java.base\/java.lang:+open\n+ * @run main GetStackTrace\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/GetStackTrace.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng HoldsLock\n+ * @run junit HoldsLock\n@@ -39,1 +39,1 @@\n- * @run testng\/othervm -XX:+UseHeavyMonitors HoldsLock\n+ * @run junit\/othervm -XX:+UseHeavyMonitors HoldsLock\n@@ -55,2 +55,3 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -58,1 +59,1 @@\n-public class HoldsLock {\n+class HoldsLock {\n@@ -62,2 +63,3 @@\n-    @Test(enabled=false) \/\/ JDK-8281642\n-    public void testHoldsLock() throws Exception {\n+    @Disabled(\"JDK-8281642\")\n+    @Test\n+    void testHoldsLock() throws Exception {\n@@ -88,1 +90,1 @@\n-    public void testThreadInfo() throws Exception {\n+    void testThreadInfo() throws Exception {\n@@ -126,4 +128,4 @@\n-                assertEquals(info.getThreadState(), Thread.State.WAITING);\n-                assertEquals(info.getLockInfo().getClassName(), vthread.getClass().getName());\n-                assertEquals(info.getLockInfo().getIdentityHashCode(), System.identityHashCode(vthread));\n-                assertEquals(info.getLockOwnerId(), vthreadId);\n+                assertTrue(info.getThreadState() == Thread.State.WAITING);\n+                assertEquals(vthread.getClass().getName(), info.getLockInfo().getClassName());\n+                assertTrue(info.getLockInfo().getIdentityHashCode() == System.identityHashCode(vthread));\n+                assertTrue(info.getLockOwnerId() == vthreadId);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/HoldsLock.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm JfrEvents\n+ * @run junit\/othervm JfrEvents\n@@ -51,2 +51,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -54,1 +54,1 @@\n-public class JfrEvents {\n+class JfrEvents {\n@@ -61,1 +61,1 @@\n-    public void testVirtualThreadStartAndEnd() throws Exception {\n+    void testVirtualThreadStartAndEnd() throws Exception {\n@@ -92,1 +92,1 @@\n-    public void testVirtualThreadPinned() throws Exception {\n+    void testVirtualThreadPinned() throws Exception {\n@@ -129,1 +129,1 @@\n-    public void testVirtualThreadSubmitFailed() throws Exception {\n+    void testVirtualThreadSubmitFailed() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng Locking\n+ * @run junit Locking\n@@ -37,2 +37,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-public class Locking {\n+class Locking {\n@@ -46,1 +46,1 @@\n-    public void testReentrantLock1() throws Exception {\n+    void testReentrantLock1() throws Exception {\n@@ -61,1 +61,1 @@\n-    public void testReentrantLock2() throws Exception {\n+    void testReentrantLock2() throws Exception {\n@@ -77,1 +77,1 @@\n-    public void testReentrantLock3() throws Exception {\n+    void testReentrantLock3() throws Exception {\n@@ -101,1 +101,1 @@\n-    public void testReentrantLock4() throws Exception {\n+    void testReentrantLock4() throws Exception {\n@@ -139,1 +139,1 @@\n-    public void testReentrantLock5() throws Exception {\n+    void testReentrantLock5() throws Exception {\n@@ -173,1 +173,1 @@\n-    public void testReentrantLock6() throws Exception {\n+    void testReentrantLock6() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Locking.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng ParkWithFixedThreadPool\n+ * @run main ParkWithFixedThreadPool\n@@ -32,0 +32,1 @@\n+\n@@ -35,2 +36,0 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.Test;\n@@ -39,2 +38,1 @@\n-    @Test\n-    public static void multipleThreadPoolParkTest() throws Exception {\n+    public static void main(String[] args) throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ParkWithFixedThreadPool.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng Parking\n+ * @run junit Parking\n@@ -37,3 +37,2 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -41,1 +40,1 @@\n-public class Parking {\n+class Parking {\n@@ -48,1 +47,1 @@\n-    public void testPark1() throws Exception {\n+    void testPark1() throws Exception {\n@@ -59,1 +58,1 @@\n-    public void testPark2() throws Exception {\n+    void testPark2() throws Exception {\n@@ -71,1 +70,1 @@\n-    public void testPark3() throws Exception {\n+    void testPark3() throws Exception {\n@@ -86,2 +85,2 @@\n-    public void testPark4() throws Exception {\n-        throw new SkipException(\"Not implemented\");\n+    void testPark4() throws Exception {\n+        \/\/ not implemented\n@@ -94,1 +93,1 @@\n-    public void testPark5() throws Exception {\n+    void testPark5() throws Exception {\n@@ -106,1 +105,1 @@\n-    public void testPark6() throws Exception {\n+    void testPark6() throws Exception {\n@@ -123,1 +122,1 @@\n-    public void testPark7() throws Exception {\n+    void testPark7() throws Exception {\n@@ -145,1 +144,1 @@\n-    public void testPark8() throws Exception {\n+    void testPark8() throws Exception {\n@@ -158,1 +157,1 @@\n-    public void testPark9() throws Exception {\n+    void testPark9() throws Exception {\n@@ -172,1 +171,1 @@\n-    public void testPark10() throws Exception {\n+    void testPark10() throws Exception {\n@@ -187,1 +186,1 @@\n-    public void testPark11() throws Exception {\n+    void testPark11() throws Exception {\n@@ -203,1 +202,1 @@\n-    public void testParkNanos1() throws Exception {\n+    void testParkNanos1() throws Exception {\n@@ -211,1 +210,1 @@\n-    public void testParkNanos2() throws Exception {\n+    void testParkNanos2() throws Exception {\n@@ -219,1 +218,1 @@\n-    public void testParkNanos3() throws Exception {\n+    void testParkNanos3() throws Exception {\n@@ -237,1 +236,1 @@\n-    public void testParkNanos4() throws Exception {\n+    void testParkNanos4() throws Exception {\n@@ -251,1 +250,1 @@\n-    public void testParkNanos5() throws Exception {\n+    void testParkNanos5() throws Exception {\n@@ -266,1 +265,1 @@\n-    public void testParkNanos6() throws Exception {\n+    void testParkNanos6() throws Exception {\n@@ -278,1 +277,1 @@\n-    public void testParkNanos7() throws Exception {\n+    void testParkNanos7() throws Exception {\n@@ -294,1 +293,1 @@\n-    public void testParkNanos8() throws Exception {\n+    void testParkNanos8() throws Exception {\n@@ -307,1 +306,1 @@\n-    public void testParkNanos9() throws Exception {\n+    void testParkNanos9() throws Exception {\n@@ -321,1 +320,1 @@\n-    public void testParkNanos10() throws Exception {\n+    void testParkNanos10() throws Exception {\n@@ -336,1 +335,1 @@\n-    public void testParkNanos11() throws Exception {\n+    void testParkNanos11() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Parking.java","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng\/othervm PreviewFeaturesNotEnabled\n+ * @run junit\/othervm PreviewFeaturesNotEnabled\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -37,1 +37,1 @@\n-public class PreviewFeaturesNotEnabled {\n+class PreviewFeaturesNotEnabled {\n@@ -43,1 +43,1 @@\n-    public void testOfVirtual() throws Exception {\n+    void testOfVirtual() throws Exception {\n@@ -45,1 +45,1 @@\n-        var exc = expectThrows(InvocationTargetException.class, () -> ofVirtual.invoke(null));\n+        var exc = assertThrows(InvocationTargetException.class, () -> ofVirtual.invoke(null));\n@@ -53,1 +53,1 @@\n-    public void testStartVirutalThread() throws Exception {\n+    void testStartVirutalThread() throws Exception {\n@@ -56,1 +56,1 @@\n-        var exc = expectThrows(InvocationTargetException.class,\n+        var exc = assertThrows(InvocationTargetException.class,\n@@ -65,1 +65,1 @@\n-    public void testNewVirtualThreadPerTaskExecutor() throws Exception {\n+    void testNewVirtualThreadPerTaskExecutor() throws Exception {\n@@ -67,1 +67,1 @@\n-        var exc = expectThrows(InvocationTargetException.class,\n+        var exc = assertThrows(InvocationTargetException.class,\n@@ -76,2 +76,2 @@\n-    public void testContinuationInitializer() throws Exception {\n-        var exc = expectThrows(ExceptionInInitializerError.class,\n+    void testContinuationInitializer() throws Exception {\n+        var exc = assertThrows(ExceptionInInitializerError.class,\n@@ -86,1 +86,1 @@\n-    public void testIsVirtual() throws Exception {\n+    void testIsVirtual() throws Exception {\n@@ -95,1 +95,1 @@\n-    public void testOfPlatform() throws Exception {\n+    void testOfPlatform() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/PreviewFeaturesNotEnabled.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng Reflection\n+ * @run junit Reflection\n@@ -42,3 +42,3 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -46,1 +46,1 @@\n-public class Reflection {\n+class Reflection {\n@@ -52,1 +52,1 @@\n-    public void testInvokeStatic1() throws Exception {\n+    void testInvokeStatic1() throws Exception {\n@@ -64,1 +64,1 @@\n-    public void testInvokeStatic2() throws Exception {\n+    void testInvokeStatic2() throws Exception {\n@@ -80,1 +80,1 @@\n-    public void testInvokeStatic3() throws Exception {\n+    void testInvokeStatic3() throws Exception {\n@@ -102,1 +102,1 @@\n-    public void testInvokeStatic4() throws Exception {\n+    void testInvokeStatic4() throws Exception {\n@@ -126,1 +126,1 @@\n-    public void testInvokeStatic5() throws Exception {\n+    void testInvokeStatic5() throws Exception {\n@@ -144,3 +144,2 @@\n-    public void testInvokeStatic6() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testInvokeStatic6() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -175,1 +174,1 @@\n-    public void testInvokeInstance1() throws Exception {\n+    void testInvokeInstance1() throws Exception {\n@@ -188,1 +187,1 @@\n-    public void testInvokeInstance2() throws Exception {\n+    void testInvokeInstance2() throws Exception {\n@@ -205,1 +204,1 @@\n-    public void testInvokeInstance3() throws Exception {\n+    void testInvokeInstance3() throws Exception {\n@@ -226,1 +225,1 @@\n-    public void testNewInstance1() throws Exception {\n+    void testNewInstance1() throws Exception {\n@@ -239,1 +238,1 @@\n-    public void testNewInstance2() throws Exception {\n+    void testNewInstance2() throws Exception {\n@@ -256,1 +255,1 @@\n-    public void testNewInstance3() throws Exception {\n+    void testNewInstance3() throws Exception {\n@@ -278,1 +277,1 @@\n-    public void testNewInstance4() throws Exception {\n+    void testNewInstance4() throws Exception {\n@@ -302,1 +301,1 @@\n-    public void testNewInstance5() throws Exception {\n+    void testNewInstance5() throws Exception {\n@@ -320,3 +319,2 @@\n-    public void testNewInstance6() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testNewInstance6() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Reflection.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @run testng StackTraces\n- * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowCarrierFrames StackTraces\n+ * @run junit StackTraces\n+ * @run junit\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowCarrierFrames StackTraces\n@@ -43,2 +43,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,1 +46,1 @@\n-public class StackTraces {\n+class StackTraces {\n@@ -53,1 +53,1 @@\n-    public void testStackTrace() throws Exception {\n+    void testStackTrace() throws Exception {\n@@ -67,1 +67,1 @@\n-    public void testStackWalker() throws Exception {\n+    void testStackWalker() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/StackTraces.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng ThreadAPI\n+ * @run junit ThreadAPI\n@@ -40,1 +40,1 @@\n- * @run testng\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations ThreadAPI\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations ThreadAPI\n@@ -66,8 +66,9 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-public class ThreadAPI {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n+\n+class ThreadAPI {\n@@ -77,9 +78,5 @@\n-    private ScheduledExecutorService scheduler;\n-\n-    @BeforeClass\n-    public void setUp() throws Exception {\n-        ThreadFactory factory = (task) -> {\n-            Thread thread = new Thread(task);\n-            thread.setDaemon(true);\n-            return thread;\n-        };\n+    private static ScheduledExecutorService scheduler;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        ThreadFactory factory = Executors.defaultThreadFactory();\n@@ -89,2 +86,2 @@\n-    @AfterClass\n-    public void tearDown() {\n+    @AfterAll\n+    static void finish() {\n@@ -106,1 +103,1 @@\n-    public void testCurrentThread1() throws Exception {\n+    void testCurrentThread1() throws Exception {\n@@ -125,1 +122,1 @@\n-    public void testCurrentThread2() throws Exception {\n+    void testCurrentThread2() throws Exception {\n@@ -150,1 +147,1 @@\n-    public void testCurrentThread3() throws Exception {\n+    void testCurrentThread3() throws Exception {\n@@ -182,1 +179,1 @@\n-    public void testRun1() throws Exception {\n+    void testRun1() throws Exception {\n@@ -193,1 +190,1 @@\n-    public void testStart1() throws Exception {\n+    void testStart1() throws Exception {\n@@ -206,1 +203,1 @@\n-    public void testStart2() throws Exception {\n+    void testStart2() throws Exception {\n@@ -220,1 +217,1 @@\n-    public void testStart3() throws Exception {\n+    void testStart3() throws Exception {\n@@ -230,1 +227,1 @@\n-    public void testStartVirtualThread() throws Exception {\n+    void testStartVirtualThread() throws Exception {\n@@ -256,1 +253,1 @@\n-    public void testStop1() throws Exception {\n+    void testStop1() throws Exception {\n@@ -267,1 +264,1 @@\n-    public void testStop2() throws Exception {\n+    void testStop2() throws Exception {\n@@ -285,1 +282,1 @@\n-    public void testSuspend1() throws Exception {\n+    void testSuspend1() throws Exception {\n@@ -296,1 +293,1 @@\n-    public void testSuspend2() throws Exception {\n+    void testSuspend2() throws Exception {\n@@ -314,1 +311,1 @@\n-    public void testResume1() throws Exception {\n+    void testResume1() throws Exception {\n@@ -325,1 +322,1 @@\n-    public void testResume2() throws Exception {\n+    void testResume2() throws Exception {\n@@ -343,1 +340,1 @@\n-    public void testJoin1() throws Exception {\n+    void testJoin1() throws Exception {\n@@ -363,1 +360,1 @@\n-    public void testJoin2() throws Exception {\n+    void testJoin2() throws Exception {\n@@ -371,1 +368,1 @@\n-    public void testJoin3() throws Exception {\n+    void testJoin3() throws Exception {\n@@ -392,1 +389,1 @@\n-    public void testJoin4() throws Exception {\n+    void testJoin4() throws Exception {\n@@ -400,1 +397,1 @@\n-    public void testJoin5() throws Exception {\n+    void testJoin5() throws Exception {\n@@ -414,1 +411,1 @@\n-    public void testJoin6() throws Exception {\n+    void testJoin6() throws Exception {\n@@ -422,1 +419,1 @@\n-    public void testJoin7() throws Exception {\n+    void testJoin7() throws Exception {\n@@ -436,1 +433,1 @@\n-    public void testJoin8() throws Exception {\n+    void testJoin8() throws Exception {\n@@ -444,1 +441,1 @@\n-    public void testJoin11() throws Exception {\n+    void testJoin11() throws Exception {\n@@ -458,1 +455,1 @@\n-    public void testJoin12() throws Exception {\n+    void testJoin12() throws Exception {\n@@ -466,1 +463,1 @@\n-    public void testJoin13() throws Exception {\n+    void testJoin13() throws Exception {\n@@ -485,1 +482,1 @@\n-    public void testJoin14() throws Exception {\n+    void testJoin14() throws Exception {\n@@ -493,1 +490,1 @@\n-    public void testJoin15() throws Exception {\n+    void testJoin15() throws Exception {\n@@ -509,1 +506,1 @@\n-    public void testJoin16() throws Exception {\n+    void testJoin16() throws Exception {\n@@ -517,1 +514,1 @@\n-    public void testJoin17() throws Exception {\n+    void testJoin17() throws Exception {\n@@ -533,1 +530,1 @@\n-    public void testJoin18() throws Exception {\n+    void testJoin18() throws Exception {\n@@ -541,1 +538,1 @@\n-    public void testJoin19() throws Exception {\n+    void testJoin19() throws Exception {\n@@ -558,1 +555,1 @@\n-    public void testJoin20() throws Exception {\n+    void testJoin20() throws Exception {\n@@ -566,1 +563,1 @@\n-    public void testJoin21() throws Exception {\n+    void testJoin21() throws Exception {\n@@ -582,1 +579,1 @@\n-    public void testJoin22() throws Exception {\n+    void testJoin22() throws Exception {\n@@ -590,1 +587,1 @@\n-    public void testJoin23() throws Exception {\n+    void testJoin23() throws Exception {\n@@ -606,1 +603,1 @@\n-    public void testJoin24() throws Exception {\n+    void testJoin24() throws Exception {\n@@ -614,1 +611,1 @@\n-    public void testJoin25() throws Exception {\n+    void testJoin25() throws Exception {\n@@ -631,1 +628,1 @@\n-    public void testJoin26() throws Exception {\n+    void testJoin26() throws Exception {\n@@ -639,1 +636,1 @@\n-    public void testJoin27() throws Exception {\n+    void testJoin27() throws Exception {\n@@ -664,1 +661,1 @@\n-    public void testJoin28() throws Exception {\n+    void testJoin28() throws Exception {\n@@ -684,1 +681,1 @@\n-    public void testJoin29() throws Exception {\n+    void testJoin29() throws Exception {\n@@ -706,1 +703,1 @@\n-    public void testJoin30() throws Exception {\n+    void testJoin30() throws Exception {\n@@ -734,1 +731,1 @@\n-    public void testJoin31() throws Exception {\n+    void testJoin31() throws Exception {\n@@ -751,1 +748,1 @@\n-    public void testJoin32() throws Exception {\n+    void testJoin32() throws Exception {\n@@ -760,1 +757,1 @@\n-    public void testJoin33() throws Exception {\n+    void testJoin33() throws Exception {\n@@ -781,1 +778,1 @@\n-    public void testJoin34() throws Exception {\n+    void testJoin34() throws Exception {\n@@ -796,1 +793,1 @@\n-    public void testJoin35() throws Exception {\n+    void testJoin35() throws Exception {\n@@ -819,1 +816,1 @@\n-    public void testInterrupt1() throws Exception {\n+    void testInterrupt1() throws Exception {\n@@ -835,1 +832,1 @@\n-    public void testInterrupt2() throws Exception {\n+    void testInterrupt2() throws Exception {\n@@ -845,1 +842,1 @@\n-    public void testInterrupt3() throws Exception {\n+    void testInterrupt3() throws Exception {\n@@ -856,1 +853,1 @@\n-    public void testInterrupt4() throws Exception {\n+    void testInterrupt4() throws Exception {\n@@ -868,1 +865,1 @@\n-    public void testInterrupt5() throws Exception {\n+    void testInterrupt5() throws Exception {\n@@ -890,1 +887,1 @@\n-    public void testInterrupt6() throws Exception {\n+    void testInterrupt6() throws Exception {\n@@ -915,1 +912,1 @@\n-    public void testInterrupt7() throws Exception {\n+    void testInterrupt7() throws Exception {\n@@ -935,1 +932,1 @@\n-    public void testInterrupt8() throws Exception {\n+    void testInterrupt8() throws Exception {\n@@ -948,1 +945,1 @@\n-    public void testInterrupt9() throws Exception {\n+    void testInterrupt9() throws Exception {\n@@ -967,1 +964,1 @@\n-    public void testInterrupt10() throws Exception {\n+    void testInterrupt10() throws Exception {\n@@ -982,1 +979,1 @@\n-    public void testSetName1() throws Exception {\n+    void testSetName1() throws Exception {\n@@ -987,1 +984,1 @@\n-            assertEquals(me.getName(), \"fred\");\n+            assertEquals(\"fred\", me.getName());\n@@ -995,1 +992,1 @@\n-    public void testSetName2() throws Exception {\n+    void testSetName2() throws Exception {\n@@ -998,1 +995,1 @@\n-            assertEquals(me.getName(), \"fred\");\n+            assertEquals(\"fred\", me.getName());\n@@ -1000,1 +997,1 @@\n-            assertEquals(me.getName(), \"joe\");\n+            assertEquals(\"joe\", me.getName());\n@@ -1008,1 +1005,1 @@\n-    public void testSetName3() throws Exception {\n+    void testSetName3() throws Exception {\n@@ -1014,1 +1011,1 @@\n-        assertEquals(thread.getName(), \"fred1\");\n+        assertEquals(\"fred1\", thread.getName());\n@@ -1019,1 +1016,1 @@\n-            assertEquals(thread.getName(), \"fred1\");\n+            assertEquals(\"fred1\", thread.getName());\n@@ -1021,1 +1018,1 @@\n-            assertEquals(thread.getName(), \"fred2\");\n+            assertEquals(\"fred2\", thread.getName());\n@@ -1028,1 +1025,1 @@\n-        assertEquals(thread.getName(), \"fred2\");\n+        assertEquals(\"fred2\", thread.getName());\n@@ -1030,1 +1027,1 @@\n-        assertEquals(thread.getName(), \"fred3\");\n+        assertEquals(\"fred3\", thread.getName());\n@@ -1037,1 +1034,1 @@\n-    public void testSetPriority1() throws Exception {\n+    void testSetPriority1() throws Exception {\n@@ -1059,1 +1056,1 @@\n-    public void testSetPriority2() throws Exception {\n+    void testSetPriority2() throws Exception {\n@@ -1106,1 +1103,1 @@\n-    public void testSetDaemon1() throws Exception {\n+    void testSetDaemon1() throws Exception {\n@@ -1119,1 +1116,1 @@\n-    public void testSetDaemon2() throws Exception {\n+    void testSetDaemon2() throws Exception {\n@@ -1146,3 +1143,2 @@\n-    public void testYield1() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testYield1() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1168,1 +1164,1 @@\n-        assertEquals(list, List.of(\"A\", \"B\", \"A\", \"B\"));\n+        assertEquals(List.of(\"A\", \"B\", \"A\", \"B\"), list);\n@@ -1175,3 +1171,2 @@\n-    public void testYield2() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testYield2() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1197,1 +1192,1 @@\n-        assertEquals(list, List.of(\"A\", \"A\", \"B\"));\n+        assertEquals(List.of(\"A\", \"A\", \"B\"), list);\n@@ -1204,1 +1199,1 @@\n-    public void testOnSpinWait() throws Exception {\n+    void testOnSpinWait() throws Exception {\n@@ -1216,1 +1211,1 @@\n-    public void testSleep1() throws Exception {\n+    void testSleep1() throws Exception {\n@@ -1230,1 +1225,1 @@\n-    public void testSleep2() throws Exception {\n+    void testSleep2() throws Exception {\n@@ -1239,3 +1234,2 @@\n-    @DataProvider(name = \"oneSecondSleepers\")\n-    public Object[][] oneSecondSleepers() {\n-        ThrowingRunnable[] sleepers = {\n+    static Stream<ThrowingRunnable> oneSecondSleepers() {\n+        return Stream.of(\n@@ -1244,4 +1238,1 @@\n-        };\n-        return Arrays.stream(sleepers)\n-                .map(s -> new Object[] { s })\n-                .toArray(Object[][]::new);\n+        );\n@@ -1253,2 +1244,3 @@\n-    @Test(dataProvider = \"oneSecondSleepers\")\n-    public void testSleep3(ThrowingRunnable sleeper) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"oneSecondSleepers\")\n+    void testSleep3(ThrowingRunnable sleeper) throws Exception {\n@@ -1265,3 +1257,2 @@\n-    @DataProvider(name = \"sleepers\")\n-    public Object[][] sleepers() {\n-        ThrowingRunnable[] sleepers = {\n+    static Stream<ThrowingRunnable> sleepers() {\n+        return Stream.of(\n@@ -1273,5 +1264,2 @@\n-                () -> Thread.sleep(Duration.ofMillis(1000)),\n-        };\n-        return Arrays.stream(sleepers)\n-                .map(s -> new Object[] { s })\n-                .toArray(Object[][]::new);\n+                () -> Thread.sleep(Duration.ofMillis(1000))\n+        );\n@@ -1283,2 +1271,3 @@\n-    @Test(dataProvider = \"sleepers\")\n-    public void testSleep4(ThrowingRunnable sleeper) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"sleepers\")\n+    void testSleep4(ThrowingRunnable sleeper) throws Exception {\n@@ -1302,1 +1291,1 @@\n-    public void testSleep4() throws Exception {\n+    void testSleep4() throws Exception {\n@@ -1314,3 +1303,2 @@\n-    @DataProvider(name = \"longSleepers\")\n-    public Object[][] longSleepers() {\n-        ThrowingRunnable[] sleepers = {\n+    static Stream<ThrowingRunnable> longSleepers() {\n+        return Stream.of(\n@@ -1319,5 +1307,2 @@\n-                () -> Thread.sleep(Duration.ofSeconds(20)),\n-        };\n-        return Arrays.stream(sleepers)\n-                .map(s -> new Object[] { s })\n-                .toArray(Object[][]::new);\n+                () -> Thread.sleep(Duration.ofSeconds(20))\n+        );\n@@ -1329,2 +1314,3 @@\n-    @Test(dataProvider = \"longSleepers\")\n-    public void testSleep5(ThrowingRunnable sleeper) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"longSleepers\")\n+    void testSleep5(ThrowingRunnable sleeper) throws Exception {\n@@ -1348,1 +1334,1 @@\n-    public void testSleep6() throws Exception {\n+    void testSleep6() throws Exception {\n@@ -1365,1 +1351,1 @@\n-    public void testSleep7() throws Exception {\n+    void testSleep7() throws Exception {\n@@ -1393,1 +1379,1 @@\n-    public void testSleep8() throws Exception {\n+    void testSleep8() throws Exception {\n@@ -1407,1 +1393,1 @@\n-    public void testSleep9() throws Exception {\n+    void testSleep9() throws Exception {\n@@ -1427,1 +1413,1 @@\n-    public void testSleep10() throws Exception {\n+    void testSleep10() throws Exception {\n@@ -1447,1 +1433,1 @@\n-    public void testSleep11() throws Exception {\n+    void testSleep11() throws Exception {\n@@ -1481,1 +1467,1 @@\n-    public void testContextClassLoader1() throws Exception {\n+    void testContextClassLoader1() throws Exception {\n@@ -1494,1 +1480,1 @@\n-    public void testContextClassLoader2() throws Exception {\n+    void testContextClassLoader2() throws Exception {\n@@ -1512,1 +1498,1 @@\n-    public void testContextClassLoader3() throws Exception {\n+    void testContextClassLoader3() throws Exception {\n@@ -1526,1 +1512,1 @@\n-    public void testContextClassLoader4() throws Exception {\n+    void testContextClassLoader4() throws Exception {\n@@ -1546,1 +1532,1 @@\n-    public void testContextClassLoader5() throws Exception {\n+    void testContextClassLoader5() throws Exception {\n@@ -1563,1 +1549,1 @@\n-    public void testContextClassLoader6() throws Exception {\n+    void testContextClassLoader6() throws Exception {\n@@ -1581,1 +1567,1 @@\n-    public void testUncaughtExceptionHandler1() throws Exception {\n+    void testUncaughtExceptionHandler1() throws Exception {\n@@ -1601,1 +1587,1 @@\n-    public void testUncaughtExceptionHandler2() throws Exception {\n+    void testUncaughtExceptionHandler2() throws Exception {\n@@ -1625,1 +1611,1 @@\n-    public void testUncaughtExceptionHandler3() throws Exception {\n+    void testUncaughtExceptionHandler3() throws Exception {\n@@ -1638,1 +1624,1 @@\n-    public void testThreadId1() throws Exception {\n+    void testThreadId1() throws Exception {\n@@ -1674,1 +1660,1 @@\n-    public void testThreadId2() throws Exception {\n+    void testThreadId2() throws Exception {\n@@ -1688,1 +1674,1 @@\n-    public void testGetState1() {\n+    void testGetState1() {\n@@ -1697,1 +1683,1 @@\n-    public void testGetState2() throws Exception {\n+    void testGetState2() throws Exception {\n@@ -1708,3 +1694,2 @@\n-    public void testGetState3() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testGetState3() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1745,1 +1730,1 @@\n-    public void testGetState4() throws Exception {\n+    void testGetState4() throws Exception {\n@@ -1758,1 +1743,1 @@\n-    public void testGetState5() throws Exception {\n+    void testGetState5() throws Exception {\n@@ -1775,1 +1760,1 @@\n-    public void testGetState6() throws Exception {\n+    void testGetState6() throws Exception {\n@@ -1792,1 +1777,1 @@\n-    public void testGetState7() throws Exception {\n+    void testGetState7() throws Exception {\n@@ -1809,1 +1794,1 @@\n-    public void testGetState8() throws Exception {\n+    void testGetState8() throws Exception {\n@@ -1819,1 +1804,1 @@\n-    public void testIsAlive1() throws Exception {\n+    void testIsAlive1() throws Exception {\n@@ -1841,1 +1826,1 @@\n-    public void testHoldsLock1() throws Exception {\n+    void testHoldsLock1() throws Exception {\n@@ -1852,1 +1837,1 @@\n-    public void testHoldsLock2() throws Exception {\n+    void testHoldsLock2() throws Exception {\n@@ -1865,1 +1850,1 @@\n-    public void testGetStackTrace1() {\n+    void testGetStackTrace1() {\n@@ -1875,3 +1860,2 @@\n-    public void testGetStackTrace2() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"Requires continuations support\");\n+    void testGetStackTrace2() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1889,1 +1873,1 @@\n-    public void testGetStackTrace3() throws Exception {\n+    void testGetStackTrace3() throws Exception {\n@@ -1909,3 +1893,2 @@\n-    public void testGetStackTrace4() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testGetStackTrace4() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1964,1 +1947,1 @@\n-    public void testGetStackTrace5() throws Exception {\n+    void testGetStackTrace5() throws Exception {\n@@ -1985,1 +1968,1 @@\n-    public void testGetStackTrace6() throws Exception {\n+    void testGetStackTrace6() throws Exception {\n@@ -1996,1 +1979,1 @@\n-    public void testGetAllStackTraces1() throws Exception {\n+    void testGetAllStackTraces1() throws Exception {\n@@ -2007,3 +1990,2 @@\n-    public void testGetAllStackTraces2() throws Exception {\n-        if (!ThreadBuilders.supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testGetAllStackTraces2() throws Exception {\n+        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -2068,1 +2050,1 @@\n-    public void testThreadGroup1() throws Exception {\n+    void testThreadGroup1() throws Exception {\n@@ -2085,1 +2067,1 @@\n-    public void testThreadGroup2() throws Exception {\n+    void testThreadGroup2() throws Exception {\n@@ -2099,1 +2081,1 @@\n-    public void testThreadGroup3() throws Exception {\n+    void testThreadGroup3() throws Exception {\n@@ -2127,1 +2109,1 @@\n-    public void testThreadGroup4() throws Exception {\n+    void testThreadGroup4() throws Exception {\n@@ -2151,1 +2133,1 @@\n-    public void testEnumerate1() throws Exception {\n+    void testEnumerate1() throws Exception {\n@@ -2164,1 +2146,1 @@\n-    public void testEnumerate2() throws Exception {\n+    void testEnumerate2() throws Exception {\n@@ -2177,1 +2159,1 @@\n-    public void testEqualsAndHashCode() throws Exception {\n+    void testEqualsAndHashCode() throws Exception {\n@@ -2182,4 +2164,4 @@\n-        assertEquals(vthread1, vthread1);\n-        assertNotEquals(vthread1, vthread2);\n-        assertEquals(vthread2, vthread2);\n-        assertNotEquals(vthread2, vthread1);\n+        assertTrue(vthread1.equals(vthread1));\n+        assertTrue(vthread2.equals(vthread2));\n+        assertFalse(vthread1.equals(vthread2));\n+        assertFalse(vthread2.equals(vthread1));\n@@ -2193,4 +2175,4 @@\n-            assertEquals(vthread1, vthread1);\n-            assertNotEquals(vthread1, vthread2);\n-            assertEquals(vthread2, vthread2);\n-            assertNotEquals(vthread2, vthread1);\n+            assertTrue(vthread1.equals(vthread1));\n+            assertTrue(vthread2.equals(vthread2));\n+            assertFalse(vthread1.equals(vthread2));\n+            assertFalse(vthread2.equals(vthread1));\n@@ -2207,4 +2189,4 @@\n-        assertEquals(vthread1, vthread1);\n-        assertNotEquals(vthread1, vthread2);\n-        assertEquals(vthread2, vthread2);\n-        assertNotEquals(vthread2, vthread1);\n+        assertTrue(vthread1.equals(vthread1));\n+        assertTrue(vthread2.equals(vthread2));\n+        assertFalse(vthread1.equals(vthread2));\n+        assertFalse(vthread2.equals(vthread1));\n@@ -2219,1 +2201,1 @@\n-    public void testToString1() {\n+    void testToString1() {\n@@ -2229,1 +2211,1 @@\n-    public void testToString2() throws Exception {\n+    void testToString2() throws Exception {\n@@ -2241,1 +2223,1 @@\n-    public void testToString3() throws Exception {\n+    void testToString3() throws Exception {\n@@ -2262,1 +2244,1 @@\n-    public void testToString4() throws Exception {\n+    void testToString4() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":184,"deletions":202,"binary":false,"changes":386,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng ThreadLocals\n+ * @run junit ThreadLocals\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +36,1 @@\n-public class ThreadLocals {\n+class ThreadLocals {\n@@ -44,1 +44,1 @@\n-    public void testThreadLocal1() throws Exception {\n+    void testThreadLocal1() throws Exception {\n@@ -59,1 +59,1 @@\n-    public void testThreadLocal2() throws Exception {\n+    void testThreadLocal2() throws Exception {\n@@ -73,1 +73,1 @@\n-    public void testThreadLocal3() throws Exception {\n+    void testThreadLocal3() throws Exception {\n@@ -115,1 +115,1 @@\n-    public void testInheritedThreadLocal1() throws Exception {\n+    void testInheritedThreadLocal1() throws Exception {\n@@ -132,1 +132,1 @@\n-    public void testInheritedThreadLocal2() throws Exception {\n+    void testInheritedThreadLocal2() throws Exception {\n@@ -149,1 +149,1 @@\n-    public void testInheritedThreadLocal3() throws Exception {\n+    void testInheritedThreadLocal3() throws Exception {\n@@ -168,1 +168,1 @@\n-    public void testInheritedThreadLocal4() throws Exception {\n+    void testInheritedThreadLocal4() throws Exception {\n@@ -187,1 +187,1 @@\n-    public void testInheritedThreadLocal5() throws Exception {\n+    void testInheritedThreadLocal5() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadLocals.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @run testng\/othervm -Djdk.tracePinnedThreads=full TracePinnedThreads\n- * @run testng\/othervm -Djdk.tracePinnedThreads=short TracePinnedThreads\n+ * @run junit\/othervm -Djdk.tracePinnedThreads=full TracePinnedThreads\n+ * @run junit\/othervm -Djdk.tracePinnedThreads=short TracePinnedThreads\n@@ -41,2 +41,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-public class TracePinnedThreads {\n+class TracePinnedThreads {\n@@ -65,1 +65,1 @@\n-    public void testPinnedCausedBySynchronizedBlock() throws Exception {\n+    void testPinnedCausedBySynchronizedBlock() throws Exception {\n@@ -79,1 +79,1 @@\n-    public void testPinnedCausedByNativeMethod() throws Exception {\n+    void testPinnedCausedByNativeMethod() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/TracePinnedThreads.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng WaitNotify\n+ * @run junit WaitNotify\n@@ -35,2 +35,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,1 +38,1 @@\n-public class WaitNotify {\n+class WaitNotify {\n@@ -44,1 +44,1 @@\n-    public void testWaitNotify1() throws Exception {\n+    void testWaitNotify1() throws Exception {\n@@ -67,1 +67,1 @@\n-    public void testWaitNotify2() throws Exception {\n+    void testWaitNotify2() throws Exception {\n@@ -87,1 +87,1 @@\n-    public void testWaitNotify3() throws Exception {\n+    void testWaitNotify3() throws Exception {\n@@ -112,1 +112,1 @@\n-    public void testWaitNotify4() throws Exception {\n+    void testWaitNotify4() throws Exception {\n@@ -133,1 +133,1 @@\n-    public void testWaitNotify5() throws Exception {\n+    void testWaitNotify5() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/WaitNotify.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng BasicTests\n+ * @run junit BasicTests\n@@ -37,2 +37,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-public class BasicTests {\n+class BasicTests {\n@@ -43,1 +43,1 @@\n-    public void testGetName1() {\n+    void testGetName1() {\n@@ -49,1 +49,1 @@\n-    public void testGetName2() {\n+    void testGetName2() {\n@@ -51,1 +51,1 @@\n-        assertEquals(group.getName(), \"fred\");\n+        assertEquals(\"fred\", group.getName());\n@@ -55,1 +55,1 @@\n-    public void testGetParent() {\n+    void testGetParent() {\n@@ -66,1 +66,1 @@\n-    public void testParentOf() {\n+    void testParentOf() {\n@@ -88,1 +88,1 @@\n-    public void testActiveCount1() {\n+    void testActiveCount1() {\n@@ -101,1 +101,1 @@\n-    public void testActiveCount2() {\n+    void testActiveCount2() {\n@@ -127,1 +127,1 @@\n-    public void enumerateThreads1() {\n+    void enumerateThreads1() {\n@@ -159,1 +159,1 @@\n-    public void enumerateThreads2() {\n+    void enumerateThreads2() {\n@@ -206,1 +206,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread1, thread2));\n+                assertEquals(Set.of(thread1, thread2), toSet(threads, 2));\n@@ -211,1 +211,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread1, thread2));\n+                assertEquals(Set.of(thread1, thread2), toSet(threads, 2));\n@@ -264,1 +264,1 @@\n-    public void enumerateThreads3() {\n+    void enumerateThreads3() {\n@@ -307,1 +307,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread2, thread3));\n+                assertEquals(Set.of(thread2, thread3), toSet(threads, 2));\n@@ -311,1 +311,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread2, thread3));\n+                assertEquals(Set.of(thread2, thread3), toSet(threads, 2));\n@@ -316,1 +316,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread2, thread3));\n+                assertEquals(Set.of(thread2, thread3), toSet(threads, 2));\n@@ -320,1 +320,1 @@\n-                assertEquals(toSet(threads, 2), Set.of(thread2, thread3));\n+                assertEquals(Set.of(thread2, thread3), toSet(threads, 2));\n@@ -394,1 +394,1 @@\n-    public void enumerateThreads4() {\n+    void enumerateThreads4() {\n@@ -421,1 +421,1 @@\n-    public void testActiveGroupCount() throws Exception {\n+    void testActiveGroupCount() throws Exception {\n@@ -447,1 +447,1 @@\n-    public void testEnumerateGroups1() throws Exception {\n+    void testEnumerateGroups1() throws Exception {\n@@ -480,1 +480,1 @@\n-        assertEquals(toSet(groups, 2), Set.of(group2, group3));\n+        assertEquals(Set.of(group2, group3), toSet(groups, 2));\n@@ -485,1 +485,1 @@\n-        assertEquals(toSet(groups, 2), Set.of(group2, group3));\n+        assertEquals(Set.of(group2, group3), toSet(groups, 2));\n@@ -549,1 +549,1 @@\n-    public void testEnumerateGroups2() throws Exception {\n+    void testEnumerateGroups2() throws Exception {\n@@ -571,1 +571,1 @@\n-    public void testMaxPriority1() {\n+    void testMaxPriority1() {\n@@ -595,1 +595,1 @@\n-    public void testMaxPriority2() {\n+    void testMaxPriority2() {\n@@ -633,1 +633,1 @@\n-    public void testMaxPriority3() {\n+    void testMaxPriority3() {\n@@ -659,1 +659,1 @@\n-    public void testInterrupt1() {\n+    void testInterrupt1() {\n@@ -672,1 +672,1 @@\n-    public void testInterrupt2() {\n+    void testInterrupt2() {\n@@ -688,1 +688,1 @@\n-    public void testInterrupt3() {\n+    void testInterrupt3() {\n@@ -704,1 +704,1 @@\n-    public void testDestroy() {\n+    void testDestroy() {\n@@ -712,1 +712,1 @@\n-    public void testDaemon() {\n+    void testDaemon() {\n@@ -730,1 +730,1 @@\n-    public void testList() {\n+    void testList() {\n@@ -736,1 +736,1 @@\n-    public void testSuspend() {\n+    void testSuspend() {\n@@ -742,1 +742,1 @@\n-    public void testResume() {\n+    void testResume() {\n@@ -748,1 +748,1 @@\n-    public void testStop() {\n+    void testStop() {\n@@ -754,1 +754,1 @@\n-    public void testNull1() {\n+    void testNull1() {\n@@ -760,1 +760,1 @@\n-    public void testNull2() {\n+    void testNull2() {\n@@ -767,1 +767,1 @@\n-    public void testNull3() {\n+    void testNull3() {\n@@ -774,1 +774,1 @@\n-    public void testNull4() {\n+    void testNull4() {\n@@ -781,1 +781,1 @@\n-    public void testNull5() {\n+    void testNull5() {\n@@ -787,1 +787,1 @@\n-    private <T> Set<T> toSet(T[] array, int len) {\n+    private static <T> Set<T> toSet(T[] array, int len) {\n@@ -791,1 +791,1 @@\n-    static class TestThread extends Thread {\n+    private static class TestThread extends Thread {\n@@ -805,0 +805,1 @@\n+        @Override\n","filename":"test\/jdk\/java\/lang\/ThreadGroup\/BasicTests.java","additions":47,"deletions":46,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm VirtualThreads\n+ * @run junit\/othervm VirtualThreads\n@@ -38,1 +38,1 @@\n- * @run testng\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreads\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreads\n@@ -54,3 +54,3 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -65,1 +65,1 @@\n-    public void testGetAllThreadIds() throws Exception {\n+    void testGetAllThreadIds() throws Exception {\n@@ -86,1 +86,1 @@\n-    public void testGetThreadInfo1() throws Exception {\n+    void testGetThreadInfo1() throws Exception {\n@@ -102,1 +102,1 @@\n-    public void testGetThreadInfo2() throws Exception {\n+    void testGetThreadInfo2() throws Exception {\n@@ -115,3 +115,2 @@\n-    public void testGetThreadInfo3() throws Exception {\n-        if (!supportsCustomScheduler())\n-            throw new SkipException(\"No support for custom schedulers\");\n+    void testGetThreadInfo3() throws Exception {\n+        assumeTrue(supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -160,1 +159,1 @@\n-    public void testGetThreadInfo4() throws Exception {\n+    void testGetThreadInfo4() throws Exception {\n@@ -178,1 +177,1 @@\n-    public void testGetThreadCpuTime1() {\n+    void testGetThreadCpuTime1() {\n@@ -194,1 +193,1 @@\n-    public void testGetThreadCpuTime2() throws Exception {\n+    void testGetThreadCpuTime2() throws Exception {\n@@ -206,1 +205,1 @@\n-    public void testGetThreadUserTime1() {\n+    void testGetThreadUserTime1() {\n@@ -222,1 +221,1 @@\n-    public void testGetThreadUserTime2() throws Exception {\n+    void testGetThreadUserTime2() throws Exception {\n@@ -234,2 +233,2 @@\n-    @Test(expectedExceptions = { UnsupportedOperationException.class })\n-    public void testGetCurrentThreadCpuTime() throws Exception {\n+    @Test\n+    void testGetCurrentThreadCpuTime() throws Exception {\n@@ -237,1 +236,2 @@\n-            ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime();\n+            assertThrows(UnsupportedOperationException.class,\n+                    () -> ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime());\n@@ -245,2 +245,2 @@\n-    @Test(expectedExceptions = { UnsupportedOperationException.class })\n-    public void testGetCurrentThreadUserTime() throws Exception {\n+    @Test\n+    void testGetCurrentThreadUserTime() throws Exception {\n@@ -248,1 +248,2 @@\n-            ManagementFactory.getThreadMXBean().getCurrentThreadUserTime();\n+            assertThrows(UnsupportedOperationException.class,\n+                    () -> ManagementFactory.getThreadMXBean().getCurrentThreadUserTime());\n@@ -257,1 +258,1 @@\n-    public void testGetCurrentThreadAllocatedBytes() throws Exception {\n+    void testGetCurrentThreadAllocatedBytes() throws Exception {\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm BlockingSocketOps\n+ * @run junit BlockingSocketOps\n@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Djdk.useDirectRegister BlockingSocketOps\n+ * @run junit\/othervm -Djdk.useDirectRegister BlockingSocketOps\n@@ -47,1 +47,1 @@\n- * @run testng\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations BlockingSocketOps\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations BlockingSocketOps\n@@ -65,2 +65,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -68,1 +68,1 @@\n-public class BlockingSocketOps {\n+class BlockingSocketOps {\n@@ -74,1 +74,1 @@\n-    public void testSocketReadWrite1() throws Exception {\n+    void testSocketReadWrite1() throws Exception {\n@@ -97,1 +97,1 @@\n-    public void testSocketRead1() throws Exception {\n+    void testSocketRead1() throws Exception {\n@@ -105,1 +105,1 @@\n-    public void testSocketRead2() throws Exception {\n+    void testSocketRead2() throws Exception {\n@@ -135,1 +135,1 @@\n-    public void testSocketWrite1() throws Exception {\n+    void testSocketWrite1() throws Exception {\n@@ -164,1 +164,1 @@\n-    public void testSocketReadPeerClose1() throws Exception {\n+    void testSocketReadPeerClose1() throws Exception {\n@@ -184,1 +184,1 @@\n-    public void testSocketReadPeerClose2() throws Exception {\n+    void testSocketReadPeerClose2() throws Exception {\n@@ -209,1 +209,1 @@\n-    public void testSocketReadAsyncClose1() throws Exception {\n+    void testSocketReadAsyncClose1() throws Exception {\n@@ -217,1 +217,1 @@\n-    public void testSocketReadAsyncClose2() throws Exception {\n+    void testSocketReadAsyncClose2() throws Exception {\n@@ -245,1 +245,1 @@\n-    public void testSocketReadInterrupt1() throws Exception {\n+    void testSocketReadInterrupt1() throws Exception {\n@@ -253,1 +253,1 @@\n-    public void testSocketReadInterrupt2() throws Exception {\n+    void testSocketReadInterrupt2() throws Exception {\n@@ -286,1 +286,1 @@\n-    public void testSocketWriteAsyncClose() throws Exception {\n+    void testSocketWriteAsyncClose() throws Exception {\n@@ -310,1 +310,1 @@\n-    public void testSocketWriteInterrupt() throws Exception {\n+    void testSocketWriteInterrupt() throws Exception {\n@@ -338,1 +338,1 @@\n-    public void testSocketReadUrgentData() throws Exception {\n+    void testSocketReadUrgentData() throws Exception {\n@@ -370,1 +370,1 @@\n-    public void testServerSocketAccept1() throws Exception {\n+    void testServerSocketAccept1() throws Exception {\n@@ -391,1 +391,1 @@\n-    public void testServerSocketAccept2() throws Exception {\n+    void testServerSocketAccept2() throws Exception {\n@@ -399,1 +399,1 @@\n-    public void testServerSocketAccept3() throws Exception {\n+    void testServerSocketAccept3() throws Exception {\n@@ -429,1 +429,1 @@\n-    public void testServerSocketAcceptAsyncClose1() throws Exception {\n+    void testServerSocketAcceptAsyncClose1() throws Exception {\n@@ -437,1 +437,1 @@\n-    public void testServerSocketAcceptAsyncClose2() throws Exception {\n+    void testServerSocketAcceptAsyncClose2() throws Exception {\n@@ -466,1 +466,1 @@\n-    public void testServerSocketAcceptInterrupt1() throws Exception {\n+    void testServerSocketAcceptInterrupt1() throws Exception {\n@@ -474,1 +474,1 @@\n-    public void testServerSocketAcceptInterrupt2() throws Exception {\n+    void testServerSocketAcceptInterrupt2() throws Exception {\n@@ -507,1 +507,1 @@\n-    public void testDatagramSocketSendReceive1() throws Exception {\n+    void testDatagramSocketSendReceive1() throws Exception {\n@@ -526,1 +526,1 @@\n-                assertEquals(p2.getSocketAddress(), s1.getLocalSocketAddress());\n+                assertEquals(s1.getLocalSocketAddress(), p2.getSocketAddress());\n@@ -536,1 +536,1 @@\n-    public void testDatagramSocketSendReceive2() throws Exception {\n+    void testDatagramSocketSendReceive2() throws Exception {\n@@ -544,1 +544,1 @@\n-    public void testDatagramSocketSendReceive3() throws Exception {\n+    void testDatagramSocketSendReceive3() throws Exception {\n@@ -570,1 +570,1 @@\n-                assertEquals(p2.getSocketAddress(), s1.getLocalSocketAddress());\n+                assertEquals(s1.getLocalSocketAddress(), p2.getSocketAddress());\n@@ -580,1 +580,1 @@\n-    public void testDatagramSocketReceiveTimeout() throws Exception {\n+    void testDatagramSocketReceiveTimeout() throws Exception {\n@@ -600,1 +600,1 @@\n-    public void testDatagramSocketReceiveAsyncClose1() throws Exception {\n+    void testDatagramSocketReceiveAsyncClose1() throws Exception {\n@@ -608,1 +608,1 @@\n-    public void testDatagramSocketReceiveAsyncClose2() throws Exception {\n+    void testDatagramSocketReceiveAsyncClose2() throws Exception {\n@@ -639,1 +639,1 @@\n-    public void testDatagramSocketReceiveInterrupt1() throws Exception {\n+    void testDatagramSocketReceiveInterrupt1() throws Exception {\n@@ -647,1 +647,1 @@\n-    public void testDatagramSocketReceiveInterrupt2() throws Exception {\n+    void testDatagramSocketReceiveInterrupt2() throws Exception {\n","filename":"test\/jdk\/java\/net\/vthread\/BlockingSocketOps.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm BlockingChannelOps\n+ * @run junit BlockingChannelOps\n@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Djdk.useDirectRegister BlockingChannelOps\n+ * @run junit\/othervm -Djdk.useDirectRegister BlockingChannelOps\n@@ -47,1 +47,1 @@\n- * @run testng\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations BlockingChannelOps\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations BlockingChannelOps\n@@ -70,2 +70,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -73,1 +73,1 @@\n-public class BlockingChannelOps {\n+class BlockingChannelOps {\n@@ -79,1 +79,1 @@\n-    public void testSocketChannelReadWrite1() throws Exception {\n+    void testSocketChannelReadWrite1() throws Exception {\n@@ -103,1 +103,1 @@\n-    public void testSocketChannelRead() throws Exception {\n+    void testSocketChannelRead() throws Exception {\n@@ -126,1 +126,1 @@\n-    public void testSocketChannelWrite() throws Exception {\n+    void testSocketChannelWrite() throws Exception {\n@@ -154,1 +154,1 @@\n-    public void testSocketChannelReadAsyncClose() throws Exception {\n+    void testSocketChannelReadAsyncClose() throws Exception {\n@@ -171,1 +171,1 @@\n-    public void testSocketChannelReadInterrupt() throws Exception {\n+    void testSocketChannelReadInterrupt() throws Exception {\n@@ -194,1 +194,1 @@\n-    public void testSocketChannelWriteAsyncClose() throws Exception {\n+    void testSocketChannelWriteAsyncClose() throws Exception {\n@@ -225,1 +225,1 @@\n-    public void testSocketChannelWriteInterrupt() throws Exception {\n+    void testSocketChannelWriteInterrupt() throws Exception {\n@@ -259,1 +259,1 @@\n-    public void testSocketAdaptorRead1() throws Exception {\n+    void testSocketAdaptorRead1() throws Exception {\n@@ -267,1 +267,1 @@\n-    public void testSocketAdaptorRead2() throws Exception {\n+    void testSocketAdaptorRead2() throws Exception {\n@@ -296,1 +296,1 @@\n-    public void testServerSocketChannelAccept1() throws Exception {\n+    void testServerSocketChannelAccept1() throws Exception {\n@@ -313,1 +313,1 @@\n-    public void testServerSocketChannelAccept2() throws Exception {\n+    void testServerSocketChannelAccept2() throws Exception {\n@@ -334,1 +334,1 @@\n-    public void testServerSocketChannelAcceptAsyncClose() throws Exception {\n+    void testServerSocketChannelAcceptAsyncClose() throws Exception {\n@@ -353,1 +353,1 @@\n-    public void testServerSocketChannelAcceptInterrupt() throws Exception {\n+    void testServerSocketChannelAcceptInterrupt() throws Exception {\n@@ -378,1 +378,1 @@\n-    public void testSocketChannelAdaptorAccept1() throws Exception {\n+    void testSocketChannelAdaptorAccept1() throws Exception {\n@@ -386,1 +386,1 @@\n-    public void testSocketChannelAdaptorAccept2() throws Exception {\n+    void testSocketChannelAdaptorAccept2() throws Exception {\n@@ -413,1 +413,1 @@\n-    public void testDatagramChannelSendReceive1() throws Exception {\n+    void testDatagramChannelSendReceive1() throws Exception {\n@@ -438,1 +438,1 @@\n-    public void testDatagramChannelSendReceive2() throws Exception {\n+    void testDatagramChannelSendReceive2() throws Exception {\n@@ -462,1 +462,1 @@\n-    public void testDatagramChannelReceiveAsyncClose() throws Exception {\n+    void testDatagramChannelReceiveAsyncClose() throws Exception {\n@@ -480,1 +480,1 @@\n-    public void testDatagramChannelReceiveInterrupt() throws Exception {\n+    void testDatagramChannelReceiveInterrupt() throws Exception {\n@@ -504,1 +504,1 @@\n-    public void testDatagramSocketAdaptorReceive1() throws Exception {\n+    void testDatagramSocketAdaptorReceive1() throws Exception {\n@@ -512,1 +512,1 @@\n-    public void testDatagramSocketAdaptorReceive2() throws Exception {\n+    void testDatagramSocketAdaptorReceive2() throws Exception {\n@@ -543,1 +543,1 @@\n-    public void testDatagramSocketAdaptorReceiveAsyncClose1() throws Exception {\n+    void testDatagramSocketAdaptorReceiveAsyncClose1() throws Exception {\n@@ -552,1 +552,1 @@\n-    public void testDatagramSocketAdaptorReceiveAsyncClose2() throws Exception {\n+    void testDatagramSocketAdaptorReceiveAsyncClose2() throws Exception {\n@@ -579,1 +579,1 @@\n-    public void testDatagramSocketAdaptorReceiveInterrupt1() throws Exception {\n+    void testDatagramSocketAdaptorReceiveInterrupt1() throws Exception {\n@@ -588,1 +588,1 @@\n-    public void testDatagramSocketAdaptorReceiveInterrupt2() throws Exception {\n+    void testDatagramSocketAdaptorReceiveInterrupt2() throws Exception {\n@@ -621,1 +621,1 @@\n-    public void testPipeReadWrite1() throws Exception {\n+    void testPipeReadWrite1() throws Exception {\n@@ -645,1 +645,1 @@\n-    public void testPipeReadWrite2() throws Exception {\n+    void testPipeReadWrite2() throws Exception {\n@@ -668,1 +668,1 @@\n-    public void testPipeReadWrite3() throws Exception {\n+    void testPipeReadWrite3() throws Exception {\n@@ -696,1 +696,1 @@\n-    public void testPipeReadAsyncClose() throws Exception {\n+    void testPipeReadAsyncClose() throws Exception {\n@@ -714,1 +714,1 @@\n-    public void testPipeReadInterrupt() throws Exception {\n+    void testPipeReadInterrupt() throws Exception {\n@@ -738,1 +738,1 @@\n-    public void testPipeWriteAsyncClose() throws Exception {\n+    void testPipeWriteAsyncClose() throws Exception {\n@@ -770,1 +770,1 @@\n-    public void testPipeWriteInterrupt() throws Exception {\n+    void testPipeWriteInterrupt() throws Exception {\n","filename":"test\/jdk\/java\/nio\/channels\/vthread\/BlockingChannelOps.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm -DthreadFactory=platform ThreadPerTaskExecutorTest\n+ * @run junit\/othervm -DthreadFactory=platform ThreadPerTaskExecutorTest\n@@ -34,1 +34,1 @@\n- * @run testng\/othervm -DthreadFactory=virtual ThreadPerTaskExecutorTest\n+ * @run junit\/othervm -DthreadFactory=virtual ThreadPerTaskExecutorTest\n@@ -48,0 +48,1 @@\n+import java.util.stream.Stream;\n@@ -50,5 +51,6 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -56,1 +58,1 @@\n-public class ThreadPerTaskExecutorTest {\n+class ThreadPerTaskExecutorTest {\n@@ -63,2 +65,2 @@\n-    private ScheduledExecutorService scheduler;\n-    private Object[][] threadFactories;\n+    private static ScheduledExecutorService scheduler;\n+    private static List<ThreadFactory> threadFactories;\n@@ -66,8 +68,3 @@\n-    @BeforeClass\n-    public void setUp() throws Exception {\n-        ThreadFactory factory = (task) -> {\n-            Thread thread = new Thread(task);\n-            thread.setDaemon(true);\n-            return thread;\n-        };\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        scheduler = Executors.newSingleThreadScheduledExecutor();\n@@ -83,3 +80,1 @@\n-        this.threadFactories = list.stream()\n-                .map(f -> new Object[] { f })\n-                .toArray(Object[][]::new);\n+        threadFactories = list;\n@@ -88,2 +83,2 @@\n-    @AfterClass\n-    public void tearDown() {\n+    @AfterAll\n+    static void shutdown() {\n@@ -93,3 +88,2 @@\n-    @DataProvider(name = \"factories\")\n-    public Object[][] factories() {\n-        return threadFactories;\n+    private static Stream<ThreadFactory> factories() {\n+        return threadFactories.stream();\n@@ -98,6 +92,3 @@\n-    @DataProvider(name = \"executors\")\n-    public Object[][] executors() {\n-        return Arrays.stream(threadFactories)\n-                .map(f -> Executors.newThreadPerTaskExecutor((ThreadFactory) f[0]))\n-                .map(e -> new Object[] { e })\n-                .toArray(Object[][]::new);\n+    private static Stream<ExecutorService> executors() {\n+        return threadFactories.stream()\n+                .map(f -> Executors.newThreadPerTaskExecutor(f));\n@@ -117,2 +108,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testThreadPerTask(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testThreadPerTask(ThreadFactory factory) throws Exception {\n@@ -138,1 +130,1 @@\n-        assertEquals(threadCount.get(), NUM_TASKS);\n+        assertEquals(NUM_TASKS, threadCount.get());\n@@ -149,1 +141,1 @@\n-    public void testThreadFactory() throws Exception {\n+    void testThreadFactory() throws Exception {\n@@ -169,2 +161,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testShutdown(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testShutdown(ExecutorService executor) throws Exception {\n@@ -191,2 +184,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testShutdownNow(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testShutdownNow(ExecutorService executor) throws Exception {\n@@ -204,1 +198,1 @@\n-                Throwable e = expectThrows(ExecutionException.class, result::get);\n+                Throwable e = assertThrows(ExecutionException.class, result::get);\n@@ -218,2 +212,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testClose1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testClose1(ExecutorService executor) throws Exception {\n@@ -229,2 +224,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testClose2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testClose2(ExecutorService executor) throws Exception {\n@@ -247,2 +243,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testClose3(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testClose3(ExecutorService executor) throws Exception {\n@@ -260,1 +257,1 @@\n-        expectThrows(ExecutionException.class, future::get);\n+        assertThrows(ExecutionException.class, future::get);\n@@ -266,2 +263,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testClose4(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testClose4(ExecutorService executor) throws Exception {\n@@ -278,1 +276,1 @@\n-        expectThrows(ExecutionException.class, future::get);\n+        assertThrows(ExecutionException.class, future::get);\n@@ -284,2 +282,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testClose5(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testClose5(ExecutorService executor) throws Exception {\n@@ -293,2 +292,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testAwaitTermination1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testAwaitTermination1(ExecutorService executor) throws Exception {\n@@ -303,2 +303,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testAwaitTermination2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testAwaitTermination2(ExecutorService executor) throws Exception {\n@@ -320,2 +321,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testSubmitAfterShutdown(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testSubmitAfterShutdown(ExecutorService executor) throws Exception {\n@@ -329,1 +331,1 @@\n-                expectThrows(RejectedExecutionException.class,\n+                assertThrows(RejectedExecutionException.class,\n@@ -340,2 +342,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testSubmitAfterTermination(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testSubmitAfterTermination(ExecutorService executor) throws Exception {\n@@ -344,1 +347,1 @@\n-        expectThrows(RejectedExecutionException.class, () -> executor.submit(() -> {}));\n+        assertThrows(RejectedExecutionException.class, () -> executor.submit(() -> {}));\n@@ -350,2 +353,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testSubmitNulls1(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testSubmitNulls1(ThreadFactory factory) {\n@@ -356,2 +360,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testSubmitNulls2(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testSubmitNulls2(ThreadFactory factory) {\n@@ -365,2 +370,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny1(ExecutorService executor) throws Exception {\n@@ -379,2 +385,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny2(ExecutorService executor) throws Exception {\n@@ -411,2 +418,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny3(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny3(ExecutorService executor) throws Exception {\n@@ -431,2 +439,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny4(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny4(ExecutorService executor) throws Exception {\n@@ -453,2 +462,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny5(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny5(ExecutorService executor) throws Exception {\n@@ -468,2 +478,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAny6(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAny6(ExecutorService executor) throws Exception {\n@@ -485,2 +496,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyWithTimeout1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyWithTimeout1(ExecutorService executor) throws Exception {\n@@ -499,2 +511,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyWithTimeout2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyWithTimeout2(ExecutorService executor) throws Exception {\n@@ -531,2 +544,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyWithTimeout3(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyWithTimeout3(ExecutorService executor) throws Exception {\n@@ -551,2 +565,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyWithTimeout4(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyWithTimeout4(ExecutorService executor) throws Exception {\n@@ -568,2 +583,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyWithInterruptSet(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyWithInterruptSet(ExecutorService executor) throws Exception {\n@@ -588,2 +604,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInterruptInvokeAny(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInterruptInvokeAny(ExecutorService executor) throws Exception {\n@@ -614,2 +631,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAnyAfterShutdown(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAnyAfterShutdown(ExecutorService executor) throws Exception {\n@@ -626,2 +644,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAnyEmpty1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAnyEmpty1(ThreadFactory factory) throws Exception {\n@@ -636,2 +655,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAnyEmpty2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAnyEmpty2(ThreadFactory factory) throws Exception {\n@@ -647,2 +667,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAnyNull1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAnyNull1(ThreadFactory factory) throws Exception {\n@@ -657,2 +678,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAnyNull2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAnyNull2(ThreadFactory factory) throws Exception {\n@@ -670,2 +692,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAll1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAll1(ExecutorService executor) throws Exception {\n@@ -695,2 +718,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAll2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAll2(ExecutorService executor) throws Exception {\n@@ -714,1 +738,1 @@\n-            Throwable e1 = expectThrows(ExecutionException.class, () -> list.get(0).get());\n+            Throwable e1 = assertThrows(ExecutionException.class, () -> list.get(0).get());\n@@ -716,1 +740,1 @@\n-            Throwable e2 = expectThrows(ExecutionException.class, () -> list.get(1).get());\n+            Throwable e2 = assertThrows(ExecutionException.class, () -> list.get(1).get());\n@@ -724,2 +748,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAll3(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAll3(ExecutorService executor) throws Exception {\n@@ -749,2 +774,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAll4(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAll4(ExecutorService executor) throws Exception {\n@@ -787,2 +813,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllInterrupt1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllInterrupt1(ExecutorService executor) throws Exception {\n@@ -811,2 +838,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllInterrupt3(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllInterrupt3(ExecutorService executor) throws Exception {\n@@ -835,2 +863,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllInterrupt4(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllInterrupt4(ExecutorService executor) throws Exception {\n@@ -861,2 +890,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllInterrupt6(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllInterrupt6(ExecutorService executor) throws Exception {\n@@ -887,2 +917,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllAfterShutdown1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllAfterShutdown1(ExecutorService executor) throws Exception {\n@@ -897,2 +928,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllAfterShutdown2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllAfterShutdown2(ExecutorService executor) throws Exception {\n@@ -910,2 +942,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllEmpty1(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllEmpty1(ExecutorService executor) throws Exception {\n@@ -918,2 +951,3 @@\n-    @Test(dataProvider = \"executors\")\n-    public void testInvokeAllEmpty2(ExecutorService executor) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testInvokeAllEmpty2(ExecutorService executor) throws Exception {\n@@ -926,2 +960,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAllNull1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAllNull1(ThreadFactory factory) throws Exception {\n@@ -933,2 +968,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAllNull2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAllNull2(ThreadFactory factory) throws Exception {\n@@ -943,2 +979,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAllNull3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAllNull3(ThreadFactory factory) throws Exception {\n@@ -951,2 +988,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAllNull4(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAllNull4(ThreadFactory factory) throws Exception {\n@@ -960,2 +998,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInvokeAllNull5(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInvokeAllNull5(ThreadFactory factory) throws Exception {\n@@ -975,1 +1014,1 @@\n-    public void testNoThreads1() throws Exception {\n+    void testNoThreads1() throws Exception {\n@@ -981,1 +1020,1 @@\n-    public void testNoThreads2() throws Exception {\n+    void testNoThreads2() throws Exception {\n@@ -987,1 +1026,1 @@\n-    public void testNoThreads3() throws Exception {\n+    void testNoThreads3() throws Exception {\n@@ -994,1 +1033,1 @@\n-    public void testNoThreads4() throws Exception {\n+    void testNoThreads4() throws Exception {\n@@ -1001,1 +1040,1 @@\n-    public void testNull() {\n+    void testNull() {\n","filename":"test\/jdk\/java\/util\/concurrent\/ThreadPerTaskExecutor\/ThreadPerTaskExecutorTest.java","additions":182,"deletions":143,"binary":false,"changes":325,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng ManyBindings\n+ * @run junit ManyBindings\n@@ -43,2 +43,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,2 +46,1 @@\n-@Test\n-public class ManyBindings {\n+class ManyBindings {\n@@ -59,1 +58,2 @@\n-    public void testPlatformThread() {\n+    @Test\n+    void testPlatformThread() {\n@@ -66,1 +66,2 @@\n-    public void testVirtualThread() throws Exception {\n+    @Test\n+    void testVirtualThread() throws Exception {\n@@ -146,1 +147,1 @@\n-                assertEquals(key.get(), value);\n+                assertEquals(value, key.get());\n@@ -160,1 +161,1 @@\n-                assertEquals(key.get(), value);\n+                assertEquals(value, key.get());\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/ScopedValue\/ManyBindings.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng ScopeValueAPI\n+ * @run junit ScopeValueAPI\n@@ -38,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -39,3 +40,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -43,2 +45,1 @@\n-@Test\n-public class ScopeValueAPI {\n+class ScopeValueAPI {\n@@ -46,6 +47,2 @@\n-    @DataProvider\n-    public Object[][] factories() {\n-        return new Object[][] {\n-                { Thread.ofPlatform().factory() },\n-                { Thread.ofVirtual().factory() },\n-        };\n+    private static Stream<ThreadFactory> factories() {\n+        return Stream.of(Thread.ofPlatform().factory(), Thread.ofVirtual().factory());\n@@ -57,2 +54,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testRun(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testRun(ThreadFactory factory) throws Exception {\n@@ -70,2 +68,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testRunThrows(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testRunThrows(ThreadFactory factory) throws Exception {\n@@ -84,2 +83,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCall(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCall(ThreadFactory factory) throws Exception {\n@@ -89,1 +89,1 @@\n-            assertEquals(result, \"duke\");\n+            assertEquals(\"duke\", result);\n@@ -96,2 +96,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCallThrows(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCallThrows(ThreadFactory factory) throws Exception {\n@@ -110,2 +111,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testGet(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testGet(ThreadFactory factory) throws Exception {\n@@ -120,1 +122,1 @@\n-                assertEquals(name1.get(), \"duke\");\n+                assertEquals(\"duke\", name1.get());\n@@ -129,1 +131,1 @@\n-                assertEquals(name1.get(), \"duke\");\n+                assertEquals(\"duke\", name1.get());\n@@ -141,2 +143,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testIsBound(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testIsBound(ThreadFactory factory) throws Exception {\n@@ -171,2 +174,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testOrElse(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testOrElse(ThreadFactory factory) throws Exception {\n@@ -176,1 +180,1 @@\n-            assertEquals(name.orElse(\"default\"), \"default\");\n+            assertEquals(\"default\", name.orElse(\"default\"));\n@@ -180,2 +184,2 @@\n-                assertEquals(name.orElse(null), \"duke\");\n-                assertEquals(name.orElse(\"default\"), \"duke\");\n+                assertEquals(\"duke\", name.orElse(null));\n+                assertEquals(\"duke\", name.orElse(\"default\"));\n@@ -186,2 +190,2 @@\n-                assertEquals(name.orElse(null), \"duke\");\n-                assertEquals(name.orElse(\"default\"), \"duke\");\n+                assertEquals(\"duke\", name.orElse(null));\n+                assertEquals(\"duke\", name.orElse(\"default\"));\n@@ -196,2 +200,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testOrElseThrow(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testOrElseThrow(ThreadFactory factory) throws Exception {\n@@ -205,1 +210,1 @@\n-                assertEquals(name.orElseThrow(FooException::new), \"duke\");\n+                assertEquals(\"duke\", name.orElseThrow(FooException::new));\n@@ -210,1 +215,1 @@\n-                assertEquals(name.orElseThrow(FooException::new), \"duke\");\n+                assertEquals(\"duke\", name.orElseThrow(FooException::new));\n@@ -219,2 +224,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testTwoBindings(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testTwoBindings(ThreadFactory factory) throws Exception {\n@@ -229,2 +235,2 @@\n-                assertEquals(name.get(), \"duke\");\n-                assertEquals((int) age.get(), 100);\n+                assertEquals(\"duke\", name.get());\n+                assertEquals(100, (int) age.get());\n@@ -239,2 +245,2 @@\n-                assertEquals(name.get(), \"duke\");\n-                assertEquals((int) age.get(), 100);\n+                assertEquals(\"duke\", name.get());\n+                assertEquals(100, (int) age.get());\n@@ -252,2 +258,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testRebinding(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testRebinding(ThreadFactory factory) throws Exception {\n@@ -260,1 +267,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -264,1 +271,1 @@\n-                    assertTrue(\"duchess\".equals(name.get()));\n+                    assertEquals(\"duchess\", name.get());\n@@ -268,1 +275,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -275,1 +282,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -279,1 +286,1 @@\n-                    assertTrue(\"duchess\".equals(name.get()));\n+                    assertEquals(\"duchess\", name.get());\n@@ -284,1 +291,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -294,2 +301,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testRebindingFromNull(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testRebindingFromNull(ThreadFactory factory) throws Exception {\n@@ -302,1 +310,1 @@\n-                assertEquals(name.get(), null);\n+                assertTrue(name.get() == null);\n@@ -317,1 +325,1 @@\n-                assertEquals(name.get(), null);\n+                assertTrue(name.get() == null);\n@@ -336,2 +344,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testRebindingToNull(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testRebindingToNull(ThreadFactory factory) throws Exception {\n@@ -344,1 +353,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -352,1 +361,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -359,1 +368,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -368,1 +377,1 @@\n-                assertEquals(name.get(), \"duke\");\n+                assertEquals(\"duke\", name.get());\n@@ -378,2 +387,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCarrierGet(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCarrierGet(ThreadFactory factory) throws Exception {\n@@ -386,1 +396,1 @@\n-            assertEquals(carrier1.get(name), \"duke\");\n+            assertEquals(\"duke\", carrier1.get(name));\n@@ -391,2 +401,2 @@\n-            assertEquals(carrier2.get(name), \"duke\");\n-            assertEquals((int) carrier2.get(age), 20);\n+            assertEquals(\"duke\", carrier2.get(name));\n+            assertEquals(20, (int) carrier2.get(age));\n@@ -399,1 +409,2 @@\n-    public void testNullPointerException() {\n+    @Test\n+    void testNullPointerException() {\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/ScopedValue\/ScopeValueAPI.java","additions":80,"deletions":69,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm PreviewFeaturesNotEnabled\n+ * @run junit\/othervm PreviewFeaturesNotEnabled\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +36,1 @@\n-public class PreviewFeaturesNotEnabled {\n+class PreviewFeaturesNotEnabled {\n@@ -41,1 +41,1 @@\n-    public void testUnsupportedOperationException() {\n+    void testUnsupportedOperationException() {\n@@ -49,1 +49,1 @@\n-    public void testNoUnsupportedOperationException() {\n+    void testNoUnsupportedOperationException() {\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/PreviewFeaturesNotEnabled.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm -DthreadFactory=platform StructuredTaskScopeTest\n+ * @run junit\/othervm -DthreadFactory=platform StructuredTaskScopeTest\n@@ -37,1 +37,1 @@\n- * @run testng\/othervm -DthreadFactory=virtual StructuredTaskScopeTest\n+ * @run junit\/othervm -DthreadFactory=virtual StructuredTaskScopeTest\n@@ -68,18 +68,15 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-public class StructuredTaskScopeTest {\n-    private ScheduledExecutorService scheduler;\n-    private Object[][] threadFactories;\n-\n-    @BeforeClass\n-    public void setUp() throws Exception {\n-        ThreadFactory factory = (task) -> {\n-            Thread thread = new Thread(task);\n-            thread.setDaemon(true);\n-            return thread;\n-        };\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StructuredTaskScopeTest {\n+    private static ScheduledExecutorService scheduler;\n+    private static List<ThreadFactory> threadFactories;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        scheduler = Executors.newSingleThreadScheduledExecutor();\n@@ -95,3 +92,1 @@\n-        this.threadFactories = list.stream()\n-                .map(f -> new Object[] { f })\n-                .toArray(Object[][]::new);\n+        threadFactories = list;\n@@ -100,2 +95,2 @@\n-    @AfterClass\n-    public void tearDown() {\n+    @AfterAll\n+    static void shutdown() {\n@@ -105,6 +100,2 @@\n-    \/**\n-     * A provider of ThreadFactory objects for tests.\n-     *\/\n-    @DataProvider\n-    public Object[][] factories() {\n-        return threadFactories;\n+    private static Stream<ThreadFactory> factories() {\n+        return threadFactories.stream();\n@@ -116,2 +107,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFork1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFork1(ThreadFactory factory) throws Exception {\n@@ -131,2 +123,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFork2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFork2(ThreadFactory factory) throws Exception {\n@@ -150,2 +143,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkConfined(ThreadFactory factory) throws Exception {\n@@ -160,1 +154,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, future1::get);\n+            Throwable ex = assertThrows(ExecutionException.class, future1::get);\n@@ -177,1 +171,1 @@\n-                ex = expectThrows(ExecutionException.class, future::get);\n+                ex = assertThrows(ExecutionException.class, future::get);\n@@ -189,2 +183,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkAfterShutdown(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkAfterShutdown(ThreadFactory factory) throws Exception {\n@@ -207,2 +202,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkAfterClose(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkAfterClose(ThreadFactory factory) throws Exception {\n@@ -220,1 +216,1 @@\n-    public void testForkReject() throws Exception {\n+    void testForkReject() throws Exception {\n@@ -258,2 +254,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testHandleComplete1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testHandleComplete1(ThreadFactory factory) throws Exception {\n@@ -278,1 +275,1 @@\n-            assertEquals(futures, Set.of(future1, future2, future3));\n+            assertEquals(Set.of(future1, future2, future3), futures);\n@@ -285,2 +282,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testHandleComplete2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testHandleComplete2(ThreadFactory factory) throws Exception {\n@@ -288,1 +286,0 @@\n-\n@@ -325,1 +322,1 @@\n-    public void testJoinWithNoThreads() throws Exception {\n+    void testJoinWithNoThreads() throws Exception {\n@@ -334,2 +331,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinWithThreads(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinWithThreads(ThreadFactory factory) throws Exception {\n@@ -342,1 +340,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -349,2 +347,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinConfined(ThreadFactory factory) throws Exception {\n@@ -357,1 +356,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, future1::get);\n+            Throwable ex = assertThrows(ExecutionException.class, future1::get);\n@@ -366,1 +365,1 @@\n-                ex = expectThrows(ExecutionException.class, future2::get);\n+                ex = assertThrows(ExecutionException.class, future2::get);\n@@ -377,2 +376,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptJoin1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptJoin1(ThreadFactory factory) throws Exception {\n@@ -380,0 +380,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -381,1 +383,1 @@\n-                Thread.sleep(Duration.ofMillis(100));\n+                latch.await();\n@@ -392,0 +394,3 @@\n+            } finally {\n+                \/\/ let task continue\n+                latch.countDown();\n@@ -396,1 +401,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -403,2 +408,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptJoin2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptJoin2(ThreadFactory factory) throws Exception {\n@@ -406,0 +412,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -407,1 +415,1 @@\n-                Thread.sleep(Duration.ofSeconds(3));\n+                latch.await();\n@@ -418,0 +426,3 @@\n+            } finally {\n+                \/\/ let task continue\n+                latch.countDown();\n@@ -422,1 +433,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -429,2 +440,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinWithShutdown1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinWithShutdown1(ThreadFactory factory) throws Exception {\n@@ -447,2 +459,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinWithShutdown2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinWithShutdown2(ThreadFactory factory) throws Exception {\n@@ -482,1 +495,1 @@\n-    public void testJoinAfterShutdown() throws Exception {\n+    void testJoinAfterShutdown() throws Exception {\n@@ -493,1 +506,1 @@\n-    public void testJoinAfterClose() throws Exception {\n+    void testJoinAfterClose() throws Exception {\n@@ -505,2 +518,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinUntil1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinUntil1(ThreadFactory factory) throws Exception {\n@@ -525,2 +539,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinUntil2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinUntil2(ThreadFactory factory) throws Exception {\n@@ -548,2 +563,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinUntil3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinUntil3(ThreadFactory factory) throws Exception {\n@@ -576,2 +592,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testJoinUntil4(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testJoinUntil4(ThreadFactory factory) throws Exception {\n@@ -613,2 +630,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptJoinUntil1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptJoinUntil1(ThreadFactory factory) throws Exception {\n@@ -616,0 +634,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -617,1 +637,1 @@\n-                Thread.sleep(Duration.ofSeconds(2));\n+                latch.await();\n@@ -624,1 +644,1 @@\n-                scope.joinUntil(Instant.now().plusSeconds(10));\n+                scope.joinUntil(Instant.now().plusSeconds(30));\n@@ -628,0 +648,3 @@\n+            } finally {\n+                \/\/ let task continue\n+                latch.countDown();\n@@ -632,1 +655,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -639,2 +662,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptJoinUntil2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptJoinUntil2(ThreadFactory factory) throws Exception {\n@@ -642,0 +666,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -643,1 +669,1 @@\n-                Thread.sleep(Duration.ofSeconds(3));\n+                latch.await();\n@@ -654,0 +680,3 @@\n+            } finally {\n+                \/\/ let task continue\n+                latch.countDown();\n@@ -658,1 +687,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -665,1 +694,2 @@\n-    public void testShutdownAfterClose() throws Exception {\n+    @Test\n+    void testShutdownAfterClose() throws Exception {\n@@ -676,2 +706,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testShutdownConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testShutdownConfined(ThreadFactory factory) throws Exception {\n@@ -687,1 +718,1 @@\n-                Throwable ex = expectThrows(ExecutionException.class, future::get);\n+                Throwable ex = assertThrows(ExecutionException.class, future::get);\n@@ -696,1 +727,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, future1::get);\n+            Throwable ex = assertThrows(ExecutionException.class, future1::get);\n@@ -715,1 +746,2 @@\n-    public void testCloseWithoutJoin1() {\n+    @Test\n+    void testCloseWithoutJoin1() {\n@@ -724,2 +756,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCloseWithoutJoin2(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCloseWithoutJoin2(ThreadFactory factory) {\n@@ -739,2 +772,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCloseWithoutJoin3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCloseWithoutJoin3(ThreadFactory factory) throws Exception {\n@@ -757,2 +791,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCloseConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCloseConfined(ThreadFactory factory) throws Exception {\n@@ -765,1 +800,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, future1::get);\n+            Throwable ex = assertThrows(ExecutionException.class, future1::get);\n@@ -774,1 +809,1 @@\n-                ex = expectThrows(ExecutionException.class, future2::get);\n+                ex = assertThrows(ExecutionException.class, future2::get);\n@@ -785,2 +820,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptClose1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptClose1(ThreadFactory factory) throws Exception {\n@@ -821,2 +857,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptClose2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptClose2(ThreadFactory factory) throws Exception {\n@@ -857,1 +894,1 @@\n-    public void testStructureViolation1() throws Exception {\n+    void testStructureViolation1() throws Exception {\n@@ -884,2 +921,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFuture1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFuture1(ThreadFactory factory) throws Exception {\n@@ -893,1 +931,1 @@\n-            assertEquals(future.get(), \"foo\");\n+            assertEquals(\"foo\", future.get());\n@@ -895,1 +933,1 @@\n-            assertEquals(future.resultNow(), \"foo\");\n+            assertEquals(\"foo\", future.resultNow());\n@@ -904,2 +942,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFuture2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFuture2(ThreadFactory factory) throws Exception {\n@@ -913,1 +952,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, future::get);\n+            Throwable ex = assertThrows(ExecutionException.class, future::get);\n@@ -925,2 +964,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFuture3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFuture3(ThreadFactory factory) throws Exception {\n@@ -951,2 +991,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFutureWithShutdown(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFutureWithShutdown(ThreadFactory factory) throws Exception {\n@@ -988,2 +1029,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testFutureCancelConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testFutureCancelConfined(ThreadFactory factory) throws Exception {\n@@ -1002,1 +1044,1 @@\n-                Throwable ex = expectThrows(ExecutionException.class, future2::get);\n+                Throwable ex = assertThrows(ExecutionException.class, future2::get);\n@@ -1015,1 +1057,1 @@\n-    public void testToString() throws Exception {\n+    void testToString() throws Exception {\n@@ -1036,1 +1078,1 @@\n-    public void testNulls() throws Exception {\n+    void testNulls() throws Exception {\n@@ -1062,1 +1104,1 @@\n-    public void testShutdownOnSuccess1() throws Exception {\n+    void testShutdownOnSuccess1() throws Exception {\n@@ -1073,1 +1115,1 @@\n-    public void testShutdownOnSuccess2() throws Exception {\n+    void testShutdownOnSuccess2() throws Exception {\n@@ -1082,2 +1124,2 @@\n-            assertEquals(scope.result(), \"foo\");\n-            assertEquals(scope.result(e -> null), \"foo\");\n+            assertEquals(\"foo\", scope.result());\n+            assertEquals(\"foo\", scope.result(e -> null));\n@@ -1091,1 +1133,1 @@\n-    public void testShutdownOnSuccess3() throws Exception {\n+    void testShutdownOnSuccess3() throws Exception {\n@@ -1099,2 +1141,2 @@\n-            assertEquals(scope.result(), \"foo\");\n-            assertEquals(scope.result(e -> null), \"foo\");\n+            assertEquals(\"foo\", scope.result());\n+            assertEquals(\"foo\", scope.result(e -> null));\n@@ -1108,1 +1150,1 @@\n-    public void testShutdownOnSuccess4() throws Exception {\n+    void testShutdownOnSuccess4() throws Exception {\n@@ -1115,1 +1157,1 @@\n-            Throwable ex = expectThrows(ExecutionException.class, () -> scope.result());\n+            Throwable ex = assertThrows(ExecutionException.class, () -> scope.result());\n@@ -1118,1 +1160,1 @@\n-            ex = expectThrows(FooException.class, () -> scope.result(e -> new FooException(e)));\n+            ex = assertThrows(FooException.class, () -> scope.result(e -> new FooException(e)));\n@@ -1127,1 +1169,1 @@\n-    public void testShutdownOnSuccess5() throws Exception {\n+    void testShutdownOnSuccess5() throws Exception {\n@@ -1140,1 +1182,1 @@\n-            Throwable ex = expectThrows(FooException.class,\n+            Throwable ex = assertThrows(FooException.class,\n@@ -1150,1 +1192,1 @@\n-    public void testShutdownOnFailure1() throws Throwable {\n+    void testShutdownOnFailure1() throws Throwable {\n@@ -1162,1 +1204,1 @@\n-    public void testShutdownOnFailure2() throws Throwable {\n+    void testShutdownOnFailure2() throws Throwable {\n@@ -1179,1 +1221,1 @@\n-    public void testShutdownOnFailure3() throws Throwable {\n+    void testShutdownOnFailure3() throws Throwable {\n@@ -1190,1 +1232,1 @@\n-            ex = expectThrows(ExecutionException.class, () -> scope.throwIfFailed());\n+            ex = assertThrows(ExecutionException.class, () -> scope.throwIfFailed());\n@@ -1193,1 +1235,1 @@\n-            ex = expectThrows(FooException.class,\n+            ex = assertThrows(FooException.class,\n@@ -1203,1 +1245,1 @@\n-    public void testShutdownOnFailure4() throws Throwable {\n+    void testShutdownOnFailure4() throws Throwable {\n@@ -1219,1 +1261,1 @@\n-            ex = expectThrows(FooException.class,\n+            ex = assertThrows(FooException.class,\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/StructuredTaskScopeTest.java","additions":185,"deletions":143,"binary":false,"changes":328,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm StructuredThreadDumpTest\n+ * @run junit\/othervm StructuredThreadDumpTest\n@@ -46,2 +46,2 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-public class StructuredThreadDumpTest {\n+class StructuredThreadDumpTest {\n@@ -56,1 +56,1 @@\n-    public void testTree() throws Exception {\n+    void testTree() throws Exception {\n@@ -98,1 +98,1 @@\n-    public void testNested() throws Exception {\n+    void testNested() throws Exception {\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/StructuredThreadDumpTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng WithScopedValue\n+ * @run junit WithScopedValue\n@@ -38,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -39,3 +40,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -43,2 +45,1 @@\n-@Test\n-public class WithScopedValue {\n+class WithScopedValue {\n@@ -46,6 +47,2 @@\n-    @DataProvider\n-    public Object[][] factories() {\n-        return new Object[][] {\n-                { Thread.ofPlatform().factory() },\n-                { Thread.ofVirtual().factory() },\n-        };\n+    private static Stream<ThreadFactory> factories() {\n+        return Stream.of(Thread.ofPlatform().factory(), Thread.ofVirtual().factory());\n@@ -57,2 +54,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkInheritsScopedValue1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkInheritsScopedValue1(ThreadFactory factory) throws Exception {\n@@ -75,2 +73,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkInheritsScopedValue2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkInheritsScopedValue2(ThreadFactory factory) throws Exception {\n@@ -99,2 +98,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testForkInheritsScopedValue3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testForkInheritsScopedValue3(ThreadFactory factory) throws Exception {\n@@ -131,1 +131,2 @@\n-    public void testStructureViolation1() throws Exception {\n+    @Test\n+    void testStructureViolation1() throws Exception {\n@@ -167,1 +168,2 @@\n-    public void testStructureViolation2() throws Exception {\n+    @Test\n+    void testStructureViolation2() throws Exception {\n@@ -179,1 +181,2 @@\n-    public void testStructureViolation3() throws Exception {\n+    @Test\n+    void testStructureViolation3() throws Exception {\n@@ -192,1 +195,2 @@\n-    public void testStructureViolation4() throws Exception {\n+    @Test\n+    void testStructureViolation4() throws Exception {\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/WithScopedValue.java","additions":27,"deletions":23,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm -DthreadFactory=platform ThreadFlockTest\n+ * @run junit\/othervm -DthreadFactory=platform ThreadFlockTest\n@@ -36,1 +36,1 @@\n- * @run testng\/othervm -DthreadFactory=virtual ThreadFlockTest\n+ * @run junit\/othervm -DthreadFactory=virtual ThreadFlockTest\n@@ -46,0 +46,1 @@\n+import java.util.stream.Stream;\n@@ -48,18 +49,14 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-public class ThreadFlockTest {\n-    private ScheduledExecutorService scheduler;\n-    private Object[][] threadFactories;\n-\n-    @BeforeClass\n-    public void setUp() throws Exception {\n-        ThreadFactory factory = (task) -> {\n-            Thread thread = new Thread(task);\n-            thread.setDaemon(true);\n-            return thread;\n-        };\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ThreadFlockTest {\n+    private static ScheduledExecutorService scheduler;\n+    private static List<ThreadFactory> threadFactories;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        scheduler = Executors.newSingleThreadScheduledExecutor();\n@@ -75,3 +72,1 @@\n-        this.threadFactories = list.stream()\n-                .map(f -> new Object[] { f })\n-                .toArray(Object[][]::new);\n+        threadFactories = list;\n@@ -80,2 +75,2 @@\n-    @AfterClass\n-    public void tearDown() {\n+    @AfterAll\n+    static void shutdown() {\n@@ -85,3 +80,2 @@\n-    @DataProvider(name = \"factories\")\n-    public Object[][] factories() {\n-        return threadFactories;\n+    private static Stream<ThreadFactory> factories() {\n+        return threadFactories.stream();\n@@ -94,1 +88,1 @@\n-    public void testName() {\n+    void testName() {\n@@ -96,1 +90,1 @@\n-            assertEquals(flock.name(), null);\n+            assertTrue(flock.name() == null);\n@@ -98,1 +92,1 @@\n-            assertEquals(flock.name(), null);  \/\/ after close\n+            assertTrue(flock.name() == null);  \/\/ after close\n@@ -101,1 +95,1 @@\n-            assertEquals(flock.name(), \"fetcher\");\n+            assertEquals(\"fetcher\", flock.name());\n@@ -103,1 +97,1 @@\n-            assertEquals(flock.name(), \"fetcher\");  \/\/ after close\n+            assertEquals(\"fetcher\", flock.name());  \/\/ after close\n@@ -111,1 +105,1 @@\n-    public void testOwner() {\n+    void testOwner() {\n@@ -123,1 +117,1 @@\n-    public void testState() {\n+    void testState() {\n@@ -144,2 +138,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testThreads(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testThreads(ThreadFactory factory) {\n@@ -169,1 +164,1 @@\n-            assertEquals(threads, flock.threads().collect(Collectors.toSet()));\n+            assertEquals(flock.threads().collect(Collectors.toSet()), threads);\n@@ -182,2 +177,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testContainsThread1(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testContainsThread1(ThreadFactory factory) {\n@@ -225,2 +221,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testContainsThread2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testContainsThread2(ThreadFactory factory) throws Exception {\n@@ -279,2 +276,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStart(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStart(ThreadFactory factory) throws Exception {\n@@ -293,2 +291,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStartAfterShutdown(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStartAfterShutdown(ThreadFactory factory) {\n@@ -298,1 +297,1 @@\n-            expectThrows(IllegalStateException.class, () -> flock.start(thread));\n+            assertThrows(IllegalStateException.class, () -> flock.start(thread));\n@@ -305,2 +304,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStartAfterClose(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStartAfterClose(ThreadFactory factory) {\n@@ -310,1 +310,1 @@\n-        expectThrows(IllegalStateException.class, () -> flock.start(thread));\n+        assertThrows(IllegalStateException.class, () -> flock.start(thread));\n@@ -317,2 +317,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStartAfterStarted(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStartAfterStarted(ThreadFactory factory) {\n@@ -322,1 +323,1 @@\n-            expectThrows(IllegalThreadStateException.class, () -> flock.start(thread));\n+            assertThrows(IllegalThreadStateException.class, () -> flock.start(thread));\n@@ -329,2 +330,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStartConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStartConfined(ThreadFactory factory) throws Exception {\n@@ -383,1 +385,1 @@\n-    public void testAwaitAllWithNoThreads() throws Exception {\n+    void testAwaitAllWithNoThreads() throws Exception {\n@@ -393,2 +395,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllWithThreads(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllWithThreads(ThreadFactory factory) throws Exception {\n@@ -413,2 +416,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllWithTimeout1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllWithTimeout1(ThreadFactory factory) throws Exception {\n@@ -434,2 +438,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllWithTimeout2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllWithTimeout2(ThreadFactory factory) throws Exception {\n@@ -437,0 +442,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -439,1 +446,1 @@\n-                    Thread.sleep(Duration.ofSeconds(30));\n+                    latch.await();\n@@ -454,1 +461,1 @@\n-                thread.interrupt();\n+                latch.countDown();\n@@ -462,2 +469,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllWithTimeout3(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllWithTimeout3(ThreadFactory factory) throws Exception {\n@@ -465,0 +473,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -467,1 +477,1 @@\n-                    Thread.sleep(Duration.ofSeconds(30));\n+                    latch.await();\n@@ -481,1 +491,1 @@\n-                thread.interrupt();\n+                latch.countDown();\n@@ -492,2 +502,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllWithTimeout4(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllWithTimeout4(ThreadFactory factory) throws Exception {\n@@ -495,0 +506,2 @@\n+            var latch = new CountDownLatch(1);\n+\n@@ -497,1 +510,1 @@\n-                    Thread.sleep(Duration.ofSeconds(30));\n+                    latch.await();\n@@ -513,1 +526,1 @@\n-                thread.interrupt();\n+                latch.countDown();\n@@ -524,2 +537,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptAwaitAll1(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptAwaitAll1(ThreadFactory factory) {\n@@ -577,2 +591,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptAwaitAll2(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptAwaitAll2(ThreadFactory factory) {\n@@ -629,1 +644,1 @@\n-    public void testAwaitAfterClose() throws Exception {\n+    void testAwaitAfterClose() throws Exception {\n@@ -639,2 +654,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testAwaitAllConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testAwaitAllConfined(ThreadFactory factory) throws Exception {\n@@ -679,2 +695,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testWakeupAwaitAll1(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testWakeupAwaitAll1(ThreadFactory factory) throws Exception {\n@@ -707,2 +724,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testWakeupAwaitAll2(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testWakeupAwaitAll2(ThreadFactory factory) throws Exception {\n@@ -740,2 +758,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testWakeupConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testWakeupConfined(ThreadFactory factory) throws Exception {\n@@ -785,1 +804,1 @@\n-    public void testCloseWithNoThreads() {\n+    void testCloseWithNoThreads() {\n@@ -795,2 +814,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCloseWithThreads(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCloseWithThreads(ThreadFactory factory) {\n@@ -821,1 +841,1 @@\n-    public void testCloseAfterClose() {\n+    void testCloseAfterClose() {\n@@ -832,2 +852,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testCloseConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testCloseConfined(ThreadFactory factory) throws Exception {\n@@ -872,2 +893,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptClose1(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptClose1(ThreadFactory factory) {\n@@ -895,2 +917,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInterruptClose2(ThreadFactory factory) {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInterruptClose2(ThreadFactory factory) {\n@@ -918,2 +941,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testShutdownConfined(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testShutdownConfined(ThreadFactory factory) throws Exception {\n@@ -971,1 +995,1 @@\n-    public void testStructureViolation() {\n+    void testStructureViolation() {\n@@ -989,2 +1013,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testThreadExitWithOpenFlock(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testThreadExitWithOpenFlock(ThreadFactory factory) throws Exception {\n@@ -1020,1 +1045,1 @@\n-    public void testToString() {\n+    void testToString() {\n@@ -1030,1 +1055,1 @@\n-    public void testNulls() {\n+    void testNulls() {\n@@ -1032,3 +1057,3 @@\n-            expectThrows(NullPointerException.class, () -> flock.start(null));\n-            expectThrows(NullPointerException.class, () -> flock.awaitAll(null));\n-            expectThrows(NullPointerException.class, () -> flock.containsThread(null));\n+            assertThrows(NullPointerException.class, () -> flock.start(null));\n+            assertThrows(NullPointerException.class, () -> flock.awaitAll(null));\n+            assertThrows(NullPointerException.class, () -> flock.containsThread(null));\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/ThreadFlockTest.java","additions":131,"deletions":106,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng WithScopedValue\n+ * @run junit WithScopedValue\n@@ -36,1 +36,0 @@\n-import java.util.concurrent.Executors;\n@@ -39,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -40,15 +40,9 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-@Test\n-public class WithScopedValue {\n-\n-    @DataProvider(name = \"factories\")\n-    public Object[][] factories() {\n-        var defaultThreadFactory = Executors.defaultThreadFactory();\n-        var virtualThreadFactory = Thread.ofVirtual().factory();\n-        return new Object[][]{\n-                { defaultThreadFactory, },\n-                { virtualThreadFactory, },\n-        };\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class WithScopedValue {\n+\n+    private static Stream<ThreadFactory> factories() {\n+        return Stream.of(Thread.ofPlatform().factory(), Thread.ofVirtual().factory());\n@@ -60,2 +54,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testInheritsScopedValue(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testInheritsScopedValue(ThreadFactory factory) throws Exception {\n@@ -74,1 +69,1 @@\n-        assertEquals(value, \"duke\");\n+        assertEquals(\"duke\", value);\n@@ -80,1 +75,2 @@\n-    public void testStructureViolation1() {\n+    @Test\n+    void testStructureViolation1() {\n@@ -102,1 +98,2 @@\n-    public void testStructureViolation2() {\n+    @Test\n+    void testStructureViolation2() {\n@@ -133,1 +130,2 @@\n-    public void testStructureViolation3() {\n+    @Test\n+    void testStructureViolation3() {\n@@ -164,1 +162,2 @@\n-    public void testStructureViolation4() {\n+    @Test\n+    void testStructureViolation4() {\n@@ -194,2 +193,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStructureViolation5(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStructureViolation5(ThreadFactory factory) throws Exception {\n@@ -200,1 +200,1 @@\n-                expectThrows(StructureViolationException.class, () -> flock.start(thread));\n+                assertThrows(StructureViolationException.class, () -> flock.start(thread));\n@@ -208,2 +208,3 @@\n-    @Test(dataProvider = \"factories\")\n-    public void testStructureViolation6(ThreadFactory factory) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"factories\")\n+    void testStructureViolation6(ThreadFactory factory) throws Exception {\n@@ -215,1 +216,1 @@\n-                    expectThrows(StructureViolationException.class, () -> flock.start(thread));\n+                    assertThrows(StructureViolationException.class, () -> flock.start(thread));\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/WithScopedValue.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"}]}