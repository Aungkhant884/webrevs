{"files":[{"patch":"@@ -2571,1 +2571,0 @@\n-        VPointer p1(n->as_Mem(), phase(), lpt(), nullptr, false);\n@@ -2573,6 +2572,2 @@\n-          VPointer p2(mem->as_Mem(), phase(), lpt(), nullptr, false);\n-          if (p1.not_equal(p2)) {\n-            \/\/ Either Less or Greater -> provably no overlap between the two memory regions.\n-            mem = mem->in(MemNode::Memory);\n-          } else {\n-            \/\/ No proof that there is no overlap. Stop here.\n+          VPointer p_store(mem->as_Mem(), phase(), lpt(), nullptr, false);\n+          if (p_store.overlap_possible_with_any_in(p)) {\n@@ -2580,0 +2575,2 @@\n+          } else {\n+            mem = mem->in(MemNode::Memory);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -122,0 +122,14 @@\n+  bool overlap_possible_with_any_in(Node_List* p) {\n+    for (uint k = 0; k < p->size(); k++) {\n+      MemNode* mem = p->at(k)->as_Mem();\n+      VPointer p_mem(mem, phase(), lpt(), nullptr, false);\n+      \/\/ Only if we know that we have Less or Greater can we\n+      \/\/ be sure that there can never be an overlap between\n+      \/\/ the two memory regions.\n+      if (!not_equal(p_mem)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @requires vm.compiler2.enabled\n+ * @bug 8316594\n+ * @summary In SuperWord::output, LoadVector can be moved before StoreVector, but only if it is proven to be safe.\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestMovingLoadBeforeStore2::test\n+ *                   -XX:LoopUnrollLimit=250 -Xbatch\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM\n+ *                   compiler.loopopts.superword.TestMovingLoadBeforeStore2\n+ *\/\n+\n+package compiler.loopopts.superword;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class TestMovingLoadBeforeStore2 {\n+    static int RANGE = 1024*64;\n+\n+    static int NINE = 9;\n+\n+    private static final Random random = Utils.getRandomInstance();\n+\n+    public static void main(String[] strArr) {\n+        byte a[] = new byte[RANGE];\n+        byte b[] = new byte[RANGE];\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+                b[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] b_ref = b.clone();\n+            byte[] a_res = a.clone();\n+            byte[] b_res = b.clone();\n+            test_ref(a_ref, b_ref);\n+            test(a_res, b_res);\n+            verify(\"a\", a_ref, a_res);\n+            verify(\"b\", b_ref, b_res);\n+        }\n+    }\n+\n+    static void verify(String name, byte[] ref, byte[] res) {\n+        boolean fail = false;\n+        for (int j = 0; j < ref.length; j++) {\n+            if (ref[j] != res[j]) {\n+                System.out.println(\"Wrong: \" + j + \":\" + ref[j] + \" vs \" + res[j]);\n+                fail = true;\n+            }\n+        }\n+        if (fail) {\n+            throw new RuntimeException(\"wrong result on array \" + name);\n+        }\n+    }\n+\n+    static void test(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i +  0]++;\n+            a[47 + i +  1]++;\n+            a[47 + i +  2]++;\n+            a[47 + i +  3]++;\n+            b[NINE + i +  0]++;\n+            b[NINE + i +  1]++;\n+            b[NINE + i +  2]++;\n+            b[NINE + i +  3]++;\n+        }\n+    }\n+\n+    static void test_ref(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i +  0]++;\n+            a[47 + i +  1]++;\n+            a[47 + i +  2]++;\n+            a[47 + i +  3]++;\n+            b[NINE + i +  0]++;\n+            b[NINE + i +  1]++;\n+            b[NINE + i +  2]++;\n+            b[NINE + i +  3]++;\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore2.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}