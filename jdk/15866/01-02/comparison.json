{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8316679\n+ * @bug 8316679 8316594\n@@ -31,0 +31,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,0 +36,1 @@\n+ *                   --add-modules java.base --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n@@ -41,0 +43,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -45,0 +48,2 @@\n+    static int NINE = 9;\n+\n@@ -46,0 +51,1 @@\n+    static Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -49,0 +55,1 @@\n+        byte b[] = new byte[RANGE];\n@@ -59,0 +66,24 @@\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+                b[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] b_ref = b.clone();\n+            byte[] a_res = a.clone();\n+            byte[] b_res = b.clone();\n+            ref2(a_ref, b_ref);\n+            test2(a_res, b_res);\n+            verify(\"a in test2\", a_ref, a_res, a);\n+            verify(\"b in test2\", b_ref, b_res, b);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] a_res = a.clone();\n+            ref3(a_ref);\n+            test3(a_res);\n+            verify(\"a in test3\", a_ref, a_res, a);\n+        }\n@@ -99,0 +130,56 @@\n+\n+    static void test2(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i + 0]++;\n+            a[47 + i + 1]++;\n+            a[47 + i + 2]++;\n+            a[47 + i + 3]++;\n+            b[NINE + i + 0]++;\n+            b[NINE + i + 1]++;\n+            b[NINE + i + 2]++;\n+            b[NINE + i + 3]++;\n+        }\n+    }\n+\n+    static void ref2(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i + 0]++;\n+            a[47 + i + 1]++;\n+            a[47 + i + 2]++;\n+            a[47 + i + 3]++;\n+            b[NINE + i + 0]++;\n+            b[NINE + i + 1]++;\n+            b[NINE + i + 2]++;\n+            b[NINE + i + 3]++;\n+        }\n+    }\n+\n+    static void test3(byte[] a) {\n+        for (int i = 51; i < 6000; i++) {\n+            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            UNSAFE.putIntUnaligned(a, adr + 0*4, UNSAFE.getIntUnaligned(a, adr + 0*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 1*4, UNSAFE.getIntUnaligned(a, adr + 1*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 2*4, UNSAFE.getIntUnaligned(a, adr + 2*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 3*4, UNSAFE.getIntUnaligned(a, adr + 3*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 4*4, UNSAFE.getIntUnaligned(a, adr + 4*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 5*4, UNSAFE.getIntUnaligned(a, adr + 5*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 6*4, UNSAFE.getIntUnaligned(a, adr + 6*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 7*4, UNSAFE.getIntUnaligned(a, adr + 7*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 8*4, UNSAFE.getIntUnaligned(a, adr + 8*4) + 1);\n+        }\n+    }\n+\n+    static void ref3(byte[] a) {\n+        for (int i = 51; i < 6000; i++) {\n+            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            UNSAFE.putIntUnaligned(a, adr + 0*4, UNSAFE.getIntUnaligned(a, adr + 0*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 1*4, UNSAFE.getIntUnaligned(a, adr + 1*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 2*4, UNSAFE.getIntUnaligned(a, adr + 2*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 3*4, UNSAFE.getIntUnaligned(a, adr + 3*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 4*4, UNSAFE.getIntUnaligned(a, adr + 4*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 5*4, UNSAFE.getIntUnaligned(a, adr + 5*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 6*4, UNSAFE.getIntUnaligned(a, adr + 6*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 7*4, UNSAFE.getIntUnaligned(a, adr + 7*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 8*4, UNSAFE.getIntUnaligned(a, adr + 8*4) + 1);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/**\n- * @test\n- * @requires vm.compiler2.enabled\n- * @bug 8316594\n- * @summary In SuperWord::output, LoadVector can be moved before StoreVector, but only if it is proven to be safe.\n- * @library \/test\/lib\n- * @run main\/othervm -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestMovingLoadBeforeStore2::test\n- *                   -XX:LoopUnrollLimit=250 -Xbatch\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM\n- *                   compiler.loopopts.superword.TestMovingLoadBeforeStore2\n- *\/\n-\n-package compiler.loopopts.superword;\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n-public class TestMovingLoadBeforeStore2 {\n-    static int RANGE = 1024*64;\n-\n-    static int NINE = 9;\n-\n-    private static final Random random = Utils.getRandomInstance();\n-\n-    public static void main(String[] strArr) {\n-        byte a[] = new byte[RANGE];\n-        byte b[] = new byte[RANGE];\n-        for (int i = 0; i < 100; i++) {\n-            for (int j = 0; j < a.length; j++) {\n-                a[j] = (byte)random.nextInt();\n-                b[j] = (byte)random.nextInt();\n-            }\n-            byte[] a_ref = a.clone();\n-            byte[] b_ref = b.clone();\n-            byte[] a_res = a.clone();\n-            byte[] b_res = b.clone();\n-            test_ref(a_ref, b_ref);\n-            test(a_res, b_res);\n-            verify(\"a\", a_ref, a_res);\n-            verify(\"b\", b_ref, b_res);\n-        }\n-    }\n-\n-    static void verify(String name, byte[] ref, byte[] res) {\n-        boolean fail = false;\n-        for (int j = 0; j < ref.length; j++) {\n-            if (ref[j] != res[j]) {\n-                System.out.println(\"Wrong: \" + j + \":\" + ref[j] + \" vs \" + res[j]);\n-                fail = true;\n-            }\n-        }\n-        if (fail) {\n-            throw new RuntimeException(\"wrong result on array \" + name);\n-        }\n-    }\n-\n-    static void test(byte[] a, byte[] b) {\n-        for (int i = 46; i < 6000; i++) {\n-            a[47 + i +  0]++;\n-            a[47 + i +  1]++;\n-            a[47 + i +  2]++;\n-            a[47 + i +  3]++;\n-            b[NINE + i +  0]++;\n-            b[NINE + i +  1]++;\n-            b[NINE + i +  2]++;\n-            b[NINE + i +  3]++;\n-        }\n-    }\n-\n-    static void test_ref(byte[] a, byte[] b) {\n-        for (int i = 46; i < 6000; i++) {\n-            a[47 + i +  0]++;\n-            a[47 + i +  1]++;\n-            a[47 + i +  2]++;\n-            a[47 + i +  3]++;\n-            b[NINE + i +  0]++;\n-            b[NINE + i +  1]++;\n-            b[NINE + i +  2]++;\n-            b[NINE + i +  3]++;\n-        }\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore2.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"}]}