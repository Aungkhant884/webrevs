{"files":[{"patch":"@@ -94,1 +94,5 @@\n-  if( in1->is_Phi() && (phi = in1->as_Phi()) && !phi->is_copy() && phi->region()->is_Loop() && phi->in(2)==add)\n+#ifdef ASSERT\n+  if (in1->is_Phi())\n+    assert(!in1->as_Phi()->is_copy(), \"in1 cannot be a copy\");\n+#endif\n+  if (in1->is_Phi() && (phi = in1->as_Phi()) && phi->region()->is_Loop() && phi->in(2) == add)\n@@ -96,1 +100,5 @@\n-  if( in2->is_Phi() && (phi = in2->as_Phi()) && !phi->is_copy() && phi->region()->is_Loop() && phi->in(2)==add){\n+#ifdef ASSERT\n+  if (in2->is_Phi())\n+    assert(!in2->as_Phi()->is_copy(), \"in2 cannot be a copy\");\n+#endif\n+  if (in2->is_Phi() && (phi = in2->as_Phi()) && phi->region()->is_Loop() && phi->in(2) == add) {\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1865,2 +1865,1 @@\n-  if( is_copy() )               \/\/ Already degraded to a Copy ?\n-    return NULL;                \/\/ No change\n+  assert(!is_copy(), \"this phi cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -176,1 +176,3 @@\n-  Node* is_copy() const {\n+#ifdef ASSERT\n+  \/\/ Whether the PhiNode is degraded to a copy. Only used in assertions.\n+  bool is_copy() const {\n@@ -178,3 +180,2 @@\n-    DEBUG_ONLY(const Node* r = _in[Region];)\n-    assert(r != NULL && r->is_Region(), \"Not valid control\");\n-    return NULL;  \/\/ not a copy!\n+    const Node* r = _in[Region];\n+    return r == NULL || !r->is_Region();\n@@ -182,0 +183,1 @@\n+#endif \/\/ASSERT\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  if( phi->is_copy() ) return NULL;\n+  assert(!phi->is_copy(), \"this phi cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,4 @@\n-  return (is_Phi() && !as_Phi()->is_copy() &&\n+#ifdef ASSERT\n+  if (is_Phi()) assert(!as_Phi()->is_copy(), \"this phi cannot be a copy\");\n+#endif\n+  return (is_Phi() &&\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4575,2 +4575,2 @@\n-  if (phi_base != NULL && !phi_base->is_copy()) {\n-    \/\/ do not examine phi if degraded to a copy\n+  if (phi_base != NULL) {\n+    assert(!phi_base->is_copy(), \"phi_base cannot be a copy\");\n@@ -4891,4 +4891,2 @@\n-  while (n->is_Phi() && (n = n->as_Phi()->is_copy()) != NULL) {\n-    if (mem == n)  return true;\n-    if (n == NULL)  break;\n-  }\n+  if (n->is_Phi())\n+    assert(!n->as_Phi()->is_copy(), \"n cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -127,1 +127,2 @@\n-  if (phi->is_copy() || !phi->region()->is_CountedLoop()) {\n+  assert(!phi->is_copy(), \"this phi cannot be a copy\");\n+  if (!phi->region()->is_CountedLoop()) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}