{"files":[{"patch":"@@ -94,1 +94,1 @@\n-  if( in1->is_Phi() && (phi = in1->as_Phi()) && !phi->is_copy() && phi->region()->is_Loop() && phi->in(2)==add)\n+  if (in1->is_Phi() && (phi = in1->as_Phi()) && phi->region()->is_Loop() && phi->in(2) == add)\n@@ -96,1 +96,1 @@\n-  if( in2->is_Phi() && (phi = in2->as_Phi()) && !phi->is_copy() && phi->region()->is_Loop() && phi->in(2)==add){\n+  if (in2->is_Phi() && (phi = in2->as_Phi()) && phi->region()->is_Loop() && phi->in(2) == add) {\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-            \/\/ Eagerly replace phis with top to avoid phis copies generation.\n+            \/\/ Eagerly replace phis with top to avoid regionless phis.\n@@ -592,1 +592,1 @@\n-        \/\/ Kill phis here to avoid it. PhiNode::is_copy() will be always false.\n+        \/\/ Kill phis here to avoid it.\n@@ -607,1 +607,1 @@\n-          \/\/ Eagerly replace phis to avoid copies generation.\n+          \/\/ Eagerly replace phis to avoid regionless phis.\n@@ -1380,1 +1380,0 @@\n-  if (r == NULL)  return in(1);         \/\/ Already degraded to a Copy\n@@ -1864,4 +1863,0 @@\n-  \/\/ The next should never happen after 6297035 fix.\n-  if( is_copy() )               \/\/ Already degraded to a Copy ?\n-    return NULL;                \/\/ No change\n-\n@@ -1869,0 +1864,1 @@\n+  assert(r != NULL && r->is_Region(), \"this phi must have a region\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -118,3 +118,1 @@\n-\/\/ paths to the RegionNode.  For speed reasons (to avoid another pass) we\n-\/\/ can turn PhiNodes into copys in-place by NULL'ing out their RegionNode\n-\/\/ input in slot 0.\n+\/\/ paths to the RegionNode.\n@@ -176,7 +174,0 @@\n-  Node* is_copy() const {\n-    \/\/ The node is a real phi if _in[0] is a Region node.\n-    DEBUG_ONLY(const Node* r = _in[Region];)\n-    assert(r != NULL && r->is_Region(), \"Not valid control\");\n-    return NULL;  \/\/ not a copy!\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  if( phi->is_copy() ) return NULL;\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  return (is_Phi() && !as_Phi()->is_copy() &&\n+  return (is_Phi() &&\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4575,2 +4575,1 @@\n-  if (phi_base != NULL && !phi_base->is_copy()) {\n-    \/\/ do not examine phi if degraded to a copy\n+  if (phi_base != NULL) {\n@@ -4891,4 +4890,0 @@\n-  while (n->is_Phi() && (n = n->as_Phi()->is_copy()) != NULL) {\n-    if (mem == n)  return true;\n-    if (n == NULL)  break;\n-  }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  if (phi->is_copy() || !phi->region()->is_CountedLoop()) {\n+  if (!phi->region()->is_CountedLoop()) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}