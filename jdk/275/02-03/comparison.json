{"files":[{"patch":"@@ -94,1 +94,0 @@\n-  assert(!in1->is_Phi() || !in1->as_Phi()->is_copy(), \"in1 cannot be a copy\");\n@@ -97,1 +96,0 @@\n-  assert(!in2->is_Phi() || !in2->as_Phi()->is_copy(), \"in2 cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-            \/\/ Eagerly replace phis with top to avoid phis copies generation.\n+            \/\/ Eagerly replace phis with top to avoid regionless phis.\n@@ -592,1 +592,1 @@\n-        \/\/ Kill phis here to avoid it. PhiNode::is_copy() will be always false.\n+        \/\/ Kill phis here to avoid it.\n@@ -607,1 +607,1 @@\n-          \/\/ Eagerly replace phis to avoid copies generation.\n+          \/\/ Eagerly replace phis to avoid regionless phis.\n@@ -1380,1 +1380,0 @@\n-  if (r == NULL)  return in(1);         \/\/ Already degraded to a Copy\n@@ -1864,3 +1863,0 @@\n-  \/\/ The next should never happen after 6297035 fix.\n-  assert(!is_copy(), \"this phi cannot be a copy\");\n-\n@@ -1868,0 +1864,1 @@\n+  assert(r != NULL && r->is_Region(), \"this phi must have a region\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -118,3 +118,1 @@\n-\/\/ paths to the RegionNode.  For speed reasons (to avoid another pass) we\n-\/\/ can turn PhiNodes into copys in-place by NULL'ing out their RegionNode\n-\/\/ input in slot 0.\n+\/\/ paths to the RegionNode.\n@@ -176,9 +174,0 @@\n-#ifdef ASSERT\n-  \/\/ Whether the PhiNode is degraded to a copy. Only used in assertions.\n-  bool is_copy() const {\n-    \/\/ The node is a real phi if _in[0] is a Region node.\n-    const Node* r = _in[Region];\n-    return r == NULL || !r->is_Region();\n-  }\n-#endif \/\/ASSERT\n-\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  assert(!phi->is_copy(), \"this phi cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-  assert(!is_Phi() || !as_Phi()->is_copy(), \"this phi cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4576,1 +4576,0 @@\n-    assert(!phi_base->is_copy(), \"phi_base cannot be a copy\");\n@@ -4891,1 +4890,0 @@\n-  assert(!n->is_Phi() || !n->as_Phi()->is_copy(), \"n cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-  assert(!phi->is_copy(), \"this phi cannot be a copy\");\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}