{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.beans.PropertyChangeListener;\n+import java.beans.PropertyChangeEvent;\n@@ -33,0 +35,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -42,2 +45,1 @@\n-        SwingWorker<String, String> worker =\n-            new SwingWorker<String, String>() {\n+        SwingWorker<String, String> worker = new SwingWorker<>() {\n@@ -75,0 +77,25 @@\n+        worker.addPropertyChangeListener(\n+            new PropertyChangeListener() {\n+                public void propertyChange(PropertyChangeEvent evt) {\n+                    System.out.println(\"doInBackground \" + doInBackground +\n+                                       \" state \" + worker.getState());\n+                    \/\/ Before doInBackground method is invoked,\n+                    \/\/ SwingWorker notifies PropertyChangeListeners about the\n+                    \/\/ property change to StateValue.STARTED\n+                    if (doInBackground &&\n+                         worker.getState() == SwingWorker.StateValue.STARTED) {\n+                        throw new RuntimeException(\n+                               \"PropertyChangeListeners called with \" +\n+                               \"state STARTED after doInBackground is invoked\");\n+                    }\n+                    \/\/ After the doInBackground method is finished\n+                    \/\/ SwingWorker} notifies PropertyChangeListeners\n+                    \/\/ property change to StateValue.DONE\n+                    if (doInBackground &&\n+                            worker.getState() != SwingWorker.StateValue.DONE) {\n+                        throw new RuntimeException(\n+                            \"listener called after doInBackground is finised\" +\n+\t\t\t   \" but before State changed to DONE\");\n+\t\t    }\n+                }\n+            });\n","filename":"test\/jdk\/javax\/swing\/SwingWorker\/TestDoneBeforeDoInBackground.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"}]}