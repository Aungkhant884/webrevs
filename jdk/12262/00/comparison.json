{"files":[{"patch":"@@ -91,0 +91,14 @@\n+\/* read_mem_swap\n+ *\n+ * Returns the memory and swap metric\n+ *\n+ * return:\n+ *    A number > 0 if available,\n+ *    OSCONTAINER_ERROR for not supported\n+ *\/\n+jlong CgroupV1Subsystem::read_mem_swap() {\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.memsw.limit_in_bytes\",\n+                     \"Memory and Swap Limit is: \" JLONG_FORMAT, JLONG_FORMAT, memswlimit);\n+  return memswlimit;\n+}\n+\n@@ -115,0 +129,6 @@\n+  jlong swap_limit = read_mem_swap();\n+  if (swap_limit < 0) {\n+    \/\/ swap disabled on kernel level. Treat it as no swap.\n+    return read_memory_limit_in_bytes();\n+  }\n+  julong memswlimit = (julong)swap_limit;\n@@ -116,2 +136,0 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.memsw.limit_in_bytes\",\n-                     \"Memory and Swap Limit is: \" JULONG_FORMAT, JULONG_FORMAT, memswlimit);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+    jlong read_mem_swap();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -155,0 +155,4 @@\n+  if (mem_swp_limit_str == nullptr) {\n+    \/\/ swap disabled at kernel level, treat it as no swap\n+    return read_memory_limit_in_bytes();\n+  }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,0 +79,2 @@\n+            testMemorySwapNotSupported(\"500m\", \"520m\", \"512000 k\", \"532480 k\");\n+\n@@ -156,0 +158,23 @@\n+    \/*\n+     * Verifies that PrintContainerInfo prints the memory\n+     * limit - without swap - iff swap is disabled (e.g. via swapaccount=0). It must\n+     * not print 'not supported' for that value in that case. It'll always pass\n+     * on systems with swap accounting enabled.\n+     *\/\n+    private static void testMemorySwapNotSupported(String valueToSet, String swapToSet, String expectedMem, String expectedSwap)\n+            throws Exception {\n+        Common.logNewTestCase(\"memory swap not supported: \" + valueToSet);\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"PrintContainerInfo\");\n+        Common.addWhiteBoxOpts(opts);\n+        opts.addDockerOpts(\"--memory=\" + valueToSet);\n+        opts.addDockerOpts(\"--memory-swap=\" + swapToSet);\n+\n+        Common.run(opts)\n+            .shouldMatch(\"memory_limit_in_bytes:.*\" + expectedMem)\n+            .shouldNotMatch(\"memory_and_swap_limit_in_bytes:.*not supported\")\n+            \/\/ On systems with swapaccount=0 this returns the memory limit.\n+            \/\/ On systems with swapaccount=1 this returns the set memory+swap value.\n+            .shouldMatch(\"memory_and_swap_limit_in_bytes:.*(\" + expectedMem + \"|\" + expectedSwap + \")\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -88,2 +88,2 @@\n-            if (out.getOutput().contains(\"memory_and_swap_limit_in_bytes: not supported\")) {\n-                System.out.println(\"memory_and_swap_limit_in_bytes not supported, avoiding Memory and Swap Limit check\");\n+            if (out.getOutput().contains(\"Memory and Swap Limit is: -2\")) {\n+                System.out.println(\"System doesn't seem to allow swap, avoiding Memory and Swap Limit check\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithCgroupV1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}