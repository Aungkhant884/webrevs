{"files":[{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4171464\n+   @summary JComboBox should not throw InternalError\n+*\/\n+\n+import javax.swing.ComboBoxModel;\n+import javax.swing.JComboBox;\n+import javax.swing.event.ListDataListener;\n+\n+public class bug4171464 {\n+\n+    public static void main(String args[]) {\n+        ComboBoxModel model = new ComboBoxModel() {\n+            public void setSelectedItem(Object anItem) {}\n+            public Object getSelectedItem() {return null;}\n+            public int getSize() {return 0;}\n+            public Object getElementAt(int index) {return null;}\n+            public void addListDataListener(ListDataListener l) {}\n+            public void removeListDataListener(ListDataListener l) {}\n+        };\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.setModel(model);\n+        try {\n+            comboBox.addItem(new Object() {});\n+        } catch (InternalError e) {\n+            \/\/ InternalError not suitable if app supplies non-mutable model.\n+            throw new RuntimeException(\"4171464 TEST FAILED\");\n+        } catch (Exception e) {\n+            \/\/ Expected exception due to non-mutable model.\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4171464.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4244614\n+   @summary Tests that JComboBox has setAction(Action) constructor\n+*\/\n+\n+import java.awt.event.ActionEvent;\n+import java.beans.PropertyChangeListener;\n+import javax.swing.Action;\n+import javax.swing.JComboBox;\n+\n+public class bug4244614 {\n+\n+\/** Auxiliary class implementing Action\n+ *\/\n+    static class NullAction implements Action {\n+        public void addPropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void removePropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void putValue(String key, Object value) {}\n+        public void setEnabled(boolean b) {}\n+        public void actionPerformed(ActionEvent e) {}\n+\n+        public Object getValue(String key) { return null; }\n+        public boolean isEnabled() { return false; }\n+    }\n+\n+    public static void main(String[] argv) {\n+        Object[] comboData = {\"First\", \"Second\", \"Third\"};\n+        JComboBox combo = new JComboBox(comboData);\n+        Action action = new NullAction();\n+        combo.setAction(action);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4244614.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4276920\n+   @summary Tests that BasicComboPopup.hide() doesn't cause unnecessary repaints\n+   @key headful\n+*\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4276920 {\n+\n+    static volatile TestComboBox combo;\n+    static volatile JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(bug4276920::createUI);\n+            Thread.sleep(2000);\n+            int before = combo.getRepaintCount();\n+            SwingUtilities.invokeAndWait(combo::hidePopup);\n+            int after = combo.getRepaintCount();\n+            if (after > before) {\n+                throw new Error(\"Failed 4276920: BasicComboPopup.hide() caused unnecessary repaint()\");\n+            }\n+         } finally {\n+            if (frame != null) {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+            }\n+         }\n+     }\n+\n+     static void createUI() {\n+        combo = new TestComboBox(new String[] {\"Why am I so slow?\"});\n+        frame = new JFrame(\"bug4276920\");\n+        frame.getContentPane().add(combo);\n+        frame.pack();\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    static class TestComboBox extends JComboBox {\n+        int count = 0;\n+\n+        TestComboBox(Object[] content) {\n+            super(content);\n+        }\n+\n+        public void repaint() {\n+            super.repaint();\n+            count++;\n+        }\n+\n+        int getRepaintCount() {\n+            return count;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4276920.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4924758\n+   @summary 1.4 REGRESSION: In Motif L&F JComboBox doesn't react when spacebar is pressed\n+   @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.event.PopupMenuListener;\n+import javax.swing.event.PopupMenuEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class bug4924758 {\n+\n+    static volatile boolean passed = false;\n+    volatile boolean isLafOk = true;\n+\n+    volatile JFrame mainFrame;\n+    volatile JComboBox comboBox;\n+\n+    public static void main(String[] args) throws Exception {\n+        bug4924758 test = new bug4924758();\n+        try {\n+            SwingUtilities.invokeAndWait(test::createUI);\n+            if (!test.isLafOk) {\n+                throw new RuntimeException(\"Could not create Win L&F\");\n+            }\n+            test.test();\n+            if (!passed) {\n+                throw new RuntimeException(\n+                    \"Popup was not closed after VK_SPACE press. Test failed.\");\n+            }\n+        } finally {\n+            JFrame f = test.mainFrame;\n+            if (f != null) {\n+                SwingUtilities.invokeAndWait(() -> f.dispose());\n+            }\n+        }\n+    }\n+\n+    void createUI() {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception ex) {\n+            System.err.println(\"Can not initialize Motif L&F. Testing skipped.\");\n+            isLafOk = false;\n+            return;\n+        }\n+\n+        mainFrame = new JFrame(\"Bug4924758\");\n+        String[] items = {\"One\", \"Two\", \"Three\"};\n+        comboBox = new JComboBox(items);\n+        comboBox.addPopupMenuListener(new PopupMenuListener() {\n+            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}\n+\n+            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+                passed = true;\n+            }\n+\n+            public void popupMenuCanceled(PopupMenuEvent e) {}\n+        });\n+        mainFrame.setLayout(new BorderLayout());\n+        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        mainFrame.add(comboBox, BorderLayout.CENTER);\n+        mainFrame.pack();\n+        mainFrame.setLocationRelativeTo(null);\n+        mainFrame.setVisible(true);\n+    }\n+\n+    void test() throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(2000);\n+        Point p = comboBox.getLocationOnScreen();\n+        Dimension size = comboBox.getSize();\n+        p.x += size.width \/ 2;\n+        p.y += size.height \/ 2;\n+        robot.mouseMove(p.x, p.y);\n+        robot.keyPress(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_DOWN);\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+        robot.delay(2000);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4924758.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5029504\n+  @summary Empty JComboBox drop-down list is unexpectedly high\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+import javax.swing.plaf.basic.BasicComboPopup;\n+import javax.swing.event.PopupMenuListener;\n+import javax.swing.event.PopupMenuEvent;\n+\n+public class bug5029504 {\n+\n+    static volatile boolean passed = true;\n+    static volatile JFrame mainFrame;\n+    static volatile JComboBox comboBox;\n+    static volatile BasicComboPopup ourPopup = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+             SwingUtilities.invokeAndWait(bug5029504::createUI);\n+             runTest();\n+             if (!passed) {\n+                 throw new RuntimeException(\n+                    \"Popup of empty JComboBox is too high. Test failed.\");\n+             }\n+        } finally {\n+            if (mainFrame != null) {\n+                SwingUtilities.invokeAndWait(mainFrame::dispose);\n+            }\n+        }\n+    }\n+\n+    static void createUI() {\n+        mainFrame = new JFrame(\"Bug4924758\");\n+        comboBox = new JComboBox();\n+        comboBox.setUI(new MyComboBoxUI());\n+        comboBox.addPopupMenuListener(new PopupMenuListener() {\n+            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}\n+\n+            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+                if (ourPopup != null) {\n+                    int comboHeight = comboBox.getHeight();\n+                    int popupHeight = ourPopup.getHeight();\n+                    if (popupHeight > comboHeight*2) {\n+                        passed = false;\n+                    }\n+                }\n+            }\n+\n+            public void popupMenuCanceled(PopupMenuEvent e) {}\n+        });\n+        mainFrame.setLayout(new BorderLayout());\n+        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        mainFrame.add(comboBox, BorderLayout.CENTER);\n+        mainFrame.pack();\n+        mainFrame.setLocationRelativeTo(null);\n+        mainFrame.validate();\n+        mainFrame.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+        Robot robot = new Robot();\n+        robot.delay(2000);\n+        Point p = comboBox.getLocationOnScreen();\n+        Dimension size = comboBox.getSize();\n+        p.x += size.width \/ 2;\n+        p.y += size.height \/ 2;\n+        robot.mouseMove(p.x, p.y);\n+        robot.keyPress(KeyEvent.VK_ENTER);\n+        robot.delay(50);\n+        robot.keyRelease(KeyEvent.VK_ENTER);\n+        robot.delay(2000);\n+    }\n+\n+    static class MyComboBoxUI extends BasicComboBoxUI {\n+        public void setPopupVisible(JComboBox c, boolean v) {\n+            if (popup instanceof BasicComboPopup) {\n+                ourPopup = (BasicComboPopup) popup;\n+            }\n+            super.setPopupVisible(c, v);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug5029504.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}