{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,3 @@\n- * @bug 800535 8022536\n+ * @bug 8022536\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -28,1 +30,1 @@\n- * @run main\/manual=yesno PrintLatinCJKTest\n+ * @run main\/manual PrintLatinCJKTest\n@@ -33,2 +35,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -36,1 +36,0 @@\n-import java.awt.print.Pageable;\n@@ -40,0 +39,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -42,1 +42,0 @@\n-import javax.swing.JTextArea;\n@@ -44,1 +43,1 @@\n-import javax.swing.SwingUtilities;\n+import static javax.swing.SwingUtilities.invokeAndWait;\n@@ -46,1 +45,1 @@\n-public class PrintLatinCJKTest implements Printable, ActionListener {\n+public class PrintLatinCJKTest implements Printable {\n@@ -48,2 +47,10 @@\n-    static PrintLatinCJKTest testInstance = new PrintLatinCJKTest();\n-    private PageFormat pf;\n+    private static PrintLatinCJKTest testInstance = new PrintLatinCJKTest();\n+    private static JFrame frame;\n+    private static String info = \"\"\"\n+            To test 8022536, if a remote printer is the system default,\n+            it should show in the dialog as the selected printer.\n+            You need a printer for this test. If you have none, let\n+            the test pass. If there is a printer, press Print, send\n+            the output to the printer, and examine it. It should have\n+            text looking like this : \\u4e00\\u4e01\\u4e02\\u4e03\\u4e04English\n+            \"\"\";\n@@ -51,7 +58,21 @@\n-    static String info =\n-       \"To test 8022536, if a remote printer is the system default,\"+\n-       \"it should show in the dialog as the selected printer.\\n\"+\n-       \"You need a printer for this test. If you have none, let \"+\n-       \"the test pass. If there is a printer, press Print, send \"+\n-       \"the output to the printer, and examine it. It should have \"+\n-       \"text looking like this : \\u4e00\\u4e01\\u4e02\\u4e03\\u4e04English.\";\n+    public static void showFrame() throws InterruptedException, InvocationTargetException {\n+        invokeAndWait( () -> {\n+            frame = new JFrame(\"Test Frame\");\n+            JButton b = new JButton(\"Print\");\n+            b.addActionListener((ae) -> {\n+                try {\n+                    PrinterJob job = PrinterJob.getPrinterJob();\n+                    job.setPrintable(testInstance);\n+                    if (job.printDialog()) {\n+                        job.print();\n+                    }\n+                } catch (PrinterException ex) {\n+                    ex.printStackTrace();\n+                }\n+            });\n+            frame.add(\"South\", b);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+    }\n@@ -59,11 +80,6 @@\n-    public static void showFrame() {\n-         JFrame f = new JFrame();\n-         JTextArea jta = new JTextArea(info, 4, 30);\n-         jta.setLineWrap(true);\n-         jta.setWrapStyleWord(true);\n-         f.add(\"Center\", jta);\n-         JButton b = new JButton(\"Print\");\n-         b.addActionListener(testInstance);\n-         f.add(\"South\", b);\n-         f.pack();\n-         f.setVisible(true);\n+    private static void disposeTestFrame() throws InterruptedException, InvocationTargetException {\n+        invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n@@ -72,0 +88,1 @@\n+    @Override\n@@ -74,1 +91,0 @@\n-\n@@ -84,19 +100,6 @@\n-    public void actionPerformed(ActionEvent e) {\n-        try {\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintable(testInstance);\n-            if (job.printDialog()) {\n-                job.print();\n-            }\n-        } catch (PrinterException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                showFrame();\n-            }\n-        });\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test Instruction\" +\n+                \"Frame\", info, 7, 30, 3);\n+        PrintLatinCJKTest.showFrame();\n+        passFailJFrame.awaitAndCheck();\n+        PrintLatinCJKTest.disposeTestFrame();\n@@ -105,0 +108,2 @@\n+\n+\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":54,"deletions":49,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.HeadlessException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+\n+import static javax.swing.SwingUtilities.invokeAndWait;\n+import static javax.swing.SwingUtilities.isEventDispatchThread;\n+\n+public class PassFailJFrame {\n+    private final static CountDownLatch latch = new CountDownLatch(1);\n+    private static boolean failed = false;\n+    private static String testFailedReason;\n+    private static JTextArea instructionsText;\n+    private final int maxRowLength;\n+    private final int maxStringLength;\n+    private final int timeoutMinutes;\n+    private static JFrame frame;\n+\n+    \/**\n+     * Constructs a JFrame with a given title & serves as test instructional\n+     * frame where the user follows the specified test instruction in order\n+     * to test the test case & mark the test pass or fail. If the expected\n+     * result is seen then the user click on the 'Pass' button else click\n+     * on the 'Fail' button and the reason for the failure should be\n+     * specified in the JDialog JTextArea.\n+     *\n+     * @param title           title of the Frame.\n+     * @param instructions    specified instruction that user should follow.\n+     * @param maxRowLength    number of visible rows of the JTextArea where the\n+     *                        instruction is show.\n+     * @param maxStringLength number of columns of the instructional JTextArea\n+     * @param timeoutMinutes  timeout of the test where time is specified in\n+     *                        minutes.\n+     * @throws HeadlessException\n+     * @throws InterruptedException\n+     * @throws InvocationTargetException\n+     *\/\n+    public PassFailJFrame(String title, String instructions,\n+                          int maxRowLength, int maxStringLength,\n+                          int timeoutMinutes) throws HeadlessException,\n+            InterruptedException, InvocationTargetException {\n+        this.maxRowLength = maxRowLength;\n+        this.maxStringLength = maxStringLength;\n+        this.timeoutMinutes = timeoutMinutes;\n+\n+        if (isEventDispatchThread()) {\n+            createUI(title, instructions, maxRowLength, maxStringLength, timeoutMinutes);\n+        } else {\n+            invokeAndWait(() -> {\n+                createUI(title, instructions, maxRowLength, maxStringLength, timeoutMinutes);\n+            });\n+        }\n+    }\n+\n+    private static void createUI(String title, String instructions,\n+                                 int maxRowLength, int maxStringLength,\n+                                 int timeoutMinutes) {\n+        frame = new JFrame(title);\n+        frame.setLayout(new BorderLayout());\n+        instructionsText = new JTextArea(instructions, maxRowLength, maxStringLength);\n+        instructionsText.setEditable(false);\n+        instructionsText.setFocusable(false);\n+        frame.add(instructionsText, BorderLayout.NORTH);\n+\n+        JButton btnPass = new JButton(\"Pass\");\n+        btnPass.addActionListener((e) -> latch.countDown());\n+\n+        JButton btnFail = new JButton(\"Fail\");\n+        btnFail.addActionListener((e) -> getFailureReason());\n+\n+        JPanel buttonsPanel = new JPanel();\n+        buttonsPanel.add(btnPass);\n+        buttonsPanel.add(btnFail);\n+\n+        frame.add(buttonsPanel, BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setLocation(10, 10);\n+        frame.setVisible(true);\n+    }\n+\n+    \/**\n+     * Wait for the user decision i,e user selects pass or fail button.\n+     * If user does not select pass or fail button then the test waits for\n+     * the specified timeoutMinutes period and the test gets timeout.\n+     *\n+     * @throws InterruptedException\n+     * @throws InvocationTargetException\n+     *\/\n+    public void awaitAndCheck() throws InterruptedException, InvocationTargetException {\n+        boolean timeoutHappened = !latch.await(this.timeoutMinutes,\n+                TimeUnit.MINUTES);\n+        if (isEventDispatchThread()) {\n+            disposePassFailJFrame();\n+        } else invokeAndWait(() -> disposePassFailJFrame());\n+\n+        if (timeoutHappened) {\n+            throw new RuntimeException(\"Test timed out!\");\n+        }\n+        if (failed) {\n+            throw new RuntimeException(\"Test failed! : \" + testFailedReason);\n+        }\n+    }\n+\n+    public static void disposePassFailJFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n+    public static void getFailureReason() {\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"Failure reason\");\n+        JPanel jPanel = new JPanel(new BorderLayout());\n+        JTextArea jTextArea = new JTextArea(5, 20);\n+\n+        JButton okButton = new JButton(\"Ok\");\n+        okButton.addActionListener((ae) -> {\n+            testFailedReason = jTextArea.getText();\n+            failed = true;\n+            dialog.dispose();\n+            latch.countDown();\n+        });\n+\n+        jPanel.add(new JScrollPane(jTextArea), BorderLayout.CENTER);\n+\n+        JPanel okayBtnPanel = new JPanel();\n+        okayBtnPanel.add(okButton);\n+\n+        jPanel.add(okayBtnPanel, BorderLayout.SOUTH);\n+        dialog.add(jPanel);\n+        dialog.setLocationRelativeTo(null);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}