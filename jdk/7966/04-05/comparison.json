{"files":[{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -33,0 +33,1 @@\n+import java.awt.BorderLayout;\n@@ -73,1 +74,1 @@\n-            frame.add(\"South\", b);\n+            frame.getContentPane().add(b, BorderLayout.SOUTH);\n@@ -77,2 +78,0 @@\n-        });\n-    }\n@@ -80,5 +79,5 @@\n-    private static void disposeTestFrame() throws InterruptedException, InvocationTargetException {\n-        invokeAndWait(() -> {\n-            if (frame != null) {\n-                frame.dispose();\n-            }\n+            \/\/ add the test frame to dispose\n+            PassFailJFrame.addTestFrame(frame);\n+\n+            \/\/ Arrange the test instruction frame and test frame side by side\n+            PassFailJFrame.positionTestFrame(frame, PassFailJFrame.POSITION.HORIZONTAL);\n@@ -102,2 +101,2 @@\n-                \"Frame\", info, 7, 30, 3);\n-        PrintLatinCJKTest.showFrame();\n+                \"Frame\", info, 10, 40, 5);\n+        showFrame();\n@@ -105,1 +104,0 @@\n-        PrintLatinCJKTest.disposeTestFrame();\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.awt.Dimension;\n+import java.awt.Frame;\n@@ -26,0 +28,3 @@\n+import java.awt.Toolkit;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n@@ -27,0 +32,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -32,0 +39,1 @@\n+import javax.swing.JLabel;\n@@ -35,0 +43,1 @@\n+import javax.swing.Timer;\n@@ -40,0 +49,1 @@\n+\n@@ -41,6 +51,3 @@\n-    private static boolean failed = false;\n-    private static String testFailedReason;\n-    private static JTextArea instructionsText;\n-    private final int maxRowLength;\n-    private final int maxStringLength;\n-    private final int timeoutMinutes;\n+    private static volatile boolean failed = false;\n+    private static volatile boolean timeout = false;\n+    private static volatile String testFailedReason;\n@@ -48,0 +55,4 @@\n+    private static final List<Frame> frameList = new ArrayList<>();\n+    private static final Timer timer = new Timer(0, null);\n+\n+    public enum POSITION {HORIZONTAL, VERTICAL}\n@@ -57,10 +68,11 @@\n-     * @param title           title of the Frame.\n-     * @param instructions    specified instruction that user should follow.\n-     * @param maxRowLength    number of visible rows of the JTextArea where the\n-     *                        instruction is show.\n-     * @param maxStringLength number of columns of the instructional JTextArea\n-     * @param timeoutMinutes  timeout of the test where time is specified in\n-     *                        minutes.\n-     * @throws HeadlessException\n-     * @throws InterruptedException\n-     * @throws InvocationTargetException\n+     * @param title                title of the Frame.\n+     * @param instructions         specified instruction that user should follow.\n+     * @param rows                 number of visible rows of the JTextArea where the\n+     *                             instruction is show.\n+     * @param columns              Number of columns of the instructional\n+     *                             JTextArea\n+     * @param testTimeOutInMinutes timeout of the test where time is specified in\n+     *                             minutes.\n+     * @throws HeadlessException         HeadlessException\n+     * @throws InterruptedException      exception thrown for invokeAndWait\n+     * @throws InvocationTargetException exception thrown for invokeAndWait\n@@ -69,2 +81,2 @@\n-                          int maxRowLength, int maxStringLength,\n-                          int timeoutMinutes) throws HeadlessException,\n+                          int rows, int columns,\n+                          int testTimeOutInMinutes) throws HeadlessException,\n@@ -72,3 +84,0 @@\n-        this.maxRowLength = maxRowLength;\n-        this.maxStringLength = maxStringLength;\n-        this.timeoutMinutes = timeoutMinutes;\n@@ -77,1 +86,1 @@\n-            createUI(title, instructions, maxRowLength, maxStringLength, timeoutMinutes);\n+            createUI(title, instructions, rows, columns, testTimeOutInMinutes);\n@@ -79,3 +88,2 @@\n-            invokeAndWait(() -> {\n-                createUI(title, instructions, maxRowLength, maxStringLength, timeoutMinutes);\n-            });\n+            invokeAndWait(() -> createUI(title, instructions, rows, columns,\n+                    testTimeOutInMinutes));\n@@ -86,2 +94,2 @@\n-                                 int maxRowLength, int maxStringLength,\n-                                 int timeoutMinutes) {\n+                                 int rows, int columns,\n+                                 int timeoutInMinutes) {\n@@ -90,1 +98,1 @@\n-        instructionsText = new JTextArea(instructions, maxRowLength, maxStringLength);\n+        JTextArea instructionsText = new JTextArea(instructions, rows, columns);\n@@ -92,2 +100,22 @@\n-        instructionsText.setFocusable(false);\n-        frame.add(instructionsText, BorderLayout.NORTH);\n+        instructionsText.setLineWrap(true);\n+\n+        int testTimeout = (int) TimeUnit.MINUTES.toMillis(timeoutInMinutes);\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test \" +\n+                \"timeout: %s\", convertMillisToTimeStr(testTimeout)), JLabel.CENTER);\n+        final long startTime = System.currentTimeMillis();\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || failed) {\n+                timer.stop();\n+                testFailedReason = \"Failure Reason:\\n Timeout \" +\n+                        \"User did not perform testing.\";\n+                timeout = true;\n+                latch.countDown();\n+            }\n+            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n+        frame.add(new JScrollPane(instructionsText), BorderLayout.CENTER);\n@@ -96,1 +124,4 @@\n-        btnPass.addActionListener((e) -> latch.countDown());\n+        btnPass.addActionListener((e) -> {\n+            latch.countDown();\n+            timer.stop();\n+        });\n@@ -99,1 +130,4 @@\n-        btnFail.addActionListener((e) -> getFailureReason());\n+        btnFail.addActionListener((e) -> {\n+            getFailureReason();\n+            timer.stop();\n+        });\n@@ -105,0 +139,11 @@\n+        frame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                testFailedReason = \"Failure Reason:\\n User closed the \" +\n+                        \"instruction Frame\";\n+                failed = true;\n+                latch.countDown();\n+            }\n+        });\n+\n@@ -107,1 +152,1 @@\n-        frame.setLocation(10, 10);\n+        frame.setLocationRelativeTo(null);\n@@ -109,0 +154,12 @@\n+\n+        frameList.add(frame);\n+    }\n+\n+    private static String convertMillisToTimeStr(long millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        long hours = millis \/ 3600000;\n+        long minutes = (millis - hours * 3600000) \/ 60000;\n+        long seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n@@ -115,0 +172,1 @@\n+     * Note: This method should be called from main() thread\n@@ -116,2 +174,2 @@\n-     * @throws InterruptedException\n-     * @throws InvocationTargetException\n+     * @throws InterruptedException      exception thrown for invokeAndWait\n+     * @throws InvocationTargetException exception thrown for invokeAndWait\n@@ -120,2 +178,1 @@\n-        boolean timeoutHappened = !latch.await(this.timeoutMinutes,\n-                TimeUnit.MINUTES);\n+        latch.await();\n@@ -123,2 +180,2 @@\n-            disposePassFailJFrame();\n-        } else invokeAndWait(() -> disposePassFailJFrame());\n+            disposeFrames();\n+        } else invokeAndWait(PassFailJFrame::disposeFrames);\n@@ -126,2 +183,2 @@\n-        if (timeoutHappened) {\n-            throw new RuntimeException(\"Test timed out!\");\n+        if (timeout) {\n+            throw new RuntimeException(testFailedReason);\n@@ -129,0 +186,1 @@\n+\n@@ -132,0 +190,2 @@\n+\n+        System.out.println(\"Test passed!\");\n@@ -134,3 +194,7 @@\n-    public static void disposePassFailJFrame() {\n-        if (frame != null) {\n-            frame.dispose();\n+    \/**\n+     * Dispose all the frame(s) i,e both the test instruction frame as\n+     * well as the frame that is added via addTestFrame(Frame frame)\n+     *\/\n+    private static void disposeFrames() {\n+        for (Frame f : frameList) {\n+            f.dispose();\n@@ -140,0 +204,4 @@\n+    \/**\n+     * Read the test failure reason and add the reason to the test result\n+     * example in the jtreg .jtr file.\n+     *\/\n@@ -141,1 +209,1 @@\n-        final JDialog dialog = new JDialog();\n+        final JDialog dialog = new JDialog(frame, \"Test Failure \", true);\n@@ -146,1 +214,1 @@\n-        JButton okButton = new JButton(\"Ok\");\n+        JButton okButton = new JButton(\"OK\");\n@@ -148,4 +216,2 @@\n-            testFailedReason = jTextArea.getText();\n-            failed = true;\n-            dialog.dispose();\n-            latch.countDown();\n+            testFailedReason = \"Failure Reason:\\n\" + jTextArea.getText();\n+            dialog.setVisible(false);\n@@ -161,1 +227,10 @@\n-        dialog.setLocationRelativeTo(null);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                testFailedReason = \"User closed the \" +\n+                        \"dialog\";\n+            }\n+        });\n+\n+        dialog.setLocationRelativeTo(frame);\n@@ -164,0 +239,43 @@\n+\n+        failed = true;\n+        dialog.dispose();\n+        latch.countDown();\n+    }\n+\n+    \/**\n+     * Position the instruction frame with testFrame ( testcase created\n+     * frame) by the specified position\n+     * Note: This method should be invoked from the method that creates\n+     * testFrame\n+     *\n+     * @param testFrame test frame that the test is created\n+     * @param position  position can be either HORIZONTAL (both test\n+     *                  instruction frame and test frame as arranged side by\n+     *                  side or VERTICAL ( both test instruction frame and\n+     *                  test frame as arranged up and down)\n+     *\/\n+    public static void positionTestFrame(Frame testFrame, POSITION position) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        if (position.equals(POSITION.HORIZONTAL)) {\n+            int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+            frame.setLocation(newX, frame.getY());\n+\n+            testFrame.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n+        } else if (position.equals(POSITION.VERTICAL)) {\n+            int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+            frame.setLocation(frame.getX(), newY);\n+\n+            testFrame.setLocation(frame.getX(),\n+                    (frame.getLocation().y + frame.getHeight() + 5));\n+        }\n+    }\n+\n+    \/**\n+     * Add the testFrame to the frameList so that test instruction frame\n+     * and testFrame and any other frame used in this test is disposed\n+     * via disposeFrames()\n+     *\n+     * @param testFrame testFrame that needs to be disposed\n+     *\/\n+    public synchronized static void addTestFrame(Frame testFrame) {\n+        frameList.add(testFrame);\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":169,"deletions":51,"binary":false,"changes":220,"status":"modified"}]}