{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,3 @@\n- * @bug 800535 8022536\n+ * @bug 8022536\n+ * @library ..\/..\/regtesthelpers\n+ * @build Util\n@@ -28,1 +30,1 @@\n- * @run main\/manual=yesno PrintLatinCJKTest\n+ * @run main\/manual PrintLatinCJKTest\n@@ -33,2 +35,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -36,1 +36,0 @@\n-import java.awt.print.Pageable;\n@@ -40,0 +39,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -42,2 +42,0 @@\n-import javax.swing.JTextArea;\n-\n@@ -46,1 +44,1 @@\n-public class PrintLatinCJKTest implements Printable, ActionListener {\n+public class PrintLatinCJKTest implements Printable {\n@@ -49,2 +47,0 @@\n-    private PageFormat pf;\n-\n@@ -52,1 +48,1 @@\n-       \"To test 8022536, if a remote printer is the system default,\"+\n+       \"To test 8022536, if a remote printer is the system default, \\n\"+\n@@ -54,3 +50,3 @@\n-       \"You need a printer for this test. If you have none, let \"+\n-       \"the test pass. If there is a printer, press Print, send \"+\n-       \"the output to the printer, and examine it. It should have \"+\n+       \"You need a printer for this test. If you have none, let \\n\"+\n+       \"the test pass. If there is a printer, press Print, send \\n\"+\n+       \"the output to the printer, and examine it. It should have \\n\"+\n@@ -59,11 +55,20 @@\n-    public static void showFrame() {\n-         JFrame f = new JFrame();\n-         JTextArea jta = new JTextArea(info, 4, 30);\n-         jta.setLineWrap(true);\n-         jta.setWrapStyleWord(true);\n-         f.add(\"Center\", jta);\n-         JButton b = new JButton(\"Print\");\n-         b.addActionListener(testInstance);\n-         f.add(\"South\", b);\n-         f.pack();\n-         f.setVisible(true);\n+    public static void showFrame() throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait( () -> {\n+            JFrame f = new JFrame(\"Test Frame\");\n+            JButton b = new JButton(\"Print\");\n+            b.addActionListener((ae) -> {\n+                try {\n+                    PrinterJob job = PrinterJob.getPrinterJob();\n+                    job.setPrintable(testInstance);\n+                    if (job.printDialog()) {\n+                        job.print();\n+                    }\n+                } catch (PrinterException ex) {\n+                    ex.printStackTrace();\n+                }\n+            });\n+            f.add(\"South\", b);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setVisible(true);\n+        });\n@@ -72,0 +77,1 @@\n+    @Override\n@@ -74,1 +80,0 @@\n-\n@@ -84,19 +89,5 @@\n-    public void actionPerformed(ActionEvent e) {\n-        try {\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintable(testInstance);\n-            if (job.printDialog()) {\n-                job.print();\n-            }\n-        } catch (PrinterException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                showFrame();\n-            }\n-        });\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test Instruction\" +\n+                \"Frame\", info, 7, 30, 3);\n+        PrintLatinCJKTest.showFrame();\n+        passFailJFrame.awaitAndCheck();\n@@ -105,0 +96,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":38,"deletions":46,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -35,0 +36,1 @@\n+import javax.swing.SwingUtilities;\n@@ -41,5 +43,26 @@\n-    private int maxStringLength = 50;\n-    private int timeoutMinutes = 3;\n-    private Runnable tearDownRunnable;\n-\n-    public PassFailJFrame(String instructions, String title) throws HeadlessException {\n+    private final int maxRowLength;\n+    private final int maxStringLength;\n+    private final int timeoutMinutes;\n+\n+    \/**\n+     * Constructs a JFrame with a given title & serves as test instructional\n+     * frame where the user follows the specified test instruction in order\n+     * to test the test case & mark the test pass or fail. If the expected\n+     * result is seen then the user click on the 'Pass' button else click\n+     * on the 'Fail' button and the reason for the failure should be\n+     * specified in the JDailog JTextArea.\n+     * @param title title of the Frame.\n+     * @param instructions specified instruction that user should follow.\n+     * @param maxRowLength number of visible rows of the JTextArea where the\n+     *                     instruction is show.\n+     * @param maxStringLength number of columns of the instructional JTextArea\n+     * @param timeoutMinutes timeout of the test where time is specified in\n+     *                       minutes.\n+     * @throws HeadlessException\n+     * @throws InterruptedException\n+     * @throws InvocationTargetException\n+     *\/\n+    public PassFailJFrame(String title, String instructions,\n+                          int maxRowLength, int maxStringLength,\n+                          int timeoutMinutes) throws HeadlessException,\n+            InterruptedException, InvocationTargetException {\n@@ -47,21 +70,26 @@\n-\n-        setLayout(new BorderLayout());\n-        instructionsText = new JTextArea(instructions, 20, maxStringLength);\n-        instructionsText.setEditable(false);\n-        instructionsText.setFocusable(false);\n-        add(instructionsText, BorderLayout.NORTH);\n-\n-        JButton btnPass = new JButton(\"Pass\");\n-        btnPass.addActionListener((e) -> latch.countDown());\n-\n-        JButton btnFail = new JButton(\"Fail\");\n-        btnFail.addActionListener((e) -> getFailureReason());\n-\n-        JPanel buttonsPanel = new JPanel();\n-        buttonsPanel.add(btnPass);\n-        buttonsPanel.add(btnFail);\n-\n-        add(buttonsPanel, BorderLayout.SOUTH);\n-        pack();\n-        setLocationRelativeTo(null);\n-        setVisible(true);\n+        this.maxRowLength = maxRowLength;\n+        this.maxStringLength = maxStringLength;\n+        this.timeoutMinutes = timeoutMinutes;\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            setLayout(new BorderLayout());\n+            instructionsText = new JTextArea(instructions, maxRowLength, maxStringLength);\n+            instructionsText.setEditable(false);\n+            instructionsText.setFocusable(false);\n+            add(instructionsText, BorderLayout.NORTH);\n+\n+            JButton btnPass = new JButton(\"Pass\");\n+            btnPass.addActionListener((e) -> latch.countDown());\n+\n+            JButton btnFail = new JButton(\"Fail\");\n+            btnFail.addActionListener((e) -> getFailureReason());\n+\n+            JPanel buttonsPanel = new JPanel();\n+            buttonsPanel.add(btnPass);\n+            buttonsPanel.add(btnFail);\n+\n+            add(buttonsPanel, BorderLayout.SOUTH);\n+            pack();\n+\t    setLocation(10,10);\n+            setVisible(true);\n+        });\n@@ -70,2 +98,11 @@\n-    public void awaitAndCheck() throws InterruptedException {\n-        boolean timeoutHappened = !latch.await(timeoutMinutes, TimeUnit.MINUTES);\n+    \/**\n+     * Wait for the user decision i,e user selects pass or fail button.\n+     * If user does not select pass or fail button then the test waits for\n+     * the specified timeoutMinutes period and the test gets timeout.\n+     * This method should not be invoke with in EDT.\n+     * @throws InterruptedException\n+     * @throws InvocationTargetException\n+     *\/\n+    public void awaitAndCheck() throws InterruptedException, InvocationTargetException {\n+        boolean timeoutHappened = !latch.await(this.timeoutMinutes,\n+                TimeUnit.MINUTES);\n@@ -73,8 +110,1 @@\n-        for (Frame f : JFrame.getFrames()) {\n-            System.out.println(f.getTitle() + \" is getting disposed\");\n-            f.dispose();\n-        }\n-\n-        if (tearDownRunnable != null) {\n-            tearDownRunnable.run();\n-        }\n+        SwingUtilities.invokeAndWait(() -> dispose());\n@@ -90,2 +120,7 @@\n-    protected void tearDownRunnable(Runnable runnable) {\n-        tearDownRunnable = runnable;\n+    public void tearDown() throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            for (Frame f : JFrame.getFrames()) {\n+                System.out.println(f.getTitle() + \" is getting disposed\");\n+                f.dispose();\n+            }\n+        });\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":73,"deletions":38,"binary":false,"changes":111,"status":"modified"}]}