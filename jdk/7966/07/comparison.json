{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -26,1 +26,3 @@\n- * @bug 800535 8022536\n+ * @bug 8008535 8022536\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -28,1 +30,1 @@\n- * @run main\/manual=yesno PrintLatinCJKTest\n+ * @run main\/manual PrintLatinCJKTest\n@@ -31,0 +33,1 @@\n+import java.awt.BorderLayout;\n@@ -33,2 +36,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -36,1 +37,0 @@\n-import java.awt.print.Pageable;\n@@ -40,0 +40,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -42,1 +43,0 @@\n-import javax.swing.JTextArea;\n@@ -44,1 +44,11 @@\n-import javax.swing.SwingUtilities;\n+import static javax.swing.SwingUtilities.invokeAndWait;\n+\n+public class PrintLatinCJKTest implements Printable {\n+\n+    private static PrintLatinCJKTest testInstance = new PrintLatinCJKTest();\n+    private static JFrame frame;\n+    private static final String info = \"\"\"\n+            You need a printer for this test. If you have none, let\n+            the test pass. If there is a printer, press Print, send\n+            the output to the printer, and examine it. It should have\n+            text looking like this : \\u4e00\\u4e01\\u4e02\\u4e03\\u4e04English\n@@ -46,1 +56,3 @@\n-public class PrintLatinCJKTest implements Printable, ActionListener {\n+            To test 8022536, if a remote printer is the system default,\n+            it should show in the dialog as the selected printer.\n+            \"\"\";\n@@ -48,2 +60,19 @@\n-    static PrintLatinCJKTest testInstance = new PrintLatinCJKTest();\n-    private PageFormat pf;\n+    public static void showFrame() throws InterruptedException, InvocationTargetException {\n+        invokeAndWait( () -> {\n+            frame = new JFrame(\"Test Frame\");\n+            JButton b = new JButton(\"Print\");\n+            b.addActionListener((ae) -> {\n+                try {\n+                    PrinterJob job = PrinterJob.getPrinterJob();\n+                    job.setPrintable(testInstance);\n+                    if (job.printDialog()) {\n+                        job.print();\n+                    }\n+                } catch (PrinterException ex) {\n+                    ex.printStackTrace();\n+                }\n+            });\n+            frame.getContentPane().add(b, BorderLayout.SOUTH);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n@@ -51,7 +80,2 @@\n-    static String info =\n-       \"To test 8022536, if a remote printer is the system default,\"+\n-       \"it should show in the dialog as the selected printer.\\n\"+\n-       \"You need a printer for this test. If you have none, let \"+\n-       \"the test pass. If there is a printer, press Print, send \"+\n-       \"the output to the printer, and examine it. It should have \"+\n-       \"text looking like this : \\u4e00\\u4e01\\u4e02\\u4e03\\u4e04English.\";\n+            \/\/ add the test frame to dispose\n+            PassFailJFrame.addTestFrame(frame);\n@@ -59,11 +83,4 @@\n-    public static void showFrame() {\n-         JFrame f = new JFrame();\n-         JTextArea jta = new JTextArea(info, 4, 30);\n-         jta.setLineWrap(true);\n-         jta.setWrapStyleWord(true);\n-         f.add(\"Center\", jta);\n-         JButton b = new JButton(\"Print\");\n-         b.addActionListener(testInstance);\n-         f.add(\"South\", b);\n-         f.pack();\n-         f.setVisible(true);\n+            \/\/ Arrange the test instruction frame and test frame side by side\n+            PassFailJFrame.positionTestFrame(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n@@ -72,0 +89,1 @@\n+    @Override\n@@ -74,1 +92,0 @@\n-\n@@ -84,19 +101,5 @@\n-    public void actionPerformed(ActionEvent e) {\n-        try {\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintable(testInstance);\n-            if (job.printDialog()) {\n-                job.print();\n-            }\n-        } catch (PrinterException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                showFrame();\n-            }\n-        });\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test Instruction\" +\n+                \"Frame\", info, 10, 40, 5);\n+        showFrame();\n+        passFailJFrame.awaitAndCheck();\n@@ -105,0 +108,2 @@\n+\n+\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":55,"deletions":50,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.HeadlessException;\n+import java.awt.Toolkit;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.Timer;\n+\n+import static javax.swing.SwingUtilities.invokeAndWait;\n+import static javax.swing.SwingUtilities.isEventDispatchThread;\n+\n+public class PassFailJFrame {\n+\n+    private final static CountDownLatch latch = new CountDownLatch(1);\n+    private static volatile boolean failed;\n+    private static volatile boolean timeout;\n+    private static volatile String testFailedReason;\n+    private static JFrame frame;\n+    private static final List<Frame> frameList = new ArrayList<>();\n+    private static final Timer timer = new Timer(0, null);\n+\n+    public enum Position {HORIZONTAL, VERTICAL}\n+\n+    \/**\n+     * Constructs a JFrame with a given title & serves as test instructional\n+     * frame where the user follows the specified test instruction in order\n+     * to test the test case & mark the test pass or fail. If the expected\n+     * result is seen then the user click on the 'Pass' button else click\n+     * on the 'Fail' button and the reason for the failure should be\n+     * specified in the JDialog JTextArea.\n+     *\n+     * @param title                title of the Frame.\n+     * @param instructions         specified instruction that user should follow.\n+     * @param rows                 number of visible rows of the JTextArea where the\n+     *                             instruction is show.\n+     * @param columns              Number of columns of the instructional\n+     *                             JTextArea\n+     * @param testTimeOutInMinutes timeout of the test where time is specified in\n+     *                             minutes.\n+     * @throws HeadlessException         HeadlessException\n+     * @throws InterruptedException      exception thrown for invokeAndWait\n+     * @throws InvocationTargetException exception thrown for invokeAndWait\n+     *\/\n+    public PassFailJFrame(String title, String instructions,\n+                          int rows, int columns,\n+                          int testTimeOutInMinutes) throws HeadlessException,\n+            InterruptedException, InvocationTargetException {\n+\n+        if (isEventDispatchThread()) {\n+            createUI(title, instructions, rows, columns, testTimeOutInMinutes);\n+        } else {\n+            invokeAndWait(() -> createUI(title, instructions, rows, columns,\n+                    testTimeOutInMinutes));\n+        }\n+    }\n+\n+    private static void createUI(String title, String instructions,\n+                                 int rows, int columns,\n+                                 int timeoutInMinutes) {\n+        frame = new JFrame(title);\n+        frame.setLayout(new BorderLayout());\n+        JTextArea instructionsText = new JTextArea(instructions, rows, columns);\n+        instructionsText.setEditable(false);\n+        instructionsText.setLineWrap(true);\n+\n+        long testTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes);\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test \" +\n+                \"timeout: %s\", convertMillisToTimeStr(testTimeout)), JLabel.CENTER);\n+        final long startTime = System.currentTimeMillis();\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            long leftTime = testTimeout - (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || failed) {\n+                timer.stop();\n+                testFailedReason = \"Failure Reason:\\n\"\n+                        + \"Timeout User did not perform testing.\";\n+                timeout = true;\n+                latch.countDown();\n+            }\n+            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n+        frame.add(new JScrollPane(instructionsText), BorderLayout.CENTER);\n+\n+        JButton btnPass = new JButton(\"Pass\");\n+        btnPass.addActionListener((e) -> {\n+            latch.countDown();\n+            timer.stop();\n+        });\n+\n+        JButton btnFail = new JButton(\"Fail\");\n+        btnFail.addActionListener((e) -> {\n+            getFailureReason();\n+            timer.stop();\n+        });\n+\n+        JPanel buttonsPanel = new JPanel();\n+        buttonsPanel.add(btnPass);\n+        buttonsPanel.add(btnFail);\n+\n+        frame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                testFailedReason = \"Failure Reason:\\n\"\n+                        + \"User closed the instruction Frame\";\n+                failed = true;\n+                latch.countDown();\n+            }\n+        });\n+\n+        frame.add(buttonsPanel, BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+        frameList.add(frame);\n+    }\n+\n+    private static String convertMillisToTimeStr(long millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        long hours = millis \/ 3_600_000;\n+        long minutes = (millis - hours * 3_600_000) \/ 60_000;\n+        long seconds = (millis - hours * 3_600_000 - minutes * 60_000) \/ 1_000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    \/**\n+     * Wait for the user decision i,e user selects pass or fail button.\n+     * If user does not select pass or fail button then the test waits for\n+     * the specified timeoutMinutes period and the test gets timeout.\n+     * Note: This method should be called from main() thread\n+     *\n+     * @throws InterruptedException      if the thread is interrupted\n+     * @throws InvocationTargetException exception thrown for invokeAndWait\n+     *\/\n+    public void awaitAndCheck() throws InterruptedException, InvocationTargetException {\n+        if (isEventDispatchThread()) {\n+            throw new IllegalStateException(\"awaitAndCheck() should not be called on EDT\");\n+        }\n+        latch.await();\n+        invokeAndWait(PassFailJFrame::disposeFrames);\n+\n+        if (timeout) {\n+            throw new RuntimeException(testFailedReason);\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"Test failed! : \" + testFailedReason);\n+        }\n+\n+        System.out.println(\"Test passed!\");\n+    }\n+\n+    \/**\n+     * Dispose all the frame(s) i,e both the test instruction frame as\n+     * well as the frame that is added via addTestFrame(Frame frame)\n+     *\/\n+    private static synchronized void disposeFrames() {\n+        for (Frame f : frameList) {\n+            f.dispose();\n+        }\n+    }\n+\n+    \/**\n+     * Read the test failure reason and add the reason to the test result\n+     * example in the jtreg .jtr file.\n+     *\/\n+    private static void getFailureReason() {\n+        final JDialog dialog = new JDialog(frame, \"Test Failure \", true);\n+        dialog.setTitle(\"Failure reason\");\n+        JPanel jPanel = new JPanel(new BorderLayout());\n+        JTextArea jTextArea = new JTextArea(5, 20);\n+\n+        JButton okButton = new JButton(\"OK\");\n+        okButton.addActionListener((ae) -> {\n+            testFailedReason = \"Failure Reason:\\n\" + jTextArea.getText();\n+            dialog.setVisible(false);\n+        });\n+\n+        jPanel.add(new JScrollPane(jTextArea), BorderLayout.CENTER);\n+\n+        JPanel okayBtnPanel = new JPanel();\n+        okayBtnPanel.add(okButton);\n+\n+        jPanel.add(okayBtnPanel, BorderLayout.SOUTH);\n+        dialog.add(jPanel);\n+        dialog.setLocationRelativeTo(frame);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+\n+        failed = true;\n+        dialog.dispose();\n+        latch.countDown();\n+    }\n+\n+    \/**\n+     * Position the instruction frame with testFrame ( testcase created\n+     * frame) by the specified position\n+     * Note: This method should be invoked from the method that creates\n+     * testFrame\n+     *\n+     * @param testFrame test frame that the test is created\n+     * @param position  position can be either HORIZONTAL (both test\n+     *                  instruction frame and test frame as arranged side by\n+     *                  side or VERTICAL ( both test instruction frame and\n+     *                  test frame as arranged up and down)\n+     *\/\n+    public static void positionTestFrame(Frame testFrame, Position position) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        if (position.equals(Position.HORIZONTAL)) {\n+            int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+            frame.setLocation(newX, frame.getY());\n+\n+            testFrame.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n+        } else if (position.equals(Position.VERTICAL)) {\n+            int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+            frame.setLocation(frame.getX(), newY);\n+\n+            testFrame.setLocation(frame.getX(),\n+                    (frame.getLocation().y + frame.getHeight() + 5));\n+        }\n+    }\n+\n+    \/**\n+     * Add the testFrame to the frameList so that test instruction frame\n+     * and testFrame and any other frame used in this test is disposed\n+     * via disposeFrames()\n+     *\n+     * @param testFrame testFrame that needs to be disposed\n+     *\/\n+    public static synchronized void addTestFrame(Frame testFrame) {\n+        frameList.add(testFrame);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"}]}