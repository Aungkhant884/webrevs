{"files":[{"patch":"@@ -501,7 +501,0 @@\n-        <tr>\n-          <th scope=\"row\">{@linkplain Record Record classes}<\/th>\n-          <td>{@link CompositeType}, if possible<br>\n-            (see below)<\/td>\n-          <td>{@link CompositeData}<br>\n-            (see below)<\/td>\n-        <\/tr>\n@@ -542,0 +535,7 @@\n+        <tr>\n+          <th scope=\"row\">{@linkplain Record Record classes}<\/th>\n+          <td>{@link CompositeType}, if possible<br>\n+            (see below)<\/td>\n+          <td>{@link CompositeData}<br>\n+            (see below)<\/td>\n+        <\/tr>\n@@ -668,0 +668,37 @@\n+    <h3 id=\"records\">Mappings for Records<\/h3>\n+\n+    <p>A {@linkplain Record record} can be converted to a\n+      {@link CompositeType} if and only if all its\n+      {@linkplain Class#getRecordComponents() components} are\n+      convertible to open types.\n+      Otherwise, it is not convertible.<\/p>\n+\n+    <p>A record whose components are all convertible to open\n+      types, is itself convertible to a {@link CompositeType}\n+      as follows.\n+      The type name of this {@code CompositeType}\n+      is determined by the same <a href=\"#type-names\">type name rules<\/a>\n+      defined by the <a href=\"#composite-map\">mapping for other types<\/a>\n+      below. Its getters are the accessors for the {@linkplain\n+      RecordComponent record components}.<\/p>\n+\n+    <p>A record is reconstructed using its canonical constructor.\n+      The canonical constructor doesn't require the presence of\n+      {@link ConstructorParameters &#64;javax.management.ConstructorParameters}\n+      or {@code @java.beans.ConstructorProperties} annotations. If these\n+      annotations are present on the canonical constructor they\n+      will be ignored.<\/p>\n+\n+    <p>If the {@link CompositeData} from which the record is reconstructed\n+      doesn't contain all the record components, the MXBean framework\n+      will attempt to reconstruct the record in the same way than\n+      for <a href=\"#composite-map\">other types<\/a>:\n+      non canonical constructors may be used if\n+      annotated with either the {@link ConstructorParameters\n+      &#64;javax.management.ConstructorParameters} or\n+      {@code @java.beans.ConstructorProperties} annotation.<\/p>\n+\n+    <p>The complete rules for the mapping are detailed as part\n+      of the <a href=\"#composite-map\">Mapping for other types<\/a>\n+      below.<\/p>\n+\n@@ -757,37 +794,0 @@\n-    <h3 id=\"records\">Mappings for Records<\/h3>\n-\n-    <p>A {@linkplain Record record} can be converted to a\n-      {@link CompositeType} if and only if all its\n-      {@linkplain Class#getRecordComponents() components} are\n-      convertible to open types.\n-      Otherwise, it is not convertible.<\/p>\n-\n-    <p>A record whose components are all convertible to open\n-      types, is itself convertible to a {@link CompositeType}\n-      as follows.\n-      The type name of this {@code CompositeType}\n-      is determined by the same <a href=\"#type-names\">type name rules<\/a>\n-      defined by the <a href=\"#composite-map\">mapping for other types<\/a>\n-      below. Its getters are the accessors for the {@linkplain\n-      RecordComponent record components}.<\/p>\n-\n-    <p>A record is reconstructed using its canonical constructor.\n-      The canonical constructor doesn't require the presence of\n-      {@link ConstructorParameters &#64;javax.management.ConstructorParameters}\n-      or {@code @java.beans.ConstructorProperties} annotations. If these\n-      annotations are present on the canonical constructor they\n-      will be ignored.<\/p>\n-\n-    <p>If the {@link CompositeData} from which the record is reconstructed\n-      doesn't contain all the record components, the MXBean framework\n-      will attempt to reconstruct the record in the same way than\n-      for <a href=\"#composite-map\">other types<\/a>:\n-      non canonical constructors may be used if\n-      annotated with either the {@link ConstructorParameters\n-      &#64;javax.management.ConstructorParameters} or\n-     {@code @java.beans.ConstructorProperties} annotation.<\/p>\n-\n-    <p>The complete rules for the mapping are detailed as part\n-      of the <a href=\"#composite-map\">Mapping for other types<\/a>\n-      below.<\/p>\n-\n@@ -796,1 +796,2 @@\n-    <p>Given a record, or a Java class or interface <em>J<\/em> that does not match the other\n+    <p>Given a record <em>J<\/em>, or a Java class or interface\n+      <em>J<\/em> that does not match the other\n@@ -802,1 +803,1 @@\n-    <p>If the class is a {@link Record}, its getters are the\n+    <p>If <em>J<\/em> is a {@link Record}, its getters are the\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MXBean.java","additions":47,"deletions":46,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.InvalidObjectException;\n@@ -33,0 +34,1 @@\n+import javax.management.MBeanException;\n@@ -549,0 +551,34 @@\n+        \/\/ test that a composite data that doesn't have all the records\n+        \/\/ components prevents the record from being reconstructed.\n+        var recname6 = new ObjectName(\"test:type=Records2,instance=6\");\n+        Records2 rec2 = new Records2();\n+        var mbean6 = standard\n+                ? new StandardMBean(rec2, Records2MXBean.class, true)\n+                : rec2;\n+        server.registerMBean(mbean6, recname6);\n+        var cd6 = (CompositeData) server.getAttribute(recname6, \"DataPoint\");\n+        var cdt6 = cd6.getCompositeType();\n+        var itemNames6 = List.of(\"x\", \"mixed\")\n+                .toArray(String[]::new);\n+        var itemDesc6 = Stream.of(itemNames6)\n+                .map(cdt6::getDescription)\n+                .toArray(String[]::new);\n+        var itemTypes6 = Stream.of(itemNames6)\n+                .map(cdt6::getType)\n+                .toArray(OpenType<?>[]::new);\n+        var notmappable = new CompositeType(cdt6.getTypeName(),\n+                cdt6.getDescription(),\n+                itemNames6,\n+                itemDesc6,\n+                itemTypes6);\n+        var itemValues6 = Stream.of(itemNames6)\n+                .map(cd6::get)\n+                .toArray();\n+        var cd6mod = new CompositeDataSupport(notmappable, itemNames6, itemValues6);\n+        var attribute6 = new Attribute(\"DataPoint\", cd6mod);\n+        var x3 = expectThrows(MBeanException.class,\n+                standard ? () -> ((StandardMBean)mbean6).setAttribute(attribute6)\n+                         : () -> server.setAttribute(recname6, attribute6));\n+        reportExpected(x3);\n+        assertEquals(originalCause(x3).getClass(), InvalidObjectException.class);\n+\n","filename":"test\/jdk\/javax\/management\/mxbean\/RecordsMXBeanTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}