{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.reflect.RecordComponent;\n@@ -500,0 +501,7 @@\n+        <tr>\n+          <th scope=\"row\">{@linkplain Record Record classes}<\/th>\n+          <td>{@link CompositeType}, if possible<br>\n+            (see below)<\/td>\n+          <td>{@link CompositeData}<br>\n+            (see below)<\/td>\n+        <\/tr>\n@@ -546,1 +554,2 @@\n-          <td>{@link CompositeData}<\/td>\n+          <td>{@link CompositeData}<br>\n+            (see below)<\/td>\n@@ -748,0 +757,37 @@\n+    <h3 id=\"records\">Mappings for Records<\/h3>\n+\n+    <p>A {@linkplain Record record} can be converted to a\n+      {@link CompositeType} if and only if all its\n+      {@linkplain Class#getRecordComponents() components} are\n+      convertible to open types.\n+      Otherwise, it is not convertible.<\/p>\n+\n+    <p>A record whose components are all convertible to open\n+      types, is itself convertible to a {@link CompositeType}\n+      as follows.\n+      The type name of this {@code CompositeType}\n+      is determined by the same <a href=\"#type-names\">type name rules<\/a>\n+      defined by the <a href=\"#composite-map\">mapping for other types<\/a>\n+      below. Its getters are the accessors for the {@linkplain\n+      RecordComponent record components}.<\/p>\n+\n+    <p>A record is reconstructed using its canonical constructor.\n+      The canonical constructor doesn't require the presence of\n+      {@link ConstructorParameters &#64;javax.management.ConstructorParameters}\n+      or {@code @java.beans.ConstructorProperties} annotations. If these\n+      annotations are present on the canonical constructor they\n+      will be ignored.<\/p>\n+\n+    <p>If the {@link CompositeData} from which the record is reconstructed\n+      doesn't contain all the record components, the MXBean framework\n+      will attempt to reconstruct the record in the same way than\n+      for <a href=\"#composite-map\">other types<\/a>:\n+      non canonical constructors may be used if\n+      annotated with either the {@link ConstructorParameters\n+      &#64;javax.management.ConstructorParameters} or\n+     {@code @java.beans.ConstructorProperties} annotation.<\/p>\n+\n+    <p>The complete rules for the mapping are detailed as part\n+      of the <a href=\"#composite-map\">Mapping for other types<\/a>\n+      below.<\/p>\n+\n@@ -750,1 +796,1 @@\n-    <p>Given a Java class or interface <em>J<\/em> that does not match the other\n+    <p>Given a record, or a Java class or interface <em>J<\/em> that does not match the other\n@@ -757,2 +803,2 @@\n-      accessors for the record components. Otherwise, the\n-      class is examined for getters using the conventions\n+      accessors for the {@linkplain RecordComponent record components}.\n+      Otherwise, the class is examined for getters using the conventions\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MXBean.java","additions":50,"deletions":4,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.util.Collection;\n@@ -40,0 +41,1 @@\n+import javax.management.openmbean.CompositeDataView;\n@@ -107,0 +109,21 @@\n+    \/\/ A record with an annotated cannonical constructor.\n+    \/\/ Annotation should be ignored\n+    public record WithAnno(int x, int y) {\n+        @ConstructorParameters({\"y\", \"x\"})\n+        public WithAnno(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+    \/\/ A record that implements CompositeDataView\n+    public record WithCDV(int x, int y) implements CompositeDataView {\n+        @Override\n+        public CompositeData toCompositeData(CompositeType ct) {\n+            if (ct == null) return null;\n+            try {\n+                return new CompositeDataSupport(ct, new String[]{\"x\", \"y\"}, new Object[]{x() + 1, y() + 2});\n+            } catch (OpenDataException x) {\n+                throw new IllegalArgumentException(ct.getTypeName(), x);\n+            }\n+        }\n+    }\n@@ -184,0 +207,4 @@\n+        WithAnno getWithAnno();\n+        void setWithAnno(WithAnno r);\n+        WithCDV getCDV();\n+        void setCDV(WithCDV cdv);\n@@ -193,0 +220,2 @@\n+        private volatile WithAnno withAnno = new WithAnno(10, 11);\n+        private volatile WithCDV withCDV = new WithCDV(12, 13);\n@@ -243,0 +272,20 @@\n+\n+        @Override\n+        public WithAnno getWithAnno() {\n+            return withAnno;\n+        }\n+\n+        @Override\n+        public void setWithAnno(WithAnno r) {\n+            this.withAnno = r;\n+        }\n+\n+        @Override\n+        public WithCDV getCDV() {\n+            return withCDV;\n+        }\n+\n+        @Override\n+        public void setCDV(WithCDV cdv) {\n+            withCDV = cdv;\n+        }\n@@ -459,0 +508,20 @@\n+        var withAnno = mBean5.getWithAnno();\n+        assertEquals(withAnno.x(), 10);\n+        assertEquals(withAnno.y(), 11);\n+        withAnno = new WithAnno(12, 13);\n+        mBean5.setWithAnno(withAnno);\n+        withAnno = mBean5.getWithAnno();\n+        assertEquals(withAnno.x(), 12);\n+        assertEquals(withAnno.y(), 13);\n+\n+        \/\/ WithCDV.toCompositeData adds 1 to x and 2 to y,\n+        \/\/ we can check how many time it's been called\n+        \/\/ by looking at the values for x and y.\n+        var cdv = mBean5.getCDV();\n+        assertEquals(cdv.x(), 13 \/* 12 + 1 *\/, \"x\");\n+        assertEquals(cdv.y(), 15 \/* 13 + 2 *\/, \"y\");\n+        mBean5.setCDV(new WithCDV(14, 15));\n+        cdv = mBean5.getCDV();\n+        assertEquals(cdv.x(), 16 \/* 14 + 1*2 *\/, \"x\");\n+        assertEquals(cdv.y(), 19 \/* 15 + 2*2 *\/, \"y\");\n+\n","filename":"test\/jdk\/javax\/management\/mxbean\/RecordsMXBeanTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"}]}