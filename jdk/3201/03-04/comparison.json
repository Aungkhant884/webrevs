{"files":[{"patch":"@@ -670,2 +670,2 @@\n-    <p>A {@linkplain Record record} can be converted to a\n-      {@link CompositeType} if and only if all its\n+    <p>A {@linkplain Record record} class <em>J<\/em> can be converted\n+      to a {@link CompositeType} if and only if all its\n@@ -673,2 +673,5 @@\n-      convertible to open types.\n-      Otherwise, it is not convertible.<\/p>\n+      convertible to open types. Otherwise, it is not convertible.\n+      A record that has no components is not convertible.<\/p>\n+\n+    <h4 id=\"record-type-map\">Mapping a record class to\n+      {@code CompositeType}<\/h4>\n@@ -677,7 +680,28 @@\n-      types, is itself convertible to a {@link CompositeType}\n-      as follows.\n-      The type name of this {@code CompositeType}\n-      is determined by the same <a href=\"#type-names\">type name rules<\/a>\n-      defined by the <a href=\"#composite-map\">mapping for other types<\/a>\n-      below. Its getters are the accessors for the {@linkplain\n-      RecordComponent record components}.<\/p>\n+      types, is itself convertible to a {@link CompositeType}.\n+      The record class is converted to a {@code CompositeType}\n+      as follows.<\/p>\n+\n+    <ul>\n+      <li>The type name of the {@code CompositeType} is the name\n+        of the record class.<\/li>\n+\n+      <li>The record getters are the accessors for the\n+        {@linkplain RecordComponent record components}.<\/li>\n+\n+      <li>For each record component of type <em>T<\/em>, the item in\n+        the {@code CompositeType} has the same name as the record\n+        component and its type is <em>opentype(T)<\/em>, as\n+        defined by the <a href=\"#mapping-rules\">type mapping rules<\/a>\n+        above.<\/li>\n+    <\/ul>\n+\n+    <h4 id=\"record-data-map\">Mapping an instance of a record class to\n+      {@code CompositeData}<\/h4>\n+\n+    <p>The mapping from an instance of a record class to a\n+      {@link CompositeData} corresponding to the {@code CompositeType}\n+      is the same as specified for\n+      <a href=\"#composite-data-map\">other types<\/a>.<\/p>\n+\n+    <h4 id=\"reconstructing-record\">Reconstructing an instance of a record class\n+      from a {@code CompositeData}<\/h4>\n@@ -692,12 +716,5 @@\n-    <p>If the {@link CompositeData} from which the record is reconstructed\n-      doesn't contain all the record components, the MXBean framework\n-      will attempt to reconstruct the record in the same way than\n-      for <a href=\"#composite-map\">other types<\/a>:\n-      non canonical constructors may be used if\n-      annotated with either the {@link ConstructorParameters\n-      &#64;javax.management.ConstructorParameters} or\n-      {@code @java.beans.ConstructorProperties} annotation.<\/p>\n-\n-    <p>The complete rules for the mapping are detailed as part\n-      of the <a href=\"#composite-map\">Mapping for other types<\/a>\n-      below.<\/p>\n+    <p>How an instance of a record class <em>J<\/em> is reconstructed\n+      from a {@link CompositeData} is detailed in\n+      <a href=\"#reconstructing\">Reconstructing an instance\n+      of Java type or record class <em>J<\/em> from a {@code CompositeData}<\/a>\n+      below.\n@@ -796,1 +813,1 @@\n-    <p>Given a record <em>J<\/em>, or a Java class or interface\n+    <p>Given a Java class or interface\n@@ -803,3 +820,4 @@\n-    <p>If <em>J<\/em> is a {@link Record}, its getters are the\n-      accessors for the {@linkplain RecordComponent record components}.\n-      Otherwise, the class is examined for getters using the conventions\n+    <h4 id=\"composite-type-map\">Mapping a Java type <em>J<\/em>\n+      to {@link CompositeType}<\/h4>\n+\n+    <p>The class is examined for getters using the conventions\n@@ -836,7 +854,1 @@\n-    <p>If the class is a {@link Record} and the getter is a component\n-       accessor for a record component {@code name} of type <em>T<\/em>,\n-       then the item in the {@code CompositeType} has the same name\n-       as the record component, and has type <em>opentype(T)<\/em>.<\/p>\n-\n-    <p>Notice that unless the class is a {@code Record}, the\n-      first character (or code point) is converted to\n+    <p>Notice that the first character (or code point) is converted to\n@@ -854,0 +866,3 @@\n+    <h4 id=\"composite-data-map\" >Mapping from an instance of Java\n+      type or record class <em>J<\/em> to {@code CompositeData}<\/h4>\n+\n@@ -867,1 +882,1 @@\n-      {@code List<String> getNames()}\n+      {@code List<String> getNames()} (or {@code List<String> names()} for a record)\n@@ -883,2 +898,2 @@\n-    <h4>Reconstructing an instance of Java type <em>J<\/em> from\n-      a {@code CompositeData}<\/h4>\n+    <h4 id=\"reconstructing\">Reconstructing an instance of Java type\n+      or record class <em>J<\/em> from a {@code CompositeData}<\/h4>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MXBean.java","additions":52,"deletions":37,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -325,0 +325,14 @@\n+    public record NonCompliantR3() {\n+    }\n+    public interface NC3MXBean {\n+        public NonCompliantR3 getNCR3();\n+    }\n+    public class NC3 implements NC3MXBean {\n+        private volatile NonCompliantR3 ncr3 = new NonCompliantR3();\n+\n+        @Override\n+        public NonCompliantR3 getNCR3() {\n+            return ncr3;\n+        }\n+    }\n+\n@@ -551,0 +565,11 @@\n+        \/\/ Test non compliant records: this one has no getters\n+        \/\/ (not mappable to OpenType)\n+        var recname6 = new ObjectName(\"test:type=NCR3\");\n+        var x3 = standard\n+                ? expectThrows(IllegalArgumentException.class,\n+                () -> new StandardMBean(new NC3(), NC3MXBean.class, true))\n+                : expectThrows(NotCompliantMBeanException.class,\n+                () -> server.registerMBean(new NC3(), recname6));\n+        reportExpected(x3);\n+        assertEquals( originalCause(x3).getClass(), OpenDataException.class);\n+\n@@ -553,1 +578,1 @@\n-        var recname6 = new ObjectName(\"test:type=Records2,instance=6\");\n+        var recname7 = new ObjectName(\"test:type=Records2,instance=6\");\n@@ -555,1 +580,1 @@\n-        var mbean6 = standard\n+        var mbean7 = standard\n@@ -558,4 +583,4 @@\n-        server.registerMBean(mbean6, recname6);\n-        var cd6 = (CompositeData) server.getAttribute(recname6, \"DataPoint\");\n-        var cdt6 = cd6.getCompositeType();\n-        var itemNames6 = List.of(\"x\", \"mixed\")\n+        server.registerMBean(mbean7, recname7);\n+        var cd7 = (CompositeData) server.getAttribute(recname7, \"DataPoint\");\n+        var cdt7 = cd7.getCompositeType();\n+        var itemNames7 = List.of(\"x\", \"mixed\")\n@@ -563,2 +588,2 @@\n-        var itemDesc6 = Stream.of(itemNames6)\n-                .map(cdt6::getDescription)\n+        var itemDesc7 = Stream.of(itemNames7)\n+                .map(cdt7::getDescription)\n@@ -566,2 +591,2 @@\n-        var itemTypes6 = Stream.of(itemNames6)\n-                .map(cdt6::getType)\n+        var itemTypes7 = Stream.of(itemNames7)\n+                .map(cdt7::getType)\n@@ -569,7 +594,7 @@\n-        var notmappable = new CompositeType(cdt6.getTypeName(),\n-                cdt6.getDescription(),\n-                itemNames6,\n-                itemDesc6,\n-                itemTypes6);\n-        var itemValues6 = Stream.of(itemNames6)\n-                .map(cd6::get)\n+        var notmappable = new CompositeType(cdt7.getTypeName(),\n+                cdt7.getDescription(),\n+                itemNames7,\n+                itemDesc7,\n+                itemTypes7);\n+        var itemValues7 = Stream.of(itemNames7)\n+                .map(cd7::get)\n@@ -577,7 +602,7 @@\n-        var cd6mod = new CompositeDataSupport(notmappable, itemNames6, itemValues6);\n-        var attribute6 = new Attribute(\"DataPoint\", cd6mod);\n-        var x3 = expectThrows(MBeanException.class,\n-                standard ? () -> ((StandardMBean)mbean6).setAttribute(attribute6)\n-                         : () -> server.setAttribute(recname6, attribute6));\n-        reportExpected(x3);\n-        assertEquals(originalCause(x3).getClass(), InvalidObjectException.class);\n+        var notmappableVal = new CompositeDataSupport(notmappable, itemNames7, itemValues7);\n+        var attribute6 = new Attribute(\"DataPoint\", notmappableVal);\n+        var x4 = expectThrows(MBeanException.class,\n+                standard ? () -> ((StandardMBean)mbean7).setAttribute(attribute6)\n+                         : () -> server.setAttribute(recname7, attribute6));\n+        reportExpected(x4);\n+        assertEquals(originalCause(x4).getClass(), InvalidObjectException.class);\n","filename":"test\/jdk\/javax\/management\/mxbean\/RecordsMXBeanTest.java","additions":49,"deletions":24,"binary":false,"changes":73,"status":"modified"}]}