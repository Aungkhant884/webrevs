{"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/.ImmutableCollections.java.swp","binary":true,"status":"deleted"},{"patch":"@@ -55,0 +55,1 @@\n+import sun.nio.cs.ISO_8859_1;\n@@ -102,1 +103,2 @@\n-    private static final Set<String> disabledAlgorithms;\n+    \/\/ Set of disabled message digest algorithms\n+    private static final Set<String> disabledDigests;\n@@ -133,1 +135,1 @@\n-        disabledAlgorithms = Set.copyOf(algs);\n+        disabledDigests = Set.copyOf(algs);\n@@ -151,0 +153,2 @@\n+        \/\/ Normally same as algorithm, but excludes the -SESS suffix if present\n+        private String digestName;\n@@ -160,1 +164,1 @@\n-        \/\/ The H(A1) string used for MD5-sess\n+        \/\/ The H(A1) string used for XXX-sess\n@@ -180,0 +184,1 @@\n+            digestName = null;\n@@ -278,0 +283,3 @@\n+        synchronized String getDigestName () {\n+            return digestName;\n+        }\n@@ -279,0 +287,3 @@\n+        synchronized void setDigestName (String s) {\n+            this.digestName = s;\n+        }\n@@ -430,9 +441,2 @@\n-        String algorithm = p.findValue(\"algorithm\");\n-        if (algorithm == null || algorithm.isEmpty()) {\n-            algorithm = \"MD5\";  \/\/ The default, accoriding to rfc2069\n-        } else if (algorithm.equalsIgnoreCase(\"SHA-512-256\")) {\n-            algorithm = \"SHA-512\/256\";\n-        }\n-        var oid = KnownOIDs.findMatch(algorithm);\n-        if (oid == null) {\n-            log(\"unknown algorithm: \" + algorithm);\n+\n+        if (!setAlgorithmNames(p, params))\n@@ -440,3 +444,0 @@\n-        }\n-        algorithm = oid.stdName();\n-        params.setAlgorithm (algorithm);\n@@ -461,0 +462,32 @@\n+    \/\/ Algorithm name is stored in two separate fields (of Paramaeters)\n+    \/\/ This allows for variations in digest algorithm name (aliases)\n+    \/\/ and also allow for the -sess variant defined in HTTP Digest protocol\n+    \/\/ returns false if algorithm not supported\n+    private static boolean setAlgorithmNames(HeaderParser p, Parameters params) {\n+        String algorithm = p.findValue(\"algorithm\");\n+        String digestName = algorithm;\n+        if (algorithm == null || algorithm.isEmpty()) {\n+            algorithm = \"MD5\";  \/\/ The default, accoriding to rfc2069\n+            digestName = \"MD5\";\n+        } else {\n+            algorithm = algorithm.toUpperCase(Locale.ROOT);\n+            digestName = algorithm;\n+        }\n+        if (algorithm.endsWith(\"-SESS\")) {\n+            digestName = algorithm.substring(0, algorithm.length() - 5);\n+            algorithm = digestName + \"-sess\"; \/\/ suffix lower case\n+        }\n+        if (digestName.equals(\"SHA-512-256\")) {\n+            digestName = \"SHA-512\/256\";\n+        }\n+        var oid = KnownOIDs.findMatch(digestName);\n+        if (oid == null) {\n+            log(\"unknown algorithm: \" + algorithm);\n+            return false;\n+        }\n+        digestName = oid.stdName();\n+        params.setAlgorithm (algorithm);\n+        params.setDigestName (digestName);\n+        return true;\n+    }\n+\n@@ -472,0 +505,1 @@\n+        String digest = params.getDigestName ();\n@@ -473,1 +507,1 @@\n-            validateAlgorithm(algorithm);\n+            validateDigest(digest);\n@@ -490,4 +524,1 @@\n-        boolean session = algorithm.endsWith (\"-SESS\");\n-        if (session) {\n-            algorithm = algorithm.substring(0, algorithm.length() - 5);\n-        }\n+        boolean session = algorithm.endsWith (\"-sess\");\n@@ -498,1 +529,1 @@\n-                                        algorithm, session, charset);\n+                                        digest, session, charset);\n@@ -525,1 +556,1 @@\n-                user = computeUserhash(algorithm, user, realm, charset);\n+                user = computeUserhash(digest, user, realm, charset);\n@@ -565,1 +596,1 @@\n-    private void validateAlgorithm(String algorithm) throws IOException {\n+    private void validateDigest(String name) throws IOException {\n@@ -571,1 +602,1 @@\n-        if (disabledAlgorithms.contains(algorithm)) {\n+        if (disabledDigests.contains(name)) {\n@@ -573,1 +604,1 @@\n-                + algorithm;\n+                + name;\n@@ -589,0 +620,1 @@\n+        String digest = params.getDigestName ();\n@@ -590,1 +622,1 @@\n-        validateAlgorithm(algorithm);\n+        validateDigest(digest);\n@@ -611,1 +643,1 @@\n-                                           nonce, cnonce, ncstring, algorithm,\n+                                           nonce, cnonce, ncstring, digest,\n@@ -634,1 +666,1 @@\n-    private String computeUserhash(String algorithm, String user,\n+    private String computeUserhash(String digest, String user,\n@@ -638,1 +670,1 @@\n-        MessageDigest md = MessageDigest.getInstance(algorithm);\n+        MessageDigest md = MessageDigest.getInstance(digest);\n@@ -676,1 +708,1 @@\n-        String HashA2 = encode(A2, null, md, charset);\n+        String HashA2 = encode(A2, null, md, ISO_8859_1.INSTANCE);\n@@ -688,1 +720,1 @@\n-        finalHash = encode(combo, null, md, charset);\n+        finalHash = encode(combo, null, md, ISO_8859_1.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":63,"deletions":31,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -66,4 +66,6 @@\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER307\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY305\n+ * @run main\/othervm -Dtest.debug=true -Dtest.digest.algorithm=SHA-512 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dtest.digest.algorithm=SHA-256 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER307\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY305\n@@ -74,1 +76,0 @@\n-\n@@ -197,0 +198,4 @@\n+        String digestalg = System.getProperty(\"test.digest.algorithm\");\n+        if (digestalg == null || \"\".equals(digestalg))\n+            digestalg = \"MD5\";\n+\n@@ -208,1 +213,3 @@\n-                                          getHttpSchemeType());\n+                                          getHttpSchemeType(),\n+                                          null,\n+                                          digestalg);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTest.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -120,0 +120,10 @@\n+        return create(protocol, authType, auth, schemeType, null, \"MD5\");\n+    }\n+\n+    public static HTTPTestServer create(HttpProtocolType protocol,\n+                                        HttpAuthType authType,\n+                                        HttpTestAuthenticator auth,\n+                                        HttpSchemeType schemeType,\n+                                        HttpHandler delegate,\n+                                        String algorithm)\n+            throws IOException {\n@@ -125,1 +135,1 @@\n-                                             schemeType, delegate, \"\/\");\n+                                             schemeType, delegate, algorithm, \"\/\");\n@@ -330,0 +340,1 @@\n+                                        String algorithm,\n@@ -339,1 +350,1 @@\n-        server.configureAuthentication(ctxt, schemeType, auth, authType);\n+        server.configureAuthentication(ctxt, schemeType, auth, authType, algorithm);\n@@ -360,1 +371,1 @@\n-        server.configureAuthentication(ctxt, schemeType, auth, authType);\n+        server.configureAuthentication(ctxt, schemeType, auth, authType, null);\n@@ -388,1 +399,1 @@\n-                               auth, schemeType, targetDelegate, \"\/\");\n+                               auth, schemeType, targetDelegate, \"MD5\", \"\/\");\n@@ -434,1 +445,1 @@\n-                            HttpAuthType authType) {\n+                            HttpAuthType authType, String algorithm) {\n@@ -438,1 +449,1 @@\n-                ctxt.getFilters().add(new HttpDigestFilter(auth, authType));\n+                ctxt.getFilters().add(new HttpDigestFilter(auth, authType, algorithm));\n@@ -606,0 +617,1 @@\n+                                            String expectedAlgorithm,\n@@ -612,1 +624,6 @@\n-            boolean md5sess = algorithm.equalsIgnoreCase (\"MD5-sess\");\n+            if (algorithm.endsWith(\"-sess\")) {\n+                algorithm = algorithm.substring(0, algorithm.length() - 5);\n+            }\n+            if (!algorithm.equalsIgnoreCase(expectedAlgorithm)) {\n+                throw new IllegalArgumentException(\"unexpected algorithm\");\n+            }\n@@ -614,1 +631,1 @@\n-            MessageDigest md = MessageDigest.getInstance(md5sess?\"MD5\":algorithm);\n+            MessageDigest md = MessageDigest.getInstance(algorithm);\n@@ -779,1 +796,2 @@\n-        public HttpDigestFilter(HttpTestAuthenticator auth, HttpAuthType authType) {\n+        private final String algorithm;\n+        public HttpDigestFilter(HttpTestAuthenticator auth, HttpAuthType authType, String algorithm) {\n@@ -786,0 +804,1 @@\n+            this.algorithm = (algorithm == null) ? \"MD5\" : algorithm;\n@@ -793,1 +812,1 @@\n-                 + \"\\r\\n    qop=\\\"auth\\\",\"\n+                 + \"\\r\\n    qop=\\\"auth\\\", \" + \"algorithm=\\\"\" + algorithm + \"\\\", \"\n@@ -826,1 +845,1 @@\n-            if (!\"MD5\".equalsIgnoreCase(dg.getAlgorithm(\"MD5\"))) {\n+            if (!this.algorithm.equalsIgnoreCase(dg.getAlgorithm(\"MD5\"))) {\n@@ -857,1 +876,1 @@\n-            String response = DigestResponse.computeDigest(true, reqMethod, pw, dg);\n+            String response = DigestResponse.computeDigest(true, reqMethod, pw, algorithm, dg);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTestServer.java","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+\n@@ -37,0 +38,1 @@\n+import java.net.HttpURLConnection;\n@@ -41,0 +43,7 @@\n+import java.util.Map;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.Map.entry;\n@@ -49,14 +58,0 @@\n- * @run main\/othervm DigestAuth bad\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth good\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth only_nonce\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=SHA-1 DigestAuth sha1-good\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth sha1-bad\n- * @run main\/othervm DigestAuth sha256\n- * @run main\/othervm DigestAuth sha512\n- * @run main\/othervm DigestAuth sha256-userhash\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth sha256\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth no_header\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth no_nonce\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth no_qop\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth invalid_alg\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth validate_server\n@@ -65,0 +60,11 @@\n+\n+\/*\n+ * The sha512-256-userhash case must be run manually. It needs to run with sudo as the\n+ * test must bind to port 80. You also need a modified JDK where\n+ * sun.net.www.protocol.http.DigestAuthentication.getCnonce\n+ * returns the hardcoded cnonce value below (normally it is chosen at random)\n+ *  \"NTg6RKcb9boFIAS3KrFK9BGeh+iDa\/sm6jUMp2wds69v\"\n+ * It can be run from the command line directly as follows:\n+ * sudo java -Djdk.net.hosts.file=hosts DigestAuth sha512-256-userhash port80\n+ * assuming you are running in the test source directory\n+ *\/\n@@ -140,0 +146,28 @@\n+    \/\/ These two must be run manually with a modified JDK\n+    \/\/ that generates the exact cnonce given below.\n+    static final String SHA_512_256_FIRST = \"Digest \"\n+            + \"realm=\\\"api@example.org\\\", \"\n+            + \"qop=\\\"auth\\\", \"\n+            + \"algorithm=SHA-512-256, \"\n+            + \"nonce=\\\"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\/RVvkK\\\", \"\n+            + \"opaque=\\\"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\\\", \"\n+            + \"charset=UTF-8, \"\n+            + \"userhash=true \";\n+\n+    \/\/ Below taken from corrected version of RFC 7616\n+    static final Map<String,String> SHA_512_256_EXPECTED =\n+        Map.ofEntries(\n+            entry(\"username\", \"793263caabb707a56211940d90411ea4a575adeccb\"\n+                                + \"7e360aeb624ed06ece9b0b\"),\n+            entry(\"realm\", \"api@example.org\"),\n+            entry(\"uri\", \"\/doe.json\"),\n+            entry(\"algorithm\", \"SHA-512-256\"),\n+            entry(\"nonce\", \"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\/RVvkK\"),\n+            entry(\"nc\", \"00000001\"),\n+            entry(\"cnonce\", \"NTg6RKcb9boFIAS3KrFK9BGeh+iDa\/sm6jUMp2wds69v\"),\n+            entry(\"qop\", \"auth\"),\n+            entry(\"response\", \"3798d4131c277846293534c3edc11bd8a5e4cdcbff78\"\n+                                + \"b05db9d95eeb1cec68a5\"),\n+            entry(\"opaque\", \"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\"),\n+            entry(\"userhash\", \"true\"));\n+\n@@ -141,0 +175,10 @@\n+        Logger l1 = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n+        Logger l2 = Logger.getLogger(\"com.sun.net.httpserver\");\n+        ConsoleHandler h1 = new ConsoleHandler();\n+        ConsoleHandler h2 = new ConsoleHandler();\n+        l1.setLevel(Level.ALL);\n+        l2.setLevel(Level.ALL);\n+        h1.setLevel(Level.ALL);\n+        h2.setLevel(Level.ALL);\n+        l1.addHandler(h1);\n+        l2.addHandler(h2);\n@@ -145,0 +189,2 @@\n+        System.out.println(\"Running test: \" + testcase);\n+        boolean usePort80 = args.length > 1 && args[1].equals(\"port80\");\n@@ -147,1 +193,1 @@\n-        try (LocalHttpServer server = LocalHttpServer.startServer()) {\n+        try (LocalHttpServer server = LocalHttpServer.startServer(usePort80)) {\n@@ -151,1 +197,0 @@\n-            Authenticator.setDefault(auth);\n@@ -157,0 +202,13 @@\n+                case \"sha512-256-userhash\":\n+                    auth = new AuthenticatorImpl(\"J\\u00e4s\\u00f8n Doe\", \"Secret, or not?\");\n+                    \/\/ file based name service must be used so domain\n+                    \/\/ below resolves to localhost\n+                    if (usePort80) {\n+                        url = \"http:\/\/api.example.org\/doe.json\";\n+                    } else {\n+                        url = \"http:\/\/api.example.org:\" + server.getPort() + \"\/doe.json\";\n+                    }\n+                    server.setWWWAuthHeader(SHA_512_256_FIRST);\n+                    server.setExpectedRequestParams(SHA_512_256_EXPECTED);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n@@ -322,1 +380,1 @@\n-            load(url);\n+            load(url, auth);\n@@ -347,2 +405,3 @@\n-    static void load(String url) throws IOException {\n-        URLConnection conn = new URL(url).openConnection();\n+    static void load(String url, Authenticator auth) throws IOException {\n+        HttpURLConnection conn = (HttpURLConnection)(new URL(url).openConnection());\n+        conn.setAuthenticator(auth);\n@@ -386,0 +445,11 @@\n+        private final String user, pass;\n+\n+        AuthenticatorImpl() {\n+            this(\"Mufasa\", \"Circle Of Life\");\n+        }\n+\n+        AuthenticatorImpl(String user, String pass) {\n+            this.user = user;\n+            this.pass = pass;\n+        }\n+\n@@ -392,2 +462,1 @@\n-            return new PasswordAuthentication(\"Mufasa\",\n-                    \"Circle Of Life\".toCharArray());\n+            return new PasswordAuthentication(user, pass.toCharArray());\n@@ -406,0 +475,1 @@\n+        private volatile Map<String,String> expectedParams;\n@@ -425,0 +495,4 @@\n+        void setExpectedRequestParams(Map<String,String> params) {\n+            this.expectedParams = params;\n+        }\n+\n@@ -446,1 +520,15 @@\n-        static LocalHttpServer startServer() throws IOException {\n+        void checkExpectedParams(String header) {\n+            if (expectedParams == null)\n+                return;\n+            expectedParams.forEach((name, value) -> {\n+                String rxValue = findParameter(header, name);\n+                if (!rxValue.equalsIgnoreCase(value)) {\n+                    throw new RuntimeException(\"value mismatch \"\n+                        + \"name = \" + name + \" (\" + rxValue + \"\/\"\n+                        + value + \")\");\n+                }\n+            });\n+        }\n+\n+        static LocalHttpServer startServer(boolean usePort80) throws IOException {\n+            int port = usePort80 ? 80 : 0;\n@@ -449,1 +537,1 @@\n-                    new InetSocketAddress(loopback, 0), 0);\n+                    new InetSocketAddress(loopback, port), 0);\n@@ -458,0 +546,1 @@\n+            server.createContext(\"\/\", this);\n@@ -492,0 +581,1 @@\n+                    checkExpectedParams(header);\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/DigestAuth.java","additions":113,"deletions":23,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+127.0.0.1 api.example.org\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/hosts","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"}]}