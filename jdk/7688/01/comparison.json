{"files":[{"patch":"@@ -227,0 +227,8 @@\n+\t<LI><P><B>{@systemProperty http.auth.digest.enabledAlgorithms}<\/B> (default: &lt;none&gt;)<BR>\n+        By default, certain message digest algorithms are disabled for use in HTTP Digest\n+        authentication due to their proven security limitations. This only applies to proxy\n+        authentication and plain-text HTTP server authentication. Disabled algorithms are still\n+        usable for HTTPS server authentication. The default list of disabled algorithms is specified\n+        in the {@code java.security} properties file and currently comprises {@code MD5} and\n+        {@code SHA-1}. If it is still required to use one of these algorithms, then they can be\n+        re-enabled by setting this property to a comma separated list of the algorithm names.<\/P>\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n@@ -36,0 +38,2 @@\n+import java.security.Security;\n+import java.text.Normalizer;\n@@ -37,0 +41,2 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n@@ -39,0 +45,1 @@\n+import java.util.Set;\n@@ -42,1 +49,1 @@\n-import sun.nio.cs.ISO_8859_1;\n+import sun.util.logging.PlatformLogger;\n@@ -60,0 +67,3 @@\n+    private static final String secPropName =\n+        \"jdk.httpdigest.defaultDisabledAlgorithms\";\n+\n@@ -63,0 +73,30 @@\n+    \/\/ default set of disabled message digest algorithms that may not be\n+    \/\/ used for proxy connections, or plain text http server connections\n+\n+    private static final Set<String> defDisabledAlgs = getDefaultAlgs();\n+\n+    private static Set<String> getDefaultAlgs() {\n+        Set<String> disabledAlgs = new HashSet<>();\n+        @SuppressWarnings(\"removal\")\n+        String secprops = AccessController.doPrivileged(\n+            new PrivilegedAction<>() {\n+                public String run() {\n+                    return Security.getProperty(secPropName)\n+                                   .replaceAll(\"\\\\s\", \"\")\n+                                   .toUpperCase();\n+                }\n+            }\n+        );\n+        String[] algorithms = secprops.split(\",\");\n+        for (String algorithm : algorithms) {\n+            disabledAlgs.add(algorithm);\n+        }\n+        return Collections.unmodifiableSet(disabledAlgs);\n+    }\n+\n+    \/\/ A net property which overrides the disabled set above.\n+    private static final String enabledAlgPropName =\n+        \"http.auth.digest.enabledAlgorithms\";\n+\n+    private static final Set<String> disabledAlgs = new HashSet<>();\n+\n@@ -66,0 +106,3 @@\n+    private static final PlatformLogger logger =\n+        HttpURLConnection.getHttpLogger();\n+\n@@ -76,0 +119,15 @@\n+\n+        disabledAlgs.addAll(defDisabledAlgs);\n+        @SuppressWarnings(\"removal\")\n+        String algs = AccessController.doPrivileged(\n+            new PrivilegedAction<>() {\n+                public String run() {\n+                    String s = NetProperties.get(enabledAlgPropName);\n+                    return s == null\n+                        ? \"\" : s.replaceAll(\"\\\\s\", \"\").toUpperCase();\n+                }\n+            }\n+        );\n+        for (String alg : algs.split(\",\")) {\n+            disabledAlgs.remove(alg.toUpperCase());\n+        }\n@@ -93,0 +151,1 @@\n+        private String charset;\n@@ -95,0 +154,6 @@\n+        \/\/ true if the server supports user hashing\n+        \/\/ in which case the username returned to server\n+        \/\/ will be H(unq(username) \":\" unq(realm))\n+        \/\/ meaning the username doesn't appear in the clear\n+        private boolean userhash;\n+\n@@ -117,0 +182,1 @@\n+            charset = null;\n@@ -154,0 +220,18 @@\n+        synchronized boolean getUserhash() {\n+            return userhash;\n+        }\n+\n+        synchronized void setUserhash(boolean userhash) {\n+            this.userhash = userhash;\n+        }\n+\n+        synchronized Charset getCharset() {\n+            return \"UTF-8\".equals(charset)\n+                ? StandardCharsets.UTF_8\n+                : StandardCharsets.ISO_8859_1;\n+        }\n+\n+        synchronized void setCharset(String charset) {\n+            this.charset = charset;\n+        }\n+\n@@ -312,0 +396,2 @@\n+        params.setUserhash (Boolean.valueOf(p.findValue(\"userhash\")));\n+        params.setCharset(p.findValue(\"charset\", \"ISO_8859_1\").toUpperCase());\n@@ -340,0 +426,1 @@\n+        algorithm = algorithm.toUpperCase();\n@@ -370,0 +457,7 @@\n+        try {\n+            validateAlgorithm(algorithm);\n+        } catch (IOException e) {\n+            return null;\n+        }\n+        Charset charset = params.getCharset();\n+        boolean userhash = params.getUserhash ();\n@@ -381,0 +475,5 @@\n+        boolean session = algorithm.endsWith (\"-SESS\");\n+        if (session) {\n+            algorithm = algorithm.substring(0, algorithm.length() - 5);\n+        }\n+\n@@ -383,1 +482,2 @@\n-                                        method, uri, nonce, cnonce, ncstring);\n+                                        method, uri, nonce, cnonce, ncstring,\n+                                        algorithm, session, charset);\n@@ -405,0 +505,13 @@\n+        String user = pw.getUserName();\n+        String userhashField = \"\";\n+        try {\n+            if (userhash) {\n+                user = computeUserhash(algorithm, user, realm, charset);\n+                userhashField = \", userhash=true\";\n+            }\n+        } catch (NoSuchAlgorithmException ex) {\n+            \/\/ can't happen as the algorithm was found already\n+            assert false;\n+            return null;\n+        }\n+\n@@ -406,1 +519,1 @@\n-                        + \" username=\\\"\" + pw.getUserName()\n+                        + \" username=\\\"\" + user\n@@ -410,0 +523,1 @@\n+                        + userhashField\n@@ -430,0 +544,18 @@\n+    private void validateAlgorithm(String algorithm) throws IOException {\n+        if (getAuthType() == AuthCacheValue.Type.Server &&\n+                getProtocolScheme().equals(\"https\")) {\n+            \/\/ HTTPS server authentication can use any algorithm\n+            return;\n+        }\n+        algorithm = algorithm.toUpperCase();\n+        if (disabledAlgs.contains(algorithm)) {\n+            String msg = \"Rejecting digest authentication with insecure algorithm: \"\n+                + algorithm;\n+            if (logger.isLoggable(PlatformLogger.Level.INFO)) {\n+                logger.info(msg + \" This constraint may be relaxed by setting \" +\n+                     \"the \\\"http.auth.digest.enabledAlgorithms\\\" system property.\");\n+            }\n+            throw new IOException(msg);\n+        }\n+    }\n+\n@@ -439,0 +571,2 @@\n+        Charset charset = params.getCharset();\n+        validateAlgorithm(algorithm);\n@@ -446,0 +580,5 @@\n+        boolean session = algorithm.endsWith (\"-SESS\");\n+        if (session) {\n+            algorithm = algorithm.substring(0, algorithm.length() - 5);\n+        }\n+\n@@ -453,2 +592,3 @@\n-            String expected = computeDigest(false, username,passwd,realm,\n-                                        method, uri, nonce, cnonce, ncstring);\n+            String expected = computeDigest(false, username,passwd,realm, method, uri,\n+                                           nonce, cnonce, ncstring, algorithm,\n+                                           session, charset);\n@@ -474,0 +614,12 @@\n+    private String computeUserhash(String algorithm, String user,\n+                                   String realm, Charset charset)\n+        throws NoSuchAlgorithmException\n+    {\n+        if (algorithm.equals(\"SHA-512-256\")) {\n+            algorithm = \"SHA-512\/256\";\n+        }\n+        MessageDigest md = MessageDigest.getInstance(algorithm);\n+        String s = user + \":\" + realm;\n+        return encode(s, null, md, charset);\n+    }\n+\n@@ -478,1 +630,3 @@\n-                        String cnonce, String ncValue\n+                        String cnonce, String ncValue,\n+                        String algorithm, boolean session,\n+                        Charset charset\n@@ -483,2 +637,0 @@\n-        String algorithm = params.getAlgorithm ();\n-        boolean md5sess = algorithm.equalsIgnoreCase (\"MD5-sess\");\n@@ -486,1 +638,4 @@\n-        MessageDigest md = MessageDigest.getInstance(md5sess?\"MD5\":algorithm);\n+        if (algorithm.equals(\"SHA-512-256\")) {\n+            algorithm = \"SHA-512\/256\";\n+        }\n+        MessageDigest md = MessageDigest.getInstance(algorithm);\n@@ -488,1 +643,1 @@\n-        if (md5sess) {\n+        if (session) {\n@@ -491,1 +646,1 @@\n-                String s1 = encode (s, password, md);\n+                String s1 = encode (s, password, md, charset);\n@@ -493,1 +648,1 @@\n-                HashA1 = encode(A1, null, md);\n+                HashA1 = encode(A1, null, md, charset);\n@@ -498,1 +653,1 @@\n-            HashA1 = encode(A1, password, md);\n+            HashA1 = encode(A1, password, md, charset);\n@@ -507,1 +662,1 @@\n-        String HashA2 = encode(A2, null, md);\n+        String HashA2 = encode(A2, null, md, charset);\n@@ -519,1 +674,1 @@\n-        finalHash = encode(combo, null, md);\n+        finalHash = encode(combo, null, md, charset);\n@@ -533,2 +688,5 @@\n-    private String encode(String src, char[] passwd, MessageDigest md) {\n-        md.update(src.getBytes(ISO_8859_1.INSTANCE));\n+    private String encode(String src, char[] passwd, MessageDigest md, Charset charset) {\n+        if (charset.equals(StandardCharsets.UTF_8)) {\n+            src = Normalizer.normalize(src, Normalizer.Form.NFC);\n+        }\n+        md.update(src.getBytes(charset));\n@@ -543,1 +701,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":175,"deletions":18,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -704,0 +704,10 @@\n+#\n+# Disabled (by default) message digest algorithms for use with\n+# HTTP Digest authentication (java.net.HttpURLConnection)\n+# This may be overridden by setting the networking (or system)\n+# property \"http.auth.digest.enabledAlgorithms\" to a comma\n+# separated list of algorithms to be allowed.\n+#\n+jdk.httpdigest.defaultDisabledAlgorithms = MD5, MD-5, SHA1, SHA-1\n+\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm B4722333\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 B4722333\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4722333.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @run main\/othervm B4759514\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true B4759514\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 B4759514\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 -Djava.net.preferIPv6Addresses=true B4759514\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4759514.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,4 @@\n- * @run main\/othervm -Dhttp.nonProxyHosts=\"\" -Dhttp.auth.digest.validateProxy=true B6870935\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Dhttp.nonProxyHosts=\"\" -Dhttp.auth.digest.validateProxy=true B6870935\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n","filename":"test\/jdk\/java\/net\/Authenticator\/B6870935.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,3 +34,5 @@\n- * @run main\/othervm B8034170 unquoted\n- * @run main\/othervm -Dhttp.auth.digest.quoteParameters=true B8034170 quoted\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true B8034170 unquoted\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 B8034170 unquoted\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Dhttp.auth.digest.quoteParameters=true B8034170 quoted\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true B8034170 unquoted\n","filename":"test\/jdk\/java\/net\/Authenticator\/B8034170.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,4 +66,4 @@\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST SERVER\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST PROXY\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST PROXY305\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST SERVER307\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST SERVER\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY305\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST SERVER307\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPSetAuthenticatorTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,4 +66,4 @@\n- * @run main\/othervm HTTPTest SERVER\n- * @run main\/othervm HTTPTest PROXY\n- * @run main\/othervm HTTPTest SERVER307\n- * @run main\/othervm HTTPTest PROXY305\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPTest SERVER\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPTest PROXY\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPTest SERVER307\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 HTTPTest PROXY305\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,3 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.nio.charset.StandardCharsets;\n@@ -41,1 +44,1 @@\n- * @bug 8138990\n+ * @bug 8138990 8281561\n@@ -46,9 +49,15 @@\n- * @run main\/othervm DigestAuth good\n- * @run main\/othervm DigestAuth only_nonce\n- * @run main\/othervm DigestAuth sha1\n- * @run main\/othervm DigestAuth no_header\n- * @run main\/othervm DigestAuth no_nonce\n- * @run main\/othervm DigestAuth no_qop\n- * @run main\/othervm DigestAuth invalid_alg\n- * @run main\/othervm DigestAuth validate_server\n- * @run main\/othervm DigestAuth validate_server_no_qop\n+ * @run main\/othervm DigestAuth bad\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth good\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth only_nonce\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=SHA1 DigestAuth sha1-good\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth sha1-bad\n+ * @run main\/othervm DigestAuth sha256\n+ * @run main\/othervm DigestAuth sha512\n+ * @run main\/othervm DigestAuth sha256-userhash\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth sha256\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth no_header\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth no_nonce\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth no_qop\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth invalid_alg\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth validate_server\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 DigestAuth validate_server_no_qop\n@@ -91,0 +100,22 @@\n+    static final String WWW_AUTH_HEADER_SHA256 = \"Digest \"\n+            + \"nonce=\\\"a69ae8a2e17c219bc6c118b673e93601616a6a\"\n+            + \"4d8fde3a19996748d77ad0464b\\\", qop=\\\"auth\\\", \"\n+            + \"opaque=\\\"efc62777cff802cb29252f626b041f381cd360\"\n+            + \"7187115871ca25e7b51a3757e9\\\", algorithm=SHA-256\";\n+\n+    static final String WWW_AUTH_HEADER_SHA512 = \"Digest \"\n+            + \"nonce=\\\"9aaa8d3ae53b54ce653a5d52d895afcd9c0e430\"\n+            + \"a17bdf98bb34235af84fba268d31376a63e0c39079b519\"\n+            + \"c14baa0429754266f35b62a47b9c8b5d3d36c638282\\\",\"\n+            + \" qop=\\\"auth\\\", opaque=\\\"28cdc6bae6c5dd7ec89dbf\"\n+            + \"af4d4f26b70f41ebbb83dc7af0950d6de016c40f412224\"\n+            + \"676cd45ebcf889a70e65a2b055a8b5232e50281272ba7c\"\n+            + \"67628cc3bb3492\\\", algorithm=SHA-512\";\n+\n+    static final String WWW_AUTH_HEADER_SHA_256_UHASH = \"Digest \"\n+            + \"realm=\\\"testrealm@host.com\\\", \"\n+            + \"qop=\\\"auth\\\", algorithm=SHA-256,\"\n+            + \"nonce=\\\"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\"\n+            + \"\/RVvkK\\\", opaque=\\\"HRPCssKJSGjCrkzDg8OhwpzCiGP\"\n+            + \"ChXYjwrI2QmXDnsOS\\\", charset=UTF-8, userhash=true\";\n+\n@@ -126,0 +157,12 @@\n+                case \"bad\":\n+                    \/\/ server returns a good WWW-Authenticate header with MD5\n+                    \/\/ but MD5 is disallowed by default\n+                    server.setWWWAuthHeader(GOOD_WWW_AUTH_HEADER);\n+                    success = testAuth(url, auth, EXPECT_FAILURE);\n+                    if (auth.lastRequestedPrompt == null ||\n+                            !auth.lastRequestedPrompt.equals(REALM)) {\n+                        System.out.println(\"Unexpected realm: \"\n+                                + auth.lastRequestedPrompt);\n+                        success = false;\n+                    }\n+                    break;\n@@ -204,1 +247,1 @@\n-                case \"sha1\":\n+                case \"sha1-good\":\n@@ -209,0 +252,25 @@\n+                case \"sha1-bad\":\n+                    \/\/ server returns a WWW-Authenticate header with SHA-1\n+                    \/\/ but SHA-1 disabled\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA1);\n+                    success = testAuth(url, auth, EXPECT_FAILURE);\n+                    break;\n+                case \"sha256\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-256\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA256);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n+                case \"sha512\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-512\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA512);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n+                case \"sha256-userhash\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-256\n+                    \/\/ also sets the userhash=true parameter\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA_256_UHASH);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    \/\/ make sure the userhash parameter was set correctly\n+                    \/\/ and the username itself is the correct hash\n+                    server.checkUserHash(getUserHash(\"SHA-256\", \"Mufasa\", REALM));\n+                    break;\n@@ -295,0 +363,18 @@\n+    public static String getUserHash(String alg, String user, String realm) {\n+        try {\n+            MessageDigest md = MessageDigest.getInstance(alg);\n+            String msg = user + \":\" + realm;\n+            \/\/String msg = \"Mufasa:testrealm@host.com\";\n+            byte[] output = md.digest(msg.getBytes(StandardCharsets.ISO_8859_1));\n+            StringBuilder sb = new StringBuilder();\n+            for (int i=0; i<output.length; i++) {\n+                String s1 = Integer.toHexString(output[i] & 0xf);\n+                String s2 = Integer.toHexString(Byte.toUnsignedInt(output[i]) >>> 4);\n+                sb.append(s2).append(s1);\n+            }\n+            return sb.toString();\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -306,1 +392,0 @@\n-\n@@ -319,0 +404,2 @@\n+        private volatile String lastRequestedUser;\n+        private volatile String lastRequestedUserhash;\n@@ -342,0 +429,17 @@\n+        void checkUserHash(String expectedUser) {\n+            boolean pass = true;\n+            if (!expectedUser.equals(lastRequestedUser)) {\n+                System.out.println(\"Username mismatch:\");\n+                System.out.println(\"Expected: \" + expectedUser);\n+                System.out.println(\"Received: \" + lastRequestedUser);\n+                pass = false;\n+            }\n+            if (!lastRequestedUserhash.equalsIgnoreCase(\"true\")) {\n+                System.out.println(\"Userhash mismatch:\");\n+                pass = false;\n+            }\n+            if (!pass) {\n+                throw new RuntimeException(\"Test failed: checkUserHash\");\n+            }\n+        }\n+\n@@ -389,0 +493,2 @@\n+                    lastRequestedUser = findParameter(header, \"username\");\n+                    lastRequestedUserhash = findParameter(header, \"userhash\");\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/DigestAuth.java","additions":119,"deletions":13,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @run main\/othervm -Dhttp.auth.digest.validateServer=true DigestTest\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n@@ -31,3 +30,8 @@\n- * @run main\/othervm -Dhttp.auth.digest.validateServer=true\n-                     -Dtest.succeed=true DigestTest\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n+ *                   -Dhttp.auth.digest.validateServer=true DigestTest\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Dhttp.auth.digest.validateServer=true\n+ *                   -Dtest.succeed=true DigestTest\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n@@ -35,1 +39,1 @@\n-                     -Dtest.succeed=true DigestTest\n+ *                   -Dtest.succeed=true DigestTest\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/DigestTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,2 +30,3 @@\n- * @run main\/othervm NoNTLM\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true NoNTLM\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5 NoNTLM\n+ * @run main\/othervm -Dhttp.auth.digest.enabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true NoNTLM\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NoNTLM.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}