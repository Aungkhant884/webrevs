{"files":[{"patch":"@@ -227,0 +227,8 @@\n+\t<LI><P><B>{@systemProperty http.auth.digest.reEnabledAlgorithms}<\/B> (default: &lt;none&gt;)<BR>\n+        By default, certain message digest algorithms are disabled for use in HTTP Digest\n+        authentication due to their proven security limitations. This only applies to proxy\n+        authentication and plain-text HTTP server authentication. Disabled algorithms are still\n+        usable for HTTPS server authentication. The default list of disabled algorithms is specified\n+        in the {@code java.security} properties file and currently comprises {@code MD5} and\n+        {@code SHA-1}. If it is still required to use one of these algorithms, then they can be\n+        re-enabled by setting this property to a comma separated list of the algorithm names.<\/P>\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,6 @@\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.StandardCharsets;\n@@ -36,0 +42,2 @@\n+import java.security.Security;\n+import java.text.Normalizer;\n@@ -37,0 +45,3 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n@@ -39,0 +50,2 @@\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n@@ -43,0 +56,2 @@\n+import sun.security.util.KnownOIDs;\n+import sun.util.logging.PlatformLogger;\n@@ -60,1 +75,3 @@\n-    private static final String compatPropName = \"http.auth.digest.\" +\n+    private static final String propPrefix = \"http.auth.digest.\";\n+\n+    private static final String compatPropName = propPrefix +\n@@ -63,0 +80,26 @@\n+    \/\/ Takes a set and input string containing comma separated values. converts to upper\n+    \/\/ case, and trims each value, then applies given function to set and value\n+    \/\/ (either add or delete element from set)\n+    private static void processPropValue(String input,\n+        Set<String> theSet,\n+        BiConsumer<Set<String>,String> consumer)\n+    {\n+        if (input == null) {\n+            return;\n+        }\n+        String[] values = input.toUpperCase(Locale.ROOT).split(\",\");\n+        for (String v : values) {\n+            consumer.accept(theSet, v.trim());\n+        }\n+    }\n+\n+    private static final String secPropName =\n+        propPrefix + \"disabledAlgorithms\";\n+\n+    \/\/ A net property which overrides the disabled set above.\n+    private static final String enabledAlgPropName =\n+        propPrefix + \"reEnabledAlgorithms\";\n+\n+    \/\/ Set of disabled message digest algorithms\n+    private static final Set<String> disabledDigests;\n+\n@@ -66,0 +109,3 @@\n+    private static final PlatformLogger logger =\n+        HttpURLConnection.getHttpLogger();\n+\n@@ -69,5 +115,1 @@\n-            new PrivilegedAction<>() {\n-                public Boolean run() {\n-                    return NetProperties.getBoolean(compatPropName);\n-                }\n-            }\n+            (PrivilegedAction<Boolean>) () -> NetProperties.getBoolean(compatPropName)\n@@ -76,0 +118,18 @@\n+\n+        @SuppressWarnings(\"removal\")\n+        String secprops = AccessController.doPrivileged(\n+            (PrivilegedAction<String>) () -> Security.getProperty(secPropName)\n+        );\n+\n+        Set<String> algs = new HashSet<>();\n+\n+        \/\/ add the default insecure algorithms to set\n+        processPropValue(secprops, algs, (set, elem) -> set.add(elem));\n+\n+        @SuppressWarnings(\"removal\")\n+        String netprops = AccessController.doPrivileged(\n+            (PrivilegedAction<String>) () -> NetProperties.get(enabledAlgPropName)\n+        );\n+        \/\/ remove any algorithms from disabled set that were opted-in by user\n+        processPropValue(netprops, algs, (set, elem) -> set.remove(elem));\n+        disabledDigests = Set.copyOf(algs);\n@@ -93,0 +153,3 @@\n+        \/\/ Normally same as algorithm, but excludes the -SESS suffix if present\n+        private String digestName;\n+        private String charset;\n@@ -95,1 +158,7 @@\n-        \/\/ The H(A1) string used for MD5-sess\n+        \/\/ true if the server supports user hashing\n+        \/\/ in which case the username returned to server\n+        \/\/ will be H(unq(username) \":\" unq(realm))\n+        \/\/ meaning the username doesn't appear in the clear\n+        private boolean userhash;\n+\n+        \/\/ The H(A1) string used for XXX-sess\n@@ -115,0 +184,1 @@\n+            digestName = null;\n@@ -117,0 +187,1 @@\n+            charset = null;\n@@ -154,0 +225,18 @@\n+        synchronized boolean getUserhash() {\n+            return userhash;\n+        }\n+\n+        synchronized void setUserhash(boolean userhash) {\n+            this.userhash = userhash;\n+        }\n+\n+        synchronized Charset getCharset() {\n+            return \"UTF-8\".equals(charset)\n+                ? StandardCharsets.UTF_8\n+                : StandardCharsets.ISO_8859_1;\n+        }\n+\n+        synchronized void setCharset(String charset) {\n+            this.charset = charset;\n+        }\n+\n@@ -194,0 +283,3 @@\n+        synchronized String getDigestName () {\n+            return digestName;\n+        }\n@@ -195,0 +287,3 @@\n+        synchronized void setDigestName (String s) {\n+            this.digestName = s;\n+        }\n@@ -312,0 +407,10 @@\n+        params.setUserhash (Boolean.valueOf(p.findValue(\"userhash\")));\n+        String charset = p.findValue(\"charset\");\n+        if (charset == null) {\n+            charset = \"ISO_8859_1\";\n+        } else if (!charset.equalsIgnoreCase(\"UTF-8\")) {\n+            \/\/ UTF-8 is only valid value. ISO_8859_1 represents default behavior\n+            \/\/ when the parameter is not set.\n+            return false;\n+        }\n+        params.setCharset(charset.toUpperCase(Locale.ROOT));\n@@ -336,5 +441,3 @@\n-        String algorithm = p.findValue(\"algorithm\");\n-        if (algorithm == null || algorithm.isEmpty()) {\n-            algorithm = \"MD5\";  \/\/ The default, accoriding to rfc2069\n-        }\n-        params.setAlgorithm (algorithm);\n+\n+        if (!setAlgorithmNames(p, params))\n+            return false;\n@@ -359,0 +462,32 @@\n+    \/\/ Algorithm name is stored in two separate fields (of Paramaeters)\n+    \/\/ This allows for variations in digest algorithm name (aliases)\n+    \/\/ and also allow for the -sess variant defined in HTTP Digest protocol\n+    \/\/ returns false if algorithm not supported\n+    private static boolean setAlgorithmNames(HeaderParser p, Parameters params) {\n+        String algorithm = p.findValue(\"algorithm\");\n+        String digestName = algorithm;\n+        if (algorithm == null || algorithm.isEmpty()) {\n+            algorithm = \"MD5\";  \/\/ The default, accoriding to rfc2069\n+            digestName = \"MD5\";\n+        } else {\n+            algorithm = algorithm.toUpperCase(Locale.ROOT);\n+            digestName = algorithm;\n+        }\n+        if (algorithm.endsWith(\"-SESS\")) {\n+            digestName = algorithm.substring(0, algorithm.length() - 5);\n+            algorithm = digestName + \"-sess\"; \/\/ suffix lower case\n+        }\n+        if (digestName.equals(\"SHA-512-256\")) {\n+            digestName = \"SHA-512\/256\";\n+        }\n+        var oid = KnownOIDs.findMatch(digestName);\n+        if (oid == null) {\n+            log(\"unknown algorithm: \" + algorithm);\n+            return false;\n+        }\n+        digestName = oid.stdName();\n+        params.setAlgorithm (algorithm);\n+        params.setDigestName (digestName);\n+        return true;\n+    }\n+\n@@ -370,0 +505,8 @@\n+        String digest = params.getDigestName ();\n+        try {\n+            validateDigest(digest);\n+        } catch (IOException e) {\n+            return null;\n+        }\n+        Charset charset = params.getCharset();\n+        boolean userhash = params.getUserhash ();\n@@ -381,0 +524,2 @@\n+        boolean session = algorithm.endsWith (\"-sess\");\n+\n@@ -383,2 +528,4 @@\n-                                        method, uri, nonce, cnonce, ncstring);\n-        } catch (NoSuchAlgorithmException ex) {\n+                                        method, uri, nonce, cnonce, ncstring,\n+                                        digest, session, charset);\n+        } catch (CharacterCodingException | NoSuchAlgorithmException ex) {\n+            log(ex.getMessage());\n@@ -405,0 +552,12 @@\n+        String user = pw.getUserName();\n+        String userhashField = \"\";\n+        try {\n+            if (userhash) {\n+                user = computeUserhash(digest, user, realm, charset);\n+                userhashField = \", userhash=true\";\n+            }\n+        } catch (CharacterCodingException | NoSuchAlgorithmException ex) {\n+            log(ex.getMessage());\n+            return null;\n+        }\n+\n@@ -406,1 +565,1 @@\n-                        + \" username=\\\"\" + pw.getUserName()\n+                        + \" username=\\\"\" + user\n@@ -410,0 +569,1 @@\n+                        + userhashField\n@@ -430,0 +590,21 @@\n+    private static void log(String msg) {\n+        if (logger.isLoggable(PlatformLogger.Level.INFO)) {\n+            logger.info(msg);\n+        }\n+    }\n+\n+    private void validateDigest(String name) throws IOException {\n+        if (getAuthType() == AuthCacheValue.Type.Server &&\n+                getProtocolScheme().equals(\"https\")) {\n+            \/\/ HTTPS server authentication can use any algorithm\n+            return;\n+        }\n+        if (disabledDigests.contains(name)) {\n+            String msg = \"Rejecting digest authentication with insecure algorithm: \"\n+                + name;\n+            log(msg + \" This constraint may be relaxed by setting \" +\n+                     \"the \\\"http.auth.digest.reEnabledAlgorithms\\\" system property.\");\n+            throw new IOException(msg);\n+        }\n+    }\n+\n@@ -439,0 +620,3 @@\n+        String digest = params.getDigestName ();\n+        Charset charset = params.getCharset();\n+        validateDigest(digest);\n@@ -446,0 +630,5 @@\n+        boolean session = algorithm.endsWith (\"-SESS\");\n+        if (session) {\n+            algorithm = algorithm.substring(0, algorithm.length() - 5);\n+        }\n+\n@@ -447,1 +636,1 @@\n-            ncstring = Integer.toHexString (nccount).toUpperCase();\n+            ncstring = Integer.toHexString (nccount).toUpperCase(Locale.ROOT);\n@@ -453,2 +642,3 @@\n-            String expected = computeDigest(false, username,passwd,realm,\n-                                        method, uri, nonce, cnonce, ncstring);\n+            String expected = computeDigest(false, username,passwd,realm, method, uri,\n+                                           nonce, cnonce, ncstring, digest,\n+                                           session, charset);\n@@ -471,0 +661,2 @@\n+        } catch (CharacterCodingException ex) {\n+            throw new ProtocolException (\"Invalid characters in username or password\");\n@@ -474,0 +666,9 @@\n+    private String computeUserhash(String digest, String user,\n+                                   String realm, Charset charset)\n+        throws NoSuchAlgorithmException, CharacterCodingException\n+    {\n+        MessageDigest md = MessageDigest.getInstance(digest);\n+        String s = user + \":\" + realm;\n+        return encode(s, null, md, charset);\n+    }\n+\n@@ -478,2 +679,4 @@\n-                        String cnonce, String ncValue\n-                    ) throws NoSuchAlgorithmException\n+                        String cnonce, String ncValue,\n+                        String algorithm, boolean session,\n+                        Charset charset\n+                    ) throws NoSuchAlgorithmException, CharacterCodingException\n@@ -483,2 +686,0 @@\n-        String algorithm = params.getAlgorithm ();\n-        boolean md5sess = algorithm.equalsIgnoreCase (\"MD5-sess\");\n@@ -486,1 +687,1 @@\n-        MessageDigest md = MessageDigest.getInstance(md5sess?\"MD5\":algorithm);\n+        MessageDigest md = MessageDigest.getInstance(algorithm);\n@@ -488,1 +689,1 @@\n-        if (md5sess) {\n+        if (session) {\n@@ -491,1 +692,1 @@\n-                String s1 = encode (s, password, md);\n+                String s1 = encode (s, password, md, charset);\n@@ -493,1 +694,1 @@\n-                HashA1 = encode(A1, null, md);\n+                HashA1 = encode(A1, null, md, charset);\n@@ -498,1 +699,1 @@\n-            HashA1 = encode(A1, password, md);\n+            HashA1 = encode(A1, password, md, charset);\n@@ -507,1 +708,1 @@\n-        String HashA2 = encode(A2, null, md);\n+        String HashA2 = encode(A2, null, md, ISO_8859_1.INSTANCE);\n@@ -519,1 +720,1 @@\n-        finalHash = encode(combo, null, md);\n+        finalHash = encode(combo, null, md, ISO_8859_1.INSTANCE);\n@@ -533,2 +734,9 @@\n-    private String encode(String src, char[] passwd, MessageDigest md) {\n-        md.update(src.getBytes(ISO_8859_1.INSTANCE));\n+    private String encode(String src, char[] passwd, MessageDigest md, Charset charset)\n+        throws CharacterCodingException\n+    {\n+        boolean isUtf8 = charset.equals(StandardCharsets.UTF_8);\n+\n+        if (isUtf8) {\n+            src = Normalizer.normalize(src, Normalizer.Form.NFC);\n+        }\n+        md.update(src.getBytes(charset));\n@@ -536,3 +744,8 @@\n-            byte[] passwdBytes = new byte[passwd.length];\n-            for (int i=0; i<passwd.length; i++)\n-                passwdBytes[i] = (byte)passwd[i];\n+            byte[] passwdBytes;\n+            if (isUtf8) {\n+                passwdBytes = getUtf8Bytes(passwd);\n+            } else {\n+                passwdBytes = new byte[passwd.length];\n+                for (int i=0; i<passwd.length; i++)\n+                    passwdBytes[i] = (byte)passwd[i];\n+            }\n@@ -543,1 +756,0 @@\n-\n@@ -553,0 +765,11 @@\n+\n+    private static byte[] getUtf8Bytes(char[] passwd) throws CharacterCodingException {\n+        CharBuffer cb = CharBuffer.wrap(passwd);\n+        CharsetEncoder encoder = StandardCharsets.UTF_8.newEncoder();\n+        ByteBuffer bb = encoder.encode(cb);\n+        byte[] buf = new byte[bb.remaining()];\n+        bb.get(buf);\n+        if (bb.hasArray())\n+            Arrays.fill(bb.array(), bb.arrayOffset(), bb.capacity(), (byte)0);\n+        return buf;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":258,"deletions":35,"binary":false,"changes":293,"status":"modified"},{"patch":"@@ -704,0 +704,10 @@\n+#\n+# Disabled message digest algorithms for use with plaintext\n+# HTTP Digest authentication (java.net.HttpURLConnection).\n+# This includes HTTPS Digest authentication to proxies.\n+# This may be overridden by setting the networking (or system)\n+# property \"http.auth.digest.reEnabledAlgorithms\" to a comma\n+# separated list of algorithms to be allowed.\n+#\n+http.auth.digest.disabledAlgorithms = MD5, SHA-1\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm B4722333\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 B4722333\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4722333.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @run main\/othervm B4759514\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true B4759514\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 B4759514\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 -Djava.net.preferIPv6Addresses=true B4759514\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4759514.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,4 @@\n- * @run main\/othervm -Dhttp.nonProxyHosts=\"\" -Dhttp.auth.digest.validateProxy=true B6870935\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Dhttp.nonProxyHosts=\"\" -Dhttp.auth.digest.validateProxy=true B6870935\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n","filename":"test\/jdk\/java\/net\/Authenticator\/B6870935.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,3 +34,5 @@\n- * @run main\/othervm B8034170 unquoted\n- * @run main\/othervm -Dhttp.auth.digest.quoteParameters=true B8034170 quoted\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true B8034170 unquoted\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 B8034170 unquoted\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Dhttp.auth.digest.quoteParameters=true B8034170 quoted\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true B8034170 unquoted\n","filename":"test\/jdk\/java\/net\/Authenticator\/B8034170.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,4 +66,4 @@\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST SERVER\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST PROXY\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST PROXY305\n- * @run main\/othervm HTTPSetAuthenticatorTest DIGEST SERVER307\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST SERVER\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY305\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST SERVER307\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPSetAuthenticatorTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,4 +66,6 @@\n- * @run main\/othervm HTTPTest SERVER\n- * @run main\/othervm HTTPTest PROXY\n- * @run main\/othervm HTTPTest SERVER307\n- * @run main\/othervm HTTPTest PROXY305\n+ * @run main\/othervm -Dtest.debug=true -Dtest.digest.algorithm=SHA-512 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dtest.digest.algorithm=SHA-256 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest SERVER307\n+ * @run main\/othervm -Dtest.debug=true -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPTest PROXY305\n@@ -74,1 +76,0 @@\n-\n@@ -197,0 +198,4 @@\n+        String digestalg = System.getProperty(\"test.digest.algorithm\");\n+        if (digestalg == null || \"\".equals(digestalg))\n+            digestalg = \"MD5\";\n+\n@@ -208,1 +213,3 @@\n-                                          getHttpSchemeType());\n+                                          getHttpSchemeType(),\n+                                          null,\n+                                          digestalg);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTest.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -120,0 +120,10 @@\n+        return create(protocol, authType, auth, schemeType, null, \"MD5\");\n+    }\n+\n+    public static HTTPTestServer create(HttpProtocolType protocol,\n+                                        HttpAuthType authType,\n+                                        HttpTestAuthenticator auth,\n+                                        HttpSchemeType schemeType,\n+                                        HttpHandler delegate,\n+                                        String algorithm)\n+            throws IOException {\n@@ -125,1 +135,1 @@\n-                                             schemeType, delegate, \"\/\");\n+                                             schemeType, delegate, algorithm, \"\/\");\n@@ -330,0 +340,1 @@\n+                                        String algorithm,\n@@ -339,1 +350,1 @@\n-        server.configureAuthentication(ctxt, schemeType, auth, authType);\n+        server.configureAuthentication(ctxt, schemeType, auth, authType, algorithm);\n@@ -360,1 +371,1 @@\n-        server.configureAuthentication(ctxt, schemeType, auth, authType);\n+        server.configureAuthentication(ctxt, schemeType, auth, authType, null);\n@@ -388,1 +399,1 @@\n-                               auth, schemeType, targetDelegate, \"\/\");\n+                               auth, schemeType, targetDelegate, \"MD5\", \"\/\");\n@@ -434,1 +445,1 @@\n-                            HttpAuthType authType) {\n+                            HttpAuthType authType, String algorithm) {\n@@ -438,1 +449,1 @@\n-                ctxt.getFilters().add(new HttpDigestFilter(auth, authType));\n+                ctxt.getFilters().add(new HttpDigestFilter(auth, authType, algorithm));\n@@ -606,0 +617,1 @@\n+                                            String expectedAlgorithm,\n@@ -612,1 +624,6 @@\n-            boolean md5sess = algorithm.equalsIgnoreCase (\"MD5-sess\");\n+            if (algorithm.endsWith(\"-sess\")) {\n+                algorithm = algorithm.substring(0, algorithm.length() - 5);\n+            }\n+            if (!algorithm.equalsIgnoreCase(expectedAlgorithm)) {\n+                throw new IllegalArgumentException(\"unexpected algorithm\");\n+            }\n@@ -614,1 +631,1 @@\n-            MessageDigest md = MessageDigest.getInstance(md5sess?\"MD5\":algorithm);\n+            MessageDigest md = MessageDigest.getInstance(algorithm);\n@@ -779,1 +796,2 @@\n-        public HttpDigestFilter(HttpTestAuthenticator auth, HttpAuthType authType) {\n+        private final String algorithm;\n+        public HttpDigestFilter(HttpTestAuthenticator auth, HttpAuthType authType, String algorithm) {\n@@ -786,0 +804,1 @@\n+            this.algorithm = (algorithm == null) ? \"MD5\" : algorithm;\n@@ -793,1 +812,1 @@\n-                 + \"\\r\\n    qop=\\\"auth\\\",\"\n+                 + \"\\r\\n    qop=\\\"auth\\\", \" + \"algorithm=\\\"\" + algorithm + \"\\\", \"\n@@ -826,1 +845,1 @@\n-            if (!\"MD5\".equalsIgnoreCase(dg.getAlgorithm(\"MD5\"))) {\n+            if (!this.algorithm.equalsIgnoreCase(dg.getAlgorithm(\"MD5\"))) {\n@@ -857,1 +876,1 @@\n-            String response = DigestResponse.computeDigest(true, reqMethod, pw, dg);\n+            String response = DigestResponse.computeDigest(true, reqMethod, pw, algorithm, dg);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTestServer.java","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+\n@@ -37,0 +38,4 @@\n+import java.net.HttpURLConnection;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.nio.charset.StandardCharsets;\n@@ -38,0 +43,7 @@\n+import java.util.Map;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.Map.entry;\n@@ -41,1 +53,1 @@\n- * @bug 8138990\n+ * @bug 8138990 8281561\n@@ -46,9 +58,12 @@\n- * @run main\/othervm DigestAuth good\n- * @run main\/othervm DigestAuth only_nonce\n- * @run main\/othervm DigestAuth sha1\n- * @run main\/othervm DigestAuth no_header\n- * @run main\/othervm DigestAuth no_nonce\n- * @run main\/othervm DigestAuth no_qop\n- * @run main\/othervm DigestAuth invalid_alg\n- * @run main\/othervm DigestAuth validate_server\n- * @run main\/othervm DigestAuth validate_server_no_qop\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 DigestAuth validate_server_no_qop\n+ *\/\n+\n+\/*\n+ * The sha512-256-userhash case must be run manually. It needs to run with sudo as the\n+ * test must bind to port 80. You also need a modified JDK where\n+ * sun.net.www.protocol.http.DigestAuthentication.getCnonce\n+ * returns the hardcoded cnonce value below (normally it is chosen at random)\n+ *  \"NTg6RKcb9boFIAS3KrFK9BGeh+iDa\/sm6jUMp2wds69v\"\n+ * It can be run from the command line directly as follows:\n+ * sudo java -Djdk.net.hosts.file=hosts DigestAuth sha512-256-userhash port80\n+ * assuming you are running in the test source directory\n@@ -91,0 +106,22 @@\n+    static final String WWW_AUTH_HEADER_SHA256 = \"Digest \"\n+            + \"nonce=\\\"a69ae8a2e17c219bc6c118b673e93601616a6a\"\n+            + \"4d8fde3a19996748d77ad0464b\\\", qop=\\\"auth\\\", \"\n+            + \"opaque=\\\"efc62777cff802cb29252f626b041f381cd360\"\n+            + \"7187115871ca25e7b51a3757e9\\\", algorithm=SHA-256\";\n+\n+    static final String WWW_AUTH_HEADER_SHA512 = \"Digest \"\n+            + \"nonce=\\\"9aaa8d3ae53b54ce653a5d52d895afcd9c0e430\"\n+            + \"a17bdf98bb34235af84fba268d31376a63e0c39079b519\"\n+            + \"c14baa0429754266f35b62a47b9c8b5d3d36c638282\\\",\"\n+            + \" qop=\\\"auth\\\", opaque=\\\"28cdc6bae6c5dd7ec89dbf\"\n+            + \"af4d4f26b70f41ebbb83dc7af0950d6de016c40f412224\"\n+            + \"676cd45ebcf889a70e65a2b055a8b5232e50281272ba7c\"\n+            + \"67628cc3bb3492\\\", algorithm=SHA-512\";\n+\n+    static final String WWW_AUTH_HEADER_SHA_256_UHASH = \"Digest \"\n+            + \"realm=\\\"testrealm@host.com\\\", \"\n+            + \"qop=\\\"auth\\\", algorithm=SHA-256,\"\n+            + \"nonce=\\\"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\"\n+            + \"\/RVvkK\\\", opaque=\\\"HRPCssKJSGjCrkzDg8OhwpzCiGP\"\n+            + \"ChXYjwrI2QmXDnsOS\\\", charset=UTF-8, userhash=true\";\n+\n@@ -109,0 +146,28 @@\n+    \/\/ These two must be run manually with a modified JDK\n+    \/\/ that generates the exact cnonce given below.\n+    static final String SHA_512_256_FIRST = \"Digest \"\n+            + \"realm=\\\"api@example.org\\\", \"\n+            + \"qop=\\\"auth\\\", \"\n+            + \"algorithm=SHA-512-256, \"\n+            + \"nonce=\\\"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\/RVvkK\\\", \"\n+            + \"opaque=\\\"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\\\", \"\n+            + \"charset=UTF-8, \"\n+            + \"userhash=true \";\n+\n+    \/\/ Below taken from corrected version of RFC 7616\n+    static final Map<String,String> SHA_512_256_EXPECTED =\n+        Map.ofEntries(\n+            entry(\"username\", \"793263caabb707a56211940d90411ea4a575adeccb\"\n+                                + \"7e360aeb624ed06ece9b0b\"),\n+            entry(\"realm\", \"api@example.org\"),\n+            entry(\"uri\", \"\/doe.json\"),\n+            entry(\"algorithm\", \"SHA-512-256\"),\n+            entry(\"nonce\", \"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC\/RVvkK\"),\n+            entry(\"nc\", \"00000001\"),\n+            entry(\"cnonce\", \"NTg6RKcb9boFIAS3KrFK9BGeh+iDa\/sm6jUMp2wds69v\"),\n+            entry(\"qop\", \"auth\"),\n+            entry(\"response\", \"3798d4131c277846293534c3edc11bd8a5e4cdcbff78\"\n+                                + \"b05db9d95eeb1cec68a5\"),\n+            entry(\"opaque\", \"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\"),\n+            entry(\"userhash\", \"true\"));\n+\n@@ -110,0 +175,10 @@\n+        Logger l1 = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n+        Logger l2 = Logger.getLogger(\"com.sun.net.httpserver\");\n+        ConsoleHandler h1 = new ConsoleHandler();\n+        ConsoleHandler h2 = new ConsoleHandler();\n+        l1.setLevel(Level.ALL);\n+        l2.setLevel(Level.ALL);\n+        h1.setLevel(Level.ALL);\n+        h2.setLevel(Level.ALL);\n+        l1.addHandler(h1);\n+        l2.addHandler(h2);\n@@ -114,0 +189,2 @@\n+        System.out.println(\"Running test: \" + testcase);\n+        boolean usePort80 = args.length > 1 && args[1].equals(\"port80\");\n@@ -116,1 +193,1 @@\n-        try (LocalHttpServer server = LocalHttpServer.startServer()) {\n+        try (LocalHttpServer server = LocalHttpServer.startServer(usePort80)) {\n@@ -120,1 +197,0 @@\n-            Authenticator.setDefault(auth);\n@@ -126,0 +202,25 @@\n+                case \"sha512-256-userhash\":\n+                    auth = new AuthenticatorImpl(\"J\\u00e4s\\u00f8n Doe\", \"Secret, or not?\");\n+                    \/\/ file based name service must be used so domain\n+                    \/\/ below resolves to localhost\n+                    if (usePort80) {\n+                        url = \"http:\/\/api.example.org\/doe.json\";\n+                    } else {\n+                        url = \"http:\/\/api.example.org:\" + server.getPort() + \"\/doe.json\";\n+                    }\n+                    server.setWWWAuthHeader(SHA_512_256_FIRST);\n+                    server.setExpectedRequestParams(SHA_512_256_EXPECTED);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n+                case \"bad\":\n+                    \/\/ server returns a good WWW-Authenticate header with MD5\n+                    \/\/ but MD5 is disallowed by default\n+                    server.setWWWAuthHeader(GOOD_WWW_AUTH_HEADER);\n+                    success = testAuth(url, auth, EXPECT_FAILURE);\n+                    if (auth.lastRequestedPrompt == null ||\n+                            !auth.lastRequestedPrompt.equals(REALM)) {\n+                        System.out.println(\"Unexpected realm: \"\n+                                + auth.lastRequestedPrompt);\n+                        success = false;\n+                    }\n+                    break;\n@@ -204,1 +305,1 @@\n-                case \"sha1\":\n+                case \"sha1-good\":\n@@ -209,0 +310,25 @@\n+                case \"sha1-bad\":\n+                    \/\/ server returns a WWW-Authenticate header with SHA-1\n+                    \/\/ but SHA-1 disabled\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA1);\n+                    success = testAuth(url, auth, EXPECT_FAILURE);\n+                    break;\n+                case \"sha256\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-256\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA256);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n+                case \"sha512\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-512\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA512);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    break;\n+                case \"sha256-userhash\":\n+                    \/\/ server returns a good WWW-Authenticate header with SHA-256\n+                    \/\/ also sets the userhash=true parameter\n+                    server.setWWWAuthHeader(WWW_AUTH_HEADER_SHA_256_UHASH);\n+                    success = testAuth(url, auth, EXPECT_DIGEST);\n+                    \/\/ make sure the userhash parameter was set correctly\n+                    \/\/ and the username itself is the correct hash\n+                    server.checkUserHash(getUserHash(\"SHA-256\", \"Mufasa\", REALM));\n+                    break;\n@@ -254,1 +380,1 @@\n-            load(url);\n+            load(url, auth);\n@@ -279,2 +405,3 @@\n-    static void load(String url) throws IOException {\n-        URLConnection conn = new URL(url).openConnection();\n+    static void load(String url, Authenticator auth) throws IOException {\n+        HttpURLConnection conn = (HttpURLConnection)(new URL(url).openConnection());\n+        conn.setAuthenticator(auth);\n@@ -295,0 +422,18 @@\n+    public static String getUserHash(String alg, String user, String realm) {\n+        try {\n+            MessageDigest md = MessageDigest.getInstance(alg);\n+            String msg = user + \":\" + realm;\n+            \/\/String msg = \"Mufasa:testrealm@host.com\";\n+            byte[] output = md.digest(msg.getBytes(StandardCharsets.ISO_8859_1));\n+            StringBuilder sb = new StringBuilder();\n+            for (int i=0; i<output.length; i++) {\n+                String s1 = Integer.toHexString(output[i] & 0xf);\n+                String s2 = Integer.toHexString(Byte.toUnsignedInt(output[i]) >>> 4);\n+                sb.append(s2).append(s1);\n+            }\n+            return sb.toString();\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -300,0 +445,11 @@\n+        private final String user, pass;\n+\n+        AuthenticatorImpl() {\n+            this(\"Mufasa\", \"Circle Of Life\");\n+        }\n+\n+        AuthenticatorImpl(String user, String pass) {\n+            this.user = user;\n+            this.pass = pass;\n+        }\n+\n@@ -306,3 +462,1 @@\n-\n-            return new PasswordAuthentication(\"Mufasa\",\n-                    \"Circle Of Life\".toCharArray());\n+            return new PasswordAuthentication(user, pass.toCharArray());\n@@ -319,0 +473,3 @@\n+        private volatile String lastRequestedUser;\n+        private volatile String lastRequestedUserhash;\n+        private volatile Map<String,String> expectedParams;\n@@ -338,0 +495,4 @@\n+        void setExpectedRequestParams(Map<String,String> params) {\n+            this.expectedParams = params;\n+        }\n+\n@@ -342,1 +503,32 @@\n-        static LocalHttpServer startServer() throws IOException {\n+        void checkUserHash(String expectedUser) {\n+            boolean pass = true;\n+            if (!expectedUser.equals(lastRequestedUser)) {\n+                System.out.println(\"Username mismatch:\");\n+                System.out.println(\"Expected: \" + expectedUser);\n+                System.out.println(\"Received: \" + lastRequestedUser);\n+                pass = false;\n+            }\n+            if (!lastRequestedUserhash.equalsIgnoreCase(\"true\")) {\n+                System.out.println(\"Userhash mismatch:\");\n+                pass = false;\n+            }\n+            if (!pass) {\n+                throw new RuntimeException(\"Test failed: checkUserHash\");\n+            }\n+        }\n+\n+        void checkExpectedParams(String header) {\n+            if (expectedParams == null)\n+                return;\n+            expectedParams.forEach((name, value) -> {\n+                String rxValue = findParameter(header, name);\n+                if (!rxValue.equalsIgnoreCase(value)) {\n+                    throw new RuntimeException(\"value mismatch \"\n+                        + \"name = \" + name + \" (\" + rxValue + \"\/\"\n+                        + value + \")\");\n+                }\n+            });\n+        }\n+\n+        static LocalHttpServer startServer(boolean usePort80) throws IOException {\n+            int port = usePort80 ? 80 : 0;\n@@ -345,1 +537,1 @@\n-                    new InetSocketAddress(loopback, 0), 0);\n+                    new InetSocketAddress(loopback, port), 0);\n@@ -354,0 +546,1 @@\n+            server.createContext(\"\/\", this);\n@@ -388,0 +581,1 @@\n+                    checkExpectedParams(header);\n@@ -389,0 +583,2 @@\n+                    lastRequestedUser = findParameter(header, \"username\");\n+                    lastRequestedUserhash = findParameter(header, \"userhash\");\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/DigestAuth.java","additions":218,"deletions":22,"binary":false,"changes":240,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+127.0.0.1 api.example.org\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/hosts","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -28,2 +28,1 @@\n- * @run main\/othervm -Dhttp.auth.digest.validateServer=true DigestTest\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n@@ -31,3 +30,8 @@\n- * @run main\/othervm -Dhttp.auth.digest.validateServer=true\n-                     -Dtest.succeed=true DigestTest\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n+ *                   -Dhttp.auth.digest.validateServer=true DigestTest\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Dhttp.auth.digest.validateServer=true\n+ *                   -Dtest.succeed=true DigestTest\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true\n@@ -35,1 +39,1 @@\n-                     -Dtest.succeed=true DigestTest\n+ *                   -Dtest.succeed=true DigestTest\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/DigestTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,2 +30,3 @@\n- * @run main\/othervm NoNTLM\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true NoNTLM\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 NoNTLM\n+ * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5\n+ *                   -Djava.net.preferIPv6Addresses=true NoNTLM\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NoNTLM.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}