{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Arrays;\n@@ -68,0 +69,1 @@\n+    private DisplayMode initialMode;\n@@ -71,0 +73,1 @@\n+        this.initialMode = getDisplayMode();\n@@ -204,0 +207,1 @@\n+        initialMode = device.initialMode;\n@@ -309,0 +313,13 @@\n+    \/* If the modes are the same or the only difference is that\n+     * the new mode will match any refresh rate, no need to change.\n+     *\/\n+    private boolean isSameMode(final DisplayMode newMode,\n+                               final DisplayMode oldMode) {\n+\n+        return (Objects.equals(newMode, oldMode) ||\n+                (newMode.getRefreshRate() == DisplayMode.REFRESH_RATE_UNKNOWN &&\n+                 newMode.getWidth() == oldMode.getWidth() &&\n+                 newMode.getHeight() == oldMode.getHeight() &&\n+                 newMode.getBitDepth() == oldMode.getBitDepth()));\n+    }\n+\n@@ -314,3 +331,23 @@\n-        if (!Objects.equals(dm, getDisplayMode())) {\n-            nativeSetDisplayMode(displayID, dm.getWidth(), dm.getHeight(),\n-                                 dm.getBitDepth(), dm.getRefreshRate());\n+        if (!isSameMode(dm, getDisplayMode())) {\n+            try {\n+                nativeSetDisplayMode(displayID, dm.getWidth(), dm.getHeight(),\n+                                    dm.getBitDepth(), dm.getRefreshRate());\n+            } catch (Throwable t) {\n+                \/* In some cases macOS doesn't report the initial mode\n+                 * in the list of supported modes.\n+                 * If trying to reset to that mode causes an exception\n+                 * try one more time to reset using a different API.\n+                 * This does not fix everything, such as it doesn't make\n+                 * that mode reported and it restores all devices, but\n+                 * this seems a better compromise than failing to restore\n+                 *\/\n+                if (isSameMode(dm, initialMode)) {\n+                    nativeResetDisplayMode();\n+                    if (!isSameMode(initialMode, getDisplayMode())) {\n+                        throw new IllegalArgumentException(\n+                            \"Could not reset to initial mode\");\n+                    }\n+                } else {\n+                   throw t;\n+                }\n+            }\n@@ -327,1 +364,16 @@\n-        return nativeGetDisplayModes(displayID);\n+        DisplayMode[] nativeModes = nativeGetDisplayModes(displayID);\n+        boolean match = false;\n+        for (DisplayMode mode : nativeModes) {\n+            if (initialMode.equals(mode)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        if (match) {\n+            return nativeModes;\n+        } else {\n+          int len = nativeModes.length;\n+          DisplayMode[] modes = Arrays.copyOf(nativeModes, len+1, DisplayMode[].class);\n+          modes[len] = initialMode;\n+          return modes; \n+        }\n@@ -347,0 +399,2 @@\n+    private static native void nativeResetDisplayMode();\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":58,"deletions":4,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -264,0 +264,12 @@\n+\/*\n+ * Class:     sun_awt_CGraphicsDevice\n+ * Method:    nativeResetDisplayMode\n+ * Signature: ()V\n+ *\/\n+JNIEXPORT void JNICALL\n+Java_sun_awt_CGraphicsDevice_nativeResetDisplayMode\n+(JNIEnv *env, jclass class)\n+{\n+    CGRestorePermanentDisplayConfiguration();\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8267430\n+ * @key headful\n+ * @summary verify setting a display mode with unknow refresh rate works\n+ *\/\n+\n+import java.awt.DisplayMode;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+\n+public class UnknownRefrshRateTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] devices = ge.getScreenDevices();\n+\n+        for (GraphicsDevice d : devices) {\n+\n+            if (!d.isDisplayChangeSupported()) {\n+                continue;\n+            }\n+            DisplayMode odm = d.getDisplayMode();\n+            System.out.println(\"device=\" + d + \" original mode=\" + odm);\n+\n+            DisplayMode[] modes = d.getDisplayModes();\n+            System.out.println(\"There are \" + modes.length + \" modes.\");\n+            try {\n+                for (int i=0; i<modes.length; i++) {\n+                    DisplayMode mode = modes[i];\n+                    System.out.println(\"copying from mode \" + i + \" : \" + mode);\n+                    int w = mode.getWidth();\n+                    int h = mode.getHeight();\n+                    int bpp = mode.getBitDepth();\n+                    int refRate = DisplayMode.REFRESH_RATE_UNKNOWN;\n+                    DisplayMode newMode = new DisplayMode(w, h, bpp, refRate);\n+                    d.setDisplayMode(newMode);\n+                    Thread.sleep(2000);\n+                    System.out.println(\"set \" + d.getDisplayMode());\n+                 }\n+             } finally {\n+                 System.out.println(\"restoring original mode\"+odm);\n+                 d.setDisplayMode(odm);\n+             }\n+       }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GraphicsDevice\/DisplayModes\/UnknownRefrshRateTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}