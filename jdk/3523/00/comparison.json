{"files":[{"patch":"@@ -179,1 +179,6 @@\n-    public static final int ANONCONSTR   = 1<<29;\n+    public static final int ANONCONSTR   = 1<<29; \/\/non-class members\n+\n+    \/**\n+     * Flag to indicate the super classes of this ClassSymbol has been attributed.\n+     *\/\n+    public static final int SUPER_OWNER_ATTRIBUTED = 1<<29; \/\/ClassSymbols\n@@ -383,0 +388,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5092,1 +5092,2 @@\n-        if ((c.flags_field & Flags.COMPOUND) == 0) {\n+        if ((c.flags_field & Flags.COMPOUND) == 0 &&\n+            (c.flags_field & Flags.SUPER_OWNER_ATTRIBUTED) == 0) {\n@@ -5100,0 +5101,2 @@\n+\n+            c.flags_field |= Flags.SUPER_OWNER_ATTRIBUTED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2250,1 +2250,1 @@\n-        List<Symbol> seenClasses = List.nil();\n+        Set<Symbol> seenClasses = new HashSet<>();\n@@ -2269,1 +2269,1 @@\n-            } else {\n+            } else if (sym == null || sym.kind != PCK) {\n@@ -2318,1 +2318,1 @@\n-                    seenClasses = seenClasses.prepend(c);\n+                    seenClasses.add(c);\n@@ -2341,1 +2341,1 @@\n-                    seenClasses = seenClasses.tail;\n+                    seenClasses.remove(c);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8263452\n+ * @summary Verify javac does not need a long time to process sources with deep class nesting\n+ *          and deep inheritance hierarchies.\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.util.Arrays;\n+import javax.tools.JavaCompiler;\n+import javax.tools.ToolProvider;\n+\n+import com.sun.source.util.JavacTask;\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+\n+public class SuperClassAndNesting {\n+\n+    private static final int SIZE = 100;\n+\n+    public static void main(String... args) throws IOException {\n+        new SuperClassAndNesting().run();\n+    }\n+\n+    void run() throws IOException {\n+        compileTestClass(generateTestClass(SIZE));\n+    }\n+\n+    String generateTestClass(int depth) {\n+        StringBuilder clazz = new StringBuilder();\n+        clazz.append(\"\"\"\n+                     class Test {\n+                     class T0 extends java.util.ArrayList {\n+                     \"\"\");\n+        for (int i = 1; i < depth; i++) {\n+            clazz.append(\"class T\" + i + \" extends T\" + (i - 1) + \" {\\n\");\n+        }\n+        for (int i = 0; i < depth; i++) {\n+            clazz.append(\"}\\n\");\n+        }\n+        clazz.append(\"}\\n\");\n+        return clazz.toString();\n+    }\n+\n+    void compileTestClass(String code) throws IOException {\n+        final JavaCompiler tool = ToolProvider.getSystemJavaCompiler();\n+        assert tool != null;\n+\n+        JavacTask ct = (JavacTask) tool.getTask(null, null, null,\n+            null, null, Arrays.asList(new MyFileObject(code)));\n+        ct.analyze();\n+    }\n+\n+    static class MyFileObject extends SimpleJavaFileObject {\n+        private final String text;\n+\n+        public MyFileObject(String text) {\n+            super(URI.create(\"myfo:\/Test.java\"), JavaFileObject.Kind.SOURCE);\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+            return text;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/perf\/SuperClassAndNesting.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}