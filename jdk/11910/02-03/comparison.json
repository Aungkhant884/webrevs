{"files":[{"patch":"@@ -94,1 +94,1 @@\n-    public class ClientFactory extends SslRMIClientSocketFactory {\n+    public static class ClientFactory extends SslRMIClientSocketFactory {\n@@ -107,1 +107,1 @@\n-    public class ServerFactory extends SslRMIServerSocketFactory {\n+    public static class ServerFactory extends SslRMIServerSocketFactory {\n@@ -133,1 +133,1 @@\n-    public void run(RMIServerSocketFactory serverFactory, boolean expectException) {\n+    public void testRmiCommunication(RMIServerSocketFactory serverFactory, boolean expectException) {\n@@ -166,1 +166,2 @@\n-    public void runTest(String[] args) {\n+    public void runTest(int testNumber) {\n+        System.out.println(\"Running test \" + testNumber);\n@@ -168,3 +169,1 @@\n-        int test = Integer.parseInt(args[0]);\n-\n-        switch (test) {\n+        switch (testNumber) {\n@@ -172,1 +171,1 @@\n-            case 1 -> run(new ServerFactory(), false);\n+            case 1 -> testRmiCommunication(new ServerFactory(), false);\n@@ -175,1 +174,1 @@\n-            case 2 -> run(new ServerFactory(null, null, false), false);\n+            case 2 -> testRmiCommunication(new ServerFactory(null, null, false), false);\n@@ -178,1 +177,1 @@\n-            case 3 -> run(new ServerFactory(null, null, null, true), false);\n+            case 3 -> testRmiCommunication(new ServerFactory(null, null, null, true), false);\n@@ -181,16 +180,2 @@\n-            case 4 -> {\n-                try {\n-                    new ServerFactory(SSLContext.getDefault(),\n-                            new String[]{\"dummy_ciphersuite\"}, null, false);\n-                    throw new RuntimeException(\n-                            \"The expected exception for unsupported ciphersuite was not thrown.\");\n-                } catch (NoSuchAlgorithmException exc) {\n-                    throw new RuntimeException(\"Could not create SSLContext.\", exc);\n-                } catch (IllegalArgumentException exc) {\n-                    \/\/ expecting the exception for unsupported ciphersuite,\n-                    \/\/ anything else is an error\n-                    if (!exc.getMessage().toLowerCase().contains(\"unsupported ciphersuite\")) {\n-                        throw exc;\n-                    }\n-                }\n-            }\n+            case 4 ->\n+                testServerFactory(new String[]{\"dummy_ciphersuite\"}, null, \"unsupported ciphersuite\");\n@@ -199,14 +184,2 @@\n-            case 5 -> {\n-                try {\n-                    new ServerFactory(null,\n-                            new String[]{\"dummy_protocol\"}, false);\n-                    throw new RuntimeException(\n-                            \"The expected exception for unsupported protocol was not thrown.\");\n-                } catch (IllegalArgumentException exc) {\n-                    \/\/ expecting the exception for unsupported protocol,\n-                    \/\/ anything else is an error\n-                    if (!exc.getMessage().toLowerCase().contains(\"unsupported protocol\")) {\n-                        throw exc;\n-                    }\n-                }\n-            }\n+            case 5 ->\n+                testServerFactory(null, new String[]{\"dummy_protocol\"}, \"unsupported protocol\");\n@@ -218,1 +191,1 @@\n-                run(new ServerFactory(), true);\n+                testRmiCommunication(new ServerFactory(), true);\n@@ -225,1 +198,21 @@\n-                run(new ServerFactory(), true);\n+                testRmiCommunication(new ServerFactory(), true);\n+            }\n+\n+            default ->\n+                    throw new RuntimeException(\"Unknown test number: \" + testNumber);\n+        }\n+    }\n+\n+    private static void testServerFactory(String[] cipherSuites, String[] protocol, String expectedMessage) {\n+        try {\n+            new ServerFactory(SSLContext.getDefault(),\n+                    cipherSuites, protocol, false);\n+            throw new RuntimeException(\n+                    \"The expected exception for \"+ expectedMessage + \" was not thrown.\");\n+        } catch (NoSuchAlgorithmException exc) {\n+            throw new RuntimeException(\"Could not create SSLContext.\", exc);\n+        } catch (IllegalArgumentException exc) {\n+            \/\/ expecting the exception for unsupported ciphersuite,\n+            \/\/ anything else is an error\n+            if (!exc.getMessage().toLowerCase().contains(expectedMessage)) {\n+                throw exc;\n@@ -234,1 +227,1 @@\n-            File.separator + \"keystore\";\n+                File.separator + \"keystore\";\n@@ -242,1 +235,1 @@\n-            File.separator + \"truststore\";\n+                File.separator + \"truststore\";\n@@ -247,4 +240,10 @@\n-        \/\/ Run test\n-        \/\/\n-        SSLSocketParametersTest test = new SSLSocketParametersTest();\n-        test.runTest(args);\n+        try {\n+            SSLSocketParametersTest test = new SSLSocketParametersTest();\n+            test.runTest(Integer.parseInt(args[0]));\n+        } catch (Exception exc) {\n+            \/\/ an exception may be thrown trying to unexport RMI object\n+            \/\/ in which case we want to explicitly call System.exit to\n+            \/\/ make sure the JVM exits.\n+            exc.printStackTrace(System.err);\n+            System.exit(1);\n+        }\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.java","additions":47,"deletions":48,"binary":false,"changes":95,"status":"modified"}]}