{"files":[{"patch":"@@ -2431,1 +2431,1 @@\n-      emit_int32(offs - long_size);\n+      emit_int32((int)(offs - long_size));\n@@ -2485,1 +2485,1 @@\n-      emit_int32(offs - long_size);\n+      emit_int32((int)(offs - long_size));\n@@ -6361,1 +6361,1 @@\n-    emit_int32(offset - 6); \/\/ 2 opcode + 4 address\n+    emit_int32((int)(offset - 6)); \/\/ 2 opcode + 4 address\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-  enum Condition {                     \/\/ The x86 condition codes used for conditional jumps\/moves.\n+  enum Condition : uint8_t {                     \/\/ The x86 condition codes used for conditional jumps\/moves.\n@@ -481,1 +481,1 @@\n-  enum Prefix {\n+  enum Prefix : uint8_t {\n@@ -516,1 +516,1 @@\n-  enum VexPrefix {\n+  enum VexPrefix : uint8_t {\n@@ -523,1 +523,1 @@\n-  enum ExexPrefix {\n+  enum ExexPrefix : uint8_t {\n@@ -531,1 +531,1 @@\n-  enum VexSimdPrefix {\n+  enum VexSimdPrefix : uint8_t {\n@@ -538,1 +538,1 @@\n-  enum VexOpcode {\n+  enum VexOpcode : uint8_t {\n@@ -546,1 +546,1 @@\n-  enum AvxVectorLen {\n+  enum AvxVectorLen : uint8_t {\n@@ -553,1 +553,1 @@\n-  enum EvexTupleType {\n+  enum EvexTupleType : uint8_t {\n@@ -570,1 +570,1 @@\n-  enum EvexInputSizeInBits {\n+  enum EvexInputSizeInBits : uint8_t {\n@@ -606,1 +606,1 @@\n-  enum ComparisonPredicateFP {\n+  enum ComparisonPredicateFP : uint8_t {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+#include <limits>\n+\n@@ -293,0 +295,2 @@\n+  constexpr uint8_t cast(int x) const { return checked_cast<uint8_t>(x); }\n+\n@@ -301,1 +305,2 @@\n-  void emit_int8(   uint32_t x1)                                    { code_section()->emit_int8(checked_cast<uint8_t>(x1)); }\n+  void emit_int8(uint8_t v) { code_section()->emit_int8(v); }\n+  void emit_int8(int v)     { emit_int8(cast(v)); }\n@@ -303,3 +308,2 @@\n-  void emit_int16(  uint32_t x)                                     { code_section()->emit_int16(checked_cast<uint16_t>(x)); }\n-  void emit_int16(  uint32_t x1, uint32_t x2)                       { code_section()->emit_int16(checked_cast<uint8_t>(x1),\n-                                                                                                 checked_cast<uint8_t>(x2)); }\n+  void emit_int16(uint16_t x)   { code_section()->emit_int16(x); }\n+  void emit_int16(int x)        { emit_int16(checked_cast<uint16_t>(x)); }\n@@ -307,3 +311,2 @@\n-  void emit_int24(  uint32_t x1, uint32_t x2, uint32_t x3)          { code_section()->emit_int24(checked_cast<uint8_t>(x1),\n-                                                                                                 checked_cast<uint8_t>(x2),\n-                                                                                                 checked_cast<uint8_t>(x3)); }\n+  void emit_int16(int x1, int x2)                                  { code_section()->emit_int16(cast(x1), cast(x2)); }\n+  void emit_int24(int x1, int x2, int x3)                          { code_section()->emit_int24(cast(x1), cast(x2), cast(x3)); }\n@@ -311,5 +314,2 @@\n-  void emit_int32(  uint64_t x)                                     { code_section()->emit_int32(checked_cast<uint32_t>(x)); }\n-  void emit_int32(  uint32_t x1, uint32_t x2, uint32_t x3, uint32_t x4) { code_section()->emit_int32(checked_cast<uint8_t>(x1),\n-                                                                                                     checked_cast<uint8_t>(x2),\n-                                                                                                     checked_cast<uint8_t>(x3),\n-                                                                                                     checked_cast<uint8_t>(x4)); }\n+  void emit_int32(uint32_t x)                                      { code_section()->emit_int32(x); }\n+  void emit_int32(int x1, int x2, int x3, int x4)                  { code_section()->emit_int32(cast(x1), cast(x2), cast(x3), cast(x4)); }\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -517,1 +518,1 @@\n-\/\/ fits within the size of the type cast to, and tolerates sign extension.\n+\/\/ fits within the size of the type cast to, and tolerates -1\n@@ -520,1 +521,1 @@\n-template <typename T2, typename T1>\n+template <typename T2, typename T1, ENABLE_IF(std::is_signed<T1>::value)>\n@@ -522,8 +523,14 @@\n-#ifdef ASSERT\n-  typedef typename std::make_signed<T1>::type S1;\n-  S1 test = static_cast<S1>(thing);\n-  S1 max = std::numeric_limits<T2>::max();\n-  S1 min = (std::is_signed<T2>::value) ? std::numeric_limits<T2>::min() : -(max - 1);\n-  assert(test <= max && test >= min, \"out of range of destination type\");\n-#endif\n-  return static_cast<T2>(thing);\n+  if (!std::is_signed<T2>::value && thing == -1) {\n+    return std::numeric_limits<T2>::max();\n+  } else {\n+    T2 result = static_cast<T2>(thing);\n+    assert(static_cast<T1>(result) == thing, \"must be\");\n+    return result;\n+  }\n+}\n+\n+template <typename T2, typename T1, ENABLE_IF(!std::is_signed<T1>::value)>\n+constexpr T2 checked_cast(T1 thing) {\n+  T2 result = static_cast<T2>(thing);\n+  assert(static_cast<T1>(result) == thing, \"must be\");\n+  return result;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"}]}