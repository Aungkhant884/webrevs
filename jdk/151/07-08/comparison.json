{"files":[{"patch":"@@ -49,1 +49,0 @@\n- private:\n@@ -51,1 +50,4 @@\n-  HandshakeOperation(AsyncHandshakeClosure* cl, JavaThread* target, jlong start_ns) {};\n+  HandshakeOperation(AsyncHandshakeClosure* cl, JavaThread* target) :\n+    _handshake_cl(cl),\n+    _pending_threads(1),\n+    _target(target) {}\n@@ -202,1 +204,1 @@\n-static void log_handshake_info(jlong start_time_ns, const char* name, int targets, int non_self_executed, const char* extra = NULL) {\n+static void log_handshake_info(jlong start_time_ns, const char* name, int targets, int emitted_handshakes_executed, const char* extra = NULL) {\n@@ -207,1 +209,1 @@\n-                        non_self_executed,\n+                        emitted_handshakes_executed,\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  \/\/ Set to the thread executing the handshake operation during the execution.\n+  \/\/ Set to the thread executing the handshake operation.\n@@ -100,1 +100,1 @@\n-  \/\/ Both _queue and _lock must be check. If a thread have seen this _handshakee\n+  \/\/ Both _queue and _lock must be checked. If a thread has seen this _handshakee\n@@ -103,5 +103,4 @@\n-  \/\/ possible to the queue to be seen as empty by _handshakee but as non-empty\n-  \/\/ by the thread executing in the loop. To avoid the _handshakee eliding\n-  \/\/ stopping while handshake operations are being executed, the _handshakee\n-  \/\/ must take slow if _lock is held and make sure the queue is empty otherwise\n-  \/\/ try process it.\n+  \/\/ possible for the queue to be seen as empty by _handshakee but as non-empty\n+  \/\/ by the thread executing in the loop. To avoid the _handshakee continuing\n+  \/\/ while handshake operations are being executed, the _handshakee\n+  \/\/ must take slow path, process_by_self(), if _lock is held.\n","filename":"src\/hotspot\/share\/runtime\/handshake.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-\/\/ The skipping is controlled by using a filter when poping.\n-\/\/ It also supports lock free pushes, while poping (including contain())\n+\/\/ The skipping is controlled by using a filter when popping.\n+\/\/ It also supports lock free pushes, while popping (including contains())\n@@ -63,2 +63,2 @@\n-  \/\/ true and then return false, or there is no more items and then returns\n-  \/\/ false. Any pushed item while executing may or may not have match_func\n+  \/\/ true and then returns true, or there is no more items and then returns\n+  \/\/ false. Items pushed after execution starts will not have match_func\n@@ -66,1 +66,1 @@\n-  \/\/ exclusive other contains and pops calls.\n+  \/\/ exclusive to other contains and pops calls.\n@@ -76,5 +76,6 @@\n-  \/\/ Applies the match_func to all items in the queue returns the item which\n-  \/\/ match_func return true for and was inserted first. Any pushed item while\n-  \/\/ executing may or may not have be popped, if popped it was the first\n-  \/\/ inserted match. The method is not re-entrant and must be executed mutual\n-  \/\/ exclusive with other contains and pops calls.\n+  \/\/ Applies the match_func to each item in the queue and returns the first\n+  \/\/ inserted item for which match_func returns true. Returns false if there are\n+  \/\/ no matches or the queue is empty. Any pushed item before execution is\n+  \/\/ complete may or may not have match_func applied. The method is not\n+  \/\/ re-entrant and must be executed mutual exclusive to other contains and pops\n+  \/\/ calls.\n","filename":"src\/hotspot\/share\/utilities\/filterQueue.hpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}