{"files":[{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.module;\n-\n-import java.lang.module.FindException;\n-\n-public class FinderUnsupportedModuleException extends FindException {\n-\n-    @java.io.Serial\n-    private static final long serialVersionUID = 3585886355016084132L;\n-\n-    private final int majorVersion;\n-    private final int minorVersion;\n-\n-    public FinderUnsupportedModuleException(int major, int minor) {\n-        super(\"Unsupported major.minor version: \" + major + \".\" + minor);\n-        majorVersion = major;\n-        minorVersion = minor;\n-    }\n-\n-    public int getMajorVersion() {\n-        return majorVersion;\n-    }\n-\n-    public int getMinorVersion() {\n-        return minorVersion;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/FinderUnsupportedModuleException.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -192,1 +192,2 @@\n-            throw unsupportedModuleDescriptor(major_version, minor_version);\n+            throw invalidModuleDescriptor(\"Unsupported major.minor version \"\n+                                          + major_version + \".\" + minor_version);\n@@ -1098,9 +1099,0 @@\n-    \/**\n-     * Returns an UnsupportedModuleVersionException with a detail message to\n-     * indicate the unsupported major\/minor version.\n-     *\/\n-    private static UnsupportedModuleVersionException\n-    unsupportedModuleDescriptor(int major, int minor) {\n-        return new UnsupportedModuleVersionException(major, minor);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -348,2 +348,1 @@\n-        } catch (UnsupportedModuleVersionException e) {\n-            throw new FinderUnsupportedModuleException(e.getMajorVersion(), e.getMinorVersion());\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePath.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.module;\n-\n-import java.lang.module.InvalidModuleDescriptorException;\n-\n-\/**\n- * Thrown when reading a module descriptor and the module is found to be\n- * unsupported by the runtime environment.\n- *\/\n-public class UnsupportedModuleVersionException extends InvalidModuleDescriptorException  {\n-\n-    private static final long serialVersionUID = -2561678827440031030L;\n-    private final int major_version;\n-    private final int minor_version;\n-\n-    public UnsupportedModuleVersionException(int major, int minor){\n-        super(\"Unsupported major.minor version: \" + major + \".\" + minor);\n-        major_version = major;\n-        minor_version = minor;\n-    }\n-\n-    public int getMajorVersion() {\n-        return major_version;\n-    }\n-\n-    public int getMinorVersion() {\n-        return minor_version;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/UnsupportedModuleVersionException.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.internal.module.FinderUnsupportedModuleException;\n@@ -233,2 +232,2 @@\n-                                            remaining.stream().collect(Collectors.joining(\" \")))\n-                                .showUsage(true);\n+                        remaining.stream().collect(Collectors.joining(\" \")))\n+                        .showUsage(true);\n@@ -263,2 +262,2 @@\n-                     throw taskHelper.newBadArgs(\"err.modulepath.must.be.specified\")\n-                                 .showUsage(true);\n+                    throw taskHelper.newBadArgs(\"err.modulepath.must.be.specified\")\n+                            .showUsage(true);\n@@ -279,0 +278,4 @@\n+        } catch (FindException e) {\n+            log.println(taskHelper.getMessage(\"err.prefix\") + \" \" + e.getMessage());\n+            e.printStackTrace(log);\n+            return EXIT_ERROR;\n@@ -280,1 +283,1 @@\n-                 UncheckedIOException |IOException | FindException | ResolutionException e) {\n+                 UncheckedIOException |IOException | ResolutionException e) {\n@@ -440,19 +443,18 @@\n-        try {\n-            if (finder.find(\"java.base\").isPresent()) {\n-                \/\/ use the version of java.base module, if present, as\n-                \/\/ the release version for multi-release JAR files\n-                ModuleDescriptor.Version v = finder.find(\"java.base\").get()\n-                        .descriptor().version().orElseThrow(() ->\n-                                new IllegalArgumentException(\"No version in java.base descriptor\")\n-                        );\n-\n-                \/\/ java.base version is different than the current runtime version\n-                version = Runtime.Version.parse(v.toString());\n-                if (Runtime.version().feature() != version.feature() ||\n-                        Runtime.version().interim() != version.interim()) {\n-                    \/\/ jlink version and java.base version do not match.\n-                    \/\/ We do not (yet) support this mode.\n-                    throw new IllegalArgumentException(taskHelper.getMessage(\"err.jlink.version.mismatch\",\n-                            Runtime.version().feature(), Runtime.version().interim(),\n-                            version.feature(), version.interim()));\n-                }\n+        if (finder.find(\"java.base\").isPresent()) {\n+            \/\/ use the version of java.base module, if present, as\n+            \/\/ the release version for multi-release JAR files\n+            ModuleDescriptor.Version v = finder.find(\"java.base\").get()\n+                .descriptor().version().orElseThrow(() ->\n+                    new IllegalArgumentException(\"No version in java.base descriptor\")\n+                );\n+\n+            \/\/ java.base version is different than the current runtime version\n+            version = Runtime.Version.parse(v.toString());\n+            if (Runtime.version().feature() != version.feature() ||\n+                Runtime.version().interim() != version.interim())\n+            {\n+                \/\/ jlink version and java.base version do not match.\n+                \/\/ We do not (yet) support this mode.\n+                throw new IllegalArgumentException(taskHelper.getMessage(\"err.jlink.version.mismatch\",\n+                    Runtime.version().feature(), Runtime.version().interim(),\n+                    version.feature(), version.interim()));\n@@ -460,3 +462,0 @@\n-        } catch (FinderUnsupportedModuleException e) {\n-            throw new IllegalArgumentException(taskHelper.getMessage(\"err.jlink.class.version.mismatch\",\n-                    e.getMajorVersion(), e.getMinorVersion()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":27,"deletions":28,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n-err.jlink.class.version.mismatch=jlink encountered a java.base jmod with unsupported module descriptor version {0}.{1}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}