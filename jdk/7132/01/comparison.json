{"files":[{"patch":"@@ -267,0 +267,33 @@\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize with large arrays\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ * @requires vm.debug\n+ * @requires os.maxMemory >= 10G\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeIntrinsicsTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx8g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeIntrinsicsTest GetObjectSizeIntrinsicsTest large\n+ *\n+ * @run main\/othervm -Xmx8g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -Xbatch -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeIntrinsicsTest GetObjectSizeIntrinsicsTest large\n+ *\n+ * @run main\/othervm -Xmx8g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -Xbatch -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeIntrinsicsTest GetObjectSizeIntrinsicsTest large\n+ *\/\n+\n@@ -274,2 +307,2 @@\n-    static final Boolean compressedOops = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompressedOops\");\n-    static final int REF_SIZE = (compressedOops == null || compressedOops == true) ?  4 : 8;\n+    static final Boolean COMPRESSED_OOPS = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompressedOops\");\n+    static final long REF_SIZE = (COMPRESSED_OOPS == null || COMPRESSED_OOPS == true) ? 4 : 8;\n@@ -280,1 +313,8 @@\n-    public GetObjectSizeIntrinsicsTest(String name) {\n+    static final int SMALL_ARRAY_SIZE = 1024;\n+\n+    \/\/ With int[] arrays, this overflows 4G boundary\n+    static final int LARGE_ARRAY_SIZE = 1024*1024*1024 + 1024;\n+\n+    final String mode;\n+\n+    public GetObjectSizeIntrinsicsTest(String name, String mode) {\n@@ -282,0 +322,1 @@\n+        this.mode = mode;\n@@ -285,1 +326,1 @@\n-        new GetObjectSizeIntrinsicsTest(args[0]).runTest();\n+        new GetObjectSizeIntrinsicsTest(args[0], (args.length >= 2 ? args[1] : \"\")).runTest();\n@@ -315,3 +356,3 @@\n-        testSize_newSmallByteArray();\n-        testSize_localSmallByteArray();\n-        testSize_fieldSmallByteArray();\n+        testSize_newSmallIntArray();\n+        testSize_localSmallIntArray();\n+        testSize_fieldSmallIntArray();\n@@ -323,0 +364,5 @@\n+        if (mode.equals(\"large\")) {\n+            testSize_localLargeIntArray();\n+            testSize_localLargeObjArray();\n+        }\n+\n@@ -326,1 +372,1 @@\n-    private static int roundUp(int v, int a) {\n+    private static long roundUp(long v, long a) {\n@@ -331,1 +377,1 @@\n-        int expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n+        long expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n@@ -338,1 +384,1 @@\n-        int expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n+        long expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n@@ -348,1 +394,1 @@\n-        int expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n+        long expected = roundUp(Platform.is64bit() ? 16 : 8, OBJ_ALIGN);\n@@ -354,2 +400,2 @@\n-    private void testSize_newSmallByteArray() {\n-        int expected = roundUp(1024 + 16, OBJ_ALIGN);\n+    private void testSize_newSmallIntArray() {\n+        long expected = roundUp(4L*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -357,1 +403,1 @@\n-            assertEquals(expected, fInst.getObjectSize(new byte[1024]));\n+            assertEquals(expected, fInst.getObjectSize(new int[SMALL_ARRAY_SIZE]));\n@@ -361,3 +407,3 @@\n-    private void testSize_localSmallByteArray() {\n-        byte[] arr = new byte[1024];\n-        int expected = roundUp(arr.length + 16, OBJ_ALIGN);\n+    private void testSize_localSmallIntArray() {\n+        int[] arr = new int[SMALL_ARRAY_SIZE];\n+        long expected = roundUp(4L*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -369,1 +415,1 @@\n-    static byte[] smallArr = new byte[1024];\n+    static int[] smallArr = new int[SMALL_ARRAY_SIZE];\n@@ -371,2 +417,2 @@\n-    private void testSize_fieldSmallByteArray() {\n-        int expected = roundUp(smallArr.length + 16, OBJ_ALIGN);\n+    private void testSize_fieldSmallIntArray() {\n+        long expected = roundUp(4L*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -379,1 +425,1 @@\n-        int expected = roundUp(1024*REF_SIZE + 16, OBJ_ALIGN);\n+        long expected = roundUp(REF_SIZE*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -381,1 +427,1 @@\n-            assertEquals(expected, fInst.getObjectSize(new Object[1024]));\n+            assertEquals(expected, fInst.getObjectSize(new Object[SMALL_ARRAY_SIZE]));\n@@ -386,2 +432,2 @@\n-        Object[] arr = new Object[1024];\n-        int expected = roundUp(arr.length*REF_SIZE + 16, OBJ_ALIGN);\n+        Object[] arr = new Object[SMALL_ARRAY_SIZE];\n+        long expected = roundUp(REF_SIZE*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -393,1 +439,1 @@\n-    static Object[] smallObjArr = new Object[1024];\n+    static Object[] smallObjArr = new Object[SMALL_ARRAY_SIZE];\n@@ -396,1 +442,1 @@\n-        int expected = roundUp(smallArr.length*REF_SIZE + 16, OBJ_ALIGN);\n+        long expected = roundUp(REF_SIZE*SMALL_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -402,0 +448,16 @@\n+    private void testSize_localLargeIntArray() {\n+        int[] arr = new int[LARGE_ARRAY_SIZE];\n+        long expected = roundUp(4L*LARGE_ARRAY_SIZE + 16, OBJ_ALIGN);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(arr));\n+        }\n+    }\n+\n+    private void testSize_localLargeObjArray() {\n+        Object[] arr = new Object[LARGE_ARRAY_SIZE];\n+        long expected = roundUp(REF_SIZE*LARGE_ARRAY_SIZE + 16, OBJ_ALIGN);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(arr));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/instrument\/GetObjectSizeIntrinsicsTest.java","additions":88,"deletions":26,"binary":false,"changes":114,"status":"modified"}]}