{"files":[{"patch":"@@ -341,2 +341,2 @@\n-  size_t next_offset_index = _bot->index_for_raw(_next_offset_threshold);\n-  size_t end_card = MIN2(_bot->index_for(_hr->top() - 1), next_offset_index - 1);\n+  assert(_hr->top() <= _next_offset_threshold, \"invariant\");\n+  size_t end_card = _bot->index_for(_hr->top() - 1);\n@@ -402,7 +402,0 @@\n-HeapWord* G1BlockOffsetTablePart::initialize_threshold_raw() {\n-  size_t next_offset_index = _bot->index_for_raw(_hr->bottom()) + 1;\n-  _next_offset_threshold =\n-    _bot->address_for_index_raw(next_offset_index);\n-  return _next_offset_threshold;\n-}\n-\n@@ -417,3 +410,1 @@\n-  size_t next_offset_index = _bot->index_for(_hr->bottom()) + 1 ;\n-  _next_offset_threshold =\n-    _bot->address_for_index(next_offset_index);\n+  _next_offset_threshold = _hr->bottom() + BOTConstants::N_words;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -137,3 +137,0 @@\n-  \/\/ Variant of initialize_threshold that does not check for availability of the\n-  \/\/ memory first.\n-  HeapWord* initialize_threshold_raw();\n@@ -203,1 +200,1 @@\n-    initialize_threshold_raw();\n+    initialize_threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -717,1 +717,2 @@\n-  if (!is_empty()) {\n+  \/\/ Only regions in old generation contain valid BOT.\n+  if (!is_empty() && !is_young()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}