{"files":[{"patch":"@@ -954,1 +954,0 @@\n-  GuardUnsafeAccess guard(thread);\n@@ -966,1 +965,0 @@\n-  GuardUnsafeAccess guard(thread);\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2020 Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @library \/ \/test\/lib\n- * @bug 8246051\n- * @summary A test for SIGBUS in aarch64 by unalgined unsafe access\n- * @requires os.arch==\"aarch64\"\n- * @run main\/othervm\/timeout=200 -XX:-Inline TestUnsafeUnalignedSwap\n- *\/\n-\n-import sun.misc.Unsafe;\n-import java.lang.reflect.Field;\n-import java.util.*;\n-import jdk.test.lib.Asserts;\n-\n-public class TestUnsafeUnalignedSwap {\n-    private final static Unsafe U;\n-    private static long sum = 4;\n-    static volatile long[] arrayLong = new long[1001];\n-    static volatile int[] arrayInt = new int[1001];\n-    static {\n-        try {\n-            Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n-            f.setAccessible(true);\n-            U = (Unsafe) f.get(null);\n-        } catch (ReflectiveOperationException e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-    \/\/ Bug 8246051 : Unsafe.compareAndSwapLong should not crash\n-    public static void testCompareAndSwapLong() {\n-        try {\n-            if (U.compareAndSwapLong(arrayLong, Unsafe.ARRAY_LONG_BASE_OFFSET + 1, 3243, 2334)) {\n-                sum++;\n-            } else {\n-                sum--;\n-            }\n-        } catch (InternalError e) {\n-            System.out.println(e.getMessage());\n-        }\n-    }\n-    public static void testCompareAndSwapInt() {\n-        try {\n-            if (U.compareAndSwapInt(arrayInt, Unsafe.ARRAY_INT_BASE_OFFSET + 1, 3243, 2334)) {\n-                sum++;\n-            } else {\n-                sum--;\n-            }\n-        } catch (InternalError e) {\n-            System.out.println(e.getMessage());\n-        }\n-    }\n-    public static void test() {\n-        testCompareAndSwapLong();\n-        testCompareAndSwapInt();\n-    }\n-    public static void main(String[] args) {\n-        test();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/TestUnsafeUnalignedSwap.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"}]}