{"files":[{"patch":"@@ -60,2 +60,1 @@\n-        int port = findFreePort();\n-        try (Debuggee debuggee = Debuggee.launcher(\"ThrowCaughtException\").setAddress(\"localhost:\" + port)\n+        try (Debuggee debuggee = Debuggee.launcher(\"ThrowCaughtException\")\n@@ -65,1 +64,1 @@\n-                vm = attach(\"localhost\", \"\" + port);\n+                vm = attach(\"localhost\", debuggee.getAddress());\n@@ -113,8 +112,0 @@\n-    private static int findFreePort() {\n-        try (ServerSocket socket = new ServerSocket(0)) {\n-            return socket.getLocalPort();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/JdwpOnThrowTest.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-        private boolean waitForPortPrint = true;\n@@ -107,1 +106,1 @@\n-        public Launcher enableOnThrow(String value, String expectedOutputBeforeThrow) {\n+        public Launcher enableOnThrow(String exceptionClassName) {\n@@ -109,1 +108,0 @@\n-            this.waitForPortPrint = false;\n@@ -119,1 +117,1 @@\n-            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=exit\";\n+            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo\";\n@@ -130,1 +128,1 @@\n-            return new Debuggee(prepare(), name, waitForPortPrint, expectedOutputBeforeThrow);\n+            return new Debuggee(prepare(), name, !onthrow.isEmpty(), expectedOutputBeforeThrow);\n@@ -138,1 +136,1 @@\n-    private Debuggee(ProcessBuilder pb, String name, boolean waitForPortPrint, String expectedOutputBeforeThrow) {\n+    private Debuggee(ProcessBuilder pb, String name, Function<String, JDWP.ListenAddress> addressDetector) {\n@@ -140,12 +138,0 @@\n-        if (!waitForPortPrint) {\n-            try {\n-                p = ProcessTools.startProcess(name, pb, s -> {output.add(s);}, s -> {\n-                    return s.equals(expectedOutputBeforeThrow);\n-                }, 30, TimeUnit.SECONDS);\n-            } catch (IOException | InterruptedException | TimeoutException ex) {\n-                throw new RuntimeException(\"failed to launch debuggee\", ex);\n-            }\n-            transport = null;\n-            address = null;\n-            return;\n-        }\n@@ -156,1 +142,5 @@\n-                        listenAddress[0] = JDWP.parseListenAddress(s);\n+                        if (hasOnThrow) {\n+                            listenAddress[0] = JDWP.parseLaunchEchoListenAddress(s);\n+                        } else {\n+                            listenAddress[0] = JDWP.parseListenAddress(s);\n+                        }\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -52,0 +52,13 @@\n+    \/**\n+     * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n+     * Returns null if the string specified does not contain required info.\n+     *\/\n+    public static ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n+        String[] parts = debuggeeOutput.split(\" \");\n+        if (parts.length != 2) {\n+            return null;\n+        }\n+        return new ListenAddress(parts[0], parts[1]);\n+    }\n+\n+\n","filename":"test\/lib\/jdk\/test\/lib\/JDWP.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}