{"files":[{"patch":"@@ -61,1 +61,1 @@\n-                                         .enableOnThrow(\"Ex\", \"Start\").setSuspended(true).launch()) {\n+                                         .enableOnThrow(\"Ex\").setSuspended(true).launch()) {\n","filename":"test\/jdk\/com\/sun\/jdi\/JdwpOnThrowTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -72,1 +75,0 @@\n-        private String expectedOutputBeforeThrow = \"\";\n@@ -107,2 +109,1 @@\n-            this.onthrow = value;\n-            this.expectedOutputBeforeThrow = expectedOutputBeforeThrow;\n+            this.onthrow = exceptionClassName;\n@@ -117,1 +118,1 @@\n-            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo\";\n+            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo Listen Args:\";\n@@ -128,1 +129,6 @@\n-            return new Debuggee(prepare(), name, !onthrow.isEmpty(), expectedOutputBeforeThrow);\n+            return new Debuggee(prepare(), name, s -> {\n+                if (!onthrow.isEmpty()) {\n+                    return parseLaunchEchoListenAddress(s);\n+                }\n+                return JDWP.parseListenAddress(s);\n+            });\n@@ -141,6 +147,2 @@\n-                    s -> {  \/\/ warm-up predicate\n-                        if (hasOnThrow) {\n-                            listenAddress[0] = JDWP.parseLaunchEchoListenAddress(s);\n-                        } else {\n-                            listenAddress[0] = JDWP.parseListenAddress(s);\n-                        }\n+                    s -> {\n+                        listenAddress[0] = addressDetector.apply(s);\n@@ -205,0 +207,13 @@\n+    \/**\n+     * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n+     * Returns null if the string specified does not contain required info.\n+     *\/\n+    private static JDWP.ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n+        Pattern listenRegexp = Pattern.compile(\"Listen Args: \\\\b(.+)\\\\b \\\\b(.+)\\\\b\");\n+        Matcher m = listenRegexp.matcher(debuggeeOutput);\n+        if (m.find()) {\n+            return new JDWP.ListenAddress(m.group(1), m.group(2));\n+        }\n+        return null;\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":26,"deletions":11,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -52,13 +52,0 @@\n-    \/**\n-     * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n-     * Returns null if the string specified does not contain required info.\n-     *\/\n-    public static ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n-        String[] parts = debuggeeOutput.split(\" \");\n-        if (parts.length != 2) {\n-            return null;\n-        }\n-        return new ListenAddress(parts[0], parts[1]);\n-    }\n-\n-\n","filename":"test\/lib\/jdk\/test\/lib\/JDWP.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}