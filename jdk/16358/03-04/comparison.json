{"files":[{"patch":"@@ -75,0 +75,1 @@\n+        private static final String LAUNCH_ECHO_STRING = \"Listen Args:\";\n@@ -107,1 +108,0 @@\n-        \/\/ required to pass non null port with address and emit string before the throw\n@@ -118,1 +118,1 @@\n-            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo Listen Args:\";\n+            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=echo \" + LAUNCH_ECHO_STRING;\n@@ -129,6 +129,5 @@\n-            return new Debuggee(prepare(), name, s -> {\n-                if (!onthrow.isEmpty()) {\n-                    return parseLaunchEchoListenAddress(s);\n-                }\n-                return JDWP.parseListenAddress(s);\n-            });\n+            return new Debuggee(prepare(), name,\n+                onthrow.isEmpty() ?\n+                JDWP::parseListenAddress :\n+                Launcher::parseLaunchEchoListenAddress\n+            );\n@@ -139,0 +138,13 @@\n+\n+        \/**\n+         * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n+         * Returns null if the string specified does not contain required info.\n+         *\/\n+        private static JDWP.ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n+            Pattern listenRegexp = Pattern.compile(LAUNCH_ECHO_STRING + \" \\\\b(.+)\\\\b \\\\b(.+)\\\\b\");\n+            Matcher m = listenRegexp.matcher(debuggeeOutput);\n+            if (m.find()) {\n+                return new JDWP.ListenAddress(m.group(1), m.group(2));\n+            }\n+            return null;\n+        }\n@@ -206,14 +218,0 @@\n-\n-    \/**\n-     * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n-     * Returns null if the string specified does not contain required info.\n-     *\/\n-    private static JDWP.ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n-        Pattern listenRegexp = Pattern.compile(\"Listen Args: \\\\b(.+)\\\\b \\\\b(.+)\\\\b\");\n-        Matcher m = listenRegexp.matcher(debuggeeOutput);\n-        if (m.find()) {\n-            return new JDWP.ListenAddress(m.group(1), m.group(2));\n-        }\n-        return null;\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"}]}