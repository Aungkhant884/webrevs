{"files":[{"patch":"@@ -2284,5 +2284,0 @@\n-\/\/ Clear all entries in _nodes to NULL but keep storage\n-void Node_Array::clear() {\n-  Copy::zero_to_bytes( _nodes, _max*sizeof(Node*) );\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/copy.hpp\"\n@@ -1480,5 +1481,3 @@\n-  Node_Array(Arena* a) : _a(a), _max(OptoNodeListSize) {\n-    _nodes = NEW_ARENA_ARRAY(a, Node*, OptoNodeListSize);\n-    for (int i = 0; i < OptoNodeListSize; i++) {\n-      _nodes[i] = NULL;\n-    }\n+  Node_Array(Arena* a, uint max = OptoNodeListSize) : _a(a), _max(max) {\n+    _nodes = NEW_ARENA_ARRAY(a, Node*, max);\n+    clear();\n@@ -1496,1 +1495,5 @@\n-  void clear();                 \/\/ Set all entries to NULL, keep storage\n+  \/\/ Clear all entries in _nodes to NULL but keep storage\n+  void clear() {\n+    Copy::zero_to_bytes(_nodes, _max * sizeof(Node*));\n+  }\n+\n@@ -1505,2 +1508,2 @@\n-  Node_List() : Node_Array(Thread::current()->resource_area()), _cnt(0) {}\n-  Node_List(Arena *a) : Node_Array(a), _cnt(0) {}\n+  Node_List(uint max = OptoNodeListSize) : Node_Array(Thread::current()->resource_area(), max), _cnt(0) {}\n+  Node_List(Arena *a, uint max = OptoNodeListSize) : Node_Array(a, max), _cnt(0) {}\n@@ -1519,0 +1522,8 @@\n+  void copy(const Node_List& from) {\n+    if (from._max > _max) {\n+      grow(from._max);\n+    }\n+    _cnt = from._cnt;\n+    Copy::conjoint_words_to_higher((HeapWord*)&from._nodes[0], (HeapWord*)&_nodes[0], from._max * sizeof(Node*));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -561,1 +561,0 @@\n-\n@@ -564,2 +563,2 @@\n-    Node_List &regnd = *(free_list.is_empty() ? new Node_List() : free_list.pop());\n-    Node_List &value = *(free_list.is_empty() ? new Node_List() : free_list.pop());\n+    Node_List &regnd = *(free_list.is_empty() ? new Node_List(_max_reg) : free_list.pop());\n+    Node_List &value = *(free_list.is_empty() ? new Node_List(_max_reg) : free_list.pop());\n@@ -567,2 +566,0 @@\n-    value.map(_max_reg,NULL);\n-    regnd.map(_max_reg,NULL);\n@@ -575,4 +572,4 @@\n-      \/\/ Some predecessor has not yet been visited; zap map to empty\n-      for (uint k = 0; k < (uint)_max_reg; k++) {\n-        value.map(k,NULL);\n-        regnd.map(k,NULL);\n+      \/\/ Some predecessor has not yet been visited; zap map to empty if necessary\n+      if (freed) {\n+        value.clear();\n+        regnd.clear();\n@@ -581,1 +578,1 @@\n-      if( !freed ) {            \/\/ Didn't get a freebie prior block\n+      if (!freed) {            \/\/ Didn't get a freebie prior block\n@@ -584,6 +581,2 @@\n-        Node_List &f_value = *blk2value[freed->_pre_order];\n-        Node_List &f_regnd = *blk2regnd[freed->_pre_order];\n-        for( uint k = 0; k < (uint)_max_reg; k++ ) {\n-          value.map(k,f_value[k]);\n-          regnd.map(k,f_regnd[k]);\n-        }\n+        value.copy(*blk2value[freed->_pre_order]);\n+        regnd.copy(*blk2regnd[freed->_pre_order]);\n@@ -598,4 +591,4 @@\n-        for( uint k = 0; k < (uint)_max_reg; k++ ) {\n-          if( regnd[k] != p_regnd[k] ) { \/\/ Conflict on reaching defs?\n-            value.map(k,NULL); \/\/ Then no value handy\n-            regnd.map(k,NULL);\n+        for (uint k = 0; k < (uint)_max_reg; k++) {\n+          if (regnd[k] != p_regnd[k]) { \/\/ Conflict on reaching defs?\n+            value.map(k, NULL); \/\/ Then no value handy\n+            regnd.map(k, NULL);\n@@ -637,3 +630,3 @@\n-      if( pidx ) {\n-        value.map(preg,phi);\n-        regnd.map(preg,phi);\n+      if (pidx) {\n+        value.map(preg, phi);\n+        regnd.map(preg, phi);\n@@ -643,2 +636,2 @@\n-          value.map(preg_lo,phi);\n-          regnd.map(preg_lo,phi);\n+          value.map(preg_lo, phi);\n+          regnd.map(preg_lo, phi);\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"}]}