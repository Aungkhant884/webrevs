{"files":[{"patch":"@@ -100,1 +100,0 @@\n-  const char* scale = current_scale();\n@@ -109,0 +108,6 @@\n+\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n@@ -246,2 +251,9 @@\n-  report_malloc_sites();\n-  report_virtual_memory_allocation_sites();\n+  int num_omitted =\n+      report_malloc_sites() +\n+      report_virtual_memory_allocation_sites();\n+  if (num_omitted > 0) {\n+    assert(scale() > 1, \"sanity\");\n+    out->print_cr(\"(%d call sites weighting less than 1%s each omitted.)\",\n+                   num_omitted, current_scale());\n+    out->cr();\n+  }\n@@ -250,1 +262,1 @@\n-void MemDetailReporter::report_malloc_sites() {\n+int MemDetailReporter::report_malloc_sites() {\n@@ -252,1 +264,1 @@\n-  if (malloc_itr.is_empty()) return;\n+  if (malloc_itr.is_empty()) return 0;\n@@ -257,0 +269,1 @@\n+  int num_omitted = 0;\n@@ -258,2 +271,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(malloc_site->size()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (malloc_site->size() == 0) {\n@@ -261,1 +274,6 @@\n-\n+    }\n+    \/\/ Don't report if site has allocated less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0) {\n+      num_omitted ++;\n+      continue;\n+    }\n@@ -271,0 +289,1 @@\n+  return num_omitted;\n@@ -273,1 +292,1 @@\n-void MemDetailReporter::report_virtual_memory_allocation_sites()  {\n+int MemDetailReporter::report_virtual_memory_allocation_sites()  {\n@@ -277,1 +296,1 @@\n-  if (virtual_memory_itr.is_empty()) return;\n+  if (virtual_memory_itr.is_empty()) return 0;\n@@ -281,1 +300,1 @@\n-\n+  int num_omitted = 0;\n@@ -283,2 +302,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(virtual_memory_site->reserved()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (virtual_memory_site->reserved() == 0) {\n@@ -286,1 +305,6 @@\n-\n+    }\n+    \/\/ Don't report if site has reserved less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(virtual_memory_site->reserved()) == 0) {\n+      num_omitted++;\n+      continue;\n+    }\n@@ -297,0 +321,1 @@\n+  return num_omitted;\n@@ -362,1 +387,0 @@\n-  const char* scale = current_scale();\n@@ -366,0 +390,5 @@\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+  size_t scale() const {\n+    return _scale;\n+  }\n@@ -147,4 +150,4 @@\n-  \/\/ Report malloc allocation sites\n-  void report_malloc_sites();\n-  \/\/ Report virtual memory reservation sites\n-  void report_virtual_memory_allocation_sites();\n+  \/\/ Report malloc allocation sites; returns number of omitted sites\n+  int report_malloc_sites();\n+  \/\/ Report virtual memory reservation sites; returns number of omitted sites\n+  int report_virtual_memory_allocation_sites();\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}