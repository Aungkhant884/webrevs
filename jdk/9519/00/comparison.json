{"files":[{"patch":"@@ -3172,1 +3172,4 @@\n-                        return PatternResult.EXPRESSION;\n+                        \/\/ This is a potential guard, if we are already in a pattern\n+                        return pendingResult == PatternResult.PATTERN\n+                                ? PatternResult.PATTERN\n+                                : PatternResult.EXPRESSION;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8290379\n+ * @summary Parse error with parenthesized pattern and guard using an array\n+ * @compile --enable-preview -source ${jdk.version} T8290379.java\n+ * @run main\/othervm --enable-preview T8290379\n+ *\/\n+public class T8290379 {\n+    public static void main(String... args) {\n+        assertEquals(0, test(\"test\"));\n+        assertEquals(1, test(Integer.valueOf(42)));\n+    }\n+\n+    public static int test(Object o)\n+    {\n+        int[] arr = {0, 1};\n+\n+        return switch (o) {\n+            case (String s) when (arr[0] == 0) -> 0;\n+            case (Integer i) when arr[1] == 1 -> 1;\n+            default -> 2;\n+        };\n+    }\n+\n+    static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8290379.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}