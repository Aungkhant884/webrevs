{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/z\/zCollectedHeap.hpp\"\n@@ -126,1 +127,1 @@\n-class ZHeapIteratorOopClosure : public ClaimMetadataVisitingOopIterateClosure {\n+class ZHeapIteratorOopClosure : public OopIterateClosure {\n@@ -132,0 +133,2 @@\n+    assert(ZCollectedHeap::heap()->is_in(p), \"p should be in-heap\");\n+\n@@ -141,1 +144,1 @@\n-      ClaimMetadataVisitingOopIterateClosure(ClassLoaderData::_claim_other),\n+      OopIterateClosure(nullptr),\n@@ -157,0 +160,30 @@\n+\n+  virtual bool do_metadata() { return true; }\n+\n+  virtual void do_klass(Klass* k) {\n+    ClassLoaderData* cld = k->class_loader_data();\n+    ZHeapIteratorOopClosure::do_cld(cld);\n+  }\n+\n+  virtual void do_cld(ClassLoaderData* cld) {\n+    class NativeAccessClosure : public OopClosure {\n+    private:\n+      const ZHeapIteratorContext& _context;\n+\n+     public:\n+      explicit NativeAccessClosure(const ZHeapIteratorContext& context) :\n+          _context(context) {}\n+\n+      virtual void do_oop(oop* p) {\n+        assert(!ZCollectedHeap::heap()->is_in(p), \"p lives outside heap\");\n+        const oop obj = NativeAccess<AS_NO_KEEPALIVE>::oop_load(p);\n+        _context.mark_and_push(obj);\n+      }\n+\n+      virtual void do_oop(narrowOop* p) {\n+        ShouldNotReachHere();\n+      }\n+    } closure{_context};\n+\n+    cld->oops_do(&closure, ClassLoaderData::_claim_other);\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}