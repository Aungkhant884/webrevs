{"files":[{"patch":"@@ -49,3 +49,4 @@\n- * different seed provided. In the first case the test expects that all random numbers\n- * will be repeated in all next iterations. For other two modes test expects that\n- * randomly generated numbers differ from original.\n+ * different seed provided.\n+ * In the first case, the test expects that all random numbers will be repeated in all next iterations.\n+ * In the second case, the numbers are expected to be the same for promotable builds and different for other builds.\n+ * In the last case, the test expects the randomly generated numbers differ from original.\n@@ -89,0 +90,4 @@\n+            @Override\n+            protected boolean isOutputExpected(String orig, String output) {\n+                return output.equals(orig);\n+            }\n@@ -104,1 +109,1 @@\n-                return !super.isOutputExpected(orig, output);\n+                return !output.equals(orig);\n@@ -112,0 +117,5 @@\n+\n+            @Override\n+            protected boolean isOutputExpected(String orig, String output) {\n+                return Runtime.version().build().orElse(0) > 0 ^ !output.equals(orig);\n+            }\n@@ -122,3 +132,1 @@\n-        protected boolean isOutputExpected(String orig, String output) {\n-            return output.equals(orig);\n-        }\n+        protected abstract boolean isOutputExpected(String orig, String output);\n","filename":"test\/lib-test\/jdk\/test\/lib\/RandomGeneratorTest.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -133,3 +133,1 @@\n-     * Random generator with predefined seed. If \"jdk.test.lib.random.seed\" is\n-     * specified, its value is used as seed, otherwise, seed based on string\n-     * representation of {@link Runtime#version()} is used.\n+     * Random generator with predefined seed.\n@@ -154,10 +152,16 @@\n-           \/\/ use 1st 8 bytes of md5($version)\n-           try {\n-               var md = MessageDigest.getInstance(\"MD5\");\n-               var bytes = Runtime.version()\n-                                  .toString()\n-                                  .getBytes(StandardCharsets.UTF_8);\n-               bytes = md.digest(bytes);\n-               SEED = ByteBuffer.wrap(bytes).getLong();\n-           } catch (NoSuchAlgorithmException e) {\n-               throw new Error(e);\n+           var v = Runtime.version();\n+           \/\/ promotable builds have build number, and it's greater than 0\n+           if (v.build().orElse(0) > 0) {\n+               \/\/ promotable build -> use 1st 8 bytes of md5($version)\n+               try {\n+                   var md = MessageDigest.getInstance(\"MD5\");\n+                   var bytes = v.toString()\n+                                .getBytes(StandardCharsets.UTF_8);\n+                   bytes = md.digest(bytes);\n+                   SEED = ByteBuffer.wrap(bytes).getLong();\n+               } catch (NoSuchAlgorithmException e) {\n+                   throw new Error(e);\n+               }\n+           } else {\n+               \/\/ \"personal\" build -> use random seed\n+               SEED = new Random().nextLong();\n@@ -557,2 +561,4 @@\n-     * In case no seed is provided, the seed based on string representation of\n-     * {@link Runtime#version()}, which is different from build to build, is used.\n+     * In case no seed is provided and the build under test is \"promotable\"\n+     * (its build number ({@code $BUILD} in {@link Runtime.Version}) is greater than 0,\n+     * the seed based on string representation of {@link Runtime#version()} is used.\n+     * Otherwise, the seed is randomly generated.\n@@ -560,0 +566,1 @@\n+     *\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"}]}