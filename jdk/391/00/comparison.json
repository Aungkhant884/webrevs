{"files":[{"patch":"@@ -89,4 +89,0 @@\n-            @Override\n-            protected boolean isOutputExpected(String orig, String output) {\n-                return output.equals(orig);\n-            }\n@@ -105,0 +101,5 @@\n+\n+            @Override\n+            protected boolean isOutputExpected(String orig, String output) {\n+                return !super.isOutputExpected(orig, output);\n+            }\n@@ -122,1 +123,1 @@\n-            return !output.equals(orig);\n+            return output.equals(orig);\n","filename":"test\/lib-test\/jdk\/test\/lib\/RandomGeneratorTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n@@ -38,0 +36,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n@@ -43,0 +43,2 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -144,1 +146,18 @@\n-    public static final long SEED = Long.getLong(SEED_PROPERTY_NAME, new Random().nextLong());\n+    public static final long SEED;\n+    static {\n+       var seed = Long.getLong(SEED_PROPERTY_NAME);\n+       if (seed != null) {\n+           \/\/ use explicitly set seed\n+           SEED = seed;\n+       } else {\n+           \/\/ use 1st 8 bytes of md5($version)\n+           try {\n+               var md = MessageDigest.getInstance(\"MD5\");\n+               var bytes = System.getProperty(\"java.vm.version\").getBytes(StandardCharsets.UTF_8);\n+               bytes = md.digest(bytes);\n+               SEED = ByteBuffer.wrap(bytes).getLong();\n+           } catch (NoSuchAlgorithmException e) {\n+               throw new Error(e);\n+           }\n+       }\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}