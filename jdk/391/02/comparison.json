{"files":[{"patch":"@@ -49,3 +49,4 @@\n- * different seed provided. In the first case the test expects that all random numbers\n- * will be repeated in all next iterations. For other two modes test expects that\n- * randomly generated numbers differ from original.\n+ * different seed provided.\n+ * In the first case, the test expects that all random numbers will be repeated in all next iterations.\n+ * In the second case, the numbers are expected to be the same for promotable builds and different for other builds.\n+ * In the last case, the test expects the randomly generated numbers differ from original.\n@@ -105,0 +106,5 @@\n+\n+            @Override\n+            protected boolean isOutputExpected(String orig, String output) {\n+                return !output.equals(orig);\n+            }\n@@ -111,0 +117,5 @@\n+\n+            @Override\n+            protected boolean isOutputExpected(String orig, String output) {\n+                return Runtime.version().build().orElse(0) > 0 ^ !output.equals(orig);\n+            }\n@@ -121,3 +132,1 @@\n-        protected boolean isOutputExpected(String orig, String output) {\n-            return !output.equals(orig);\n-        }\n+        protected abstract boolean isOutputExpected(String orig, String output);\n","filename":"test\/lib-test\/jdk\/test\/lib\/RandomGeneratorTest.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n@@ -38,0 +36,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n@@ -43,0 +43,2 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -130,3 +132,2 @@\n-    \/* (non-javadoc)\n-     * Random generator with (or without) predefined seed. Depends on\n-     * \"jdk.test.lib.random.seed\" property value.\n+    \/**\n+     * Random generator with predefined seed.\n@@ -144,1 +145,26 @@\n-    public static final long SEED = Long.getLong(SEED_PROPERTY_NAME, new Random().nextLong());\n+    public static final long SEED;\n+    static {\n+       var seed = Long.getLong(SEED_PROPERTY_NAME);\n+       if (seed != null) {\n+           \/\/ use explicitly set seed\n+           SEED = seed;\n+       } else {\n+           var v = Runtime.version();\n+           \/\/ promotable builds have build number, and it's greater than 0\n+           if (v.build().orElse(0) > 0) {\n+               \/\/ promotable build -> use 1st 8 bytes of md5($version)\n+               try {\n+                   var md = MessageDigest.getInstance(\"MD5\");\n+                   var bytes = v.toString()\n+                                .getBytes(StandardCharsets.UTF_8);\n+                   bytes = md.digest(bytes);\n+                   SEED = ByteBuffer.wrap(bytes).getLong();\n+               } catch (NoSuchAlgorithmException e) {\n+                   throw new Error(e);\n+               }\n+           } else {\n+               \/\/ \"personal\" build -> use random seed\n+               SEED = new Random().nextLong();\n+           }\n+       }\n+    }\n@@ -534,2 +560,5 @@\n-     * The seed could be provided via system property {@link Utils#SEED_PROPERTY_NAME}\n-     * In case no seed is provided, the method uses a random number.\n+     * The seed could be provided via system property {@link Utils#SEED_PROPERTY_NAME}.\n+     * In case no seed is provided and the build under test is \"promotable\"\n+     * (its build number ({@code $BUILD} in {@link Runtime.Version}) is greater than 0,\n+     * the seed based on string representation of {@link Runtime#version()} is used.\n+     * Otherwise, the seed is randomly generated.\n@@ -537,0 +566,1 @@\n+     *\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"}]}