{"files":[{"patch":"@@ -206,1 +206,2 @@\n-# Configure flags for the tools\n+# Configure flags for the tools. Need to know if we should build reproducible.\n+JDKOPT_SETUP_REPRODUCIBLE_BUILD\n@@ -250,1 +251,0 @@\n-JDKOPT_SETUP_REPRODUCIBLE_BUILD\n","filename":"make\/autoconf\/configure.ac","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -753,0 +753,12 @@\n+  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft && test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xtrue; then\n+    # Enabling deterministic creates warnings if __DATE__ or __TIME__ are\n+    # used, and since we are, silence that warning.\n+    REPRODUCIBLE_CFLAGS=\"-experimental:deterministic -wd5048\"\n+    FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${REPRODUCIBLE_CFLAGS}],\n+        PREFIX: $3,\n+        IF_FALSE: [\n+            REPRODUCIBLE_CFLAGS=\n+        ]\n+    )\n+  fi\n+\n@@ -771,0 +783,24 @@\n+    elif test \"x$TOOLCHAIN_TYPE\" = xmicrosoft &&\n+        test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xtrue; then\n+      # There is a known issue with the pathmap if the mapping is made to the\n+      # empty string. Add a minimal string \"s\" as prefix to work around this.\n+      workspace_root_win=\"${WORKSPACE_ROOT%\/}\"\n+      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([workspace_root_win])\n+      # PATHMAP_FLAGS is also added to LDFLAGS in flags-ldflags.m4.\n+      PATHMAP_FLAGS=\"-pathmap:${workspace_root_win\/\/\\\/\/\\\\\\\\}=s \\\n+          -pathmap:${workspace_root_win}=s\"\n+      FILE_MACRO_CFLAGS=\"$PATHMAP_FLAGS\"\n+      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${FILE_MACRO_CFLAGS}],\n+          PREFIX: $3,\n+          IF_FALSE: [\n+              PATHMAP_FLAGS=\n+              FILE_MACRO_CFLAGS=\n+          ]\n+      )\n+    fi\n+\n+    AC_MSG_CHECKING([how to prevent absolute paths in output])\n+    if test \"x$FILE_MACRO_CFLAGS\" != x; then\n+      AC_MSG_RESULT([using compiler options])\n+    else\n+      AC_MSG_RESULT([using relative paths])\n@@ -779,1 +815,2 @@\n-      $WARNING_CFLAGS $WARNING_CFLAGS_JVM $JVM_PICFLAG $FILE_MACRO_CFLAGS\"\n+      $WARNING_CFLAGS $WARNING_CFLAGS_JVM $JVM_PICFLAG $FILE_MACRO_CFLAGS \\\n+      $REPRODUCIBLE_CFLAGS\"\n@@ -784,1 +821,1 @@\n-      $FILE_MACRO_CFLAGS\"\n+      $FILE_MACRO_CFLAGS $REPRODUCIBLE_CFLAGS\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -140,0 +140,6 @@\n+  if test \"x$ENABLE_REPRODUCIBLE_BUILD\" = \"xtrue\"; then\n+    if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+      REPRODUCIBLE_LDFLAGS=\"-experimental:deterministic\"\n+    fi\n+  fi\n+\n@@ -143,0 +149,2 @@\n+      # PATHMAP_FLAGS is setup in flags-cflags.m4.\n+      FILE_MACRO_LDFLAGS=\"${PATHMAP_FLAGS}\"\n@@ -190,1 +198,2 @@\n-      ${$1_LDFLAGS_JDK_LIBPATH} $SHARED_LIBRARY_FLAGS\"\n+      ${$1_LDFLAGS_JDK_LIBPATH} $SHARED_LIBRARY_FLAGS \\\n+      $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n@@ -192,1 +201,1 @@\n-      ${$1_CPU_EXECUTABLE_LDFLAGS}\"\n+      ${$1_CPU_EXECUTABLE_LDFLAGS} $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n@@ -196,1 +205,2 @@\n-      ${$1_CPU_LDFLAGS} ${$1_CPU_LDFLAGS_JVM_ONLY} ${$2EXTRA_LDFLAGS}\"\n+      ${$1_CPU_LDFLAGS} ${$1_CPU_LDFLAGS_JVM_ONLY} ${$2EXTRA_LDFLAGS} \\\n+      $REPRODUCIBLE_LDFLAGS $FILE_MACRO_LDFLAGS\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -154,5 +154,0 @@\n-                } else if (fileName.endsWith(\".dll\")) {\n-                    \/\/ On Windows, the Microsoft toolchain does not provide a way\n-                    \/\/ to reliably remove all absolute paths from __FILE__ usage.\n-                    \/\/ Until that is fixed, we simply exclude *.dll from this\n-                    \/\/ test.\n@@ -171,8 +166,0 @@\n-        \/\/ For the same reason as the *.dll above, the jdk.jpackage module\n-        \/\/ contains some unavoidable header references in the launcher which is\n-        \/\/ stored as a java resource inside the modules file.\n-        if (IS_WINDOWS && file.toString().endsWith(\"modules\")) {\n-            matches = matches.stream()\n-                .filter(f -> !f.matches(\".*jdk\\\\.jpackage.*\\\\.h.*\"))\n-                .collect(Collectors.toList());\n-        }\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}