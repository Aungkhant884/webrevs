{"files":[{"patch":"@@ -2837,1 +2837,1 @@\n-    if (addr.getMode() == Address::base_plus_offset) {\n+    if (addr.mode() == Address::base_plus_offset) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,2 @@\n-    if (_offset == 0 && _base == r) \/\/ it's a nop\n+    assert(ext().shift() == 0, \"expected, was %d\", ext().shift());\n+    if (offset() == 0 && base() == r) \/\/ it's a nop\n@@ -136,2 +137,2 @@\n-    if (_offset > 0)\n-      __ add(r, _base, _offset);\n+    if (offset() > 0)\n+      __ add(r, base(), offset());\n@@ -139,2 +140,2 @@\n-      __ sub(r, _base, -_offset);\n-      break;\n+      __ sub(r, base(), -offset());\n+    break;\n@@ -143,1 +144,1 @@\n-    __ add(r, _base, _index, _ext.op(), MAX2(_ext.shift(), 0));\n+    __ add(r, base(), index(), ext().op(), MAX2(ext().shift(), 0));\n@@ -146,1 +147,1 @@\n-  case literal: {\n+  case addr_literal: {\n@@ -244,3 +245,5 @@\n-Address::Address(address target, relocInfo::relocType rtype) : _mode(literal){\n-  _is_lval = false;\n-  _target = target;\n+Address::Address(address target, relocInfo::relocType rtype) :\n+  _mode(addr_literal), _is_lval(false), _target(target)\n+{\n+  precond(target != nullptr);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -352,3 +352,2 @@\n-\n-  enum mode { no_mode, base_plus_offset, pre, post, post_reg, pcrel,\n-              base_plus_offset_reg, literal };\n+  enum addr_mode { no_mode, addr_literal, pre, post, post_reg,\n+                   base_plus_offset, base_plus_offset_reg };\n@@ -385,5 +384,5 @@\n-  Register _base;\n-  Register _index;\n-  int64_t _offset;\n-  enum mode _mode;\n-  extend _ext;\n+  addr_mode _mode;\n+  Register  _base;\n+  Register  _index;\n+  int64_t   _offset;\n+  extend    _extend;\n@@ -392,1 +391,0 @@\n-\n@@ -396,2 +394,1 @@\n-  bool _is_lval;\n-\n+  bool      _is_lval;\n@@ -401,1 +398,1 @@\n-  address          _target;\n+  address   _target;\n@@ -404,4 +401,3 @@\n-  Address()\n-    : _mode(no_mode) { }\n-  Address(Register r)\n-    : _base(r), _index(noreg), _offset(0), _mode(base_plus_offset), _target(0) { }\n+  Address() : _mode(no_mode) {}\n+\n+  Address(Register r) : Address(r, 0) {}\n@@ -410,18 +406,17 @@\n-  Address(Register r, T o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) {}\n-\n-  Address(Register r, ByteSize disp)\n-    : Address(r, in_bytes(disp)) { }\n-  Address(Register r, Register r1, extend ext = lsl())\n-    : _base(r), _index(r1), _offset(0), _mode(base_plus_offset_reg),\n-      _ext(ext), _target(0) { }\n-  Address(Pre p)\n-    : _base(p.reg()), _offset(p.offset()), _mode(pre) { }\n-  Address(Post p)\n-    : _base(p.reg()),  _index(p.idx_reg()), _offset(p.offset()),\n-      _mode(p.is_postreg() ? post_reg : post), _target(0) { }\n-  Address(address target, RelocationHolder const& rspec)\n-    : _mode(literal),\n-      _rspec(rspec),\n-      _is_lval(false),\n-      _target(target)  { }\n+  Address(Register r, T o) : _mode(base_plus_offset),\n+    _base(r), _index(noreg), _offset(o), _extend(lsl(0)), _target(nullptr) {}\n+\n+  Address(Register r, ByteSize disp) : Address(r, in_bytes(disp)) {}\n+\n+  Address(Register r, Register r1, extend ext = lsl(0)) : _mode(base_plus_offset_reg),\n+    _base(r), _index(r1), _offset(0), _extend(ext), _target(nullptr) {}\n+\n+  Address(Pre p) : _mode(pre),\n+    _base(p.reg()), _index(noreg), _offset(p.offset()),\n+    _extend(lsl(0)), _target(nullptr) {}\n+  Address(Post p) : _mode(p.is_postreg() ? post_reg : post),\n+    _base(p.reg()), _index(p.idx_reg()), _offset(p.offset()),\n+    _extend(lsl(0)), _target(nullptr) {}\n+\n+  Address(address target, RelocationHolder const& rspec) : _mode(addr_literal),\n+    _rspec(rspec), _is_lval(false), _target(target)  {}\n@@ -429,3 +424,4 @@\n-  Address(Register base, RegisterOrConstant index, extend ext = lsl())\n-    : _base (base),\n-      _offset(0), _ext(ext), _target(0) {\n+\n+  Address(Register base, RegisterOrConstant index, extend ext = lsl(0))\n+    : _base(base), _index(noreg), _offset(0), _extend(ext), _target(nullptr)\n+  {\n@@ -444,3 +440,1 @@\n-    guarantee((_mode == base_plus_offset || _mode == base_plus_offset_reg\n-               || _mode == post || _mode == post_reg),\n-              \"wrong mode\");\n+    precond(_mode != no_mode && _mode != addr_literal);\n@@ -450,0 +444,2 @@\n+    precond(_mode == base_plus_offset || _mode == pre || _mode == post ||\n+            (_mode == base_plus_offset_reg && _offset == 0));\n@@ -453,0 +449,2 @@\n+    precond(_mode == base_plus_offset_reg || _mode == post_reg ||\n+            (_mode == base_plus_offset && _index == noreg));\n@@ -455,1 +453,5 @@\n-  mode getMode() const {\n+  extend const &ext() const {\n+    precond(_mode != no_mode && _mode != addr_literal);\n+    return _extend;\n+  }\n+  addr_mode mode() const {\n@@ -458,2 +460,19 @@\n-  bool uses(Register reg) const { return _base == reg || _index == reg; }\n-  address target() const { return _target; }\n+  bool uses(Register reg) const {\n+    precond(_mode != no_mode && _mode != addr_literal);\n+    switch (_mode) {\n+      case base_plus_offset:\n+      case post:\n+      case pre:\n+        return _base == reg;\n+      case base_plus_offset_reg:\n+      case post_reg:\n+        return _base == reg || _index == reg;\n+      default:\n+        break;\n+    }\n+    return false;\n+  }\n+  address target() const {\n+    precond(_mode == addr_literal);\n+    return _target;\n+  }\n@@ -464,1 +483,1 @@\n-    i->srf(_base, 5);\n+    i->srf(base(), 5);\n@@ -475,2 +494,2 @@\n-        assert(offset_ok_for_immed(_offset, size),\n-               \"must be, was: \" INT64_FORMAT \", %d\", _offset, size);\n+        assert(offset_ok_for_immed(offset(), size),\n+               \"must be, was: \" INT64_FORMAT \", %d\", offset(), size);\n@@ -478,1 +497,1 @@\n-        if (_offset < 0 || _offset & mask) {\n+        if (offset() < 0 || offset() & mask) {\n@@ -481,1 +500,1 @@\n-          i->sf(_offset, 20, 12);\n+          i->sf(offset(), 20, 12);\n@@ -484,1 +503,1 @@\n-          i->f(_offset >> size, 21, 10);\n+          i->f(offset() >> size, 21, 10);\n@@ -493,2 +512,2 @@\n-        i->rf(_index, 16);\n-        i->f(_ext.option(), 15, 13);\n+        i->rf(index(), 16);\n+        i->f(ext().option(), 15, 13);\n@@ -502,1 +521,1 @@\n-          i->f(_ext.shift() >= 0, 12);\n+          i->f(ext().shift() >= 0, 12);\n@@ -504,2 +523,2 @@\n-          assert(_ext.shift() <= 0 || _ext.shift() == (int)size, \"bad shift\");\n-          i->f(_ext.shift() > 0, 12);\n+          assert(ext().shift() <= 0 || ext().shift() == (int)size, \"bad shift\");\n+          i->f(ext().shift() > 0, 12);\n@@ -514,1 +533,1 @@\n-      i->sf(_offset, 20, 12);\n+      i->sf(offset(), 20, 12);\n@@ -520,1 +539,1 @@\n-      i->sf(_offset, 20, 12);\n+      i->sf(offset(), 20, 12);\n@@ -562,3 +581,3 @@\n-    guarantee(_offset % size == 0, \"bad offset\");\n-    i->sf(_offset \/ size, 21, 15);\n-    i->srf(_base, 5);\n+    guarantee(offset() % size == 0, \"bad offset\");\n+    i->sf(offset() \/ size, 21, 15);\n+    i->srf(base(), 5);\n@@ -572,3 +591,3 @@\n-    guarantee(_offset % size == 0, \"bad offset\");\n-    i->sf(_offset \/ size, 21, 15);\n-    i->srf(_base, 5);\n+    guarantee(offset() % size == 0, \"bad offset\");\n+    i->sf(offset() \/ size, 21, 15);\n+    i->srf(base(), 5);\n@@ -598,5 +617,4 @@\n-\n-  public:\n-\n-  RuntimeAddress(address target) : Address(target, relocInfo::runtime_call_type) {}\n-\n+ public:\n+  RuntimeAddress(address target) : Address(target, relocInfo::runtime_call_type) {\n+    precond(target != nullptr);\n+  }\n@@ -606,5 +624,4 @@\n-\n-  public:\n-\n-  OopAddress(address target) : Address(target, relocInfo::oop_type){}\n-\n+ public:\n+  OopAddress(address target) : Address(target, relocInfo::oop_type) {\n+    precond(target != nullptr);\n+  }\n@@ -624,3 +641,3 @@\n-\n-  ExternalAddress(address target) : Address(target, reloc_for_target(target)) {}\n-\n+  ExternalAddress(address target) : Address(target, reloc_for_target(target)) {\n+    precond(target != nullptr);\n+  }\n@@ -630,4 +647,4 @@\n-\n-  public:\n-\n-  InternalAddress(address target) : Address(target, relocInfo::internal_word_type) {}\n+ public:\n+  InternalAddress(address target) : Address(target, relocInfo::internal_word_type) {\n+    precond(target != nullptr);\n+  }\n@@ -1428,1 +1445,1 @@\n-    if (adr.getMode() == Address::literal) {\n+    if (adr.mode() == Address::addr_literal) {\n@@ -2270,1 +2287,1 @@\n-    switch (a.getMode()) {\n+    switch (a.mode()) {\n@@ -3192,1 +3209,1 @@\n-    switch (a.getMode()) {\n+    switch (a.mode()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":99,"deletions":82,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  precond(addr.getMode() == Address::base_plus_offset);\n+  precond(addr.mode() == Address::base_plus_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-    RuntimeAddress stub = NULL;\n+    address entry = nullptr;\n@@ -289,2 +289,1 @@\n-      stub = RuntimeAddress(StubRoutines::aarch64::string_indexof_linear_ll());\n-      assert(stub.target() != NULL, \"string_indexof_linear_ll stub has not been generated\");\n+      entry = StubRoutines::aarch64::string_indexof_linear_ll();\n@@ -292,2 +291,1 @@\n-      stub = RuntimeAddress(StubRoutines::aarch64::string_indexof_linear_ul());\n-       assert(stub.target() != NULL, \"string_indexof_linear_ul stub has not been generated\");\n+      entry = StubRoutines::aarch64::string_indexof_linear_ul();\n@@ -295,2 +293,1 @@\n-      stub = RuntimeAddress(StubRoutines::aarch64::string_indexof_linear_uu());\n-      assert(stub.target() != NULL, \"string_indexof_linear_uu stub has not been generated\");\n+      entry = StubRoutines::aarch64::string_indexof_linear_uu();\n@@ -298,0 +295,2 @@\n+    assert(entry != nullptr, \"string_indexof_linear stub has not been generated\");\n+    RuntimeAddress stub(entry);\n@@ -839,1 +838,1 @@\n-    RuntimeAddress stub = NULL;\n+    address entry = nullptr;\n@@ -842,1 +841,1 @@\n-        stub = RuntimeAddress(StubRoutines::aarch64::compare_long_string_LL());\n+        entry = StubRoutines::aarch64::compare_long_string_LL();\n@@ -845,1 +844,1 @@\n-        stub = RuntimeAddress(StubRoutines::aarch64::compare_long_string_UU());\n+        entry = StubRoutines::aarch64::compare_long_string_UU();\n@@ -848,1 +847,1 @@\n-        stub = RuntimeAddress(StubRoutines::aarch64::compare_long_string_LU());\n+        entry = StubRoutines::aarch64::compare_long_string_LU();\n@@ -851,1 +850,1 @@\n-        stub = RuntimeAddress(StubRoutines::aarch64::compare_long_string_UL());\n+        entry = StubRoutines::aarch64::compare_long_string_UL();\n@@ -856,1 +855,2 @@\n-    assert(stub.target() != NULL, \"compare_long_string stub has not been generated\");\n+    assert(entry != nullptr, \"compare_long_string stub has not been generated\");\n+    RuntimeAddress stub(entry);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -815,1 +815,5 @@\n-    lea(recv_klass, Address(recv_klass, itable_index, Address::lsl(3)));\n+    if (itable_index.is_constant()) {\n+        lea(recv_klass, Address(recv_klass, itable_index.as_constant() * 8));\n+    } else {\n+        lea(recv_klass, Address(recv_klass, itable_index, Address::lsl(3)));\n+    }\n@@ -1657,1 +1661,1 @@\n-    if (adr.getMode() == Address::base_plus_offset &&\n+    if (adr.mode() == Address::base_plus_offset &&\n@@ -1789,1 +1793,1 @@\n-  if (dst.getMode() == Address::literal) {\n+  if (dst.mode() == Address::addr_literal) {\n@@ -1802,1 +1806,1 @@\n-  if (dst.getMode() == Address::literal) {\n+  if (dst.mode() == Address::addr_literal) {\n@@ -1839,1 +1843,1 @@\n-  if (dst.getMode() == Address::literal) {\n+  if (dst.mode() == Address::addr_literal) {\n@@ -1852,1 +1856,1 @@\n-  if (dst.getMode() == Address::literal) {\n+  if (dst.mode() == Address::addr_literal) {\n@@ -2732,1 +2736,1 @@\n-  if (adr.getMode() != Address::base_plus_offset || prev != last) {\n+  if (adr.mode() != Address::base_plus_offset || prev != last) {\n@@ -3659,1 +3663,1 @@\n-  switch(dst.getMode()) {\n+  switch(dst.mode()) {\n@@ -4268,1 +4272,1 @@\n-  assert(dest.getMode() == Address::literal, \"ADRP must be applied to a literal address\");\n+  assert(dest.mode() == Address::addr_literal, \"ADRP must be applied to a literal address\");\n@@ -5184,1 +5188,1 @@\n-  assert(line.getMode() == Address::base_plus_offset, \"mode should be base_plus_offset\");\n+  assert(line.mode() == Address::base_plus_offset, \"mode should be base_plus_offset\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    if (a.getMode() == Address::base_plus_offset) {\n+    if (a.mode() == Address::base_plus_offset) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}