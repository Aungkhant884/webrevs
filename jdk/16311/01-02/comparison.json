{"files":[{"patch":"@@ -110,0 +110,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -117,0 +120,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -122,1 +127,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -181,0 +181,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -380,0 +383,3 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -763,1 +763,1 @@\n-    fatal(\"UpcallStub allocation failed. CodeCache is too small\");\n+    return nullptr; \/\/ caller must handle this\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,4 +79,8 @@\n-  return (jlong) DowncallLinker::make_downcall_stub(basic_type, pslots, ret_bt, abi,\n-                                                    input_regs, output_regs,\n-                                                    needs_return_buffer, captured_state_mask,\n-                                                    needs_transition)->code_begin();\n+  RuntimeStub* stub = DowncallLinker::make_downcall_stub(basic_type, pslots, ret_bt, abi,\n+                                                         input_regs, output_regs,\n+                                                         needs_return_buffer, captured_state_mask,\n+                                                         needs_transition);\n+  if (stub == nullptr) {\n+    return 0;\n+  }\n+  return (jlong) stub->code_begin();\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -532,0 +532,1 @@\n+     * @throws OutOfMemoryError if the runtime does not have the memory needed to create the downcall handle.\n@@ -581,0 +582,1 @@\n+     * @throws OutOfMemoryError if the runtime does not have the memory needed to create the downcall handle.\n@@ -621,0 +623,1 @@\n+     * @throws OutOfMemoryError if the runtime does not have the memory needed to create the upcall stub.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+            if (downcallStub == 0) {\n+                throw new OutOfMemoryError(\"Failed to allocate downcall stub\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,0 +109,3 @@\n+            if (entryPoint == 0) {\n+                throw new OutOfMemoryError(\"Failed to allocate upcall stub\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+                .assertFailed()\n","filename":"test\/jdk\/java\/foreign\/TestAddressDereference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library ..\/ \/test\/lib\n+ * @requires jdk.foreign.linker != \"FALLBACK\"\n+ * @run testng\/othervm\/native\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   TestStubAllocFailure\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+public class TestStubAllocFailure extends UpcallTestHelper {\n+\n+    @Test\n+    public void testUpcallAllocFailure() throws IOException, InterruptedException {\n+        runInNewProcess(UpcallRunner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n+                .assertSuccess();\n+    }\n+\n+    @Test\n+    public void testUDowncallAllocFailure() throws IOException, InterruptedException {\n+        runInNewProcess(DowncallRunner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n+                .assertSuccess();\n+    }\n+\n+    public static class UpcallRunner extends NativeTestHelper {\n+        public static void main(String[] args) throws Throwable {\n+            try (Arena arena = Arena.ofConfined()) {\n+                while (true) {\n+                    \/\/ allocate stubs until we crash\n+                    upcallStub(UpcallRunner.class, \"target\", FunctionDescriptor.ofVoid(), arena);\n+                }\n+            } catch (OutOfMemoryError e) {\n+                assertTrue(e.getMessage().contains(\"Failed to allocate upcall stub\"));\n+            }\n+        }\n+\n+        public static void target() {\n+            fail(\"Should not get here\");\n+        }\n+    }\n+\n+    public static class DowncallRunner extends NativeTestHelper {\n+\n+        private static final int MAX_ARITY = 5;\n+\n+        private static void mapper(FunctionDescriptor fd, Consumer<FunctionDescriptor> sink) {\n+            for (MemoryLayout l : List.of(C_INT, C_LONG_LONG, C_DOUBLE, C_FLOAT, C_SHORT)) {\n+                sink.accept(fd.appendArgumentLayouts(l));\n+            }\n+        }\n+\n+        public static void main(String[] args) throws Throwable {\n+            Linker linker = Linker.nativeLinker();\n+            Stream<FunctionDescriptor> stream = Stream.of(FunctionDescriptor.ofVoid());\n+            for (int i = 0; i < MAX_ARITY; i++) {\n+                stream = stream.mapMulti(DowncallRunner::mapper);\n+            }\n+\n+            try {\n+                stream.forEach(linker::downcallHandle);\n+            } catch (OutOfMemoryError e) {\n+                assertTrue(e.getMessage().contains(\"Failed to allocate downcall stub\"));\n+            } catch (VirtualMachineError e) {\n+                \/\/ Other allocation failure when creating MethodHandle. Let it pass\n+                \/\/ The important thing for this test is that we don't see a hard VM crash\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestStubAllocFailure.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -51,0 +51,1 @@\n+                .assertFailed()\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library ..\/ \/test\/lib\n- * @requires jdk.foreign.linker != \"FALLBACK\"\n- * @run testng\/othervm\/native\n- *   --enable-native-access=ALL-UNNAMED\n- *   TestUpcallStubAllocFailure\n- *\/\n-\n-import java.lang.foreign.*;\n-import java.io.IOException;\n-import java.util.List;\n-\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.fail;\n-\n-public class TestUpcallStubAllocFailure extends UpcallTestHelper {\n-\n-    @Test\n-    public void testUpcallFailure() throws IOException, InterruptedException {\n-        runInNewProcess(Runner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n-            .assertStdOutContains(\"UpcallStub allocation failed. CodeCache is too small\");\n-    }\n-\n-    public static class Runner extends NativeTestHelper {\n-        public static void main(String[] args) throws Throwable {\n-            try (Arena arena = Arena.ofConfined()) {\n-                while (true) {\n-                    \/\/ allocate stubs until we crash\n-                    upcallStub(Runner.class, \"target\", FunctionDescriptor.ofVoid(), arena);\n-                }\n-            }\n-        }\n-\n-        public static void target() {\n-            fail(\"Should not get here\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubAllocFailure.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -35,0 +35,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -39,1 +40,1 @@\n-    public record Output(List<String> stdout, List<String> stderr) {\n+    public record Output(int result, List<String> stdout, List<String> stderr) {\n@@ -45,0 +46,10 @@\n+        public Output assertFailed() {\n+            assertNotEquals(result, 0);\n+            return this;\n+        }\n+\n+        public Output assertSuccess() {\n+            assertEquals(result, 0);\n+            return this;\n+        }\n+\n@@ -77,1 +88,0 @@\n-        assertNotEquals(process.exitValue(), 0);\n@@ -84,1 +94,1 @@\n-        return new Output(outLines, errLines);\n+        return new Output(process.exitValue(), outLines, errLines);\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        runInNewProcess(Runner.class, spec).assertStdErrContains(\"Heap segment not allowed\");\n+        runInNewProcess(Runner.class, spec).assertFailed().assertStdErrContains(\"Heap segment not allowed\");\n","filename":"test\/jdk\/java\/foreign\/passheapsegment\/TestPassHeapSegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        runInNewProcess(Runner.class, true).assertStdOutContains(\"wrong thread state for upcall\");\n+        runInNewProcess(Runner.class, true).assertFailed().assertStdOutContains(\"wrong thread state for upcall\");\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestCriticalUpcall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}