{"files":[{"patch":"@@ -762,0 +762,4 @@\n+  if (blob == nullptr) {\n+    fatal(\"UpcallStub allocation failed. CodeCache is too small\");\n+  }\n+\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -178,0 +178,4 @@\n+        return upcallStub(holder, name, descriptor, Arena.ofAuto());\n+    }\n+\n+    public static MemorySegment upcallStub(Class<?> holder, String name, FunctionDescriptor descriptor, Arena arena) {\n@@ -180,1 +184,1 @@\n-            return LINKER.upcallStub(target, descriptor, Arena.ofAuto());\n+            return LINKER.upcallStub(target, descriptor, arena);\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library ..\/ \/test\/lib\n+ * @requires jdk.foreign.linker != \"FALLBACK\"\n+ * @run testng\/othervm\/native\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   TestUpcallStubAllocFailure\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.fail;\n+\n+public class TestUpcallStubAllocFailure extends UpcallTestHelper {\n+\n+    @Test\n+    public void testUpcallFailure() throws IOException, InterruptedException {\n+        runInNewProcess(Runner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n+            .assertStdOutContains(\"UpcallStub allocation failed. CodeCache is too small\");\n+    }\n+\n+    public static class Runner extends NativeTestHelper {\n+        public static void main(String[] args) throws Throwable {\n+            try (Arena arena = Arena.ofConfined()) {\n+                while (true) {\n+                    \/\/ allocate stubs until we crash\n+                    upcallStub(Runner.class, \"target\", FunctionDescriptor.ofVoid(), arena);\n+                }\n+            }\n+        }\n+\n+        public static void target() {\n+            fail(\"Should not get here\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubAllocFailure.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.test.lib.Utils;\n@@ -31,1 +32,0 @@\n-import java.util.Arrays;\n@@ -33,0 +33,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -56,0 +57,4 @@\n+        return runInNewProcess(target, useSpec, List.of(), List.of(programArgs));\n+    }\n+\n+    public Output runInNewProcess(Class<?> target, boolean useSpec, List<String> vmArgs, List<String> programArgs) throws IOException, InterruptedException {\n@@ -61,2 +66,1 @@\n-            \"-Djdk.internal.foreign.UpcallLinker.USE_SPEC=\" + useSpec,\n-            target.getName()\n+            \"-Djdk.internal.foreign.UpcallLinker.USE_SPEC=\" + useSpec\n@@ -64,1 +68,3 @@\n-        command.addAll(Arrays.asList(programArgs));\n+        command.addAll(vmArgs);\n+        command.add(target.getName());\n+        command.addAll(programArgs);\n@@ -68,2 +74,4 @@\n-        int result = process.waitFor();\n-        assertNotEquals(result, 0);\n+        long timeOut = (long) (Utils.TIMEOUT_FACTOR * 1L);\n+        boolean completed = process.waitFor(timeOut, TimeUnit.MINUTES);\n+        assertTrue(completed, \"Time out while waiting for process\");\n+        assertNotEquals(process.exitValue(), 0);\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}