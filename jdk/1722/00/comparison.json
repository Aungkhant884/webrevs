{"files":[{"patch":"@@ -344,0 +344,7 @@\n+\n+        \/\/ RepaintManager does not repaint iconified windows. Window needs to be\n+        \/\/ repainted explicitly, when it is deiconified.\n+        if (((changed & Frame.ICONIFIED) != 0) &&\n+            ((state & Frame.ICONIFIED) == 0)) {\n+            repaint();\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XFramePeer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8255880\n+   @key headful\n+   @summary Swing components, whose internal state changed while a frame was\n+            iconified, are not redrawn after the frame becomes deiconified.\n+   @requires (os.family == \"linux\" | os.family == \"solaris\")\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+\n+public class RepaintOnFrameIconifiedStateChangeTest {\n+    private static final String[][] strsForComps = new String[][] {\n+        {\"JLabel AAA\", \"JLabel BBB\"},\n+        {\"JButton AAA\", \"JButton BBB\"}};\n+    private static final int lblIndex = 0;\n+    private static final int btnIndex = 1;\n+\n+    private static volatile JFrame frame;\n+    private static volatile JLabel label;\n+    private static volatile JButton button;\n+    private static volatile JComponent[] comps = new JComponent[2];\n+    private static volatile boolean[] compRedrawn = new boolean[2];\n+    private static volatile boolean compRedrawnFlagCanBeSet = false;\n+\n+    public static void main(String[] args) {\n+        Toolkit toolkit = Toolkit.getDefaultToolkit();\n+        if (!toolkit.isFrameStateSupported(JFrame.ICONIFIED) ||\n+            !toolkit.isFrameStateSupported(JFrame.NORMAL)) {\n+            System.out.println(\"ICONIFIED or NORMAL frame states are not\" +\n+                \"supported by a toolkit.\");\n+            return;\n+        }\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"Creating GUI...\");\n+                    createGUI();\n+                }\n+            });\n+            Robot robot = new Robot();\n+            robot.delay(2000);\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"Minimizing the frame...\");\n+                    frame.setExtendedState(JFrame.ICONIFIED);\n+                }\n+            });\n+            robot.delay(2000);\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"Changing states of components...\");\n+                    label.setText(strsForComps[lblIndex][1]);\n+                    button.setText(strsForComps[btnIndex][1]);\n+                }\n+            });\n+            robot.delay(2000);\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"Restoring the frame...\");\n+                    for (int i = 0; i < compRedrawn.length; i++) {\n+                        compRedrawn[i] = false;\n+                    }\n+                    compRedrawnFlagCanBeSet = true;\n+\n+                    frame.setExtendedState(JFrame.NORMAL);\n+                    frame.toFront();\n+                }\n+            });\n+            robot.delay(2000);\n+\n+            int notRedrawnCompsCount = 0;\n+            for (int i = 0; i < compRedrawn.length; i++) {\n+                if (!compRedrawn[i]) {\n+                    notRedrawnCompsCount++;\n+                    System.out.println(String.format(\n+                            \"Not redrawn component #%d: '%s'\", i, comps[i]));\n+                }\n+            }\n+            if (notRedrawnCompsCount > 0) {\n+                throw new RuntimeException(String.format(\n+                        \"'%d' components were not redrawn.\",\n+                        notRedrawnCompsCount));\n+            }\n+            System.out.println(\"Test passed.\");\n+        } catch (InterruptedException | InvocationTargetException |\n+            AWTException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (frame != null) {\n+                            frame.dispose();\n+                            frame = null;\n+                        }\n+                    }\n+                });\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private static void createGUI() {\n+        if (!(UIManager.getLookAndFeel() instanceof MetalLookAndFeel)) {\n+            try {\n+                UIManager.setLookAndFeel(new MetalLookAndFeel());\n+            } catch (UnsupportedLookAndFeelException ulafe) {\n+                throw new RuntimeException(ulafe);\n+            }\n+        }\n+\n+        frame = new JFrame(\"RepaintOnFrameIconifiedStateChangeTest\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        Container content = frame.getContentPane();\n+        content.setLayout(new FlowLayout());\n+\n+        comps[lblIndex] = label = new JLabel(strsForComps[lblIndex][0]) {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                if (compRedrawnFlagCanBeSet) {\n+                    compRedrawn[lblIndex] = true;\n+                }\n+            }\n+        };\n+        label.setPreferredSize(new Dimension(150, 50));\n+        content.add(label);\n+\n+        comps[btnIndex] = button = new JButton(strsForComps[btnIndex][0]) {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                if (compRedrawnFlagCanBeSet) {\n+                    compRedrawn[btnIndex] = true;\n+                }\n+            }\n+        };\n+        button.setPreferredSize(new Dimension(200, 50));\n+        button.setFocusable(false);\n+        content.add(button);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/8255880\/RepaintOnFrameIconifiedStateChangeTest.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"}]}