{"files":[{"patch":"@@ -402,0 +402,5 @@\n+  \/\/ Dump compilation data to replay it.\n+  if (_directive->DumpReplayOption) {\n+    env()->dump_replay_data(env()->compile_id());\n+  }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -255,1 +255,5 @@\n-        try(BufferedReader br = new BufferedReader(new FileReader(REPLAY_FILE_NAME))) {\n+        return getCompLevelFromReplay(REPLAY_FILE_NAME);\n+    }\n+\n+    public int getCompLevelFromReplay(String replayFile) {\n+        try (BufferedReader br = new BufferedReader(new FileReader(replayFile))) {\n@@ -257,5 +261,5 @@\n-                    .filter(s -> s.startsWith(\"compile \"))\n-                    .map(s -> s.split(\"\\\\s+\")[5])\n-                    .map(Integer::parseInt)\n-                    .findAny()\n-                    .get();\n+                     .filter(s -> s.startsWith(\"compile \"))\n+                     .map(s -> s.split(\"\\\\s+\")[5])\n+                     .map(Integer::parseInt)\n+                     .findAny()\n+                     .orElseThrow();\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276044\n+ * @library \/ \/test\/lib\n+ * @summary Testing that a replay file is dumped for C1 and C2 when using the DumpReplay compile command option.\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.compMode != \"Xcomp\" & vm.debug == true\n+ *           & vm.compiler1.enabled & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+TieredCompilation\n+ *      compiler.ciReplay.TestDumpReplayCommandLine\n+ *\/\n+\n+package compiler.ciReplay;\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestDumpReplayCommandLine extends DumpReplayBase {\n+\n+    public static void main(String[] args) {\n+        new TestDumpReplayCommandLine().runTest(TIERED_ENABLED_VM_OPTION);\n+    }\n+\n+    @Override\n+    public void testAction() {\n+        List<File> replayFiles = getReplayFiles();\n+        Asserts.assertEQ(2, replayFiles.size(), \"should find a C1 and a C2 replay file\");\n+        String replayFile1 = replayFiles.get(0).getName();\n+        String replayFile2 = replayFiles.get(1).getName();\n+        int compileId1 = getCompileIdFromFile(replayFile1);\n+        int compileId2 = getCompileIdFromFile(replayFile2);\n+        int compLevel1 = getCompLevelFromReplay(replayFile1);\n+        int compLevel2 = getCompLevelFromReplay(replayFile2);\n+        Asserts.assertEQ(compileId1 < compileId2 ? compLevel1 : compLevel2, 3, \"Must be C1 replay file\");\n+        Asserts.assertEQ(compileId1 < compileId2 ? compLevel2 : compLevel1, 4, \"Must be C2 replay file\");\n+    }\n+\n+    @Override\n+    public String getTestClass() {\n+        return TestDumpReplayCommandFoo.class.getName();\n+    }\n+}\n+\n+class TestDumpReplayCommandFoo {\n+    public static int iFld;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+\n+    public static void test() {\n+        for (int i = 0; i < 1; i++) {\n+            iFld = 3;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestDumpReplayCommandLine.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}