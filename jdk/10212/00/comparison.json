{"files":[{"patch":"@@ -112,1 +112,1 @@\n-  address _dumped_obj;\n+  address _buffered_obj;\n@@ -115,2 +115,2 @@\n-  RelocateEmbeddedPointers(ArchiveBuilder* builder, address dumped_obj, BitMap::idx_t start_idx) :\n-    _builder(builder), _dumped_obj(dumped_obj), _start_idx(start_idx) {}\n+  RelocateEmbeddedPointers(ArchiveBuilder* builder, address buffered_obj, BitMap::idx_t start_idx) :\n+    _builder(builder), _buffered_obj(buffered_obj), _start_idx(start_idx) {}\n@@ -120,1 +120,1 @@\n-    address* ptr_loc = (address*)(_dumped_obj + field_offset);\n+    address* ptr_loc = (address*)(_buffered_obj + field_offset);\n@@ -123,1 +123,1 @@\n-    address new_p = _builder->get_dumped_addr(old_p);\n+    address new_p = _builder->get_buffered_addr(old_p);\n@@ -139,1 +139,1 @@\n-  RelocateEmbeddedPointers relocator(builder, src_info->dumped_addr(), start);\n+  RelocateEmbeddedPointers relocator(builder, src_info->buffered_addr(), start);\n@@ -161,1 +161,1 @@\n-  _dumped_to_src_obj_table(INITIAL_TABLE_SIZE, MAX_TABLE_SIZE),\n+  _buffered_to_src_table(INITIAL_TABLE_SIZE, MAX_TABLE_SIZE),\n@@ -635,1 +635,1 @@\n-    _dumped_to_src_obj_table.put_if_absent((address)dest, src, &created);\n+    _buffered_to_src_table.put_if_absent((address)dest, src, &created);\n@@ -637,2 +637,2 @@\n-    if (_dumped_to_src_obj_table.maybe_grow()) {\n-      log_info(cds, hashtables)(\"Expanded _dumped_to_src_obj_table table to %d\", _dumped_to_src_obj_table.table_size());\n+    if (_buffered_to_src_table.maybe_grow()) {\n+      log_info(cds, hashtables)(\"Expanded _buffered_to_src_table table to %d\", _buffered_to_src_table.table_size());\n@@ -649,1 +649,1 @@\n-  src_info->set_dumped_addr((address)dest);\n+  src_info->set_buffered_addr((address)dest);\n@@ -654,2 +654,2 @@\n-address ArchiveBuilder::get_dumped_addr(address src_obj) const {\n-  SourceObjInfo* p = _src_obj_table.get(src_obj);\n+address ArchiveBuilder::get_buffered_addr(address src_addr) const {\n+  SourceObjInfo* p = _src_obj_table.get(src_addr);\n@@ -658,1 +658,1 @@\n-  return p->dumped_addr();\n+  return p->buffered_addr();\n@@ -661,5 +661,5 @@\n-address ArchiveBuilder::get_src_obj(address dumped_addr) const {\n-  assert(is_in_buffer_space(dumped_addr), \"must be\");\n-  address* src_obj = _dumped_to_src_obj_table.get(dumped_addr);\n-  assert(src_obj != NULL && *src_obj != NULL, \"must be\");\n-  return *src_obj;\n+address ArchiveBuilder::get_source_addr(address buffered_addr) const {\n+  assert(is_in_buffer_space(buffered_addr), \"must be\");\n+  address* src_p = _buffered_to_src_table.get(buffered_addr);\n+  assert(src_p != NULL && *src_p != NULL, \"must be\");\n+  return *src_p;\n@@ -679,1 +679,1 @@\n-    address dst_obj = get_dumped_addr(src_obj);\n+    address dst_obj = get_buffered_addr(src_obj);\n@@ -697,1 +697,1 @@\n-      ref->update(_builder->get_dumped_addr(ref->obj()));\n+      ref->update(_builder->get_buffered_addr(ref->obj()));\n@@ -832,3 +832,3 @@\n-\/\/ Update a Java object to point its Klass* to the new location after\n-\/\/ shared archive has been compacted.\n-void ArchiveBuilder::relocate_klass_ptr(oop o) {\n+\/\/ Update a Java object to point its Klass* to the address whene\n+\/\/ the class would be mapped at runtime.\n+void ArchiveBuilder::relocate_klass_ptr_of_oop(oop o) {\n@@ -836,1 +836,1 @@\n-  Klass* k = get_relocated_klass(o->klass());\n+  Klass* k = get_buffered_klass(o->klass());\n@@ -984,2 +984,2 @@\n-      address src = src_info->orig_obj();\n-      address dest = src_info->dumped_addr();\n+      address src = src_info->source_addr();\n+      address dest = src_info->buffered_addr();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -64,0 +64,28 @@\n+\/\/\n+\/\/ \"source\" vs \"buffered\" vs \"requested\"\n+\/\/\n+\/\/ The ArchiveBuilder deals with three types of addresses.\n+\/\/\n+\/\/ \"source\":    These are the addresses of objects created in step [1] above. They are the actual\n+\/\/              InstanceKlass*, Method*, etc, of the Java classes that are loaded for executing\n+\/\/              Java bytecodes in the JVM process that's dumping the CDS archive.\n+\/\/\n+\/\/              It may be necessary to contiue Java execution after ArchiveBuilder is finished.\n+\/\/              Therefore, we don't modify any of the \"source\" objects.\n+\/\/\n+\/\/ \"buffered\":  The \"source\" objects that are deemed archivable are copied into a temporary buffer.\n+\/\/              Objects in the buffer are modified in steps [2, 3, 4] (e.g., unshareable info is\n+\/\/              removed, pointers are relocated, etc) to prepare them to be loaded at runtime.\n+\/\/\n+\/\/ \"requested\": These are the addreses where the \"buffered\" objects should be loaded at runtime.\n+\/\/              When the \"buffered\" objects are written into the archive file, their addresses\n+\/\/              are adjusted in step [5] such that the lowest of these objects would be mapped\n+\/\/              at SharedBaseAddress.\n+\/\/\n+\/\/ Translation between \"source\" and \"buffered\" addresses is done with two hashtables:\n+\/\/     _src_obj_table          : \"source\"   -> \"buffered\"\n+\/\/     _buffered_to_src_table  : \"buffered\" -> \"source\"\n+\/\/\n+\/\/ Translation between \"buffered\" and \"requested\" addresses is done with a simple shift:\n+\/\/    buffered_address + _buffer_to_requested_delta == requested_address\n+\/\/\n@@ -115,1 +143,1 @@\n-    MetaspaceClosure::Ref* _ref;\n+    MetaspaceClosure::Ref* _ref; \/\/ The object that's copied into the buffer\n@@ -122,2 +150,1 @@\n-    address _dumped_addr;    \/\/ Address this->obj(), as used by the dumped archive.\n-    address _orig_obj;       \/\/ The value of the original object (_ref->obj()) when this\n+    address _source_addr;    \/\/ The value of the source object (_ref->obj()) when this\n@@ -126,1 +153,1 @@\n-\n+    address _buffered_addr;  \/\/ The copy of _ref->obj() insider the buffer.\n@@ -131,1 +158,1 @@\n-      _orig_obj(ref->obj()) {\n+      _source_addr(ref->obj()) {\n@@ -133,1 +160,1 @@\n-        _dumped_addr = ref->obj();\n+        _buffered_addr = ref->obj();\n@@ -135,1 +162,1 @@\n-        _dumped_addr = NULL;\n+        _buffered_addr = NULL;\n@@ -141,1 +168,1 @@\n-    void set_dumped_addr(address dumped_addr)  {\n+    void set_buffered_addr(address addr)  {\n@@ -143,3 +170,3 @@\n-      assert(_dumped_addr == NULL, \"cannot be copied twice\");\n-      assert(dumped_addr != NULL, \"must be a valid copy\");\n-      _dumped_addr = dumped_addr;\n+      assert(_buffered_addr == NULL, \"cannot be copied twice\");\n+      assert(addr != NULL, \"must be a valid copy\");\n+      _buffered_addr = addr;\n@@ -153,2 +180,2 @@\n-    address orig_obj()    const    { return _orig_obj; }\n-    address dumped_addr() const    { return _dumped_addr; }\n+    address source_addr() const    { return _source_addr; }\n+    address buffered_addr() const  { return _buffered_addr; }\n@@ -203,1 +230,1 @@\n-  ResizeableResourceHashtable<address, address, ResourceObj::C_HEAP, mtClassShared> _dumped_to_src_obj_table;\n+  ResizeableResourceHashtable<address, address, ResourceObj::C_HEAP, mtClassShared> _buffered_to_src_table;\n@@ -387,10 +414,4 @@\n-  \/\/ + When creating a CDS archive, we first load Java classes and create metadata\n-  \/\/   objects as usual. These are call \"source\" objects.\n-  \/\/ + We then copy the source objects into the output buffer at \"dumped addresses\".\n-  \/\/\n-  \/\/ The following functions translate between these two (non-overlapping) spaces.\n-  \/\/ (The API should be renamed to be less confusing!)\n-  address get_dumped_addr(address src_obj) const;\n-  address get_src_obj(address dumped_addr) const;\n-  template <typename T> T get_src_obj(T dumped_addr) const {\n-    return (T)get_src_obj((address)dumped_addr);\n+  address get_buffered_addr(address src_addr) const;\n+  address get_source_addr(address buffered_addr) const;\n+  template <typename T> T get_source_addr(T buffered_addr) const {\n+    return (T)get_source_addr((address)buffered_addr);\n@@ -425,1 +446,1 @@\n-  void relocate_klass_ptr(oop o);\n+  void relocate_klass_ptr_of_oop(oop o);\n@@ -427,2 +448,2 @@\n-  static Klass* get_relocated_klass(Klass* orig_klass) {\n-    Klass* klass = (Klass*)current()->get_dumped_addr((address)orig_klass);\n+  static Klass* get_buffered_klass(Klass* src_klass) {\n+    Klass* klass = (Klass*)current()->get_buffered_addr((address)src_klass);\n@@ -433,2 +454,2 @@\n-  static Symbol* get_relocated_symbol(Symbol* orig_symbol) {\n-    return (Symbol*)current()->get_dumped_addr((address)orig_symbol);\n+  static Symbol* get_buffered_symbol(Symbol* src_symbol) {\n+    return (Symbol*)current()->get_buffered_addr((address)src_symbol);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":50,"deletions":29,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -61,4 +61,0 @@\n-  template <typename T> T get_dumped_addr(T obj) {\n-    return (T)ArchiveBuilder::get_dumped_addr((address)obj);\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-    Klass* k = ArchiveBuilder::get_relocated_klass(klasses->at(i));\n+    Klass* k = ArchiveBuilder::get_buffered_klass(klasses->at(i));\n@@ -380,1 +380,1 @@\n-  Klass* relocated_k = ArchiveBuilder::get_relocated_klass(k);\n+  Klass* buffered_k = ArchiveBuilder::get_buffered_klass(k);\n@@ -388,1 +388,1 @@\n-    relocated_k->set_has_archived_enum_objs();\n+    buffered_k->set_has_archived_enum_objs();\n@@ -570,2 +570,2 @@\n-\/\/ there is no existing one for k. The subgraph_info records the relocated\n-\/\/ Klass* of the original k.\n+\/\/ there is no existing one for k. The subgraph_info records the \"buffered\"\n+\/\/ address of the class.\n@@ -575,1 +575,1 @@\n-  Klass* relocated_k = ArchiveBuilder::get_relocated_klass(k);\n+  Klass* buffered_k = ArchiveBuilder::get_buffered_klass(k);\n@@ -577,1 +577,1 @@\n-    _dump_time_subgraph_info_table->put_if_absent(k, KlassSubGraphInfo(relocated_k, is_full_module_graph),\n+    _dump_time_subgraph_info_table->put_if_absent(k, KlassSubGraphInfo(buffered_k, is_full_module_graph),\n@@ -606,1 +606,1 @@\n-  Klass* relocated_k = ArchiveBuilder::get_relocated_klass(orig_k);\n+  Klass* buffered_k = ArchiveBuilder::get_buffered_klass(orig_k);\n@@ -613,1 +613,1 @@\n-  assert(ArchiveBuilder::current()->is_in_buffer_space(relocated_k), \"must be a shared class\");\n+  assert(ArchiveBuilder::current()->is_in_buffer_space(buffered_k), \"must be a shared class\");\n@@ -615,1 +615,1 @@\n-  if (_k == relocated_k) {\n+  if (_k == buffered_k) {\n@@ -621,2 +621,2 @@\n-  if (relocated_k->is_instance_klass()) {\n-    assert(InstanceKlass::cast(relocated_k)->is_shared_boot_class(),\n+  if (buffered_k->is_instance_klass()) {\n+    assert(InstanceKlass::cast(buffered_k)->is_shared_boot_class(),\n@@ -633,2 +633,2 @@\n-  } else if (relocated_k->is_objArray_klass()) {\n-    Klass* abk = ObjArrayKlass::cast(relocated_k)->bottom_klass();\n+  } else if (buffered_k->is_objArray_klass()) {\n+    Klass* abk = ObjArrayKlass::cast(buffered_k)->bottom_klass();\n@@ -640,1 +640,1 @@\n-    if (relocated_k == Universe::objectArrayKlassObj()) {\n+    if (buffered_k == Universe::objectArrayKlassObj()) {\n@@ -646,1 +646,1 @@\n-    assert(relocated_k->is_typeArray_klass(), \"must be\");\n+    assert(buffered_k->is_typeArray_klass(), \"must be\");\n@@ -652,1 +652,1 @@\n-    if (!_subgraph_object_klasses->contains(relocated_k)) {\n+    if (!_subgraph_object_klasses->contains(buffered_k)) {\n@@ -658,1 +658,1 @@\n-  _subgraph_object_klasses->append_if_missing(relocated_k);\n+  _subgraph_object_klasses->append_if_missing(buffered_k);\n@@ -770,2 +770,2 @@\n-      Klass* relocated_k = ArchiveBuilder::get_relocated_klass(klass);\n-      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary((address)relocated_k);\n+      Klass* buffered_k = ArchiveBuilder::get_buffered_klass(klass);\n+      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary((address)buffered_k);\n@@ -1789,1 +1789,1 @@\n-      builder->relocate_klass_ptr(o);\n+      builder->relocate_klass_ptr_of_oop(o);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1123,1 +1123,1 @@\n-  Klass* copy = ArchiveBuilder::get_relocated_klass(k);\n+  Klass* copy = ArchiveBuilder::get_buffered_klass(k);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-    _name = ArchiveBuilder::get_relocated_symbol(_name);\n+    _name = ArchiveBuilder::get_buffered_symbol(_name);\n@@ -458,1 +458,1 @@\n-    _version = ArchiveBuilder::get_relocated_symbol(_version);\n+    _version = ArchiveBuilder::get_buffered_symbol(_version);\n@@ -461,1 +461,1 @@\n-    _location = ArchiveBuilder::get_relocated_symbol(_location);\n+    _location = ArchiveBuilder::get_buffered_symbol(_location);\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-  _name = ArchiveBuilder::get_relocated_symbol(_name);\n+  _name = ArchiveBuilder::get_buffered_symbol(_name);\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -632,1 +632,1 @@\n-    Symbol* sym = ArchiveBuilder::get_relocated_symbol(symbols->at(i));\n+    Symbol* sym = ArchiveBuilder::get_buffered_symbol(symbols->at(i));\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}