{"files":[{"patch":"@@ -80,0 +80,1 @@\n+            System.out.println(\"Testing boot JDK\");\n@@ -104,1 +105,0 @@\n-        \/\/ Example path: bundles\/linux-x64\/jdk-19_linux-x64_bin.tar.gz\/jdk-19\/bin\/java\n@@ -172,1 +172,1 @@\n-    \/\/ If the artifact cannot be found, default to the test.boot.jdk property\n+    \/\/ If the artifact cannot be found, throw RuntimeException\n@@ -197,1 +197,1 @@\n-            architecture = \"x\";\n+            architecture = \"x64\";\n@@ -199,1 +199,1 @@\n-            architecture = \"aarch\";\n+            architecture = \"aarch64\";\n@@ -204,1 +204,1 @@\n-        \/\/ File name is bundles\/<os>-<architecture>64\/jdk-<version>_<os>-<architecture>64_bin.<extension>\n+        \/\/ File name is bundles\/<os>-<architecture>\/jdk-<version>_<os>-<architecture>_bin.<extension>\n@@ -207,1 +207,1 @@\n-            jdkArtifactMap.put(\"file\", \"bundles\/windows-x64\/jdk-\" + version + \"_windows-x64_bin.zip\");\n+            jdkArtifactMap.put(\"file\", \"bundles\/windows-\" + architecture + \"\/jdk-\" + version + \"_windows-\" + architecture + \"_bin.zip\");\n@@ -210,1 +210,1 @@\n-            jdkArtifactMap.put(\"file\", \"bundles\/macos-\" + architecture + \"64\/jdk-\" + version + \"_macos-\" + architecture + \"64_bin.tar.gz\");\n+            jdkArtifactMap.put(\"file\", \"bundles\/macos-\" + architecture + \"\/jdk-\" + version + \"_macos-\" + architecture + \"_bin.tar.gz\");\n@@ -213,1 +213,1 @@\n-            jdkArtifactMap.put(\"file\", \"bundles\/linux-\" + architecture + \"64\/jdk-\" + version + \"_linux-\" + architecture + \"64_bin.tar.gz\");\n+            jdkArtifactMap.put(\"file\", \"bundles\/linux-\" + architecture + \"\/jdk-\" + version + \"_linux-\" + architecture + \"_bin.tar.gz\");\n@@ -222,1 +222,0 @@\n-        String path = null;\n@@ -224,0 +223,1 @@\n+            String path = null;\n@@ -226,0 +226,1 @@\n+            return path;\n@@ -228,7 +229,2 @@\n-            if (cause == null) {\n-                System.out.println(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\");\n-            } else {\n-                throw new RuntimeException(\"Fetch artifact failed: \"\n-                        + \"\\nPlease make sure the artifact is available.\", e);\n-            }\n+            throw new RuntimeException(\"Fetch artifact failed: \"\n+                    + \"\\nPlease make sure the artifact is available.\", e);\n@@ -236,1 +232,0 @@\n-        return path;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"}]}