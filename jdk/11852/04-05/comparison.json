{"files":[{"patch":"@@ -38,2 +38,0 @@\n-import java.util.Properties;\n-import jdk.test.lib.artifacts.Artifact;\n@@ -50,2 +48,0 @@\n-    static final Properties props = System.getProperties();\n-\n@@ -62,2 +58,1 @@\n-    private static String OLD_JDK;\n-    private static String DEFAULT_OLD_JDK = System.getProperty(\"test.boot.jdk\", null);\n+    private static String BOOT_JDK = System.getProperty(\"test.boot.jdk\", null);\n@@ -66,1 +61,1 @@\n-    \/\/ If null, DEFAULT_OLD_JDK will be tested\n+    \/\/ If null, BOOT_JDK will be tested\n@@ -85,2 +80,1 @@\n-            OLD_JDK = DEFAULT_OLD_JDK;\n-            setupJVMs();\n+            setupJVMs(0);\n@@ -92,1 +86,2 @@\n-        for (int i = 0; i < versions.length && OLD_JDK != DEFAULT_OLD_JDK; i++) {\n+        boolean is_default = false;\n+        for (int i = 0; i < versions.length && !is_default; i++) {\n@@ -95,2 +90,2 @@\n-                OLD_JDK = fetchOldJDK(Integer.parseInt(versions[i]));\n-                setupJVMs();\n+                \/\/ If boot JDK runs because old JDK is not found, only run once\n+                is_default = setupJVMs(Integer.parseInt(versions[i]));\n@@ -104,1 +99,2 @@\n-    static void setupJVMs() throws Throwable {\n+    static boolean setupJVMs(int fetchVersion) throws Throwable {\n+        boolean is_default = true;\n@@ -112,1 +108,5 @@\n-        if (PREV_JDK != null) {\n+        if (fetchVersion >= 19) {\n+            oldJVM = fetchJDK(fetchVersion) + FS + \"bin\" + FS + \"java\";\n+            if (!oldJVM.equals(BOOT_JDK + FS + \"bin\" + FS + \"java\"))\n+                is_default = false;\n+        } else if (PREV_JDK != null) {\n@@ -114,2 +114,2 @@\n-        } else if (OLD_JDK != null) {\n-            oldJVM = OLD_JDK + FS + \"bin\" + FS + \"java\";\n+        } else if (BOOT_JDK != null) {\n+            oldJVM = BOOT_JDK + FS + \"bin\" + FS + \"java\";\n@@ -124,0 +124,1 @@\n+        return is_default;\n@@ -178,1 +179,1 @@\n-    private static String fetchOldJDK(int version) {\n+    private static String fetchJDK(int version) {\n@@ -207,1 +208,1 @@\n-            return DEFAULT_OLD_JDK;\n+            return BOOT_JDK;\n@@ -214,1 +215,1 @@\n-            return fetchOldJDK(jdkArtifactMap, version);\n+            return fetchJDK(jdkArtifactMap, version);\n@@ -217,1 +218,1 @@\n-            return fetchOldJDK(jdkArtifactMap, version) +  \".jdk\" + FS + \"Contents\" + FS + \"Home\";\n+            return fetchJDK(jdkArtifactMap, version) +  \".jdk\" + FS + \"Contents\" + FS + \"Home\";\n@@ -220,1 +221,1 @@\n-            return fetchOldJDK(jdkArtifactMap, version);\n+            return fetchJDK(jdkArtifactMap, version);\n@@ -222,1 +223,1 @@\n-            return DEFAULT_OLD_JDK;\n+            return BOOT_JDK;\n@@ -227,2 +228,2 @@\n-    private static String fetchOldJDK(HashMap<String, Object> jdkArtifactMap, int version) {\n-        String path = DEFAULT_OLD_JDK;\n+    private static String fetchJDK(HashMap<String, Object> jdkArtifactMap, int version) {\n+        String path = BOOT_JDK;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    public static Map<String, Path> resolve(Class<?> klass) throws ArtifactResolverException {\n+    private static ArtifactManager getManager() throws ArtifactResolverException {\n@@ -45,0 +45,2 @@\n+        return manager;\n+    }\n@@ -46,0 +48,2 @@\n+    public static Map<String, Path> resolve(Class<?> klass) throws ArtifactResolverException {\n+        ArtifactManager manager = getManager();\n@@ -63,14 +67,1 @@\n-        ArtifactManager manager;\n-        try {\n-            String managerName = System.getProperty(\"jdk.test.lib.artifacts.artifactmanager\");\n-            if (managerName != null) {\n-                manager = (ArtifactManager) Class.forName(managerName).newInstance();\n-            } else if (System.getenv().containsKey(JibArtifactManager.JIB_HOME_ENV_NAME)) {\n-                manager = JibArtifactManager.newInstance();\n-            } else {\n-                manager = new DefaultArtifactManager();\n-            }\n-        } catch (Exception e) {\n-            throw new ArtifactResolverException(\"Failed to load ArtifactManager\", e);\n-        }\n-\n+        ArtifactManager manager = getManager();\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"}]}