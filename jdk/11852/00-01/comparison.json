{"files":[{"patch":"@@ -0,0 +1,197 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# This script installs the JIB tool into it's own local repository and\n+# puts a wrapper scripts into <source-root>\/.jib\n+\n+mydir=\"$(dirname \"${BASH_SOURCE[0]}\")\"\n+myname=\"$(basename \"${BASH_SOURCE[0]}\")\"\n+\n+installed_jib_script=${mydir}\/..\/.jib\/jib\n+install_data=${mydir}\/..\/.jib\/.data\n+\n+setup_url() {\n+    if [ -f ~\/.config\/jib\/jib.conf ]; then\n+        source ~\/.config\/jib\/jib.conf\n+    fi\n+\n+    jib_repository=\"jdk-virtual\"\n+    jib_organization=\"jpg\/infra\/builddeps\"\n+    jib_module=\"jib\"\n+    jib_revision=\"3.0-SNAPSHOT\"\n+    jib_ext=\"jib.sh.gz\"\n+\n+    closed_script=\"${mydir}\/..\/..\/closed\/make\/conf\/jib-install.conf\"\n+    if [ -f \"${closed_script}\" ]; then\n+        source \"${closed_script}\"\n+    fi\n+\n+    if [ -n \"${JIB_SERVER}\" ]; then\n+        jib_server=\"${JIB_SERVER}\"\n+    fi\n+    if [ -n \"${JIB_SERVER_MIRRORS}\" ]; then\n+        jib_server_mirrors=\"${JIB_SERVER_MIRRORS}\"\n+    fi\n+    if [ -n \"${JIB_REPOSITORY}\" ]; then\n+        jib_repository=\"${JIB_REPOSITORY}\"\n+    fi\n+    if [ -n \"${JIB_ORGANIZATION}\" ]; then\n+        jib_organization=\"${JIB_ORGANIZATION}\"\n+    fi\n+    if [ -n \"${JIB_MODULE}\" ]; then\n+        jib_module=\"${JIB_MODULE}\"\n+    fi\n+    if [ -n \"${JIB_REVISION}\" ]; then\n+        jib_revision=\"${JIB_REVISION}\"\n+    fi\n+    if [ -n \"${JIB_EXTENSION}\" ]; then\n+        jib_extension=\"${JIB_EXTENSION}\"\n+    fi\n+\n+    if [ -n \"${JIB_URL}\" ]; then\n+        jib_url=\"${JIB_URL}\"\n+        data_string=\"${jib_url}\"\n+    else\n+        jib_path=\"${jib_repository}\/${jib_organization}\/${jib_module}\/${jib_revision}\/${jib_module}-${jib_revision}.${jib_ext}\"\n+        data_string=\"${jib_path}\"\n+        jib_url=\"${jib_server}\/${jib_path}\"\n+    fi\n+}\n+\n+install_jib() {\n+    if [ -z \"${jib_server}\" -a -z \"${JIB_URL}\" ]; then\n+        echo \"No jib server or URL provided, set either\"\n+        echo \"JIB_SERVER=<base server address>\"\n+        echo \"or\"\n+        echo \"JIB_URL=<full path to install script>\"\n+        exit 1\n+    fi\n+\n+    if command -v curl > \/dev\/null; then\n+        getcmd=\"curl -s -L --retry 3 --retry-delay 5\"\n+    elif command -v wget > \/dev\/null; then\n+        getcmd=\"wget --quiet -O -\"\n+    else\n+        echo \"Could not find either curl or wget\"\n+        exit 1\n+    fi\n+\n+    if ! command -v gunzip > \/dev\/null; then\n+        echo \"Could not find gunzip\"\n+        exit 1\n+    fi\n+\n+    echo \"Downloading JIB bootstrap script\"\n+    mkdir -p \"${installed_jib_script%\/*}\"\n+    rm -f \"${installed_jib_script}.gz\"\n+    ${getcmd} ${jib_url} > \"${installed_jib_script}.gz\"\n+    if [ ! -s \"${installed_jib_script}.gz\" ]; then\n+        echo \"Failed to download ${jib_url}\"\n+        if [ -n \"${jib_path}\" -a -n \"${jib_server_mirrors}\" ]; then\n+            OLD_IFS=\"${IFS}\"\n+            IFS=\" ,\"\n+            for mirror in ${jib_server_mirrors}; do\n+                echo \"Trying mirror ${mirror}\"\n+                jib_url=\"${mirror}\/${jib_path}\"\n+                ${getcmd} ${jib_url} > \"${installed_jib_script}.gz\"\n+                if [ -s \"${installed_jib_script}.gz\" ]; then\n+                    echo \"Download from mirror successful\"\n+                    break\n+                else\n+                    echo \"Failed to download ${jib_url}\"\n+                fi\n+            done\n+            IFS=\"${OLD_IFS}\"\n+        fi\n+        if [ ! -s \"${installed_jib_script}.gz\" ]; then\n+            exit 1\n+        fi\n+    fi\n+    # Want to check the filetype using file, to see if we got served a HTML error page.\n+    # This is sensitive to the filename containing a specific string, but good enough.\n+    file ${installed_jib_script}.gz | grep \"gzip compressed data\" > \/dev\/null\n+    if [ $? -ne 0 ]; then \n+        echo \"Warning: ${installed_jib_script}.gz is not a gzip file.\"\n+        echo \"If you are behind a proxy you may need to configure exceptions using no_proxy.\"\n+        echo \"The download URL was: ${jib_url}\"\n+        exit 1\n+    fi\n+    echo \"Extracting JIB bootstrap script\"\n+    rm -f \"${installed_jib_script}\"\n+    gunzip \"${installed_jib_script}.gz\"\n+    chmod +x \"${installed_jib_script}\"\n+    echo \"${data_string}\" > \"${install_data}\"\n+}\n+\n+# Returns a shell-escaped version of the argument given.\n+shell_quote() {\n+  if [[ -n \"$1\" ]]; then\n+    # Uses only shell-safe characters?  No quoting needed.\n+    # '=' is a zsh meta-character, but only in word-initial position.\n+    if echo \"$1\" | grep '^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\.:,%\/+=_-]\\{1,\\}$' > \/dev\/null \\\n+        && ! echo \"$1\" | grep '^=' > \/dev\/null; then\n+      quoted=\"$1\"\n+    else\n+      if echo \"$1\" | grep \"[\\'!]\" > \/dev\/null; then\n+        # csh does history expansion within single quotes, but not\n+        # when backslash-escaped!\n+        local quoted_quote=\"'\\\\''\" quoted_exclam=\"'\\\\!'\"\n+        word=\"${1\/\/\\'\/${quoted_quote}}\"\n+        word=\"${1\/\/\\!\/${quoted_exclam}}\"\n+      fi\n+      quoted=\"'$1'\"\n+    fi\n+    echo \"$quoted\"\n+  fi\n+}\n+\n+# Main body starts here\n+\n+setup_url\n+\n+if [ ! -x \"${installed_jib_script}\" ]; then\n+    install_jib\n+elif [ ! -e \"${install_data}\" ] || [ \"${data_string}\" != \"$(cat \"${install_data}\")\" ]; then\n+    echo \"Install url changed since last time, reinstalling\"\n+    install_jib\n+fi\n+\n+# Provide a reasonable default for the --src-dir parameter if run out of tree\n+if [ -z \"${JIB_SRC_DIR}\" ]; then\n+    export JIB_SRC_DIR=\"${mydir}\/..\/\"\n+fi\n+\n+\n+# Save the original command line\n+conf_quoted_arguments=()\n+for conf_option; do\n+  conf_quoted_arguments=(\"${conf_quoted_arguments[@]}\" \"$(shell_quote \"$conf_option\")\")\n+done\n+export REAL_CONFIGURE_COMMAND_LINE=\"${conf_quoted_arguments[@]}\"\n+\n+myfulldir=\"$(cd \"${mydir}\" > \/dev\/null && pwd)\"\n+export REAL_CONFIGURE_COMMAND_EXEC_FULL=\"$BASH $myfulldir\/$myname\"\n+export REAL_CONFIGURE_COMMAND_EXEC_SHORT=\"$myname\"\n+\n+${installed_jib_script} \"$@\"\n","filename":"bin\/jib.sh","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.HashMap;\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.Platform;\n@@ -44,2 +46,1 @@\n-\n-import java.util.HashMap;\n+import jtreg.SkippedException;\n@@ -61,1 +62,0 @@\n-    \/\/ now it is pulled by the artifactory\n@@ -75,4 +75,0 @@\n-        \/\/ Get OS and CPU type\n-        String arch = props.getProperty(\"os.arch\");\n-        String os = getOsId();\n-\n@@ -80,5 +76,10 @@\n-        int n = java.lang.Runtime.version().major() - 1;\n-        for (int i = 19; i < n; i++) {\n-            BOOT_JDK = fetchBootJDK(os, arch, i);\n-            setupJVMs(os);\n-            doTest();\n+        \/\/ Only run once if using the default boot jdk\n+        int n = java.lang.Runtime.version().major();\n+\n+        \/\/ Test only previous version unless specified in gmk\n+        if (System.getProperty(\"test.autocreatesharedarchive.all.jdk.versions\") == null) {\n+            testJDK(n - 1);\n+            return;\n+        }\n+        for (int i = n - 1; i >= 19 && BOOT_JDK != DEFAULT_BOOT_JDK; i--) {\n+            testJDK(i);\n@@ -88,1 +89,7 @@\n-    static void setupJVMs(String os) throws Throwable {\n+    static void testJDK(int version) throws Throwable {\n+        BOOT_JDK = fetchBootJDK(version);\n+        setupJVMs();\n+        doTest();\n+    }\n+\n+    static void setupJVMs() throws Throwable {\n@@ -99,1 +106,1 @@\n-            oldJVM = (os == \"MacOSX\") ?\n+            oldJVM = (Platform.isOSX()) ?\n@@ -103,1 +110,1 @@\n-            throw new RuntimeException(\"Use -Dtest.previous.jdk or -Dtest.boot.jdk to specify a \" +\n+            throw new SkippedException(\"Use -Dtest.previous.jdk or -Dtest.boot.jdk to specify a \" +\n@@ -127,1 +134,0 @@\n-        assertJSAVersionMismatch(output);\n@@ -135,1 +141,0 @@\n-        assertJSAVersionMismatch(output);\n@@ -160,4 +165,0 @@\n-    static void assertJSAVersionMismatch(OutputAnalyzer output) {\n-        output.shouldContain(\"does not match the required version\");\n-    }\n-\n@@ -170,1 +171,1 @@\n-    private static String fetchBootJDK(String osID, String arch, int version) {\n+    private static String fetchBootJDK(int version) {\n@@ -190,0 +191,3 @@\n+        jdkArtifactMap.put(\"version\", version);\n+        jdkArtifactMap.put(\"build_number\", build);\n+\n@@ -191,1 +195,8 @@\n-        switch(arch) {\n+        if (Platform.isX64()) {\n+            architecture = \"x\";\n+        } else if (Platform.isAArch64()) {\n+            architecture = \"aarch\";\n+        } else {\n+            return DEFAULT_BOOT_JDK;\n+        }\n+        \/*switch(arch) {\n@@ -203,1 +214,2 @@\n-        }\n+        }*\/\n+\n@@ -206,1 +218,13 @@\n-        switch (osID) {\n+        if (Platform.isWindows()) {\n+            jdkArtifactMap.put(\"file\", \"bundles\/windows-x64\/jdk-\" + version + \"_windows-x64_bin.zip\");\n+            return fetchBootJDK(jdkArtifactMap, version);\n+        } else if (Platform.isOSX()) {\n+            jdkArtifactMap.put(\"file\", \"bundles\/macos-\" + architecture + \"64\/jdk-\" + version + \"_macos-\" + architecture + \"64_bin.tar.gz\");\n+            return fetchBootJDK(jdkArtifactMap, version);\n+        } else if (Platform.isLinux()) {\n+            jdkArtifactMap.put(\"file\", \"bundles\/linux-\" + architecture + \"64\/jdk-\" + version + \"_linux-\" + architecture + \"64_bin.tar.gz\");\n+            return fetchBootJDK(jdkArtifactMap, version);\n+        } else {\n+            return DEFAULT_BOOT_JDK;\n+        }\n+        \/*switch (osID) {\n@@ -208,2 +232,0 @@\n-                jdkArtifactMap.put(\"version\", version);\n-                jdkArtifactMap.put(\"build_number\", build);\n@@ -214,2 +236,0 @@\n-                jdkArtifactMap.put(\"version\", version);\n-                jdkArtifactMap.put(\"build_number\", build);\n@@ -219,2 +239,0 @@\n-                jdkArtifactMap.put(\"version\", version);\n-                jdkArtifactMap.put(\"build_number\", build);\n@@ -226,1 +244,1 @@\n-        }\n+        }*\/\n@@ -229,1 +247,1 @@\n-    \/\/ Fetch JDK version from artifactory\n+    \/\/ Fetch JDK artifact\n@@ -247,10 +265,0 @@\n-\n-    private static String getOsId() {\n-        String osName = props.getProperty(\"os.name\");\n-        if (osName.startsWith(\"Win\")) {\n-            osName = \"Windows\";\n-        } else if (osName.equals(\"Mac OS X\")) {\n-            osName = \"MacOSX\";\n-        }\n-        return osName;\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java","additions":51,"deletions":43,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-    String organization() default \"\";\n-    String name() default \"\";\n-    String revision() default \"\";\n-    String extension() default \"\";\n+    String organization();\n+    String name();\n+    String revision();\n+    String extension();\n@@ -38,7 +38,0 @@\n-\n-    \/\/ For getting jdk versions\n-    String server() default \"\";\n-    String product() default \"\";\n-    int version() default 0;\n-    int build_number() default 0;\n-    String file() default \"\";\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/Artifact.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -117,13 +117,4 @@\n-        if (artifact.server().equals(\"jpg\")) {\n-            artifactDescription.put(\"server\", artifact.server());\n-            artifactDescription.put(\"product\", artifact.product());\n-            artifactDescription.put(\"version\", artifact.version());\n-            artifactDescription.put(\"build_number\", artifact.build_number());\n-            artifactDescription.put(\"file\", artifact.file());\n-        } else {\n-            artifactDescription.put(\"module\", artifact.name());\n-            artifactDescription.put(\"organization\", artifact.organization());\n-            artifactDescription.put(\"ext\", artifact.extension());\n-            artifactDescription.put(\"revision\", artifact.revision());\n-        }\n-\n+        artifactDescription.put(\"module\", artifact.name());\n+        artifactDescription.put(\"organization\", artifact.organization());\n+        artifactDescription.put(\"ext\", artifact.extension());\n+        artifactDescription.put(\"revision\", artifact.revision());\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/JibArtifactManager.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"}]}