{"files":[{"patch":"@@ -62,2 +62,6 @@\n-    private static String BOOT_JDK;\n-    private static String DEFAULT_BOOT_JDK = System.getProperty(\"test.boot.jdk\", null);\n+    private static String OLD_JDK;\n+    private static String DEFAULT_OLD_JDK = System.getProperty(\"test.boot.jdk\", null);\n+\n+    \/\/ Comma separated list of JDK major versions that will be tested\n+    \/\/ If null, DEFAULT_OLD_JDK will be tested\n+    private static String JDK_VERSIONS = System.getProperty(\"test.autocreatesharedarchive.jdk.version\", null);\n@@ -79,3 +83,5 @@\n-        \/\/ Test only previous version unless specified in gmk\n-        if (System.getProperty(\"test.autocreatesharedarchive.all.jdk.versions\") == null) {\n-            testJDK(n - 1);\n+        \/\/ Test only default version unless specified in gmk\n+        if (JDK_VERSIONS == null) {\n+            OLD_JDK = DEFAULT_OLD_JDK;\n+            setupJVMs();\n+            doTest();\n@@ -84,4 +90,0 @@\n-        for (int i = n - 1; i >= 19 && BOOT_JDK != DEFAULT_BOOT_JDK; i--) {\n-            testJDK(i);\n-        }\n-    }\n@@ -89,4 +91,11 @@\n-    static void testJDK(int version) throws Throwable {\n-        BOOT_JDK = fetchBootJDK(version);\n-        setupJVMs();\n-        doTest();\n+        String[] versions = JDK_VERSIONS.split(\",\");\n+        for (int i = 0; i < versions.length && OLD_JDK != DEFAULT_OLD_JDK; i++) {\n+            System.out.println(\"Testing JDK: \" + versions[i]);\n+            try {\n+                OLD_JDK = fetchOldJDK(Integer.parseInt(versions[i]));\n+                setupJVMs();\n+                doTest();\n+            } catch (NumberFormatException e) {\n+                throw new RuntimeException(\"Invalid AutoCreateSharedArchive JDK version: \" + versions[i]);\n+            }\n+        }\n@@ -105,1 +114,1 @@\n-        } else if (BOOT_JDK != null) {\n+        } else if (OLD_JDK != null) {\n@@ -107,2 +116,2 @@\n-                BOOT_JDK + \".jdk\" + FS + \"Contents\" + FS + \"Home\" + FS + \"bin\" + FS + \"java\" :\n-                BOOT_JDK + FS + \"bin\" + FS + \"java\";\n+                OLD_JDK + \".jdk\" + FS + \"Contents\" + FS + \"Home\" + FS + \"bin\" + FS + \"java\" :\n+                OLD_JDK + FS + \"bin\" + FS + \"java\";\n@@ -171,1 +180,1 @@\n-    private static String fetchBootJDK(int version) {\n+    private static String fetchOldJDK(int version) {\n@@ -200,1 +209,1 @@\n-            return DEFAULT_BOOT_JDK;\n+            return DEFAULT_OLD_JDK;\n@@ -202,13 +211,0 @@\n-        \/*switch(arch) {\n-            case(\"x86\"):\n-            case(\"x86_64\"):\n-            case(\"amd64\"):\n-                architecture = \"x\";\n-                break;\n-            case(\"aarch64\"):\n-                architecture = \"aarch\";\n-                break;\n-            default:\n-                architecture = \"\";\n-                break;\n-        }*\/\n@@ -220,1 +216,1 @@\n-            return fetchBootJDK(jdkArtifactMap, version);\n+            return fetchOldJDK(jdkArtifactMap, version);\n@@ -223,1 +219,1 @@\n-            return fetchBootJDK(jdkArtifactMap, version);\n+            return fetchOldJDK(jdkArtifactMap, version);\n@@ -226,1 +222,1 @@\n-            return fetchBootJDK(jdkArtifactMap, version);\n+            return fetchOldJDK(jdkArtifactMap, version);\n@@ -228,1 +224,1 @@\n-            return DEFAULT_BOOT_JDK;\n+            return DEFAULT_OLD_JDK;\n@@ -230,15 +226,0 @@\n-        \/*switch (osID) {\n-            case \"Windows\":\n-                jdkArtifactMap.put(\"file\", \"bundles\/windows-x64\/jdk-\" + version + \"_windows-x64_bin.zip\");\n-                return fetchBootJDK(jdkArtifactMap, version);\n-\n-            case \"MacOSX\":\n-                jdkArtifactMap.put(\"file\", \"bundles\/macos-\" + architecture + \"64\/jdk-\" + version + \"_macos-\" + architecture + \"64_bin.tar.gz\");\n-                return fetchBootJDK(jdkArtifactMap, version);\n-            case \"Linux\":\n-                jdkArtifactMap.put(\"file\", \"bundles\/linux-\" + architecture + \"64\/jdk-\" + version + \"_linux-\" + architecture + \"64_bin.tar.gz\");\n-                return fetchBootJDK(jdkArtifactMap, version);\n-\n-            default:\n-                return DEFAULT_BOOT_JDK;\n-        }*\/\n@@ -248,2 +229,2 @@\n-    private static String fetchBootJDK(HashMap<String, Object> jdkArtifactMap, int version) {\n-        String path = DEFAULT_BOOT_JDK;\n+    private static String fetchOldJDK(HashMap<String, Object> jdkArtifactMap, int version) {\n+        String path = DEFAULT_OLD_JDK;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java","additions":33,"deletions":52,"binary":false,"changes":85,"status":"modified"}]}