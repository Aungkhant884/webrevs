{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-public class PKCS8Key implements PrivateKey {\n+public class PKCS8Key implements PrivateKey, InternalPrivateKey {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.security.util;\n+\n+import java.security.PublicKey;\n+\n+\/**\n+ * Extra private methods on a private key.\n+ *\/\n+public interface InternalPrivateKey {\n+    \/**\n+     * Calculates a matching public key.\n+     * @return the public key\n+     * @throws UnsupportedOperationException if not supported\n+     *\/\n+    default PublicKey calculatePublicKey() {\n+        throw new UnsupportedOperationException();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/InternalPrivateKey.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -194,4 +194,1 @@\n-        Point pub = ops.multiply(ecParams.getGenerator(), privArr);\n-        AffinePoint affPub = pub.asAffine();\n-\n-        PrivateKey privateKey = new ECPrivateKeyImpl(privArr, ecParams);\n+        ECPrivateKeyImpl privateKey = new ECPrivateKeyImpl(privArr, ecParams);\n@@ -200,3 +197,1 @@\n-        ECPoint w = new ECPoint(affPub.getX().asBigInteger(),\n-            affPub.getY().asBigInteger());\n-        PublicKey publicKey = new ECPublicKeyImpl(w, ecParams);\n+        PublicKey publicKey = privateKey.calculatePublicKey();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECKeyPairGenerator.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import sun.security.ec.point.AffinePoint;\n+import sun.security.ec.point.MutablePoint;\n@@ -151,1 +153,1 @@\n-    public byte[] getArrayS() {\n+    private byte[] getArrayS0() {\n@@ -155,1 +157,5 @@\n-        return arrayS.clone();\n+        return arrayS;\n+    }\n+\n+    public byte[] getArrayS() {\n+        return getArrayS0().clone();\n@@ -198,0 +204,16 @@\n+\n+    @Override\n+    public PublicKey calculatePublicKey() {\n+        ECParameterSpec ecParams = getParams();\n+        ECOperations ops = ECOperations.forParameters(ecParams)\n+                .orElseThrow(ProviderException::new);\n+        MutablePoint pub = ops.multiply(ecParams.getGenerator(), getArrayS0());\n+        AffinePoint affPub = pub.asAffine();\n+        ECPoint w = new ECPoint(affPub.getX().asBigInteger(),\n+                affPub.getY().asBigInteger());\n+        try {\n+            return new ECPublicKeyImpl(w, ecParams);\n+        } catch (InvalidKeyException e) {\n+            throw new ProviderException(\"Should not happen\", e);\n+        }\n+    }\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECPrivateKeyImpl.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    private final AlgorithmParameterSpec paramSpec;\n+    private final NamedParameterSpec paramSpec;\n@@ -103,0 +103,13 @@\n+\n+    @Override\n+    public PublicKey calculatePublicKey() {\n+        XECParameters params = paramSpec.getName().equals(\"X25519\")\n+                ? XECParameters.X25519\n+                : XECParameters.X448;\n+        try {\n+            return new XDHPublicKeyImpl(params,\n+                    new XECOperations(params).computePublic(k.clone()));\n+        } catch (InvalidKeyException e) {\n+            throw new ProviderException(\"Should not happen\", e);\n+        }\n+    }\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XDHPrivateKeyImpl.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+    static final XECParameters X25519;\n+    static final XECParameters X448;\n+\n@@ -117,9 +120,3 @@\n-        try {\n-            BigInteger p = TWO.pow(255).subtract(BigInteger.valueOf(19));\n-            addParameters(255, p, 121665, (byte)0x09, 3,\n-                KnownOIDs.X25519.value(), NamedParameterSpec.X25519.getName(),\n-                bySize, byOid, byName);\n-\n-        } catch (IOException ex) {\n-            \/\/ Unable to set X25519 parameters---it will be disabled\n-        }\n+        BigInteger p2 = TWO.pow(255).subtract(BigInteger.valueOf(19));\n+        X25519 = addParameters(255, p2, 121665, (byte)0x09, 3,\n+            KnownOIDs.X25519, NamedParameterSpec.X25519.getName());\n@@ -128,10 +125,4 @@\n-        try {\n-            BigInteger p = TWO.pow(448).subtract(TWO.pow(224))\n-                .subtract(BigInteger.ONE);\n-            addParameters(448, p, 39081, (byte)0x05, 2,\n-                KnownOIDs.X448.value(), NamedParameterSpec.X448.getName(),\n-                bySize, byOid, byName);\n-\n-        } catch (IOException ex) {\n-            \/\/ Unable to set X448 parameters---it will be disabled\n-        }\n+        BigInteger p4 = TWO.pow(448).subtract(TWO.pow(224))\n+            .subtract(BigInteger.ONE);\n+        X448 = addParameters(448, p4, 39081, (byte)0x05, 2,\n+            KnownOIDs.X448, NamedParameterSpec.X448.getName());\n@@ -142,5 +133,2 @@\n-    private static void addParameters(int bits, BigInteger p, int a24,\n-        byte basePoint, int logCofactor, String objectId, String name,\n-        Map<Integer, XECParameters> bySize,\n-        Map<ObjectIdentifier, XECParameters> byOid,\n-        Map<String, XECParameters> byName) throws IOException {\n+    private static XECParameters addParameters(int bits, BigInteger p, int a24,\n+        byte basePoint, int logCofactor, KnownOIDs koid, String name) {\n@@ -148,1 +136,1 @@\n-        ObjectIdentifier oid = ObjectIdentifier.of(objectId);\n+        ObjectIdentifier oid = ObjectIdentifier.of(koid);\n@@ -152,0 +140,1 @@\n+        return params;\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XECParameters.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.util.InternalPrivateKey;\n+\n+import java.security.*;\n+import java.security.spec.ECGenParameterSpec;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 8305310\n+ * @library \/test\/lib\n+ * @summary Calculate PublicKey from PrivateKey\n+ * @modules java.base\/sun.security.util\n+ *\/\n+public class Correctness {\n+    public static void main(String[] args) throws Exception {\n+        for (String alg : List.of(\"secp256r1\", \"secp384r1\", \"secp521r1\",\n+                \"X25519\", \"X448\")) {\n+            KeyPairGenerator g;\n+            if (alg.startsWith(\"X\")) {\n+                g = KeyPairGenerator.getInstance(alg);\n+            } else {\n+                g = KeyPairGenerator.getInstance(\"EC\");\n+                g.initialize(new ECGenParameterSpec(alg));\n+            }\n+            KeyPair kp = g.generateKeyPair();\n+            PublicKey p1 = kp.getPublic();\n+            PrivateKey s1 = kp.getPrivate();\n+\n+            if (s1 instanceof InternalPrivateKey ipk) {\n+                PublicKey p2 = ipk.calculatePublicKey();\n+                Asserts.assertTrue(Arrays.equals(p2.getEncoded(), p1.getEncoded()));\n+                Asserts.assertEQ(p2.getAlgorithm(), p1.getAlgorithm());\n+                Asserts.assertEQ(p2.getFormat(), p1.getFormat());\n+            } else {\n+                throw new RuntimeException(\"Not an InternalPrivateKey: \"\n+                        + s1.getClass());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/InteralPrivateKey\/Correctness.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}