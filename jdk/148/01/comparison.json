{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-     * Creates a new instance of ForwardingFileObject.\n+     * Creates a new instance of {@code ForwardingFileObject}.\n@@ -60,0 +60,1 @@\n+    @Override\n@@ -64,0 +65,1 @@\n+    @Override\n@@ -73,0 +75,1 @@\n+    @Override\n@@ -82,0 +85,1 @@\n+    @Override\n@@ -91,0 +95,1 @@\n+    @Override\n@@ -100,0 +105,1 @@\n+    @Override\n@@ -109,0 +115,1 @@\n+    @Override\n@@ -113,0 +120,1 @@\n+    @Override\n@@ -117,0 +125,1 @@\n+    @Override\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/ForwardingFileObject.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-     * Creates a new instance of ForwardingJavaFileManager.\n+     * Creates a new instance of {@code ForwardingJavaFileManager}.\n@@ -63,0 +63,1 @@\n+    @Override\n@@ -71,0 +72,1 @@\n+    @Override\n@@ -83,0 +85,1 @@\n+    @Override\n@@ -90,0 +93,1 @@\n+    @Override\n@@ -98,0 +102,1 @@\n+    @Override\n@@ -102,0 +107,1 @@\n+    @Override\n@@ -106,0 +112,1 @@\n+    @Override\n@@ -114,0 +121,1 @@\n+    @Override\n@@ -126,0 +134,1 @@\n+    @Override\n@@ -139,0 +148,1 @@\n+    @Override\n@@ -151,0 +161,1 @@\n+    @Override\n@@ -160,0 +171,1 @@\n+    @Override\n@@ -164,0 +176,1 @@\n+    @Override\n@@ -172,0 +185,1 @@\n+    @Override\n@@ -180,0 +194,1 @@\n+    @Override\n@@ -188,0 +203,1 @@\n+    @Override\n@@ -196,0 +212,1 @@\n+    @Override\n@@ -204,0 +221,1 @@\n+    @Override\n@@ -211,0 +229,1 @@\n+    @Override\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/ForwardingJavaFileManager.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-     * Creates a new instance of ForwardingJavaFileObject.\n+     * Creates a new instance of {@code ForwardingJavaFileObject}.\n@@ -53,0 +53,1 @@\n+    @Override\n@@ -57,0 +58,1 @@\n+    @Override\n@@ -61,0 +63,1 @@\n+    @Override\n@@ -63,0 +66,1 @@\n+    @Override\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/ForwardingJavaFileObject.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,1 @@\n-         * HTML files.  For example, regular files ending with {@code\n-         * .html}.\n+         * HTML files.  For example, regular files ending with {@code .html}.\n@@ -81,1 +80,1 @@\n-        private Kind(String extension) {\n+        Kind(String extension) {\n@@ -97,2 +96,1 @@\n-     * <cite>The Java Language Specification<\/cite>,\n-     * section 6.2 \"Names and Identifiers\".\n+     * <cite>The Java Language Specification<\/cite>, section {@jls 6.2}.\n@@ -102,1 +100,1 @@\n-     * @return {@code true} if this file object is compatible; false\n+     * @return {@code true} if this file object is compatible; {@code false}\n@@ -122,1 +120,1 @@\n-     * by this file object.  If the access level is not known or if\n+     * by this file object.  If the access level is not known or\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaFileObject.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import javax.tools.JavaFileObject.Kind;\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/SimpleJavaFileObject.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * File manager based on {@linkplain File java.io.File} and {@linkplain Path java.nio.file.Path}.\n+ * File manager based on {@link File java.io.File} and {@link Path java.nio.file.Path}.\n@@ -366,1 +366,1 @@\n-     * {@linkplain #setLocation setLocation } or\n+     * {@linkplain #setLocation setLocation} or\n@@ -380,2 +380,2 @@\n-     * @see setLocation\n-     * @see setLocationFromPaths\n+     * @see #setLocation\n+     * @see #setLocationFromPaths\n@@ -483,2 +483,2 @@\n-        return () -> new Iterator<Path>() {\n-            Iterator<? extends File> iter = files.iterator();\n+        return () -> new Iterator<>() {\n+            final Iterator<? extends File> iter = files.iterator();\n@@ -499,2 +499,2 @@\n-        return () -> new Iterator<File>() {\n-            Iterator<? extends Path> iter = paths.iterator();\n+        return () -> new Iterator<>() {\n+            final Iterator<? extends Path> iter = paths.iterator();\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/StandardJavaFileManager.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * throw a {@linkplain java.lang.NullPointerException} if given a\n+ * throw a {@link java.lang.NullPointerException} if given a\n@@ -41,2 +41,2 @@\n- * <p>This package is the home of the Java programming language compiler framework.  This\n- * framework allows clients of the framework to locate and run\n+ * <p>This package is the home of the Java programming language compiler framework.\n+ * This framework allows clients of the framework to locate and run\n@@ -45,4 +45,4 @@\n- * ({@linkplain javax.tools.DiagnosticListener}) as well as a file\n- * abstraction for overriding file access ({@linkplain\n- * javax.tools.JavaFileManager} and {@linkplain\n- * javax.tools.JavaFileObject}).  See {@linkplain\n+ * ({@link javax.tools.DiagnosticListener}) as well as a file\n+ * abstraction for overriding file access ({@link\n+ * javax.tools.JavaFileManager} and {@link\n+ * javax.tools.JavaFileObject}).  See {@link\n@@ -53,1 +53,1 @@\n- * {@linkplain javax.tools.ToolProvider}, for example:\n+ * {@link javax.tools.ToolProvider}, for example:\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/package-info.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * A tree node for an {@code @docroot} inline tag.\n+ * A tree node for an {@code @docRoot} inline tag.\n@@ -32,1 +32,1 @@\n- *    {&#064;docroot}\n+ *    {&#064;docRoot}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocRootTree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-     * Creates a new {@code DocRootTree} object, to represent an {@code {@docroot}} tag.\n+     * Creates a new {@code DocRootTree} object, to represent an {@code {@docRoot}} tag.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-        while (ch == '@')\n+        while (bp < buflen && ch == '@')\n@@ -357,1 +357,1 @@\n-    private DCTree inlineText(WhitespaceRetentionPolicy whitespacePolicy) throws ParseException {\n+    private DCText inlineText(WhitespaceRetentionPolicy whitespacePolicy) throws ParseException {\n@@ -666,1 +666,1 @@\n-                while (isDecimalDigit(ch))\n+                while (bp < buflen && isDecimalDigit(ch))\n@@ -673,1 +673,1 @@\n-                    while (isHexDigit(ch))\n+                    while (bp < buflen && isHexDigit(ch))\n@@ -846,1 +846,1 @@\n-                        while (ch == '-') {\n+                        while (bp < buflen && ch == '-') {\n@@ -893,1 +893,1 @@\n-        while (isIdentifierStart(ch)) {\n+        while (bp < buflen && isIdentifierStart(ch)) {\n@@ -1060,1 +1060,1 @@\n-        while (isWhitespace(ch)) {\n+        while (bp < buflen && isWhitespace(ch)) {\n@@ -1121,1 +1121,1 @@\n-                    DCTree text = inlineText(WhitespaceRetentionPolicy.REMOVE_FIRST_SPACE);\n+                    DCText text = inlineText(WhitespaceRetentionPolicy.REMOVE_FIRST_SPACE);\n@@ -1123,1 +1123,1 @@\n-                    return m.at(pos).newCodeTree((DCText) text);\n+                    return m.at(pos).newCodeTree(text);\n@@ -1231,1 +1231,1 @@\n-                    DCTree text = inlineText(WhitespaceRetentionPolicy.REMOVE_FIRST_SPACE);\n+                    DCText text = inlineText(WhitespaceRetentionPolicy.REMOVE_FIRST_SPACE);\n@@ -1233,1 +1233,1 @@\n-                    return m.at(pos).newLiteralTree((DCText) text);\n+                    return m.at(pos).newLiteralTree(text);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    public DCAttribute newAttributeTree(javax.lang.model.element.Name name, ValueKind vkind, java.util.List<? extends DocTree> value) {\n+    public DCAttribute newAttributeTree(Name name, ValueKind vkind, List<? extends DocTree> value) {\n@@ -171,1 +171,1 @@\n-    public DCAuthor newAuthorTree(java.util.List<? extends DocTree> name) {\n+    public DCAuthor newAuthorTree(List<? extends DocTree> name) {\n@@ -200,5 +200,1 @@\n-        Pair<List<DCTree>, List<DCTree>> pair = splitBody(fullBody);\n-        List<DCTree> preamble = Collections.emptyList();\n-        List<DCTree> postamble = Collections.emptyList();\n-\n-        return newDocCommentTree(fullBody, tags, preamble, postamble);\n+        return newDocCommentTree(fullBody, tags, Collections.emptyList(), Collections.emptyList());\n@@ -506,1 +502,1 @@\n-    public java.util.List<DocTree> getFirstSentence(java.util.List<? extends DocTree> list) {\n+    public List<DocTree> getFirstSentence(List<? extends DocTree> list) {\n@@ -696,1 +692,1 @@\n-    private boolean isSentenceBreak(javax.lang.model.element.Name tagName) {\n+    private boolean isSentenceBreak(Name tagName) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}