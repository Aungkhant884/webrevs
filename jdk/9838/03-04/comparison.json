{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -32,1 +33,17 @@\n-void ReadWriteLock::read_lock(Thread *current) {\n+inline void ReadWriteLock::await_write_unlock() {\n+  Locker locker(&_mon);\n+  while (Atomic::load_acquire(&_count) < 0) {\n+    _mon.wait(0);\n+  }\n+}\n+\n+inline void ReadWriteLock::await_write_lock() {\n+  Locker locker(&_mon);\n+  while (Atomic::load_acquire(&_count) != -1) {\n+    _mon.wait(0);\n+  }\n+}\n+\n+void ReadWriteLock::read_lock(Thread* current) {\n+  assert(current == nullptr || current == Thread::current(), \"invariant\");\n+\n@@ -37,7 +54,2 @@\n-      auto await = [&]() {\n-        Locker locker(&_mon);\n-        while (Atomic::load_acquire(&_count) < 0) {\n-          _mon.wait(0);\n-        }\n-      };\n-      if (current->is_Java_thread()) {\n+\n+      if (current != nullptr && current->is_Java_thread()) {\n@@ -45,1 +57,1 @@\n-        await();\n+        await_write_unlock();\n@@ -47,1 +59,1 @@\n-        await();\n+        await_write_unlock();\n@@ -65,0 +77,1 @@\n+    assert(count != 0 && count != -1, \"invariant\");\n@@ -89,1 +102,3 @@\n-void ReadWriteLock::write_lock(Thread *current) {\n+void ReadWriteLock::write_lock(Thread* current) {\n+  assert(current == nullptr || current == Thread::current(), \"invariant\");\n+\n@@ -96,8 +111,1 @@\n-      auto await_writers_exit = [&]() {\n-        Locker locker(&_mon);\n-        while (Atomic::load_acquire(&_count) < 0) {\n-          _mon.wait(0);\n-        }\n-      };\n-\n-      if (current->is_Java_thread()) {\n+      if (current != nullptr && current->is_Java_thread()) {\n@@ -105,1 +113,1 @@\n-        await_writers_exit();\n+        await_write_unlock();\n@@ -107,1 +115,1 @@\n-        await_writers_exit();\n+        await_write_unlock();\n@@ -121,8 +129,2 @@\n-      auto await_writer_entry = [&]() {\n-        \/\/ Wait until all readers exit.\n-        Locker locker(&_mon);\n-        while (Atomic::load_acquire(&_count) != -1) {\n-          _mon.wait(0);\n-        }\n-      };\n-      if (current->is_Java_thread()) {\n+      \/\/ Wait until all readers exit.\n+      if (current != nullptr && current->is_Java_thread()) {\n@@ -130,1 +132,1 @@\n-        await_writer_entry();\n+        await_write_lock();\n@@ -132,1 +134,1 @@\n-        await_writer_entry();\n+        await_write_lock();\n","filename":"src\/hotspot\/share\/utilities\/readWriteLock.cpp","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -33,1 +31,1 @@\n-#include \"utilities\/macros.hpp\"\n+#include \"runtime\/thread.hpp\"\n@@ -83,0 +81,2 @@\n+  void await_write_unlock();\n+  void await_write_lock();\n@@ -89,2 +89,1 @@\n-  ~ReadWriteLock() {\n-  }\n+  ~ReadWriteLock() = default;\n@@ -92,1 +91,1 @@\n-  void write_lock(Thread* current = Thread::current());\n+  void write_lock(Thread* current = Thread::current_or_null());\n@@ -95,1 +94,1 @@\n-  void read_lock(Thread* current = Thread::current());\n+  void read_lock(Thread* current = Thread::current_or_null());\n","filename":"src\/hotspot\/share\/utilities\/readWriteLock.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  auto reader = [&](Thread* _current, int _id) {\n+  auto reader = [&](Thread* current, int _id) {\n@@ -44,1 +44,1 @@\n-    mut->read_lock(Thread::current());\n+    mut->read_lock(current);\n@@ -94,2 +94,2 @@\n-  auto r = [&](Thread* _current, int _id) {\n-    mut->read_lock(Thread::current());\n+  auto r = [&](Thread* current, int _id) {\n+    mut->read_lock(current);\n","filename":"test\/hotspot\/gtest\/runtime\/test_readWriteLock.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}