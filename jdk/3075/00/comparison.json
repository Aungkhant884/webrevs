{"files":[{"patch":"@@ -745,1 +745,1 @@\n-            wt = MethodTypeForm.canonicalize(pt, MethodTypeForm.WRAP, MethodTypeForm.WRAP);\n+            wt = MethodTypeForm.canonicalize(pt, MethodTypeForm.WRAP);\n@@ -757,1 +757,1 @@\n-            uwt = MethodTypeForm.canonicalize(wt, MethodTypeForm.UNWRAP, MethodTypeForm.UNWRAP);\n+            uwt = MethodTypeForm.canonicalize(wt, MethodTypeForm.UNWRAP);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-        MethodType erased = canonicalize(mt, ERASE, ERASE);\n+        MethodType erased = canonicalize(mt, ERASE);\n@@ -233,5 +233,0 @@\n-     * INTS means convert all non-void primitive types to int or long,\n-     * according to size.  LONGS means convert all non-void primitives\n-     * to long, regardless of size.  RAW_RETURN means convert a type\n-     * (assumed to be a return type) to int if it is smaller than an int,\n-     * or if it is void.\n@@ -239,1 +234,1 @@\n-    public static final int ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;\n+    public static final int ERASE = 1, WRAP = 2, UNWRAP = 3;\n@@ -245,1 +240,1 @@\n-    public static MethodType canonicalize(MethodType mt, int howRet, int howArgs) {\n+    public static MethodType canonicalize(MethodType mt, int how) {\n@@ -247,1 +242,1 @@\n-        Class<?>[] ptypesCanonical = canonicalizeAll(ptypes, howArgs);\n+        Class<?>[] ptypesCanonical = canonicalizeAll(ptypes, how);\n@@ -249,1 +244,1 @@\n-        Class<?> rtypeCanonical = canonicalize(rtype, howRet);\n+        Class<?> rtypeCanonical = canonicalize(rtype, how);\n@@ -264,1 +259,0 @@\n-        Class<?> ct;\n@@ -270,1 +264,1 @@\n-                    ct = Wrapper.asPrimitiveType(t);\n+                    Class<?> ct = Wrapper.asPrimitiveType(t);\n@@ -273,1 +267,0 @@\n-                case RAW_RETURN:\n@@ -277,30 +270,2 @@\n-        } else if (t == void.class) {\n-            \/\/ no change, usually\n-            switch (how) {\n-                case RAW_RETURN:\n-                    return int.class;\n-                case WRAP:\n-                    return Void.class;\n-            }\n-        } else {\n-            \/\/ non-void primitive\n-            switch (how) {\n-                case WRAP:\n-                    return Wrapper.asWrapperType(t);\n-                case INTS:\n-                    if (t == int.class || t == long.class)\n-                        return null;  \/\/ no change\n-                    if (t == double.class)\n-                        return long.class;\n-                    return int.class;\n-                case LONGS:\n-                    if (t == long.class)\n-                        return null;  \/\/ no change\n-                    return long.class;\n-                case RAW_RETURN:\n-                    if (t == int.class || t == long.class ||\n-                        t == float.class || t == double.class)\n-                        return null;  \/\/ no change\n-                    \/\/ everything else returns as an int\n-                    return int.class;\n-            }\n+        } else if (how == WRAP) {\n+            return Wrapper.asWrapperType(t);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodTypeForm.java","additions":8,"deletions":43,"binary":false,"changes":51,"status":"modified"}]}