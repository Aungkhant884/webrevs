{"files":[{"patch":"@@ -192,0 +192,12 @@\n+\n+void CompressedSparseDataWriteStream::grow() {\n+  int nsize = _size * 2;\n+  const int min_expansion = UNSIGNED5::MAX_LENGTH;\n+  if (nsize < min_expansion*2) {\n+    nsize = min_expansion*2;\n+  }\n+  u_char* _new_buffer = NEW_RESOURCE_ARRAY(u_char, nsize);\n+  memcpy(_new_buffer, _buffer, _position);\n+  _buffer = _new_buffer;\n+  _size   = nsize;\n+}\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/moveBits.hpp\"\n@@ -46,1 +47,1 @@\n-  u_char* buffer() const { return _buffer; }\n+  u_char* buffer() const               { return _buffer; }\n@@ -49,2 +50,2 @@\n-  virtual int position()                  { return _position; }\n-  virtual void set_position(int position) { _position = position; }\n+  int position() const                 { return _position; }\n+  void set_position(int position)      { _position = position; }\n@@ -62,2 +63,2 @@\n-  virtual jboolean read_bool()         { return (jboolean) read();      }\n-  virtual jbyte    read_byte()         { return (jbyte   ) read();      }\n+  jboolean read_bool()                 { return (jboolean) read();      }\n+  jbyte    read_byte()                 { return (jbyte   ) read();      }\n@@ -71,1 +72,1 @@\n-  virtual jint     read_int() {\n+  jint     read_int() {\n@@ -85,5 +86,0 @@\n-  void grow();\n-\n- protected:\n-  int _size;\n-\n@@ -94,0 +90,4 @@\n+  void grow();\n+\n+ protected:\n+  int _size;\n@@ -100,0 +100,2 @@\n+  void write_bool(jboolean value)      { write(value);      }\n+  void write_byte(jbyte value)         { write(value);      }\n@@ -107,3 +109,1 @@\n-  virtual void write_bool(jboolean value) { write(value); }\n-  virtual void write_byte(jbyte value)    { write(value); }\n-  virtual void write_int(juint value) {\n+  void write_int(juint value) {\n@@ -115,2 +115,6 @@\n-\/\/ Modified compression algorithm for a data set in which a significant part of the data is null\n-class CompressedSparseDataReadStream : public CompressedReadStream {\n+class CompressedBitStream : public ResourceObj {\n+protected:\n+  u_char* _buffer;\n+  int     _position; \/\/ current byte offset\n+  size_t  byte_pos_ {0}; \/\/ current bit offset\n+\n@@ -118,2 +122,4 @@\n-  CompressedSparseDataReadStream(u_char* buffer, int position = 0)\n-  : CompressedReadStream(buffer, position) {}\n+  CompressedBitStream(u_char* buffer = NULL, int position = 0) {\n+    _buffer   = buffer;\n+    _position = position;\n+  }\n@@ -121,3 +127,7 @@\n-  jboolean read_bool() override { return read_int(); }\n-  jbyte    read_byte() override { return read_int(); }\n-  jint     read_int()  override;\n+  u_char* buffer() const { return _buffer; }\n+};\n+\n+\/\/ Modified compression algorithm for a data set in which a significant part of the data is null\n+class CompressedSparseDataReadStream : public CompressedBitStream {\n+public:\n+  CompressedSparseDataReadStream(u_char* buffer, int position) : CompressedBitStream(buffer, position) {}\n@@ -125,1 +135,1 @@\n-  void set_position(int pos) override {\n+  void set_position(int pos) {\n@@ -129,2 +139,0 @@\n-private:\n-  size_t byte_pos_ {0};\n@@ -132,0 +140,16 @@\n+  jboolean read_bool()       { return read_int(); }\n+  jbyte    read_byte()       { return read_int(); }\n+  jint     read_signed_int() { return UNSIGNED5::decode_sign(read_int()); }\n+  jint     read_int();\n+  jdouble  read_double() {\n+    jint h = reverse_bits(read_int());\n+    jint l = reverse_bits(read_int());\n+    return jdouble_cast(jlong_from(h, l));\n+  }\n+  jlong    read_long() {\n+    jint low  = read_signed_int();\n+    jint high = read_signed_int();\n+    return jlong_from(high, low);\n+  }\n+\n+protected:\n@@ -134,0 +158,1 @@\n+  inline u_char read()       { return _buffer[_position++]; }\n@@ -136,1 +161,1 @@\n-class CompressedSparseDataWriteStream : public CompressedWriteStream {\n+class CompressedSparseDataWriteStream : public CompressedBitStream {\n@@ -138,1 +163,4 @@\n-  CompressedSparseDataWriteStream(int initial_size) : CompressedWriteStream(initial_size) {}\n+  CompressedSparseDataWriteStream(int initial_size) : CompressedBitStream() {\n+    _buffer   = NEW_RESOURCE_ARRAY(u_char, initial_size);\n+    _size     = initial_size;\n+  }\n@@ -140,3 +168,14 @@\n-  void write_bool(jboolean value) override { write_int(value ? 1 : 0); }\n-  void write_byte(jbyte value)    override { write_int(value); }\n-  void write_int(juint value) override;\n+  void write_bool(jboolean value)   { write_int(value ? 1 : 0); }\n+  void write_byte(jbyte value)      { write_int(value); }\n+  void write_signed_int(jint value) { write_int(UNSIGNED5::encode_sign(value)); }\n+  void write_int(juint value);\n+  void write_double(jdouble value)  {\n+    juint rh = reverse_bits(high(jlong_cast(value)));\n+    juint rl = reverse_bits(low( jlong_cast(value)));\n+    write_int(rh);\n+    write_int(rl);\n+  }\n+  void write_long(jlong value)      {\n+    write_signed_int(low(value));\n+    write_signed_int(high(value));\n+  }\n@@ -144,2 +183,2 @@\n-  int position() override;\n-  void set_position(int pos) override {\n+  int position(); \/\/ method have a side effect: the current byte becomes aligned\n+  void set_position(int pos) {\n@@ -149,1 +188,2 @@\n-private:\n+protected:\n+  int    _size;\n@@ -151,1 +191,8 @@\n-  size_t byte_pos_ {0};\n+\n+  void grow();\n+  void write(u_char b) {\n+    if (_position >= _size) {\n+      grow();\n+    }\n+    _buffer[_position++] = b;\n+  }\n","filename":"src\/hotspot\/share\/code\/compressedStream.hpp","additions":80,"deletions":33,"binary":false,"changes":113,"status":"modified"}]}