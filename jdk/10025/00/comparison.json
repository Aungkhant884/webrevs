{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,77 @@\n+\n+\n+bool CompressedSparseDataReadStream::read_zero() {\n+  if (_buffer[_position] & (1 << (7 - byte_pos_))) {\n+    return 0; \/\/ not a zero data\n+  }\n+  if (++byte_pos_ == 8) {\n+    _position++;\n+    byte_pos_ = 0;\n+  }\n+  return 1;\n+}\n+\n+uint8_t CompressedSparseDataReadStream::read_byte_impl() {\n+  uint8_t b1 = _buffer[_position] << byte_pos_;\n+  uint8_t b2 = _buffer[++_position] >> (8 - byte_pos_);\n+  return b1 | b2;\n+}\n+\n+jint CompressedSparseDataReadStream::read_int() {\n+  if (read_zero()) {\n+    return 0;\n+  }\n+  \/\/ integer value encoded as a sequence of 1 to 5 bytes\n+  \/\/ - the most frequent case (0 < x < 64) is encoded in one byte\n+  \/\/ - the payload of the first byte is 6 bits, the payload of the following bytes is 7 bits\n+  \/\/ - the most significant bit in the first byte is occupied by a zero flag\n+  \/\/ - each byte has a bit indicating whether it is the last byte in the sequence\n+  uint8_t b = read_byte_impl();\n+  juint result = b & 0x3f;\n+  for (int i = 0; (i == 0) ? (b & 0x40) : (b & 0x80); i++) {\n+    b = read_byte_impl();\n+    result |= ((b & 0x7f) << (6 + 7 * i));\n+  }\n+  return (jint)result;\n+}\n+\n+int CompressedSparseDataWriteStream::position() {\n+  if (byte_pos_ == 0) {\n+    return _position;\n+  }\n+  \/\/ flush current data and start a new byte\n+  write(curr_byte_ << (8 - byte_pos_));\n+  curr_byte_ = 0;\n+  byte_pos_ = 0;\n+  return _position;\n+}\n+\n+void CompressedSparseDataWriteStream::write_zero() {\n+  curr_byte_ <<= 1; \/\/ zero bit represents a zero word\n+  if (++byte_pos_ == 8) {\n+    write(curr_byte_);\n+    curr_byte_ = 0;\n+    byte_pos_ = 0;\n+  }\n+}\n+\n+void CompressedSparseDataWriteStream::write_byte_impl(uint8_t b) {\n+  write((curr_byte_ << (8 - byte_pos_)) | (b >> byte_pos_));\n+  curr_byte_ = (0xff >> (8 - byte_pos_)) & b;\n+}\n+\n+void CompressedSparseDataWriteStream::write_int(juint val) {\n+  if (val == 0) {\n+    write_zero();\n+    return;\n+  }\n+  int bit0 = 0x80; \/\/ first byte upper bit is set to indicate a value is not zero\n+  juint next = val >> 6;\n+  int bit1 = (next != 0) ? 0x40 : 0; \/\/ bit indicating a last byte\n+  write_byte_impl(bit0 | bit1 | (val & 0x3f));\n+  while (next != 0) {\n+    bit1 = (next >> 7) ? 0x80 : 0;\n+    write_byte_impl(bit1 | (next & 0x7f));\n+    next >>= 7;\n+  }\n+}\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":78,"deletions":1,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  u_char* buffer() const               { return _buffer; }\n+  u_char* buffer() const { return _buffer; }\n@@ -49,2 +49,2 @@\n-  int position() const                 { return _position; }\n-  void set_position(int position)      { _position = position; }\n+  virtual int position()                  { return _position; }\n+  virtual void set_position(int position) { _position = position; }\n@@ -62,2 +62,2 @@\n-  jboolean read_bool()                 { return (jboolean) read();      }\n-  jbyte    read_byte()                 { return (jbyte   ) read();      }\n+  virtual jboolean read_bool()         { return (jboolean) read();      }\n+  virtual jbyte    read_byte()         { return (jbyte   ) read();      }\n@@ -71,1 +71,1 @@\n-  jint     read_int() {\n+  virtual jint     read_int() {\n@@ -76,1 +76,1 @@\n-\n+\/\/ Pack200 compression algorithm\n@@ -85,4 +85,0 @@\n-  void write(u_char b) {\n-    if (full()) grow();\n-    store(b);\n-  }\n@@ -94,0 +90,5 @@\n+  void write(u_char b) {\n+    if (full()) grow();\n+    store(b);\n+  }\n+\n@@ -99,2 +100,0 @@\n-  void write_bool(jboolean value)      { write(value);      }\n-  void write_byte(jbyte value)         { write(value);      }\n@@ -108,1 +107,3 @@\n-  void write_int(juint value) {\n+  virtual void write_bool(jboolean value) { write(value); }\n+  virtual void write_byte(jbyte value)    { write(value); }\n+  virtual void write_int(juint value) {\n@@ -114,0 +115,42 @@\n+\/\/ Modified compression algorithm for a data set in which a significant part of the data is null\n+class CompressedSparseDataReadStream : public CompressedReadStream {\n+public:\n+  CompressedSparseDataReadStream(u_char* buffer, int position = 0)\n+  : CompressedReadStream(buffer, position) {}\n+\n+  jboolean read_bool() override { return read_int(); }\n+  jbyte    read_byte() override { return read_int(); }\n+  jint     read_int()  override;\n+\n+  void set_position(int pos) override {\n+    byte_pos_ = 0;\n+    _position = pos;\n+  }\n+private:\n+  size_t byte_pos_ {0};\n+\n+  bool read_zero();\n+  uint8_t read_byte_impl();\n+};\n+\n+class CompressedSparseDataWriteStream : public CompressedWriteStream {\n+public:\n+  CompressedSparseDataWriteStream(int initial_size) : CompressedWriteStream(initial_size) {}\n+\n+  void write_bool(jboolean value) override { write_int(value ? 1 : 0); }\n+  void write_byte(jbyte value)    override { write_int(value); }\n+  void write_int(juint value) override;\n+\n+  int position() override;\n+  void set_position(int pos) override {\n+    position();\n+    _position = pos;\n+  }\n+private:\n+  u_char curr_byte_ {0};\n+  size_t byte_pos_ {0};\n+\n+  void write_zero();  \/\/ The zero word is encoded with a single zero bit\n+  void write_byte_impl(uint8_t b);\n+};\n+\n","filename":"src\/hotspot\/share\/code\/compressedStream.hpp","additions":58,"deletions":15,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-: CompressedWriteStream(initial_size) {\n+: CompressedSparseDataWriteStream(initial_size) {\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-class DebugInfoReadStream : public CompressedReadStream {\n+class DebugInfoReadStream : public CompressedSparseDataReadStream {\n@@ -305,1 +305,1 @@\n-    CompressedReadStream(code->scopes_data_begin(), offset) {\n+    CompressedSparseDataReadStream(code->scopes_data_begin(), offset) {\n@@ -324,1 +324,1 @@\n-\/\/ DebugInfoWriteStream specializes CompressedWriteStream for\n+\/\/ DebugInfoWriteStream specializes CompressedSparseDataWriteStream for\n@@ -327,1 +327,1 @@\n-class DebugInfoWriteStream : public CompressedWriteStream {\n+class DebugInfoWriteStream : public CompressedSparseDataWriteStream {\n","filename":"src\/hotspot\/share\/code\/debugInfo.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  int stream_position() const           { return _stream.position(); }\n+  int stream_position()                 { return _stream.position(); }\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-  private short read() {\n+  protected short read() {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CompressedReadStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.jvm.hotspot.code;\n+\n+import sun.jvm.hotspot.debugger.*;\n+\n+public class CompressedSparceDataReadStream extends CompressedReadStream {\n+\n+  public CompressedSparceDataReadStream(Address buffer, int position) {\n+    super(buffer, position);\n+    curr_byte_ = (byte) read();\n+  }\n+\n+  byte curr_byte_ = 0;\n+  int  byte_pos_  = 0;\n+\n+  public byte readByteImpl() {\n+    byte b = (byte) (curr_byte_ << byte_pos_);\n+    curr_byte_ = (byte) read();\n+    if (byte_pos_ > 0) {\n+      b |= (0xFF & curr_byte_) >> (8 - byte_pos_);\n+    }\n+    return b;\n+  }\n+\n+  boolean readZero() {\n+    if (0 != (curr_byte_ & (1 << (7 - byte_pos_)))) {\n+      return false;\n+    }\n+    if (++byte_pos_ == 8) {\n+      byte_pos_ = 0;\n+      curr_byte_ = (byte) read();\n+    }\n+    return true;\n+  }\n+\n+  public int readInt() {\n+    if (readZero()) {\n+      return 0;\n+    }\n+    byte b = readByteImpl();\n+    int result = b & 0x3f;\n+    for (int i = 0; 0 != ((i == 0) ? (b & 0x40) : (b & 0x80)); i++) {\n+        b = readByteImpl();\n+        result |= ((b & 0x7f) << (6 + 7 * i));\n+    }\n+    return result;\n+  }\n+\n+  public boolean readBoolean() { return readInt() != 0; }\n+  public byte    readByte()    { return (byte) readInt(); }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CompressedSparceDataReadStream.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-public class DebugInfoReadStream extends CompressedReadStream {\n+public class DebugInfoReadStream extends CompressedSparceDataReadStream {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/DebugInfoReadStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}