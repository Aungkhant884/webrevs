{"files":[{"patch":"@@ -197,2 +197,5 @@\n-  int position() {\n-    align(); \/\/ method positon() have a side effect: the current data becomes aligned\n+\n+public:\n+  \/\/ Start grouped data. Return a byte offset position in the stream where grouped data begins\n+  int start_scope() {\n+    align(); \/\/ a side effect!\n@@ -201,1 +204,3 @@\n-  void set_position(int pos) {\n+\n+  \/\/ Roll the stream state back to the given position\n+  void roll_back(int pos) {\n@@ -207,0 +212,9 @@\n+  \/\/ Return the number of bytes used\n+  int data_size() const {\n+    return (_bit_position == 0) ? _position : (_position + 1);\n+  }\n+\n+  int is_empty() const {\n+    return (_position == 0) && (_bit_position == 0);\n+  }\n+\n","filename":"src\/hotspot\/share\/code\/compressedStream.hpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  assert(_stream->position() > serialized_null, \"sanity\");\n+  assert(!_stream->is_empty(), \"sanity\");\n@@ -201,1 +201,1 @@\n-  int result = stream()->position();\n+  int result = stream()->start_scope();\n@@ -211,1 +211,1 @@\n-    stream()->set_position(result);\n+    stream()->roll_back(result);\n@@ -222,1 +222,1 @@\n-  int result = stream()->position();\n+  int result = stream()->start_scope();\n@@ -232,1 +232,1 @@\n-    stream()->set_position(result);\n+    stream()->roll_back(result);\n@@ -262,1 +262,1 @@\n-  int stream_length = stream()->position() - stream_offset;\n+  int stream_length = stream()->data_size() - stream_offset;\n@@ -302,1 +302,1 @@\n-  int stream_offset = stream()->position();\n+  int stream_offset = stream()->start_scope();\n@@ -347,1 +347,1 @@\n-    stream()->set_position(stream_offset);\n+    stream()->roll_back(stream_offset);\n@@ -421,1 +421,1 @@\n-  return _stream->position();\n+  return _stream->data_size();\n@@ -434,1 +434,1 @@\n-  nm->copy_scopes_data(stream()->buffer(), stream()->position());\n+  nm->copy_scopes_data(stream()->buffer(), stream()->data_size());\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,4 +29,6 @@\n-void check_int_encoding() {\n-  ResourceMark rm;\n-  DebugInfoWriteStream out(NULL, 100);\n-  const u_char* buf = out.buffer();\n+class CompressedSparseDataWriteStreamTest {\n+public:\n+  void check_int_encoding() {\n+    ResourceMark rm;\n+    DebugInfoWriteStream out(NULL, 100);\n+    const u_char* buf = out.buffer();\n@@ -34,10 +36,10 @@\n-  out.set_position(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  out.write_int(0);\n-  ASSERT_TRUE(out.position() == 1 && buf[0] == 0);\n+    out.roll_back(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    out.write_int(0);\n+    ASSERT_TRUE(out.start_scope() == 1 && buf[0] == 0);\n@@ -45,3 +47,3 @@\n-  out.set_position(0);\n-  out.write_int(1);\n-  ASSERT_TRUE(out.position() == 1 && buf[0] == 0x81);\n+    out.roll_back(0);\n+    out.write_int(1);\n+    ASSERT_TRUE(out.start_scope() == 1 && buf[0] == 0x81);\n@@ -49,3 +51,3 @@\n-  out.set_position(0);\n-  out.write_int(0xff);\n-  ASSERT_TRUE(out.position() == 2 && buf[0] == 0xff && buf[1] == 0x3);\n+    out.roll_back(0);\n+    out.write_int(0xff);\n+    ASSERT_TRUE(out.start_scope() == 2 && buf[0] == 0xff && buf[1] == 0x3);\n@@ -53,3 +55,3 @@\n-  out.set_position(0);\n-  out.write_int(0xffff);\n-  ASSERT_TRUE(out.position() == 3 && buf[0] == 0xff && buf[1] == 0xff && buf[2] == 0x7);\n+    out.roll_back(0);\n+    out.write_int(0xffff);\n+    ASSERT_TRUE(out.start_scope() == 3 && buf[0] == 0xff && buf[1] == 0xff && buf[2] == 0x7);\n@@ -57,4 +59,4 @@\n-  out.set_position(0);\n-  out.write_int(0xffffffff);\n-  ASSERT_TRUE(out.position() == 5 && ((buf[0] & buf[1] & buf[2] & buf[3]) == 0xff) && buf[4] == 0x1f);\n-}\n+    out.roll_back(0);\n+    out.write_int(0xffffffff);\n+    ASSERT_TRUE(out.start_scope() == 5 && ((buf[0] & buf[1] & buf[2] & buf[3]) == 0xff) && buf[4] == 0x1f);\n+  }\n@@ -62,3 +64,3 @@\n-void check_read_write() {\n-  ResourceMark rm;\n-  DebugInfoWriteStream out(NULL, 100);\n+  void check_read_write() {\n+    ResourceMark rm;\n+    DebugInfoWriteStream out(NULL, 100);\n@@ -66,9 +68,9 @@\n-  for (int i = 0; i < 1000*1000; i++) {\n-    out.write_int(i);\n-    out.write_bool((bool)i);\n-    out.write_byte((jbyte)i);\n-    out.write_signed_int((jint)i);\n-    out.write_double((jdouble)i);\n-    out.write_long((jlong)i);\n-  }\n-  out.align();\n+    for (int i = 0; i < 1000*1000; i++) {\n+      out.write_int(i);\n+      out.write_bool((bool)i);\n+      out.write_byte((jbyte)i);\n+      out.write_signed_int((jint)i);\n+      out.write_double((jdouble)i);\n+      out.write_long((jlong)i);\n+    }\n+    out.align();\n@@ -76,2 +78,2 @@\n-  const u_char* buf = out.buffer();\n-  CompressedSparseDataReadStream in(buf, 0);\n+    const u_char* buf = out.buffer();\n+    CompressedSparseDataReadStream in(buf, 0);\n@@ -79,7 +81,8 @@\n-  for (int i = 0; i < 1000*1000; i++) {\n-    ASSERT_TRUE(in.read_int() == i);\n-    ASSERT_TRUE(in.read_bool() == (jboolean)(bool)i);\n-    ASSERT_TRUE(in.read_byte() == (jbyte)i);\n-    ASSERT_TRUE(in.read_signed_int() == (jint)i);\n-    ASSERT_TRUE(in.read_double() == (jdouble)i);\n-    ASSERT_TRUE(in.read_long() == (jlong)i);\n+    for (int i = 0; i < 1000*1000; i++) {\n+      ASSERT_TRUE(in.read_int() == i);\n+      ASSERT_TRUE(in.read_bool() == (jboolean)(bool)i);\n+      ASSERT_TRUE(in.read_byte() == (jbyte)i);\n+      ASSERT_TRUE(in.read_signed_int() == (jint)i);\n+      ASSERT_TRUE(in.read_double() == (jdouble)i);\n+      ASSERT_TRUE(in.read_long() == (jlong)i);\n+    }\n@@ -87,1 +90,0 @@\n-}\n@@ -89,11 +91,12 @@\n-void check_buffer_grow() {\n-  ResourceMark rm;\n-  DebugInfoWriteStream out(NULL, 100);\n-  out.set_position(99);\n-  out.write_int(0);\n-  out.align();\n-  out.write_int(1);\n-  out.write_int(2);\n-  const u_char* buf = out.buffer();\n-  ASSERT_TRUE(out.position() == 102 && buf[99] == 0 && buf[100] == 0x81 && buf[101] == 0x82);\n-}\n+  void check_buffer_grow() {\n+    ResourceMark rm;\n+    DebugInfoWriteStream out(NULL, 100);\n+    out.roll_back(99);\n+    out.write_int(0);\n+    out.align();\n+    out.write_int(1);\n+    out.write_int(2);\n+    const u_char* buf = out.buffer();\n+    ASSERT_TRUE(out.start_scope() == 102 && buf[99] == 0 && buf[100] == 0x81 && buf[101] == 0x82);\n+  }\n+};\n@@ -103,3 +106,4 @@\n-  check_int_encoding();\n-  check_read_write();\n-  check_buffer_grow();\n+  CompressedSparseDataWriteStreamTest test;\n+  test.check_int_encoding();\n+  test.check_read_write();\n+  test.check_buffer_grow();\n","filename":"test\/hotspot\/gtest\/code\/test_debugInfoCompression.cpp","additions":67,"deletions":63,"binary":false,"changes":130,"status":"modified"}]}