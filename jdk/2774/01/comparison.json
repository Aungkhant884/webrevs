{"files":[{"patch":"@@ -4796,0 +4796,24 @@\n+\n+Node* Compile::narrow_value(BasicType bt, Node* value, const Type* type, PhaseGVN* phase, bool transform_res) {\n+  if (type != NULL && phase->type(value)->higher_equal(type)) {\n+    return value;\n+  }\n+  Node* result = NULL;\n+  if (bt == T_BYTE) {\n+    result = phase->transform(new LShiftINode(value, phase->intcon(24)));\n+    result = new RShiftINode(result, phase->intcon(24));\n+  } else if (bt == T_BOOLEAN) {\n+    result = new AndINode(value, phase->intcon(0xFF));\n+  } else if (bt == T_CHAR) {\n+    result = new AndINode(value,phase->intcon(0xFFFF));\n+  } else {\n+    assert(bt == T_SHORT, \"unexpected narrow type\");\n+    result = phase->transform( new LShiftINode(value, phase->intcon(16)) );\n+    result = new RShiftINode(result, phase->intcon(16));\n+  }\n+  if (transform_res) {\n+    result = phase->transform(result);\n+  }\n+  return result;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1195,3 +1195,4 @@\n-  static bool\n-  push_thru_add(PhaseGVN* phase, Node* z, const TypeInteger* tz, const TypeInteger*& rx, const TypeInteger*& ry,\n-                BasicType bt);\n+  static bool push_thru_add(PhaseGVN* phase, Node* z, const TypeInteger* tz, const TypeInteger*& rx, const TypeInteger*& ry,\n+                            BasicType bt);\n+\n+  static Node* narrow_value(BasicType bt, Node* value, const Type* type, PhaseGVN* phase, bool transform_res);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -453,0 +453,3 @@\n+        if (is_subword_type(ft)) {\n+          n = Compile::narrow_value(ft, n, phi_type, &_igvn, true);\n+        }\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2082,1 +2082,1 @@\n-Node *LoadBNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+Node* LoadBNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -2085,3 +2085,5 @@\n-  if( value && !phase->type(value)->higher_equal( _type ) ) {\n-    Node *result = phase->transform( new LShiftINode(value, phase->intcon(24)) );\n-    return new RShiftINode(result, phase->intcon(24));\n+  if (value != NULL) {\n+    Node* narrow = Compile::narrow_value(T_BYTE, value, _type, phase, false);\n+    if (narrow != value) {\n+      return narrow;\n+    }\n@@ -2117,2 +2119,6 @@\n-  if (value && !phase->type(value)->higher_equal(_type))\n-    return new AndINode(value, phase->intcon(0xFF));\n+  if (value != NULL) {\n+    Node* narrow = Compile::narrow_value(T_BOOLEAN, value, _type, phase, false);\n+    if (narrow != value) {\n+      return narrow;\n+    }\n+  }\n@@ -2144,1 +2150,1 @@\n-Node *LoadUSNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+Node* LoadUSNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -2147,2 +2153,6 @@\n-  if( value && !phase->type(value)->higher_equal( _type ) )\n-    return new AndINode(value,phase->intcon(0xFFFF));\n+  if (value != NULL) {\n+    Node* narrow = Compile::narrow_value(T_CHAR, value, _type, phase, false);\n+    if (narrow != value) {\n+      return narrow;\n+    }\n+  }\n@@ -2174,1 +2184,1 @@\n-Node *LoadSNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+Node* LoadSNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -2177,3 +2187,5 @@\n-  if( value && !phase->type(value)->higher_equal( _type ) ) {\n-    Node *result = phase->transform( new LShiftINode(value, phase->intcon(16)) );\n-    return new RShiftINode(result, phase->intcon(16));\n+  if (value != NULL) {\n+    Node* narrow = Compile::narrow_value(T_SHORT, value, _type, phase, false);\n+    if (narrow != value) {\n+      return narrow;\n+    }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2589,3 +2589,2 @@\n-    a = _gvn.transform( new LShiftINode(a,_gvn.intcon(24)) );\n-    a = _gvn.transform( new RShiftINode(a,_gvn.intcon(24)) );\n-    push( a );\n+    a = Compile::narrow_value(T_BYTE, a, NULL, &_gvn, true);\n+    push(a);\n@@ -2595,3 +2594,2 @@\n-    a = _gvn.transform( new LShiftINode(a,_gvn.intcon(16)) );\n-    a = _gvn.transform( new RShiftINode(a,_gvn.intcon(16)) );\n-    push( a );\n+    a = Compile::narrow_value(T_SHORT, a, NULL, &_gvn, true);\n+    push(a);\n@@ -2601,1 +2599,2 @@\n-    push( _gvn.transform( new AndINode(a,_gvn.intcon(0xFFFF)) ) );\n+    a = Compile::narrow_value(T_CHAR, a, NULL, &_gvn, true);\n+    push(a);\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8261812\n+ * @summary C2 compilation fails with assert(!had_error) failed: bad dominance\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestValAtSafepointOverflowsInt\n+ *\n+ *\/\n+\n+public class TestValAtSafepointOverflowsInt {\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            testByte(true, false);\n+            testByte(false, false);\n+            testShort(true, false);\n+            testShort(false, false);\n+            testChar(true, false);\n+            testChar(false, false);\n+        }\n+        testByte(true, true);\n+        testShort(true, true);\n+        testChar(true, true);\n+    }\n+\n+    private static Object testByte(boolean flag, boolean flag2) {\n+        int i;\n+        \/\/ loop to delay constant folding\n+        for (i = 0; i < 9; i++) {\n+        }\n+        C obj = new C();\n+        if (flag) {\n+            obj.byteField = (byte)(1 << i);\n+        } else {\n+            obj.byteField = (byte)(1 << (i+1));\n+        }\n+        \/\/ Phi for byte here for uncommon trap in never taken path below\n+        \/\/ Phi inputs don't fit in a byte. Phi transfomed to top.\n+        if (flag2) {\n+            return obj;\n+        }\n+        return null;\n+    }\n+\n+    private static Object testShort(boolean flag, boolean flag2) {\n+        int i;\n+        for (i = 0; i < 17; i++) {\n+        }\n+        C obj = new C();\n+        if (flag) {\n+            obj.shortField = (short)(1 << i);\n+        } else {\n+            obj.shortField = (short)(1 << (i+1));\n+        }\n+        if (flag2) {\n+            return obj;\n+        }\n+        return null;\n+    }\n+\n+    private static Object testChar(boolean flag, boolean flag2) {\n+        int i;\n+        for (i = 0; i < 17; i++) {\n+        }\n+        C obj = new C();\n+        if (flag) {\n+            obj.charField = (char)(1 << i);\n+        } else {\n+            obj.charField = (char)(1 << (i+1));\n+        }\n+        if (flag2) {\n+            return obj;\n+        }\n+        return null;\n+    }\n+\n+\n+    static class C {\n+        byte byteField;\n+        short shortField;\n+        char charField;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestValAtSafepointOverflowsInt.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}