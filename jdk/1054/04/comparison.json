{"files":[{"patch":"@@ -294,1 +294,1 @@\n-  Register tmp1 = noreg;\n+  Register tmp1 = noreg, tmp2 = noreg;\n@@ -297,1 +297,1 @@\n-    \/\/ Allocate tmp-reg.\n+    \/\/ Allocate temporary registers\n@@ -301,2 +301,6 @@\n-        tmp1 = r;\n-        break;\n+        if (tmp1 == noreg) {\n+          tmp1 = r;\n+        } else {\n+          tmp2 = r;\n+          break;\n+        }\n@@ -305,0 +309,5 @@\n+    assert(tmp1 != noreg, \"tmp1 allocated\");\n+    assert(tmp2 != noreg, \"tmp2 allocated\");\n+    assert_different_registers(tmp1, tmp2, src.base(), src.index());\n+    assert_different_registers(tmp1, tmp2, dst);\n+\n@@ -306,2 +315,1 @@\n-    assert_different_registers(tmp1, src.base(), src.index());\n-    assert_different_registers(tmp1, dst);\n+    __ push(tmp2);\n@@ -312,1 +320,2 @@\n-    __ movbool(tmp1, Address(tmp1, (intptr_t) ShenandoahHeap::in_cset_fast_test_addr(), Address::times_1));\n+    __ movptr(tmp2, (intptr_t) ShenandoahHeap::in_cset_fast_test_addr());\n+    __ movbool(tmp1, Address(tmp1, tmp2, Address::times_1));\n@@ -336,3 +345,13 @@\n-  Register tmp2 = (dst == rsi) ? rdx : rsi;\n-  assert_different_registers(dst, tmp2);\n-  __ lea(tmp2, src);\n+  \/\/ Shuffle registers such that dst is in c_rarg0 and addr in c_rarg1.\n+#ifdef _LP64\n+  Register arg0 = c_rarg0, arg1 = c_rarg1;\n+#else\n+  Register arg0 = rdi, arg1 = rsi;\n+#endif\n+  if (dst == arg1) {\n+    __ lea(arg0, src);\n+    __ xchgptr(arg1, arg0);\n+  } else {\n+    __ lea(arg1, src);\n+    __ movptr(arg0, dst);\n+  }\n@@ -344,1 +363,1 @@\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow), dst, tmp2);\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow), arg0, arg1);\n@@ -346,1 +365,1 @@\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier), dst, tmp2);\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier), arg0, arg1);\n@@ -351,1 +370,1 @@\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), dst, tmp2);\n+        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), arg0, arg1);\n@@ -353,1 +372,1 @@\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), dst, tmp2);\n+        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), arg0, arg1);\n@@ -357,1 +376,1 @@\n-      __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), dst, tmp2);\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), arg0, arg1);\n@@ -386,0 +405,1 @@\n+    __ pop(tmp2);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":35,"deletions":15,"binary":false,"changes":50,"status":"modified"}]}