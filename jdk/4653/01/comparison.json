{"files":[{"patch":"@@ -2825,7 +2825,2 @@\n-  assert(a->is_array(), \"just checking\");\n-  BasicType type;\n-  if (a->is_objArray()) {\n-    type = T_OBJECT;\n-  } else {\n-    type = TypeArrayKlass::cast(a->klass())->element_type();\n-  }\n+  assert(a->is_typeArray(), \"Primitive array only\");\n+  BasicType type = TypeArrayKlass::cast(a->klass())->element_type();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test TestPrimitiveArrayCriticalWithBadParam\n+ * @bug 8269697\n+ * @summary -Xcheck:jni should catch wrong parameter passed to GetPrimitiveArrayCritical\n+ * @library \/test\/lib\n+ * @run main\/native TestPrimitiveArrayCriticalWithBadParam\n+ *\/\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.io.IOException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\n+public class TestPrimitiveArrayCriticalWithBadParam {\n+    static {\n+        System.loadLibrary(\"TestBadParam\");\n+    }\n+\n+    private static native void pin(Object[] a);\n+    private static native void unpin(Object[] a);\n+\n+    public static void main(String[] args) {\n+        if (args.length > 0) {\n+            test();\n+        } else {\n+            runTest();\n+        }\n+    }\n+\n+    private static void runTest() {\n+        List<String> pbArgs = new ArrayList<>();\n+        pbArgs.add(\"-Xcheck:jni\");\n+        pbArgs.add(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH);\n+        pbArgs.add(TestPrimitiveArrayCriticalWithBadParam.class.getName());\n+        pbArgs.add(\"test\");\n+        try {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(pbArgs.toArray(new String[0]));\n+            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+            \/\/ -Xcheck:jni should warn the bad parameter\n+            analyzer.shouldContain(\"FATAL ERROR in native method: Primitive type array expected but not received for JNI array operation\");\n+            analyzer.shouldHaveExitValue(134);\n+        } catch (IOException e) {\n+            throw  new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void test() {\n+        Object[] objs = new Object[10];\n+        for (int i = 0; i < objs.length; i++) {\n+            objs[i] = new MyClass();\n+        }\n+        pin(objs);\n+        System.out.println(\"Object array pinned\");\n+        unpin(objs);\n+    }\n+    public static class MyClass {\n+        public Object ref = new Object();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestPrimitiveArrayCriticalWithBadParam.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include <jni.h>\n+#include <string.h>\n+\n+static jint* pinned;\n+\n+JNIEXPORT void JNICALL\n+Java_TestPrimitiveArrayCriticalWithBadParam_pin(JNIEnv *env, jclass unused, jarray a) {\n+  pinned = (*env)->GetPrimitiveArrayCritical(env, a, 0);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_TestPrimitiveArrayCriticalWithBadParam_unpin(JNIEnv *env, jclass unused, jarray a) {\n+  (*env)->ReleasePrimitiveArrayCritical(env, a, pinned, 0);\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libTestBadParam.c","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}