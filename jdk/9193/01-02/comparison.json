{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -31,0 +30,2 @@\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.nio.charset.StandardCharsets.UTF_16;\n@@ -49,1 +50,1 @@\n- * @bug 8201276 8205058 8209576 8287541\n+ * @bug 8201276 8205058 8209576 8287541 8288589\n@@ -63,0 +64,1 @@\n+    private static final byte[] MALFORMED_UTF16 = {(byte)0x00, (byte)0x20, (byte)0x00};\n@@ -115,0 +117,11 @@\n+    \/*\n+     * DataProvider for illegal input bytes test\n+     *\/\n+    @DataProvider(name = \"illegalInputBytes\")\n+    public Object[][] getIllegalInputBytes() throws IOException {\n+        Path path = Files.createTempFile(\"illegalInputBytes\", null);\n+        return new Object[][]{\n+            {path, MALFORMED_UTF16, UTF_16},\n+        };\n+    }\n+\n@@ -274,0 +287,20 @@\n+    \/**\n+     * Verifies that IOException is thrown when reading a file containing\n+     * illegal bytes\n+     *\n+     * @param path the path to write and read\n+     * @param data the data used for the test\n+     * @param csRead the Charset to use for reading the file\n+     * @throws IOException when the Charset used for reading the file is incorrect\n+     *\/\n+    @Test(dataProvider = \"illegalInputBytes\", expectedExceptions = MalformedInputException.class)\n+    public void testMalformedReadBytes(Path path, byte[] data, Charset csRead) throws IOException {\n+        path.toFile().deleteOnExit();\n+        Files.write(path, data, CREATE);\n+        if (csRead == null) {\n+            Files.readString(path);\n+        } else {\n+            Files.readString(path, csRead);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/ReadWriteString.java","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}