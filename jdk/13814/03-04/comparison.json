{"files":[{"patch":"@@ -2101,10 +2101,6 @@\n-    \/\/ There is a race between threads that exit during the loop and calling\n-    \/\/ exited_allocated_bytes. If the result is initialized with exited_allocated_bytes,\n-    \/\/ the final result may be \"too small\" because a thread might be retired before\n-    \/\/ the loop gets to it and thus not be counted. If, on the other hand and done\n-    \/\/ here, exited_allocated_bytes is added after the loop, the final result might be\n-    \/\/ \"too large\" because a thread might be counted twice, once in the loop and again\n-    \/\/ in exited_allocated_bytes if it's retired after it's encountered in the loop but\n-    \/\/ before the call to exited_allocated_bytes. A user might use this method to\n-    \/\/ trigger some sort of alarm, so it was felt best to err on the high side.\n-    jlong result = 0;\n+    \/\/ The result may be \"too small\" because the threads iterator takes a\n+    \/\/ snapshot and new threads may be created after result is initialized.\n+    \/\/ There's no check for terminated threads in the loop because their\n+    \/\/ allocated byte counts aren't included in exited_allocated_bytes\n+    \/\/ when result is initialized.\n+    jlong result = ThreadService::exited_allocated_bytes();\n@@ -2115,1 +2111,1 @@\n-    return result + ThreadService::exited_allocated_bytes();\n+    return result;\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"}]}