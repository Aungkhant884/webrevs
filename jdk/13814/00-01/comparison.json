{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-  JMM_VERSION_3_0 = 0x20030000,\n@@ -245,0 +244,2 @@\n+  jlong        (JNICALL *GetAllThreadAllocatedMemory)\n+                                                 (JNIEnv *env);\n@@ -321,2 +322,1 @@\n-  jlong        (JNICALL *GetAllThreadAllocatedMemory)\n-                                                 (JNIEnv *env);\n+  void*        reserved6;\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2102,1 +2102,1 @@\n-    \/\/ exited_allocated_bytes. If the  result is initialized with exited_allocated_bytes,\n+    \/\/ exited_allocated_bytes. If the result is initialized with exited_allocated_bytes,\n@@ -2106,1 +2106,1 @@\n-    \/\/ \"too large\" because a thread might be counted twice, once in the loop and agsin\n+    \/\/ \"too large\" because a thread might be counted twice, once in the loop and again\n@@ -2115,1 +2115,1 @@\n-    return result + ThreadService::exited_allocated_bytes();;\n+    return result + ThreadService::exited_allocated_bytes();\n@@ -2259,0 +2259,1 @@\n+  jmm_GetAllThreadAllocatedMemory,\n@@ -2282,1 +2283,1 @@\n-  jmm_GetAllThreadAllocatedMemory,\n+  nullptr,\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    Atomic::add(&_exited_allocated_bytes, size);\n+    Atomic::add(&_exited_allocated_bytes, size, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-            return getThreadAllocatedMemory2();\n+            return getAllThreadAllocatedMemory();\n@@ -535,1 +535,1 @@\n-    private static native long getThreadAllocatedMemory2();\n+    private static native long getAllThreadAllocatedMemory();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ThreadImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-Java_sun_management_ThreadImpl_getThreadAllocatedMemory2\n+Java_sun_management_ThreadImpl_getAllThreadAllocatedMemory\n","filename":"src\/java.management\/share\/native\/libmanagement\/ThreadImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-     * heap memory for the current thread,\n+     * heap memory for the current thread\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/ThreadMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,2 +221,2 @@\n-        long cumulative_size = mbean.getAllThreadAllocatedBytes();\n-        if (cumulative_size <= 0) {\n+        long cumulativeSize = mbean.getAllThreadAllocatedBytes();\n+        if (cumulativeSize <= 0) {\n@@ -224,1 +224,1 @@\n-                \"Invalid allocated bytes returned for \" + curThread.getName() + \" = \" + cumulative_size);\n+                \"Invalid allocated bytes returned for \" + curThread.getName() + \" = \" + cumulativeSize);\n@@ -238,1 +238,1 @@\n-        cumulative_size = checkResult(curThread, cumulative_size, mbean.getAllThreadAllocatedBytes());\n+        cumulativeSize = checkResult(curThread, cumulativeSize, mbean.getAllThreadAllocatedBytes());\n@@ -254,1 +254,1 @@\n-        cumulative_size = checkResult(curThread, cumulative_size, mbean.getAllThreadAllocatedBytes());\n+        cumulativeSize = checkResult(curThread, cumulativeSize, mbean.getAllThreadAllocatedBytes());\n@@ -273,1 +273,1 @@\n-        checkResult(curThread, cumulative_size, mbean.getAllThreadAllocatedBytes());\n+        checkResult(curThread, cumulativeSize, mbean.getAllThreadAllocatedBytes());\n@@ -287,2 +287,5 @@\n-                                    long prev_size, long curr_size) {\n-        if (curr_size < prev_size) {\n+                                    long prevSize, long currSize) {\n+        System.out.println(curThread.getName() +\n+                           \" Previous allocated bytes = \" + prevSize +\n+                           \" Current allocated bytes = \" + currSize);\n+        if (currSize < prevSize) {\n@@ -291,2 +294,2 @@\n-                                       \" previous allocated bytes = \" + prev_size +\n-                                       \" > current allocated bytes = \" + curr_size);\n+                                       \" previous allocated bytes = \" + prevSize +\n+                                       \" > current allocated bytes = \" + currSize);\n@@ -294,4 +297,1 @@\n-        System.out.println(curThread.getName() +\n-                           \" Previous allocated bytes = \" + prev_size +\n-                           \" Current allocated bytes = \" + curr_size);\n-        return curr_size;\n+        return currSize;\n@@ -366,1 +366,1 @@\n-            long size1 = mbean.getThreadAllocatedBytes(getId());\n+            long prevSize = mbean.getThreadAllocatedBytes(getId());\n@@ -368,11 +368,2 @@\n-            long size2 = mbean.getThreadAllocatedBytes(getId());\n-\n-            System.out.println(getName() +\n-                \" ThreadAllocatedBytes before = \" + size1 +\n-                \" ThreadAllocatedBytes after = \" + size2);\n-\n-            if (size1 > size2) {\n-                throw new RuntimeException(getName() +\n-                    \" ThreadAllocatedBytes before = \" + size1 +\n-                    \" > ThreadAllocatedBytes after = \" + size2);\n-            }\n+            long currSize = mbean.getThreadAllocatedBytes(getId());\n+            checkResult(this, prevSize, currSize);\n","filename":"test\/jdk\/com\/sun\/management\/ThreadMXBean\/ThreadAllocatedMemory.java","additions":18,"deletions":27,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-        long[] sizes1 = mbean.getThreadAllocatedBytes(ids);\n+        long[] afterSizes = mbean.getThreadAllocatedBytes(ids);\n@@ -120,1 +120,1 @@\n-            checkResult(threads[i], sizes[i], sizes1[i]);\n+            checkResult(threads[i], sizes[i], afterSizes[i]);\n@@ -164,2 +164,2 @@\n-                                    long prev_size, long curr_size) {\n-        if (curr_size < prev_size) {\n+                                    long prevSize, long currSize) {\n+        if (currSize < prevSize) {\n@@ -168,2 +168,2 @@\n-                                       \" previous allocated bytes = \" + prev_size +\n-                                       \" > current allocated bytes = \" + curr_size);\n+                                       \" previous allocated bytes = \" + prevSize +\n+                                       \" > current allocated bytes = \" + currSize);\n@@ -173,2 +173,2 @@\n-                           \" Previous allocated bytes = \" + prev_size +\n-                           \" Current allocated bytes = \" + curr_size);\n+                           \" Previous allocated bytes = \" + prevSize +\n+                           \" Current allocated bytes = \" + currSize);\n","filename":"test\/jdk\/com\/sun\/management\/ThreadMXBean\/ThreadAllocatedMemoryArray.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}