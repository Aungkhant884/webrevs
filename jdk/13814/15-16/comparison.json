{"files":[{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright 2007, 2008, 2009 Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"gc\/shared\/cardTableBarrierSet.hpp\"\n-#include \"gc\/shared\/collectedHeap.inline.hpp\"\n-#include \"interpreter\/interpreter.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"prims\/methodHandles.hpp\"\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/objectMonitor.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/sharedRuntime.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-int AbstractAssembler::code_fill_byte() {\n-  return 0;\n-}\n-\n-#ifdef ASSERT\n-bool AbstractAssembler::pd_check_instruction_mark() {\n-  ShouldNotCallThis();\n-  return false;\n-}\n-#endif\n-\n-void Assembler::pd_patch_instruction(address branch, address target, const char* file, int line) {\n-  ShouldNotCallThis();\n-}\n-\n-void MacroAssembler::align(int modulus) {\n-  while (offset() % modulus != 0)\n-    emit_int8(AbstractAssembler::code_fill_byte());\n-}\n-\n-void MacroAssembler::bang_stack_with_offset(int offset) {\n-  ShouldNotCallThis();\n-}\n-\n-void MacroAssembler::advance(int bytes) {\n-  code_section()->set_end(code_section()->end() + bytes);\n-}\n-\n-void MacroAssembler::store_oop(jobject obj) {\n-  code_section()->relocate(pc(), oop_Relocation::spec_for_immediate());\n-  emit_address((address) obj);\n-}\n-\n-void MacroAssembler::store_Metadata(Metadata* md) {\n-  code_section()->relocate(pc(), metadata_Relocation::spec_for_immediate());\n-  emit_address((address) md);\n-}\n-\n-static void should_not_call() {\n-  report_should_not_call(__FILE__, __LINE__);\n-}\n-\n-address ShouldNotCallThisStub() {\n-  return (address) should_not_call;\n-}\n-\n-address ShouldNotCallThisEntry() {\n-  return (address) should_not_call;\n-}\n","filename":"src\/hotspot\/cpu\/zero\/#assembler_zero.cpp#","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -150,2 +150,2 @@\n-inline D Atomic::PlatformAdd<8>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/atomic_bsd_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/atomic_linux_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,2 +149,2 @@\n-inline D Atomic::PlatformAdd<8>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::fetch_then_add(D volatile* dest, I add_value,\n+                                                 atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/atomic_linux_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}