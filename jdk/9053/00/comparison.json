{"files":[{"patch":"@@ -47,2 +47,0 @@\n- *         5. If the checked type is class (Referent), then it must be finalized,\n- *            since the reference is already enqueued.\n@@ -91,1 +89,0 @@\n-        private volatile boolean finalized;\n@@ -177,18 +174,0 @@\n-            \/\/ If referent is finalizable, provoke GCs and wait for finalization.\n-            if (type.equals(\"class\")) {\n-                progress(\"Waiting for finalization: \" + type);\n-                for (int checks = 0; !finalized && !shouldTerminate(); ++checks) {\n-                    \/\/ There are scenarios where one WB.fillGC() isn't enough,\n-                    \/\/ but 10 iterations really ought to be sufficient.\n-                    if (checks > 10) {\n-                        fail(\"Waiting for finalization: \" + type);\n-                        return;\n-                    }\n-                    WhiteBox.getWhiteBox().fullGC();\n-                    \/\/ Give some time for finalizer to run.\n-                    try {\n-                        Thread.sleep(checks * 100);\n-                    } catch (InterruptedException e) {}\n-                }\n-            }\n-\n@@ -235,9 +214,0 @@\n-\n-            \/\/We need discard this flag to make second and following checks with type.equals(\"class\") useful\n-            public Referent() {\n-                finalized = false;\n-            }\n-\n-            protected void finalize() {\n-                finalized = true;\n-            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/PhantomReference\/phantom001\/phantom001.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"}]}