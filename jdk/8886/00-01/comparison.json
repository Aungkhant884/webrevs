{"files":[{"patch":"@@ -108,1 +108,1 @@\n-     * Given a list of parameters, returns a name-position map.\n+     * Given a list of parameter elements, returns a name-position map.\n@@ -146,1 +146,2 @@\n-     * Returns a {@code Content} representation of a list of {@code ParamTree}.\n+     * Returns a {@code Content} representation of a list of {@code ParamTree}\n+     * of the specified kind.\n@@ -148,5 +149,6 @@\n-     * <p> This method correlates {@code ParamTree} with {@code Element} by\n-     * name. Once it's done, a particular {@code ParamTree} is addressed by the\n-     * position (index) of the correlated {@code Element} in the list of formal\n-     * parameter elements. This is needed for documentation inheritance as\n-     * an inherited parameter may be named differently. <\/p>\n+     * <p> This method correlates a {@code ParamTree} with a parameter\n+     * {@code Element} by name. Once it's done, a particular {@code ParamTree}\n+     * is addressed by the position (index) of the correlated {@code Element}\n+     * in the list of parameter elements. This is needed for documentation\n+     * inheritance because the corresponding parameters in the inheritance\n+     * hierarchy may be named differently.\n@@ -161,2 +163,2 @@\n-                                  List<? extends ParamTree> paramTags,\n-                                  List<? extends Element> formalParameters,\n+                                  List<? extends ParamTree> tags,\n+                                  List<? extends Element> parameters,\n@@ -167,4 +169,4 @@\n-        if (!paramTags.isEmpty()) {\n-            Map<String, String> positionOfName = mapNameToPosition(writer.configuration().utils, formalParameters);\n-            for (ParamTree dt : paramTags) {\n-                String name = ch.getParameterName(dt);\n+        if (!tags.isEmpty()) {\n+            Map<String, String> positionOfName = mapNameToPosition(writer.configuration().utils, parameters);\n+            for (ParamTree tag : tags) {\n+                String name = ch.getParameterName(tag);\n@@ -178,1 +180,1 @@\n-                    messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                    messages.warning(ch.getDocTreePath(tag), key, paramName);\n@@ -188,1 +190,1 @@\n-                        messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                        messages.warning(ch.getDocTreePath(tag), key, paramName);\n@@ -190,1 +192,1 @@\n-                        tagOfPosition.put(position, dt);\n+                        tagOfPosition.put(position, tag);\n@@ -198,5 +200,5 @@\n-        for (int i = 0; i < formalParameters.size(); i++) {\n-            ParamTree dt = tagOfPosition.get(Integer.toString(i));\n-            if (dt != null) {\n-                result.add(convertParam(e, kind, writer, dt,\n-                        ch.getParameterName(dt), result.isEmpty()));\n+        for (int i = 0; i < parameters.size(); i++) {\n+            ParamTree tag = tagOfPosition.get(Integer.toString(i));\n+            if (tag != null) {\n+                result.add(convertParam(e, kind, writer, tag,\n+                        ch.getParameterName(tag), result.isEmpty()));\n@@ -205,1 +207,1 @@\n-                        formalParameters.get(i), i, result.isEmpty()));\n+                        parameters.get(i), i, result.isEmpty()));\n@@ -208,1 +210,1 @@\n-        if (paramTags.size() > tagOfPosition.size()) {\n+        if (tags.size() > tagOfPosition.size()) {\n@@ -211,4 +213,4 @@\n-            for (ParamTree dt : paramTags) {\n-                if (!tagOfPosition.containsValue(dt)) {\n-                    result.add(convertParam(e, kind, writer, dt,\n-                            ch.getParameterName(dt), result.isEmpty()));\n+            for (ParamTree tag : tags) {\n+                if (!tagOfPosition.containsValue(tag)) {\n+                    result.add(convertParam(e, kind, writer, tag,\n+                            ch.getParameterName(tag), result.isEmpty()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":29,"deletions":27,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                    utils.isTypeElement(candidate) && utils.isTypeElement(target) && \/\/ FIXME: can they be anything else other than type elements?\n+                    utils.isTypeElement(candidate) && utils.isTypeElement(target) &&\n@@ -164,3 +164,3 @@\n-            for (ThrowsTree dt : entry.getKey()) {\n-                Element te = ch.getException(dt);\n-                String excName = ch.getExceptionName(dt).toString();\n+            for (ThrowsTree tag : entry.getKey()) {\n+                Element te = ch.getException(tag);\n+                String excName = ch.getExceptionName(tag).toString();\n@@ -177,1 +177,1 @@\n-                result.add(writer.throwsTagOutput(e, dt, substituteType));\n+                result.add(writer.throwsTagOutput(e, tag, substituteType));\n@@ -219,1 +219,1 @@\n-                    ExecutableElement r = declaredExceptionTags.put(inheritedTags, (ExecutableElement) inheritedDoc.holder);\n+                    declaredExceptionTags.put(inheritedTags, (ExecutableElement) inheritedDoc.holder);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}