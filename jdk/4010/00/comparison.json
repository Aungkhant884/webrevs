{"files":[{"patch":"@@ -267,2 +267,2 @@\n- *     rule.src = GL_ONE;\n- *     rule.dst = GL_ONE_MINUS_SRC_ALPHA;\n+ *     rule.src = MTLBlendFactorZero;\n+ *     rule.dst = MTLBlendFactorOneMinusSourceAlpha;\n@@ -270,1 +270,1 @@\n- *     GLenum src;\n+ *     MTLBlendFactor src;\n@@ -273,1 +273,1 @@\n- *     GLenum dst;\n+ *     MTLBlendFactor dst;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPipelineStatesStorage.m","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,4 +49,0 @@\n-\/**\n- * The following methods are implemented in the windowing system (i.e. GLX\n- * and WGL) source files.\n- *\/\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderQueue.m","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#import \"MTLRenderQueue.h\"\n@@ -34,1 +33,0 @@\n-#import \"ThreadUtilities.h\"\n@@ -37,8 +35,1 @@\n-\/**\n- * The following methods are implemented in the windowing system (i.e. GLX\n- * and WGL) source files.\n- *\/\n-extern jlong MTLSD_GetNativeConfigInfo(BMTLSDOps *bmtlsdo);\n-extern jboolean MTLSD_InitMTLWindow(JNIEnv *env, BMTLSDOps *bmtlsdo);\n-extern void MTLSD_DestroyMTLSurface(JNIEnv *env, BMTLSDOps *bmtlsdo);\n-\n+jboolean MTLSD_InitMTLWindow(JNIEnv *env, BMTLSDOps *bmtlsdo);\n@@ -105,2 +96,0 @@\n-        bmtlsdo->textureWidth = width;\n-        bmtlsdo->textureHeight = height;\n@@ -185,1 +174,1 @@\n-        MTLSD_DestroyMTLSurface(env, bmtlsdo);\n+        bmtlsdo->drawableType = MTLSD_UNDEFINED;\n@@ -257,12 +246,0 @@\n-\/**\n- * This function disposes of any native windowing system resources associated\n- * with this surface.\n- *\/\n-void\n-MTLSD_DestroyMTLSurface(JNIEnv *env, BMTLSDOps * bmtlsdo)\n-{\n-    J2dTraceLn(J2D_TRACE_ERROR, \"MTLSD_DestroyMTLSurface not implemented!\");\n-    JNI_COCOA_ENTER(env);\n-    bmtlsdo->drawableType = MTLSD_UNDEFINED;\n-    JNI_COCOA_EXIT(env);\n-}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceData.m","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"sun_java2d_metal_MTLSurfaceData.h\"\n@@ -41,1 +40,1 @@\n- *     void *privOps;\n+ *     void* privOps;\n@@ -51,4 +50,3 @@\n- * the underlying surface (e.g. pbuffer) has an alpha channel and isOpaque\n- * is true, then we should take appropriate action (i.e. call glColorMask()\n- * to disable writes into the alpha channel) to ensure that the surface\n- * remains fully opaque.\n+ * the underlying surface (e.g. MTLTexture\/MTLBuffer) has an alpha channel and\n+ * isOpaque is true, then we should take appropriate action to ensure that the\n+ * surface remains fully opaque.\n@@ -56,10 +54,3 @@\n- *     jint x\/yOffset\n- * The offset in pixels of the Metal viewport origin from the lower-left\n- * corner of the heavyweight drawable.  For example, a top-level frame on\n- * Windows XP has lower-left insets of (4,4).  The Metal viewport origin\n- * would typically begin at the lower-left corner of the client region (inside\n- * the frame decorations), but AWT\/Swing will take the insets into account\n- * when rendering into that window.  So in order to account for this, we\n- * need to adjust the Metal viewport origin by an x\/yOffset of (-4,-4).  On\n- * X11, top-level frames typically don't have this insets issue, so their\n- * x\/yOffset would be (0,0) (the same applies to pbuffers).\n+ *     jint x\/yOffset;\n+ * The offset in pixels of the viewport origin from the lower-left\n+ * corner of the heavyweight drawable.\n@@ -68,6 +59,6 @@\n- * The cached surface bounds.  For offscreen surface types (MTLSD_FBOBJECT,\n- * MTLSD_TEXTURE, etc.) these values must remain constant.  Onscreen window\n- * surfaces (MTLSD_WINDOW, MTLSD_FLIP_BACKBUFFER, etc.) may have their\n- * bounds changed in response to a programmatic or user-initiated event, so\n- * these values represent the last known dimensions.  To determine the true\n- * current bounds of this surface, query the native Drawable through the\n+ * The cached surface bounds.  For offscreen surface types (\n+ * MTLSD_TEXTURE, MTLSD_RT_TEXTURE etc.) these values must remain constant.\n+ * Onscreen window surfaces (MTLSD_WINDOW, MTLSD_FLIP_BACKBUFFER, etc.) may\n+ * have their bounds changed in response to a programmatic or user-initiated\n+ * event, so these values represent the last known dimensions. To determine the\n+ * true current bounds of this surface, query the native Drawable through the\n@@ -80,4 +71,2 @@\n- *     jint textureWidth\/Height;\n- * The actual bounds of the texture object for this surface.\n- * The texture image that we care about has dimensions specified by the width\n- * and height fields in this MTLSDOps structure.\n+ *     void* pStencilTexture;\n+ * The byte buffer stencil mask used in rendering Metal rendering pass.\n@@ -87,1 +76,1 @@\n-    void                         *privOps;\n+    void*                        privOps;\n@@ -98,2 +87,0 @@\n-    jint                         textureWidth;\n-    jint                         textureHeight;\n@@ -106,1 +93,1 @@\n-#define MTLSD_RT_TEXTURE        sun_java2d_pipe_hw_AccelSurface_RT_TEXTURE\n+#define MTLSD_RT_TEXTURE      sun_java2d_pipe_hw_AccelSurface_RT_TEXTURE\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceDataBase.h","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -425,2 +425,2 @@\n-    J2dTraceLn4(J2D_TRACE_INFO, \"tx1 %f, ty1 %f, tx2 %f, ty2 %f\", tx1, ty1, tx2, ty2);\n-    J2dTraceLn2(J2D_TRACE_INFO, \"textureWidth %d textureHeight %d\", dstOps->textureWidth, dstOps->textureHeight);\n+    J2dTraceLn4(J2D_TRACE_INFO, \"tx1 = %f, ty1 = %f, tx2 = %f, ty2 = %f\", tx1, ty1, tx2, ty2);\n+    J2dTraceLn2(J2D_TRACE_INFO, \"width = %d height = %d\", dstOps->width, dstOps->height);\n@@ -560,3 +560,2 @@\n-    J2dTraceLn3(J2D_TRACE_INFO, \"xOffset %d yOffset %d, dstOps->height %d\", dstOps->xOffset, dstOps->yOffset, dstOps->height);\n-    J2dTraceLn4(J2D_TRACE_INFO, \"tx1 %f, ty1 %f, tx2 %f, ty2 %f\", tx1, ty1, tx2, ty2);\n-    J2dTraceLn2(J2D_TRACE_INFO, \"textureWidth %d textureHeight %d\", dstOps->textureWidth, dstOps->textureHeight);\n+    J2dTraceLn4(J2D_TRACE_INFO, \"xOffset = %d yOffset = %d, dstOps->width = %d, dstOps->height = %d\", dstOps->xOffset, dstOps->yOffset, dstOps->width, dstOps->height);\n+    J2dTraceLn4(J2D_TRACE_INFO, \"tx1 = %f, ty1 = %f, tx2 = %f, ty2 = %f\", tx1, ty1, tx2, ty2);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLTextRenderer.m","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}