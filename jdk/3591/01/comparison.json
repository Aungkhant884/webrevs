{"files":[{"patch":"@@ -108,1 +108,0 @@\n-static JImagePackageToModule_t         JImagePackageToModule  = NULL;\n@@ -111,1 +110,3 @@\n-static JImageResourceIterator_t        JImageResourceIterator = NULL;\n+\n+\/\/ JimageFile pointer, or null if exploded JDK build.\n+static JImageFile*                     JImage_File            = NULL;\n@@ -346,0 +347,15 @@\n+JImageFile* ClassPathImageEntry::jimage() const {\n+  return JImage_File;\n+}\n+\n+JImageFile* ClassPathImageEntry::jimage_non_null() const {\n+  assert(ClassLoader::has_jrt_entry(), \"must be\");\n+  assert(jimage() != NULL, \"should have been opened by ClassLoader::lookup_vm_options \"\n+                           \"and remained throughout normal JVM lifetime\");\n+  return jimage();\n+}\n+\n+void ClassPathImageEntry::set_jimage(JImageFile* jimage) {\n+  JImage_File = jimage;\n+}\n+\n@@ -347,3 +363,3 @@\n-  if (_jimage != NULL) {\n-    (*JImageClose)(_jimage);\n-    _jimage = NULL;\n+  if (jimage() != NULL) {\n+    (*JImageClose)(jimage());\n+    set_jimage(NULL);\n@@ -354,2 +370,1 @@\n-  ClassPathEntry(),\n-  _jimage(jimage) {\n+  ClassPathEntry() {\n@@ -364,12 +379,0 @@\n-ClassPathImageEntry::~ClassPathImageEntry() {\n-  assert(_singleton == this, \"must be\");\n-  DEBUG_ONLY(_singleton = NULL);\n-\n-  FREE_C_HEAP_ARRAY(const char, _name);\n-\n-  if (_jimage != NULL) {\n-    (*JImageClose)(_jimage);\n-    _jimage = NULL;\n-  }\n-}\n-\n@@ -389,1 +392,1 @@\n-  JImageLocationRef location = (*JImageFindResource)(_jimage, \"\", get_jimage_version_string(), name, &size);\n+  JImageLocationRef location = (*JImageFindResource)(jimage_non_null(), \"\", get_jimage_version_string(), name, &size);\n@@ -397,1 +400,1 @@\n-        location = (*JImageFindResource)(_jimage, JAVA_BASE_NAME, get_jimage_version_string(), name, &size);\n+        location = (*JImageFindResource)(jimage_non_null(), JAVA_BASE_NAME, get_jimage_version_string(), name, &size);\n@@ -408,1 +411,1 @@\n-            location = (*JImageFindResource)(_jimage, module_name, get_jimage_version_string(), name, &size);\n+            location = (*JImageFindResource)(jimage_non_null(), module_name, get_jimage_version_string(), name, &size);\n@@ -419,1 +422,1 @@\n-    (*JImageGetResource)(_jimage, location, data, size);\n+    (*JImageGetResource)(jimage_non_null(), location, data, size);\n@@ -652,1 +655,4 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n+        if (JImage_File != NULL) {\n+          assert(Arguments::has_jimage(), \"sanity check\");\n+          const char* canonical_path = get_canonical_path(path, current);\n+          assert(canonical_path != NULL, \"canonical_path issue\");\n@@ -654,5 +660,2 @@\n-        \/\/ Check for a jimage\n-        if (Arguments::has_jimage()) {\n-          assert(_jrt_entry == NULL, \"should not setup bootstrap class search path twice\");\n-          _jrt_entry = new_entry;\n-          assert(new_entry != NULL && new_entry->is_modules_image(), \"No java runtime image present\");\n+          _jrt_entry = new ClassPathImageEntry(JImage_File, canonical_path);\n+          assert(_jrt_entry != NULL && _jrt_entry->is_modules_image(), \"No java runtime image present\");\n@@ -660,0 +663,3 @@\n+        } else {\n+          \/\/ It's an exploded build.\n+          ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n@@ -727,1 +733,1 @@\n-    \/\/ Regular file, should be a zip or jimage file\n+    \/\/ Regular file, should be a zip file\n@@ -733,4 +739,4 @@\n-    jint error;\n-    JImageFile* jimage =(*JImageOpen)(canonical_path, &error);\n-    if (jimage != NULL) {\n-      new_entry = new ClassPathImageEntry(jimage, canonical_path);\n+    char* error_msg = NULL;\n+    jzfile* zip = open_zip_file(canonical_path, &error_msg, thread);\n+    if (zip != NULL && error_msg == NULL) {\n+      new_entry = new ClassPathZipEntry(zip, path, is_boot_append, from_class_path_attr);\n@@ -738,7 +744,1 @@\n-      char* error_msg = NULL;\n-      jzfile* zip = open_zip_file(canonical_path, &error_msg, thread);\n-      if (zip != NULL && error_msg == NULL) {\n-        new_entry = new ClassPathZipEntry(zip, path, is_boot_append, from_class_path_attr);\n-      } else {\n-        return NULL;\n-      }\n+      return NULL;\n@@ -971,1 +971,0 @@\n-  JImagePackageToModule = CAST_TO_FN_PTR(JImagePackageToModule_t, dll_lookup(handle, \"JIMAGE_PackageToModule\", path));\n@@ -974,1 +973,0 @@\n-  JImageResourceIterator = CAST_TO_FN_PTR(JImageResourceIterator_t, dll_lookup(handle, \"JIMAGE_ResourceIterator\", path));\n@@ -1432,2 +1430,2 @@\n-  JImageFile* jimage =(*JImageOpen)(modules_path, &error);\n-  if (jimage == NULL) {\n+  JImage_File =(*JImageOpen)(modules_path, &error);\n+  if (JImage_File == NULL) {\n@@ -1438,3 +1436,1 @@\n-  char *options = lookup_vm_resource(jimage, jimage_version, \"jdk\/internal\/vm\/options\");\n-\n-  (*JImageClose)(jimage);\n+  char *options = lookup_vm_resource(JImage_File, jimage_version, \"jdk\/internal\/vm\/options\");\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":44,"deletions":48,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-  JImageFile* _jimage;\n@@ -125,1 +124,0 @@\n-  bool is_open() const { return _jimage != NULL; }\n@@ -127,1 +125,3 @@\n-  JImageFile* jimage() const { return _jimage; }\n+  JImageFile* jimage() const;\n+  JImageFile* jimage_non_null() const;\n+  void set_jimage(JImageFile* jimage);\n@@ -130,1 +130,1 @@\n-  virtual ~ClassPathImageEntry();\n+  virtual ~ClassPathImageEntry() { ShouldNotReachHere(); }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}