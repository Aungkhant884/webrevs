{"files":[{"patch":"@@ -183,2 +183,6 @@\n-                destroyKeyContainer(\n-                        CKey.getContainerName(privateKey.getHCryptProvider()));\n+                if (privateKey.getHCryptKey() != 0) {\n+                    destroyKeyContainer(\n+                            CKey.getContainerName(privateKey.getHCryptProvider()));\n+                } else {\n+                    removeCngKey(privateKey.getHCryptProvider());\n+                }\n@@ -871,0 +875,7 @@\n+    \/**\n+     * Removes a CNG key.\n+     *\n+     * @param k the handle of the key\n+     *\/\n+    private native void removeCngKey(long k) throws KeyStoreException;\n+\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CKeyStore.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                    privateKey.getHCryptKey(), true);\n+                    privateKey, true);\n@@ -297,1 +297,1 @@\n-                    publicKey.getHCryptKey(), false);\n+                    publicKey, false);\n@@ -301,1 +301,1 @@\n-                    publicKey.getHCryptKey(), true);\n+                    publicKey, true);\n@@ -305,1 +305,1 @@\n-                    privateKey.getHCryptKey(), false);\n+                    privateKey, false);\n@@ -496,1 +496,1 @@\n-     * Encrypt\/decrypt a data buffer using Microsoft Crypto API with HCRYPTKEY.\n+     * Encrypt\/decrypt a data buffer using Microsoft Crypto API or CNG.\n@@ -499,2 +499,8 @@\n-    private native static byte[] encryptDecrypt(byte[] data, int dataSize,\n-        long hCryptKey, boolean doEncrypt) throws KeyException;\n+    private static byte[] encryptDecrypt(byte[] data, int dataSize,\n+            CKey key, boolean doEncrypt) throws KeyException {\n+        if (key.getHCryptKey() != 0) {\n+            return encryptDecrypt(data, dataSize, key.getHCryptKey(), doEncrypt);\n+        } else {\n+            return cngEncryptDecrypt(data, dataSize, key.getHCryptProvider(), doEncrypt);\n+        }\n+    }\n@@ -502,0 +508,4 @@\n+    private native static byte[] encryptDecrypt(byte[] data, int dataSize,\n+            long key, boolean doEncrypt) throws KeyException;\n+    private native static byte[] cngEncryptDecrypt(byte[] data, int dataSize,\n+            long key, boolean doEncrypt) throws KeyException;\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CRSACipher.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1802,0 +1802,10 @@\n+JNIEXPORT void JNICALL Java_sun_security_mscapi_CKeyStore_removeCngKey\n+  (JNIEnv *env, jobject clazz, jlong k)\n+{\n+    SECURITY_STATUS ss;\n+    ss = ::NCryptDeleteKey((NCRYPT_KEY_HANDLE)k, 0);\n+    if (ss != ERROR_SUCCESS) {\n+        ThrowException(env, KEY_EXCEPTION, ss);\n+    }\n+}\n+\n@@ -1926,0 +1936,63 @@\n+\/*\n+ * Class:     sun_security_mscapi_CRSACipher\n+ * Method:    cngEncryptDecrypt\n+ * Signature: ([BIJZ)[B\n+ *\/\n+JNIEXPORT jbyteArray JNICALL Java_sun_security_mscapi_CRSACipher_cngEncryptDecrypt\n+  (JNIEnv *env, jclass clazz, jbyteArray jData, jint jDataSize, jlong hKey,\n+   jboolean doEncrypt)\n+{\n+    SECURITY_STATUS ss;\n+    jbyteArray result = NULL;\n+    jbyte* pData = NULL;\n+    DWORD dwDataLen = jDataSize;\n+    DWORD dwBufLen = env->GetArrayLength(jData);\n+    __try\n+    {\n+        \/\/ Copy data from Java buffer to native buffer\n+        pData = new (env) jbyte[dwBufLen];\n+        if (pData == NULL) {\n+            __leave;\n+        }\n+        env->GetByteArrayRegion(jData, 0, dwBufLen, pData);\n+\n+        if (doEncrypt == JNI_TRUE) {\n+            \/\/ encrypt\n+            ss = ::NCryptEncrypt((NCRYPT_KEY_HANDLE) hKey,\n+                    (PBYTE)pData, dwDataLen,\n+                    0,\n+                    (PBYTE)pData, dwBufLen,\n+                    &dwBufLen, NCRYPT_PAD_PKCS1_FLAG);\n+            if (ss != ERROR_SUCCESS) {\n+                ThrowException(env, KEY_EXCEPTION, ss);\n+                __leave;\n+            }\n+        } else {\n+            \/\/ decrypt\n+            ss = ::NCryptDecrypt((NCRYPT_KEY_HANDLE) hKey,\n+                    (PBYTE)pData, dwDataLen,\n+                    0,\n+                    (PBYTE)pData, dwBufLen,\n+                    &dwBufLen, NCRYPT_PAD_PKCS1_FLAG);\n+            if (ss != ERROR_SUCCESS) {\n+                ThrowException(env, KEY_EXCEPTION, ss);\n+                __leave;\n+            }\n+        }\n+        \/\/ Create new byte array\n+        if ((result = env->NewByteArray(dwBufLen)) == NULL) {\n+            __leave;\n+        }\n+\n+        \/\/ Copy data from native buffer to Java buffer\n+        env->SetByteArrayRegion(result, 0, dwBufLen, (jbyte*) pData);\n+    }\n+    __finally {\n+        if (pData) {\n+            delete [] pData;\n+        }\n+    }\n+\n+    return result;\n+}\n+\n","filename":"src\/jdk.crypto.mscapi\/windows\/native\/libsunmscapi\/security.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+\n+import java.util.Arrays;\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import java.security.KeyStore;\n+\n+\/**\n+ * @test\n+ * @bug 8251134\n+ * @requires os.family == \"windows\"\n+ * @summary Cipher operations on CNG keys\n+ * @library \/test\/lib\n+ *\/\n+\n+public class CngCipher {\n+\n+    final static String PREFIX = \"8251134\";\n+\n+    public static void main(String[] args) throws Exception {\n+        cleanup();\n+        prepare();\n+        try {\n+            test(PREFIX + \"m\");\n+            test(PREFIX + \"c\");\n+        } finally {\n+            cleanup();\n+        }\n+    }\n+\n+    static void prepare() throws Exception {\n+        \/\/ This will generate a MSCAPI key\n+        SecurityTools.keytool(\"-storetype Windows-MY -genkeypair -alias \"\n+                + PREFIX + \"m -keyalg RSA -dname CN=\" + PREFIX + \"m\");\n+        \/\/ This will generate a CNG key\n+        ProcessBuilder pb = new ProcessBuilder(\"powershell\", \"-Command\",\n+                \"New-SelfSignedCertificate\",  \"-DnsName\", PREFIX + \"c\",\n+                \/\/ -KeyAlgorithm not supported on Windows Server 2012\n+                \/\/\"-KeyAlgorithm\", \"RSA\",\n+                \"-CertStoreLocation\", \"Cert:\\\\CurrentUser\\\\My\");\n+        pb.inheritIO();\n+        pb.start().waitFor();\n+    }\n+\n+    static void cleanup() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"Windows-MY\");\n+        ks.load(null, null);\n+        ks.deleteEntry(PREFIX +\"c\");\n+        ks.deleteEntry(PREFIX +\"m\");\n+        ks.store(null, null);\n+    }\n+\n+    static void test(String alias) throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"Windows-MY\");\n+        ks.load(null, null);\n+        var alg = \"RSA\/ECB\/PKCS1Padding\";\n+\n+        var k1 = ks.getKey(alias, \"changeit\".toCharArray());\n+        var k2 = ks.getCertificate(alias).getPublicKey();\n+\n+        Cipher c;\n+\n+        var k = KeyGenerator.getInstance(\"AES\").generateKey();\n+        c = Cipher.getInstance(alg, \"SunMSCAPI\");\n+        c.init(Cipher.WRAP_MODE, k2);\n+        var enc = c.wrap(k);\n+        c = Cipher.getInstance(alg, \"SunMSCAPI\");\n+        c.init(Cipher.UNWRAP_MODE, k1);\n+        var dec = c.unwrap(enc, \"AES\", Cipher.SECRET_KEY);\n+        Asserts.assertTrue(Arrays.equals(k.getEncoded(), dec.getEncoded()));\n+\n+        c = Cipher.getInstance(alg, \"SunMSCAPI\");\n+        c.init(Cipher.ENCRYPT_MODE, k2);\n+        byte[] msg = \"hello you fool\".getBytes(java.nio.charset.StandardCharsets.UTF_8);\n+        c.update(msg);\n+        var enc2 = c.doFinal();\n+        c = Cipher.getInstance(alg, \"SunMSCAPI\");\n+        c.init(Cipher.DECRYPT_MODE, k1);\n+        c.update(enc2);\n+        var dec2 = c.doFinal();\n+        Asserts.assertTrue(Arrays.equals(msg, dec2));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/mscapi\/CngCipher.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}