{"files":[{"patch":"@@ -599,1 +599,1 @@\n-    _loaded_cld_handles.append(OopHandle(Universe::vm_global(), cld->holder_phantom()));\n+    _loaded_cld_handles.append(OopHandle(Universe::vm_global(), cld->holder()));\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -618,2 +618,3 @@\n-\/\/ Tell the GC to keep this klass alive while iterating ClassLoaderDataGraph\n-oop ClassLoaderData::holder_phantom() const {\n+\/\/ Tell the GC to keep this klass alive. Needed while iterating ClassLoaderDataGraph,\n+\/\/ and any runtime code that uses klasses.\n+oop ClassLoaderData::holder() const {\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  oop holder_phantom() const;\n+  oop holder() const;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-      _holder = Handle(_thread, cld->holder_phantom());\n+      _holder = Handle(_thread, cld->holder());\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,4 +34,1 @@\n-\/\/ This loads the klass's holder as a phantom. This is useful when a weak Klass\n-\/\/ pointer has been \"peeked\" and then must be kept alive before it may\n-\/\/ be used safely.  All uses of klass_holder need to apply the appropriate barriers,\n-\/\/ except during GC.\n+\/\/ This loads and keeps the klass's loader alive.\n@@ -39,1 +36,1 @@\n-  return class_loader_data()->holder_phantom();\n+  return class_loader_data()->holder();\n","filename":"src\/hotspot\/share\/oops\/klass.inline.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}