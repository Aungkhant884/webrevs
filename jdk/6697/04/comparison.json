{"files":[{"patch":"@@ -508,0 +508,9 @@\n+const Type* AndINode::Value(PhaseGVN* phase) const {\n+  \/\/ patterns similar to (v << 2) & 3\n+  if (AndIL_shift_and_mask(phase, in(2), in(1), T_INT)) {\n+    return TypeInt::ZERO;\n+  }\n+\n+  return MulNode::Value(phase);\n+}\n+\n@@ -601,0 +610,6 @@\n+  \/\/ pattern similar to (v1 + (v2 << 2)) & 3 transformed to v1 & 3\n+  Node* progress = AndIL_add_shift_and_mask(phase, T_INT);\n+  if (progress != NULL) {\n+    return progress;\n+  }\n+\n@@ -632,0 +647,9 @@\n+const Type* AndLNode::Value(PhaseGVN* phase) const {\n+  \/\/ patterns similar to (v << 2) & 3\n+  if (AndIL_shift_and_mask(phase, in(2), in(1), T_LONG)) {\n+    return TypeLong::ZERO;\n+  }\n+\n+  return MulNode::Value(phase);\n+}\n+\n@@ -678,1 +702,1 @@\n-  uint op = in1->Opcode();\n+  int op = in1->Opcode();\n@@ -708,0 +732,6 @@\n+  \/\/ pattern similar to (v1 + (v2 << 2)) & 3 transformed to v1 & 3\n+  Node* progress = AndIL_add_shift_and_mask(phase, T_LONG);\n+  if (progress != NULL) {\n+    return progress;\n+  }\n+\n@@ -1686,0 +1716,61 @@\n+\n+\/\/ Helper method to transform:\n+\/\/ patterns similar to (v << 2) & 3 to 0\n+\/\/ and\n+\/\/ patterns similar to (v1 + (v2 << 2)) & 3 transformed to v1 & 3\n+bool MulNode::AndIL_shift_and_mask(PhaseGVN* phase, Node* mask, Node* shift, BasicType bt) {\n+  if (mask == NULL || shift == NULL) {\n+    return false;\n+  }\n+  const TypeInteger* mask_t = phase->type(mask)->isa_integer(bt);\n+  const TypeInteger* shift_t = phase->type(shift)->isa_integer(bt);\n+  if (mask_t == NULL || shift_t == NULL) {\n+    return false;\n+  }\n+  if (bt == T_LONG && shift != NULL && shift->Opcode() == Op_ConvI2L) {\n+    bt = T_INT;\n+    shift = shift->in(1);\n+    if (shift == NULL) {\n+      return false;\n+    }\n+  }\n+  if (shift->Opcode() != Op_LShift(bt)) {\n+    return false;\n+  }\n+  Node* shift2 = shift->in(2);\n+  if (shift2 == NULL) {\n+    return false;\n+  }\n+  const Type* shift2_t = phase->type(shift2);\n+  if (!shift2_t->isa_int() || !shift2_t->is_int()->is_con()) {\n+    return false;\n+  }\n+\n+  jint shift_con = shift2_t->is_int()->get_con() & ((bt == T_INT ? BitsPerJavaInteger : BitsPerJavaLong) - 1);\n+  if ((((long)1) << shift_con) > mask_t->hi_as_long() && mask_t->lo_as_long() >= 0) {\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n+\/\/ Helper method to transform:\n+\/\/ patterns similar to (v1 + (v2 << 2)) & 3 to v1 & 3\n+Node* MulNode::AndIL_add_shift_and_mask(PhaseGVN* phase, BasicType bt) {\n+  Node* in1 = in(1);\n+  Node* in2 = in(2);\n+  if (in1 != NULL && in2 != NULL && in1->Opcode() == Op_Add(bt)) {\n+    Node* add1 = in1->in(1);\n+    Node* add2 = in1->in(2);\n+    if (add1 != NULL && add2 != NULL) {\n+      if (AndIL_shift_and_mask(phase, in2, add1, bt)) {\n+        set_req_X(1, add2, phase);\n+        return this;\n+      } else if (AndIL_shift_and_mask(phase, in2, add2, bt)) {\n+        set_req_X(1, add1, phase);\n+        return this;\n+      }\n+    }\n+  }\n+  return NULL;\n+}\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":92,"deletions":1,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+\n+  static bool AndIL_shift_and_mask(PhaseGVN* phase, Node* mask, Node* shift, BasicType bt);\n+  Node* AndIL_add_shift_and_mask(PhaseGVN* phase, BasicType bt);\n@@ -192,0 +195,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n@@ -211,0 +215,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8277850\n+ * @summary C2: optimize mask checks in counted loops\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestShiftAndMask\n+ *\/\n+\n+public class TestShiftAndMask {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Arguments(Argument.RANDOM_EACH)\n+    @IR(failOn = { IRNode.AND_I, IRNode.LSHIFT_I })\n+    public static int shiftMaskInt(int i) {\n+        return (i << 2) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Test\n+    @Arguments(Argument.RANDOM_EACH)\n+    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_L })\n+    public static long shiftMaskLong(long i) {\n+        return (i << 2) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = { IRNode.AND_I, \"1\" })\n+    @IR(failOn = { IRNode.ADD_I, IRNode.LSHIFT_I })\n+    public static int addShiftMaskInt(int i, int j) {\n+        return (j + (i << 2)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = { IRNode.AND_L, \"1\" })\n+    @IR(failOn = { IRNode.ADD_L, IRNode.LSHIFT_L })\n+    public static long addShiftMaskLong(long i, long j) {\n+        return (j + (i << 2)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(failOn = { IRNode.AND_I, IRNode.ADD_I, IRNode.LSHIFT_I })\n+    public static int addShiftMaskInt2(int i, int j) {\n+        return ((j << 2) + (i << 2)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L, IRNode.LSHIFT_L })\n+    public static long addShiftMaskLong2(long i, long j) {\n+        return ((j << 2) + (i << 2)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Test\n+    @Arguments(Argument.RANDOM_EACH)\n+    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_I })\n+    public static long shiftConvMask(int i) {\n+        return ((long)(i << 2)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(counts = { IRNode.AND_L, \"1\" })\n+    @IR(failOn = { IRNode.ADD_L, IRNode.LSHIFT_I, IRNode.CONV_I2L })\n+    public static long addShiftConvMask(int i, long j) {\n+        return (j + (i << 2)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L, IRNode.LSHIFT_L })\n+    public static long addShiftConvMask2(int i, int j) {\n+        return (((long)(j << 2)) + ((long)(i << 2))) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestShiftAndMask.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -136,0 +136,8 @@\n+    public static final String AND_I = START + \"AndI\" + MID + END;\n+    public static final String AND_L = START + \"AndL\" + MID + END;\n+    public static final String LSHIFT_I = START + \"LShiftI\" + MID + END;\n+    public static final String LSHIFT_L = START + \"LShiftL\" + MID + END;\n+    public static final String ADD_I = START + \"AddI\" + MID + END;\n+    public static final String ADD_L = START + \"AddL\" + MID + END;\n+    public static final String CONV_I2L = START + \"ConvI2L\" + MID + END;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}