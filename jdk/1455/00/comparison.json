{"files":[{"patch":"@@ -142,1 +142,1 @@\n-        LambdaForm lform = varHandleMethodInvokerHandleForm(ak, mtype, isExact);\n+        LambdaForm lform = varHandleMethodInvokerHandleForm(mtype, isExact);\n@@ -349,6 +349,2 @@\n-    static MemberName varHandleInvokeLinkerMethod(VarHandle.AccessMode ak, MethodType mtype) {\n-        LambdaForm lform;\n-        if (mtype.parameterSlotCount() <= MethodType.MAX_MH_ARITY - MH_LINKER_ARG_APPENDED) {\n-            lform = varHandleMethodGenericLinkerHandleForm(ak, mtype);\n-        } else {\n-            \/\/ TODO\n+    static MemberName varHandleInvokeLinkerMethod(MethodType mtype) {\n+        if (mtype.parameterSlotCount() > MethodType.MAX_MH_ARITY - MH_LINKER_ARG_APPENDED) {\n@@ -357,0 +353,1 @@\n+        LambdaForm lform = varHandleMethodGenericLinkerHandleForm(mtype);\n@@ -360,3 +357,8 @@\n-    private static LambdaForm varHandleMethodGenericLinkerHandleForm(VarHandle.AccessMode ak,\n-            MethodType mtype) {\n-        \/\/ TODO Cache form?\n+    private static LambdaForm varHandleMethodGenericLinkerHandleForm(MethodType mtype) {\n+        mtype = mtype.basicType();  \/\/ normalize Z to I, String to Object, etc.\n+\n+        int which = MethodTypeForm.LF_VH_GEN_LINKER;\n+        LambdaForm lform = mtype.form().cachedLambdaForm(which);\n+        if (lform != null) {\n+            return lform;\n+        }\n@@ -399,1 +401,1 @@\n-        LambdaForm lform = new LambdaForm(ARG_LIMIT + 1, names, VARHANDLE_LINKER);\n+        lform = new LambdaForm(ARG_LIMIT + 1, names, VARHANDLE_LINKER);\n@@ -401,2 +403,1 @@\n-            String name = ak.methodName() + \":VarHandle_invoke_MT_\" +\n-                    shortenSignature(basicTypeSignature(mtype));\n+            String name = \"VarHandle_invoke_MT_\" + shortenSignature(basicTypeSignature(mtype));\n@@ -406,0 +407,3 @@\n+\n+        lform = mtype.form().setCachedLambdaForm(which, lform);\n+\n@@ -409,3 +413,8 @@\n-    private static LambdaForm varHandleMethodInvokerHandleForm(VarHandle.AccessMode ak,\n-            MethodType mtype, boolean isExact) {\n-        \/\/ TODO Cache form?\n+    private static LambdaForm varHandleMethodInvokerHandleForm(MethodType mtype, boolean isExact) {\n+        mtype = mtype.basicType();  \/\/ normalize Z to I, String to Object, etc.\n+\n+        int which = (isExact ? MethodTypeForm.LF_VH_EX_INVOKER : MethodTypeForm.LF_VH_GEN_INVOKER);\n+        LambdaForm lform = mtype.form().cachedLambdaForm(which);\n+        if (lform != null) {\n+            return lform;\n+        }\n@@ -451,1 +460,1 @@\n-                .basicType();\n+                                      .basicType();\n@@ -454,1 +463,1 @@\n-        LambdaForm lform = new LambdaForm(ARG_LIMIT, names, kind);\n+        lform = new LambdaForm(ARG_LIMIT, names, kind);\n@@ -456,3 +465,1 @@\n-            String name = ak.methodName() +\n-                    (isExact ? \":VarHandle_exactInvoker_\" : \":VarHandle_invoker_\") +\n-                    shortenSignature(basicTypeSignature(mtype));\n+            String name = (isExact ? \"VarHandle_exactInvoker_\" : \"VarHandle_invoker_\") + shortenSignature(basicTypeSignature(mtype));\n@@ -462,0 +469,3 @@\n+\n+        lform = mtype.form().setCachedLambdaForm(which, lform);\n+\n@@ -476,4 +486,1 @@\n-        if (mh.type() == ad.symbolicMethodTypeInvoker) {\n-            return mh;\n-        }\n-        else {\n+        if (mh.type() != ad.symbolicMethodTypeInvoker) {\n@@ -482,0 +489,1 @@\n+        return mh;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -580,1 +580,1 @@\n-        return Invokers.varHandleInvokeLinkerMethod(ak, mtype);\n+        return Invokers.varHandleInvokeLinkerMethod(mtype);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,4 @@\n-            LF_LIMIT                   = 22;\n+            LF_VH_EX_INVOKER           = 22,  \/\/ VarHandle exact invoker\n+            LF_VH_GEN_INVOKER          = 23,  \/\/ VarHandle generic invoker\n+            LF_VH_GEN_LINKER           = 24,  \/\/ VarHandle generic linker\n+            LF_LIMIT                   = 25;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodTypeForm.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}