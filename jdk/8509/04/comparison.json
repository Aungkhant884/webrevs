{"files":[{"patch":"@@ -215,1 +215,0 @@\n-java\/awt\/Window\/MultiWindowApp\/ChildAlwaysOnTopTest.java 8222323 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -27,2 +27,0 @@\n- * @summary setAlwaysOnTop doesn't behave correctly in Linux\/Solaris under\n- *          certain scenarios\n@@ -30,1 +28,1 @@\n- * @author Semyon Sadetsky\n+ * @summary To test setAlwaysOnTop functionality.\n@@ -34,2 +32,18 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n@@ -42,0 +56,10 @@\n+    private static Robot robot;\n+    private static int caseNo = 0;\n+    private static StringBuffer errorLog = new StringBuffer();\n+    private static String[] errorMsg= new String[] {\n+            \" Scenario 1 Failed: alwaysOnTop window is sent back by another\" +\n+                    \" child window with setVisible().\",\n+            \" Scenario 2 Failed: alwaysOnTop window is\" +\n+                    \" sent back by another child window with toFront().\",\n+            \" Scenario 3 Failed: Failed to unset alwaysOnTop \",\n+    };\n@@ -44,1 +68,0 @@\n-        if( Toolkit.getDefaultToolkit().isAlwaysOnTopSupported() ) {\n@@ -46,0 +69,5 @@\n+        if (!Toolkit.getDefaultToolkit().isAlwaysOnTopSupported()) {\n+            System.out.println(\"alwaysOnTop not supported by: \"+\n+                    Toolkit.getDefaultToolkit().getClass().getName());\n+            return;\n+        }\n@@ -47,1 +75,6 @@\n-            test(null);\n+        \/\/ CASE 1 - JDialog without parent\/owner\n+        System.out.println(\"Testing CASE 1: JDialog without parent\/owner\");\n+        caseNo = 1;\n+        test(null);\n+        System.out.println(\"CASE 1 Completed\");\n+        System.out.println();\n@@ -49,8 +82,13 @@\n-            Window f = new Frame();\n-            f.setBackground(Color.darkGray);\n-            f.setSize(500, 500);\n-            try {\n-                test(f);\n-            } finally {\n-                f.dispose();\n-            }\n+        \/\/ CASE 2 - JDialog with JFrame as owner\n+        System.out.println(\"Testing CASE 2: JDialog with JFrame as owner\");\n+        caseNo = 2;\n+        Window f = new Frame();\n+        f.setBackground(Color.darkGray);\n+        f.setSize(500, 500);\n+        try {\n+            test(f);\n+        } finally {\n+            f.dispose();\n+        }\n+        System.out.println(\"CASE 2 Completed\");\n+        System.out.println();\n@@ -58,10 +96,23 @@\n-            f = new Frame();\n-            f.setBackground(Color.darkGray);\n-            f.setSize(500, 500);\n-            f.setVisible(true);\n-            f = new Dialog((Frame)f);\n-            try {\n-                test(f);\n-            } finally {\n-                ((Frame)f.getParent()).dispose();\n-            }\n+        \/\/ CASE 3 - JDialog within another JDialog as owner\n+        System.out.println(\"Testing CASE 3:Dialog within another\"+\n+                \" JDialog as owner\");\n+        caseNo = 3;\n+        f = new Frame();\n+        f.setBackground(Color.darkGray);\n+        f.setSize(500, 500);\n+        f.setVisible(true);\n+        f = new Dialog((Frame)f);\n+        try {\n+            test(f);\n+        } finally {\n+            ((Frame)f.getParent()).dispose();\n+        }\n+        System.out.println(\"CASE 3 Completed\");\n+        System.out.println();\n+\n+        if (errorLog.isEmpty()) {\n+            System.out.println(\"All three cases passed !!\");\n+        }\n+        else {\n+            throw new RuntimeException(\"Following cases and scenarios failed.\"+\n+                    \" Please check the saved screenshots.\\n\"+ errorLog);\n@@ -69,1 +120,0 @@\n-        System.out.println(\"ok\");\n@@ -73,19 +123,6 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n-                win1 = parent == null ? new JDialog() : new JDialog(parent);\n-                win1.setName(\"top\");\n-                win2 = parent == null ? new JDialog() : new JDialog(parent);\n-                win2.setName(\"behind\");\n-                win1.setSize(200, 200);\n-                Panel panel = new Panel();\n-                panel.setBackground(Color.GREEN);\n-                win1.add(panel);\n-                panel = new Panel();\n-                panel.setBackground(Color.RED);\n-                win2.add(panel);\n-                win1.setAlwaysOnTop(true);\n-                win2.setAlwaysOnTop(false);\n-                win1.setVisible(true);\n-            }\n-        });\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win1 = parent == null ? new JDialog() : new JDialog(parent);\n+                    win1.setName(\"Top\");\n@@ -93,3 +130,19 @@\n-        Robot robot = new Robot();\n-        robot.delay(500);\n-        robot.waitForIdle();\n+                    win2 = parent == null ? new JDialog() : new JDialog(parent);\n+                    win2.setName(\"Behind\");\n+\n+                    JLabel label = new JLabel(\"TOP WINDOW\");\n+                    \/\/ top window - green and smaller\n+                    win1.setSize(200, 200);\n+                    Panel panel = new Panel();\n+                    panel.setBackground(Color.GREEN);\n+                    panel.add(label);\n+                    win1.add(panel);\n+                    win1.setAlwaysOnTop(true);\n+\n+                    \/\/ behind window - red and bigger\n+                    label = new JLabel(\"BEHIND WINDOW\");\n+                    win2.setSize(300, 300);\n+                    panel = new Panel();\n+                    panel.setBackground(Color.RED);\n+                    panel.add(label);\n+                    win2.add(panel);\n@@ -97,3 +150,13 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n+                    win1.setVisible(true);\n+                    win2.setVisible(true);\n+                }\n+            });\n+\n+            robot = new Robot();\n+            robot.setAutoDelay(300);\n+            robot.waitForIdle();\n+\n+            \/\/ Scenario 1: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting the setVisible to true for behind (red) window\n+            System.out.println(\" >> Testing Scenario 1 ...\");\n+            SwingUtilities.invokeAndWait(()-> {\n@@ -101,1 +164,0 @@\n-                win2.setBounds(win1.getBounds());\n@@ -103,2 +165,1 @@\n-            }\n-        });\n+            });\n@@ -106,2 +167,1 @@\n-        robot.delay(500);\n-        robot.waitForIdle();\n+            checkTopWindow(caseNo, 1, Color.GREEN);\n@@ -109,7 +169,1 @@\n-        Color color = robot.getPixelColor(point.x + 100, point.y + 100);\n-        if(!color.equals(Color.GREEN)) {\n-            win1.dispose();\n-            win2.dispose();\n-            throw new RuntimeException(\"alawaysOnTop window is sent back by \" +\n-                    \"another child window setVisible(). \" + color);\n-        }\n+            \/*---------------------------------------------------------------*\/\n@@ -117,3 +171,4 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n+            \/\/ Scenario 2: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting toFront() to true for behind (red) window\n+            System.out.println(\" >> Testing Scenario 2 ...\");\n+            SwingUtilities.invokeAndWait(()-> {\n@@ -125,2 +180,1 @@\n-            }\n-        });\n+            });\n@@ -128,2 +182,1 @@\n-        robot.delay(500);\n-        robot.waitForIdle();\n+            checkTopWindow(caseNo, 2, Color.GREEN);\n@@ -131,7 +184,1 @@\n-        color = robot.getPixelColor(point.x + 100, point.y + 100);\n-        if(!color.equals(Color.GREEN)) {\n-            win1.dispose();\n-            win2.dispose();\n-            throw new RuntimeException(\"alawaysOnTop window is sent back by \" +\n-                    \"another child window toFront(). \" + color);\n-        }\n+            \/*----------------------------------------------------------------*\/\n@@ -139,7 +186,12 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n-                win1.setAlwaysOnTop(false);\n-                if (parent != null) {\n-                    parent.setVisible(false);\n-                    parent.setVisible(true);\n+            \/\/ Scenario 3: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting alwaysOnTop to false. The unsetting should work\n+            \/\/ in this case and bring the red window to the top.\n+            System.out.println(\" >> Testing Scenario 3 ...\");\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win1.setAlwaysOnTop(false);\n+                    if (parent != null) {\n+                        parent.setVisible(false);\n+                        parent.setVisible(true);\n+                    }\n@@ -147,1 +199,17 @@\n-                win2.toFront();\n+            });\n+\n+            robot.delay(300);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win2.toFront();\n+                }\n+            });\n+\n+            checkTopWindow(caseNo, 3, Color.RED);\n+\n+        } finally {\n+            if (win1 != null) {\n+                SwingUtilities.invokeAndWait(()-> win1.dispose());\n@@ -149,1 +217,9 @@\n-        });\n+            if (win2 != null) {\n+                SwingUtilities.invokeAndWait(()-> win2.dispose());\n+            }\n+        }\n+    }\n+    \/\/ to check if the current top window background color\n+    \/\/ matches the expected color\n+    private static void checkTopWindow(int caseNo, int scenarioNo,\n+                                       Color expectedColor) {\n@@ -153,0 +229,3 @@\n+        Color actualColor = robot.getPixelColor(point.x + 100, point.y + 100);\n+\n+        saveScreenCapture(caseNo , scenarioNo);\n@@ -154,3 +233,8 @@\n-        color = robot.getPixelColor(point.x + 100, point.y + 100);\n-        if(!color.equals(Color.RED)) {\n-            throw new RuntimeException(\"Failed to unset alawaysOnTop \" + color);\n+        if (!actualColor.equals(expectedColor)) {\n+            System.out.println(\" >> Scenario \"+ scenarioNo +\" FAILED !!\");\n+            errorLog.append(\"Case \"+ caseNo + errorMsg[scenarioNo - 1]\n+                    +\" Expected Color: \"+ expectedColor +\" vs Actual Color: \"\n+                    + actualColor +\"\\n\");\n+        }\n+        else {\n+            System.out.println(\" >> Scenario \"+ scenarioNo +\" Passed\");\n@@ -158,0 +242,1 @@\n+    }\n@@ -159,2 +244,11 @@\n-        win1.dispose();\n-        win2.dispose();\n+    \/\/ For Debugging purpose - method used to save the screen capture as\n+    \/\/ BufferedImage in the event the test fails\n+    private static void saveScreenCapture(int caseNo, int scenarioNo) {\n+        String filename = \"img_\"+ caseNo +\"_\"+ scenarioNo;\n+        BufferedImage image = robot.createScreenCapture(\n+                new Rectangle(0, 0, 500, 500));\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n@@ -162,1 +256,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Window\/MultiWindowApp\/ChildAlwaysOnTopTest.java","additions":188,"deletions":94,"binary":false,"changes":282,"status":"modified"}]}