{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -58,0 +59,8 @@\n+    private static String[] errorMsg= new String[] {\n+            \" Scenario 1 Failed: alwaysOnTop window is sent back by another\" +\n+                    \" child window with setVisible().\",\n+            \" Scenario 2 Failed: alwaysOnTop window is\" +\n+                    \" sent back by another child window with toFront().\",\n+            \" Scenario 3 Failed: Failed to unset alwaysOnTop \",\n+    };\n+    private static boolean errorFlag = false;\n@@ -71,1 +80,1 @@\n-        System.out.println(\"CASE 1 Passed\");\n+        System.out.println(\"CASE 1 Completed\");\n@@ -85,1 +94,1 @@\n-        System.out.println(\"CASE 2 Passed\");\n+        System.out.println(\"CASE 2 Completed\");\n@@ -89,1 +98,1 @@\n-        System.out.println(\"Testing CASE 3:Dialog within another\" +\n+        System.out.println(\"Testing CASE 3:Dialog within another\"+\n@@ -102,1 +111,1 @@\n-        System.out.println(\"CASE 3 Passed\");\n+        System.out.println(\"CASE 3 Completed\");\n@@ -105,1 +114,7 @@\n-        System.out.println(\"All three cases passed !!\");\n+        if (!errorFlag) {\n+            System.out.println(\"All three cases passed !!\");\n+        }\n+        else {\n+            throw new RuntimeException(\"One or more scenarios are failing. \"+\n+                    \"Please check the saved screenshots.\");\n+        }\n@@ -153,15 +168,1 @@\n-            robot.delay(300);\n-            robot.waitForIdle();\n-            Color color = robot.getPixelColor(point.x + 100, point.y + 100);\n-\n-            if (!color.equals(Color.GREEN)) {\n-                SwingUtilities.invokeAndWait(()-> {\n-                    System.out.println(\"Green Window Active?: \"+ win1.isActive());\n-                    System.out.println(\"Red Window Active? \"+ win2.isActive());\n-                });\n-                saveScreenCapture(caseNo , 1);\n-                throw new RuntimeException(\"Scenario 1: alwaysOnTop window is \"+\n-                        \"sent back by another child window with setVisible(). \"\n-                        + color);\n-            }\n-            System.out.println(\" >> Scenario 1 Passed\");\n+            checkTopWindow(caseNo, 1, Color.GREEN);\n@@ -182,15 +183,1 @@\n-            robot.delay(300);\n-            robot.waitForIdle();\n-            color = robot.getPixelColor(point.x + 100, point.y + 100);\n-\n-            if (!color.equals(Color.GREEN)) {\n-                SwingUtilities.invokeAndWait(()-> {\n-                    System.out.println(\"Green Window Active?: \"+ win1.isActive());\n-                    System.out.println(\"Red Window Active? \"+ win2.isActive());\n-                });\n-                saveScreenCapture(caseNo , 2);\n-                throw new RuntimeException(\"Scenario 2: alwaysOnTop window is\" +\n-                        \" sent back by another child window with\" +\n-                        \" toFront(). \" + color);\n-            }\n-            System.out.println(\" >> Scenario 2 Passed\");\n+            checkTopWindow(caseNo, 2, Color.GREEN);\n@@ -225,13 +212,2 @@\n-            robot.delay(500);\n-            robot.waitForIdle();\n-            color = robot.getPixelColor(point.x + 100, point.y + 100);\n-\n-            if (!color.equals(Color.RED)) {\n-                SwingUtilities.invokeAndWait(()-> {\n-                    System.out.println(\"Green Window Active?: \"+ win1.isActive());\n-                    System.out.println(\"Red Window Active? \"+ win2.isActive());\n-                });\n-                saveScreenCapture(caseNo , 3);\n-                throw new RuntimeException(\"Scenario 3: Failed to unset alwaysOnTop \" + color);\n-            }\n-            System.out.println(\" >> Scenario 3 Passed\");\n+            checkTopWindow(caseNo, 3, Color.RED);\n+\n@@ -247,0 +223,26 @@\n+    \/\/ to check if the current top window background color\n+    \/\/ matches the expected color\n+    private static void checkTopWindow(int caseNo, int scenarioNo,\n+                                       Color expectedColor)\n+            throws InterruptedException, InvocationTargetException {\n+\n+        robot.delay(500);\n+        robot.waitForIdle();\n+        Color actualColor = robot.getPixelColor(point.x + 100, point.y + 100);\n+\n+        saveScreenCapture(caseNo , scenarioNo);\n+\n+        if (!actualColor.equals(expectedColor)) {\n+            errorFlag = true;\n+            SwingUtilities.invokeAndWait(()-> {\n+                System.out.println(\"Green Window Active?: \"+ win1.isActive());\n+                System.out.println(\"Red Window Active? \"+ win2.isActive());\n+            });\n+            System.out.println(\"Case \"+ caseNo + errorMsg[scenarioNo - 1]\n+                    +\" Expected Color: \"+ expectedColor +\" vs Actual Color: \"\n+                    + actualColor);\n+        }\n+        else {\n+            System.out.println(\" >> Scenario \"+ scenarioNo +\" Passed\");\n+        }\n+    }\n","filename":"test\/jdk\/java\/awt\/Window\/MultiWindowApp\/ChildAlwaysOnTopTest.java","additions":50,"deletions":48,"binary":false,"changes":98,"status":"modified"}]}