{"files":[{"patch":"@@ -395,2 +395,2 @@\n-     * @param     className the <a href=\"#binary-name\">binary name<\/a> of the class\n-     *                      or the string representing an array type\n+     * @param     className the {@linkplain ClassLoader##binary-name binary name}\n+     *                      of the class or the string representing an array type\n@@ -427,1 +427,1 @@\n-     * Given the {@linkplain ##binary-name binary name} for a class or interface,\n+     * Given the {@linkplain ClassLoader##binary-name binary name} for a class or interface,\n@@ -472,2 +472,2 @@\n-     * @param name       the <a href=\"#binary-name\">binary name<\/a> of the class\n-     *                   or the string representing an array class\n+     * @param name       the {@linkplain ClassLoader##binary-name binary name}\n+     *                   of the class or the string representing an array class\n@@ -562,1 +562,3 @@\n-     * This method returns {@code null} on failure rather than\n+     * This method does not support loading of array types, unlike\n+     * {@link #forName(String, boolean, ClassLoader)}. The class name must be\n+     * a binary name.  This method returns {@code null} on failure rather than\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8310242\n+ * @run junit ForNameNames\n+ * @summary Verify class names for Class.forName\n+ *\/\n+\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ForNameNames {\n+    static class Inner {}\n+    static Stream<Arguments> testCases() {\n+        return Stream.of(\n+                Arguments.of(\"java.lang.String\", String.class),\n+                Arguments.of(\"[Ljava.lang.String;\", String[].class),\n+                Arguments.of(\"ForNameNames$Inner\", Inner.class),\n+                Arguments.of(\"[[I\", int[][].class)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    void testForName(String cn, Class<?> expected) throws ClassNotFoundException {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        Class<?> c = Class.forName(cn, false, loader);\n+        assertEquals(expected, c);\n+        c = Class.forName(cn);\n+        assertEquals(expected, c);\n+    }\n+\n+    static Stream<Arguments> invalidNames() {\n+        return Stream.of(\n+                Arguments.of(\"I\"),                   \/\/ primitive type\n+                Arguments.of(\"ForNameNames.Inner\"),  \/\/ fully-qualified name\n+                Arguments.of(\"[java.lang.String\"),   \/\/ missing L and ;\n+                Arguments.of(\"[Ljava.lang.String\"),  \/\/ missing ;\n+                Arguments.of(\"[Ljava\/lang\/String;\")  \/\/ type descriptor\n+\n+        );\n+    }\n+    @ParameterizedTest\n+    @MethodSource(\"invalidNames\")\n+    void testInvalidNames(String cn) {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        assertThrows(ClassNotFoundException.class, () -> Class.forName(cn, false, loader));\n+    }\n+\n+    @Test\n+    void testModule() {\n+        \/\/ Class.forName(Module, String) does not allow class name for array types\n+        Class<?> c = Class.forName(Object.class.getModule(), \"[Ljava.lang.String;\");\n+        assertNull(c);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}