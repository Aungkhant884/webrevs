{"files":[{"patch":"@@ -444,1 +444,1 @@\n-     * of the array class, followed by the element type as encoded in\n+     * of the array nesting, followed by the element type as encoded in\n@@ -451,1 +451,1 @@\n-     * Class<?> intArrayClass = Class.forName(\"[[[I\", false, currentLoader);\n+     * Class<?> intArrayClass = Class.forName(\"[[[I\", false, currentLoader);   \/\/ Class of int[][][]\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,4 @@\n+    \/*\n+     * Test 1-arg and 3-arg Class::forName.  Class::getName on the returned\n+     * Class object returns the name passed to Class::forName.\n+     *\/\n@@ -54,4 +58,7 @@\n-        Class<?> c = Class.forName(cn, false, loader);\n-        assertEquals(expected, c);\n-        c = Class.forName(cn);\n-        assertEquals(expected, c);\n+        Class<?> c1 = Class.forName(cn, false, loader);\n+        assertEquals(expected, c1);\n+        assertEquals(cn, c1.getName());\n+\n+        Class<?> c2 = Class.forName(cn);\n+        assertEquals(expected, c2);\n+        assertEquals(cn, c2.getName());\n@@ -63,1 +70,2 @@\n-                Arguments.of(\"ForNameNames.Inner\"),  \/\/ fully-qualified name\n+                Arguments.of(\"int[]\"),               \/\/ fully-qualified name of int array\n+                Arguments.of(\"ForNameNames.Inner\"),  \/\/ fully-qualified name of nested type\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}