{"files":[{"patch":"@@ -435,19 +435,11 @@\n-     * <p> If {@code name} denotes a primitive type or void, an attempt\n-     * will be made to locate a user-defined class in the unnamed package whose\n-     * name is {@code name}. Therefore, this method cannot be used to\n-     * obtain any of the {@code Class} objects representing primitive\n-     * types or void.\n-     *\n-     * <p> If {@code name} denotes an array class whose element type\n-     * is a class or interface, the name consists of one or more {@code '['}\n-     * followed by {@code 'L'}, the binary name of the element type and {@code ';'}\n-     * for example {@code \"[Ljava.lang.String;\"}, this method attempts to\n-     * load the element type but not initialize it regardless of the value\n-     * of the {@code initialize} parameter.\n-     *\n-     * <p> To find an array class of a primitive type, the name string\n-     * consists of one or more {@code '['} followed by the field type descriptor\n-     * of the primitive type (JVMS {@jvms 4.3.2 }); for example {@code \"[I\"}\n-     * represents an array of {@code int}.\n-     *\n-     * <p> For example, in an instance method the expression:\n+     * <p> This method cannot be used to obtain any of the {@code Class} objects\n+     * representing primitive types or void, hidden classes or interfaces,\n+     * or array classes whose element type is a hidden class or interface.\n+     * If {@code name} denotes a primitive type or void, for example {@code I},\n+     * an attempt will be made to locate a user-defined class in the unnamed package\n+     * whose name is {@code I} instead.\n+     *\n+     * <p> To obtain {@code Class} object associated with an array class,\n+     * the name consists of one or more {@code '['} representing the depth\n+     * of the array class, followed by the element type as encoded in\n+     * {@linkplain ##nameFormat the table} specified in {@code Class.getName()}.\n@@ -455,0 +447,1 @@\n+     * <p> Examples:\n@@ -456,1 +449,5 @@\n-     * Class.forName(\"Foo\")\n+     * Class<?> threadClass = Class.forName(\"java.lang.Thread\", false, currentLoader);\n+     * Class<?> stringArrayClass = Class.forName(\"[Ljava.lang.String;\", false, currentLoader);\n+     * Class<?> intArrayClass = Class.forName(\"[[[I\", false, currentLoader);\n+     * Class<?> nestedClass = Class.forName(\"java.lang.Character$UnicodeBlock\", false, currentLoader);\n+     * Class<?> fooClass = Class.forName(\"Foo\", true, currentLoader);\n@@ -459,1 +456,2 @@\n-     * is equivalent to:\n+     * <p> A call to {@code getName()} on the {@code Class} object returned\n+     * from {@code forName(}<i>N<\/i>{@code )} returns <i>N<\/i>.\n@@ -461,3 +459,3 @@\n-     * {@snippet lang=\"java\" :\n-     * Class.forName(\"Foo\", true, this.getClass().getClassLoader())\n-     * }\n+     * <p> A call to {@code forName(\"[L}<i>N<\/i>{@code ;\")} causes the element type\n+     * named <i>N<\/i> to be loaded but not initialized regardless of the value\n+     * of the {@code initialize} parameter.\n@@ -465,5 +463,5 @@\n-     * Note that this method throws errors related to loading, linking\n-     * or initializing as specified in Sections {@jls 12.2}, {@jls\n-     * 12.3}, and {@jls 12.4} of <cite>The Java Language\n-     * Specification<\/cite>.\n-     * Note that this method does not check whether the requested class\n+     * @apiNote\n+     * This method throws errors related to loading, linking or initializing\n+     * as specified in Sections {@jls 12.2}, {@jls 12.3}, and {@jls 12.4} of\n+     * <cite>The Java Language Specification<\/cite>.\n+     * In addition, this method does not check whether the requested class\n@@ -904,1 +902,1 @@\n-     * <blockquote><table class=\"striped\">\n+     * <blockquote><table class=\"striped\" id=\"nameFormat\">\n@@ -931,0 +929,2 @@\n+     * Character.UnicodeBlock.class.getName()\n+     *     returns \"java.lang.Character$UnicodeBlock\"\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"}]}