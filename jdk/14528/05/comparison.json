{"files":[{"patch":"@@ -380,1 +380,1 @@\n-     * runtime {@code Class} descriptor for the class named\n+     * runtime {@code Class} object for the class named\n@@ -395,3 +395,4 @@\n-     * @param      className   the fully qualified name of the desired class.\n-     * @return     the {@code Class} object for the class with the\n-     *             specified name.\n+     * @param     className the {@linkplain ClassLoader##binary-name binary name}\n+     *                      of the class or the string representing an array type\n+     * @return    the {@code Class} object for the class with the\n+     *            specified name.\n@@ -426,5 +427,4 @@\n-     * Given the fully qualified name for a class or interface (in the same\n-     * format returned by {@code getName}) this method attempts to\n-     * locate and load the class or interface.  The specified class\n-     * loader is used to load the class or interface.  If the parameter\n-     * {@code loader} is null, the class is loaded through the bootstrap\n+     * Given the {@linkplain ClassLoader##binary-name binary name} for a class or interface,\n+     * this method attempts to locate and load the class or interface. The specified\n+     * class loader is used to load the class or interface.  If the parameter\n+     * {@code loader} is {@code null}, the class is loaded through the bootstrap\n@@ -435,5 +435,6 @@\n-     * <p> If {@code name} denotes a primitive type or void, an attempt\n-     * will be made to locate a user-defined class in the unnamed package whose\n-     * name is {@code name}. Therefore, this method cannot be used to\n-     * obtain any of the {@code Class} objects representing primitive\n-     * types or void.\n+     * <p> This method cannot be used to obtain any of the {@code Class} objects\n+     * representing primitive types or void, hidden classes or interfaces,\n+     * or array classes whose element type is a hidden class or interface.\n+     * If {@code name} denotes a primitive type or void, for example {@code I},\n+     * an attempt will be made to locate a user-defined class in the unnamed package\n+     * whose name is {@code I} instead.\n@@ -441,4 +442,4 @@\n-     * <p> If {@code name} denotes an array class, the component type of\n-     * the array class is loaded but not initialized.\n-     *\n-     * <p> For example, in an instance method the expression:\n+     * <p> To obtain {@code Class} object associated with an array class,\n+     * the name consists of one or more {@code '['} representing the depth\n+     * of the array class, followed by the element type as encoded in\n+     * {@linkplain ##nameFormat the table} specified in {@code Class.getName()}.\n@@ -446,0 +447,1 @@\n+     * <p> Examples:\n@@ -447,1 +449,5 @@\n-     * Class.forName(\"Foo\")\n+     * Class<?> threadClass = Class.forName(\"java.lang.Thread\", false, currentLoader);\n+     * Class<?> stringArrayClass = Class.forName(\"[Ljava.lang.String;\", false, currentLoader);\n+     * Class<?> intArrayClass = Class.forName(\"[[[I\", false, currentLoader);\n+     * Class<?> nestedClass = Class.forName(\"java.lang.Character$UnicodeBlock\", false, currentLoader);\n+     * Class<?> fooClass = Class.forName(\"Foo\", true, currentLoader);\n@@ -450,1 +456,2 @@\n-     * is equivalent to:\n+     * <p> A call to {@code getName()} on the {@code Class} object returned\n+     * from {@code forName(}<i>N<\/i>{@code )} returns <i>N<\/i>.\n@@ -452,3 +459,3 @@\n-     * {@snippet lang=\"java\" :\n-     * Class.forName(\"Foo\", true, this.getClass().getClassLoader())\n-     * }\n+     * <p> A call to {@code forName(\"[L}<i>N<\/i>{@code ;\")} causes the element type\n+     * named <i>N<\/i> to be loaded but not initialized regardless of the value\n+     * of the {@code initialize} parameter.\n@@ -456,5 +463,5 @@\n-     * Note that this method throws errors related to loading, linking\n-     * or initializing as specified in Sections {@jls 12.2}, {@jls\n-     * 12.3}, and {@jls 12.4} of <cite>The Java Language\n-     * Specification<\/cite>.\n-     * Note that this method does not check whether the requested class\n+     * @apiNote\n+     * This method throws errors related to loading, linking or initializing\n+     * as specified in Sections {@jls 12.2}, {@jls 12.3}, and {@jls 12.4} of\n+     * <cite>The Java Language Specification<\/cite>.\n+     * In addition, this method does not check whether the requested class\n@@ -463,2 +470,3 @@\n-     * @param name       fully qualified name of the desired class\n-\n+     * @param name       the {@linkplain ClassLoader##binary-name binary name}\n+     *                   of the class or the string representing an array class\n+     *\n@@ -489,0 +497,1 @@\n+     * @jls 13.1 The Form of a Binary\n@@ -551,1 +560,3 @@\n-     * This method returns {@code null} on failure rather than\n+     * This method does not support loading of array types, unlike\n+     * {@link #forName(String, boolean, ClassLoader)}. The class name must be\n+     * a binary name.  This method returns {@code null} on failure rather than\n@@ -891,1 +902,1 @@\n-     * <blockquote><table class=\"striped\">\n+     * <blockquote><table class=\"striped\" id=\"nameFormat\">\n@@ -918,0 +929,2 @@\n+     * Character.UnicodeBlock.class.getName()\n+     *     returns \"java.lang.Character$UnicodeBlock\"\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":45,"deletions":32,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8310242\n+ * @run junit ForNameNames\n+ * @summary Verify class names for Class.forName\n+ *\/\n+\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ForNameNames {\n+    static class Inner {}\n+    static Stream<Arguments> testCases() {\n+        return Stream.of(\n+                Arguments.of(\"java.lang.String\", String.class),\n+                Arguments.of(\"[Ljava.lang.String;\", String[].class),\n+                Arguments.of(\"ForNameNames$Inner\", Inner.class),\n+                Arguments.of(\"[[I\", int[][].class)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    void testForName(String cn, Class<?> expected) throws ClassNotFoundException {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        Class<?> c = Class.forName(cn, false, loader);\n+        assertEquals(expected, c);\n+        c = Class.forName(cn);\n+        assertEquals(expected, c);\n+    }\n+\n+    static Stream<Arguments> invalidNames() {\n+        return Stream.of(\n+                Arguments.of(\"I\"),                   \/\/ primitive type\n+                Arguments.of(\"ForNameNames.Inner\"),  \/\/ fully-qualified name\n+                Arguments.of(\"[java.lang.String\"),   \/\/ missing L and ;\n+                Arguments.of(\"[Ljava.lang.String\"),  \/\/ missing ;\n+                Arguments.of(\"[Ljava\/lang\/String;\")  \/\/ type descriptor\n+\n+        );\n+    }\n+    @ParameterizedTest\n+    @MethodSource(\"invalidNames\")\n+    void testInvalidNames(String cn) {\n+        ClassLoader loader = ForNameNames.class.getClassLoader();\n+        assertThrows(ClassNotFoundException.class, () -> Class.forName(cn, false, loader));\n+    }\n+\n+    @Test\n+    void testModule() {\n+        \/\/ Class.forName(Module, String) does not allow class name for array types\n+        Class<?> c = Class.forName(Object.class.getModule(), \"[Ljava.lang.String;\");\n+        assertNull(c);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/ForNameNames.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}