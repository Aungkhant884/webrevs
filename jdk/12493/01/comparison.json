{"files":[{"patch":"@@ -750,1 +750,0 @@\n-  assert(caller_ik->class_loader_data() == lambda_ik->class_loader_data(), \"mismatched class loader data\");\n@@ -761,1 +760,1 @@\n-  if (info != nullptr && !lambda_ik->is_non_strong_hidden() && is_builtin(lambda_ik) && is_builtin(caller_ik)\n+  if (info != nullptr && is_builtin(lambda_ik) && is_builtin(caller_ik)\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3616,1 +3616,0 @@\n-  assert(!lambda_ik->is_non_strong_hidden(), \"expected a strong hidden class\");\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.STRONG;\n@@ -383,1 +382,1 @@\n-                                                               NESTMATE, STRONG);\n+                                                               NESTMATE);\n@@ -385,1 +384,1 @@\n-                lookup = caller.defineHiddenClass(classBytes, !disableEagerInitialization, NESTMATE, STRONG);\n+                lookup = caller.defineHiddenClass(classBytes, !disableEagerInitialization, NESTMATE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}