{"files":[{"patch":"@@ -3721,1 +3721,1 @@\n-            if (ReductionNode::implemented(use->Opcode(), Matcher::min_vector_size(bt), bt)) {\n+            if (ReductionNode::implemented(use->Opcode(), Matcher::superword_max_vector_size(bt), bt)) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,2 +85,0 @@\n-    \/* Vectorization is expected but not enabled (SuperWord::implemented).\n-       A positive @IR test should be added later. *\/\n@@ -90,0 +88,3 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfCPUFeature = {\"sse2\", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Double.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+    private double[] doublesA;\n+    private double[] doublesB;\n+    private double[] doublesC;\n@@ -66,0 +69,3 @@\n+        doublesA = new double[COUNT];\n+        doublesB = new double[COUNT];\n+        doublesC = new double[COUNT];\n@@ -74,0 +80,3 @@\n+            doublesA[i] = r.nextDouble();\n+            doublesB[i] = r.nextDouble();\n+            doublesC[i] = r.nextDouble();\n@@ -137,0 +146,10 @@\n+    @Benchmark\n+    public void mulRedD(Blackhole bh) {\n+        double resD = 0.0;\n+        for (int i = 0; i < COUNT; i++) {\n+            resD += (doublesA[i] * doublesB[i]) + (doublesA[i] * doublesC[i]) +\n+                     (doublesB[i] * doublesC[i]);\n+        }\n+        bh.consume(resD);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReduction.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}