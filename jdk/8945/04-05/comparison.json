{"files":[{"patch":"@@ -4038,1 +4038,1 @@\n-    __ incrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+    __ increment(Address(rthread, JavaThread::held_monitor_count_offset()));\n@@ -4112,1 +4112,1 @@\n-    __ decrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+    __ decrement(Address(rthread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  incrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+  increment(Address(rthread, JavaThread::held_monitor_count_offset()));\n@@ -151,1 +151,1 @@\n-  decrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+  decrement(Address(rthread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -815,1 +815,1 @@\n-    incrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+    increment(Address(rthread, JavaThread::held_monitor_count_offset()));\n@@ -874,1 +874,1 @@\n-    decrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+    decrement(Address(rthread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1613,1 +1613,1 @@\n-    __ incrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+    __ increment(Address(rthread, JavaThread::held_monitor_count_offset()));\n@@ -1721,1 +1721,1 @@\n-      __ decrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+      __ decrement(Address(rthread, JavaThread::held_monitor_count_offset()));\n@@ -1742,1 +1742,1 @@\n-      __ decrementw(Address(rthread, JavaThread::held_monitor_count_offset()));\n+      __ decrement(Address(rthread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8095,2 +8095,2 @@\n-  __ ldrw(rscratch1, Address(rthread, JavaThread::held_monitor_count_offset()));\n-  __ strw(rscratch1, Address(sp, ContinuationEntry::parent_held_monitor_count_offset()));\n+  __ ldr(rscratch1, Address(rthread, JavaThread::held_monitor_count_offset()));\n+  __ str(rscratch1, Address(sp, ContinuationEntry::parent_held_monitor_count_offset()));\n@@ -8116,2 +8116,2 @@\n-  __ ldrw(rscratch1, Address(sp, ContinuationEntry::parent_held_monitor_count_offset()));\n-  __ strw(rscratch1, Address(rthread, JavaThread::held_monitor_count_offset()));\n+  __ ldr(rscratch1, Address(sp, ContinuationEntry::parent_held_monitor_count_offset()));\n+  __ str(rscratch1, Address(rthread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -593,3 +593,7 @@\n-  Register thread = NOT_LP64(tmpReg) LP64_ONLY(r15_thread);\n-  NOT_LP64(get_thread(thread);)\n-  incrementl(Address(thread, JavaThread::held_monitor_count_offset()));\n+#ifndef _LP64\n+  get_thread(tmpReg);\n+  incrementl(Address(tmpReg, JavaThread::held_monitor_count_offset()));\n+#else \/\/ _LP64\n+  incrementq(Address(r15_thread, JavaThread::held_monitor_count_offset()));\n+#endif\n+\n@@ -823,3 +827,7 @@\n-  Register thread = NOT_LP64(tmpReg) LP64_ONLY(r15_thread);\n-  NOT_LP64(get_thread(thread);)\n-  decrementl(Address(thread, JavaThread::held_monitor_count_offset()));\n+#ifndef _LP64\n+  get_thread(tmpReg);\n+  decrementl(Address(tmpReg, JavaThread::held_monitor_count_offset()));\n+#else \/\/ _LP64\n+  decrementq(Address(r15_thread, JavaThread::held_monitor_count_offset()));\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2912,4 +2912,0 @@\n-#else\n-  Register thread = r15_thread;\n-#endif\n-\n@@ -2917,2 +2913,0 @@\n-\n-#ifndef _LP64\n@@ -2920,0 +2914,2 @@\n+#else \/\/ LP64\n+  incrementq(Address(r15_thread, JavaThread::held_monitor_count_offset()));\n@@ -2928,4 +2924,0 @@\n-#else\n-  Register thread = r15_thread;\n-#endif\n-\n@@ -2933,2 +2925,0 @@\n-\n-#ifndef _LP64\n@@ -2936,0 +2926,2 @@\n+#else \/\/ LP64\n+  decrementq(Address(r15_thread, JavaThread::held_monitor_count_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -8337,2 +8337,2 @@\n-  __ movl(rax, Address(r15_thread, JavaThread::held_monitor_count_offset()));\n-  __ movl(Address(rsp, ContinuationEntry::parent_held_monitor_count_offset()), rax);\n+  __ movq(rax, Address(r15_thread, JavaThread::held_monitor_count_offset()));\n+  __ movq(Address(rsp, ContinuationEntry::parent_held_monitor_count_offset()), rax);\n@@ -8341,1 +8341,1 @@\n-  __ movl(Address(r15_thread, JavaThread::held_monitor_count_offset()), 0);\n+  __ movq(Address(r15_thread, JavaThread::held_monitor_count_offset()), 0);\n@@ -8366,2 +8366,2 @@\n-  __ movl(rbx, Address(rsp, ContinuationEntry::parent_held_monitor_count_offset()));\n-  __ movl(Address(r15_thread, JavaThread::held_monitor_count_offset()), rbx);\n+  __ movq(rbx, Address(rsp, ContinuationEntry::parent_held_monitor_count_offset()));\n+  __ movq(Address(r15_thread, JavaThread::held_monitor_count_offset()), rbx);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-  nonstatic_field(JavaThread,                  _held_monitor_count,                           int32_t)                               \\\n+  nonstatic_field(JavaThread,                  _held_monitor_count,                           int64_t)                               \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  int _parent_held_monitor_count;\n+  int64_t   _parent_held_monitor_count;\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1411,1 +1411,1 @@\n-         \"Held monitor count and locks on stack invariant: \" INT32_FORMAT \" JNI: \" INT32_FORMAT, current->held_monitor_count(), current->jni_monitor_count());\n+         \"Held monitor count and locks on stack invariant: \" INT64_FORMAT \" JNI: \" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -854,2 +854,2 @@\n-         \"held monitor count should be equal to jni: \" UINT32_FORMAT \" != \" INT32_FORMAT,\n-         this->held_monitor_count(), this->jni_monitor_count());\n+         \"held monitor count should be equal to jni: \" INT64_FORMAT \" != \" INT64_FORMAT,\n+         (int64_t)this->held_monitor_count(), (int64_t)this->jni_monitor_count());\n@@ -1829,1 +1829,1 @@\n-void JavaThread::inc_held_monitor_count(int32_t i, bool jni) {\n+void JavaThread::inc_held_monitor_count(int i, bool jni) {\n@@ -1831,1 +1831,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT32_FORMAT, _held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n@@ -1834,1 +1834,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT32_FORMAT, _jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n@@ -1840,1 +1840,1 @@\n-void JavaThread::dec_held_monitor_count(int32_t i, bool jni) {\n+void JavaThread::dec_held_monitor_count(int i, bool jni) {\n@@ -1843,1 +1843,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT32_FORMAT, _held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n@@ -1846,1 +1846,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT32_FORMAT, _jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -445,2 +445,8 @@\n-  int32_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n-  int32_t _jni_monitor_count;\n+#ifdef _LP64\n+  int64_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n+  int64_t _jni_monitor_count;\n+#else\n+  int64_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n+  int64_t _jni_monitor_count;\n+#endif\n+\n@@ -596,4 +602,10 @@\n-  void inc_held_monitor_count(int32_t i = 1, bool jni = false);\n-  void dec_held_monitor_count(int32_t i = 1, bool jni = false);\n-  int32_t held_monitor_count() { return _held_monitor_count; }\n-  int32_t jni_monitor_count()  { return _jni_monitor_count;  }\n+  void inc_held_monitor_count(int i = 1, bool jni = false);\n+  void dec_held_monitor_count(int i = 1, bool jni = false);\n+\n+#ifdef _LP64\n+  int64_t held_monitor_count() { return _held_monitor_count; }\n+  int64_t jni_monitor_count()  { return _jni_monitor_count;  }\n+#else\n+  int64_t held_monitor_count() { return _held_monitor_count; }\n+  int64_t jni_monitor_count()  { return _jni_monitor_count;  }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}