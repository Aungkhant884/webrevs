{"files":[{"patch":"@@ -3857,2 +3857,1 @@\n-                nextToken();\n-                if (token.kind == EOF)\n+                if (peekToken(EOF::equals))\n@@ -3860,0 +3859,1 @@\n+                nextToken();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8305671\n+ * @summary Verify an extra semicolon is allowed after package decl with no imports\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n+*\/\n+\n+import com.sun.tools.javac.Main;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+public class ExtraPackageSemicolon {\n+\n+    public static void runTest(String filename, String source) throws Exception {\n+        final File sourceFile = new File(filename);\n+        System.err.println(\"writing: \" + sourceFile);\n+        try (PrintStream output = new PrintStream(new FileOutputStream(sourceFile))) {\n+            output.println(source);\n+        }\n+        final StringWriter diags = new StringWriter();\n+        final String[] params = new String[] { sourceFile.toString() };\n+        System.err.println(\"compiling: \" + sourceFile);\n+        int ret = Main.compile(params, new PrintWriter(diags, true));\n+        System.err.println(\"exit value: \" + ret);\n+        String output = diags.toString().trim();\n+        if (!output.isEmpty())\n+            System.err.println(\"output:\\n\" + output);\n+        else\n+            System.err.println(\"no output\");\n+        if (ret != 0)\n+            throw new AssertionError(\"compilation failed, but expected success\");\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(\"Test1.java\", \"package p;\");\n+        runTest(\"Test2.java\", \"package p;;\");\n+        runTest(\"Test3.java\", \"package p;; ;; ;; ;;; ;;; ;;; ;;\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/parser\/ExtraPackageSemicolon.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}