{"files":[{"patch":"@@ -3858,2 +3858,0 @@\n-                if (token.kind == EOF)\n-                    break;\n@@ -3902,4 +3900,6 @@\n-                JCTree def = typeDeclaration(mods, docComment);\n-                if (def instanceof JCExpressionStatement statement)\n-                    def = statement.expr;\n-                defs.append(def);\n+                if (token.kind != EOF) {\n+                    JCTree def = typeDeclaration(mods, docComment);\n+                    if (def instanceof JCExpressionStatement statement)\n+                        def = statement.expr;\n+                    defs.append(def);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8305671\n+ * @summary Verify an extra semicolon is allowed after package decl with no imports\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main ExtraPackageSemicolon\n+ *\/\n+\n+import com.sun.tools.javac.Main;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class ExtraPackageSemicolon extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    public ExtraPackageSemicolon() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void test(Path base) throws Exception {\n+        testCompile(base, \"package p;\");\n+        testCompile(base, \"package p;;\");\n+        testCompile(base, \"package p;;   \");\n+        testCompile(base, \"package p\\n;\");\n+        testCompile(base, \"package p\\n;\\n\");\n+        testCompile(base, \"package p\\n;\\n;\\n\");\n+        testCompile(base, \"package p;;;;;;;;;;;;;;;;;;;;;;;;;;;;\");\n+        testCompile(base, \"package p;; ;; ;; ;;; ;;; ;;; ;;\");\n+        testCompile(base, \"package p;;\\n;;\\n;;\\n;;;\\n;;;\\n;;;\\n;;\");\n+        testCompile(base, \"package p;\\nimport java.util.Map;\");\n+        testCompile(base, \"package p;\\nimport java.util.Map;\\n;\");\n+        testCompile(base, \"package p;\\nimport java.util.Map;\\n;; ;;\");\n+    }\n+\n+    private void testCompile(Path base, String javaSource) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, javaSource);\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .run(Task.Expect.SUCCESS);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ExtraPackageSemicolon().runTests();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/parser\/ExtraPackageSemicolon.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}