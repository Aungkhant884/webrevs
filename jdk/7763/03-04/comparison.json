{"files":[{"patch":"@@ -43,0 +43,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -59,0 +60,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -750,1 +752,3 @@\n-  STATIC_ASSERT(sizeof(long) >= 4); \/\/ need to have enough bits\n+  \/\/ Don't use strtol -- on 64-bit builds, \"long\" could be either 32- or 64-bits\n+  \/\/ so the range tests could be tautological and might cause compiler warnings.\n+  STATIC_ASSERT(sizeof(long long) >= 8); \/\/ C++ specification\n@@ -752,3 +756,2 @@\n-  long v = strtol(s, endptr, base);\n-  if (errno != 0 LP64_ONLY(|| v < min_jint || v > max_jint)) {\n-    \/\/ long is 64-bit on LP64, so we need explicit range check.\n+  long long v = strtoll(s, endptr, base);\n+  if (errno != 0 || v < min_jint || v > max_jint) {\n@@ -766,1 +769,2 @@\n-  STATIC_ASSERT(sizeof(unsigned long) >= 4); \/\/ need to have enough bits\n+  \/\/ Don't use strtoul -- same reason as above.\n+  STATIC_ASSERT(sizeof(unsigned long long) >= 8); \/\/ C++ specification\n@@ -768,3 +772,2 @@\n-  unsigned long v = strtoul(s, endptr, base);\n-  if (errno != 0 LP64_ONLY(|| v > max_juint)) {\n-    \/\/ unsigned long is 64-bit on LP64, so we need explicit range check.\n+  unsigned long long v = strtoull(s, endptr, base);\n+  if (errno != 0 || v > max_juint) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}