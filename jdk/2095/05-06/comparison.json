{"files":[{"patch":"@@ -1308,16 +1308,0 @@\n-  static void set_imm18(int* instr, int s) {\n-    assert(PowerArchitecturePPC64 >= 10, \"Prefixed instructions are supported only in Power 10 and up\");\n-    \/\/ imm18 is in the lower 18 bits of the prefix instruction,\n-    \/\/ so this is endian-neutral. Same for the get_imm18 below.\n-    uint32_t w = *(uint32_t *)instr;\n-    *instr = (int)((w & ~0x0003FFFF) | (s & 0x0003FFFF));\n-  }\n-\n-  static int get_imm18(address a, int instruction_number) {\n-    assert(PowerArchitecturePPC64 >= 10, \"Prefixed instructions are supported only in Power 10 and up\");\n-    return (((int *)a)[instruction_number] << 14) >> 14;\n-  }\n-\n-  static inline int hi18_signed( int x) { return hi16_signed(x); }\n-  static inline int hi18_signed(long x) { return (int)((x << 30) >> 46); }\n-\n@@ -1347,1 +1331,0 @@\n-  inline void emit_prefix(int); \/\/ emit prefix word only (and a nop to skip 64-byte boundary)\n@@ -1510,22 +1493,0 @@\n-  static bool is_paddi_prefix(int x) {\n-     return PADDI_PREFIX_OPCODE == (x & PADDI_PREFIX_OPCODE_MASK);\n-  }\n-  static bool is_paddi_suffix(int x) {\n-     return PADDI_SUFFIX_OPCODE == (x & PADDI_SUFFIX_OPCODE_MASK);\n-  }\n-  \/\/ This function can skip a nop for 64-byte alignment and check the next word for a prefix.\n-  \/\/ Since the alignement nop is uncommon case, we will keep callers of this function simple,\n-  \/\/ as they which are often assertions and complex if-statement.\n-  static int is_paddi(const int* p, bool is_pli = false) {\n-     int32_t* p_inst = (int32_t*)p;\n-\n-     if (is_aligned(reinterpret_cast<uintptr_t>(p_inst+1), 64) && is_nop(*p_inst)) {\n-        p_inst++;  \/\/ skip over nop\n-     }\n-     if (is_paddi_prefix(p_inst[0]) && is_paddi_suffix(p_inst[1])) {\n-        return !is_pli ||\n-               (inv_r_eo(p_inst[0]) == 0 && inv_ra_field(p_inst[1]) == 0);\n-     } else {\n-        return false;\n-     }\n-  }\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}