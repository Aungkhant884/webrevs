{"files":[{"patch":"@@ -37,13 +37,0 @@\n-inline void Assembler::emit_prefix(int x) {\n-  assert((x & PREFIX_OPCODE_MASK) == PREFIX_PRIMARY_OPCODE || (x & PREFIX_OPCODE_MASK) == 0,\n-         \"Unexpected primary opcode for prefix word\");\n-\n-  \/\/ Add nop if a prefixed (two-word) instruction is going to cross a 64-byte boundary.\n-  \/\/ (See Section 1.6 of Power ISA Version 3.1)\n-  if (is_aligned(reinterpret_cast<uintptr_t>(pc()) + sizeof(int32_t), 64) ||\n-     Assembler::in_scratch_emit_size()) {\n-    Assembler::nop();\n-  }\n-  emit_int32(PREFIX_PRIMARY_OPCODE | x);\n-}\n-\n@@ -153,2 +140,2 @@\n-  emit_prefix(PADDI_PREFIX_OPCODE | r_eo(r) | d0_eo(si34));\n-  emit_int32( PADDI_SUFFIX_OPCODE | rt(d)   | ra(a)   | d1_eo(si34));\n+  emit_int32(PADDI_PREFIX_OPCODE | r_eo(r) | d0_eo(si34));\n+  emit_int32(PADDI_SUFFIX_OPCODE | rt(d)   | ra(a)   | d1_eo(si34));\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1158,1 +1158,56 @@\n-\/\/ Currently not used on this platform.\n+\/\/ Add nop if a prefixed (two-word) instruction is going to cross a 64-byte boundary.\n+\/\/ (See Section 1.6 of Power ISA Version 3.1)\n+int loadConI32Node::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n+int loadConL34Node::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n+int addI_reg_imm32Node::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n+int addL_reg_imm34Node::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n+int addP_reg_imm34Node::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n+int cmprb_Whitespace_reg_reg_prefixedNode::compute_padding(int current_offset) const {\n+  assert(PowerArchitecturePPC64 >= 10 && (CodeEntryAlignment & 63) == 0,\n+         \"Code buffer must be aligned to a multiple of 64 byte\");\n+  if (is_aligned(current_offset + BytesPerInstWord, 64) || Assembler::in_scratch_emit_size()) {\n+    return BytesPerInstWord;\n+  }\n+  return 0;\n+}\n+\n@@ -1899,1 +1954,1 @@\n-  st->print(\"NOP \\t\/\/ %d nops to pad for loops.\", _count);\n+  st->print(\"NOP \\t\/\/ %d nops to pad for loops or prefixed instructions.\", _count);\n@@ -5844,3 +5899,2 @@\n-  format %{ \"(nop if crossing a 64-byte boundary)\\n\\t\"\n-            \"PLI     $dst, $src\" %}\n-  size(12);\n+  format %{ \"PLI     $dst, $src\" %}\n+  size(8);\n@@ -5848,0 +5902,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -5851,0 +5906,1 @@\n+  ins_alignment(4);\n@@ -5932,3 +5988,2 @@\n-  format %{ \"(nop if crossing 64byte boundary)\\n\\t\"\n-            \"PLI     $dst, $src \\t\/\/ long\" %}\n-  size(12);\n+  format %{ \"PLI     $dst, $src \\t\/\/ long\" %}\n+  size(8);\n@@ -5936,0 +5991,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -5939,0 +5995,1 @@\n+  ins_alignment(4);\n@@ -8580,3 +8637,2 @@\n-  format %{ \"(nop if crossing 64byte boundary)\\n\\t\"\n-            \"PADDI   $dst, $src1, $src2\" %}\n-  size(12);\n+  format %{ \"PADDI   $dst, $src1, $src2\" %}\n+  size(8);\n@@ -8584,0 +8640,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -8587,0 +8644,1 @@\n+  ins_alignment(4);\n@@ -8670,3 +8728,2 @@\n-  format %{ \"(nop if crossing 64byte boundary)\\n\\t\"\n-            \"PADDI   $dst, $src1, $src2\" %}\n-  size(12);\n+  format %{ \"PADDI   $dst, $src1, $src2\" %}\n+  size(8);\n@@ -8674,0 +8731,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -8677,0 +8735,1 @@\n+  ins_alignment(4);\n@@ -8723,3 +8782,2 @@\n-  format %{ \"(nop if crossing 64byte boundary)\\n\\t\"\n-            \"PADDI    $dst, $src1, $src2\" %}\n-  size(12);\n+  format %{ \"PADDI    $dst, $src1, $src2\" %}\n+  size(8);\n@@ -8727,0 +8785,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -8730,0 +8789,1 @@\n+  ins_alignment(4);\n@@ -12061,2 +12121,1 @@\n-  format %{ \"(nop if crossing a 64-byte boundary)\\n\\t\"\n-            \"PLI     $src2, 0x201C0D09\\n\\t\"\n+  format %{ \"PLI     $src2, 0x201C0D09\\n\\t\"\n@@ -12065,1 +12124,1 @@\n-  size(20);\n+  size(16);\n@@ -12068,0 +12127,1 @@\n+    assert( ((intptr_t)(__ pc()) & 0x3c) != 0x3c, \"Bad alignment for prefixed instruction at \" INTPTR_FORMAT, (intptr_t)(__ pc()));\n@@ -12074,0 +12134,1 @@\n+  ins_alignment(4);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":81,"deletions":20,"binary":false,"changes":101,"status":"modified"}]}