{"files":[{"patch":"@@ -890,4 +890,3 @@\n-  \/\/ Try to convert (c ? 1 : 0) ^ 1 into !c ? 1 : 0. This pattern can occur after expansion of Conv2B nodes.\n-  if (in1->Opcode() == Op_CMoveI && phase->type(in2) == TypeInt::ONE) {\n-    \/\/ Ensure the inputs to the cmove are constants 1 or 0\n-    if (phase->type(in1) == TypeInt::BOOL && in1->in(2)->is_Con() && in1->in(3)->is_Con()) {\n+  \/\/ Propagate xor through constant cmoves. This pattern can occur after expansion of Conv2B nodes.\n+  if (in1->Opcode() == Op_CMoveI && in2->is_Con()) {\n+    if (in1->in(2)->is_Con() && in1->in(3)->is_Con()) {\n@@ -895,0 +894,5 @@\n+\n+      int in2_val = phase->type(in2)->is_int()->get_con();\n+      int l_val = phase->type(in1->in(2))->is_int()->get_con();\n+      int r_val = phase->type(in1->in(3))->is_int()->get_con();\n+\n@@ -897,1 +901,1 @@\n-        return new CMoveINode(phase->transform(in1->in(1)->as_Bool()->negate(phase)), in1->in(2), in1->in(3),TypeInt::BOOL);\n+        return new CMoveINode(in1->in(1), phase->intcon(l_val ^ in2_val), phase->intcon(r_val ^ in2_val), TypeInt::INT);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1528,1 +1528,1 @@\n-  if (phase->C->post_loop_opts_phase()) {\n+  if (phase->C->post_loop_opts_phase() && !Matcher::match_rule_supported(Op_Conv2B)) {\n@@ -1574,3 +1574,4 @@\n-  Node *n = new Conv2BNode(cmp->in(1));\n-  if( flipped )\n-  n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  Node* n = new Conv2BNode(cmp->in(1));\n+  if (flipped) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-#include \"opto\/movenode.hpp\"\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"opto\/matcher.hpp\"\n@@ -211,1 +212,1 @@\n-  if (phase->C->post_loop_opts_phase()) {\n+  if (phase->C->post_loop_opts_phase() && !Matcher::match_rule_supported(Op_Conv2B)) {\n@@ -246,3 +247,4 @@\n-  Node *n = new Conv2BNode( cmp->in(1) );\n-  if( flip )\n-  n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  Node* n = new Conv2BNode(cmp->in(1));\n+  if (flip) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}