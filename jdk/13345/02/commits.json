[{"commit":{"message":"Remove Conv2B from backend as it's macro expanded now"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad"},{"filename":"src\/hotspot\/cpu\/s390\/s390.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_32.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestConv2BExpansion.java"}],"sha":"59a68a107533c214300847d5ea064e7b2f817fb3"},{"commit":{"message":"Re-work transform to happen in macro expansion"},"files":[{"filename":"src\/hotspot\/share\/opto\/cfgnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/convertnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/macro.cpp"},{"filename":"src\/hotspot\/share\/opto\/movenode.cpp"}],"sha":"ee468b9edeceacd03611d601e2aeca5ffaa35c03"},{"commit":{"message":"Fix whitespace and add bug tag to IR test"},"files":[],"sha":"1f7878d09ef87637ec921882930a859e709f8434"},{"commit":{"message":"Merge branch 'master' into conv2b-x86-lowering"},"files":[],"sha":"96b8fa21287a21114631a45e92dc5db74c5baadd"},{"commit":{"message":"Merge branch 'master' into conv2b-x86-lowering"},"files":[],"sha":"bcffd319a9510f2c067f0be75c60ba802e7e51ec"},{"commit":{"message":"Merge branch 'master' into conv2b-x86-lowering"},"files":[],"sha":"9d548c5376e7639efa9508ae9732621d6c48c994"},{"commit":{"message":"Merge branch 'master' into conv2b-x86-lowering"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"}],"sha":"ffe5f745fd95ddd3be1fa36d84443ee14ac2b747"},{"commit":{"message":"Add flipped versions of Conv2B rules to decrease generated code complexity\n\n- Also remove unneeded Assembler::set_byte_if_not_zero, as it was duplicated with Assembler::setne. The function is only called from 64-bit code, so it is identical in execution with setne."},"files":[{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/Conv2BRules.java"}],"sha":"dbb4557d81d7870c5babf01bae828a8c3f3911e5"}]