{"files":[{"patch":"@@ -12400,4 +12400,0 @@\n-void Assembler::set_byte_if_not_zero(Register dst) {\n-  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | dst->encoding()));\n-}\n-\n@@ -12408,5 +12404,0 @@\n-void Assembler::set_byte_if_not_zero(Register dst) {\n-  int enc = prefix_and_encode(dst->encoding(), true);\n-  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | enc));\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2243,2 +2243,0 @@\n-  void set_byte_if_not_zero(Register dst); \/\/ sets reg to 1 if not zero, otherwise 0\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2837,1 +2837,1 @@\n-    __ set_byte_if_not_zero(dest);\n+    __ setne(dest);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10639,0 +10639,19 @@\n+\/\/ Convert Int to Boolean\n+instruct convI2B_Flip(rRegI dst, rRegI src, immI_1 one, rFlagsReg cr)\n+%{\n+  match(Set dst (XorI (Conv2B src) one));\n+  effect(KILL cr);\n+  ins_cost(125);\n+\n+  format %{ \"testl   $src, $src\\t# ci2b\\n\\t\"\n+            \"sete    $dst\\n\\t\"\n+            \"movzbl  $dst, $dst\" %}\n+\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+    __ sete($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow); \/\/ XXX\n+%}\n+\n@@ -10644,0 +10663,1 @@\n+  ins_cost(150);\n@@ -10650,1 +10670,20 @@\n-    __ set_byte_if_not_zero($dst$$Register);\n+    __ setne($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow); \/\/ XXX\n+%}\n+\n+\/\/ Convert Pointer to Boolean\n+instruct convP2B_Flip(rRegI dst, rRegP src, immI_1 one, rFlagsReg cr)\n+%{\n+  match(Set dst (XorI (Conv2B src) one));\n+  effect(KILL cr);\n+  ins_cost(125);\n+\n+  format %{ \"testq   $src, $src\\t# cp2b\\n\\t\"\n+            \"sete    $dst\\n\\t\"\n+            \"movzbl  $dst, $dst\" %}\n+\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+    __ sete($dst$$Register);\n@@ -10661,0 +10700,1 @@\n+  ins_cost(150);\n@@ -10667,1 +10707,1 @@\n-    __ set_byte_if_not_zero($dst$$Register);\n+    __ setne($dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1529,0 +1529,6 @@\n+\n+  \/\/ If we're late in the optimization process, we may have already macro expanded Conv2B nodes\n+  if (phase->C->post_loop_opts_phase()) {\n+    return nullptr;\n+  }\n+\n@@ -1571,3 +1577,4 @@\n-  Node *n = new Conv2BNode(cmp->in(1));\n-  if( flipped )\n-    n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  Node* n = new Conv2BNode(Compile::current(), cmp->in(1));\n+  if (flipped) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,4 @@\n-  Conv2BNode( Node *i ) : Node(0,i) {}\n+  Conv2BNode(Compile* C, Node* i) : Node(nullptr, i) {\n+    init_flags(Flag_is_macro);\n+    C->add_macro_node(this);\n+  }\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4002,1 +4002,1 @@\n-  Node *bol     = _gvn.transform(new Conv2BNode(opq));\n+  Node *bol     = _gvn.transform(new Conv2BNode(Compile::current(), opq));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-  Node* bol = new Conv2BNode(opq);\n+  Node* bol = new Conv2BNode(Compile::current(), opq);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-    Node *bol = new Conv2BNode(opq);\n+    Node *bol = new Conv2BNode(Compile::current(), opq);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"opto\/movenode.hpp\"\n@@ -2376,0 +2377,1 @@\n+               n->Opcode() == Op_Conv2B    ||\n@@ -2460,0 +2462,35 @@\n+      } else if (n->Opcode() == Op_Conv2B) {\n+        \/\/ Conv2B nodes convert an integer (or pointer) to a boolean through a '== 0' or '== null' check.\n+        \/\/ As this conversion is essentially a special case of a conditional move, it can be generalized before going to the backend.\n+\n+        \/\/ Conv2B nodes can be created with an xor of one, flipping the result. Try to detect that pattern.\n+        Node* flip_xor = nullptr;\n+        if (n->outcnt() == 1) {\n+          Node* n_out = n->unique_out();\n+          if (n_out->Opcode() == Op_XorI && _igvn.type(n_out->in(2)) == TypeInt::ONE) {\n+            flip_xor = n_out;\n+          }\n+        }\n+\n+        \/\/ Get the type of comparison to make\n+        const Type* t = _igvn.type(n->in(1));\n+        Node* cmp = nullptr;\n+        if (t->isa_int()) {\n+          cmp = _igvn.transform(new CmpINode(n->in(1), _igvn.intcon(0)));\n+        } else if (t->isa_ptr()) {\n+          cmp = _igvn.transform(new CmpPNode(n->in(1), _igvn.zerocon(BasicType::T_OBJECT)));\n+        } else {\n+          assert(false, \"Unrecognized comparison for Conv2B: %s\", NodeClassNames[n->in(1)->Opcode()]);\n+        }\n+\n+        Node* bol = _igvn.transform(new BoolNode(cmp, flip_xor == nullptr ? BoolTest::eq : BoolTest::ne));\n+        Node* cmov = _igvn.transform(new CMoveINode(bol, _igvn.intcon(1), _igvn.intcon(0), TypeInt::BOOL));\n+        \/\/ If the xor is found then replace it with the cmov, subsuming its outputs. If not, replace the Conv2B node.\n+        _igvn.replace_node(flip_xor == nullptr ? n : flip_xor, cmov);\n+\n+        \/\/ If the xor was subsumed, the Conv2B node needs to be removed as it's now dead.\n+        if (flip_xor != nullptr) {\n+          _igvn.remove_dead_node(n);\n+          C->remove_macro_node(n);\n+        }\n+        success = true;\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -210,0 +210,5 @@\n+  \/\/ If we're late in the optimization process, we may have already macro expanded Conv2B nodes\n+  if (phase->C->post_loop_opts_phase()) {\n+    return nullptr;\n+  }\n+\n@@ -240,4 +245,8 @@\n-  if (PrintOpto) { tty->print_cr(\"CMOV to I2B\"); }\n-  Node *n = new Conv2BNode( cmp->in(1) );\n-  if( flip )\n-  n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  if (PrintOpto) {\n+    tty->print_cr(\"CMOV to I2B\");\n+  }\n+\n+  Node* n = new Conv2BNode(Compile::current(), cmp->in(1));\n+  if (flip) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests.x86;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @summary Test that Conv2B nodes are matched into the correct mach nodes on x86_64.\n+ * @bug 8051725\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @requires os.arch == \"x86_64\" | os.arch == \"amd64\"\n+ * @run driver compiler.c2.irTests.x86.TestConv2BMatches\n+ *\/\n+public class TestConv2BMatches {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n+    public boolean testIntEquals0(int x) {\n+        return x == 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n+    public boolean testIntNotEquals0(int x) {\n+        return x != 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n+    public boolean testObjEqualsNull(Object o) {\n+        return o == null;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n+    public boolean testObjNotEqualsNull(Object o) {\n+        return o != null;\n+    }\n+\n+    @Run(test = {\"testIntEquals0\", \"testIntNotEquals0\"})\n+    public void runTestInts() {\n+        assertResult(0);\n+        assertResult(1);\n+    }\n+\n+    @Run(test = {\"testObjEqualsNull\", \"testObjNotEqualsNull\"})\n+    public void runTestObjs() {\n+        assertResult(new Object());\n+        assertResult(null);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int x) {\n+        Asserts.assertEQ(x == 0, testIntEquals0(x));\n+        Asserts.assertEQ(x != 0, testIntNotEquals0(x));\n+    }\n+\n+    @DontCompile\n+    public void assertResult(Object o) {\n+        Asserts.assertEQ(o == null, testObjEqualsNull(o));\n+        Asserts.assertEQ(o != null, testObjNotEqualsNull(o));\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/x86\/TestConv2BMatches.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -1421,0 +1421,7 @@\n+    \/\/ x86 specific\n+\n+    public static final String CMOVEI_01_X86 = PREFIX + \"CMOVEI_01_X86\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(CMOVEI_01_X86, \"cmovI_imm_01\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler.x86;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Measurement(iterations = 4, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 3, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class Conv2BRules {\n+    @Benchmark\n+    public void testNotEquals0(Blackhole blackhole, BenchState state) {\n+        for (int i = 0; i < 128; i++) {\n+            int j = state.ints[i];\n+            blackhole.consume(j != 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testEquals0(Blackhole blackhole, BenchState state) {\n+        for (int i = 0; i < 128; i++) {\n+            int j = state.ints[i];\n+            blackhole.consume(j == 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testEquals1(Blackhole blackhole, BenchState state) {\n+        for (int i = 0; i < 128; i++) {\n+            int j = state.ints[i];\n+            blackhole.consume(j == 1);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testNotEqualsNull(Blackhole blackhole, BenchState state) {\n+        for (int i = 0; i < 128; i++) {\n+            Object o = state.objs[i];\n+            blackhole.consume(o != null);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testEqualsNull(Blackhole blackhole, BenchState state) {\n+        for (int i = 0; i < 128; i++) {\n+            Object o = state.objs[i];\n+            blackhole.consume(o == null);\n+        }\n+    }\n+\n+    @State(Scope.Benchmark)\n+    public static class BenchState {\n+        int[] ints;\n+        Object[] objs;\n+\n+        public BenchState() {\n+\n+        }\n+\n+        @Setup(Level.Iteration)\n+        public void setup() {\n+            Random random = new Random(1000);\n+            ints = new int[128];\n+            objs = new Object[128];\n+            for (int i = 0; i < 128; i++) {\n+                ints[i] = random.nextInt(3);\n+                objs[i] = random.nextInt(3) == 0 ? null : new Object();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/Conv2BRules.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}