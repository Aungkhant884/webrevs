{"files":[{"patch":"@@ -1529,0 +1529,6 @@\n+\n+  \/\/ If we're late in the optimization process, we may have already macro expanded Conv2B nodes\n+  if (phase->C->post_loop_opts_phase()) {\n+    return nullptr;\n+  }\n+\n@@ -1571,3 +1577,4 @@\n-  Node *n = new Conv2BNode(cmp->in(1));\n-  if( flipped )\n-    n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  Node* n = new Conv2BNode(Compile::current(), cmp->in(1));\n+  if (flipped) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,4 @@\n-  Conv2BNode( Node *i ) : Node(0,i) {}\n+  Conv2BNode(Compile* C, Node* i) : Node(nullptr, i) {\n+    init_flags(Flag_is_macro);\n+    C->add_macro_node(this);\n+  }\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4002,1 +4002,1 @@\n-  Node *bol     = _gvn.transform(new Conv2BNode(opq));\n+  Node *bol     = _gvn.transform(new Conv2BNode(Compile::current(), opq));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-  Node* bol = new Conv2BNode(opq);\n+  Node* bol = new Conv2BNode(Compile::current(), opq);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-    Node *bol = new Conv2BNode(opq);\n+    Node *bol = new Conv2BNode(Compile::current(), opq);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"opto\/movenode.hpp\"\n@@ -2376,0 +2377,1 @@\n+               n->Opcode() == Op_Conv2B    ||\n@@ -2460,0 +2462,35 @@\n+      } else if (n->Opcode() == Op_Conv2B) {\n+        \/\/ Conv2B nodes convert an integer (or pointer) to a boolean through a '== 0' or '== null' check.\n+        \/\/ As this conversion is essentially a special case of a conditional move, it can be generalized before going to the backend.\n+\n+        \/\/ Conv2B nodes can be created with an xor of one, flipping the result. Try to detect that pattern.\n+        Node* flip_xor = nullptr;\n+        if (n->outcnt() == 1) {\n+          Node* n_out = n->unique_out();\n+          if (n_out->Opcode() == Op_XorI && _igvn.type(n_out->in(2)) == TypeInt::ONE) {\n+            flip_xor = n_out;\n+          }\n+        }\n+\n+        \/\/ Get the type of comparison to make\n+        const Type* t = _igvn.type(n->in(1));\n+        Node* cmp = nullptr;\n+        if (t->isa_int()) {\n+          cmp = _igvn.transform(new CmpINode(n->in(1), _igvn.intcon(0)));\n+        } else if (t->isa_ptr()) {\n+          cmp = _igvn.transform(new CmpPNode(n->in(1), _igvn.zerocon(BasicType::T_OBJECT)));\n+        } else {\n+          assert(false, \"Unrecognized comparison for Conv2B: %s\", NodeClassNames[n->in(1)->Opcode()]);\n+        }\n+\n+        Node* bol = _igvn.transform(new BoolNode(cmp, flip_xor == nullptr ? BoolTest::eq : BoolTest::ne));\n+        Node* cmov = _igvn.transform(new CMoveINode(bol, _igvn.intcon(1), _igvn.intcon(0), TypeInt::BOOL));\n+        \/\/ If the xor is found then replace it with the cmov, subsuming its outputs. If not, replace the Conv2B node.\n+        _igvn.replace_node(flip_xor == nullptr ? n : flip_xor, cmov);\n+\n+        \/\/ If the xor was subsumed, the Conv2B node needs to be removed as it's now dead.\n+        if (flip_xor != nullptr) {\n+          _igvn.remove_dead_node(n);\n+          C->remove_macro_node(n);\n+        }\n+        success = true;\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -210,0 +210,5 @@\n+  \/\/ If we're late in the optimization process, we may have already macro expanded Conv2B nodes\n+  if (phase->C->post_loop_opts_phase()) {\n+    return nullptr;\n+  }\n+\n@@ -240,4 +245,8 @@\n-  if (PrintOpto) { tty->print_cr(\"CMOV to I2B\"); }\n-  Node *n = new Conv2BNode( cmp->in(1) );\n-  if( flip )\n-  n = new XorINode( phase->transform(n), phase->intcon(1) );\n+  if (PrintOpto) {\n+    tty->print_cr(\"CMOV to I2B\");\n+  }\n+\n+  Node* n = new Conv2BNode(Compile::current(), cmp->in(1));\n+  if (flip) {\n+    n = new XorINode(phase->transform(n), phase->intcon(1));\n+  }\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    @IR(counts = {IRNode.CONVI2B_FLIP_X86, \"1\"})\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n@@ -52,1 +52,1 @@\n-    @IR(counts = {IRNode.CONVI2B_X86, \"1\"})\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n@@ -58,1 +58,1 @@\n-    @IR(counts = {IRNode.CONVP2B_FLIP_X86, \"1\"})\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n@@ -64,1 +64,1 @@\n-    @IR(counts = {IRNode.CONVP2B_X86, \"1\"})\n+    @IR(counts = {IRNode.CMOVEI_01_X86, \"1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/x86\/TestConv2BMatches.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1423,1 +1423,1 @@\n-    public static final String CONVI2B_X86 = PREFIX + \"CONVI2B_X86\" + POSTFIX;\n+    public static final String CMOVEI_01_X86 = PREFIX + \"CMOVEI_01_X86\" + POSTFIX;\n@@ -1425,16 +1425,1 @@\n-        machOnlyNameRegex(CONVI2B_X86, \"convI2B\");\n-    }\n-\n-    public static final String CONVI2B_FLIP_X86 = PREFIX + \"CONVI2B_FLIP_X86\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(CONVI2B_FLIP_X86, \"convI2B_Flip\");\n-    }\n-\n-    public static final String CONVP2B_X86 = PREFIX + \"CONVP2B_X86\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(CONVP2B_X86, \"convP2B\");\n-    }\n-\n-    public static final String CONVP2B_FLIP_X86 = PREFIX + \"CONVP2B_FLIP_X86\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(CONVP2B_FLIP_X86, \"convP2B_Flip\");\n+        machOnlyNameRegex(CMOVEI_01_X86, \"cmovI_imm_01\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"}]}