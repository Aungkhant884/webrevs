{"files":[{"patch":"@@ -5880,15 +5880,0 @@\n-void Assembler::sete(Register dst) {\n-  int encode = prefix_and_encode(dst->encoding(), true);\n-  emit_int24(0x0F, (unsigned char)0x94, (0xC0 | encode));\n-}\n-\n-void Assembler::setl(Register dst) {\n-  int encode = prefix_and_encode(dst->encoding(), true);\n-  emit_int24(0x0F, (unsigned char)0x9C, (0xC0 | encode));\n-}\n-\n-void Assembler::setne(Register dst) {\n-  int encode = prefix_and_encode(dst->encoding(), true);\n-  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | encode));\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2092,4 +2092,0 @@\n-  void sete(Register dst);\n-  void setl(Register dst);\n-  void setne(Register dst);\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2837,1 +2837,1 @@\n-    __ setne(dest);\n+    __ setb(Assembler::notZero, dest);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8096,1 +8096,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -8119,1 +8119,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -8141,1 +8141,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -8163,1 +8163,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -8185,1 +8185,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -8206,1 +8206,1 @@\n-    __ sete($res$$Register);\n+    __ setb(Assembler::equal, $res$$Register);\n@@ -10641,1 +10641,1 @@\n-    __ setl($dst$$Register);\n+    __ setb(Assembler::less, $dst$$Register);\n@@ -12775,1 +12775,1 @@\n-    __ setne($dst$$Register);\n+    __ setb(Assembler::notZero, $dst$$Register);\n@@ -12801,1 +12801,1 @@\n-    __ setne($dst$$Register);\n+    __ setb(Assembler::notZero, $dst$$Register);\n@@ -12827,1 +12827,1 @@\n-    __ setne($dst$$Register);\n+    __ setb(Assembler::notZero, $dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -892,2 +892,2 @@\n-    if (in1->in(2)->is_Con() && in1->in(3)->is_Con()) {\n-      int cmp_op = in1->in(1)->in(1)->Opcode();\n+    if (in1->in(CMoveNode::IfFalse)->is_Con() && in1->in(CMoveNode::IfTrue)->is_Con() && in1->in(CMoveNode::Condition)->is_Bool()) {\n+      int cmp_op = in1->in(CMoveNode::Condition)->in(1)->Opcode();\n@@ -896,2 +896,2 @@\n-      int l_val = phase->type(in1->in(2))->is_int()->get_con();\n-      int r_val = phase->type(in1->in(3))->is_int()->get_con();\n+      int l_val = phase->type(in1->in(CMoveNode::IfFalse))->is_int()->get_con();\n+      int r_val = phase->type(in1->in(CMoveNode::IfTrue))->is_int()->get_con();\n@@ -900,2 +900,1 @@\n-        \/\/ Flip the sense of comparison in the bool and return a new cmove\n-        return new CMoveINode(in1->in(1), phase->intcon(l_val ^ in2_val), phase->intcon(r_val ^ in2_val), TypeInt::INT);\n+        return new CMoveINode(in1->in(CMoveNode::Condition), phase->intcon(l_val ^ in2_val), phase->intcon(r_val ^ in2_val), TypeInt::INT);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}