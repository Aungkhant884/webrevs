{"files":[{"patch":"@@ -362,1 +362,1 @@\n-JavaFrameAnchor* EntryBlob::jfa_for_frame(const frame& frame) const {\n+JavaFrameAnchor* OptimizedEntryBlob::jfa_for_frame(const frame& frame) const {\n@@ -367,1 +367,1 @@\n-frame frame::sender_for_panama_entry_frame(RegisterMap* map) const {\n+frame frame::sender_for_optimized_entry_frame(RegisterMap* map) const {\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    } else if (is_panama_entry_frame()) {\n+    } else if (is_optimized_entry_frame()) {\n@@ -356,1 +356,1 @@\n-JavaFrameAnchor* EntryBlob::jfa_for_frame(const frame& frame) const {\n+JavaFrameAnchor* OptimizedEntryBlob::jfa_for_frame(const frame& frame) const {\n@@ -361,1 +361,1 @@\n-frame frame::sender_for_panama_entry_frame(RegisterMap* map) const {\n+frame frame::sender_for_optimized_entry_frame(RegisterMap* map) const {\n@@ -363,1 +363,1 @@\n-  EntryBlob* blob = _cb->as_entry_blob();\n+  OptimizedEntryBlob* blob = _cb->as_entry_blob();\n@@ -512,1 +512,1 @@\n-  if (is_panama_entry_frame()) return sender_for_panama_entry_frame(map);\n+  if (is_optimized_entry_frame()) return sender_for_optimized_entry_frame(map);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-  LogTarget(Trace, panama) lt;\n+  LogTarget(Trace, foreign) lt;\n@@ -807,1 +807,1 @@\n-  ss.print(\"panama_upcall_stub_%s\", entry->signature()->as_C_string());\n+  ss.print(\"optimized_upcall_stub_%s\", entry->signature()->as_C_string());\n@@ -810,1 +810,1 @@\n-  const char* name = \"panama_upcall_stub\";\n+  const char* name = \"optimized_upcall_stub\";\n@@ -813,1 +813,1 @@\n-  EntryBlob* blob = EntryBlob::create(name, &buffer, exception_handler_offset, receiver, jfa_offset);\n+  OptimizedEntryBlob* blob = OptimizedEntryBlob::create(name, &buffer, exception_handler_offset, receiver, jfa_offset);\n@@ -815,1 +815,1 @@\n-  if (TracePanamaUpcallStubs) {\n+  if (TraceOptimizedUpcallStubs) {\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  \/* Panama Support *\/                                                                                          \\\n+  \/* Foreign API Support *\/                                                                                          \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -713,1 +713,1 @@\n-\/\/ Implementation of EntryBlob\n+\/\/ Implementation of OptimizedEntryBlob\n@@ -715,1 +715,1 @@\n-EntryBlob::EntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n+OptimizedEntryBlob::OptimizedEntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n@@ -724,1 +724,1 @@\n-EntryBlob* EntryBlob::create(const char* name, CodeBuffer* cb, intptr_t exception_handler_offset,\n+OptimizedEntryBlob* OptimizedEntryBlob::create(const char* name, CodeBuffer* cb, intptr_t exception_handler_offset,\n@@ -728,2 +728,2 @@\n-  EntryBlob* blob = nullptr;\n-  unsigned int size = CodeBlob::allocation_size(cb, sizeof(EntryBlob));\n+  OptimizedEntryBlob* blob = nullptr;\n+  unsigned int size = CodeBlob::allocation_size(cb, sizeof(OptimizedEntryBlob));\n@@ -732,1 +732,1 @@\n-    blob = new (size) EntryBlob(name, size, cb, exception_handler_offset, receiver, jfa_sp_offset);\n+    blob = new (size) OptimizedEntryBlob(name, size, cb, exception_handler_offset, receiver, jfa_sp_offset);\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-\/\/    EntryBlob          : Used for upcalls from native code\n+\/\/    OptimizedEntryBlob          : Used for upcalls from native code\n@@ -79,1 +79,1 @@\n-class EntryBlob; \/\/ for as_entry_blob()\n+class OptimizedEntryBlob; \/\/ for as_entry_blob()\n@@ -156,1 +156,1 @@\n-  EntryBlob* as_entry_blob() const             { assert(is_entry_blob(), \"must be entry blob\"); return (EntryBlob*) this; }\n+  OptimizedEntryBlob* as_entry_blob() const             { assert(is_entry_blob(), \"must be entry blob\"); return (OptimizedEntryBlob*) this; }\n@@ -387,1 +387,1 @@\n-  friend class EntryBlob;\n+  friend class OptimizedEntryBlob;\n@@ -729,2 +729,2 @@\n-\/\/ For Panama upcall stubs\n-class EntryBlob: public BufferBlob {\n+\/\/ For optimized upcall stubs\n+class OptimizedEntryBlob: public BufferBlob {\n@@ -736,1 +736,1 @@\n-  EntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n+  OptimizedEntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n@@ -741,1 +741,1 @@\n-  static EntryBlob* create(const char* name, CodeBuffer* cb,\n+  static OptimizedEntryBlob* create(const char* name, CodeBuffer* cb,\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  DEBUG_ONLY(LOG_TAG(foreign)) \\\n@@ -134,1 +135,0 @@\n-  DEBUG_ONLY(LOG_TAG(panama)) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -882,1 +882,1 @@\n-      \/\/ We use the c reg save policy here since Panama\n+      \/\/ We use the c reg save policy here since Foreign Linker\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-JVM_ENTRY(jlong, PUH_AllocateOptimzedUpcallStub(JNIEnv *env, jclass unused, jobject mh, jobject abi, jobject conv))\n+JVM_ENTRY(jlong, PUH_AllocateOptimizedUpcallStub(JNIEnv *env, jclass unused, jobject mh, jobject abi, jobject conv))\n@@ -137,1 +137,1 @@\n-JVM_ENTRY(jboolean, PUH_SupportsOptimzedUpcalls(JNIEnv *env, jclass unused))\n+JVM_ENTRY(jboolean, PUH_SupportsOptimizedUpcalls(JNIEnv *env, jclass unused))\n@@ -146,2 +146,2 @@\n-  {CC \"allocateOptimizedUpcallStub\", CC \"(\" \"Ljava\/lang\/invoke\/MethodHandle;\" \"L\" FOREIGN_ABI \"ABIDescriptor;\" \"L\" FOREIGN_ABI \"ProgrammableUpcallHandler$CallRegs;\" \")J\", FN_PTR(PUH_AllocateOptimzedUpcallStub)},\n-  {CC \"supportsOptimizedUpcalls\", CC \"()Z\", FN_PTR(PUH_SupportsOptimzedUpcalls)},\n+  {CC \"allocateOptimizedUpcallStub\", CC \"(\" \"Ljava\/lang\/invoke\/MethodHandle;\" \"L\" FOREIGN_ABI \"ABIDescriptor;\" \"L\" FOREIGN_ABI \"ProgrammableUpcallHandler$CallRegs;\" \")J\", FN_PTR(PUH_AllocateOptimizedUpcallStub)},\n+  {CC \"supportsOptimizedUpcalls\", CC \"()Z\", FN_PTR(PUH_SupportsOptimizedUpcalls)},\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    handle = ((EntryBlob*)cb)->receiver();\n+    handle = ((OptimizedEntryBlob*)cb)->receiver();\n","filename":"src\/hotspot\/share\/prims\/upcallStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-  \/\/ Unsafe to use the is_deoptimzed tester after changing pc\n+  \/\/ Unsafe to use the is_deOptimized tester after changing pc\n@@ -1070,1 +1070,1 @@\n-  } else if (is_panama_entry_frame()) {\n+  } else if (is_optimized_entry_frame()) {\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  bool is_panama_entry_frame()         const;\n+  bool is_optimized_entry_frame()         const;\n@@ -176,1 +176,1 @@\n-  frame sender_for_panama_entry_frame(RegisterMap* map) const;\n+  frame sender_for_optimized_entry_frame(RegisterMap* map) const;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-inline bool frame::is_panama_entry_frame() const {\n+inline bool frame::is_optimized_entry_frame() const {\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2052,2 +2052,2 @@\n-  develop(bool, TracePanamaUpcallStubs, false,                              \\\n-                \"Trace Panama upcall stub generation\")                      \\\n+  develop(bool, TraceOptimizedUpcallStubs, false,                              \\\n+                \"Trace optimized upcall stub generation\")                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-    return ((EntryBlob*)blob)->exception_handler();\n+    return ((OptimizedEntryBlob*)blob)->exception_handler();\n@@ -1446,1 +1446,1 @@\n-  assert(!caller_frame.is_interpreted_frame() && !caller_frame.is_entry_frame() && !caller_frame.is_panama_entry_frame(), \"unexpected frame\");\n+  assert(!caller_frame.is_interpreted_frame() && !caller_frame.is_entry_frame() && !caller_frame.is_optimized_entry_frame(), \"unexpected frame\");\n@@ -1479,1 +1479,1 @@\n-      caller_frame.is_panama_entry_frame()) {\n+      caller_frame.is_optimized_entry_frame()) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}