{"files":[{"patch":"@@ -253,0 +253,11 @@\n+    \/**\n+     * Update this module to allow access to restricted methods.\n+     *\/\n+    Module addEnableNativeAccess() {\n+        enableNativeAccess = true;\n+        return this;\n+    }\n+\n+    \/**\n+     * Returns true if module m can access restricted methods.\n+     *\/\n@@ -430,5 +441,0 @@\n-    }\n-\n-    Module addEnableNativeAccess() {\n-        enableNativeAccess = true;\n-        return this;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -259,0 +259,10 @@\n+    \/**\n+     * Updates module m to allow access to restricted methods.\n+     *\/\n+    Module addEnableNativeAccess(Module m);\n+\n+    \/**\n+     * Returns true if module m can access restricted methods.\n+     *\/\n+    boolean isEnableNativeAccess(Module m);\n+\n@@ -381,4 +391,0 @@\n-\n-    Module addEnableNativeAccess(Module m);\n-\n-    boolean isEnableNativeAccess(Module m);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -271,2 +271,3 @@\n-        SharedSecrets.getJavaLangAccess()\n-                .addEnableNativeAccess(Modules.defineModule(null, base.descriptor(), baseUri));\n+\n+        Module baseModule = Modules.defineModule(null, base.descriptor(), baseUri);\n+        JLA.addEnableNativeAccess(baseModule);\n@@ -876,0 +877,3 @@\n+    \/**\n+     * Process the --enable-native-access option to grant access to restricted methods to selected modules.\n+     *\/\n@@ -879,1 +883,0 @@\n-        JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n@@ -883,1 +886,1 @@\n-                jla.addEnableNativeAccess(module.get());\n+                SharedSecrets.getJavaLangAccess().addEnableNativeAccess(module.get());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-     *     <li>one or more handles (see {@link #acquire()}) associated with this resource scope have not been closed<\/li>\n+     *     <li>one or more handles (see {@link #acquire()}) associated with this resource scope have not been {@link #release(Handle) released}<\/li>\n@@ -201,3 +201,2 @@\n-     * If this resource scope is explicit, this method acquires a new resource scope handle, associated with this\n-     * resource scope; an explicit resource scope cannot be {@link #close() closed}\n-     * until all the resource scope handles acquired from it have been {@link #release(Handle)} released}.\n+     * Acquires a resource scope handle associated with this resource scope. An explicit resource scope cannot be\n+     * {@link #close() closed} until all the resource scope handles acquired from it have been {@link #release(Handle)} released}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}