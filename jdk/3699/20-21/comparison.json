{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/stubRoutines.hpp\"\n@@ -421,0 +422,5 @@\n+#ifndef _WIN64\n+  \/\/ for mxcsr\n+  size += 8;\n+#endif\n+\n@@ -439,0 +445,2 @@\n+constexpr int MXCSR_MASK = 0xFFC0;  \/\/ Mask out any pending exceptions\n+\n@@ -443,1 +451,1 @@\n-  \/\/ 2. save mxcsr (?)\n+  \/\/ 2. save mxcsr on non-windows platforms\n@@ -470,1 +478,0 @@\n-  __ block_comment(\"} preserve_callee_saved_regs \");\n@@ -472,1 +479,16 @@\n-  \/\/ TODO mxcsr\n+#ifndef _WIN64\n+  {\n+    const Address mxcsr_save(rsp, offset);\n+    Label skip_ldmx;\n+    __ stmxcsr(mxcsr_save);\n+    __ movl(rax, mxcsr_save);\n+    __ andl(rax, MXCSR_MASK);    \/\/ Only check control and mask bits\n+    ExternalAddress mxcsr_std(StubRoutines::addr_mxcsr_std());\n+    __ cmp32(rax, mxcsr_std);\n+    __ jcc(Assembler::equal, skip_ldmx);\n+    __ ldmxcsr(mxcsr_std);\n+    __ bind(skip_ldmx);\n+  }\n+#endif\n+\n+  __ block_comment(\"} preserve_callee_saved_regs \");\n@@ -479,1 +501,1 @@\n-  \/\/ 2. restore mxcsr (?)\n+  \/\/ 2. restore mxcsr on non-windows platforms\n@@ -507,1 +529,4 @@\n-  __ block_comment(\"} restore_callee_saved_regs \");\n+#ifndef _WIN64\n+  const Address mxcsr_save(rsp, offset);\n+  __ ldmxcsr(mxcsr_save);\n+#endif\n@@ -509,1 +534,1 @@\n-  \/\/ TODO mxcsr\n+  __ block_comment(\"} restore_callee_saved_regs \");\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_64.cpp","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"}]}