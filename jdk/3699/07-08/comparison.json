{"files":[{"patch":"@@ -60,1 +60,0 @@\n-import jdk.internal.module.IllegalNativeAccessChecker;\n@@ -142,1 +141,1 @@\n-            addEnableNativeAccess();\n+            implAddEnableNativeAccess();\n@@ -256,1 +255,1 @@\n-    Module addEnableNativeAccess() {\n+    Module implAddEnableNativeAccess() {\n@@ -262,1 +261,1 @@\n-     * Returns true if module m can access restricted methods.\n+     * Update all unnamed modules to allow access to restricted methods.\n@@ -264,10 +263,3 @@\n-    boolean isEnableNativeAccess() {\n-        if (enableNativeAccess) {\n-            return true;\n-        }\n-\n-        \/\/ lazy init for unnamed modules\n-        if (!isNamed() && IllegalNativeAccessChecker.enableNativeAccessAllUnnamedModules()) {\n-            enableNativeAccess = true;\n-            return true;\n-        }\n+    static void implAddEnableNativeAccessAllUnnamed() {\n+        ALL_UNNAMED_MODULE.enableNativeAccess = true;\n+    }\n@@ -275,1 +267,7 @@\n-        return false;\n+    \/**\n+     * Returns true if module m can access restricted methods.\n+     *\/\n+    boolean implIsEnableNativeAccess() {\n+        return isNamed() ?\n+                enableNativeAccess :\n+                ALL_UNNAMED_MODULE.enableNativeAccess;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2274,1 +2274,4 @@\n-                return m.addEnableNativeAccess();\n+                return m.implAddEnableNativeAccess();\n+            }\n+            public void addEnableNativeAccessAllUnnamed() {\n+                Module.implAddEnableNativeAccessAllUnnamed();\n@@ -2277,1 +2280,1 @@\n-                return m.isEnableNativeAccess();\n+                return m.implIsEnableNativeAccess();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -264,0 +264,5 @@\n+    \/**\n+     * Updates all unnamed modules to allow access to restricted methods.\n+     *\/\n+    void addEnableNativeAccessAllUnnamed();\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-package jdk.internal.module;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-public final class IllegalNativeAccessChecker {\n-\n-    private final Collection<String> allowedModuleNames;\n-    private final boolean allowAllUnnamedModules;\n-\n-    private IllegalNativeAccessChecker(Set<String> allowedModuleNames, boolean allowAllUnnamedModules) {\n-        this.allowedModuleNames = allowedModuleNames;\n-        this.allowAllUnnamedModules = allowAllUnnamedModules;\n-    }\n-\n-    \/\/ system-wide IllegalNativeAccessChecker\n-    private static IllegalNativeAccessChecker checker;\n-\n-    static Collection<String> enableNativeAccessModules() {\n-        return checker().allowedModuleNames;\n-    }\n-\n-    public static boolean enableNativeAccessAllUnnamedModules() {\n-        return checker().allowAllUnnamedModules;\n-    }\n-\n-    \/**\n-     * This method is invoked during module bootstrap; we can assume only one thread gets here.\n-     *\/\n-    private static IllegalNativeAccessChecker checker() {\n-        if (checker == null) {\n-            Set<String> allowedModuleNames = new HashSet<>();\n-            boolean allowAllUnnamedModules = false;\n-            for (String str : decode()) {\n-                if (str.equals(\"ALL-UNNAMED\")) {\n-                    allowAllUnnamedModules = true;\n-                } else {\n-                    allowedModuleNames.add(str);\n-                }\n-            }\n-            checker = new IllegalNativeAccessChecker(allowedModuleNames, allowAllUnnamedModules);\n-        }\n-        return checker;\n-    }\n-\n-    \/**\n-     * Returns the set of module names specified by --enable-native-access options.\n-     *\/\n-    private static Set<String> decode() {\n-        String prefix = \"jdk.module.enable.native.access.\";\n-        int index = 0;\n-        \/\/ the system property is removed after decoding\n-        String value = getAndRemoveProperty(prefix + index);\n-        Set<String> modules = new HashSet<>();\n-        if (value == null) {\n-            return modules;\n-        }\n-        while (value != null) {\n-            for (String s : value.split(\",\")) {\n-                if (!s.isEmpty())\n-                    modules.add(s);\n-            }\n-            index++;\n-            value = getAndRemoveProperty(prefix + index);\n-        }\n-        return modules;\n-    }\n-\n-    \/**\n-     * Gets and remove the named system property\n-     *\/\n-    private static String getAndRemoveProperty(String key) {\n-        return (String)System.getProperties().remove(key);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/IllegalNativeAccessChecker.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -881,6 +881,3 @@\n-        \/\/ add native modules explicitly provided on the command line\n-\n-        for (String name : IllegalNativeAccessChecker.enableNativeAccessModules()) {\n-            Optional<Module> module = layer.findModule(name);\n-            if (module.isPresent()) {\n-                SharedSecrets.getJavaLangAccess().addEnableNativeAccess(module.get());\n+        for (String name : decodeEnableNativeAccess()) {\n+            if (name.equals(\"ALL-UNNAMED\")) {\n+                JLA.addEnableNativeAccessAllUnnamed();\n@@ -888,2 +885,26 @@\n-                \/\/ silently skip.\n-                \/\/ warnUnknownModule(ENABLE_NATIVE_ACCESS, name);\n+                Optional<Module> module = layer.findModule(name);\n+                if (module.isPresent()) {\n+                    JLA.addEnableNativeAccess(module.get());\n+                } else {\n+                    warnUnknownModule(ENABLE_NATIVE_ACCESS, name);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Returns the set of module names specified by --enable-native-access options.\n+     *\/\n+    private static Set<String> decodeEnableNativeAccess() {\n+        String prefix = \"jdk.module.enable.native.access.\";\n+        int index = 0;\n+        \/\/ the system property is removed after decoding\n+        String value = getAndRemoveProperty(prefix + index);\n+        Set<String> modules = new HashSet<>();\n+        if (value == null) {\n+            return modules;\n+        }\n+        while (value != null) {\n+            for (String s : value.split(\",\")) {\n+                if (!s.isEmpty())\n+                    modules.add(s);\n@@ -891,0 +912,2 @@\n+            index++;\n+            value = getAndRemoveProperty(prefix + index);\n@@ -892,0 +915,1 @@\n+        return modules;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"}]}