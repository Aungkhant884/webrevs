{"files":[{"patch":"@@ -156,0 +156,1 @@\n+    @CallerSensitive\n@@ -182,0 +183,1 @@\n+    @CallerSensitive\n@@ -209,0 +211,1 @@\n+    @CallerSensitive\n@@ -234,0 +237,1 @@\n+    @CallerSensitive\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+    @CallerSensitive\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+\n@@ -140,0 +142,1 @@\n+    @CallerSensitive\n@@ -174,0 +177,1 @@\n+    @CallerSensitive\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @build invoker_module\/* lookup_module\/*\n+ * @run testng\/othervm --enable-native-access=invoker_module\n+                       lookup_module\/handle.lookup.MethodHandleLookup\n+ *\/\n","filename":"test\/jdk\/java\/foreign\/handles\/Driver.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package handle.invoker;\n+\n+import jdk.incubator.foreign.Addressable;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.LibraryLookup;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemoryLayouts;\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SegmentAllocator;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class MethodHandleInvoker {\n+    public void call(MethodHandle methodHandle) throws Throwable {\n+        try {\n+            Object[] args = makeArgs(methodHandle.type());\n+            methodHandle.invokeWithArguments(args);\n+            throw new AssertionError(\"Call to restricted method did not fail as expected!\");\n+        } catch (IllegalCallerException ex) {\n+            if (!ex.getMessage().contains(\"lookup_module\")) {\n+                throw new AssertionError(\"Caller module is not lookup_module!\");\n+            }\n+        } catch (Throwable ex) {\n+            throw new AssertionError(\"Call to restricted method did not fail as expected!\");\n+        }\n+    }\n+\n+    static final Map<Class<?>, Object> DEFAULT_VALUES = new HashMap<>();\n+\n+    static <Z> void addDefaultMapping(Class<Z> carrier, Z value) {\n+        DEFAULT_VALUES.put(carrier, value);\n+    }\n+\n+    static {\n+        addDefaultMapping(CLinker.class, CLinker.getInstance());\n+        addDefaultMapping(long.class, 0L);\n+        addDefaultMapping(Path.class, Path.of(\"nonExistent\"));\n+        addDefaultMapping(String.class, \"Hello!\");\n+        addDefaultMapping(Runnable.class, () -> {});\n+        addDefaultMapping(MethodHandle.class, MethodHandles.identity(int.class));\n+        addDefaultMapping(Charset.class, Charset.defaultCharset());\n+        addDefaultMapping(MethodType.class, MethodType.methodType(void.class));\n+        addDefaultMapping(MemoryAddress.class, MemoryAddress.NULL);\n+        addDefaultMapping(Addressable.class, MemoryAddress.NULL);\n+        addDefaultMapping(MemoryLayout.class, MemoryLayouts.JAVA_INT);\n+        addDefaultMapping(FunctionDescriptor.class, FunctionDescriptor.ofVoid());\n+        addDefaultMapping(LibraryLookup.class, LibraryLookup.ofDefault());\n+        addDefaultMapping(ResourceScope.class, ResourceScope.newImplicitScope());\n+        addDefaultMapping(SegmentAllocator.class, (size, align) -> null);\n+    }\n+\n+    static Object[] makeArgs(MethodType type) {\n+        return type.parameterList().stream()\n+                .map(MethodHandleInvoker::makeArg)\n+                .toArray();\n+    }\n+\n+    static Object makeArg(Class<?> clazz) {\n+        Object value = DEFAULT_VALUES.get(clazz);\n+        if (value == null) {\n+            throw new UnsupportedOperationException(clazz.getName());\n+        }\n+        return value;\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/handles\/invoker_module\/handle\/invoker\/MethodHandleInvoker.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module invoker_module {\n+    requires jdk.incubator.foreign;\n+    exports handle.invoker;\n+}\n","filename":"test\/jdk\/java\/foreign\/handles\/invoker_module\/module-info.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package handle.lookup;\n+\n+import jdk.incubator.foreign.Addressable;\n+import jdk.incubator.foreign.CLinker;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.LibraryLookup;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SegmentAllocator;\n+\n+import org.testng.annotations.*;\n+\n+public class MethodHandleLookup {\n+\n+    @Test(dataProvider = \"restrictedMethods\")\n+    public void testRestrictedHandles(MethodHandle handle, String testName) throws Throwable {\n+        new handle.invoker.MethodHandleInvoker().call(handle);\n+    }\n+\n+    @DataProvider(name = \"restrictedMethods\")\n+    static Object[][] restrictedMethods() {\n+        try {\n+            return new Object[][]{\n+                    { MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\",\n+                            MethodType.methodType(CLinker.class)), \"CLinker::getInstance\" },\n+                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n+                            MethodType.methodType(MethodHandle.class, Addressable.class, MethodType.class, FunctionDescriptor.class)),\n+                            \"CLinker::downcallHandle\/1\" },\n+                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n+                            MethodType.methodType(MethodHandle.class, Addressable.class, SegmentAllocator.class, MethodType.class, FunctionDescriptor.class)),\n+                            \"CLinker::downcallHandle\/2\" },\n+                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n+                            MethodType.methodType(MethodHandle.class, MethodType.class, FunctionDescriptor.class)),\n+                            \"CLinker::downcallHandle\/3\" },\n+                    { MethodHandles.lookup().findVirtual(CLinker.class, \"upcallStub\",\n+                            MethodType.methodType(MemoryAddress.class, MethodHandle.class, FunctionDescriptor.class, ResourceScope.class)),\n+                            \"CLinker::upcallStub\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.class, \"toJavaString\",\n+                            MethodType.methodType(String.class, MemoryAddress.class)),\n+                            \"CLinker::toJavaString\/1\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.class, \"toJavaString\",\n+                            MethodType.methodType(String.class, MemoryAddress.class, Charset.class)),\n+                            \"CLinker::toJavaString\/2\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.class, \"allocateMemory\",\n+                            MethodType.methodType(MemoryAddress.class, long.class)),\n+                            \"CLinker::allocateMemory\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.class, \"freeMemory\",\n+                            MethodType.methodType(void.class, MemoryAddress.class)),\n+                            \"CLinker::freeMemory\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.VaList.class, \"ofAddress\",\n+                            MethodType.methodType(CLinker.VaList.class, MemoryAddress.class)),\n+                            \"VaList::ofAddress\/1\" },\n+                    { MethodHandles.lookup().findStatic(CLinker.VaList.class, \"ofAddress\",\n+                            MethodType.methodType(CLinker.VaList.class, MemoryAddress.class, ResourceScope.class)),\n+                            \"VaList::ofAddress\/2\" },\n+                    { MethodHandles.lookup().findStatic(LibraryLookup.class, \"ofPath\",\n+                            MethodType.methodType(LibraryLookup.class, Path.class)),\n+                            \"LibraryLookup::ofPath\" },\n+                    { MethodHandles.lookup().findStatic(LibraryLookup.class, \"ofLibrary\",\n+                            MethodType.methodType(LibraryLookup.class, String.class)),\n+                            \"LibraryLookup::ofLibrary\" },\n+                    { MethodHandles.lookup().findStatic(LibraryLookup.class, \"ofDefault\",\n+                            MethodType.methodType(LibraryLookup.class)),\n+                            \"LibraryLookup::ofDefault\" },\n+                    { MethodHandles.lookup().findVirtual(LibraryLookup.class, \"lookup\",\n+                            MethodType.methodType(Optional.class, String.class, MemoryLayout.class)),\n+                            \"LibraryLookup::lookup\" },\n+                    { MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegment\",\n+                            MethodType.methodType(MemorySegment.class, long.class, ResourceScope.class)),\n+                            \"MemoryAddress::asSegment\/1\" },\n+                    { MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegment\",\n+                            MethodType.methodType(MemorySegment.class, long.class, Runnable.class, ResourceScope.class)),\n+                            \"MemoryAddress::asSegment\/2\" },\n+                    { MethodHandles.lookup().findStatic(MemorySegment.class, \"globalNativeSegment\",\n+                            MethodType.methodType(MemorySegment.class)),\n+                            \"MemoryAddress::globalNativeSegment\" }\n+            };\n+        } catch (Throwable ex) {\n+            throw new ExceptionInInitializerError((ex));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+open module lookup_module {\n+    requires testng;\n+    requires jdk.incubator.foreign;\n+    requires invoker_module;\n+    exports handle.lookup;\n+}\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/module-info.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"}]}