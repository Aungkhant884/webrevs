{"files":[{"patch":"@@ -40,1 +40,1 @@\n-        this.allowedModuleNames = Collections.unmodifiableSet(allowedModuleNames);\n+        this.allowedModuleNames = allowedModuleNames;\n@@ -45,1 +45,1 @@\n-    private static volatile IllegalNativeAccessChecker checker;\n+    private static IllegalNativeAccessChecker checker;\n@@ -55,0 +55,3 @@\n+    \/**\n+     * This method is invoked during module bootstrap; we can assume only one thread gets here.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/IllegalNativeAccessChecker.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,0 +122,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -149,0 +152,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -172,0 +178,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -196,0 +205,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -218,0 +230,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -310,1 +325,1 @@\n-     * Converts a Java string into a null-terminated C string, using the given {@link java.nio.charset.Charset charset},\n+     * Converts a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},\n@@ -331,1 +346,1 @@\n-     * Converts a Java string into a null-terminated C string, using the given {@link java.nio.charset.Charset charset},\n+     * Converts a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},\n@@ -366,0 +381,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -375,1 +393,1 @@\n-     * Converts a null-terminated C string stored at given address into a Java string, using the given {@link java.nio.charset.Charset charset}.\n+     * Converts a null-terminated C string stored at given address into a Java string, using the given {@linkplain java.nio.charset.Charset charset}.\n@@ -391,0 +409,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -419,1 +440,1 @@\n-     * Converts a null-terminated C string stored at given address into a Java string, using the given {@link java.nio.charset.Charset charset}.\n+     * Converts a null-terminated C string stored at given address into a Java string, using the given {@linkplain java.nio.charset.Charset charset}.\n@@ -461,0 +482,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -482,0 +506,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -632,1 +659,1 @@\n-         * backed by the {@link ResourceScope#globalScope() global} resource scope.\n+         * backed by the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -641,0 +668,3 @@\n+         * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+         * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+         * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -662,0 +692,3 @@\n+         * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+         * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+         * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -673,1 +706,1 @@\n-         * {@link ResourceScope resource scope}.\n+         * {@linkplain ResourceScope resource scope}.\n@@ -676,1 +709,1 @@\n-         * {@link ResourceScope resource scope}, and will be released when the resource scope is {@link ResourceScope#close closed}.\n+         * {@linkplain ResourceScope resource scope}, and will be released when the resource scope is {@linkplain ResourceScope#close closed}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":40,"deletions":7,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * therefore preventing library unloading. For {@link #lookup(String, MemoryLayout) memory segments} obtained from a library lookup object,\n+ * therefore preventing library unloading. For {@linkplain #lookup(String, MemoryLayout) memory segments} obtained from a library lookup object,\n@@ -51,2 +51,2 @@\n- * For {@link #lookup(String) memory addresses} obtained from a library lookup object,\n- * since {@link CLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor) native method handles}\n+ * For {@linkplain #lookup(String) memory addresses} obtained from a library lookup object,\n+ * since {@linkplain CLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor) native method handles}\n@@ -88,1 +88,4 @@\n-     * {@link MemoryLayout#byteAlignment() alignment constraints} in {@code layout}.\n+     * {@linkplain MemoryLayout#byteAlignment() alignment constraints} in {@code layout}.\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -101,0 +104,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -124,0 +130,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -153,0 +162,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * A memory address is associated with a {@link ResourceScope resource scope}; the resource scope determines the\n+ * A memory address is associated with a {@linkplain ResourceScope resource scope}; the resource scope determines the\n@@ -45,2 +45,2 @@\n- * obtained from {@link #ofLong(long) numeric values}, or from native code, are associated with the\n- * {@link ResourceScope#globalScope() global resource scope}. Memory addresses obtained from segments\n+ * obtained from {@linkplain #ofLong(long) numeric values}, or from native code, are associated with the\n+ * {@linkplain ResourceScope#globalScope() global resource scope}. Memory addresses obtained from segments\n@@ -102,1 +102,1 @@\n-     * when {@code segment} models an heap memory region, while this address is a {@link #isNative() native} address.\n+     * when {@code segment} models an heap memory region, while this address is a {@linkplain #isNative() native} address.\n@@ -135,1 +135,4 @@\n-     * @throws UnsupportedOperationException if this address is not a {@link #isNative() native} address.\n+     * @throws UnsupportedOperationException if this address is not a {@linkplain #isNative() native} address.\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -166,1 +169,4 @@\n-     * @throws UnsupportedOperationException if this address is not a {@link #isNative() native} address.\n+     * @throws UnsupportedOperationException if this address is not a {@linkplain #isNative() native} address.\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -179,1 +185,1 @@\n-     * @throws UnsupportedOperationException if this memory address is not a {@link #isNative() native} address.\n+     * @throws UnsupportedOperationException if this memory address is not a {@linkplain #isNative() native} address.\n@@ -209,1 +215,1 @@\n-     * with the {@link ResourceScope#globalScope() global} resource scope.\n+     * with the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -215,1 +221,1 @@\n-     * with the {@link ResourceScope#globalScope() global} resource scope.\n+     * with the {@linkplain ResourceScope#globalScope() global} resource scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-     * Creates a method handle which, given a memory segment, returns a {@link MemorySegment#asSlice(long,long) slice}\n+     * Creates a method handle which, given a memory segment, returns a {@linkplain MemorySegment#asSlice(long,long) slice}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n- * Contents of mapped memory segments can be {@link #force() persisted} and {@link #load() loaded} to and from the underlying file;\n+ * Contents of mapped memory segments can be {@linkplain #force() persisted} and {@linkplain #load() loaded} to and from the underlying file;\n@@ -317,1 +317,1 @@\n-     * or if this is a {@link #isMapped() mapped} segment.\n+     * or if this is a {@linkplain #isMapped() mapped} segment.\n@@ -368,1 +368,1 @@\n-     * For example, this may occur if the same file is {@link MemorySegment#mapFile mapped} to two segments.\n+     * For example, this may occur if the same file is {@linkplain MemorySegment#mapFile mapped} to two segments.\n@@ -382,2 +382,2 @@\n-     * {@link #address() base address} of each segment and will be in the\n-     * range of 0 (inclusive) up to the {@link #byteSize() size} (in bytes) of\n+     * {@linkplain #address() base address} of each segment and will be in the\n+     * range of 0 (inclusive) up to the {@linkplain #byteSize() size} (in bytes) of\n@@ -586,1 +586,1 @@\n-     * {@link ResourceScope#globalScope() global} resource scope, in case the buffer has been created independently,\n+     * {@linkplain ResourceScope#globalScope() global} resource scope, in case the buffer has been created independently,\n@@ -600,1 +600,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -611,1 +611,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -622,1 +622,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -633,1 +633,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -644,1 +644,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -655,1 +655,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -666,1 +666,1 @@\n-     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n+     * The returned segment's resource scope is set to the {@linkplain ResourceScope#globalScope() global} resource scope.\n@@ -815,0 +815,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n- * An important implicit resource scope is the so called {@link #globalScope() global scope}; the global scope is\n+ * An important implicit resource scope is the so called {@linkplain #globalScope() global scope}; the global scope is\n@@ -186,1 +186,1 @@\n-     *     <li>one or more handles (see {@link #acquire()}) associated with this resource scope have not been {@link #release(Handle) released}<\/li>\n+     *     <li>one or more handles (see {@link #acquire()}) associated with this resource scope have not been {@linkplain #release(Handle) released}<\/li>\n@@ -188,1 +188,1 @@\n-     * @throws UnsupportedOperationException if this resource scope is {@link #isImplicit() implicit}.\n+     * @throws UnsupportedOperationException if this resource scope is {@linkplain #isImplicit() implicit}.\n@@ -202,1 +202,1 @@\n-     * {@link #close() closed} until all the resource scope handles acquired from it have been {@link #release(Handle)} released}.\n+     * {@linkplain #close() closed} until all the resource scope handles acquired from it have been {@linkplain #release(Handle)} released}.\n@@ -216,1 +216,1 @@\n-     * An abstraction modelling a resource scope handle. A resource scope handle is typically {@link #acquire() acquired} by clients\n+     * An abstraction modelling a resource scope handle. A resource scope handle is typically {@linkplain #acquire() acquired} by clients\n@@ -218,1 +218,1 @@\n-     * Once obtained, resource scope handles can be {@link #release(Handle)} released}; an explicit resource scope can\n+     * Once obtained, resource scope handles can be {@linkplain #release(Handle)} released}; an explicit resource scope can\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n- * is tied to the {@link jdk.incubator.foreign.ResourceScope resource scope} parameter passed to that method.\n+ * is tied to the {@linkplain jdk.incubator.foreign.ResourceScope resource scope} parameter passed to that method.\n@@ -223,1 +223,1 @@\n- * foreign data and\/or functions to first-class Java API elements which can then be used directly by client. For instance\n+ * foreign data and\/or functions to first-class Java API elements which can then be used directly by clients. For instance\n@@ -233,1 +233,1 @@\n- * Access to restricted methods is <em>disabled<\/em> by default; to enable restricted methods, the JVM command line option\n+ * Access to restricted methods is <em>disabled<\/em> by default; to enable restricted methods, the command line option\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}