{"files":[{"patch":"@@ -139,5 +139,0 @@\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -152,1 +147,0 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n@@ -156,1 +150,0 @@\n-    @CallerSensitive\n@@ -165,5 +158,0 @@\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -179,1 +167,0 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n@@ -183,1 +170,0 @@\n-    @CallerSensitive\n@@ -196,5 +182,1 @@\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n-     **\n+     *\n@@ -207,1 +189,0 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n@@ -211,1 +192,0 @@\n-    @CallerSensitive\n@@ -220,5 +200,0 @@\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -233,1 +208,0 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n@@ -237,1 +211,0 @@\n-    @CallerSensitive\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -78,5 +78,0 @@\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -89,1 +84,0 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n@@ -93,1 +87,0 @@\n-    @CallerSensitive\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -129,1 +129,0 @@\n-        @CallerSensitive\n@@ -131,1 +130,0 @@\n-            Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LibrariesHelper.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-    @CallerSensitive\n@@ -79,1 +78,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -93,1 +91,0 @@\n-    @CallerSensitive\n@@ -95,1 +92,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Linker.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-    @CallerSensitive\n@@ -90,1 +89,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -104,1 +102,0 @@\n-    @CallerSensitive\n@@ -106,1 +103,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-    @CallerSensitive\n@@ -91,1 +90,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -105,1 +103,0 @@\n-    @CallerSensitive\n@@ -107,1 +104,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,12 +59,0 @@\n-                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n-                            MethodType.methodType(MethodHandle.class, Addressable.class, MethodType.class, FunctionDescriptor.class)),\n-                            \"CLinker::downcallHandle\/1\" },\n-                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n-                            MethodType.methodType(MethodHandle.class, Addressable.class, SegmentAllocator.class, MethodType.class, FunctionDescriptor.class)),\n-                            \"CLinker::downcallHandle\/2\" },\n-                    { MethodHandles.lookup().findVirtual(CLinker.class, \"downcallHandle\",\n-                            MethodType.methodType(MethodHandle.class, MethodType.class, FunctionDescriptor.class)),\n-                            \"CLinker::downcallHandle\/3\" },\n-                    { MethodHandles.lookup().findVirtual(CLinker.class, \"upcallStub\",\n-                            MethodType.methodType(MemoryAddress.class, MethodHandle.class, FunctionDescriptor.class, ResourceScope.class)),\n-                            \"CLinker::upcallStub\" },\n@@ -98,3 +86,0 @@\n-                    { MethodHandles.lookup().findVirtual(LibraryLookup.class, \"lookup\",\n-                            MethodType.methodType(Optional.class, String.class, MemoryLayout.class)),\n-                            \"LibraryLookup::lookup\" },\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}