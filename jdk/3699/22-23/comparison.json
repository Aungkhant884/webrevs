{"files":[{"patch":"@@ -51,1 +51,1 @@\n-abstract class AbstractLayout implements MemoryLayout {\n+abstract non-sealed class AbstractLayout implements MemoryLayout {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,5 +33,0 @@\n- * @apiNote In the future, if the Java language permits, {@link Addressable}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types, such as {@link MemorySegment}, {@link MemoryAddress}\n- * and {@link CLinker.VaList}.\n- *\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/Addressable.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.foreign.AbstractCLinker;\n@@ -31,0 +32,3 @@\n+import jdk.internal.foreign.abi.aarch64.AArch64VaList;\n+import jdk.internal.foreign.abi.x64.sysv.SysVVaList;\n+import jdk.internal.foreign.abi.x64.windows.WinVaList;\n@@ -104,4 +108,0 @@\n- * @apiNote In the future, if the Java language permits, {@link CLinker}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types.\n- *\n@@ -111,1 +111,1 @@\n-public interface CLinker {\n+public sealed interface CLinker permits AbstractCLinker {\n@@ -177,1 +177,0 @@\n-     * <p>\n@@ -501,5 +500,0 @@\n-     *\n-     * @apiNote In the future, if the Java language permits, {@link VaList}\n-     * may become a {@code sealed} interface, which would prohibit subclassing except by\n-     * explicitly permitted types.\n-     *\n@@ -507,1 +501,1 @@\n-    interface VaList extends Addressable {\n+    sealed interface VaList extends Addressable permits WinVaList, SysVVaList, AArch64VaList, SharedUtils.EmptyVaList {\n@@ -712,5 +706,0 @@\n-         *\n-         * @apiNote In the future, if the Java language permits, {@link Builder}\n-         * may become a {@code sealed} interface, which would prohibit subclassing except by\n-         * explicitly permitted types.\n-         *\n@@ -718,1 +707,1 @@\n-        interface Builder {\n+        sealed interface Builder permits WinVaList.Builder, SysVVaList.Builder, AArch64VaList.Builder {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-public final class GroupLayout extends AbstractLayout {\n+public final class GroupLayout extends AbstractLayout implements MemoryLayout {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,4 +61,0 @@\n- * @apiNote In the future, if the Java language permits, {@link MemoryAddress}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types.\n- *\n@@ -68,1 +64,1 @@\n-public interface MemoryAddress extends Addressable {\n+public sealed interface MemoryAddress extends Addressable permits MemoryAddressImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -197,4 +197,0 @@\n- * @apiNote In the future, if the Java language permits, {@link MemoryLayout}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types.\n- *\n@@ -204,1 +200,1 @@\n-public interface MemoryLayout extends Constable {\n+public sealed interface MemoryLayout extends Constable permits AbstractLayout, SequenceLayout, GroupLayout, PaddingLayout, ValueLayout {\n@@ -608,4 +604,0 @@\n-     * @apiNote In the future, if the Java language permits, {@link PathElement}\n-     * may become a {@code sealed} interface, which would prohibit subclassing except by\n-     * explicitly permitted types.\n-     *\n@@ -615,1 +607,1 @@\n-    interface PathElement {\n+    sealed interface PathElement permits LayoutPath.PathElementImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,3 +155,0 @@\n- * @apiNote In the future, if the Java language permits, {@link MemorySegment}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by other explicitly permitted subtypes.\n- *\n@@ -161,1 +158,1 @@\n-public interface MemorySegment extends Addressable {\n+public sealed interface MemorySegment extends Addressable permits AbstractMemorySegmentImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,3 +143,0 @@\n- * @apiNote In the future, if the Java language permits, {@link ResourceScope}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by other explicitly permitted subtypes.\n- *\n@@ -149,1 +146,1 @@\n-public interface ResourceScope extends AutoCloseable {\n+public sealed interface ResourceScope extends AutoCloseable permits ResourceScopeImpl {\n@@ -221,1 +218,1 @@\n-    interface Handle {\n+    sealed interface Handle permits ResourceScopeImpl.HandleImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-public final class SequenceLayout extends AbstractLayout {\n+public final class SequenceLayout extends AbstractLayout implements MemoryLayout {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public abstract class AbstractCLinker implements CLinker {\n+public abstract non-sealed class AbstractCLinker implements CLinker {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractCLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-public abstract class AbstractMemorySegmentImpl extends MemorySegmentProxy implements MemorySegment {\n+public abstract non-sealed class AbstractMemorySegmentImpl extends MemorySegmentProxy implements MemorySegment {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-    public static class PathElementImpl implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+    public static final class PathElementImpl implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-public abstract class ResourceScopeImpl implements ResourceScope, ScopedMemoryAccess.Scope, SegmentAllocator {\n+public abstract non-sealed class ResourceScopeImpl implements ResourceScope, ScopedMemoryAccess.Scope, SegmentAllocator {\n@@ -154,1 +154,1 @@\n-    interface HandleImpl extends ResourceScope.Handle, ScopedMemoryAccess.Scope.Handle {\n+    public non-sealed interface HandleImpl extends ResourceScope.Handle, ScopedMemoryAccess.Scope.Handle {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -534,1 +534,1 @@\n-    public static class EmptyVaList implements VaList {\n+    public static non-sealed class EmptyVaList implements VaList {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public class AArch64VaList implements VaList {\n+public non-sealed class AArch64VaList implements VaList {\n@@ -400,1 +400,1 @@\n-    static class Builder implements VaList.Builder {\n+    public static non-sealed class Builder implements VaList.Builder {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public class SysVVaList implements VaList {\n+public non-sealed class SysVVaList implements VaList {\n@@ -343,1 +343,1 @@\n-    static class Builder implements VaList.Builder {\n+    public static non-sealed class Builder implements VaList.Builder {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-class WinVaList implements VaList {\n+public non-sealed class WinVaList implements VaList {\n@@ -173,1 +173,1 @@\n-    static class Builder implements VaList.Builder {\n+    public static non-sealed class Builder implements VaList.Builder {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}