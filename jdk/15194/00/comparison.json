{"files":[{"patch":"@@ -439,2 +439,1 @@\n-  _num_concurrent_workers = ConcGCThreads;\n-  _max_concurrent_workers = _num_concurrent_workers;\n+  _max_concurrent_workers = ConcGCThreads;\n@@ -444,0 +443,1 @@\n+  _num_concurrent_workers = _concurrent_workers->active_workers();\n@@ -979,6 +979,3 @@\n-    _num_concurrent_workers = MIN2(calc_active_marking_workers(),\n-                                   \/\/ We distribute work on a per-region basis, so starting\n-                                   \/\/ more threads than that is useless.\n-                                   root_regions()->num_root_regions());\n-    assert(_num_concurrent_workers <= _max_concurrent_workers,\n-           \"Maximum number of marking threads exceeded\");\n+    \/\/ Assign one worker to each root-region but subject to the max constraint.\n+    const uint num_workers = MIN2(root_regions()->num_root_regions(),\n+                                  _max_concurrent_workers);\n@@ -988,2 +985,2 @@\n-                        task.name(), _num_concurrent_workers, root_regions()->num_root_regions());\n-    _concurrent_workers->run_task(&task, _num_concurrent_workers);\n+                        task.name(), num_workers, root_regions()->num_root_regions());\n+    _concurrent_workers->run_task(&task, num_workers);\n@@ -1049,3 +1046,1 @@\n-  _num_concurrent_workers = calc_active_marking_workers();\n-\n-  uint active_workers = MAX2(1U, _num_concurrent_workers);\n+  uint active_workers = calc_active_marking_workers();\n@@ -1059,0 +1054,2 @@\n+  _num_concurrent_workers = active_workers;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"}]}