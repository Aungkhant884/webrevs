{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,1 @@\n-    fos_fd =\n-        (*env)->GetFieldID(env, fosClass, \"fd\", \"Ljava\/io\/FileDescriptor;\");\n+    fos_fd = (*env)->GetFieldID(env, fosClass, \"fd\", \"Ljava\/io\/FileDescriptor;\");\n@@ -70,2 +69,1 @@\n-    jobject this, jbyteArray bytes, jint off, jint len, jboolean append)\n-{\n+    jobject this, jbyteArray bytes, jint off, jint len, jboolean append) {\n","filename":"src\/java.base\/share\/native\/libjava\/FileOutputStream.c","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"src\/java.base\/windows\/native\/libjava\/FileOutputStream_md.c","status":"renamed"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-\n-#include \"io_util.h\"\n-#include \"io_util_md.h\"\n-#include \"java_io_FileOutputStream.h\"\n-\n-#include <fcntl.h>\n-\n-\/*******************************************************************\/\n-\/*  BEGIN JNI ********* BEGIN JNI *********** BEGIN JNI ************\/\n-\/*******************************************************************\/\n-\n-jfieldID fos_fd; \/* id for jobject 'fd' in java.io.FileOutputStream *\/\n-\n-\/**************************************************************\n- * static methods to store field ID's in initializers\n- *\/\n-\n-JNIEXPORT void JNICALL\n-Java_java_io_FileOutputStream_initIDs(JNIEnv *env, jclass fdClass) {\n-    fos_fd = (*env)->GetFieldID(env, fdClass, \"fd\", \"Ljava\/io\/FileDescriptor;\");\n-}\n-\n-\/**************************************************************\n- * Output stream\n- *\/\n-\n-JNIEXPORT void JNICALL\n-Java_java_io_FileOutputStream_open0(JNIEnv *env, jobject this,\n-                                    jstring path, jboolean append) {\n-    fileOpen(env, this, path, fos_fd,\n-             O_WRONLY | O_CREAT | (append ? O_APPEND : O_TRUNC));\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_java_io_FileOutputStream_write(JNIEnv *env, jobject this, jint byte, jboolean append) {\n-    writeSingle(env, this, byte, append, fos_fd);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_java_io_FileOutputStream_writeBytes(JNIEnv *env,\n-    jobject this, jbyteArray bytes, jint off, jint len, jboolean append) {\n-    writeBytes(env, this, bytes, off, len, append, fos_fd);\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libjava\/FileOutputStream_md.c","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}