{"files":[{"patch":"@@ -5301,1 +5301,0 @@\n-    st->cr();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -788,0 +788,5 @@\n+        LogTarget(Debug, metaspace) lt;\n+        if (lt.is_enabled()) {\n+          LogStream ls(lt);\n+          os::print_memory_mappings((char*)base, size, &ls);\n+        }\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  if (range < UnscaledClassSpaceMax) {\n+  if (range <= UnscaledClassSpaceMax) {\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-#define PRINT_MAPPINGS(s) { tty->print_cr(\"%s\", s); os::print_memory_mappings((char*)p, total_range_len, tty); }\n+#define PRINT_MAPPINGS(s) { tty->print_cr(\"%s\", s); os::print_memory_mappings((char*)p, total_range_len, tty); tty->cr(); }\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Testing that, faced with a given (possibly odd) mapping address of class space, the encoding\n+ *          scheme fits the address\n+ * @requires vm.bits == 64 & !vm.graal.enabled\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver CompressedClassPointersEncodingScheme\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+import java.io.IOException;\n+\n+public class CompressedClassPointersEncodingScheme {\n+\n+    private static void test(long forceAddress, long classSpaceSize, long expectedEncodingBase, int expectedEncodingShift) throws IOException {\n+        String forceAddressString = String.format(\"0x%016X\", forceAddress).toLowerCase();\n+        String expectedEncodingBaseString = String.format(\"0x%016X\", expectedEncodingBase).toLowerCase();\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Xshare:off\", \/\/ to make CompressedClassSpaceBaseAddress work\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:-UseCompressedOops\", \/\/ keep VM from optimizing heap location\n+                \"-XX:CompressedClassSpaceBaseAddress=\" + forceAddress,\n+                \"-XX:CompressedClassSpaceSize=\" + classSpaceSize,\n+                \"-Xmx128m\",\n+                \"-Xlog:metaspace*\",\n+                \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        output.reportDiagnosticSummary();\n+\n+        \/\/ We ignore cases where we were not able to map at the force address\n+        if (output.contains(\"reserving class space failed\")) {\n+            throw new SkippedException(\"Skipping because we cannot force ccs to \" + forceAddressString);\n+        }\n+\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"Narrow klass base: \" + expectedEncodingBaseString + \", Narrow klass shift: \" + expectedEncodingShift);\n+    }\n+\n+    final static long K = 1024;\n+    final static long M = K * 1024;\n+    final static long G = M * 1024;\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Test ccs nestling right at the end of the 4G range\n+        \/\/ Expecting base=0, shift=0\n+        test(4 * G - 128 * M, 128 * M, 0, 0);\n+\n+        \/\/ add more...\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointersEncodingScheme.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -210,0 +210,21 @@\n+    \/**\n+     * Returns true if stdout contains the given string\n+     *\/\n+    public boolean stdoutContains(String expectedString) {\n+        return getStdout().contains(expectedString);\n+    }\n+\n+    \/**\n+     * Returns true if stderr contains the given string\n+     *\/\n+    public boolean stderrContains(String expectedString) {\n+        return getStderr().contains(expectedString);\n+    }\n+\n+    \/**\n+     * Returns true if either stdout or stderr contains the given string\n+     *\/\n+    public boolean contains(String expectedString) {\n+        return stdoutContains(expectedString) || stderrContains(expectedString);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}