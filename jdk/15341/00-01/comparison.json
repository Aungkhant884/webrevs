{"files":[{"patch":"@@ -91,4 +91,3 @@\n-        if (IPSupport.hasIPv6()) {\n-            String [] resolvedAddresses = Arrays.stream(InetAddress.getAllByName(\"hostname.test.com\"))\n-                    .map(InetAddress::getHostAddress).toArray(String[]::new);\n-            String [] expectedAddresses = getExpectedAddressesArray();\n+        String [] resolvedAddresses = Arrays.stream(InetAddress.getAllByName(\"hostname.test.com\"))\n+                .map(InetAddress::getHostAddress).toArray(String[]::new);\n+        String [] expectedAddresses = getExpectedAddressesArray();\n@@ -96,7 +95,6 @@\n-            if (Arrays.deepEquals(resolvedAddresses, expectedAddresses)) {\n-                System.err.println(\"Test passed: The expected list of IP addresses is returned\");\n-            } else {\n-                System.err.printf(\"Expected addresses:%n%s%n\", Arrays.deepToString(expectedAddresses));\n-                System.err.printf(\"Resolved addresses:%n%s%n\", Arrays.deepToString(resolvedAddresses));\n-                Assert.fail(\"Wrong host resolution result is returned\");\n-            }\n+        if (Arrays.deepEquals(resolvedAddresses, expectedAddresses)) {\n+            System.err.println(\"Test passed: The expected list of IP addresses is returned\");\n+        } else {\n+            System.err.printf(\"Expected addresses:%n%s%n\", Arrays.deepToString(expectedAddresses));\n+            System.err.printf(\"Resolved addresses:%n%s%n\", Arrays.deepToString(resolvedAddresses));\n+            Assert.fail(\"Wrong host resolution result is returned\");\n@@ -115,0 +113,3 @@\n+        if (!IPSupport.hasIPv6()) {\n+            return ExpectedOrder.IPV4_ONLY;\n+        }\n","filename":"test\/jdk\/java\/net\/InetAddress\/HostsFileOrderingTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}