{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.net.IPSupport\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -157,4 +159,6 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n-                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        if (IPSupport.hasIPv6()) {\n+            simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n+                    .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.net.IPSupport\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -157,4 +159,6 @@\n-        simpleserver(JWEBSERVER, opt, \"::0\")\n-                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        if (IPSupport.hasIPv6()) {\n+            simpleserver(JWEBSERVER, opt, \"::0\")\n+                    .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -42,0 +44,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform jdk.test.lib.net.IPSupport\n@@ -87,3 +91,4 @@\n-        String [] resolvedAddresses = Arrays.stream(InetAddress.getAllByName(\"hostname.test.com\"))\n-                .map(InetAddress::getHostAddress).toArray(String[]::new);\n-        String [] expectedAddresses = getExpectedAddressesArray();\n+        if (IPSupport.hasIPv6()) {\n+            String [] resolvedAddresses = Arrays.stream(InetAddress.getAllByName(\"hostname.test.com\"))\n+                    .map(InetAddress::getHostAddress).toArray(String[]::new);\n+            String [] expectedAddresses = getExpectedAddressesArray();\n@@ -91,6 +96,7 @@\n-        if (Arrays.deepEquals(resolvedAddresses, expectedAddresses)) {\n-            System.err.println(\"Test passed: The expected list of IP addresses is returned\");\n-        } else {\n-            System.err.printf(\"Expected addresses:%n%s%n\", Arrays.deepToString(expectedAddresses));\n-            System.err.printf(\"Resolved addresses:%n%s%n\", Arrays.deepToString(resolvedAddresses));\n-            Assert.fail(\"Wrong host resolution result is returned\");\n+            if (Arrays.deepEquals(resolvedAddresses, expectedAddresses)) {\n+                System.err.println(\"Test passed: The expected list of IP addresses is returned\");\n+            } else {\n+                System.err.printf(\"Expected addresses:%n%s%n\", Arrays.deepToString(expectedAddresses));\n+                System.err.printf(\"Resolved addresses:%n%s%n\", Arrays.deepToString(resolvedAddresses));\n+                Assert.fail(\"Wrong host resolution result is returned\");\n+            }\n","filename":"test\/jdk\/java\/net\/InetAddress\/HostsFileOrderingTest.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n@@ -41,0 +43,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -131,11 +135,10 @@\n-\n-        \/\/ IPV6 tests\n-        addMappingToHostsFile(\"host-ipv6.sample-domain\", \"::1\", hostsFileName,\n-                true);\n-        testAddress = InetAddress.getByName(\"host-ipv6.sample-domain\");\n-        retrievedIpAddr = testAddress.getAddress();\n-        if (!Arrays.equals(retrievedIpAddr, expectedIpAddrIpv6_1)) {\n-            System.out.println(\"retrieved ipv6 addr == \" + Arrays.toString(retrievedIpAddr));\n-            System.out.println(\"expected ipv6 addr == \" + Arrays.toString(expectedIpAddrIpv6_1));\n-            throw new RuntimeException(\n-                    \"retrieved IPV6 Addr not equal to expected IPV6 Addr\");\n+        if (IPSupport.hasIPv6()) {\n+            addMappingToHostsFile(\"host-ipv6.sample-domain\", \"::1\", hostsFileName, true);\n+            testAddress = InetAddress.getByName(\"host-ipv6.sample-domain\");\n+            retrievedIpAddr = testAddress.getAddress();\n+            if (!Arrays.equals(retrievedIpAddr, expectedIpAddrIpv6_1)) {\n+                System.out.println(\"retrieved ipv6 addr == \" + Arrays.toString(retrievedIpAddr));\n+                System.out.println(\"expected ipv6 addr == \" + Arrays.toString(expectedIpAddrIpv6_1));\n+                throw new RuntimeException(\n+                        \"retrieved IPV6 Addr not equal to expected IPV6 Addr\");\n+            }\n","filename":"test\/jdk\/java\/net\/InetAddress\/InternalNameServiceTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n@@ -39,0 +41,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -55,6 +59,9 @@\n-        \/\/ ::1     ip6-localhost ip6-loopback\n-        testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n-        \/\/ fe00::0 ip6-localnet\n-        testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n-        \/\/ fe80::1 link-local-host\n-        testHostsMapping(expectedIpv6Address, \"link-local-host\");\n+\n+        if (IPSupport.hasIPv6()) {\n+            \/\/ ::1     ip6-localhost ip6-loopback\n+            testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n+            \/\/ fe00::0 ip6-localnet\n+            testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n+            \/\/ fe80::1 link-local-host\n+            testHostsMapping(expectedIpv6Address, \"link-local-host\");\n+        }\n@@ -64,3 +71,4 @@\n-        testReverseLookup(\"::1\", \"ip6-localhost\");\n-        testReverseLookup(\"0:0:0:0:0:0:0:1\", \"ip6-localhost\");\n-        testReverseLookup(\"0000:0000:0000:0000:0000:0000:0000:0001\", \"ip6-localhost\");\n+        if (IPSupport.hasIPv6()) {\n+            testReverseLookup(\"::1\", \"ip6-localhost\");\n+            testReverseLookup(\"0:0:0:0:0:0:0:1\", \"ip6-localhost\");\n+            testReverseLookup(\"0000:0000:0000:0000:0000:0000:0000:0001\", \"ip6-localhost\");\n@@ -68,3 +76,3 @@\n-        testReverseLookup(\"fe00::0\", \"ip6-localnet\");\n-        testReverseLookup(\"fe00:0:0:0:0:0:0:0\", \"ip6-localnet\");\n-        testReverseLookup(\"fe00:0000:0000:0000:0000:0000:0000:0000\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00::0\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00:0:0:0:0:0:0:0\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00:0000:0000:0000:0000:0000:0000:0000\", \"ip6-localnet\");\n@@ -72,3 +80,4 @@\n-        testReverseLookup(\"fe80::1\", \"link-local-host\");\n-        testReverseLookup(\"fe80:000:0:00:0:000:00:1\", \"link-local-host\");\n-        testReverseLookup(\"fe80:0000:0000:0000:0000:0000:0000:0001\", \"link-local-host\");\n+            testReverseLookup(\"fe80::1\", \"link-local-host\");\n+            testReverseLookup(\"fe80:000:0:00:0:000:00:1\", \"link-local-host\");\n+            testReverseLookup(\"fe80:0000:0000:0000:0000:0000:0000:0001\", \"link-local-host\");\n+        }\n","filename":"test\/jdk\/java\/net\/InetAddress\/InternalNameServiceWithHostsFileTest.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.Platform jdk.test.lib.net.IPSupport\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -48,13 +49,18 @@\n-        testDatagramChannel();\n-        StandardProtocolFamily fam = args[0].equals(\"ipv4\") ? INET : INET6;\n-        System.out.println(\"Family = \" + fam);\n-        testDatagramChannel(args, fam);\n-        try (DatagramSocket c = new DatagramSocket()) {\n-            testDatagramSocket(c);\n-        }\n-        try (DatagramChannel dc = DatagramChannel.open(fam)) {\n-            var c = dc.socket();\n-            testDatagramSocket(c);\n-        }\n-        try (MulticastSocket mc = new MulticastSocket()) {\n-            testDatagramSocket(mc);\n+        boolean ipv6 = args[0].equals(\"ipv6\");\n+        if (ipv6 && !IPSupport.hasIPv6()) {\n+            System.out.println(\"No IPv6 support detected, skipping IPv6 test case\");\n+        } else {\n+            testDatagramChannel();\n+            StandardProtocolFamily fam = ipv6 ? INET6 : INET;\n+            System.out.println(\"Family = \" + fam);\n+            testDatagramChannel(args, fam);\n+            try (DatagramSocket c = new DatagramSocket()) {\n+                testDatagramSocket(c);\n+            }\n+            try (DatagramChannel dc = DatagramChannel.open(fam)) {\n+                var c = dc.socket();\n+                testDatagramSocket(c);\n+            }\n+            try (MulticastSocket mc = new MulticastSocket()) {\n+                testDatagramSocket(mc);\n+            }\n","filename":"test\/jdk\/jdk\/net\/ExtendedSocketOption\/DontFragmentTest.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"}]}