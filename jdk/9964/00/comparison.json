{"files":[{"patch":"@@ -194,9 +194,0 @@\n-# Setup the JTReg Regression Test Harness.\n-TOOLCHAIN_SETUP_JTREG\n-\n-# Setup the Java Microbenchmark Harness (JMH)\n-LIB_TESTS_SETUP_JMH\n-\n-# Setup Jib dependency tool\n-TOOLCHAIN_SETUP_JIB\n-\n@@ -206,0 +197,6 @@\n+# Setup the tools needed to test the JDK (JTReg Regression Test Harness,\n+# Java Microbenchmark Harness (JMH) and the Jib dependency tool).\n+LIB_TESTS_SETUP_JTREG\n+LIB_TESTS_SETUP_JMH\n+LIB_TESTS_SETUP_JIB\n+\n@@ -246,1 +243,2 @@\n-JDKOPT_ENABLE_DISABLE_FAILURE_HANDLER\n+LIB_TESTS_ENABLE_DISABLE_FAILURE_HANDLER\n+\n","filename":"make\/autoconf\/configure.ac","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -489,23 +489,0 @@\n-################################################################################\n-#\n-# Check if building of the jtreg failure handler should be enabled.\n-#\n-AC_DEFUN_ONCE([JDKOPT_ENABLE_DISABLE_FAILURE_HANDLER],\n-[\n-  UTIL_ARG_ENABLE(NAME: jtreg-failure-handler, DEFAULT: auto,\n-      RESULT: BUILD_FAILURE_HANDLER,\n-      DESC: [enable building of the jtreg failure handler],\n-      DEFAULT_DESC: [enabled if jtreg is present],\n-      CHECKING_MSG: [if the jtreg failure handler should be built],\n-      CHECK_AVAILABLE: [\n-        AC_MSG_CHECKING([if the jtreg failure handler is available])\n-        if test \"x$JT_HOME\" != \"x\"; then\n-          AC_MSG_RESULT([yes])\n-        else\n-          AVAILABLE=false\n-          AC_MSG_RESULT([no (jtreg not present)])\n-        fi\n-      ])\n-  AC_SUBST(BUILD_FAILURE_HANDLER)\n-])\n-\n","filename":"make\/autoconf\/jdk-options.m4","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,4 @@\n+################################################################################\n+# Setup libraries and functionalities needed to test the JDK.\n+################################################################################\n+\n@@ -121,0 +125,143 @@\n+\n+# Setup the JTReg Regression Test Harness.\n+AC_DEFUN_ONCE([LIB_TESTS_SETUP_JTREG],\n+[\n+  AC_ARG_WITH(jtreg, [AS_HELP_STRING([--with-jtreg],\n+      [Regression Test Harness @<:@probed@:>@])])\n+\n+  if test \"x$with_jtreg\" = xno; then\n+    # jtreg disabled\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    AC_MSG_RESULT([no, disabled])\n+  elif test \"x$with_jtreg\" != xyes && test \"x$with_jtreg\" != x; then\n+    if test -d \"$with_jtreg\"; then\n+      # An explicit path is specified, use it.\n+      JT_HOME=\"$with_jtreg\"\n+    else\n+      case \"$with_jtreg\" in\n+        *.zip )\n+          JTREG_SUPPORT_DIR=$CONFIGURESUPPORT_OUTPUTDIR\/jtreg\n+          $RM -rf $JTREG_SUPPORT_DIR\n+          $MKDIR -p $JTREG_SUPPORT_DIR\n+          $UNZIP -qq -d $JTREG_SUPPORT_DIR $with_jtreg\n+\n+          # Try to find jtreg to determine JT_HOME path\n+          JTREG_PATH=`$FIND $JTREG_SUPPORT_DIR | $GREP \"\/bin\/jtreg\"`\n+          if test \"x$JTREG_PATH\" != x; then\n+            JT_HOME=$($DIRNAME $($DIRNAME $JTREG_PATH))\n+          fi\n+          ;;\n+        * )\n+          ;;\n+      esac\n+    fi\n+    UTIL_FIXUP_PATH([JT_HOME])\n+    if test ! -d \"$JT_HOME\"; then\n+      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not exist])\n+    fi\n+\n+    if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg is not a valid jtreg home])\n+    fi\n+\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    AC_MSG_RESULT([$JT_HOME])\n+  else\n+    # Try to locate jtreg using the JT_HOME environment variable\n+    if test \"x$JT_HOME\" != x; then\n+      # JT_HOME set in environment, use it\n+      if test ! -d \"$JT_HOME\"; then\n+        AC_MSG_WARN([Ignoring JT_HOME pointing to invalid directory: $JT_HOME])\n+        JT_HOME=\n+      else\n+        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+          AC_MSG_WARN([Ignoring JT_HOME which is not a valid jtreg home: $JT_HOME])\n+          JT_HOME=\n+        else\n+          AC_MSG_NOTICE([Located jtreg using JT_HOME from environment])\n+        fi\n+      fi\n+    fi\n+\n+    if test \"x$JT_HOME\" = x; then\n+      # JT_HOME is not set in environment, or was deemed invalid.\n+      # Try to find jtreg on path\n+      UTIL_LOOKUP_PROGS(JTREGEXE, jtreg)\n+      if test \"x$JTREGEXE\" != x; then\n+        # That's good, now try to derive JT_HOME\n+        JT_HOME=`(cd $($DIRNAME $JTREGEXE)\/.. && pwd)`\n+        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+          AC_MSG_WARN([Ignoring jtreg from path since a valid jtreg home cannot be found])\n+          JT_HOME=\n+        else\n+          AC_MSG_NOTICE([Located jtreg using jtreg executable in path])\n+        fi\n+      fi\n+    fi\n+\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    if test \"x$JT_HOME\" != x; then\n+      AC_MSG_RESULT([$JT_HOME])\n+    else\n+      AC_MSG_RESULT([no, not found])\n+\n+      if test \"x$with_jtreg\" = xyes; then\n+        AC_MSG_ERROR([--with-jtreg was specified, but no jtreg found.])\n+      fi\n+    fi\n+  fi\n+\n+  UTIL_FIXUP_PATH(JT_HOME)\n+  AC_SUBST(JT_HOME)\n+])\n+\n+# Setup the JIB dependency resolver\n+AC_DEFUN_ONCE([LIB_TESTS_SETUP_JIB],\n+[\n+  AC_ARG_WITH(jib, [AS_HELP_STRING([--with-jib],\n+      [Jib dependency management tool @<:@not used@:>@])])\n+\n+  if test \"x$with_jib\" = xno || test \"x$with_jib\" = x; then\n+    # jib disabled\n+    AC_MSG_CHECKING([for jib])\n+    AC_MSG_RESULT(no)\n+  elif test \"x$with_jib\" = xyes; then\n+    AC_MSG_ERROR([Must supply a value to --with-jib])\n+  else\n+    JIB_HOME=\"${with_jib}\"\n+    AC_MSG_CHECKING([for jib])\n+    AC_MSG_RESULT(${JIB_HOME})\n+    if test ! -d \"${JIB_HOME}\"; then\n+      AC_MSG_ERROR([--with-jib must be a directory])\n+    fi\n+    JIB_JAR=$(ls ${JIB_HOME}\/lib\/jib-*.jar)\n+    if test ! -f \"${JIB_JAR}\"; then\n+      AC_MSG_ERROR([Could not find jib jar file in ${JIB_HOME}])\n+    fi\n+  fi\n+\n+  AC_SUBST(JIB_HOME)\n+])\n+\n+################################################################################\n+#\n+# Check if building of the jtreg failure handler should be enabled.\n+#\n+AC_DEFUN_ONCE([LIB_TESTS_ENABLE_DISABLE_FAILURE_HANDLER],\n+[\n+  UTIL_ARG_ENABLE(NAME: jtreg-failure-handler, DEFAULT: auto,\n+      RESULT: BUILD_FAILURE_HANDLER,\n+      DESC: [enable building of the jtreg failure handler],\n+      DEFAULT_DESC: [enabled if jtreg is present],\n+      CHECKING_MSG: [if the jtreg failure handler should be built],\n+      CHECK_AVAILABLE: [\n+        AC_MSG_CHECKING([if the jtreg failure handler is available])\n+        if test \"x$JT_HOME\" != \"x\"; then\n+          AC_MSG_RESULT([yes])\n+        else\n+          AVAILABLE=false\n+          AC_MSG_RESULT([no (jtreg not present)])\n+        fi\n+      ])\n+  AC_SUBST(BUILD_FAILURE_HANDLER)\n+])\n","filename":"make\/autoconf\/lib-tests.m4","additions":148,"deletions":1,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -975,120 +975,0 @@\n-\n-# Setup the JTReg Regression Test Harness.\n-AC_DEFUN_ONCE([TOOLCHAIN_SETUP_JTREG],\n-[\n-  AC_ARG_WITH(jtreg, [AS_HELP_STRING([--with-jtreg],\n-      [Regression Test Harness @<:@probed@:>@])])\n-\n-  if test \"x$with_jtreg\" = xno; then\n-    # jtreg disabled\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    AC_MSG_RESULT([no, disabled])\n-  elif test \"x$with_jtreg\" != xyes && test \"x$with_jtreg\" != x; then\n-    if test -d \"$with_jtreg\"; then\n-      # An explicit path is specified, use it.\n-      JT_HOME=\"$with_jtreg\"\n-    else\n-      case \"$with_jtreg\" in\n-        *.zip )\n-          JTREG_SUPPORT_DIR=$CONFIGURESUPPORT_OUTPUTDIR\/jtreg\n-          $RM -rf $JTREG_SUPPORT_DIR\n-          $MKDIR -p $JTREG_SUPPORT_DIR\n-          $UNZIP -qq -d $JTREG_SUPPORT_DIR $with_jtreg\n-\n-          # Try to find jtreg to determine JT_HOME path\n-          JTREG_PATH=`$FIND $JTREG_SUPPORT_DIR | $GREP \"\/bin\/jtreg\"`\n-          if test \"x$JTREG_PATH\" != x; then\n-            JT_HOME=$($DIRNAME $($DIRNAME $JTREG_PATH))\n-          fi\n-          ;;\n-        * )\n-          ;;\n-      esac\n-    fi\n-    UTIL_FIXUP_PATH([JT_HOME])\n-    if test ! -d \"$JT_HOME\"; then\n-      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not exist])\n-    fi\n-\n-    if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg is not a valid jtreg home])\n-    fi\n-\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    AC_MSG_RESULT([$JT_HOME])\n-  else\n-    # Try to locate jtreg using the JT_HOME environment variable\n-    if test \"x$JT_HOME\" != x; then\n-      # JT_HOME set in environment, use it\n-      if test ! -d \"$JT_HOME\"; then\n-        AC_MSG_WARN([Ignoring JT_HOME pointing to invalid directory: $JT_HOME])\n-        JT_HOME=\n-      else\n-        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-          AC_MSG_WARN([Ignoring JT_HOME which is not a valid jtreg home: $JT_HOME])\n-          JT_HOME=\n-        else\n-          AC_MSG_NOTICE([Located jtreg using JT_HOME from environment])\n-        fi\n-      fi\n-    fi\n-\n-    if test \"x$JT_HOME\" = x; then\n-      # JT_HOME is not set in environment, or was deemed invalid.\n-      # Try to find jtreg on path\n-      UTIL_LOOKUP_PROGS(JTREGEXE, jtreg)\n-      if test \"x$JTREGEXE\" != x; then\n-        # That's good, now try to derive JT_HOME\n-        JT_HOME=`(cd $($DIRNAME $JTREGEXE)\/.. && pwd)`\n-        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-          AC_MSG_WARN([Ignoring jtreg from path since a valid jtreg home cannot be found])\n-          JT_HOME=\n-        else\n-          AC_MSG_NOTICE([Located jtreg using jtreg executable in path])\n-        fi\n-      fi\n-    fi\n-\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    if test \"x$JT_HOME\" != x; then\n-      AC_MSG_RESULT([$JT_HOME])\n-    else\n-      AC_MSG_RESULT([no, not found])\n-\n-      if test \"x$with_jtreg\" = xyes; then\n-        AC_MSG_ERROR([--with-jtreg was specified, but no jtreg found.])\n-      fi\n-    fi\n-  fi\n-\n-  UTIL_FIXUP_PATH(JT_HOME)\n-  AC_SUBST(JT_HOME)\n-])\n-\n-# Setup the JIB dependency resolver\n-AC_DEFUN_ONCE([TOOLCHAIN_SETUP_JIB],\n-[\n-  AC_ARG_WITH(jib, [AS_HELP_STRING([--with-jib],\n-      [Jib dependency management tool @<:@not used@:>@])])\n-\n-  if test \"x$with_jib\" = xno || test \"x$with_jib\" = x; then\n-    # jib disabled\n-    AC_MSG_CHECKING([for jib])\n-    AC_MSG_RESULT(no)\n-  elif test \"x$with_jib\" = xyes; then\n-    AC_MSG_ERROR([Must supply a value to --with-jib])\n-  else\n-    JIB_HOME=\"${with_jib}\"\n-    AC_MSG_CHECKING([for jib])\n-    AC_MSG_RESULT(${JIB_HOME})\n-    if test ! -d \"${JIB_HOME}\"; then\n-      AC_MSG_ERROR([--with-jib must be a directory])\n-    fi\n-    JIB_JAR=$(ls ${JIB_HOME}\/lib\/jib-*.jar)\n-    if test ! -f \"${JIB_JAR}\"; then\n-      AC_MSG_ERROR([Could not find jib jar file in ${JIB_HOME}])\n-    fi\n-  fi\n-\n-  AC_SUBST(JIB_HOME)\n-])\n","filename":"make\/autoconf\/toolchain.m4","additions":0,"deletions":120,"binary":false,"changes":120,"status":"modified"}]}