{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,2 @@\n+ * <li>{@code EMASK} &mdash; the bit mask of the operand type, where {@code EMASK=(1<<ESIZE*8)-1}\n+ *\n@@ -551,6 +553,1 @@\n-    \/** Produce {@code a>>>(n&(ESIZE*8-1))}  (see details for attention).  Integral only.\n-     * <p>\n-     * For operand types {@code byte} and {@code short} the operation behaves as if the operand is first implicitly widened\n-     * to an {@code int} value with {@code (a & ((1 << ESIZE) - 1))} the result of which is then applied as the operand to this\n-     * operation, the result of the operation is then narrowed from {@code int} to the operand type using an explicit cast.\n-     *\/\n+    \/** Produce {@code (a&EMASK)>>>(n&(ESIZE*8-1))}.  Integral only. *\/\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}