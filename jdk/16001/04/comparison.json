{"files":[{"patch":"@@ -681,1 +681,5 @@\n-        visitLooped(tree, super::visitForeachLoop);\n+        visitLooped(tree, foreach -> {\n+            scan(foreach.expr);\n+            refs.discardExprs(depth);       \/\/ we don't handle iterator() yet\n+            scan(foreach.body);\n+        });\n@@ -732,1 +736,4 @@\n-        visitDeferred(() -> visitScoped(false, () -> super.visitLambda(lambda)));\n+        visitDeferred(() -> visitScoped(false, () -> {\n+            scan(lambda.body);\n+            refs.discardExprs(depth);       \/\/ needed in case body is a JCExpression\n+        }));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -604,0 +604,16 @@\n+\n+    \/\/ Verify no assertion error occurs (JDK-8317336)\n+    public static class ThisEscapeAssertionError {\n+        public ThisEscapeAssertionError() {\n+            System.out.println((Supplier<Object>)() -> this);\n+        }\n+    }\n+\n+    \/\/ Verify no assertion error occurs (JDK-8317336)\n+    public static class ThisEscapeAssertionError2 {\n+        public ThisEscapeAssertionError2() {\n+            ThisEscapeAssertionError2[] array = new ThisEscapeAssertionError2[] { this };\n+            for (Object obj : array)\n+                ;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/warnings\/ThisEscape.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}