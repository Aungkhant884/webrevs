{"files":[{"patch":"@@ -712,3 +712,2 @@\n-    Klass* context = actual_recv->get_Klass();\n-    target = methodHandle(THREAD, Dependencies::find_unique_concrete_method(context,\n-                                                       root_m->get_Method()));\n+    InstanceKlass* context = actual_recv->get_instanceKlass();\n+    target = methodHandle(THREAD, Dependencies::find_unique_concrete_method(context, root_m->get_Method()));\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -911,1 +911,1 @@\n-Klass* Dependencies::DepStream::context_type() {\n+InstanceKlass* Dependencies::DepStream::context_type() {\n@@ -920,1 +920,1 @@\n-      return (Klass*)k;\n+      return InstanceKlass::cast((Klass*)k);\n@@ -930,2 +930,2 @@\n-      assert(k != NULL && k->is_klass(), \"type check\");\n-      return (Klass*) k;\n+      assert(k != NULL, \"type check\");\n+      return InstanceKlass::cast(k);\n@@ -1054,1 +1054,1 @@\n-  bool check_method_context(Klass* ctxk, Method* m) {\n+  bool check_method_context(InstanceKlass* ctxk, Method* m) {\n@@ -1121,1 +1121,5 @@\n-      return Dependencies::is_concrete_klass(k);\n+      if (Dependencies::is_concrete_klass(k)) {\n+        return record_witness(k); \/\/ concrete subtype\n+      } else {\n+        return false; \/\/ not a concrete class\n+      }\n@@ -1129,1 +1133,3 @@\n-      if (!Dependencies::is_concrete_method(m, ik)) {\n+      if (Dependencies::is_concrete_method(m, ik)) {\n+        return record_witness(k, m); \/\/ concrete method found\n+      } else {\n@@ -1143,2 +1149,1 @@\n-              _found_methods[_num_participants] = m;\n-              return true;\n+              return record_witness(k, m);\n@@ -1150,5 +1155,7 @@\n-        if (default_methods == NULL)\n-            return false;\n-        m = ik->find_method(default_methods, _name, _signature);\n-        if (!Dependencies::is_concrete_method(m, NULL))\n-            return false;\n+        if (default_methods != NULL) {\n+          Method* dm = ik->find_method(default_methods, _name, _signature);\n+          if (Dependencies::is_concrete_method(dm, NULL)) {\n+            return record_witness(k, dm); \/\/ default method found\n+          }\n+        }\n+        return false; \/\/ no concrete method found\n@@ -1156,4 +1163,0 @@\n-      _found_methods[_num_participants] = m;\n-      \/\/ Note:  If add_participant(k) is called,\n-      \/\/ the method m will already be memoized for it.\n-      return true;\n@@ -1172,1 +1175,10 @@\n-  bool ignore_witness(Klass* witness) {\n+\n+  bool record_witness(Klass* witness, Method* m) {\n+    _found_methods[_num_participants] = m;\n+    return record_witness(witness);\n+  }\n+\n+  \/\/ It is used by is_witness() to fill up participant list (of predefined size)\n+  \/\/ and to report the first witness candidate which doesn't fit into the list.\n+  \/\/ Returns true when no more witnesses can be recorded.\n+  bool record_witness(Klass* witness) {\n@@ -1174,1 +1186,1 @@\n-      return false;\n+      return true; \/\/ report the witness\n@@ -1178,1 +1190,1 @@\n-      return true;\n+      return false; \/\/ record the witness\n@@ -1199,1 +1211,1 @@\n-  Klass* find_witness_subtype(Klass* k, KlassDepChange* changes = NULL) {\n+  Klass* find_witness_subtype(InstanceKlass* context_type, KlassDepChange* changes = NULL) {\n@@ -1201,2 +1213,0 @@\n-    assert(k->is_instance_klass(), \"required\");\n-    InstanceKlass* context_type = InstanceKlass::cast(k);\n@@ -1214,1 +1224,1 @@\n-  Klass* find_witness_definer(Klass* k, KlassDepChange* changes = NULL) {\n+  Klass* find_witness_definer(InstanceKlass* context_type, KlassDepChange* changes = NULL) {\n@@ -1216,2 +1226,0 @@\n-    assert(k->is_instance_klass(), \"required\");\n-    InstanceKlass* context_type = InstanceKlass::cast(k);\n@@ -1314,2 +1322,1 @@\n-  if (is_witness(new_type) &&\n-      !ignore_witness(new_type)) {\n+  if (is_witness(new_type)) {\n@@ -1370,1 +1377,1 @@\n-    } else if (is_witness(sub) && !ignore_witness(sub)) {\n+    } else if (is_witness(sub)) {\n@@ -1451,1 +1458,1 @@\n-Klass* Dependencies::check_leaf_type(Klass* ctxk) {\n+Klass* Dependencies::check_leaf_type(InstanceKlass* ctxk) {\n@@ -1454,2 +1461,1 @@\n-  InstanceKlass* ctx = InstanceKlass::cast(ctxk);\n-  Klass* sub = ctx->subklass();\n+  Klass* sub = ctxk->subklass();\n@@ -1458,1 +1464,1 @@\n-  } else if (ctx->nof_implementors() != 0) {\n+  } else if (ctxk->nof_implementors() != 0) {\n@@ -1461,1 +1467,1 @@\n-    Klass* impl = ctx->implementor();\n+    InstanceKlass* impl = ctxk->implementor();\n@@ -1473,1 +1479,1 @@\n-Klass* Dependencies::check_abstract_with_unique_concrete_subtype(Klass* ctxk,\n+Klass* Dependencies::check_abstract_with_unique_concrete_subtype(InstanceKlass* ctxk,\n@@ -1486,1 +1492,1 @@\n-Klass* Dependencies::find_unique_concrete_subtype(Klass* ctxk) {\n+Klass* Dependencies::find_unique_concrete_subtype(InstanceKlass* ctxk) {\n@@ -1514,1 +1520,1 @@\n-Klass* Dependencies::check_unique_concrete_method(Klass*  ctxk,\n+Klass* Dependencies::check_unique_concrete_method(InstanceKlass* ctxk,\n@@ -1529,1 +1535,1 @@\n-Method* Dependencies::find_unique_concrete_method(Klass* ctxk, Method* m) {\n+Method* Dependencies::find_unique_concrete_method(InstanceKlass* ctxk, Method* m) {\n@@ -1560,1 +1566,1 @@\n-Klass* Dependencies::check_has_no_finalizable_subclasses(Klass* ctxk, KlassDepChange* changes) {\n+Klass* Dependencies::check_has_no_finalizable_subclasses(InstanceKlass* ctxk, KlassDepChange* changes) {\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":46,"deletions":40,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -400,4 +400,4 @@\n-  static Klass* check_leaf_type(Klass* ctxk);\n-  static Klass* check_abstract_with_unique_concrete_subtype(Klass* ctxk, Klass* conck, KlassDepChange* changes = NULL);\n-  static Klass* check_unique_concrete_method(Klass* ctxk, Method* uniqm, KlassDepChange* changes = NULL);\n-  static Klass* check_has_no_finalizable_subclasses(Klass* ctxk, KlassDepChange* changes = NULL);\n+  static Klass* check_leaf_type(InstanceKlass* ctxk);\n+  static Klass* check_abstract_with_unique_concrete_subtype(InstanceKlass* ctxk, Klass* conck, KlassDepChange* changes = NULL);\n+  static Klass* check_unique_concrete_method(InstanceKlass* ctxk, Method* uniqm, KlassDepChange* changes = NULL);\n+  static Klass* check_has_no_finalizable_subclasses(InstanceKlass* ctxk, KlassDepChange* changes = NULL);\n@@ -420,2 +420,2 @@\n-  static Klass*  find_unique_concrete_subtype(Klass* ctxk);\n-  static Method* find_unique_concrete_method(Klass* ctxk, Method* m);\n+  static Klass*  find_unique_concrete_subtype(InstanceKlass* ctxk);\n+  static Method* find_unique_concrete_method(InstanceKlass* ctxk, Method* m);\n@@ -579,1 +579,1 @@\n-    Klass* context_type();\n+    InstanceKlass* context_type();\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-  Klass* holder = JVMCIENV->asKlass(jvmci_type);\n+  InstanceKlass* holder = InstanceKlass::cast(JVMCIENV->asKlass(jvmci_type));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}