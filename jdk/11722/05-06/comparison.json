{"files":[{"patch":"@@ -282,4 +282,0 @@\n-        \/\/ Arbitrary value chosen to tolerate short writes, while avoiding\n-        \/\/ potential infinite busy loop.\n-        private static final int MAX_WRITE_RETRIES = 10;\n-\n@@ -289,2 +285,0 @@\n-                long expectedSize = Utils.remaining(items);\n-                long bytesWritten = 0;\n@@ -292,14 +286,4 @@\n-                int retries = 0;\n-                while (bytesWritten < expectedSize) {\n-                    long n = out.write(buffers);\n-                    if (n <= 0) {\n-                        retries++;\n-                        if (retries > MAX_WRITE_RETRIES) {\n-                            throw new IOException(\"zero bytes written\");\n-                        }\n-                    } else {\n-                        retries = 0;\n-                        bytesWritten = Math.addExact(bytesWritten, n);\n-                    }\n-                }\n-            } catch (IOException | ArithmeticException ex) {\n+                do {\n+                    out.write(buffers);\n+                } while (Utils.hasRemaining(buffers));\n+            } catch (IOException ex) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-            remain = Math.addExact(remain, buf.remaining());\n+            remain += buf.remaining();\n@@ -668,0 +668,8 @@\n+    public static boolean hasRemaining(ByteBuffer[] bufs) {\n+        for (ByteBuffer buf : bufs) {\n+            if (buf.hasRemaining())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n@@ -671,1 +679,1 @@\n-            remain = Math.addExact(remain, buf.remaining());\n+            remain += buf.remaining();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}