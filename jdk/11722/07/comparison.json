{"files":[{"patch":"@@ -285,1 +285,4 @@\n-                out.write(items.toArray(Utils.EMPTY_BB_ARRAY));\n+                ByteBuffer[] buffers = items.toArray(Utils.EMPTY_BB_ARRAY);\n+                do {\n+                    out.write(buffers);\n+                } while (Utils.hasRemaining(buffers));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -668,0 +668,8 @@\n+    public static boolean hasRemaining(ByteBuffer[] bufs) {\n+        for (ByteBuffer buf : bufs) {\n+            if (buf.hasRemaining())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8237470\n+ * @bug 8237470 8299015\n@@ -69,0 +69,2 @@\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n@@ -74,0 +76,2 @@\n+import java.util.concurrent.Flow;\n+import java.util.stream.IntStream;\n@@ -202,0 +206,24 @@\n+    \/\/ A large enough number of buffers to gather from, in an attempt to provoke a partial\n+    \/\/ write. Loosely based on the value of _SC_IOV_MAX, to trigger partial gathering write.\n+    private static final int NUM_GATHERING_BUFFERS = 1024 + 1;\n+\n+    @Test\n+    public void testSubscribersWritesAllBytes() throws Exception {\n+        var buffers = IntStream.range(0, NUM_GATHERING_BUFFERS)\n+                .mapToObj(i -> new byte[10])\n+                .map(ByteBuffer::wrap).toList();\n+        int expectedSize = buffers.stream().mapToInt(Buffer::remaining).sum();\n+\n+        var subscriber = BodySubscribers.ofFile(defaultFsPath);\n+        subscriber.onSubscribe(new Flow.Subscription() {\n+            @Override\n+            public void request(long n) { }\n+            @Override\n+            public void cancel() { }\n+        });\n+        subscriber.onNext(buffers);\n+        subscriber.onComplete();\n+        buffers.forEach(b -> assertEquals(b.remaining(), 0) );\n+        assertEquals(expectedSize, Files.size(defaultFsPath));\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodySubscriberOfFileTest.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"}]}