{"files":[{"patch":"@@ -282,0 +282,4 @@\n+        \/\/ Arbitrary value chosen to tolerate short writes, while avoiding\n+        \/\/ potential infinite busy loop.\n+        private static final int MAX_WRITE_RETRIES = 10;\n+\n@@ -285,2 +289,17 @@\n-                out.write(items.toArray(Utils.EMPTY_BB_ARRAY));\n-            } catch (IOException ex) {\n+                long expectedSize = Utils.remaining(items);\n+                long bytesWritten = 0;\n+                ByteBuffer[] buffers = items.toArray(Utils.EMPTY_BB_ARRAY);\n+                int retries = 0;\n+                while (bytesWritten < expectedSize) {\n+                    long n = out.write(buffers);\n+                    if (n <= 0) {\n+                        retries++;\n+                        if (retries > MAX_WRITE_RETRIES) {\n+                            throw new IOException(\"zero bytes written\");\n+                        }\n+                    } else {\n+                        retries = 0;\n+                        bytesWritten = Math.addExact(bytesWritten, n);\n+                    }\n+                }\n+            } catch (IOException | ArithmeticException ex) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-            remain += buf.remaining();\n+            remain = Math.addExact(remain, buf.remaining());\n@@ -671,1 +671,1 @@\n-            remain += buf.remaining();\n+            remain = Math.addExact(remain, buf.remaining());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8237470\n+ * @bug 8237470 8299015\n@@ -69,0 +69,2 @@\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n@@ -74,0 +76,2 @@\n+import java.util.concurrent.Flow;\n+import java.util.stream.IntStream;\n@@ -202,0 +206,24 @@\n+    \/\/ A large enough number of buffers to gather from, in an attempt to provoke a partial\n+    \/\/ write. Loosely based on the value of _SC_IOV_MAX, to trigger partial gathering write.\n+    private static final int NUM_GATHERING_BUFFERS = 1024 + 1;\n+\n+    @Test\n+    public void testSubscribersWritesAllBytes() throws Exception {\n+        var buffers = IntStream.range(0, NUM_GATHERING_BUFFERS)\n+                .mapToObj(i -> new byte[10])\n+                .map(ByteBuffer::wrap).toList();\n+        int expectedSize = buffers.stream().mapToInt(Buffer::remaining).sum();\n+\n+        var subscriber = BodySubscribers.ofFile(defaultFsPath);\n+        subscriber.onSubscribe(new Flow.Subscription() {\n+            @Override\n+            public void request(long n) { }\n+            @Override\n+            public void cancel() { }\n+        });\n+        subscriber.onNext(buffers);\n+        subscriber.onComplete();\n+        buffers.forEach(b -> assertEquals(b.remaining(), 0) );\n+        assertEquals(expectedSize, Files.size(defaultFsPath));\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodySubscriberOfFileTest.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"}]}