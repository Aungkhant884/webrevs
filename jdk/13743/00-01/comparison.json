{"files":[{"patch":"@@ -2038,23 +2038,20 @@\n-                if (!selfSigned) {\n-                    attrs = new CK_ATTRIBUTE[] {\n-                        ATTR_TOKEN_TRUE,\n-                        ATTR_CLASS_CERT,\n-                        new CK_ATTRIBUTE(CKA_SUBJECT,\n-                            cert.getIssuerX500Principal().getEncoded())\n-                    };\n-                    long[] ch = findObjects(session, attrs);\n-                    if (ch.length > 0) {\n-                        \/\/ if more than one found, use first\n-                        if (debug != null && ch.length > 1) {\n-                            debug.println(\"destroyChain found \" +\n-                                ch.length +\n-                                \" certificate entries for subject [\" +\n-                                cert.getIssuerX500Principal() +\n-                                \"] in token - using first entry\");\n-                        }\n-                        currHdl = ch[0];\n-                    } else {\n-                        currHdl = 0L;\n-                    }\n-                } else {\n-                    currHdl = 0L;\n+                if (selfSigned) {\n+                    break; \/\/ done\n+                }\n+                attrs = new CK_ATTRIBUTE[] {\n+                    ATTR_TOKEN_TRUE,\n+                    ATTR_CLASS_CERT,\n+                    new CK_ATTRIBUTE(CKA_SUBJECT,\n+                        cert.getIssuerX500Principal().getEncoded())\n+                };\n+                long[] ch = findObjects(session, attrs);\n+                if (ch.length == 0) {\n+                    break;\n+                }\n+                \/\/ if more than one found, use first\n+                if (debug != null && ch.length > 1) {\n+                    debug.println(\"destroyChain found \" +\n+                        ch.length +\n+                        \" certificate entries for subject [\" +\n+                        cert.getIssuerX500Principal() +\n+                        \"] in token - using first entry\");\n@@ -2062,0 +2059,1 @@\n+                currHdl = ch[0];\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyStore.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary KeyStore support for NSS cert\/key databases\n+ * @summary test cert chain deletion logic w\/ NSS PKCS11 KeyStore\n@@ -30,1 +30,1 @@\n-\n+import jdk.test.lib.SecurityTools;\n@@ -33,1 +33,0 @@\n-import java.nio.charset.Charset;\n@@ -36,0 +35,1 @@\n+import java.security.Key;\n@@ -38,2 +38,0 @@\n-import java.security.KeyFactory;\n-import java.security.PrivateKey;\n@@ -41,9 +39,1 @@\n-import java.security.Signature;\n-import java.security.Security;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.cert.*;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-\n-import javax.security.auth.Subject;\n+import java.security.cert.Certificate;\n@@ -60,2 +50,0 @@\n-    private static final char[] tokenPwd =\n-                        new char[] { 't', 'e', 's', 't', '1', '2' };\n@@ -63,1 +51,11 @@\n-    private static final String KS_TYPE = \"PKCS11\";\n+    private record KeyStoreInfo(File file, String type, char[] passwd) {}\n+\n+    private static final KeyStoreInfo TEMP = new KeyStoreInfo(\n+            new File(DIR, \"temp.ks\"),\n+            \"JKS\",\n+            new char[] { 'c', 'h', 'a', 'n', 'g', 'e', 'i', 't' });\n+\n+    private static final KeyStoreInfo PKCS11KS = new KeyStoreInfo(\n+            null,\n+            \"PKCS11\",\n+            new char[] { 't', 'e', 's', 't', '1', '2' });\n@@ -69,0 +67,4 @@\n+        \/\/ if temp keystore already exists; skip the creation\n+        if (!TEMP.file.exists()) {\n+            createKeyStore(TEMP);\n+        }\n@@ -73,2 +75,0 @@\n-    private static class FooEntry implements KeyStore.Entry { }\n-\n@@ -80,28 +80,0 @@\n-    private static PrivateKey getPrivateKey(String fn)\n-            throws NoSuchAlgorithmException, IOException,\n-            InvalidKeySpecException, FileNotFoundException,\n-            ClassNotFoundException {\n-        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-\n-        FileInputStream fis = new FileInputStream(new File(DIR, fn));\n-        String key = new String(fis.readAllBytes(), Charset.defaultCharset());\n-        String privKeyPEM = key.replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n-                .replaceAll(\"\\\\n\", \"\")\n-                .replace(\"-----END PRIVATE KEY-----\", \"\");\n-\n-        byte[] privKeyBytes = Base64.getDecoder().decode(privKeyPEM);\n-        return kf.generatePrivate(new PKCS8EncodedKeySpec(privKeyBytes));\n-    }\n-\n-    private static Certificate[] getCertificateChain(String... fn)\n-            throws NoSuchAlgorithmException, NoSuchProviderException,\n-            CertificateException, FileNotFoundException {\n-        Certificate[] chain = new Certificate[fn.length];\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\", \"SUN\");\n-        for (int i = 0; i < chain.length; i++) {\n-            chain[i] = cf.generateCertificate(new FileInputStream\n-                (new File(DIR, fn[i])));\n-        }\n-        return chain;\n-    }\n-\n@@ -131,0 +103,2 @@\n+                System.out.println(\"expChain: \" + expChain.length);\n+                System.out.println(\"actualChain: \" + chain.length);\n@@ -138,0 +112,13 @@\n+        KeyStore sunks = KeyStore.getInstance(TEMP.type, \"SUN\");\n+        sunks.load(new FileInputStream(TEMP.file), TEMP.passwd);\n+        printKeyStore(\"Starting with: \", sunks);\n+\n+        KeyStore p11ks;\n+        try {\n+            p11ks = KeyStore.getInstance(PKCS11KS.type, p);\n+            p11ks.load(null, PKCS11KS.passwd);\n+            printKeyStore(\"Initial PKCS11 KeyStore: \", p11ks);\n+        } catch (Exception e) {\n+            System.out.println(\"Skip test, due to \" + e);\n+            return;\n+        }\n@@ -139,7 +126,7 @@\n-        KeyStore ks = KeyStore.getInstance(KS_TYPE, p);\n-        ks.load(null, tokenPwd);\n-        printKeyStore(\"Initial: \", ks);\n-\n-        PrivateKey pk1PrivKey = getPrivateKey(\"pk1.key\");\n-        Certificate[] pk1Chain =\n-                getCertificateChain(\"pk1.cert\", \"ca.cert\");\n+        \/\/ get the necessary keys from the temp keystore\n+        Key pk1PrivKey = sunks.getKey(\"pk1\", TEMP.passwd);\n+        Certificate pk1Cert = sunks.getCertificate(\"pk1\");\n+        Key caPrivKey = sunks.getKey(\"ca1\", TEMP.passwd);\n+        Certificate ca1Cert = sunks.getCertificate(\"ca1\");\n+        Key rootPrivKey = sunks.getKey(\"root\", TEMP.passwd);\n+        Certificate rootCert = sunks.getCertificate(\"root\");\n@@ -147,2 +134,3 @@\n-        PrivateKey caPrivKey = getPrivateKey(\"ca.key\");\n-        Certificate[] caChain = getCertificateChain(\"ca.cert\");\n+        Certificate[] pk1Chain = { pk1Cert, ca1Cert, rootCert };\n+        Certificate[] ca1Chain = { ca1Cert, rootCert };\n+        Certificate[] rootChain = { rootCert };\n@@ -151,4 +139,20 @@\n-        System.out.println(\"Add pk1 and ca, then delete pk1\");\n-        ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n-        ks.setKeyEntry(\"ca\", caPrivKey, null, caChain);\n-        ks.deleteEntry(\"pk1\");\n+        System.out.println(\"Add pk1, ca1 and root, then delete pk1\");\n+        p11ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n+        p11ks.setKeyEntry(\"ca1\", caPrivKey, null, ca1Chain);\n+        p11ks.setKeyEntry(\"root\", rootPrivKey, null, rootChain);\n+        p11ks.deleteEntry(\"pk1\");\n+\n+        \/\/ reload the keystore\n+        p11ks.store(null, PKCS11KS.passwd);\n+        p11ks.load(null, PKCS11KS.passwd);\n+        printKeyStore(\"Reload#1: ca1 \/ root\", p11ks);\n+\n+        \/\/ should only have \"ca1\" and \"root\"\n+        checkEntry(p11ks, \"pk1\", null);\n+        checkEntry(p11ks, \"ca1\", ca1Chain);\n+        checkEntry(p11ks, \"root\", rootChain);\n+\n+        \/\/ now add \"pk1\" and delete \"ca1\"\n+        System.out.println(\"Now add pk1 and delete ca1\");\n+        p11ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n+        p11ks.deleteEntry(\"ca1\");\n@@ -157,3 +161,3 @@\n-        ks.store(null, tokenPwd);\n-        ks.load(null, tokenPwd);\n-        printKeyStore(\"Reload#1: \", ks);\n+        p11ks.store(null, PKCS11KS.passwd);\n+        p11ks.load(null, PKCS11KS.passwd);\n+        printKeyStore(\"Reload#2: pk1 \/ root\", p11ks);\n@@ -161,3 +165,4 @@\n-        \/\/ should only have \"ca\"\n-        checkEntry(ks, \"pk1\", null);\n-        checkEntry(ks, \"ca\", caChain);\n+        \/\/ should only have \"pk1\" and \"root\" now\n+        checkEntry(p11ks, \"pk1\", pk1Chain);\n+        checkEntry(p11ks, \"ca1\", null);\n+        checkEntry(p11ks, \"root\", rootChain);\n@@ -165,4 +170,3 @@\n-        \/\/ now add \"pk1\" and delete \"ca\"\n-        System.out.println(\"Now add pk1 and delete ca\");\n-        ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n-        ks.deleteEntry(\"ca\");\n+        \/\/ now delete \"root\"\n+        System.out.println(\"Now delete root\");\n+        p11ks.deleteEntry(\"root\");\n@@ -171,3 +175,3 @@\n-        ks.store(null, tokenPwd);\n-        ks.load(null, tokenPwd);\n-        printKeyStore(\"Reload#2: \", ks);\n+        p11ks.store(null, PKCS11KS.passwd);\n+        p11ks.load(null, PKCS11KS.passwd);\n+        printKeyStore(\"Reload#3: pk1\", p11ks);\n@@ -176,2 +180,3 @@\n-        checkEntry(ks, \"pk1\", pk1Chain);\n-        checkEntry(ks, \"ca\", null);\n+        checkEntry(p11ks, \"pk1\", pk1Chain);\n+        checkEntry(p11ks, \"ca1\", null);\n+        checkEntry(p11ks, \"root\", null);\n@@ -181,1 +186,1 @@\n-        ks.deleteEntry(\"pk1\");\n+        p11ks.deleteEntry(\"pk1\");\n@@ -184,3 +189,3 @@\n-        ks.store(null, tokenPwd);\n-        ks.load(null, tokenPwd);\n-        printKeyStore(\"Reload#3: \", ks);\n+        p11ks.store(null, PKCS11KS.passwd);\n+        p11ks.load(null, PKCS11KS.passwd);\n+        printKeyStore(\"Reload#4: \", p11ks);\n@@ -188,3 +193,4 @@\n-        \/\/ should only have nothing now\n-        checkEntry(ks, \"pk1\", null);\n-        checkEntry(ks, \"ca\", null);\n+        \/\/ should have nothing now\n+        checkEntry(p11ks, \"pk1\", null);\n+        checkEntry(p11ks, \"ca1\", null);\n+        checkEntry(p11ks, \"root\", null);\n@@ -194,0 +200,31 @@\n+\n+    private static void createKeyStore(KeyStoreInfo ksi) throws Exception {\n+        System.out.println(\"Creating keypairs and storing them into \" +\n+            ksi.file.getAbsolutePath());\n+        String keyGenOptions = \" -keyalg RSA -keysize 2048 \";\n+        String keyStoreOptions = \" -keystore \" + ksi.file.getAbsolutePath() +\n+                \" -storetype \" + ksi.type + \" -storepass \" +\n+                new String(ksi.passwd);\n+\n+        String[] aliases = { \"ROOT\", \"CA1\", \"PK1\" };\n+        for (String n : aliases) {\n+            SecurityTools.keytool(\"-genkeypair -alias \" + n +\n+                \" -dname CN=\" + n + keyGenOptions + keyStoreOptions);\n+            String issuer = switch (n) {\n+                case \"CA1\"-> \"ROOT\";\n+                case \"PK1\"-> \"CA1\";\n+                default-> null;\n+            };\n+            if (issuer != null) {\n+                \/\/ export CSR and issue the cert using the issuer\n+                SecurityTools.keytool(\"-certreq -alias \" + n +\n+                    \" -file tmp.req\" + keyStoreOptions);\n+                SecurityTools.keytool(\"-gencert -alias \" + issuer +\n+                    \" -infile tmp.req -outfile tmp.cert -validity 3650\" +\n+                    keyStoreOptions);\n+                SecurityTools.keytool(\"-importcert -alias \" + n +\n+                    \" -file tmp.cert\" + keyStoreOptions);\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval.java","additions":119,"deletions":82,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -1,18 +0,0 @@\n------BEGIN CERTIFICATE-----\n-MIIC7TCCAdWgAwIBAgIJALNUl5ObEyk4MA0GCSqGSIb3DQEBCwUAMA0xCzAJBgNV\n-BAMMAkNBMB4XDTIzMDQyNjIyMzMwMVoXDTMzMDQyMzIyMzMwMVowDTELMAkGA1UE\n-AwwCQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDS4rFdDe9FQoGG\n-JUOK4upVT6zF76dfoByX2fuyz+IadO6Z2zHZqiwQVda87HsyuDTg+JkkHrCBdxQc\n-DFyI9P8ymIqjpMORqln8fw5l3Yj37IOE0XlIKvIOdwaZWfz10Ibs8U+VE+wS0pF2\n-yZSZe0dLLcO\/OYogKeDKSJvUc7dO\/kWtRrTIAN6C7cSlBqucjgnwkCQHnzaXVXbB\n-5apNHfpo7ec8AktFL9za7AjpLXt3KIqIK8zi3\/tYy6ljmtgd0xlgeHGmVVd8OSlB\n-FD3+UEUVixXPT500W77F18Qf9XxFypcf83IHU4uofSB\/cx6Uj1bV2QxV5oaXd0cy\n-AC0prd\/1AgMBAAGjUDBOMB0GA1UdDgQWBBT6LjRyPCRkOQQ6yqp6XPaQOObW5TAf\n-BgNVHSMEGDAWgBT6LjRyPCRkOQQ6yqp6XPaQOObW5TAMBgNVHRMEBTADAQH\/MA0G\n-CSqGSIb3DQEBCwUAA4IBAQCyijjOpX5zVlxQAH7HzInevtBYogsUWEBYtaaI8dVl\n-Y\/+o8Z9KEVRS\/4IYet8G41QkLe8fBB3nWWWrYejWM4zYsj0ENjJXtqxrJhLoJA7v\n-XKr73j9CrfbRJ8orDJRq2qVFco9PwDuNuhYV1TYE0tk\/O+c7VtXyRWMng9MsidbM\n-OgrAF5QNGdggvCYVsi6GDNc201FGa2xYhTNjWo5LzbLf2fsw9bH6\/PUAg3iLPEZS\n-uSKaFrwSmFPWnfbz321yfovVW3DdIQPoxmEFfyFfUJU3EBBws8doPyZH\/7K4AfKl\n-F7f\/KIOF\/40UnlStemsIPhMKMO2i9BpIaiwI+Cg\/J\/xL\n------END CERTIFICATE-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/ca.cert","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n------BEGIN PRIVATE KEY-----\n-MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDS4rFdDe9FQoGG\n-JUOK4upVT6zF76dfoByX2fuyz+IadO6Z2zHZqiwQVda87HsyuDTg+JkkHrCBdxQc\n-DFyI9P8ymIqjpMORqln8fw5l3Yj37IOE0XlIKvIOdwaZWfz10Ibs8U+VE+wS0pF2\n-yZSZe0dLLcO\/OYogKeDKSJvUc7dO\/kWtRrTIAN6C7cSlBqucjgnwkCQHnzaXVXbB\n-5apNHfpo7ec8AktFL9za7AjpLXt3KIqIK8zi3\/tYy6ljmtgd0xlgeHGmVVd8OSlB\n-FD3+UEUVixXPT500W77F18Qf9XxFypcf83IHU4uofSB\/cx6Uj1bV2QxV5oaXd0cy\n-AC0prd\/1AgMBAAECggEBAJ7WZCTko\/2UtB4n3xGzDDEpi8aiVXyvChpN80ihT3oB\n-7N0xvgBmLj43iUBPFhQDrsBsPlx4SRWabSkbHm+BqN2hC3tqVGtY1eJaiKutCsdB\n-+2WEqUb0IdFHUU8b+m3jnFzG\/NwaX0tmEm5YMnbP5cj4NWHIowLKyCdUPRrt9Xmm\n-qRh9euc4LM2VKVv7OATMi9KH2CYkWW+DdDsqBK4wWGlKBX8Wh4I4C07ylppIfBGr\n-U\/9aAanSvMtoB6dbGf8JjRogSxRjLxDrJS5WjYAsEP0Cwr6ad5sXkdoESrPpoTvl\n-w6JInldo80u3Lvht+dEgkYiam1Zx3H2etBGYeisx\/gECgYEA7Vbrvs7IWHxHDkia\n-vaKi778ExkwQtHheO3rM7EOgrwoH9YrPfsfGJYAdHqYbXNnPtXPP\/+nGT+Cab2t7\n-++k6ibhFhxjFuuWMkEam1ZloESaqunYTuKGCzW4IgeTVLJWVvx\/6l\/b\/NR6YBDkm\n-SixA+\/BZI6H3oXTYpEvnKy6J2DUCgYEA43dQzzgCaS6F0RWrNhhZERdlvfpOi0\/D\n-VwqSm57bOStLJKAC5WvQOodZASjdVTbB2ABByBQDsq1zNbhBClnwUiaRgXzm0Jr6\n-Ro1FJ03MuHHWyM+wty++b74cghz7gRV6FOVNrxyahio\/wDjU9y4izFKLHy7xa8qy\n-it\/5pJm2YMECgYAvq1SgN1IgC54N7WE\/E2pccuZXmbGFPePXWHvOPGsKnR4qIB46\n-3Y8buxaeMEiwpoLEdCVjxiVxp6\/9Dv6RAzAhtyQn1T7poe9QjxA1OKGhSD3kQ5EE\n-dVQbRK1qwXZbhRPVlmuzmAV8Os\/XkU7yeN74eza8JGzjPd\/BaAlfL\/K5vQKBgBpf\n-6FfOp8Doaw2+VHbWReWMb\/iiQF845W5\/RFaVCdhMI89gWlWdtaxDq1dOFLPfwIQ6\n-K2Z2o6MhJ32wGqKHoSz1WePIxr6jaaeqk70l8TnlwUDRjC0BdTRht86Ca8sg4WHw\n-4JwQVf5+gZvZOyBaEiDc5VK9T7Lu8trVc43ZYONBAoGBAJ\/Ohh\/5eUuYIaT\/GgJ\/\n-xU2s03VX03nMNvNVl3fYUHV0J11m\/s6erPhvt7h4k\/mzaM5VfMqgJl03dCb3JPp5\n-EOUs\/KGkz+wBk7nsUi2lMw4mZ8O4081WO+utkSQUjJBehyA\/TAh+RAa6Xqket0iF\n-Wtew+M1pPd4ZIXudPJdLTajw\n------END PRIVATE KEY-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/ca.key","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,16 +0,0 @@\n------BEGIN CERTIFICATE-----\n-MIIClzCCAX8CCQDtJWY8c+qlkjANBgkqhkiG9w0BAQsFADANMQswCQYDVQQDDAJD\n-QTAeFw0yMzA0MjYyMjQ1MDdaFw0zMzA0MjMyMjQ1MDdaMA4xDDAKBgNVBAMMA3Br\n-MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOZPBtz+4NvgoYD3YFId\n-77vbmaGFtJDVm3lf46SrfL6q8nWEN8z\/k6ea\/7cZmGj5d8IGSTZy5F1PwILwhg0x\n-MkwvCUlCjQ8Ic5rZ6ocUSB9UdFURJDzYICZuQQyugFpCqhEAX11n1EhA7D2BqxYE\n-yBbQrJlcEHbZR+Ng9KvCQrvFbU\/eFHh\/NwEvIXeca9JX8NQqVqkw+WD6NdQXtgTk\n-oARZjZifPwwsyYmcXqCEwV9i8kW8B0cinOyihHJkXxkhirEg1aDaBjqw5N9CanX1\n-BFoemtBN\/sNj3+bh3RecxU0YcFDQUeOcppQ1aD8OXyZcjHVhtzVTh0KwwL+dja\/j\n-KAUCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAAXc5JJADrlHb\/kbcdN+6RRdKy8na\n-sAqn2\/acUN5gY5cfGLBU\/pPXp1EuVOLZtcEX33xjN97gX92GwKoA1TCzVe\/XRMKZ\n-G3+IIX9xM8O8VWfumFHFaNhjngUAoDDUlwx41bEcMIjFBFxoSqFo9bT\/zmZsQaP4\n-wLoo61cxHV5bB1iv0XvKrTCHPTzy0GxcnjIn2JnAJaiPmC3doQCWpXSU8GPNnzT7\n-RFSwrJKIkEY6RUuXDy9oRmnAWwcPinuRi+Re0JUw2we8zouGRQVDUj2S2ezkICmL\n-xLSyMM5XJgJY7GliT77iZZ+nqmvHEt2QSMsUEJ\/vNGCV6Jp0iMJb5NGpDw==\n------END CERTIFICATE-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/pk1.cert","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n------BEGIN PRIVATE KEY-----\n-MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDmTwbc\/uDb4KGA\n-92BSHe+725mhhbSQ1Zt5X+Okq3y+qvJ1hDfM\/5Onmv+3GZho+XfCBkk2cuRdT8CC\n-8IYNMTJMLwlJQo0PCHOa2eqHFEgfVHRVESQ82CAmbkEMroBaQqoRAF9dZ9RIQOw9\n-gasWBMgW0KyZXBB22UfjYPSrwkK7xW1P3hR4fzcBLyF3nGvSV\/DUKlapMPlg+jXU\n-F7YE5KAEWY2Ynz8MLMmJnF6ghMFfYvJFvAdHIpzsooRyZF8ZIYqxINWg2gY6sOTf\n-Qmp19QRaHprQTf7DY9\/m4d0XnMVNGHBQ0FHjnKaUNWg\/Dl8mXIx1Ybc1U4dCsMC\/\n-nY2v4ygFAgMBAAECggEARM6\/gi80Bv0pw1olEOOYyEtnrvY\/aDYpaS3Y2U3SyzRP\n-lASYl0qUVrLcS1v+SP6fZPxzyyywRaCaJ4SsyCw2lsRGxfh4JFGmGFGa3BiXI6Ub\n-zH5+kR8RG+o8zQkll9Hq9YFi\/IkUxzF+YzHmZ4GuNgLKTldPI\/Luo2RINTior2hP\n-klhWeuh4cKPCQ8DrSMKk23hp9Kx6m8+J3QkAIlyaAThlmbmIYjAQhm5FcjHrEQU\/\n-ypBEL\/y+1aBqfF2uKv3drjGAwgxy9N6SgCIQYpwPtQYDCC+AGbYiPG2D4sDOdn5X\n-uFJnPRivmBHOcpSMSA9n1dVDHQcr3GkoApNmDtnwUQKBgQD14cv49gzohNm6xqLE\n-zWAx8G9MxUH\/vR+Pt\/st\/nwLhOMs2iiT1gdOQh4hU96KM+NnWZGM5hay3+s2O2Pw\n-ZtEln0yFZBPeRA\/Nrjs7X3DFlHWxvIJivX9n9\/Myv6PfqMnLELUTmTMCmkX9TUg1\n-os2OCQ1ZtQe4UGI4LjhhWdYQhwKBgQDvySzs+VWNEnq0QYnMjC+UPSTfJgG1EsAp\n-\/5+uG0QSMviQTsQK68W9gjAAu1995BthgTcZJz6osrh0YeJT6ToN\/gTcJCAzWOCx\n-imX+cRdh2Z2COu8C+4IYnMZkQq2E85SyPONyYuOkstf0iT4zmXnDGcnd99HxGk04\n-c1TZDEIiEwKBgQCOYJJY9jkhRxRAyBamePoT0NLSFIMUEDI\/aVykFHFFxkw5w5Wt\n-jUirszN5PvRk+IjcZowWl4FbULgFrjw\/j3naHDUWJI4wrR6tjg80YR6O+llwcuTZ\n-QjuNO5FyuG+u6jD3ShRgZdyYzDZs55xBmqUGcw1s\/ZubycgmGfWBwaBn7wKBgFHX\n-56am3+V71jfqWr9fZeoCCLDFxzVnxgFPx8\/kbJKNpTuUNuPHX8H0SrAlRE2y6wmX\n-0heaxo9MGRtYQakEZRVbi4scJYWBI4hVxcRYE3QJk\/JcbTImaFxAPpMAEzva6\/j+\n-QV\/MkwinJoDHy1xPWTkXd0h1CspxgMPw0ZgX0AbTAoGAFEI3nIkV1ElQA3J0Oxsg\n-HX6rLKI3Bi7T6I2tv2MCKephs0SK3pfv+AUNVD9toDTI6axJYSChyWxpsP0QfWHc\n-Gx71N9K9+eO9fGLozWLZfjZEehBupOzVnafFWSAXjna5+HKF7BzS5uyi6sR0vfgH\n-88yXb8QIme+\/gPcGJpOQI94=\n------END PRIVATE KEY-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/pk1.key","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/temp.ks","binary":true,"status":"added"}]}