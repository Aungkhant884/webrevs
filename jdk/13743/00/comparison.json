{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -787,1 +787,1 @@\n-                dumpTokenMap();\n+                dumpTokenMap(debug);\n@@ -869,1 +869,1 @@\n-                dumpTokenMap();\n+                dumpTokenMap(debug);\n@@ -1155,1 +1155,1 @@\n-                    dumpTokenMap();\n+                    dumpTokenMap(debug);\n@@ -1232,1 +1232,1 @@\n-            if (ch == null || ch.length == 0) {\n+            if (ch.length == 0) {\n@@ -1983,8 +1983,6 @@\n-            X509Certificate endCert = loadCert(session, h.handle);\n-            token.p11.C_DestroyObject(session.id(), h.handle);\n-            if (debug != null) {\n-                debug.println(\"destroyChain destroyed end entity cert \" +\n-                        \"with CKA_ID [\" +\n-                        getIDNullSafe(cka_id) +\n-                        \"]\");\n-            }\n+            long currHdl = h.handle;\n+            boolean checkPrivKey = false;\n+            while (currHdl != 0L) {\n+                X509Certificate cert = loadCert(session, currHdl);\n+                boolean selfSigned = cert.getSubjectX500Principal().equals\n+                        (cert.getIssuerX500Principal());\n@@ -1992,4 +1990,10 @@\n-            \/\/ build chain following issuer->subject links\n-\n-            X509Certificate next = endCert;\n-            while (true) {\n+                \/\/ only delete if both of the followings are true\n+                \/\/ 1) no other certs depend on it\n+                \/\/ 2) not corresponds to any private key\n+                CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[] {\n+                    ATTR_TOKEN_TRUE,\n+                    ATTR_CLASS_CERT,\n+                    new CK_ATTRIBUTE(CKA_ISSUER,\n+                        cert.getSubjectX500Principal().getEncoded())\n+                };\n+                boolean destroyIt = true;\n@@ -1997,4 +2001,4 @@\n-                if (next.getSubjectX500Principal().equals\n-                    (next.getIssuerX500Principal())) {\n-                    \/\/ self-signed - done\n-                    break;\n+                long[] dependents = findObjects(session, attrs);\n+                if (dependents.length > 1 ||\n+                        (!selfSigned && dependents.length == 1)) {\n+                    destroyIt = false;\n@@ -2003,1 +2007,33 @@\n-                CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[] {\n+                if (destroyIt && checkPrivKey) {\n+                    \/\/ proceed with checking if there is a private key\n+                    attrs = new CK_ATTRIBUTE[] {\n+                        new CK_ATTRIBUTE(CKA_ID),\n+                    };\n+                    token.p11.C_GetAttributeValue(session.id(), currHdl, attrs);\n+                    byte[] currId = attrs[0].getByteArray();\n+                    if (currId != null) {\n+                        attrs = new CK_ATTRIBUTE[] {\n+                            ATTR_TOKEN_TRUE,\n+                            ATTR_CLASS_PKEY,\n+                            new CK_ATTRIBUTE(CKA_ID, currId)\n+                        };\n+                        long[] privKeys = findObjects(session, attrs);\n+                        destroyIt = privKeys.length == 0;\n+                    }\n+                }\n+                if (destroyIt) {\n+                    token.p11.C_DestroyObject(session.id(), currHdl);\n+                    if (debug != null) {\n+                        debug.println(\"destroyChain destroyed cert in chain \" +\n+                            \"with subject [\" +\n+                            cert.getSubjectX500Principal() + \"]\");\n+                    }\n+                } else {\n+                    if (debug != null) {\n+                        debug.println(\"destroyChain did not destroy \" +\n+                            \"shared cert in chain with subject [\" +\n+                            cert.getSubjectX500Principal() + \"]\");\n+                    }\n+                }\n+                if (!selfSigned) {\n+                    attrs = new CK_ATTRIBUTE[] {\n@@ -2007,10 +2043,7 @@\n-                                  next.getIssuerX500Principal().getEncoded()) };\n-                long[] ch = findObjects(session, attrs);\n-\n-                if (ch == null || ch.length == 0) {\n-                    \/\/ done\n-                    break;\n-                } else {\n-                    \/\/ if more than one found, use first\n-                    if (debug != null && ch.length > 1) {\n-                        debug.println(\"destroyChain found \" +\n+                            cert.getIssuerX500Principal().getEncoded())\n+                    };\n+                    long[] ch = findObjects(session, attrs);\n+                    if (ch.length > 0) {\n+                        \/\/ if more than one found, use first\n+                        if (debug != null && ch.length > 1) {\n+                            debug.println(\"destroyChain found \" +\n@@ -2019,1 +2052,1 @@\n-                                next.getIssuerX500Principal() +\n+                                cert.getIssuerX500Principal() +\n@@ -2021,34 +2054,0 @@\n-                    }\n-\n-                    next = loadCert(session, ch[0]);\n-\n-                    \/\/ only delete if not part of any other chain\n-\n-                    attrs = new CK_ATTRIBUTE[] {\n-                        ATTR_TOKEN_TRUE,\n-                        ATTR_CLASS_CERT,\n-                        new CK_ATTRIBUTE(CKA_ISSUER,\n-                                next.getSubjectX500Principal().getEncoded()) };\n-                    long[] issuers = findObjects(session, attrs);\n-\n-                    boolean destroyIt = false;\n-                    if (issuers == null || issuers.length == 0) {\n-                        \/\/ no other certs with this issuer -\n-                        \/\/ destroy it\n-                        destroyIt = true;\n-                    } else if (issuers.length == 1) {\n-                        X509Certificate iCert = loadCert(session, issuers[0]);\n-                        if (next.equals(iCert)) {\n-                            \/\/ only cert with issuer is itself (self-signed) -\n-                            \/\/ destroy it\n-                            destroyIt = true;\n-                        }\n-                    }\n-\n-                    if (destroyIt) {\n-                        token.p11.C_DestroyObject(session.id(), ch[0]);\n-                        if (debug != null) {\n-                            debug.println\n-                                (\"destroyChain destroyed cert in chain \" +\n-                                \"with subject [\" +\n-                                next.getSubjectX500Principal() + \"]\");\n@@ -2056,0 +2055,1 @@\n+                        currHdl = ch[0];\n@@ -2057,5 +2057,1 @@\n-                        if (debug != null) {\n-                            debug.println(\"destroyChain did not destroy \" +\n-                                \"shared cert in chain with subject [\" +\n-                                next.getSubjectX500Principal() + \"]\");\n-                        }\n+                        currHdl = 0L;\n@@ -2063,0 +2059,2 @@\n+                } else {\n+                    currHdl = 0L;\n@@ -2064,0 +2062,1 @@\n+                checkPrivKey = true;\n@@ -2065,1 +2064,0 @@\n-\n@@ -2067,1 +2065,0 @@\n-\n@@ -2649,1 +2646,1 @@\n-    private void dumpTokenMap() {\n+    private void dumpTokenMap(Debug debug) {\n@@ -2651,1 +2648,1 @@\n-        System.out.println(\"Token Alias Map:\");\n+        debug.println(\"Token Alias Map:\");\n@@ -2653,1 +2650,1 @@\n-            System.out.println(\"  [empty]\");\n+            debug.println(\"  [empty]\");\n@@ -2656,1 +2653,1 @@\n-                System.out.println(\"  \" + s + aliasMap.get(s));\n+                debug.println(\"  \" + s + aliasMap.get(s));\n@@ -2670,0 +2667,1 @@\n+    \/\/ return an empty array if no match\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyStore.java","additions":76,"deletions":78,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8301154\n+ * @summary KeyStore support for NSS cert\/key databases\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm CertChainRemoval\n+ *\/\n+\n+import java.io.*;\n+import java.nio.file.Path;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.Signature;\n+import java.security.Security;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.*;\n+import java.security.spec.*;\n+import java.security.interfaces.*;\n+\n+import javax.security.auth.Subject;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class CertChainRemoval extends PKCS11Test {\n+\n+    private static final Path TEST_DATA_PATH = Path.of(BASE)\n+            .resolve(\"CertChainRemoval\");\n+    private static final String DIR = TEST_DATA_PATH.toString();\n+    private static final char[] tokenPwd =\n+                        new char[] { 't', 'e', 's', 't', '1', '2' };\n+\n+    private static final String KS_TYPE = \"PKCS11\";\n+\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                TEST_DATA_PATH.resolve(\"p11-nss.txt\").toString());\n+    }\n+\n+    private static class FooEntry implements KeyStore.Entry { }\n+\n+    @Test\n+    public void test() throws Exception {\n+        main(new CertChainRemoval());\n+    }\n+\n+    private static PrivateKey getPrivateKey(String fn)\n+            throws NoSuchAlgorithmException, IOException,\n+            InvalidKeySpecException, FileNotFoundException,\n+            ClassNotFoundException {\n+        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+\n+        FileInputStream fis = new FileInputStream(new File(DIR, fn));\n+        String key = new String(fis.readAllBytes(), Charset.defaultCharset());\n+        String privKeyPEM = key.replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n+                .replaceAll(\"\\\\n\", \"\")\n+                .replace(\"-----END PRIVATE KEY-----\", \"\");\n+\n+        byte[] privKeyBytes = Base64.getDecoder().decode(privKeyPEM);\n+        return kf.generatePrivate(new PKCS8EncodedKeySpec(privKeyBytes));\n+    }\n+\n+    private static Certificate[] getCertificateChain(String... fn)\n+            throws NoSuchAlgorithmException, NoSuchProviderException,\n+            CertificateException, FileNotFoundException {\n+        Certificate[] chain = new Certificate[fn.length];\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\", \"SUN\");\n+        for (int i = 0; i < chain.length; i++) {\n+            chain[i] = cf.generateCertificate(new FileInputStream\n+                (new File(DIR, fn[i])));\n+        }\n+        return chain;\n+    }\n+\n+    private static void printKeyStore(String header, KeyStore ks)\n+            throws KeyStoreException {\n+        System.out.println(header);\n+        Enumeration enu = ks.aliases();\n+        int count = 0;\n+        while (enu.hasMoreElements()) {\n+            count++;\n+            System.out.println(\"Entry# \" + count +\n+                    \" = \" + (String)enu.nextElement());\n+        }\n+        System.out.println(\"========\");\n+    }\n+\n+    private static void checkEntry(KeyStore ks, String alias,\n+            Certificate[] expChain) throws KeyStoreException {\n+        Certificate c = ks.getCertificate(alias);\n+        Certificate[] chain = ks.getCertificateChain(alias);\n+        if (expChain == null) {\n+            if (c != null || (chain != null && chain.length != 0)) {\n+                throw new RuntimeException(\"Fail: \" + alias + \" not removed\");\n+            }\n+        } else {\n+            if (!c.equals(expChain[0]) || !Arrays.equals(chain, expChain)) {\n+                throw new RuntimeException(\"Fail: \" + alias +\n+                        \" chain check diff\");\n+            }\n+        }\n+    }\n+\n+    public void main(Provider p) throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(KS_TYPE, p);\n+        ks.load(null, tokenPwd);\n+        printKeyStore(\"Initial: \", ks);\n+\n+        PrivateKey pk1PrivKey = getPrivateKey(\"pk1.key\");\n+        Certificate[] pk1Chain =\n+                getCertificateChain(\"pk1.cert\", \"ca.cert\");\n+\n+        PrivateKey caPrivKey = getPrivateKey(\"ca.key\");\n+        Certificate[] caChain = getCertificateChain(\"ca.cert\");\n+\n+        \/\/ populate keystore with \"pk1\" and \"ca\", then delete \"pk1\"\n+        System.out.println(\"Add pk1 and ca, then delete pk1\");\n+        ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n+        ks.setKeyEntry(\"ca\", caPrivKey, null, caChain);\n+        ks.deleteEntry(\"pk1\");\n+\n+        \/\/ reload the keystore\n+        ks.store(null, tokenPwd);\n+        ks.load(null, tokenPwd);\n+        printKeyStore(\"Reload#1: \", ks);\n+\n+        \/\/ should only have \"ca\"\n+        checkEntry(ks, \"pk1\", null);\n+        checkEntry(ks, \"ca\", caChain);\n+\n+        \/\/ now add \"pk1\" and delete \"ca\"\n+        System.out.println(\"Now add pk1 and delete ca\");\n+        ks.setKeyEntry(\"pk1\", pk1PrivKey, null, pk1Chain);\n+        ks.deleteEntry(\"ca\");\n+\n+        \/\/ reload the keystore\n+        ks.store(null, tokenPwd);\n+        ks.load(null, tokenPwd);\n+        printKeyStore(\"Reload#2: \", ks);\n+\n+        \/\/ should only have \"pk1\" now\n+        checkEntry(ks, \"pk1\", pk1Chain);\n+        checkEntry(ks, \"ca\", null);\n+\n+        \/\/ now delete \"pk1\"\n+        System.out.println(\"Now delete pk1\");\n+        ks.deleteEntry(\"pk1\");\n+\n+        \/\/ reload the keystore\n+        ks.store(null, tokenPwd);\n+        ks.load(null, tokenPwd);\n+        printKeyStore(\"Reload#3: \", ks);\n+\n+        \/\/ should only have nothing now\n+        checkEntry(ks, \"pk1\", null);\n+        checkEntry(ks, \"ca\", null);\n+\n+        System.out.println(\"Test Passed\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+-----BEGIN CERTIFICATE-----\n+MIIC7TCCAdWgAwIBAgIJALNUl5ObEyk4MA0GCSqGSIb3DQEBCwUAMA0xCzAJBgNV\n+BAMMAkNBMB4XDTIzMDQyNjIyMzMwMVoXDTMzMDQyMzIyMzMwMVowDTELMAkGA1UE\n+AwwCQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDS4rFdDe9FQoGG\n+JUOK4upVT6zF76dfoByX2fuyz+IadO6Z2zHZqiwQVda87HsyuDTg+JkkHrCBdxQc\n+DFyI9P8ymIqjpMORqln8fw5l3Yj37IOE0XlIKvIOdwaZWfz10Ibs8U+VE+wS0pF2\n+yZSZe0dLLcO\/OYogKeDKSJvUc7dO\/kWtRrTIAN6C7cSlBqucjgnwkCQHnzaXVXbB\n+5apNHfpo7ec8AktFL9za7AjpLXt3KIqIK8zi3\/tYy6ljmtgd0xlgeHGmVVd8OSlB\n+FD3+UEUVixXPT500W77F18Qf9XxFypcf83IHU4uofSB\/cx6Uj1bV2QxV5oaXd0cy\n+AC0prd\/1AgMBAAGjUDBOMB0GA1UdDgQWBBT6LjRyPCRkOQQ6yqp6XPaQOObW5TAf\n+BgNVHSMEGDAWgBT6LjRyPCRkOQQ6yqp6XPaQOObW5TAMBgNVHRMEBTADAQH\/MA0G\n+CSqGSIb3DQEBCwUAA4IBAQCyijjOpX5zVlxQAH7HzInevtBYogsUWEBYtaaI8dVl\n+Y\/+o8Z9KEVRS\/4IYet8G41QkLe8fBB3nWWWrYejWM4zYsj0ENjJXtqxrJhLoJA7v\n+XKr73j9CrfbRJ8orDJRq2qVFco9PwDuNuhYV1TYE0tk\/O+c7VtXyRWMng9MsidbM\n+OgrAF5QNGdggvCYVsi6GDNc201FGa2xYhTNjWo5LzbLf2fsw9bH6\/PUAg3iLPEZS\n+uSKaFrwSmFPWnfbz321yfovVW3DdIQPoxmEFfyFfUJU3EBBws8doPyZH\/7K4AfKl\n+F7f\/KIOF\/40UnlStemsIPhMKMO2i9BpIaiwI+Cg\/J\/xL\n+-----END CERTIFICATE-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/ca.cert","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDS4rFdDe9FQoGG\n+JUOK4upVT6zF76dfoByX2fuyz+IadO6Z2zHZqiwQVda87HsyuDTg+JkkHrCBdxQc\n+DFyI9P8ymIqjpMORqln8fw5l3Yj37IOE0XlIKvIOdwaZWfz10Ibs8U+VE+wS0pF2\n+yZSZe0dLLcO\/OYogKeDKSJvUc7dO\/kWtRrTIAN6C7cSlBqucjgnwkCQHnzaXVXbB\n+5apNHfpo7ec8AktFL9za7AjpLXt3KIqIK8zi3\/tYy6ljmtgd0xlgeHGmVVd8OSlB\n+FD3+UEUVixXPT500W77F18Qf9XxFypcf83IHU4uofSB\/cx6Uj1bV2QxV5oaXd0cy\n+AC0prd\/1AgMBAAECggEBAJ7WZCTko\/2UtB4n3xGzDDEpi8aiVXyvChpN80ihT3oB\n+7N0xvgBmLj43iUBPFhQDrsBsPlx4SRWabSkbHm+BqN2hC3tqVGtY1eJaiKutCsdB\n++2WEqUb0IdFHUU8b+m3jnFzG\/NwaX0tmEm5YMnbP5cj4NWHIowLKyCdUPRrt9Xmm\n+qRh9euc4LM2VKVv7OATMi9KH2CYkWW+DdDsqBK4wWGlKBX8Wh4I4C07ylppIfBGr\n+U\/9aAanSvMtoB6dbGf8JjRogSxRjLxDrJS5WjYAsEP0Cwr6ad5sXkdoESrPpoTvl\n+w6JInldo80u3Lvht+dEgkYiam1Zx3H2etBGYeisx\/gECgYEA7Vbrvs7IWHxHDkia\n+vaKi778ExkwQtHheO3rM7EOgrwoH9YrPfsfGJYAdHqYbXNnPtXPP\/+nGT+Cab2t7\n+++k6ibhFhxjFuuWMkEam1ZloESaqunYTuKGCzW4IgeTVLJWVvx\/6l\/b\/NR6YBDkm\n+SixA+\/BZI6H3oXTYpEvnKy6J2DUCgYEA43dQzzgCaS6F0RWrNhhZERdlvfpOi0\/D\n+VwqSm57bOStLJKAC5WvQOodZASjdVTbB2ABByBQDsq1zNbhBClnwUiaRgXzm0Jr6\n+Ro1FJ03MuHHWyM+wty++b74cghz7gRV6FOVNrxyahio\/wDjU9y4izFKLHy7xa8qy\n+it\/5pJm2YMECgYAvq1SgN1IgC54N7WE\/E2pccuZXmbGFPePXWHvOPGsKnR4qIB46\n+3Y8buxaeMEiwpoLEdCVjxiVxp6\/9Dv6RAzAhtyQn1T7poe9QjxA1OKGhSD3kQ5EE\n+dVQbRK1qwXZbhRPVlmuzmAV8Os\/XkU7yeN74eza8JGzjPd\/BaAlfL\/K5vQKBgBpf\n+6FfOp8Doaw2+VHbWReWMb\/iiQF845W5\/RFaVCdhMI89gWlWdtaxDq1dOFLPfwIQ6\n+K2Z2o6MhJ32wGqKHoSz1WePIxr6jaaeqk70l8TnlwUDRjC0BdTRht86Ca8sg4WHw\n+4JwQVf5+gZvZOyBaEiDc5VK9T7Lu8trVc43ZYONBAoGBAJ\/Ohh\/5eUuYIaT\/GgJ\/\n+xU2s03VX03nMNvNVl3fYUHV0J11m\/s6erPhvt7h4k\/mzaM5VfMqgJl03dCb3JPp5\n+EOUs\/KGkz+wBk7nsUi2lMw4mZ8O4081WO+utkSQUjJBehyA\/TAh+RAa6Xqket0iF\n+Wtew+M1pPd4ZIXudPJdLTajw\n+-----END PRIVATE KEY-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/ca.key","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/p11-nss.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/BasicData\/p11-nss.txt","status":"copied"},{"patch":"@@ -0,0 +1,16 @@\n+-----BEGIN CERTIFICATE-----\n+MIIClzCCAX8CCQDtJWY8c+qlkjANBgkqhkiG9w0BAQsFADANMQswCQYDVQQDDAJD\n+QTAeFw0yMzA0MjYyMjQ1MDdaFw0zMzA0MjMyMjQ1MDdaMA4xDDAKBgNVBAMMA3Br\n+MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOZPBtz+4NvgoYD3YFId\n+77vbmaGFtJDVm3lf46SrfL6q8nWEN8z\/k6ea\/7cZmGj5d8IGSTZy5F1PwILwhg0x\n+MkwvCUlCjQ8Ic5rZ6ocUSB9UdFURJDzYICZuQQyugFpCqhEAX11n1EhA7D2BqxYE\n+yBbQrJlcEHbZR+Ng9KvCQrvFbU\/eFHh\/NwEvIXeca9JX8NQqVqkw+WD6NdQXtgTk\n+oARZjZifPwwsyYmcXqCEwV9i8kW8B0cinOyihHJkXxkhirEg1aDaBjqw5N9CanX1\n+BFoemtBN\/sNj3+bh3RecxU0YcFDQUeOcppQ1aD8OXyZcjHVhtzVTh0KwwL+dja\/j\n+KAUCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAAXc5JJADrlHb\/kbcdN+6RRdKy8na\n+sAqn2\/acUN5gY5cfGLBU\/pPXp1EuVOLZtcEX33xjN97gX92GwKoA1TCzVe\/XRMKZ\n+G3+IIX9xM8O8VWfumFHFaNhjngUAoDDUlwx41bEcMIjFBFxoSqFo9bT\/zmZsQaP4\n+wLoo61cxHV5bB1iv0XvKrTCHPTzy0GxcnjIn2JnAJaiPmC3doQCWpXSU8GPNnzT7\n+RFSwrJKIkEY6RUuXDy9oRmnAWwcPinuRi+Re0JUw2we8zouGRQVDUj2S2ezkICmL\n+xLSyMM5XJgJY7GliT77iZZ+nqmvHEt2QSMsUEJ\/vNGCV6Jp0iMJb5NGpDw==\n+-----END CERTIFICATE-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/pk1.cert","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDmTwbc\/uDb4KGA\n+92BSHe+725mhhbSQ1Zt5X+Okq3y+qvJ1hDfM\/5Onmv+3GZho+XfCBkk2cuRdT8CC\n+8IYNMTJMLwlJQo0PCHOa2eqHFEgfVHRVESQ82CAmbkEMroBaQqoRAF9dZ9RIQOw9\n+gasWBMgW0KyZXBB22UfjYPSrwkK7xW1P3hR4fzcBLyF3nGvSV\/DUKlapMPlg+jXU\n+F7YE5KAEWY2Ynz8MLMmJnF6ghMFfYvJFvAdHIpzsooRyZF8ZIYqxINWg2gY6sOTf\n+Qmp19QRaHprQTf7DY9\/m4d0XnMVNGHBQ0FHjnKaUNWg\/Dl8mXIx1Ybc1U4dCsMC\/\n+nY2v4ygFAgMBAAECggEARM6\/gi80Bv0pw1olEOOYyEtnrvY\/aDYpaS3Y2U3SyzRP\n+lASYl0qUVrLcS1v+SP6fZPxzyyywRaCaJ4SsyCw2lsRGxfh4JFGmGFGa3BiXI6Ub\n+zH5+kR8RG+o8zQkll9Hq9YFi\/IkUxzF+YzHmZ4GuNgLKTldPI\/Luo2RINTior2hP\n+klhWeuh4cKPCQ8DrSMKk23hp9Kx6m8+J3QkAIlyaAThlmbmIYjAQhm5FcjHrEQU\/\n+ypBEL\/y+1aBqfF2uKv3drjGAwgxy9N6SgCIQYpwPtQYDCC+AGbYiPG2D4sDOdn5X\n+uFJnPRivmBHOcpSMSA9n1dVDHQcr3GkoApNmDtnwUQKBgQD14cv49gzohNm6xqLE\n+zWAx8G9MxUH\/vR+Pt\/st\/nwLhOMs2iiT1gdOQh4hU96KM+NnWZGM5hay3+s2O2Pw\n+ZtEln0yFZBPeRA\/Nrjs7X3DFlHWxvIJivX9n9\/Myv6PfqMnLELUTmTMCmkX9TUg1\n+os2OCQ1ZtQe4UGI4LjhhWdYQhwKBgQDvySzs+VWNEnq0QYnMjC+UPSTfJgG1EsAp\n+\/5+uG0QSMviQTsQK68W9gjAAu1995BthgTcZJz6osrh0YeJT6ToN\/gTcJCAzWOCx\n+imX+cRdh2Z2COu8C+4IYnMZkQq2E85SyPONyYuOkstf0iT4zmXnDGcnd99HxGk04\n+c1TZDEIiEwKBgQCOYJJY9jkhRxRAyBamePoT0NLSFIMUEDI\/aVykFHFFxkw5w5Wt\n+jUirszN5PvRk+IjcZowWl4FbULgFrjw\/j3naHDUWJI4wrR6tjg80YR6O+llwcuTZ\n+QjuNO5FyuG+u6jD3ShRgZdyYzDZs55xBmqUGcw1s\/ZubycgmGfWBwaBn7wKBgFHX\n+56am3+V71jfqWr9fZeoCCLDFxzVnxgFPx8\/kbJKNpTuUNuPHX8H0SrAlRE2y6wmX\n+0heaxo9MGRtYQakEZRVbi4scJYWBI4hVxcRYE3QJk\/JcbTImaFxAPpMAEzva6\/j+\n+QV\/MkwinJoDHy1xPWTkXd0h1CspxgMPw0ZgX0AbTAoGAFEI3nIkV1ElQA3J0Oxsg\n+HX6rLKI3Bi7T6I2tv2MCKephs0SK3pfv+AUNVD9toDTI6axJYSChyWxpsP0QfWHc\n+Gx71N9K9+eO9fGLozWLZfjZEehBupOzVnafFWSAXjna5+HKF7BzS5uyi6sR0vfgH\n+88yXb8QIme+\/gPcGJpOQI94=\n+-----END PRIVATE KEY-----\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval\/pk1.key","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"}]}