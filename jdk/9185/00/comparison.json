{"files":[{"patch":"@@ -771,1 +771,1 @@\n-  INSN(andr,  0b100, false);\n+  INSN(andr, 0b100, false);\n@@ -797,1 +797,1 @@\n-    zrf(Rd, 0);                                                          \\\n+    zrf(Rd, 0);                                                         \\\n@@ -803,3 +803,3 @@\n-  INSN(movn, 0b100);\n-  INSN(movz, 0b110);\n-  INSN(movk, 0b111);\n+  INSN(movn,  0b100);\n+  INSN(movz,  0b110);\n+  INSN(movk,  0b111);\n@@ -1107,3 +1107,3 @@\n-#define INSN(NAME, opc)              \\\n-  void NAME(Register RN) {           \\\n-    branch_reg(opc, 0, 0, RN, r0);    \\\n+#define INSN(NAME, opc)                         \\\n+  void NAME(Register RN) {                      \\\n+    branch_reg(opc, 0, 0, RN, r0);              \\\n@@ -1112,1 +1112,1 @@\n-  INSN(br, 0b0000);\n+  INSN(br,  0b0000);\n@@ -1120,3 +1120,3 @@\n-#define INSN(NAME, opc)                     \\\n-  void NAME() {                             \\\n-    branch_reg(opc, 0, 0, dummy_reg, r0);    \\\n+#define INSN(NAME, opc)                         \\\n+  void NAME() {                                 \\\n+    branch_reg(opc, 0, 0, dummy_reg, r0);       \\\n@@ -1211,1 +1211,1 @@\n-  INSN3(stxrb, byte, 0b000, 0);\n+  INSN3(stxrb,  byte, 0b000, 0);\n@@ -1213,1 +1213,1 @@\n-  INSN2(ldxrb, byte, 0b010, 0);\n+  INSN2(ldxrb,  byte, 0b010, 0);\n@@ -1215,2 +1215,2 @@\n-  INSN2(stlrb, byte, 0b100, 1);\n-  INSN2(ldarb, byte, 0b110, 1);\n+  INSN2(stlrb,  byte, 0b100, 1);\n+  INSN2(ldarb,  byte, 0b110, 1);\n@@ -1219,1 +1219,1 @@\n-  INSN3(stxrh, halfword, 0b000, 0);\n+  INSN3(stxrh,  halfword, 0b000, 0);\n@@ -1221,1 +1221,1 @@\n-  INSN2(ldxrh, halfword, 0b010, 0);\n+  INSN2(ldxrh,  halfword, 0b010, 0);\n@@ -1223,2 +1223,2 @@\n-  INSN2(stlrh, halfword, 0b100, 1);\n-  INSN2(ldarh, halfword, 0b110, 1);\n+  INSN2(stlrh,  halfword, 0b100, 1);\n+  INSN2(ldarh,  halfword, 0b110, 1);\n@@ -1227,1 +1227,1 @@\n-  INSN3(stxrw, word, 0b000, 0);\n+  INSN3(stxrw,  word, 0b000, 0);\n@@ -1229,1 +1229,1 @@\n-  INSN4(stxpw, word, 0b001, 0);\n+  INSN4(stxpw,  word, 0b001, 0);\n@@ -1231,1 +1231,1 @@\n-  INSN2(ldxrw, word, 0b010, 0);\n+  INSN2(ldxrw,  word, 0b010, 0);\n@@ -1233,1 +1233,4 @@\n-  INSN_FOO(ldxpw, word, 0b011, 0);\n+  INSN2(stlrw,  word, 0b100, 1);\n+  INSN2(ldarw,  word, 0b110, 1);\n+  \/\/ pairs of words\n+  INSN_FOO(ldxpw,  word, 0b011, 0);\n@@ -1235,2 +1238,0 @@\n-  INSN2(stlrw, word, 0b100, 1);\n-  INSN2(ldarw, word, 0b110, 1);\n@@ -1239,1 +1240,1 @@\n-  INSN3(stxr, xword, 0b000, 0);\n+  INSN3(stxr,  xword, 0b000, 0);\n@@ -1241,1 +1242,1 @@\n-  INSN4(stxp, xword, 0b001, 0);\n+  INSN4(stxp,  xword, 0b001, 0);\n@@ -1243,1 +1244,1 @@\n-  INSN2(ldxr, xword, 0b010, 0);\n+  INSN2(ldxr,  xword, 0b010, 0);\n@@ -1245,1 +1246,4 @@\n-  INSN_FOO(ldxp, xword, 0b011, 0);\n+  INSN2(stlr,  xword, 0b100, 1);\n+  INSN2(ldar,  xword, 0b110, 1);\n+  \/\/ pairs of xwords\n+  INSN_FOO(ldxp,  xword, 0b011, 0);\n@@ -1247,2 +1251,0 @@\n-  INSN2(stlr, xword, 0b100, 1);\n-  INSN2(ldar, xword, 0b110, 1);\n@@ -1274,4 +1276,4 @@\n-  INSN(cas,    false, false)\n-  INSN(casa,   true,  false)\n-  INSN(casl,   false, true)\n-  INSN(casal,  true,  true)\n+  INSN(cas,   false, false)\n+  INSN(casa,  true,  false)\n+  INSN(casl,  false, true)\n+  INSN(casal, true,  true)\n@@ -1289,4 +1291,4 @@\n-  INSN(casp,    false, false)\n-  INSN(caspa,   true,  false)\n-  INSN(caspl,   false, true)\n-  INSN(caspal,  true,  true)\n+  INSN(casp,   false, false)\n+  INSN(caspa,  true,  false)\n+  INSN(caspl,  false, true)\n+  INSN(caspal, true,  true)\n@@ -1418,2 +1420,2 @@\n-  INSN(stpw, 0b00, 0b101, 0, 0, false);\n-  INSN(ldpw, 0b00, 0b101, 0, 1, false);\n+  INSN(stpw,  0b00, 0b101, 0, 0, false);\n+  INSN(ldpw,  0b00, 0b101, 0, 1, false);\n@@ -1421,2 +1423,2 @@\n-  INSN(stp, 0b10, 0b101, 0, 0, false);\n-  INSN(ldp, 0b10, 0b101, 0, 1, false);\n+  INSN(stp,   0b10, 0b101, 0, 0, false);\n+  INSN(ldp,   0b10, 0b101, 0, 1, false);\n@@ -1427,2 +1429,2 @@\n-  INSN(stnp, 0b10, 0b101, 0, 0, true);\n-  INSN(ldnp, 0b10, 0b101, 0, 1, true);\n+  INSN(stnp,  0b10, 0b101, 0, 0, true);\n+  INSN(ldnp,  0b10, 0b101, 0, 1, true);\n@@ -1478,1 +1480,1 @@\n-  INSN(str, 0b11, 0b00);\n+  INSN(str,  0b11, 0b00);\n@@ -1483,1 +1485,1 @@\n-  INSN(ldr, 0b11, 0b01);\n+  INSN(ldr,  0b11, 0b01);\n@@ -1488,1 +1490,1 @@\n-  INSN(ldrsb, 0b00, 0b10);\n+  INSN(ldrsb,  0b00, 0b10);\n@@ -1490,1 +1492,1 @@\n-  INSN(ldrsh, 0b01, 0b10);\n+  INSN(ldrsh,  0b01, 0b10);\n@@ -1492,1 +1494,1 @@\n-  INSN(ldrsw, 0b10, 0b10);\n+  INSN(ldrsw,  0b10, 0b10);\n@@ -1572,7 +1574,7 @@\n-  INSN(andr, 1, 0b00, 0);\n-  INSN(orr, 1, 0b01, 0);\n-  INSN(eor, 1, 0b10, 0);\n-  INSN(ands, 1, 0b11, 0);\n-  INSN(andw, 0, 0b00, 0);\n-  INSN(orrw, 0, 0b01, 0);\n-  INSN(eorw, 0, 0b10, 0);\n+  INSN(andr,  1, 0b00, 0);\n+  INSN(orr,   1, 0b01, 0);\n+  INSN(eor,   1, 0b10, 0);\n+  INSN(ands,  1, 0b11, 0);\n+  INSN(andw,  0, 0b00, 0);\n+  INSN(orrw,  0, 0b01, 0);\n+  INSN(eorw,  0, 0b10, 0);\n@@ -1600,7 +1602,7 @@\n-  INSN(bic, 1, 0b00, 1);\n-  INSN(orn, 1, 0b01, 1);\n-  INSN(eon, 1, 0b10, 1);\n-  INSN(bics, 1, 0b11, 1);\n-  INSN(bicw, 0, 0b00, 1);\n-  INSN(ornw, 0, 0b01, 1);\n-  INSN(eonw, 0, 0b10, 1);\n+  INSN(bic,   1, 0b00, 1);\n+  INSN(orn,   1, 0b01, 1);\n+  INSN(eon,   1, 0b10, 1);\n+  INSN(bics,  1, 0b11, 1);\n+  INSN(bicw,  0, 0b00, 1);\n+  INSN(ornw,  0, 0b01, 1);\n+  INSN(eonw,  0, 0b10, 1);\n@@ -1639,2 +1641,2 @@\n-  INSN(add, 1, 0b000);\n-  INSN(sub, 1, 0b10);\n+  INSN(add,  1, 0b000);\n+  INSN(sub,  1, 0b10);\n@@ -1644,2 +1646,2 @@\n-  INSN(adds, 1, 0b001);\n-  INSN(subs, 1, 0b11);\n+  INSN(adds,  1, 0b001);\n+  INSN(subs,  1, 0b11);\n@@ -1670,2 +1672,2 @@\n-  INSN(add, 0b100);\n-  INSN(sub, 0b110);\n+  INSN(add,  0b100);\n+  INSN(sub,  0b110);\n@@ -1685,2 +1687,2 @@\n-  INSN(adds, 0b101);\n-  INSN(subs, 0b111);\n+  INSN(adds,  0b101);\n+  INSN(subs,  0b111);\n@@ -1725,1 +1727,1 @@\n-  INSN(adcw, 0b000);\n+  INSN(adcw,  0b000);\n@@ -1727,1 +1729,1 @@\n-  INSN(sbcw, 0b010);\n+  INSN(sbcw,  0b010);\n@@ -1729,4 +1731,4 @@\n-  INSN(adc, 0b100);\n-  INSN(adcs, 0b101);\n-  INSN(sbc,0b110);\n-  INSN(sbcs, 0b111);\n+  INSN(adc,   0b100);\n+  INSN(adcs,  0b101);\n+  INSN(sbc,   0b110);\n+  INSN(sbcs,  0b111);\n@@ -1785,1 +1787,1 @@\n-  INSN(cselw, 0b000, 0b00);\n+  INSN(cselw,  0b000, 0b00);\n@@ -1789,4 +1791,4 @@\n-  INSN(csel, 0b100, 0b00);\n-  INSN(csinc, 0b100, 0b01);\n-  INSN(csinv, 0b110, 0b00);\n-  INSN(csneg, 0b110, 0b01);\n+  INSN(csel,   0b100, 0b00);\n+  INSN(csinc,  0b100, 0b01);\n+  INSN(csinv,  0b110, 0b00);\n+  INSN(csneg,  0b110, 0b01);\n@@ -1858,1 +1860,1 @@\n-  \/\/ (2 sources)\n+  \/\/ Data-processing (2 source)\n@@ -1882,1 +1884,1 @@\n-  \/\/ (3 sources)\n+  \/\/ Data-processing (3 source)\n@@ -1897,4 +1899,4 @@\n-  INSN(maddw, 0b000, 0b000, 0);\n-  INSN(msubw, 0b000, 0b000, 1);\n-  INSN(madd, 0b100, 0b000, 0);\n-  INSN(msub, 0b100, 0b000, 1);\n+  INSN(maddw,  0b000, 0b000, 0);\n+  INSN(msubw,  0b000, 0b000, 1);\n+  INSN(madd,   0b100, 0b000, 0);\n+  INSN(msub,   0b100, 0b000, 1);\n@@ -1933,3 +1935,3 @@\n-  INSN(fmovs, 0b000, 0b00, 0b000000);\n-  INSN(fabss, 0b000, 0b00, 0b000001);\n-  INSN(fnegs, 0b000, 0b00, 0b000010);\n+  INSN(fmovs,  0b000, 0b00, 0b000000);\n+  INSN(fabss,  0b000, 0b00, 0b000001);\n+  INSN(fnegs,  0b000, 0b00, 0b000010);\n@@ -1937,1 +1939,1 @@\n-  INSN(fcvts, 0b000, 0b00, 0b000101);   \/\/ Single-precision to double-precision\n+  INSN(fcvts,  0b000, 0b00, 0b000101);   \/\/ Single-precision to double-precision\n@@ -1939,3 +1941,3 @@\n-  INSN(fmovd, 0b000, 0b01, 0b000000);\n-  INSN(fabsd, 0b000, 0b01, 0b000001);\n-  INSN(fnegd, 0b000, 0b01, 0b000010);\n+  INSN(fmovd,  0b000, 0b01, 0b000000);\n+  INSN(fabsd,  0b000, 0b01, 0b000001);\n+  INSN(fnegd,  0b000, 0b01, 0b000010);\n@@ -1943,1 +1945,1 @@\n-  INSN(fcvtd, 0b000, 0b01, 0b000100);   \/\/ Double-precision to single-precision\n+  INSN(fcvtd,  0b000, 0b01, 0b000100);   \/\/ Double-precision to single-precision\n@@ -2023,2 +2025,2 @@\n-  INSN(fmadds, 0b000, 0b00, 0, 0);\n-  INSN(fmsubs, 0b000, 0b00, 0, 1);\n+  INSN(fmadds,  0b000, 0b00, 0, 0);\n+  INSN(fmsubs,  0b000, 0b00, 0, 1);\n@@ -2028,2 +2030,2 @@\n-  INSN(fmaddd, 0b000, 0b01, 0, 0);\n-  INSN(fmsubd, 0b000, 0b01, 0, 1);\n+  INSN(fmaddd,  0b000, 0b01, 0, 0);\n+  INSN(fmsubd,  0b000, 0b01, 0, 1);\n@@ -2031,1 +2033,1 @@\n-  INSN(fnmsub, 0b000, 0b01, 1, 1);\n+  INSN(fnmsub,  0b000, 0b01, 1, 1);\n@@ -2061,1 +2063,1 @@\n-   \/\/ Floating-point<->integer conversions\n+  \/\/ Conversion between floating-point and integer\n@@ -2099,1 +2101,1 @@\n-#define INSN(NAME, sflag, type, rmode, opcode)                           \\\n+#define INSN(NAME, sflag, type, rmode, opcode)                          \\\n@@ -2101,1 +2103,1 @@\n-    float_int_convert(sflag, type, rmode, opcode, as_Register(Vd), Rn);  \\\n+    float_int_convert(sflag, type, rmode, opcode, as_Register(Vd), Rn); \\\n@@ -2231,0 +2233,2 @@\n+  \/\/ Floating-point data-processing (1 source)\n+\n@@ -2418,1 +2422,2 @@\n-#define INSN(NAME, opc, opc2, acceptT2D)                                                \\\n+  \/\/ Advanced SIMD three different\n+#define INSN(NAME, opc, opc2, acceptT2D)                                \\\n@@ -2659,3 +2664,3 @@\n-  INSN(aese, 0b0100111000101000010010);\n-  INSN(aesd, 0b0100111000101000010110);\n-  INSN(aesmc, 0b0100111000101000011010);\n+  INSN(aese,   0b0100111000101000010010);\n+  INSN(aesd,   0b0100111000101000010110);\n+  INSN(aesmc,  0b0100111000101000011010);\n@@ -3117,19 +3122,19 @@\n-  INSN(sve_abs,  0b00000100, 0b010110101); \/\/ vector abs, unary\n-  INSN(sve_add,  0b00000100, 0b000000000); \/\/ vector add\n-  INSN(sve_and,  0b00000100, 0b011010000); \/\/ vector and\n-  INSN(sve_andv, 0b00000100, 0b011010001); \/\/ bitwise and reduction to scalar\n-  INSN(sve_asr,  0b00000100, 0b010000100); \/\/ vector arithmetic shift right\n-  INSN(sve_bic,  0b00000100, 0b011011000); \/\/ vector bitwise clear\n-  INSN(sve_clz,  0b00000100, 0b011001101); \/\/ vector count leading zero bits\n-  INSN(sve_cnt,  0b00000100, 0b011010101); \/\/ count non-zero bits\n-  INSN(sve_cpy,  0b00000101, 0b100000100); \/\/ copy scalar to each active vector element\n-  INSN(sve_eor,  0b00000100, 0b011001000); \/\/ vector eor\n-  INSN(sve_eorv, 0b00000100, 0b011001001); \/\/ bitwise xor reduction to scalar\n-  INSN(sve_lsl,  0b00000100, 0b010011100); \/\/ vector logical shift left\n-  INSN(sve_lsr,  0b00000100, 0b010001100); \/\/ vector logical shift right\n-  INSN(sve_mul,  0b00000100, 0b010000000); \/\/ vector mul\n-  INSN(sve_neg,  0b00000100, 0b010111101); \/\/ vector neg, unary\n-  INSN(sve_not,  0b00000100, 0b011110101); \/\/ bitwise invert vector, unary\n-  INSN(sve_orr,  0b00000100, 0b011000000); \/\/ vector or\n-  INSN(sve_orv,  0b00000100, 0b011000001); \/\/ bitwise or reduction to scalar\n-  INSN(sve_smax, 0b00000100, 0b001000000); \/\/ signed maximum vectors\n+  INSN(sve_abs,   0b00000100, 0b010110101); \/\/ vector abs, unary\n+  INSN(sve_add,   0b00000100, 0b000000000); \/\/ vector add\n+  INSN(sve_and,   0b00000100, 0b011010000); \/\/ vector and\n+  INSN(sve_andv,  0b00000100, 0b011010001); \/\/ bitwise and reduction to scalar\n+  INSN(sve_asr,   0b00000100, 0b010000100); \/\/ vector arithmetic shift right\n+  INSN(sve_bic,   0b00000100, 0b011011000); \/\/ vector bitwise clear\n+  INSN(sve_clz,   0b00000100, 0b011001101); \/\/ vector count leading zero bits\n+  INSN(sve_cnt,   0b00000100, 0b011010101); \/\/ count non-zero bits\n+  INSN(sve_cpy,   0b00000101, 0b100000100); \/\/ copy scalar to each active vector element\n+  INSN(sve_eor,   0b00000100, 0b011001000); \/\/ vector eor\n+  INSN(sve_eorv,  0b00000100, 0b011001001); \/\/ bitwise xor reduction to scalar\n+  INSN(sve_lsl,   0b00000100, 0b010011100); \/\/ vector logical shift left\n+  INSN(sve_lsr,   0b00000100, 0b010001100); \/\/ vector logical shift right\n+  INSN(sve_mul,   0b00000100, 0b010000000); \/\/ vector mul\n+  INSN(sve_neg,   0b00000100, 0b010111101); \/\/ vector neg, unary\n+  INSN(sve_not,   0b00000100, 0b011110101); \/\/ bitwise invert vector, unary\n+  INSN(sve_orr,   0b00000100, 0b011000000); \/\/ vector or\n+  INSN(sve_orv,   0b00000100, 0b011000001); \/\/ bitwise or reduction to scalar\n+  INSN(sve_smax,  0b00000100, 0b001000000); \/\/ signed maximum vectors\n@@ -3150,16 +3155,16 @@\n-  INSN(sve_fabs,    0b00000100, 0b011100101);\n-  INSN(sve_fadd,    0b01100101, 0b000000100);\n-  INSN(sve_fadda,   0b01100101, 0b011000001); \/\/ add strictly-ordered reduction to scalar Vd\n-  INSN(sve_fdiv,    0b01100101, 0b001101100);\n-  INSN(sve_fmax,    0b01100101, 0b000110100); \/\/ floating-point maximum\n-  INSN(sve_fmaxv,   0b01100101, 0b000110001); \/\/ floating-point maximum recursive reduction to scalar\n-  INSN(sve_fmin,    0b01100101, 0b000111100); \/\/ floating-point minimum\n-  INSN(sve_fminv,   0b01100101, 0b000111001); \/\/ floating-point minimum recursive reduction to scalar\n-  INSN(sve_fmul,    0b01100101, 0b000010100);\n-  INSN(sve_fneg,    0b00000100, 0b011101101);\n-  INSN(sve_frintm,  0b01100101, 0b000010101); \/\/ floating-point round to integral value, toward minus infinity\n-  INSN(sve_frintn,  0b01100101, 0b000000101); \/\/ floating-point round to integral value, nearest with ties to even\n-  INSN(sve_frinta,  0b01100101, 0b000100101); \/\/ floating-point round to integral value, nearest with ties to away\n-  INSN(sve_frintp,  0b01100101, 0b000001101); \/\/ floating-point round to integral value, toward plus infinity\n-  INSN(sve_fsqrt,   0b01100101, 0b001101101);\n-  INSN(sve_fsub,    0b01100101, 0b000001100);\n+  INSN(sve_fabs,   0b00000100, 0b011100101);\n+  INSN(sve_fadd,   0b01100101, 0b000000100);\n+  INSN(sve_fadda,  0b01100101, 0b011000001); \/\/ add strictly-ordered reduction to scalar Vd\n+  INSN(sve_fdiv,   0b01100101, 0b001101100);\n+  INSN(sve_fmax,   0b01100101, 0b000110100); \/\/ floating-point maximum\n+  INSN(sve_fmaxv,  0b01100101, 0b000110001); \/\/ floating-point maximum recursive reduction to scalar\n+  INSN(sve_fmin,   0b01100101, 0b000111100); \/\/ floating-point minimum\n+  INSN(sve_fminv,  0b01100101, 0b000111001); \/\/ floating-point minimum recursive reduction to scalar\n+  INSN(sve_fmul,   0b01100101, 0b000010100);\n+  INSN(sve_fneg,   0b00000100, 0b011101101);\n+  INSN(sve_frintm, 0b01100101, 0b000010101); \/\/ floating-point round to integral value, toward minus infinity\n+  INSN(sve_frintn, 0b01100101, 0b000000101); \/\/ floating-point round to integral value, nearest with ties to even\n+  INSN(sve_frinta, 0b01100101, 0b000100101); \/\/ floating-point round to integral value, nearest with ties to away\n+  INSN(sve_frintp, 0b01100101, 0b000001101); \/\/ floating-point round to integral value, toward plus infinity\n+  INSN(sve_fsqrt,  0b01100101, 0b001101101);\n+  INSN(sve_fsub,   0b01100101, 0b000001100);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":150,"deletions":145,"binary":false,"changes":295,"status":"modified"}]}