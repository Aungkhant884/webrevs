{"files":[{"patch":"@@ -1153,0 +1153,1 @@\n+            updateIconImages();\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -727,0 +727,1 @@\n+                updateIconImages();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -603,0 +603,2 @@\n+        updateIconImages();\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.RenderingHints;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.font.TextLayout;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.EmptyBorder;\n+\n+\/* @test\n+ * @bug 8276849\n+ * @summary Update the window icon on DPI scale factor changes\n+ * @run main\/manual WindowIconUpdateOnDPIChangingTest\n+ *\/\n+public class WindowIconUpdateOnDPIChangingTest {\n+\n+    private static volatile boolean testResult = false;\n+    private static final CountDownLatch countDownLatch = new CountDownLatch(1);\n+    private static JFrame frame;\n+\n+    private static final String INSTRUCTIONS = \"<html><body style=\\\"font-family: sans-serif\\\">\\n\"\n+            + \"<b>INSTRUCTIONS:<\/b>\\n\"\n+            + \"<p>Verify that the window icon is properly updated after changing the display DPI.<\/p>\\n\"\n+            + \"\\n\"\n+            + \"<p>The test is applicable for OSes that allows to change the display DPI\\n\"\n+            + \"without rebooting the system. Press <b>PASS<\/b> for other systems.<\/p>\\n\"\n+            + \"\\n\"\n+            + \"<ol>\"\n+            + \"  <li>Set the display DPI scale factor to 100%<\/li>\"\n+            + \"  <li>Check that the string \\\"16\\\" is painted in the window icon.<\/li>\"\n+            + \"  <li>Set the display DPI scale factor to a different value,\"\n+            + \"   or move the frame to another screen with a different DPI scale factor.<\/li>\"\n+            + \"  <li>Check that the window icon is updated, it should display \\\"24\\\" on a screen\"\n+            + \"      with a 150% DPI scaling, or \\\"32\\\" on a screen with a 200% DPI scaling.\"\n+            + \"      <br>If so, press <b>PASS<\/b>, otherwise press <b>FAIL<\/b>.<\/li>\"\n+            + \"<ol>\\n\"\n+            + \"<\/body>\\n\"\n+            + \"<\/html>\\n\";\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeLater(WindowIconUpdateOnDPIChangingTest::createUI);\n+        if (!countDownLatch.await(15, TimeUnit.MINUTES)) {\n+            frame.dispose();\n+            throw new RuntimeException(\"Timed out!\");\n+        } else if (!testResult) {\n+            throw new RuntimeException(\"Test fails!\");\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame(\"Window Icon Update Test\");\n+        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        frame.setSize(640, 480);\n+        frame.addWindowListener(new WindowAdapter() {\n+            public void windowClosed(WindowEvent e) {\n+                countDownLatch.countDown();\n+            }\n+        });\n+        frame.getContentPane().setLayout(new BorderLayout());\n+        frame.getContentPane().add(createInstrumentsPane(), BorderLayout.CENTER);\n+        frame.getContentPane().add(createControlPanel(), BorderLayout.SOUTH);\n+        frame.setIconImages(IntStream.rangeClosed(16, 32).mapToObj(size -> createIcon(size)).toList());\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static JTextPane createInstrumentsPane() {\n+        JTextPane instructionsPane = new JTextPane();\n+        instructionsPane.setContentType(\"text\/html\");\n+        instructionsPane.setText(INSTRUCTIONS);\n+        instructionsPane.setEditable(false);\n+        instructionsPane.setBorder(new EmptyBorder(10, 10, 10, 10));\n+        return instructionsPane;\n+    }\n+\n+    private static JPanel createControlPanel() {\n+        JButton passButton = new JButton(\"Pass\");\n+        passButton.addActionListener(e -> testResult = true);\n+        passButton.addActionListener(e -> frame.dispose());\n+\n+        JButton failButton = new JButton(\"Fail\");\n+        failButton.addActionListener(e -> frame.dispose());\n+\n+        JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n+        controlPanel.add(passButton);\n+        controlPanel.add(failButton);\n+\n+        return controlPanel;\n+    }\n+\n+    \/**\n+     * Creates an icon of the size specified. The size is drawn at the center of the icon.\n+     *\n+     * @param size the size of the icon\n+     *\/\n+    private static Image createIcon(int size) {\n+        BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, size, size);\n+        g.setFont(new Font(\"dialog\", Font.BOLD, 12));\n+        g.setColor(Color.BLACK);\n+\n+        TextLayout layout = new TextLayout(String.valueOf(size), g.getFont(), g.getFontRenderContext());\n+        int height = (int) layout.getBounds().getHeight();\n+        int width = (int) layout.getBounds().getWidth();\n+        layout.draw(g, (size - width) \/ 2f - 1, (size + height) \/ 2f);\n+        return image;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/WindowIconUpdateOnDPIChanging\/WindowIconUpdateOnDPIChangingTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}