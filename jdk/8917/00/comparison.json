{"files":[{"patch":"@@ -100,0 +100,1 @@\n+            throw ex;\n@@ -104,6 +105,8 @@\n-        try {\n-            checkValidStateSlow();\n-            resourceList.add(resource);\n-        } catch (ScopedMemoryAccess.ScopedAccessError err) {\n-            throw new IllegalStateException(\"Already closed\");\n-        }\n+        checkValidStateSlow();\n+        \/\/ Note: from here on we no longer check the session state. Two cases are possible: either the resource cleanup\n+        \/\/ is added to the list when the session is still open, in which case everything works ok; or the resource\n+        \/\/ cleanup is added while the session is being closed. In this latter case, what matters is whether we have already\n+        \/\/ called `ResourceList::cleanup` to run all the cleanup actions. If not, we can still add this resource\n+        \/\/ to the list (and, in case of an add vs. close race, it might happen that the cleanup action will be\n+        \/\/ called immediately after).\n+        resourceList.add(resource);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}