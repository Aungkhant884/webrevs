{"files":[{"patch":"@@ -703,1 +703,1 @@\n-            return UnixDomainSockets.UNNAMED;\n+            return UnixDomainSockets.getUNNAMED();\n@@ -707,1 +707,1 @@\n-                return UnixDomainSockets.UNNAMED;\n+                return UnixDomainSockets.getUNNAMED();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,3 @@\n-    static final UnixDomainSocketAddress UNNAMED = UnixDomainSocketAddress.of(\"\");\n+    private static class UNNAMEDHolder {\n+        static final UnixDomainSocketAddress UNNAMED = UnixDomainSocketAddress.of(\"\");\n+    }\n@@ -74,1 +76,1 @@\n-            addr = UNNAMED;\n+            addr = getUNNAMED();\n@@ -140,0 +142,2 @@\n+        } catch (IllegalArgumentException e) {\n+            throw new UnsupportedOperationException(\"Unix Domain Sockets not supported on non-default file system\");\n@@ -181,0 +185,4 @@\n+\n+    static UnixDomainSocketAddress getUNNAMED() {\n+        return UNNAMEDHolder.UNNAMED;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies that an attempt to call SelectorProvider.provider().openSelector()\n+ *          on a non-default file system succeeds.\n+ * @library \/test\/lib\n+ * @build TestProvider UnixSocketInNonDefaultFS\n+ * @run main\/othervm -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider UnixSocketInNonDefaultFS\n+ *\/\n+import java.nio.channels.spi.SelectorProvider;\n+\n+public class UnixSocketInNonDefaultFS {\n+    public static void main(String args[]) throws java.io.IOException {\n+        SelectorProvider.provider().openSelector();\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/UnixSocketInNonDefaultFS.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}