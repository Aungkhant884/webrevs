{"files":[{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies that an attempt to call Selector.open() on a non-default\n+ *          file system succeeds.\n+ * @build CustomFileSystem CustomFileSystemProvider\n+ * @run main\/othervm -Djava.nio.file.spi.DefaultFileSystemProvider=CustomFileSystemProvider CustomFileSystem\n+ *\/\n+\n+public class CustomFileSystem {\n+    public static void main(String args[]) throws java.io.IOException {\n+        java.nio.channels.Selector.open();\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/CustomFileSystem.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.AccessMode;\n+import java.nio.file.CopyOption;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileStore;\n+import java.nio.file.FileSystem;\n+import java.nio.file.LinkOption;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.ReadOnlyFileSystemException;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.attribute.UserPrincipalLookupService;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class CustomFileSystemProvider extends FileSystemProvider {\n+\n+    private final FileSystemProvider defaultProvider;\n+\n+    public CustomFileSystemProvider(FileSystemProvider defaultProvider) {\n+        this.defaultProvider = defaultProvider;\n+    }\n+\n+    FileSystemProvider defaultProvider() {\n+        return defaultProvider;\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return \"file\";\n+    }\n+\n+    @Override\n+    public FileSystem newFileSystem(URI uri, Map<String,?> env) throws IOException {\n+        return defaultProvider.newFileSystem(uri, env);\n+    }\n+\n+    @Override\n+    public FileSystem getFileSystem(URI uri) {\n+        return defaultProvider.getFileSystem(uri);\n+    }\n+\n+    @Override\n+    public Path getPath(URI uri) {\n+        return defaultProvider.getPath(uri);\n+    }\n+\n+    @Override\n+    public void setAttribute(Path file, String attribute, Object value,\n+                             LinkOption... options)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public Map<String,Object> readAttributes(Path file, String attributes,\n+                                             LinkOption... options)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public <A extends BasicFileAttributes> A readAttributes(Path file,\n+                                                            Class<A> type,\n+                                                            LinkOption... options)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public <V extends FileAttributeView> V getFileAttributeView(Path file,\n+                                                                Class<V> type,\n+                                                                LinkOption... options)\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public boolean isHidden(Path file) throws IOException {\n+        throw new ReadOnlyFileSystemException();\n+    }\n+\n+    @Override\n+    public boolean isSameFile(Path file, Path other) throws IOException {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void checkAccess(Path file, AccessMode... modes)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void copy(Path source, Path target, CopyOption... options)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void move(Path source, Path target, CopyOption... options)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void delete(Path file) throws IOException {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void createLink(Path link, Path existing) throws IOException {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public Path readSymbolicLink(Path link) throws IOException {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public void createDirectory(Path dir, FileAttribute<?>... attrs)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public DirectoryStream<Path> newDirectoryStream(Path dir,\n+                                                    DirectoryStream.Filter<? super Path> filter)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public SeekableByteChannel newByteChannel(Path file,\n+                                              Set<? extends OpenOption> options,\n+                                              FileAttribute<?>... attrs)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public FileChannel newFileChannel(Path file,\n+                                      Set<? extends OpenOption> options,\n+                                      FileAttribute<?>... attrs)\n+        throws IOException\n+    {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public FileStore getFileStore(Path file) throws IOException {\n+        throw new RuntimeException(\"not implemented\");\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/CustomFileSystemProvider.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Verifies that an attempt to call SelectorProvider.provider().openSelector()\n- *          on a non-default file system succeeds.\n- * @library \/test\/lib\n- * @build TestProvider UnixSocketInNonDefaultFS\n- * @run main\/othervm -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider UnixSocketInNonDefaultFS\n- *\/\n-import java.nio.channels.spi.SelectorProvider;\n-\n-public class UnixSocketInNonDefaultFS {\n-    public static void main(String args[]) throws java.io.IOException {\n-        SelectorProvider.provider().openSelector();\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/UnixSocketInNonDefaultFS.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"}]}