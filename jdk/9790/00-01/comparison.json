{"files":[{"patch":"@@ -2630,1 +2630,1 @@\n-            h = h + Objects.hashCode(e.name()) * 43;\n+            h += e.name().hashCode();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,3 +71,1 @@\n-    public void testModifiersOrdering() throws Exception {\n-        \/\/ create a module descriptor\n-\n+    public void testOpensModifiersOrdering() throws Exception {\n@@ -75,1 +73,1 @@\n-        final Set<ModuleDescriptor.Opens.Modifier> mod1 = Set.of(\n+        final Set<ModuleDescriptor.Opens.Modifier> mods1 = Set.of(\n@@ -77,3 +75,1 @@\n-        final ModuleDescriptor desc1 = ModuleDescriptor.newModule(\"foobar\")\n-                .opens(mod1, \"a.p1\", Set.of(\"a.m1\"))\n-                .build();\n+        final ModuleDescriptor desc1 = createModuleDescriptor(mods1, null, null);\n@@ -85,1 +81,1 @@\n-        final Set<ModuleDescriptor.Opens.Modifier> mod2 = Set.of(\n+        final Set<ModuleDescriptor.Opens.Modifier> mods2 = Set.of(\n@@ -87,3 +83,1 @@\n-        final ModuleDescriptor desc2 = ModuleDescriptor.newModule(\"foobar\")\n-                .opens(mod2, \"a.p1\", Set.of(\"a.m1\"))\n-                .build();\n+        final ModuleDescriptor desc2 = createModuleDescriptor(mods2, null, null);\n@@ -92,1 +86,67 @@\n-        assertEquals(mod1, mod2, \"Modifiers were expected to be equal\");\n+        assertEquals(mods1, mods2, \"Modifiers were expected to be equal\");\n+\n+        \/\/ now verify the module descriptors\n+        assertEquals(desc1, desc2, \"Module descriptors were expected to be equal\");\n+        assertEquals(desc1.compareTo(desc2), 0, \"compareTo was expected to return\" +\n+                \" 0 for module descriptors that are equal\");\n+        System.out.println(desc1 + \" hashcode = \" + desc1.hashCode());\n+        System.out.println(desc2 + \" hashcode = \" + desc2.hashCode());\n+        assertEquals(desc1.hashCode(), desc2.hashCode(), \"Module descriptor hashcodes\" +\n+                \" were expected to be equal\");\n+    }\n+\n+    \/**\n+     * Verifies that two \"equal\" module descriptors which only differ in the order of\n+     * {@link ModuleDescriptor.Exports.Modifier exports modifiers}, that were used to construct the\n+     * descriptors, have the same hashcode.\n+     *\/\n+    @Test\n+    public void testExportsModifiersOrdering() throws Exception {\n+        \/\/ important to use Set.of() (i.e. backed by immutable set) to reproduce the issue\n+        final Set<ModuleDescriptor.Exports.Modifier> mods1 = Set.of(\n+                ModuleDescriptor.Exports.Modifier.SYNTHETIC, ModuleDescriptor.Exports.Modifier.MANDATED);\n+        final ModuleDescriptor desc1 = createModuleDescriptor(null, null, mods1);\n+\n+        \/\/ create the same module descriptor again and this time just change the order of the\n+        \/\/ \"exports\" modifiers' Set.\n+\n+        \/\/ important to use Set.of() (i.e. backed by immutable set) to reproduce the issue\n+        final Set<ModuleDescriptor.Exports.Modifier> mods2 = Set.of(\n+                ModuleDescriptor.Exports.Modifier.MANDATED, ModuleDescriptor.Exports.Modifier.SYNTHETIC);\n+        final ModuleDescriptor desc2 = createModuleDescriptor(null, null, mods2);\n+\n+        \/\/ basic verification of the modifiers themselves before we check the module descriptors\n+        assertEquals(mods1, mods2, \"Modifiers were expected to be equal\");\n+\n+        \/\/ now verify the module descriptors\n+        assertEquals(desc1, desc2, \"Module descriptors were expected to be equal\");\n+        assertEquals(desc1.compareTo(desc2), 0, \"compareTo was expected to return\" +\n+                \" 0 for module descriptors that are equal\");\n+        System.out.println(desc1 + \" hashcode = \" + desc1.hashCode());\n+        System.out.println(desc2 + \" hashcode = \" + desc2.hashCode());\n+        assertEquals(desc1.hashCode(), desc2.hashCode(), \"Module descriptor hashcodes\" +\n+                \" were expected to be equal\");\n+    }\n+\n+    \/**\n+     * Verifies that two \"equal\" module descriptors which only differ in the order of\n+     * {@link ModuleDescriptor.Requires.Modifier requires modifiers}, that were used to construct the\n+     * descriptors, have the same hashcode.\n+     *\/\n+    @Test\n+    public void testRequiresModifiersOrdering() throws Exception {\n+        \/\/ important to use Set.of() (i.e. backed by immutable set) to reproduce the issue\n+        final Set<ModuleDescriptor.Requires.Modifier> mods1 = Set.of(\n+                ModuleDescriptor.Requires.Modifier.SYNTHETIC, ModuleDescriptor.Requires.Modifier.MANDATED);\n+        final ModuleDescriptor desc1 = createModuleDescriptor(null, mods1, null);\n+\n+        \/\/ create the same module descriptor again and this time just change the order of the\n+        \/\/ \"exports\" modifiers' Set.\n+\n+        \/\/ important to use Set.of() (i.e. backed by immutable set) to reproduce the issue\n+        final Set<ModuleDescriptor.Requires.Modifier> mods2 = Set.of(\n+                ModuleDescriptor.Requires.Modifier.MANDATED, ModuleDescriptor.Requires.Modifier.SYNTHETIC);\n+        final ModuleDescriptor desc2 = createModuleDescriptor(null, mods2, null);\n+\n+        \/\/ basic verification of the modifiers themselves before we check the module descriptors\n+        assertEquals(mods1, mods2, \"Modifiers were expected to be equal\");\n@@ -114,0 +174,19 @@\n+\n+    \/\/ creates a module descriptor with passed (optional) opens\/exports\/requires modifiers\n+    private static ModuleDescriptor createModuleDescriptor(\n+            Set<ModuleDescriptor.Opens.Modifier> opensModifiers,\n+            Set<ModuleDescriptor.Requires.Modifier> reqsModifiers,\n+            Set<ModuleDescriptor.Exports.Modifier> expsModifiers) {\n+\n+        final var mdb = ModuleDescriptor.newModule(\"foobar\");\n+        if (opensModifiers != null) {\n+            mdb.opens(opensModifiers, \"a.p1\", Set.of(\"a.m1\"));\n+        }\n+        if (reqsModifiers != null) {\n+            mdb.requires(reqsModifiers, \"a.m2\");\n+        }\n+        if (expsModifiers != null) {\n+            mdb.exports(expsModifiers, \"a.b.c\", Set.of(\"a.m3\"));\n+        }\n+        return mdb.build();\n+    }\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorHashCodeTest.java","additions":91,"deletions":12,"binary":false,"changes":103,"status":"modified"}]}