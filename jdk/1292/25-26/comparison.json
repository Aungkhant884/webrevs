{"files":[{"patch":"@@ -385,1 +385,1 @@\n-                 .filter(p -> isSubclass(category, p))\n+                 .filter(p -> isSubclass(category, p) && p.type().getDeclaredAnnotation(Deprecated.class) == null)\n@@ -393,1 +393,2 @@\n-     * to locate implementations of the RandomGenerator interface.\n+     * to locate implementations of the RandomGenerator interface. RandomGenerators that are marked\n+     * as deprecated are not included in the result.\n@@ -401,0 +402,1 @@\n+                 .filter(p -> p.type().getDeclaredAnnotation(Deprecated.class) == null)\n@@ -408,0 +410,4 @@\n+     * @implNote Availability is determined by RandomGeneratorFactory using the service provider API\n+     * to locate implementations of the RandomGenerator interface. RandomGenerators that are marked\n+     * as deprecated are not included in the result.\n+     *\n@@ -549,0 +555,17 @@\n+    \/**\n+     * Return true if the implementation of RandomGenerator (algorithm) has been\n+     * marked for deprecation.\n+     *\n+     * @implNote Random number generator algorithms evolve over time; new\n+     *           algorithms will be introduced and old algorithms will\n+     *           lose standing. If an older algorithm is deemed unsuitable\n+     *           for continued use, it will be marked as deprecated to indicate\n+     *           that it may be removed at some point in the future.\n+     *\n+     * @return true if the implementation of RandomGenerator (algorithm) has been\n+     *         marked for deprecation\n+     *\/\n+     public boolean isDeprecated() {\n+        return provider.type().getDeclaredAnnotation(Deprecated.class) != null;\n+     }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGeneratorFactory.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"}]}