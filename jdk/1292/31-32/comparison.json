{"files":[{"patch":"@@ -645,3 +645,10 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code int} values.\n+     *\n+     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n+     * calling the method {@link #nextInt()}.\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of pseudorandom {@code int} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -656,2 +663,10 @@\n-     * {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code int}\n+     * values.\n+     *\n+     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n+     * calling the method {@link #nextInt()}.\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * ints(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code int} values\n@@ -666,3 +681,29 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number\n+     * of pseudorandom {@code int} values, each conforming to the given\n+     * origin (inclusive) and bound (exclusive).\n+     *\n+     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n+     * calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * int nextInt(int origin, int bound) {\n+     *   int n = bound - origin;\n+     *   if (n > 0) {\n+     *     return nextInt(n) + origin;\n+     *   }\n+     *   else {  \/\/ range not representable as int\n+     *     int r;\n+     *     do {\n+     *       r = nextInt();\n+     *     } while (r < origin || r >= bound);\n+     *     return r;\n+     *   }\n+     * }}<\/pre>\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code int} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero, or {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -677,3 +718,30 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * int} values, each conforming to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n+     * calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * int nextInt(int origin, int bound) {\n+     *   int n = bound - origin;\n+     *   if (n > 0) {\n+     *     return nextInt(n) + origin;\n+     *   }\n+     *   else {  \/\/ range not representable as int\n+     *     int r;\n+     *     do {\n+     *       r = nextInt();\n+     *     } while (r < origin || r >= bound);\n+     *     return r;\n+     *   }\n+     * }}<\/pre>\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code int} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -688,3 +756,10 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code long} values.\n+     *\n+     * <p>A pseudorandom {@code long} value is generated as if it's the result\n+     * of calling the method {@link #nextLong()}.\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of pseudorandom {@code long} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -699,2 +774,10 @@\n-     * {@inheritDoc}\n-     * @implSpec {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code long}\n+     * values.\n+     *\n+     * <p>A pseudorandom {@code long} value is generated as if it's the result\n+     * of calling the method {@link #nextLong()}.\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * longs(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code long} values\n@@ -709,3 +792,34 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code long}, each conforming to the given origin\n+     * (inclusive) and bound (exclusive).\n+     *\n+     * <p>A pseudorandom {@code long} value is generated as if it's the result\n+     * of calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * long nextLong(long origin, long bound) {\n+     *   long r = nextLong();\n+     *   long n = bound - origin, m = n - 1;\n+     *   if ((n & m) == 0L)  \/\/ power of two\n+     *     r = (r & m) + origin;\n+     *   else if (n > 0L) {  \/\/ reject over-represented candidates\n+     *     for (long u = r >>> 1;            \/\/ ensure nonnegative\n+     *          u + m - (r = u % n) < 0L;    \/\/ rejection check\n+     *          u = nextLong() >>> 1) \/\/ retry\n+     *         ;\n+     *     r += origin;\n+     *   }\n+     *   else {              \/\/ range not representable as long\n+     *     while (r < origin || r >= bound)\n+     *       r = nextLong();\n+     *   }\n+     *   return r;\n+     * }}<\/pre>\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code long} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero, or {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -720,3 +834,35 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * long} values, each conforming to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * <p>A pseudorandom {@code long} value is generated as if it's the result\n+     * of calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * long nextLong(long origin, long bound) {\n+     *   long r = nextLong();\n+     *   long n = bound - origin, m = n - 1;\n+     *   if ((n & m) == 0L)  \/\/ power of two\n+     *     r = (r & m) + origin;\n+     *   else if (n > 0L) {  \/\/ reject over-represented candidates\n+     *     for (long u = r >>> 1;            \/\/ ensure nonnegative\n+     *          u + m - (r = u % n) < 0L;    \/\/ rejection check\n+     *          u = nextLong() >>> 1) \/\/ retry\n+     *         ;\n+     *     r += origin;\n+     *   }\n+     *   else {              \/\/ range not representable as long\n+     *     while (r < origin || r >= bound)\n+     *       r = nextLong();\n+     *   }\n+     *   return r;\n+     * }}<\/pre>\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code long} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -731,3 +877,11 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code double} values, each between zero\n+     * (inclusive) and one (exclusive).\n+     *\n+     * <p>A pseudorandom {@code double} value is generated as if it's the result\n+     * of calling the method {@link #nextDouble()}.\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of {@code double} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -742,2 +896,11 @@\n-     * {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * double} values, each between zero (inclusive) and one\n+     * (exclusive).\n+     *\n+     * <p>A pseudorandom {@code double} value is generated as if it's the result\n+     * of calling the method {@link #nextDouble()}.\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * doubles(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code double} values\n@@ -751,4 +914,25 @@\n-    \/**\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+   \/**\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code double} values, each conforming to the given origin\n+     * (inclusive) and bound (exclusive).\n+     *\n+     * <p>A pseudorandom {@code double} value is generated as if it's the result\n+     * of calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * double nextDouble(double origin, double bound) {\n+     *   double r = nextDouble();\n+     *   r = r * (bound - origin) + origin;\n+     *   if (r >= bound) \/\/ correct for rounding\n+     *     r = Math.nextDown(bound);\n+     *   return r;\n+     * }}<\/pre>\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code double} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -763,3 +947,24 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     * @implSpec  {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * double} values, each conforming to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * <p>A pseudorandom {@code double} value is generated as if it's the result\n+     * of calling the following method with the origin and bound:\n+     * <pre> {@code\n+     * double nextDouble(double origin, double bound) {\n+     *   double r = nextDouble();\n+     *   r = r * (bound - origin) + origin;\n+     *   if (r >= bound) \/\/ correct for rounding\n+     *     r = Math.nextDown(bound);\n+     *   return r;\n+     * }}<\/pre>\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code double} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":239,"deletions":34,"binary":false,"changes":273,"status":"modified"},{"patch":"@@ -372,2 +372,8 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number\n+     * of pseudorandom {@code int} values from this generator and\/or\n+     * one split from it.\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of pseudorandom {@code int} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -381,1 +387,7 @@\n-     * {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code int}\n+     * values from this generator and\/or one split from it.\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * ints(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code int} values\n@@ -389,2 +401,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number\n+     * of pseudorandom {@code int} values from this generator and\/or one split\n+     * from it; each value conforms to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code int} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero, or {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -398,2 +421,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * int} values from this generator and\/or one split from it; each value\n+     * conforms to the given origin (inclusive) and bound (exclusive).\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code int} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -407,2 +441,8 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number\n+     * of pseudorandom {@code long} values from this generator and\/or\n+     * one split from it.\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of pseudorandom {@code long} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -416,1 +456,7 @@\n-     * {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * long} values from this generator and\/or one split from it.\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * longs(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code long} values\n@@ -424,2 +470,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code long} values from this generator and\/or one split\n+     * from it; each value conforms to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code long} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero, or {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -433,2 +490,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * long} values from this generator and\/or one split from it; each value\n+     * conforms to the given origin (inclusive) and bound (exclusive).\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code long} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -442,2 +510,8 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code double} values from this generator and\/or one split\n+     * from it; each value is between zero (inclusive) and one (exclusive).\n+     *\n+     * @param streamSize the number of values to generate\n+     * @return a stream of {@code double} values\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero\n@@ -451,1 +525,8 @@\n-     * {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * double} values from this generator and\/or one split from it; each value\n+     * is between zero (inclusive) and one (exclusive).\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * doubles(Long.MAX_VALUE)}.\n+     *\n+     * @return a stream of pseudorandom {@code double} values\n@@ -459,2 +540,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns a stream producing the given {@code streamSize} number of\n+     * pseudorandom {@code double} values from this generator and\/or one split\n+     * from it; each value conforms to the given origin (inclusive) and bound\n+     * (exclusive).\n+     *\n+     * @param streamSize the number of values to generate\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code double} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code streamSize} is\n+     *         less than zero, or {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n@@ -468,2 +560,13 @@\n-     * {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n+     * Returns an effectively unlimited stream of pseudorandom {@code\n+     * double} values from this generator and\/or one split from it; each value\n+     * conforms to the given origin (inclusive) and bound (exclusive).\n+     *\n+     * @implNote This method is implemented to be equivalent to {@code\n+     * doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n+     *\n+     * @param randomNumberOrigin the origin (inclusive) of each random value\n+     * @param randomNumberBound the bound (exclusive) of each random value\n+     * @return a stream of pseudorandom {@code double} values,\n+     *         each with the given origin (inclusive) and bound (exclusive)\n+     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n+     *         is greater than or equal to {@code randomNumberBound}\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":124,"deletions":21,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n- *      <td style=\"text-align:left\">ThreadLocalRandom<\/td>\n+ *      <td style=\"text-align:left\">ThreadLocalRandom <sup>*<\/sup><\/td>\n@@ -329,0 +329,2 @@\n+ * <p><sup>*<\/sup> ThreadLocalRandom can only be accessed via\n+ * {@link java.util.concurrent.ThreadLocalRandom#current()}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/package-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1512,14 +1512,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code int} values from this generator and\/or one\n-         * split from it.\n-         *\n-         * <p>The pseudorandom {@code int} values are generated as if it's the result of\n-         * calling the method {@link #nextInt()}.\n-         *\n-         * @param streamSize the number of values to generate\n-         *\n-         * @return a stream of pseudorandom {@code int} values\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -1532,12 +1518,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandomly chosen\n-         * {@code int} values.\n-         *\n-         * <p>The pseudorandom {@code int} values are generated as if the result of\n-         * calling the method {@link #nextInt()}.\n-         *\n-         * @implSpec The implementation of this method is effectively\n-         * equivalent to {@code ints(Long.MAX_VALUE)}.\n-         *\n-         * @return a stream of pseudorandomly chosen {@code int} values\n-         *\/\n@@ -1549,35 +1523,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code int} values from this generator and\/or one\n-         * split from it; each value conforms to the given origin (inclusive)\n-         * and bound (exclusive).\n-         *\n-         * @implSpec <p>The pseudorandom {@code int} values are generated as\n-         *           if the result of calling the following method with the\n-         *           origin and bound:\n-         *           <pre>{@code\n-         *           int nextInt(int origin, int bound) {\n-         *             int n = bound - origin;\n-         *             if (n > 0) {\n-         *               return nextInt(n) + origin;\n-         *             }\n-         *             else {  \/\/ range not representable as int\n-         *               int r;\n-         *               do {\n-         *                 r = nextInt();\n-         *               } while (r < origin || r >= bound);\n-         *               return r;\n-         *             }\n-         *           }}<\/pre>\n-         *\n-         * @param streamSize         the number of values to generate\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code int} values, each with the given origin (inclusive)\n-         *         and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero, or {@code\n-         *                                  randomNumberOrigin} is greater than or equal to {@code\n-         *                                  randomNumberBound}\n-         *\/\n@@ -1591,17 +1530,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandom {@code int}\n-         * values from this generator and\/or one split from it; each value\n-         * conforms to the given origin (inclusive) and bound (exclusive).\n-         *\n-         * @implSpec <p>This method is implemented to be equivalent to {@code\n-         *           ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n-         *\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code int} values, each with the given origin (inclusive)\n-         *         and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code randomNumberOrigin} is greater than or equal to\n-         *                                  {@code randomNumberBound}\n-         *\/\n@@ -1614,14 +1536,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code long} values from this generator and\/or one\n-         * split from it.\n-         *\n-         * <p>The pseudorandom {@code long} values are generated as if the result\n-         * of calling the method {@link #nextLong()}.\n-         *\n-         * @param streamSize the number of values to generate\n-         *\n-         * @return a stream of pseudorandom {@code long} values\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -1634,12 +1542,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandom\n-         * {@code long} values from this generator and\/or one split from it.\n-         *\n-         * <p>The pseudorandom {@code long} values are generated as if the result\n-         * of calling the method {@link #nextLong()}.\n-         *\n-         * @return a stream of pseudorandom {@code long} values\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         *         longs(Long.MAX_VALUE)}.\n-         *\/\n@@ -1651,40 +1547,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code long} values from this generator and\/or one\n-         * split from it; each value conforms to the given origin (inclusive)\n-         * and bound (exclusive).\n-         *\n-         * @implSpec <p>The pseudorandom {@code long} values are generated as\n-         *           if the result of calling the following method with the\n-         *           origin and bound:\n-         *           <pre>{@code\n-         *           long nextLong(long origin, long bound) {\n-         *             long r = nextLong();\n-         *             long n = bound - origin, m = n - 1;\n-         *             if ((n & m) == 0L)  \/\/ power of two\n-         *               r = (r & m) + origin;\n-         *             else if (n > 0L) {  \/\/ reject over-represented candidates\n-         *               for (long u = r >>> 1;            \/\/ ensure nonnegative\n-         *                    u + m - (r = u % n) < 0L;    \/\/ rejection check\n-         *                    u = nextLong() >>> 1) \/\/ retry\n-         *                   ;\n-         *               r += origin;\n-         *             }\n-         *             else {              \/\/ range not representable as long\n-         *               while (r < origin || r >= bound)\n-         *                 r = nextLong();\n-         *             }\n-         *             return r;\n-         *           }}<\/pre>\n-         *\n-         * @param streamSize         the number of values to generate\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code long} values, each with the given origin (inclusive)\n-         *         and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero, or {@code\n-         *                                  randomNumberOrigin} is greater than or equal to {@code\n-         *                                  randomNumberBound}\n-         *\/\n@@ -1699,18 +1555,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandom\n-         * {@code long} values from this generator and\/or one split from it;\n-         * each value conforms to the given origin (inclusive) and bound\n-         * (exclusive).\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         *           longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n-         *\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code long} values, each with the given origin (inclusive)\n-         *         and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code randomNumberOrigin} is greater than or equal to\n-         *                                  {@code randomNumberBound}\n-         *\/\n@@ -1725,15 +1563,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code double} values from this generator and\/or one\n-         * split from it; each value is between zero (inclusive) and one\n-         * (exclusive).\n-         *\n-         * <p>The pseudorandom {@code double} values are generated as ifs the result\n-         * of calling the method {@link #nextDouble()}.\n-         *\n-         * @param streamSize the number of values to generate\n-         *\n-         * @return a stream of {@code double} values\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -1746,13 +1569,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandom\n-         * {@code double} values from this generator and\/or one split from it;\n-         * each value is between zero (inclusive) and one (exclusive).\n-         *\n-         * <p>The pseudorandom {@code double} values are generated as if the result\n-         * of calling the method {@link #nextDouble()}.\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         * doubles(Long.MAX_VALUE)}.\n-         *\n-         * @return a stream of pseudorandom {@code double} values\n-         *\/\n@@ -1764,29 +1574,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of\n-         * pseudorandom {@code double} values from this generator and\/or one\n-         * split from it; each value conforms to the given origin (inclusive)\n-         * and bound (exclusive).\n-         *\n-         * @implSpec <p>The pseudorandom {@code double} values are generated\n-         *           as if the result of calling the following method with the\n-         *           origin and bound:\n-         *           <pre>{@code\n-         *           double nextDouble(double origin, double bound) {\n-         *             double r = nextDouble();\n-         *             r = r * (bound - origin) + origin;\n-         *             if (r >= bound) \/\/ correct for rounding\n-         *               r = Math.nextDown(bound);\n-         *             return r;\n-         *           }}<\/pre>\n-         *\n-         * @param streamSize         the number of values to generate\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code double} values, each with the given origin\n-         *         (inclusive) and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         * @throws IllegalArgumentException if {@code randomNumberOrigin} is greater than or equal to\n-         *                                  {@code randomNumberBound}\n-         *\/\n@@ -1800,18 +1581,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of pseudorandom\n-         * {@code double} values from this generator and\/or one split from it;\n-         * each value conforms to the given origin (inclusive) and bound\n-         * (exclusive).\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         *           doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n-         *\n-         * @param randomNumberOrigin the origin (inclusive) of each random value\n-         * @param randomNumberBound  the bound (exclusive) of each random value\n-         *\n-         * @return a stream of pseudorandom {@code double} values, each with the given origin\n-         *         (inclusive) and bound (exclusive)\n-         *\n-         * @throws IllegalArgumentException if {@code randomNumberOrigin} is greater than or equal to\n-         *                                  {@code randomNumberBound}\n-         *\/\n@@ -1946,11 +1709,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of new pseudorandom number\n-         * generators, each of which implements the {@link RandomGenerator}\n-         * interface, produced by jumping copies of this generator by different\n-         * integer multiples of the default jump distance.\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         *         jumps(Long.MAX_VALUE)}.\n-         *\/\n@@ -1962,13 +1714,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of new\n-         * pseudorandom number generators, each of which implements the\n-         * {@link RandomGenerator} interface, produced by jumping copies of this\n-         * generator by different integer multiples of the default jump\n-         * distance.\n-         *\n-         * @param streamSize the number of generators to generate\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -1981,13 +1720,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of new pseudorandom number\n-         * generators, each of which implements the {@link RandomGenerator}\n-         * interface, produced by jumping copies of this generator by different\n-         * integer multiples of the specified jump distance.\n-         *\n-         * @param distance a distance to jump forward within the state cycle\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code\n-         *         jumps(Long.MAX_VALUE)}.\n-         *\/\n@@ -1999,14 +1725,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of new\n-         * pseudorandom number generators, each of which implements the\n-         * {@link RandomGenerator} interface, produced by jumping copies of this\n-         * generator by different integer multiples of the specified jump\n-         * distance.\n-         *\n-         * @param streamSize the number of generators to generate\n-         * @param distance   a distance to jump forward within the state cycle\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -2019,7 +1731,0 @@\n-        \/**\n-         * Alter the state of this pseudorandom number generator so as to jump\n-         * forward a very large, fixed distance (typically 2<sup>128<\/sup> or\n-         * more) within its state cycle. The distance used is that returned by\n-         * method\n-         * {@link LeapableGenerator#leapDistance() leapDistance}().\n-         *\/\n@@ -2033,10 +1738,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of new pseudorandom number\n-         * generators, each of which implements the {@link RandomGenerator}\n-         * interface, produced by jumping copies of this generator by different\n-         * integer multiples of the default leap distance.\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code leaps(Long.MAX_VALUE)}.\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\/\n@@ -2048,13 +1743,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of new\n-         * pseudorandom number generators, each of which implements the\n-         * {@link RandomGenerator} interface, produced by jumping copies of this\n-         * generator by different integer multiples of the default leap\n-         * distance.\n-         *\n-         * @param streamSize the number of generators to generate\n-         *\n-         * @return a stream of objects that implement the {@link RandomGenerator} interface\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -2454,12 +2136,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of new pseudorandom number\n-         * generators, each of which implements the {@link SplittableGenerator}\n-         * interface.\n-         *\n-         * <p> This pseudorandom number generator provides the entropy used to\n-         * seed the new ones.\n-         *\n-         * @return a stream of {@link SplittableGenerator} objects\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code splits(Long.MAX_VALUE)}.\n-         *\/\n@@ -2471,14 +2141,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of new\n-         * pseudorandom number generators, each of which implements the\n-         * {@link SplittableGenerator} interface.\n-         *\n-         * <p> This pseudorandom number generator provides the entropy used to\n-         * seed the new ones.\n-         *\n-         * @param streamSize the number of values to generate\n-         *\n-         * @return a stream of {@link SplittableGenerator} objects\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -2490,14 +2146,0 @@\n-        \/**\n-         * Returns an effectively unlimited stream of new pseudorandom number\n-         * generators, each of which implements the {@link SplittableGenerator}\n-         * interface.\n-         *\n-         * @param source a {@link SplittableGenerator} instance to be used instead of this one as a source of\n-         *               pseudorandom bits used to initialize the state of the new ones.\n-         *\n-         * @return a stream of {@link SplittableGenerator} objects\n-         *\n-         * @throws NullPointerException if source is null\n-         *\n-         * @implSpec This method is implemented to be equivalent to {@code splits(Long.MAX_VALUE)}.\n-         *\/\n@@ -2509,15 +2151,0 @@\n-        \/**\n-         * Returns a stream producing the given {@code streamSize} number of new\n-         * pseudorandom number generators, each of which implements the\n-         * {@link SplittableGenerator} interface.\n-         *\n-         * @param streamSize the number of values to generate\n-         * @param source     a {@link SplittableGenerator} instance to be used instead of this one as a source\n-         *                   of pseudorandom bits used to initialize the state of the new ones.\n-         *\n-         * @return a stream of {@link SplittableGenerator} objects\n-         *\n-         * @throws NullPointerException if source is null\n-         *\n-         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n-         *\/\n@@ -2850,19 +2477,0 @@\n-        \/**\n-         * Constructs and returns a new instance of {@link SplittableGenerator}\n-         * that shares no mutable state with this instance. However, with very\n-         * high probability, the set of values collectively generated by the two\n-         * objects has the same statistical properties as if same the quantity\n-         * of values were generated by a single thread using a single\n-         * {@code jdk.random.L64X128MixRandom} object. Either or both of the two\n-         * objects may be further split using the\n-         * {@link SplittableGenerator#split() split}() method, and the same\n-         * expected statistical properties apply to the entire set of generators\n-         * constructed by such recursive splitting.\n-         *\n-         * @param source a {@code SplittableGenerator} instance to be used instead\n-         *               of this one as a source of pseudorandom bits used to\n-         *               initialize the state of the new ones.\n-         * @return the new {@code SplittableGenerator} instance\n-         *\n-         * @throws NullPointerException if source is null\n-         *\/\n@@ -2875,24 +2483,0 @@\n-        \/**\n-         * Constructs and returns a new instance of\n-         * {@link AbstractSplittableWithBrineGenerator} that shares no mutable\n-         * state with this instance. However, with very high probability, the\n-         * set of values collectively generated by the two objects should have\n-         * the same statistical properties as if the same quantity of values\n-         * were generated by a single thread using a single may be\n-         * {@link AbstractSplittableWithBrineGenerator} object. Either or both\n-         * of the two objects further split using the\n-         * {@link SplittableGenerator#split() split}() method, and the same\n-         * expected statistical properties apply to the entire set of generators\n-         * constructed by such recursive splitting.\n-         *\n-         * @param source a {@code SplittableGenerator} instance to be used instead\n-         *               of this one as a source of pseudorandom bits used to\n-         *               initialize the state of the new ones.\n-         * @param brine a long value, of which the low 63 bits provide a unique id\n-         *              among calls to this method for constructing a single series of\n-         *              {@code RandomGenerator} objects.\n-         *\n-         * @return the new {@code AbstractSplittableWithBrineGenerator} instance\n-         *\n-         * @throws NullPointerException if source is null\n-         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":0,"deletions":416,"binary":false,"changes":416,"status":"modified"}]}