{"files":[{"patch":"@@ -49,1 +49,0 @@\n- * @author Guy Steele\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestBsi1999.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n- * @author Guy Steele\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestChiSquared.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+import java.math.BigInteger;\n+import java.security.SecureRandom;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGenerator.ArbitrarilyJumpableGenerator;\n+import java.util.random.RandomGenerator.JumpableGenerator;\n+import java.util.random.RandomGenerator.LeapableGenerator;\n+import java.util.random.RandomGenerator.SplittableGenerator;\n+import java.util.random.RandomGenerator.StreamableGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * @test\n+ * @summary Ensure that all implementations of RandomGenerator supply required methods.\n+ * @bug 8248862\n+ * @run main RandomTestCoverage\n+ * @key randomness\n+ *\/\n+\n+\n+public class RandomTestCoverage {\n+    static void coverRandomGenerator(RandomGenerator rng) {\n+        boolean bool = rng.nextBoolean();\n+        byte[] bytes = new byte[8];\n+        rng.nextBytes(bytes);\n+\n+        int i1 = rng.nextInt();\n+        int i2 = rng.nextInt(10);\n+        int i3 = rng.nextInt(5, 10);\n+\n+        long l1 = rng.nextLong();\n+        long l2 = rng.nextLong(10L);\n+        long l3 = rng.nextLong(5L, 10L);\n+\n+        float f1 = rng.nextFloat();\n+        float f2 = rng.nextFloat(1.0f);\n+        float f3 = rng.nextFloat(0.5f, 1.0f);\n+\n+        double d1 = rng.nextDouble();\n+        double d2 = rng.nextDouble(1.0);\n+        double d3 = rng.nextDouble(0.5, 1.0);\n+\n+        double exp = rng.nextExponential();\n+        double gauss1 = rng.nextGaussian();\n+        double gauss2 = rng.nextGaussian(0.5, 2.0);\n+\n+        IntStream intStream1 = rng.ints();\n+        IntStream intStream2 = rng.ints(5, 10);\n+        IntStream intStream3 = rng.ints(5L);\n+        IntStream intStream4 = rng.ints(5L, 5, 10);\n+\n+        LongStream longStream1 = rng.longs();\n+        LongStream longStream2 = rng.longs(5L, 10L);\n+        LongStream longStream3 = rng.longs(5L);\n+        LongStream longStream4 = rng.longs(5L, 5L, 10L);\n+\n+        DoubleStream doubleStream1 = rng.doubles();\n+        DoubleStream doubleStream2 = rng.doubles(0.5, 1.0);\n+        DoubleStream doubleStream3 = rng.doubles(5);\n+        DoubleStream doubleStream4 = rng.doubles(5, 0.5, 1.0);\n+    }\n+\n+    static void coverStreamable(StreamableGenerator rng) {\n+        Stream<RandomGenerator> rngs1 = rng.rngs();\n+        Stream<RandomGenerator> rngs2 = rng.rngs(5L);\n+    }\n+\n+    static void coverSplittable(SplittableGenerator rng) {\n+        SplittableGenerator s1 = rng.split();\n+        SplittableGenerator s2 = rng.split(rng);\n+        Stream<SplittableGenerator> s3 = rng.splits();\n+        Stream<SplittableGenerator> s4 = rng.splits(5L);\n+        Stream<SplittableGenerator> s5 = rng.splits(rng);\n+        Stream<SplittableGenerator> s6 = rng.splits(5L, rng);\n+    }\n+\n+    static void coverJumpable(JumpableGenerator rng) {\n+        JumpableGenerator j1 = rng.copy();\n+        rng.jump();\n+        RandomGenerator j2 = rng.copyAndJump();\n+        double d = rng.jumpDistance();\n+        Stream<RandomGenerator> j3 = rng.jumps();\n+        Stream<RandomGenerator> j4 = rng.jumps(5L);\n+    }\n+\n+    static void coverLeapable(LeapableGenerator rng) {\n+        LeapableGenerator l1 = rng.copy();\n+        rng.leap();\n+        JumpableGenerator l2 = rng.copyAndLeap();\n+        double d = rng.leapDistance();\n+        Stream<JumpableGenerator> l3 = rng.leaps();\n+        Stream<JumpableGenerator> l4 = rng.leaps(5L);\n+    }\n+\n+    static void coverArbitrarilyJumpable(ArbitrarilyJumpableGenerator rng) {\n+        ArbitrarilyJumpableGenerator a1 = rng.copy();\n+        rng.jump();\n+        rng.leap();\n+        rng.jump(1.2345);\n+        rng.jumpPowerOfTwo(4);\n+        RandomGenerator a2 = rng.copyAndJump();\n+        RandomGenerator a3 = rng.copyAndJump(1.2345);\n+        Stream<ArbitrarilyJumpableGenerator> a4 = rng.jumps(1.2345);\n+        Stream<ArbitrarilyJumpableGenerator> a5 = rng.jumps(5L, 1.2345);\n+\n+    }\n+\n+    static void coverOf(String name) {\n+        coverRandomGenerator(RandomGenerator.of(name));\n+        coverFactory(RandomGenerator.factoryOf(name));\n+    }\n+\n+    static void coverFactory(RandomGeneratorFactory factory) {\n+        String name = factory.name();\n+        String group = factory.group();\n+        int stateBits = factory.stateBits();\n+        int equidistribution = factory.equidistribution();\n+        BigInteger period = factory.period();\n+        boolean isStatistical = factory.isStatistical();\n+        boolean isStochastic = factory.isStochastic();\n+        boolean isHardware = factory.isHardware();\n+        boolean isArbitrarilyJumpable = factory.isArbitrarilyJumpable();\n+        boolean isJumpable = factory.isJumpable();\n+        boolean isLeapable = factory.isLeapable();\n+        boolean isSplittable = factory.isSplittable();\n+\n+        coverRandomGenerator(factory.create());\n+        coverRandomGenerator(factory.create(12345L));\n+        coverRandomGenerator(factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}));\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        RandomGenerator.all()\n+                .forEach(factory -> {\n+                    coverFactory(factory);\n+                    coverOf(factory.name());\n+                 });\n+        StreamableGenerator.all()\n+                .forEach(factory -> {\n+                    coverStreamable(factory.create());\n+                });\n+        SplittableGenerator.all()\n+                .forEach(factory -> {\n+                    coverSplittable(factory.create());\n+                });\n+        JumpableGenerator.all()\n+                .forEach(factory -> {\n+                    coverJumpable(factory.create());\n+                });\n+        LeapableGenerator.all()\n+                .forEach(factory -> {\n+                    coverLeapable(factory.create());\n+                });\n+        ArbitrarilyJumpableGenerator.all()\n+                .forEach(factory -> {\n+                    coverArbitrarilyJumpable(factory.create());\n+                });\n+\n+        coverRandomGenerator(new SecureRandom());\n+        coverRandomGenerator(ThreadLocalRandom.current());\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestCoverage.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}