{"files":[{"patch":"@@ -613,10 +613,0 @@\n-#ifdef TRACK_PHI_INPUTS\n-  \/\/ %%% This extra checking fails because MergeMem nodes are not GVNed.\n-  \/\/ Provide \"phi_inputs\" to check if every input to a PhiNode is from the\n-  \/\/ original memory state.  This indicates a PhiNode for which should not\n-  \/\/ prevent the load from sinking.  For such a block, set_raise_LCA_mark\n-  \/\/ may be overly conservative.\n-  \/\/ Mechanism: count inputs seen for each Phi encountered in worklist_store.\n-  DEBUG_ONLY(GrowableArray<uint> phi_inputs(area, C->unique(),0,0));\n-#endif\n-\n@@ -764,13 +754,0 @@\n-#ifdef TRACK_PHI_INPUTS\n-#ifdef ASSERT\n-        \/\/ This assert asks about correct handling of PhiNodes, which may not\n-        \/\/ have all input edges directly from 'mem'. See BugId 4621264\n-        int num_mem_inputs = phi_inputs.at_grow(store->_idx,0) + 1;\n-        \/\/ Increment by exactly one even if there are multiple copies of 'mem'\n-        \/\/ coming into the phi, because we will run this block several times\n-        \/\/ if there are several copies of 'mem'.  (That's how DU iterators work.)\n-        phi_inputs.at_put(store->_idx, num_mem_inputs);\n-        assert(PhiNode::Input + num_mem_inputs < store->req(),\n-               \"Expect at least one phi input will not be from original memory state\");\n-#endif \/\/ASSERT\n-#endif \/\/TRACK_PHI_INPUTS\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"}]}