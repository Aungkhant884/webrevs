{"files":[{"patch":"@@ -0,0 +1,556 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8302525\n+ * @summary Test performs various mouse and key operations to checks events are getting triggered properly.\n+ * @run main MouseAndKeyEventStressTest\n+ *\/\n+public class MouseAndKeyEventStressTest {\n+\n+    private volatile static int mouseButtonTypes[] =\n+        { InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK,\n+            InputEvent.BUTTON3_DOWN_MASK };\n+    private volatile static String mouseButtonNames[] =\n+        { \"BUTTON1\", \"BUTTON2\", \"BUTTON3\" };\n+\n+    private static Frame frame;\n+    private volatile static Canvas canvas;\n+    private volatile static Button button;\n+    private volatile static List list;\n+    private volatile static Choice choice;\n+    private volatile static Checkbox checkbox;\n+    private volatile static Component[] components;\n+\n+    private volatile static boolean keyPressed;\n+    private volatile static boolean keyReleased;\n+    private volatile static boolean mousePressed;\n+    private volatile static boolean mouseReleased;\n+    private volatile static boolean actionPerformed;\n+    private volatile static boolean itemEventPerformed;\n+\n+    private volatile static Robot robot;\n+    private volatile static Point compAt;\n+    private volatile static Dimension compSize;\n+\n+    private static void initializeGUI() {\n+        frame = new Frame(\"Test Frame\");\n+        frame.setLayout(new FlowLayout());\n+        canvas = new Canvas();\n+        canvas.setSize(50, 50);\n+        canvas.setBackground(Color.red);\n+        button = new Button(\"Button\");\n+        list = new List();\n+        list.add(\"One\");\n+        list.add(\"Two\");\n+        list.add(\"Three\");\n+        choice = new Choice();\n+        for (int i = 0; i < 8; i++) {\n+            choice.add(\"Choice \" + i);\n+        }\n+        choice.select(3);\n+        checkbox = new Checkbox(\"Checkbox\");\n+\n+        components = new Component[] { canvas, button, list, choice, checkbox };\n+\n+        button.addActionListener((actionEvent) -> {\n+            actionPerformed = true;\n+            System.out.println(\"button Got an actionEvent: \" + actionEvent);\n+        });\n+        checkbox.addItemListener((itemEvent) -> {\n+            itemEventPerformed = true;\n+            System.out.println(\"checkbox Got a ItemEvent: \" + itemEvent);\n+        });\n+        list.addItemListener((itemEvent) -> {\n+            itemEventPerformed = true;\n+            System.out.println(\"List Got a  ItemEvent: \" + itemEvent);\n+        });\n+        choice.addItemListener((itemEvent) -> {\n+            itemEventPerformed = true;\n+            System.out.println(\"Choice Got a  ItemEvent: \" + itemEvent);\n+        });\n+        for (int i = 0; i < components.length; i++) {\n+            components[i].addKeyListener(new KeyAdapter() {\n+\n+                public void keyPressed(KeyEvent ke) {\n+                    System.out.println(\"Got a  keyPressedSource: \" + ke);\n+                    keyPressed = true;\n+                }\n+\n+                public void keyReleased(KeyEvent ke) {\n+                    System.out.println(\"Got a  keyReleasedSource: \" + ke);\n+                    keyReleased = true;\n+                }\n+            });\n+            components[i].addMouseListener(new MouseAdapter() {\n+\n+                public void mousePressed(MouseEvent me) {\n+                    mousePressed = true;\n+                    System.out.println(\"Got a  mousePressSource: \" + me);\n+                }\n+\n+                public void mouseReleased(MouseEvent me) {\n+                    mouseReleased = true;\n+                    System.out.println(\"Got a  mouseReleaseSource: \" + me);\n+                }\n+\n+            });\n+            frame.add(components[i]);\n+        }\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(MouseAndKeyEventStressTest::initializeGUI);\n+            doTest();\n+        } finally {\n+            EventQueue.invokeAndWait(MouseAndKeyEventStressTest::disposeFrame);\n+        }\n+    }\n+\n+    private static void doTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        robot.waitForIdle();\n+\n+        canvasMouseKeyTest();\n+        buttonMouseKeyTest();\n+        listMouseKeyTest();\n+        choiceMouseKeyTest();\n+        checkboxMouseKeyTest();\n+\n+        System.out.println(\"Test passed!\");\n+    }\n+\n+    private static void canvasMouseKeyTest() throws Exception {\n+        Component component = canvas;\n+        robot.waitForIdle();\n+\n+        for (int i = 0; i < mouseButtonTypes.length; i++) {\n+            resetValues();\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = component.getLocationOnScreen();\n+                compSize = component.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: Moving focus. mousePressed event did not occur for \"\n+                        + component.getClass());\n+            }\n+\n+            resetValues();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyPressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: keyPressed event \" + \"did not occur for \"\n+                        + component.getClass() + \" for key A\");\n+            }\n+\n+            resetValues();\n+            robot.mousePress(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: mousePressed event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.mouseRelease(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mouseReleased) {\n+                throw new RuntimeException(\n+                    \"FAIL: mouseReleased event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyReleased) {\n+                throw new RuntimeException(\"FAIL: keyReleased event \"\n+                    + \"did not occur for \" + component.getClass());\n+            }\n+\n+            keyType(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+        }\n+        System.out.println(\"Test passed:\" + component);\n+    }\n+\n+    private static void buttonMouseKeyTest() throws Exception {\n+        Component component = button;\n+        robot.waitForIdle();\n+\n+        for (int i = 0; i < mouseButtonTypes.length; i++) {\n+            resetValues();\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = component.getLocationOnScreen();\n+                compSize = component.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: Moving focus. mousePressed event did not occur for \"\n+                        + component.getClass());\n+            }\n+\n+            resetValues();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyPressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: keyPressed event \" + \"did not occur for \"\n+                        + component.getClass() + \" for key A\");\n+            }\n+\n+            resetValues();\n+            robot.mousePress(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: mousePressed event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.mouseRelease(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+\n+            if (!actionPerformed) {\n+                throw new RuntimeException(\n+                    \"FAIL: action event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            if (!mouseReleased) {\n+                throw new RuntimeException(\n+                    \"FAIL: mouseReleased event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyReleased) {\n+                throw new RuntimeException(\"FAIL: keyReleased event \"\n+                    + \"did not occur for \" + component.getClass());\n+            }\n+\n+            keyType(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+        }\n+        System.out.println(\"Test passed:\" + component);\n+    }\n+\n+    private static void listMouseKeyTest() throws Exception {\n+        Component component = list;\n+        robot.waitForIdle();\n+\n+        for (int i = 0; i < mouseButtonTypes.length; i++) {\n+            resetValues();\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = component.getLocationOnScreen();\n+                compSize = component.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: Moving focus. mousePressed event did not occur for \"\n+                        + component.getClass());\n+            }\n+\n+            resetValues();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyPressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: keyPressed event \" + \"did not occur for \"\n+                        + component.getClass() + \" for key A\");\n+            }\n+\n+            resetValues();\n+            robot.mousePress(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: mousePressed event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.mouseRelease(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+\n+            if (!itemEventPerformed) {\n+                throw new RuntimeException(\"FAIL: Item event did not occur for \"\n+                    + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            if (!mouseReleased) {\n+                throw new RuntimeException(\n+                    \"FAIL: mouseReleased event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyReleased) {\n+                throw new RuntimeException(\"FAIL: keyReleased event \"\n+                    + \"did not occur for \" + component.getClass());\n+            }\n+\n+            keyType(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+        }\n+        System.out.println(\"Test passed:\" + component);\n+    }\n+\n+    private static void choiceMouseKeyTest() throws Exception {\n+        Component component = choice;\n+        robot.waitForIdle();\n+\n+        for (int i = 0; i < mouseButtonTypes.length; i++) {\n+            resetValues();\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = component.getLocationOnScreen();\n+                compSize = component.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: Moving focus. mousePressed event did not occur for \"\n+                        + component.getClass());\n+            }\n+\n+            if (component instanceof Choice) {\n+                keyType(KeyEvent.VK_ESCAPE);\n+            }\n+\n+            resetValues();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyPressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: keyPressed event \" + \"did not occur for \"\n+                        + component.getClass() + \" for key A\");\n+            }\n+\n+            resetValues();\n+            robot.mousePress(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: mousePressed event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            boolean isMac =\n+                System.getProperty(\"os.name\").toLowerCase().contains(\"os x\");\n+            if (isMac) {\n+                \/\/ Choice's pop-up menu is drawn in front of choice. So\n+                \/\/ choice can not get mouse events generated by robot,\n+                \/\/ that's why test is made to dispath event.\n+                MouseEvent me =\n+                    new MouseEvent(choice, MouseEvent.MOUSE_RELEASED,\n+                        System.currentTimeMillis(), mouseButtonTypes[i],\n+                        compSize.width, compSize.height, 1, false);\n+                choice.dispatchEvent(me);\n+            } else {\n+                robot.mouseRelease(mouseButtonTypes[i]);\n+            }\n+            robot.waitForIdle();\n+\n+            if (!mouseReleased) {\n+                throw new RuntimeException(\n+                    \"FAIL: mouseReleased event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height + 30);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+\n+            if (!itemEventPerformed) {\n+                throw new RuntimeException(\"FAIL: Item event did not occur for \"\n+                    + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyReleased) {\n+                throw new RuntimeException(\"FAIL: keyReleased event \"\n+                    + \"did not occur for \" + component.getClass());\n+            }\n+\n+            keyType(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+        }\n+        System.out.println(\"Test passed:\" + component);\n+    }\n+\n+    private static void checkboxMouseKeyTest() throws Exception {\n+        Component component = checkbox;\n+        robot.waitForIdle();\n+        for (int i = 0; i < mouseButtonTypes.length; i++) {\n+\n+            resetValues();\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = component.getLocationOnScreen();\n+                compSize = component.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: Moving focus. mousePressed event did not occur for \"\n+                        + component.getClass());\n+            }\n+\n+            resetValues();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyPressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: keyPressed event \" + \"did not occur for \"\n+                        + component.getClass() + \" for key A\");\n+            }\n+\n+            resetValues();\n+            robot.mousePress(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mousePressed) {\n+                throw new RuntimeException(\n+                    \"FAIL: mousePressed event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.mouseRelease(mouseButtonTypes[i]);\n+            robot.waitForIdle();\n+            if (!mouseReleased) {\n+                throw new RuntimeException(\n+                    \"FAIL: mouseReleased event did not occur for \"\n+                        + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            if (!itemEventPerformed) {\n+                throw new RuntimeException(\"FAIL: Item event did not occur for \"\n+                    + component.getClass() + \" for \" + mouseButtonNames[i]);\n+            }\n+\n+            resetValues();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            if (!keyReleased) {\n+                throw new RuntimeException(\"FAIL: keyReleased event \"\n+                    + \"did not occur for \" + component.getClass());\n+            }\n+\n+            keyType(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+        }\n+        System.out.println(\"Test passed:\" + component);\n+    }\n+\n+    private static void resetValues() {\n+        keyPressed = false;\n+        keyReleased = false;\n+        mousePressed = false;\n+        mouseReleased = false;\n+    }\n+\n+    private static void keyType(int key) throws Exception {\n+        robot.keyPress(key);\n+        robot.keyRelease(key);\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/event\/StressTest\/MouseAndKeyEventStressTest.java","additions":556,"deletions":0,"binary":false,"changes":556,"status":"added"}]}