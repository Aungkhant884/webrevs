{"files":[{"patch":"@@ -34,0 +34,2 @@\n+\/\/ This constructor is used only by SystemDictionaryShared::clone_dumptime_tables().\n+\/\/ See comments there about the need for making a deep copy.\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,10 +44,0 @@\n-  static void maybe_increment_refcount(Symbol* s) {\n-    if (s != NULL) {\n-      s->increment_refcount();\n-    }\n-  }\n-  static void maybe_decrement_refcount(Symbol* s) {\n-    if (s != NULL) {\n-      s->decrement_refcount();\n-    }\n-  }\n@@ -61,1 +51,1 @@\n-      maybe_increment_refcount(_name);\n+      Symbol::maybe_increment_refcount(_name);\n@@ -67,1 +57,1 @@\n-      maybe_increment_refcount(_name);\n+      Symbol::maybe_increment_refcount(_name);\n@@ -76,1 +66,1 @@\n-      maybe_decrement_refcount(_name);\n+      Symbol::maybe_decrement_refcount(_name);\n@@ -99,2 +89,2 @@\n-      maybe_increment_refcount(_name);\n-      maybe_increment_refcount(_from_name);\n+      Symbol::maybe_increment_refcount(_name);\n+      Symbol::maybe_increment_refcount(_from_name);\n@@ -105,2 +95,2 @@\n-      maybe_increment_refcount(_name);\n-      maybe_increment_refcount(_from_name);\n+      Symbol::maybe_increment_refcount(_name);\n+      Symbol::maybe_increment_refcount(_from_name);\n@@ -114,2 +104,2 @@\n-      maybe_decrement_refcount(_name);\n-      maybe_decrement_refcount(_from_name);\n+      Symbol::maybe_decrement_refcount(_name);\n+      Symbol::maybe_decrement_refcount(_from_name);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\/\/ This constructor is used only by SystemDictionaryShared::clone_dumptime_tables().\n+\/\/ See comments there about the need for making a deep copy.\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1454,0 +1454,1 @@\n+      assert(created, \"must be\");\n@@ -1475,0 +1476,1 @@\n+    assert(created, \"must be\");\n@@ -1480,0 +1482,12 @@\n+\/\/ When dumping the CDS archive, the ArchiveBuilder will irrecoverably modify the\n+\/\/ _dumptime_table and _dumptime_lambda_proxy_class_dictionary (e.g., metaspace\n+\/\/ pointers are changed to use \"buffer\" addresses.)\n+\/\/\n+\/\/ We save a copy of these tables and restore them after the dumping is finished.\n+\/\/ This makes it possible to repeat the dumping operation (e.g., use\n+\/\/ \"jcmd VM.cds dynamic_dump\" multiple times on the same JVM process).\n+\/\/\n+\/\/ We use the copy constructors to clone the values in these tables. The copy constructors\n+\/\/ must make a deep copy, as internal data structures such as the contents of\n+\/\/ DumpTimeClassInfo::_loader_constraints are also modified by the ArchiveBuilder.\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -175,0 +175,10 @@\n+  static void maybe_increment_refcount(Symbol* s) {\n+    if (s != NULL) {\n+      s->increment_refcount();\n+    }\n+  }\n+  static void maybe_decrement_refcount(Symbol* s) {\n+    if (s != NULL) {\n+      s->decrement_refcount();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}