{"files":[{"patch":"@@ -239,1 +239,4 @@\n-  assert(_pc == *pc_addr || pc == *pc_addr || *pc_addr == 0, \"must be (pc: \" INTPTR_FORMAT \" _pc: \" INTPTR_FORMAT \" pc_addr: \" INTPTR_FORMAT \" *pc_addr: \" INTPTR_FORMAT  \" sp: \" INTPTR_FORMAT \")\", p2i(pc), p2i(_pc), p2i(pc_addr), p2i(*pc_addr), p2i(sp()));\n+  assert(_pc == *pc_addr || pc == *pc_addr || 0 == *pc_addr,\n+         \"must be (pc: \" INTPTR_FORMAT \" _pc: \" INTPTR_FORMAT \" pc_addr: \" INTPTR_FORMAT\n+         \" *pc_addr: \" INTPTR_FORMAT  \" sp: \" INTPTR_FORMAT \")\",\n+         p2i(pc), p2i(_pc), p2i(pc_addr), p2i(*pc_addr), p2i(sp()));\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  \/\/ Initialize frame members\n+  \/\/ Initialize frame members (_pc and _sp must be given)\n@@ -387,2 +387,0 @@\n-  inline frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map);\n-  inline frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool on_heap);\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-\/\/ Initialize frame members\n+\/\/ Initialize frame members (_pc and _sp must be given)\n@@ -93,25 +93,0 @@\n-inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map)\n-  : _sp(sp), _pc(pc), _cb(cb), _oop_map(oop_map),\n-    _on_heap(false), DEBUG_ONLY(_frame_index(-1) COMMA) _unextended_sp(unextended_sp), _fp(fp) {\n-  assert(_cb != nullptr, \"pc: \" INTPTR_FORMAT, p2i(pc));\n-  setup();\n-}\n-\n-inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb,\n-                    const ImmutableOopMap* oop_map, bool on_heap)\n-                    : _sp(sp), _pc(pc), _cb(cb), _oop_map(oop_map), _deopt_state(not_deoptimized),\n-                      _on_heap(on_heap), DEBUG_ONLY(_frame_index(-1) COMMA) _unextended_sp(unextended_sp), _fp(fp) {\n-  \/\/ In thaw, non-heap frames use this constructor to pass oop_map.  I don't know why.\n-  assert(_on_heap || _cb != nullptr, \"these frames are always heap frames\");\n-  if (cb != NULL) {\n-    setup();\n-  }\n-#ifdef ASSERT\n-  \/\/ The following assertion has been disabled because it would sometime trap for Continuation.run,\n-  \/\/ which is not *in* a continuation and therefore does not clear the _cont_fastpath flag, but this\n-  \/\/ is benign even in fast mode (see Freeze::setup_jump)\n-  \/\/ We might freeze deoptimized frame in slow mode\n-  \/\/ assert(_pc == pc && _deopt_state == not_deoptimized, \"\");\n-#endif\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"}]}