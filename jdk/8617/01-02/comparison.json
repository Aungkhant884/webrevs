{"files":[{"patch":"@@ -4536,1 +4536,6 @@\n-  static RuntimeStub* generate_jfr_stub(const char* name, address entrypoint) {\n+  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n+  \/\/ It returns a jobject handle to the event writer.\n+  \/\/ The handle is dereferenced and the return value is the event writer oop.\n+  RuntimeStub* generate_jfr_write_checkpoint() {\n+    Register tmp1 = R10_ARG8;\n+    Register tmp2 = R9_ARG7;\n@@ -4539,1 +4544,1 @@\n-    CodeBuffer code(name, insts_size, locs_size);\n+    CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n@@ -4544,0 +4549,1 @@\n+    int framesize = frame::abi_reg_args_size \/ VMRegImpl::stack_slot_size;\n@@ -4545,1 +4551,3 @@\n-    __ unimplemented(FILE_AND_LINE);\n+    __ mflr(tmp1);\n+    __ std(tmp1, _abi0(lr), R1_SP);  \/\/ save return pc\n+    __ push_frame_reg_args(0, tmp1);\n@@ -4547,0 +4555,19 @@\n+    __ set_last_Java_frame(R1_SP, noreg);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint), R16_thread);\n+    address calls_return_pc = __ last_calls_return_pc();\n+    __ reset_last_Java_frame();\n+    \/\/ The handle is dereferenced through a load barrier.\n+    Label null_jobject;\n+    __ cmpdi(CCR0, R3_RET, 0);\n+    __ beq(CCR0, null_jobject);\n+    DecoratorSet decorators = ACCESS_READ | IN_NATIVE;\n+    BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+    bs->load_at(_masm, decorators, T_OBJECT, R3_RET \/*base*\/, (intptr_t)0, R3_RET \/*dst*\/, tmp1, tmp2, MacroAssembler::PRESERVATION_NONE);\n+    __ bind(null_jobject);\n+    __ pop_frame();\n+    __ ld(tmp1, _abi0(lr), R1_SP);\n+    __ mtlr(tmp1);\n+    __ blr();\n+\n+    OopMap* map = new OopMap(framesize, 0);\n+    oop_maps->add_gc_map(calls_return_pc - start, map);\n@@ -4549,2 +4576,2 @@\n-      RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n-                                    0 \/*framesize*\/,\n+      RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+                                    (framesize >> (LogBytesPerWord - LogBytesPerInt)),\n@@ -4555,14 +4582,0 @@\n-  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n-  \/\/ It returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_write_checkpoint() {\n-    return generate_jfr_stub(\"jfr_write_checkpoint\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint));\n-  }\n-\n-  \/\/ For c1: call the corresponding runtime routine, it returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_get_event_writer() {\n-    return generate_jfr_stub(\"jfr_get_event_writer\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::event_writer));\n-  }\n@@ -4618,2 +4631,0 @@\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer_stub = generate_jfr_get_event_writer();)\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer = StubRoutines::_jfr_get_event_writer_stub->entry_point();)\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":32,"deletions":21,"binary":false,"changes":53,"status":"modified"}]}