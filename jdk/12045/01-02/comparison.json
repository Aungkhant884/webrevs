{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -49,2 +50,2 @@\n-    0xFFFFFF08UL, 0xFFFFFF09, 0xFFFFFF0AUL, 0xFFFFFF0BUL,\n-    0xFFFFFF0CUL, 0xFFFFFF0D, 0xFFFFFF0EUL, 0xFFFFFF0FUL\n+    0xFFFFFF08UL, 0xFFFFFF09UL, 0xFFFFFF0AUL, 0xFFFFFF0BUL,\n+    0xFFFFFF0CUL, 0xFFFFFF0DUL, 0xFFFFFF0EUL, 0xFFFFFF0FUL\n@@ -112,1 +113,2 @@\n-  Label SLOOP1, SPRELOOP1A_AVX2, SLOOP1A_AVX2, SLOOP1A_AVX3, SKIP_LOOP_1A, SKIP_LOOP_1A_AVX3, FINISH, LT64, DO_FINAL, FINAL_LOOP, ZERO_SIZE, END;\n+  Label SLOOP1, SPRELOOP1A_AVX2, SLOOP1A_AVX2, SLOOP1A_AVX3, AVX3_REDUCE, SKIP_LOOP_1A;\n+  Label SKIP_LOOP_1A_AVX3, FINISH, LT64, DO_FINAL, FINAL_LOOP, ZERO_SIZE, END;\n@@ -144,1 +146,1 @@\n-    __ cmpl(s, MAX(128, VM_Version::avx3_threshold()));\n+    __ cmpl(s, MAX2(128, VM_Version::avx3_threshold()));\n@@ -146,0 +148,2 @@\n+\n+    __ lea(end, Address(s, data, Address::times_1, - (2*CHUNKSIZE -1)));\n@@ -148,0 +152,18 @@\n+    \/\/ Some notes on vectorized main loop algorithm.\n+    \/\/ Additions are performed in slices of 16 bytes in the main loop.\n+    \/\/ input size : 64 bytes (a0 - a63).\n+    \/\/ Iteration0 : ya =  [a0 - a15]\n+    \/\/              yb =  [a0 - a15]\n+    \/\/ Iteration1 : ya =  [a0 - a15] + [a16 - a31]\n+    \/\/              yb =  2 x [a0 - a15] + [a16 - a31]\n+    \/\/ Iteration2 : ya =  [a0 - a15] + [a16 - a31] + [a32 - a47]\n+    \/\/              yb =  3 x [a0 - a15] + 2 x [a16 - a31] + [a32 - a47]\n+    \/\/ Iteration4 : ya =  [a0 - a15] + [a16 - a31] + [a32 - a47] + [a48 - a63]\n+    \/\/              yb =  4 x [a0 - a15] + 3 x [a16 - a31] + 2 x [a32 - a47] + [a48 - a63]\n+    \/\/ Before performing reduction we must scale the intermediate result appropriately.\n+    \/\/ Since addition was performed in chunks of 16 bytes, thus to match the scalar implementation\n+    \/\/ Oth lane element must be repeatedly added 16 times, 1st element 15 times and so on so forth.\n+    \/\/ Thus we first multiply yb by 16 followed by subtracting appropriately scaled ya value.\n+    \/\/ yb = 16 x yb  - [0 - 15] x ya\n+    \/\/    = 64 x [0 - 15] + 48 x [16 - 31] + 32 x [32 - 47] + 16 x [48 - 63]  -  [0 - 15] x ya\n+    \/\/    = 64 x a0 + 63 x a1 + 62 x a2 ...... + a63\n@@ -149,2 +171,5 @@\n-      __ evpmovzxbd(ydata, Address(data, 0), Assembler::AVX_512bit);\n-      __ vpaddd(ya, ya, ydata, Assembler::AVX_512bit);\n+      __ evpmovzxbd(ydata0, Address(data, 0), Assembler::AVX_512bit);\n+      __ evpmovzxbd(ydata1, Address(data, CHUNKSIZE), Assembler::AVX_512bit);\n+      __ vpaddd(ya, ya, ydata0, Assembler::AVX_512bit);\n+      __ vpaddd(yb, yb, ya, Assembler::AVX_512bit);\n+      __ vpaddd(ya, ya, ydata1, Assembler::AVX_512bit);\n@@ -152,1 +177,1 @@\n-      __ addptr(data, CHUNKSIZE);\n+      __ addptr(data, 2*CHUNKSIZE);\n@@ -156,0 +181,10 @@\n+    __ addptr(end, CHUNKSIZE);\n+    __ cmpptr(data, end);\n+    __ jcc(Assembler::aboveEqual, AVX3_REDUCE);\n+\n+    __ evpmovzxbd(ydata0, Address(data, 0), Assembler::AVX_512bit);\n+    __ vpaddd(ya, ya, ydata0, Assembler::AVX_512bit);\n+    __ vpaddd(yb, yb, ya, Assembler::AVX_512bit);\n+    __ addptr(data, CHUNKSIZE);\n+\n+    __ bind(AVX3_REDUCE);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_adler.cpp","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"}]}