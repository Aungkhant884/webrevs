{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @modules java.base\/sun.security.util\n@@ -37,2 +38,1 @@\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n+import java.io.OutputStream;\n@@ -43,0 +43,3 @@\n+import java.security.cert.CertPathValidatorException;\n+import java.util.Collections;\n+import java.util.Date;\n@@ -44,1 +47,0 @@\n-import java.util.List;\n@@ -46,0 +48,1 @@\n+import java.util.Map;\n@@ -52,1 +55,3 @@\n-import jdk.test.lib.security.SecurityUtils;\n+import sun.security.util.ConstraintsParameters;\n+import sun.security.util.DisabledAlgorithmConstraints;\n+import sun.security.util.JarConstraintsParameters;\n@@ -57,2 +62,7 @@\n-    private static final String TESTFILE1 = \"testfile1\";\n-    private static final String TESTFILE2 = \"testfile2\";\n+    private static final Path TESTFILE1 = Path.of(\"testfile1\");\n+    private static final Path TESTFILE2 = Path.of(\"testfile2\");\n+    private static final Path UNSIGNED_JAR = Path.of(\"unsigned.jar\");\n+    private static final Path SIGNED_JAR = Path.of(\"signed.jar\");\n+    private static final Path SIGNED_TWICE_JAR = Path.of(\"signed2.jar\");\n+    private static final Path MULTI_SIGNED_JAR = Path.of(\"multi-signed.jar\");\n+    private static final Path CURRENT_DIR = Path.of(\".\");\n@@ -61,5 +71,2 @@\n-        SecurityUtils.removeFromDisabledAlgs(\"jdk.jar.disabledAlgorithms\",\n-            List.of(\"SHA1\"));\n-        Files.write(Path.of(TESTFILE1), TESTFILE1.getBytes());\n-        JarUtils.createJarFile(Path.of(\"unsigned.jar\"), Path.of(\".\"),\n-            Path.of(TESTFILE1));\n+        \/\/ Sanity check: Assert that MD5 is disabled, SHA-256 enabled\n+        checkDigestAlgorithmPermits();\n@@ -67,2 +74,3 @@\n-        genkeypair(\"-alias SHA1 -sigalg SHA1withRSA\");\n-        genkeypair(\"-alias SHA256 -sigalg SHA256withRSA\");\n+        \/\/ Create an unsigned JAR with a single file\n+        Files.write(TESTFILE1, TESTFILE1.toString().getBytes());\n+        JarUtils.createJarFile(UNSIGNED_JAR, CURRENT_DIR, TESTFILE1);\n@@ -70,4 +78,4 @@\n-        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n-        try (FileInputStream fis = new FileInputStream(\"keystore\")) {\n-            ks.load(fis, PASS.toCharArray());\n-        }\n+        \/\/ Generate a keystore with two different signers\n+        genkeypair(\"-alias SIGNER1\");\n+        genkeypair(\"-alias SIGNER2\");\n+        KeyStore ks = loadKeyStore();\n@@ -77,3 +85,4 @@\n-        signJarFile(ks, \"SHA1\", \"MD5\", \"unsigned.jar\", \"signed.jar\");\n-        signJarFile(ks, \"SHA1\", \"SHA1\", \"signed.jar\", \"signed2.jar\");\n-        checkThatJarIsSigned(\"signed2.jar\", false);\n+        \/\/ Note that MD5 is a disabled digest algorithm, while SHA-256 is not\n+        signJarFile(ks, \"SIGNER1\", \"MD5\", UNSIGNED_JAR, SIGNED_JAR);\n+        signJarFile(ks, \"SIGNER1\", \"SHA256\", SIGNED_JAR, SIGNED_TWICE_JAR);\n+        checkThatJarIsSigned(SIGNED_TWICE_JAR, Map.of(TESTFILE1.toString(), 1));\n@@ -82,3 +91,5 @@\n-        Files.write(Path.of(TESTFILE2), \"testFile2\".getBytes());\n-        JarUtils.updateJarFile(Path.of(\"signed2.jar\"), Path.of(\".\"),\n-            Path.of(TESTFILE2));\n+        Files.write(TESTFILE2, TESTFILE2.toString().getBytes());\n+        JarUtils.updateJarFile(SIGNED_TWICE_JAR, CURRENT_DIR, TESTFILE2);\n+\n+        \/\/ Sign the updated JAR, now with a different signer and with an enabled digest alg\n+        signJarFile(ks, \"SIGNER2\", \"SHA256\", SIGNED_TWICE_JAR, MULTI_SIGNED_JAR);\n@@ -86,4 +97,6 @@\n-        \/\/ Sign again with different signer (SHA256) and SHA-1 digestalg.\n-        \/\/ TESTFILE1 should have two signers and TESTFILE2 should have one\n-        \/\/ signer.\n-        signJarFile(ks, \"SHA256\", \"SHA1\", \"signed2.jar\", \"multi-signed.jar\");\n+        \/\/ TESTFILE1 should have two signers and TESTFILE2 should have one signer.\n+        checkThatJarIsSigned(MULTI_SIGNED_JAR,\n+                Map.of(TESTFILE1.toString(), 2,\n+                        TESTFILE2.toString(), 1)\n+        );\n+    }\n@@ -91,1 +104,22 @@\n-        checkThatJarIsSigned(\"multi-signed.jar\", true);\n+    private static void checkDigestAlgorithmPermits() throws Exception {\n+        ConstraintsParameters cp = new JarConstraintsParameters(Collections.emptyList(), new Date());\n+        DisabledAlgorithmConstraints jarConstraints = DisabledAlgorithmConstraints.jarConstraints();\n+        try {\n+            jarConstraints.permits(\"MD5\", cp, false);\n+            throw new Exception(\"This test assumes that MD5 is disabled\");\n+        } catch (CertPathValidatorException e) {\n+            \/\/ Ignore\n+        }\n+        try {\n+            jarConstraints.permits(\"SHA256\", cp, false);\n+        } catch (CertPathValidatorException e) {\n+            throw new Exception(\"This test assumes that SHA256 is enabled\");\n+        }\n+    }\n+\n+    private static KeyStore loadKeyStore() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        try (InputStream fis = Files.newInputStream(Path.of(\"keystore\"))) {\n+            ks.load(fis, PASS.toCharArray());\n+        }\n+        return ks;\n@@ -104,1 +138,2 @@\n-              \" -keypass \" + PASS + \" -keyalg rsa -dname CN=Duke \" + cmd;\n+              \" -keypass \" + PASS + \" -keyalg rsa -sigalg SHA256withRSA \" +\n+              \"-dname CN=Duke \" + cmd;\n@@ -109,1 +144,1 @@\n-        String digestAlg, String inputFile, String outputFile)\n+        String digestAlg, Path inputFile, Path outputFile)\n@@ -117,2 +152,2 @@\n-        try (ZipFile in = new ZipFile(inputFile);\n-            FileOutputStream out = new FileOutputStream(outputFile)) {\n+        try (ZipFile in = new ZipFile(inputFile.toFile());\n+            OutputStream out = Files.newOutputStream(outputFile)) {\n@@ -123,1 +158,1 @@\n-    private static void checkThatJarIsSigned(String jarFile, boolean multi)\n+    private static void checkThatJarIsSigned(Path jarFile, Map<String, Integer> expected)\n@@ -126,1 +161,1 @@\n-        try (JarFile jf = new JarFile(jarFile, true)) {\n+        try (JarFile jf = new JarFile(jarFile.toFile(), true)) {\n@@ -133,2 +168,3 @@\n-                InputStream is = jf.getInputStream(entry);\n-                while (is.read() != -1);\n+                try(InputStream is = jf.getInputStream(entry)) {\n+                    is.transferTo(OutputStream.nullOutputStream());\n+                }\n@@ -136,13 +172,10 @@\n-                if (signers == null) {\n-                    throw new Exception(\"JarEntry \" + entry.getName() +\n-                        \" is not signed\");\n-                } else if (multi) {\n-                    if (entry.getName().equals(TESTFILE1) &&\n-                        signers.length != 2) {\n-                        throw new Exception(\"Unexpected number of signers \" +\n-                            \"for \" + entry.getName() + \": \" + signers.length);\n-                    } else if (entry.getName().equals(TESTFILE2) &&\n-                        signers.length != 1) {\n-                        throw new Exception(\"Unexpected number of signers \" +\n-                            \"for \" + entry.getName() + \": \" + signers.length);\n-                    }\n+                if(!expected.containsKey(entry.getName())) {\n+                    throw new Exception(\"Unexpected entry \" + entry.getName());\n+                }\n+                int expectedSigners = expected.get(entry.getName());\n+                int actualSigners = signers == null ? 0 : signers.length;\n+\n+                if (expectedSigners != actualSigners) {\n+                    throw new Exception(\"Unexpected number of signers \" +\n+                        \"for \" + entry.getName() + \": \" + actualSigners +\n+                        \", expected \" + expectedSigners);\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/JarWithOneNonDisabledDigestAlg.java","additions":83,"deletions":50,"binary":false,"changes":133,"status":"modified"}]}