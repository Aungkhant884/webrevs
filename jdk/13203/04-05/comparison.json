{"files":[{"patch":"@@ -279,1 +279,2 @@\n-     * by the ThreadLocal class. *\/\n+     * by the ThreadLocal class.\n+     *\/\n@@ -451,1 +452,1 @@\n-     * Called before sleeping to create a jdk.ThreadSleepEvent event.\n+     * Called before sleeping to create a jdk.ThreadSleep event.\n@@ -468,1 +469,1 @@\n-     * Called after sleeping to commit the jdk.ThreadSleepEvent event.\n+     * Called after sleeping to commit the jdk.ThreadSleep event.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,20 +68,1 @@\n-        \/\/ After virtual thread Preview:\n-        \/\/ return (virtual ? Thread.ofVirtual() : Thread.ofPlatform().daemon()).factory();\n-        if (virtual) {\n-            return virtualThreadFactory();\n-        } else {\n-            return runnable -> {\n-                Thread t = new Thread(runnable);\n-                t.setDaemon(true);\n-                return t;\n-            };\n-        }\n-    }\n-\n-    private static ThreadFactory virtualThreadFactory() {\n-        try {\n-            return (ThreadFactory)Class.forName(\"java.lang.Thread$Builder\").getMethod(\"factory\")\n-                .invoke(Thread.class.getMethod(\"ofVirtual\").invoke(null));\n-        } catch (ReflectiveOperationException ex) {\n-            throw new AssertionError(ex);\n-        }\n+        return (virtual ? Thread.ofVirtual() : Thread.ofPlatform().daemon()).factory();\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/Helper.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+ *                   -XX:CompileCommand=exclude,java.lang.Thread::beforeSleep\n+ *                   -XX:CompileCommand=exclude,java.lang.Thread::afterSleep\n+ *                   -XX:CompileCommand=exclude,java.lang.Math::min\n@@ -48,0 +51,3 @@\n+ *                   -XX:CompileCommand=exclude,java.lang.Thread::beforeSleep\n+ *                   -XX:CompileCommand=exclude,java.lang.Thread::afterSleep\n+ *                   -XX:CompileCommand=exclude,java.lang.Math::min\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/OverloadCompileQueueTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,10 +202,1 @@\n-        try {\n-            Object builder = Thread.class.getMethod(\"ofVirtual\").invoke(null);\n-            Class<?> clazz = Class.forName(\"java.lang.Thread$Builder\");\n-            java.lang.reflect.Method factory = clazz.getMethod(\"factory\");\n-            return (ThreadFactory) factory.invoke(builder);\n-        } catch (RuntimeException | Error e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+        return Thread.ofVirtual().factory();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/StressRedefine.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,10 +81,1 @@\n-        try {\n-            Object builder = Thread.class.getMethod(\"ofVirtual\").invoke(null);\n-            Class<?> clazz = Class.forName(\"java.lang.Thread$Builder\");\n-            Method unstarted = clazz.getMethod(\"unstarted\", Runnable.class);\n-            return (Thread) unstarted.invoke(builder, task);\n-        } catch (RuntimeException | Error e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+        return Thread.ofVirtual().unstarted(task);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/MainWrapper.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,10 +56,1 @@\n-        try {\n-            Object builder = Thread.class.getMethod(\"ofVirtual\").invoke(null);\n-            Class<?> clazz = Class.forName(\"java.lang.Thread$Builder\");\n-            java.lang.reflect.Method factory = clazz.getMethod(\"factory\");\n-            return (ThreadFactory) factory.invoke(builder);\n-        } catch (RuntimeException | Error e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+        return Thread.ofVirtual().factory();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/JDIThreadFactory.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,10 +89,1 @@\n-            try {\n-                Object builder = Thread.class.getMethod(\"ofVirtual\").invoke(null);\n-                Class<?> clazz = Class.forName(\"java.lang.Thread$Builder\");\n-                java.lang.reflect.Method unstarted = clazz.getMethod(\"unstarted\", Runnable.class);\n-                return (Thread) unstarted.invoke(builder, task);\n-            } catch (RuntimeException | Error e) {\n-                throw e;\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n+            return Thread.ofVirtual().unstarted(task);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/runner\/ThreadsRunner.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @modules jdk.jfr\n","filename":"test\/jdk\/java\/lang\/Thread\/ThreadSleepEvent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}