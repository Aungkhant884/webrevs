{"files":[{"patch":"@@ -1914,1 +1914,1 @@\n-  return t1int;\n+  return bottom_type();\n@@ -1927,1 +1927,1 @@\n-  return t1long;\n+  return bottom_type();\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,4 +31,5 @@\n-inline uint64_t bit_reverse(uint64_t x) {\n-  x = (x & 0x5555555555555555L) << 1 | (x & 0xAAAAAAAAAAAAAAAAL) >> 1;\n-  x = (x & 0x3333333333333333L) << 2 | (x & 0xCCCCCCCCCCCCCCCCL) >> 2;\n-  x = (x & 0x0F0F0F0F0F0F0F0FL) << 4 | (x & 0xF0F0F0F0F0F0F0F0L) >> 4;\n+inline uint32_t reverse_bits_in_bytes_int(uint32_t x) {\n+  \/\/ Based on Hacker's Delight Section 7-1\n+  x = (x & 0x55555555) << 1 | (x & 0xAAAAAAAA) >> 1;\n+  x = (x & 0x33333333) << 2 | (x & 0xCCCCCCCC) >> 2;\n+  x = (x & 0x0F0F0F0F) << 4 | (x & 0xF0F0F0F0) >> 4;\n@@ -38,10 +39,7 @@\n-inline uint64_t byte_reverse(uint64_t x, uint8_t bw) {\n-  switch(bw) {\n-    case 64:\n-      x = (x & 0x00000000FFFFFFFFL) << 32 | (x & 0xFFFFFFFF00000000L) >> 32;\n-    case 32:\n-      x = (x & 0x0000FFFF0000FFFFL) << 16 | (x & 0xFFFF0000FFFF0000L) >> 16;\n-    case 16:\n-      x = (x & 0x00FF00FF00FF00FFL) << 8 | (x & 0xFF00FF00FF00FF00L) >> 8;\n-    default:\n-      break;\n+inline uint32_t reverse_bytes_int(uint32_t x, size_t bw) {\n+  assert(bw == 16 || bw == 32, \"\");\n+  if (bw == 32) {\n+    \/\/ Based on Hacker's Delight Section 7-1\n+    return (x << 24) | ((x & 0xFF00) << 8) | ((x >> 8) & 0xFF00) | (x >> 24);\n+  } else {\n+    return (x & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;\n@@ -49,0 +47,7 @@\n+}\n+\n+inline uint64_t reverse_bits_in_bytes_long(uint64_t x) {\n+  \/\/ Based on Hacker's Delight Section 7-1\n+  x = (x & CONST64(0x5555555555555555)) << 1 | (x & CONST64(0xAAAAAAAAAAAAAAAA)) >> 1;\n+  x = (x & CONST64(0x3333333333333333)) << 2 | (x & CONST64(0xCCCCCCCCCCCCCCCC)) >> 2;\n+  x = (x & CONST64(0x0F0F0F0F0F0F0F0F)) << 4 | (x & CONST64(0xF0F0F0F0F0F0F0F0)) >> 4;\n@@ -52,1 +57,4 @@\n-template <typename T, uint8_t S> struct ReverseBitsImpl {};\n+inline uint64_t reverse_bytes_long(uint64_t x) {\n+  x = (x & CONST64(0x00FF00FF00FF00FF)) << 8 | (x >> 8) & CONST64(0x00FF00FF00FF00FF);\n+  return (x << 48) | ((x & 0xFFFF0000) << 16) | ((x >> 16) & 0xFFFF0000) | (x >> 48);\n+}\n@@ -54,0 +62,1 @@\n+template <typename T, size_t S> struct ReverseBitsImpl {};\n@@ -57,1 +66,1 @@\n-    return bit_reverse((uint64_t)v);\n+    return reverse_bits_in_bytes_int(v);\n@@ -67,2 +76,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return __builtin_bswap16((uint16_t)r);\n+    v = reverse_bits_in_bytes_int(v);\n+    return __builtin_bswap16(v);\n@@ -74,2 +83,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return __builtin_bswap32((uint32_t)r);\n+    v = reverse_bits_in_bytes_int(v);\n+    return __builtin_bswap32(v);\n@@ -81,2 +90,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return __builtin_bswap64(r);\n+    v = reverse_bits_in_bytes_long(v);\n+    return __builtin_bswap64(v);\n@@ -92,2 +101,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return byte_reverse(r, 16);\n+    v = reverse_bits_in_bytes_int(v);\n+    return reverse_bytes_int(r, 16);\n@@ -99,2 +108,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return byte_reverse(r, 32);\n+    v = reverse_bits_in_bytes(v);\n+    return reverse_bytes_int(v, 32);\n@@ -106,2 +115,2 @@\n-    uint64_t r = bit_reverse((uint64_t)v);\n-    return byte_reverse(r, 64);\n+    v = reverse_bits_in_bytes(v);\n+    return reverse_bytes_long(r);\n@@ -114,1 +123,1 @@\n-template <typename T> inline T reverse_bits(T v) {\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)> inline T reverse_bits(T v) {\n","filename":"src\/hotspot\/share\/utilities\/moveBits.hpp","additions":38,"deletions":29,"binary":false,"changes":67,"status":"modified"}]}