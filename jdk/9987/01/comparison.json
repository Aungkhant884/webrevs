{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"utilities\/moveBits.hpp\"\n@@ -32,6 +33,1 @@\n-  \/\/ Hacker's Delight, Figure 7-1\n-  i = (i & 0x55555555) << 1 | ((i >> 1) & 0x55555555);\n-  i = (i & 0x33333333) << 2 | ((i >> 2) & 0x33333333);\n-  i = (i & 0x0f0f0f0f) << 4 | ((i >> 4) & 0x0f0f0f0f);\n-  i = (i << 24) | ((i & 0xff00) << 8) | ((i >> 8) & 0xff00) | (i >> 24);\n-  return i;\n+  return reverse_bits(i);\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/moveBits.hpp\"\n@@ -1903,7 +1904,0 @@\n-static jlong reverse_bits(jlong val) {\n-  jlong res = ((val & 0xF0F0F0F0F0F0F0F0L) >> 4) | ((val & 0x0F0F0F0F0F0F0F0F) << 4);\n-  res = ((res & 0xCCCCCCCCCCCCCCCCL) >> 2) | ((res & 0x3333333333333333L) << 2);\n-  res = ((res & 0xAAAAAAAAAAAAAAAAL) >> 1) | ((res & 0x5555555555555555L) << 1);\n-  return res;\n-}\n-\n@@ -1920,1 +1914,1 @@\n-  return t1int;\n+  return bottom_type();\n@@ -1930,1 +1924,1 @@\n-    jint res = reverse_bits(t1long->get_con());\n+    jlong res = reverse_bits(t1long->get_con());\n@@ -1933,1 +1927,1 @@\n-  return t1long;\n+  return bottom_type();\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_MOVE_BITS_HPP\n+#define SHARE_UTILITIES_MOVE_BITS_HPP\n+\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+inline uint32_t reverse_bits_in_bytes_int(uint32_t x) {\n+  \/\/ Based on Hacker's Delight Section 7-1\n+  x = (x & 0x55555555) << 1 | (x & 0xAAAAAAAA) >> 1;\n+  x = (x & 0x33333333) << 2 | (x & 0xCCCCCCCC) >> 2;\n+  x = (x & 0x0F0F0F0F) << 4 | (x & 0xF0F0F0F0) >> 4;\n+  return x;\n+}\n+\n+inline uint32_t reverse_bytes_int(uint32_t x, size_t bw) {\n+  assert(bw == 16 || bw == 32, \"\");\n+  if (bw == 32) {\n+    \/\/ Based on Hacker's Delight Section 7-1\n+    return (x << 24) | ((x & 0xFF00) << 8) | ((x >> 8) & 0xFF00) | (x >> 24);\n+  } else {\n+    return (x & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;\n+  }\n+}\n+\n+inline uint64_t reverse_bits_in_bytes_long(uint64_t x) {\n+  \/\/ Based on Hacker's Delight Section 7-1\n+  x = (x & CONST64(0x5555555555555555)) << 1 | (x & CONST64(0xAAAAAAAAAAAAAAAA)) >> 1;\n+  x = (x & CONST64(0x3333333333333333)) << 2 | (x & CONST64(0xCCCCCCCCCCCCCCCC)) >> 2;\n+  x = (x & CONST64(0x0F0F0F0F0F0F0F0F)) << 4 | (x & CONST64(0xF0F0F0F0F0F0F0F0)) >> 4;\n+  return x;\n+}\n+\n+inline uint64_t reverse_bytes_long(uint64_t x) {\n+  x = (x & CONST64(0x00FF00FF00FF00FF)) << 8 | (x >> 8) & CONST64(0x00FF00FF00FF00FF);\n+  return (x << 48) | ((x & 0xFFFF0000) << 16) | ((x >> 16) & 0xFFFF0000) | (x >> 48);\n+}\n+\n+template <typename T, size_t S> struct ReverseBitsImpl {};\n+\n+template <typename T> struct ReverseBitsImpl<T, 1> {\n+  static T doit(T v) {\n+    return reverse_bits_in_bytes_int(v);\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * GCC and compatible (including Clang)\n+ *****************************************************************************\/\n+#if defined(TARGET_COMPILER_gcc)\n+template <typename T> struct ReverseBitsImpl<T, 2> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes_int(v);\n+    return __builtin_bswap16(v);\n+  }\n+};\n+\n+template <typename T> struct ReverseBitsImpl<T, 4> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes_int(v);\n+    return __builtin_bswap32(v);\n+  }\n+};\n+\n+template <typename T> struct ReverseBitsImpl<T, 8> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes_long(v);\n+    return __builtin_bswap64(v);\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * Fallback\n+ *****************************************************************************\/\n+#else\n+template <typename T> struct ReverseBitsImpl<T, 2> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes_int(v);\n+    return reverse_bytes_int(r, 16);\n+  }\n+};\n+\n+template <typename T> struct ReverseBitsImpl<T, 4> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes(v);\n+    return reverse_bytes_int(v, 32);\n+  }\n+};\n+\n+template <typename T> struct ReverseBitsImpl<T, 8> {\n+  static T doit(T v) {\n+    v = reverse_bits_in_bytes(v);\n+    return reverse_bytes_long(r);\n+  }\n+};\n+#endif\n+\n+\/\/ Performs bit reversal of a multi-byte type, we implement and support\n+\/\/ variants for 8, 16, 32 and 64 bit integral types.\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)> inline T reverse_bits(T v) {\n+  return ReverseBitsImpl<T, sizeof(T)>::doit(v);\n+}\n+\n+#endif \/\/ SHARE_UTILITIES_MOVE_BITS_HPP\n","filename":"src\/hotspot\/share\/utilities\/moveBits.hpp","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"utilities\/moveBits.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"unittest.hpp\"\n+\n+TEST_VM(opto, reverse_bits) {\n+  ASSERT_EQ(reverse_bits((jlong)-4LL), 4611686018427387903LL);\n+  ASSERT_EQ(reverse_bits((jint)-4), 1073741823);\n+  ASSERT_EQ(reverse_bits((jshort)(-4)), 16383);\n+  ASSERT_EQ(reverse_bits((jbyte)(-4)), 63);\n+}\n+\n","filename":"test\/hotspot\/gtest\/opto\/test_reverse_bits.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -32,5 +32,0 @@\n-\n-java\/lang\/Integer\/BitTwiddle.java 8291649 generic-x64\n-java\/lang\/Long\/BitTwiddle.java    8291649 generic-x64\n-java\/util\/zip\/TestCRC32C.java     8291649 generic-x64\n-java\/util\/zip\/TestChecksum.java   8291649 generic-x64\n","filename":"test\/jdk\/ProblemList-Xcomp.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}