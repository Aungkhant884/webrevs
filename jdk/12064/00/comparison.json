{"files":[{"patch":"@@ -5692,0 +5692,12 @@\n+instruct vmask_gen_sub(pReg pd, iRegL src1, iRegL src2, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n+  match(Set pd (VectorMaskGen (SubL src1 src2)));\n+  effect(KILL cr);\n+  format %{ \"vmask_gen_sub $pd, $src2, $src1\\t# KILL cr\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_whilelo($pd$$PRegister, __ elemType_to_regVariant(bt), $src2$$Register, $src1$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4075,0 +4075,12 @@\n+instruct vmask_gen_sub(pReg pd, iRegL src1, iRegL src2, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n+  match(Set pd (VectorMaskGen (SubL src1 src2)));\n+  effect(KILL cr);\n+  format %{ \"vmask_gen_sub $pd, $src2, $src1\\t# KILL cr\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_whilelo($pd$$PRegister, __ elemType_to_regVariant(bt), $src2$$Register, $src1$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1199,0 +1199,10 @@\n+  do_intrinsic(_VectorIndexInRange, jdk_internal_vm_vector_VectorSupport, vector_index_in_range_name, vector_index_in_range_sig, F_S)          \\\n+    do_signature(vector_index_in_range_sig, \"(Ljava\/lang\/Class;\"                                                                               \\\n+                                            \"Ljava\/lang\/Class;\"                                                                                \\\n+                                            \"I\"                                                                                                \\\n+                                            \"J\"                                                                                                \\\n+                                            \"J\"                                                                                                \\\n+                                            \"Ljdk\/internal\/vm\/vector\/VectorSupport$IndexInRangeOperation;)\"                                    \\\n+                                            \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\")                                               \\\n+    do_name(vector_index_in_range_name, \"indexInRange\")                                                                                        \\\n+                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -781,0 +781,1 @@\n+  case vmIntrinsics::_VectorIndexInRange:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -723,0 +723,2 @@\n+  case vmIntrinsics::_VectorIndexInRange:\n+    return inline_vector_index_in_range();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -353,0 +353,1 @@\n+  bool inline_vector_index_in_range();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3008,0 +3008,128 @@\n+\n+\/\/ public static\n+\/\/ <E,\n+\/\/  M extends VectorMask<E>>\n+\/\/ M indexInRange(Class<? extends M> mClass, Class<E> eClass, int length,\n+\/\/                long offset, long limit,\n+\/\/                IndexInRangeOperation<E, M> defaultImpl)\n+bool LibraryCallKit::inline_vector_index_in_range() {\n+  const TypeInstPtr* mask_klass   = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n+\n+  if (mask_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      mask_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** missing constant: mclass=%s etype=%s vlen=%s\",\n+                    NodeClassNames[argument(0)->Opcode()],\n+                    NodeClassNames[argument(1)->Opcode()],\n+                    NodeClassNames[argument(2)->Opcode()]);\n+    }\n+    return false; \/\/ not enough info for intrinsification\n+  }\n+\n+  if (!is_klass_initialized(mask_klass)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** klass argument not initialized\");\n+    }\n+    return false;\n+  }\n+\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (!elem_type->is_primitive_type()) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n+    }\n+    return false; \/\/ should be primitive type\n+  }\n+\n+  int num_elem = vlen->get_con();\n+  BasicType elem_bt = elem_type->basic_type();\n+\n+  \/\/ Check whether the necessary ops are supported by current hardware.\n+  bool supports_mask_gen = arch_supports_vector(Op_VectorMaskGen, num_elem, elem_bt, VecMaskUseStore);\n+  if (!supports_mask_gen) {\n+    if (!arch_supports_vector(Op_VectorLoadConst, num_elem, elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_VectorMaskCmp, num_elem, elem_bt, VecMaskUseStore)) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n+      }\n+      return false; \/\/ not supported\n+    }\n+\n+    \/\/ Check whether the scalar cast operation is supported by current hardware.\n+    if (elem_bt != T_LONG) {\n+      int cast_op = is_integral_type(elem_bt) ? Op_ConvL2I\n+                                              : (elem_bt == T_FLOAT ? Op_ConvL2F : Op_ConvL2D);\n+      if (!Matcher::match_rule_supported(cast_op)) {\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** Rejected op (%s) because architecture does not support it\",\n+                        NodeClassNames[cast_op]);\n+        }\n+        return false; \/\/ not supported\n+      }\n+    }\n+  }\n+\n+  Node* offset = argument(3);\n+  Node* limit = argument(5);\n+  if (offset == NULL || limit == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** offset or limit argument is NULL\");\n+    }\n+    return false; \/\/ not supported\n+  }\n+\n+  ciKlass* box_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  assert(is_vector_mask(box_klass), \"argument(0) should be a mask class\");\n+  const TypeInstPtr* box_type = TypeInstPtr::make_exact(TypePtr::NotNull, box_klass);\n+\n+  \/\/ We assume \"offset > 0 && limit >= offset && limit - offset < num_elem\".\n+  \/\/ So directly get indexLimit with \"indexLimit = limit - offset\".\n+  Node* indexLimit = gvn().transform(new SubLNode(limit, offset));\n+  Node* mask = NULL;\n+  if (supports_mask_gen) {\n+    mask = gvn().transform(VectorMaskGenNode::make(indexLimit, elem_bt, num_elem));\n+  } else {\n+    \/\/ Generate the vector mask based on \"mask = iota < indexLimit\".\n+    \/\/ Broadcast \"indexLimit\" to a vector.\n+    switch (elem_bt) {\n+      case T_BOOLEAN: \/\/ fall-through\n+      case T_BYTE:    \/\/ fall-through\n+      case T_SHORT:   \/\/ fall-through\n+      case T_CHAR:    \/\/ fall-through\n+      case T_INT: {\n+        indexLimit = gvn().transform(new ConvL2INode(indexLimit));\n+        break;\n+      }\n+      case T_DOUBLE: {\n+        indexLimit = gvn().transform(new ConvL2DNode(indexLimit));\n+        break;\n+      }\n+      case T_FLOAT: {\n+        indexLimit = gvn().transform(new ConvL2FNode(indexLimit));\n+        break;\n+      }\n+      case T_LONG: {\n+        \/\/ no conversion needed\n+        break;\n+      }\n+      default: fatal(\"%s\", type2name(elem_bt));\n+    }\n+    indexLimit = gvn().transform(VectorNode::scalar2vector(indexLimit, num_elem, Type::get_const_basic_type(elem_bt)));\n+\n+    \/\/ Load the \"iota\" vector.\n+    const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+    Node* iota = gvn().transform(new VectorLoadConstNode(gvn().makecon(TypeInt::ZERO), vt));\n+\n+    \/\/ Compute the vector mask with \"mask = iota < indexLimit\".\n+    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::lt));\n+    const TypeVect* vmask_type = TypeVect::makemask(elem_bt, num_elem);\n+    mask = gvn().transform(new VectorMaskCmpNode(BoolTest::lt, iota, indexLimit, pred_node, vmask_type));\n+  }\n+  Node* vbox = box_vector(mask, box_type, elem_bt, num_elem);\n+  set_result(vbox);\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":128,"deletions":0,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,0 +213,17 @@\n+    \/* ============================================================================ *\/\n+    public interface IndexInRangeOperation<E,\n+                                           M extends VectorMask<E>> {\n+        M apply(long offset, long limit);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <E,\n+     M extends VectorMask<E>>\n+    M indexInRange(Class<? extends M> mClass, Class<E> eClass, int length,\n+                   long offset, long limit,\n+                   IndexInRangeOperation<E, M> defaultImpl) {\n+        assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+        return defaultImpl.apply(offset, limit);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-    @Override\n+    \/*package-private*\/\n@@ -200,1 +200,1 @@\n-    public VectorMask<E> indexInRange(int offset, int limit) {\n+    VectorMask<E> indexInRange0Helper(int offset, int limit) {\n@@ -204,1 +204,1 @@\n-        return this.andNot(badMask);\n+        return badMask.not();\n@@ -207,1 +207,1 @@\n-    @Override\n+    \/*package-private*\/\n@@ -209,1 +209,1 @@\n-    public VectorMask<E> indexInRange(long offset, long limit) {\n+    VectorMask<E> indexInRange0Helper(long offset, long limit) {\n@@ -213,1 +213,1 @@\n-        return this.andNot(badMask);\n+        return badMask.not();\n@@ -216,0 +216,28 @@\n+    @Override\n+    @ForceInline\n+    public VectorMask<E> indexInRange(int offset, int limit) {\n+        if (offset < 0) {\n+            return this.and(indexInRange0Helper(offset, limit));\n+        } else if (offset >= limit) {\n+            return vectorSpecies().maskAll(false);\n+        } else if (limit - offset >= length()) {\n+            return this;\n+        }\n+        return this.and(indexInRange0(offset, limit));\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public VectorMask<E> indexInRange(long offset, long limit) {\n+        if (offset < 0) {\n+            return this.and(indexInRange0Helper(offset, limit));\n+        } else if (offset >= limit) {\n+            return vectorSpecies().maskAll(false);\n+        } else if (limit - offset >= length()) {\n+            return this;\n+        }\n+        return this.and(indexInRange0(offset, limit));\n+    }\n+\n+    abstract VectorMask<E> indexInRange0(long offset, long limit);\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -688,0 +688,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Byte128Mask indexInRange0(long offset, long limit) {\n+            return (Byte128Mask) VectorSupport.indexInRange(\n+                Byte128Mask.class, byte.class, VLENGTH, offset, limit,\n+                (o, l) -> (Byte128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -720,0 +720,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Byte256Mask indexInRange0(long offset, long limit) {\n+            return (Byte256Mask) VectorSupport.indexInRange(\n+                Byte256Mask.class, byte.class, VLENGTH, offset, limit,\n+                (o, l) -> (Byte256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -784,0 +784,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Byte512Mask indexInRange0(long offset, long limit) {\n+            return (Byte512Mask) VectorSupport.indexInRange(\n+                Byte512Mask.class, byte.class, VLENGTH, offset, limit,\n+                (o, l) -> (Byte512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -672,0 +672,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Byte64Mask indexInRange0(long offset, long limit) {\n+            return (Byte64Mask) VectorSupport.indexInRange(\n+                Byte64Mask.class, byte.class, VLENGTH, offset, limit,\n+                (o, l) -> (Byte64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -658,0 +658,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        ByteMaxMask indexInRange0(long offset, long limit) {\n+            return (ByteMaxMask) VectorSupport.indexInRange(\n+                ByteMaxMask.class, byte.class, VLENGTH, offset, limit,\n+                (o, l) -> (ByteMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -649,0 +649,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Double128Mask indexInRange0(long offset, long limit) {\n+            return (Double128Mask) VectorSupport.indexInRange(\n+                Double128Mask.class, double.class, VLENGTH, offset, limit,\n+                (o, l) -> (Double128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -653,0 +653,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Double256Mask indexInRange0(long offset, long limit) {\n+            return (Double256Mask) VectorSupport.indexInRange(\n+                Double256Mask.class, double.class, VLENGTH, offset, limit,\n+                (o, l) -> (Double256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -661,0 +661,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Double512Mask indexInRange0(long offset, long limit) {\n+            return (Double512Mask) VectorSupport.indexInRange(\n+                Double512Mask.class, double.class, VLENGTH, offset, limit,\n+                (o, l) -> (Double512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -647,0 +647,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Double64Mask indexInRange0(long offset, long limit) {\n+            return (Double64Mask) VectorSupport.indexInRange(\n+                Double64Mask.class, double.class, VLENGTH, offset, limit,\n+                (o, l) -> (Double64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -646,0 +646,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        DoubleMaxMask indexInRange0(long offset, long limit) {\n+            return (DoubleMaxMask) VectorSupport.indexInRange(\n+                DoubleMaxMask.class, double.class, VLENGTH, offset, limit,\n+                (o, l) -> (DoubleMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -653,0 +653,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Float128Mask indexInRange0(long offset, long limit) {\n+            return (Float128Mask) VectorSupport.indexInRange(\n+                Float128Mask.class, float.class, VLENGTH, offset, limit,\n+                (o, l) -> (Float128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -661,0 +661,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Float256Mask indexInRange0(long offset, long limit) {\n+            return (Float256Mask) VectorSupport.indexInRange(\n+                Float256Mask.class, float.class, VLENGTH, offset, limit,\n+                (o, l) -> (Float256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -677,0 +677,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Float512Mask indexInRange0(long offset, long limit) {\n+            return (Float512Mask) VectorSupport.indexInRange(\n+                Float512Mask.class, float.class, VLENGTH, offset, limit,\n+                (o, l) -> (Float512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -649,0 +649,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Float64Mask indexInRange0(long offset, long limit) {\n+            return (Float64Mask) VectorSupport.indexInRange(\n+                Float64Mask.class, float.class, VLENGTH, offset, limit,\n+                (o, l) -> (Float64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -646,0 +646,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        FloatMaxMask indexInRange0(long offset, long limit) {\n+            return (FloatMaxMask) VectorSupport.indexInRange(\n+                FloatMaxMask.class, float.class, VLENGTH, offset, limit,\n+                (o, l) -> (FloatMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -664,0 +664,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Int128Mask indexInRange0(long offset, long limit) {\n+            return (Int128Mask) VectorSupport.indexInRange(\n+                Int128Mask.class, int.class, VLENGTH, offset, limit,\n+                (o, l) -> (Int128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -672,0 +672,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Int256Mask indexInRange0(long offset, long limit) {\n+            return (Int256Mask) VectorSupport.indexInRange(\n+                Int256Mask.class, int.class, VLENGTH, offset, limit,\n+                (o, l) -> (Int256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -688,0 +688,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Int512Mask indexInRange0(long offset, long limit) {\n+            return (Int512Mask) VectorSupport.indexInRange(\n+                Int512Mask.class, int.class, VLENGTH, offset, limit,\n+                (o, l) -> (Int512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -660,0 +660,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Int64Mask indexInRange0(long offset, long limit) {\n+            return (Int64Mask) VectorSupport.indexInRange(\n+                Int64Mask.class, int.class, VLENGTH, offset, limit,\n+                (o, l) -> (Int64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -658,0 +658,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        IntMaxMask indexInRange0(long offset, long limit) {\n+            return (IntMaxMask) VectorSupport.indexInRange(\n+                IntMaxMask.class, int.class, VLENGTH, offset, limit,\n+                (o, l) -> (IntMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -650,0 +650,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Long128Mask indexInRange0(long offset, long limit) {\n+            return (Long128Mask) VectorSupport.indexInRange(\n+                Long128Mask.class, long.class, VLENGTH, offset, limit,\n+                (o, l) -> (Long128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -654,0 +654,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Long256Mask indexInRange0(long offset, long limit) {\n+            return (Long256Mask) VectorSupport.indexInRange(\n+                Long256Mask.class, long.class, VLENGTH, offset, limit,\n+                (o, l) -> (Long256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -662,0 +662,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Long512Mask indexInRange0(long offset, long limit) {\n+            return (Long512Mask) VectorSupport.indexInRange(\n+                Long512Mask.class, long.class, VLENGTH, offset, limit,\n+                (o, l) -> (Long512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -648,0 +648,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Long64Mask indexInRange0(long offset, long limit) {\n+            return (Long64Mask) VectorSupport.indexInRange(\n+                Long64Mask.class, long.class, VLENGTH, offset, limit,\n+                (o, l) -> (Long64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -648,0 +648,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        LongMaxMask indexInRange0(long offset, long limit) {\n+            return (LongMaxMask) VectorSupport.indexInRange(\n+                LongMaxMask.class, long.class, VLENGTH, offset, limit,\n+                (o, l) -> (LongMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -672,0 +672,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Short128Mask indexInRange0(long offset, long limit) {\n+            return (Short128Mask) VectorSupport.indexInRange(\n+                Short128Mask.class, short.class, VLENGTH, offset, limit,\n+                (o, l) -> (Short128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -688,0 +688,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Short256Mask indexInRange0(long offset, long limit) {\n+            return (Short256Mask) VectorSupport.indexInRange(\n+                Short256Mask.class, short.class, VLENGTH, offset, limit,\n+                (o, l) -> (Short256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -720,0 +720,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Short512Mask indexInRange0(long offset, long limit) {\n+            return (Short512Mask) VectorSupport.indexInRange(\n+                Short512Mask.class, short.class, VLENGTH, offset, limit,\n+                (o, l) -> (Short512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -664,0 +664,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        Short64Mask indexInRange0(long offset, long limit) {\n+            return (Short64Mask) VectorSupport.indexInRange(\n+                Short64Mask.class, short.class, VLENGTH, offset, limit,\n+                (o, l) -> (Short64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -658,0 +658,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        ShortMaxMask indexInRange0(long offset, long limit) {\n+            return (ShortMaxMask) VectorSupport.indexInRange(\n+                ShortMaxMask.class, short.class, VLENGTH, offset, limit,\n+                (o, l) -> (ShortMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -931,0 +931,9 @@\n+        @Override\n+        @ForceInline\n+        \/*package-private*\/\n+        $masktype$ indexInRange0(long offset, long limit) {\n+            return ($masktype$) VectorSupport.indexInRange(\n+                $masktype$.class, $type$.class, VLENGTH, offset, limit,\n+                (o, l) -> ($masktype$) TRUE_MASK.indexInRange0Helper(o, l));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/\/\n+\/\/ Copyright (c) 2023, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class IndexInRangeBenchmark {\n+    @Param({\"1024\", \"1027\"})\n+    private int size;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[size];\n+        byteOut = new byte[size];\n+        shortIn = new short[size];\n+        shortOut = new short[size];\n+        intIn = new int[size];\n+        intOut = new int[size];\n+        longIn = new long[size];\n+        longOut = new long[size];\n+        floatIn = new float[size];\n+        floatOut = new float[size];\n+        doubleIn = new double[size];\n+        doubleOut = new double[size];\n+\n+        for (int i = 0; i < size; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteIndexInRange() {\n+        for (int i = 0; i < size; i += bspecies.length()) {\n+            var m = bspecies.indexInRange(i, size);\n+            ByteVector.fromArray(bspecies, byteIn, i, m).intoArray(byteOut, i, m);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortIndexInRange() {\n+        for (int i = 0; i < size; i += sspecies.length()) {\n+            var m = sspecies.indexInRange(i, size);\n+            ShortVector.fromArray(sspecies, shortIn, i, m).intoArray(shortOut, i, m);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intIndexInRange() {\n+        for (int i = 0; i < size; i += ispecies.length()) {\n+            var m = ispecies.indexInRange(i, size);\n+            IntVector.fromArray(ispecies, intIn, i, m).intoArray(intOut, i, m);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longIndexInRange() {\n+        for (int i = 0; i < size; i += lspecies.length()) {\n+            var m = lspecies.indexInRange(i, size);\n+            LongVector.fromArray(lspecies, longIn, i, m).intoArray(longOut, i, m);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatIndexInRange() {\n+        for (int i = 0; i < size; i += fspecies.length()) {\n+            var m = fspecies.indexInRange(i, size);\n+            FloatVector.fromArray(fspecies, floatIn, i, m).intoArray(floatOut, i, m);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleIndexInRange() {\n+        for (int i = 0; i < size; i += dspecies.length()) {\n+            var m = dspecies.indexInRange(i, size);\n+            DoubleVector.fromArray(dspecies, doubleIn, i, m).intoArray(doubleOut, i, m);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/IndexInRangeBenchmark.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}