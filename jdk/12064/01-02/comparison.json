{"files":[{"patch":"@@ -1199,10 +1199,0 @@\n-  do_intrinsic(_VectorIndexInRange, jdk_internal_vm_vector_VectorSupport, vector_index_in_range_name, vector_index_in_range_sig, F_S)          \\\n-    do_signature(vector_index_in_range_sig, \"(Ljava\/lang\/Class;\"                                                                               \\\n-                                            \"Ljava\/lang\/Class;\"                                                                                \\\n-                                            \"I\"                                                                                                \\\n-                                            \"J\"                                                                                                \\\n-                                            \"J\"                                                                                                \\\n-                                            \"Ljdk\/internal\/vm\/vector\/VectorSupport$IndexInRangeOperation;)\"                                    \\\n-                                            \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\")                                               \\\n-    do_name(vector_index_in_range_name, \"indexInRange\")                                                                                        \\\n-                                                                                                                                               \\\n@@ -1220,0 +1210,10 @@\n+  do_intrinsic(_IndexPartiallyInUpperRange, jdk_internal_vm_vector_VectorSupport, index_partially_in_upper_range_name, index_partially_in_upper_range_sig, F_S)\\\n+    do_signature(index_partially_in_upper_range_sig, \"(Ljava\/lang\/Class;\"                                                                                      \\\n+                                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n+                                                     \"I\"                                                                                                       \\\n+                                                     \"J\"                                                                                                       \\\n+                                                     \"J\"                                                                                                       \\\n+                                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$IndexPartiallyInUpperRangeOperation;)\"                             \\\n+                                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\")                                                      \\\n+    do_name(index_partially_in_upper_range_name, \"indexPartiallyInUpperRange\")                                                                                 \\\n+                                                                                                                               \\\n@@ -1328,1 +1328,1 @@\n-  LAST_COMPILER_INLINE = _IndexVector,\n+  LAST_COMPILER_INLINE = _IndexPartiallyInUpperRange,\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -781,1 +781,0 @@\n-  case vmIntrinsics::_VectorIndexInRange:\n@@ -783,0 +782,1 @@\n+  case vmIntrinsics::_IndexPartiallyInUpperRange:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -723,2 +723,0 @@\n-  case vmIntrinsics::_VectorIndexInRange:\n-    return inline_vector_index_in_range();\n@@ -727,0 +725,2 @@\n+  case vmIntrinsics::_IndexPartiallyInUpperRange:\n+    return inline_index_partially_in_upper_range();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -353,1 +353,0 @@\n-  bool inline_vector_index_in_range();\n@@ -355,0 +354,1 @@\n+  bool inline_index_partially_in_upper_range();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3012,4 +3012,4 @@\n-\/\/ M indexInRange(Class<? extends M> mClass, Class<E> eClass, int length,\n-\/\/                long offset, long limit,\n-\/\/                IndexInRangeOperation<E, M> defaultImpl)\n-bool LibraryCallKit::inline_vector_index_in_range() {\n+\/\/ M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<E> eClass, int length,\n+\/\/                              long offset, long limit,\n+\/\/                              IndexPartiallyInUpperRangeOperation<E, M> defaultImpl)\n+bool LibraryCallKit::inline_index_partially_in_upper_range() {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-    public interface IndexInRangeOperation<E,\n-                                           M extends VectorMask<E>> {\n+    public interface IndexPartiallyInUpperRangeOperation<E,\n+                                                         M extends VectorMask<E>> {\n@@ -223,3 +223,3 @@\n-    M indexInRange(Class<? extends M> mClass, Class<E> eClass, int length,\n-                   long offset, long limit,\n-                   IndexInRangeOperation<E, M> defaultImpl) {\n+    M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<E> eClass,\n+                                 int length, long offset, long limit,\n+                                 IndexPartiallyInUpperRangeOperation<E, M> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-    VectorMask<E> indexInRange0Helper(int offset, int limit) {\n+    VectorMask<E> indexPartiallyInRange(int offset, int limit) {\n@@ -209,1 +209,1 @@\n-    VectorMask<E> indexInRange0Helper(long offset, long limit) {\n+    VectorMask<E> indexPartiallyInRange(long offset, long limit) {\n@@ -220,1 +220,1 @@\n-            return this.and(indexInRange0Helper(offset, limit));\n+            return this.and(indexPartiallyInRange(offset, limit));\n@@ -226,1 +226,1 @@\n-        return this.and(indexInRange0(offset, limit));\n+        return this.and(indexPartiallyInUpperRange(offset, limit));\n@@ -229,1 +229,0 @@\n-    @Override\n@@ -233,1 +232,1 @@\n-            return this.and(indexInRange0Helper(offset, limit));\n+            return this.and(indexPartiallyInRange(offset, limit));\n@@ -239,1 +238,1 @@\n-        return this.and(indexInRange0(offset, limit));\n+        return this.and(indexPartiallyInUpperRange(offset, limit));\n@@ -242,1 +241,1 @@\n-    abstract VectorMask<E> indexInRange0(long offset, long limit);\n+    abstract VectorMask<E> indexPartiallyInUpperRange(long offset, long limit);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -691,2 +691,2 @@\n-        Byte128Mask indexInRange0(long offset, long limit) {\n-            return (Byte128Mask) VectorSupport.indexInRange(\n+        Byte128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Byte128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -694,1 +694,1 @@\n-                (o, l) -> (Byte128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Byte128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -723,2 +723,2 @@\n-        Byte256Mask indexInRange0(long offset, long limit) {\n-            return (Byte256Mask) VectorSupport.indexInRange(\n+        Byte256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Byte256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -726,1 +726,1 @@\n-                (o, l) -> (Byte256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Byte256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -787,2 +787,2 @@\n-        Byte512Mask indexInRange0(long offset, long limit) {\n-            return (Byte512Mask) VectorSupport.indexInRange(\n+        Byte512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Byte512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -790,1 +790,1 @@\n-                (o, l) -> (Byte512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Byte512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -675,2 +675,2 @@\n-        Byte64Mask indexInRange0(long offset, long limit) {\n-            return (Byte64Mask) VectorSupport.indexInRange(\n+        Byte64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Byte64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -678,1 +678,1 @@\n-                (o, l) -> (Byte64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Byte64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -661,2 +661,2 @@\n-        ByteMaxMask indexInRange0(long offset, long limit) {\n-            return (ByteMaxMask) VectorSupport.indexInRange(\n+        ByteMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (ByteMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -664,1 +664,1 @@\n-                (o, l) -> (ByteMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (ByteMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -652,2 +652,2 @@\n-        Double128Mask indexInRange0(long offset, long limit) {\n-            return (Double128Mask) VectorSupport.indexInRange(\n+        Double128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Double128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -655,1 +655,1 @@\n-                (o, l) -> (Double128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Double128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -656,2 +656,2 @@\n-        Double256Mask indexInRange0(long offset, long limit) {\n-            return (Double256Mask) VectorSupport.indexInRange(\n+        Double256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Double256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -659,1 +659,1 @@\n-                (o, l) -> (Double256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Double256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -664,2 +664,2 @@\n-        Double512Mask indexInRange0(long offset, long limit) {\n-            return (Double512Mask) VectorSupport.indexInRange(\n+        Double512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Double512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -667,1 +667,1 @@\n-                (o, l) -> (Double512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Double512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -650,2 +650,2 @@\n-        Double64Mask indexInRange0(long offset, long limit) {\n-            return (Double64Mask) VectorSupport.indexInRange(\n+        Double64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Double64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -653,1 +653,1 @@\n-                (o, l) -> (Double64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Double64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -649,2 +649,2 @@\n-        DoubleMaxMask indexInRange0(long offset, long limit) {\n-            return (DoubleMaxMask) VectorSupport.indexInRange(\n+        DoubleMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (DoubleMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -652,1 +652,1 @@\n-                (o, l) -> (DoubleMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (DoubleMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -656,2 +656,2 @@\n-        Float128Mask indexInRange0(long offset, long limit) {\n-            return (Float128Mask) VectorSupport.indexInRange(\n+        Float128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Float128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -659,1 +659,1 @@\n-                (o, l) -> (Float128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Float128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -664,2 +664,2 @@\n-        Float256Mask indexInRange0(long offset, long limit) {\n-            return (Float256Mask) VectorSupport.indexInRange(\n+        Float256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Float256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -667,1 +667,1 @@\n-                (o, l) -> (Float256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Float256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -680,2 +680,2 @@\n-        Float512Mask indexInRange0(long offset, long limit) {\n-            return (Float512Mask) VectorSupport.indexInRange(\n+        Float512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Float512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -683,1 +683,1 @@\n-                (o, l) -> (Float512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Float512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -652,2 +652,2 @@\n-        Float64Mask indexInRange0(long offset, long limit) {\n-            return (Float64Mask) VectorSupport.indexInRange(\n+        Float64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Float64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -655,1 +655,1 @@\n-                (o, l) -> (Float64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Float64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -649,2 +649,2 @@\n-        FloatMaxMask indexInRange0(long offset, long limit) {\n-            return (FloatMaxMask) VectorSupport.indexInRange(\n+        FloatMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (FloatMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -652,1 +652,1 @@\n-                (o, l) -> (FloatMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (FloatMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -667,2 +667,2 @@\n-        Int128Mask indexInRange0(long offset, long limit) {\n-            return (Int128Mask) VectorSupport.indexInRange(\n+        Int128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Int128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -670,1 +670,1 @@\n-                (o, l) -> (Int128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Int128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -675,2 +675,2 @@\n-        Int256Mask indexInRange0(long offset, long limit) {\n-            return (Int256Mask) VectorSupport.indexInRange(\n+        Int256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Int256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -678,1 +678,1 @@\n-                (o, l) -> (Int256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Int256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -691,2 +691,2 @@\n-        Int512Mask indexInRange0(long offset, long limit) {\n-            return (Int512Mask) VectorSupport.indexInRange(\n+        Int512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Int512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -694,1 +694,1 @@\n-                (o, l) -> (Int512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Int512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -663,2 +663,2 @@\n-        Int64Mask indexInRange0(long offset, long limit) {\n-            return (Int64Mask) VectorSupport.indexInRange(\n+        Int64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Int64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -666,1 +666,1 @@\n-                (o, l) -> (Int64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Int64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -661,2 +661,2 @@\n-        IntMaxMask indexInRange0(long offset, long limit) {\n-            return (IntMaxMask) VectorSupport.indexInRange(\n+        IntMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (IntMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -664,1 +664,1 @@\n-                (o, l) -> (IntMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (IntMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -653,2 +653,2 @@\n-        Long128Mask indexInRange0(long offset, long limit) {\n-            return (Long128Mask) VectorSupport.indexInRange(\n+        Long128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Long128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -656,1 +656,1 @@\n-                (o, l) -> (Long128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Long128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -657,2 +657,2 @@\n-        Long256Mask indexInRange0(long offset, long limit) {\n-            return (Long256Mask) VectorSupport.indexInRange(\n+        Long256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Long256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -660,1 +660,1 @@\n-                (o, l) -> (Long256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Long256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -665,2 +665,2 @@\n-        Long512Mask indexInRange0(long offset, long limit) {\n-            return (Long512Mask) VectorSupport.indexInRange(\n+        Long512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Long512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -668,1 +668,1 @@\n-                (o, l) -> (Long512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Long512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -651,2 +651,2 @@\n-        Long64Mask indexInRange0(long offset, long limit) {\n-            return (Long64Mask) VectorSupport.indexInRange(\n+        Long64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Long64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -654,1 +654,1 @@\n-                (o, l) -> (Long64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Long64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -651,2 +651,2 @@\n-        LongMaxMask indexInRange0(long offset, long limit) {\n-            return (LongMaxMask) VectorSupport.indexInRange(\n+        LongMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (LongMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -654,1 +654,1 @@\n-                (o, l) -> (LongMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (LongMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -675,2 +675,2 @@\n-        Short128Mask indexInRange0(long offset, long limit) {\n-            return (Short128Mask) VectorSupport.indexInRange(\n+        Short128Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Short128Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -678,1 +678,1 @@\n-                (o, l) -> (Short128Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Short128Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -691,2 +691,2 @@\n-        Short256Mask indexInRange0(long offset, long limit) {\n-            return (Short256Mask) VectorSupport.indexInRange(\n+        Short256Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Short256Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -694,1 +694,1 @@\n-                (o, l) -> (Short256Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Short256Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -723,2 +723,2 @@\n-        Short512Mask indexInRange0(long offset, long limit) {\n-            return (Short512Mask) VectorSupport.indexInRange(\n+        Short512Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Short512Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -726,1 +726,1 @@\n-                (o, l) -> (Short512Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Short512Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -667,2 +667,2 @@\n-        Short64Mask indexInRange0(long offset, long limit) {\n-            return (Short64Mask) VectorSupport.indexInRange(\n+        Short64Mask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (Short64Mask) VectorSupport.indexPartiallyInUpperRange(\n@@ -670,1 +670,1 @@\n-                (o, l) -> (Short64Mask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (Short64Mask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -661,2 +661,2 @@\n-        ShortMaxMask indexInRange0(long offset, long limit) {\n-            return (ShortMaxMask) VectorSupport.indexInRange(\n+        ShortMaxMask indexPartiallyInUpperRange(long offset, long limit) {\n+            return (ShortMaxMask) VectorSupport.indexPartiallyInUpperRange(\n@@ -664,1 +664,1 @@\n-                (o, l) -> (ShortMaxMask) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> (ShortMaxMask) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -934,2 +934,2 @@\n-        $masktype$ indexInRange0(long offset, long limit) {\n-            return ($masktype$) VectorSupport.indexInRange(\n+        $masktype$ indexPartiallyInUpperRange(long offset, long limit) {\n+            return ($masktype$) VectorSupport.indexPartiallyInUpperRange(\n@@ -937,1 +937,1 @@\n-                (o, l) -> ($masktype$) TRUE_MASK.indexInRange0Helper(o, l));\n+                (o, l) -> ($masktype$) TRUE_MASK.indexPartiallyInRange(o, l));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    @Param({\"7\", \"259\", \"1024\"})\n+    @Param({\"7\", \"256\", \"259\", \"512\"})\n@@ -40,12 +40,1 @@\n-    private byte[] byteIn;\n-    private byte[] byteOut;\n-    private short[] shortIn;\n-    private short[] shortOut;\n-    private int[] intIn;\n-    private int[] intOut;\n-    private long[] longIn;\n-    private long[] longOut;\n-    private float[] floatIn;\n-    private float[] floatOut;\n-    private double[] doubleIn;\n-    private double[] doubleOut;\n+    private boolean[] mask;\n@@ -62,21 +51,1 @@\n-        byteIn = new byte[size];\n-        byteOut = new byte[size];\n-        shortIn = new short[size];\n-        shortOut = new short[size];\n-        intIn = new int[size];\n-        intOut = new int[size];\n-        longIn = new long[size];\n-        longOut = new long[size];\n-        floatIn = new float[size];\n-        floatOut = new float[size];\n-        doubleIn = new double[size];\n-        doubleOut = new double[size];\n-\n-        for (int i = 0; i < size; i++) {\n-            byteIn[i] = (byte) i;\n-            shortIn[i] = (short) i;\n-            intIn[i] = i;\n-            longIn[i] = i;\n-            floatIn[i] = (float) i;\n-            doubleIn[i] = (double) i;\n-        }\n+        mask = new boolean[512];\n@@ -89,1 +58,1 @@\n-            ByteVector.fromArray(bspecies, byteIn, i, m).intoArray(byteOut, i, m);\n+            m.intoArray(mask, i);\n@@ -97,1 +66,1 @@\n-            ShortVector.fromArray(sspecies, shortIn, i, m).intoArray(shortOut, i, m);\n+            m.intoArray(mask, i);\n@@ -105,1 +74,1 @@\n-            IntVector.fromArray(ispecies, intIn, i, m).intoArray(intOut, i, m);\n+            m.intoArray(mask, i);\n@@ -113,1 +82,1 @@\n-            LongVector.fromArray(lspecies, longIn, i, m).intoArray(longOut, i, m);\n+            m.intoArray(mask, i);\n@@ -121,1 +90,1 @@\n-            FloatVector.fromArray(fspecies, floatIn, i, m).intoArray(floatOut, i, m);\n+            m.intoArray(mask, i);\n@@ -129,1 +98,1 @@\n-            DoubleVector.fromArray(dspecies, doubleIn, i, m).intoArray(doubleOut, i, m);\n+            m.intoArray(mask, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/IndexInRangeBenchmark.java","additions":9,"deletions":40,"binary":false,"changes":49,"status":"modified"}]}