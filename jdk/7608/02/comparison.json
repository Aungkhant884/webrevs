{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2744,0 +2744,1 @@\n+                                     _cp->symbol_at(name_index),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -903,1 +903,1 @@\n-                               mt, CHECK_NULL);\n+                               mt, name, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+                         Symbol* name,\n@@ -95,1 +96,1 @@\n-  return new (loader_data, size, MetaspaceObj::MethodType, THREAD) Method(cm, access_flags);\n+  return new (loader_data, size, MetaspaceObj::MethodType, THREAD) Method(cm, access_flags, name);\n@@ -98,1 +99,1 @@\n-Method::Method(ConstMethod* xconst, AccessFlags access_flags) {\n+Method::Method(ConstMethod* xconst, AccessFlags access_flags, Symbol* name) {\n@@ -122,0 +123,2 @@\n+  \/\/ Name is very useful for debugging.\n+  NOT_PRODUCT(_name = name;)\n@@ -1449,1 +1452,3 @@\n-                                     ConstMethod::NORMAL, CHECK_(empty));\n+                                     ConstMethod::NORMAL,\n+                                     name,\n+                                     CHECK_(empty));\n@@ -1529,0 +1534,1 @@\n+                                      m->name(),\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,1 @@\n+ friend class MethodTest;\n@@ -101,0 +102,2 @@\n+\n+  Symbol* _name;\n@@ -116,1 +119,1 @@\n-  Method(ConstMethod* xconst, AccessFlags access_flags);\n+  Method(ConstMethod* xconst, AccessFlags access_flags, Symbol* name);\n@@ -124,0 +127,1 @@\n+                          Symbol* name,\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+#include \"classfile\/symbolTable.hpp\"\n@@ -27,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -30,0 +32,1 @@\n+#include \"oops\/method.hpp\"\n@@ -65,0 +68,18 @@\n+\n+#ifndef PRODUCT\n+\/\/ This class is friends with Method.\n+class MethodTest : public ::testing::Test{\n+ public:\n+  static void compare_names(Method* method, Symbol* name) {\n+    ASSERT_EQ(method->_name, name) << \"Method name field isn't set\";\n+  }\n+};\n+\n+TEST_VM(Method, method_name) {\n+  InstanceKlass* ik = vmClasses::Object_klass();\n+  Symbol* tostring = SymbolTable::new_symbol(\"toString\");\n+  Method* method = ik->find_method(tostring, vmSymbols::void_string_signature());\n+  ASSERT_TRUE(method != nullptr) << \"Object must have toString\";\n+  MethodTest::compare_names(method, tostring);\n+}\n+#endif\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}