{"files":[{"patch":"@@ -494,1 +494,2 @@\n-  load_long_misaligned(ch2, Address(result), ch1); \/\/ can use ch1 as tmpreg here as it will be trashed on next mv command anyway\n+  \/\/ load 8 bytes from source string\n+  load_long_misaligned(ch2, Address(result), ch1); \/\/ can use ch1 as temp register here as it will be trashed by next mv anyway\n@@ -683,1 +684,1 @@\n-      \/\/ preload first value, then we will read by 1 character per loop, instead of two\n+      \/\/ preload first value, then we will read by 1 character per loop, instead of four\n@@ -687,3 +688,2 @@\n-      if (isLL)\n-      {\n-        \/\/need to erase 1 most significant byte in 32-bit value of ch2\n+      if (isLL) {\n+        \/\/ need to erase 1 most significant byte in 32-bit value of ch2\n@@ -693,1 +693,1 @@\n-        slli(ch2, ch2, 16); \/\/2 most significant bytes will be erased by this operation\n+        slli(ch2, ch2, 16); \/\/ 2 most significant bytes will be erased by this operation\n@@ -795,4 +795,1 @@\n-    mv(tmp3, result_tmp);\n-    if (haystack_chr_shift) {\n-      slli(tmp3, result_tmp, haystack_chr_shift);\n-    }\n+    slli(tmp3, result_tmp, haystack_chr_shift);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}