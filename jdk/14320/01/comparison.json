{"files":[{"patch":"@@ -494,1 +494,1 @@\n-  ld(ch2, Address(result)); \/\/ load 8 bytes from source string\n+  load_long_misaligned(ch2, Address(result), ch1); \/\/ can use ch1 as tmpreg here as it will be trashed on next mv command anyway\n@@ -703,1 +703,7 @@\n-\n+    if (AvoidUnalignedAccesses) {\n+      \/\/ preload first value, then we will read by 1 character per loop, instead of two\n+      \/\/ just shifting previous ch2 right by size of character in bits\n+      add(tmp3, haystack, hlen_neg);\n+      (this->*haystack_load_1chr)(ch2, Address(tmp3), noreg);\n+      slli(ch2, ch2, isLL ? 8 : 16);\n+    }\n@@ -706,1 +712,8 @@\n-    (this->*load_2chr)(ch2, Address(tmp3), noreg);\n+    if (AvoidUnalignedAccesses) {\n+      srli(ch2, ch2, isLL ? 8 : 16);\n+      (this->*haystack_load_1chr)(tmp3, Address(tmp3, isLL ? 1 : 2), noreg);\n+      slli(tmp3, tmp3, isLL ? 8 : 16);\n+      add(ch2, ch2, tmp3);\n+    } else {\n+      (this->*load_2chr)(ch2, Address(tmp3), noreg);\n+    }\n@@ -730,1 +743,8 @@\n-    (this->*load_2chr)(ch2, Address(ch2), noreg);\n+    if (AvoidUnalignedAccesses) {\n+      (this->*haystack_load_1chr)(tmp2, Address(ch2, isLL ? 1 : 2), noreg); \/\/ we need a temp register, we can safely use hlen_tmp here, which is a synonym for tmp2\n+      (this->*haystack_load_1chr)(ch2, Address(ch2), noreg);\n+      slli(tmp2, tmp2, isLL ? 8 : 16);\n+      add(ch2, ch2, tmp2);\n+    } else {\n+      (this->*load_2chr)(ch2, Address(ch2), noreg);\n+    }\n@@ -1921,1 +1941,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}