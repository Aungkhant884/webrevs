{"files":[{"patch":"@@ -682,0 +682,14 @@\n+    if (AvoidUnalignedAccesses) {\n+      \/\/ preload first value, then we will read by 1 character per loop, instead of two\n+      \/\/ just shifting previous ch2 right by size of character in bits\n+      add(tmp3, haystack, hlen_neg);\n+      (this->*load_4chr)(ch2, Address(tmp3), noreg);\n+      if (isLL)\n+      {\n+        \/\/need to erase 1 most significant byte in 32-bit value of ch2\n+        slli(ch2, ch2, 40);\n+        srli(ch2, ch2, 32);\n+      } else {\n+        slli(ch2, ch2, 16); \/\/2 most significant bytes will be erased by this operation\n+      }\n+    }\n@@ -684,2 +698,9 @@\n-    add(ch2, haystack, hlen_neg);\n-    (this->*load_4chr)(ch2, Address(ch2), noreg);\n+    add(tmp3, haystack, hlen_neg);\n+    if (AvoidUnalignedAccesses) {\n+      srli(ch2, ch2, isLL ? 8 : 16);\n+      (this->*haystack_load_1chr)(tmp3, Address(tmp3, isLL ? 3 : 6), noreg);\n+      slli(tmp3, tmp3, isLL ? 24 : 48);\n+      add(ch2, ch2, tmp3);\n+    } else {\n+      (this->*load_4chr)(ch2, Address(tmp3), noreg);\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"}]}