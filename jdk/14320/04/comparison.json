{"files":[{"patch":"@@ -494,1 +494,3 @@\n-  ld(ch2, Address(result)); \/\/ load 8 bytes from source string\n+  \/\/ load 8 bytes from source string\n+  \/\/ if isLL is false then read granularity can be 2\n+  load_long_misaligned(ch2, Address(result), ch1, isLL ? 1 : 2); \/\/ can use ch1 as temp register here as it will be trashed by next mv anyway\n@@ -682,0 +684,13 @@\n+    if (AvoidUnalignedAccesses) {\n+      \/\/ preload first value, then we will read by 1 character per loop, instead of four\n+      \/\/ just shifting previous ch2 right by size of character in bits\n+      add(tmp3, haystack, hlen_neg);\n+      (this->*load_4chr)(ch2, Address(tmp3), noreg);\n+      if (isLL) {\n+        \/\/ need to erase 1 most significant byte in 32-bit value of ch2\n+        slli(ch2, ch2, 40);\n+        srli(ch2, ch2, 32);\n+      } else {\n+        slli(ch2, ch2, 16); \/\/ 2 most significant bytes will be erased by this operation\n+      }\n+    }\n@@ -684,2 +699,9 @@\n-    add(ch2, haystack, hlen_neg);\n-    (this->*load_4chr)(ch2, Address(ch2), noreg);\n+    add(tmp3, haystack, hlen_neg);\n+    if (AvoidUnalignedAccesses) {\n+      srli(ch2, ch2, isLL ? 8 : 16);\n+      (this->*haystack_load_1chr)(tmp3, Address(tmp3, isLL ? 3 : 6), noreg);\n+      slli(tmp3, tmp3, isLL ? 24 : 48);\n+      add(ch2, ch2, tmp3);\n+    } else {\n+      (this->*load_4chr)(ch2, Address(tmp3), noreg);\n+    }\n@@ -703,1 +725,7 @@\n-\n+    if (AvoidUnalignedAccesses) {\n+      \/\/ preload first value, then we will read by 1 character per loop, instead of two\n+      \/\/ just shifting previous ch2 right by size of character in bits\n+      add(tmp3, haystack, hlen_neg);\n+      (this->*haystack_load_1chr)(ch2, Address(tmp3), noreg);\n+      slli(ch2, ch2, isLL ? 8 : 16);\n+    }\n@@ -706,1 +734,8 @@\n-    (this->*load_2chr)(ch2, Address(tmp3), noreg);\n+    if (AvoidUnalignedAccesses) {\n+      srli(ch2, ch2, isLL ? 8 : 16);\n+      (this->*haystack_load_1chr)(tmp3, Address(tmp3, isLL ? 1 : 2), noreg);\n+      slli(tmp3, tmp3, isLL ? 8 : 16);\n+      add(ch2, ch2, tmp3);\n+    } else {\n+      (this->*load_2chr)(ch2, Address(tmp3), noreg);\n+    }\n@@ -730,1 +765,8 @@\n-    (this->*load_2chr)(ch2, Address(ch2), noreg);\n+    if (AvoidUnalignedAccesses) {\n+      (this->*haystack_load_1chr)(tmp2, Address(ch2, isLL ? 1 : 2), noreg); \/\/ we need a temp register, we can safely use hlen_tmp here, which is a synonym for tmp2\n+      (this->*haystack_load_1chr)(ch2, Address(ch2), noreg);\n+      slli(tmp2, tmp2, isLL ? 8 : 16);\n+      add(ch2, ch2, tmp2);\n+    } else {\n+      (this->*load_2chr)(ch2, Address(ch2), noreg);\n+    }\n@@ -754,4 +796,1 @@\n-    mv(tmp3, result_tmp);\n-    if (haystack_chr_shift) {\n-      slli(tmp3, result_tmp, haystack_chr_shift);\n-    }\n+    slli(tmp3, result_tmp, haystack_chr_shift);\n@@ -1921,1 +1960,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":50,"deletions":11,"binary":false,"changes":61,"status":"modified"}]}