{"files":[{"patch":"@@ -1314,0 +1314,3 @@\n+  \/\/ Assert that the given node is not a variable shift.\n+  bool assert_not_var_shift(const Node* n);\n+\n@@ -1728,0 +1731,6 @@\n+\/\/ Assert that the given node is not a variable shift.\n+bool assert_not_var_shift(const Node* n) {\n+  assert(!n->as_ShiftV()->is_var_shift(), \"illegal variable shift\");\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -4403,1 +4403,7 @@\n-instruct vshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n+\/\/ Vector shift count\n+\/\/ Note-1: Low 8 bits of each element are used, so it doesn't matter if we\n+\/\/         treat it as ints or bytes here.\n+\/\/ Note-2: Shift value is negated for RShiftCntV additionally. See the comments\n+\/\/         on vsra8B rule for more details.\n+\n+instruct vslcnt8B(vecD dst, iRegIorL2I cnt) %{\n@@ -4405,1 +4411,1 @@\n-            n->as_Vector()->length_in_bytes() == 8));\n+                            n->as_Vector()->length_in_bytes() == 8));\n@@ -4407,1 +4413,1 @@\n-  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST);\n@@ -4415,2 +4421,2 @@\n-instruct vshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n-  predicate(UseSVE == 0 && (n->as_Vector()->length_in_bytes() == 16));\n+instruct vslcnt16B(vecX dst, iRegIorL2I cnt) %{\n+  predicate(UseSVE == 0 && n->as_Vector()->length_in_bytes() == 16);\n@@ -4418,1 +4424,1 @@\n-  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST);\n@@ -4426,0 +4432,27 @@\n+instruct vsrcnt8B(vecD dst, iRegIorL2I cnt) %{\n+  predicate(UseSVE == 0 && (n->as_Vector()->length_in_bytes() == 4 ||\n+                            n->as_Vector()->length_in_bytes() == 8));\n+  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector (8B)\" %}\n+  ins_encode %{\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T8B, rscratch1);\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct vsrcnt16B(vecX dst, iRegIorL2I cnt) %{\n+  predicate(UseSVE == 0 && n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector (16B)\" %}\n+  ins_encode %{\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T16B, rscratch1);\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n@@ -4427,2 +4460,1 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8);\n@@ -4462,2 +4494,0 @@\n-\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n-\/\/ moved to outer loop and merge into one neg instruction.\n@@ -4473,0 +4503,8 @@\n+\/\/ The negate is conducted in RShiftCntV rule for case 1, whereas it's done in\n+\/\/ RShiftV* rules for case 2. Because there exists an optimization opportunity\n+\/\/ for case 1, that is, multiple neg instructions in inner loop can be hoisted\n+\/\/ to outer loop and merged into one neg instruction.\n+\/\/\n+\/\/ Note that ShiftVNode::is_var_shift() indicates whether the vector shift\n+\/\/ count is a variable vector(case 2) or not(a vector generated by RShiftCntV,\n+\/\/ i.e. case 1).\n@@ -4474,3 +4512,3 @@\n-instruct vsra8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+instruct vsra8B(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -4479,3 +4517,17 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra8B_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (8B)\" %}\n@@ -4483,1 +4535,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4487,1 +4539,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4492,2 +4544,2 @@\n-instruct vsra16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n+instruct vsra16B(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !n->as_ShiftV()->is_var_shift());\n@@ -4496,3 +4548,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -4500,1 +4550,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra16B_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4504,1 +4569,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4509,3 +4574,3 @@\n-instruct vsrl8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+instruct vsrl8B(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -4514,3 +4579,17 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl8B_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (8B)\" %}\n@@ -4518,1 +4597,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4522,1 +4601,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4527,2 +4606,2 @@\n-instruct vsrl16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n+instruct vsrl16B(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !n->as_ShiftV()->is_var_shift());\n@@ -4531,3 +4610,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -4535,1 +4612,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl16B_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4539,1 +4631,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4545,2 +4637,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4549,1 +4641,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4565,1 +4657,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4568,1 +4660,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4584,2 +4676,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4588,1 +4680,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4593,1 +4685,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4599,1 +4691,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4602,1 +4694,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4607,1 +4699,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4613,2 +4705,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4617,1 +4709,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4626,1 +4718,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4633,1 +4725,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4636,1 +4728,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4645,1 +4737,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4652,2 +4744,1 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4);\n@@ -4678,3 +4769,3 @@\n-instruct vsra4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+instruct vsra4S(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -4683,3 +4774,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -4687,1 +4776,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra4S_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4691,1 +4796,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4696,2 +4801,2 @@\n-instruct vsra8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n+instruct vsra8S(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n@@ -4700,3 +4805,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra8S_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (8H)\" %}\n@@ -4704,1 +4822,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4708,1 +4826,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4713,3 +4831,3 @@\n-instruct vsrl4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+instruct vsrl4S(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -4718,3 +4836,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -4722,1 +4838,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl4S_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4726,1 +4858,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4731,2 +4863,2 @@\n-instruct vsrl8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n+instruct vsrl8S(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n@@ -4735,3 +4867,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8H)\" %}\n@@ -4739,1 +4869,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl8S_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4743,1 +4888,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4749,2 +4894,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4753,1 +4898,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4769,1 +4914,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4772,1 +4917,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4788,2 +4933,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4792,1 +4937,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4797,1 +4942,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4803,1 +4948,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4806,1 +4951,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4811,1 +4956,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4817,2 +4962,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4821,1 +4966,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4830,1 +4975,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4837,1 +4982,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4840,1 +4985,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4849,1 +4994,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4881,2 +5026,2 @@\n-instruct vsra2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra2I(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -4885,3 +5030,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -4889,1 +5032,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra2I_var(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4893,1 +5051,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4898,2 +5056,2 @@\n-instruct vsra4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n+instruct vsra4I(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n@@ -4902,3 +5060,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra4I_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (4S)\" %}\n@@ -4906,1 +5077,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4910,1 +5081,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4915,2 +5086,2 @@\n-instruct vsrl2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsrl2I(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -4919,3 +5090,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -4923,1 +5092,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl2I_var(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4927,1 +5111,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4932,2 +5116,2 @@\n-instruct vsrl4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n+instruct vsrl4I(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n@@ -4936,3 +5120,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4S)\" %}\n@@ -4940,1 +5122,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl4I_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4944,1 +5141,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4950,1 +5147,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4953,1 +5150,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -4963,1 +5160,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -4966,1 +5163,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -4976,1 +5173,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4979,1 +5176,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -4989,1 +5186,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -4992,1 +5189,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5002,1 +5199,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -5005,1 +5202,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -5015,1 +5212,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -5018,1 +5215,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5040,2 +5237,2 @@\n-instruct vsra2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra2L(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -5044,3 +5241,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2D)\" %}\n@@ -5048,1 +5243,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra2L_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVL src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -5052,1 +5262,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -5057,2 +5267,2 @@\n-instruct vsrl2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsrl2L(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -5061,3 +5271,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl2L_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVL src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (2D)\" %}\n@@ -5065,1 +5288,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -5069,1 +5292,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -5075,1 +5298,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -5078,1 +5301,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -5088,1 +5311,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -5091,1 +5314,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -5101,1 +5324,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -5104,1 +5327,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -5117,1 +5340,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -5122,1 +5345,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5131,1 +5354,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -5136,1 +5359,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5145,1 +5368,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -5150,1 +5373,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5159,1 +5382,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -5164,1 +5387,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5173,1 +5396,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -5186,1 +5409,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5199,1 +5422,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -5212,1 +5435,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -5217,1 +5440,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5227,1 +5450,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -5232,1 +5455,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5242,1 +5465,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -5247,1 +5470,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5257,1 +5480,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -5262,1 +5485,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5272,1 +5495,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -5285,1 +5508,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5298,1 +5521,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (2D)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":417,"deletions":194,"binary":false,"changes":611,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -1975,4 +1975,6 @@\n-define(`VSHIFTCNT', `\n-instruct vshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt) %{\n-  predicate(UseSVE == 0 && (ifelse($3, 8, n->as_Vector()->length_in_bytes() == 4 ||`\n-            ')n->as_Vector()->length_in_bytes() == $3));\n+define(`VSLCNT', `\n+instruct vslcnt$1$2`'(vec$3 dst, iRegIorL2I cnt) %{\n+  predicate(UseSVE == 0 && ifelse($1, 8,\n+                                  (n->as_Vector()->length_in_bytes() == 4 ||`\n+                            'n->as_Vector()->length_in_bytes() == $1),\n+                                  n->as_Vector()->length_in_bytes() == $1));\n@@ -1980,0 +1982,14 @@\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector ($1$2)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T$1$2, as_Register($cnt$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg`'ifelse($3, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRCNT', `\n+instruct vsrcnt$1$2`'(vec$3 dst, iRegIorL2I cnt) %{\n+  predicate(UseSVE == 0 && ifelse($1, 8,\n+                                  (n->as_Vector()->length_in_bytes() == 4 ||`\n+                            'n->as_Vector()->length_in_bytes() == $1),\n+                                  n->as_Vector()->length_in_bytes() == $1));\n@@ -1981,1 +1997,3 @@\n-  format %{ \"$1  $dst, $cnt\\t# shift count vector ($3$4)\" %}\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector ($1$2)\" %}\n@@ -1983,1 +2001,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$4, as_Register($cnt$$reg));\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T$1$2, rscratch1);\n@@ -1985,1 +2004,1 @@\n-  ins_pipe(vdup_reg_reg`'ifelse($5, D, 64, 128));\n+  ins_pipe(vdup_reg_reg`'ifelse($3, D, 64, 128));\n@@ -1987,3 +2006,24 @@\n-dnl       $1   $2   $3  $4 $5\n-VSHIFTCNT(dup, dup, 8,  B, D)\n-VSHIFTCNT(dup, dup, 16, B, X)\n+dnl\n+\n+\/\/ Vector shift count\n+\/\/ Note-1: Low 8 bits of each element are used, so it doesn't matter if we\n+\/\/         treat it as ints or bytes here.\n+\/\/ Note-2: Shift value is negated for RShiftCntV additionally. See the comments\n+\/\/         on vsra8B rule for more details.\n+dnl    $1  $2 $3\n+VSLCNT(8,  B, D)\n+VSLCNT(16, B, X)\n+VSRCNT(8,  B, D)\n+VSRCNT(16, B, X)\n+dnl\n+define(`PREDICATE',\n+`ifelse($1, 8B,\n+            ifelse($3, `', `predicate(n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8);',\n+                           `predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&`\n+            '$3);'),\n+        $1, 4S,\n+            ifelse($3, `', `predicate(n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4);',\n+                           `predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&`\n+            '$3);'),\n+        ifelse($3, `', `predicate(n->as_Vector()->length() == $2);',\n+                       `predicate(n->as_Vector()->length() == $2 && $3);'))')dnl\n@@ -1992,6 +2032,3 @@\n-instruct vsll$3$4`'(vec$6 dst, vec$6 src, vec$6 shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (LShiftV$4 src shift));\n+instruct vsll$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, )\n+  match(Set dst (LShiftV$2 src shift));\n@@ -1999,1 +2036,1 @@\n-  format %{ \"$1  $dst,$src,$shift\\t# vector ($3$5)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n@@ -2001,1 +2038,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2005,1 +2042,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -2009,12 +2046,8 @@\n-instruct vsra$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (RShiftV$4 src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n-  ins_encode %{\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+instruct vsra$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, !n->as_ShiftV()->is_var_shift())\n+  match(Set dst (RShiftV$2 src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg),\n@@ -2022,1 +2055,16 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+  %}\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRA_VAR', `\n+instruct vsra$1$2_var`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, n->as_ShiftV()->is_var_shift())\n+  match(Set dst (RShiftV$2 src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T`'ifelse($4, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2024,1 +2072,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -2026,1 +2074,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -2030,12 +2078,8 @@\n-instruct vsrl$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (URShiftV$4 src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n-  ins_encode %{\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+instruct vsrl$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, !n->as_ShiftV()->is_var_shift())\n+  match(Set dst (URShiftV$2 src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ ushl(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg),\n@@ -2043,1 +2087,16 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+  %}\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRL_VAR', `\n+instruct vsrl$1$2_var`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, n->as_ShiftV()->is_var_shift())\n+  match(Set dst (URShiftV$2 src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T`'ifelse($4, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2045,1 +2104,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -2047,1 +2106,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -2051,9 +2110,6 @@\n-instruct vsll$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsll$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (LShiftV$2 src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2062,1 +2118,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2066,1 +2122,1 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+      __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2068,1 +2124,1 @@\n-    }', $4, S,`\n+    }', $2, S,`\n@@ -2071,1 +2127,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2075,1 +2131,1 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+      __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2078,1 +2134,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2082,1 +2138,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2084,0 +2140,1 @@\n+dnl\n@@ -2085,9 +2142,6 @@\n-instruct vsra$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (RShiftV$4 src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsra$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (RShiftV$2 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2096,2 +2150,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', $2, S,`\n@@ -2100,3 +2154,3 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', `\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2106,1 +2160,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2110,9 +2164,6 @@\n-instruct vsrl$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (URShiftV$4 src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsrl$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (URShiftV$2 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2121,1 +2172,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2125,3 +2176,3 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n-    }', $4, S,`\n+      __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n+    }', $2, S,`\n@@ -2130,1 +2181,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2134,2 +2185,2 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n+      __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n@@ -2137,1 +2188,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2141,1 +2192,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2145,3 +2196,3 @@\n-instruct vsrla$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(n->as_Vector()->length() == $3);\n-  match(Set dst (AddV$4 dst (URShiftV$4 src (RShiftCntV shift))));\n+instruct vsrla$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AddV$2 dst (URShiftV$2 src (RShiftCntV shift))));\n@@ -2149,2 +2200,2 @@\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+  format %{ \"usra  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2153,3 +2204,3 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n-    }', $4, S,`\n+      __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n+    }', $2, S,`\n@@ -2158,2 +2209,2 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n+      __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n@@ -2161,1 +2212,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2165,1 +2216,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2169,3 +2220,3 @@\n-instruct vsraa$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(n->as_Vector()->length() == $3);\n-  match(Set dst (AddV$4 dst (RShiftV$4 src (RShiftCntV shift))));\n+instruct vsraa$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AddV$2 dst (RShiftV$2 src (RShiftCntV shift))));\n@@ -2173,2 +2224,2 @@\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2177,2 +2228,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', $2, S,`\n@@ -2181,3 +2232,3 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', `\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2187,1 +2238,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2189,3 +2240,6 @@\n-dnl  $1    $2    $3  $4 $5 $6\n-VSLL(sshl, sshl, 8,  B, B, D)\n-VSLL(sshl, sshl, 16, B, B, X)\n+dnl\n+undefine(PREDICATE)dnl\n+dnl\n+dnl  $1  $2 $3 $4\n+VSLL(8,  B, B, D)\n+VSLL(16, B, B, X)\n@@ -2202,2 +2256,0 @@\n-\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n-\/\/ moved to outer loop and merge into one neg instruction.\n@@ -2213,55 +2265,77 @@\n-dnl  $1    $2    $3  $4 $5 $6\n-VSRA(negr, sshl, 8,  B, B, D)\n-VSRA(negr, sshl, 16, B, B, X)\n-VSRL(negr, ushl, 8,  B, B, D)\n-VSRL(negr, ushl, 16, B, B, X)\n-VSLL_IMM(shl, shl, 8,  B, B, D)\n-VSLL_IMM(shl, shl, 16, B, B, X)\n-VSRA_IMM(sshr, sshr, 8,  B, B, D)\n-VSRA_IMM(sshr, sshr, 16, B, B, X)\n-VSRL_IMM(ushr, ushr, 8,  B, B, D)\n-VSRL_IMM(ushr, ushr, 16, B, B, X)\n-VSLL(sshl, sshl, 4,  S, H, D)\n-VSLL(sshl, sshl, 8,  S, H, X)\n-VSRA(negr, sshl, 4,  S, H, D)\n-VSRA(negr, sshl, 8,  S, H, X)\n-VSRL(negr, ushl, 4,  S, H, D)\n-VSRL(negr, ushl, 8,  S, H, X)\n-VSLL_IMM(shl, shl, 4,  S, H, D)\n-VSLL_IMM(shl, shl, 8,  S, H, X)\n-VSRA_IMM(sshr, sshr, 4,  S, H, D)\n-VSRA_IMM(sshr, sshr, 8,  S, H, X)\n-VSRL_IMM(ushr, ushr, 4,  S, H, D)\n-VSRL_IMM(ushr, ushr, 8,  S, H, X)\n-VSLL(sshl, sshl, 2,  I, S, D)\n-VSLL(sshl, sshl, 4,  I, S, X)\n-VSRA(negr, sshl, 2,  I, S, D)\n-VSRA(negr, sshl, 4,  I, S, X)\n-VSRL(negr, ushl, 2,  I, S, D)\n-VSRL(negr, ushl, 4,  I, S, X)\n-VSLL_IMM(shl, shl, 2,  I, S, D)\n-VSLL_IMM(shl, shl, 4,  I, S, X)\n-VSRA_IMM(sshr, sshr, 2,  I, S, D)\n-VSRA_IMM(sshr, sshr, 4,  I, S, X)\n-VSRL_IMM(ushr, ushr, 2,  I, S, D)\n-VSRL_IMM(ushr, ushr, 4,  I, S, X)\n-VSLL(sshl, sshl, 2,  L, D, X)\n-VSRA(negr, sshl, 2,  L, D, X)\n-VSRL(negr, ushl, 2,  L, D, X)\n-VSLL_IMM(shl, shl, 2,  L, D, X)\n-VSRA_IMM(sshr, sshr, 2,  L, D, X)\n-VSRL_IMM(ushr, ushr, 2,  L, D, X)\n-VSRAA_IMM(ssra, ssra, 8,  B, B, D)\n-VSRAA_IMM(ssra, ssra, 16, B, B, X)\n-VSRAA_IMM(ssra, ssra, 4,  S, H, D)\n-VSRAA_IMM(ssra, ssra, 8,  S, H, X)\n-VSRAA_IMM(ssra, ssra, 2,  I, S, D)\n-VSRAA_IMM(ssra, ssra, 4,  I, S, X)\n-VSRAA_IMM(ssra, ssra, 2,  L, D, X)\n-VSRLA_IMM(usra, usra, 8,  B, B, D)\n-VSRLA_IMM(usra, usra, 16, B, B, X)\n-VSRLA_IMM(usra, usra, 4,  S, H, D)\n-VSRLA_IMM(usra, usra, 8,  S, H, X)\n-VSRLA_IMM(usra, usra, 2,  I, S, D)\n-VSRLA_IMM(usra, usra, 4,  I, S, X)\n-VSRLA_IMM(usra, usra, 2,  L, D, X)\n+\/\/ The negate is conducted in RShiftCntV rule for case 1, whereas it's done in\n+\/\/ RShiftV* rules for case 2. Because there exists an optimization opportunity\n+\/\/ for case 1, that is, multiple neg instructions in inner loop can be hoisted\n+\/\/ to outer loop and merged into one neg instruction.\n+\/\/\n+\/\/ Note that ShiftVNode::is_var_shift() indicates whether the vector shift\n+\/\/ count is a variable vector(case 2) or not(a vector generated by RShiftCntV,\n+\/\/ i.e. case 1).\n+dnl  $1  $2 $3 $4\n+VSRA(8,  B, B, D)\n+VSRA_VAR(8,  B, B, D)\n+VSRA(16, B, B, X)\n+VSRA_VAR(16, B, B, X)\n+VSRL(8,  B, B, D)\n+VSRL_VAR(8,  B, B, D)\n+VSRL(16, B, B, X)\n+VSRL_VAR(16, B, B, X)\n+VSLL_IMM(8,  B, B, D)\n+VSLL_IMM(16, B, B, X)\n+VSRA_IMM(8,  B, B, D)\n+VSRA_IMM(16, B, B, X)\n+VSRL_IMM(8,  B, B, D)\n+VSRL_IMM(16, B, B, X)\n+VSLL(4,  S, H, D)\n+VSLL(8,  S, H, X)\n+VSRA(4,  S, H, D)\n+VSRA_VAR(4,  S, H, D)\n+VSRA(8,  S, H, X)\n+VSRA_VAR(8,  S, H, X)\n+VSRL(4,  S, H, D)\n+VSRL_VAR(4,  S, H, D)\n+VSRL(8,  S, H, X)\n+VSRL_VAR(8,  S, H, X)\n+VSLL_IMM(4,  S, H, D)\n+VSLL_IMM(8,  S, H, X)\n+VSRA_IMM(4,  S, H, D)\n+VSRA_IMM(8,  S, H, X)\n+VSRL_IMM(4,  S, H, D)\n+VSRL_IMM(8,  S, H, X)\n+VSLL(2,  I, S, D)\n+VSLL(4,  I, S, X)\n+VSRA(2,  I, S, D)\n+VSRA_VAR(2,  I, S, D)\n+VSRA(4,  I, S, X)\n+VSRA_VAR(4,  I, S, X)\n+VSRL(2,  I, S, D)\n+VSRL_VAR(2,  I, S, D)\n+VSRL(4,  I, S, X)\n+VSRL_VAR(4,  I, S, X)\n+VSLL_IMM(2,  I, S, D)\n+VSLL_IMM(4,  I, S, X)\n+VSRA_IMM(2,  I, S, D)\n+VSRA_IMM(4,  I, S, X)\n+VSRL_IMM(2,  I, S, D)\n+VSRL_IMM(4,  I, S, X)\n+VSLL(2,  L, D, X)\n+VSRA(2,  L, D, X)\n+VSRA_VAR(2,  L, D, X)\n+VSRL(2,  L, D, X)\n+VSRL_VAR(2,  L, D, X)\n+VSLL_IMM(2,  L, D, X)\n+VSRA_IMM(2,  L, D, X)\n+VSRL_IMM(2,  L, D, X)\n+VSRAA_IMM(8,  B, B, D)\n+VSRAA_IMM(16, B, B, X)\n+VSRAA_IMM(4,  S, H, D)\n+VSRAA_IMM(8,  S, H, X)\n+VSRAA_IMM(2,  I, S, D)\n+VSRAA_IMM(4,  I, S, X)\n+VSRAA_IMM(2,  L, D, X)\n+VSRLA_IMM(8,  B, B, D)\n+VSRLA_IMM(16, B, B, X)\n+VSRLA_IMM(4,  S, H, D)\n+VSRLA_IMM(8,  S, H, X)\n+VSRLA_IMM(2,  I, S, D)\n+VSRLA_IMM(4,  I, S, X)\n+VSRLA_IMM(2,  L, D, X)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":257,"deletions":183,"binary":false,"changes":440,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class VectorShiftRight {\n+    @Param({\"1024\"})\n+    public int SIZE;\n+\n+    private byte[]  bytesA,  bytesB;\n+    private short[] shortsA, shortsB;\n+    private char[]  charsA,  charsB;\n+    private int[]   intsA,   intsB;\n+    private long[]  longsA,  longsB;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    @Param(\"3\")\n+    private int shiftCount;\n+\n+    @Setup\n+    public void init() {\n+        bytesA  = new byte[SIZE];\n+        shortsA = new short[SIZE];\n+        charsA  = new char[SIZE];\n+        intsA   = new int[SIZE];\n+        longsA  = new long[SIZE];\n+\n+        bytesB  = new byte[SIZE];\n+        shortsB = new short[SIZE];\n+        charsB  = new char[SIZE];\n+        intsB   = new int[SIZE];\n+        longsB  = new long[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesA[i]  = (byte) r.nextInt();\n+            shortsA[i] = (short) r.nextInt();\n+            charsA[i]  = (char) r.nextInt();\n+            intsA[i]   = r.nextInt();\n+            longsA[i]  = r.nextLong();\n+       }\n+    }\n+\n+    @Benchmark\n+    public void rShiftByte() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesB[i] = (byte) (bytesA[i] >> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftByte() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesB[i] = (byte) (bytesA[i] >>> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftShort() {\n+        for (int i = 0; i < SIZE; i++) {\n+            shortsB[i] = (short) (shortsA[i] >> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftChar() {\n+        for (int i = 0; i < SIZE; i++) {\n+            charsB[i] = (char) (charsA[i] >>> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftInt() {\n+        for (int i = 0; i < SIZE; i++) {\n+            intsB[i] = intsA[i] >> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftInt() {\n+        for (int i = 0; i < SIZE; i++) {\n+            intsB[i] = intsA[i] >>> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftLong() {\n+        for (int i = 0; i < SIZE; i++) {\n+            longsB[i] = longsA[i] >> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftLong() {\n+        for (int i = 0; i < SIZE; i++) {\n+            longsB[i] = longsA[i] >>> shiftCount;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorShiftRight.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}