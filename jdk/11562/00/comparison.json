{"files":[{"patch":"@@ -64,1 +64,1 @@\n-MarkAndPushClosure MarkSweep::mark_and_push_closure;\n+MarkAndPushClosure MarkSweep::mark_and_push_closure(ClassLoaderData::_claim_stw_fullgc_mark);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-class Method;\n-class nmethod;\n@@ -155,2 +153,0 @@\n-  static void follow_cld(ClassLoaderData* cld);\n-\n@@ -177,1 +173,1 @@\n-class MarkAndPushClosure: public OopIterateClosure {\n+class MarkAndPushClosure: public ClaimMetadataVisitingOopIterateClosure {\n@@ -179,3 +175,1 @@\n-  template <typename T> void do_oop_work(T* p);\n-  virtual void do_oop(oop* p);\n-  virtual void do_oop(narrowOop* p);\n+  MarkAndPushClosure(int claim) : ClaimMetadataVisitingOopIterateClosure(claim) {}\n@@ -183,5 +177,3 @@\n-  virtual bool do_metadata() { return true; }\n-  virtual void do_klass(Klass* k);\n-  virtual void do_cld(ClassLoaderData* cld);\n-  virtual void do_method(Method* m);\n-  virtual void do_nmethod(nmethod* nm);\n+  template <typename T> void do_oop_work(T* p);\n+  virtual void do_oop(      oop* p) { do_oop_work(p); }\n+  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"code\/nmethod.hpp\"\n@@ -39,1 +38,0 @@\n-#include \"oops\/method.hpp\"\n@@ -79,4 +77,0 @@\n-inline void MarkSweep::follow_cld(ClassLoaderData* cld) {\n-  MarkSweep::follow_cld_closure.do_cld(cld);\n-}\n-\n@@ -85,6 +79,0 @@\n-inline void MarkAndPushClosure::do_oop(oop* p)               { do_oop_work(p); }\n-inline void MarkAndPushClosure::do_oop(narrowOop* p)         { do_oop_work(p); }\n-inline void MarkAndPushClosure::do_klass(Klass* k)           { MarkSweep::follow_klass(k); }\n-inline void MarkAndPushClosure::do_cld(ClassLoaderData* cld) { MarkSweep::follow_cld(cld); }\n-inline void MarkAndPushClosure::do_method(Method* m)         { m->record_gc_epoch(); }\n-inline void MarkAndPushClosure::do_nmethod(nmethod* nm)      { nm->follow_nmethod(this); }\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}