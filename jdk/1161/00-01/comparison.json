{"files":[{"patch":"@@ -0,0 +1,44 @@\n+\/*\r\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\r\n+ *\/\r\n+\r\n+#include \"precompiled.hpp\"\r\n+#include \"gc\/parallel\/parallelInitLogger.hpp\"\r\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\r\n+\r\n+void ParallelInitLogger::print_gc_specific() {\r\n+  log_info_p(gc, init)(\"Alignments: \"\r\n+                     \" space_align=\" SIZE_FORMAT \"%s\"\r\n+                     \" gen_align=\" SIZE_FORMAT \"%s\"\r\n+                     \" heap_align=\" SIZE_FORMAT \"%s\",\r\n+                     byte_size_in_exact_unit(SpaceAlignment), exact_unit_for_byte_size(SpaceAlignment),\r\n+                     byte_size_in_exact_unit(GenAlignment), exact_unit_for_byte_size(GenAlignment),\r\n+                     byte_size_in_exact_unit(HeapAlignment), exact_unit_for_byte_size(HeapAlignment)\r\n+                     );\r\n+  GCInitLogger::print_gc_specific();\r\n+}\r\n+\r\n+void ParallelInitLogger::print() {\r\n+  ParallelInitLogger init_log;\r\n+  init_log.print_all();\r\n+}\r\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.cpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\r\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\r\n+ *\/\r\n+\r\n+#ifndef SHARE_GC_PARALLEL_PARALLELINITLOGGER_HPP\r\n+#define SHARE_GC_PARALLEL_PARALLELINITLOGGER_HPP\r\n+\r\n+#include \"gc\/shared\/gcInitLogger.hpp\"\r\n+\r\n+class ParallelInitLogger : public GCInitLogger {\r\n+ protected:\r\n+  virtual void print_heap();\r\n+  \/\/virtual void print_workers();\r\n+  virtual void print_gc_specific();\r\n+ public:\r\n+  static void print();\r\n+};\r\n+\r\n+#endif \/\/SHARE_GC_PARALLEL_PARALLELINITLOGGER_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -66,6 +66,1 @@\n-  os::trace_page_sizes(\"Heap\",\n-                       MinHeapSize,\n-                       reserved_heap_size,\n-                       os::vm_page_size(),\n-                       heap_rs.base(),\n-                       heap_rs.size());\n+  trace_actual_reserved_page_size(reserved_heap_size, heap_rs);\n@@ -687,0 +682,26 @@\n+void ParallelScavengeHeap::trace_actual_reserved_page_size(const size_t reserved_heap_size, const ReservedSpace rs) {\n+  \/\/ Check if Info level is enabled, since os::trace_page_sizes() logs on Info level.\n+  if(log_is_enabled(Info, pagesize)) {\n+    size_t page_size = os::vm_page_size();\n+    if (UseLargePages) {\n+      \/\/ There are two ways to manage large page memory.\n+      \/\/ 1. OS supports committing large page memory.\n+      \/\/ 2. OS doesn't support committing large page memory so ReservedSpace manages it.\n+      \/\/    And ReservedSpace calls it 'special'. If we failed to set 'special',\n+      \/\/    we reserved memory without large page.\n+      if (os::can_commit_large_page_memory() || rs.special()) {\n+        \/\/ An alignment at ReservedSpace comes from preferred page size or\n+        \/\/ heap alignment, and if the alignment came from heap alignment, it could be\n+        \/\/ larger than large pages size. So need to cap with the large page size.\n+        page_size = MIN2(rs.alignment(), os::large_page_size());\n+      }\n+    }\n+    os::trace_page_sizes(\"Heap\",\n+                        MinHeapSize,\n+                        reserved_heap_size,\n+                        page_size,\n+                        rs.base(),\n+                        rs.size());\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+  void trace_actual_reserved_page_size(const size_t reserved_heap_size, const ReservedSpace rs);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}