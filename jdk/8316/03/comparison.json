{"files":[{"patch":"@@ -38,4 +38,14 @@\n-import javax.swing.*;\n-import java.awt.*;\n-import java.awt.datatransfer.*;\n-import java.awt.dnd.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n@@ -43,0 +53,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.SwingUtilities;\n@@ -48,0 +61,1 @@\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -66,0 +80,1 @@\n+                dropCompleteLatch.countDown();\n@@ -70,1 +85,1 @@\n-\n+        f.setAlwaysOnTop(true);\n@@ -86,0 +101,3 @@\n+            if(!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Waited too long, but the drop is not completed\");\n+            }\n","filename":"test\/jdk\/java\/awt\/dnd\/AcceptDropMultipleTimes\/AcceptDropMultipleTimes.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,2 +38,7 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -50,0 +55,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -51,0 +58,1 @@\n+import javax.swing.SwingUtilities;\n@@ -55,1 +63,0 @@\n-    private static final int FRAME_LOCATION = 100;\n@@ -61,0 +68,1 @@\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -64,1 +72,2 @@\n-        f.setBounds(FRAME_LOCATION,FRAME_LOCATION,FRAME_SIZE,FRAME_SIZE);\n+        f.setLocationRelativeTo(null);\n+        f.setSize(FRAME_SIZE,FRAME_SIZE);\n@@ -66,1 +75,1 @@\n-        mainPanel.setBounds(0, 0, FRAME_SIZE, FRAME_SIZE);\n+        mainPanel.setSize(FRAME_SIZE, FRAME_SIZE);\n@@ -78,1 +87,4 @@\n-            @Override public void drop(DropTargetDropEvent dtde) { }\n+            @Override public void drop(DropTargetDropEvent dtde) {\n+                System.out.println(\"Drop complete\");\n+                dropCompleteLatch.countDown();\n+            }\n@@ -89,0 +101,1 @@\n+        f.setAlwaysOnTop(true);\n@@ -116,0 +129,3 @@\n+            if(!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Waited too long, but the drop is not completed\");\n+            }\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetEnterExitTest\/ExtraDragEnterTest.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,2 +38,6 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -51,0 +55,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.SwingUtilities;\n@@ -57,2 +64,0 @@\n-    private static volatile boolean dragExitCalled = false;\n-\n@@ -60,0 +65,1 @@\n+    private static CountDownLatch dragLatch = new CountDownLatch(2);\n@@ -73,1 +79,2 @@\n-                dragExitCalled = true;\n+                System.out.println(\"Drag Exit\");\n+                dragLatch.countDown();\n@@ -78,5 +85,12 @@\n-                Panel newDropTarget = new Panel();\n-                newDropTarget.setDropTarget(new DropTarget());\n-                newDropTarget.setBackground(Color.red);\n-                newDropTarget.setBounds(0, 0, FRAME_SIZE, FRAME_SIZE);\n-                dragSource.add(newDropTarget);\n+                Panel newDropTargetPanel = new Panel();\n+                final DropTarget dropTarget = new DropTarget(null,new DropTargetAdapter() {\n+                    @Override\n+                    public void drop(DropTargetDropEvent dtde) {\n+                        System.out.println(\"Drop complete\");\n+                        dragLatch.countDown();\n+                    }\n+                });\n+                newDropTargetPanel.setDropTarget(dropTarget);\n+                newDropTargetPanel.setBackground(Color.red);\n+                newDropTargetPanel.setSize(FRAME_SIZE, FRAME_SIZE);\n+                dragSource.add(newDropTargetPanel);\n@@ -88,0 +102,1 @@\n+        f.setAlwaysOnTop(true);\n@@ -108,2 +123,1 @@\n-\n-            if (!dragExitCalled) {\n+            if(!dragLatch.await(10, TimeUnit.SECONDS)) {\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetEnterExitTest\/MissedDragExitTest.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -62,1 +65,2 @@\n-    private static int SIZE = 300;\n+    private static int SIZE = 100;\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -66,1 +70,1 @@\n-\n+        frame.setUndecorated(true);\n@@ -73,1 +77,1 @@\n-        jta.setFont(jta.getFont().deriveFont(150f));\n+        jta.setFont(jta.getFont().deriveFont(50f));\n@@ -79,0 +83,2 @@\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n@@ -95,3 +101,4 @@\n-\n-            final Point inside = new Point(frame.getLocationOnScreen());\n-            inside.translate(20, SIZE \/ 2);\n+            final AtomicReference<Point> insidePoint = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> insidePoint.set(frame.getLocationOnScreen()));\n+            final Point inside = insidePoint.get();\n+            inside.translate(20,20);\n@@ -110,1 +117,0 @@\n-            sleep(r);\n@@ -112,0 +118,3 @@\n+            if(!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Waited too long, but the drop is not completed\");\n+            }\n@@ -123,8 +132,0 @@\n-    private static void sleep(Robot robot) {\n-        try {\n-            Thread.sleep(10000);\n-        } catch (InterruptedException ignored) {\n-        }\n-        robot.waitForIdle();\n-    }\n-\n@@ -143,4 +144,0 @@\n-            try {\n-                Thread.sleep(10000); \/\/ we should have time to leave a component\n-            } catch (InterruptedException ignored) {\n-            }\n@@ -165,0 +162,1 @@\n+            System.out.println(\"Drag exit\");\n@@ -174,0 +172,2 @@\n+            System.out.println(\"Drop complete\");\n+            dropCompleteLatch.countDown();\n","filename":"test\/jdk\/java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}