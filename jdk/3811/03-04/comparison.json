{"files":[{"patch":"@@ -1401,2 +1401,2 @@\n-  _num_humongous_reclaim_total_objects(0),\n-  _num_humongous_reclaim_candidate_objects(0),\n+  _num_humongous_objects(0),\n+  _num_humongous_reclaim_candidates(0),\n@@ -3420,1 +3420,8 @@\n-bool G1CollectedHeap::eagerly_reclaim_enabled() const {\n+static bool do_humongous_object_logging() {\n+  return log_is_enabled(Debug, gc, humongous);\n+}\n+\n+bool G1CollectedHeap::should_do_eager_reclaim() const {\n+  \/\/ As eager reclaim logging also gives information about humongous objects in\n+  \/\/ the heap in general, always do the eager reclaim pass even without known\n+  \/\/ candidates.\n@@ -3422,1 +3429,1 @@\n-          (G1CollectedHeap::heap()->has_humongous_reclaim_candidate_objects() || log_is_enabled(Debug, gc, humongous)));\n+          (has_humongous_reclaim_candidates() || do_humongous_object_logging()));\n@@ -3584,2 +3591,2 @@\n-    _num_humongous_reclaim_total_objects = g1_prep_task.humongous_total();\n-    _num_humongous_reclaim_candidate_objects = g1_prep_task.humongous_candidates();\n+    _num_humongous_objects = g1_prep_task.humongous_total();\n+    _num_humongous_reclaim_candidates = g1_prep_task.humongous_candidates();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -260,2 +260,2 @@\n-  uint _num_humongous_reclaim_total_objects; \/\/ Current amount of (all) humongous objects found in the heap.\n-  uint _num_humongous_reclaim_candidate_objects; \/\/ Number of humongous object eager reclaim candidates.\n+  uint _num_humongous_objects; \/\/ Current amount of (all) humongous objects found in the heap.\n+  uint _num_humongous_reclaim_candidates; \/\/ Number of humongous object eager reclaim candidates.\n@@ -263,3 +263,3 @@\n-  uint num_humongous_total_objects() const { return _num_humongous_reclaim_total_objects; }\n-  uint num_humongous_reclaim_candidate_objects() const { return _num_humongous_reclaim_candidate_objects; }\n-  bool has_humongous_reclaim_candidate_objects() const { return _num_humongous_reclaim_candidate_objects > 0; }\n+  uint num_humongous_objects() const { return _num_humongous_objects; }\n+  uint num_humongous_reclaim_candidates() const { return _num_humongous_reclaim_candidates; }\n+  bool has_humongous_reclaim_candidates() const { return _num_humongous_reclaim_candidates > 0; }\n@@ -267,1 +267,1 @@\n-  bool eagerly_reclaim_enabled() const;\n+  bool should_do_eager_reclaim() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-  if (G1CollectedHeap::heap()->eagerly_reclaim_enabled()) {\n+  if (G1CollectedHeap::heap()->should_do_eager_reclaim()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n-  double _cur_clear_ct_time_ms;\n@@ -183,2 +182,0 @@\n-  double _recorded_merge_pss_time_ms;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1310,1 +1310,1 @@\n-        g1h->has_humongous_reclaim_candidate_objects() &&\n+        g1h->has_humongous_reclaim_candidates() &&\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  G1AbstractSubTask(G1GCPhaseTimes::RemoveSelfForwardingPtr), _cl(rdcqs) { }\n+  G1AbstractSubTask(G1GCPhaseTimes::RemoveSelfForwardingPtr), _task(rdcqs) { }\n@@ -76,1 +76,1 @@\n-  assert(_cl.num_failed_regions() == g1h->num_regions_failed_evacuation(),\n+  assert(_task.num_failed_regions() == g1h->num_regions_failed_evacuation(),\n@@ -78,1 +78,1 @@\n-         _cl.num_failed_regions(), g1h->num_regions_failed_evacuation());\n+         _task.num_failed_regions(), g1h->num_regions_failed_evacuation());\n@@ -87,1 +87,1 @@\n-  _cl.work(worker_id);\n+  _task.work(worker_id);\n@@ -220,1 +220,1 @@\n-  return G1CollectedHeap::heap()->eagerly_reclaim_enabled();\n+  return G1CollectedHeap::heap()->should_do_eager_reclaim();\n@@ -234,2 +234,2 @@\n-  record_work_item(worker_id, G1GCPhaseTimes::EagerlyReclaimNumTotal, g1h->num_humongous_total_objects());\n-  record_work_item(worker_id, G1GCPhaseTimes::EagerlyReclaimNumCandidates, g1h->num_humongous_reclaim_candidate_objects());\n+  record_work_item(worker_id, G1GCPhaseTimes::EagerlyReclaimNumTotal, g1h->num_humongous_objects());\n+  record_work_item(worker_id, G1GCPhaseTimes::EagerlyReclaimNumCandidates, g1h->num_humongous_reclaim_candidates());\n@@ -254,1 +254,1 @@\n-  G1AbstractSubTask(G1GCPhaseTimes::RestorePreservedMarks), _preserved_marks(preserved_marks), _cl(preserved_marks->create_task()) { }\n+  G1AbstractSubTask(G1GCPhaseTimes::RestorePreservedMarks), _preserved_marks(preserved_marks), _task(preserved_marks->create_task()) { }\n@@ -257,1 +257,1 @@\n-  delete _cl;\n+  delete _task;\n@@ -266,1 +266,1 @@\n-  _cl->work(worker_id);\n+  _task->work(worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  G1ParRemoveSelfForwardPtrsTask _cl;\n+  G1ParRemoveSelfForwardPtrsTask _task;\n@@ -153,1 +153,1 @@\n-  AbstractGangTask* _cl;\n+  AbstractGangTask* _task;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}