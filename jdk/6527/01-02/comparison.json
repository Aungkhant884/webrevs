{"files":[{"patch":"@@ -507,3 +507,2 @@\n- * parsed from the zone name that does not imply daylight saving time, then\n- * {@link ChronoZonedDateTime#withLaterOffsetAtOverlap()} is issued\n- * to use the standard offset at the overlap, before forming the instant.\n+ * parsed from the zone name that does not indicate daylight saving time, then\n+ * the standard offset will be used at the local time-line overlap.\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4327,3 +4327,4 @@\n-        private static final int STD = 0;\n-        private static final int DST = 1;\n-        private static final int GENERIC = 2;\n+        static final int UNDEFINED = -1;\n+        static final int STD = 0;\n+        static final int DST = 1;\n+        static final int GENERIC = 2;\n@@ -4436,1 +4437,1 @@\n-                    tree.add(zid, zid, -1);    \/\/ don't convert zid -> metazone\n+                    tree.add(zid, zid, UNDEFINED);    \/\/ don't convert zid -> metazone\n@@ -4674,1 +4675,1 @@\n-                return new PrefixTree(\"\", null, -1, null);\n+                return new PrefixTree(\"\", null, ZoneTextPrinterParser.UNDEFINED, null);\n@@ -4676,1 +4677,1 @@\n-            return new CI(\"\", null, -1, null);\n+            return new CI(\"\", null, ZoneTextPrinterParser.UNDEFINED, null);\n@@ -4689,1 +4690,1 @@\n-                tree.add0(k, k, -1);\n+                tree.add0(k, k, ZoneTextPrinterParser.UNDEFINED);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -426,4 +426,4 @@\n-     *     <li>Undefined: -1<\/li>\n-     *     <li>Standard: 0<\/li>\n-     *     <li>Daylight Saving: 1<\/li>\n-     *     <li>Generic: 2<\/li>\n+     *     <li>{@link DateTimeFormatterBuilder.ZoneTextPrinterParser#UNDEFINED}<\/li>\n+     *     <li>{@link DateTimeFormatterBuilder.ZoneTextPrinterParser#STD}<\/li>\n+     *     <li>{@link DateTimeFormatterBuilder.ZoneTextPrinterParser#DST}<\/li>\n+     *     <li>{@link DateTimeFormatterBuilder.ZoneTextPrinterParser#GENERIC}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeParseContext.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-    int zoneNameType = -1;\n+    int zoneNameType = DateTimeFormatterBuilder.ZoneTextPrinterParser.UNDEFINED;\n@@ -662,1 +662,2 @@\n-                    if (zoneNameType == 0 || zoneNameType == 2) { \/\/ std or generic\n+                    if (zoneNameType == DateTimeFormatterBuilder.ZoneTextPrinterParser.STD ||\n+                        zoneNameType == DateTimeFormatterBuilder.ZoneTextPrinterParser.GENERIC) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}