{"files":[{"patch":"@@ -2994,0 +2994,1 @@\n+        _ref_processor_stw->setup_policy(false);\n@@ -3272,2 +3273,0 @@\n-  \/\/ Setup the soft refs policy...\n-  rp->setup_policy(false);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1128,1 +1128,1 @@\n-    weak_refs_work(false \/* clear_all_soft_refs *\/);\n+    weak_refs_work();\n@@ -1495,1 +1495,1 @@\n-void G1ConcurrentMark::weak_refs_work(bool clear_all_soft_refs) {\n+void G1ConcurrentMark::weak_refs_work() {\n@@ -1509,2 +1509,0 @@\n-    \/\/ Set the soft reference policy\n-    rp->setup_policy(clear_all_soft_refs);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -365,2 +365,1 @@\n-  void weak_refs_work_parallel_part(BoolObjectClosure* is_alive, bool purged_classes);\n-  void weak_refs_work(bool clear_all_soft_refs);\n+  void weak_refs_work();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -488,1 +488,0 @@\n-      reference_processor()->setup_policy(false); \/\/ not always_clear\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -587,1 +587,0 @@\n-  rp->setup_policy(clear_all_soft_refs);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  rp->setup_policy(clear_all_softrefs);\n@@ -201,1 +200,0 @@\n-    ref_processor()->setup_policy(clear_all_softrefs);\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-  friend class VM_MarkSweep;\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -481,9 +481,3 @@\n-    \/\/ If the discovery of (\"weak\") refs in this generation is\n-    \/\/ atomic wrt other collectors in this configuration, we\n-    \/\/ are guaranteed to have empty discovered ref lists.\n-    if (rp->discovery_is_atomic()) {\n-      rp->enable_discovery();\n-      rp->setup_policy(clear_soft_refs);\n-    } else {\n-      \/\/ collect() below will enable discovery as appropriate\n-    }\n+    rp->enable_discovery();\n+    rp->setup_policy(clear_soft_refs);\n+\n@@ -491,0 +485,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}