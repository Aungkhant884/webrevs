{"files":[{"patch":"@@ -2993,1 +2993,1 @@\n-        _ref_processor_stw->enable_discovery();\n+        _ref_processor_stw->start_discovery(false \/* always_clear *\/);\n@@ -3272,2 +3272,0 @@\n-  \/\/ Setup the soft refs policy...\n-  rp->setup_policy(false);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -719,3 +719,1 @@\n-  \/\/ enable (\"weak\") refs discovery\n-  rp->enable_discovery();\n-  rp->setup_policy(false); \/\/ snapshot the soft ref policy to be used in this cycle\n+  rp->start_discovery(false \/* always_clear *\/);\n@@ -1128,1 +1126,1 @@\n-    weak_refs_work(false \/* clear_all_soft_refs *\/);\n+    weak_refs_work();\n@@ -1495,1 +1493,1 @@\n-void G1ConcurrentMark::weak_refs_work(bool clear_all_soft_refs) {\n+void G1ConcurrentMark::weak_refs_work() {\n@@ -1509,2 +1507,0 @@\n-    \/\/ Set the soft reference policy\n-    rp->setup_policy(clear_all_soft_refs);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -365,2 +365,1 @@\n-  void weak_refs_work_parallel_part(BoolObjectClosure* is_alive, bool purged_classes);\n-  void weak_refs_work(bool clear_all_soft_refs);\n+  void weak_refs_work();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -185,2 +185,1 @@\n-  reference_processor()->enable_discovery();\n-  reference_processor()->setup_policy(scope()->should_clear_soft_refs());\n+  reference_processor()->start_discovery(scope()->should_clear_soft_refs());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1789,4 +1789,1 @@\n-    ref_processor()->enable_discovery();\n-    ref_processor()->setup_policy(maximum_heap_compaction);\n-\n-    bool marked_for_unloading = false;\n+    ref_processor()->start_discovery(maximum_heap_compaction);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -451,2 +451,1 @@\n-    reference_processor()->enable_discovery();\n-    reference_processor()->setup_policy(false);\n+    reference_processor()->start_discovery(false \/* always_clear *\/);\n@@ -488,1 +487,0 @@\n-      reference_processor()->setup_policy(false); \/\/ not always_clear\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -587,1 +587,0 @@\n-  rp->setup_policy(clear_all_soft_refs);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  rp->setup_policy(clear_all_softrefs);\n@@ -201,1 +200,0 @@\n-    ref_processor()->setup_policy(clear_all_softrefs);\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-  friend class VM_MarkSweep;\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -481,9 +481,2 @@\n-    \/\/ If the discovery of (\"weak\") refs in this generation is\n-    \/\/ atomic wrt other collectors in this configuration, we\n-    \/\/ are guaranteed to have empty discovered ref lists.\n-    if (rp->discovery_is_atomic()) {\n-      rp->enable_discovery();\n-      rp->setup_policy(clear_soft_refs);\n-    } else {\n-      \/\/ collect() below will enable discovery as appropriate\n-    }\n+    rp->start_discovery(clear_soft_refs);\n+\n@@ -491,1 +484,1 @@\n-    rp->disable_discovery();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -288,0 +288,6 @@\n+\n+  void setup_policy(bool always_clear) {\n+    _current_soft_ref_policy = always_clear ?\n+                               _always_clear_soft_ref_policy : _default_soft_ref_policy;\n+    _current_soft_ref_policy->setup();   \/\/ snapshot the policy threshold\n+  }\n@@ -295,5 +301,3 @@\n-  ReferencePolicy* setup_policy(bool always_clear) {\n-    _current_soft_ref_policy = always_clear ?\n-      _always_clear_soft_ref_policy : _default_soft_ref_policy;\n-    _current_soft_ref_policy->setup();   \/\/ snapshot the policy threshold\n-    return _current_soft_ref_policy;\n+  void start_discovery(bool always_clear) {\n+    enable_discovery();\n+    setup_policy(always_clear);\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}