{"files":[{"patch":"@@ -168,1 +168,1 @@\n-                                    fmt.format(\"               \\\"%s\\\",\\n\", CLDRConverter.saveConvert(s, useJava));\n+                                    fmt.format(\"            \\\"%s\\\",\\n\", CLDRConverter.saveConvert(s, useJava));\n@@ -170,1 +170,1 @@\n-                                fmt.format(\"            };\\n\");\n+                                fmt.format(\"        };\\n\");\n@@ -174,1 +174,1 @@\n-                                    fmt.format(\"               \\\"%s\\\",\\n\", CLDRConverter.saveConvert(s, useJava));\n+                                    fmt.format(\"            \\\"%s\\\",\\n\", CLDRConverter.saveConvert(s, useJava));\n@@ -176,1 +176,1 @@\n-                                fmt.format(\"            };\\n\");\n+                                fmt.format(\"        };\\n\");\n@@ -271,21 +271,23 @@\n-            out.printf((CLDRConverter.isBaseModule ? \"package sun.util.cldr;\\n\\n\" :\n-                                  \"package sun.util.resources.cldr.provider;\\n\\n\")\n-                      + \"import java.util.HashMap;\\n\"\n-                      + \"import java.util.Locale;\\n\"\n-                      + \"import java.util.Map;\\n\"\n-                      + \"import sun.util.locale.provider.LocaleDataMetaInfo;\\n\"\n-                      + \"import sun.util.locale.provider.LocaleProviderAdapter;\\n\\n\");\n-            out.printf(\"public class %s implements LocaleDataMetaInfo {\\n\", className);\n-            out.printf(\"    private static final Map<String, String> resourceNameToLocales = new HashMap<>(\" +\n-                                ((int)(metaInfo.keySet().stream()\n-                                    .filter(k -> k.equals(\"AvailableLocales\"))\n-                                    .count() \/ 0.75f) + 1) + \");\\n\" +\n-                    (CLDRConverter.isBaseModule ?\n-                       \"    private static final Map<Locale, String[]> parentLocalesMap = new HashMap<>(\" +\n-                                ((int)(metaInfo.keySet().stream()\n-                                    .filter(k -> k.startsWith(CLDRConverter.PARENT_LOCALE_PREFIX))\n-                                    .count() \/ 0.75f) + 1) + \");\\n\" +\n-                       \"    private static final Map<String, String> languageAliasMap = new HashMap<>(\" +\n-                                ((int)(CLDRConverter.handlerSupplMeta.getLanguageAliasData().size() \/ 0.75f) + 1) + \");\\n\\n\" :\n-                       \"\\n\") +\n-                       \"    static {\\n\");\n+            out.printf(\"\"\"\n+                package sun.util.%s;\n+\n+                import java.util.HashMap;\n+                import java.util.Locale;\n+                import java.util.Map;\n+                import sun.util.locale.provider.LocaleDataMetaInfo;\n+                import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+                public class %s implements LocaleDataMetaInfo {\n+                    private static final Map<String, String> resourceNameToLocales = HashMap.newHashMap(%d);\n+                %s\n+                \"\"\", CLDRConverter.isBaseModule ? \"cldr\" : \"resources.cldr.provider\",\n+                className, metaInfo.keySet().stream().filter(k -> k.equals(\"AvailableLocales\")).count(),\n+                CLDRConverter.isBaseModule ?\n+                    \"\"\"\n+                        private static final Map<Locale, String[]> parentLocalesMap = HashMap.newHashMap(%d);\n+                        private static final Map<String, String> languageAliasMap = HashMap.newHashMap(%d);\n+                    \"\"\".formatted(\n+                        metaInfo.keySet().stream().filter(k -> k.startsWith(CLDRConverter.PARENT_LOCALE_PREFIX)).count(),\n+                        CLDRConverter.handlerSupplMeta.getLanguageAliasData().size()) :\n+                    \"\");\n+            out.println(\"    static {\");\n@@ -304,2 +306,2 @@\n-                    out.printf(\"             new String[] {\\n\" +\n-                               \"                 \");\n+                    out.printf(\"            new String[] {\\n\" +\n+                               \"                \");\n@@ -312,1 +314,1 @@\n-                            out.printf(\"\\n                 \");\n+                            out.printf(\"\\n                \");\n@@ -316,1 +318,1 @@\n-                    out.printf(\"\\n             });\\n\");\n+                    out.printf(\"\\n            });\\n\");\n@@ -320,1 +322,1 @@\n-                        out.printf(\"              \\\"%s\\\");\\n\", toLocaleList(applyLanguageAliases(metaInfo.get(key)), false));\n+                        out.printf(\"            \\\"%s\\\");\\n\", toLocaleList(applyLanguageAliases(metaInfo.get(key)), false));\n@@ -337,4 +339,5 @@\n-                out.printf(\"    private static class TZCanonicalIDMapHolder {\\n\");\n-                out.printf(\"        static final Map<String, String> tzCanonicalIDMap = new HashMap<>(\" +\n-                        ((int)(CLDRConverter.handlerTimeZone.getData().size() \/ 0.75f) + 1) + \");\\n\");\n-                out.printf(\"        static {\\n\");\n+                out.printf(\"\"\"\n+                               private static class TZCanonicalIDMapHolder {\n+                                   static final Map<String, String> tzCanonicalIDMap = HashMap.newHashMap(%d);\n+                                   static {\n+                           \"\"\", CLDRConverter.handlerTimeZone.getData().size());\n@@ -354,4 +357,5 @@\n-            out.printf(\"    @Override\\n\" +\n-                        \"    public LocaleProviderAdapter.Type getType() {\\n\" +\n-                        \"        return LocaleProviderAdapter.Type.CLDR;\\n\" +\n-                        \"    }\\n\\n\");\n+            out.printf(\"\"\"\n+                    @Override\n+                    public LocaleProviderAdapter.Type getType() {\n+                        return LocaleProviderAdapter.Type.CLDR;\n+                    }\n@@ -359,4 +363,8 @@\n-            out.printf(\"    @Override\\n\" +\n-                        \"    public String availableLanguageTags(String category) {\\n\" +\n-                        \"        return resourceNameToLocales.getOrDefault(category, \\\"\\\");\\n\" +\n-                        \"    }\\n\\n\");\n+                    @Override\n+                    public String availableLanguageTags(String category) {\n+                        return resourceNameToLocales.getOrDefault(category, \"\");\n+                    }\n+                    %s\n+                }\n+                \"\"\",\n+                CLDRConverter.isBaseModule ? \"\"\"\n@@ -364,15 +372,14 @@\n-            if (CLDRConverter.isBaseModule) {\n-                out.printf(\"    @Override\\n\" +\n-                           \"    public Map<String, String> getLanguageAliasMap() {\\n\" +\n-                           \"        return languageAliasMap;\\n\" +\n-                           \"    }\\n\\n\");\n-                out.printf(\"    @Override\\n\" +\n-                           \"    public Map<String, String> tzCanonicalIDs() {\\n\" +\n-                           \"        return TZCanonicalIDMapHolder.tzCanonicalIDMap;\\n\" +\n-                           \"    }\\n\\n\");\n-                out.printf(\"    public Map<Locale, String[]> parentLocales() {\\n\" +\n-                           \"        return parentLocalesMap;\\n\" +\n-                           \"    }\\n}\");\n-            } else {\n-                out.printf(\"}\");\n-            }\n+                    @Override\n+                    public Map<String, String> getLanguageAliasMap() {\n+                        return languageAliasMap;\n+                    }\n+\n+                    @Override\n+                    public Map<String, String> tzCanonicalIDs() {\n+                        return TZCanonicalIDMapHolder.tzCanonicalIDMap;\n+                    }\n+\n+                    public Map<Locale, String[]> parentLocales() {\n+                        return parentLocalesMap;\n+                    }\n+                \"\"\" : \"\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/ResourceBundleGenerator.java","additions":64,"deletions":57,"binary":false,"changes":121,"status":"modified"}]}