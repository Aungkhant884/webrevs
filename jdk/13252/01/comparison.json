{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import static java.lang.constant.ConstantUtils.dropFirstAndLastChar;\n-import static java.lang.constant.ConstantUtils.internalToBinary;\n+import static java.lang.constant.ConstantUtils.*;\n@@ -43,1 +42,1 @@\n-     * interface type\n+     * interface type or an array type.\n@@ -67,9 +66,7 @@\n-        ClassDesc c = this;\n-        int depth = ConstantUtils.arrayDepth(descriptorString());\n-        for (int i=0; i<depth; i++)\n-            c = c.componentType();\n-\n-        if (c.isPrimitive())\n-            return lookup.findClass(descriptorString());\n-        else {\n-            Class<?> clazz = lookup.findClass(internalToBinary(dropFirstAndLastChar(c.descriptorString())));\n+        if (isArray()) {\n+            if (isPrimitiveArray()) {\n+                return lookup.findClass(descriptor);\n+            }\n+            \/\/ Class.forName is slow on class or interface arrays\n+            int depth = ConstantUtils.arrayDepth(descriptor);\n+            Class<?> clazz = lookup.findClass(internalToBinary(descriptor.substring(depth + 1, descriptor.length() - 1)));\n@@ -80,0 +77,11 @@\n+        return lookup.findClass(internalToBinary(dropFirstAndLastChar(descriptor)));\n+    }\n+\n+    \/**\n+     * Whether the descriptor is one of a primitive array, given this is\n+     * already a valid reference type descriptor.\n+     *\/\n+    private boolean isPrimitiveArray() {\n+        \/\/ All L-type descriptors must end with a semicolon; same for reference\n+        \/\/ arrays, leaving primitive arrays the only ones without a final semicolon\n+        return descriptor.charAt(descriptor.length() - 1) != ';';\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ReferenceClassDescImpl.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.constant;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.constant.ConstantDescs.*;\n+\n+\/**\n+ * Measure the throughput of {@link ClassDesc#resolveConstantDesc} for different\n+ * reference types.\n+ *\/\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 3, time = 2)\n+@Measurement(iterations = 6, time = 1)\n+@Fork(1)\n+@State(Scope.Benchmark)\n+public class ReferenceClassDescResolve {\n+    private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();\n+    private static final ClassDesc CLASS_OR_INTERFACE = CD_String;\n+    private static final ClassDesc REFERENCE_ARRAY = CD_Integer.arrayType(2);\n+    private static final ClassDesc PRIMITIVE_ARRAY = CD_int.arrayType(3);\n+\n+    @Benchmark\n+    public Class<?> resolveClassOrInterface() throws ReflectiveOperationException {\n+        return (Class<?>) CLASS_OR_INTERFACE.resolveConstantDesc(LOOKUP);\n+    }\n+\n+    @Benchmark\n+    public Class<?> resolveReferenceArray() throws ReflectiveOperationException {\n+        return (Class<?>) REFERENCE_ARRAY.resolveConstantDesc(LOOKUP);\n+    }\n+\n+    @Benchmark\n+    public Class<?> resolvePrimitiveArray() throws ReflectiveOperationException {\n+        return (Class<?>) PRIMITIVE_ARRAY.resolveConstantDesc(LOOKUP);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/constant\/ReferenceClassDescResolve.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}