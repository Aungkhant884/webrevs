{"files":[{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.crypto.provider;\n-\n-import java.io.*;\n-import sun.security.util.*;\n-import sun.security.util.HexDumpEncoder;\n-import java.security.AlgorithmParametersSpi;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n-import javax.crypto.spec.IvParameterSpec;\n-\n-\/**\n- * This class implements the parameter (IV) used with Block Ciphers.\n- * Different algorithms may have different length requirement for IV\n- * length.\n- *\n- * <pre>\n- * IV ::= OCTET STRING  -- length depends on the block size of the\n- * block ciphers\n- * <\/pre>\n- *\n- * @author Valerie Peng\n- *\n- *\/\n-abstract class IvParameters extends AlgorithmParametersSpi {\n-\n-    \/\/ 4-byte IVs, used by AES w\/ KWP mode\n-    public static final class Four extends IvParameters {\n-        public Four() {\n-            super(4);\n-        }\n-    }\n-\n-    \/\/ 8-byte IVs, used by DES, DESede, Blowfish, and AES w\/ KW mode\n-    public static final class Eight extends IvParameters {\n-        public Eight() {\n-            super(8);\n-        }\n-    }\n-\n-    \/\/ 16-byte IVs, used by AES with most of its modes, e.g. CBC\n-    public static final class Sixteen extends IvParameters {\n-        public Sixteen() {\n-            super(16);\n-        }\n-    }\n-\n-    private final int validLen;\n-    private byte[] iv = null;\n-\n-    private IvParameters(int validLen) {\n-        this.validLen = validLen;\n-    }\n-\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n-        throws InvalidParameterSpecException {\n-        if (!(paramSpec instanceof IvParameterSpec)) {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter specification\");\n-        }\n-        byte[] tmpIv = ((IvParameterSpec)paramSpec).getIV();\n-        if (tmpIv.length != validLen) {\n-            throw new InvalidParameterSpecException(\"IV not \" +\n-                    validLen + \" bytes long\");\n-        }\n-        iv = tmpIv.clone();\n-    }\n-\n-    protected void engineInit(byte[] encoded) throws IOException {\n-        DerInputStream der = new DerInputStream(encoded);\n-\n-        byte[] tmpIv = der.getOctetString();\n-        if (der.available() != 0) {\n-            throw new IOException(\"IV parsing error: extra data\");\n-        }\n-        if (tmpIv.length != validLen) {\n-            throw new IOException(\"IV not \" + validLen +\n-                \" bytes long\");\n-        }\n-        iv = tmpIv;\n-    }\n-\n-    protected void engineInit(byte[] encoded, String decodingMethod)\n-        throws IOException {\n-        if ((decodingMethod != null) &&\n-            (!decodingMethod.equalsIgnoreCase(\"ASN.1\"))) {\n-            throw new IllegalArgumentException(\"Only support ASN.1 format\");\n-        }\n-        engineInit(encoded);\n-    }\n-\n-    protected <T extends AlgorithmParameterSpec>\n-        T engineGetParameterSpec(Class<T> paramSpec)\n-        throws InvalidParameterSpecException {\n-        if (IvParameterSpec.class.isAssignableFrom(paramSpec)) {\n-            return paramSpec.cast(new IvParameterSpec(this.iv));\n-        } else {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter specification\");\n-        }\n-    }\n-\n-    protected byte[] engineGetEncoded() throws IOException {\n-        DerOutputStream out = new DerOutputStream();\n-        out.putOctetString(this.iv);\n-        return out.toByteArray();\n-    }\n-\n-    protected byte[] engineGetEncoded(String encodingMethod)\n-        throws IOException {\n-        return engineGetEncoded();\n-    }\n-\n-    protected String engineToString() {\n-        String LINE_SEP = System.lineSeparator();\n-\n-        String ivString = LINE_SEP + \"    iv:\" + LINE_SEP + \"[\";\n-        HexDumpEncoder encoder = new HexDumpEncoder();\n-        ivString += encoder.encodeBuffer(this.iv);\n-        ivString += \"]\" + LINE_SEP;\n-        return ivString;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/IvParameters.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.crypto.provider;\n+\n+import java.io.*;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n+\/**\n+ * This class implements the parameter (IV) used with the AES algorithm in\n+ * KWP mode. IV is defined in the standards as follows:\n+ *\n+ * <pre>\n+ * IV ::= OCTET STRING  -- 4 octets\n+ * <\/pre>\n+ *\n+ *\/\n+\n+public final class KWPParameters extends AlgorithmParametersSpi {\n+\n+    private BlockCipherParamsCore core;\n+\n+    public KWPParameters() {\n+        \/\/ same length as AESKeyWrapPadded.ICV2\n+        core = new BlockCipherParamsCore(4);\n+    }\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+        throws InvalidParameterSpecException {\n+        core.init(paramSpec);\n+    }\n+\n+    protected void engineInit(byte[] encoded)\n+        throws IOException {\n+        core.init(encoded);\n+    }\n+\n+    protected void engineInit(byte[] encoded, String decodingMethod)\n+        throws IOException {\n+        core.init(encoded, decodingMethod);\n+    }\n+\n+    protected <T extends AlgorithmParameterSpec>\n+        T engineGetParameterSpec(Class<T> paramSpec)\n+        throws InvalidParameterSpecException {\n+        if (AlgorithmParameterSpec.class.isAssignableFrom(paramSpec)) {\n+            return core.getParameterSpec(paramSpec);\n+        } else {\n+            throw new InvalidParameterSpecException\n+                (\"Inappropriate parameter Specification\");\n+        }\n+    }\n+\n+    protected byte[] engineGetEncoded() throws IOException {\n+        return core.getEncoded();\n+    }\n+\n+    protected byte[] engineGetEncoded(String encodingMethod)\n+        throws IOException {\n+        return core.getEncoded();\n+    }\n+\n+    protected String engineToString() {\n+        return core.toString();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KWPParameters.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.crypto.provider;\n+\n+import java.io.*;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n+\/**\n+ * This class implements the parameter (IV) used with the AES algorithm in\n+ * KW mode. IV is defined in the standards as follows:\n+ *\n+ * <pre>\n+ * IV ::= OCTET STRING  -- 8 octets\n+ * <\/pre>\n+ *\n+ *\/\n+\n+public final class KWParameters extends AlgorithmParametersSpi {\n+\n+    private BlockCipherParamsCore core;\n+\n+    public KWParameters() {\n+        core = new BlockCipherParamsCore(8); \/\/ same length as AESKeyWrap.ICV1\n+    }\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+        throws InvalidParameterSpecException {\n+        core.init(paramSpec);\n+    }\n+\n+    protected void engineInit(byte[] encoded)\n+        throws IOException {\n+        core.init(encoded);\n+    }\n+\n+    protected void engineInit(byte[] encoded, String decodingMethod)\n+        throws IOException {\n+        core.init(encoded, decodingMethod);\n+    }\n+\n+    protected <T extends AlgorithmParameterSpec>\n+        T engineGetParameterSpec(Class<T> paramSpec)\n+        throws InvalidParameterSpecException {\n+        if (AlgorithmParameterSpec.class.isAssignableFrom(paramSpec)) {\n+            return core.getParameterSpec(paramSpec);\n+        } else {\n+            throw new InvalidParameterSpecException\n+                (\"Inappropriate parameter Specification\");\n+        }\n+    }\n+\n+    protected byte[] engineGetEncoded() throws IOException {\n+        return core.getEncoded();\n+    }\n+\n+    protected byte[] engineGetEncoded(String encodingMethod)\n+        throws IOException {\n+        return core.getEncoded();\n+    }\n+\n+    protected String engineToString() {\n+        return core.toString();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KWParameters.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -441,1 +441,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Eight\");\n+                \"com.sun.crypto.provider.DESParameters\");\n@@ -444,1 +444,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Eight\", null);\n+                \"com.sun.crypto.provider.DESedeParameters\", null);\n@@ -508,1 +508,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Eight\");\n+                \"com.sun.crypto.provider.BlowfishParameters\");\n@@ -511,1 +511,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Sixteen\", null);\n+                \"com.sun.crypto.provider.AESParameters\", null);\n@@ -526,1 +526,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Eight\");\n+                \"com.sun.crypto.provider.KWParameters\");\n@@ -529,1 +529,1 @@\n-                \"com.sun.crypto.provider.IvParameters$Four\");\n+                \"com.sun.crypto.provider.KWPParameters\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}