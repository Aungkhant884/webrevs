{"files":[{"patch":"@@ -91,2 +91,5 @@\n-        if (tmpIv.length != block_size) {\n-            throw new IOException(\"IV not \" + block_size +\n+        boolean check = (tmpIv.length == block_size);\n+        if (!check) {\n+            String expectedLen = block_size + (moreSizes == null? \"\" :\n+                Arrays.toString(moreSizes));\n+            throw new IOException(\"IV not \" + expectedLen +\n@@ -98,2 +101,1 @@\n-    void init(byte[] encoded, String decodingMethod)\n-        throws IOException {\n+    void init(byte[] encoded, String decodingMethod) throws IOException {\n@@ -108,2 +110,1 @@\n-        throws InvalidParameterSpecException\n-    {\n+        throws InvalidParameterSpecException {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/BlockCipherParamsCore.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.access.SharedSecrets;\n-\n@@ -115,1 +113,1 @@\n-        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encodedKey);\n+\n@@ -120,0 +118,1 @@\n+            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encodedKey);\n@@ -127,0 +126,2 @@\n+                PKCS8EncodedKeySpec keySpec =\n+                    new PKCS8EncodedKeySpec(encodedKey);\n@@ -144,2 +145,0 @@\n-        } finally {\n-            SharedSecrets.getJavaSecuritySpecAccess().clearEncodedKeySpec(keySpec);\n@@ -167,11 +166,2 @@\n-        switch (keyType) {\n-        case Cipher.SECRET_KEY:\n-            return ConstructKeys.constructSecretKey(encoding, 0,\n-                    encoding.length, keyAlgorithm);\n-        case Cipher.PRIVATE_KEY:\n-            return ConstructKeys.constructPrivateKey(encoding, keyAlgorithm);\n-        case Cipher.PUBLIC_KEY:\n-            return ConstructKeys.constructPublicKey(encoding, keyAlgorithm);\n-        default:\n-            throw new RuntimeException(\"Unsupported key type\");\n-        }\n+        return constructKey(encoding, 0, encoding.length, keyAlgorithm,\n+                keyType);\n@@ -183,11 +173,19 @@\n-        if (keyType == Cipher.SECRET_KEY) {\n-            return ConstructKeys.constructSecretKey(encoding, ofs, len,\n-                    keyAlgorithm);\n-        } else {\n-            if (ofs == 0 && len == encoding.length) {\n-                return constructKey(encoding, keyAlgorithm, keyType);\n-            } else {\n-                byte[] encoding2 = Arrays.copyOfRange(encoding, ofs, ofs + len);\n-                try {\n-                    return constructKey(encoding2, keyAlgorithm, keyType);\n-                } finally {\n+        switch (keyType) {\n+        case Cipher.SECRET_KEY:\n+            try {\n+                return ConstructKeys.constructSecretKey(encoding, ofs, len,\n+                        keyAlgorithm);\n+            } finally {\n+                Arrays.fill(encoding, ofs, len, (byte)0);\n+            }\n+        case Cipher.PRIVATE_KEY:\n+            byte[] encoding2 = encoding;\n+            try {\n+                if (ofs != 0 || len != encoding.length) {\n+                    encoding2 = Arrays.copyOfRange(encoding, ofs, ofs + len);\n+                }\n+                return ConstructKeys.constructPrivateKey(encoding2,\n+                        keyAlgorithm);\n+            } finally {\n+                Arrays.fill(encoding, ofs, len, (byte)0);\n+                if (encoding2 != encoding) {\n@@ -197,0 +195,7 @@\n+        case Cipher.PUBLIC_KEY:\n+            if (ofs != 0 || len != encoding.length) {\n+                encoding = Arrays.copyOfRange(encoding, ofs, ofs + len);\n+            }\n+            return ConstructKeys.constructPublicKey(encoding, keyAlgorithm);\n+        default:\n+            throw new NoSuchAlgorithmException(\"Unsupported key type\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ConstructKeys.java","additions":32,"deletions":27,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -286,3 +286,0 @@\n-        if (opmode < Cipher.ENCRYPT_MODE || opmode > Cipher.UNWRAP_MODE) {\n-            throw new RuntimeException(\"Invalid opmode for Cipher\");\n-        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyWrapCipher.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}