{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n- * IV ::= OCTET STRING  -- 16 octets\n+ * IV ::= OCTET STRING  -- 8 octets for KW, 4 octets for KWP, and 16 octets for\n+ *                         other feedback modes\n@@ -49,1 +50,1 @@\n-        core = new BlockCipherParamsCore(AESConstants.AES_BLOCK_SIZE);\n+        core = new BlockCipherParamsCore(AESConstants.AES_BLOCK_SIZE, 4, 8);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESParameters.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -51,1 +52,3 @@\n-    BlockCipherParamsCore(int blksize) {\n+    private int[] moreSizes = null;\n+\n+    BlockCipherParamsCore(int blksize, int... moreSizes) {\n@@ -53,0 +56,1 @@\n+        this.moreSizes = moreSizes;\n@@ -62,3 +66,14 @@\n-        if (tmpIv.length != block_size) {\n-            throw new InvalidParameterSpecException(\"IV not \" +\n-                        block_size + \" bytes long\");\n+        boolean check = (tmpIv.length == block_size);\n+        if (!check && moreSizes != null) {\n+            for (int s : moreSizes) {\n+                if (tmpIv.length == s) {\n+                    check = true;\n+                    break;\n+                }\n+            }\n+        }\n+        if (!check) {\n+            String expectedLen = block_size + (moreSizes == null? \"\" :\n+                Arrays.toString(moreSizes));\n+            throw new InvalidParameterSpecException(\"IV length not \" +\n+                        expectedLen + \" bytes long\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/BlockCipherParamsCore.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.crypto.provider;\n-\n-import java.io.*;\n-import java.security.AlgorithmParametersSpi;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n-\n-\/**\n- * This class implements the parameter (IV) used with the AES algorithm in\n- * KWP mode. IV is defined in the standards as follows:\n- *\n- * <pre>\n- * IV ::= OCTET STRING  -- 4 octets\n- * <\/pre>\n- *\n- *\/\n-\n-public final class KWPParameters extends AlgorithmParametersSpi {\n-\n-    private BlockCipherParamsCore core;\n-\n-    public KWPParameters() {\n-        \/\/ same length as AESKeyWrapPadded.ICV2\n-        core = new BlockCipherParamsCore(4);\n-    }\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n-        throws InvalidParameterSpecException {\n-        core.init(paramSpec);\n-    }\n-\n-    protected void engineInit(byte[] encoded)\n-        throws IOException {\n-        core.init(encoded);\n-    }\n-\n-    protected void engineInit(byte[] encoded, String decodingMethod)\n-        throws IOException {\n-        core.init(encoded, decodingMethod);\n-    }\n-\n-    protected <T extends AlgorithmParameterSpec>\n-        T engineGetParameterSpec(Class<T> paramSpec)\n-        throws InvalidParameterSpecException {\n-        if (AlgorithmParameterSpec.class.isAssignableFrom(paramSpec)) {\n-            return core.getParameterSpec(paramSpec);\n-        } else {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter Specification\");\n-        }\n-    }\n-\n-    protected byte[] engineGetEncoded() throws IOException {\n-        return core.getEncoded();\n-    }\n-\n-    protected byte[] engineGetEncoded(String encodingMethod)\n-        throws IOException {\n-        return core.getEncoded();\n-    }\n-\n-    protected String engineToString() {\n-        return core.toString();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KWPParameters.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.crypto.provider;\n-\n-import java.io.*;\n-import java.security.AlgorithmParametersSpi;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n-\n-\/**\n- * This class implements the parameter (IV) used with the AES algorithm in\n- * KW mode. IV is defined in the standards as follows:\n- *\n- * <pre>\n- * IV ::= OCTET STRING  -- 8 octets\n- * <\/pre>\n- *\n- *\/\n-\n-public final class KWParameters extends AlgorithmParametersSpi {\n-\n-    private BlockCipherParamsCore core;\n-\n-    public KWParameters() {\n-        core = new BlockCipherParamsCore(8); \/\/ same length as AESKeyWrap.ICV1\n-    }\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n-        throws InvalidParameterSpecException {\n-        core.init(paramSpec);\n-    }\n-\n-    protected void engineInit(byte[] encoded)\n-        throws IOException {\n-        core.init(encoded);\n-    }\n-\n-    protected void engineInit(byte[] encoded, String decodingMethod)\n-        throws IOException {\n-        core.init(encoded, decodingMethod);\n-    }\n-\n-    protected <T extends AlgorithmParameterSpec>\n-        T engineGetParameterSpec(Class<T> paramSpec)\n-        throws InvalidParameterSpecException {\n-        if (AlgorithmParameterSpec.class.isAssignableFrom(paramSpec)) {\n-            return core.getParameterSpec(paramSpec);\n-        } else {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter Specification\");\n-        }\n-    }\n-\n-    protected byte[] engineGetEncoded() throws IOException {\n-        return core.getEncoded();\n-    }\n-\n-    protected byte[] engineGetEncoded(String encodingMethod)\n-        throws IOException {\n-        return core.getEncoded();\n-    }\n-\n-    protected String engineToString() {\n-        return core.toString();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KWParameters.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -585,1 +585,0 @@\n-        String algo = \"AES\/\" + cipher.getFeedback() + \"\/NoPadding\";\n@@ -587,2 +586,1 @@\n-            params = AlgorithmParameters.getInstance(algo,\n-                    SunJCE.getInstance());\n+            params = AlgorithmParameters.getInstance(\"AES\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyWrapCipher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -525,7 +525,0 @@\n-        ps(\"AlgorithmParameters\", \"AES\/KW\/NoPadding\",\n-                \"com.sun.crypto.provider.KWParameters\",\n-                List.of(\"AES\/KW\/PKCS5Padding\", \"AESWrap\"), null);\n-\n-        ps(\"AlgorithmParameters\", \"AES\/KWP\/NoPadding\",\n-                \"com.sun.crypto.provider.KWPParameters\");\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}