{"files":[{"patch":"@@ -358,1 +358,1 @@\n-            waitThreadStart(\"thread2\");\n+            getEventSetForThreadStartDeath(\"thread2\");\n@@ -373,1 +373,1 @@\n-            waitThreadDeath(\"thread2\");\n+            getEventSetForThreadStartDeath(\"thread2\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Event\/request\/request001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,18 +155,7 @@\n-    protected void breakpointForCommunication() throws JDITestRuntimeException {\n-\n-        log2(\"breakpointForCommunication\");\n-        getEventSet();\n-\n-        Event event = eventIterator.nextEvent();\n-        if (event instanceof BreakpointEvent) {\n-            bpEvent = (BreakpointEvent) event;\n-            return;\n-        }\n-\n-        throw new JDITestRuntimeException(\"** event '\" + event + \"' IS NOT a breakpoint **\");\n-    }\n-\n-    \/\/ Waiting for ThreadStart and ThreadDeath event we can get events from system threads,\n-    \/\/ so need to ensure we get the event from the desired thread.\n-    protected void waitThreadStart(String threadName) throws JDITestRuntimeException {\n-        while (true) {\n+    \/\/ Special version of getEventSet for ThreadStartEvent\/ThreadDeathEvent.\n+    \/\/ When ThreadStartRequest and\/or ThreadDeathRequest are enabled, we can get the events from system threads\n+    \/\/ unexpected for tests.\n+    \/\/ The method skips ThreadStartEvent\/ThreadDeathEvent events for all threads except the expected one.\n+    protected void getEventSetForThreadStartDeath(String threadName) throws JDITestRuntimeException {\n+        boolean gotDesiredEvent = false;\n+        while (!gotDesiredEvent) {\n@@ -178,1 +167,3 @@\n-                    break;\n+                    gotDesiredEvent = true;\n+                } else {\n+                    log2(\"Got ThreadStartEvent for wrong thread: \" + event);\n@@ -180,16 +171,1 @@\n-            } else if (!(event instanceof ThreadDeathEvent)) {\n-                \/\/ unexpected event. let the test handle it\n-                break;\n-            }\n-            \/\/ log the event and wait for next one\n-            log2(\"Waiting for ThreadStartEvent, got \" + event);\n-        }\n-        \/\/ reset the iterator\n-        eventIterator = eventSet.eventIterator();\n-    }\n-\n-    protected void waitThreadDeath(String threadName) throws JDITestRuntimeException {\n-        while (true) {\n-            getEventSet();\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof ThreadDeathEvent) {\n+            } else if (event instanceof ThreadDeathEvent) {\n@@ -198,1 +174,3 @@\n-                    break;\n+                    gotDesiredEvent = true;\n+                } else {\n+                    log2(\"Got ThreadDeathEvent for wrong thread: \" + event);\n@@ -200,3 +178,3 @@\n-            } else if (!(event instanceof ThreadStartEvent)) {\n-                \/\/ unexpected event. let the test handle it\n-                break;\n+            } else {\n+                \/\/ not ThreadStartEvent nor ThreadDeathEvent\n+                gotDesiredEvent = true;\n@@ -204,2 +182,0 @@\n-            \/\/ log the event and wait for next one\n-            log2(\"Waiting for ThreadStartEvent, got \" + event);\n@@ -207,1 +183,1 @@\n-        \/\/ reset the iterator\n+        \/\/ reset the iterator before return\n@@ -211,0 +187,14 @@\n+    protected void breakpointForCommunication() throws JDITestRuntimeException {\n+\n+        log2(\"breakpointForCommunication\");\n+        getEventSet();\n+\n+        Event event = eventIterator.nextEvent();\n+        if (event instanceof BreakpointEvent) {\n+            bpEvent = (BreakpointEvent) event;\n+            return;\n+        }\n+\n+        throw new JDITestRuntimeException(\"** event '\" + event + \"' IS NOT a breakpoint **\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/JDIBase.java","additions":32,"deletions":42,"binary":false,"changes":74,"status":"modified"}]}