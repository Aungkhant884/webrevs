{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import sun.invoke.util.Wrapper;\n@@ -42,1 +43,0 @@\n-import java.util.HashMap;\n@@ -816,15 +816,1 @@\n-                if (type == int.class ||\n-                        type == boolean.class ||\n-                        type == byte.class ||\n-                        type == char.class ||\n-                        type == short.class) {\n-                    mv.visitVarInsn(ILOAD, slot);\n-                } else if (type == long.class) {\n-                    mv.visitVarInsn(LLOAD, slot);\n-                } else if (type == float.class) {\n-                    mv.visitVarInsn(FLOAD, slot);\n-                } else if (type == double.class) {\n-                    mv.visitVarInsn(DLOAD, slot);\n-                } else {\n-                    throw new AssertionError();\n-                }\n+                mv.visitVarInsn(ILOAD + prim.opcodeOffset, slot);\n@@ -852,15 +838,1 @@\n-                if (type == int.class ||\n-                        type == boolean.class ||\n-                        type == byte.class ||\n-                        type == char.class ||\n-                        type == short.class) {\n-                    mv.visitInsn(IRETURN);\n-                } else if (type == long.class) {\n-                    mv.visitInsn(LRETURN);\n-                } else if (type == float.class) {\n-                    mv.visitInsn(FRETURN);\n-                } else if (type == double.class) {\n-                    mv.visitInsn(DRETURN);\n-                } else {\n-                    throw new AssertionError();\n-                }\n+                mv.visitInsn(IRETURN + prim.opcodeOffset);\n@@ -955,2 +927,2 @@\n-     * A PrimitiveTypeInfo object contains assorted information about\n-     * a primitive type in its public fields.  The struct for a particular\n+     * A PrimitiveTypeInfo object contains bytecode-related information about\n+     * a primitive type in its instance fields. The struct for a particular\n@@ -959,14 +931,9 @@\n-    private static class PrimitiveTypeInfo {\n-\n-        private static Map<Class<?>, PrimitiveTypeInfo> table = new HashMap<>();\n-\n-        static {\n-            add(byte.class, Byte.class);\n-            add(char.class, Character.class);\n-            add(double.class, Double.class);\n-            add(float.class, Float.class);\n-            add(int.class, Integer.class);\n-            add(long.class, Long.class);\n-            add(short.class, Short.class);\n-            add(boolean.class, Boolean.class);\n-        }\n+    private enum PrimitiveTypeInfo {\n+        BYTE(byte.class, 0),\n+        CHAR(char.class, 0),\n+        DOUBLE(double.class, 3),\n+        FLOAT(float.class, 2),\n+        INT(int.class, 0),\n+        LONG(long.class, 1),\n+        SHORT(short.class, 0),\n+        BOOLEAN(boolean.class, 0);\n@@ -977,1 +944,1 @@\n-        private String wrapperClassName;\n+        private final String wrapperClassName;\n@@ -981,1 +948,1 @@\n-        private String wrapperValueOfDesc;\n+        private final String wrapperValueOfDesc;\n@@ -985,1 +952,1 @@\n-        private String unwrapMethodName;\n+        private final String unwrapMethodName;\n@@ -989,1 +956,6 @@\n-        private String unwrapMethodDesc;\n+        private final String unwrapMethodDesc;\n+        \/**\n+         * Opcode offset from iload, ireturn, etc.\n+         * Order is i, l, f, d, a.\n+         *\/\n+        private final int opcodeOffset;\n@@ -991,1 +963,1 @@\n-        private PrimitiveTypeInfo(Class<?> primitiveClass, Class<?> wrapperClass) {\n+        PrimitiveTypeInfo(Class<?> primitiveClass, int opcodeOffset) {\n@@ -994,7 +966,4 @@\n-            \/**\n-             * \"base type\" used in various descriptors (see JVMS section 4.3.2)\n-             *\/\n-            String baseTypeString =\n-                    Array.newInstance(primitiveClass, 0)\n-                            .getClass().getName().substring(1);\n-            wrapperClassName = dotToSlash(wrapperClass.getName());\n+            Wrapper wrapper = Wrapper.forPrimitiveType(primitiveClass);\n+            \/\/ single-char BaseType descriptor (see JVMS section 4.3.2)\n+            String baseTypeString = wrapper.basicTypeString();\n+            wrapperClassName = dotToSlash(wrapper.wrapperType().getName());\n@@ -1005,5 +974,1 @@\n-        }\n-\n-        private static void add(Class<?> primitiveClass, Class<?> wrapperClass) {\n-            table.put(primitiveClass,\n-                    new PrimitiveTypeInfo(primitiveClass, wrapperClass));\n+            this.opcodeOffset = opcodeOffset;\n@@ -1013,1 +978,9 @@\n-            return table.get(cl);\n+            if (cl == int.class)     return INT;\n+            if (cl == long.class)    return LONG;\n+            if (cl == boolean.class) return BOOLEAN;\n+            if (cl == short.class)   return SHORT;\n+            if (cl == byte.class)    return BYTE;\n+            if (cl == char.class)    return CHAR;\n+            if (cl == float.class)   return FLOAT;\n+            if (cl == double.class)  return DOUBLE;\n+            throw new AssertionError();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":38,"deletions":65,"binary":false,"changes":103,"status":"modified"}]}