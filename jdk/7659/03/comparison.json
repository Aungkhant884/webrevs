{"files":[{"patch":"@@ -908,1 +908,2 @@\n-        addSuperInterfaces(te.asType(), results);\n+        addSuperInterfaces(te.asType(), results, new HashSet<>());\n+        assert noSameTypes(results);\n@@ -912,1 +913,35 @@\n-    private void addSuperInterfaces(TypeMirror type, Set<TypeMirror> results) {\n+    private boolean noSameTypes(Set<TypeMirror> results) {\n+        for (TypeMirror t1 : results) {\n+            for (TypeMirror t2 : results) {\n+                if (t1 == t2) {\n+                    continue;\n+                }\n+                if (typeUtils.isSameType(t1, t2)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    \/*\n+     * Instances of TypeMirror should be compared using\n+     * Types.isSameType. However, there's no hash function\n+     * consistent with that method. This makes it problematic to\n+     * store TypeMirror in a collection that relies on hashing.\n+     *\n+     * To work around that, along with accumulating the resulting set of type\n+     * mirrors, we also maintain a set of elements that correspond to those\n+     * type mirrors. Element provides strong equals and hashCode. We only add\n+     * a type mirror into the result set if we don't already have an element\n+     * that corresponds to this type mirror in the set of seen elements.\n+     *\n+     * Although this might seem wrong, as an instance of Element corresponds\n+     * to multiple instances of TypeMirror (one-to-many), in an\n+     * inheritance hierarchy the correspondence is effectively one-to-one.\n+     * This is because it is NOT possible for a type to be a subtype\n+     * of different generic invocations of the same supertype; e.g.,\n+     *\n+     *     interface X extends G<A>, G<B>\n+     *\/\n+    private void addSuperInterfaces(TypeMirror type, Set<TypeMirror> results, Set<Element> visited) {\n@@ -919,0 +954,3 @@\n+                if (!visited.add(e)) {\n+                    continue; \/\/ seen it before\n+                }\n@@ -922,1 +960,1 @@\n-                addSuperInterfaces(t, results);\n+                addSuperInterfaces(t, results, visited);\n@@ -932,1 +970,1 @@\n-            addSuperInterfaces(superType, results);\n+            addSuperInterfaces(superType, results, visited);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"}]}