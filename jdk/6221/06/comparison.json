{"files":[{"patch":"@@ -73,1 +73,1 @@\n-  : _index(index), _array(NULL), _throw_index_out_of_bounds_exception(true) {\n+  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n@@ -98,1 +98,1 @@\n-    assert(_array != NULL, \"sanity\");\n+    assert(_array != LIR_Opr::nullOpr(), \"sanity\");\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,2 +157,2 @@\n-LIR_Opr FrameMap::_caller_save_cpu_regs[] = { 0, };\n-LIR_Opr FrameMap::_caller_save_fpu_regs[] = { 0, };\n+LIR_Opr FrameMap::_caller_save_cpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_fpu_regs[] = {};\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FrameMap_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,1 +248,0 @@\n-    r = NULL;  \/\/ unreachable\n@@ -264,1 +263,1 @@\n-  LIR_Opr imm = NULL;\n+  LIR_Opr imm;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-class LIR_OprDesc;\n-typedef LIR_OprDesc* LIR_Opr;\n+class LIR_Opr;\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  : _index(index), _array(NULL), _throw_index_out_of_bounds_exception(true) {\n+  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-LIR_Opr FrameMap::_caller_save_cpu_regs[] = { 0 };\n-LIR_Opr FrameMap::_caller_save_fpu_regs[];  \/\/ same as initialize to zero\n+LIR_Opr FrameMap::_caller_save_cpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_fpu_regs[] = {};\n","filename":"src\/hotspot\/cpu\/arm\/c1_FrameMap_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -366,1 +366,1 @@\n-void LIRGenerator::CardTableBarrierSet_post_barrier_helper(LIR_OprDesc* addr, LIR_Const* card_table_base) {\n+void LIRGenerator::CardTableBarrierSet_post_barrier_helper(LIR_Opr addr, LIR_Const* card_table_base) {\n@@ -633,1 +633,1 @@\n-    arithmetic_op_int(x->op(), x->operand(), left_arg->result(), right_arg->result(), NULL);\n+    arithmetic_op_int(x->op(), x->operand(), left_arg->result(), right_arg->result(), LIR_OprFact::nullOpr);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  : _index(index), _array(NULL), _throw_index_out_of_bounds_exception(true) {\n+  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,2 +188,2 @@\n-LIR_Opr FrameMap::_caller_save_cpu_regs[] = { 0, };\n-LIR_Opr FrameMap::_caller_save_fpu_regs[] = { 0, };\n+LIR_Opr FrameMap::_caller_save_cpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_fpu_regs[] = {};\n","filename":"src\/hotspot\/cpu\/ppc\/c1_FrameMap_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  LIR_Opr r = NULL;\n+  LIR_Opr r;\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-class LIR_OprDesc;\n-typedef LIR_OprDesc* LIR_Opr;\n+class LIR_Opr;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  : _index(index), _array(NULL), _throw_index_out_of_bounds_exception(true) {\n+  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,2 +141,2 @@\n-LIR_Opr FrameMap::_caller_save_cpu_regs[] = { 0, };\n-LIR_Opr FrameMap::_caller_save_fpu_regs[] = { 0, };\n+LIR_Opr FrameMap::_caller_save_cpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_fpu_regs[] = {};\n","filename":"src\/hotspot\/cpu\/s390\/c1_FrameMap_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-  : _index(index), _array(NULL), _throw_index_out_of_bounds_exception(true) {\n+  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,3 +145,3 @@\n-LIR_Opr FrameMap::_caller_save_cpu_regs[] = { 0, };\n-LIR_Opr FrameMap::_caller_save_fpu_regs[] = { 0, };\n-LIR_Opr FrameMap::_caller_save_xmm_regs[] = { 0, };\n+LIR_Opr FrameMap::_caller_save_cpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_fpu_regs[] = {};\n+LIR_Opr FrameMap::_caller_save_xmm_regs[] = {};\n","filename":"src\/hotspot\/cpu\/x86\/c1_FrameMap_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-  LIR_Opr r = NULL;\n+  LIR_Opr r;\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-class LIR_OprDesc;\n-typedef LIR_OprDesc* LIR_Opr;\n+class LIR_Opr;\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-class LIR_OprDesc;\n@@ -56,1 +55,0 @@\n-typedef LIR_OprDesc* LIR_Opr;\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,4 +65,0 @@\n-class LIR_OprDesc;\n-typedef LIR_OprDesc* LIR_Opr;\n-\n-\n@@ -86,1 +82,1 @@\n-  friend class LIR_OprDesc;\n+  friend class LIR_Opr;\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-class LIR_OprDesc;\n-typedef LIR_OprDesc* LIR_Opr;\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+LIR_Opr LIR_OprFact::nullOpr = LIR_Opr();\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-\/\/  LIR_OprDesc\n@@ -54,1 +53,0 @@\n-class LIR_OprDesc;\n@@ -59,0 +57,1 @@\n+class LIR_Opr;\n@@ -60,2 +59,0 @@\n-\n-typedef LIR_OprDesc* LIR_Opr;\n@@ -68,1 +65,1 @@\n-\/\/ define LIR_OprPtr early so LIR_OprDesc can refer to it\n+\/\/ define LIR_OprPtr early so LIR_Opr can refer to it\n@@ -187,1 +184,1 @@\n-\/\/ The class LIR_OprDesc represents a LIR instruction operand;\n+\/\/ The class LIR_Opr represents a LIR instruction operand;\n@@ -190,2 +187,3 @@\n-\/\/ structures (see above).\n-\/\/ Registers and stack locations are inlined into the this pointer\n+\/\/ structures (see above), and pointers are stored in the _value field (cast to\n+\/\/ an intptr_t).\n+\/\/ Registers and stack locations are represented inline as integers.\n@@ -194,1 +192,7 @@\n-class LIR_OprDesc: public CompilationResourceObj {\n+\/\/ Previously, this class was derived from CompilationResourceObj.\n+\/\/ However, deriving from any of the \"Obj\" types in allocation.hpp seems\n+\/\/ detrimental, since in some build modes it would add a vtable to this class,\n+\/\/ which make it no longer be a 1-word trivially-copyable wrapper object,\n+\/\/ which is the entire point of it.\n+\n+class LIR_Opr {\n@@ -209,0 +213,1 @@\n+  intptr_t _value;\n@@ -210,1 +215,1 @@\n-  intptr_t value() const                         { return (intptr_t) this; }\n+  intptr_t value() const                         { return _value; }\n@@ -282,0 +287,13 @@\n+  LIR_Opr() : _value(0) {}\n+  LIR_Opr(intptr_t val) : _value(val) {}\n+  LIR_Opr(LIR_OprPtr *val) : _value(reinterpret_cast<intptr_t>(val)) {}\n+  bool operator==(const LIR_Opr &other) const { return _value == other._value; }\n+  bool operator!=(const LIR_Opr &other) const { return _value != other._value; }\n+  explicit operator bool() const { return _value != 0; }\n+\n+  \/\/ UGLY HACK: make this value object look like a pointer (to itself). This\n+  \/\/ operator overload should be removed, and all callers updated from\n+  \/\/ `opr->fn()` to `opr.fn()`.\n+  const LIR_Opr* operator->() const { return this; }\n+  LIR_Opr* operator->() { return this; }\n+\n@@ -288,0 +306,1 @@\n+  static inline LIR_Opr nullOpr();\n@@ -346,1 +365,1 @@\n-  bool is_equal(LIR_Opr opr) const         { return this == opr; }\n+  bool is_equal(LIR_Opr opr) const         { return *this == opr; }\n@@ -425,1 +444,1 @@\n-  LIR_OprPtr* pointer()  const                   { assert(is_pointer(), \"type check\");      return (LIR_OprPtr*)this; }\n+  LIR_OprPtr* pointer() const { assert(_value != 0 && is_pointer(), \"nullness and type check\"); return (LIR_OprPtr*)_value; }\n@@ -462,0 +481,8 @@\n+\/\/ TODO: Remove this hack.\n+\/\/ UGLY HACK: add a type alias. `LIR_Opr` is not actually equivalent to the\n+\/\/ previous `LIR_OprDesc` (`LIR_Opr` is like more similar to previous\n+\/\/ `LIR_OprDesc*`). The only purpose of this typedef is so that the various\n+\/\/ `LIR_OprDesc::enum_value` scattered everywhere don't need to be\n+\/\/ modified. This should be removed, and a textual replacement of\n+\/\/ `LIR_OprDesc::` to `LIR_Opr::` done throughout the code.\n+typedef LIR_Opr LIR_OprDesc;\n@@ -573,0 +600,1 @@\n+  static LIR_Opr nullOpr;\n@@ -2451,0 +2479,2 @@\n+inline LIR_Opr LIR_OprDesc::nullOpr()   { return LIR_OprFact::nullOpr; };\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":42,"deletions":12,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1868,1 +1868,1 @@\n-  LIR_Opr zero = NULL;\n+  LIR_Opr zero;\n@@ -3273,1 +3273,1 @@\n-  LIR_Opr counter_holder = NULL;\n+  LIR_Opr counter_holder;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-  virtual void CardTableBarrierSet_post_barrier_helper(LIR_OprDesc* addr, LIR_Const* card_table_base);\n+  virtual void CardTableBarrierSet_post_barrier_helper(LIR_Opr addr, LIR_Const* card_table_base);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-void G1BarrierSetC1::post_barrier(LIRAccess& access, LIR_OprDesc* addr, LIR_OprDesc* new_val) {\n+void G1BarrierSetC1::post_barrier(LIRAccess& access, LIR_Opr addr, LIR_Opr new_val) {\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  virtual void post_barrier(LIRAccess& access, LIR_OprDesc* addr, LIR_OprDesc* new_val);\n+  virtual void post_barrier(LIRAccess& access, LIR_Opr addr, LIR_Opr new_val);\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  LIRAddressOpr(LIRItem& item) : _item(&item), _opr(NULL) {}\n+  LIRAddressOpr(LIRItem& item) : _item(&item), _opr() {}\n@@ -83,1 +83,1 @@\n-    _resolved_addr(NULL),\n+    _resolved_addr(),\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-void CardTableBarrierSetC1::post_barrier(LIRAccess& access, LIR_OprDesc* addr, LIR_OprDesc* new_val) {\n+void CardTableBarrierSetC1::post_barrier(LIRAccess& access, LIR_Opr addr, LIR_Opr new_val) {\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  virtual void post_barrier(LIRAccess& access, LIR_OprDesc* addr, LIR_OprDesc* new_val);\n+  virtual void post_barrier(LIRAccess& access, LIR_Opr addr, LIR_Opr new_val);\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-  virtual void post_barrier(LIRAccess& access, LIR_OprDesc* addr,\n-                            LIR_OprDesc* new_val) {}\n+  virtual void post_barrier(LIRAccess& access, LIR_Opr addr,\n+                            LIR_Opr new_val) {}\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/modRefBarrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}