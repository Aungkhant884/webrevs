{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/findByName.\n- * VM Testbase keywords: [feature_mlvm]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     Try to find a class loaded as a hidden class through the VM system dictionary\n- *     (using Class.forName()). It is an error when the class can be found in this way.\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.func.findByName.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.func.findByName.Test\n- *\/\n-\n-package vm.mlvm.anonloader.func.findByName;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmTest;\n-import vm.share.FileUtils;\n-\n-public class Test extends MlvmTest {\n-    private static final Class<?> PARENT = AnonkTestee01.class;\n-\n-    public boolean run() throws Exception {\n-        try {\n-            byte[] classBytes = FileUtils.readClass(PARENT.getName());\n-            Lookup lookup = MethodHandles.lookup();\n-            Lookup ank_lookup = MethodHandles.privateLookupIn(PARENT, lookup);\n-            Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-            getLog().display(\"Hidden class name: \" + c.getName());\n-            Class.forName(c.getName()).newInstance();\n-            return false;\n-        } catch ( ClassNotFoundException e ) {\n-            return true;\n-        }\n-    }\n-\n-    public static void main(String[] args) { MlvmTest.launch(args); }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/func\/findByName\/Test.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package vm.mlvm.anonloader.share;\n-\n-public class AnonkTestee02 extends AnonkTestee01 {\n-    public AnonkTestee02() {}\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/AnonkTestee02.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/byteMutation.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.byteMutation.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.stress.byteMutation.Test -stressIterationsFactor 100000\n- *\/\n-\n-package vm.mlvm.anonloader.stress.byteMutation;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-import vm.share.FileUtils;\n-import vm.share.options.Option;\n-\n-\/**\n- * The test does the following in a cycle:\n- *\n- * <ol>\n- * <li>Takes bytes from a valid class file\n- * <li>Sets 1 to 5 bytes in random positions to random values\n- * <li>Tries to load such class using:\n- *     <ul>\n- *       <li>a custom class loader,\n- *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- *           when {@code -hiddenLoad true} option is passed to the test.\n- *     <\/ul>\n- * <\/ol>\n- *\n- * <p>In most cases the resulting class file is invalid and rejected by\n- * the VM verifier. But this test tries to find pathological cases, such\n- * as infinite loops during verification or VM crashes.\n- *\n- *\/\n-public class Test extends StressClassLoadingTest {\n-    private final static Class<?> HOST_CLASS = AnonkTestee01.class;\n-    private final byte[] testeeBytes;\n-    @Option(name = \"mutationCount\", default_value = \"3\",\n-            description = \"How many bytes to mutate in a class\")\n-    private int mutationCount = 3;\n-\n-    \/**\n-     * Constructs the test.\n-     * @throws Exception if there are any errors when\n-     * reading {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes.\n-     *\/\n-    public Test() throws Exception {\n-        this.testeeBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-    }\n-\n-    \/**\n-     * Returns {@link vm.mlvm.anonloader.share.AnonkTestee01} class to the\n-     * parent.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class.\n-     *\/\n-    @Override\n-    protected Class<?> getHostClass() {\n-        return HOST_CLASS;\n-    }\n-\n-    \/**\n-     * Takes {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes\n-     * and modifies mutationCount bytes setting them to random values.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes with modified bytes.\n-     *\/\n-    @Override\n-    protected byte[] generateClassBytes() {\n-        \/\/ TODO: there is non-zero probability that generated bytecode will be\n-        \/\/ valid, so it should be a subject of fuzzing mechanism\n-        byte[] alteredBytes = testeeBytes.clone();\n-        for (int j = 0; j < mutationCount; ++j) {\n-            alteredBytes[getRNG().nextInt(alteredBytes.length)] = (byte) getRNG().nextInt(256);\n-        }\n-        return alteredBytes;\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        StressClassLoadingTest.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/byteMutation\/Test.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/heap.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.oome.heap.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm -XX:-UseGCOverheadLimit -Xmx128m vm.mlvm.anonloader.stress.oome.heap.Test\n- *\/\n-\n-package vm.mlvm.anonloader.stress.oome.heap;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.util.List;\n-import java.io.IOException;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmOOMTest;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.Env;\n-import vm.share.FileUtils;\n-\n-\/**\n- * This test loads a class using defineHiddenClass, creates instances\n- * of that class and stores them, expecting Heap OOME.\n- *\n- *\/\n-\n-public class Test extends MlvmOOMTest {\n-    @Override\n-    protected void checkOOME(OutOfMemoryError oome) {\n-        String message = oome.getMessage();\n-        if (!\"Java heap space\".equals(message)) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n-        }\n-    }\n-    @Override\n-    protected void eatMemory(List<Object> list) {\n-        byte[] classBytes = null;\n-        try {\n-            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-        } catch (IOException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-        try {\n-            while (true) {\n-                Lookup lookup = MethodHandles.lookup();\n-                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n-                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-                list.add(c.newInstance());\n-            }\n-        } catch (InstantiationException | IllegalAccessException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/heap\/Test.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/metaspace.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.oome.metaspace.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm -XX:MaxRAMPercentage=25 -XX:-UseGCOverheadLimit -XX:MetaspaceSize=10m\n- *                   -XX:MaxMetaspaceSize=20m vm.mlvm.anonloader.stress.oome.metaspace.Test\n- *\/\n-\n-package vm.mlvm.anonloader.stress.oome.metaspace;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.util.List;\n-import java.io.IOException;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmOOMTest;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.Env;\n-import vm.share.FileUtils;\n-\n-\/**\n- * This test loads classes using defineHiddenClass and stores them,\n- * expecting Metaspace OOME.\n- *\n- *\/\n-public class Test extends MlvmOOMTest {\n-    @Override\n-    protected void checkOOME(OutOfMemoryError oome) {\n-        String message = oome.getMessage();\n-        if (!\"Metaspace\".equals(message) && !\"Compressed class space\".equals(message)) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n-        }\n-    }\n-\n-    @Override\n-    protected void eatMemory(List<Object> list) {\n-        byte[] classBytes = null;\n-        try {\n-            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-        } catch (IOException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-        try {\n-            while (true) {\n-                Lookup lookup = MethodHandles.lookup();\n-                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n-                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-                list.add(c.newInstance());\n-             }\n-         } catch (InstantiationException | IllegalAccessException e) {\n-             Env.throwAsUncheckedException(e);\n-         }\n-    }\n-\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/Test.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/parallelLoad.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.parallelLoad.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm\n- *      -Xverify:all\n- *      vm.mlvm.anonloader.stress.parallelLoad.Test\n- *      -threadsPerCpu 4\n- *      -threadsExtra 20\n- *      -parseTimeout 0\n- *      -hiddenLoad true\n- *\/\n-\n-package vm.mlvm.anonloader.stress.parallelLoad;\n-\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.MultiThreadedTest;\n-import vm.share.FileUtils;\n-\n-\/**\n- * Verifies that loading classes in parallel from several threads using\n- * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- * does not produce exceptions and crashes.\n- *\n- *\/\n-public class Test extends MultiThreadedTest {\n-    private static final Class<?> HOST_CLASS = AnonkTestee01.class;\n-    private static final String NAME_PREFIX = \"thread%03d\";\n-\n-    private final byte[] classBytes;\n-\n-    private static class SubTest extends StressClassLoadingTest {\n-        private final byte[] classBytes;\n-\n-        public SubTest(byte[] classBytes) {\n-            this.classBytes = classBytes;\n-        }\n-\n-        @Override\n-        protected Class<?> getHostClass() {\n-            return HOST_CLASS;\n-        }\n-\n-        @Override\n-        protected byte[] generateClassBytes() {\n-            return classBytes;\n-        }\n-    }\n-\n-    public Test() throws Exception {\n-        classBytes = FileUtils.readClass(HOST_CLASS.getName());\n-    }\n-\n-    \/**\n-     * Constructs a sub-test class and runs it. The sub-test class loads\n-     * {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes\n-     * using {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n-     * @param numThread Number of the thread\n-     * @throws Exception if there any exceptions thrown in the sub-test\n-     *\/\n-    @Override\n-    protected boolean runThread(int numThread) throws Exception {\n-        SubTest subTest = new SubTest(classBytes);\n-        subTest.setFileNamePrefix(String.format(NAME_PREFIX, numThread));\n-        return subTest.run();\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/parallelLoad\/Test.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/randomBytecodes.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.randomBytecodes.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.stress.randomBytecodes.Test -stressIterationsFactor 100000\n- *\/\n-\n-package vm.mlvm.anonloader.stress.randomBytecodes;\n-\n-import java.util.Arrays;\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-\n-\/**\n- * The test does the following in a cycle:\n- * <ol>\n- * <li>Creates a class bytecodes that has a valid 12-byte header\n- *     and has totally random bytes after the header\n- * <li>Tries to load such class using:\n- *     <ul>\n- *       <li>a custom class loader, or\n- *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- *           when {@code -hiddenLoad true} is set.\n- *     <\/ul>\n- * <\/ol>\n- *\n- * <p>In most cases the resulting class file is invalid and rejected by\n- * the VM verifier. But this test is looking for pathological cases\n- * such as infinite loops in the verifier or VM crashes.\n- *\n- *\/\n-public class Test extends StressClassLoadingTest {\n-    private static final Class<?> HOST_CLASS = Test.class;\n-    private static final int MAX_SIZE = 0xFFF7;\n-    private static final byte[] CLASS_HEADER = new byte[] {\n-        (byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n-        0x00, 0x00, 0x00, 0x32\n-    };\n-\n-    \/**\n-     * Returns {@link vm.mlvm.anonloader.share.AnonkTestee01} class to the\n-     * parent.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class.\n-     *\/\n-    @Override\n-    protected Class<?> getHostClass() {\n-        return HOST_CLASS;\n-    }\n-\n-    \/**\n-     * Generates a class with valid header (magic and version fields) and\n-     * random bytes after the header.\n-     * <p>Class size is random ([8..65527]).\n-     * Byte values are limited to [0..11] range in order to increase\n-     * possiblity that the random class passes the initial (dead-on-arrival)\n-     * stages of the verifier and is rejected\n-     * in more interesting ones, like method bytecode verification.\n-     * Class version is 52.\n-     *\n-     * @return Class with valid Java header (8 bytes) and totally random bytes\n-     * after the header\n-     *\/\n-    @Override\n-    protected byte[] generateClassBytes() {\n-        final byte[] classBytes = Arrays.copyOf(CLASS_HEADER,\n-                CLASS_HEADER.length + getRNG().nextInt(MAX_SIZE));\n-        for (int j = CLASS_HEADER.length; j < classBytes.length; j++) {\n-            classBytes[j] = (byte) getRNG().nextInt(12);\n-        }\n-\n-        return classBytes;\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        StressClassLoadingTest.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/randomBytecodes\/Test.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/findByName.\n+ * VM Testbase keywords: [feature_mlvm]\n+ * VM Testbase readme:\n+ * DESCRIPTION\n+ *     Try to find a class loaded as a hidden class through the VM system dictionary\n+ *     (using Class.forName()). It is an error when the class can be found in this way.\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.func.findByName.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm vm.mlvm.hiddenloader.func.findByName.Test\n+ *\/\n+\n+package vm.mlvm.hiddenloader.func.findByName;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+\n+import vm.mlvm.hiddenloader.share.HiddenkTestee01;\n+import vm.mlvm.share.MlvmTest;\n+import vm.share.FileUtils;\n+\n+public class Test extends MlvmTest {\n+    private static final Class<?> PARENT = HiddenkTestee01.class;\n+\n+    public boolean run() throws Exception {\n+        try {\n+            byte[] classBytes = FileUtils.readClass(PARENT.getName());\n+            Lookup lookup = MethodHandles.lookup();\n+            Lookup ank_lookup = MethodHandles.privateLookupIn(PARENT, lookup);\n+            Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n+            getLog().display(\"Hidden class name: \" + c.getName());\n+            Class.forName(c.getName()).newInstance();\n+            return false;\n+        } catch ( ClassNotFoundException e ) {\n+            return true;\n+        }\n+    }\n+\n+    public static void main(String[] args) { MlvmTest.launch(args); }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/func\/findByName\/Test.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package vm.mlvm.anonloader.share;\n+package vm.mlvm.hiddenloader.share;\n@@ -28,1 +28,1 @@\n-public class AnonkTestee01 {\n+public class HiddenkTestee01 {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/share\/HiddenkTestee01.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/AnonkTestee01.java","status":"renamed"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package vm.mlvm.hiddenloader.share;\n+\n+public class HiddenkTestee02 extends HiddenkTestee01 {\n+    public HiddenkTestee02() {}\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/share\/HiddenkTestee02.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package vm.mlvm.anonloader.share;\n+package vm.mlvm.hiddenloader.share;\n@@ -68,1 +68,1 @@\n- * saved to {@code _AnonkTestee01.class} file in the current directory.\n+ * saved to {@code _HiddenkTestee01.class} file in the current directory.\n@@ -75,1 +75,1 @@\n-    private static final String RESCUE_FILE_NAME = \"_AnonkTestee01.class\";\n+    private static final String RESCUE_FILE_NAME = \"_HiddenkTestee01.class\";\n@@ -103,1 +103,1 @@\n-     * _AnonkTestee01.class and hangXX.class.\n+     * _HiddenkTestee01.class and hangXX.class.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/share\/StressClassLoadingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/StressClassLoadingTest.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/byteMutation\/TEST.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/byteMutation\/TEST.properties","status":"renamed"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/hiddenloader\/stress\/byteMutation.\n+ * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.stress.byteMutation.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm vm.mlvm.hiddenloader.stress.byteMutation.Test -stressIterationsFactor 100000\n+ *\/\n+\n+package vm.mlvm.hiddenloader.stress.byteMutation;\n+\n+import vm.mlvm.hiddenloader.share.HiddenkTestee01;\n+import vm.mlvm.hiddenloader.share.StressClassLoadingTest;\n+import vm.share.FileUtils;\n+import vm.share.options.Option;\n+\n+\/**\n+ * The test does the following in a cycle:\n+ *\n+ * <ol>\n+ * <li>Takes bytes from a valid class file\n+ * <li>Sets 1 to 5 bytes in random positions to random values\n+ * <li>Tries to load such class using:\n+ *     <ul>\n+ *       <li>a custom class loader,\n+ *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n+ *           when {@code -hiddenLoad true} option is passed to the test.\n+ *     <\/ul>\n+ * <\/ol>\n+ *\n+ * <p>In most cases the resulting class file is invalid and rejected by\n+ * the VM verifier. But this test tries to find pathological cases, such\n+ * as infinite loops during verification or VM crashes.\n+ *\n+ *\/\n+public class Test extends StressClassLoadingTest {\n+    private final static Class<?> HOST_CLASS = HiddenkTestee01.class;\n+    private final byte[] testeeBytes;\n+    @Option(name = \"mutationCount\", default_value = \"3\",\n+            description = \"How many bytes to mutate in a class\")\n+    private int mutationCount = 3;\n+\n+    \/**\n+     * Constructs the test.\n+     * @throws Exception if there are any errors when\n+     * reading {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class bytecodes.\n+     *\/\n+    public Test() throws Exception {\n+        this.testeeBytes = FileUtils.readClass(HiddenkTestee01.class.getName());\n+    }\n+\n+    \/**\n+     * Returns {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class to the\n+     * parent.\n+     * @return {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class.\n+     *\/\n+    @Override\n+    protected Class<?> getHostClass() {\n+        return HOST_CLASS;\n+    }\n+\n+    \/**\n+     * Takes {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class bytecodes\n+     * and modifies mutationCount bytes setting them to random values.\n+     * @return {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class bytecodes with modified bytes.\n+     *\/\n+    @Override\n+    protected byte[] generateClassBytes() {\n+        \/\/ TODO: there is non-zero probability that generated bytecode will be\n+        \/\/ valid, so it should be a subject of fuzzing mechanism\n+        byte[] alteredBytes = testeeBytes.clone();\n+        for (int j = 0; j < mutationCount; ++j) {\n+            alteredBytes[getRNG().nextInt(alteredBytes.length)] = (byte) getRNG().nextInt(256);\n+        }\n+        return alteredBytes;\n+    }\n+\n+    \/**\n+     * Runs the test.\n+     * @param args Test arguments.\n+     *\/\n+    public static void main(String[] args) {\n+        StressClassLoadingTest.launch(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/byteMutation\/Test.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/heap\/TEST.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/heap\/TEST.properties","status":"renamed"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/heap.\n+ * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.stress.oome.heap.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm -XX:-UseGCOverheadLimit -Xmx128m vm.mlvm.hiddenloader.stress.oome.heap.Test\n+ *\/\n+\n+package vm.mlvm.hiddenloader.stress.oome.heap;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.List;\n+import java.io.IOException;\n+\n+import vm.mlvm.hiddenloader.share.HiddenkTestee01;\n+import vm.mlvm.share.MlvmOOMTest;\n+import vm.mlvm.share.MlvmTestExecutor;\n+import vm.mlvm.share.Env;\n+import vm.share.FileUtils;\n+\n+\/**\n+ * This test loads a class using defineHiddenClass, creates instances\n+ * of that class and stores them, expecting Heap OOME.\n+ *\n+ *\/\n+\n+public class Test extends MlvmOOMTest {\n+    @Override\n+    protected void checkOOME(OutOfMemoryError oome) {\n+        String message = oome.getMessage();\n+        if (!\"Java heap space\".equals(message)) {\n+            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n+        }\n+    }\n+    @Override\n+    protected void eatMemory(List<Object> list) {\n+        byte[] classBytes = null;\n+        try {\n+            classBytes = FileUtils.readClass(HiddenkTestee01.class.getName());\n+        } catch (IOException e) {\n+            Env.throwAsUncheckedException(e);\n+        }\n+        try {\n+            while (true) {\n+                Lookup lookup = MethodHandles.lookup();\n+                Lookup ank_lookup = MethodHandles.privateLookupIn(HiddenkTestee01.class, lookup);\n+                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n+                list.add(c.newInstance());\n+            }\n+        } catch (InstantiationException | IllegalAccessException e) {\n+            Env.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        MlvmTestExecutor.launch(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/heap\/Test.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/metaspace\/TEST.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/TEST.properties","status":"renamed"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/metaspace.\n+ * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.stress.oome.metaspace.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm -XX:MaxRAMPercentage=25 -XX:-UseGCOverheadLimit -XX:MetaspaceSize=10m\n+ *                   -XX:MaxMetaspaceSize=20m vm.mlvm.hiddenloader.stress.oome.metaspace.Test\n+ *\/\n+\n+package vm.mlvm.hiddenloader.stress.oome.metaspace;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.List;\n+import java.io.IOException;\n+\n+import vm.mlvm.hiddenloader.share.HiddenkTestee01;\n+import vm.mlvm.share.MlvmOOMTest;\n+import vm.mlvm.share.MlvmTestExecutor;\n+import vm.mlvm.share.Env;\n+import vm.share.FileUtils;\n+\n+\/**\n+ * This test loads classes using defineHiddenClass and stores them,\n+ * expecting Metaspace OOME.\n+ *\n+ *\/\n+public class Test extends MlvmOOMTest {\n+    @Override\n+    protected void checkOOME(OutOfMemoryError oome) {\n+        String message = oome.getMessage();\n+        if (!\"Metaspace\".equals(message) && !\"Compressed class space\".equals(message)) {\n+            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n+        }\n+    }\n+\n+    @Override\n+    protected void eatMemory(List<Object> list) {\n+        byte[] classBytes = null;\n+        try {\n+            classBytes = FileUtils.readClass(HiddenkTestee01.class.getName());\n+        } catch (IOException e) {\n+            Env.throwAsUncheckedException(e);\n+        }\n+        try {\n+            while (true) {\n+                Lookup lookup = MethodHandles.lookup();\n+                Lookup ank_lookup = MethodHandles.privateLookupIn(HiddenkTestee01.class, lookup);\n+                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n+                list.add(c.newInstance());\n+             }\n+         } catch (InstantiationException | IllegalAccessException e) {\n+             Env.throwAsUncheckedException(e);\n+         }\n+    }\n+\n+    public static void main(String[] args) {\n+        MlvmTestExecutor.launch(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/metaspace\/Test.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/parallelLoad\/TEST.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/parallelLoad\/TEST.properties","status":"renamed"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/parallelLoad.\n+ * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.stress.parallelLoad.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm\n+ *      -Xverify:all\n+ *      vm.mlvm.hiddenloader.stress.parallelLoad.Test\n+ *      -threadsPerCpu 4\n+ *      -threadsExtra 20\n+ *      -parseTimeout 0\n+ *      -hiddenLoad true\n+ *\/\n+\n+package vm.mlvm.hiddenloader.stress.parallelLoad;\n+\n+import vm.mlvm.hiddenloader.share.StressClassLoadingTest;\n+import vm.mlvm.hiddenloader.share.HiddenkTestee01;\n+import vm.mlvm.share.MlvmTestExecutor;\n+import vm.mlvm.share.MultiThreadedTest;\n+import vm.share.FileUtils;\n+\n+\/**\n+ * Verifies that loading classes in parallel from several threads using\n+ * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n+ * does not produce exceptions and crashes.\n+ *\n+ *\/\n+public class Test extends MultiThreadedTest {\n+    private static final Class<?> HOST_CLASS = HiddenkTestee01.class;\n+    private static final String NAME_PREFIX = \"thread%03d\";\n+\n+    private final byte[] classBytes;\n+\n+    private static class SubTest extends StressClassLoadingTest {\n+        private final byte[] classBytes;\n+\n+        public SubTest(byte[] classBytes) {\n+            this.classBytes = classBytes;\n+        }\n+\n+        @Override\n+        protected Class<?> getHostClass() {\n+            return HOST_CLASS;\n+        }\n+\n+        @Override\n+        protected byte[] generateClassBytes() {\n+            return classBytes;\n+        }\n+    }\n+\n+    public Test() throws Exception {\n+        classBytes = FileUtils.readClass(HOST_CLASS.getName());\n+    }\n+\n+    \/**\n+     * Constructs a sub-test class and runs it. The sub-test class loads\n+     * {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class bytecodes\n+     * using {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n+     * @param numThread Number of the thread\n+     * @throws Exception if there any exceptions thrown in the sub-test\n+     *\/\n+    @Override\n+    protected boolean runThread(int numThread) throws Exception {\n+        SubTest subTest = new SubTest(classBytes);\n+        subTest.setFileNamePrefix(String.format(NAME_PREFIX, numThread));\n+        return subTest.run();\n+    }\n+\n+    \/**\n+     * Runs the test.\n+     * @param args Test arguments.\n+     *\/\n+    public static void main(String[] args) {\n+        MlvmTestExecutor.launch(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/parallelLoad\/Test.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/randomBytecodes\/TEST.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/randomBytecodes\/TEST.properties","status":"renamed"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/randomBytecodes.\n+ * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ *\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.hiddenloader.stress.randomBytecodes.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm vm.mlvm.hiddenloader.stress.randomBytecodes.Test -stressIterationsFactor 100000\n+ *\/\n+\n+package vm.mlvm.hiddenloader.stress.randomBytecodes;\n+\n+import java.util.Arrays;\n+import vm.mlvm.hiddenloader.share.StressClassLoadingTest;\n+\n+\/**\n+ * The test does the following in a cycle:\n+ * <ol>\n+ * <li>Creates a class bytecodes that has a valid 12-byte header\n+ *     and has totally random bytes after the header\n+ * <li>Tries to load such class using:\n+ *     <ul>\n+ *       <li>a custom class loader, or\n+ *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n+ *           when {@code -hiddenLoad true} is set.\n+ *     <\/ul>\n+ * <\/ol>\n+ *\n+ * <p>In most cases the resulting class file is invalid and rejected by\n+ * the VM verifier. But this test is looking for pathological cases\n+ * such as infinite loops in the verifier or VM crashes.\n+ *\n+ *\/\n+public class Test extends StressClassLoadingTest {\n+    private static final Class<?> HOST_CLASS = Test.class;\n+    private static final int MAX_SIZE = 0xFFF7;\n+    private static final byte[] CLASS_HEADER = new byte[] {\n+        (byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n+        0x00, 0x00, 0x00, 0x32\n+    };\n+\n+    \/**\n+     * Returns {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class to the\n+     * parent.\n+     * @return {@link vm.mlvm.hiddenloader.share.HiddenkTestee01} class.\n+     *\/\n+    @Override\n+    protected Class<?> getHostClass() {\n+        return HOST_CLASS;\n+    }\n+\n+    \/**\n+     * Generates a class with valid header (magic and version fields) and\n+     * random bytes after the header.\n+     * <p>Class size is random ([8..65527]).\n+     * Byte values are limited to [0..11] range in order to increase\n+     * possiblity that the random class passes the initial (dead-on-arrival)\n+     * stages of the verifier and is rejected\n+     * in more interesting ones, like method bytecode verification.\n+     * Class version is 52.\n+     *\n+     * @return Class with valid Java header (8 bytes) and totally random bytes\n+     * after the header\n+     *\/\n+    @Override\n+    protected byte[] generateClassBytes() {\n+        final byte[] classBytes = Arrays.copyOf(CLASS_HEADER,\n+                CLASS_HEADER.length + getRNG().nextInt(MAX_SIZE));\n+        for (int j = CLASS_HEADER.length; j < classBytes.length; j++) {\n+            classBytes[j] = (byte) getRNG().nextInt(12);\n+        }\n+\n+        return classBytes;\n+    }\n+\n+    \/**\n+     * Runs the test.\n+     * @param args Test arguments.\n+     *\/\n+    public static void main(String[] args) {\n+        StressClassLoadingTest.launch(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/randomBytecodes\/Test.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}