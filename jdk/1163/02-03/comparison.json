{"files":[{"patch":"@@ -807,11 +807,0 @@\n-oop G1CollectedHeap::materialize_archived_object(oop obj) {\n-  assert(is_archived_object(obj), \"not an archived obj\");\n-\n-  \/\/ Loading an archived object makes it strongly reachable. If it is\n-  \/\/ loaded during concurrent marking, it must be enqueued to the SATB\n-  \/\/ queue, shading the previously white object gray.\n-  G1BarrierSet::enqueue(obj);\n-\n-  return obj;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -727,2 +727,0 @@\n-  oop materialize_archived_object(oop obj);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,2 +112,1 @@\n-    _humongous_regions_removed(0),\n-    _open_archive_regions_freed(0) { }\n+    _regions_freed(false) { }\n@@ -121,1 +120,1 @@\n-  _humongous_regions_removed++;\n+  _regions_freed = true;\n@@ -137,1 +136,1 @@\n-  _open_archive_regions_freed++;\n+  _regions_freed = true;\n@@ -228,7 +227,1 @@\n-  if (_humongous_regions_removed > 0) {\n-    \/\/ Free regions from dead humongous regions.\n-    return true;\n-  }\n-\n-  if (_open_archive_regions_freed > 0) {\n-    \/\/ Free regions from dead pinned (open archive) regions.\n+  if (_regions_freed) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-    uint _humongous_regions_removed;\n-    uint _open_archive_regions_freed;\n+    bool _regions_freed;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -125,1 +126,1 @@\n-    _roots = OopHandle(Universe::vm_global(), HeapShared::materialize_archived_object(_roots_narrow));\n+    _roots = OopHandle(Universe::vm_global(), decode_from_archive(_roots_narrow));\n@@ -297,10 +298,0 @@\n-oop HeapShared::materialize_archived_object(narrowOop v) {\n-  assert(archive_heap_region_fixed(),\n-         \"must be called after archive heap regions are fixed\");\n-  if (!CompressedOops::is_null(v)) {\n-    oop obj = HeapShared::decode_from_archive(v);\n-    return G1CollectedHeap::heap()->materialize_archived_object(obj);\n-  }\n-  return NULL;\n-}\n-\n@@ -490,1 +481,0 @@\n-  _subgraph_entry_fields->append(is_closed_archive ? 1 : 0);\n@@ -588,1 +578,1 @@\n-    assert(num_entry_fields % 3 == 0, \"sanity\");\n+    assert(num_entry_fields % 2 == 0, \"sanity\");\n@@ -670,8 +660,9 @@\n-#if 0\n-    \/\/ For some reason, this causes jtreg to lock up with\n-    \/\/ \"jtreg -vmoptions:-XX:+VerifyArchivedFields HelloTest.java\"\n-    if (is_init_completed()) {\n-      FlagSetting fs1(VerifyBeforeGC, true);\n-      FlagSetting fs2(VerifyDuringGC, true);\n-      FlagSetting fs3(VerifyAfterGC,  true);\n-      Universe::heap()->collect(GCCause::_java_lang_system_gc);\n+    if (!FLAG_IS_DEFAULT(VerifyArchivedFields)) {\n+      \/\/ If this -XX:+VerifyArchivedFields is specified on the command-line, do extra\n+      \/\/ checks.\n+      if (is_init_completed()) {\n+        FlagSetting fs1(VerifyBeforeGC, true);\n+        FlagSetting fs2(VerifyDuringGC, true);\n+        FlagSetting fs3(VerifyAfterGC,  true);\n+        Universe::heap()->collect(GCCause::_java_lang_system_gc);\n+      }\n@@ -679,1 +670,0 @@\n-#endif\n@@ -816,2 +806,2 @@\n-    assert(efr_len % 3 == 0, \"sanity\");\n-    for (int i = 0; i < efr_len; i += 3) {\n+    assert(efr_len % 2 == 0, \"sanity\");\n+    for (int i = 0; i < efr_len; i += 2) {\n@@ -820,1 +810,0 @@\n-      int is_closed_archive = entry_field_records->at(i+2);\n@@ -845,2 +834,2 @@\n-      assert(efr_len % 3 == 0, \"sanity\");\n-      for (int i = 0; i < efr_len; i += 3) {\n+      assert(efr_len % 2 == 0, \"sanity\");\n+      for (int i = 0; i < efr_len; i += 2) {\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":16,"deletions":27,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -301,1 +301,0 @@\n-  static oop materialize_archived_object(narrowOop v);\n","filename":"src\/hotspot\/share\/memory\/heapShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}