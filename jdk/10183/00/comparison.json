{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.net.http.HttpTimeoutException;\n@@ -35,0 +36,1 @@\n+import java.time.Duration;\n@@ -124,0 +126,1 @@\n+    private IdleConnectionTimeoutEvent idleConnectionTimeoutEvent;  \/\/ may be null\n@@ -184,0 +187,22 @@\n+    \/\/ An Idle connection is one that has no active streams\n+    \/\/ and has not sent the final stream flag\n+    final class IdleConnectionTimeoutEvent extends TimeoutEvent {\n+\n+        IdleConnectionTimeoutEvent(Duration duration) {\n+            super(duration);\n+        }\n+\n+        @Override\n+        public void handle() {\n+            if (debug.on()) {\n+                debug.log(\"HTTP connection idle for too long\");\n+            }\n+            HttpTimeoutException hte = new HttpTimeoutException(\"HTTP connection idle, no active streams. Shutting down.\");\n+            shutdown(hte);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"IdleConnectionTimeoutEvent, \" + super.toString();\n+        }\n+    }\n@@ -985,0 +1010,2 @@\n+    \/\/ Check if this is the last stream aside from stream 0,\n+    \/\/ arm timeout\n@@ -1008,0 +1035,12 @@\n+        } else {\n+            \/\/ Start timer if property present and not already created\n+            synchronized (this) {\n+                \/\/ idleConnectionTimerEvent is always accessed within a synchronized block\n+                if (streams.isEmpty() && idleConnectionTimeoutEvent == null) {\n+                    idleConnectionTimeoutEvent = client().idleConnectionTimeout()\n+                            .map(IdleConnectionTimeoutEvent::new).orElse(null);\n+                    if (idleConnectionTimeoutEvent != null) {\n+                        client().registerTimer(idleConnectionTimeoutEvent);\n+                    }\n+                }\n+            }\n@@ -1180,0 +1219,6 @@\n+                \/\/ idleConnectionTimerEvent is always accessed within a synchronized block\n+                if (idleConnectionTimeoutEvent != null) {\n+                    client().cancelTimer(idleConnectionTimeoutEvent);\n+                    System.err.println(\"Http2Connection: Timer Event Cancelled\");\n+                    idleConnectionTimeoutEvent = null;\n+                }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1525,0 +1525,4 @@\n+    public Optional<Duration> idleConnectionTimeout() {\n+        return Optional.ofNullable(getIdleConnectionTimeoutProp());\n+    }\n+\n@@ -1689,0 +1693,8 @@\n+    private Duration getIdleConnectionTimeoutProp() {\n+        \/\/ Http 2 in prop name somewhere\n+        String s = Utils.getNetProperty(\"jdk.httpclient.idleConnectionTimeout\");\n+        if (s != null)\n+            return Duration.ofMillis(Long.parseLong(s));\n+        return null;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8263031\n+ * @summary Tests that the HttpClient can correctly receive a Push Promise\n+ *          Frame with the END_HEADERS flag unset followed by one or more\n+ *          Continuation Frames.\n+ * @library \/test\/lib server\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ * @modules java.base\/sun.net.www.http\n+ *          java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ * @run testng\/othervm IdleConnectionTimeoutTest\n+ *\/\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static org.testng.Assert.assertEquals;\n+\n+public class IdleConnectionTimeoutTest {\n+\n+    Http2TestServer http2TestServer;\n+    URI timeoutUri;\n+    URI noTimeoutUri;\n+    final String IDLE_CONN_PROPERTY = \"jdk.httpclient.idleConnectionTimeout\";\n+    final String TIMEOUT_PATH = \"\/serverTimeoutHandler\";\n+    final String NO_TIMEOUT_PATH = \"\/noServerTimeoutHandler\";\n+    static boolean expectTimeout;\n+    static final PrintStream testLog = System.err;\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        http2TestServer = new Http2TestServer(false, 0);\n+        http2TestServer.addHandler(new ServerTimeoutHandler(), TIMEOUT_PATH);\n+        http2TestServer.addHandler(new ServerNoTimeoutHandler(), NO_TIMEOUT_PATH);\n+\n+        http2TestServer.start();\n+        int port = http2TestServer.getAddress().getPort();\n+        timeoutUri = new URI(\"http:\/\/localhost:\" + port + TIMEOUT_PATH);\n+        noTimeoutUri = new URI(\"http:\/\/localhost:\" + port + NO_TIMEOUT_PATH);\n+    }\n+\n+    \/*\n+       If the InetSocketAddress of the first remote connection is not equal to the address of the\n+       second remote connection, then the idleConnectionTimeoutEvent has occurred and a new connection\n+       was made to carry out the second request by the client. Otherwise, the old connection was reused.\n+    *\/\n+    @Test\n+    public void testTimeoutFires() throws InterruptedException {\n+        expectTimeout = true;\n+        System.setProperty(IDLE_CONN_PROPERTY, \"100\");\n+        HttpClient hc = HttpClient.newBuilder().version(HTTP_2).build();\n+        HttpRequest hreq = HttpRequest.newBuilder(timeoutUri).version(HTTP_2).GET().build();\n+\n+        CompletableFuture<HttpResponse<String>> request = hc.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        HttpResponse<String> hresp = request.join();\n+        assertEquals(hresp.statusCode(), 200);\n+        \/\/ Sleep for 4x the timeout value to ensure that it occurs\n+        Thread.sleep(800);\n+\n+        request = hc.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        hresp = request.join();\n+        assertEquals(hresp.statusCode(), 200);\n+    }\n+\n+    \/*\n+        The opposite of testTimeoutFires(), if the same connection is used for both requests then the\n+        idleConnectionTimeoutEvent did not occur.\n+     *\/\n+    @Test\n+    public void testTimeoutDoesNotFire() throws InterruptedException {\n+        expectTimeout = false;\n+        System.setProperty(IDLE_CONN_PROPERTY, \"800\");\n+        HttpClient hc = HttpClient.newBuilder().version(HTTP_2).build();\n+        HttpRequest hreq = HttpRequest.newBuilder(noTimeoutUri).version(HTTP_2).GET().build();\n+\n+        CompletableFuture<HttpResponse<String>> request = hc.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        HttpResponse<String> hresp = request.join();\n+        assertEquals(hresp.statusCode(), 200);\n+        \/\/ Sleep for 1\/8th of the timeout value to ensure it does not occur\n+        Thread.sleep(100);\n+\n+        request = hc.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        hresp = request.join();\n+        assertEquals(hresp.statusCode(), 200);\n+    }\n+\n+    static class ServerTimeoutHandler implements Http2Handler {\n+\n+        InetSocketAddress remote;\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            if (remote == null) {\n+                remote = exchange.getRemoteAddress();\n+                exchange.sendResponseHeaders(200, 0);\n+            } else if (!remote.equals(exchange.getRemoteAddress())) {\n+                testLog.println(\"ServerTimeoutHandler: New Connection was used, idleConnectionTimeoutEvent fired.\"\n+                        + \" First remote: \" + remote + \", Second Remote: \" + exchange.getRemoteAddress());\n+                exchange.sendResponseHeaders(200, 0);\n+            } else {\n+                exchange.sendResponseHeaders(400, 0);\n+            }\n+        }\n+    }\n+\n+    static class ServerNoTimeoutHandler implements Http2Handler {\n+\n+        InetSocketAddress oldRemote;\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            InetSocketAddress newRemote = exchange.getRemoteAddress();\n+            if (oldRemote == null) {\n+                oldRemote = newRemote;\n+                exchange.sendResponseHeaders(200, 0);\n+            } else if (oldRemote.equals(newRemote)) {\n+                testLog.println(\"ServerTimeoutHandler: Same Connection was used, idleConnectionTimeoutEvent did not fire.\"\n+                        + \" First remote: \" + oldRemote + \", Second Remote: \" + newRemote);\n+                exchange.sendResponseHeaders(200, 0);\n+            } else {\n+                exchange.sendResponseHeaders(400, 0);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/IdleConnectionTimeoutTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}