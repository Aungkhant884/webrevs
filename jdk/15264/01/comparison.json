{"files":[{"patch":"@@ -210,0 +210,1 @@\n+dlopen_ext\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,0 +114,8 @@\n+#ifdef WIN32\n+#include \"symbolengine.hpp\"\n+#endif\n+\n+#ifdef _AIX\n+#include \"loadlib_aix.hpp\"\n+#endif\n+\n@@ -2896,0 +2904,74 @@\n+\n+#ifdef _WIN32\n+JNIEXPORT HMODULE JNICALL LoadLibrary_ext(LPCSTR lpLibFileName) {\n+  log_info(os)(\"attempting shared library load of %s\", lpLibFileName);\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(lpLibFileName);\n+#endif\n+  void* result = LoadLibrary(lpLibFileName);\n+  if (result != nullptr) {\n+    Events::log_dll_message(nullptr, \"Loaded shared library %s\", lpLibFileName);\n+    \/\/ Recalculate pdb search path if a DLL was loaded successfully.\n+    SymbolEngine::recalc_search_path();\n+    log_info(os)(\"shared library load of %s was successful\", lpLibFileName);\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n+  } else {\n+    DWORD errc = GetLastError();\n+    char ebuf[300];\n+    os::lasterror(ebuf, sizeof(ebuf));\n+    ebuf[299] = '\\0';\n+    Events::log_dll_message(nullptr, \"Loading shared library %s failed, error code %lu\", lpLibFileName, errc);\n+    log_info(os)(\"shared library load of %s failed, error code %lu\", lpLibFileName, errc);\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(ebuf);\n+    event.commit();\n+#endif\n+  }\n+  return (HMODULE) result;\n+}\n+#else\n+JNIEXPORT void*\n+dlopen_ext(const char *filename, int flags) {\n+  log_info(os)(\"attempting shared library load of %s\", filename);\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(filename);\n+#endif\n+  void* hdl = ::dlopen(filename, flags);\n+  if (hdl != nullptr) {\n+#ifdef _AIX\n+    LoadedLibraries::reload();\n+#endif\n+    Events::log_dll_message(nullptr, \"Loaded shared library %s\", filename);\n+    log_info(os)(\"shared library load of %s was successful\", filename);\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n+  } else {\n+    Events::log_dll_message(nullptr, \"Loading shared library %s failed\", filename);\n+    log_info(os)(\"shared library load of %s was not successful\", filename);\n+    char ebuf[300];\n+    const char* error_report = ::dlerror();\n+    if (error_report == nullptr) {\n+      error_report = \"dlerror returned no error description\";\n+    }\n+    ::strncpy(ebuf, error_report, sizeof(ebuf) -1);\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(ebuf);\n+    event.commit();\n+#endif\n+  }\n+  return hdl;\n+}\n+#endif\n+\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef MACRO_HELPER_H\n+#define MACRO_HELPER_H\n+\n+#include \"jni.h\"\n+#ifdef _WIN32\n+#include <windows.h>\n+#endif\n+\n+\n+#ifdef _WIN32\n+\n+\/* unfortunately on Windows we use already macros for LoadLibrary, see libloaderapi.h *\/\n+#if defined(LoadLibrary)\n+#undef LoadLibrary\n+#endif\n+\n+_JNI_IMPORT_OR_EXPORT_ HMODULE JNICALL LoadLibrary_ext(LPCSTR lpLibFileName);\n+\n+#define LoadLibrary(lpLibFileName)  LoadLibrary_ext(lpLibFileName)\n+\n+#else\n+_JNI_IMPORT_OR_EXPORT_ void* JNICALL dlopen_ext(const char* file, int mode);\n+\n+#define dlopen(file,mode)  dlopen_ext(file,mode)\n+\n+#endif\n+\n+\n+#endif\n","filename":"src\/java.base\/share\/native\/libjava\/macro_helper.h","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -40,0 +40,3 @@\n+\/* for dlopen *\/\n+#include <macro_helper.h>\n+\n","filename":"src\/java.base\/unix\/native\/libnet\/DefaultProxySelector.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+\/* for dlopen *\/\n+#include <macro_helper.h>\n+\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/fontpath.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,0 +64,4 @@\n+\/* for dlopen *\/\n+#include <macro_helper.h>\n+\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/java2d\/x11\/XRBackendNative.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+\/* for dlopen *\/\n+#include <macro_helper.h>\n+\n","filename":"src\/jdk.sctp\/unix\/native\/libsctp\/SctpNet.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}