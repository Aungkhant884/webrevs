{"files":[{"patch":"@@ -393,1 +393,1 @@\n-     * Flag to indicate sealed class\/interface declaration.\n+     * Flag to indicate restricted method declaration.\n@@ -403,1 +403,1 @@\n-     * Describe modifier flags as they migh appear in source code, i.e.,\n+     * Describe modifier flags as they might appear in source code, i.e.,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-            log.warning(LintCategory.RESTRICTED, pos, Warnings.RestrictedMethodCall(sym.enclClass(), sym));\n+            log.warning(LintCategory.RESTRICTED, pos, Warnings.RestrictedMethod(sym.enclClass(), sym));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1921,1 +1921,1 @@\n-compiler.warn.restricted.method.call=\\\n+compiler.warn.restricted.method=\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,0 +10,1 @@\n+import java.util.function.Function;\n@@ -13,1 +14,1 @@\n-    MemorySegment warn = MemorySegment.NULL.reinterpret(10);\n+    MemorySegment warn = MemorySegment.NULL.reinterpret(10); \/\/ warning here\n@@ -15,1 +16,6 @@\n-    MemorySegment suppressed = MemorySegment.NULL.reinterpret(10);\n+    MemorySegment suppressed = MemorySegment.NULL.reinterpret(10); \/\/ no warning here\n+\n+    Function<Integer, MemorySegment> warn_ref = MemorySegment.NULL::reinterpret; \/\/ warning here\n+\n+    @SuppressWarnings(\"restricted\")\n+    Function<Integer, MemorySegment> suppressed_ref = MemorySegment.NULL::reinterpret; \/\/ no warning here\n@@ -26,0 +32,9 @@\n+    Function<Integer, MemorySegment> testWarnRef() {\n+        return MemorySegment.NULL::reinterpret; \/\/ warning here\n+    }\n+\n+    @SuppressWarnings(\"restricted\")\n+    Function<Integer, MemorySegment> testSuppressedRef() {\n+        return MemorySegment.NULL::reinterpret; \/\/ no warning here\n+    }\n+\n@@ -28,1 +43,3 @@\n-        MemorySegment suppressedNested = MemorySegment.NULL.reinterpret(10);\n+        MemorySegment suppressedNested = MemorySegment.NULL.reinterpret(10); \/\/ no warning here\n+\n+        Function<Integer, MemorySegment> suppressedNested_ref = MemorySegment.NULL::reinterpret; \/\/ no warning here\n@@ -33,0 +50,4 @@\n+\n+        Function<Integer, MemorySegment> testSuppressedNestedRef() {\n+            return MemorySegment.NULL::reinterpret; \/\/ no warning here\n+        }\n","filename":"test\/langtools\/tools\/javac\/RestrictedMethods.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,2 +1,4 @@\n-RestrictedMethods.java:13:44: compiler.warn.restricted.method.call: java.lang.foreign.MemorySegment, reinterpret(long)\n-RestrictedMethods.java:18:27: compiler.warn.restricted.method.call: java.lang.foreign.MemorySegment, reinterpret(long)\n+RestrictedMethods.java:14:44: compiler.warn.restricted.method: java.lang.foreign.MemorySegment, reinterpret(long)\n+RestrictedMethods.java:18:49: compiler.warn.restricted.method: java.lang.foreign.MemorySegment, reinterpret(long)\n+RestrictedMethods.java:24:27: compiler.warn.restricted.method: java.lang.foreign.MemorySegment, reinterpret(long)\n+RestrictedMethods.java:33:16: compiler.warn.restricted.method: java.lang.foreign.MemorySegment, reinterpret(long)\n@@ -7,1 +9,1 @@\n-2 warnings\n+4 warnings\n","filename":"test\/langtools\/tools\/javac\/RestrictedMethods.out","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-compiler.warn.restricted.method.call\n+compiler.warn.restricted.method\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}