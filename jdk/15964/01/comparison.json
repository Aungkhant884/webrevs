{"files":[{"patch":"@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape\n+DISABLED_WARNINGS_java += this-escape restricted\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    DISABLED_WARNINGS := this-escape processing rawtypes cast serial preview, \\\n+    DISABLED_WARNINGS := restricted this-escape processing rawtypes cast serial preview, \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -392,0 +392,5 @@\n+    \/**\n+     * Flag to indicate sealed class\/interface declaration.\n+     *\/\n+    public static final long RESTRICTED = 1L<<62; \/\/ MethodSymbols\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -338,1 +338,6 @@\n-        PREVIEW(\"preview\");\n+        PREVIEW(\"preview\"),\n+\n+        \/**\n+         * Warn about use of restricted methods.\n+         *\/\n+        RESTRICTED(\"restricted\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+    public final Type restrictedType;\n@@ -613,0 +614,1 @@\n+        restrictedType = enterClass(\"jdk.internal.javac.Restricted\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -382,0 +382,5 @@\n+\n+            if (!c.type.isErroneous()\n+                    && types.isSameType(c.type, syms.restrictedType)) {\n+                toAnnotate.flags_field |= Flags.RESTRICTED;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4745,0 +4745,1 @@\n+                chk.checkRestricted(tree.pos(), sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -286,0 +286,9 @@\n+    \/** Log a preview warning.\n+     *  @param pos        Position to be used for error reporting.\n+     *  @param msg        A Warning describing the problem.\n+     *\/\n+    public void warnRestrictedAPI(DiagnosticPosition pos, Symbol sym) {\n+        if (lint.isEnabled(LintCategory.RESTRICTED))\n+            log.warning(LintCategory.RESTRICTED, pos, Warnings.RestrictedMethodCall(sym.enclClass(), sym));\n+    }\n+\n@@ -3853,0 +3862,6 @@\n+    void checkRestricted(DiagnosticPosition pos, Symbol s) {\n+        if (s.kind == MTH && (s.flags() & RESTRICTED) != 0) {\n+            deferredLintHandler.report(() -> warnRestrictedAPI(pos, s));\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1512,0 +1512,3 @@\n+            } else if (proxy.type.tsym.flatName() == syms.restrictedType.tsym.flatName()) {\n+                Assert.check(sym.kind == MTH);\n+                sym.flags_field |= RESTRICTED;\n@@ -1525,0 +1528,3 @@\n+                }  else if (proxy.type.tsym == syms.restrictedType.tsym) {\n+                    Assert.check(sym.kind == MTH);\n+                    sym.flags_field |= RESTRICTED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1920,0 +1920,5 @@\n+# 0: symbol, 1: symbol\n+compiler.warn.restricted.method.call=\\\n+    {0}.{1} is a restricted method.\\n\\\n+    (Restricted methods are unsafe and, if used incorrectly, might crash the Java runtime or corrupt memory)\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -285,0 +285,3 @@\n+javac.opt.Xlint.desc.restricted=\\\n+    Warn about use of restricted methods.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8316971\n+ * @summary Smoke test for restricted method call warnings\n+ * @compile\/fail\/ref=RestrictedMethods.out -Xlint:restricted -Werror -XDrawDiagnostics --enable-preview --source ${jdk.version} RestrictedMethods.java\n+ * @compile -Werror --enable-preview --source ${jdk.version} RestrictedMethods.java\n+ *\/\n+\n+import java.lang.foreign.MemorySegment;\n+\n+class RestrictedMethods {\n+\n+    MemorySegment warn = MemorySegment.NULL.reinterpret(10);\n+    @SuppressWarnings(\"restricted\")\n+    MemorySegment suppressed = MemorySegment.NULL.reinterpret(10);\n+\n+    void testWarn() {\n+        MemorySegment.NULL.reinterpret(10); \/\/ warning here\n+    }\n+\n+    @SuppressWarnings(\"restricted\")\n+    void testSuppressed() {\n+        MemorySegment.NULL.reinterpret(10); \/\/ no warning here\n+    }\n+\n+    @SuppressWarnings(\"restricted\")\n+    static class Nested {\n+        MemorySegment suppressedNested = MemorySegment.NULL.reinterpret(10);\n+\n+        void testSuppressedNested() {\n+            MemorySegment.NULL.reinterpret(10); \/\/ no warning here\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/RestrictedMethods.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+RestrictedMethods.java:13:44: compiler.warn.restricted.method.call: java.lang.foreign.MemorySegment, reinterpret(long)\n+RestrictedMethods.java:18:27: compiler.warn.restricted.method.call: java.lang.foreign.MemorySegment, reinterpret(long)\n+- compiler.err.warnings.and.werror\n+- compiler.note.preview.filename: RestrictedMethods.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/RestrictedMethods.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -218,0 +218,3 @@\n+\n+# this one is transitional (waiting for FFM API to exit preview)\n+compiler.warn.restricted.method.call\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}