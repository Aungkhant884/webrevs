{"files":[{"patch":"@@ -50,4 +50,6 @@\n- * Returns the children of the requested pid and optionally each parent.\n- *\n- * Use sysctl to accumulate any process whose parent pid is zero or matches.\n- * The resulting pids are stored into the array of longs.\n+ * Return pids of active processes, and optionally parent pids and\n+ * start times for each process.\n+ * For a specific non-zero pid jpid, only the direct children are returned.\n+ * If the pid jpid is zero, all active processes are returned.\n+ * Uses sysctl to accumulates any process following the rules above.\n+ * The resulting pids are stored into an array of longs named jarray.\n@@ -55,2 +57,8 @@\n- * If the parentArray is non-null, store the parent pid.\n- * If the array is too short, excess pids are not stored and\n+ * If the parentArray is non-null, store also the parent pid.\n+ * In this case the parentArray must have the same length as the result pid array.\n+ * Of course in the case of a given non-zero pid all entries in the parentArray\n+ * will contain this pid, so this array does only make sense in the case of a given\n+ * zero pid.\n+ * If the jstimesArray is non-null, store also the start time of the pid.\n+ * In this case the jstimesArray must have the same length as the result pid array.\n+ * If the array(s) (is|are) too short, excess pids are not stored and\n","filename":"src\/java.base\/macosx\/native\/libjava\/ProcessHandleImpl_macosx.c","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n- * The following functions are common on Solaris, Linux and AIX.\n+ * The following functions are for Linux\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessHandleImpl_unix.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}