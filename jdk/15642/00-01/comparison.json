{"files":[{"patch":"@@ -72,0 +72,3 @@\n+    \/\/ Number of elements in the buffer reserved for VM to use\n+    private static final int RESERVED_ELEMENTS = 2;\n+    private static final int MIN_BATCH_SIZE    = RESERVED_ELEMENTS + 2;\n@@ -75,1 +78,0 @@\n-    private static final int MIN_BATCH_SIZE    = 4;\n@@ -542,1 +544,1 @@\n-                int initialBatchSize = Math.max(walker.estimateDepth(), SMALL_BATCH);\n+                int initialBatchSize = Math.max(walker.estimateDepth()+RESERVED_ELEMENTS, SMALL_BATCH);\n@@ -757,2 +759,0 @@\n-         * If it fetches the second batch, getCallerClass may be invoked via\n-         * core reflection, can increase the next batch size.\n@@ -767,0 +767,4 @@\n+            \/\/ this method is only called when the caller class is not found in\n+            \/\/ the first batch. getCallerClass may be invoked via core reflection.\n+            \/\/ So increase the next batch size as there may be implementation-specific\n+            \/\/ frames before reaching the caller class's frame.\n@@ -798,1 +802,1 @@\n-        static final int START_POS = 2;     \/\/ 0th and 1st elements are reserved\n+        static final int START_POS = RESERVED_ELEMENTS;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}