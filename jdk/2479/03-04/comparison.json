{"files":[{"patch":"@@ -1373,1 +1373,2 @@\n-            event.exceptionMessage = ex != null ? ex.toString() : null;\n+            event.exceptionType = ex != null ? ex.getClass() : null;\n+            event.exceptionMessage = ex != null ? ex.getMessage() : null;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    public Class<?> exceptionType;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/DeserializationEvent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+    @Label (\"Exception Type\")\n+    public Class<?> exceptionType;\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/DeserializationEvent.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+                        assertExceptionType(null),\n@@ -210,1 +211,3 @@\n-    static class XYZException extends RuntimeException { }\n+    static class XYZException extends RuntimeException {\n+        XYZException(String msg) { super(msg); }\n+    }\n@@ -217,1 +220,1 @@\n-            ois.setObjectInputFilter(fv -> { throw new XYZException(); });\n+            ois.setObjectInputFilter(fv -> { throw new XYZException(\"I am a bad filter!!!\"); });\n@@ -220,1 +223,1 @@\n-            InvalidClassException ice = expectThrows(ICE, () -> ois.readObject());\n+            assertThrows(ICE, () -> ois.readObject());\n@@ -226,1 +229,2 @@\n-            assertExceptionMessage(\"jdk.jfr.event.io.TestDeserializationEvent$XYZException\").accept(events.get(0));\n+            assertExceptionType(XYZException.class).accept(events.get(0));\n+            assertExceptionMessage(\"I am a bad filter!!!\").accept(events.get(0));\n@@ -242,1 +246,2 @@\n-            assertExceptionMessage(null).accept(recordedEvent);  \/\/ no exception expected\n+            assertExceptionType(null).accept(recordedEvent);     \/\/ no exception type expected\n+            assertExceptionMessage(null).accept(recordedEvent);  \/\/ no exception message expected\n@@ -272,1 +277,1 @@\n-    static Consumer<RecordedEvent> assertType(Class expectedValue) {\n+    static Consumer<RecordedEvent> assertType(Class<?> expectedValue) {\n@@ -276,7 +281,1 @@\n-                if (expectedValue == null && recordedEvent.getValue(\"type\") == null)\n-                    return;\n-\n-                if (recordedEvent.getValue(\"type\") instanceof RecordedClass recordedClass)\n-                    assertEquals(recordedClass.getName(), expectedValue.getName());\n-                else\n-                    fail(\"Expected RecordedClass, got:\" + recordedEvent.getValue(\"type\") .getClass());\n+                assertClassOrNull(expectedValue, recordedEvent, \"type\");\n@@ -349,0 +348,12 @@\n+    static Consumer<RecordedEvent> assertExceptionType(Class<?> expectedValue) {\n+        return new Consumer<>() {\n+            @Override public void accept(RecordedEvent recordedEvent) {\n+                assertTrue(recordedEvent.hasField(\"exceptionType\"));\n+                assertClassOrNull(expectedValue, recordedEvent, \"exceptionType\");\n+            }\n+            @Override public String toString() {\n+                return \"assertExceptionType, expectedValue=\" + expectedValue;\n+            }\n+        };\n+    }\n+\n@@ -361,0 +372,12 @@\n+    static void assertClassOrNull(Class<?> expectedValue,\n+                                  RecordedEvent recordedEvent,\n+                                  String valueName) {\n+        if (expectedValue == null && recordedEvent.getValue(valueName) == null)\n+            return;\n+\n+        if (recordedEvent.getValue(valueName) instanceof RecordedClass recordedClass)\n+            assertEquals(recordedClass.getName(), expectedValue.getName());\n+        else\n+            fail(\"Expected RecordedClass, got:\" + recordedEvent.getValue(valueName).getClass());\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestDeserializationEvent.java","additions":36,"deletions":13,"binary":false,"changes":49,"status":"modified"}]}