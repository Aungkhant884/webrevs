{"files":[{"patch":"@@ -1366,2 +1366,3 @@\n-            event.filterStatus = status == null ? \"n\/a\" : status.name();\n-            event.clazz = clazz == null ? \"null\" : clazz.getName();\n+            event.filterConfigured = serialFilter != null;\n+            event.filterStatus = status != null ? status.name() : null;\n+            event.type = clazz;\n@@ -1369,1 +1370,1 @@\n-            event.totalObjectRefs = totalObjectRefs;\n+            event.objectReferences = totalObjectRefs;\n@@ -1372,1 +1373,1 @@\n-            event.exception = Objects.toString(ex, \"n\/a\");\n+            event.exceptionMessage = ex != null ? ex.toString() : null;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+    public boolean filterConfigured;\n@@ -34,1 +35,1 @@\n-    public String clazz;\n+    public Class<?> type;\n@@ -36,1 +37,1 @@\n-    public long totalObjectRefs;\n+    public long objectReferences;\n@@ -39,1 +40,1 @@\n-    public String exception;\n+    public String exceptionMessage;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/DeserializationEvent.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Label(\"Deserialization events\")\n+@Label(\"Deserialization\")\n@@ -41,0 +41,3 @@\n+    @Label(\"Filter configured\")\n+    public boolean filterConfigured;\n+\n@@ -44,2 +47,2 @@\n-    @Label (\"Class\")\n-    public String clazz;\n+    @Label (\"Type\")\n+    public Class<?> type;\n@@ -50,2 +53,2 @@\n-    @Label (\"Reference count\")\n-    public long totalObjectRefs;\n+    @Label (\"Object References\")\n+    public long objectReferences;\n@@ -59,2 +62,2 @@\n-    @Label (\"Exception\")\n-    public String exception;\n+    @Label (\"Exception Message\")\n+    public String exceptionMessage;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/DeserializationEvent.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n- *        -XX:StartFlightRecording=name=DeserializationEvent,dumponexit=true\n@@ -57,0 +56,12 @@\n+\n+\/* @test\n+ * @bug 8261160\n+ * @summary Add a deserialization JFR event\n+ * @build GlobalFilterTest SerialFilterTest\n+ * @requires vm.hasJFR\n+ * @run testng\/othervm\/policy=security.policy\n+ *        -XX:StartFlightRecording=name=DeserializationEvent,dumponexit=true\n+ *        -Djava.security.properties=${test.src}\/java.security-extra1\n+ *        -Djava.security.debug=properties GlobalFilterTest\n+ *\/\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/GlobalFilterTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.jfr.consumer.RecordedClass;\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.serial.SerialObjectBuilder;\n@@ -72,2 +74,2 @@\n-                        assertFilterStatus(\"n\/a\"),\n-                        assertClass(\"jdk.jfr.event.io.TestDeserializationEvent$R\"),\n+                        assertFilterStatus(null),\n+                        assertType(R.class),\n@@ -75,1 +77,1 @@\n-                        assertTotalObjectRefs(1),\n+                        assertObjectReferences(1),\n@@ -78,1 +80,1 @@\n-                        assertException(\"n\/a\"))) },\n+                        assertExceptionMessage(null))) },\n@@ -83,1 +85,1 @@\n-                        assertClass(\"[I\"),\n+                        assertType(int[].class),\n@@ -86,1 +88,1 @@\n-                        assertClass(\"[I\"),\n+                        assertType(int[].class),\n@@ -92,1 +94,1 @@\n-                        assertClass(\"[Ljdk.jfr.event.io.TestDeserializationEvent$R;\"),\n+                        assertType(R[].class),\n@@ -95,1 +97,1 @@\n-                        assertClass(\"[Ljdk.jfr.event.io.TestDeserializationEvent$R;\"),\n+                        assertType(R[].class),\n@@ -98,1 +100,1 @@\n-                        assertClass(\"jdk.jfr.event.io.TestDeserializationEvent$R\"),\n+                        assertType(R.class),\n@@ -101,1 +103,1 @@\n-                        assertClass(\"null\"),\n+                        assertType(null),\n@@ -107,1 +109,1 @@\n-                        assertClass(\"[[C\"),\n+                        assertType(char[][].class),\n@@ -111,1 +113,1 @@\n-                        assertClass(\"[[C\"),\n+                        assertType(char[][].class),\n@@ -115,1 +117,1 @@\n-                        assertClass(\"[C\"),\n+                        assertType(char[].class),\n@@ -119,1 +121,1 @@\n-                        assertClass(\"[C\"),\n+                        assertType(char[].class),\n@@ -123,1 +125,1 @@\n-                        assertClass(\"null\"),\n+                        assertType(null),\n@@ -127,1 +129,1 @@\n-                        assertClass(\"[C\"),\n+                        assertType(char[].class),\n@@ -156,1 +158,1 @@\n-                { null,              \"n\/a\"      }\n+                { null,              null       }\n@@ -176,0 +178,1 @@\n+            assertFilterConfigured(true).accept(events.get(0));\n@@ -202,0 +205,1 @@\n+            assertFilterConfigured(true).accept(events.get(0));\n@@ -218,1 +222,0 @@\n-            out.println(\"caught: \" + ice);\n@@ -222,1 +225,2 @@\n-            assertException(\"jdk.jfr.event.io.TestDeserializationEvent$XYZException\").accept(events.get(0));\n+            assertFilterConfigured(true).accept(events.get(0));\n+            assertExceptionMessage(\"jdk.jfr.event.io.TestDeserializationEvent$XYZException\").accept(events.get(0));\n@@ -237,1 +241,2 @@\n-            assertException(\"n\/a\"); \/\/ no exception expected\n+            assertFilterConfigured(false).accept(recordedEvent); \/\/ no filter expected\n+            assertExceptionMessage(null).accept(recordedEvent);  \/\/ no exception expected\n@@ -243,0 +248,12 @@\n+    static Consumer<RecordedEvent> assertFilterConfigured(boolean expectedValue) {\n+        return new Consumer<>() {\n+            @Override public void accept(RecordedEvent recordedEvent) {\n+                assertTrue(recordedEvent.hasField(\"filterConfigured\"));\n+                assertEquals((boolean)recordedEvent.getValue(\"filterConfigured\"), expectedValue);\n+            }\n+            @Override public String toString() {\n+                return \"assertFilterConfigured, expectedValue=\" + expectedValue;\n+            }\n+        };\n+    }\n+\n@@ -255,1 +272,1 @@\n-    static Consumer<RecordedEvent> assertClass(String expectedValue) {\n+    static Consumer<RecordedEvent> assertType(Class expectedValue) {\n@@ -258,2 +275,8 @@\n-                assertTrue(recordedEvent.hasField(\"clazz\"));\n-                assertEquals(recordedEvent.getValue(\"clazz\"), expectedValue);\n+                assertTrue(recordedEvent.hasField(\"type\"));\n+                if (expectedValue == null && recordedEvent.getValue(\"type\") == null)\n+                    return;\n+\n+                if (recordedEvent.getValue(\"type\") instanceof RecordedClass recordedClass)\n+                    assertEquals(recordedClass.getName(), expectedValue.getName());\n+                else\n+                    fail(\"Expected RecordedClass, got:\" + recordedEvent.getValue(\"type\") .getClass());\n@@ -262,1 +285,1 @@\n-                return \"assertClass, expectedValue=\" + expectedValue;\n+                return \"assertType, expectedValue=\" + expectedValue;\n@@ -279,1 +302,1 @@\n-    static Consumer<RecordedEvent> assertTotalObjectRefs(long expectedValue) {\n+    static Consumer<RecordedEvent> assertObjectReferences(long expectedValue) {\n@@ -282,2 +305,2 @@\n-                assertTrue(recordedEvent.hasField(\"totalObjectRefs\"));\n-                assertEquals((long)recordedEvent.getValue(\"totalObjectRefs\"), expectedValue);\n+                assertTrue(recordedEvent.hasField(\"objectReferences\"));\n+                assertEquals((long)recordedEvent.getValue(\"objectReferences\"), expectedValue);\n@@ -286,1 +309,1 @@\n-                return \"assertTotalObjectRefs, expectedValue=\" + expectedValue;\n+                return \"assertObjectReferences, expectedValue=\" + expectedValue;\n@@ -326,1 +349,1 @@\n-    static Consumer<RecordedEvent> assertException(String expectedValue) {\n+    static Consumer<RecordedEvent> assertExceptionMessage(String expectedValue) {\n@@ -329,2 +352,2 @@\n-                assertHasBytesRead().accept(recordedEvent);\n-                assertEquals(recordedEvent.getValue(\"exception\"), expectedValue);\n+                assertTrue(recordedEvent.hasField(\"exceptionMessage\"));\n+                assertEquals(recordedEvent.getValue(\"exceptionMessage\"), expectedValue);\n@@ -333,1 +356,1 @@\n-                return \"assertException, expectedValue=\" + expectedValue;\n+                return \"assertExceptionMessage, expectedValue=\" + expectedValue;\n@@ -356,0 +379,35 @@\n+\n+    \/\/ ---\n+    static volatile boolean initializedFoo; \/\/ false\n+    \/\/ Do not inadvertently initialize this class, Foo.\n+    static class Foo implements Serializable {\n+        static { TestDeserializationEvent.initializedFoo = true; }\n+    }\n+\n+    \/**\n+     * Checks that the creation and recording of the Deserialization event does\n+     * not inadvertently trigger initialization of the class of the stream\n+     * object, when deserialization is rejected by the filter.\n+     *\/\n+    @Test\n+    public void testRejectedClassNotInitialized() throws Exception {\n+        byte[] bytes = SerialObjectBuilder.newBuilder(\"Foo\").build();\n+        assertFalse(initializedFoo);  \/\/ sanity\n+\n+        try (Recording recording = new Recording();\n+             var bais = new ByteArrayInputStream(bytes);\n+             var ois = new ObjectInputStream(bais)) {\n+            ois.setObjectInputFilter(fv -> Status.REJECTED);\n+            recording.enable(EventNames.Deserialization);\n+            recording.start();\n+            assertThrows(ICE, () -> ois.readObject());\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            assertEquals(events.size(), 1);\n+            assertEquals(events.get(0).getEventType().getName(), \"jdk.Deserialization\");\n+            assertFilterConfigured(true).accept(events.get(0));\n+            assertFilterStatus(\"REJECTED\").accept(events.get(0));\n+            assertFalse(initializedFoo);\n+            assertType(Foo.class);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestDeserializationEvent.java","additions":90,"deletions":32,"binary":false,"changes":122,"status":"modified"}]}