{"files":[{"patch":"@@ -1795,0 +1795,2 @@\n+      uint be_loads = 0;\n+      Node* be = inner->in(LoopNode::LoopBackControl);\n@@ -1799,0 +1801,13 @@\n+          for (DUIterator_Fast jmax, j = be->fast_outs(jmax); j < jmax; j++) {\n+            Node* n = be->fast_out(j);\n+            if (n->is_Load()) {\n+              assert(n->in(0) == be, \"should be on the backedge\");\n+              do {\n+                n = n->raw_out(0);\n+              } while (!n->is_Phi());\n+              if (n == u) {\n+                be_loads++;\n+                break;\n+              }\n+            }\n+          }\n@@ -1801,0 +1816,1 @@\n+      assert(be_loads <= phis, \"wrong number phis that depends on a pinned load\");\n@@ -1812,1 +1828,3 @@\n-      assert(outer->outcnt() >= phis + 2 && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n+      \/\/ Late optimization of loads on backedge can cause Phi of outer loop to be eliminated but Phi of inner loop is\n+      \/\/ not guaranteed to be optimized out.\n+      assert(outer->outcnt() >= phis + 2 - be_loads && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8257575\n+ * @summary C2: \"failed: only phis\" assert failure in loop strip mining verfication\n+ *\n+ * @run main\/othervm -XX:LoopUnrollLimit=0 -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestEliminatedLoadPinnedOnBackedge::notInlined\n+ *                    -XX:CompileCommand=inline,TestEliminatedLoadPinnedOnBackedge::inlined TestEliminatedLoadPinnedOnBackedge\n+ *\n+ *\/\n+\n+public class TestEliminatedLoadPinnedOnBackedge {\n+    private static Object field2;\n+\n+    final static int iters = 2000;\n+\n+    public static void main(String[] args) {\n+        boolean[] flags = new boolean[iters];\n+        for (int i = 0; i < iters; i++) {\n+            flags[i] = i < iters\/2;\n+        }\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(flags);\n+            test2(flags, 1);\n+            test3(flags);\n+            inlined(new Object(), 1);\n+            inlined(new Object(), 4);\n+            inlined2(42);\n+            inlined2(0x42);\n+        }\n+    }\n+\n+    static int field;\n+\n+    private static int test1(boolean[] flags) {\n+        int k = 2;\n+        for (; k < 4; k *= 2) {\n+        }\n+        int[] array = new int[10];\n+        notInlined(array);\n+        \/\/ This load commons with the load on the backedge after the\n+        \/\/ outer strip mined loop is expanded.\n+        int v = array[0];\n+        array[1] = 42;\n+        \/\/ No use for o. Allocation removed at macro expansion time.\n+        Object o = new Object();\n+        inlined(o, k);\n+        int i = 0;\n+        for (; ; ) {\n+            synchronized (array) {\n+            }\n+            if (i >= iters) {\n+                break;\n+            }\n+            v = array[0]; \/\/ This load ends up on the backedge\n+            if (flags[i]) {\n+                inlined2(array[1]);\n+            }\n+            i++;\n+        }\n+        return v;\n+    }\n+\n+    private static int test2(boolean[] flags, int d) {\n+        int k = 2;\n+        for (; k < 4; k *= 2) {\n+        }\n+        int[] array = new int[10];\n+        notInlined(array);\n+        int v = array[0];\n+        array[1] = 42;\n+        Object o = new Object();\n+        inlined(o, k);\n+        int i = 0;\n+        for (; ; ) {\n+            synchronized (array) {\n+            }\n+            if (d == 0) {}\n+            if (i >= iters) {\n+                break;\n+            }\n+            v = (array[0] + array[2]) \/ d;\n+            if (flags[i]) {\n+                inlined2(array[1]);\n+            }\n+            i++;\n+        }\n+        return v;\n+    }\n+\n+    private static int test3(boolean[] flags) {\n+        int k = 2;\n+        for (; k < 4; k *= 2) {\n+        }\n+        int[] array = new int[10];\n+        notInlined(array);\n+        int v1 = array[0];\n+        int v2 = array[2];\n+        array[1] = 42;\n+        Object o = new Object();\n+        inlined(o, k);\n+        int i = 0;\n+        for (; ; ) {\n+            synchronized (array) {\n+            }\n+            if (i >= iters) {\n+                break;\n+            }\n+            v1 = array[0];\n+            v2 = array[2];\n+            if (flags[i]) {\n+                inlined2(array[1]);\n+            }\n+            i++;\n+        }\n+        return v1 + v2;\n+    }\n+\n+    private static void inlined2(int i) {\n+        if (i != 42) {\n+            field = 42;\n+        }\n+    }\n+\n+    private static void inlined(Object o, int i) {\n+        if (i != 4) {\n+            field2 = o;\n+        }\n+    }\n+\n+    private static void notInlined(int[] array) {\n+        java.util.Arrays.fill(array, 1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestEliminatedLoadPinnedOnBackedge.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}