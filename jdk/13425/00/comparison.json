{"files":[{"patch":"@@ -23,5 +23,4 @@\n-\n-package p;\n-\n-public class C extends p.q.Q implements I {\n-    public static String cString =  \"CClass\";\n+public class A {\n+    public static void main(String[] args) throws Exception {\n+        B.go();\n+    }\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/proc\/A.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/describeConstable\/p\/C.java","status":"copied"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+public class B {\n+    public static void go() {\n+        System.out.println(\"Hello\");\n+        System.err.println(\"World\");\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/proc\/B.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.process.Proc;\n+\n+\/*\n+ * @test\n+ * @bug 8305846\n+ * @library \/test\/lib\n+ *\/\n+public class Launcher {\n+    public static void main(String[] args) throws Exception {\n+        Proc.create(\"A\")\n+                .compile()\n+                .start()\n+                .output()\n+                .stdoutShouldContain(\"Hello\")\n+                .stderrShouldContain(\"World\");\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/proc\/Launcher.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.compiler.CompilerUtils;\n+\n@@ -121,1 +123,5 @@\n-    private List<String> cp;        \/\/ user-provided classpath\n+    private boolean addcp;          \/\/ user-provided classpath is appended\n+    private List<String> cp;        \/\/ user-provided classpaths\n+\n+    private boolean compile;        \/\/ compile the program as well\n+\n@@ -198,2 +204,1 @@\n-    \/\/ Sets classpath. If not called, Proc will choose a classpath. If called\n-    \/\/ with no arg, no classpath will be used. Can be called multiple times.\n+    \/\/ Sets classpath. Can be called multiple times.\n@@ -207,0 +212,6 @@\n+    \/\/ Adds classpath to defaults. Can be called multiple times.\n+    \/\/ once called, addcp is always true\n+    public Proc addcp(String... s) {\n+        addcp = true;\n+        return cp(s);\n+    }\n@@ -262,0 +273,28 @@\n+    \/\/ Compile as well\n+    public Proc compile() throws IOException {\n+        compile = true;\n+        return this;\n+    }\n+\n+    \/\/ get full classpath.\n+    \/\/ 1. Default classpath used if neither cp() or addcp() is called\n+    \/\/ 2. User provided classpath (can be empty) used if only cp() is called\n+    \/\/ 3. User provided classpath + default classpath used, otherwise\n+    String fullcp() {\n+        if (cp == null) {\n+            return System.getProperty(\"test.class.path\") + File.pathSeparator +\n+                    System.getProperty(\"test.src.path\");\n+        } else {\n+            var newcp = new ArrayList<>(cp);\n+            if (addcp) {\n+                newcp.add(System.getProperty(\"test.class.path\"));\n+                newcp.add(System.getProperty(\"test.src.path\"));\n+            }\n+            if (!newcp.isEmpty()) {\n+                return newcp.stream().collect(Collectors.joining(File.pathSeparator));\n+            } else {\n+                return null;\n+            }\n+        }\n+    }\n+\n@@ -285,8 +324,2 @@\n-        Collections.addAll(cmd, splitProperty(\"test.vm.opts\"));\n-        Collections.addAll(cmd, splitProperty(\"test.java.opts\"));\n-\n-        if (cp == null) {\n-            cmd.add(\"-cp\");\n-            cmd.add(System.getProperty(\"test.class.path\") + File.pathSeparator +\n-                    System.getProperty(\"test.src.path\"));\n-        } else if (!cp.isEmpty()) {\n+        var lcp = fullcp();\n+        if (lcp != null) {\n@@ -294,1 +327,1 @@\n-            cmd.add(cp.stream().collect(Collectors.joining(File.pathSeparator)));\n+            cmd.add(lcp);\n@@ -297,0 +330,14 @@\n+        if (compile) {\n+            var comp = CompilerUtils.compile(\n+                    Path.of(System.getProperty(\"test.src\"), clazz + \".java\"),\n+                    Path.of(System.getProperty(\"test.classes\")),\n+                    cmd.subList(1, cmd.size()).toArray(new String[0]));\n+                        \/\/ subList(1): all options added without launcher name\n+            if (!comp) {\n+                throw new IOException(\"Compilation error\");\n+            }\n+        }\n+\n+        Collections.addAll(cmd, splitProperty(\"test.vm.opts\"));\n+        Collections.addAll(cmd, splitProperty(\"test.java.opts\"));\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/Proc.java","additions":60,"deletions":13,"binary":false,"changes":73,"status":"modified"}]}