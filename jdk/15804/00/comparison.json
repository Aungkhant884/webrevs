{"files":[{"patch":"@@ -258,1 +258,1 @@\n-                  jint frame_count, jint start_index, jobjectArray frames);\n+                  jint buffer_size, jint start_index, jobjectArray frames);\n@@ -262,1 +262,1 @@\n-                  jint frame_count, jint start_index,\n+                  jint last_batch_count, jint buffer_size, jint start_index,\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-                                     jint frame_count, jint start_index, jobjectArray frames))\n+                                     jint buffer_size, jint start_index, jobjectArray frames))\n@@ -582,2 +582,1 @@\n-  int limit = start_index + frame_count;\n-  if (frames_array_h->length() < limit) {\n+  if (frames_array_h->length() < buffer_size) {\n@@ -588,1 +587,1 @@\n-                               frame_count, start_index, frames_array_h, CHECK_NULL);\n+                               buffer_size, start_index, frames_array_h, CHECK_NULL);\n@@ -594,1 +593,1 @@\n-                                  jint frame_count, jint start_index,\n+                                  jint last_batch_count, jint buffer_size, jint start_index,\n@@ -602,2 +601,1 @@\n-  int limit = start_index+frame_count;\n-  if (frames_array_h->length() < limit) {\n+  if (frames_array_h->length() < buffer_size) {\n@@ -608,1 +606,1 @@\n-  return StackWalk::fetchNextBatch(stackStream_h, mode, anchor, frame_count,\n+  return StackWalk::fetchNextBatch(stackStream_h, mode, anchor, last_batch_count, buffer_size,\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-\/\/   max_nframes      Maximum number of frames to be filled.\n+\/\/   buffer_size      Buffer size\n@@ -166,1 +166,1 @@\n-                              int max_nframes, int start_index,\n+                              int buffer_size, int start_index,\n@@ -170,3 +170,3 @@\n-                       max_nframes, start_index, frames_array->length());\n-  assert(max_nframes > 0, \"invalid max_nframes\");\n-  assert(start_index + max_nframes <= frames_array->length(), \"oob\");\n+                       buffer_size, start_index, frames_array->length());\n+  assert(buffer_size > 0, \"invalid buffer_size\");\n+  assert(buffer_size <= frames_array->length(), \"oob\");\n@@ -200,1 +200,1 @@\n-        \/\/ We end a batch on continuation bottom to let the Java side skip top frames of the next one\n+        \/\/ End a batch on continuation bottom to let the Java side to set the continuation to its parent and continue\n@@ -226,1 +226,1 @@\n-    \/\/ We end a batch on continuation bottom to let the Java side skip top frames of the next one\n+    \/\/ End a batch on continuation bottom to let the Java side to set the continuation to its parent and continue\n@@ -229,1 +229,1 @@\n-    if (frames_decoded >= max_nframes)  break;\n+    if (end_index >= buffer_size)  break;\n@@ -401,1 +401,1 @@\n-\/\/   frame_count    Number of frames to be traversed.\n+\/\/   buffer_size    Buffer size.\n@@ -411,1 +411,1 @@\n-                    int frame_count, int start_index, objArrayHandle frames_array,\n+                    int buffer_size, int start_index, objArrayHandle frames_array,\n@@ -417,1 +417,1 @@\n-  log_debug(stackwalk)(\"Start walking: mode \" INT32_FORMAT_X \" skip %d frames batch size %d\", mode, skip_frames, frame_count);\n+  log_debug(stackwalk)(\"Start walking: mode \" INT32_FORMAT_X \" skip %d frames, buffer size %d\", mode, skip_frames, buffer_size);\n@@ -441,1 +441,1 @@\n-    return fetchFirstBatch(stream, stackStream, mode, skip_frames, frame_count,\n+    return fetchFirstBatch(stream, stackStream, mode, skip_frames, buffer_size,\n@@ -445,1 +445,1 @@\n-    return fetchFirstBatch(stream, stackStream, mode, skip_frames, frame_count,\n+    return fetchFirstBatch(stream, stackStream, mode, skip_frames, buffer_size,\n@@ -451,1 +451,1 @@\n-                               jint mode, int skip_frames, int frame_count,\n+                               jint mode, int skip_frames, int buffer_size,\n@@ -494,1 +494,1 @@\n-    numFrames = fill_in_frames(mode, stream, frame_count, start_index,\n+    numFrames = fill_in_frames(mode, stream, buffer_size, start_index,\n@@ -509,1 +509,1 @@\n-  args.push_int(frame_count);\n+  args.push_int(buffer_size);\n@@ -538,1 +538,2 @@\n-\/\/   frame_count    Number of frames to be decoded.\n+\/\/   last_batch_count Number of frames fetched in the last batch.\n+\/\/   buffer_size    Buffer size.\n@@ -545,1 +546,1 @@\n-                               int frame_count, int start_index,\n+                               int last_batch_count, int buffer_size, int start_index,\n@@ -559,3 +560,3 @@\n-  log_debug(stackwalk)(\"StackWalk::fetchNextBatch frame_count %d existing_stream \"\n-                       PTR_FORMAT \" start %d frames %d\",\n-                       frame_count, p2i(existing_stream), start_index, frames_array->length());\n+  log_debug(stackwalk)(\"StackWalk::fetchNextBatch last_batch_count %d buffer_size %d existing_stream \"\n+                       PTR_FORMAT \" start %d frames %d\", last_batch_count,\n+                       buffer_size, p2i(existing_stream), start_index, frames_array->length());\n@@ -563,1 +564,1 @@\n-  if (frame_count <= 0) {\n+  if (buffer_size <= start_index) {\n@@ -567,2 +568,1 @@\n-  int count = frame_count + start_index;\n-  assert (frames_array->length() >= count, \"not enough space in buffers\");\n+  assert (frames_array->length() >= buffer_size, \"not enough space in buffers\");\n@@ -577,1 +577,9 @@\n-    stream.next(); \/\/ advance past the last frame decoded in previous batch\n+\n+    \/\/ Advance past the last frame decoded in the previous batch.\n+    \/\/ If the last batch is empty, it means that the last batch returns after\n+    \/\/ it advanced the frame it previously decoded as it reaches the bottom of\n+    \/\/ the continuation and it returns to let Java side set the continuation.\n+    \/\/ Now this batch starts right at the first frame of another continuation.\n+    if (last_batch_count > 0)\n+      stream.next();\n+\n@@ -579,1 +587,1 @@\n-      int n = fill_in_frames(mode, stream, frame_count, start_index,\n+      int n = fill_in_frames(mode, stream, buffer_size, start_index,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":34,"deletions":26,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-                            int max_nframes, int start_index,\n+                            int buffer_size, int start_index,\n@@ -163,1 +163,1 @@\n-                  int frame_count, int start_index, objArrayHandle frames_array,\n+                  int buffer_size, int start_index, objArrayHandle frames_array,\n@@ -167,1 +167,1 @@\n-                             jint mode, int skip_frames, int frame_count,\n+                             jint mode, int skip_frames, int buffer_size,\n@@ -171,1 +171,1 @@\n-                             int frame_count, int start_index,\n+                             int last_batch_count, int buffer_size, int start_index,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-         * @param lastBatchFrameCount number of frames in the last batch; or zero\n+         * @param lastBatchSize last batch size\n@@ -198,1 +198,1 @@\n-        protected abstract int batchSize(int lastBatchFrameCount);\n+        protected abstract int batchSize(int lastBatchSize);\n@@ -206,1 +206,1 @@\n-            int lastBatchSize = depth == 0 ? 0 : frameBuffer.curBatchFrameCount();\n+            int lastBatchSize = depth == 0 ? 0 : frameBuffer.currentBatchSize();\n@@ -316,1 +316,1 @@\n-                                                int bufStartIndex, int bufEndIndex) {\n+                                   int bufStartIndex, int bufEndIndex) {\n@@ -337,2 +337,0 @@\n-            int nextBatchSize = Math.min(maxDepth - depth, getNextBatchSize());\n-\n@@ -340,1 +338,1 @@\n-                    || (nextBatchSize <= 0)\n+                    || (depth == maxDepth )\n@@ -349,0 +347,7 @@\n+            \/\/ VM ends the batch when it reaches the bottom of a continuation\n+            \/\/ i.e. Continuation::enter.  The stack walker will set the continuation\n+            \/\/ to its parent to continue.\n+            \/\/ Note that the current batch could have no stack frame filled.  This could\n+            \/\/ happen when Continuation::enter is the last element of the frame buffer\n+            \/\/ filled in the last batch and it needs to fetch another batch in order to\n+            \/\/ detect reaching the bottom.\n@@ -350,0 +355,3 @@\n+                if (isDebug) {\n+                    System.out.format(\"  set continuation to %s%n\", continuation.getParent());\n+                }\n@@ -353,1 +361,1 @@\n-            int numFrames = fetchStackFrames(nextBatchSize);\n+            int numFrames = fetchStackFrames();\n@@ -418,1 +426,1 @@\n-                                 frameBuffer.curBatchFrameCount(),\n+                                 frameBuffer.currentBatchSize(),\n@@ -424,1 +432,2 @@\n-         * Fetches stack frames.\n+         * Fetches a new batch of stack frames.  This method returns\n+         * the number of stack frames filled in this batch.\n@@ -426,2 +435,3 @@\n-         * @param batchSize number of elements of the frame buffers for this batch\n-         * @return number of frames fetched in this batch\n+         * When it reaches the bottom of a continuation, i.e. Continuation::enter,\n+         * VM ends the batch and let the stack walker to set the continuation\n+         * to its parent and continue the stack walking.  It may return zero.\n@@ -429,1 +439,1 @@\n-        private int fetchStackFrames(int batchSize) {\n+        private int fetchStackFrames() {\n@@ -431,1 +441,0 @@\n-            frameBuffer.resize(startIndex, batchSize);\n@@ -433,2 +442,7 @@\n-            int endIndex = fetchStackFrames(mode, anchor, batchSize,\n-                                            startIndex,\n+            \/\/ If the last batch didn't fetch any frames, keep the current batch size.\n+            int lastBatchFrameCount = frameBuffer.numFrames();\n+            int batchSize = lastBatchFrameCount == 0 ? frameBuffer.currentBatchSize() : getNextBatchSize();\n+            frameBuffer.resize(batchSize);\n+\n+            int endIndex = fetchStackFrames(mode, anchor, lastBatchFrameCount,\n+                                            batchSize, startIndex,\n@@ -442,1 +456,0 @@\n-\n@@ -457,1 +470,1 @@\n-         * @param batchSize   the batch size, max. number of elements to be filled in the frame buffers.\n+         * @param bufferSize  the buffer size\n@@ -465,1 +478,1 @@\n-                                       int batchSize, int startIndex,\n+                                       int bufferSize, int startIndex,\n@@ -473,1 +486,2 @@\n-         * @param batchSize   the batch size, max. number of elements to be filled in the frame buffers.\n+         * @param lastBatchFrameCount the number of frames filled in the last batch.\n+         * @param bufferSize  the buffer size\n@@ -480,2 +494,2 @@\n-        private native int fetchStackFrames(int mode, long anchor,\n-                                            int batchSize, int startIndex,\n+        private native int fetchStackFrames(int mode, long anchor, int lastBatchFrameCount,\n+                                            int bufferSize, int startIndex,\n@@ -540,2 +554,2 @@\n-        protected int batchSize(int lastBatchFrameCount) {\n-            if (lastBatchFrameCount == 0) {\n+        protected int batchSize(int lastBatchSize) {\n+            if (lastBatchSize == 0) {\n@@ -546,2 +560,2 @@\n-                if (lastBatchFrameCount > BATCH_SIZE) {\n-                    return lastBatchFrameCount;\n+                if (lastBatchSize > BATCH_SIZE) {\n+                    return lastBatchSize;\n@@ -549,1 +563,1 @@\n-                    return Math.min(lastBatchFrameCount*2, BATCH_SIZE);\n+                    return Math.min(lastBatchSize*2, BATCH_SIZE);\n@@ -641,1 +655,1 @@\n-        void resize(int startIndex, int elements) {\n+        void resize(int size) {\n@@ -645,2 +659,2 @@\n-            assert startIndex == START_POS :\n-                    \"bad start index \" + startIndex + \" expected \" + START_POS;\n+            assert startIndex() == START_POS :\n+                    \"bad start index \" + startIndex() + \" expected \" + START_POS;\n@@ -648,1 +662,0 @@\n-            int size = startIndex+elements;\n@@ -652,1 +665,1 @@\n-                System.arraycopy(stackFrames, 0, newFrames, 0, startIndex);\n+                System.arraycopy(stackFrames, 0, newFrames, 0, startIndex());\n@@ -655,1 +668,1 @@\n-            fill(stackFrames, startIndex, size);\n+            fill(stackFrames, startIndex(), size);\n@@ -765,1 +778,1 @@\n-        protected int batchSize(int lastBatchFrameCount) {\n+        protected int batchSize(int lastBatchSize) {\n@@ -833,2 +846,0 @@\n-         * The next batch will start at the given startIndex with the maximum number\n-         * of elements.\n@@ -838,2 +849,1 @@\n-         * @param startIndex the start index for the first frame of the next batch to fill in.\n-         * @param elements the number of elements for the next batch to fill in.\n+         * @param size new batch size\n@@ -842,1 +852,1 @@\n-        abstract void resize(int startIndex, int elements);\n+        abstract void resize(int size);\n@@ -874,2 +884,2 @@\n-        final int curBatchFrameCount() {\n-            return currentBatchSize-START_POS;\n+        final int currentBatchSize() {\n+            return currentBatchSize;\n@@ -885,0 +895,9 @@\n+        \/*\n+         * Returns the number of stack frames filled in the current batch\n+         *\/\n+        final int numFrames() {\n+            if (!isActive())\n+                throw new IllegalStateException();\n+            return fence - startIndex();\n+        }\n+\n@@ -895,1 +914,1 @@\n-         * it is done for traversal.  All stack frames have been traversed.\n+         * it is done for traversal.\n@@ -898,1 +917,1 @@\n-            return origin > 0; \/\/  && (fence == 0 || origin < fence || fence == currentBatchSize);\n+            return origin > 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":62,"deletions":43,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-   jint batchSize, jint startIndex, jobjectArray frames)\n+   jint bufferSize, jint startIndex, jobjectArray frames)\n@@ -62,1 +62,1 @@\n-                             batchSize, startIndex, frames);\n+                             bufferSize, startIndex, frames);\n@@ -72,1 +72,1 @@\n-   jint batchSize, jint startIndex,\n+   int lastBatchFrameCount, jint bufferSize, jint startIndex,\n@@ -75,1 +75,1 @@\n-    return JVM_MoreStackWalk(env, stackstream, mode, anchor, batchSize,\n+    return JVM_MoreStackWalk(env, stackstream, mode, anchor, lastBatchFrameCount, bufferSize,\n","filename":"src\/java.base\/share\/native\/libjava\/StackStreamFactory.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -81,1 +81,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -85,1 +85,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n@@ -93,1 +93,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -97,1 +97,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Scoped.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}