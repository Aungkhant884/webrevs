{"files":[{"patch":"@@ -628,0 +628,1 @@\n+#ifdef ASSERT\n@@ -629,0 +630,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -458,1 +458,2 @@\n-static Block* raise_LCA_above_marks(Block* LCA, node_idx_t mark, Block* early, const PhaseCFG* cfg) {\n+static Block* raise_LCA_above_marks(Block* LCA, node_idx_t mark, Block* early, const PhaseCFG* cfg,\n+                                     Block_List* visited_list) {\n@@ -486,0 +487,1 @@\n+    visited_list->push(mid);\n@@ -543,0 +545,1 @@\n+#ifdef ASSERT\n@@ -562,0 +565,14 @@\n+#endif\n+\n+class Raise_LCA_visited_List : public StackObj {\n+  Block_List* _reset_list;\n+ public:\n+  Raise_LCA_visited_List(Block_List* reset_list) :\n+    _reset_list(reset_list) {}\n+  ~Raise_LCA_visited_List() {\n+    while (_reset_list->size() > 0) {\n+      Block* reset_block = _reset_list->pop();\n+      reset_block->set_raise_LCA_visited(0);\n+    }\n+  }\n+};\n@@ -631,0 +648,6 @@\n+\n+  \/\/ Cases falling under unrelated_load_in_store_null_block can make\n+  \/\/ raise_LCA_above_marks in inconsistent state, so always reset the\n+  \/\/ visited blocks after use.\n+  Block_List raise_LCA_visited_list;\n+  Raise_LCA_visited_List reset_LCA_visited(&raise_LCA_visited_list);\n@@ -782,1 +805,1 @@\n-      if (LCA != early && !unrelated_load_in_store_null_block(store, load)) {\n+      if (LCA != early) {\n@@ -820,1 +843,1 @@\n-    LCA = raise_LCA_above_marks(LCA, load->_idx, early, this);\n+    LCA = raise_LCA_above_marks(LCA, load->_idx, early, this, &raise_LCA_visited_list);\n@@ -834,1 +857,1 @@\n-          assert(store->find_edge(load) != -1, \"missing precedence edge\");\n+          assert(store->find_edge(load) != -1 || unrelated_load_in_store_null_block(store, load), \"missing precedence edge\");\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"}]}