{"files":[{"patch":"@@ -266,1 +266,1 @@\n-  \/\/ LogDecorator is a set of decorators represented in a uint. sizeof(uinit) is not greater than a machine word,\n+  \/\/ LogDecorator is a set of decorators represented in a uint. sizeof(uint) is not greater than a machine word,\n@@ -291,0 +291,4 @@\n+    for (LogTagSet* ts = LogTagSet::first(); ts != NULL; ts = ts->next()) {\n+        assert(!ts->has_output(output), \"broken\");\n+    }\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-  \/\/ Use recursive template deduction to calculcate the bitmask of all decorations.\n+  \/\/ Use recursive template deduction to calculate the bitmask of all decorations.\n","filename":"src\/hotspot\/share\/logging\/logDecorators.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  AsyncLogWriter::flush();\n","filename":"test\/hotspot\/gtest\/logging\/logTestFixture.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,10 @@\n+LogTagSet* find_tagset(LogTagType tt) {\n+  \/\/ Update the decorators on all tagsets to get rid of unused decorators\n+  for (LogTagSet* ts = LogTagSet::first(); ts != NULL; ts = ts->next()) {\n+    if (ts->ntags() == 1 && ts->tag(0) == tt) {\n+      return ts;\n+    }\n+  }\n+  return NULL;\n+}\n+\n@@ -250,1 +260,1 @@\n-  set_log_config(TestLogFileName, \"logging=debug\", \"none\");\n+  set_log_config(TestLogFileName, \"logging=debug\", \"none\", \"filecount=0\");\n@@ -278,0 +288,38 @@\n+\/\/ Dynamically change decorators while loggings are emitting.\n+TEST_VM_F(LogConfigurationTest, reconfigure_tags_MT) {\n+  const int nrOfThreads = 4;\n+  ConcurrentLogsite logsites[nrOfThreads] = {0, 1, 2, 3};\n+  Semaphore done(0);\n+  const long testDurationMillis = 5000;\n+  UnitTestThread* t[nrOfThreads];\n+\n+  set_log_config(TestLogFileName, \"logging=debug\", \"\", \"filecount=0\");\n+  set_log_config(\"stdout\", \"all=off\", \"none\");\n+  set_log_config(\"stderr\", \"all=off\", \"none\");\n+\n+  for (int i = 0; i < nrOfThreads; ++i) {\n+    t[i] = new UnitTestThread(&logsites[i], &done, testDurationMillis);\n+  }\n+\n+  for (int i = 0; i < nrOfThreads; i++) {\n+    t[i]->doit();\n+  }\n+\n+  jlong time_start = os::elapsed_counter();\n+  while (true) {\n+    jlong elapsed = (jlong)TimeHelper::counter_to_millis(os::elapsed_counter() - time_start);\n+    if (elapsed > testDurationMillis) {\n+      break;\n+    }\n+\n+    \/\/ Take turn logging with different decorators, either None or All.\n+    set_log_config(TestLogFileName, \"logging=off\");\n+    set_log_config(TestLogFileName, \"logging=debug\", \"\", \"filecount=0\");\n+    os::naked_short_nanosleep(137);\n+  }\n+\n+  for (int i = 0; i < nrOfThreads; ++i) {\n+    done.wait();\n+  }\n+}\n+\n","filename":"test\/hotspot\/gtest\/logging\/test_logConfiguration.cpp","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-gtest\/AsyncLogGtest.java 8267926 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}