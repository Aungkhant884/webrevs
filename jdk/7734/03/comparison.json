{"files":[{"patch":"@@ -0,0 +1,282 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262981\n+ * @key headful\n+ * @summary Test JSlider Accessibility doAccessibleAction(int)\n+ * @run main JSliderAccessibleAction\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JSlider;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class JSliderAccessibleAction {\n+\n+    private static JFrame jFrame;\n+    private static JSlider jSlider;\n+    private static JButton decrementBtn;\n+    private static JButton incrementBtn;\n+    private static JButton invalidDecrementBtn;\n+    private static JButton invalidIncrementBtn;\n+    private static final int INVALID_DECREMENT = 2;\n+    private static final int INVALID_INCREMENT = -1;\n+    private static final int VALID_DECREMENT = 1;\n+    private static final int VALID_INCREMENT = 0;\n+    private static volatile int currentJSliderValue;\n+    private static volatile int jSliderInitialValue;\n+    private static volatile CountDownLatch invalidDecrementCountDownLatch;\n+    private static volatile CountDownLatch invalidIncrementCountDownLatch;\n+    private static volatile CountDownLatch validDecrementCountDownLatch;\n+    private static volatile CountDownLatch validIncrementCountDownLatch;\n+\n+    private static void createTestUI() {\n+        jFrame = new JFrame(\"Test JSlider Accessible Action\");\n+        jSlider = new JSlider();\n+        AccessibleContext ac = jSlider.getAccessibleContext();\n+        ac.setAccessibleName(\"JSlider Accessible Test\");\n+\n+        AccessibleContext accessibleContext = jSlider.getAccessibleContext();\n+        AccessibleAction accessibleAction =\n+                accessibleContext.getAccessibleAction();\n+\n+        if (accessibleAction == null) {\n+            throw new RuntimeException(\"JSlider getAccessibleAction() should \" +\n+                    \"not be null\");\n+        }\n+\n+        if (accessibleAction.getAccessibleActionCount() != 2) {\n+            throw new RuntimeException(\"JSlider AccessibleAction supports \" +\n+                    \"only two actions ( AccessibleAction.DECREMENT & \" +\n+                    \"AccessibleAction.INCREMENT ) but got \" + accessibleAction.getAccessibleActionCount());\n+        }\n+\n+        JLabel jSliderValueLbl = new JLabel(\"JSlider value : \" + jSlider.getValue() + \"%\",\n+                JLabel.CENTER);\n+        Container container = jFrame.getContentPane();\n+\n+        container.add(jSliderValueLbl, BorderLayout.NORTH);\n+        container.add(jSlider, BorderLayout.CENTER);\n+\n+        jSlider.addChangeListener((changeEvent) -> {\n+            currentJSliderValue = jSlider.getValue();\n+            jSliderValueLbl.setText(\"JSlider value : \" + currentJSliderValue + \"%\");\n+            System.out.println(\"changed : \" + changeEvent);\n+        });\n+\n+        invalidDecrementBtn = new JButton(\"Invalid Decrement\");\n+        invalidDecrementBtn.addActionListener((actionEvent) -> {\n+            invalidDecrementCountDownLatch.countDown();\n+            accessibleAction.doAccessibleAction(INVALID_DECREMENT);\n+        });\n+\n+        invalidIncrementBtn = new JButton(\"Invalid Increment\");\n+        invalidIncrementBtn.addActionListener((actionEvent) -> {\n+            invalidIncrementCountDownLatch.countDown();\n+            accessibleAction.doAccessibleAction(INVALID_INCREMENT);\n+        });\n+\n+        decrementBtn = new JButton(\"Decrement\");\n+        decrementBtn.addActionListener((actionEvent) -> {\n+            validDecrementCountDownLatch.countDown();\n+            accessibleAction.doAccessibleAction(VALID_DECREMENT);\n+        });\n+\n+        incrementBtn = new JButton(\"Increment\");\n+        incrementBtn.addActionListener((actionEvent) -> {\n+            accessibleAction.doAccessibleAction(VALID_INCREMENT);\n+            validIncrementCountDownLatch.countDown();\n+        });\n+\n+        JPanel buttonPanel = new JPanel(new GridLayout(4, 1));\n+        buttonPanel.add(invalidDecrementBtn);\n+        buttonPanel.add(invalidIncrementBtn);\n+        buttonPanel.add(decrementBtn);\n+        buttonPanel.add(incrementBtn);\n+        container.add(buttonPanel, BorderLayout.SOUTH);\n+\n+        jFrame.pack();\n+        jFrame.setLocationRelativeTo(null);\n+        jFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        jFrame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {\n+            System.out.println(\"Ignoring Unsupported laf : \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    public static void testJSliderAccessibleAction() throws AWTException,\n+            InterruptedException, InvocationTargetException {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(300);\n+        robot.waitForIdle();\n+\n+        List<String> installedLookAndFeels =\n+                Arrays.stream(UIManager.getInstalledLookAndFeels())\n+                        .map(UIManager.LookAndFeelInfo::getClassName).collect(toList());\n+\n+        for (String lookAndFeel : installedLookAndFeels) {\n+            try {\n+                invalidDecrementCountDownLatch = new CountDownLatch(1);\n+                invalidIncrementCountDownLatch = new CountDownLatch(1);\n+                validDecrementCountDownLatch = new CountDownLatch(1);\n+                validIncrementCountDownLatch = new CountDownLatch(1);\n+                currentJSliderValue = 0;\n+                jSliderInitialValue = 0;\n+                System.out.println(\"Testing JSliderAccessibleAction in \" + lookAndFeel +\n+                        \" look and feel\");\n+\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(lookAndFeel));\n+                    if (lafSetSuccess.get()) {\n+                        createTestUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) continue;\n+                robot.waitForIdle();\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    jSliderInitialValue = jSlider.getValue();\n+                    currentJSliderValue = jSlider.getValue();\n+                });\n+                robot.waitForIdle();\n+                mouseAction(robot, invalidDecrementBtn);\n+                if (!invalidDecrementCountDownLatch.await(30,\n+                        TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Failed to perform action on Invalid \" +\n+                            \"Decrement button\");\n+                }\n+\n+                if (jSliderInitialValue != currentJSliderValue ) {\n+                    throw new RuntimeException(\"Expected that JSlider value is not \" +\n+                            \"changed when invalid decrement value 2 is passed to \" +\n+                            \"doAccessibleAction(2)  jSliderInitialValue = \"\n+                            + jSliderInitialValue + \"  currentJSliderValue = \" + currentJSliderValue);\n+                }\n+\n+                mouseAction(robot, invalidIncrementBtn);\n+                if (!invalidIncrementCountDownLatch.await(30,\n+                        TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Failed to perform action on Invalid \" +\n+                            \"Increment button\");\n+                }\n+                if (jSliderInitialValue != currentJSliderValue) {\n+                    throw new RuntimeException(\"Expected that JSlider value is not \" +\n+                            \"changed when invalid decrement value -1 is passed to \" +\n+                            \"doAccessibleAction(-1)  jSliderInitialValue = \"\n+                            + jSliderInitialValue + \"  currentJSliderValue = \" + currentJSliderValue);\n+                }\n+\n+                \/\/ JSlider value is decremented\n+                mouseAction(robot, decrementBtn);\n+                if (!validDecrementCountDownLatch.await(30, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Failed to perform action on valid \" +\n+                            \"decrement button\");\n+                }\n+                if (jSliderInitialValue == currentJSliderValue ) {\n+                    throw new RuntimeException(\"Expected that JSlider value is  \" +\n+                            \"decremented when value 1 is passed to \" +\n+                            \"doAccessibleAction(1)  jSliderInitialValue = \"\n+                            + jSliderInitialValue + \"  currentJSliderValue = \" + currentJSliderValue);\n+                }\n+\n+                \/\/ JSlider value is incremented\n+                mouseAction(robot, incrementBtn);\n+                if (!validIncrementCountDownLatch.await(30, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Failed to perform action on valid \" +\n+                            \"Increment button\");\n+                }\n+                if (jSliderInitialValue != currentJSliderValue ) {\n+                    throw new RuntimeException(\"Expected that JSlider value is  \" +\n+                            \"incremented when value 0 is passed to \" +\n+                            \"doAccessibleAction(0)  jSliderInitialValue = \"\n+                            + jSliderInitialValue + \"  currentJSliderValue = \" + currentJSliderValue);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (jFrame != null) {\n+                        jFrame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public static void mouseAction(Robot robot, JButton button) throws InterruptedException,\n+            InvocationTargetException {\n+        robot.waitForIdle();\n+        Point[] point = new Point[1];\n+        Rectangle[] rect = new Rectangle[1];\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            point[0] = button.getLocationOnScreen();\n+            rect[0] = button.getBounds();\n+        });\n+\n+        robot.mouseMove(point[0].x + rect[0].width \/ 2,\n+                point[0].y + rect[0].height \/ 2);\n+        robot.waitForIdle();\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException, AWTException {\n+        testJSliderAccessibleAction();\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JSlider\/AccessibleAction\/JSliderAccessibleAction.java","additions":282,"deletions":0,"binary":false,"changes":282,"status":"added"}]}