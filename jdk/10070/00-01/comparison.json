{"files":[{"patch":"@@ -44,1 +44,1 @@\n-     * The name of the HTML index file.\n+     * Name of the HTML index file.\n@@ -49,1 +49,1 @@\n-     * The name of the JavaScript member search index file.\n+     * Name of the JavaScript member search index file.\n@@ -56,1 +56,1 @@\n-    private static final String[] INDEX_SUBCLASSES = {\"\"\"\n+    private static final String[] INDEX_INHERITED = {\"\"\"\n@@ -73,1 +73,1 @@\n-    private static final String[] SEARCH_SUBCLASSES = {\"\"\"\n+    private static final String[] SEARCH_INHERITED = {\"\"\"\n@@ -80,1 +80,1 @@\n-     * Index entries for members declared in the superclass.\n+     * Index entries for members declared by the superclass.\n@@ -82,1 +82,1 @@\n-    private static final String[] INDEX_SUPERCLASS = {\"\"\"\n+    private static final String[] INDEX_DECLARED = {\"\"\"\n@@ -91,1 +91,1 @@\n-     * Search entries for members declared in the superclass.\n+     * Search entries for members declared by the superclass.\n@@ -93,1 +93,1 @@\n-    private static final String[] SEARCH_SUPERCLASS = {\"\"\"\n+    private static final String[] SEARCH_DECLARED = {\"\"\"\n@@ -98,1 +98,1 @@\n-     * The default constructor.\n+     * Sole constructor.\n@@ -110,2 +110,2 @@\n-        TestIndexInherited tester = new TestIndexInherited();\n-        tester.runTests(m -> new Object[]{Path.of(m.getName())});\n+        var tester = new TestIndexInherited();\n+        tester.runTests();\n@@ -115,1 +115,3 @@\n-     * Tests entries in the subclasses, loaded in alphabetical order.\n+     * Checks that the index includes the inherited members of both public\n+     * subclasses, loaded in alphabetical order, and that there is absolutely no\n+     * mention of the non-public superclass.\n@@ -117,1 +119,1 @@\n-     * @param base the base directory for test output\n+     * @param base the base directory for this method's output\n@@ -120,1 +122,1 @@\n-    public void testSubclasses1(Path base) {\n+    public void testForInherited1(Path base) {\n@@ -124,2 +126,2 @@\n-        checkOrder(INDEX_FILE, INDEX_SUBCLASSES);\n-        checkOrder(SEARCH_FILE, SEARCH_SUBCLASSES);\n+        checkOrder(INDEX_FILE, INDEX_INHERITED);\n+        checkOrder(SEARCH_FILE, SEARCH_INHERITED);\n@@ -131,1 +133,3 @@\n-     * Tests entries in the subclasses, loaded in reverse alphabetical order.\n+     * Checks that the index includes the inherited members of both public\n+     * subclasses, loaded in reverse alphabetical order, and that there is\n+     * absolutely no mention of the non-public superclass.\n@@ -133,1 +137,1 @@\n-     * @param base the base directory for test output\n+     * @param base the base directory for this method's output\n@@ -136,1 +140,1 @@\n-    public void testSubclasses2(Path base) {\n+    public void testForInherited2(Path base) {\n@@ -140,2 +144,2 @@\n-        checkOrder(INDEX_FILE, INDEX_SUBCLASSES);\n-        checkOrder(SEARCH_FILE, SEARCH_SUBCLASSES);\n+        checkOrder(INDEX_FILE, INDEX_INHERITED);\n+        checkOrder(SEARCH_FILE, SEARCH_INHERITED);\n@@ -147,1 +151,3 @@\n-     * Tests entries in the superclass.\n+     * Checks that the index includes the declared members of the non-public\n+     * superclass when the Javadoc <i>private<\/i> option is specified, and that\n+     * it no longer includes the inherited members of either public subclass.\n@@ -149,1 +155,1 @@\n-     * @param base the base directory for test output\n+     * @param base the base directory for this method's output\n@@ -152,1 +158,1 @@\n-    public void testSuperclass(Path base) {\n+    public void testForDeclared(Path base) {\n@@ -156,2 +162,4 @@\n-        checkOrder(INDEX_FILE, INDEX_SUPERCLASS);\n-        checkOrder(SEARCH_FILE, SEARCH_SUPERCLASS);\n+        checkOrder(INDEX_FILE, INDEX_DECLARED);\n+        checkOrder(SEARCH_FILE, SEARCH_DECLARED);\n+        checkOutput(INDEX_FILE, false, INDEX_INHERITED);\n+        checkOutput(SEARCH_FILE, false, SEARCH_INHERITED);\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndexInherited\/TestIndexInherited.java","additions":34,"deletions":26,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-     * The default constructor.\n+     * The sole constructor.\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndexInherited\/pkg1\/ClassB.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-     * The default constructor.\n+     * The sole constructor.\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndexInherited\/pkg2\/ClassC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}