{"files":[{"patch":"@@ -386,2 +386,2 @@\n-                Arrays.asList(SignatureScheme.values()) :\n-                config.signatureSchemes;\n+                    Arrays.asList(SignatureScheme.values()) :\n+                    config.signatureSchemes;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,3 +55,3 @@\n-    private final SSLEngine clientEngine;     \/\/ client Engine\n-    private final ByteBuffer clientOut;       \/\/ write side of clientEngine\n-    private final ByteBuffer clientIn;        \/\/ read side of clientEngine\n+    protected final SSLEngine clientEngine;     \/\/ client Engine\n+    protected final ByteBuffer clientOut;       \/\/ write side of clientEngine\n+    protected final ByteBuffer clientIn;        \/\/ read side of clientEngine\n@@ -59,3 +59,3 @@\n-    private final SSLEngine serverEngine;     \/\/ server Engine\n-    private final ByteBuffer serverOut;       \/\/ write side of serverEngine\n-    private final ByteBuffer serverIn;        \/\/ read side of serverEngine\n+    protected final SSLEngine serverEngine;     \/\/ server Engine\n+    protected final ByteBuffer serverOut;       \/\/ write side of serverEngine\n+    protected final ByteBuffer serverIn;        \/\/ read side of serverEngine\n@@ -66,2 +66,2 @@\n-    private final ByteBuffer cTOs;      \/\/ \"reliable\" transport client->server\n-    private final ByteBuffer sTOc;      \/\/ \"reliable\" transport server->client\n+    protected final ByteBuffer cTOs;      \/\/ \"reliable\" transport client->server\n+    protected final ByteBuffer sTOc;      \/\/ \"reliable\" transport server->client\n@@ -69,1 +69,1 @@\n-    private SSLEngineTemplate() throws Exception {\n+    protected SSLEngineTemplate() throws Exception {\n@@ -226,1 +226,1 @@\n-    private static void runDelegatedTasks(SSLEngine engine) throws Exception {\n+    protected static void runDelegatedTasks(SSLEngine engine) throws Exception {\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLEngineTemplate.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -39,0 +40,1 @@\n+import java.util.*;\n@@ -40,6 +42,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import javax.net.ssl.SSLContext;\n@@ -47,1 +43,0 @@\n-import javax.net.ssl.SSLEngineResult;\n@@ -50,1 +45,1 @@\n-public class SigSchemePropOrdering {\n+public class SigSchemePropOrdering extends SSLEngineTemplate {\n@@ -83,5 +78,0 @@\n-    \/\/ Other definitions we'll need for the test\n-    static String STOREPATH = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\/\";\n-    static String KSNAME = \"keystore\";\n-    static String TSNAME = \"truststore\";\n-    static String PASS = \"passphrase\";\n@@ -92,0 +82,4 @@\n+    SigSchemePropOrdering() throws Exception {\n+        super();\n+    }\n+\n@@ -93,6 +87,0 @@\n-        String basePath = System.getProperty(\"test.src\", \".\/\") + \"\/\" +\n-                STOREPATH + \"\/\";\n-        System.setProperty(\"javax.net.ssl.keyStore\", basePath + KSNAME);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", PASS);\n-        System.setProperty(\"javax.net.ssl.trustStore\", basePath + TSNAME);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", PASS);\n@@ -102,3 +90,1 @@\n-\n-        SSLContext sslc = SSLContext.getDefault();\n-        runHandshakeChkSigSchemes(sslc);\n+        new SigSchemePropOrdering().run();\n@@ -107,3 +93,6 @@\n-    private static void runHandshakeChkSigSchemes(SSLContext sslc)\n-            throws Exception {\n-        List<String> expectedSS = Arrays.asList(SIG_SCHEME_STR.split(\",\"));\n+    @Override\n+    protected SSLEngine configureClientEngine(SSLEngine clientEngine) {\n+        clientEngine.setUseClientMode(true);\n+        clientEngine.setEnabledProtocols(new String[] { \"TLSv1.2\" });\n+        return clientEngine;\n+    }\n@@ -111,16 +100,6 @@\n-        \/\/ Set up Client and Server Engines and buffers\n-        SSLEngine cliEng = sslc.createSSLEngine();\n-        SSLEngine servEng = sslc.createSSLEngine();\n-        cliEng.setUseClientMode(true);\n-        cliEng.setEnabledProtocols(new String[] { \"TLSv1.2\" });\n-        servEng.setUseClientMode(false);\n-        servEng.setWantClientAuth(true);\n-\n-        ByteBuffer cTOs = ByteBuffer.allocate(\n-                cliEng.getSession().getPacketBufferSize());\n-        ByteBuffer sTOc = ByteBuffer.allocate(\n-                servEng.getSession().getPacketBufferSize());\n-        ByteBuffer serverIn = ByteBuffer.allocate(\n-                servEng.getSession().getApplicationBufferSize());\n-        ByteBuffer cliDataBuf = ByteBuffer.wrap(\"ClientData\".getBytes());\n-        ByteBuffer servDataBuf = ByteBuffer.wrap(\"ServerData\".getBytes());\n+    @Override\n+    protected SSLEngine configureServerEngine(SSLEngine serverEngine) {\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setWantClientAuth(true);\n+        return serverEngine;\n+    }\n@@ -128,0 +107,1 @@\n+    private void run() throws Exception {\n@@ -131,1 +111,3 @@\n-        cliEng.wrap(cliDataBuf, cTOs);\n+        List<String> expectedSS = Arrays.asList(SIG_SCHEME_STR.split(\",\"));\n+\n+        clientEngine.wrap(clientOut, cTOs);\n@@ -154,2 +136,2 @@\n-        servEng.unwrap(cTOs, serverIn);\n-        runDelegatedTasks(servEng);\n+        serverEngine.unwrap(cTOs, serverIn);\n+        runDelegatedTasks(serverEngine);\n@@ -158,1 +140,1 @@\n-        servEng.wrap(servDataBuf, sTOc);\n+        serverEngine.wrap(serverOut, sTOc);\n@@ -179,19 +161,0 @@\n-    \/\/ If the result indicates that we have outstanding tasks to do,\n-    \/\/ go ahead and run them in this thread.\n-    private static void runDelegatedTasks(SSLEngine engine) throws Exception {\n-        if (engine.getHandshakeStatus() ==\n-                SSLEngineResult.HandshakeStatus.NEED_TASK) {\n-            Runnable runnable;\n-            while ((runnable = engine.getDelegatedTask()) != null) {\n-                System.out.println(\"    running delegated task...\");\n-                runnable.run();\n-            }\n-            SSLEngineResult.HandshakeStatus hsStatus =\n-                    engine.getHandshakeStatus();\n-            if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n-                throw new Exception(\n-                        \"handshake shouldn't need additional tasks\");\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigSchemePropOrdering.java","additions":27,"deletions":64,"binary":false,"changes":91,"status":"modified"}]}