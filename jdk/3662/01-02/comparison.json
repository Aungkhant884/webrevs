{"files":[{"patch":"@@ -131,1 +131,1 @@\n-  _storage_for_requests(nullptr), _buffer(nullptr), _index(0), _active(true)\n+  _storage_for_requests(nullptr), _buffer(nullptr), _index(0), _refill_failed(false)\n@@ -138,2 +138,6 @@\n-void StringDedup::Requests::add(oop java_string) {\n-  assert(is_enabled(), \"StringDedup not enabled\");\n+bool StringDedup::Requests::refill_buffer() {\n+  assert(_index == 0, \"precondition\");\n+  \/\/ Treat out of memory failure as sticky; don't keep retrying.\n+  if (_refill_failed) return false;\n+  \/\/ Lazy initialization of the requests object.  It can be common for\n+  \/\/ many of the marking threads to not encounter any candidates.\n@@ -141,4 +145,3 @@\n-  if (_index == 0) {\n-    if (!_active) return;\n-    \/\/ Lazy initialization of the requests object.  It can be common for\n-    \/\/ many of the marking threads to not encounter any candidates.\n+  if (_buffer == nullptr) {\n+    \/\/ Lazily allocate a buffer to hold pre-allocated storage entries.\n+    _buffer = NEW_C_HEAP_ARRAY_RETURN_NULL(oop*, buffer_size, mtStringDedup);\n@@ -146,21 +149,3 @@\n-      \/\/ Lazily allocate a buffer to hold pre-allocated storage entries.\n-      _buffer = NEW_C_HEAP_ARRAY_RETURN_NULL(oop*, buffer_size, mtStringDedup);\n-      if (_buffer == nullptr) {\n-        log_debug(stringdedup)(\"request failed to allocate buffer\");\n-        _active = false;\n-        return;\n-      }\n-      \/\/ Lazily obtain the storage object to use for requests.\n-      assert(_storage_for_requests == nullptr, \"invariant\");\n-      _storage_for_requests = Processor::storage_for_requests();\n-    }\n-    assert(_storage_for_requests != nullptr, \"invariant\");\n-    \/\/ Bulk pre-allocate some storage entries to satisfy this and future\n-    \/\/ requests.  This amortizes the cost of allocating entries over\n-    \/\/ multiple requests, and reduces contention on the storage object.\n-    _index = _storage_for_requests->storage()->allocate(_buffer, buffer_size);\n-    if (_index == 0) {\n-      log_debug(stringdedup)(\"request failed to allocate oopstorage entries\");\n-      flush();\n-      _active = false;\n-      return;\n+      log_debug(stringdedup)(\"request failed to allocate buffer\");\n+      _refill_failed = true;\n+      return false;\n@@ -168,0 +153,14 @@\n+    \/\/ Lazily obtain the storage object to use for requests.\n+    assert(_storage_for_requests == nullptr, \"invariant\");\n+    _storage_for_requests = Processor::storage_for_requests();\n+  }\n+  assert(_storage_for_requests != nullptr, \"invariant\");\n+  \/\/ Bulk pre-allocate some storage entries to satisfy this and future\n+  \/\/ requests.  This amortizes the cost of allocating entries over\n+  \/\/ multiple requests, and reduces contention on the storage object.\n+  _index = _storage_for_requests->storage()->allocate(_buffer, buffer_size);\n+  if (_index == 0) {\n+    log_debug(stringdedup)(\"request failed to allocate oopstorage entries\");\n+    flush();\n+    _refill_failed = true;\n+    return false;\n@@ -169,0 +168,6 @@\n+  return true;\n+}\n+\n+void StringDedup::Requests::add(oop java_string) {\n+  assert(is_enabled(), \"StringDedup not enabled\");\n+  if ((_index == 0) && !refill_buffer()) return;\n@@ -171,1 +176,0 @@\n-  _buffer[_index] = nullptr;\n@@ -190,1 +194,1 @@\n-  _active = true;\n+  _refill_failed = false;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-\/\/ normal GC discovery mechanism.  To prevent such modificatoins, the\n+\/\/ normal GC discovery mechanism.  To prevent such modifications, the\n@@ -150,1 +150,1 @@\n-  \/\/ StringTable requests for String deduplication.\n+  \/\/ Notify that a String is being added to the StringTable.\n@@ -156,1 +156,0 @@\n-  \/\/ precondition: is_enabled()\n@@ -193,1 +192,3 @@\n-  bool _active;\n+  bool _refill_failed;\n+\n+  bool refill_buffer();\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-StringDedup::Processor::~Processor() {}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  ~Processor();\n+  ~Processor() = default;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  void adjust_capacity(int new_length);\n+  void adjust_capacity(int new_capacity);\n@@ -295,1 +295,1 @@\n-  CleanupState() {}\n+  CleanupState() = default;\n@@ -314,1 +314,0 @@\n-  bool _grow_only;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1123,1 +1123,0 @@\n-  {\n@@ -1128,1 +1127,0 @@\n-  }\n@@ -1153,1 +1151,1 @@\n-  if (should_verify_subset(Verify_StringDedup) && StringDedup::is_enabled()) {\n+  if (should_verify_subset(Verify_StringDedup)) {\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}