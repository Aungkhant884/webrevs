{"files":[{"patch":"@@ -212,1 +212,1 @@\n-bool java_lang_String::set_flag(oop java_string, uint8_t flag_mask) {\n+bool java_lang_String::test_and_set_flag(oop java_string, uint8_t flag_mask) {\n@@ -219,1 +219,1 @@\n-    if (value == old_value) return true; \/\/ Flag bit changed to 1.\n+    if (value == old_value) return false; \/\/ Flag bit changed from 0 to 1.\n@@ -221,1 +221,1 @@\n-  return false;                 \/\/ Flag bit unchanged, already 1.\n+  return true;                  \/\/ Flag bit is already 1.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,0 +99,2 @@\n+\/\/ The flags field is a collection of bits representing boolean values used\n+\/\/ internally by the VM.\n@@ -116,1 +118,2 @@\n-  static const uint8_t _no_deduplication_mask = 1 << 0;\n+  \/\/ Bitmasks for values in the injected flags field.\n+  static const uint8_t _deduplication_forbidden_mask = 1 << 0;\n@@ -120,0 +123,1 @@\n+  \/\/ Return the address of the injected flags field.\n@@ -121,0 +125,1 @@\n+  \/\/ Test whether the designated bit of the injected flags field is set.\n@@ -122,1 +127,3 @@\n-  static bool set_flag(oop java_string, uint8_t flag_mask);\n+  \/\/ Atomically test and set the designated bit of the injected flags field,\n+  \/\/ returning true if the bit was already set.\n+  static bool test_and_set_flag(oop java_string, uint8_t flag_mask);\n@@ -152,5 +159,5 @@\n-  \/\/ Set the no_deduplication flag true.  This flag is sticky; once set it\n-  \/\/ never gets cleared.  This is set when a string is interned in the\n-  \/\/ StringTable, to prevent string deduplication from changing the string's\n-  \/\/ value array.\n-  static inline void set_no_deduplication(oop java_string);\n+  \/\/ Set the deduplication_forbidden flag true.  This flag is sticky; once\n+  \/\/ set it never gets cleared.  This is set when a String is interned in\n+  \/\/ the StringTable, to prevent string deduplication from changing the\n+  \/\/ String's value array.\n+  static inline void set_deduplication_forbidden(oop java_string);\n@@ -158,6 +165,6 @@\n-  \/\/ Test and set the deduplication_requested flag.  Returns true if the\n-  \/\/ flag's value is changed, false if it was already set.  This flag is\n-  \/\/ sticky; once set it never gets cleared.  A GC may use this operation to\n-  \/\/ determine whether to request deduplication of a string, avoiding\n-  \/\/ multiple requests for the same string.\n-  static inline bool set_deduplication_requested(oop java_string);\n+  \/\/ Test and set the deduplication_requested flag.  Returns the old value\n+  \/\/ of the flag.  This flag is sticky; once set it never gets cleared.\n+  \/\/ Some GCs may use this flag when deciding whether to request\n+  \/\/ deduplication of a String, to avoid multiple requests for the same\n+  \/\/ object.\n+  static inline bool test_and_set_deduplication_requested(oop java_string);\n@@ -170,1 +177,1 @@\n-  static inline bool no_deduplication(oop java_string);\n+  static inline bool deduplication_forbidden(oop java_string);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  assert(_initialized, \"Mut be initialized\");\n+  assert(_initialized, \"Must be initialized\");\n@@ -86,2 +86,2 @@\n-bool java_lang_String::no_deduplication(oop java_string) {\n-  return is_flag_set(java_string, _no_deduplication_mask);\n+bool java_lang_String::deduplication_forbidden(oop java_string) {\n+  return is_flag_set(java_string, _deduplication_forbidden_mask);\n@@ -94,2 +94,2 @@\n-void java_lang_String::set_no_deduplication(oop java_string) {\n-  set_flag(java_string, _no_deduplication_mask);\n+void java_lang_String::set_deduplication_forbidden(oop java_string) {\n+  test_and_set_flag(java_string, _deduplication_forbidden_mask);\n@@ -98,2 +98,2 @@\n-bool java_lang_String::set_deduplication_requested(oop java_string) {\n-  return set_flag(java_string, _deduplication_requested_mask);\n+bool java_lang_String::test_and_set_deduplication_requested(oop java_string) {\n+  return test_and_set_flag(java_string, _deduplication_requested_mask);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  \/\/ with compiler optimizations don on e.g. interned string literals.\n+  \/\/ with compiler optimizations done on e.g. interned string literals.\n@@ -740,1 +740,1 @@\n-  java_lang_String::set_no_deduplication(new_s);\n+  java_lang_String::set_deduplication_forbidden(new_s);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -490,1 +490,0 @@\n-  template(no_deduplication_name,                     \"no_deduplication\")                         \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  \/\/ underlying byte array changed, so mark it as no-deduplicate.  But we\n+  \/\/ underlying byte array changed, so mark it as not deduplicatable.  But we\n@@ -119,1 +119,1 @@\n-    java_lang_String::set_no_deduplication(java_string);\n+    java_lang_String::set_deduplication_forbidden(java_string);\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-\/\/ String deduplication aims to reduce the heap live-set by deduplicating\n-\/\/ identical instances of String so that they share the same backing byte\n-\/\/ array (the String's value).\n+\/\/ String deduplication aims to reduce the heap live-set by modifying equal\n+\/\/ instances of java.lang.String so they share the same backing byte array\n+\/\/ (the String's value).\n@@ -43,3 +43,2 @@\n-\/\/ phase which starts after marking is complete.  This phase is executed by\n-\/\/ the deduplication thread, which takes candidates from the set of requests\n-\/\/ and tries to deduplicate them.\n+\/\/ phase.  This phase is executed by the deduplication thread, which takes\n+\/\/ candidates from the set of requests and tries to deduplicate them.\n@@ -49,1 +48,1 @@\n-\/\/ see if there is already an identical byte array that was used by some\n+\/\/ see if there is already an equivalent byte array that was used by some\n@@ -66,8 +65,8 @@\n-\/\/ The table uses entries from another weak OopStorage to hold the byte\n-\/\/ arrays.  This permits reclamation of arrays that become unused.  This is\n-\/\/ separate from the request storage objects because dead count tracking is\n-\/\/ used by the table implementation as part of resizing decisions and for\n-\/\/ deciding when to cleanup dead entries in the table.  The usage pattern\n-\/\/ for the table is also very different from that of the request storages.\n-\/\/ The request\/processing storages are used in a way that supports bulk\n-\/\/ allocation and release of entries.\n+\/\/ The deduplication table uses entries from another weak OopStorage to hold\n+\/\/ the byte arrays.  This permits reclamation of arrays that become unused.\n+\/\/ This is separate from the request storage objects because dead count\n+\/\/ tracking is used by the table implementation as part of resizing\n+\/\/ decisions and for deciding when to cleanup dead entries in the table.\n+\/\/ The usage pattern for the table is also very different from that of the\n+\/\/ request storages.  The request\/processing storages are used in a way that\n+\/\/ supports bulk allocation and release of entries.\n@@ -83,5 +82,5 @@\n-\/\/ normal GC discovery mechanism.  This is handled by setting the\n-\/\/ no_deduplication flag in a string before interning it.  A string with\n-\/\/ that flag set may have its byte array added to the deduplication table,\n-\/\/ but will not have its byte array replaced by a different but equivalent\n-\/\/ array from the table.\n+\/\/ normal GC discovery mechanism.  To prevent such modificatoins, the\n+\/\/ deduplication_forbidden flag of a String is set before interning it.  A\n+\/\/ String with that flag set may have its byte array added to the\n+\/\/ deduplication table, but will not have its byte array replaced by a\n+\/\/ different but equivalent array from the table.\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -596,4 +596,4 @@\n-    \/\/ no-deduplication set; interning would have found the matching shared\n-    \/\/ string.  But if they have different coders but happen to have the\n-    \/\/ same sequence of bytes in their value arrays, then java_string could\n-    \/\/ have been interned and marked no-deduplicate.\n+    \/\/ deduplication_forbidden set; interning would have found the matching\n+    \/\/ shared string.  But if they have different coders but happen to have\n+    \/\/ the same sequence of bytes in their value arrays, then java_string\n+    \/\/ could have been interned and marked deduplication-forbidden.\n@@ -604,3 +604,4 @@\n-    \/\/ and java_string has been marked no-deduplicate, so is (being)\n-    \/\/ interned in the StringTable.  Return false to allow additional\n-    \/\/ processing that might still lead to some benefit for deduplication.\n+    \/\/ and java_string has been marked deduplication_forbidden, so is\n+    \/\/ (being) interned in the StringTable.  Return false to allow\n+    \/\/ additional processing that might still lead to some benefit for\n+    \/\/ deduplication.\n@@ -627,1 +628,1 @@\n-  if (java_lang_String::no_deduplication(java_string)) {\n+  if (java_lang_String::deduplication_forbidden(java_string)) {\n@@ -657,5 +658,5 @@\n-        \/\/ If string marked no-dedup then we can't update its value.\n-        \/\/ Instead, replace the array in the table with the new one, as\n-        \/\/ java_string is probably in the StringTable.  That makes it a good\n-        \/\/ target for future deduplications as it is probably intended to\n-        \/\/ live for some time.\n+        \/\/ If string marked deduplication_forbidden then we can't update its\n+        \/\/ value.  Instead, replace the array in the table with the new one,\n+        \/\/ as java_string is probably in the StringTable.  That makes it a\n+        \/\/ good target for future deduplications as it is probably intended\n+        \/\/ to live for some time.\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}