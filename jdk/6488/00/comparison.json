{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -826,1 +826,1 @@\n-            WeakHashMap.this.remove(currentKey);\n+            WeakHashMap.this.remove(lastReturned.get());\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+\/**\n+ * @test\n+ * @bug 8003417\n+ * @summary Verify that the Iterator returned by WeakHashMap removes the correct entry\n+ * when remove() is called on it\n+ * @run testng IteratorRemovalTest\n+ *\/\n+public class IteratorRemovalTest {\n+\n+    \/**\n+     * Creates a WeakHashMap and adds some entries to it. One of those entry has a null key.\n+     * Then uses the iterator returned by WeakHashMap.entrySet().iterator() to remove the\n+     * entry corresponding to the null key. The test then verifies that the correct entry\n+     * was removed and the rest of the entries continue to exist.\n+     *\/\n+    @Test\n+    public void testNullKeyRemoval() {\n+        Map<Integer, Integer> map = new WeakHashMap<>();\n+        map.put(null, 0);\n+        map.put(1, 1);\n+        map.put(2, 2);\n+        var iterator = map.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            var entry = iterator.next();\n+            if (entry.getKey() == null) {\n+                \/\/ remove the entry\n+                iterator.remove();\n+                \/\/ verify null key no longer exists in the map\n+                Assert.assertFalse(map.containsKey(null), \"null key unexpectedly exists in the map \" + map);\n+                Assert.assertNull(map.get(null), \"null key unexpectedly returned a value from map \" + map);\n+                \/\/ removal of non-existent entry must return null\n+                Assert.assertNull(map.remove(null), \"unexpected value present for null key from map \" + map);\n+                \/\/ verify the rest of the keys are present as expected\n+                Assert.assertEquals((Object) map.get(1), 1);\n+                Assert.assertEquals((Object) map.get(2), 2);\n+                return;\n+            }\n+        }\n+        Assert.fail(\"null key wasn't found while iterating over the WeakHashMap\");\n+    }\n+\n+    \/**\n+     * Creates a WeakHashMap and adds some entries to it. One of those entry has a null key.\n+     * Then uses the iterator returned by WeakHashMap.entrySet().iterator() to remove an\n+     * entry whose key isn't null. The test then verifies that the correct entry\n+     * was removed and the rest of the entries continue to exist.\n+     *\/\n+    @Test\n+    public void testNonNullKeyRemoval() {\n+        Map<Integer, Integer> map = new WeakHashMap<>();\n+        map.put(null, 0);\n+        map.put(1, 1);\n+        map.put(2, 2);\n+        var iterator = map.entrySet().iterator();\n+        Integer keyToRemove = 1;\n+        while (iterator.hasNext()) {\n+            var entry = iterator.next();\n+            if (keyToRemove.equals(entry.getKey())) {\n+                \/\/ remove the entry\n+                iterator.remove();\n+                \/\/ verify null key no longer exists in the map\n+                Assert.assertFalse(map.containsKey(keyToRemove), \"key \" + keyToRemove\n+                        + \" unexpectedly exists in the map \" + map);\n+                Assert.assertNull(map.get(keyToRemove), \"key \" + keyToRemove\n+                        + \" unexpectedly returned a value from the map \" + map);\n+                \/\/ removal of non-existent entry must return null\n+                Assert.assertNull(map.remove(keyToRemove),\n+                        \"unexpected value present for key \" + keyToRemove + \" in the map \" + map);\n+                \/\/ verify the rest of the keys are present as expected\n+                Assert.assertEquals((Object) map.get(null), 0);\n+                Assert.assertEquals((Object) map.get(2), 2);\n+                return;\n+            }\n+        }\n+        Assert.fail(\"key \" + keyToRemove + \" wasn't found while iterating over the WeakHashMap\");\n+    }\n+\n+    \/**\n+     * Creates multiple WeakHashMaps and adds some entries to it. Some of these entries have\n+     * a null key. The test then uses the iterator returned by WeakHashMap.entrySet().iterator()\n+     * to traverse till the end of the iterator and invokes the remove() method on the iterator\n+     * to remove the last returned entry. The test then verifies that the correct entry\n+     * was removed and the rest of the entries continue to exist.\n+     *\/\n+    @Test\n+    public void testLastEntryRemoval() {\n+        Map<Integer, Integer> mapWithoutNullKey = new WeakHashMap<>();\n+        mapWithoutNullKey.put(4, 4);\n+        mapWithoutNullKey.put(5, 5);\n+        mapWithoutNullKey.put(6, 6);\n+\n+        Map<Integer, Integer> mapWithNullKey = new WeakHashMap<>();\n+        mapWithNullKey.put(null, 0);\n+        mapWithNullKey.put(1, 1);\n+        mapWithNullKey.put(2, 2);\n+\n+        for (var map : Set.of(mapWithoutNullKey, mapWithNullKey)) {\n+            Set<Integer> keysBeforeRemoval = new HashSet<>(map.keySet());\n+            var iterator = map.entrySet().iterator();\n+            var lastEntry = iterateTillEnd(iterator);\n+            var expectedKeyToBeRemoved = lastEntry.getKey();\n+            \/\/ remove the last entry\n+            iterator.remove();\n+            \/\/ verify the correct entry was removed\n+            Assert.assertFalse(map.containsKey(expectedKeyToBeRemoved), \"key \" + expectedKeyToBeRemoved\n+                    + \" unexpectedly exists in the map \" + map);\n+            Assert.assertNull(map.get(expectedKeyToBeRemoved), \"key \" + expectedKeyToBeRemoved\n+                    + \" unexpectedly returned a value from the map \" + map);\n+            \/\/ removal of non-existent entry must return null\n+            Assert.assertNull(map.remove(expectedKeyToBeRemoved),\n+                    \"unexpected value present for key \" + expectedKeyToBeRemoved + \" from the map \" + map);\n+            \/\/ verify rest of the key\/values continue to exist\n+            keysBeforeRemoval.remove(expectedKeyToBeRemoved);\n+            for (var expectedKey : keysBeforeRemoval) {\n+                var expectedValue = expectedKey == null ? 0 : expectedKey;\n+                Assert.assertEquals((Object) map.get(expectedKey), expectedValue,\n+                        \"unexpected value for key \" + expectedKey + \" in the map \" + map);\n+            }\n+        }\n+    }\n+\n+    \/\/ iterates till the last entry and returns back the last entry\n+    private static <K, V> Map.Entry<K, V> iterateTillEnd(Iterator<Map.Entry<K, V>> it) {\n+        Map.Entry<K, V> entry = null;\n+        while (it.hasNext()) {\n+            entry = it.next();\n+        }\n+        return entry;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/WeakHashMap\/IteratorRemovalTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}