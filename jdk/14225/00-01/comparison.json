{"files":[{"patch":"@@ -369,4 +369,12 @@\n- * list or with an empty formal parameter list) are not supported directly by the native linker. However, it is still possible\n- * to link a variadic function by using a <em>specialized<\/em> function descriptor, together with a\n- * {@linkplain Linker.Option#firstVariadicArg(int) a linker option} which indicates the position of the first variadic argument\n- * in that specialized descriptor.\n+ * list or with an empty formal parameter list, the latter also being called <em>prototype-less<\/em>) are not supported\n+ * directly by the native linker. However, it is still possible to link a variadic function by using a <em>specialized<\/em>\n+ * function descriptor, together with {@linkplain Linker.Option#firstVariadicArg(int) a linker option} which indicates the\n+ * position of the first variadic argument in that specialized descriptor. The corresponding argument layout, and all following\n+ * argument layouts in the descriptor, are considered to be <em>variadic argument layouts<\/em>. These layouts correspond\n+ * to the arguments passed in place of the ellipsis {@code ...}, or to the arguments passed to a prototype-less function.\n+ * <p>\n+ * It should be noted that values passed as variadic arguments undergo default argument promotion in C. Each value of\n+ * type {@code float} is converted to {@code double}, and each integral type smaller than {@code int} is converted to\n+ * {@code int}. As such, the native linker will reject attempts to link function descriptors with certain variadic argument\n+ * layouts. Namely, {@linkplain ValueLayout value layouts} that have a carrier type of {@code boolean}, {@code byte},\n+ * {@code char}, {@code short}, or {@code float}, are not allowed to be used as variadic argument layouts.\n@@ -412,6 +420,0 @@\n- * <p>\n- * It should be noted that values passed as variadic arguments undergo default argument promotion in C. Each value of\n- * type {@code float} is converted to {@code double}, and each integral type smaller than {@code int} is converted to\n- * {@code int}. As such, the native linker will reject attempts to link a function with variadic parameters which have\n- * a carrier type of {@code float}, or an integral type smaller than {@code int} (including {@code boolean} and {@code char}).\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -381,7 +381,4 @@\n-\n-        INTEGRAL(int.class, C_INT, \"%d\", arena -> 42, 42),\n-        STRING(MemorySegment.class, C_POINTER, \"%s\", arena -> {\n-            return arena.allocateUtf8String(\"str\");\n-        }, \"str\"),\n-        CHAR(int.class, C_INT, \"%c\", arena -> (int) 'h', (int) 'h'), \/\/ promote to int, per C spec\n-        DOUBLE(double.class, C_DOUBLE, \"%.4f\", arena ->1.2345d, 1.2345d);\n+        INT(int.class, C_INT, \"%d\", arena -> 42, 42),\n+        LONG(long.class, C_LONG_LONG, \"%d\", arena -> 84L, 84L),\n+        DOUBLE(double.class, C_DOUBLE, \"%.4f\", arena -> 1.2345d, 1.2345d),\n+        STRING(MemorySegment.class, C_POINTER, \"%s\", arena -> arena.allocateUtf8String(\"str\"), \"str\");\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}