{"files":[{"patch":"@@ -368,7 +368,16 @@\n- * Variadic functions (e.g. a C function declared with a trailing ellipses {@code ...} at the end of the formal parameter\n- * list or with an empty formal parameter list, the latter also being called <em>prototype-less<\/em>) are not supported\n- * directly by the native linker. However, it is still possible to link a variadic function by using a <em>specialized<\/em>\n- * function descriptor, together with {@linkplain Linker.Option#firstVariadicArg(int) a linker option} which indicates the\n- * position of the first variadic argument in that specialized descriptor. The corresponding argument layout, and all following\n- * argument layouts in the descriptor, are considered to be <em>variadic argument layouts<\/em>. These layouts correspond\n- * to the arguments passed in place of the ellipsis {@code ...}, or to the arguments passed to a prototype-less function.\n+ * Variadic functions are C functions which can accept a variable number and type of arguments. They are declared:\n+ * <ol>\n+ * <li>With a trailing ellipsis ({@code ...}) at the end of the formal parameter list, such as: {@code void foo(int x, ...);}<\/li>\n+ * <li>With an empty formal parameter list, such as: {@code void foo();}<\/li>\n+ * <\/ol>\n+ * The latter is often called a <em>prototype-less<\/em> function as well. The arguments passed in place of the ellipsis,\n+ * or the arguments passed to a prototype-less function are called <em>variadic arguments<\/em>.\n+ * <p>\n+ * The native linker does not support linking variadic functions in a way where it is possible to pass an arbitrary set\n+ * of variadic arguments to the resulting method handle, since the linker needs to know the memory layouts of all the arguments\n+ * up front in order to complete the linking process. However, it is still possible to link a variadic function by using\n+ * a <em>specialized<\/em> function descriptor. A specialized function descriptor describes a variadic function with a fixed\n+ * number and type(s) of variadic arguments. The index of the first variadic argument in the argument list should be indicated\n+ * using the {@link Linker.Option#firstVariadicArg(int)} linker option. The corresponding argument layout, and all following\n+ * argument layouts in the specialized function descriptor, are called <em>variadic argument layouts<\/em>. For a\n+ * prototype-less function, the index passed to {@link Linker.Option#firstVariadicArg(int)} should always be {@code 0}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -148,5 +148,6 @@\n-                        && (vl.carrier() != long.class\n-                            && vl.carrier() != int.class\n-                            && vl.carrier() != double.class\n-                            && vl.carrier() != MemorySegment.class)) {\n-                    throw new IllegalArgumentException(\"Invalid variadic layout: \" + variadicLayout);\n+                        && (vl.carrier() == boolean.class\n+                            || vl.carrier() == byte.class\n+                            || vl.carrier() == char.class\n+                            || vl.carrier() == short.class\n+                            || vl.carrier() == float.class)) {\n+                    throw new IllegalArgumentException(\"Invalid variadic argument layout: \" + variadicLayout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-                \"Invalid variadic layout\"\n+                \"Invalid variadic argument layout\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}