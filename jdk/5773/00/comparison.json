{"files":[{"patch":"@@ -44,1 +44,1 @@\n- * @requires vm.gc != \"Z\"\n+ * @requires vm.gc != \"Z\" & vm.gc != \"Shenandoah\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestObjectDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.oldobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.internal.test.WhiteBox;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR & vm.gc.Shenandoah\n+ * @summary Test leak profiler with Shenandoah\n+ * @library \/test\/lib \/test\/jdk\n+ * @modules jdk.jfr\/jdk.jfr.internal.test\n+ * @run main\/othervm  -XX:TLABSize=2k -XX:+UseShenandoahGC jdk.jfr.event.oldobject.TestShenandoah\n+ *\/\n+public class TestShenandoah {\n+\n+    static private class FindMe {\n+    }\n+\n+    public static List<FindMe[]> list = new ArrayList<>(OldObjects.MIN_SIZE);\n+\n+    public static void main(String[] args) throws Exception {\n+        WhiteBox.setWriteAllObjectSamples(true);\n+\n+        while (true) {\n+            try (Recording r = new Recording()) {\n+                r.enable(EventNames.OldObjectSample).withStackTrace().with(\"cutoff\", \"infinity\");\n+                r.start();\n+                allocateFindMe();\n+                System.gc();\n+                r.stop();\n+                List<RecordedEvent> events = Events.fromRecording(r);\n+                System.out.println(events);\n+                if (OldObjects.countMatchingEvents(events, FindMe[].class, null, null, -1, \"allocateFindMe\") > 0) {\n+                    return;\n+                }\n+                System.out.println(\"Could not find leaking object, retrying...\");\n+            }\n+            list.clear();\n+        }\n+    }\n+\n+    public static void allocateFindMe() {\n+        for (int i = 0; i < OldObjects.MIN_SIZE; i++) {\n+            \/\/ Allocate array to trigger sampling code path for interpreter \/ c1\n+            list.add(new FindMe[0]);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestShenandoah.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}