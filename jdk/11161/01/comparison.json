{"files":[{"patch":"@@ -60,2 +60,2 @@\n-GrowableArrayNestingCheck::GrowableArrayNestingCheck(bool on_stack) :\n-    _nesting(on_stack ? Thread::current()->resource_area()->nesting() : 0) {\n+GrowableArrayNestingCheck::GrowableArrayNestingCheck(bool on_resource_area) :\n+    _nesting(on_resource_area ? Thread::current()->resource_area()->nesting() : 0) {\n@@ -64,1 +64,1 @@\n-void GrowableArrayNestingCheck::on_stack_alloc() const {\n+void GrowableArrayNestingCheck::on_resource_area_alloc() const {\n@@ -82,1 +82,1 @@\n-  assert(on_stack() == array->allocated_on_res_area(),\n+  assert(on_resource_area() == array->allocated_on_res_area(),\n@@ -88,2 +88,2 @@\n-void GrowableArrayMetadata::on_stack_alloc_check() const {\n-  _nesting_check.on_stack_alloc();\n+void GrowableArrayMetadata::on_resource_area_alloc_check() const {\n+  _nesting_check.on_resource_area_alloc();\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-  GrowableArrayNestingCheck(bool on_stack);\n+  GrowableArrayNestingCheck(bool on_resource_area);\n@@ -589,1 +589,1 @@\n-  void on_stack_alloc() const;\n+  void on_resource_area_alloc() const;\n@@ -602,5 +602,4 @@\n-  uintptr_t bits(MEMFLAGS memflags) const {\n-    if (memflags == mtNone) {\n-      \/\/ Stack allocation\n-      return 0;\n-    }\n+  \/\/ Resource allocation\n+  static uintptr_t bits() {\n+    return 0;\n+  }\n@@ -608,1 +607,3 @@\n-    \/\/ CHeap allocation\n+  \/\/ CHeap allocation\n+  static uintptr_t bits(MEMFLAGS memflags) {\n+    assert(memflags != mtNone, \"Must provide a proper MEMFLAGS\");\n@@ -612,1 +613,3 @@\n-  uintptr_t bits(Arena* arena) const {\n+  \/\/ Arena allocation\n+  static uintptr_t bits(Arena* arena) {\n+    assert((uintptr_t(arena) & 1) == 0, \"Required for on_C_heap() to work\");\n@@ -617,0 +620,7 @@\n+  \/\/ Resource allocation\n+  GrowableArrayMetadata() :\n+      _bits(bits())\n+      debug_only(COMMA _nesting_check(true)) {\n+  }\n+\n+  \/\/ Arena allocation\n@@ -619,1 +629,1 @@\n-      debug_only(COMMA _nesting_check(on_stack())) {\n+      debug_only(COMMA _nesting_check(false)) {\n@@ -622,0 +632,1 @@\n+  \/\/ CHeap allocation\n@@ -624,1 +635,1 @@\n-      debug_only(COMMA _nesting_check(on_stack())) {\n+      debug_only(COMMA _nesting_check(false)) {\n@@ -644,1 +655,1 @@\n-  void on_stack_alloc_check() const;\n+  void on_resource_area_alloc_check() const;\n@@ -647,3 +658,3 @@\n-  bool on_C_heap() const { return (_bits & 1) == 1; }\n-  bool on_stack () const { return _bits == 0;      }\n-  bool on_arena () const { return (_bits & 1) == 0 && _bits != 0; }\n+  bool on_C_heap() const        { return (_bits & 1) == 1; }\n+  bool on_resource_area() const { return _bits == 0; }\n+  bool on_arena() const         { return (_bits & 1) == 0 && _bits != 0; }\n@@ -658,2 +669,2 @@\n-\/\/  - Resource stack allocation: if memflags == mtNone\n-\/\/  - CHeap allocation: if memflags != mtNone\n+\/\/  - Resource stack allocation: if no extra argument is provided\n+\/\/  - CHeap allocation: if memflags is provided\n@@ -682,5 +693,1 @@\n-    if (memflags != mtNone) {\n-      return (E*)GrowableArrayCHeapAllocator::allocate(max, sizeof(E), memflags);\n-    }\n-\n-    return (E*)GrowableArrayResourceAllocator::allocate(max, sizeof(E));\n+    return (E*)GrowableArrayCHeapAllocator::allocate(max, sizeof(E), memflags);\n@@ -698,3 +705,3 @@\n-  bool on_C_heap() const { return _metadata.on_C_heap(); }\n-  bool on_stack () const { return _metadata.on_stack(); }\n-  bool on_arena () const { return _metadata.on_arena(); }\n+  bool on_C_heap() const        { return _metadata.on_C_heap(); }\n+  bool on_resource_area() const { return _metadata.on_resource_area(); }\n+  bool on_arena() const         { return _metadata.on_arena(); }\n@@ -703,2 +710,2 @@\n-    if (on_stack()) {\n-      debug_only(_metadata.on_stack_alloc_check());\n+    if (on_resource_area()) {\n+      debug_only(_metadata.on_resource_area_alloc_check());\n@@ -723,1 +730,11 @@\n-  GrowableArray(int initial_capacity = 2, MEMFLAGS memflags = mtNone) :\n+  GrowableArray() : GrowableArray(2 \/* initial_capacity *\/) {}\n+\n+  explicit GrowableArray(int initial_capacity) :\n+      GrowableArrayWithAllocator<E, GrowableArray<E> >(\n+          allocate(initial_capacity),\n+          initial_capacity),\n+      _metadata() {\n+    init_checks();\n+  }\n+\n+  GrowableArray(int initial_capacity, MEMFLAGS memflags) :\n@@ -731,1 +748,9 @@\n-  GrowableArray(int initial_capacity, int initial_len, const E& filler, MEMFLAGS memflags = mtNone) :\n+  GrowableArray(int initial_capacity, int initial_len, const E& filler) :\n+      GrowableArrayWithAllocator<E, GrowableArray<E> >(\n+          allocate(initial_capacity),\n+          initial_capacity, initial_len, filler),\n+      _metadata() {\n+    init_checks();\n+  }\n+\n+  GrowableArray(int initial_capacity, int initial_len, const E& filler, MEMFLAGS memflags) :\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":54,"deletions":29,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-  static bool elements_on_stack(const GrowableArray<E>* array) {\n-    return array->on_stack();\n+  static bool elements_on_resource_area(const GrowableArray<E>* array) {\n+    return array->on_resource_area();\n@@ -474,1 +474,1 @@\n-    ASSERT_TRUE(elements_on_stack(a));\n+    ASSERT_TRUE(elements_on_resource_area(a));\n@@ -502,1 +502,1 @@\n-    ASSERT_TRUE(elements_on_stack(&a));\n+    ASSERT_TRUE(elements_on_resource_area(&a));\n@@ -525,1 +525,1 @@\n-    ASSERT_TRUE(elements_on_stack(&w._a));\n+    ASSERT_TRUE(elements_on_resource_area(&w._a));\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}