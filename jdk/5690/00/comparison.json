{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Arrays;\n@@ -118,33 +119,3 @@\n-    static class ModuleGraphAttributes implements ModuleDotGraph.Attributes {\n-        static Map<String, String> DEFAULT_ATTRIBUTES = Map.of(\n-            \"ranksep\", \"0.6\",\n-            \"fontsize\", \"12\",\n-            \"fontcolor\", BLACK,\n-            \"fontname\", \"DejaVuSans\",\n-            \"arrowsize\", \"1\",\n-            \"arrowwidth\", \"2\",\n-            \"arrowcolor\", DARK_GRAY,\n-            \/\/ custom\n-            \"requiresMandatedColor\", LIGHT_GRAY,\n-            \"javaSubgraphColor\", ORANGE,\n-            \"jdkSubgraphColor\", BLUE\n-        );\n-\n-        final Map<String, Integer> weights = new HashMap<>();\n-        final List<Set<String>> ranks = new ArrayList<>();\n-        final Map<String, String> attrs;\n-        ModuleGraphAttributes(Map<String, String> attrs) {\n-            int h = 1000;\n-            weight(\"java.se\", \"java.sql.rowset\", h * 10);\n-            weight(\"java.sql.rowset\", \"java.sql\", h * 10);\n-            weight(\"java.sql\", \"java.xml\", h * 10);\n-            weight(\"java.xml\", \"java.base\", h * 10);\n-\n-            ranks.add(Set.of(\"java.logging\", \"java.scripting\", \"java.xml\"));\n-            ranks.add(Set.of(\"java.sql\"));\n-            ranks.add(Set.of(\"java.transaction.xa\"));\n-            ranks.add(Set.of(\"java.compiler\", \"java.instrument\"));\n-            ranks.add(Set.of(\"java.desktop\", \"java.management\"));\n-\n-            this.attrs = attrs;\n-        }\n+    static class ModuleGraphAttributes extends ModuleDotGraph.DotGraphAttributes {\n+        final Properties attrs;\n+        final Map<String, Integer> weights;\n@@ -153,2 +124,2 @@\n-            this(DEFAULT_ATTRIBUTES);\n-        }\n+            this(new Properties());\n+        };\n@@ -156,1 +127,8 @@\n-            this(toAttributes(props));\n+            this.attrs = props;\n+            this.weights = initWeights(props);\n+        }\n+\n+        @Override\n+        public double nodeSep() {\n+            String v = attrs.getProperty(\"nodesep\");\n+            return v != null ? Double.valueOf(v) : super.nodeSep();\n@@ -161,1 +139,2 @@\n-            return Double.valueOf(attrs.get(\"ranksep\"));\n+            String v = attrs.getProperty(\"ranksep\");\n+            return v != null ? Double.valueOf(v) : super.rankSep();\n@@ -166,1 +145,2 @@\n-            return Integer.valueOf(attrs.get(\"fontsize\"));\n+            String v = attrs.getProperty(\"fontsize\");\n+            return v != null ? Integer.valueOf(v) : super.fontSize();\n@@ -171,1 +151,2 @@\n-            return attrs.get(\"fontname\");\n+            String v = attrs.getProperty(\"fontname\");\n+            return v != null ? v : super.fontName();\n@@ -176,1 +157,2 @@\n-            return attrs.get(\"fontcolor\");\n+            String v = attrs.getProperty(\"fontcolor\");\n+            return v != null ? v : super.fontColor();\n@@ -181,1 +163,2 @@\n-            return Integer.valueOf(attrs.get(\"arrowsize\"));\n+            String v = attrs.getProperty(\"arrowsize\");\n+            return v != null ? Integer.valueOf(v) : super.arrowSize();\n@@ -186,1 +169,2 @@\n-            return Integer.valueOf(attrs.get(\"arrowwidth\"));\n+            String v = attrs.getProperty(\"arrowwidth\");\n+            return v != null ? Integer.valueOf(v) : super.arrowWidth();\n@@ -191,1 +175,2 @@\n-            return attrs.get(\"arrowcolor\");\n+            String v = attrs.getProperty(\"arrowcolor\");\n+            return v != null ? v : super.arrowColor();\n@@ -196,1 +181,6 @@\n-            return ranks;\n+            return attrs.stringPropertyNames().stream()\n+                        .filter(k -> k.startsWith(\"ranks.\"))\n+                        .sorted()\n+                        .map(k -> Arrays.stream(attrs.getProperty(k).split(\",\"))\n+                                        .collect(Collectors.toSet()))\n+                        .toList();\n@@ -201,1 +191,2 @@\n-            return attrs.get(\"requiresMandatedColor\");\n+            String v = attrs.getProperty(\"requiresMandatedColor\");\n+            return v != null ? v : super.requiresMandatedColor();\n@@ -206,1 +197,2 @@\n-            return attrs.get(\"javaSubgraphColor\");\n+            String v = attrs.getProperty(\"javaSubgraphColor\");\n+            return v != null ? v : super.javaSubgraphColor();\n@@ -211,1 +203,8 @@\n-            return attrs.get(\"jdkSubgraphColor\");\n+            String v = attrs.getProperty(\"jdkSubgraphColor\");\n+            return v != null ? v : super.jdkSubgraphColor();\n+        }\n+\n+        @Override\n+        public String nodeMargin() {\n+            String v = attrs.getProperty(\"node-margin\");\n+            return v != null ? v : super.nodeMargin();\n@@ -214,0 +213,12 @@\n+        @Override\n+        public String requiresStyle() {\n+            String v = attrs.getProperty(\"requiresStyle\");\n+            return v != null ? v : super.requiresStyle();\n+        };\n+\n+        @Override\n+        public String requiresTransitiveStyle() {\n+            String v = attrs.getProperty(\"requiresTransitiveStyle\");\n+            return v != null ? v : super.requiresTransitiveStyle();\n+        };\n+\n@@ -224,8 +235,19 @@\n-        public void weight(String s, String t, int w) {\n-            weights.put(s + \":\" + t, w);\n-        }\n-\n-        static Map<String, String> toAttributes(Properties props) {\n-            return DEFAULT_ATTRIBUTES.keySet().stream()\n-                .collect(Collectors.toMap(Function.identity(),\n-                    k -> props.getProperty(k, DEFAULT_ATTRIBUTES.get(k))));\n+        \/*\n+         * Create a map of <mn>:<dep> with a weight trying to line up\n+         * the modules in the weights property in the specified order.\n+         *\/\n+        public static Map<String, Integer> initWeights(Properties props) {\n+            String[] modules = props.getProperty(\"weights\", \"\").split(\",\");\n+            int len = modules.length;\n+            if (len == 0) return Map.of();\n+\n+            Map<String, Integer> weights = new HashMap<>();\n+            String mn = modules[0];\n+            int w = 10000;\n+            for (int i = 1; i < len; i++) {\n+                String dep = modules[i];\n+                weights.put(mn + \":\" + dep, w);\n+                mn = dep;\n+            }\n+            weights.put(mn + \":java.base\", w);\n+            return weights;\n","filename":"make\/jdk\/src\/classes\/build\/tools\/jigsaw\/GenGraphs.java","additions":77,"deletions":55,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -0,0 +1,12 @@\n+# Configuration file for build.tools.jigsaw.GenGraphs\n+\n+nodesep=.5\n+node-margin=.2,.2\n+ranksep=0.6\n+fontsize=12\n+fontcolor=#000000\n+fontname=DejaVuSans\n+arrowsize=1\n+arrowwidth=2\n+\n+# requires edge: gray\n@@ -2,1 +14,22 @@\n-requiresMandatedColor=#999999\n+\n+# requires mandated java.base edge: light gray\n+requiresMandatedColor=#dddddd\n+\n+requiresTransitiveStyle=\n+requiresStyle=dashed\n+\n+# java.* modules: orange\n+javaSubgraphColor=#e76f00\n+\n+# jdk.* modules: blue\n+jdkSubgraphColor=#437291\n+\n+# configure the group of modules in the same rank\n+ranks.1=java.logging,java.scripting,java.xml\n+ranks.2=java.sql\n+ranks.4=java.compiler,java.instrument\n+ranks.5=java.desktop,java.management\n+\n+# configure the edges A -> B -> C .... with the same weight\n+# that should get these modules lined in a straight line\n+weights=java.se,java.sql.rowset,java.sql,java.xml\n","filename":"make\/jdk\/src\/classes\/build\/tools\/jigsaw\/javadoc-graphs.properties","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-        static final String DARK_GRAY = \"#999999\";\n+        static final String DARK_GRAY = \"#a9a9a9\";\n@@ -211,0 +211,4 @@\n+        default double nodeSep() {\n+            return 0.5;\n+        }\n+\n@@ -212,1 +216,1 @@\n-            return 1;\n+            return 0.6;\n@@ -234,0 +238,6 @@\n+\n+        default String nodeMargin() { return \".2, .2\"; }\n+\n+        default String requiresStyle() { return \"dashed\"; };\n+\n+        default String requiresTransitiveStyle() { return \"\"; };\n@@ -236,1 +246,1 @@\n-    static class DotGraphAttributes implements Attributes {\n+    public static class DotGraphAttributes implements Attributes {\n@@ -276,3 +286,0 @@\n-        static final String REEXPORTS = \"\";\n-        static final String REQUIRES = \"style=\\\"dashed\\\"\";\n-\n@@ -350,1 +357,1 @@\n-                out.format(\"  nodesep=.5;%n\");\n+                out.format(\"  nodesep=%f;%n\", attributes.nodeSep());\n@@ -354,1 +361,1 @@\n-                                + \" fontsize=%d, margin=\\\".2,.2\\\"];%n\",\n+                                + \" fontsize=%d, margin=\\\"%s\\\"];%n\",\n@@ -357,1 +364,2 @@\n-                           attributes.fontSize());\n+                           attributes.fontSize(),\n+                           attributes.nodeMargin());\n@@ -410,1 +418,1 @@\n-                String attr;\n+                String attr = \"\";\n@@ -414,1 +422,5 @@\n-                    attr = (requiresTransitive.contains(dn) ? REEXPORTS : REQUIRES);\n+                    String style = requiresTransitive.contains(dn) ? attributes.requiresTransitiveStyle()\n+                                                                   : attributes.requiresStyle();\n+                    if (!style.isEmpty()) {\n+                        attr = \"style=\\\"\" + style + \"\\\"\";\n+                    }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/ModuleDotGraph.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"}]}