{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import jdk.jfr.internal.util.Utils;\n@@ -36,0 +35,1 @@\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -60,1 +60,1 @@\n-        return getTyped(Utils.FIELD_STACK_TRACE, RecordedStackTrace.class, null);\n+        return getTyped(ImplicitFields.STACK_TRACE, RecordedStackTrace.class, null);\n@@ -70,1 +70,1 @@\n-        return getTyped(Utils.FIELD_EVENT_THREAD, RecordedThread.class, null);\n+        return getTyped(ImplicitFields.EVENT_THREAD, RecordedThread.class, null);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedEvent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-public abstract class AbstractBufferStatisticsEvent extends AbstractJDKEvent {\n+public abstract class AbstractBufferStatisticsEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/AbstractBufferStatisticsEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.internal.RemoveFields;\n+\n+@RemoveFields({\"duration\", \"eventThread\", \"stackTrace\"})\n+abstract class AbstractPeriodicEvent extends AbstractJDKEvent {\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/AbstractPeriodicEvent.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -41,0 +42,1 @@\n+@RemoveFields({\"duration\", \"eventThread\", \"stackTrace\"})\n@@ -82,1 +84,1 @@\n-    public static void commit(long timestamp, long duration, long id, String name,\n+    public static void commit(long timestamp, long id, String name,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ActiveRecordingEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -38,0 +39,1 @@\n+@RemoveFields({\"duration\", \"eventThread\", \"stackTrace\"})\n@@ -52,1 +54,1 @@\n-    public static void commit(long startTime, long duration, long id, String name, String value) {\n+    public static void commit(long startTime, long id, String name, String value) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ActiveSettingEvent.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-public class ContainerCPUThrottlingEvent extends AbstractJDKEvent {\n+public class ContainerCPUThrottlingEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUThrottlingEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-public class ContainerCPUUsageEvent extends AbstractJDKEvent {\n+public class ContainerCPUUsageEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUUsageEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-public final class ContainerConfigurationEvent extends AbstractJDKEvent {\n+public final class ContainerConfigurationEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-public class ContainerIOUsageEvent extends AbstractJDKEvent {\n+public class ContainerIOUsageEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerIOUsageEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-public final class ContainerMemoryUsageEvent extends AbstractJDKEvent {\n+public final class ContainerMemoryUsageEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerMemoryUsageEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -39,0 +40,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/DeserializationEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -37,0 +38,1 @@\n+@RemoveFields(\"duration\")\n@@ -48,1 +50,1 @@\n-    public static void commit(long start, long duration, String message, Class<? extends Error> thrownClass) {\n+    public static void commit(long start, String message, Class<? extends Error> thrownClass) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ErrorThrownEvent.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-public final class ExceptionStatisticsEvent extends AbstractJDKEvent {\n+public final class ExceptionStatisticsEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ExceptionStatisticsEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -38,0 +39,1 @@\n+@RemoveFields(\"duration\")\n@@ -49,1 +51,1 @@\n-    public static void commit(long start, long duration, String message, Class<? extends Throwable> thrownClass) {\n+    public static void commit(long start, String message, Class<? extends Throwable> thrownClass) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ExceptionThrownEvent.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-public final class InitialSecurityPropertyEvent extends AbstractJDKEvent {\n+public final class InitialSecurityPropertyEvent extends AbstractPeriodicEvent {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/InitialSecurityPropertyEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -39,0 +40,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ProcessStartEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -36,0 +37,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SecurityPropertyModificationEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -39,0 +40,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SecurityProviderServiceEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -40,0 +41,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/TLSHandshakeEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -37,0 +38,1 @@\n+@RemoveFields({\"duration\", \"stackTrace\"})\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/VirtualThreadEndEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -37,0 +38,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/VirtualThreadStartEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -39,0 +40,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/VirtualThreadSubmitFailedEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -36,0 +37,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/X509CertificateEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -36,0 +37,1 @@\n+@RemoveFields(\"duration\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/X509ValidationEvent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        if (eventType.hasDuration()) {\n+        if (eventType.hasThreshold()) {\n@@ -292,1 +292,1 @@\n-                    ActiveSettingEvent.commit(timestamp, 0L, type.getId(), nc.name(), value);\n+                    ActiveSettingEvent.commit(timestamp, type.getId(), nc.name(), value);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.jfr.Event;\n@@ -63,0 +64,1 @@\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -80,1 +82,1 @@\n-    private static final FieldDesc FIELD_DURATION = FieldDesc.of(long.class, Utils.FIELD_DURATION);\n+    private static final FieldDesc FIELD_DURATION = FieldDesc.of(long.class, ImplicitFields.DURATION);\n@@ -82,1 +84,1 @@\n-    private static final FieldDesc FIELD_START_TIME = FieldDesc.of(long.class, Utils.FIELD_START_TIME);\n+    private static final FieldDesc FIELD_START_TIME = FieldDesc.of(long.class, ImplicitFields.START_TIME);\n@@ -86,0 +88,1 @@\n+    private static final ClassDesc ANNOTATION_REMOVE_FIELDS = classDesc(RemoveFields.class);\n@@ -87,0 +90,1 @@\n+    private static final ClassDesc TYPE_ISE = Bytecode.classDesc(IllegalStateException.class);\n@@ -89,0 +93,1 @@\n+    private static final ClassDesc TYPE_MIRROR_EVENT = Bytecode.classDesc(MirrorEvent.class);\n@@ -109,0 +114,1 @@\n+    private final String className;\n@@ -116,0 +122,1 @@\n+    private final ImplicitFields implicitFields;\n@@ -120,0 +127,1 @@\n+        this.isJDK = isJDK;\n@@ -121,0 +129,4 @@\n+        this.className = classModel.thisClass().asInternalName().replace(\"\/\", \".\");\n+        String name = annotationValue(classModel, ANNOTATION_NAME, String.class);\n+        this.eventName = name == null ? className : name;\n+        this.implicitFields = determineImplicitFields();\n@@ -123,2 +135,0 @@\n-        String n = annotationValue(classModel, ANNOTATION_NAME, String.class);\n-        this.eventName = n == null ? classModel.thisClass().asInternalName().replace(\"\/\", \".\") : n;\n@@ -133,1 +143,17 @@\n-        this.isJDK = isJDK;\n+    }\n+\n+    private ImplicitFields determineImplicitFields() {\n+        if (isJDK) {\n+            \/\/ For now, only support mirror events in java.base\n+            String fullName = \"java.base:\" + className;\n+            Class<?> eventClass = MirrorEvents.find(fullName);\n+            if (eventClass != null) {\n+                return new ImplicitFields(eventClass);\n+            }\n+        }\n+        ImplicitFields ifs = new ImplicitFields(superClass);\n+        String[] value = annotationValue(classModel, ANNOTATION_REMOVE_FIELDS, String[].class);\n+        if (value != null) {\n+            ifs.removeFields(value);\n+        }\n+        return ifs;\n@@ -198,0 +224,14 @@\n+    boolean isMirrorEvent() {\n+        String typeDescriptor = TYPE_MIRROR_EVENT.descriptorString();\n+        for (ClassElement ce : classModel.elements()) {\n+            if (ce instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n+                for (var annotation : rvaa.annotations()) {\n+                    if (annotation.className().equalsString(typeDescriptor)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -199,1 +239,1 @@\n-    \/\/ Only supports String and Boolean values\n+    \/\/ Only supports String, String[] and Boolean values\n@@ -217,0 +257,10 @@\n+                                if (ae.value() instanceof AnnotationValue.OfArray ofa && type.equals(String[].class)) {\n+                                    List<AnnotationValue> list = ofa.values();\n+                                    String[] array = new String[list.size()];\n+                                    int index = 0;\n+                                    for (AnnotationValue av : list) {\n+                                        var avs = (AnnotationValue.OfString)av;\n+                                        array[index++] = avs.stringValue();\n+                                    }\n+                                    return (T)array;\n+                                }\n@@ -290,1 +340,1 @@\n-    private static List<FieldDesc> buildFieldDescs(Class<?> superClass, ClassModel classModel) {\n+    private List<FieldDesc> buildFieldDescs(Class<?> superClass, ClassModel classModel) {\n@@ -300,1 +350,3 @@\n-        fieldDescs.add(FIELD_DURATION);\n+        if (implicitFields.hasDuration()) {\n+            fieldDescs.add(FIELD_DURATION);\n+        }\n@@ -371,0 +423,5 @@\n+    private void throwMissingDuration(CodeBuilder codeBuilder, String method) {\n+        String message = \"Cannot use method \" + method + \" when event lacks duration field\";\n+        Bytecode.throwException(codeBuilder, TYPE_ISE, message);\n+    }\n+\n@@ -377,4 +434,8 @@\n-            codeBuilder.aload(0);\n-            invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n-            putfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n-            codeBuilder.return_();\n+            if (!implicitFields.hasDuration()) {\n+                throwMissingDuration(codeBuilder, \"begin\");\n+            } else {\n+                codeBuilder.aload(0);\n+                invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n+                putfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n+                codeBuilder.return_();\n+            }\n@@ -385,6 +446,10 @@\n-            codeBuilder.aload(0);\n-            codeBuilder.aload(0);\n-            getfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n-            invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_DURATION);\n-            putfield(codeBuilder, getEventClassDesc(), FIELD_DURATION);\n-            codeBuilder.return_();\n+            if (!implicitFields.hasDuration()) {\n+                throwMissingDuration(codeBuilder, \"end\");\n+            } else {\n+                codeBuilder.aload(0);\n+                codeBuilder.aload(0);\n+                getfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n+                invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_DURATION);\n+                putfield(codeBuilder, getEventClassDesc(), FIELD_DURATION);\n+                codeBuilder.return_();\n+            }\n@@ -532,1 +597,0 @@\n-        \/\/ stack: [EW]\n@@ -534,8 +598,0 @@\n-        \/\/ write duration\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW], [EW]\n-        tk = TypeKind.from(argumentTypes[argIndex++]);\n-        blockCodeBuilder.loadInstruction(tk, slotIndex);\n-        \/\/ stack: [EW], [EW], [long]\n-        slotIndex += tk.slotSize();\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_LONG.method());\n@@ -543,5 +599,11 @@\n-        fieldIndex++;\n-        \/\/ write eventThread\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW], [EW]\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_EVENT_THREAD.method());\n+        if (implicitFields.hasDuration()) {\n+            \/\/ write duration\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW], [EW]\n+            tk = TypeKind.from(argumentTypes[argIndex++]);\n+            blockCodeBuilder.loadInstruction(tk, slotIndex);\n+            \/\/ stack: [EW], [EW], [long]\n+            slotIndex += tk.slotSize();\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_LONG.method());\n+            fieldIndex++;\n+        }\n@@ -549,4 +611,13 @@\n-        \/\/ write stackTrace\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW], [EW]\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_STACK_TRACE.method());\n+        if (implicitFields.hasEventThread()) {\n+            \/\/ write eventThread\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW], [EW]\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_EVENT_THREAD.method());\n+        }\n+        \/\/ stack: [EW]\n+        if (implicitFields.hasStackTrace()) {\n+            \/\/ write stackTrace\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW], [EW]\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_STACK_TRACE.method());\n+        }\n@@ -637,1 +708,0 @@\n-        \/\/ stack: [EW]\n@@ -639,7 +709,0 @@\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW] [EW]\n-        blockCodeBuilder.aload(0);\n-        \/\/ stack: [EW] [EW] [this]\n-        getfield(blockCodeBuilder, getEventClassDesc(), FIELD_DURATION);\n-        \/\/ stack: [EW] [EW] [long]\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_LONG.method());\n@@ -647,4 +710,11 @@\n-        fieldIndex++;\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW] [EW]\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_EVENT_THREAD.method());\n+        if (implicitFields.hasDuration()) {\n+            \/\/ write duration\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW] [EW]\n+            blockCodeBuilder.aload(0);\n+            \/\/ stack: [EW] [EW] [this]\n+            getfield(blockCodeBuilder, getEventClassDesc(), FIELD_DURATION);\n+            \/\/ stack: [EW] [EW] [long]\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_LONG.method());\n+            fieldIndex++;\n+        }\n@@ -652,3 +722,13 @@\n-        blockCodeBuilder.dup();\n-        \/\/ stack: [EW] [EW]\n-        invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_STACK_TRACE.method());\n+        if (implicitFields.hasEventThread()) {\n+            \/\/ write eventThread\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW] [EW]\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_EVENT_THREAD.method());\n+        }\n+        \/\/ stack: [EW]\n+        if (implicitFields.hasStackTrace()) {\n+            \/\/ write stack trace\n+            blockCodeBuilder.dup();\n+            \/\/ stack: [EW] [EW]\n+            invokevirtual(blockCodeBuilder, TYPE_EVENT_WRITER, EventWriterMethod.PUT_STACK_TRACE.method());\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":131,"deletions":51,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import jdk.jfr.internal.util.Utils;\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -72,1 +72,1 @@\n-        if (field.name().equals(Utils.FIELD_EVENT_THREAD)) {\n+        if (field.name().equals(ImplicitFields.EVENT_THREAD)) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriterMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,0 +115,4 @@\n+            if (ei.isMirrorEvent()) {\n+                return oldBytes;\n+            }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.HashMap;\n@@ -61,1 +60,0 @@\n-    private final Map<String, Class<? extends Event>> mirrors = new HashMap<>();\n@@ -76,2 +74,0 @@\n-                pEventType.setHasDuration(eventType.getAnnotation(Threshold.class) != null);\n-                pEventType.setHasStackTrace(eventType.getAnnotation(StackTrace.class) != null);\n@@ -166,1 +162,1 @@\n-        Class<? extends Event> mirrorClass = mirrors.get(fullName);\n+        Class<? extends Event> mirrorClass = MirrorEvents.find(fullName);\n@@ -339,10 +335,0 @@\n-    public synchronized void registerMirror(Class<? extends Event> eventClass) {\n-        MirrorEvent me = eventClass.getAnnotation(MirrorEvent.class);\n-        if (me != null) {\n-            String fullName = me.module() + \":\" + me.className();\n-            mirrors.put(fullName, eventClass);\n-            return;\n-        }\n-        throw new InternalError(\"Mirror class must have annotation \" + MirrorEvent.class.getName());\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,4 @@\n-\n+\/**\n+ * Any event class annotated with this annotation must be added\n+ * to the {@link MirrorEvents) class for it to take effect.\n+ *\/\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvent.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.events.DeserializationEvent;\n+import jdk.jfr.events.ProcessStartEvent;\n+import jdk.jfr.events.SecurityPropertyModificationEvent;\n+import jdk.jfr.events.SecurityProviderServiceEvent;\n+import jdk.jfr.events.SocketReadEvent;\n+import jdk.jfr.events.SocketWriteEvent;\n+import jdk.jfr.events.TLSHandshakeEvent;\n+import jdk.jfr.events.ThreadSleepEvent;\n+import jdk.jfr.events.VirtualThreadEndEvent;\n+import jdk.jfr.events.VirtualThreadPinnedEvent;\n+import jdk.jfr.events.VirtualThreadStartEvent;\n+import jdk.jfr.events.VirtualThreadSubmitFailedEvent;\n+import jdk.jfr.events.X509CertificateEvent;\n+import jdk.jfr.events.X509ValidationEvent;\n+\n+public final class MirrorEvents {\n+    private static final Class<?>[] mirrorEventClasses = {\n+        DeserializationEvent.class,\n+        ProcessStartEvent.class,\n+        SecurityPropertyModificationEvent.class,\n+        SecurityProviderServiceEvent.class,\n+        SocketReadEvent.class,\n+        SocketWriteEvent.class,\n+        ThreadSleepEvent.class,\n+        TLSHandshakeEvent.class,\n+        VirtualThreadStartEvent.class,\n+        VirtualThreadEndEvent.class,\n+        VirtualThreadPinnedEvent.class,\n+        VirtualThreadSubmitFailedEvent.class,\n+        X509CertificateEvent.class,\n+        X509ValidationEvent.class\n+    };\n+\n+    private static final Map<String, Class<? extends Event>> mirrorLookup = createLookup();\n+\n+    public static Class<? extends Event> find(String name) {\n+        \/\/ When <clinit> of this class is executed it may lead\n+        \/\/ to a JVM up call and invocation of this method before\n+        \/\/ the mirrorLookup field has been set. This is fine,\n+        \/\/ mirrors should not be instrumented.\n+        if (mirrorLookup != null) {\n+            return mirrorLookup.get(name);\n+        }\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static Map<String, Class<? extends Event>> createLookup() {\n+        Map<String, Class<? extends Event>> mirrors = new HashMap<>();\n+        for (Class<?> eventClass : mirrorEventClasses) {\n+            MirrorEvent me = eventClass.getAnnotation(MirrorEvent.class);\n+            if (me == null) {\n+                throw new InternalError(\"Mirror class must have annotation \" + MirrorEvent.class.getName());\n+            }\n+            String fullName = me.module() + \":\" + me.className();\n+            mirrors.put(fullName, (Class<? extends Event>) eventClass);\n+        }\n+        return mirrors;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -59,2 +60,0 @@\n-    private boolean hasStackTrace = true;\n-    private boolean hasDuration = true;\n@@ -134,8 +133,0 @@\n-    public void setHasStackTrace(boolean hasStackTrace) {\n-        this.hasStackTrace = hasStackTrace;\n-    }\n-\n-    public void setHasDuration(boolean hasDuration) {\n-        this.hasDuration = hasDuration;\n-    }\n-\n@@ -168,1 +159,1 @@\n-        return this.hasStackTrace;\n+        return getField(ImplicitFields.STACK_TRACE) != null;\n@@ -171,2 +162,6 @@\n-    public boolean hasDuration() {\n-        return this.hasDuration;\n+    public boolean hasThreshold() {\n+        if (hasCutoff) {\n+            \/\/ Event has a duration, but not a threshold. Used by OldObjectSample\n+            return false;\n+        }\n+        return getField(ImplicitFields.DURATION) != null;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -485,1 +485,0 @@\n-                        0L,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * Annotation that can remove the fields \"duration\", \"eventThread\" and\n+ * \"stackTrace\".\n+ * <p>\n+ * Example usage:\n+ * {@snippet :\n+ *   @RemoveFields({{\"duration\", \"stackTrace\"}\n+ *   class NonThreadEvent extends Event {\n+ *   }\n+ * }\n+ *\n+ * <p>\n+ * Calling Event::begin() or Event:end() on an event without a duration field\n+ * will result in an {@code IllegalStateException}\n+ **\/\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+public @interface RemoveFields {\n+    String[] value() default {};\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RemoveFields.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -337,4 +337,0 @@\n-    public static void registerMirror(Class<? extends Event> eventClass) {\n-        doPrivileged(() ->  MetadataRepository.getInstance().registerMirror(eventClass), new FlightRecorderPermission(REGISTER_EVENT));\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -79,2 +80,2 @@\n-        return PrivateAccess.getInstance().newValueDescriptor(Utils.FIELD_START_TIME, Type.LONG, annos, 0, false,\n-                Utils.FIELD_START_TIME);\n+        return PrivateAccess.getInstance().newValueDescriptor(ImplicitFields.START_TIME, Type.LONG, annos, 0, false,\n+                ImplicitFields.START_TIME);\n@@ -85,2 +86,2 @@\n-        return PrivateAccess.getInstance().newValueDescriptor(Utils.FIELD_STACK_TRACE, Type.STACK_TRACE, annos, 0, true,\n-                Utils.FIELD_STACK_TRACE);\n+        return PrivateAccess.getInstance().newValueDescriptor(ImplicitFields.STACK_TRACE, Type.STACK_TRACE, annos, 0, true,\n+                ImplicitFields.STACK_TRACE);\n@@ -91,2 +92,2 @@\n-        return PrivateAccess.getInstance().newValueDescriptor(Utils.FIELD_EVENT_THREAD, Type.THREAD, annos, 0, true,\n-                Utils.FIELD_EVENT_THREAD);\n+        return PrivateAccess.getInstance().newValueDescriptor(ImplicitFields.EVENT_THREAD, Type.THREAD, annos, 0, true,\n+                ImplicitFields.EVENT_THREAD);\n@@ -98,1 +99,1 @@\n-        return PrivateAccess.getInstance().newValueDescriptor(Utils.FIELD_DURATION, Type.LONG, annos, 0, false, Utils.FIELD_DURATION);\n+        return PrivateAccess.getInstance().newValueDescriptor(ImplicitFields.DURATION, Type.LONG, annos, 0, false, ImplicitFields.DURATION);\n@@ -269,1 +270,2 @@\n-            addImplicitFields(type, true, true, true, true ,false);\n+            ImplicitFields ifs = new ImplicitFields(clazz);\n+            addImplicitFields(type, true, ifs.hasDuration(), ifs.hasEventThread(), ifs.hasStackTrace(), false);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/TypeLibrary.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import static jdk.jfr.internal.util.Utils.FIELD_DURATION;\n+import static jdk.jfr.internal.util.ImplicitFields.DURATION;\n@@ -68,1 +68,1 @@\n-        this.hasDuration = type.getField(FIELD_DURATION) != null;\n+        this.hasDuration = type.getField(DURATION) != null;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventParser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import jdk.jfr.events.DeserializationEvent;\n@@ -50,3 +49,0 @@\n-import jdk.jfr.events.ProcessStartEvent;\n-import jdk.jfr.events.SecurityPropertyModificationEvent;\n-import jdk.jfr.events.SecurityProviderServiceEvent;\n@@ -55,8 +51,1 @@\n-import jdk.jfr.events.TLSHandshakeEvent;\n-import jdk.jfr.events.ThreadSleepEvent;\n-import jdk.jfr.events.VirtualThreadStartEvent;\n-import jdk.jfr.events.VirtualThreadEndEvent;\n-import jdk.jfr.events.VirtualThreadPinnedEvent;\n-import jdk.jfr.events.VirtualThreadSubmitFailedEvent;\n-import jdk.jfr.events.X509CertificateEvent;\n-import jdk.jfr.events.X509ValidationEvent;\n+\n@@ -73,16 +62,0 @@\n-    private static final Class<?>[] mirrorEventClasses = {\n-        DeserializationEvent.class,\n-        ProcessStartEvent.class,\n-        SecurityPropertyModificationEvent.class,\n-        SecurityProviderServiceEvent.class,\n-        SocketReadEvent.class,\n-        SocketWriteEvent.class,\n-        ThreadSleepEvent.class,\n-        TLSHandshakeEvent.class,\n-        VirtualThreadStartEvent.class,\n-        VirtualThreadEndEvent.class,\n-        VirtualThreadPinnedEvent.class,\n-        VirtualThreadSubmitFailedEvent.class,\n-        X509CertificateEvent.class,\n-        X509ValidationEvent.class\n-    };\n@@ -101,0 +74,2 @@\n+        \/\/ jdk.internal.event.* classes need their mirror\n+        \/\/ event class to be listed in the MirrorEvents class.\n@@ -115,1 +90,0 @@\n-\n@@ -144,3 +118,0 @@\n-                for (Class<?> mirrorEventClass : mirrorEventClasses) {\n-                    SecuritySupport.registerMirror(((Class<? extends Event>)mirrorEventClass));\n-                }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-            ErrorThrownEvent.commit(timestamp, 0L, message, e.getClass());\n+            ErrorThrownEvent.commit(timestamp, message, e.getClass());\n@@ -51,1 +51,1 @@\n-            ExceptionThrownEvent.commit(timestamp, 0L, message, e.getClass());\n+            ExceptionThrownEvent.commit(timestamp, message, e.getClass());\n@@ -60,1 +60,1 @@\n-            ExceptionThrownEvent.commit(timestamp, 0L, message, t.getClass());\n+            ExceptionThrownEvent.commit(timestamp, message, t.getClass());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ThrowableTracer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.jfr.internal.RemoveFields;\n+\/**\n+ * Class that describes fields that was not directly named\n+ * in the event definition.\n+ *\/\n+public final class ImplicitFields {\n+    public static final String START_TIME = \"startTime\";\n+    public static final String DURATION = \"duration\";\n+    public static final String EVENT_THREAD = \"eventThread\";\n+    public static final String STACK_TRACE = \"stackTrace\";\n+\n+    private final List<String> fields = new ArrayList<>(4);\n+\n+    public ImplicitFields(Class<?> eventClass) {\n+        fields.add(START_TIME); \/\/ for completeness, not really needed\n+        fields.add(DURATION);\n+        fields.add(STACK_TRACE);\n+        fields.add(EVENT_THREAD);\n+        for (Class<?> c = eventClass; jdk.internal.event.Event.class != c; c = c.getSuperclass()) {\n+            RemoveFields rf = c.getAnnotation(RemoveFields.class);\n+            if (rf != null) {\n+                for (String value : rf.value()) {\n+                    fields.remove(value);\n+                }\n+            }\n+        }\n+    }\n+    public void removeFields(String... fieldNames) {\n+        for (String fieldName : fieldNames) {\n+            fields.remove(fieldName);\n+        }\n+    }\n+\n+    public boolean hasDuration() {\n+        return fields.contains(DURATION);\n+    }\n+\n+    public boolean hasEventThread() {\n+        return fields.contains(EVENT_THREAD);\n+    }\n+\n+    public boolean hasStackTrace() {\n+        return fields.contains(STACK_TRACE);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/ImplicitFields.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -59,5 +59,0 @@\n-    public static final String FIELD_DURATION = \"duration\";\n-    public static final String FIELD_STACK_TRACE = \"stackTrace\";\n-    public static final String FIELD_START_TIME = \"startTime\";\n-    public static final String FIELD_EVENT_THREAD = \"eventThread\";\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Utils.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,3 +97,3 @@\n-        testSetting(EventNames.ActiveRecording, \"enabled\", \"threshold\", \"stackTrace\");\n-        testSetting(EventNames.ActiveSetting, \"enabled\", \"threshold\", \"stackTrace\");\n-        testSetting(EventNames.JavaExceptionThrow, \"enabled\", \"threshold\", \"stackTrace\");\n+        testSetting(EventNames.ActiveRecording, \"enabled\");\n+        testSetting(EventNames.ActiveSetting, \"enabled\");\n+        testSetting(EventNames.JavaExceptionThrow, \"enabled\", \"stackTrace\");\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/settings\/TestSettingsAvailability.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,21 +165,0 @@\n-        \/\/ Don't want to add these settings to the jfc-files we ship since they\n-        \/\/ are not useful to configure. They are however needed to make the test\n-        \/\/ pass.\n-        insertSetting(doc, EventNames.ActiveSetting, \"stackTrace\", \"false\");\n-        insertSetting(doc, EventNames.ActiveSetting, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.ActiveRecording, \"stackTrace\", \"false\");\n-        insertSetting(doc, EventNames.ActiveRecording, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.JavaExceptionThrow, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.JavaErrorThrow, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.SecurityProperty, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.SecurityProviderService, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.TLSHandshake, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.X509Certificate, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.X509Validation, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.ProcessStart, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.Deserialization, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.VirtualThreadStart, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.VirtualThreadEnd, \"threshold\", \"0 ns\");\n-        insertSetting(doc, EventNames.VirtualThreadEnd, \"stackTrace\", \"false\");\n-        insertSetting(doc, EventNames.VirtualThreadSubmitFailed, \"threshold\", \"0 ns\");\n-\n@@ -189,14 +168,0 @@\n-    private static void insertSetting(Document doc, String eventName, String settingName, String settingValue) {\n-        for (Element event : getChildElements(doc.getDocumentElement(), \"event\")) {\n-            Attr attribute = event.getAttributeNode(\"name\");\n-            if (attribute != null) {\n-                if (eventName.equals(attribute.getValue())) {\n-                    Element setting = doc.createElement(\"setting\");\n-                    setting.setAttribute(\"name\", settingName);\n-                    setting.setTextContent(settingValue);\n-                    event.appendChild(setting);\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestDefaultConfigurations.java","additions":1,"deletions":36,"binary":false,"changes":37,"status":"modified"}]}