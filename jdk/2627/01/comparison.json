{"files":[{"patch":"@@ -151,6 +151,0 @@\n-    private static int getChars(String s, char[] chars, int start) {\n-        int len = s.length();\n-        s.getChars(0, len, chars, start);\n-        return len;\n-    }\n-\n@@ -173,3 +167,5 @@\n-        if (addLen == 0) {\n-            compactElts();\n-            return size == 0 ? \"\" : elts[0];\n+        if (size == 0) {\n+            if (addLen == 0) {\n+                return \"\";\n+            }\n+            return prefix + suffix;\n@@ -178,2 +174,1 @@\n-        final char[] chars = new char[len + addLen];\n-        int k = getChars(prefix, chars, 0);\n+        StringBuilder sb = new StringBuilder(len + addLen).append(prefix);\n@@ -181,1 +176,1 @@\n-            k += getChars(elts[0], chars, k);\n+            sb.append(elts[0]);\n@@ -183,2 +178,1 @@\n-                k += getChars(delimiter, chars, k);\n-                k += getChars(elts[i], chars, k);\n+                sb.append(delimiter).append(elts[i]);\n@@ -187,2 +181,1 @@\n-        k += getChars(suffix, chars, k);\n-        return new String(chars);\n+        return sb.append(suffix).toString();\n@@ -252,2 +245,2 @@\n-            final char[] chars = new char[len];\n-            int i = 1, k = getChars(elts[0], chars, 0);\n+            StringBuilder sb = new StringBuilder(len).append(elts[0]);\n+            int i = 1;\n@@ -255,2 +248,1 @@\n-                k += getChars(delimiter, chars, k);\n-                k += getChars(elts[i], chars, k);\n+                sb.append(delimiter).append(elts[i]);\n@@ -260,1 +252,1 @@\n-            elts[0] = new String(chars);\n+            elts[0] = sb.toString();\n","filename":"src\/java.base\/share\/classes\/java\/util\/StringJoiner.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Trivial String concatenation benchmark.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(jvmArgsAppend = {\"-Xms2g\", \"-Xmx2g\"})\n+public class StringJoinerBenchmark {\n+\n+    @Benchmark\n+    public String stringJoiner(Data data) {\n+        String[] stringArray = data.stringArray;\n+        return Joiner.joinWithStringJoiner(stringArray);\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class Data {\n+\n+        @Param({\"latin\", \"cyrillic\", \"mixed\"})\n+        private String mode;\n+\n+        @Param({\"8\", \"32\", \"64\"})\n+        private int length;\n+\n+        @Param({\"5\", \"10\", \"100\"})\n+        private int count;\n+\n+        private String[] stringArray;\n+\n+        @Setup\n+        public void setup() {\n+            stringArray = new String[count];\n+\n+            for (int i = 0; i < count; i++) {\n+                String alphabet = getAlphabet(i, mode);\n+                stringArray[i] = randomString(alphabet, length);\n+            }\n+        }\n+\n+        private String randomString(String alphabet, int length) {\n+            var tl = ThreadLocalRandom.current();\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 0; i < length; i++) {\n+                sb.append(alphabet.charAt(tl.nextInt(alphabet.length())));\n+            }\n+            return sb.toString();\n+        }\n+\n+        private static String getAlphabet(int index, String mode) {\n+            var latin = \"abcdefghijklmnopqrstuvwxyz\"; \/\/English\n+            StringBuilder sb = new StringBuilder();\n+            latin.codePoints().forEach(cp -> sb.append(cp - 'a' + '\\u0430'));\n+            var cyrillic = sb.toString(); \/\/ Russian (partial, matching length of latin alphabet)\n+\n+            String alphabet;\n+            switch (mode) {\n+                case \"mixed\" -> alphabet = index % 2 == 0 ? cyrillic : latin;\n+                case \"latin\" -> alphabet = latin;\n+                case \"cyrillic\" -> alphabet = cyrillic;\n+                default -> throw new RuntimeException(\"Illegal mode \" + mode);\n+            }\n+            return alphabet;\n+        }\n+    }\n+}\n+\n+class Joiner {\n+    public static String joinWithStringJoiner(String[] stringArray) {\n+        StringJoiner joiner = new StringJoiner(\",\", \"[\", \"]\");\n+        for (String str : stringArray) {\n+            joiner.add(str);\n+        }\n+        return joiner.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/StringJoinerBenchmark.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}