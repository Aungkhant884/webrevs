{"files":[{"patch":"@@ -44,0 +44,1 @@\n+  \/\/ The committed (old-gen heap) virtual space this object-start-array covers.\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -648,2 +648,4 @@\n-  VirtualSpaceSummary old_summary(old->reserved().start(), old_committed_end, old->reserved().end());\n-  SpaceSummary old_space(old->reserved().start(), old_committed_end, old->used_in_bytes());\n+  HeapWord* old_reserved_start = old->reserved().start();\n+  HeapWord* old_reserved_end = old->reserved().end();\n+  VirtualSpaceSummary old_summary(old_reserved_start, old_committed_end, old_reserved_end);\n+  SpaceSummary old_space(old_reserved_start, old_committed_end, old->used_in_bytes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,4 +53,0 @@\n-  \/\/ The old gen can grow to max_gen_size().  _reserve reflects only\n-  \/\/ the current maximum that can be committed.\n-  assert(_reserved.byte_size() <= max_gen_size(), \"Consistency check\");\n-\n@@ -72,11 +68,2 @@\n-  \/\/\n-  \/\/ Basic memory initialization\n-  \/\/\n-\n-  MemRegion limit_reserved((HeapWord*)virtual_space()->low_boundary(),\n-                           heap_word_size(max_gen_size()));\n-  assert(limit_reserved.byte_size() == max_gen_size(),\n-    \"word vs bytes confusion\");\n-  \/\/\n-  \/\/ Object start stuff\n-  \/\/\n+  MemRegion const reserved_mr = reserved();\n+  assert(reserved_mr.byte_size() == max_gen_size(), \"invariant\");\n@@ -84,1 +71,2 @@\n-  start_array()->initialize(limit_reserved);\n+  \/\/ Object start stuff: for all reserved memory\n+  start_array()->initialize(reserved_mr);\n@@ -86,2 +74,3 @@\n-  _reserved = MemRegion((HeapWord*)virtual_space()->low_boundary(),\n-                        (HeapWord*)virtual_space()->high_boundary());\n+  \/\/ Card table stuff: for all committed memory\n+  MemRegion committed_mr((HeapWord*)virtual_space()->low(),\n+                         (HeapWord*)virtual_space()->high());\n@@ -89,6 +78,0 @@\n-  \/\/\n-  \/\/ Card table stuff\n-  \/\/\n-\n-  MemRegion cmr((HeapWord*)virtual_space()->low(),\n-                (HeapWord*)virtual_space()->high());\n@@ -101,1 +84,1 @@\n-    SpaceMangler::mangle_region(cmr);\n+    SpaceMangler::mangle_region(committed_mr);\n@@ -106,1 +89,1 @@\n-  ct->resize_covered_region(cmr);\n+  ct->resize_covered_region(committed_mr);\n@@ -112,6 +95,4 @@\n-  guarantee(ct->is_card_aligned(_reserved.start()), \"generation must be card aligned\");\n-  if (_reserved.end() != heap->reserved_region().end()) {\n-    \/\/ Don't check at the very end of the heap as we'll assert that we're probing off\n-    \/\/ the end if we try.\n-    guarantee(ct->is_card_aligned(_reserved.end()), \"generation must be card aligned\");\n-  }\n+  guarantee(ct->is_card_aligned(reserved_mr.start()), \"generation must be card aligned\");\n+  \/\/ Check the heap layout documented at `class ParallelScavengeHeap`.\n+  assert(reserved_mr.end() != heap->reserved_region().end(), \"invariant\");\n+  guarantee(ct->is_card_aligned(reserved_mr.end()), \"generation must be card aligned\");\n@@ -124,1 +105,1 @@\n-  object_space()->initialize(cmr,\n+  object_space()->initialize(committed_mr,\n@@ -131,1 +112,1 @@\n-  start_array()->set_covered_region(cmr);\n+  start_array()->set_covered_region(committed_mr);\n@@ -317,1 +298,0 @@\n-  assert(max_gen_size() >= reserved().byte_size(), \"max new size problem?\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":15,"deletions":35,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-\n@@ -39,1 +38,0 @@\n-  MemRegion                _reserved;          \/\/ Used for simple containment tests\n@@ -102,1 +100,5 @@\n-  MemRegion reserved() const { return _reserved; }\n+  MemRegion reserved() const {\n+    return MemRegion((HeapWord*)(_virtual_space->low_boundary()),\n+                     (HeapWord*)(_virtual_space->high_boundary()));\n+  }\n+\n@@ -107,1 +109,1 @@\n-    return _virtual_space->contains((void *)p);\n+    return _virtual_space->is_in_committed((void *)p);\n@@ -111,1 +113,1 @@\n-    return reserved().contains(p);\n+    return _virtual_space->is_in_reserved(p);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1044,1 +1044,1 @@\n-    ct->clear(MemRegion(old_mr.start(), old_mr.end()));\n+    ct->clear(old_mr);\n@@ -1046,1 +1046,1 @@\n-    ct->invalidate(MemRegion(old_mr.start(), old_mr.end()));\n+    ct->invalidate(old_mr);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,5 +69,0 @@\n-bool PSVirtualSpace::contains(void* p) const {\n-  char* const cp = (char*)p;\n-  return cp >= committed_low_addr() && cp < committed_high_addr();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,1 +78,7 @@\n-  bool contains(void* p)      const;\n+  bool is_in_committed(const void* p) const {\n+    return (p >= committed_low_addr()) && (p < committed_high_addr());\n+  }\n+\n+  bool is_in_reserved(const void* p) const {\n+    return (p >= reserved_low_addr()) && (p < reserved_high_addr());\n+  }\n@@ -88,0 +94,1 @@\n+  \/\/ Return size in bytes\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    return _virtual_space->contains((void *)p);\n+    return _virtual_space->is_in_committed(p);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-  nonstatic_field(PSOldGen,                    _reserved,                                     MemRegion)                             \\\n","filename":"src\/hotspot\/share\/gc\/parallel\/vmStructs_parallelgc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}