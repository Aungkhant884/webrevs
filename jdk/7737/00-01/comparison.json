{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -37,1 +39,0 @@\n-import jdk.test.lib.Utils;\n@@ -39,2 +40,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -46,1 +47,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/\n@@ -50,1 +51,1 @@\n- * @run testng\/othervm -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorFusedMultiplyAddSubTest\n+ * @run driver compiler.vectorapi.VectorFusedMultiplyAddSubTest\n@@ -61,1 +62,0 @@\n-    private static final int NUM_ITER = 1000;\n@@ -91,1 +91,1 @@\n-    private static void init() {\n+    static {\n@@ -168,1 +168,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -170,1 +170,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -178,1 +178,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -180,1 +180,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -188,1 +188,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -190,1 +190,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -198,1 +198,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -200,1 +200,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -208,1 +208,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -210,1 +210,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -218,1 +218,1 @@\n-               Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n@@ -220,1 +220,1 @@\n-               Assert.assertEquals(r[i], a[i]);\n+               Asserts.assertEquals(a[i], r[i]);\n@@ -225,1 +225,3 @@\n-    private static void testByteMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_add\", \"sve_mul\" })\n+    public static void testByteMultiplyAddMasked() {\n@@ -236,1 +238,3 @@\n-    private static void testByteMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_sub\", \"sve_mul\" })\n+    public static void testByteMultiplySubMasked() {\n@@ -247,1 +251,3 @@\n-    private static void testShortMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_add\", \"sve_mul\" })\n+    public static void testShortMultiplyAddMasked() {\n@@ -258,1 +264,3 @@\n-    private static void testShortMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_sub\", \"sve_mul\" })\n+    public static void testShortMultiplySubMasked() {\n@@ -269,1 +277,3 @@\n-    private static void testIntMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_add\", \"sve_mul\" })\n+    public static void testIntMultiplyAddMasked() {\n@@ -280,1 +290,3 @@\n-    private static void testIntMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_sub\", \"sve_mul\" })\n+    public static void testIntMultiplySubMasked() {\n@@ -291,1 +303,3 @@\n-    private static void testLongMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_add\", \"sve_mul\" })\n+    public static void testLongMultiplyAddMasked() {\n@@ -302,1 +316,3 @@\n-    private static void testLongMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_sub\", \"sve_mul\" })\n+    public static void testLongMultiplySubMasked() {\n@@ -313,1 +329,3 @@\n-    private static void testFloatMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testFloatMultiplySubMasked() {\n@@ -324,1 +342,3 @@\n-    private static void testFloatNegatedMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testFloatNegatedMultiplyAddMasked() {\n@@ -335,1 +355,3 @@\n-    private static void testFloatNegatedMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testFloatNegatedMultiplySubMasked() {\n@@ -346,1 +368,3 @@\n-    private static void testDoubleMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testDoubleMultiplySubMasked() {\n@@ -357,1 +381,3 @@\n-    private static void testDoubleNegatedMultiplyAddMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testDoubleNegatedMultiplyAddMasked() {\n@@ -368,1 +394,3 @@\n-    private static void testDoubleNegatedMultiplySubMasked() {\n+    @Test\n+    @IR(failOn = { \"sve_fneg\", \"sve_fmad\" })\n+    public static void testDoubleNegatedMultiplySubMasked() {\n@@ -379,30 +407,2 @@\n-    @Test\n-    public static void test() {\n-        init();\n-        for (int i = 0; i < NUM_ITER; i++) {\n-            \/\/ byte\n-            testByteMultiplyAddMasked();\n-            testByteMultiplySubMasked();\n-\n-            \/\/ short\n-            testShortMultiplyAddMasked();\n-            testShortMultiplySubMasked();\n-\n-            \/\/ int\n-            testIntMultiplyAddMasked();\n-            testIntMultiplySubMasked();\n-\n-            \/\/ long\n-            testLongMultiplyAddMasked();\n-            testLongMultiplySubMasked();\n-\n-            \/\/ float\n-            testFloatMultiplySubMasked();\n-            testFloatNegatedMultiplyAddMasked();\n-            testFloatNegatedMultiplySubMasked();\n-\n-            \/\/ double\n-            testDoubleMultiplySubMasked();\n-            testDoubleNegatedMultiplyAddMasked();\n-            testDoubleNegatedMultiplySubMasked();\n-        }\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"}]}