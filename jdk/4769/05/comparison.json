{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+ * @test\n@@ -29,1 +30,1 @@\n- *@run applet\/manual=yesno XparColor.html\n+ * @run main\/manual XparColor\n@@ -32,4 +33,8 @@\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Dimension;\n+import java.awt.Color;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterException;\n@@ -37,23 +42,28 @@\n-\n-\n-\/**\n- * Creating colors with an alpha value.\n- *\/\n-public class XparColor extends Applet implements Printable {\n-\n-   public void init() {\n-        String[] instructions =\n-        {\n-            \"This test verify that the BullsEye rings are printed correctly. The printout should show transparent rings with increasing darkness toward the center\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-   }\n-\n-    public XparColor() {\n-        PrinterJob printJob = PrinterJob.getPrinterJob();\n-        printJob.setPrintable(this);\n-        if (printJob.printDialog()) {\n-            try {\n-                printJob.print();\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Timer;\n+import javax.swing.WindowConstants;\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+\n+public class XparColor implements Printable {\n+    private static final CountDownLatch countDownLatch = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n+\n+        try {\n+            if (!countDownLatch.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\"Test timeout '%d ms' elapsed.\", testTimeout));\n@@ -61,0 +71,12 @@\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n@@ -64,2 +86,1 @@\n-\n-    public static void main(String s[]) {\n+    private static void doTest() {\n@@ -78,2 +99,100 @@\n-    public int print(Graphics g, PageFormat pf, int pi)\n-        throws PrinterException {\n+    private static void pass() {\n+        testPassed = true;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+        String testInstruction = \"This test verify that the BullsEye rings are printed correctly.\\n\" +\n+                \"The printout should show transparent rings with increasing darkness toward the center\";\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"SaveFileWithoutPrinter\");\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(testInstruction);\n+        textArea.setEditable(false);\n+\n+        final JButton startTestButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+        startTestButton.addActionListener((e) -> {\n+            startTestButton.setEnabled(false);\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"PrinterException thrown.\");\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(startTestButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n+    public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n@@ -86,2 +205,1 @@\n-        g2d.translate(pf.getImageableWidth() \/ 2,\n-                      pf.getImageableHeight() \/ 2);\n+        g2d.translate(pf.getImageableWidth() \/ 2, pf.getImageableHeight() \/ 2);\n@@ -90,3 +208,1 @@\n-\n-        double scale = Math.min(pf.getImageableWidth() \/ d.width,\n-                                pf.getImageableHeight() \/ d.height);\n+        double scale = Math.min(pf.getImageableWidth() \/ d.width, pf.getImageableHeight() \/ d.height);\n@@ -98,2 +214,1 @@\n-\n-        Graphics2D g2 = (Graphics2D)g;\n+        Graphics2D g2 = (Graphics2D) g;\n@@ -102,1 +217,0 @@\n-\n@@ -107,2 +221,1 @@\n-\n-        Color reds[] = { Color.red.darker(), Color.red };\n+        Color reds[] = {Color.red.darker(), Color.red};\n@@ -111,4 +224,4 @@\n-            float x = (float) (5+i*(w\/2\/10));\n-            float y = (float) (5+i*(h\/2\/10));\n-            float ew = (w-10)-(i*w\/10);\n-            float eh = (h-10)-(i*h\/10);\n+            float x = (float) (5 + i * (w \/ 2 \/ 10));\n+            float y = (float) (5 + i * (h \/ 2 \/ 10));\n+            float ew = (w - 10) - (i * w \/ 10);\n+            float eh = (h - 10) - (i * h \/ 10);\n@@ -116,3 +229,3 @@\n-            if ( N >= 16 )\n-                g2.setColor(reds[N-16]);\n-            else\n+            if (N >= 16) {\n+                g2.setColor(reds[N - 16]);\n+            } else {\n@@ -120,1 +233,2 @@\n-            g2.fill(new Ellipse2D.Float(x,y,ew,eh));\n+            }\n+            g2.fill(new Ellipse2D.Float(x, y, ew, eh));\n@@ -124,133 +238,0 @@\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n@@ -258,1 +239,0 @@\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/XparColor.java","additions":165,"deletions":185,"binary":false,"changes":350,"status":"modified"}]}