{"files":[{"patch":"@@ -25,5 +25,6 @@\n- * @bug 4179262\n- * @summary Confirm that transparent colors are printed correctly. The\n- * printout should show transparent rings with increasing darkness toward\n- * the center.\n- *@run applet\/manual=yesno XparColor.html\n+  @test\n+  @bug 4179262\n+  @summary Confirm that transparent colors are printed correctly. The\n+    printout should show transparent rings with increasing darkness toward\n+    the center.\n+  @run main\/manual XparColor\n@@ -32,4 +33,15 @@\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n+import java.awt.Dialog;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Dimension;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Button;\n+import java.awt.TextArea;\n+import java.awt.Panel;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterException;\n@@ -38,0 +50,1 @@\n+public class XparColor implements Printable {\n@@ -39,6 +52,1 @@\n-\/**\n- * Creating colors with an alpha value.\n- *\/\n-public class XparColor extends Applet implements Printable {\n-\n-   public void init() {\n+    private static void init() {\n@@ -46,18 +54,6 @@\n-        {\n-            \"This test verify that the BullsEye rings are printed correctly. The printout should show transparent rings with increasing darkness toward the center\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-   }\n-\n-    public XparColor() {\n-        PrinterJob printJob = PrinterJob.getPrinterJob();\n-        printJob.setPrintable(this);\n-        if (printJob.printDialog()) {\n-            try {\n-                printJob.print();\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-            }\n-        }\n-    }\n-\n+                {\n+                        \"This test verify that the BullsEye rings are printed correctly.\",\n+                        \"The printout should show transparent rings with increasing darkness toward the center\"\n+                };\n+        Sysout.createDialog();\n+        Sysout.printInstructions(instructions);\n@@ -65,1 +61,0 @@\n-    public static void main(String s[]) {\n@@ -78,2 +73,1 @@\n-    public int print(Graphics g, PageFormat pf, int pi)\n-        throws PrinterException {\n+    public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n@@ -86,2 +80,1 @@\n-        g2d.translate(pf.getImageableWidth() \/ 2,\n-                      pf.getImageableHeight() \/ 2);\n+        g2d.translate(pf.getImageableWidth() \/ 2, pf.getImageableHeight() \/ 2);\n@@ -90,3 +83,1 @@\n-\n-        double scale = Math.min(pf.getImageableWidth() \/ d.width,\n-                                pf.getImageableHeight() \/ d.height);\n+        double scale = Math.min(pf.getImageableWidth() \/ d.width, pf.getImageableHeight() \/ d.height);\n@@ -98,2 +89,1 @@\n-\n-        Graphics2D g2 = (Graphics2D)g;\n+        Graphics2D g2 = (Graphics2D) g;\n@@ -102,1 +92,0 @@\n-\n@@ -107,2 +96,1 @@\n-\n-        Color reds[] = { Color.red.darker(), Color.red };\n+        Color reds[] = {Color.red.darker(), Color.red};\n@@ -111,4 +99,4 @@\n-            float x = (float) (5+i*(w\/2\/10));\n-            float y = (float) (5+i*(h\/2\/10));\n-            float ew = (w-10)-(i*w\/10);\n-            float eh = (h-10)-(i*h\/10);\n+            float x = (float) (5 + i * (w \/ 2 \/ 10));\n+            float y = (float) (5 + i * (h \/ 2 \/ 10));\n+            float ew = (w - 10) - (i * w \/ 10);\n+            float eh = (h - 10) - (i * h \/ 10);\n@@ -116,3 +104,3 @@\n-            if ( N >= 16 )\n-                g2.setColor(reds[N-16]);\n-            else\n+            if (N >= 16) {\n+                g2.setColor(reds[N - 16]);\n+            } else {\n@@ -120,1 +108,96 @@\n-            g2.fill(new Ellipse2D.Float(x,y,ew,eh));\n+            }\n+            g2.fill(new Ellipse2D.Float(x, y, ew, eh));\n+        }\n+    }\n+\n+\n+    \/*****************************************************\n+     Standard Test Machinery Section\n+     DO NOT modify anything in this section -- it's a\n+     standard chunk of code which has all of the\n+     synchronisation necessary for the test harness.\n+     By keeping it the same in all tests, it is easier\n+     to read and understand someone else's test, as\n+     well as insuring that all tests behave correctly\n+     with the test harness.\n+     There is a section following this for test-defined\n+     classes\n+     ******************************************************\/\n+    private static boolean theTestPassed = false;\n+    private static boolean testGeneratedInterrupt = false;\n+    private static String failureMessage = \"\";\n+\n+    private static Thread mainThread = null;\n+\n+    private static int sleepTime = 300000;\n+\n+    public static void main(String args[]) throws InterruptedException {\n+        mainThread = Thread.currentThread();\n+        try {\n+            init();\n+        } catch (TestPassedException e) {\n+            \/\/The test passed, so just return from main and harness will interpret this return as a pass\n+            return;\n+        }\n+\n+        \/*\n+            At this point, neither test passed nor test failed has been\n+            called -- either would have thrown an exception and ended the\n+            test, so we know we have multiple threads.\n+            Test involves other threads, so sleep and wait for them to\n+            called pass() or fail()\n+         *\/\n+        try {\n+            Thread.sleep(sleepTime);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n+        } catch (InterruptedException e) {\n+            if (!testGeneratedInterrupt) throw e;\n+\n+            \/\/reset flag in case hit this code more than once for some reason (just safety)\n+            testGeneratedInterrupt = false;\n+            if (theTestPassed == false) {\n+                throw new RuntimeException(failureMessage);\n+            }\n+        }\n+\n+    }\n+\n+    public static synchronized void setTimeoutTo(int seconds) {\n+        sleepTime = seconds * 1000;\n+    }\n+\n+    public static synchronized void pass() {\n+        Sysout.println(\"The test passed.\");\n+        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n+\n+        \/\/ first check if this is executing in main thread\n+        if (mainThread == Thread.currentThread()) {\n+            \/*\n+             * Still in the main thread, so set the flag just for kicks,\n+             * and throw a test passed exception which will be caught\n+             * and end the test.\n+             *\/\n+            theTestPassed = true;\n+            throw new TestPassedException();\n+        }\n+        \/*\n+         * pass was called from a different thread, so set the flag and interrupt the main thead.\n+         *\/\n+        theTestPassed = true;\n+        testGeneratedInterrupt = true;\n+        mainThread.interrupt();\n+    }\n+\n+    public static synchronized void fail() {\n+        \/\/ test writer didn't specify why test failed, so give generic\n+        fail(\"it just plain failed! :-)\");\n+    }\n+\n+    public static synchronized void fail(String whyFailed) {\n+        Sysout.println(\"The test failed: \" + whyFailed);\n+        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n+        \/\/check if this called from main thread\n+        if (mainThread == Thread.currentThread()) {\n+            \/\/If main thread, fail now 'cause not sleeping\n+            throw new RuntimeException(whyFailed);\n@@ -122,0 +205,4 @@\n+        theTestPassed = false;\n+        testGeneratedInterrupt = true;\n+        failureMessage = whyFailed;\n+        mainThread.interrupt();\n@@ -123,0 +210,9 @@\n+\n+}\n+\n+\/**\n+ * This exception is used to exit from any level of call nesting\n+ * when it's determined that the test has passed, and immediately\n+ * end the test.\n+ *\/\n+class TestPassedException extends RuntimeException {\n@@ -124,0 +220,2 @@\n+\n+\n@@ -127,3 +225,3 @@\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n+ chunk of code whose purpose is to make user\n+ interaction uniform, and thereby make it simpler\n+ to read and understand someone else's test.\n@@ -133,9 +231,9 @@\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n+ * This is part of the standard test machinery.\n+ * It creates a dialog (with the instructions), and is the interface\n+ * for sending text messages to the user.\n+ * To print the instructions, send an array of strings to Sysout.createDialog\n+ * WithInstructions method.  Put one line of instructions per array entry.\n+ * To display a message for the tester to see, simply call Sysout.println\n+ * with the string to be displayed.\n+ * This mimics System.out.println but works within the test harness as well\n+ * as standalone.\n@@ -144,3 +242,2 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+class Sysout {\n+    private static TestDialog dialog;\n@@ -148,6 +245,5 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public static void createDialogWithInstructions(String[] instructions) {\n+        dialog = new TestDialog(new Frame(), \"Instructions\");\n+        dialog.printInstructions(instructions);\n+        dialog.show();\n+        println(\"Any messages for the tester will display here.\");\n@@ -156,7 +252,6 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public static void createDialog() {\n+        dialog = new TestDialog(new Frame(), \"Instructions\");\n+        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n+        dialog.printInstructions(defInstr);\n+        dialog.show();\n+        println(\"Any messages for the tester will display here.\");\n@@ -165,0 +260,3 @@\n+    public static void printInstructions(String[] instructions) {\n+        dialog.printInstructions(instructions);\n+    }\n@@ -166,3 +264,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    public static void println(String messageIn) {\n+        dialog.displayMessage(messageIn);\n@@ -171,0 +268,43 @@\n+}\n+\n+\/**\n+ * This is part of the standard test machinery.  It provides a place for the\n+ * test instructions to be displayed, and a place for interactive messages\n+ * to the user to be displayed.\n+ * To have the test instructions displayed, see Sysout.\n+ * To have a message to the user be displayed, see Sysout.\n+ * Do not call anything in this dialog directly.\n+ *\/\n+class TestDialog extends Dialog implements ActionListener {\n+\n+    TextArea instructionsText;\n+    TextArea messageText;\n+    int maxStringLength = 80;\n+    Panel buttonP = new Panel();\n+    Button passB = new Button(\"pass\");\n+    Button failB = new Button(\"fail\");\n+\n+    \/\/DO NOT call this directly, go through Sysout\n+    public TestDialog(Frame frame, String name) {\n+        super(frame, name);\n+        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n+        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n+        add(\"North\", instructionsText);\n+\n+        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n+        add(\"Center\", messageText);\n+\n+        passB = new Button(\"pass\");\n+        passB.setActionCommand(\"pass\");\n+        passB.addActionListener(this);\n+        buttonP.add(\"East\", passB);\n+\n+        failB = new Button(\"fail\");\n+        failB.setActionCommand(\"fail\");\n+        failB.addActionListener(this);\n+        buttonP.add(\"West\", failB);\n+\n+        add(\"South\", buttonP);\n+        pack();\n+        setVisible(true);\n+    }\n@@ -172,3 +312,27 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+    \/\/DO NOT call this directly, go through Sysout\n+    public void printInstructions(String[] instructions) {\n+        instructionsText.setText(\"\");\n+\n+        String printStr, remainingStr;\n+        for (int i = 0; i < instructions.length; i++) {\n+            \/\/chop up each into pieces maxSringLength long\n+            remainingStr = instructions[i];\n+            while (remainingStr.length() > 0) {\n+                \/\/if longer than max then chop off first max chars to print\n+                if (remainingStr.length() >= maxStringLength) {\n+                    \/\/Try to chop on a word boundary\n+                    int posOfSpace = remainingStr.\n+                            lastIndexOf(' ', maxStringLength - 1);\n+\n+                    if (posOfSpace <= 0) posOfSpace = maxStringLength - 1;\n+\n+                    printStr = remainingStr.substring(0, posOfSpace + 1);\n+                    remainingStr = remainingStr.substring(posOfSpace + 1);\n+                } else {\n+                    printStr = remainingStr;\n+                    remainingStr = \"\";\n+                }\n+\n+                instructionsText.append(printStr + \"\\n\");\n+            }\n+        }\n@@ -177,1 +341,4 @@\n- }\/\/ Sysout  class\n+    \/\/DO NOT call this directly, go through Sysout\n+    public void displayMessage(String messageIn) {\n+        messageText.append(messageIn + \"\\n\");\n+    }\n@@ -179,77 +346,10 @@\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+    \/**\n+     * Catch presses of the passed and failed buttons. Wimply call the standard pass() or fail()\n+     * static methods of XparColor\n+     *\/\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getActionCommand() == \"pass\") {\n+            XparColor.pass();\n+        } else {\n+            XparColor.fail();\n+        }\n@@ -258,1 +358,1 @@\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/XparColor.java","additions":267,"deletions":167,"binary":false,"changes":434,"status":"modified"}]}