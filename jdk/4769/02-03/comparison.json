{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.awt.Dialog;\n@@ -39,6 +38,0 @@\n-import java.awt.Frame;\n-import java.awt.Button;\n-import java.awt.TextArea;\n-import java.awt.Panel;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n@@ -50,0 +43,14 @@\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Timer;\n+import javax.swing.WindowConstants;\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n@@ -52,0 +59,5 @@\n+    private static final CountDownLatch countDownLatch = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n@@ -53,9 +65,2 @@\n-    private static void init() {\n-        String[] instructions =\n-                {\n-                        \"This testcase will be launched twice, once for opengl and once for metal.\",\n-                        \"This test verify that the BullsEye rings are printed correctly.\",\n-                        \"The printout should show transparent rings with increasing darkness toward the center\"\n-                };\n-        Sysout.createDialog();\n-        Sysout.printInstructions(instructions);\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n@@ -63,0 +68,20 @@\n+        try {\n+            if (!countDownLatch.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\"Test timeout '%d ms' elapsed.\", testTimeout));\n+            }\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n+        }\n+    }\n+\n+    private static void doTest() {\n@@ -75,0 +100,100 @@\n+    private static void pass() {\n+        testPassed = true;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+        String testInstruction = \"This testcase will be launched twice, once for opengl and once for metal.\\n\" +\n+                \"This test verify that the BullsEye rings are printed correctly.\\n\" +\n+                \"The printout should show transparent rings with increasing darkness toward the center\";\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"SaveFileWithoutPrinter\");\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(testInstruction);\n+        textArea.setEditable(false);\n+\n+        final JButton startTestButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+        startTestButton.addActionListener((e) -> {\n+            startTestButton.setEnabled(false);\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"PrinterException thrown.\");\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(startTestButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n@@ -114,156 +239,0 @@\n-\n-\n-    \/*****************************************************\n-     Standard Test Machinery Section\n-     DO NOT modify anything in this section -- it's a\n-     standard chunk of code which has all of the\n-     synchronisation necessary for the test harness.\n-     By keeping it the same in all tests, it is easier\n-     to read and understand someone else's test, as\n-     well as insuring that all tests behave correctly\n-     with the test harness.\n-     There is a section following this for test-defined\n-     classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    public static void main(String args[]) throws InterruptedException {\n-        mainThread = Thread.currentThread();\n-        try {\n-            init();\n-        } catch (TestPassedException e) {\n-            \/\/The test passed, so just return from main and harness will interpret this return as a pass\n-            return;\n-        }\n-\n-        \/*\n-            At this point, neither test passed nor test failed has been\n-            called -- either would have thrown an exception and ended the\n-            test, so we know we have multiple threads.\n-            Test involves other threads, so sleep and wait for them to\n-            called pass() or fail()\n-         *\/\n-        try {\n-            Thread.sleep(sleepTime);\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n-        } catch (InterruptedException e) {\n-            if (!testGeneratedInterrupt) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-            if (theTestPassed == false) {\n-                throw new RuntimeException(failureMessage);\n-            }\n-        }\n-\n-    }\n-\n-    public static synchronized void setTimeoutTo(int seconds) {\n-        sleepTime = seconds * 1000;\n-    }\n-\n-    public static synchronized void pass() {\n-        Sysout.println(\"The test passed.\");\n-        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n-\n-        \/\/ first check if this is executing in main thread\n-        if (mainThread == Thread.currentThread()) {\n-            \/*\n-             * Still in the main thread, so set the flag just for kicks,\n-             * and throw a test passed exception which will be caught\n-             * and end the test.\n-             *\/\n-            theTestPassed = true;\n-            throw new TestPassedException();\n-        }\n-        \/*\n-         * pass was called from a different thread, so set the flag and interrupt the main thead.\n-         *\/\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n-    }\n-\n-    public static synchronized void fail() {\n-        \/\/ test writer didn't specify why test failed, so give generic\n-        fail(\"it just plain failed! :-)\");\n-    }\n-\n-    public static synchronized void fail(String whyFailed) {\n-        Sysout.println(\"The test failed: \" + whyFailed);\n-        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n-        \/\/check if this called from main thread\n-        if (mainThread == Thread.currentThread()) {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException(whyFailed);\n-        }\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\n-\n-}\n-\n-\/**\n- * This exception is used to exit from any level of call nesting\n- * when it's determined that the test has passed, and immediately\n- * end the test.\n- *\/\n-class TestPassedException extends RuntimeException {\n-}\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n- chunk of code whose purpose is to make user\n- interaction uniform, and thereby make it simpler\n- to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- * This is part of the standard test machinery.\n- * It creates a dialog (with the instructions), and is the interface\n- * for sending text messages to the user.\n- * To print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method.  Put one line of instructions per array entry.\n- * To display a message for the tester to see, simply call Sysout.println\n- * with the string to be displayed.\n- * This mimics System.out.println but works within the test harness as well\n- * as standalone.\n- *\/\n-\n-class Sysout {\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-\n@@ -272,89 +241,0 @@\n-\/**\n- * This is part of the standard test machinery.  It provides a place for the\n- * test instructions to be displayed, and a place for interactive messages\n- * to the user to be displayed.\n- * To have the test instructions displayed, see Sysout.\n- * To have a message to the user be displayed, see Sysout.\n- * Do not call anything in this dialog directly.\n- *\/\n-class TestDialog extends Dialog implements ActionListener {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-    Panel buttonP = new Panel();\n-    Button passB = new Button(\"pass\");\n-    Button failB = new Button(\"fail\");\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        passB = new Button(\"pass\");\n-        passB.setActionCommand(\"pass\");\n-        passB.addActionListener(this);\n-        buttonP.add(\"East\", passB);\n-\n-        failB = new Button(\"fail\");\n-        failB.setActionCommand(\"fail\");\n-        failB.addActionListener(this);\n-        buttonP.add(\"West\", failB);\n-\n-        add(\"South\", buttonP);\n-        pack();\n-        setVisible(true);\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        instructionsText.setText(\"\");\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                            lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                } else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-            }\n-        }\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-    }\n-\n-    \/**\n-     * Catch presses of the passed and failed buttons. Wimply call the standard pass() or fail()\n-     * static methods of XparColor\n-     *\/\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getActionCommand() == \"pass\") {\n-            XparColor.pass();\n-        } else {\n-            XparColor.fail();\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/XparColor.java","additions":141,"deletions":261,"binary":false,"changes":402,"status":"modified"}]}