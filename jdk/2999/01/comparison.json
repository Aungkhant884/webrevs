{"files":[{"patch":"@@ -830,1 +830,1 @@\n-    if ((*env)->ExceptionCheck(env)) {\n+    if ((*env)->ExceptionCheck(env) || NULL == mainClassString) {\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+import java.io.IOException;\n+\n+public class CrashTheJVM {\n+    public static void main(String... args) throws IOException {\n+        System.out.println(\"Fine 1: from the outer class\");\n+\n+        new Object() {\n+            public static void main(String... args) throws IOException {\n+                System.out.println(\"Crash Before Fix 1: from anonymous nested class\");\n+            }\n+        };\n+        class LocalNestedClass {\n+            public static void main(String... args) throws IOException {\n+                System.out.println(\"Crash Before Fix 2: from local nested class\");\n+            }\n+        }\n+    }\n+\n+    public void fromMethod() {\n+        new Object() {\n+            public static void main(String... args) throws IOException {\n+                System.out.println(\"Crash Before Fix 3: from local anonymous class\");\n+            }\n+        };\n+        class LocalInnerClass {\n+            public static void main(String... args) throws IOException {\n+                System.out.println(\"Crash Before Fix 4: from local inner class\");\n+            }\n+        }\n+    }\n+\n+    public class InnerClass {\n+        public static void main(String... args) throws IOException {\n+            System.out.println(\"Fine 2: from inner class\");\n+        }\n+    }\n+\n+    public static class NestedClass {\n+        public static void main(String... args) throws IOException {\n+            System.out.println(\"Fine 3: from nested class\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/8261785\/CrashTheJVM.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8261785\n+ * @summary Test static main methods in anonymous\/local class won't cause launcher crash\n+ * @modules jdk.compiler jdk.zipfs\n+ * @compile ..\/TestHelper.java\n+ * @run testng Test8261785\n+ *\/\n+public class Test8261785 {\n+    private final Path inputDir;\n+\n+    public Test8261785() {\n+        inputDir = Paths.get(System.getProperty(\"test.src\", \".\"));\n+    }\n+\n+    public void compile() {\n+        Path file = inputDir.resolve(\"CrashTheJVM.java\");\n+        TestHelper.compile(\"-d\", \".\", file.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    public void run() throws IOException {\n+        System.out.println(\"Current folder: \" + Paths.get(\".\").toAbsolutePath().toString());\n+        compile();\n+        String[] clz = Files.list(Paths.get(\".\"))\n+            .peek(p -> System.out.println(\"Found \" + p.toString()))\n+            .map(Path::getFileName)\n+            .map(Path::toString)\n+            .filter(f -> f.endsWith(\".class\"))\n+            .map(f -> f.substring(0, f.length() - 6))\n+            .toArray(String[]::new);\n+        assertEquals(clz.length, 7);\n+        for (String f: clz) {\n+            System.out.println(\"Running class \" + f);\n+            var result = TestHelper.doExec(TestHelper.javaCmd, \"-cp\", \".\", f);\n+            assertTrue(result.isOK());\n+        };\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/8261785\/Test8261785.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}