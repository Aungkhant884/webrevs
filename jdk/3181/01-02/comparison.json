{"files":[{"patch":"@@ -35,2 +35,2 @@\n- * XML Signature RSASSA-PSS Algorithm<\/a>. The parameters are expressed as a\n- * {@link PSSParameterSpec} object encapsulated.\n+ * XML Signature RSASSA-PSS Algorithm<\/a>. The parameters are represented as a\n+ * {@link PSSParameterSpec} object.\n@@ -76,0 +76,8 @@\n+ * @implNote\n+ * In this implementation one can obtain this default value with:\n+ * <pre><code>\n+ * XMLSignatureFactory.getInstance()\n+ *      .newSignatureMethod(SignatureMethod.RSA_PSS, null)\n+ *      .getParameterSpec()\n+ * <\/code><\/pre>\n+ *\n@@ -86,1 +94,1 @@\n-     * {@link PSSParameterSpec} object encapsulated.\n+     * {@link PSSParameterSpec} object.\n@@ -88,1 +96,3 @@\n-     * @param spec the input {@code PSSParameterSpec} to be encapsulated\n+     * @param spec the input {@code PSSParameterSpec} object\n+     *\n+     * @throws NullPointerException if {@code spec} is null\n@@ -95,1 +105,1 @@\n-     * Returns the encapsulated {@code PSSParameterSpec} object.\n+     * Returns the {@code PSSParameterSpec} object inside.\n@@ -97,1 +107,1 @@\n-     * @return the encapsulated {@code PSSParameterSpec} object\n+     * @return the {@code PSSParameterSpec} object inside\n@@ -103,35 +113,0 @@\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(\n-                spec.getDigestAlgorithm(),\n-                spec.getSaltLength(),\n-                spec.getTrailerField(),\n-                mgfParamsAsString(spec));\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!(obj instanceof RSAPSSParameterSpec)) {\n-            return false;\n-        }\n-        PSSParameterSpec other = ((RSAPSSParameterSpec)obj).spec;\n-        return Objects.equals(spec.getDigestAlgorithm(), other.getDigestAlgorithm())\n-                && Objects.equals(mgfParamsAsString(spec), mgfParamsAsString(other))\n-                && spec.getSaltLength() == other.getSaltLength()\n-                && spec.getTrailerField() == other.getTrailerField();\n-    }\n-\n-    private static String mgfParamsAsString(PSSParameterSpec spec) {\n-        String output = spec.getMGFAlgorithm() + \":\";\n-        AlgorithmParameterSpec mgfSpec = spec.getMGFParameters();\n-        if (mgfSpec instanceof MGF1ParameterSpec) {\n-            output += ((MGF1ParameterSpec)mgfSpec).getDigestAlgorithm();\n-        } else {\n-            output += System.identityHashCode(mgfSpec);\n-        }\n-        return output;\n-    }\n-\n@@ -140,4 +115,1 @@\n-        return \"RSAPSSParameterSpec (dm:\" + spec.getDigestAlgorithm()\n-                + \", mgf:\" + mgfParamsAsString(spec)\n-                + \", sl:\" + spec.getSaltLength()\n-                + \", tf:\" + spec.getTrailerField() + \")\";\n+        return \"RSAPSSParameterSpec[spec=\" + spec + \"]\";\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/spec\/RSAPSSParameterSpec.java","additions":17,"deletions":45,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                saltLength = saltLengthNode == null ? digestAlgorithm.getSaltLength() : Integer.parseInt(saltLengthNode.getTextContent());\n+                saltLength = saltLengthNode == null ? digestAlgorithm.getSaltLength() : Integer.parseUnsignedInt(saltLengthNode.getTextContent());\n@@ -242,1 +242,1 @@\n-                trailerField = trailerFieldNode == null ? 1 : Integer.parseInt(trailerFieldNode.getTextContent());\n+                trailerField = trailerFieldNode == null ? 1 : Integer.parseUnsignedInt(trailerFieldNode.getTextContent());\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRSAPSSSignatureMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *      8046724 8079693 8177334 8205507 8210736 8217878\n+ *      8046724 8079693 8177334 8205507 8210736 8217878 8241306\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/GenerationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,0 +102,3 @@\n+        Utils.runAndCheckException(\n+                () -> getSpec(XMLUtils.withText(doc, P2PSS + \"\/pss:SaltLength\", \"-1\")),\n+                e -> Asserts.assertTrue(e instanceof MarshalException && e.getMessage().contains(\"Invalid salt length supplied\"), e.getMessage()));\n@@ -106,0 +109,3 @@\n+        Utils.runAndCheckException(\n+                () -> getSpec(XMLUtils.withText(doc, P2PSS + \"\/pss:TrailerField\", \"-1\")),\n+                e -> Asserts.assertTrue(e instanceof MarshalException && e.getMessage().contains(\"Invalid trailer field supplied\"), e.getMessage()));\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/PSSSpec.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-    public static Document withoutNode(Document d, String path) throws Exception {\n+    public static Document withoutNode(Document d, String... paths) throws Exception {\n@@ -168,2 +168,4 @@\n-        Element e = sub(d, path);\n-        e.getParentNode().removeChild(e);\n+        for (String path : paths) {\n+            Element e = sub(d, path);\n+            e.getParentNode().removeChild(e);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/security\/XMLUtils.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}