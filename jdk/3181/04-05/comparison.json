{"files":[{"patch":"@@ -242,0 +242,13 @@\n+     * <p>\n+     * If the {@code params} parameter is {@code null} when calling\n+     * {@link XMLSignatureFactory#newSignatureMethod} with {@code RSA_PSS}\n+     * as the signature algorithm, the default parameter as defined in\n+     * <a href=\"https:\/\/tools.ietf.org\/html\/rfc6931#section-2.3.9\">RFC 6931 Section 2.3.9<\/a>\n+     * is used and this default parameter will also be returned by the\n+     * {@link SignatureMethod#getParameterSpec()} method. The default parameter\n+     * uses SHA-256 as the {@code DigestMethod}, MGF1 with SHA-256 as the\n+     * {@code MaskGenerationFunction}, 32 as {@code SaltLength}, and 1 as\n+     * {@code TrailerField}. This is equivalent to the parameter-less signature\n+     * method {@link SignatureMethod#SHA256_RSA_MGF1 SHA256_RSA_MGF1} as defined\n+     * in <a href=\"https:\/\/tools.ietf.org\/html\/rfc6931#section-2.3.10\">Section 2.3.10<\/a>\n+     * of the same RFC.\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,17 +68,0 @@\n- * @implSpec\n- * If the parameter is not specified when using the RSASSA-PSS signature\n- * algorithm, the default parameter is used, which uses SHA-256 as the\n- * {@code DigestMethod}, MGF1 with SHA-256 as the\n- * {@code MaskGenerationFunction}, 32 as {@code SaltLength}, and 1 as\n- * {@code TrailerField}. This is equivalent to the parameter-less signature\n- * method {@link SignatureMethod#SHA256_RSA_MGF1 SHA256_RSA_MGF1} as defined\n- * in <a href=\"https:\/\/tools.ietf.org\/html\/rfc6931#section-2.3.10\">RFC 6931<\/a>.\n- *\n- * @implNote\n- * In this implementation one can obtain this default value with:\n- * <pre><code>\n- * XMLSignatureFactory.getInstance()\n- *      .newSignatureMethod(SignatureMethod.RSA_PSS, null)\n- *      .getParameterSpec()\n- * <\/code><\/pre>\n- *\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/spec\/RSAPSSParameterSpec.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,8 +119,3 @@\n-        if (params != null) {\n-            if (!(params instanceof RSAPSSParameterSpec)) {\n-                throw new InvalidAlgorithmParameterException\n-                    (\"params must be of type RSAPSSParameterSpec\");\n-            }\n-\n-            spec = ((RSAPSSParameterSpec) params).getPSSParameterSpec();\n-            LOG.debug(\"Setting RSAPSSParameterSpec to: {}\", params.toString());\n+        if (!(params instanceof RSAPSSParameterSpec)) {\n+            throw new InvalidAlgorithmParameterException\n+                (\"params must be of type RSAPSSParameterSpec\");\n@@ -128,0 +123,3 @@\n+\n+        spec = ((RSAPSSParameterSpec) params).getPSSParameterSpec();\n+        LOG.debug(\"Setting RSAPSSParameterSpec to: {}\", params.toString());\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRSAPSSSignatureMethod.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignedInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+    private static final PSSParameterSpec DEFAULT_SPEC\n+            = new PSSParameterSpec(\"SHA-256\", \"MGF1\", new MGF1ParameterSpec(\"SHA-256\"), 32, PSSParameterSpec.TRAILER_FIELD_BC);\n+\n@@ -55,0 +58,1 @@\n+        spec();\n@@ -130,2 +134,1 @@\n-        checkSpec(XMLUtils.withoutNode(doc, P2PSS),\n-                new PSSParameterSpec(\"SHA-256\", \"MGF1\", new MGF1ParameterSpec(\"SHA-256\"), 32, 1));\n+        checkSpec(XMLUtils.withoutNode(doc, P2PSS), DEFAULT_SPEC);\n@@ -142,2 +145,1 @@\n-        spec = new PSSParameterSpec(\"SHA-256\", \"MGF1\", new MGF1ParameterSpec(\"SHA-256\"), 32, PSSParameterSpec.TRAILER_FIELD_BC);\n-        signer.sm(SignatureMethod.RSA_PSS, new RSAPSSParameterSpec(spec));\n+        signer.sm(SignatureMethod.RSA_PSS, new RSAPSSParameterSpec(DEFAULT_SPEC));\n@@ -175,0 +177,14 @@\n+    static void spec() throws Exception {\n+        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\");\n+        SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_PSS, null);\n+        Asserts.assertTrue(equals(\n+                ((RSAPSSParameterSpec)sm.getParameterSpec()).getPSSParameterSpec(),\n+                DEFAULT_SPEC));\n+\n+        PSSParameterSpec special = new PSSParameterSpec(\"SHA-256\", \"MGF1\", new MGF1ParameterSpec(\"SHA-384\"), 33, 2);\n+        sm = fac.newSignatureMethod(SignatureMethod.RSA_PSS, new RSAPSSParameterSpec(special));\n+        Asserts.assertTrue(equals(\n+                ((RSAPSSParameterSpec)sm.getParameterSpec()).getPSSParameterSpec(),\n+                special));\n+    }\n+\n@@ -184,1 +200,1 @@\n-            jdk.test.lib.Asserts.fail(\"Not PSSParameterSpec: \" + spec.getClass());\n+            Asserts.fail(\"Not PSSParameterSpec: \" + spec.getClass());\n@@ -190,1 +206,1 @@\n-        jdk.test.lib.Asserts.assertTrue(equals(getSpec(doc), expected));\n+        Asserts.assertTrue(equals(getSpec(doc), expected));\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/PSSSpec.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"}]}