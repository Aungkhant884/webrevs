{"files":[{"patch":"@@ -99,1 +99,1 @@\n-    static bool equals(int* lgrp_id_value, LGRPSpace* p) {\n+    static bool equals(int* lgrp_id_value, LGRPSpace* const& p) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-bool GrowableCache::equals(GrowableElement* e1, GrowableElement* e2) {\n+bool GrowableCache::equals(GrowableElement* e1, GrowableElement* const& e2) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,3 +69,3 @@\n-  virtual address getCacheValue()          =0;\n-  virtual bool equals(GrowableElement* e)  =0;\n-  virtual GrowableElement *clone()         =0;\n+  virtual address getCacheValue()                =0;\n+  virtual bool equals(const GrowableElement* e)  =0;\n+  virtual GrowableElement *clone()               =0;\n@@ -91,1 +91,1 @@\n-  static bool equals(GrowableElement*, GrowableElement*);\n+  static bool equals(GrowableElement*, GrowableElement* const&);\n@@ -180,1 +180,1 @@\n-  bool equals(GrowableElement* e) { return equals((JvmtiBreakpoint&) *e); }\n+  bool equals(const GrowableElement* e) { return equals((JvmtiBreakpoint&) *e); }\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-bool PerfDataList::by_name(void* name, PerfData* pd) {\n+bool PerfDataList::by_name(void* name, PerfData* const& pd) {\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-    static bool by_name(void* name, PerfData* pd);\n+    static bool by_name(void* name, PerfData* const& pd);\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-bool match_oop_entry(oop *op, UnhandledOopEntry e) {\n-  return (e.oop_ptr() == op);\n+bool match_oop_entry(oop *op, const UnhandledOopEntry& e) {\n+  return (const_cast<UnhandledOopEntry&>(e).oop_ptr() == op);\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-bool DCmdInfo::by_name(void* cmd_name, DCmdInfo* info) {\n+bool DCmdInfo::by_name(void* cmd_name, DCmdInfo* const& info) {\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  static bool by_name(void* name, DCmdInfo* info);\n+  static bool by_name(void* name, DCmdInfo* const& info);\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-  int find(T* token, bool f(T*, E)) const {\n+  int find(T* token, bool f(T*, const E&)) const {\n@@ -221,1 +221,1 @@\n-  int find_from_end(T* token, bool f(T*, E)) const {\n+  int find_from_end(T* token, bool f(T*, const E&)) const {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}