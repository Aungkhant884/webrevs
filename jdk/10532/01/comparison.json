{"files":[{"patch":"@@ -59,1 +59,1 @@\n-  void notify_allocation();\n+  void notify_allocation(JavaThread* thread);\n@@ -63,1 +63,1 @@\n-  void notify_allocation_dtrace_sampler();\n+  void notify_allocation_dtrace_sampler(JavaThread* thread);\n@@ -87,1 +87,1 @@\n-      notify_allocation();\n+      notify_allocation(_thread);\n@@ -238,1 +238,1 @@\n-void MemAllocator::Allocation::notify_allocation_dtrace_sampler() {\n+void MemAllocator::Allocation::notify_allocation_dtrace_sampler(JavaThread* thread) {\n@@ -244,1 +244,1 @@\n-      SharedRuntime::dtrace_object_alloc(Thread::current(), obj(), word_size);\n+      SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n@@ -249,1 +249,1 @@\n-void MemAllocator::Allocation::notify_allocation() {\n+void MemAllocator::Allocation::notify_allocation(JavaThread* thread) {\n@@ -252,1 +252,1 @@\n-  notify_allocation_dtrace_sampler();\n+  notify_allocation_dtrace_sampler(thread);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1629,1 +1629,1 @@\n-                                          static_cast<int (*)(Thread*, oopDesc*)>(SharedRuntime::dtrace_object_alloc)),\n+                                          static_cast<int (*)(JavaThread*, oopDesc*)>(SharedRuntime::dtrace_object_alloc)),\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -999,7 +999,4 @@\n-jlong SharedRuntime::get_java_tid(Thread* thread) {\n-  if (thread != NULL && thread->is_Java_thread()) {\n-    Thread* current = Thread::current();\n-    guarantee(current != thread || JavaThread::cast(thread)->is_oop_safe(),\n-              \"current cannot touch oops after its GC barrier is detached.\");\n-    oop obj = JavaThread::cast(thread)->threadObj();\n-    return (obj == NULL) ? 0 : java_lang_Thread::thread_id(obj);\n+jlong SharedRuntime::get_java_tid(JavaThread* thread) {\n+  assert(thread != NULL, \"No thread\");\n+  if (thread == NULL) {\n+    return 0;\n@@ -1007,1 +1004,4 @@\n-  return 0;\n+  guarantee(Thread::current() != thread || thread->is_oop_safe(),\n+            \"current cannot touch oops after its GC barrier is detached.\");\n+  oop obj = thread->threadObj();\n+  return (obj == NULL) ? 0 : java_lang_Thread::thread_id(obj);\n@@ -1016,1 +1016,1 @@\n-  return dtrace_object_alloc(Thread::current(), o, o->size());\n+  return dtrace_object_alloc(JavaThread::current(), o, o->size());\n@@ -1019,1 +1019,1 @@\n-int SharedRuntime::dtrace_object_alloc(Thread* thread, oopDesc* o) {\n+int SharedRuntime::dtrace_object_alloc(JavaThread* thread, oopDesc* o) {\n@@ -1023,1 +1023,1 @@\n-int SharedRuntime::dtrace_object_alloc(Thread* thread, oopDesc* o, size_t size) {\n+int SharedRuntime::dtrace_object_alloc(JavaThread* thread, oopDesc* o, size_t size) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -280,2 +280,2 @@\n-  static int dtrace_object_alloc(Thread* thread, oopDesc* o);\n-  static int dtrace_object_alloc(Thread* thread, oopDesc* o, size_t size);\n+  static int dtrace_object_alloc(JavaThread* thread, oopDesc* o);\n+  static int dtrace_object_alloc(JavaThread* thread, oopDesc* o, size_t size);\n@@ -287,1 +287,1 @@\n-  static jlong get_java_tid(Thread* thread);\n+  static jlong get_java_tid(JavaThread* thread);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-int dtrace_waited_probe(ObjectMonitor* monitor, Handle obj, Thread* thr) {\n+int dtrace_waited_probe(ObjectMonitor* monitor, Handle obj, JavaThread* thr) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}