{"files":[{"patch":"@@ -17,0 +17,1 @@\n+\/src\/utils\/LogCompilation\/target\/\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,0 +224,9 @@\n+\n+            String codeSize = \"\";\n+            if (nmethod != null) {\n+                long nmethodSize = nmethod.getInstSize();\n+                if (nmethodSize > 0) {\n+                    codeSize = \"(code size: \" + nmethodSize + \")\";\n+                }\n+            }\n+\n@@ -225,1 +234,1 @@\n-            stream.print(getMethod().decodeFlags(bc) + \" \" + getCompiler() + \" \" + getMethod().format(bc));\n+            stream.print(getMethod().decodeFlags(bc) + \" \" + getCompiler() + \" \" + getMethod().format(bc) + codeSize);\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/Compilation.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,3 @@\n+            } else if (a.equals(\"-z\")) {\n+                sort = LogParser.sortByNMethodSize;\n+                index++;\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/LogCompilation.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -384,0 +384,49 @@\n+    static Comparator<LogEvent> sortByNMethodSize = new Comparator<LogEvent>() {\n+\n+        public int compare(LogEvent a, LogEvent b) {\n+            Compilation c1 = a.getCompilation();\n+            Compilation c2 = b.getCompilation();\n+            if ((c1 != null && c2 == null)) {\n+                return -1;\n+            } else if (c1 == null && c2 != null) {\n+                return 1;\n+            } else if (c1 == null && c2 == null) {\n+                return 0;\n+            }\n+\n+            if (c1.getNMethod() != null && c2.getNMethod() == null) {\n+                return -1;\n+            } else if (c1.getNMethod() == null && c2.getNMethod() != null) {\n+                return 1;\n+            } else if (c1.getNMethod() == null && c2.getNMethod() == null) {\n+                return 0;\n+            }\n+\n+            assert c1.getNMethod() != null && c2.getNMethod() != null : \"Neither should be null here\";\n+\n+            long c1Size = c1.getNMethod().getInstSize();\n+            long c2Size = c2.getNMethod().getInstSize();\n+\n+            if (c1Size == 0 && c2Size == 0) {\n+                return 0;\n+            }\n+\n+            if (c1Size > c2Size) {\n+                return -1;\n+            } else if (c1Size < c2Size) {\n+                return 1;\n+            }\n+\n+            return 0;\n+        }\n+\n+        public boolean equals(Object other) {\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return 7;\n+        }\n+  };\n+\n@@ -1122,0 +1171,7 @@\n+            String iOffset = atts.getValue(\"insts_offset\");\n+            String sOffset = atts.getValue(\"stub_offset\");\n+            if (iOffset != null && sOffset != null) {\n+                long insts_offset = parseLong(iOffset);\n+                long stub_offset = parseLong(sOffset);\n+                nm.setInstSize(stub_offset - insts_offset);\n+            }\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/LogParser.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,5 @@\n+    \/**\n+     * The nmethod's insts size in bytes.\n+     *\/\n+    private long instSize;\n+\n@@ -82,0 +87,8 @@\n+    public long getInstSize() {\n+        return instSize;\n+    }\n+\n+    public void setInstSize(long size) {\n+        this.instSize = size;\n+    }\n+\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/NMethod.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,9 @@\n+\n+    @Test\n+    public void testDashz() throws Exception {\n+        String[] args = {\"-z\",\n+            logFile\n+        };\n+\n+        LogCompilation.main(args);\n+    }\n","filename":"src\/utils\/LogCompilation\/src\/test\/java\/com\/sun\/hotspot\/tools\/compiler\/TestLogCompilation.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}