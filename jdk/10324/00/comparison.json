{"files":[{"patch":"@@ -197,1 +197,0 @@\n-JVM_ResumeThread\n@@ -210,1 +209,0 @@\n-JVM_SuspendThread\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -275,6 +275,0 @@\n-JNIEXPORT void JNICALL\n-JVM_SuspendThread(JNIEnv *env, jobject thread);\n-\n-JNIEXPORT void JNICALL\n-JVM_ResumeThread(JNIEnv *env, jobject thread);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3029,23 +3029,0 @@\n-JVM_ENTRY(void, JVM_SuspendThread(JNIEnv* env, jobject jthread))\n-  ThreadsListHandle tlh(thread);\n-  JavaThread* receiver = NULL;\n-  bool is_alive = tlh.cv_internal_thread_to_JavaThread(jthread, &receiver, NULL);\n-  if (is_alive) {\n-    \/\/ jthread refers to a live JavaThread, but java_suspend() will\n-    \/\/ detect a thread that has started to exit and will ignore it.\n-    receiver->java_suspend();\n-  }\n-JVM_END\n-\n-\n-JVM_ENTRY(void, JVM_ResumeThread(JNIEnv* env, jobject jthread))\n-  ThreadsListHandle tlh(thread);\n-  JavaThread* receiver = NULL;\n-  bool is_alive = tlh.cv_internal_thread_to_JavaThread(jthread, &receiver, NULL);\n-  if (is_alive) {\n-    \/\/ jthread refers to a live JavaThread.\n-    receiver->java_resume();\n-  }\n-JVM_END\n-\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1266,6 +1266,4 @@\n-            Thread suspended.\n-            <code>java.lang.Thread.suspend()<\/code>\n-            or a <jvmti\/> suspend function\n-            (such as <functionlink id=\"SuspendThread\"><\/functionlink>)\n-            has been called on the thread. If this bit\n-            is set, the other bits refer to the thread state before suspension.\n+            Thread is suspended by a suspend function\n+            (such as <functionlink id=\"SuspendThread\"><\/functionlink>).\n+            If this bit is set, the other bits refer to the thread state before\n+            suspension.\n@@ -1783,1 +1781,0 @@\n-        or <code>java.lang.Thread.suspend()<\/code>\n@@ -1818,1 +1815,0 @@\n-        or <code>java.lang.Thread.suspend()<\/code>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,1 @@\n- * for the requested operation. See, for example, the\n- * {@code suspend} and {@code resume} methods in class\n- * {@code Thread}.\n+ * for the requested operation.\n@@ -34,2 +32,1 @@\n- * @see     java.lang.Thread#resume()\n- * @see     java.lang.Thread#suspend()\n+ * @see Thread#start()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IllegalThreadStateException.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -497,1 +497,0 @@\n-     * {@code stop}, {@code suspend}, {@code resume},\n@@ -526,1 +525,0 @@\n-     * @see        java.lang.Thread#resume() resume\n@@ -530,2 +528,0 @@\n-     * @see        java.lang.Thread#stop() stop\n-     * @see        java.lang.Thread#suspend() suspend\n@@ -550,3 +546,2 @@\n-     * {@code setDaemon}, {@code setMaxPriority},\n-     * {@code stop}, {@code suspend}, {@code resume}, and\n-     * {@code destroy} methods of class {@code ThreadGroup}.\n+     * {@code setDaemon} and {@code setMaxPriority} methods of class\n+     * {@code ThreadGroup}.\n@@ -579,2 +574,0 @@\n-     * @see        java.lang.ThreadGroup#destroy() destroy\n-     * @see        java.lang.ThreadGroup#resume() resume\n@@ -583,2 +576,0 @@\n-     * @see        java.lang.ThreadGroup#stop() stop\n-     * @see        java.lang.ThreadGroup#suspend() suspend\n","filename":"src\/java.base\/share\/classes\/java\/lang\/SecurityManager.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1860,8 +1860,1 @@\n-     * Suspends this thread.\n-     * <p>\n-     * First, the {@code checkAccess} method of this thread is called\n-     * with no arguments. This may result in throwing a\n-     * {@code SecurityException} (in the current thread).\n-     * <p>\n-     * If the thread is alive, it is suspended and makes no further\n-     * progress unless and until it is resumed.\n+     * Throws {@code UnsupportedOperationException}.\n@@ -1869,14 +1862,12 @@\n-     * @throws     SecurityException  if the current thread cannot modify\n-     *             this thread.\n-     * @throws     UnsupportedOperationException if invoked on a virtual thread\n-     * @see #checkAccess\n-     * @deprecated   This method has been deprecated, as it is\n-     *   inherently deadlock-prone.  If the target thread holds a lock on the\n-     *   monitor protecting a critical system resource when it is suspended, no\n-     *   thread can access this resource until the target thread is resumed. If\n-     *   the thread that would resume the target thread attempts to lock this\n-     *   monitor prior to calling {@code resume}, deadlock results.  Such\n-     *   deadlocks typically manifest themselves as \"frozen\" processes.\n-     *   For more information, see\n-     *   <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/threadPrimitiveDeprecation.html\">Why\n-     *   are Thread.stop, Thread.suspend and Thread.resume Deprecated?<\/a>.\n+     * @throws  UnsupportedOperationException always\n+     *\n+     * @deprecated This method was originally specified to suspend a thread.\n+     *     It was inherently deadlock-prone. If the target thread held a lock on\n+     *     a monitor protecting a critical system resource when it was suspended,\n+     *     no thread could access the resource until the target thread was resumed.\n+     *     If the thread intending to resume the target thread attempted to lock\n+     *     the monitor prior to calling {@code resume}, deadlock would result.\n+     *     Such deadlocks typically manifested themselves as \"frozen\" processes.\n+     *     For more information, see\n+     *     <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/threadPrimitiveDeprecation.html\">Why\n+     *     are Thread.stop, Thread.suspend and Thread.resume Deprecated?<\/a>.\n@@ -1886,4 +1877,1 @@\n-        checkAccess();\n-        if (isVirtual())\n-            throw new UnsupportedOperationException();\n-        suspend0();\n+        throw new UnsupportedOperationException();\n@@ -1893,8 +1881,1 @@\n-     * Resumes a suspended thread.\n-     * <p>\n-     * First, the {@code checkAccess} method of this thread is called\n-     * with no arguments. This may result in throwing a\n-     * {@code SecurityException} (in the current thread).\n-     * <p>\n-     * If the thread is alive but suspended, it is resumed and is\n-     * permitted to make progress in its execution.\n+     * Throws {@code UnsupportedOperationException}.\n@@ -1902,7 +1883,5 @@\n-     * @throws     SecurityException  if the current thread cannot modify this\n-     *             thread.\n-     * @throws     UnsupportedOperationException if invoked on a virtual thread\n-     * @see        #checkAccess\n-     * @see        #suspend()\n-     * @deprecated This method exists solely for use with {@link #suspend},\n-     *     which has been deprecated because it is deadlock-prone.\n+     * @throws  UnsupportedOperationException always\n+     *\n+     * @deprecated This method was originally specified to resume a thread\n+     *     suspended with {@link #suspend()}. Suspending a thread was\n+     *     inherently deadlock-prone.\n@@ -1915,4 +1894,1 @@\n-        checkAccess();\n-        if (isVirtual())\n-            throw new UnsupportedOperationException();\n-        resume0();\n+        throw new UnsupportedOperationException();\n@@ -3098,2 +3074,0 @@\n-    private native void suspend0();\n-    private native void resume0();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":21,"deletions":47,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,7 +162,8 @@\n-<code>Thread.resume<\/code> deprecated?<\/h2>\n-<p><code>Thread.suspend<\/code> is inherently deadlock-prone. If the\n-target thread holds a lock on the monitor protecting a critical\n-system resource when it is suspended, no thread can access this\n-resource until the target thread is resumed. If the thread that\n-would resume the target thread attempts to lock this monitor prior\n-to calling <code>resume<\/code>, deadlock results. Such deadlocks\n+<code>Thread.resume<\/code> deprecated and the ability to suspend or\n+resume a thread removed?<\/h2>\n+<p><code>Thread.suspend<\/code> was inherently deadlock-prone. If the\n+target thread held a lock on a monitor protecting a critical\n+system resource when it is suspended, no thread could access the\n+resource until the target thread was resumed. If the thread intending\n+to resume the target thread attempted to lock the monitor prior\n+to calling <code>resume<\/code>, deadlock resulted. Such deadlocks\n","filename":"src\/java.base\/share\/classes\/java\/lang\/doc-files\/threadPrimitiveDeprecation.html","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-    {\"suspend0\",         \"()V\",        (void *)&JVM_SuspendThread},\n-    {\"resume0\",          \"()V\",        (void *)&JVM_ResumeThread},\n","filename":"src\/java.base\/share\/native\/libjava\/Thread.c","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,2 +185,1 @@\n-        \"Unlike java.lang.Thread.suspend, \"\n-        \"suspends of both the virtual machine and individual threads are \"\n+        \"Suspends of both the virtual machine and individual threads are \"\n@@ -1838,4 +1837,3 @@\n-        \"Unlike java.lang.Thread.suspend(), suspends of both \"\n-        \"the virtual machine and individual threads are counted. Before \"\n-        \"a thread will run again, it must be resumed the same number \"\n-        \"of times it has been suspended. \"\n+        \"Suspends of both the virtual machine and individual threads are \"\n+        \"counted. Before a thread will run again, it must be resumed the \"\n+        \"same number of times it has been suspended. \"\n@@ -1843,3 +1841,2 @@\n-        \"Suspending single threads with command has the same \"\n-        \"dangers java.lang.Thread.suspend(). If the suspended \"\n-        \"thread holds a monitor needed by another running thread, \"\n+        \"Suspending single threads is inherently deadlock-prone. If the \"\n+        \"suspended thread holds a monitor needed by another running thread, \"\n@@ -1850,3 +1847,1 @@\n-        \"resumed through one of the JDI resume methods mentioned above; \"\n-        \"the application in the target VM cannot resume the suspended thread \"\n-        \"through {@link java.lang.Thread#resume}. \"\n+        \"resumed through one of the JDI resume methods mentioned above. \"\n","filename":"src\/java.se\/share\/data\/jdwp\/jdwp.spec","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -74,2 +74,1 @@\n-     * Unlike {@link java.lang.Thread#suspend},\n-     * suspends of both the virtual machine and individual threads are\n+     * Suspends of both the virtual machine and individual threads are\n@@ -77,1 +76,1 @@\n-     * (through {@link #resume} or {@link ThreadReference#resume})\n+     * (through {@link #resume} or {@link VirtualMachine#resume})\n@@ -80,4 +79,3 @@\n-     * Suspending single threads with this method has the same dangers\n-     * as {@link java.lang.Thread#suspend()}. If the suspended thread\n-     * holds a monitor needed by another running thread, deadlock is\n-     * possible in the target VM (at least until the suspended thread\n+     * Suspending single threads with this method is inherently deadlock-prone.\n+     * If the suspended thread holds a monitor needed by another running thread,\n+     * deadlock is possible in the target VM (at least until the suspended thread\n@@ -87,4 +85,4 @@\n-     * resumed through one of the JDI resume methods mentioned above;\n-     * the application in the target VM cannot resume the suspended thread\n-     * through {@link java.lang.Thread#resume}.\n-     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.\n+     * resumed through one of the JDI resume methods mentioned above.\n+     *\n+     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only\n+     * @see VirtualMachine#canBeModified()\n@@ -104,1 +102,3 @@\n-     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.\n+     *\n+     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only\n+     * @see VirtualMachine#canBeModified()\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/ThreadReference.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -280,2 +280,1 @@\n-     * Unlike {@link java.lang.Thread#suspend Thread.suspend()},\n-     * suspends of both the virtual machine and individual threads are\n+     * Suspends of both the virtual machine and individual threads are\n@@ -286,1 +285,2 @@\n-     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.\n+     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only\n+     * @see #canBeModified()\n@@ -295,3 +295,3 @@\n-     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.\n-     *\n-     * @see #suspend\n+     * @throws VMCannotBeModifiedException if the VirtualMachine is read-only\n+     * @see #suspend()\n+     * @see #canBeModified()\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/VirtualMachine.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -164,0 +164,12 @@\n+\n+\n+# Temporarily exclude, JDK-8289607 is expected to adjust tests before JDK-8249627 is integrated\n+runtime\/handshake\/HandshakeDirectTest.java 8289607 generic-all\n+runtime\/handshake\/HandshakeSuspendExitTest.java 8289607 generic-all\n+runtime\/handshake\/SuspendBlocked.java 8289607 generic-all\n+runtime\/jni\/terminatedThread\/TestTerminatedThread.java 8289607 generic-all\n+serviceability\/jvmti\/thread\/GetThreadState\/thrstat02\/thrstat02.java 8289607 generic-all\n+vmTestbase\/nsk\/jdi\/ThreadReference\/interrupt\/interrupt001\/TestDescription.java 8289607 generic-all\n+vmTestbase\/nsk\/jvmti\/GetThreadState\/thrstat002\/TestDescription.java 8289607 generic-all\n+vmTestbase\/nsk\/monitoring\/ThreadInfo\/isSuspended\/issuspended001\/TestDescription.java 8289607 generic-all\n+vmTestbase\/nsk\/monitoring\/ThreadInfo\/isSuspended\/issuspended002\/TestDescription.java 8289607 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8205132\n- * @summary Test Thread.countStackFrames()\n- * @run testng CountStackFrames\n- *\/\n-\n-import org.testng.annotations.Test;\n-\n-public class CountStackFrames {\n-\n-    \/\/ current thread\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testCurrentThread() {\n-        Thread.currentThread().countStackFrames();\n-    }\n-\n-    \/\/ unstarted thread\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testUnstartedThread() {\n-        Thread thread = new Thread(() -> { });\n-        thread.countStackFrames();\n-    }\n-\n-    \/\/ terminated thread\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testTerminatedThread() throws Exception {\n-        Thread thread = new Thread(() -> { });\n-        thread.start();\n-        thread.join();\n-        thread.countStackFrames();\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/CountStackFrames.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug  8289610 8249627 8205132\n+ * @summary Test that Thread stop\/suspend\/resume\/countStackFrames throw UOE\n+ * @run junit DegradedMethodsThrowUOE\n+ *\/\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class DegradedMethodsThrowUOE {\n+\n+    \/**\n+     * Returns a stream of operations on a Thread that should throw UOE.\n+     *\/\n+    static Stream<Consumer<Thread>> ops() {\n+        return Stream.<Consumer<Thread>>of(\n+                \/\/ Thread::stop,\n+                Thread::suspend,\n+                Thread::resume,\n+                Thread::countStackFrames\n+        );\n+    }\n+\n+    \/**\n+     * Test degraded method on current thread.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ops\")\n+    void testCurrentThread(Consumer<Thread> op) {\n+        var thread = Thread.currentThread();\n+        assertThrows(UnsupportedOperationException.class, () -> op.accept(thread));\n+    }\n+\n+    \/**\n+     * Test degraded method on an unstarted thread.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ops\")\n+    void testUnstartedThread(Consumer<Thread> op) {\n+        Thread thread = new Thread(() -> { });\n+        assertThrows(UnsupportedOperationException.class, () -> op.accept(thread));\n+        assertTrue(thread.getState() == Thread.State.NEW);\n+    }\n+\n+    \/**\n+     * Test degraded method on a thread spinning in a loop.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ops\")\n+    void testRunnableThread(Consumer<Thread> op) throws Exception {\n+        AtomicBoolean done = new AtomicBoolean();\n+        Thread thread = new Thread(() -> {\n+            while (!done.get()) {\n+                Thread.onSpinWait();\n+            }\n+        });\n+        thread.start();\n+        try {\n+            assertThrows(UnsupportedOperationException.class, () -> op.accept(thread));\n+\n+            \/\/ thread should not terminate\n+            boolean terminated = thread.join(Duration.ofMillis(500));\n+            assertFalse(terminated);\n+        } finally {\n+            done.set(true);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test degraded method on a thread that is parked.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ops\")\n+    void testWaitingThread(Consumer<Thread> op) throws Exception {\n+        Thread thread = new Thread(LockSupport::park);\n+        thread.start();\n+        try {\n+            \/\/ wait for thread to park\n+            while ((thread.getState() != Thread.State.WAITING)) {\n+                Thread.sleep(10);\n+            }\n+            assertThrows(UnsupportedOperationException.class, () -> op.accept(thread));\n+            assertTrue(thread.getState() == Thread.State.WAITING);\n+        } finally {\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test degraded method on a terminated thread.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ops\")\n+    void testTerminatedThread(Consumer<Thread> op) throws Exception {\n+        Thread thread = new Thread(() -> { });\n+        thread.start();\n+        thread.join();\n+        assertThrows(UnsupportedOperationException.class, () -> op.accept(thread));\n+        assertTrue(thread.getState() == Thread.State.TERMINATED);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/DegradedMethodsThrowUOE.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}