{"files":[{"patch":"@@ -247,3 +247,3 @@\n- * {@link #of(String...)} obtains a {@code Locale} object from\n- * given fields ({@code language}, {@code country}, {@code variant},\n- * and\/or {@code script} defined above.\n+ * {@link #of(String, String, String)} and its overloads obtain a\n+ * {@code Locale} object from given ({@code language}, {@code country},\n+ * and\/or {@code variant} defined above.\n@@ -804,9 +804,13 @@\n-     * Returns a {@code Locale} obtained from the given\n-     * fields. Fields can take up to 4 arguments in the following order;\n-     * {@code Locale.of(}<a href=\"#def_language\">language<\/a>,\n-     * <a href=\"#def_region\">country<\/a>,\n-     * <a href=\"#def_variant\">variant<\/a>,\n-     * <a href=\"#def_script\">script<\/a>{@code )}.\n-     * Each field can be an empty String, but cannot be {@code null}.\n-     * If {@code fields} holds more than 4 arguments, {@code IllegalArgumentException}\n-     * is thrown. If no arguments are given, {@link #ROOT} is returned.\n+     * Obtains a locale from language, country and variant.\n+     * This method normalizes the language value to lowercase and\n+     * the country value to uppercase.\n+     * @implNote\n+     * <ul>\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <li>For backward compatibility reasons, this method does not make\n+     * any syntactic checks on the input.\n+     * <li>The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially,\n+     * see <a href=\"#special_cases_constructor\">Special Cases<\/a> for more information.\n+     * <\/ul>\n@@ -814,7 +818,9 @@\n-     * @apiNote This method also accepts a single {@code String} array as an argument.\n-     * Each field must be the array element in the above order. The length of the array\n-     * must not exceed 4, otherwise an {@code IllegalArgumentException} is thrown.\n-     * @param fields language, country, variant, and\/or script, cannot be {@code null}.\n-     * @return the {@code Locale} instance requested\n-     * @throws NullPointerException if any {@code fields} argument is {@code null}.\n-     * @throws IllegalArgumentException if {@code fields} holds more than 4 arguments.\n+     * @param language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n+     * up to 8 characters in length.  See the {@code Locale} class description about\n+     * valid language values.\n+     * @param country An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.\n+     * See the {@code Locale} class description about valid country values.\n+     * @param variant Any arbitrary value used to indicate a variation of a {@code Locale}.\n+     * See the {@code Locale} class description for the details.\n+     * @throws    NullPointerException thrown if any argument is null.\n+     * @return A {@code Locale} object\n@@ -823,9 +829,51 @@\n-    public static Locale of(String... fields) {\n-        return switch (fields.length) {\n-            case 0 -> ROOT;\n-            case 1 -> getInstance(fields[0], \"\", \"\", \"\", null);\n-            case 2 -> getInstance(fields[0], \"\", fields[1], \"\", null);\n-            case 3 -> getInstance(fields[0], \"\", fields[1], fields[2], null);\n-            case 4 -> getInstance(fields[0], fields[3], fields[1], fields[2], null);\n-            default -> throw new IllegalArgumentException(\"The number of arguments exceeds 4.\");\n-        };\n+    public static Locale of(String language, String country, String variant) {\n+        return getInstance(language, \"\", country, variant, null);\n+    }\n+\n+    \/**\n+     * Obtains a locale from language and country.\n+     * This method normalizes the language value to lowercase and\n+     * the country value to uppercase.\n+     * @implNote\n+     * <ul>\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <li>For backward compatibility reasons, this method does not make\n+     * any syntactic checks on the input.\n+     * <\/ul>\n+     *\n+     * @param language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n+     * up to 8 characters in length.  See the {@code Locale} class description about\n+     * valid language values.\n+     * @param country An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.\n+     * See the {@code Locale} class description about valid country values.\n+     * @throws    NullPointerException thrown if either argument is null.\n+     * @return A {@code Locale} object\n+     * @since 19\n+     *\/\n+    public static Locale of(String language, String country) {\n+        return getInstance(language, \"\", country, \"\", null);\n+    }\n+\n+    \/**\n+     * Obtains a locale from a language code.\n+     * This method normalizes the language value to lowercase.\n+     * @implNote\n+     * <ul>\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <li>For backward compatibility reasons, this method does not make\n+     * any syntactic checks on the input.\n+     * <\/ul>\n+     *\n+     * @param language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n+     * up to 8 characters in length.  See the {@code Locale} class description about\n+     * valid language values.\n+     * @throws    NullPointerException thrown if argument is null.\n+     * @return A {@code Locale} object\n+     * @since 19\n+     *\/\n+    public static Locale of(String language) {\n+        return getInstance(language, \"\", \"\", \"\", null);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":76,"deletions":28,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-    public static final Locale JA_JP_JP = Locale.forLanguageTag(\"ja-JP-x-lvariant-JP\");\n-    public static final Locale NO_NO_NY = Locale.forLanguageTag(\"no-NO-x-lvariant-NY\");\n-    public static final Locale TH_TH    = Locale.forLanguageTag(\"th-TH\");\n-    public static final Locale TH_TH_TH = Locale.forLanguageTag(\"th-TH-x-lvariant-TH\");\n+    public static final Locale JA_JP_JP = Locale.of(\"ja\", \"JP\", \"JP\");\n+    public static final Locale NO_NO_NY = Locale.of(\"no\", \"NO\", \"NY\");\n+    public static final Locale TH_TH    = Locale.of(\"th\", \"TH\");\n+    public static final Locale TH_TH_TH = Locale.of(\"th\", \"TH\", \"TH\");\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/JRELocaleConstants.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            = Set.of(Locale.ROOT, Locale.ENGLISH, Locale.US, Locale.forLanguageTag(\"en-US-POSIX\"));\n+            = Set.of(Locale.ROOT, Locale.ENGLISH, Locale.US, Locale.of(\"en\", \"US\", \"POSIX\"));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/LocaleData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *      well-formed and ill-formed arguments. Also checks the possible exceptions\n+ *      well-formed and ill-formed arguments. Also checks the possible NPEs\n@@ -40,0 +40,1 @@\n+@SuppressWarnings(\"deprecation\")\n@@ -43,1 +44,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -45,1 +45,1 @@\n-    public Object[][] data_validArgs() {\n+    public Object[][] data_1Arg() {\n@@ -48,2 +48,0 @@\n-                {Locale.ROOT, new String[0]},\n-                {Locale.ROOT, \"\"},\n@@ -51,0 +49,13 @@\n+                {Locale.JAPANESE, \"ja\"},\n+\n+                \/\/ ill-formed\n+                {Locale.ROOT, \"\"},\n+                {new Locale(\"a\"), \"a\"},\n+                {new Locale(\"xxxxxxxxxx\"), \"xxxxxxxxxx\"},\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] data_2Args() {\n+        return new Object[][]{\n+                \/\/ well-formed\n@@ -52,1 +63,1 @@\n-                {Locale.forLanguageTag(\"en-Latn-US\"), \"en\", \"US\", \"\", \"Latn\"},\n+                {Locale.JAPAN, \"ja\", \"JP\"},\n@@ -55,3 +66,3 @@\n-                {new Locale(\"a\", \"A\", \"a\"), \"a\", \"A\", \"a\"},\n-                {new Locale(\"ja\", \"JP\", \"JP\"), \"ja\", \"JP\", \"JP\"},\n-                {new Locale(\"th\", \"TH\", \"TH\"), \"th\", \"TH\", \"TH\"},\n+                {new Locale(\"\", \"US\"), \"\", \"US\"},\n+                {new Locale(\"a\", \"b\"), \"a\", \"b\"},\n+                {new Locale(\"xxxxxxxxxx\", \"yyyyyyyyyy\"), \"xxxxxxxxxx\", \"yyyyyyyyyy\"},\n@@ -62,1 +73,1 @@\n-    public Object[][] data_nullArgs() {\n+    public Object[][] data_3Args() {\n@@ -64,4 +75,12 @@\n-                {null},\n-                {\"\", null},\n-                {\"\", \"\", null},\n-                {\"\", \"\", \"\", null},\n+                \/\/ well-formed\n+                {Locale.forLanguageTag(\"en-US-POSIX\"), \"en\", \"US\", \"POSIX\"},\n+                {Locale.forLanguageTag(\"ja-JP-POSIX\"), \"ja\", \"JP\", \"POSIX\"},\n+\n+                \/\/ ill-formed\n+                {new Locale(\"\", \"\", \"POSIX\"), \"\", \"\", \"POSIX\"},\n+                {new Locale(\"a\", \"b\", \"c\"), \"a\", \"b\", \"c\"},\n+                {new Locale(\"xxxxxxxxxx\", \"yyyyyyyyyy\", \"zzzzzzzzzz\"),\n+                        \"xxxxxxxxxx\", \"yyyyyyyyyy\", \"zzzzzzzzzz\"},\n+                {new Locale(\"ja\", \"JP\", \"JP\"), \"ja\", \"JP\", \"JP\"},\n+                {new Locale(\"th\", \"TH\", \"TH\"), \"th\", \"TH\", \"TH\"},\n+                {new Locale(\"no\", \"NO\", \"NY\"), \"no\", \"NO\", \"NY\"},\n@@ -71,3 +90,8 @@\n-    @Test (dataProvider = \"data_validArgs\")\n-    public void test_validArgs(Locale expected, String... args) {\n-        assertEquals(Locale.of(args), expected);\n+    @Test (dataProvider = \"data_1Arg\")\n+    public void test_1Arg(Locale expected, String lang) {\n+        assertEquals(Locale.of(lang), expected);\n+    }\n+\n+    @Test (dataProvider = \"data_2Args\")\n+    public void test_2Args(Locale expected, String lang, String ctry) {\n+        assertEquals(Locale.of(lang, ctry), expected);\n@@ -76,3 +100,3 @@\n-    @Test (dataProvider = \"data_nullArgs\")\n-    public void test_nullArgs(String... args) {\n-        assertThrows(NullPointerException.class, () -> Locale.of(args));\n+    @Test (dataProvider = \"data_3Args\")\n+    public void test_3Args(Locale expected, String lang, String ctry, String vrnt) {\n+        assertEquals(Locale.of(lang, ctry, vrnt), expected);\n@@ -82,3 +106,4 @@\n-    public void test_IAE() {\n-        assertThrows(IllegalArgumentException.class, () -> Locale.of(\"en\", \"\", \"\", \"\", \"\"));\n-        assertThrows(IllegalArgumentException.class, () -> Locale.of(new String[5]));\n+    public void test_NPE() {\n+        assertThrows(NullPointerException.class, () -> Locale.of(null));\n+        assertThrows(NullPointerException.class, () -> Locale.of(\"\", null));\n+        assertThrows(NullPointerException.class, () -> Locale.of(\"\", \"\", null));\n","filename":"test\/jdk\/java\/util\/Locale\/TestOf.java","additions":48,"deletions":23,"binary":false,"changes":71,"status":"modified"}]}