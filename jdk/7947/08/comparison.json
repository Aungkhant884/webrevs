{"files":[{"patch":"@@ -78,1 +78,1 @@\n-            new Locale(\"\", \"\", \"\"), };\n+            Locale.ROOT, };\n","filename":"src\/demo\/share\/jfc\/CodePointIM\/com\/sun\/inputmethods\/internal\/codepointim\/CodePointInputMethodDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n- * <h3>Creating a Locale<\/h3>\n+ * <h3><a id=\"ObtainingLocale\">Obtaining a Locale<\/a><\/h3>\n@@ -235,1 +235,1 @@\n- * <p>There are several different ways to create a {@code Locale}\n+ * <p>There are several ways to obtain a {@code Locale}\n@@ -243,14 +243,0 @@\n- * <h4>Constructors<\/h4>\n- *\n- * <p>The {@code Locale} class provides three constructors:\n- * <blockquote>\n- * <pre>\n- *     {@link #Locale(String language)}\n- *     {@link #Locale(String language, String country)}\n- *     {@link #Locale(String language, String country, String variant)}\n- * <\/pre>\n- * <\/blockquote>\n- * These constructors allow you to create a {@code Locale} object\n- * with language, country and variant, but you cannot specify\n- * script or extensions.\n- *\n@@ -259,2 +245,5 @@\n- * <p>The method {@link #forLanguageTag} creates a {@code Locale}\n- * object for a well-formed BCP 47 language tag.\n+ * <p>The method {@link #forLanguageTag} obtains a {@code Locale}\n+ * object for a well-formed BCP 47 language tag. The method\n+ * {@link #of(String, String, String)} and its overloads obtain a\n+ * {@code Locale} object from given {@code language}, {@code country},\n+ * and\/or {@code variant} defined above.\n@@ -265,8 +254,3 @@\n- * that you can use to create {@code Locale} objects for commonly used\n- * locales. For example, the following creates a {@code Locale} object\n- * for the United States:\n- * <blockquote>\n- * <pre>\n- *     Locale.US\n- * <\/pre>\n- * <\/blockquote>\n+ * that you can use to obtain {@code Locale} objects for commonly used\n+ * locales. For example, {@code Locale.US} is the {@code Locale} object\n+ * for the United States.\n@@ -347,1 +331,1 @@\n- * <p>Once you've created a {@code Locale} you can query it for information\n+ * <p>Once you've obtained a {@code Locale} you can query it for information\n@@ -390,1 +374,1 @@\n- * <p>In order to maintain compatibility with existing usage, Locale's\n+ * <p>In order to maintain compatibility, Locale's\n@@ -744,0 +728,3 @@\n+     * @deprecated Locale constructors have been deprecated. See <a href =\"#ObtainingLocale\">\n+     * Obtaining a Locale<\/a> for other options.\n+     *\n@@ -753,0 +740,1 @@\n+    @Deprecated(since=\"19\")\n@@ -774,0 +762,3 @@\n+     * @deprecated Locale constructors have been deprecated. See <a href=\"#ObtainingLocale\">\n+     * Obtaining a Locale<\/a> for other options.\n+     *\n@@ -781,0 +772,1 @@\n+    @Deprecated(since=\"19\")\n@@ -797,0 +789,3 @@\n+     * @deprecated Locale constructors have been deprecated. See <a href=\"#ObtainingLocale\">\n+     * Obtaining a Locale<\/a> for other options.\n+     *\n@@ -803,0 +798,1 @@\n+    @Deprecated(since=\"19\")\n@@ -807,0 +803,76 @@\n+    \/**\n+     * Obtains a locale from language, country and variant.\n+     * This method normalizes the language value to lowercase and\n+     * the country value to uppercase.\n+     * @implNote\n+     * <ul>\n+     * <li>This method does not make any syntactic checks on the input.\n+     * Use {@link Locale.Builder} for full syntactic checks with BCP47.\n+     * <li>The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially,\n+     * see <a href=\"#special_cases_constructor\">Special Cases<\/a> for more information.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <\/ul>\n+     *\n+     * @param language A language code. See the {@code Locale} class description about\n+     * <a href=\"#def_language\">language<\/a> values.\n+     * @param country A country code. See the {@code Locale} class description about\n+     * <a href=\"#def_region\">country<\/a> values.\n+     * @param variant Any arbitrary value used to indicate a variation of a {@code Locale}.\n+     * See the {@code Locale} class description about <a href=\"#def_variant\">variant<\/a> values.\n+     * @throws    NullPointerException thrown if any argument is null.\n+     * @return A {@code Locale} object\n+     * @since 19\n+     *\/\n+    public static Locale of(String language, String country, String variant) {\n+        return getInstance(language, \"\", country, variant, null);\n+    }\n+\n+    \/**\n+     * Obtains a locale from language and country.\n+     * This method normalizes the language value to lowercase and\n+     * the country value to uppercase.\n+     * @implNote\n+     * <ul>\n+     * <li>This method does not make any syntactic checks on the input.\n+     * Use {@link Locale.Builder} for full syntactic checks with BCP47.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <\/ul>\n+     *\n+     * @param language A language code. See the {@code Locale} class description about\n+     * <a href=\"#def_language\">language<\/a> values.\n+     * @param country A country code. See the {@code Locale} class description about\n+     * <a href=\"#def_region\">country<\/a> values.\n+     * @throws    NullPointerException thrown if either argument is null.\n+     * @return A {@code Locale} object\n+     * @since 19\n+     *\/\n+    public static Locale of(String language, String country) {\n+        return getInstance(language, \"\", country, \"\", null);\n+    }\n+\n+    \/**\n+     * Obtains a locale from a language code.\n+     * This method normalizes the language value to lowercase.\n+     * @implNote\n+     * <ul>\n+     * <li>This method does not make any syntactic checks on the input.\n+     * Use {@link Locale.Builder} for full syntactic checks with BCP47.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n+     * <\/ul>\n+     *\n+     * @param language A language code. See the {@code Locale} class description about\n+     * <a href=\"#def_language\">language<\/a> values.\n+     * @throws    NullPointerException thrown if argument is null.\n+     * @return A {@code Locale} object\n+     * @since 19\n+     *\/\n+    public static Locale of(String language) {\n+        return getInstance(language, \"\", \"\", \"\", null);\n+    }\n+\n@@ -1141,1 +1213,1 @@\n-     * Can be used to create Locales.\n+     * Can be used to obtain Locales.\n@@ -1148,1 +1220,1 @@\n-     * codes that can be used to create Locales.\n+     * codes that can be used to obtain Locales.\n@@ -1181,1 +1253,1 @@\n-     * Can be used to create Locales.\n+     * Can be used to obtain Locales.\n@@ -1190,1 +1262,1 @@\n-     * not contain ALL valid codes that can be used to create Locales.\n+     * not contain ALL valid codes that can be used to obtain Locales.\n@@ -1523,1 +1595,1 @@\n-     * <p><b>Note:<\/b> Although the language tag created by this\n+     * <p><b>Note:<\/b> Although the language tag obtained by this\n@@ -1528,1 +1600,1 @@\n-     *   new Locale(\"xx\", \"YY\").toLanguageTag();<\/pre>\n+     *   Locale.forLanguageTag(\"xx-YY\").toLanguageTag();<\/pre>\n@@ -2513,1 +2585,1 @@\n-     * class.  A {@code Locale} object created by a {@code Builder} is\n+     * class.  A {@code Locale} object obtained from a {@code Builder} is\n@@ -2524,1 +2596,1 @@\n-     * object created this way might lose the variant information when\n+     * object obtained this way might lose the variant information when\n@@ -2527,2 +2599,2 @@\n-     * <p>The following example shows how to create a {@code Locale} object\n-     * with the {@code Builder}.\n+     * <p>The following example shows how to obtain a {@code Locale} object\n+     * using a {@code Builder}.\n@@ -2661,1 +2733,1 @@\n-         * <p>The country value in the {@code Locale} created by the\n+         * <p>The country value in the {@code Locale} obtained from a\n@@ -2834,1 +2906,1 @@\n-         * Returns an instance of {@code Locale} created from the fields set\n+         * Returns an instance of {@code Locale} obtained from the fields set\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":112,"deletions":40,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,4 @@\n-    public static final Locale JA_JP_JP = new Locale(\"ja\", \"JP\", \"JP\");\n-    public static final Locale NO_NO_NY = new Locale(\"no\", \"NO\", \"NY\");\n-    public static final Locale TH_TH    = new Locale(\"th\", \"TH\");\n-    public static final Locale TH_TH_TH = new Locale(\"th\", \"TH\", \"TH\");\n+    public static final Locale JA_JP_JP = Locale.of(\"ja\", \"JP\", \"JP\");\n+    public static final Locale NO_NO_NY = Locale.of(\"no\", \"NO\", \"NY\");\n+    public static final Locale TH_TH    = Locale.of(\"th\", \"TH\");\n+    public static final Locale TH_TH_TH = Locale.of(\"th\", \"TH\", \"TH\");\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/JRELocaleConstants.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,1 +372,1 @@\n-                lookupLocale = new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant());\n+                lookupLocale = Locale.of(locale.getLanguage(), locale.getCountry(), locale.getVariant());\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleServiceProviderPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            = Set.of(Locale.ROOT, Locale.ENGLISH, Locale.US, new Locale(\"en\", \"US\", \"POSIX\"));\n+            = Set.of(Locale.ROOT, Locale.ENGLISH, Locale.US, Locale.of(\"en\", \"US\", \"POSIX\"));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/LocaleData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1184,1 +1184,1 @@\n-            startupLocale = new Locale(language, country, variant);\n+            startupLocale = Locale.of(language, country, variant);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -378,1 +378,1 @@\n-            Locale locale = new Locale(language, country, variant);\n+            Locale locale = Locale.of(language, country, variant);\n@@ -553,2 +553,2 @@\n-        if (preferredLocale.equals(new Locale(\"th\", \"TH\"))) {\n-            preferredLocale = new Locale(\"th\");\n+        if (preferredLocale.equals(Locale.of(\"th\", \"TH\"))) {\n+            preferredLocale = Locale.of(\"th\");\n@@ -626,4 +626,4 @@\n-            if (locator.isLocaleAvailable(new Locale(\"th\", \"TH\"))) {\n-                advertised = new Locale(\"th\", \"TH\");\n-            } else if (locator.isLocaleAvailable(new Locale(\"th\"))) {\n-                advertised = new Locale(\"th\");\n+            if (locator.isLocaleAvailable(Locale.of(\"th\", \"TH\"))) {\n+                advertised = Locale.of(\"th\", \"TH\");\n+            } else if (locator.isLocaleAvailable(Locale.of(\"th\"))) {\n+                advertised = Locale.of(\"th\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/ExecutableInputMethodManager.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -3469,1 +3469,1 @@\n-                    return new Locale(language, country, variant);\n+                    return Locale.of(language, country, variant);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/SunFontManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-                new Locale(languageCode, countryCode)\n+                Locale.of(languageCode, countryCode)\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/I18n.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        return Collator.getInstance(new Locale(lang, country));\n+        return Collator.getInstance(Locale.of(lang, country));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/dom\/CollatorFactoryBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2428,1 +2428,1 @@\n-                    locale = new Locale(lang, country, variant);\n+                    locale = Locale.of(lang, country, variant);\n@@ -2430,1 +2430,1 @@\n-                    locale = new Locale(lang, country);\n+                    locale = Locale.of(lang, country);\n@@ -2433,1 +2433,1 @@\n-                locale = new Locale(lang);\n+                locale = Locale.of(lang);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/datatype\/XMLGregorianCalendarImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        return new Locale(language, country, variant );\n+        return Locale.of(language, country, variant);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/utils\/LocaleUtility.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,1 +278,1 @@\n-                    return ResourceBundle.getBundle(bundle, new Locale(\"en\", \"US\"));\n+                    return ResourceBundle.getBundle(bundle, Locale.US);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,3 +144,3 @@\n-    private static final Locale jaJPJP = new Locale(\"ja\", \"JP\", \"JP\");\n-    private static final Locale noNONY = new Locale(\"no\", \"NO\", \"NY\");\n-    private static final Locale thTHTH = new Locale(\"th\", \"TH\", \"TH\");\n+    private static final Locale jaJPJP = Locale.of(\"ja\", \"JP\", \"JP\");\n+    private static final Locale noNONY = Locale.of(\"no\", \"NO\", \"NY\");\n+    private static final Locale thTHTH = Locale.of(\"th\", \"TH\", \"TH\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8282819\n+ * @summary Unit tests for Locale.of() method. Those tests check the equality\n+ *      of obtained objects with ones that are gotten from other means with both\n+ *      well-formed and ill-formed arguments. Also checks the possible NPEs\n+ *      for error cases.\n+ * @run testng TestOf\n+ *\/\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+import java.util.Locale;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+@SuppressWarnings(\"deprecation\")\n+@Test\n+public class TestOf {\n+\n+    @DataProvider\n+    public Object[][] data_1Arg() {\n+        return new Object[][]{\n+                \/\/ well-formed\n+                {Locale.ENGLISH, \"en\"},\n+                {Locale.JAPANESE, \"ja\"},\n+\n+                \/\/ ill-formed\n+                {Locale.ROOT, \"\"},\n+                {new Locale(\"a\"), \"a\"},\n+                {new Locale(\"xxxxxxxxxx\"), \"xxxxxxxxxx\"},\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] data_2Args() {\n+        return new Object[][]{\n+                \/\/ well-formed\n+                {Locale.US, \"en\", \"US\"},\n+                {Locale.JAPAN, \"ja\", \"JP\"},\n+\n+                \/\/ ill-formed\n+                {new Locale(\"\", \"US\"), \"\", \"US\"},\n+                {new Locale(\"a\", \"b\"), \"a\", \"b\"},\n+                {new Locale(\"xxxxxxxxxx\", \"yyyyyyyyyy\"), \"xxxxxxxxxx\", \"yyyyyyyyyy\"},\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] data_3Args() {\n+        return new Object[][]{\n+                \/\/ well-formed\n+                {Locale.forLanguageTag(\"en-US-POSIX\"), \"en\", \"US\", \"POSIX\"},\n+                {Locale.forLanguageTag(\"ja-JP-POSIX\"), \"ja\", \"JP\", \"POSIX\"},\n+\n+                \/\/ ill-formed\n+                {new Locale(\"\", \"\", \"POSIX\"), \"\", \"\", \"POSIX\"},\n+                {new Locale(\"a\", \"b\", \"c\"), \"a\", \"b\", \"c\"},\n+                {new Locale(\"xxxxxxxxxx\", \"yyyyyyyyyy\", \"zzzzzzzzzz\"),\n+                        \"xxxxxxxxxx\", \"yyyyyyyyyy\", \"zzzzzzzzzz\"},\n+                {new Locale(\"ja\", \"JP\", \"JP\"), \"ja\", \"JP\", \"JP\"},\n+                {new Locale(\"th\", \"TH\", \"TH\"), \"th\", \"TH\", \"TH\"},\n+                {new Locale(\"no\", \"NO\", \"NY\"), \"no\", \"NO\", \"NY\"},\n+        };\n+    }\n+\n+    @Test (dataProvider = \"data_1Arg\")\n+    public void test_1Arg(Locale expected, String lang) {\n+        assertEquals(Locale.of(lang), expected);\n+    }\n+\n+    @Test (dataProvider = \"data_2Args\")\n+    public void test_2Args(Locale expected, String lang, String ctry) {\n+        assertEquals(Locale.of(lang, ctry), expected);\n+    }\n+\n+    @Test (dataProvider = \"data_3Args\")\n+    public void test_3Args(Locale expected, String lang, String ctry, String vrnt) {\n+        assertEquals(Locale.of(lang, ctry, vrnt), expected);\n+    }\n+\n+    @Test\n+    public void test_NPE() {\n+        assertThrows(NullPointerException.class, () -> Locale.of(null));\n+        assertThrows(NullPointerException.class, () -> Locale.of(\"\", null));\n+        assertThrows(NullPointerException.class, () -> Locale.of(\"\", \"\", null));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/TestOf.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}