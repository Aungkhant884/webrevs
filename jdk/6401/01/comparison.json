{"files":[{"patch":"@@ -102,1 +102,3 @@\n-     * Creates an OutputStreamWriter that uses the default character encoding.\n+     * Creates an OutputStreamWriter that uses the default character encoding, or\n+     * where {@code out} is a {@code PrintStream}, the charset used by the print\n+     * stream.\n@@ -110,1 +112,1 @@\n-                Charset.defaultCharset());\n+                out instanceof PrintStream ps ? ps.charset() : Charset.defaultCharset());\n","filename":"src\/java.base\/share\/classes\/java\/io\/OutputStreamWriter.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    private final Charset charset;\n@@ -107,0 +108,10 @@\n+    \/**\n+     * Returns the charset used in this {@code PrintStream} instance.\n+     *\n+     * @since 18\n+     * @return the charset used in this {@code PrintStream} instance\n+     *\/\n+    public Charset charset() {\n+        return charset;\n+    }\n+\n@@ -111,1 +122,2 @@\n-        this.charOut = new OutputStreamWriter(this);\n+        this.charset = out instanceof PrintStream ps ? ps.charset() : Charset.defaultCharset();\n+        this.charOut = new OutputStreamWriter(this, charset);\n@@ -127,1 +139,2 @@\n-     * to bytes using the default charset.\n+     * to bytes using the default charset, or where {@code out} is a\n+     * {@code PrintStream}, the charset used by the print stream.\n@@ -142,1 +155,2 @@\n-     * the default charset.\n+     * the default charset, or where {@code out} is a {@code PrintStream},\n+     * the charset used by the print stream.\n@@ -204,0 +218,1 @@\n+        this.charset = charset;\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintStream.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -121,1 +121,2 @@\n-     * into bytes using the default charset.\n+     * into bytes using the default charset, or where {@code out} is a\n+     * {@code PrintStream}, the charset used by the print stream.\n@@ -135,2 +136,3 @@\n-     * OutputStreamWriter, which will convert characters into bytes using the\n-     * default charset.\n+     * OutputStreamWriter, which will convert characters into bytes using\n+     * the default charset, or where {@code out} is a {@code PrintStream},\n+     * the charset used by the print stream.\n@@ -147,1 +149,1 @@\n-        this(out, autoFlush, Charset.defaultCharset());\n+        this(out, autoFlush, out instanceof PrintStream ps ? ps.charset() : Charset.defaultCharset());\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintWriter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+\/**\n+ * @test\n+ * @bug 8276970\n+ * @summary Test to verify the charset in PrintStream is inherited\n+ *      in the OutputStreamWriter\/PrintWriter\n+ * @run testng InheritEncodingTest\n+ *\/\n+@Test\n+public class InheritEncodingTest {\n+\n+    private static final String testString = \"\\u00e9\\u3042\"; \/\/ \"éあ\"\n+\n+    @DataProvider\n+    public Object[][] encodings() {\n+        return new Object[][]{\n+                {StandardCharsets.ISO_8859_1},\n+                {StandardCharsets.US_ASCII},\n+                {StandardCharsets.UTF_8},\n+                {StandardCharsets.UTF_16},\n+                {StandardCharsets.UTF_16BE},\n+                {StandardCharsets.UTF_16LE},\n+        };\n+    }\n+\n+    @Test (dataProvider = \"encodings\")\n+    public void testOutputStreamWriter(Charset stdCharset) throws IOException {\n+        var ba = new ByteArrayOutputStream();\n+        var ps = new PrintStream(ba, true, stdCharset);\n+        var expected = new String(testString.getBytes(stdCharset), stdCharset);\n+\n+        \/\/ tests OutputStreamWriter's encoding explicitly\n+        var osw = new OutputStreamWriter(ps);\n+        assertEquals(Charset.forName(osw.getEncoding()), stdCharset);\n+\n+        \/\/ tests roundtrip result\n+        osw.write(testString);\n+        osw.flush();\n+        var result = ba.toString(stdCharset);\n+        assertEquals(result, expected);\n+    }\n+\n+    @Test (dataProvider = \"encodings\")\n+    public void testPrintWriter(Charset stdCharset) throws IOException {\n+        var ba = new ByteArrayOutputStream();\n+        var ps = new PrintStream(ba, true, stdCharset);\n+        var expected = new String(testString.getBytes(stdCharset), stdCharset);\n+\n+        \/\/ tests roundtrip result\n+        var pw = new PrintWriter(ps);\n+        pw.write(testString);\n+        pw.flush();\n+        var result = ba.toString(stdCharset);\n+        assertEquals(result, expected);\n+    }\n+\n+    @Test (dataProvider = \"encodings\")\n+    public void testPrintStream(Charset stdCharset) throws IOException {\n+        var ba = new ByteArrayOutputStream();\n+        var ps = new PrintStream(ba, true, stdCharset);\n+        var expected = new String(testString.getBytes(stdCharset), stdCharset);\n+\n+        \/\/ tests PrintStream's charset explicitly\n+        var psWrapper = new PrintStream(ps);\n+        assertEquals(psWrapper.charset(), stdCharset);\n+\n+        \/\/ tests roundtrip result\n+        psWrapper.print(testString);\n+        psWrapper.flush();\n+        var result = ba.toString(stdCharset);\n+        assertEquals(result, expected);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/PrintStream\/InheritEncodingTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}