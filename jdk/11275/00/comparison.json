{"files":[{"patch":"@@ -159,1 +159,4 @@\n-    private boolean started; \/\/ always guarded by lock\n+    \/\/ always guarded by lock\n+    private boolean started;\n+    private Duration maxAge;\n+    private long maxSize;\n@@ -418,1 +421,5 @@\n-        repository.setMaxAge(maxAge);\n+        synchronized (lock) {\n+            repository.setMaxAge(maxAge);\n+            this.maxAge = maxAge;\n+            updateOnCompleteHandler();\n+        }\n@@ -444,1 +451,5 @@\n-        repository.setMaxSize(maxSize);\n+        synchronized (lock) {\n+            repository.setMaxSize(maxSize);\n+            this.maxSize = maxSize;\n+            updateOnCompleteHandler();\n+        }\n@@ -648,0 +659,9 @@\n+    private void updateOnCompleteHandler() {\n+        if (maxAge != null || maxSize != 0) {\n+            \/\/ User has set a chunk removal policy\n+            ManagementSupport.setOnChunkCompleteHandler(stream, null);\n+        } else {\n+            ManagementSupport.setOnChunkCompleteHandler(stream, new ChunkConsumer(repository));\n+        }\n+    }\n+\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/RemoteRecordingStream.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.List;\n@@ -34,0 +35,1 @@\n+import java.util.function.Consumer;\n@@ -39,0 +41,1 @@\n+import jdk.jfr.Recording;\n@@ -66,0 +69,3 @@\n+        testSetNoPolicy();\n+        testSetMaxAge();\n+        testSetMaxSize();\n@@ -94,0 +100,64 @@\n+    private static List<RecordedEvent> recordWithPolicy(String filename, Consumer<RemoteRecordingStream> policy) throws Exception {\n+        CountDownLatch latch1 = new CountDownLatch(1);\n+        CountDownLatch latch2 = new CountDownLatch(2);\n+        CountDownLatch latch3 = new CountDownLatch(3);\n+        try (var rs = new RemoteRecordingStream(CONNECTION)) {\n+            policy.accept(rs);\n+            rs.onEvent(e -> {\n+                latch1.countDown();\n+                latch2.countDown();\n+                latch3.countDown();\n+            });\n+            rs.startAsync();\n+            DumpEvent e1 = new DumpEvent();\n+            e1.commit();\n+            latch1.await();\n+            \/\/ Force chunk rotation\n+            try (Recording r = new Recording()) {\n+                r.start();\n+                DumpEvent e2 = new DumpEvent();\n+                e2.commit();\n+            }\n+            latch2.await();\n+            DumpEvent e3 = new DumpEvent();\n+            e3.commit();\n+            latch3.await();\n+            Path p = Path.of(filename);\n+            rs.dump(p);\n+            return RecordingFile.readAllEvents(p);\n+        }\n+    }\n+\n+    private static void testSetMaxSize() throws Exception {\n+        var events = recordWithPolicy(\"max-size.jfr\", rs -> {\n+            \/\/ keeps all events for the dump\n+            rs.setMaxSize(100_000_000);\n+        });\n+        if (events.size() != 3) {\n+            throw new Exception(\"Expected all 3 events to be in dump after setMaxSize\");\n+        }\n+\n+    }\n+\n+    private static void testSetMaxAge() throws Exception {\n+        var events = recordWithPolicy(\"max-age.jfr\", rs -> {\n+            \/\/ keeps all events for the dump\n+            rs.setMaxAge(Duration.ofDays(1));\n+        });\n+        if (events.size() != 3) {\n+            throw new Exception(\"Expected all 3 events to be in dump after setMaxAge\");\n+        }\n+\n+    }\n+\n+    private static void testSetNoPolicy() throws Exception {\n+        var events = recordWithPolicy(\"no-policy.jfr\", rs -> {\n+            \/\/ use default policy, remove after consumption\n+        });\n+        \/\/ Since latch3 have been triggered at least two events\/chunks\n+        \/\/ before must have been consumed, possibly 3, but it's a race.\n+        if (events.size() > 1) {\n+            throw new Exception(\"Expected at most one event to not be consumed\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestRemoteDump.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"}]}