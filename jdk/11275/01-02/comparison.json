{"files":[{"patch":"@@ -46,1 +46,1 @@\n- * @summary Tests that evenst arrive in the same order they were comitted\n+ * @summary Tests that chunks arrive in the same order they were committed\n@@ -81,1 +81,0 @@\n-            rs.setOrdered(true);\n@@ -100,1 +99,1 @@\n-            \/\/ before dumping\n+            \/\/ before invoking dump()\n@@ -102,2 +101,2 @@\n-            rs.dump(file);\n-            \/\/ release consumer thread\n+            \/\/ To stress the implementation, release consumer thread\n+            \/\/ during the dump\n@@ -105,1 +104,1 @@\n-            \/\/ Print event order for debugging purposes\n+            rs.dump(file);\n@@ -107,2 +106,2 @@\n-            for (var event : events) {\n-                System.out.println(event);\n+            if (events.isEmpty()) {\n+                throw new AssertionError(\"No events found\");\n@@ -110,0 +109,2 @@\n+            \/\/ Print events for debugging purposes\n+            events.forEach(System.out::println);\n@@ -111,1 +112,1 @@\n-            for (var event : RecordingFile.readAllEvents(file)) {\n+            for (var event : events) {\n@@ -116,1 +117,1 @@\n-                expected = value + 1;\n+                expected++;\n@@ -122,4 +123,1 @@\n-        while (true) {\n-            if (Files.list(directory).count() > 6) {\n-                return;\n-            }\n+        while (Files.list(directory).count() < 7) {\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestDumpOrder.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}