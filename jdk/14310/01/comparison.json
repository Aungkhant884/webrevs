{"files":[{"patch":"@@ -2181,0 +2181,7 @@\n+        } else {\n+            var p = docTrees.getPath(e);\n+            \/\/ if docTrees.getPath itself has put a path for e into elementToTreePath\n+            \/\/ (see 8304878), we assume that the path already in the map is equivalent\n+            \/\/ to the path we are about to put: hence, no harm if replaced\n+            elementToTreePath.put(e, p);\n+            return p;\n@@ -2182,1 +2189,0 @@\n-        return elementToTreePath.computeIfAbsent(e, docTrees::getPath);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8304878\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestLatePackageDiscovery\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestLatePackageDiscovery extends JavadocTester {\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        new TestLatePackageDiscovery().runTests();\n+    }\n+\n+    @Test\n+    public void testLatePackageDiscovery(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src.resolve(\"test.bar\"),\n+                \"module test.bar { exports bar; }\",\n+                \"package bar;\",\n+                \"package bar; class Base { public void m() { } }\",\n+                \"package bar; public class Bar extends Base { }\");\n+\n+        tb.writeJavaFiles(src.resolve(\"test.foo\"),\n+                \"module test.foo { exports foo; requires test.bar; }\",\n+                \"package foo;\",\n+                \"package foo; public class Foo extends bar.Bar { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--module-source-path\", src.toString(),\n+                \"--module\", \"test.foo\",\n+                \"-nodeprecated\");\n+\n+        setAutomaticCheckNoStacktrace(true); \/\/ no exceptions!\n+        checkExit(Exit.OK);\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLatePackageDiscovery\/TestLatePackageDiscovery.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}