{"files":[{"patch":"@@ -613,2 +613,1 @@\n-    sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java \\\n-    sun\/security\/tools\/keytool\/i18n.java\n+    sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java\n@@ -618,1 +617,2 @@\n-    java\/util\/TimeZone\/DefaultTimeZoneTest.java\n+    java\/util\/TimeZone\/DefaultTimeZoneTest.java \\\n+    sun\/security\/tools\/keytool\/i18n.java\n","filename":"test\/jdk\/TEST.groups","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 4348369 8076069\n- * @summary keytool not i18n compliant\n+ * @bug 4348369 8076069 8294994\n+ * @summary keytool i18n compliant\n@@ -29,1 +29,3 @@\n- * @run main\/manual i18n\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ * @run main\/manual\/othervm i18n en\n@@ -32,1 +34,393 @@\n-import java.nio.file.Path;\n+\/*\n+ * @test\n+ * @bug 4348369 8076069 8294994\n+ * @summary keytool i18n compliant\n+ * @author charlie lai\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ * @run main\/manual\/othervm i18n de\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4348369 8076069 8294994\n+ * @summary keytool i18n compliant\n+ * @author charlie lai\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ * @run main\/manual\/othervm i18n ja\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4348369 8076069 8294994\n+ * @summary keytool i18n compliant\n+ * @author charlie lai\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ * @run main\/manual\/othervm i18n zh CN\n+ *\/\n+\n+import javax.swing.*;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.Locale;\n+\n+public class i18n {\n+    private static final String[][] TABLE = new String[][]{\n+            {\"-help\", \"All the output in this test should be in ${LANG}. \"\n+                    + \"Otherwise, the test failed.\"},\n+\n+            {\"-genkeypair -keyalg DSA -v -keysize 512 \"\n+                    + \"-dname cn=Name,ou=Java,o=Oracle,l=City,s=State,c=Country \"\n+                    + \"-storepass a \"\n+                    + \"-keypass a \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang.Exception: \"\n+                            + \"Keystore password must be at least 6 characters.\"},\n+\n+            {\"-genkeypair -keyalg DSA -v -keysize 512 \"\n+                    + \"-dname cn=Name,ou=Java,o=Oracle,l=City,s=State,c=Country \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: generated a 512 bit DSA key pair \"\n+                            + \"for CN=Name, OU=Java, O=Oracle, L=City, ST=State \"\n+                            + \"C=Country.\"},\n+\n+            {\"-list -v -storepass password -keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: contains 1 keystore entry with \"\n+                            + \"512-bit DSA key algorithm for CN=Name, OU=Java, \"\n+                            + \"O=Oracle, L=City, ST=State C=Country.\"},\n+\n+            {\"-list -v -storepass a -keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error:java.io.IOException: \"\n+                            + \"keystore password was incorrect.\"},\n+\n+            {\"-genkey -keyalg DSA -v -keysize 512 \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang.Exception: \"\n+                            + \"alias 'mykey' already exists.\"},\n+\n+            {\"-genkeypair -keyalg DSA -v -keysize 512 \"\n+                    + \"-dname cn=Name,ou=Java,o=Oracle,l=City,s=State,c=Country \"\n+                    + \"-alias mykey2 \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: generated a 512 bit DSA key pair \"\n+                            + \"for CN=Name, OU=Java, O=Oracle, L=City, ST=State \"\n+                            + \"C=Country.\"},\n+\n+            {\"-list -v -storepass password -keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: contains 2 keystore entries \"\n+                            + \"(alias name mykey & mykey2), both with 512-bit DSA\"\n+                            + \" key algorithm for CN=Name, OU=Java, O=Oracle, \"\n+                            + \"L=City, ST=State C=Country.\"},\n+\n+            {\"-keypasswd -v \"\n+                    + \"-alias mykey2 \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-new a \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang.Exception: \"\n+                            + \"New password must be at least 6 characters.\"},\n+\n+            {\"-keypasswd -v \"\n+                    + \"-alias mykey2 \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-new aaaaaa \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: -keypasswd \"\n+                            + \"commands not supported if -storetype is PKCS12.\"},\n+\n+            {\"-genkeypair -keyalg DSA -v -keysize 512 \"\n+                    + \"-dname cn=Name,ou=Java,o=Oracle,l=City,s=State,c=Country \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-keystore .\/i18n.jks \"\n+                    + \"-storetype JKS\",\n+                    \"Output in ${LANG}. Check: generated a 512 bit DSA key pair \"\n+                            + \"with a JKS warning.\"},\n+\n+            {\"-keypasswd -v \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-new aaaaaa \"\n+                    + \"-keystore .\/i18n.jks\",\n+                    \"Output in ${LANG}. Check: storing i18n.jks with a JKS warning.\"},\n+\n+            {\"-selfcert -v -alias mykey \"\n+                    + \"-storepass password \"\n+                    + \"-keypass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: generated a new certificate \"\n+                            + \"(self-signed).\"},\n+\n+            {\"-list -v -storepass password -keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: contains 2 keystore entries \"\n+                            + \"(alias name mykey & mykey2), both with 512-bit DSA\"\n+                            + \" key algorithm for CN=Name, OU=Java, O=Oracle, \"\n+                            + \"L=City, ST=State C=Country.\"},\n+\n+            {\"-export -v -alias mykey \"\n+                    + \"-file backup.keystore \"\n+                    + \"-storepass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check: certificate stored in file <backup\"\n+                            + \".keystore>.\"},\n+\n+            {\"-import -v \"\n+                    + \"-file backup.keystore \"\n+                    + \"-storepass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: reply and certificate \"\n+                            + \"in keystore are identical.\"},\n+\n+            {\"-printcert -file backup.keystore\",\n+                    \"Output in ${LANG}. Check: 512 bit DSA key pair for CN=Name,\"\n+                            + \" OU=Java, O=Oracle, L=City, ST=State C=Country.\"},\n+\n+            {\"-list -storepass password -keystore .\/i18n.keystore \"\n+                    + \"-addprovider SUN\",\n+                    \"Output in ${LANG}. Check: contains 2 keystore entries \"\n+                            + \"(alias name mykey & mykey2).\"},\n+\n+            {\"-storepasswd \"\n+                    + \"-storepass password \"\n+                    + \"-new a \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang.Exception: \"\n+                            + \"New password must be at least 6 characters.\"},\n+\n+            {\"-storepasswd \"\n+                    + \"-storetype PKCS11 \"\n+                    + \"-keystore NONE\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang\"\n+                            + \".UnsupportedOperationException: -storepasswd and \"\n+                            + \"-keypasswd commands not supported if -storetype is\"\n+                            + \" PKCS11.\"},\n+\n+            {\"-keypasswd \"\n+                    + \"-storetype PKCS11 \"\n+                    + \"-keystore NONE\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang\"\n+                            + \".UnsupportedOperationException: -storepasswd and \"\n+                            + \"-keypasswd commands not supported if -storetype is\"\n+                            + \" PKCS11.\"},\n+\n+            {\"-list -protected \"\n+                    + \"-storepass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang\"\n+                            + \".IllegalArgumentException: if -protected is \"\n+                            + \"specified, then -storepass, -keypass, and -new \"\n+                            + \"must not be specified.\"},\n+\n+            {\"-keypasswd -protected \"\n+                    + \"-storepass password \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang\"\n+                            + \".IllegalArgumentException: if -protected is \"\n+                            + \"specified, then -storepass, -keypass, and -new \"\n+                            + \"must not be specified.\"},\n+\n+            {\"-keypasswd -protected \"\n+                    + \"-storepass password \"\n+                    + \"-new aaaaaa \"\n+                    + \"-keystore .\/i18n.keystore\",\n+                    \"Output in ${LANG}. Check keytool error: java.lang\"\n+                            + \".IllegalArgumentException: if -protected is \"\n+                            + \"specified, then -storepass, -keypass, and -new \"\n+                            + \"must not be specified.\"},\n+    };\n+    private static String TEST_SRC = System.getProperty(\"test.src\");\n+    private static int TIMEOUT_MS = 120000;\n+    private volatile boolean failed = false;\n+    private volatile boolean aborted = false;\n+    private Thread currentThread = null;\n+\n+    public static class DialogBuilder {\n+        private JDialog dialog;\n+        private JTextArea instructionsText;\n+        private JTextArea messageText;\n+        private JButton pass;\n+        private JButton fail;\n+\n+        public DialogBuilder() {\n+            dialog = new JDialog(new JFrame());\n+            dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n+            instructionsText = new JTextArea(\"\", 5, 100);\n+\n+            dialog.add(\"North\", new JScrollPane(instructionsText,\n+                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                    JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS));\n+\n+            messageText = new JTextArea(\"\", 20, 100);\n+            dialog.add(\"Center\", new JScrollPane(messageText,\n+                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                    JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS));\n+\n+            JPanel buttons = new JPanel();\n+            pass = new JButton(\"pass\");\n+            pass.setActionCommand(\"pass\");\n+            buttons.add(\"East\", pass);\n+\n+            fail = new JButton(\"fail\");\n+            fail.setActionCommand(\"fail\");\n+            buttons.add(\"West\", fail);\n+\n+            dialog.add(\"South\", buttons);\n+        }\n+\n+        public DialogBuilder setTitle(String title) {\n+            dialog.setTitle(title);\n+            return this;\n+        }\n+\n+        public DialogBuilder setInstruction(String instruction) {\n+            instructionsText.setText(\"Test instructions:\\n\" + instruction);\n+            return this;\n+        }\n+\n+        public DialogBuilder setMessage(String message) {\n+            messageText.setText(message);\n+            return this;\n+        }\n+\n+        public DialogBuilder setPassAction(ActionListener action) {\n+            pass.addActionListener(action);\n+            return this;\n+        }\n+\n+        public DialogBuilder setFailAction(ActionListener action) {\n+            fail.addActionListener(action);\n+            return this;\n+        }\n+\n+        public DialogBuilder setAbortAction(Runnable action) {\n+            dialog.addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowClosing(WindowEvent e) {\n+                    super.windowClosing(e);\n+                    action.run();\n+                }\n+            });\n+            return this;\n+        }\n+\n+        public JDialog build() {\n+            dialog.pack();\n+            return dialog;\n+        }\n+    }\n+\n+    public static void executeKeytool(String command) throws Exception {\n+        sun.security.tools.keytool.Main.main(command.split(\"\\\\s+\"));\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length == 1) {\n+            Locale.setDefault(Locale.of(args[0]));\n+        } else if (args.length == 2) {\n+            Locale.setDefault(Locale.of(args[0], args[1]));\n+        }\n+        final String LANG = Locale.getDefault().getDisplayLanguage();\n+\n+        boolean testFailed = false;\n+        i18n i18nTest = new i18n();\n+\n+        for (String[] entry : TABLE) {\n+            String command = entry[0].replaceAll(\"\\\\$\\\\{TEST_SRC\\\\}\", TEST_SRC);\n+            String instruction = entry[1].replaceAll(\"\\\\$\\\\{LANG\\\\}\", LANG);\n+\n+            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\n+            doKeytool(command, new PrintStream(buffer, true));\n+\n+            testFailed |= i18nTest.validate(command, instruction, buffer.toString());\n+        }\n+\n+        if (testFailed) {\n+            throw new RuntimeException(\"One or more tests failed.\");\n+        }\n+    }\n+\n+    public static void doKeytool(String command, PrintStream dest) {\n+        \/\/ Backups stdout and stderr.\n+        PrintStream origStdOut = System.out;\n+        PrintStream origErrOut = System.err;\n+\n+        \/\/ Redirects the system output to a custom one.\n+        System.setOut(dest);\n+        System.setErr(dest);\n+\n+        try {\n+            executeKeytool(\"-debug \" + command);\n+        } catch (Exception e) {\n+            \/\/ Do nothing.\n+        } finally {\n+            System.setOut(origStdOut);\n+            System.setErr(origErrOut);\n+        }\n+    }\n+\n+    public boolean validate(String command, String instruction, String message) {\n+        failed = false;\n+        currentThread = Thread.currentThread();\n+        JDialog dialog = new DialogBuilder()\n+                .setTitle(\"keytool \" + command)\n+                .setInstruction(instruction)\n+                .setMessage(message)\n+                .setPassAction(e -> pass())\n+                .setFailAction(e -> fail())\n+                .setAbortAction(() -> abort())\n+                .build();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                dialog.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        try {\n+            Thread.sleep(TIMEOUT_MS);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\n+                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n+        } catch (InterruptedException e) {\n+            if (aborted) {\n+                throw new RuntimeException(\"TEST ABORTED\");\n+            }\n+\n+            if (failed) {\n+                System.out.println(command + \": TEST FAILED\");\n+                System.out.println(message);\n+            } else {\n+                System.out.println(command + \": TEST PASSED\");\n+            }\n+        } finally {\n+            dialog.dispose();\n+        }\n+\n+        return failed;\n+    }\n+\n+    public void pass() {\n+        failed = false;\n+        currentThread.interrupt();\n+    }\n+\n+    public void fail() {\n+        failed = true;\n+        currentThread.interrupt();\n+    }\n@@ -34,4 +428,3 @@\n-public class i18n{\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"see i18n.html\");\n-        System.out.println(Path.of(System.getProperty(\"test.jdk\"), \"bin\", \"keytool\"));\n+    public void abort() {\n+        aborted = true;\n+        currentThread.interrupt();\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/i18n.java","additions":402,"deletions":9,"binary":false,"changes":411,"status":"modified"}]}