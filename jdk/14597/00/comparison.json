{"files":[{"patch":"@@ -31,0 +31,2 @@\n+#include \"oops\/symbol.hpp\"\n+#include \"runtime\/os.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2849,0 +2849,25 @@\n+\/\/ The constant pool is on stack if any of the methods are executing or\n+\/\/ referenced by handles.\n+bool InstanceKlass::on_stack() const {\n+  return _constants->on_stack();\n+}\n+\n+Symbol* InstanceKlass::source_file_name() const               { return _constants->source_file_name(); }\n+u2 InstanceKlass::source_file_name_index() const              { return _constants->source_file_name_index(); }\n+void InstanceKlass::set_source_file_name_index(u2 sourcefile_index) { _constants->set_source_file_name_index(sourcefile_index); }\n+\n+\/\/ minor and major version numbers of class file\n+u2 InstanceKlass::minor_version() const                 { return _constants->minor_version(); }\n+void InstanceKlass::set_minor_version(u2 minor_version) { _constants->set_minor_version(minor_version); }\n+u2 InstanceKlass::major_version() const                 { return _constants->major_version(); }\n+void InstanceKlass::set_major_version(u2 major_version) { _constants->set_major_version(major_version); }\n+\n+InstanceKlass* InstanceKlass::get_klass_version(int version) {\n+  for (InstanceKlass* ik = this; ik != nullptr; ik = ik->previous_versions()) {\n+    if (ik->constants()->version() == version) {\n+      return ik;\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -2867,0 +2892,4 @@\n+Symbol* InstanceKlass::generic_signature() const                   { return _constants->generic_signature(); }\n+u2 InstanceKlass::generic_signature_index() const                  { return _constants->generic_signature_index(); }\n+void InstanceKlass::set_generic_signature_index(u2 sig_index)      { _constants->set_generic_signature_index(sig_index); }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"oops\/constantPool.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"runtime\/javaThread.hpp\"\n@@ -38,0 +38,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -43,0 +44,1 @@\n+class ConstantPool;\n@@ -45,0 +47,1 @@\n+class Monitor;\n@@ -648,3 +651,3 @@\n-  Symbol* source_file_name() const               { return _constants->source_file_name(); }\n-  u2 source_file_name_index() const              { return _constants->source_file_name_index(); }\n-  void set_source_file_name_index(u2 sourcefile_index) { _constants->set_source_file_name_index(sourcefile_index); }\n+  Symbol* source_file_name() const;\n+  u2 source_file_name_index() const;\n+  void set_source_file_name_index(u2 sourcefile_index);\n@@ -653,4 +656,4 @@\n-  u2 minor_version() const                 { return _constants->minor_version(); }\n-  void set_minor_version(u2 minor_version) { _constants->set_minor_version(minor_version); }\n-  u2 major_version() const                 { return _constants->major_version(); }\n-  void set_major_version(u2 major_version) { _constants->set_major_version(major_version); }\n+  u2 minor_version() const;\n+  void set_minor_version(u2 minor_version);\n+  u2 major_version() const;\n+  void set_major_version(u2 major_version);\n@@ -693,8 +696,1 @@\n-  InstanceKlass* get_klass_version(int version) {\n-    for (InstanceKlass* ik = this; ik != nullptr; ik = ik->previous_versions()) {\n-      if (ik->constants()->version() == version) {\n-        return ik;\n-      }\n-    }\n-    return nullptr;\n-  }\n+  InstanceKlass* get_klass_version(int version);\n@@ -776,3 +772,3 @@\n-  Symbol* generic_signature() const                   { return _constants->generic_signature(); }\n-  u2 generic_signature_index() const                  { return _constants->generic_signature_index(); }\n-  void set_generic_signature_index(u2 sig_index)      { _constants->set_generic_signature_index(sig_index); }\n+  Symbol* generic_signature() const;\n+  u2 generic_signature_index() const;\n+  void set_generic_signature_index(u2 sig_index);\n@@ -1000,1 +996,1 @@\n-  bool on_stack() const { return _constants->on_stack(); }\n+  bool on_stack() const; \/\/ virtual\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"classfile\/javaClasses.hpp\"\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -33,1 +31,0 @@\n-#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"oops\/symbol.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}