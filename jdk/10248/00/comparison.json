{"files":[{"patch":"@@ -321,0 +321,1 @@\n+                        case CPUSET_CTRL:\n@@ -324,21 +325,1 @@\n-                            assert info.getMountPoint() == null;\n-                            assert info.getMountRoot() == null;\n-                            info.setMountPoint(mountPath);\n-                            info.setMountRoot(mountRoot);\n-                            cgroupv1ControllerFound = true;\n-                            break;\n-                        }\n-                        case CPUSET_CTRL: {\n-                            CgroupInfo info = infos.get(controllerName);\n-                            if (info.getMountPoint() != null) {\n-                                \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n-                                \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-                                \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n-                                if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n-                                    info.setMountPoint(mountPath);\n-                                    info.setMountRoot(mountRoot);\n-                                }\n-                            } else {\n-                                info.setMountPoint(mountPath);\n-                                info.setMountRoot(mountRoot);\n-                            }\n+                            setMountPoints(info, mountPath, mountRoot);\n@@ -358,4 +339,1 @@\n-                        assert info.getMountPoint() == null;\n-                        assert info.getMountRoot() == null;\n-                        info.setMountPoint(mountPath);\n-                        info.setMountRoot(mountRoot);\n+                        setMountPoints(info, mountPath, mountRoot);\n@@ -370,0 +348,16 @@\n+    private static void setMountPoints(CgroupInfo info, String mountPath, String mountRoot) {\n+        if (info.getMountPoint() != null) {\n+            \/\/ On some systems duplicate controllers get mounted in addition to\n+            \/\/ the main cgroup controllers (which are under \/sys\/fs\/cgroup). In that\n+            \/\/ case pick the main one and discard others as the limits\n+            \/\/ are associated with the ones in \/sys\/fs\/cgroup.\n+            if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n+                info.setMountPoint(mountPath);\n+                info.setMountRoot(mountRoot);\n+            }\n+        } else {\n+            info.setMountPoint(mountPath);\n+            info.setMountRoot(mountRoot);\n+        }\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+            testOperatingSystemMXBeanAwareness(\n+                \"100M\", Integer.toString(((int) Math.pow(2, 20)) * 100),\n+                \"200M\", Integer.toString(((int) Math.pow(2, 20)) * (200 - 100)),\n+                true \/* additional cgroup fs mounts *\/\n+            );\n@@ -173,0 +178,6 @@\n+        testOperatingSystemMXBeanAwareness(memoryAllocation, expectedMemory, swapAllocation, expectedSwap, false);\n+    }\n+\n+    private static void testOperatingSystemMXBeanAwareness(String memoryAllocation, String expectedMemory,\n+            String swapAllocation, String expectedSwap, boolean addCgroupMounts) throws Exception {\n+\n@@ -184,0 +195,3 @@\n+        if (addCgroupMounts) {\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * @bug 8287107 8287073\n+ * @bug 8287107 8287073 8293540\n@@ -75,2 +75,2 @@\n-    private Path cgroupv1MntInfoDoubleCpusets;\n-    private Path cgroupv1MntInfoDoubleCpusets2;\n+    private Path cgroupv1MntInfoDoubleControllers;\n+    private Path cgroupv1MntInfoDoubleControllers2;\n@@ -197,3 +197,7 @@\n-    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n-    private String mntInfoCgroupsV1DoubleCpuset = mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n-    private String mntInfoCgroupsV1DoubleCpuset2 = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1MoreControllers = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\" +\n+            \"35 30 0:31 \/ \/cgroup-in\/memory rw,nosuid,nodev,noexec,relatime shared:7 - cgroup none rw,seclabel,memory\\n\" +\n+            \"36 30 0:32 \/ \/cgroup-in\/pids rw,nosuid,nodev,noexec,relatime shared:8 - cgroup none rw,seclabel,pids\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/cpu,cpuacct rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,cpu,cpuacct\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/blkio rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,blkio\\n\";\n+    private String mntInfoCgroupsV1DoubleControllers = mntInfoHybrid + mntInfoCgroupv1MoreControllers;\n+    private String mntInfoCgroupsV1DoubleControllers2 = mntInfoCgroupv1MoreControllers + mntInfoHybrid;\n@@ -278,2 +282,2 @@\n-            cgroupv1MntInfoDoubleCpusets = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset\");\n-            Files.writeString(cgroupv1MntInfoDoubleCpusets, mntInfoCgroupsV1DoubleCpuset);\n+            cgroupv1MntInfoDoubleControllers = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers\");\n+            Files.writeString(cgroupv1MntInfoDoubleControllers, mntInfoCgroupsV1DoubleControllers);\n@@ -281,2 +285,2 @@\n-            cgroupv1MntInfoDoubleCpusets2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset2\");\n-            Files.writeString(cgroupv1MntInfoDoubleCpusets2, mntInfoCgroupsV1DoubleCpuset2);\n+            cgroupv1MntInfoDoubleControllers2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers2\");\n+            Files.writeString(cgroupv1MntInfoDoubleControllers2, mntInfoCgroupsV1DoubleControllers2);\n@@ -393,2 +397,2 @@\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets);\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets2);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers2);\n@@ -397,1 +401,1 @@\n-    private void doMultipleCpusetMountsTest(Path info) throws IOException {\n+    private void doMultipleMountsTest(Path info) throws IOException {\n@@ -409,0 +413,7 @@\n+        \/\/ Ensure controllers at \/sys\/fs\/cgroup will be used\n+        String[] ctrlNames = new String[] { \"memory\", \"cpu\", \"cpuacct\", \"blkio\", \"pids\" };\n+        for (int i = 0; i < ctrlNames.length; i++) {\n+            CgroupInfo cinfo = res.getInfos().get(ctrlNames[i]);\n+            assertTrue(cinfo.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\/\"));\n+            assertEquals(\"\/\", cinfo.getMountRoot());\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":24,"deletions":13,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify that -XshowSettings:system works\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @run main\/timeout=360 TestDockerBasic\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+\n+public class TestDockerBasic {\n+    private static final String imageName = Common.imageName(\"javaDockerBasic\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testXshowSettingsSystem(true);\n+            testXshowSettingsSystem(false);\n+        } finally {\n+            DockerTestUtils.removeDockerImage(imageName);\n+        }\n+    }\n+\n+    private static void testXshowSettingsSystem(boolean addCgroupMounts) throws Exception {\n+        String testMsg = (addCgroupMounts ? \" with \" : \" without \") + \" additional cgroup FS mounts in \/cgroup-in\";\n+        Common.logNewTestCase(\"Test TestDockerBasic \" + testMsg);\n+        DockerRunOptions opts =\n+                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"-version\");\n+        opts.addJavaOpts(\"-esa\");\n+        opts.addJavaOpts(\"-XshowSettings:system\");\n+        opts.addDockerOpts(\"--memory\", \"300m\");\n+        if (addCgroupMounts) {\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0)\n+            .shouldNotContain(\"AssertionError\")\n+            .shouldContain(\"Memory Limit: 300.00M\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerBasic.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -68,0 +68,1 @@\n+            testCpuSet(\"0\", true \/* additional cgroup fs mount *\/);\n@@ -73,0 +74,1 @@\n+            testCpuQuota(200 * 1000, 100 * 1000, true \/* additional cgroup fs mount *\/);\n@@ -111,0 +113,4 @@\n+        testCpuSet(value, false);\n+    }\n+\n+    private static void testCpuSet(String value, boolean addCgroupMount) throws Exception {\n@@ -115,0 +121,3 @@\n+        if (addCgroupMount) {\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n@@ -123,0 +132,4 @@\n+        testCpuQuota(quota, period, false);\n+    }\n+\n+    private static void testCpuQuota(long quota, long period, boolean addCgroupMount) throws Exception {\n@@ -127,0 +140,3 @@\n+        if (addCgroupMount) {\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerCpuMetrics.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+            \/\/ Memory limit test with additional cgroup fs mounted\n+            testMemoryLimit(\"500m\", true \/* cgroup fs mount *\/);\n@@ -88,0 +90,4 @@\n+        testMemoryLimit(value, false);\n+    }\n+\n+    private static void testMemoryLimit(String value, boolean addCgroupMount) throws Exception {\n@@ -96,0 +102,3 @@\n+        if (addCgroupMount) {\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}