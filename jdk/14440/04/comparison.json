{"files":[{"patch":"@@ -336,0 +336,1 @@\n+    _committed_regions.clear();\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"services\/memTracker.hpp\"\n+#include \"services\/virtualMemoryTracker.hpp\"\n+#include \"unittest.hpp\"\n+\n+\/\/ Tests the assignment operator of ReservedMemoryRegion\n+TEST_VM(NMT, ReservedRegionCopy) {\n+  address dummy1 = (address)0x10000000;\n+  NativeCallStack stack1(&dummy1, 1);\n+  ReservedMemoryRegion region1(dummy1, os::vm_page_size(), stack1, mtThreadStack);\n+  VirtualMemorySummary::record_reserved_memory(os::vm_page_size(), region1.flag());\n+  region1.add_committed_region(dummy1, os::vm_page_size(), stack1);\n+  address dummy2 = (address)0x20000000;\n+  NativeCallStack stack2(&dummy2, 1);\n+  ReservedMemoryRegion region2(dummy2, os::vm_page_size(), stack2, mtCode);\n+  VirtualMemorySummary::record_reserved_memory(os::vm_page_size(), region2.flag());\n+  region2.add_committed_region(dummy2, os::vm_page_size(), stack2);\n+\n+  region2 = region1;\n+\n+  CommittedRegionIterator itr = region2.iterate_committed_regions();\n+  const CommittedMemoryRegion* rgn = itr.next();\n+  ASSERT_EQ(rgn->base(), dummy1); \/\/ Now we should see dummy1\n+  ASSERT_EQ(region2.flag(), mtThreadStack); \/\/ Should be correct flag\n+  ASSERT_EQ(region2.call_stack()->get_frame(0), dummy1); \/\/ Check the stack\n+  rgn = itr.next();\n+  ASSERT_EQ(rgn, (const CommittedMemoryRegion*)nullptr); \/\/ and nothing else\n+}\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_reserved_region.cpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}