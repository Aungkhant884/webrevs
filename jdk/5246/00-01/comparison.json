{"files":[{"patch":"@@ -868,2 +868,1 @@\n-        at = asTypeUncached(newType);\n-        return setAsTypeCache(at);\n+        return setAsTypeCache(asTypeUncached(newType));\n@@ -952,4 +951,4 @@\n-    \/* Determine whether {@code descendant} keeps {@code ancestor} alive through the loader delegation chain. *\/\n-    private static boolean keepsAlive(ClassLoader ancestor, ClassLoader descendant) {\n-        if (isSystemLoader(ancestor)) {\n-            return true; \/\/ system loaders are always reachable\n+    \/* Determine whether {@code loader1} keeps {@code loader2} alive through the loader delegation chain or not. *\/\n+    private static boolean keepsAlive(ClassLoader loader1, ClassLoader loader2) {\n+        if (isBuiltinLoader(loader1)) {\n+            return true; \/\/ built-in loaders are always reachable\n@@ -957,2 +956,6 @@\n-        \/\/ Climb up the descendant chain until a system loader is found.\n-        for (ClassLoader loader = descendant; !isSystemLoader(loader); loader = loader.getParent()) {\n+        return isAncestorLoaderOf(loader1, loader2);\n+    }\n+\n+    private static boolean isAncestorLoaderOf(ClassLoader ancestor, ClassLoader descendant) {\n+        \/\/ Climb up the descendant chain until a built-in loader is found.\n+        for (ClassLoader loader = descendant; !isBuiltinLoader(loader); loader = loader.getParent()) {\n@@ -966,1 +969,1 @@\n-    private static boolean isSystemLoader(ClassLoader loader) {\n+    private static boolean isBuiltinLoader(ClassLoader loader) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}