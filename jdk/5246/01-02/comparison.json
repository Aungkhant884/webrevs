{"files":[{"patch":"@@ -914,15 +914,0 @@\n-    \/* Returns true when {@code loader} keeps {@code mt} either directly or indirectly through the loader delegation chain. *\/\n-    private static boolean keepsAlive(MethodType mt, ClassLoader loader) {\n-        for (Class<?> ptype : mt.ptypes()) {\n-            if (!keepsAlive(ptype, loader)) {\n-                return false;\n-            }\n-        }\n-        return keepsAlive(mt.rtype(), loader);\n-    }\n-\n-    \/* Returns true when {@code loader} keeps {@code cls} either directly or indirectly through the loader delegation chain. *\/\n-    private static boolean keepsAlive(Class<?> cls, ClassLoader loader) {\n-        return keepsAlive(cls.getClassLoader(), loader);\n-    }\n-\n@@ -934,4 +919,1 @@\n-        ClassLoader loader = ClassLoaders.appClassLoader();\n-        if (keepsAlive(mt.rtype().getClassLoader(), loader)) {\n-            loader = mt.rtype().getClassLoader();\n-        }\n+        ClassLoader loader = mt.rtype().getClassLoader();\n@@ -940,2 +922,2 @@\n-            if (loader != ploader && keepsAlive(loader, ploader)) {\n-                loader = ploader;\n+            if (isAncestorLoaderOf(loader, ploader)) {\n+                loader = ploader; \/\/ pick more specific loader\n@@ -951,3 +933,14 @@\n-    \/* Determine whether {@code loader1} keeps {@code loader2} alive through the loader delegation chain or not. *\/\n-    private static boolean keepsAlive(ClassLoader loader1, ClassLoader loader2) {\n-        if (isBuiltinLoader(loader1)) {\n+    \/* Returns true when {@code loader} keeps {@code mt} either directly or indirectly through the loader delegation chain. *\/\n+    private static boolean keepsAlive(MethodType mt, ClassLoader loader) {\n+        for (Class<?> ptype : mt.ptypes()) {\n+            if (!keepsAlive(ptype, loader)) {\n+                return false;\n+            }\n+        }\n+        return keepsAlive(mt.rtype(), loader);\n+    }\n+\n+    \/* Returns true when {@code loader} keeps {@code cls} either directly or indirectly through the loader delegation chain. *\/\n+    private static boolean keepsAlive(Class<?> cls, ClassLoader loader) {\n+        ClassLoader defLoader = cls.getClassLoader();\n+        if (isBuiltinLoader(defLoader)) {\n@@ -956,1 +949,1 @@\n-        return isAncestorLoaderOf(loader1, loader2);\n+        return isAncestorLoaderOf(defLoader, loader);\n@@ -960,1 +953,5 @@\n-        \/\/ Climb up the descendant chain until a built-in loader is found.\n+        \/\/ Assume built-in loaders are interchangeable and all custom loaders delegate to one of them.\n+        if (isBuiltinLoader(ancestor)) {\n+            return true;\n+        }\n+        \/\/ Climb up the descendant chain until a built-in loader is encountered.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":23,"deletions":26,"binary":false,"changes":49,"status":"modified"}]}