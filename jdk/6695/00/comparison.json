{"files":[{"patch":"@@ -350,2 +350,3 @@\n-            statements.append(make.at(tree.pos).VarDef(temp, !hasNullCase ? attr.makeNullCheck(selector)\n-                                                                          : selector));\n+            boolean needsNullCheck = !hasNullCase && !seltype.isPrimitive();\n+            statements.append(make.at(tree.pos).VarDef(temp, needsNullCheck ? attr.makeNullCheck(selector)\n+                                                                            : selector));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @bug 8262891 8268333 8268896 8269802 8269808 8270151 8269113\n+ * @bug 8262891 8268333 8268896 8269802 8269808 8270151 8269113 8277864\n@@ -88,0 +88,3 @@\n+        assertEquals(5, switchOverPrimitiveInt(0));\n+        assertEquals(7, switchOverPrimitiveInt(1));\n+        assertEquals(9, switchOverPrimitiveInt(2));\n@@ -594,0 +597,8 @@\n+    private int switchOverPrimitiveInt(Integer i) {\n+        return switch (i) {\n+            case 0 -> 5 + 0;\n+            case Integer j && j == 1 -> 6 + j;\n+            case Integer j -> 7 + j;\n+        };\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}