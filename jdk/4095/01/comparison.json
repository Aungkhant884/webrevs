{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.tools.javac.code.Attribute.Array;\n@@ -1265,1 +1264,1 @@\n-                if (!tree.isImplicitlyTyped()) {\n+                if (!tree.declaredUsingVar()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.stream.Collectors;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import static com.sun.tools.javac.tree.JCTree.Tag.VARDEF;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3331,0 +3331,1 @@\n+        boolean declaredUsingVar = false;\n@@ -3349,0 +3350,1 @@\n+                    declaredUsingVar = true;\n@@ -3361,1 +3363,1 @@\n-            toP(F.at(pos).VarDef(mods, name, type, init));\n+            toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -960,0 +960,2 @@\n+        \/** declared using `var` *\/\n+        private boolean declaredUsingVar;\n@@ -966,0 +968,9 @@\n+            this(mods, name, vartype, init, sym, false);\n+        }\n+\n+        protected JCVariableDecl(JCModifiers mods,\n+                                 Name name,\n+                                 JCExpression vartype,\n+                                 JCExpression init,\n+                                 VarSymbol sym,\n+                                 boolean declaredUsingVar) {\n@@ -971,0 +982,1 @@\n+            this.declaredUsingVar = declaredUsingVar;\n@@ -976,1 +988,1 @@\n-            this(mods, null, vartype, null, null);\n+            this(mods, null, vartype, null, null, false);\n@@ -990,0 +1002,4 @@\n+        public boolean declaredUsingVar() {\n+            return declaredUsingVar;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -230,0 +230,6 @@\n+    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init, boolean declaredUsingVar) {\n+        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null, declaredUsingVar);\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261205\n+ * @summary assertion error: cannot add metadata to an intersection type\n+ * @compile AnnotationOnInferredIntersectionType.java\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+class AnnotationOnInferredIntersectionType {\n+    @Target({ElementType.TYPE_USE, ElementType.LOCAL_VARIABLE})\n+    @interface A {}\n+\n+    class Test {\n+        void t() {\n+            @A var c = g(1, 1L);\n+        }\n+\n+        <X> X g(X a, X b) {\n+            return a;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lvti\/AnnotationOnInferredIntersectionType.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}