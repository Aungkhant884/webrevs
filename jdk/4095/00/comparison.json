{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.tools.javac.code.Attribute.Array;\n@@ -1265,1 +1264,1 @@\n-                if (!tree.isImplicitlyTyped()) {\n+                if (!tree.declaredUsingVar()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.stream.Collectors;\n@@ -857,1 +856,1 @@\n-            if (variable.isImplicitlyTyped()) {\n+            if (variable.nullVarType()) {\n@@ -1250,1 +1249,1 @@\n-                if (tree.isImplicitlyTyped() && (tree.getModifiers().flags & PARAMETER) == 0) {\n+                if (tree.nullVarType() && (tree.getModifiers().flags & PARAMETER) == 0) {\n@@ -1288,1 +1287,1 @@\n-        chk.validate(tree.vartype, env, !isImplicitLambdaParameter && !tree.isImplicitlyTyped());\n+        chk.validate(tree.vartype, env, !isImplicitLambdaParameter && !tree.nullVarType());\n@@ -1309,1 +1308,1 @@\n-                    if (tree.isImplicitlyTyped()) {\n+                    if (tree.nullVarType()) {\n@@ -1314,1 +1313,1 @@\n-                if (tree.isImplicitlyTyped()) {\n+                if (tree.nullVarType()) {\n@@ -1550,1 +1549,1 @@\n-            if (tree.var.isImplicitlyTyped()) {\n+            if (tree.var.nullVarType()) {\n@@ -3033,1 +3032,1 @@\n-                    if (params.head.isImplicitlyTyped()) {\n+                    if (params.head.nullVarType()) {\n@@ -5525,1 +5524,1 @@\n-            if (tree.sym != null && tree.sym.type != null && !tree.isImplicitlyTyped())\n+            if (tree.sym != null && tree.sym.type != null && !tree.nullVarType())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import static com.sun.tools.javac.tree.JCTree.Tag.VARDEF;\n@@ -265,1 +264,1 @@\n-            } else if (!tree.isImplicitlyTyped()) {\n+            } else if (!tree.nullVarType()) {\n@@ -285,1 +284,1 @@\n-        Type vartype = tree.isImplicitlyTyped()\n+        Type vartype = tree.nullVarType()\n@@ -309,1 +308,1 @@\n-        if (!tree.isImplicitlyTyped()) {\n+        if (!tree.nullVarType()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -960,0 +960,2 @@\n+        \/** declared using `var` *\/\n+        private boolean declaredUsingVar;\n@@ -971,0 +973,1 @@\n+            this.declaredUsingVar = vartype == null;\n@@ -984,0 +987,1 @@\n+            this.declaredUsingVar = vartype == null;\n@@ -986,1 +990,1 @@\n-        public boolean isImplicitlyTyped() {\n+        public boolean nullVarType() {\n@@ -990,0 +994,4 @@\n+        public boolean declaredUsingVar() {\n+            return declaredUsingVar;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261205\n+ * @summary assertion error: cannot add metadata to an intersection type\n+ * @compile AnnotationOnInferredIntersectionType.java\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+class AnnotationOnInferredIntersectionType {\n+    @Target({ElementType.TYPE_USE, ElementType.LOCAL_VARIABLE})\n+    @interface A {}\n+\n+    class Test {\n+        void t() {\n+            @A var c = g(1, 1L);\n+        }\n+\n+        <X> X g(X a, X b) {\n+            return a;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lvti\/AnnotationOnInferredIntersectionType.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}