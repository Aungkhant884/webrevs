{"files":[{"patch":"@@ -856,1 +856,1 @@\n-            if (variable.nullVarType()) {\n+            if (variable.isImplicitlyTyped()) {\n@@ -1249,1 +1249,1 @@\n-                if (tree.nullVarType() && (tree.getModifiers().flags & PARAMETER) == 0) {\n+                if (tree.isImplicitlyTyped() && (tree.getModifiers().flags & PARAMETER) == 0) {\n@@ -1287,1 +1287,1 @@\n-        chk.validate(tree.vartype, env, !isImplicitLambdaParameter && !tree.nullVarType());\n+        chk.validate(tree.vartype, env, !isImplicitLambdaParameter && !tree.isImplicitlyTyped());\n@@ -1308,1 +1308,1 @@\n-                    if (tree.nullVarType()) {\n+                    if (tree.isImplicitlyTyped()) {\n@@ -1313,1 +1313,1 @@\n-                if (tree.nullVarType()) {\n+                if (tree.isImplicitlyTyped()) {\n@@ -1549,1 +1549,1 @@\n-            if (tree.var.nullVarType()) {\n+            if (tree.var.isImplicitlyTyped()) {\n@@ -3032,1 +3032,1 @@\n-                    if (params.head.nullVarType()) {\n+                    if (params.head.isImplicitlyTyped()) {\n@@ -5524,1 +5524,1 @@\n-            if (tree.sym != null && tree.sym.type != null && !tree.nullVarType())\n+            if (tree.sym != null && tree.sym.type != null && !tree.isImplicitlyTyped())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-            } else if (!tree.nullVarType()) {\n+            } else if (!tree.isImplicitlyTyped()) {\n@@ -284,1 +284,1 @@\n-        Type vartype = tree.nullVarType()\n+        Type vartype = tree.isImplicitlyTyped()\n@@ -308,1 +308,1 @@\n-        if (!tree.nullVarType()) {\n+        if (!tree.isImplicitlyTyped()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3331,0 +3331,1 @@\n+        boolean declaredUsingVar = false;\n@@ -3349,0 +3350,1 @@\n+                    declaredUsingVar = true;\n@@ -3361,1 +3363,1 @@\n-            toP(F.at(pos).VarDef(mods, name, type, init));\n+            toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -968,0 +968,9 @@\n+            this(mods, name, vartype, init, sym, false);\n+        }\n+\n+        protected JCVariableDecl(JCModifiers mods,\n+                                 Name name,\n+                                 JCExpression vartype,\n+                                 JCExpression init,\n+                                 VarSymbol sym,\n+                                 boolean declaredUsingVar) {\n@@ -973,1 +982,1 @@\n-            this.declaredUsingVar = vartype == null;\n+            this.declaredUsingVar = declaredUsingVar;\n@@ -979,1 +988,1 @@\n-            this(mods, null, vartype, null, null);\n+            this(mods, null, vartype, null, null, false);\n@@ -987,1 +996,0 @@\n-            this.declaredUsingVar = vartype == null;\n@@ -990,1 +998,1 @@\n-        public boolean nullVarType() {\n+        public boolean isImplicitlyTyped() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -230,0 +230,6 @@\n+    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init, boolean declaredUsingVar) {\n+        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null, declaredUsingVar);\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}