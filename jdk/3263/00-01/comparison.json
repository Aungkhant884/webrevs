{"files":[{"patch":"@@ -1,179 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8264048\n- * @modules jdk.jartool\/sun.tools.jar\n- *\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar true false testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar false true testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar false false testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Test badpath\n- *\n- * @summary URLClassLoader.close() doesn't close cached JAR file on Windows when load() fails\n- *\/\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.UncheckedIOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.net.URLConnection;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.stream.Stream;\n-import java.util.zip.ZipException;\n-\n-import sun.tools.jar.Main;\n-\n-public class RemoveJar {\n-    private final static String TEST_PKG = \"testpkg\";\n-    private final static String JAR_DIR = \"testjar\/\" + TEST_PKG;\n-    private final static String FILE_NAME = \"testjar.jar\";\n-    private final static ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-    private final static PrintStream out = new PrintStream(baos);\n-\n-    private static void buildJar() throws IOException {\n-        \/\/ create dir\n-        mkdir(JAR_DIR);\n-        \/\/ create file\n-        Path path = Paths.get(JAR_DIR);\n-        String src = \"package \" + TEST_PKG + \";\\n\" +\n-                \"class Test {}\\n\";\n-        Files.write(Paths.get(JAR_DIR + \"\/Test.java\"), src.getBytes());\n-        \/\/ compile class\n-        compile(JAR_DIR + \"\/Test.java\");\n-        \/\/ package jar\n-        jar(\"-cf testjar.jar \" + JAR_DIR);\n-    }\n-\n-    public static void setDefaultUseCaches(boolean useCaches)\n-            throws IOException, MalformedURLException {\n-        URL url = new URL(\"jar\", \"\", \"file:\/\/testjar.jar!\/\");\n-        URLConnection uConn = url.openConnection();\n-        uConn.setDefaultUseCaches(useCaches);\n-    }\n-\n-    public static void main(String args[]) throws Exception {\n-        buildJar();\n-\n-        URLClassLoader loader = null;\n-        URL url;\n-        Path path = Paths.get(FILE_NAME);\n-\n-        boolean useCacheFirst = Boolean.parseBoolean(args[0]);\n-        boolean useCacheSecond = Boolean.parseBoolean(args[1]);\n-        String firstClass = args[2];\n-        String secondClass = args[3];\n-        String subPath = args[4];\n-\n-        try {\n-            String path_str = path.toUri().toURL().toString();\n-            setDefaultUseCaches(useCacheFirst);\n-\n-            url = new URL(\"jar\", \"\", path_str + \"!\/\" + subPath);\n-            loader = new URLClassLoader(new URL[]{url});\n-\n-            loader.loadClass(firstClass);\n-        } catch (Exception e) {\n-            System.err.println(\"EXCEPTION: \" + e);\n-        }\n-\n-        try {\n-            setDefaultUseCaches(useCacheSecond);\n-            loader.loadClass(secondClass);\n-        } catch (Exception e) {\n-            System.err.println(\"EXCEPTION: \" + e);\n-        } finally {\n-            loader.close();\n-            Files.delete(path);\n-        }\n-    }\n-\n-    private static Stream<Path> mkpath(String... args) {\n-        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n-    }\n-\n-    private static void mkdir(String cmdline) {\n-        System.out.println(\"mkdir -p \" + cmdline);\n-        mkpath(cmdline.split(\" +\")).forEach(p -> {\n-            try {\n-                Files.createDirectories(p);\n-            } catch (IOException x) {\n-                throw new UncheckedIOException(x);\n-            }\n-        });\n-    }\n-\n-    private static void jar(String cmdline) throws IOException {\n-        System.out.println(\"jar \" + cmdline);\n-        baos.reset();\n-\n-        \/\/ the run method catches IOExceptions, we need to expose them\n-        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n-        PrintStream err = new PrintStream(baes);\n-        PrintStream saveErr = System.err;\n-        System.setErr(err);\n-\n-        Main jarMain = new Main(out, err, \"jar\");\n-        boolean res = jarMain.run(cmdline.split(\" +\"));\n-        System.setErr(saveErr);\n-        if (!res) {\n-            String s = baes.toString();\n-            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n-                throw new ZipException(s);\n-            }\n-            throw new IOException(s);\n-        }\n-    }\n-\n-    \/* run javac <args> *\/\n-    private static void compile(String... args) {\n-        if (com.sun.tools.javac.Main.compile(args) != 0) {\n-            throw new RuntimeException(\"javac failed: args=\" + Arrays.toString(args));\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/sun\/misc\/URLClassPath\/RemoveJar.java","additions":0,"deletions":179,"binary":false,"changes":179,"status":"deleted"}]}