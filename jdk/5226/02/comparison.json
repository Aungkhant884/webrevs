{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -320,2 +322,2 @@\n-     *                     components. Maybe be null, if the {@code methodName}\n-     *                     is {@code \"equals\"} or {@code \"hashCode\"}.\n+     *                     components. This parameter is ignored if the {@code methodName}\n+     *                     parameter is {@code \"equals\"} or {@code \"hashCode\"}\n@@ -327,0 +329,3 @@\n+     * @throws NullPointerException if any argument but {@code lookup} is {@code null},\n+     *                              in the case of the {@code getters} argument, its\n+     *                              contents cannot be {@code null} either\n@@ -333,0 +338,6 @@\n+        requireNonNull(methodName);\n+        requireNonNull(type);\n+        requireNonNull(recordClass);\n+        requireNonNull(names);\n+        requireNonNull(getters);\n+        Arrays.stream(getters).forEach(Objects::requireNonNull);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.List;\n@@ -106,1 +107,1 @@\n-        CallSite cs = (CallSite)ObjectMethods.bootstrap(LOOKUP, \"hashCode\", C.HASHCODE_DESC, C.class, null, C.ACCESSORS);\n+        CallSite cs = (CallSite)ObjectMethods.bootstrap(LOOKUP, \"hashCode\", C.HASHCODE_DESC, C.class, \"x;y\", C.ACCESSORS);\n@@ -154,9 +155,15 @@\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"toString\", C.TO_STRING_DESC, C.class, \"x;y\", null)       );\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"toString\", C.TO_STRING_DESC, C.class, null,  C.ACCESSORS));\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"toString\", C.TO_STRING_DESC, null,    \"x;y\", C.ACCESSORS));\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"equals\",   C.EQUALS_DESC,    null,    \"x;y\", C.ACCESSORS));\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"hashCode\", C.HASHCODE_DESC,  null,    \"x;y\", C.ACCESSORS));\n-\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, \"toString\", null,             C.class, \"x;y\", C.ACCESSORS));\n-        assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, null,       C.TO_STRING_DESC, C.class, \"x;y\", C.ACCESSORS));\n-      \/\/assertThrows(NPE, () -> ObjectMethods.bootstrap(null,   \"toString\", C.TO_STRING_DESC, C.class, \"x;y\", C.ACCESSORS));\n+        record NamePlusType(String mn, MethodType mt) {}\n+        List<NamePlusType> namePlusTypeList = List.of(\n+                new NamePlusType(\"toString\", C.TO_STRING_DESC),\n+                new NamePlusType(\"equals\", C.EQUALS_DESC),\n+                new NamePlusType(\"hashCode\", C.HASHCODE_DESC)\n+        );\n+\n+        for (NamePlusType npt : namePlusTypeList) {\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, npt.mn(), npt.mt(), C.class, \"x;y\", null));\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, npt.mn(), npt.mt(), C.class, \"x;y\", new MethodHandle[]{null}));\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, npt.mn(), npt.mt(), C.class, null,  C.ACCESSORS));\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, npt.mn(), npt.mt(), null,    \"x;y\", C.ACCESSORS));\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, npt.mn(), null,     C.class, \"x;y\", C.ACCESSORS));\n+            assertThrows(NPE, () -> ObjectMethods.bootstrap(LOOKUP, null,     npt.mt(), C.class, \"x;y\", C.ACCESSORS));\n+        }\n","filename":"test\/jdk\/java\/lang\/runtime\/ObjectMethodsTest.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"}]}