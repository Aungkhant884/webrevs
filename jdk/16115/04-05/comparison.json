{"files":[{"patch":"@@ -40,3 +40,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -1406,2 +1403,1 @@\n-            public Key(File file, BasicFileAttributes attrs, ZipCoder zc)\n-                    throws IOException {\n+            public Key(File file, BasicFileAttributes attrs, ZipCoder zc) {\n@@ -1409,2 +1405,1 @@\n-                Object fk = attrs.fileKey();\n-                this.file = (fk != null) ? file : getCanonicalFile(file);\n+                this.file = file;\n@@ -1414,19 +1409,0 @@\n-            @SuppressWarnings(\"removal\")\n-            private static File getCanonicalFile(File file) throws IOException {\n-                if (System.getSecurityManager() == null) {\n-                    return file.getCanonicalFile();\n-                } else {\n-                    PrivilegedExceptionAction<File> pa = file::getCanonicalFile;\n-                    try {\n-                        return AccessController.doPrivileged(pa);\n-                    } catch (PrivilegedActionException pae) {\n-                        Throwable cause = pae.getCause();\n-                        if (cause instanceof IOException ioe) {\n-                            throw ioe;\n-                        } else {\n-                            throw new IOException(cause);\n-                        }\n-                    }\n-                }\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -51,0 +52,1 @@\n+    private static boolean hasfileKeySupport;\n@@ -55,0 +57,2 @@\n+        var attrs = Files.readAttributes(relativeFile.toPath(), BasicFileAttributes.class);\n+        hasfileKeySupport = (attrs.fileKey() != null);\n@@ -80,1 +84,2 @@\n-            \/\/ opening of same zip file shouldn't cause new Source to be constructed\n+            \/\/ opening of same zip file shouldn't cause new Source\n+            \/\/ to be constructed on filesystems which support fileKey()\n@@ -82,1 +87,5 @@\n-            assertEquals(numSources, internalMap.size());\n+            if (hasfileKeySupport) {\n+                assertEquals(numSources, internalMap.size());\n+            } else {\n+                assertEquals(++numSources, internalMap.size());\n+            }\n@@ -88,1 +97,3 @@\n-                \/\/ new Source created, should map fine\n+                \/\/ update of file should trigger new <Key, Source> mapping\n+                assertEquals(++numSources, internalMap.size());\n+                \/\/ new Source created, CEN structure should map fine\n@@ -93,1 +104,0 @@\n-                assertEquals(++numSources, internalMap.size());\n@@ -98,3 +108,7 @@\n-        \/\/ the close() call shouldn't remove the Source entry\n-        \/\/ just yet since we still have one reference to the file\n-        assertEquals(numSources, internalMap.size());\n+        \/\/ with fileKey() support, the close() call shouldn't remove the\n+        \/\/ Source entry just yet since we still have one reference to the file\n+        if (hasfileKeySupport) {\n+            assertEquals(numSources, internalMap.size());\n+        } else {\n+            assertEquals(--numSources, internalMap.size());\n+        }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZipSourceCache.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -53,0 +54,1 @@\n+    public File relativePathFile;\n@@ -77,0 +79,2 @@\n+        relativePathFile = Path.of(System.getProperty(\"user.dir\"))\n+                                .relativize(zipFile.toPath()).toFile();\n@@ -93,0 +97,9 @@\n+\n+    @Benchmark\n+    public void openCloseZipFilex2() throws Exception {\n+        \/\/ Ensure that we only create ZipFile.Source.Key entry per unique zip file\n+        ZipFile zf = new ZipFile(zipFile);\n+        ZipFile zf2 = new ZipFile(relativePathFile);\n+        zf.close();\n+        zf2.close();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/zip\/ZipFileOpen.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}