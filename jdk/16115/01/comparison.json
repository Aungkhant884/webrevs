{"files":[{"patch":"@@ -40,0 +40,3 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -1403,1 +1406,2 @@\n-            public Key(File file, BasicFileAttributes attrs, ZipCoder zc) {\n+            public Key(File file, BasicFileAttributes attrs, ZipCoder zc)\n+                    throws IOException {\n@@ -1405,1 +1409,7 @@\n-                this.file = file;\n+                Object fk = attrs.fileKey();\n+                if (fk != null) {\n+                    \/\/ use file value, hashCode will use fileKey()\n+                    this.file = file;\n+                } else {\n+                    this.file = getCanonicalFile(file);\n+                }\n@@ -1409,0 +1419,11 @@\n+            @SuppressWarnings(\"removal\")\n+            private static File getCanonicalFile(File file) throws IOException {\n+                try {\n+                    return System.getSecurityManager() != null ?\n+                        AccessController.doPrivileged((PrivilegedExceptionAction<File>) file::getCanonicalFile) :\n+                        file.getCanonicalFile();\n+                } catch (PrivilegedActionException e) {\n+                    throw new IOException(e);\n+                }\n+            }\n+\n@@ -1411,2 +1432,6 @@\n-                t += attrs.lastModifiedTime().toMillis();\n-                return ((int)(t ^ (t >>> 32))) + file.hashCode();\n+                Object fk = attrs.fileKey();\n+                if (fk == null) {\n+                    t += attrs.lastModifiedTime().toMillis();\n+                }\n+                return Long.hashCode(t) +\n+                        (fk != null ? fk.hashCode() : file.hashCode());\n@@ -1420,3 +1445,0 @@\n-                    if (!attrs.lastModifiedTime().equals(key.attrs.lastModifiedTime())) {\n-                        return false;\n-                    }\n@@ -1426,2 +1448,0 @@\n-                    } else {\n-                        return file.equals(key.file);\n@@ -1429,0 +1449,4 @@\n+                    if (!attrs.lastModifiedTime().equals(key.attrs.lastModifiedTime())) {\n+                        return false;\n+                    }\n+                    return file.equals(key.file);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8317678\n+ * @modules java.base\/java.util.zip:open\n+ * @summary Fix up hashCode() for ZipFile.Source.Key\n+ * @run testng\/othervm ZipSourceCache\n+ *\/\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.*;\n+import java.lang.reflect.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.zip.*;\n+\n+import static org.testng.Assert.*;\n+\n+public class ZipSourceCache {\n+\n+    private static final String ZIPFILE_NAME =\n+            System.currentTimeMillis() + \"-bug8317678.zip\";\n+    private static final String ZIPENTRY_NAME = \"random.txt\";\n+\n+    private static File relativeFile = new File(ZIPFILE_NAME);\n+    private static File absoluteFile = new File(ZIPFILE_NAME).getAbsoluteFile();\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        createZipFile();\n+    }\n+\n+    @AfterTest\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(Path.of(ZIPENTRY_NAME));\n+    }\n+\n+    @Test\n+    public static void test() throws Exception {\n+        ZipFile absoluteZipFile;\n+        try (ZipFile zipFile = new ZipFile(ZIPFILE_NAME)) {\n+            Class source = Class.forName(\"java.util.zip.ZipFile$Source\");\n+            Field filesMap = source.getDeclaredField(\"files\");\n+            filesMap.setAccessible(true);\n+            HashMap internalMap = (HashMap) filesMap.get(zipFile);\n+            int numSources = internalMap.size();\n+            \/\/ opening of same zip file shouldn't cause new Source to be constructed\n+            absoluteZipFile = new ZipFile(absoluteFile);\n+            assertEquals(internalMap.size(), numSources);\n+        }\n+        if (absoluteZipFile != null) {\n+            absoluteZipFile.close();\n+        }\n+    }\n+\n+    private static void createZipFile() throws Exception {\n+        CRC32 crc32 = new CRC32();\n+        long t = System.currentTimeMillis();\n+        File zipFile = new File(ZIPFILE_NAME);\n+        try (FileOutputStream fos = new FileOutputStream(zipFile);\n+             BufferedOutputStream bos = new BufferedOutputStream(fos);\n+             ZipOutputStream zos = new ZipOutputStream(bos)) {\n+            ZipEntry e = new ZipEntry(ZIPENTRY_NAME);\n+            e.setMethod(ZipEntry.STORED);\n+            byte[] toWrite = \"BLAH\".getBytes();\n+            e.setTime(t);\n+            e.setSize(toWrite.length);\n+            crc32.reset();\n+            crc32.update(toWrite);\n+            e.setCrc(crc32.getValue());\n+            zos.putNextEntry(e);\n+            zos.write(toWrite);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZipSourceCache.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}