{"files":[{"patch":"@@ -41,1 +41,2 @@\n-import java.security.PrivilegedAction;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -1405,1 +1406,2 @@\n-            public Key(File file, BasicFileAttributes attrs, ZipCoder zc) {\n+            public Key(File file, BasicFileAttributes attrs, ZipCoder zc)\n+                    throws IOException {\n@@ -1418,15 +1420,7 @@\n-            private File getCanonicalFile(File file) {\n-                if (System.getSecurityManager() != null) {\n-                    PrivilegedAction<File> pa = () -> {\n-                        try {\n-                            return file.getCanonicalFile();\n-                        } catch (IOException e) {\n-                            throw new RuntimeException(e);\n-                    }};\n-                    return AccessController.doPrivileged(pa);\n-                } else {\n-                    try {\n-                        return file.getCanonicalFile();\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n+            private static File getCanonicalFile(File file) throws IOException {\n+                try {\n+                    return System.getSecurityManager() != null ?\n+                        AccessController.doPrivileged((PrivilegedExceptionAction<File>) file::getCanonicalFile) :\n+                        file.getCanonicalFile();\n+                } catch (PrivilegedActionException e) {\n+                    throw new IOException(e);\n@@ -1438,1 +1432,0 @@\n-                t += attrs.lastModifiedTime().toMillis();\n@@ -1440,4 +1433,2 @@\n-                if (fk != null) {\n-                    return ((int)(t ^ (t >>> 32))) + fk.hashCode();\n-                } else {\n-                    return ((int)(t ^ (t >>> 32))) + file.hashCode();\n+                if (fk == null) {\n+                    t += attrs.lastModifiedTime().toMillis();\n@@ -1445,0 +1436,2 @@\n+                return Long.hashCode(t) +\n+                        (fk != null ? fk.hashCode() : file.hashCode());\n@@ -1452,3 +1445,0 @@\n-                    if (!attrs.lastModifiedTime().equals(key.attrs.lastModifiedTime())) {\n-                        return false;\n-                    }\n@@ -1458,2 +1448,0 @@\n-                    } else {\n-                        return file.equals(key.file);\n@@ -1461,0 +1449,4 @@\n+                    if (!attrs.lastModifiedTime().equals(key.attrs.lastModifiedTime())) {\n+                        return false;\n+                    }\n+                    return file.equals(key.file);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-            assertEquals(numSources, internalMap.size());\n+            assertEquals(internalMap.size(), numSources);\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZipSourceCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}