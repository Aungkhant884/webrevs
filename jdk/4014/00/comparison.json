{"files":[{"patch":"@@ -65,0 +65,2 @@\n+  MODULES_FILTER += jdk.internal.vm.compiler\n+  MODULES_FILTER += jdk.internal.vm.compiler.management\n@@ -67,4 +69,0 @@\n-# Filter out Graal specific modules\n-MODULES_FILTER += jdk.internal.vm.compiler\n-MODULES_FILTER += jdk.internal.vm.compiler.management\n-\n","filename":"make\/common\/Modules.gmk","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+    jdk.internal.vm.compiler \\\n+    jdk.internal.vm.compiler.management \\\n","filename":"make\/conf\/module-loader-map.conf","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,6 +30,0 @@\n-    exports jdk.vm.ci.runtime to\n-        jdk.internal.vm.compiler,\n-        jdk.internal.vm.compiler.management;\n-    exports jdk.vm.ci.meta to jdk.internal.vm.compiler;\n-    exports jdk.vm.ci.code to jdk.internal.vm.compiler;\n-    exports jdk.vm.ci.hotspot to jdk.internal.vm.compiler;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/module-info.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,7 @@\n- * Registers Graal Compiler specific management interfaces for the JVM.\n+ * Registers JVMCI compiler specific management interfaces for the JVM.\n+ *\n+ * This is an empty and upgradeable module that is a placeholder for an\n+ * external implementation of a JVMCI compiler. It must be upgradeable so\n+ * that it can be replaced when jlinking a new JDK image without failing\n+ * the hash check for the qualified exports in jdk.internal.vm.ci's\n+ * module descriptor.\n@@ -33,2 +39,0 @@\n-    requires java.management;\n-    requires jdk.management;\n@@ -36,1 +40,0 @@\n-    requires jdk.internal.vm.compiler;\n","filename":"src\/jdk.internal.vm.compiler.management\/share\/classes\/module-info.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/**\n+  * JVMCI compiler implementation for the JVM.\n+  *\n+  * This is an empty and upgradeable module that is a placeholder for an\n+  * external implementation of a JVMCI compiler. It must be upgradeable so\n+  * that it can be replaced when jlinking a new JDK image without failing\n+  * the hash check for the qualified exports in jdk.internal.vm.ci's\n+  * module descriptor.\n+  *\n+  * @moduleGraph\n+  * @since 9\n+  *\/\n+\n@@ -27,2 +40,0 @@\n-    requires java.instrument;\n-    requires java.management;\n@@ -30,27 +41,0 @@\n-    requires jdk.management;\n-    requires jdk.unsupported;   \/\/ sun.misc.Unsafe is used\n-\n-    uses org.graalvm.compiler.code.DisassemblerProvider;\n-    uses org.graalvm.compiler.core.match.MatchStatementSet;\n-    uses org.graalvm.compiler.debug.DebugHandlersFactory;\n-    uses org.graalvm.compiler.debug.TTYStreamProvider;\n-    uses org.graalvm.compiler.hotspot.CompilerConfigurationFactory;\n-    uses org.graalvm.compiler.hotspot.HotSpotBackendFactory;\n-    uses org.graalvm.compiler.hotspot.HotSpotCodeCacheListener;\n-    uses org.graalvm.compiler.hotspot.HotSpotGraalManagementRegistration;\n-    uses org.graalvm.compiler.nodes.graphbuilderconf.GeneratedPluginFactory;\n-    uses org.graalvm.compiler.phases.common.jmx.HotSpotMBeanOperationProvider;\n-    uses org.graalvm.compiler.serviceprovider.JMXService;\n-\n-    exports jdk.internal.vm.compiler.collections        to jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.core.common            to\n-        jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.debug                  to\n-        jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.hotspot                to\n-        jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.options                to\n-        jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.phases.common.jmx      to jdk.internal.vm.compiler.management;\n-    exports org.graalvm.compiler.serviceprovider        to\n-        jdk.internal.vm.compiler.management;\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/module-info.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires vm.jvmci & vm.compMode == \"Xmixed\"\n+ * @requires vm.graal.enabled & vm.compMode == \"Xmixed\"\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/IsCompilableTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,5 @@\n-            Set<String> mods = Set.of(\"javafx.deploy\", \"jdk.deploy\", \"jdk.plugin\", \"jdk.javaws\");\n+            Set<String> mods = Set.of(\"javafx.deploy\", \"jdk.deploy\", \"jdk.plugin\", \"jdk.javaws\",\n+                \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n+                \/\/ exported to jdk.internal.vm.compiler\n+                \"jdk.internal.vm.compiler\"\n+            );\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/FieldSetAccessibleTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,4 @@\n-        List.of(\"java.compiler\");\n+        List.of(\"java.compiler\",\n+                \"jdk.internal.vm.compiler\",\n+                \"jdk.internal.vm.compiler.management\");\n+\n","filename":"test\/jdk\/jdk\/modules\/etc\/UpgradeableModules.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -199,1 +199,5 @@\n-        Set.of(\"javafx.deploy\", \"jdk.deploy\", \"jdk.plugin\", \"jdk.javaws\");\n+        Set.of(\"javafx.deploy\", \"jdk.deploy\", \"jdk.plugin\", \"jdk.javaws\",\n+            \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n+            \/\/ exported to jdk.internal.vm.compiler\n+            \"jdk.internal.vm.compiler\"\n+        );\n","filename":"test\/jdk\/tools\/jimage\/VerifyJimage.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}