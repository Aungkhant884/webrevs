{"files":[{"patch":"@@ -182,0 +182,16 @@\n+\n+#ifdef ASSERT\n+void ParCompactionManager::verify_all_marking_stack_empty() {\n+  uint parallel_gc_threads = ParallelGCThreads;\n+  for (uint i = 0; i <= parallel_gc_threads; i++) {\n+    assert(_manager_array[i]->marking_stacks_empty(), \"Marking stack should be empty\");\n+  }\n+}\n+\n+void ParCompactionManager::verify_all_region_stack_empty() {\n+  uint parallel_gc_threads = ParallelGCThreads;\n+  for (uint i = 0; i <= parallel_gc_threads; i++) {\n+    assert(_manager_array[i]->region_stack()->is_empty(), \"Region stack should be empty\");\n+  }\n+}\n+#endif\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,4 +49,0 @@\n-\n- public:\n-\n-\n@@ -72,1 +68,0 @@\n-private:\n@@ -146,1 +141,1 @@\n-  inline static ParCompactionManager* manager_array(uint index);\n+  static ParCompactionManager* get_vmthread_cm() { return _manager_array[ParallelGCThreads]; }\n@@ -199,1 +194,0 @@\n-};\n@@ -201,5 +195,6 @@\n-inline ParCompactionManager* ParCompactionManager::manager_array(uint index) {\n-  assert(_manager_array != NULL, \"access of NULL manager_array\");\n-  assert(index <= ParallelGCThreads, \"out of range manager_array access\");\n-  return _manager_array[index];\n-}\n+  \/\/ Called after marking.\n+  static void verify_all_marking_stack_empty() NOT_DEBUG_RETURN;\n+\n+  \/\/ Region staks hold regions in from-space; called after compaction.\n+  static void verify_all_region_stack_empty() NOT_DEBUG_RETURN;\n+};\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1787,2 +1787,1 @@\n-  ParCompactionManager* const vmthread_cm =\n-    ParCompactionManager::manager_array(ParallelScavengeHeap::heap()->workers().total_workers());\n+  ParCompactionManager* const vmthread_cm = ParCompactionManager::get_vmthread_cm();\n@@ -1840,0 +1839,2 @@\n+    ParCompactionManager::verify_all_region_stack_empty();\n+\n@@ -1936,9 +1937,0 @@\n-#ifdef ASSERT\n-  for (size_t i = 0; i < ParallelGCThreads + 1; ++i) {\n-    ParCompactionManager* const cm =\n-      ParCompactionManager::manager_array(int(i));\n-    assert(cm->marking_stack()->is_empty(),       \"should be empty\");\n-    assert(cm->region_stack()->is_empty(), \"Region stack \" SIZE_FORMAT \" is not empty\", i);\n-  }\n-#endif \/\/ ASSERT\n-\n@@ -2184,1 +2176,1 @@\n-  assert(cm->marking_stacks_empty(), \"Marking should have completed\");\n+  ParCompactionManager::verify_all_marking_stack_empty();\n@@ -2210,0 +2202,13 @@\n+#ifdef ASSERT\n+void PCAdjustPointerClosure::verify_cm(ParCompactionManager* cm) {\n+  assert(cm != NULL, \"associate ParCompactionManage should not be NULL\");\n+  auto vmthread_cm = ParCompactionManager::get_vmthread_cm();\n+  if (Thread::current()->is_VM_thread()) {\n+    assert(cm == vmthread_cm, \"VM threads should use ParCompactionManager from get_vmthread_cm()\");\n+  } else {\n+    assert(Thread::current()->is_GC_task_thread(), \"Must be a GC thread\");\n+    assert(cm != vmthread_cm, \"GC threads should use ParCompactionManager from gc_thread_compaction_manager()\");\n+  }\n+}\n+#endif\n+\n@@ -2617,1 +2622,0 @@\n-    \/\/ Update the deferred objects, if any.  Any compaction manager can be used.\n@@ -2619,1 +2623,4 @@\n-    ParCompactionManager* cm = ParCompactionManager::manager_array(0);\n+    \/\/ Update the deferred objects, if any. In principle, any compaction\n+    \/\/ manager can be used. However, since the current thread is VM thread, we\n+    \/\/ use the rightful one to keep the verification logic happy.\n+    ParCompactionManager* cm = ParCompactionManager::get_vmthread_cm();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    assert(cm != NULL, \"associate ParCompactionManage should not be NULL\");\n+    verify_cm(cm);\n@@ -139,0 +139,2 @@\n+\n+  static void verify_cm(ParCompactionManager* cm) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-  ParCompactionManager* const vmthread_cm =\n-    ParCompactionManager::manager_array(ParallelGCThreads);\n","filename":"test\/hotspot\/gtest\/gc\/parallel\/test_psParallelCompact.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}