{"files":[{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.HelloApp;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test that terminating of the parent app launcher process automatically\n+ * terminates child app launcher process.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test case for JDK-8301247\n+ * @library ..\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @build Win8301247Test\n+ * @requires (os.family == \"windows\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm\/timeout=360 -Xmx512m  jdk.jpackage.test.Main\n+ *  --jpt-run=Win8301247Test\n+ *\/\n+public class Win8301247Test {\n+\n+    @Test\n+    public void test() throws IOException, InterruptedException {\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+\n+        \/\/ Launch the app in a way it doesn't exit to let us trap app laucnher\n+        \/\/ processes in the process list\n+        cmd.addArguments(\"--java-options\", \"-Djpackage.test.noexit=true\");\n+        cmd.executeAndAssertImageCreated();\n+\n+        if (!cmd.canRunLauncher(\"Not running the test\")) {\n+            return;\n+        }\n+\n+        try ( \/\/ Launch the app in a separate thread\n+                ExecutorService exec = Executors.newSingleThreadExecutor()) {\n+            exec.execute(() -> {\n+                HelloApp.executeLauncher(cmd);\n+            });\n+\n+            \/\/ Wait a bit to let the app start\n+            Thread.sleep(Duration.ofSeconds(10));\n+\n+            \/\/ Get PID of the main app launcher process\n+            final long pid = findMainAppLauncherPID(cmd, 2).get();\n+\n+            \/\/ Kill the main app launcher process\n+            Executor.of(\"taskkill\", \"\/F\", \"\/PID\", Long.toString(pid)).\n+                    dumpOutput(true).execute();\n+\n+            \/\/ Wait a bit and check if child app launcher process is still running (it must NOT)\n+            Thread.sleep(Duration.ofSeconds(5));\n+\n+            findMainAppLauncherPID(cmd, 0);\n+        }\n+    }\n+\n+    private static Optional<Long> findMainAppLauncherPID(JPackageCommand cmd,\n+            int expectedCount) {\n+        \/\/ Get the list of PIDs and PPIDs of app launcher processes.\n+        \/\/ wmic process where (name = \"foo.exe\") get ProcessID,ParentProcessID\n+        List<String> output = Executor.of(\"wmic\", \"process\", \"where\", \"(name\",\n+                \"=\",\n+                \"\\\"\" + cmd.appLauncherPath().getFileName().toString() + \"\\\"\",\n+                \")\", \"get\", \"ProcessID,ParentProcessID\").dumpOutput(true).\n+                saveOutput().executeAndGetOutput();\n+\n+        if (expectedCount == 0) {\n+            TKit.assertEquals(\"No Instance(s) Available.\", output.getFirst().\n+                    trim(), \"Check no app launcher processes found running\");\n+            return Optional.empty();\n+        }\n+\n+        String[] headers = Stream.of(output.getFirst().split(\"\\\\s+\", 2)).map(\n+                String::trim).map(String::toLowerCase).toArray(String[]::new);\n+        Pattern pattern;\n+        if (headers[0].equals(\"parentprocessid\") && headers[1].equals(\n+                \"processid\")) {\n+            pattern = Pattern.compile(\"^(?<ppid>\\\\d+)\\\\s+(?<pid>\\\\d+)\\\\s+$\");\n+        } else if (headers[1].equals(\"parentprocessid\") && headers[0].equals(\n+                \"processid\")) {\n+            pattern = Pattern.compile(\"^(?<pid>\\\\d+)\\\\s+(?<ppid>\\\\d+)\\\\s+$\");\n+        } else {\n+            throw new RuntimeException(\n+                    \"Unrecognizable output of \\'wmic process\\' command\");\n+        }\n+\n+        List<long[]> processes = output.stream().skip(1).map(line -> {\n+            Matcher m = pattern.matcher(line);\n+            long[] pids = null;\n+            if (m.matches()) {\n+                pids = new long[]{Long.parseLong(m.group(\"pid\")), Long.\n+                    parseLong(m.group(\"ppid\"))};\n+            }\n+            return pids;\n+        }).filter(Objects::nonNull).toList();\n+\n+        TKit.assertEquals(expectedCount, processes.size(), String.format(\n+                \"Check [%d] app launcher processes found running\", expectedCount));\n+\n+        switch (expectedCount) {\n+            case 2 -> {\n+                if (processes.get(0)[0] == processes.get(1)[1]) {\n+                    return Optional.of(processes.get(0)[0]);\n+                } else if (processes.get(1)[0] == processes.get(0)[1]) {\n+                    return Optional.of(processes.get(1)[0]);\n+                } else {\n+                    throw new RuntimeException(\n+                            \"App launcher processes unrelated\");\n+                }\n+            }\n+            default ->\n+                throw new IllegalArgumentException();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8301247Test.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}