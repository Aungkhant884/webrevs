{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,2 +144,3 @@\n-ClassPathEntry* ClassLoader::_first_append_entry = NULL;\n-ClassPathEntry* ClassLoader::_last_append_entry  = NULL;\n+\n+ClassPathEntry* volatile ClassLoader::_first_append_entry_list = NULL;\n+ClassPathEntry* volatile ClassLoader::_last_append_entry  = NULL;\n@@ -818,1 +819,1 @@\n-  ClassPathEntry* e = _first_append_entry;\n+  ClassPathEntry* e = first_append_entry();\n@@ -829,0 +830,1 @@\n+\/\/ The boot append entries are added with a lock, and read lock free.\n@@ -831,0 +833,1 @@\n+    MutexLocker ml(Bootclasspath_lock, Mutex::_no_safepoint_check_flag);\n@@ -832,2 +835,3 @@\n-      assert(_first_append_entry == NULL, \"boot loader's append class path entry list not empty\");\n-      _first_append_entry = _last_append_entry = new_entry;\n+      _last_append_entry = new_entry;\n+      assert(first_append_entry() == NULL, \"boot loader's append class path entry list not empty\");\n+      Atomic::store(&_first_append_entry_list, new_entry);\n@@ -947,1 +951,1 @@\n-  e = _first_append_entry;\n+  e = first_append_entry();\n@@ -1255,1 +1259,1 @@\n-    e = _first_append_entry;\n+    e = first_append_entry();\n@@ -1430,1 +1434,1 @@\n-\/\/ it can be appended to and is by jvmti and the kernel vm.\n+\/\/ it can be appended to and is by jvmti.\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+\n@@ -217,1 +218,5 @@\n-  static ClassPathEntry* _first_append_entry;\n+  static ClassPathEntry* volatile _first_append_entry_list;\n+  static ClassPathEntry* first_append_entry() {\n+    return Atomic::load(&_first_append_entry_list);\n+  }\n+\n@@ -219,1 +224,1 @@\n-  static ClassPathEntry* _last_append_entry;\n+  static ClassPathEntry* volatile _last_append_entry;\n@@ -237,1 +242,1 @@\n-  static bool has_bootclasspath_append() { return _first_append_entry != NULL; }\n+  static bool has_bootclasspath_append() { return first_append_entry() != NULL; }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    ClassPathEntry* e = ClassLoader::_first_append_entry;\n+    ClassPathEntry* e = first_append_entry();\n@@ -75,1 +75,1 @@\n-  ClassPathEntry* e = ClassLoader::_first_append_entry;\n+  ClassPathEntry* e = first_append_entry();\n@@ -85,1 +85,1 @@\n-    return ClassLoader::_first_append_entry;\n+    return first_append_entry();\n","filename":"src\/hotspot\/share\/classfile\/classLoader.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -662,7 +662,0 @@\n-    \/\/ lock the loader\n-    Thread* thread = Thread::current();\n-    HandleMark hm(thread);\n-    Handle loader_lock = Handle(thread, SystemDictionary::system_loader_lock());\n-\n-    ObjectLocker ol(loader_lock, thread);\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,0 +159,1 @@\n+Mutex*   Bootclasspath_lock           = NULL;\n@@ -355,0 +356,1 @@\n+  def(Bootclasspath_lock           , PaddedMutex  , leaf,        false, _safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,2 @@\n+extern Mutex*   Bootclasspath_lock;\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}