{"files":[{"patch":"@@ -301,1 +301,1 @@\n-        JCVariableDecl recordBindingVar = make.VarDef(tempBind, null);\n+        JCVariableDecl recordBindingVar = make.at(recordPattern.pos()).VarDef(tempBind, null);\n@@ -334,1 +334,1 @@\n-                    make.App(make.Select(convert(make.Ident(recordBinding), recordBinding.type), \/\/TODO - cast needed????\n+                    make.at(recordPattern.pos()).App(make.Select(convert(make.Ident(recordBinding), recordBinding.type),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toSet;\n@@ -85,1 +85,1 @@\n-                        coveredLines.addAll(\n+                        Set<Integer> methodCoveredLines =\n@@ -88,1 +88,9 @@\n-                                        .collect(toList()));\n+                                        .collect(toSet());\n+\n+                        TestCase.MethodData expected = testCase.findData(m.getName(classFile.constant_pool));\n+\n+                        if (expected != null) {\n+                            verifyCoveredLines(methodCoveredLines, expected);\n+                        }\n+\n+                        coveredLines.addAll(methodCoveredLines);\n@@ -91,10 +99,5 @@\n-                if (testCase.exactLines) {\n-                    assertTrue(coveredLines.equals(testCase.expectedLines),\n-                            format(\"Incorrect covered lines.%n\" +\n-                                    \"Covered: %s%n\" +\n-                                    \"Expected: %s%n\", coveredLines, testCase.expectedLines));\n-                } else {\n-                    assertTrue(coveredLines.containsAll(testCase.expectedLines),\n-                            format(\"All significant lines are not covered.%n\" +\n-                                    \"Covered: %s%n\" +\n-                                    \"Expected: %s%n\", coveredLines, testCase.expectedLines));\n+\n+                TestCase.MethodData expected = testCase.findData(null);\n+\n+                if (expected != null) {\n+                    verifyCoveredLines(coveredLines, expected);\n@@ -118,0 +121,14 @@\n+    }\n+\n+    private void verifyCoveredLines(Set<Integer> actualCoveredLines, TestCase.MethodData expected) {\n+        if (expected.exactLines()) {\n+            assertTrue(actualCoveredLines.equals(expected.expectedLines()),\n+                    format(\"Incorrect covered lines.%n\" +\n+                            \"Covered: %s%n\" +\n+                            \"Expected: %s%n\", actualCoveredLines, expected.expectedLines()));\n+        } else {\n+            assertTrue(actualCoveredLines.containsAll(expected.expectedLines()),\n+                    format(\"All significant lines are not covered.%n\" +\n+                            \"Covered: %s%n\" +\n+                            \"Expected: %s%n\", actualCoveredLines, expected.expectedLines()));\n+        }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTestBase.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307814\n+ * @summary Verify correct LineNumberTable is generated for unrolled record patterns.\n+ * @library \/tools\/lib \/tools\/javac\/lib ..\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox InMemoryFileManager TestBase\n+ * @build LineNumberTestBase TestCase\n+ * @run main MultipleRecordPatterns\n+ *\/\n+\n+import java.util.List;\n+\n+public class MultipleRecordPatterns extends LineNumberTestBase {\n+    public static void main(String[] args) throws Exception {\n+        new MultipleRecordPatterns().test();\n+    }\n+\n+    public void test() throws Exception {\n+        test(List.of(TEST_CASE));\n+    }\n+\n+    private static final TestCase[] TEST_CASE = new TestCase[] {\n+        new TestCase(\"\"\"\n+                     public class Patterns {                     \/\/ 1\n+                         private void test1(Object o) {          \/\/ 2\n+                             if (o instanceof R(var v)) {        \/\/ 3\n+                                 System.err.println(v);          \/\/ 4\n+                             }                                   \/\/ 5\n+                         }                                       \/\/ 6\n+                         private void test2(Object o) {          \/\/ 7\n+                             if (o instanceof R(var v)) {        \/\/ 8\n+                                 System.err.println(v);          \/\/ 9\n+                             }                                   \/\/10\n+                         }                                       \/\/11\n+                         record R(int i) {}                      \/\/12\n+                     }                                           \/\/13\n+                     \"\"\",\n+                     \"Patterns\",\n+                     new TestCase.MethodData(\"test1\", List.of(3, 4, 6), true),\n+                     new TestCase.MethodData(\"test2\", List.of(8, 9, 11), true))\n+    };\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/MultipleRecordPatterns.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import java.util.Set;\n+import java.util.Objects;\n@@ -35,2 +35,0 @@\n-    public final Set<Integer> expectedLines;\n-    public final boolean exactLines;\n@@ -41,0 +39,1 @@\n+    private final MethodData[] methodData;\n@@ -47,1 +46,5 @@\n-        this(src, expectedLines, false, List.of(), name);\n+        this(src, name, new MethodData(null, expectedLines, false));\n+    }\n+\n+    public TestCase(String src, String name, MethodData... methodData) {\n+        this(src, List.of(), name, methodData);\n@@ -53,0 +56,5 @@\n+        this(src, extraCompilerOptions, name, new MethodData(null, expectedLines, exactLines));\n+    }\n+\n+    public TestCase(String src, List<String> extraCompilerOptions,\n+                    String name, MethodData... methodData) {\n@@ -54,2 +62,0 @@\n-        this.expectedLines = new HashSet<>(expectedLines);\n-        this.exactLines = exactLines;\n@@ -58,0 +64,19 @@\n+        this.methodData = methodData;\n+    }\n+\n+    public MethodData findData(String methodName) {\n+        for (MethodData md : methodData) {\n+            if (Objects.equals(md.methodName(), methodName)) {\n+                return md;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    record MethodData(String methodName, Collection<Integer> expectedLines, boolean exactLines) {\n+\n+        public MethodData {\n+            expectedLines = new HashSet<>(expectedLines);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/TestCase.java","additions":32,"deletions":7,"binary":false,"changes":39,"status":"modified"}]}