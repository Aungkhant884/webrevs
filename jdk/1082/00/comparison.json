{"files":[{"patch":"@@ -0,0 +1,307 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test binary compatibility rules for record classes\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main RecordsBinaryCompatibilityTests\n+ *\/\n+\n+import java.util.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.IntStream;\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavaTask;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.OutputKind;\n+\n+public class RecordsBinaryCompatibilityTests extends TestRunner {\n+    ToolBox tb;\n+\n+    RecordsBinaryCompatibilityTests() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        RecordsBinaryCompatibilityTests t = new RecordsBinaryCompatibilityTests();\n+        t.runTests();\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterAddingRecordComponent(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int i) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(int i, int j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(0);\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.NoSuchMethodError\"\n+        );\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterDeletingRecordComponent(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int i, int j) {\n+                    public R(int j) {\n+                        this(0, j);\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(int j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(2);\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.NoSuchMethodError\"\n+        );\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterChangingRecordComponent(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int i, int j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(int i, String j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(0, 1);\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.NoSuchMethodError\"\n+        );\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterReorderingRecordComponents(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int i, String j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(String j, int i) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(0, \"\");\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.NoSuchMethodError\"\n+        );\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterChangingRecordComponent2(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int j) {\n+                    public static int i() { return 0; }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(int i) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(0);\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.IncompatibleClassChangeError\"\n+        );\n+    }\n+\n+    @Test\n+    public void testCompatibilityAfterChangingRecordComponent3(Path base) throws Exception {\n+        testCompatibilityAfterModifyingRecord(\n+                base,\n+                \"\"\"\n+                package pkg;\n+                public record R(int i) {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public record R(int j) {}\n+                \"\"\",\n+                \"\"\"\n+                package pkg;\n+                public class Client {\n+                    public static void main(String... args) {\n+                        R r = new R(0);\n+                        System.out.println(r.i());\n+                    }\n+                }\n+                \"\"\",\n+                true,\n+                \"java.lang.NoSuchMethodError\"\n+        );\n+    }\n+\n+    \/* 1- compiles the first version of the record class source code along with the client source code\n+     * 2- executes the client class just to make sure that it works\n+     * 3- compiles the second version of the record class\n+     * 4- executes the client class and makes sure that the VM throws the expected error or not\n+     *    depending on the shouldFail argument\n+     *\/\n+    private void testCompatibilityAfterModifyingRecord(\n+            Path base,\n+            String recordCode1,\n+            String recordCode2,\n+            String clientCode,\n+            boolean shouldFail,\n+            String expectedError) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path pkg = src.resolve(\"pkg\");\n+        Path recordSrc = pkg.resolve(\"R\");\n+        Path client = pkg.resolve(\"Client\");\n+\n+        tb.writeJavaFiles(recordSrc, recordCode1);\n+        tb.writeJavaFiles(client, clientCode);\n+\n+        Path out = base.resolve(\"out\");\n+        Files.createDirectories(out);\n+\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .files(findJavaFiles(pkg))\n+                .run();\n+\n+        \/\/ let's execute to check that it's working\n+        String output = new JavaTask(tb)\n+                .classpath(out.toString())\n+                .classArgs(\"pkg.Client\")\n+                .run()\n+                .writeAll()\n+                .getOutput(Task.OutputKind.STDOUT);\n+\n+        \/\/ let's first check that it runs wo issues\n+        if (!output.contains(\"0\")) {\n+            throw new AssertionError(\"execution of Client didn't finish\");\n+        }\n+\n+        \/\/ now lets change the record class\n+        tb.writeJavaFiles(recordSrc, recordCode2);\n+\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .files(findJavaFiles(recordSrc))\n+                .run();\n+\n+        if (shouldFail) {\n+            \/\/ let's now check that we get the expected error\n+            output = new JavaTask(tb)\n+                    .classpath(out.toString())\n+                    .classArgs(\"pkg.Client\")\n+                    .run(Task.Expect.FAIL)\n+                    .writeAll()\n+                    .getOutput(Task.OutputKind.STDERR);\n+            if (!output.startsWith(\"Exception in thread \\\"main\\\" \" + expectedError)) {\n+                throw new AssertionError(expectedError + \" expected\");\n+            }\n+        } else {\n+            new JavaTask(tb)\n+                    .classpath(out.toString())\n+                    .classArgs(\"pkg.Client\")\n+                    .run(Task.Expect.SUCCESS);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/RecordsBinaryCompatibilityTests.java","additions":307,"deletions":0,"binary":false,"changes":307,"status":"added"}]}