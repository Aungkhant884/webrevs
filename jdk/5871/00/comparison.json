{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import sun.awt.SunHints;\n-\n@@ -447,3 +445,1 @@\n-                final Iterator<Long> i = generalCache.values().iterator();\n-                while (i.hasNext()) {\n-                    final long longValue = i.next().longValue();\n+                for (long longValue : generalCache.values()) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CStrike.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,6 +135,1 @@\n-        Iterator<EventSetInfo> iterator = map.values().iterator();\n-        while (iterator.hasNext()) {\n-            if (!iterator.next().initialize()) {\n-                iterator.remove();\n-            }\n-        }\n+        map.values().removeIf(eventSetInfo -> !eventSetInfo.initialize());\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/EventSetInfo.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.util.Iterator;\n@@ -306,6 +305,1 @@\n-        Iterator<PropertyInfo> iterator = map.values().iterator();\n-        while (iterator.hasNext()) {\n-            if (!iterator.next().initialize()) {\n-                iterator.remove();\n-            }\n-        }\n+        map.values().removeIf(propertyInfo -> !propertyInfo.initialize());\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/PropertyInfo.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -890,5 +890,5 @@\n-            for (java.util.Iterator<KeyEventPostProcessor> iter = processors.iterator();\n-                 !stopPostProcessing && iter.hasNext(); )\n-            {\n-                stopPostProcessing = iter.next().\n-                            postProcessKeyEvent(e);\n+            for (KeyEventPostProcessor processor : processors) {\n+                stopPostProcessing = processor.postProcessKeyEvent(e);\n+                if (stopPostProcessing) {\n+                    break;\n+                }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/DefaultKeyboardFocusManager.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1166,1 +1166,2 @@\n-        Iterator<Map.Entry<Object, BCSSServiceProvider>> i = services.entrySet().iterator();\n+        for (Map.Entry<Object, BCSSServiceProvider> entry : services.entrySet()) {\n+            BCSSServiceProvider bcsp;\n@@ -1168,5 +1169,1 @@\n-        while (i.hasNext() && count < serializable) {\n-            Map.Entry<Object, BCSSServiceProvider> entry = i.next();\n-            BCSSServiceProvider bcsp  = null;\n-\n-             try {\n+            try {\n@@ -1174,1 +1171,1 @@\n-             } catch (ClassCastException cce) {\n+            } catch (ClassCastException cce) {\n@@ -1176,1 +1173,1 @@\n-             }\n+            }\n@@ -1178,1 +1175,1 @@\n-             if (bcsp.getServiceProvider() instanceof Serializable) {\n+            if (bcsp.getServiceProvider() instanceof Serializable) {\n@@ -1182,1 +1179,4 @@\n-             }\n+            }\n+            if (count >= serializable) {\n+                break;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/beancontext\/BeanContextServicesSupport.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.util.Iterator;\n@@ -404,1 +403,0 @@\n-            Iterator<Integer> iter = values.iterator();\n@@ -407,2 +405,2 @@\n-            while (iter.hasNext()) {\n-                intValues[i++] = iter.next();\n+            for (int value : values) {\n+                intValues[i++] = value;\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/plugins\/tiff\/TIFFTag.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -245,3 +245,1 @@\n-            Iterator<PrinterStateReason> iter = iterator();\n-            while (iter.hasNext()) {\n-                iter.next();\n+            for (PrinterStateReason ignored : this) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/PrinterStateReasons.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Iterator;\n@@ -331,6 +330,1 @@\n-        Iterator<JInternalFrame> iterator = allFrames.iterator();\n-        while (iterator.hasNext()) {\n-            if (iterator.next().getLayer() != layer) {\n-                iterator.remove();\n-            }\n-        }\n+        allFrames.removeIf(frame -> frame.getLayer() != layer);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JDesktopPane.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1960,2 +1960,2 @@\n-        for (Iterator<Long> iter = keySet.iterator(); iter.hasNext(); i++) {\n-            retval[i] = iter.next();\n+        for (long key : keySet) {\n+            retval[i++] = key;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/DataTransferer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.util.Collection;\n@@ -51,1 +52,0 @@\n-import java.util.Iterator;\n@@ -698,1 +698,1 @@\n-            Iterator<InputMethod> iterator = usedInputMethods.values().iterator();\n+            Collection<InputMethod> methods = usedInputMethods.values();\n@@ -700,2 +700,2 @@\n-            while (iterator.hasNext()) {\n-                iterator.next().dispose();\n+            for (InputMethod method : methods) {\n+                method.dispose();\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/InputContext.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.Iterator;\n@@ -444,2 +443,0 @@\n-            Iterator<Map.Entry<Object, int[]>> iterator =\n-                traceMap.entrySet().iterator();\n@@ -448,2 +445,1 @@\n-            while (iterator.hasNext()) {\n-                Map.Entry<Object, int[]> me = iterator.next();\n+            for (Map.Entry<Object, int[]> me : traceMap.entrySet()) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/GraphicsPrimitive.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -569,4 +569,2 @@\n-        Iterator<Integer> itr = selected.iterator();\n-        while (itr.hasNext()) {\n-            Integer val = itr.next();\n-            if (val.intValue() == index) {\n+        for (int val : selected) {\n+            if (val == index) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/ListHelper.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-        Iterator<XAtom> iter = atoms.iterator();\n@@ -76,2 +75,2 @@\n-        while (iter.hasNext()) {\n-            res[i++] = iter.next();\n+        for (XAtom atom : atoms) {\n+            res[i++] = atom;\n@@ -127,4 +126,2 @@\n-        Iterator<Integer> iter = mapping.keySet().iterator();\n-        while (iter.hasNext()) {\n-            Integer bits = iter.next();\n-            if ( (mask & bits.intValue()) == bits.intValue() ) {\n+        for (int bits : mapping.keySet()) {\n+            if ((mask & bits) == bits) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XAtomList.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.util.Iterator;\n-import java.util.Map;\n@@ -85,3 +83,1 @@\n-        Iterator<Map.Entry<Object, Object>> eIter = entrySet().iterator();\n-        while (eIter.hasNext()) {\n-            Map.Entry<Object, Object> entry = eIter.next();\n+        for (Entry<Object, Object> entry : entrySet()) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XCreateWindowParams.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,0 @@\n-            Iterator<Long> iter = sites.iterator();\n@@ -146,3 +145,2 @@\n-            while (iter.hasNext()) {\n-                Long l = iter.next();\n-                ret[index++] = l.longValue();\n+            for (long window : sites) {\n+                ret[index++] = window;\n@@ -155,5 +153,1 @@\n-            Iterator<Long> iter = sites.iterator();\n-            while (iter.hasNext()) {\n-                Long l = iter.next();\n-                long window = l.longValue();\n-\n+            for (long window : sites) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDropTargetRegistry.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.Iterator;\n@@ -249,3 +248,2 @@\n-            Iterator<AWTKeyStroke> iter = strokes.iterator();\n-            while (iter.hasNext()) {\n-                embedder.registerAccelerator(iter.next(), i++);\n+            for (AWTKeyStroke stroke : strokes) {\n+                embedder.registerAccelerator(stroke, i++);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbeddedFramePeer.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -321,3 +321,1 @@\n-            Iterator<XMSelectionListener> iter = listeners.iterator();\n-            while (iter.hasNext()) {\n-                XMSelectionListener disp = iter.next();\n+            for (XMSelectionListener disp : listeners) {\n@@ -334,3 +332,1 @@\n-            Iterator<XMSelectionListener> iter = listeners.iterator();\n-            while (iter.hasNext()) {\n-                XMSelectionListener disp = iter.next();\n+            for (XMSelectionListener disp : listeners) {\n@@ -338,1 +334,0 @@\n-\n@@ -360,4 +355,2 @@\n-            Iterator<XMSelectionListener> iter = listeners.iterator();\n-            while (iter.hasNext()) {\n-                XMSelectionListener disp = iter.next();\n-                disp.ownerChanged(screen,this, owner, data, timestamp);\n+            for (XMSelectionListener disp : listeners) {\n+                disp.ownerChanged(screen, this, owner, data, timestamp);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XMSelection.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -627,3 +627,1 @@\n-            Iterator<XEventDispatcher> iter = dispatchers.iterator();\n-            while (iter.hasNext()) {\n-                XEventDispatcher disp = iter.next();\n+            for (XEventDispatcher disp : dispatchers) {\n@@ -1664,3 +1662,1 @@\n-        Iterator<Map.Entry<String, Object>> i = updatedSettings.entrySet().iterator();\n-        while (i.hasNext()) {\n-            Map.Entry<String, Object> e = i.next();\n+        for (Map.Entry<String, Object> e : updatedSettings.entrySet()) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}