{"files":[{"patch":"@@ -3775,0 +3775,4 @@\n+      if (call == NULL) {\n+        ciEnv::current()->record_failure(\"CodeCache is full\");\n+        return;\n+      }\n@@ -3780,1 +3784,4 @@\n-\n+      if (call == NULL) {\n+        ciEnv::current()->record_failure(\"CodeCache is full\");\n+        return;\n+      }\n@@ -3788,4 +3795,2 @@\n-    if (call == NULL) {\n-      ciEnv::current()->record_failure(\"CodeCache is full\");\n-      return;\n-    } else if (UseSVE > 0 && Compile::current()->max_vector_size() >= 16) {\n+\n+    if (UseSVE > 0 && Compile::current()->max_vector_size() >= 16) {\n@@ -14748,1 +14753,5 @@\n-    __ zero_words($base$$Register, $cnt$$Register);\n+    address tpc = __ zero_words($base$$Register, $cnt$$Register);\n+    if (tpc == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n@@ -16026,2 +16035,2 @@\n-  ins_encode( aarch64_enc_java_static_call(meth),\n-              aarch64_enc_call_epilog );\n+  ins_encode(aarch64_enc_java_static_call(meth),\n+             aarch64_enc_call_epilog);\n@@ -16045,2 +16054,2 @@\n-  ins_encode( aarch64_enc_java_dynamic_call(meth),\n-               aarch64_enc_call_epilog );\n+  ins_encode(aarch64_enc_java_dynamic_call(meth),\n+             aarch64_enc_call_epilog);\n@@ -16512,4 +16521,8 @@\n-    __ arrays_equals($ary1$$Register, $ary2$$Register,\n-                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n-                     $result$$Register, $tmp$$Register, 1);\n-    %}\n+    address tpc = __ arrays_equals($ary1$$Register, $ary2$$Register,\n+                                   $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                                   $result$$Register, $tmp$$Register, 1);\n+    if (tpc == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n+  %}\n@@ -16529,3 +16542,7 @@\n-    __ arrays_equals($ary1$$Register, $ary2$$Register,\n-                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n-                     $result$$Register, $tmp$$Register, 2);\n+    address tpc = __ arrays_equals($ary1$$Register, $ary2$$Register,\n+                                   $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                                   $result$$Register, $tmp$$Register, 2);\n+    if (tpc == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n@@ -16542,1 +16559,5 @@\n-    __ has_negatives($ary1$$Register, $len$$Register, $result$$Register);\n+    address tpc = __ has_negatives($ary1$$Register, $len$$Register, $result$$Register);\n+    if (tpc == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n@@ -16575,2 +16596,7 @@\n-    __ byte_array_inflate($src$$Register, $dst$$Register, $len$$Register,\n-                          $tmp1$$FloatRegister, $tmp2$$FloatRegister, $tmp3$$FloatRegister, $tmp4$$Register);\n+    address tpc = __ byte_array_inflate($src$$Register, $dst$$Register, $len$$Register,\n+                                        $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n+                                        $tmp3$$FloatRegister, $tmp4$$Register);\n+    if (tpc == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":46,"deletions":20,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+  precond(cbuf.stubs()->start() != badAddress);\n+  precond(cbuf.stubs()->end() != badAddress);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -708,1 +708,1 @@\n-address MacroAssembler::trampoline_call(Address entry, CodeBuffer *cbuf) {\n+address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf) {\n@@ -729,0 +729,1 @@\n+        postcond(pc() == badAddress);\n@@ -742,0 +743,1 @@\n+  postcond(pc() != badAddress);\n@@ -4493,1 +4495,1 @@\n-void MacroAssembler::has_negatives(Register ary1, Register len, Register result) {\n+address MacroAssembler::has_negatives(Register ary1, Register len, Register result) {\n@@ -4530,1 +4532,1 @@\n-    RuntimeAddress has_neg =  RuntimeAddress(StubRoutines::aarch64::has_negatives());\n+    RuntimeAddress has_neg = RuntimeAddress(StubRoutines::aarch64::has_negatives());\n@@ -4532,1 +4534,6 @@\n-    trampoline_call(has_neg);\n+    address tpc1 = trampoline_call(has_neg);\n+    if (tpc1 == NULL) {\n+      DEBUG_ONLY(reset_labels(STUB_LONG, SET_RESULT, DONE));\n+      postcond(pc() == badAddress);\n+      return NULL;\n+    }\n@@ -4536,2 +4543,1 @@\n-    RuntimeAddress has_neg_long =  RuntimeAddress(\n-            StubRoutines::aarch64::has_negatives_long());\n+    RuntimeAddress has_neg_long = RuntimeAddress(StubRoutines::aarch64::has_negatives_long());\n@@ -4539,1 +4545,6 @@\n-    trampoline_call(has_neg_long);\n+    address tpc2 = trampoline_call(has_neg_long);\n+    if (tpc2 == NULL) {\n+      DEBUG_ONLY(reset_labels(SET_RESULT, DONE));\n+      postcond(pc() == badAddress);\n+      return NULL;\n+    }\n@@ -4546,0 +4557,2 @@\n+  postcond(pc() != badAddress);\n+  return pc();\n@@ -4548,3 +4561,3 @@\n-void MacroAssembler::arrays_equals(Register a1, Register a2, Register tmp3,\n-                                   Register tmp4, Register tmp5, Register result,\n-                                   Register cnt1, int elem_size) {\n+address MacroAssembler::arrays_equals(Register a1, Register a2, Register tmp3,\n+                                      Register tmp4, Register tmp5, Register result,\n+                                      Register cnt1, int elem_size) {\n@@ -4654,1 +4667,1 @@\n-    Label NEXT_DWORD, SHORT, TAIL, TAIL2, STUB, EARLY_OUT,\n+    Label NEXT_DWORD, SHORT, TAIL, TAIL2, STUB,\n@@ -4713,1 +4726,6 @@\n-    trampoline_call(stub);\n+    address tpc = trampoline_call(stub);\n+    if (tpc == NULL) {\n+      DEBUG_ONLY(reset_labels(SHORT, LAST_CHECK, CSET_EQ, SAME, DONE));\n+      postcond(pc() == badAddress);\n+      return NULL;\n+    }\n@@ -4716,1 +4734,0 @@\n-    bind(EARLY_OUT);\n@@ -4743,0 +4760,2 @@\n+  postcond(pc() != badAddress);\n+  return pc();\n@@ -4850,1 +4869,1 @@\n-void MacroAssembler::zero_words(Register ptr, Register cnt)\n+address MacroAssembler::zero_words(Register ptr, Register cnt)\n@@ -4860,1 +4879,1 @@\n-    RuntimeAddress zero_blocks =  RuntimeAddress(StubRoutines::aarch64::zero_blocks());\n+    RuntimeAddress zero_blocks = RuntimeAddress(StubRoutines::aarch64::zero_blocks());\n@@ -4863,1 +4882,6 @@\n-      trampoline_call(zero_blocks);\n+      address tpc = trampoline_call(zero_blocks);\n+      if (tpc == NULL) {\n+        DEBUG_ONLY(reset_labels(around));\n+        postcond(pc() == badAddress);\n+        return NULL;\n+      }\n@@ -4884,0 +4908,2 @@\n+  postcond(pc() != badAddress);\n+  return pc();\n@@ -4896,1 +4922,1 @@\n-    for (; i < (int)cnt; i += 2)\n+    for (; i < (int)cnt; i += 2) {\n@@ -4898,0 +4924,1 @@\n+    }\n@@ -4901,1 +4928,1 @@\n-    for (; i < remainder; i += 2)\n+    for (; i < remainder; i += 2) {\n@@ -4903,1 +4930,1 @@\n-\n+    }\n@@ -4913,1 +4940,1 @@\n-    for (i = 1; i < unroll; i++)\n+    for (i = 1; i < unroll; i++) {\n@@ -4915,0 +4942,1 @@\n+    }\n@@ -5130,3 +5158,3 @@\n-void MacroAssembler::byte_array_inflate(Register src, Register dst, Register len,\n-                                        FloatRegister vtmp1, FloatRegister vtmp2, FloatRegister vtmp3,\n-                                        Register tmp4) {\n+address MacroAssembler::byte_array_inflate(Register src, Register dst, Register len,\n+                                           FloatRegister vtmp1, FloatRegister vtmp2,\n+                                           FloatRegister vtmp3, Register tmp4) {\n@@ -5169,1 +5197,1 @@\n-      RuntimeAddress stub =  RuntimeAddress(StubRoutines::aarch64::large_byte_array_inflate());\n+      RuntimeAddress stub = RuntimeAddress(StubRoutines::aarch64::large_byte_array_inflate());\n@@ -5171,1 +5199,6 @@\n-      trampoline_call(stub);\n+      address tpc = trampoline_call(stub);\n+      if (tpc == NULL) {\n+        DEBUG_ONLY(reset_labels(big, done));\n+        postcond(pc() == badAddress);\n+        return NULL;\n+      }\n@@ -5225,0 +5258,2 @@\n+  postcond(pc() != badAddress);\n+  return pc();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":60,"deletions":25,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -1065,0 +1065,14 @@\n+#ifdef ASSERT\n+  \/\/ Template short-hand support to clean-up after a failed call to trampoline\n+  \/\/ call generation (see trampoline_call() below),  when a set of Labels must\n+  \/\/ be reset (before returning).\n+  template<typename Label, typename... More>\n+  void reset_labels(Label &lbl, More&... more) {\n+    lbl.reset(); reset_labels(more...);\n+  }\n+  template<typename Label>\n+  void reset_labels(Label &lbl) {\n+    lbl.reset();\n+  }\n+#endif\n+\n@@ -1068,1 +1082,1 @@\n-  address trampoline_call(Address entry, CodeBuffer *cbuf = NULL);\n+  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL);\n@@ -1240,1 +1254,1 @@\n-  void has_negatives(Register ary1, Register len, Register result);\n+  address has_negatives(Register ary1, Register len, Register result);\n@@ -1242,2 +1256,2 @@\n-  void arrays_equals(Register a1, Register a2, Register result, Register cnt1,\n-                     Register tmp1, Register tmp2, Register tmp3, int elem_size);\n+  address arrays_equals(Register a1, Register a2, Register result, Register cnt1,\n+                        Register tmp1, Register tmp2, Register tmp3, int elem_size);\n@@ -1250,1 +1264,1 @@\n-  void zero_words(Register ptr, Register cnt);\n+  address zero_words(Register ptr, Register cnt);\n@@ -1255,3 +1269,3 @@\n-  void byte_array_inflate(Register src, Register dst, Register len,\n-                          FloatRegister vtmp1, FloatRegister vtmp2,\n-                          FloatRegister vtmp3, Register tmp4);\n+  address byte_array_inflate(Register src, Register dst, Register len,\n+                             FloatRegister vtmp1, FloatRegister vtmp2,\n+                             FloatRegister vtmp3, Register tmp4);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1369,1 +1369,1 @@\n-  uint *inct_starts = NEW_RESOURCE_ARRAY(uint, nblocks+1);\n+  uint* inct_starts = NEW_RESOURCE_ARRAY(uint, nblocks+1);\n@@ -1372,1 +1372,1 @@\n-  uint *call_returns = NEW_RESOURCE_ARRAY(uint, nblocks+1);\n+  uint* call_returns = NEW_RESOURCE_ARRAY(uint, nblocks+1);\n@@ -1390,1 +1390,1 @@\n-  int *node_offsets      = NULL;\n+  int* node_offsets      = NULL;\n@@ -1410,2 +1410,2 @@\n-  Label *blk_labels = NEW_RESOURCE_ARRAY(Label, nblocks+1);\n-  for (uint i=0; i <= nblocks; i++) {\n+  Label* blk_labels = NEW_RESOURCE_ARRAY(Label, nblocks+1);\n+  for (uint i = 0; i <= nblocks; i++) {\n@@ -1415,1 +1415,0 @@\n-  \/\/ ------------------\n@@ -1417,2 +1416,1 @@\n-  Node *delay_slot = NULL;\n-\n+  Node* delay_slot = NULL;\n@@ -1675,0 +1673,1 @@\n+      assert(!C->failing(), \"Should not reach here if failing.\");\n@@ -1677,1 +1676,1 @@\n-      DEBUG_ONLY( uint instr_offset = cb->insts_size(); )\n+      DEBUG_ONLY(uint instr_offset = cb->insts_size());\n@@ -1679,1 +1678,1 @@\n-      current_offset  = cb->insts_size();\n+      current_offset = cb->insts_size();\n@@ -1866,2 +1865,1 @@\n-                   C->is_osr_compilation()    ? \" compile_kind='osr'\" :\n-                   \"\");\n+                   C->is_osr_compilation() ? \" compile_kind='osr'\" : \"\");\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"}]}