{"files":[{"patch":"@@ -168,1 +168,1 @@\n-                              int& end_index, TRAPS) {\n+                              int& end_index, bool firstBatch, TRAPS) {\n@@ -216,1 +216,1 @@\n-          index == start_index && method->caller_sensitive()) {\n+          firstBatch && index == start_index && method->caller_sensitive()) {\n@@ -501,1 +501,1 @@\n-                               frames_array, end_index, CHECK_NULL);\n+                               frames_array, end_index, true, CHECK_NULL);\n@@ -586,1 +586,1 @@\n-                             frames_array, end_index, CHECK_0);\n+                             frames_array, end_index, false, CHECK_0);\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-                            int& end_index, TRAPS);\n+                            int& end_index, bool firstBatch, TRAPS);\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311500\n+ * @summary StackWalker.getCallerClass() can throw if invoked reflectively\n+ * @run main\/othervm ReflectiveGetCallerClassTest\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames ReflectiveGetCallerClassTest\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class ReflectiveGetCallerClassTest {\n+    private static StackWalker WALKER = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+    private static Method gcc, inv;\n+    static {\n+        try {\n+            inv = Method.class.getDeclaredMethod(\"invoke\", Object.class, Object[].class);\n+            gcc = ReflectiveGetCallerClassTest.class.getDeclaredMethod(\"getCallerClass\");\n+        } catch (SecurityException se) {\n+            \/\/ This test can't run if a security manager prohibits \"getStackWalkerWithClassReference\"\n+            System.err.println(se);\n+            System.exit(0);\n+        } catch (Exception e) {\n+            System.err.println(e);\n+            System.exit(1);\n+        }\n+    }\n+\n+    public static void getCallerClass() {\n+        System.out.println(WALKER.getCallerClass());\n+    }\n+\n+    \/\/ Create a list of Object[] of the form:\n+    \/\/   { m, first }\n+    \/\/   { m, { m, first } }\n+    \/\/   { m, { m, { m, first } } }\n+    static List<Object[]> prepareArgs(Object[] first, Method m, int depth) {\n+        List<Object[]> l = new ArrayList<Object[]>(depth + 1);\n+        l.add(first);\n+        while (depth-- > 0) {\n+            l.add(new Object[] { m, l.get(l.size() - 1) });\n+        }\n+        return l;\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        \/\/ gcc is ReflectiveGetCallerClassTest::getCallerClass()\n+        \/\/ inv is Method::invoke()\n+        for (Object[] params : prepareArgs(new Object[] { gcc, new Object[] { null, null } }, inv, 10)) {\n+            inv.invoke(inv, inv, params);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/StackWalker\/ReflectiveGetCallerClassTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}