{"files":[{"patch":"@@ -12452,0 +12452,11 @@\n+instruct testI_reg_reg(rFlagsReg cr, rRegI src1, rRegI src2, immI_0 zero)\n+%{\n+  match(Set cr (CmpI (AndI src1 src2) zero));\n+\n+  format %{ \"testl   $src1, $src2\" %}\n+  ins_encode %{\n+    __ testl($src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(ialu_cr_reg_imm);\n+%}\n+\n@@ -12768,0 +12779,11 @@\n+instruct testL_reg_reg(rFlagsReg cr, rRegL src1, rRegL src2, immL0 zero)\n+%{\n+  match(Set cr (CmpL (AndL src1 src2) zero));\n+\n+  format %{ \"testq   $src1, $src2\\t# long\" %}\n+  ins_encode %{\n+    __ testq($src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(ialu_cr_reg_imm);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler.x86;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 2)\n+@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+public class AndCmpTestInstruction {\n+    long[] valuesLong;\n+    long valueMaskLong;\n+    int[] valuesInt;\n+    int valueMaskInt;\n+\n+    @Setup\n+    public void setup() {\n+        Random random = new Random(42);\n+        valuesLong = new long[128];\n+        for (int i = 0; i < valuesLong.length; i++) {\n+            valuesLong[i] = random.nextLong();\n+        }\n+        valueMaskLong = 1000;\n+\n+        valuesInt = new int[128];\n+        for (int i = 0; i < valuesInt.length; i++) {\n+            valuesInt[i] = random.nextInt();\n+        }\n+        valueMaskInt = 1000;\n+    }\n+\n+    @Benchmark\n+    public void benchmarkStaticLargeAndCmpEqualsLong(Blackhole bh) {\n+        for (int i = 0; i < valuesLong.length; i++) {\n+            long value = valuesLong[i];\n+            long withAnd = value & 300000000000000L;\n+            bh.consume(withAnd == 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmarkStaticSmallAndCmpEqualsLong(Blackhole bh) {\n+        for (int i = 0; i < valuesLong.length; i++) {\n+            long value = valuesLong[i];\n+            long withAnd = value & 300L;\n+            bh.consume(withAnd == 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmarkOpaqueAndCmpEqualsLong(Blackhole bh) {\n+        for (int i = 0; i < valuesLong.length; i++) {\n+            long value = valuesLong[i];\n+            long withAnd = value & valueMaskLong;\n+            bh.consume(withAnd == 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmarkStaticAndCmpEqualsInt(Blackhole bh) {\n+        for (int i = 0; i < valuesInt.length; i++) {\n+            long value = valuesInt[i];\n+            long withAnd = value & 300;\n+            bh.consume(withAnd == 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void benchmarkOpaqueAndCmpEqualsInt(Blackhole bh) {\n+        for (int i = 0; i < valuesInt.length; i++) {\n+            long value = valuesInt[i];\n+            long withAnd = value & valueMaskInt;\n+            bh.consume(withAnd == 0);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/AndCmpTestInstruction.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}