{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"oops\/klass.inline.hpp\"\n@@ -2337,0 +2338,5 @@\n+\n+            Klass* klass = method->method_holder();\n+            assert(klass->is_loader_alive(), \"must be alive\");\n+\n+            ast->print(\"%s.\", klass->external_name());\n","filename":"src\/hotspot\/share\/code\/codeHeapState.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Iterator;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+\n+\/*\n+ * @test CodeHeapAnalyticsMethodNames\n+ * @summary Test Compiler.CodeHeap_Analytics output has qualified method names\n+ * in the 'METHOD NAMES' section.\n+ * @bug 8275729\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver CodeHeapAnalyticsMethodNames\n+ *\/\n+\n+public class CodeHeapAnalyticsMethodNames {\n+\n+    public static void main(String args[]) throws Exception {\n+        PidJcmdExecutor executor = new PidJcmdExecutor();\n+        OutputAnalyzer out = executor.execute(\"Compiler.CodeHeap_Analytics\");\n+        out.shouldHaveExitValue(0);\n+        Iterator<String> iter = out.asLines().listIterator();\n+        boolean methodNamesSectionFound = false;\n+        while (iter.hasNext()) {\n+            String line = iter.next();\n+            if (line.contains(\"M E T H O D   N A M E S\")) {\n+                methodNamesSectionFound = true;\n+                break;\n+            }\n+        }\n+        boolean nMethodFound = false;\n+        while (iter.hasNext()) {\n+            String line = iter.next();\n+            if (line.startsWith(\"0x\") && line.contains(\"nMethod\")) {\n+                nMethodFound = true;\n+                if (line.contains(\"java.lang.invoke.MethodHandle\")) {\n+                    return;\n+                }\n+            }\n+        }\n+        if (methodNamesSectionFound && nMethodFound) {\n+            throw new RuntimeException(\"No java.lang.invoke.MethodHandle found.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CodeHeapAnalyticsMethodNames.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}