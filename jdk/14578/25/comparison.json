{"files":[{"patch":"@@ -448,33 +448,0 @@\n-    static String fastUUID(long lsb, long msb) {\n-        if (COMPACT_STRINGS) {\n-            byte[] buf = new byte[36];\n-            formatUnsignedLong0(lsb,        4, buf, 24, 12);\n-            formatUnsignedLong0(lsb >>> 48, 4, buf, 19, 4);\n-            formatUnsignedLong0(msb,        4, buf, 14, 4);\n-            formatUnsignedLong0(msb >>> 16, 4, buf, 9,  4);\n-            formatUnsignedLong0(msb >>> 32, 4, buf, 0,  8);\n-\n-            buf[23] = '-';\n-            buf[18] = '-';\n-            buf[13] = '-';\n-            buf[8]  = '-';\n-\n-            return new String(buf, LATIN1);\n-        } else {\n-            byte[] buf = new byte[72];\n-\n-            formatUnsignedLong0UTF16(lsb,        4, buf, 24, 12);\n-            formatUnsignedLong0UTF16(lsb >>> 48, 4, buf, 19, 4);\n-            formatUnsignedLong0UTF16(msb,        4, buf, 14, 4);\n-            formatUnsignedLong0UTF16(msb >>> 16, 4, buf, 9,  4);\n-            formatUnsignedLong0UTF16(msb >>> 32, 4, buf, 0,  8);\n-\n-            StringUTF16.putChar(buf, 23, '-');\n-            StringUTF16.putChar(buf, 18, '-');\n-            StringUTF16.putChar(buf, 13, '-');\n-            StringUTF16.putChar(buf,  8, '-');\n-\n-            return new String(buf, UTF16);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2398,3 +2398,0 @@\n-            public String fastUUID(long lsb, long msb) {\n-                return Long.fastUUID(lsb, msb);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import jdk.internal.util.Hex256;\n+\n@@ -38,3 +40,0 @@\n-    @Stable\n-    private static final short[] DIGITS;\n-\n@@ -46,15 +45,0 @@\n-    static {\n-        short[] digits = new short[16 * 16];\n-\n-        for (int i = 0; i < 16; i++) {\n-            short hi = (short) ((i < 10 ? i + '0' : i - 10 + 'a') << 8);\n-\n-            for (int j = 0; j < 16; j++) {\n-                short lo = (short) (j < 10 ? j + '0' : j - 10 + 'a');\n-                digits[(i << 4) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n@@ -70,0 +54,1 @@\n+        short[] hex256 = Hex256.DIGITS;\n@@ -71,1 +56,1 @@\n-            int digits = DIGITS[(int) (value & 0xFF)];\n+            int digits = hex256[(int) (value & 0xFF)];\n@@ -77,1 +62,1 @@\n-        int digits = DIGITS[(int) (value & 0xFF)];\n+        int digits = hex256[(int) (value & 0xFF)];\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexDigits.java","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.StandardCharsets;\n@@ -32,0 +34,2 @@\n+import jdk.internal.util.ByteArray;\n+import jdk.internal.util.Hex256;\n@@ -466,1 +470,48 @@\n-        return jla.fastUUID(leastSigBits, mostSigBits);\n+        long lsb = leastSigBits;\n+        long msb = mostSigBits;\n+        short[] hex256 = Hex256.DIGITS;\n+        byte[] buf = new byte[36];\n+        ByteArray.setLong(\n+                buf,\n+                0,\n+                ((long) hex256[((int) (msb >> 56)) & 0xff] << 48)\n+                        | ((long) hex256[((int) (msb >> 48)) & 0xff] << 32)\n+                        | ((long) hex256[((int) (msb >> 40)) & 0xff] << 16)\n+                        | hex256[((int) (msb >> 32)) & 0xff]);\n+        buf[8] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                9,\n+                (hex256[(((int) msb) >> 24) & 0xff] << 16)\n+                        | hex256[(((int) msb) >> 16) & 0xff]);\n+        buf[13] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                14,\n+                (hex256[(((int) msb) >> 8) & 0xff] << 16)\n+                        | hex256[((int) msb) & 0xff]);\n+        buf[18] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                19,\n+                (hex256[(((int) (lsb >> 56))) & 0xff] << 16)\n+                        | hex256[(((int) (lsb >> 48))) & 0xff]);\n+        buf[23] = '-';\n+        ByteArray.setLong(\n+                buf,\n+                24,\n+                ((long) hex256[(((int) (lsb >> 40))) & 0xff] << 48)\n+                        | ((long) hex256[((int) (lsb >> 32)) & 0xff] << 32)\n+                        | ((long) hex256[(((int) lsb) >> 24) & 0xff] << 16)\n+                        | hex256[(((int) lsb) >> 16) & 0xff]);\n+        ByteArray.setInt(\n+                buf,\n+                32,\n+                (hex256[(((int) lsb) >> 8) & 0xff] << 16)\n+                        | hex256[((int) lsb) & 0xff]);\n+\n+        try {\n+            return jla.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+        } catch (CharacterCodingException cce) {\n+            throw new AssertionError(cce);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -179,5 +179,0 @@\n-    \/**\n-     * Invokes Long.fastUUID\n-     *\/\n-    String fastUUID(long lsb, long msb);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Provides a hexadecimal cache array of values from 0 to 255\n+ *\/\n+public final class Hex256 {\n+    private Hex256(){\n+    }\n+\n+    @Stable\n+    public static final short[] DIGITS;\n+\n+    static {\n+        short[] digits = new short[16 * 16];\n+        for (int i = 0; i < 16; i++) {\n+            short hi = (short) ((i < 10 ? i + '0' : i - 10 + 'a') << 8);\n+            for (int j = 0; j < 16; j++) {\n+                short lo = (short) (j < 10 ? j + '0' : j - 10 + 'a');\n+                digits[(i << 4) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Hex256.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}