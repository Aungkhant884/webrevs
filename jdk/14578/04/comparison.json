{"files":[{"patch":"@@ -88,0 +88,42 @@\n+    \/**\n+     * HEX256 initialization use constant values improved jvm startup, values calculation logic for values as follows:\n+     * static {\n+     *     HEX256 = new char[256];\n+     *     for (int i = 0; i < 256; i++) {\n+     *         int hi = (i >> 4) & 15;\n+     *         int lo = i & 15;\n+     *         HEX256[i] = (char) (((hi < 10 ? '0' + hi : 'a' + hi - 10) << 8)\n+     *                 + (lo < 10 ? '0' + lo : 'a' + lo - 10));\n+     *     }\n+     * }\n+     *\/\n+    @Stable\n+    static final char[] HEX256 = new char[]{\n+            0x3030, 0x3031, 0x3032, 0x3033, 0x3034, 0x3035, 0x3036, 0x3037, 0x3038, 0x3039,\n+            0x3061, 0x3062, 0x3063, 0x3064, 0x3065, 0x3066, 0x3130, 0x3131, 0x3132, 0x3133,\n+            0x3134, 0x3135, 0x3136, 0x3137, 0x3138, 0x3139, 0x3161, 0x3162, 0x3163, 0x3164,\n+            0x3165, 0x3166, 0x3230, 0x3231, 0x3232, 0x3233, 0x3234, 0x3235, 0x3236, 0x3237,\n+            0x3238, 0x3239, 0x3261, 0x3262, 0x3263, 0x3264, 0x3265, 0x3266, 0x3330, 0x3331,\n+            0x3332, 0x3333, 0x3334, 0x3335, 0x3336, 0x3337, 0x3338, 0x3339, 0x3361, 0x3362,\n+            0x3363, 0x3364, 0x3365, 0x3366, 0x3430, 0x3431, 0x3432, 0x3433, 0x3434, 0x3435,\n+            0x3436, 0x3437, 0x3438, 0x3439, 0x3461, 0x3462, 0x3463, 0x3464, 0x3465, 0x3466,\n+            0x3530, 0x3531, 0x3532, 0x3533, 0x3534, 0x3535, 0x3536, 0x3537, 0x3538, 0x3539,\n+            0x3561, 0x3562, 0x3563, 0x3564, 0x3565, 0x3566, 0x3630, 0x3631, 0x3632, 0x3633,\n+            0x3634, 0x3635, 0x3636, 0x3637, 0x3638, 0x3639, 0x3661, 0x3662, 0x3663, 0x3664,\n+            0x3665, 0x3666, 0x3730, 0x3731, 0x3732, 0x3733, 0x3734, 0x3735, 0x3736, 0x3737,\n+            0x3738, 0x3739, 0x3761, 0x3762, 0x3763, 0x3764, 0x3765, 0x3766, 0x3830, 0x3831,\n+            0x3832, 0x3833, 0x3834, 0x3835, 0x3836, 0x3837, 0x3838, 0x3839, 0x3861, 0x3862,\n+            0x3863, 0x3864, 0x3865, 0x3866, 0x3930, 0x3931, 0x3932, 0x3933, 0x3934, 0x3935,\n+            0x3936, 0x3937, 0x3938, 0x3939, 0x3961, 0x3962, 0x3963, 0x3964, 0x3965, 0x3966,\n+            0x6130, 0x6131, 0x6132, 0x6133, 0x6134, 0x6135, 0x6136, 0x6137, 0x6138, 0x6139,\n+            0x6161, 0x6162, 0x6163, 0x6164, 0x6165, 0x6166, 0x6230, 0x6231, 0x6232, 0x6233,\n+            0x6234, 0x6235, 0x6236, 0x6237, 0x6238, 0x6239, 0x6261, 0x6262, 0x6263, 0x6264,\n+            0x6265, 0x6266, 0x6330, 0x6331, 0x6332, 0x6333, 0x6334, 0x6335, 0x6336, 0x6337,\n+            0x6338, 0x6339, 0x6361, 0x6362, 0x6363, 0x6364, 0x6365, 0x6366, 0x6430, 0x6431,\n+            0x6432, 0x6433, 0x6434, 0x6435, 0x6436, 0x6437, 0x6438, 0x6439, 0x6461, 0x6462,\n+            0x6463, 0x6464, 0x6465, 0x6466, 0x6530, 0x6531, 0x6532, 0x6533, 0x6534, 0x6535,\n+            0x6536, 0x6537, 0x6538, 0x6539, 0x6561, 0x6562, 0x6563, 0x6564, 0x6565, 0x6566,\n+            0x6630, 0x6631, 0x6632, 0x6633, 0x6634, 0x6635, 0x6636, 0x6637, 0x6638, 0x6639,\n+            0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666\n+    };\n+\n@@ -449,7 +491,1 @@\n-        if (COMPACT_STRINGS) {\n-            byte[] buf = new byte[36];\n-            formatUnsignedLong0(lsb,        4, buf, 24, 12);\n-            formatUnsignedLong0(lsb >>> 48, 4, buf, 19, 4);\n-            formatUnsignedLong0(msb,        4, buf, 14, 4);\n-            formatUnsignedLong0(msb >>> 16, 4, buf, 9,  4);\n-            formatUnsignedLong0(msb >>> 32, 4, buf, 0,  8);\n+        char[] hex256 = HEX256;\n@@ -457,4 +493,16 @@\n-            buf[23] = '-';\n-            buf[18] = '-';\n-            buf[13] = '-';\n-            buf[8]  = '-';\n+        char i0 = hex256[((int) (msb >> 56)) & 0xff];\n+        char i1 = hex256[((int) (msb >> 48)) & 0xff];\n+        char i2 = hex256[((int) (msb >> 40)) & 0xff];\n+        char i3 = hex256[((int) (msb >> 32)) & 0xff];\n+        char i4 = hex256[(((int) msb) >> 24) & 0xff];\n+        char i5 = hex256[(((int) msb) >> 16) & 0xff];\n+        char i6 = hex256[(((int) msb) >> 8) & 0xff];\n+        char i7 = hex256[((int) msb) & 0xff];\n+        char i8 = hex256[(((int) (lsb >> 56))) & 0xff];\n+        char i9 = hex256[(((int) (lsb >> 48))) & 0xff];\n+        char i10 = hex256[(((int) (lsb >> 40))) & 0xff];\n+        char i11 = hex256[((int) (lsb >> 32)) & 0xff];\n+        char i12 = hex256[(((int) lsb) >> 24) & 0xff];\n+        char i13 = hex256[(((int) lsb) >> 16) & 0xff];\n+        char i14 = hex256[(((int) lsb) >> 8) & 0xff];\n+        char i15 = hex256[((int) lsb) & 0xff];\n@@ -462,1 +510,7 @@\n-            return new String(buf, LATIN1);\n+        final byte coder;\n+        final int charSize;\n+        final int off;\n+        if (COMPACT_STRINGS) {\n+            coder = LATIN1;\n+            charSize = 1;\n+            off = 0;\n@@ -464,7 +518,5 @@\n-            byte[] buf = new byte[72];\n-\n-            formatUnsignedLong0UTF16(lsb,        4, buf, 24, 12);\n-            formatUnsignedLong0UTF16(lsb >>> 48, 4, buf, 19, 4);\n-            formatUnsignedLong0UTF16(msb,        4, buf, 14, 4);\n-            formatUnsignedLong0UTF16(msb >>> 16, 4, buf, 9,  4);\n-            formatUnsignedLong0UTF16(msb >>> 32, 4, buf, 0,  8);\n+            coder = UTF16;\n+            charSize = 2;\n+            off = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN ? 1 : 0;\n+        }\n+        final byte[] buf = new byte[36 * charSize];\n@@ -472,4 +524,36 @@\n-            StringUTF16.putChar(buf, 23, '-');\n-            StringUTF16.putChar(buf, 18, '-');\n-            StringUTF16.putChar(buf, 13, '-');\n-            StringUTF16.putChar(buf,  8, '-');\n+        buf[off] = (byte) (i >> 8);\n+        buf[1 * charSize + off] = (byte) i;\n+        buf[2 * charSize + off] = (byte) (i1 >> 8);\n+        buf[3 * charSize + off] = (byte) i1;\n+        buf[4 * charSize + off] = (byte) (i2 >> 8);\n+        buf[5 * charSize + off] = (byte) i2;\n+        buf[6 * charSize + off] = (byte) (i3 >> 8);\n+        buf[7 * charSize + off] = (byte) i3;\n+        buf[8 * charSize + off] = '-';\n+        buf[9 * charSize + off] = (byte) (i4 >> 8);\n+        buf[10 * charSize + off] = (byte) i4;\n+        buf[11 * charSize + off] = (byte) (i5 >> 8);\n+        buf[12 * charSize + off] = (byte) i5;\n+        buf[13 * charSize + off] = '-';\n+        buf[14 * charSize + off] = (byte) (i6 >> 8);\n+        buf[15 * charSize + off] = (byte) i6;\n+        buf[16 * charSize + off] = (byte) (i7 >> 8);\n+        buf[17 * charSize + off] = (byte) i7;\n+        buf[18 * charSize + off] = '-';\n+        buf[19 * charSize + off] = (byte) (i8 >> 8);\n+        buf[20 * charSize + off] = (byte) i8;\n+        buf[21 * charSize + off] = (byte) (i9 >> 8);\n+        buf[22 * charSize + off] = (byte) i9;\n+        buf[23 * charSize + off] = '-';\n+        buf[24 * charSize + off] = (byte) (i10 >> 8);\n+        buf[25 * charSize + off] = (byte) i10;\n+        buf[26 * charSize + off] = (byte) (i11 >> 8);\n+        buf[27 * charSize + off] = (byte) i11;\n+        buf[28 * charSize + off] = (byte) (i12 >> 8);\n+        buf[29 * charSize + off] = (byte) i12;\n+        buf[30 * charSize + off] = (byte) (i13 >> 8);\n+        buf[31 * charSize + off] = (byte) i13;\n+        buf[32 * charSize + off] = (byte) (i14 >> 8);\n+        buf[33 * charSize + off] = (byte) i14;\n+        buf[34 * charSize + off] = (byte) (i15 >> 8);\n+        buf[35 * charSize + off] = (byte) i15;\n@@ -477,2 +561,1 @@\n-            return new String(buf, UTF16);\n-        }\n+        return new String(buf, coder);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":108,"deletions":25,"binary":false,"changes":133,"status":"modified"}]}