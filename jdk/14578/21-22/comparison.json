{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.nio.ByteOrder;\n@@ -38,2 +37,0 @@\n-import jdk.internal.util.ByteArray;\n-import jdk.internal.util.HexDigits;\n@@ -451,108 +448,0 @@\n-    static String fastUUID(long lsb, long msb) {\n-        byte[] buf = new byte[36];\n-        short[] digits = HexDigits.DIGITS;\n-        ByteArray.setLong(\n-                buf,\n-                0,\n-                ((long) digits[((int) (msb >> 56)) & 0xff] << 48)\n-                        | ((long) digits[((int) (msb >> 48)) & 0xff] << 32)\n-                        | ((long) digits[((int) (msb >> 40)) & 0xff] << 16)\n-                        | digits[((int) (msb >> 32)) & 0xff]);\n-        buf[8] = '-';\n-        ByteArray.setInt(\n-                buf,\n-                9,\n-                (digits[(((int) msb) >> 24) & 0xff] << 16)\n-                        | digits[(((int) msb) >> 16) & 0xff]);\n-        buf[13] = '-';\n-        ByteArray.setInt(\n-                buf,\n-                14,\n-                (digits[(((int) msb) >> 8) & 0xff] << 16)\n-                        | digits[((int) msb) & 0xff]);\n-        buf[18] = '-';\n-        ByteArray.setInt(\n-                buf,\n-                19,\n-                (digits[(((int) (lsb >> 56))) & 0xff] << 16)\n-                        | digits[(((int) (lsb >> 48))) & 0xff]);\n-        buf[23] = '-';\n-        ByteArray.setLong(\n-                buf,\n-                24,\n-                ((long) digits[(((int) (lsb >> 40))) & 0xff] << 48)\n-                        | ((long) digits[((int) (lsb >> 32)) & 0xff] << 32)\n-                        | ((long) digits[(((int) lsb) >> 24) & 0xff] << 16)\n-                        | digits[(((int) lsb) >> 16) & 0xff]);\n-        ByteArray.setInt(\n-                buf,\n-                32,\n-                (digits[(((int) lsb) >> 8) & 0xff] << 16)\n-                        | digits[((int) lsb) & 0xff]);\n-\n-        return new String(buf, LATIN1);\n-    }\n-\n-    static String fastUUIDUTF16(long lsb, long msb) {\n-        short[] digits = HexDigits.DIGITS;\n-\n-        short i0 = digits[((int) (msb >> 56)) & 0xff];\n-        short i1 = digits[((int) (msb >> 48)) & 0xff];\n-        short i2 = digits[((int) (msb >> 40)) & 0xff];\n-        short i3 = digits[((int) (msb >> 32)) & 0xff];\n-        short i4 = digits[(((int) msb) >> 24) & 0xff];\n-        short i5 = digits[(((int) msb) >> 16) & 0xff];\n-        short i6 = digits[(((int) msb) >> 8) & 0xff];\n-        short i7 = digits[((int) msb) & 0xff];\n-        short i8 = digits[(((int) (lsb >> 56))) & 0xff];\n-        short i9 = digits[(((int) (lsb >> 48))) & 0xff];\n-        short i10 = digits[(((int) (lsb >> 40))) & 0xff];\n-        short i11 = digits[((int) (lsb >> 32)) & 0xff];\n-        short i12 = digits[(((int) lsb) >> 24) & 0xff];\n-        short i13 = digits[(((int) lsb) >> 16) & 0xff];\n-        short i14 = digits[(((int) lsb) >> 8) & 0xff];\n-        short i15 = digits[((int) lsb) & 0xff];\n-\n-        byte[] buf = new byte[72];\n-        int off = StringUTF16.isBigEndian() ? 1 : 0;\n-\n-        buf[0 + off] = (byte) (i0 >> 8);\n-        buf[2 + off] = (byte) i0;\n-        buf[4 + off] = (byte) (i1 >> 8);\n-        buf[6 + off] = (byte) i1;\n-        buf[8 + off] = (byte) (i2 >> 8);\n-        buf[10 + off] = (byte) i2;\n-        buf[12 + off] = (byte) (i3 >> 8);\n-        buf[14 + off] = (byte) i3;\n-        buf[16 + off] = '-';\n-        buf[18 + off] = (byte) (i4 >> 8);\n-        buf[20 + off] = (byte) i4;\n-        buf[22 + off] = (byte) (i5 >> 8);\n-        buf[24 + off] = (byte) i5;\n-        buf[26 + off] = '-';\n-        buf[28 + off] = (byte) (i6 >> 8);\n-        buf[30 + off] = (byte) i6;\n-        buf[32 + off] = (byte) (i7 >> 8);\n-        buf[34 + off] = (byte) i7;\n-        buf[36 + off] = '-';\n-        buf[38 + off] = (byte) (i8 >> 8);\n-        buf[40 + off] = (byte) i8;\n-        buf[42 + off] = (byte) (i9 >> 8);\n-        buf[44 + off] = (byte) i9;\n-        buf[46 + off] = '-';\n-        buf[48 + off] = (byte) (i10 >> 8);\n-        buf[50 + off] = (byte) i10;\n-        buf[52 + off] = (byte) (i11 >> 8);\n-        buf[54 + off] = (byte) i11;\n-        buf[56 + off] = (byte) (i12 >> 8);\n-        buf[58 + off] = (byte) i12;\n-        buf[60 + off] = (byte) (i13 >> 8);\n-        buf[62 + off] = (byte) i13;\n-        buf[64 + off] = (byte) (i14 >> 8);\n-        buf[66 + off] = (byte) i14;\n-        buf[68 + off] = (byte) (i15 >> 8);\n-        buf[70 + off] = (byte) i15;\n-\n-        return new String(buf, UTF16);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -1502,1 +1502,1 @@\n-    static native boolean isBigEndian();\n+    private static native boolean isBigEndian();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2398,3 +2398,0 @@\n-            public String fastUUID(long lsb, long msb) {\n-                return String.COMPACT_STRINGS ? Long.fastUUID(lsb, msb) : Long.fastUUIDUTF16(lsb, msb);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+import jdk.internal.util.ByteArray;\n+import jdk.internal.util.HexDigits;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.StandardCharsets;\n@@ -466,1 +471,48 @@\n-        return jla.fastUUID(leastSigBits, mostSigBits);\n+        long lsb = leastSigBits;\n+        long msb = mostSigBits;\n+        short[] digits = HexDigits.DIGITS;\n+        byte[] buf = new byte[36];\n+        ByteArray.setLong(\n+                buf,\n+                0,\n+                ((long) digits[((int) (msb >> 56)) & 0xff] << 48)\n+                        | ((long) digits[((int) (msb >> 48)) & 0xff] << 32)\n+                        | ((long) digits[((int) (msb >> 40)) & 0xff] << 16)\n+                        | digits[((int) (msb >> 32)) & 0xff]);\n+        buf[8] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                9,\n+                (digits[(((int) msb) >> 24) & 0xff] << 16)\n+                        | digits[(((int) msb) >> 16) & 0xff]);\n+        buf[13] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                14,\n+                (digits[(((int) msb) >> 8) & 0xff] << 16)\n+                        | digits[((int) msb) & 0xff]);\n+        buf[18] = '-';\n+        ByteArray.setInt(\n+                buf,\n+                19,\n+                (digits[(((int) (lsb >> 56))) & 0xff] << 16)\n+                        | digits[(((int) (lsb >> 48))) & 0xff]);\n+        buf[23] = '-';\n+        ByteArray.setLong(\n+                buf,\n+                24,\n+                ((long) digits[(((int) (lsb >> 40))) & 0xff] << 48)\n+                        | ((long) digits[((int) (lsb >> 32)) & 0xff] << 32)\n+                        | ((long) digits[(((int) lsb) >> 24) & 0xff] << 16)\n+                        | digits[(((int) lsb) >> 16) & 0xff]);\n+        ByteArray.setInt(\n+                buf,\n+                32,\n+                (digits[(((int) lsb) >> 8) & 0xff] << 16)\n+                        | digits[((int) lsb) & 0xff]);\n+\n+        try {\n+            return jla.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+        } catch (CharacterCodingException cce) {\n+            throw new AssertionError(cce);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"}]}