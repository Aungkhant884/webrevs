{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.util.HexDigits;\n@@ -452,2 +453,1 @@\n-        char[] H256 = DigitCache.HEX256;\n-\n+        short[] digits = HexDigits.DIGITS;\n@@ -457,4 +457,4 @@\n-                ((long) H256[((int) (msb >> 56)) & 0xff] << 48)\n-                        | ((long) H256[((int) (msb >> 48)) & 0xff] << 32)\n-                        | ((long) H256[((int) (msb >> 40)) & 0xff] << 16)\n-                        | H256[((int) (msb >> 32)) & 0xff]);\n+                ((long) digits[((int) (msb >> 56)) & 0xff] << 48)\n+                        | ((long) digits[((int) (msb >> 48)) & 0xff] << 32)\n+                        | ((long) digits[((int) (msb >> 40)) & 0xff] << 16)\n+                        | digits[((int) (msb >> 32)) & 0xff]);\n@@ -465,2 +465,2 @@\n-                (H256[(((int) msb) >> 24) & 0xff] << 16)\n-                        | H256[(((int) msb) >> 16) & 0xff]);\n+                (digits[(((int) msb) >> 24) & 0xff] << 16)\n+                        | digits[(((int) msb) >> 16) & 0xff]);\n@@ -471,2 +471,2 @@\n-                (H256[(((int) msb) >> 8) & 0xff] << 16)\n-                        | H256[((int) msb) & 0xff]);\n+                (digits[(((int) msb) >> 8) & 0xff] << 16)\n+                        | digits[((int) msb) & 0xff]);\n@@ -477,2 +477,2 @@\n-                (H256[(((int) (lsb >> 56))) & 0xff] << 16)\n-                        | H256[(((int) (lsb >> 48))) & 0xff]);\n+                (digits[(((int) (lsb >> 56))) & 0xff] << 16)\n+                        | digits[(((int) (lsb >> 48))) & 0xff]);\n@@ -483,4 +483,4 @@\n-                ((long) H256[(((int) (lsb >> 40))) & 0xff] << 48)\n-                        | ((long) H256[((int) (lsb >> 32)) & 0xff] << 32)\n-                        | ((long) H256[(((int) lsb) >> 24) & 0xff] << 16)\n-                        | H256[(((int) lsb) >> 16) & 0xff]);\n+                ((long) digits[(((int) (lsb >> 40))) & 0xff] << 48)\n+                        | ((long) digits[((int) (lsb >> 32)) & 0xff] << 32)\n+                        | ((long) digits[(((int) lsb) >> 24) & 0xff] << 16)\n+                        | digits[(((int) lsb) >> 16) & 0xff]);\n@@ -490,2 +490,2 @@\n-                (H256[(((int) lsb) >> 8) & 0xff] << 16)\n-                        | H256[((int) lsb) & 0xff]);\n+                (digits[(((int) lsb) >> 8) & 0xff] << 16)\n+                        | digits[((int) lsb) & 0xff]);\n@@ -497,18 +497,18 @@\n-        char[] H256 = DigitCache.HEX256;\n-\n-        char i0 = H256[((int) (msb >> 56)) & 0xff];\n-        char i1 = H256[((int) (msb >> 48)) & 0xff];\n-        char i2 = H256[((int) (msb >> 40)) & 0xff];\n-        char i3 = H256[((int) (msb >> 32)) & 0xff];\n-        char i4 = H256[(((int) msb) >> 24) & 0xff];\n-        char i5 = H256[(((int) msb) >> 16) & 0xff];\n-        char i6 = H256[(((int) msb) >> 8) & 0xff];\n-        char i7 = H256[((int) msb) & 0xff];\n-        char i8 = H256[(((int) (lsb >> 56))) & 0xff];\n-        char i9 = H256[(((int) (lsb >> 48))) & 0xff];\n-        char i10 = H256[(((int) (lsb >> 40))) & 0xff];\n-        char i11 = H256[((int) (lsb >> 32)) & 0xff];\n-        char i12 = H256[(((int) lsb) >> 24) & 0xff];\n-        char i13 = H256[(((int) lsb) >> 16) & 0xff];\n-        char i14 = H256[(((int) lsb) >> 8) & 0xff];\n-        char i15 = H256[((int) lsb) & 0xff];\n+        short[] digits = HexDigits.DIGITS;\n+\n+        short i0 = digits[((int) (msb >> 56)) & 0xff];\n+        short i1 = digits[((int) (msb >> 48)) & 0xff];\n+        short i2 = digits[((int) (msb >> 40)) & 0xff];\n+        short i3 = digits[((int) (msb >> 32)) & 0xff];\n+        short i4 = digits[(((int) msb) >> 24) & 0xff];\n+        short i5 = digits[(((int) msb) >> 16) & 0xff];\n+        short i6 = digits[(((int) msb) >> 8) & 0xff];\n+        short i7 = digits[((int) msb) & 0xff];\n+        short i8 = digits[(((int) (lsb >> 56))) & 0xff];\n+        short i9 = digits[(((int) (lsb >> 48))) & 0xff];\n+        short i10 = digits[(((int) (lsb >> 40))) & 0xff];\n+        short i11 = digits[((int) (lsb >> 32)) & 0xff];\n+        short i12 = digits[(((int) lsb) >> 24) & 0xff];\n+        short i13 = digits[(((int) lsb) >> 16) & 0xff];\n+        short i14 = digits[(((int) lsb) >> 8) & 0xff];\n+        short i15 = digits[((int) lsb) & 0xff];\n@@ -517,1 +517,1 @@\n-        int off = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN ? 1 : 0;\n+        int off = StringUTF16.isBigEndian() ? 1 : 0;\n@@ -1262,14 +1262,0 @@\n-    static final class DigitCache {\n-        @Stable\n-        static final char[] HEX256;\n-        static {\n-            HEX256 = new char[256];\n-            for (int i = 0; i < 256; i++) {\n-                int hi = (i >> 4) & 15;\n-                int lo = i & 15;\n-                HEX256[i] = (char) (((hi < 10 ? '0' + hi : 'a' + hi - 10) << 8)\n-                        + (lo < 10 ? '0' + lo : 'a' + lo - 10));\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":37,"deletions":51,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -1502,1 +1502,1 @@\n-    private static native boolean isBigEndian();\n+    static native boolean isBigEndian();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import static jdk.internal.util.HexDigits.DIGITS;\n+\n@@ -38,3 +40,0 @@\n-    @Stable\n-    private static final short[] DIGITS;\n-\n@@ -46,15 +45,0 @@\n-    static {\n-        short[] digits = new short[16 * 16];\n-\n-        for (int i = 0; i < 16; i++) {\n-            short hi = (short) ((i < 10 ? i + '0' : i - 10 + 'a') << 8);\n-\n-            for (int j = 0; j < 16; j++) {\n-                short lo = (short) (j < 10 ? j + '0' : j - 10 + 'a');\n-                digits[(i << 4) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexDigits.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for hexadecimal digits.\n+ *\n+ *\/\n+public final class HexDigits {\n+    @Stable\n+    public static final short[] DIGITS;\n+\n+    static {\n+        short[] digits = new short[16 * 16];\n+\n+        for (int i = 0; i < 16; i++) {\n+            short hi = (short) ((i < 10 ? i + '0' : i - 10 + 'a') << 8);\n+\n+            for (int j = 0; j < 16; j++) {\n+                short lo = (short) (j < 10 ? j + '0' : j - 10 + 'a');\n+                digits[(i << 4) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}