{"files":[{"patch":"@@ -154,0 +154,4 @@\n+bool Block::is_trivially_unreachable() const {\n+  return num_preds() <= 1 && !head()->is_Root() && !head()->is_Start();\n+}\n+\n@@ -173,1 +177,1 @@\n-  if (num_preds() <= 1) {\n+  if (is_trivially_unreachable()) {\n@@ -571,6 +575,1 @@\n-\/\/ Check for NeverBranch at block end.  This needs to become a GOTO to the\n-\/\/ true target.  NeverBranch are treated as a conditional branch that always\n-\/\/ goes the same direction for most of the optimizer and are used to give a\n-\/\/ fake exit path to infinite loops.  At this late stage they need to turn\n-\/\/ into Goto's so that when you enter the infinite loop you indeed hang.\n-void PhaseCFG::convert_NeverBranch_to_Goto(Block *b) {\n+Block* PhaseCFG::convert_NeverBranch_to_Goto(Block* b) {\n@@ -611,13 +610,1 @@\n-  \/\/ If the fake exit block becomes unreachable, remove it from the block list.\n-  if (dead->num_preds() == 1) {\n-    for (uint i = 0; i < number_of_blocks(); i++) {\n-      Block* block = get_block(i);\n-      if (block == dead) {\n-        _blocks.remove(i);\n-      } else if (block->_pre_order > dead->_pre_order) {\n-        \/\/ Enforce contiguous pre-order indices (assumed by PhaseBlockLayout).\n-        block->_pre_order--;\n-      }\n-    }\n-    _number_of_blocks--;\n-  }\n+  return dead;\n@@ -698,0 +685,1 @@\n+  Block_List unreachable; \/\/ Worklist of unreachable blocks to be removed.\n@@ -711,1 +699,5 @@\n-      convert_NeverBranch_to_Goto(block);\n+      Block* dead = convert_NeverBranch_to_Goto(block);\n+      \/\/ If the fake exit block becomes unreachable, save it for later removal.\n+      if (dead->is_trivially_unreachable()) {\n+        unreachable.push(dead);\n+      }\n@@ -741,0 +733,35 @@\n+\n+  \/\/ Remove all blocks that are transitively unreachable after the\n+  \/\/ NeverBranch-to-Goto conversion.\n+  while (unreachable.size() > 0) {\n+    Block* dead = unreachable.pop();\n+    for (uint i = 0; i < number_of_blocks(); i++) {\n+      Block* block = get_block(i);\n+      if (block == dead) {\n+        _blocks.remove(i);\n+        _number_of_blocks--;\n+        i--; \/\/ Ensure that we visit the block following the removed one.\n+      }\n+      if (block->_pre_order > dead->_pre_order) {\n+        \/\/ Enforce contiguous pre-order indices (assumed by PhaseBlockLayout).\n+        block->_pre_order--;\n+      }\n+      if (block->_rpo > dead->_rpo) {\n+        \/\/ Enforce contiguous reverse post-order indices as well, for sanity.\n+        block->_rpo--;\n+      }\n+    }\n+    \/\/ Update the successors' predecessor list and push new unreachable blocks.\n+    for (uint i = 0; i < dead->_num_succs; i++) {\n+      Block* succ = dead->_succs[i];\n+      Node* head = succ->head();\n+      for (int j = head->req() - 1; j >= 1; j--) {\n+        if (get_block_for_node(head->in(j)) == dead) {\n+          head->del_req(j);\n+        }\n+      }\n+      if (succ->is_trivially_unreachable()) {\n+        unreachable.push(succ);\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":48,"deletions":21,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -324,0 +324,3 @@\n+  \/\/ Whether the block is not root-like and does not have any predecessors.\n+  bool is_trivially_unreachable() const;\n+\n@@ -505,1 +508,2 @@\n-  void convert_NeverBranch_to_Goto(Block *b);\n+  \/\/ Return the target block of the fake exit path.\n+  Block* convert_NeverBranch_to_Goto(Block* b);\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8292660\n+ * @summary Test that blocks made unreachable after processing multiple infinite\n+ *          loops in the block ordering phase are removed correctly.\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.loopopts.TestMultipleInfiniteLoops::test\n+ *                   compiler.loopopts.TestMultipleInfiniteLoops\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestMultipleInfiniteLoops {\n+\n+    static int foo;\n+\n+    static void test() {\n+        int i = 5, j;\n+        while (i > 0) {\n+            for (j = i; 1 > j; ) {\n+                switch (i) {\n+                case 4:\n+                    foo = j;\n+                }\n+            }\n+            i++;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMultipleInfiniteLoops.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}