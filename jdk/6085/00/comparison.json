{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.Function;\n@@ -665,0 +666,4 @@\n+    private static Object[] getTableRowChildrenAndRoles(Accessible a, Component c, int whichChildren, boolean allowIgnored, int tableRowIndex) {\n+        return invokeGetChildrenAndRoles(a, c, whichChildren, allowIgnored, ChildrenOperations.createForTableRow(tableRowIndex));\n+    }\n+\n@@ -666,1 +671,5 @@\n-    public static Object[] getChildrenAndRoles(final Accessible a, final Component c, final int whichChildren, final boolean allowIgnored) {\n+    private static Object[] getChildrenAndRoles(final Accessible a, final Component c, final int whichChildren, final boolean allowIgnored) {\n+        return invokeGetChildrenAndRoles(a, c, whichChildren, allowIgnored, ChildrenOperations.COMMON);\n+    }\n+\n+    private static Object[] invokeGetChildrenAndRoles(Accessible a, Component c, int whichChildren, boolean allowIgnored, ChildrenOperations ops) {\n@@ -670,1 +679,1 @@\n-                return getChildrenAndRolesImpl(a, c, whichChildren, allowIgnored);\n+                return getChildrenAndRolesImpl(a, c, whichChildren, allowIgnored, ops);\n@@ -675,1 +684,1 @@\n-    private static Object[] getChildrenAndRolesImpl(final Accessible a, final Component c, final int whichChildren, final boolean allowIgnored) {\n+    private static Object[] getChildrenAndRolesImpl(Accessible a, Component c, int whichChildren, boolean allowIgnored, ChildrenOperations ops) {\n@@ -679,1 +688,1 @@\n-        _addChildren(a, whichChildren, allowIgnored, childrenAndRoles);\n+        _addChildren(a, whichChildren, allowIgnored, childrenAndRoles, ops);\n@@ -750,1 +759,1 @@\n-                    currentLevelChildren.addAll(Arrays.asList(getChildrenAndRolesImpl(p, c, JAVA_AX_ALL_CHILDREN, allowIgnored)));\n+                    currentLevelChildren.addAll(Arrays.asList(getChildrenAndRolesImpl(p, c, JAVA_AX_ALL_CHILDREN, allowIgnored, ChildrenOperations.COMMON)));\n@@ -862,0 +871,50 @@\n+    private interface ChildrenOperations {\n+        boolean isContextValid(AccessibleContext accessibleContext);\n+        int getChildrenCount(AccessibleContext accessibleContext);\n+        Accessible getAccessibleChild(AccessibleContext accessibleContext, int childIndex);\n+\n+        static ChildrenOperations COMMON = createForCommon();\n+\n+        static ChildrenOperations createForCommon() {\n+            return new ChildrenOperations() {\n+                @Override\n+                public boolean isContextValid(AccessibleContext accessibleContext) {\n+                    return accessibleContext != null;\n+                }\n+\n+                @Override\n+                public int getChildrenCount(AccessibleContext accessibleContext) {\n+                    assert isContextValid(accessibleContext);\n+                    return accessibleContext.getAccessibleChildrenCount();\n+                }\n+\n+                @Override\n+                public Accessible getAccessibleChild(AccessibleContext accessibleContext, int childIndex) {\n+                    assert isContextValid(accessibleContext);\n+                    return accessibleContext.getAccessibleChild(childIndex);\n+                }\n+            };\n+        }\n+\n+        static ChildrenOperations createForTableRow(int tableRowIndex) {\n+            return new ChildrenOperations() {\n+                @Override\n+                public boolean isContextValid(AccessibleContext accessibleContext) {\n+                    return accessibleContext instanceof AccessibleTable;\n+                }\n+\n+                @Override\n+                public int getChildrenCount(AccessibleContext accessibleContext) {\n+                    assert isContextValid(accessibleContext);\n+                    return ((AccessibleTable)accessibleContext).getAccessibleColumnCount();\n+                }\n+\n+                @Override\n+                public Accessible getAccessibleChild(AccessibleContext accessibleContext, int childIndex) {\n+                    assert isContextValid(accessibleContext);\n+                    return ((AccessibleTable)accessibleContext).getAccessibleAt(tableRowIndex, childIndex);\n+                }\n+            };\n+        }\n+    }\n+\n@@ -864,1 +923,1 @@\n-    private static void _addChildren(final Accessible a, final int whichChildren, final boolean allowIgnored, final ArrayList<Object> childrenAndRoles) {\n+    private static void _addChildren(Accessible a, int whichChildren, boolean allowIgnored, ArrayList<Object> childrenAndRoles, ChildrenOperations ops) {\n@@ -868,1 +927,1 @@\n-        if (ac == null) return;\n+        if (!ops.isContextValid(ac)) return;\n@@ -870,1 +929,1 @@\n-        final int numChildren = ac.getAccessibleChildrenCount();\n+        final int numChildren = ops.getChildrenCount(ac);\n@@ -875,1 +934,1 @@\n-            final Accessible child = ac.getAccessibleChild(i);\n+            final Accessible child = ops.getAccessibleChild(ac, i);\n@@ -897,1 +956,1 @@\n-                    _addChildren(child, whichChildren, false, childrenAndRoles);\n+                    _addChildren(child, whichChildren, false, childrenAndRoles, ChildrenOperations.COMMON);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":69,"deletions":10,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -36,6 +36,0 @@\n-static jmethodID jm_getChildrenAndRoles = NULL;\n-#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n-    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n-    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n-                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n-\n@@ -58,1 +52,1 @@\n-    NSArray *children = [super accessibilityChildren];\n+    NSMutableArray *children = [super accessibilityChildren];\n@@ -63,3 +57,8 @@\n-        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n-        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n-                                                                                      parent->fAccessible, parent->fComponent, sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO);\n+\n+        GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(jm_getTableRowChildrenAndRoles, sjc_CAccessibility, \"getTableRowChildrenAndRoles\",\\\n+            \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZI)[Ljava\/lang\/Object;\", nil);\n+\n+        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(\n+                env, sjc_CAccessibility, jm_getTableRowChildrenAndRoles, parent->fAccessible, parent->fComponent,\n+                sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO, [self rowNumberInTable]);\n@@ -67,0 +66,1 @@\n+\n@@ -70,1 +70,2 @@\n-        NSMutableArray *childrenCells = [NSMutableArray arrayWithCapacity:arrayLen\/2];\n+        children = [NSMutableArray arrayWithCapacity:arrayLen \/ 2];\n+        int childIndex = [self rowNumberInTable] * [(TableAccessibility *)parent accessibilityColumnCount];\n@@ -72,5 +73,1 @@\n-        NSUInteger childIndex = fIndex * [(TableAccessibility *)parent accessibilityColumnCount];\n-        NSInteger i = childIndex * 2;\n-        NSInteger n = (fIndex + 1) * [(TableAccessibility *)parent accessibilityColumnCount] * 2;\n-        for(i; i < n; i+=2)\n-        {\n+        for (NSInteger i = 0; i < arrayLen; i += 2) {\n@@ -96,1 +93,1 @@\n-            [childrenCells addObject:[[child retain] autorelease]];\n+            [children addObject:[[child retain] autorelease]];\n@@ -104,3 +101,0 @@\n-        return childrenCells;\n-    } else {\n-        return children;\n@@ -108,0 +102,5 @@\n+    return children;\n+}\n+\n+- (NSUInteger)rowNumberInTable {\n+    return self->fIndex;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableRowAccessibility.m","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"}]}