{"files":[{"patch":"@@ -2891,0 +2891,1 @@\n+      assert(!(*casted_receiver)->is_top(), \"that path should be unreachable\");\n@@ -3522,4 +3523,4 @@\n-  const TypeKlassPtr* inst_klass = _gvn.type(klass_node)->isa_klassptr();\n-  if (!StressReflectiveCode && inst_klass != nullptr) {\n-    bool    xklass = inst_klass->klass_is_exact();\n-    if (xklass || inst_klass->isa_aryklassptr()) {\n+  const TypeKlassPtr* klass_t = _gvn.type(klass_node)->isa_klassptr();\n+  if (!StressReflectiveCode && klass_t != nullptr) {\n+    bool xklass = klass_t->klass_is_exact();\n+    if (xklass || (klass_t->isa_aryklassptr() && klass_t->is_aryklassptr()->elem() != Type::BOTTOM)) {\n@@ -3527,2 +3528,2 @@\n-      if (inst_klass->isa_aryklassptr()) {\n-        BasicType elem = inst_klass->as_instance_type()->isa_aryptr()->elem()->array_element_basic_type();\n+      if (klass_t->isa_aryklassptr()) {\n+        BasicType elem = klass_t->as_instance_type()->isa_aryptr()->elem()->array_element_basic_type();\n@@ -3534,1 +3535,1 @@\n-        lhelper = inst_klass->is_instklassptr()->exact_klass()->layout_helper();\n+        lhelper = klass_t->is_instklassptr()->exact_klass()->layout_helper();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2363,1 +2363,1 @@\n-  if (tary != nullptr && tary->elem() != Type::BOTTOM &&\n+  if (tary != nullptr &&\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308583\n+ * @summary SIGSEGV in GraphKit::gen_checkcast\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestBottomArrayTypeCheck::test TestBottomArrayTypeCheck\n+ *\/\n+\n+public class TestBottomArrayTypeCheck {\n+\n+    interface WordBase {\n+    }\n+\n+    interface RelocatedPointer {\n+    }\n+\n+    static final class Word implements WordBase {\n+    }\n+\n+    static Object[] staticObjectFields;\n+\n+    static byte[] staticPrimitiveFields;\n+\n+\n+    interface SnippetReflection {\n+        Object forObject(Object o);\n+    }\n+\n+    static class BaseSnippetReflection implements SnippetReflection {\n+        public Object forObject(Object o) {\n+            return null;\n+        }\n+\n+    }\n+    static class SubSnippetReflection extends BaseSnippetReflection {\n+        public Object forObject(Object object) {\n+            if (object instanceof WordBase word && !(object instanceof RelocatedPointer)) {\n+                return word;\n+            }\n+            return super.forObject(object);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        t1();\n+        for (int i = 0; i < 10; i++) {\n+            t2();\n+        }\n+    }\n+\n+    static void t1() {\n+        Word w = new Word();\n+        SnippetReflection base = new BaseSnippetReflection();\n+        SnippetReflection sub = new SubSnippetReflection();\n+        for (int i = 0; i < 10000; i++) {\n+            invoke(base, w);\n+            invoke(sub, w);\n+        }\n+    }\n+\n+    static void t2() {\n+        SnippetReflection base = new BaseSnippetReflection();\n+        SnippetReflection sub = new SubSnippetReflection();\n+        for (int i = 0; i < 10000; i++) {\n+            test(base, i % 2 == 0);\n+            test(sub, i % 2 == 0);\n+            test(sub, i % 2 == 0);\n+        }\n+    }\n+\n+    static Object test(SnippetReflection s, boolean b) {\n+        return s.forObject(b ? staticObjectFields : staticPrimitiveFields);\n+    }\n+\n+\n+    static Object invoke(SnippetReflection s, Object o) {\n+        return s.forObject(o);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestBottomArrayTypeCheck.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}