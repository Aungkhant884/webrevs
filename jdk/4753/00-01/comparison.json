{"files":[{"patch":"@@ -2964,1 +2964,1 @@\n-        if (!method.equals(\"HEAD\") || doingNTLM2ndStage || doingNTLMp2ndStage) {\n+        if (!method.equals(\"HEAD\") || tunnelState == TunnelState.SETUP) {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,9 +32,18 @@\n- * @summary test for the incorrect logic in reading (and discarding) HTTP response body when\n- *      processing NTLMSSP_CHALLENGE response from server. When this response is\n- *      received by client, reset() is called on the connection to read and discard the\n- *      response body. This code path was broken when initial client request uses \"HEAD\"\n- *      method, in this case response body is not read from the socket. This does not cause\n- *      problems with the majority of (proxy) servers because InputStream opened over the response\n- *      socket is buffered with 8kb buffer size. Problem is only reproducible if the response\n- *      size (headers + body) is larger than 8kb. There are three code paths (modes) where NTLM\n- *      auth can be used: direct server (SERVER), HTTP proxying (PROXY) and HTTPS tunneling (TUNNEL).\n+ * @summary test for the incorrect logic in reading (and discarding) HTTP\n+ *      response body when processing NTLMSSP_CHALLENGE response\n+ *      (to CONNECT request) from proxy server. When this response is received\n+ *      by client, reset() is called on the connection to read and discard the\n+ *      response body. This code path was broken when initial client request\n+ *      uses HEAD method and HTTPS resource, in this case CONNECT is sent to\n+ *      proxy server (to establish TLS tunnel) and response body is not read\n+ *      from a socket (because initial method on client connection is HEAD).\n+ *      This does not cause problems with the majority of proxy servers because\n+ *      InputStream opened over the response socket is buffered with 8kb buffer\n+ *      size. Problem is only reproducible if the response size (headers +\n+ *      body) is larger than 8kb. The code path with HTTPS tunneling is checked\n+ *      with TUNNEL argument. Additional checks for HEAD handling are included\n+ *      for direct server (SERVER) and HTTP proxying (PROXY) code paths, in\n+ *      these (non-tunnel) cases client must NOT attempt to read response data\n+ *      (to not block on socket read) because HEAD is sent to server and\n+ *      NTLMSSP_CHALLENGE response includes Content-Length, but does not\n+ *      include the body.\n@@ -59,1 +68,1 @@\n-            \"Content-Length: 0\\r\\n\" +\n+            \"Content-Length: \" + BODY_LEN + \"\\r\\n\" +\n@@ -67,2 +76,1 @@\n-            \"\\r\\n\" +\n-            generateBody(BODY_LEN);\n+            \"\\r\\n\";\n@@ -70,1 +78,1 @@\n-    static final String RESP_SERVER_DEST =\n+    static final String RESP_SERVER_OR_PROXY_DEST =\n@@ -73,1 +81,1 @@\n-            \"Content-Length: 0\\r\\n\" +\n+            \"Content-Length: 42\\r\\n\" +\n@@ -81,1 +89,1 @@\n-            \"Content-Length: 0\\r\\n\" +\n+            \"Content-Length: \" + BODY_LEN + \"\\r\\n\" +\n@@ -85,0 +93,17 @@\n+            \"HTTP\/1.1 407 Proxy Authentication Required\\r\\n\" +\n+            \"Proxy-Authenticate: NTLM TlRMTVNTUAACAAAAAAAAACgAAAABggAAU3J2Tm9uY2UAAAAAAAAAAA==\\r\\n\" +\n+            \"Proxy-Connection: Keep-Alive\\r\\n\" +\n+            \"Connection: Keep-Alive\\r\\n\" +\n+            \"Content-Length: \" + BODY_LEN + \"\\r\\n\" +\n+            \"\\r\\n\";\n+\n+    static final String RESP_TUNNEL_AUTH =\n+            \"HTTP\/1.1 407 Proxy Authentication Required\\r\\n\" +\n+            \"Proxy-Authenticate: NTLM\\r\\n\" +\n+            \"Proxy-Connection: close\\r\\n\" +\n+            \"Connection: close\\r\\n\" +\n+            \"Content-Length: \" + BODY_LEN + \"\\r\\n\" +\n+            \"\\r\\n\" +\n+            generateBody(BODY_LEN);\n+\n+    static final String RESP_TUNNEL_NTLM =\n@@ -93,1 +118,1 @@\n-    static final String RESP_PROXY_TUNNEL =\n+    static final String RESP_TUNNEL_ESTABLISHED =\n@@ -98,1 +123,0 @@\n-\n@@ -112,1 +136,1 @@\n-    private static void testSever() throws Exception {\n+    static void testSever() throws Exception {\n@@ -122,7 +146,1 @@\n-            try {\n-                uc.getInputStream().readAllBytes();\n-            } catch(IOException e) {\n-                \/\/ Invalid Http response\n-                System.err.println(\"Error: cannot read 200 response code\");\n-                throw e;\n-            }\n+            uc.getInputStream().readAllBytes();\n@@ -132,1 +150,1 @@\n-    private static void testProxy() throws Exception {\n+    static void testProxy() throws Exception {\n@@ -145,7 +163,1 @@\n-            try {\n-                uc.getInputStream().readAllBytes();\n-            } catch(IOException e) {\n-                \/\/ Invalid Http response\n-                System.err.println(\"Error: cannot read 200 response code\");\n-                throw e;\n-            }\n+            uc.getInputStream().readAllBytes();\n@@ -155,1 +167,1 @@\n-    private static void testTunnel() throws Exception {\n+    static void testTunnel() throws Exception {\n@@ -193,1 +205,1 @@\n-       public int getLocalPort() { return ss.getLocalPort(); }\n+        int getLocalPort() { return ss.getLocalPort(); }\n@@ -203,1 +215,12 @@\n-\n+                    switch(mode) {\n+                        case SERVER:\n+                            doServer(is, os, doing2ndStageNTLM);\n+                            break;\n+                        case PROXY:\n+                            doProxy(is, os, doing2ndStageNTLM);\n+                            break;\n+                        case TUNNEL:\n+                            doTunnel(is, os, doing2ndStageNTLM);\n+                            break;\n+                        default: throw new IllegalArgumentException();\n+                    }\n@@ -205,6 +228,0 @@\n-                        new MessageHeader(is);\n-                        if (Mode.SERVER == mode) {\n-                            os.write(RESP_SERVER_AUTH.getBytes(\"ASCII\"));\n-                        } else {\n-                            os.write(RESP_PROXY_AUTH.getBytes(\"ASCII\"));\n-                        }\n@@ -213,12 +230,0 @@\n-                        new MessageHeader(is);\n-                        if (Mode.SERVER == mode) {\n-                            os.write(RESP_SERVER_NTLM.getBytes(\"ASCII\"));\n-                        } else {\n-                            os.write(RESP_PROXY_NTLM.getBytes(\"ASCII\"));\n-                        }\n-                        new MessageHeader(is);\n-                        if (Mode.TUNNEL == mode) {\n-                            os.write(RESP_PROXY_TUNNEL.getBytes(\"ASCII\"));\n-                        } else {\n-                            os.write(RESP_SERVER_DEST.getBytes(\"ASCII\"));\n-                        }\n@@ -228,1 +233,3 @@\n-                    if (!closed) ioe.printStackTrace();\n+                    if (!closed) {\n+                        ioe.printStackTrace();\n+                    }\n@@ -244,1 +251,1 @@\n-    public static NTLMServer startServer(ServerSocket serverSS, Mode mode) {\n+    static NTLMServer startServer(ServerSocket serverSS, Mode mode) {\n@@ -250,1 +257,1 @@\n-    private static String generateBody(int length) {\n+    static String generateBody(int length) {\n@@ -258,0 +265,36 @@\n+    static void doServer(InputStream is, OutputStream os, boolean doing2ndStageNTLM) throws IOException {\n+        if (!doing2ndStageNTLM) {\n+            new MessageHeader(is);\n+            os.write(RESP_SERVER_AUTH.getBytes(\"ASCII\"));\n+        } else {\n+            new MessageHeader(is);\n+            os.write(RESP_SERVER_NTLM.getBytes(\"ASCII\"));\n+            new MessageHeader(is);\n+            os.write(RESP_SERVER_OR_PROXY_DEST.getBytes(\"ASCII\"));\n+        }\n+    }\n+\n+    static void doProxy(InputStream is, OutputStream os, boolean doing2ndStageNTLM) throws IOException {\n+        if (!doing2ndStageNTLM) {\n+            new MessageHeader(is);\n+            os.write(RESP_PROXY_AUTH.getBytes(\"ASCII\"));\n+        } else {\n+            new MessageHeader(is);\n+            os.write(RESP_PROXY_NTLM.getBytes(\"ASCII\"));\n+            new MessageHeader(is);\n+            os.write(RESP_SERVER_OR_PROXY_DEST.getBytes(\"ASCII\"));\n+        }\n+    }\n+\n+    static void doTunnel(InputStream is, OutputStream os, boolean doing2ndStageNTLM) throws IOException {\n+        if (!doing2ndStageNTLM) {\n+            new MessageHeader(is);\n+            os.write(RESP_TUNNEL_AUTH.getBytes(\"ASCII\"));\n+        } else {\n+            new MessageHeader(is);\n+            os.write(RESP_TUNNEL_NTLM.getBytes(\"ASCII\"));\n+            new MessageHeader(is);\n+            os.write(RESP_TUNNEL_ESTABLISHED.getBytes(\"ASCII\"));\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NTLMHeadTest.java","additions":100,"deletions":57,"binary":false,"changes":157,"status":"modified"}]}