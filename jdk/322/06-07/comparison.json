{"files":[{"patch":"@@ -183,0 +183,1 @@\n+            contentInfo = block; \/\/ Maybe useless, just do not let it be null\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-     * For old style PKCS7 files where we use RSA, DSA, EC asencAlgId\n+     * For old style PKCS7 files where we use RSA, DSA, EC as encAlgId\n@@ -549,1 +549,4 @@\n-                String digAlg = digAlgId.getName().replace(\"-\", \"\");\n+                String digAlg = digAlgId.getName();\n+                if (digAlg.startsWith(\"SHA-\")) {\n+                    digAlg = \"SHA\" + digAlg.substring(4);\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -147,1 +147,0 @@\n-    SHAKE256_LEN(\"2.16.840.1.101.3.4.2.18\", \"SHAKE256-LEN\"),\n@@ -152,0 +151,2 @@\n+    SHAKE128_LEN(\"2.16.840.1.101.3.4.2.17\", \"SHAKE128-LEN\"),\n+    SHAKE256_LEN(\"2.16.840.1.101.3.4.2.18\", \"SHAKE256-LEN\"),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-     * Convent OID.1.2.3.4 or 1.2.3.4 to the matched stdName.\n+     * Convert OID.1.2.3.4 or 1.2.3.4 to its matching stdName.\n@@ -53,3 +53,2 @@\n-     * @return the original name is it does not look like an OID,\n-     *         the matched name for an OID, or the OID itself\n-     *         if no match is found.\n+     * @return the matching stdName, or {@code algName} if it is not in the\n+     *      form of an OID, or the OID value if no match is found.\n@@ -92,2 +91,1 @@\n-     * @return an AlgorithmParameterSpec object\n-     * @throws ProviderException\n+     * @return an AlgorithmParameterSpec, null if {@code params} is null\n@@ -99,1 +97,0 @@\n-        sigName = checkName(sigName).toUpperCase(Locale.ENGLISH);\n@@ -102,0 +99,1 @@\n+            sigName = checkName(sigName).toUpperCase(Locale.ENGLISH);\n@@ -127,2 +125,0 @@\n-        } else {\n-            paramSpec = getDefaultAlgorithmParameterSpec(sigName, null);\n@@ -133,2 +129,8 @@\n-    \/\/ Utility method for converting the specified parameter bytes into an\n-    \/\/ AlgorithmParameterSpec object.\n+    \/**\n+     * Utility method for converting the specified parameter bytes\n+     * into an AlgorithmParameterSpec object.\n+     *\n+     * @param sigName signature algorithm\n+     * @param paramBytes (optional) parameter bytes\n+     * @return an AlgorithmParameterSpec, null if {@code paramBytes} is null\n+     *\/\n@@ -138,1 +140,0 @@\n-        sigName = checkName(sigName).toUpperCase(Locale.ENGLISH);\n@@ -142,0 +143,1 @@\n+            sigName = checkName(sigName).toUpperCase(Locale.ENGLISH);\n@@ -163,2 +165,0 @@\n-        } else {\n-            paramSpec = getDefaultAlgorithmParameterSpec(sigName, null);\n@@ -204,2 +204,2 @@\n-                sha512 = AlgorithmId.get(KnownOIDs.SHA_512.stdName());\n-                shake256 = AlgorithmId.get(KnownOIDs.SHAKE256.stdName());\n+                sha512 = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.SHA_512));\n+                shake256 = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.SHAKE256));\n@@ -209,2 +209,2 @@\n-            } catch (IOException | NoSuchAlgorithmException e) {\n-                throw new AssertionError(\"Shoudl not happen\", e);\n+            } catch (IOException e) {\n+                throw new AssertionError(\"Should not happen\", e);\n@@ -215,1 +215,1 @@\n-     * Determines the digestEncryptionAlgorithmId in PKCS& SignerInfo.\n+     * Determines the digestEncryptionAlgorithmId in PKCS7 SignerInfo.\n@@ -217,2 +217,2 @@\n-     * @param signer Signature object that tells you RSASA-PSS params\n-     * @param sigalg Signature algorithm tells you who with who\n+     * @param signer Signature object that tells you RSASSA-PSS params\n+     * @param sigalg Signature algorithm\n@@ -221,1 +221,1 @@\n-     * @return the digest alg\n+     * @return the digest algId\n@@ -268,1 +268,1 @@\n-     * Extracts the digest algorithm names from a signature\n+     * Extracts the digest algorithm name from a signature\n@@ -290,1 +290,1 @@\n-    public static AlgorithmParameterSpec getDefaultAlgorithmParameterSpec(\n+    public static AlgorithmParameterSpec getDefaultParamSpec(\n@@ -349,1 +349,1 @@\n-                .getDefaultAlgorithmParameterSpec(alg, key);\n+                .getDefaultParamSpec(alg, key);\n@@ -367,1 +367,1 @@\n-     * @return the AlgorithmIA, not null\n+     * @return the AlgorithmId, not null\n@@ -499,2 +499,9 @@\n-    \/\/ Values from SP800-57 part 1 rev 4 tables 2 and 3\n-    \/\/ Attention: sync with JarSigner.Builder#getDefaultSignatureAlgorithm\n+    \/\/ The following values are from SP800-57 part 1 rev 4 tables 2 and 3\n+\n+    \/**\n+     * Return the default message digest algorithm with the same security\n+     * strength as the specified EC key size.\n+     *\n+     * Attention: sync with the @implNote inside\n+     * {@link jdk.security.jarsigner.JarSigner.Builder#getDefaultSignatureAlgorithm}.\n+     *\/\n@@ -511,2 +518,7 @@\n-    \/\/ Same values for RSA and DSA\n-    \/\/ Attention: sync with JarSigner.Builder#getDefaultSignatureAlgorithm\n+    \/**\n+     * Return the default message digest algorithm with the same security\n+     * strength as the specified IFC\/FFC key size.\n+     *\n+     * Attention: sync with the @implNote inside\n+     * {@link jdk.security.jarsigner.JarSigner.Builder#getDefaultSignatureAlgorithm}.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":42,"deletions":30,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-     * @param algparams the associated algorithm parameters.\n+     * @param algparams the associated algorithm parameters, can be null.\n@@ -113,0 +113,6 @@\n+    \/**\n+     * Constructs an algorithm ID with algorithm parameters as a DerValue.\n+     *\n+     * @param oid the identifier for the algorithm.\n+     * @param params the associated algorithm parameters, can be null.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -858,1 +858,1 @@\n-        \/\/ Use new method is directSign is false or it's a modern\n+        \/\/ Use new method if directSign is false or it's a modern\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8056174\n+ * @bug 8056174 8242068\n@@ -129,0 +129,1 @@\n+        npe(()->b1.setProperty(\"altsigner\", null));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.File;\n@@ -30,1 +29,0 @@\n-import java.nio.file.Path;\n@@ -32,1 +30,0 @@\n-import java.security.KeyStore;\n@@ -60,1 +57,1 @@\n- * @bug 6543842 6543440 6939248 8009636 8024302 8163304 8169911 8180289 8172404 8247960\n+ * @bug 6543842 6543440 6939248 8009636 8024302 8163304 8169911 8180289 8172404 8247960 8242068\n@@ -358,0 +355,20 @@\n+                \/\/ signed with everyone\n+                signVerbose(\"normal\", \"unsigned.jar\", \"signall.jar\", \"signer\",\n+                        \"-sigalg\", \"SHA3-256withRSA\")\n+                        .shouldHaveExitValue(0);\n+                signVerbose(\"normal\", \"signall.jar\", \"signall.jar\", \"dsakey\")\n+                        .shouldHaveExitValue(0);\n+                signVerbose(\"normal\", \"signall.jar\", \"signall.jar\", \"eckey\")\n+                        .shouldHaveExitValue(0);\n+                signVerbose(\"normal\", \"signall.jar\", \"signall.jar\", \"psskey\")\n+                        .shouldHaveExitValue(0);\n+                signVerbose(\"normal\", \"signall.jar\", \"signall.jar\", \"edkey\")\n+                        .shouldHaveExitValue(0);\n+                verify(\"signall.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"Signature algorithm: SHA3-256withRSA\")\n+                        .shouldContain(\"Signature algorithm: RSASSA-PSS\")\n+                        .shouldContain(\"Signature algorithm: SHA256withECDSA\")\n+                        .shouldContain(\"Signature algorithm: Ed25519\")\n+                        .shouldContain(\"Signature algorithm: SHA256withDSA\");\n+\n@@ -820,0 +837,3 @@\n+        keytool(\"-alias eckey -genkeypair -keyalg EC -dname CN=eckey\");\n+        keytool(\"-alias psskey -genkeypair -keyalg RSASSA-PSS -dname CN=psskey\");\n+        keytool(\"-alias edkey -genkeypair -keyalg Ed25519 -dname CN=edkey\");\n@@ -849,0 +869,3 @@\n+        gencert(\"eckey\");\n+        gencert(\"psskey\");\n+        gencert(\"edkey\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -221,1 +221,2 @@\n-                    AlgorithmId.get(SignatureUtil.extractDigestAlgFromDwithE(sigAlgo)),\n+                    SignatureUtil.getDigestAlgInPkcs7SignerInfo(\n+                            signature, sigAlgo, signerEntry.privateKey, false),\n","filename":"test\/lib\/jdk\/test\/lib\/security\/timestamp\/TsaSigner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}