{"files":[{"patch":"@@ -823,0 +823,2 @@\n+                    new PKCS9Attribute(PKCS9Attribute.SIGNING_TIME_OID,\n+                            new Date()),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.security.spec.PSSParameterSpec;\n@@ -420,1 +421,2 @@\n-                    digestEncryptionAlgorithmId);\n+                    digestEncryptionAlgorithmId,\n+                    authenticatedAttributes == null);\n@@ -505,3 +507,10 @@\n-     * This is useful for old style PKCS7 files where we use RSA, DSA, EC\n-     * as SingerInfo.digestEncryptionAlgorithmId. Now we use the\n-     * signature algorithms directly.\n+     *\n+     * For old style PKCS7 files where we use RSA, DSA, EC asencAlgId\n+     * a DIGESTwithENC algorithm is returned. For new style RSASSA-PSS\n+     * and EdDSA encryption, this method ensures digAlgId is compatible\n+     * with the algorithm.\n+     *\n+     * @param digAlgId the digest algorithm\n+     * @param encAlgId the encryption or signature algorithm\n+     * @param directSign whether the signature is calculated on the content\n+     *                   directly. This makes difference for Ed448.\n@@ -509,1 +518,2 @@\n-    public static String makeSigAlg(AlgorithmId digAlgId, AlgorithmId encAlgId) {\n+    public static String makeSigAlg(AlgorithmId digAlgId, AlgorithmId encAlgId,\n+            boolean directSign) throws NoSuchAlgorithmException {\n@@ -516,0 +526,6 @@\n+                PSSParameterSpec spec = (PSSParameterSpec)\n+                        SignatureUtil.getParamSpec(encAlg, encAlgId.getParameters());\n+                if (!AlgorithmId.get(spec.getDigestAlgorithm()).equals(digAlgId)) {\n+                    throw new NoSuchAlgorithmException(\"Incompatible digest algorithm\");\n+                }\n+                return encAlg;\n@@ -517,0 +533,4 @@\n+                if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.sha512)) {\n+                    throw new NoSuchAlgorithmException(\"Incompatible digest algorithm\");\n+                }\n+                return encAlg;\n@@ -518,0 +538,9 @@\n+                if (directSign) {\n+                    if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.shake256)) {\n+                        throw new NoSuchAlgorithmException(\"Incompatible digest algorithm\");\n+                    }\n+                } else {\n+                    if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.shake256$512)) {\n+                        throw new NoSuchAlgorithmException(\"Incompatible digest algorithm\");\n+                    }\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":34,"deletions":5,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -197,4 +197,4 @@\n-    private static class EdDSADigestAlgHolder {\n-        final static AlgorithmId sha512;\n-        final static AlgorithmId shake256;\n-        final static AlgorithmId shake256$512;\n+    public static class EdDSADigestAlgHolder {\n+        public final static AlgorithmId sha512;\n+        public final static AlgorithmId shake256;\n+        public final static AlgorithmId shake256$512;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -166,0 +166,1 @@\n+    boolean directSign = false; \/\/ sign SF directly or thru signedAttrs\n@@ -475,0 +476,2 @@\n+            } else if (collator.compare(flags, \"-directsign\") ==0) {\n+                directSign = true;\n@@ -663,0 +666,3 @@\n+        System.out.println(rb.getString\n+                (\".directsign.sign.the.SF.file.directly.no.signed.attributes\"));\n+        System.out.println();\n@@ -960,1 +966,2 @@\n-                                    si.getDigestEncryptionAlgorithmId());\n+                                    si.getDigestEncryptionAlgorithmId(),\n+                                    si.getAuthenticatedAttributes() == null);\n@@ -973,1 +980,2 @@\n-                                        tsSi.getDigestEncryptionAlgorithmId());\n+                                        tsSi.getDigestEncryptionAlgorithmId(),\n+                                        tsSi.getAuthenticatedAttributes() == null);\n@@ -1768,0 +1776,1 @@\n+        builder.setProperty(\"directsign\", Boolean.toString(directSign));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+        {\".directsign.sign.the.SF.file.directly.no.signed.attributes\",\n+                \"[-directsign]               sign the .SF file directly (no signed attributes)\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}