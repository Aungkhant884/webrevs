{"files":[{"patch":"@@ -35,1 +35,7 @@\n-u2 BytecodeConstantPool::find_or_add(BytecodeCPEntry const& bcpe) {\n+u2 BytecodeConstantPool::find_or_add(BytecodeCPEntry const& bcpe, TRAPS) {\n+\n+  \/\/ Check for overflow\n+  int new_size = _orig->length() + _entries.length();\n+  if (new_size > USHRT_MAX) {\n+    THROW_MSG_0(vmSymbols::java_lang_InternalError(), \"default methods constant pool overflowed\");\n+  }\n@@ -37,1 +43,0 @@\n-  \/\/ We check for constant pool overflow later.\n@@ -55,4 +60,0 @@\n-  if (new_size > USHRT_MAX) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"default methods constant pool overflowed\");\n-  }\n-\n@@ -128,2 +129,2 @@\n-void BytecodeAssembler::_new(Symbol* sym) {\n-  u2 cpool_index = _cp->klass(sym);\n+void BytecodeAssembler::_new(Symbol* sym, TRAPS) {\n+  u2 cpool_index = _cp->klass(sym, CHECK);\n@@ -134,2 +135,2 @@\n-void BytecodeAssembler::load_string(Symbol* sym) {\n-  u2 cpool_index = _cp->string(sym);\n+void BytecodeAssembler::load_string(Symbol* sym, TRAPS) {\n+  u2 cpool_index = _cp->string(sym, CHECK);\n@@ -157,2 +158,2 @@\n-void BytecodeAssembler::invokespecial(Symbol* klss, Symbol* name, Symbol* sig) {\n-  u2 methodref_index = _cp->methodref(klss, name, sig);\n+void BytecodeAssembler::invokespecial(Symbol* klss, Symbol* name, Symbol* sig, TRAPS) {\n+  u2 methodref_index = _cp->methodref(klss, name, sig, CHECK);\n@@ -166,1 +167,1 @@\n-                                             Symbol* message) {\n+                                             Symbol* message, TRAPS) {\n@@ -173,1 +174,1 @@\n-  assem._new(errorName);\n+  assem._new(errorName, CHECK_0);\n@@ -175,2 +176,2 @@\n-  assem.load_string(message);\n-  assem.invokespecial(errorName, init, sig);\n+  assem.load_string(message, CHECK_0);\n+  assem.invokespecial(errorName, init, sig, CHECK_0);\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  u2 find_or_add(BytecodeCPEntry const& bcpe);\n+  u2 find_or_add(BytecodeCPEntry const& bcpe, TRAPS);\n@@ -147,2 +147,2 @@\n-  u2 utf8(Symbol* sym) {\n-    return find_or_add(BytecodeCPEntry::utf8(sym));\n+  u2 utf8(Symbol* sym, TRAPS) {\n+    return find_or_add(BytecodeCPEntry::utf8(sym), THREAD);\n@@ -151,2 +151,3 @@\n-  u2 klass(Symbol* class_name) {\n-    return find_or_add(BytecodeCPEntry::klass(utf8(class_name)));\n+  u2 klass(Symbol* class_name, TRAPS) {\n+    u2 utf8_entry = utf8(class_name, CHECK_0);\n+    return find_or_add(BytecodeCPEntry::klass(utf8_entry), THREAD);\n@@ -155,2 +156,3 @@\n-  u2 string(Symbol* str) {\n-    return find_or_add(BytecodeCPEntry::string(utf8(str)));\n+  u2 string(Symbol* str, TRAPS) {\n+    u2 utf8_entry = utf8(str, CHECK_0);\n+    return find_or_add(BytecodeCPEntry::string(utf8_entry), THREAD);\n@@ -159,2 +161,4 @@\n-  u2 name_and_type(Symbol* name, Symbol* sig) {\n-    return find_or_add(BytecodeCPEntry::name_and_type(utf8(name), utf8(sig)));\n+  u2 name_and_type(Symbol* name, Symbol* sig, TRAPS) {\n+    u2 utf8_name = utf8(name, CHECK_0);\n+    u2 utf8_sig  = utf8(sig, CHECK_0);\n+    return find_or_add(BytecodeCPEntry::name_and_type(utf8_name, utf8_sig), THREAD);\n@@ -163,3 +167,4 @@\n-  u2 methodref(Symbol* class_name, Symbol* name, Symbol* sig) {\n-    return find_or_add(BytecodeCPEntry::methodref(\n-        klass(class_name), name_and_type(name, sig)));\n+  u2 methodref(Symbol* class_name, Symbol* name, Symbol* sig, TRAPS) {\n+    u2 klass_entry = klass(class_name, CHECK_0);\n+    u2 type_entry = name_and_type(name, sig, CHECK_0);\n+    return find_or_add(BytecodeCPEntry::methodref(klass_entry, type_entry), THREAD);\n@@ -184,1 +189,1 @@\n-  void invokespecial(Symbol* cls, Symbol* name, Symbol* sig);\n+  void invokespecial(Symbol* cls, Symbol* name, Symbol* sig, TRAPS);\n@@ -187,2 +192,2 @@\n-  void _new(Symbol* sym);\n-  void load_string(Symbol* sym);\n+  void _new(Symbol* sym, TRAPS);\n+  void load_string(Symbol* sym, TRAPS);\n@@ -197,1 +202,1 @@\n-                                   Symbol* message);\n+                                   Symbol* message, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.hpp","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -887,2 +887,4 @@\n-  m->set_name_index(cp->utf8(name));\n-  m->set_signature_index(cp->utf8(sig));\n+  u2 name_index = cp->utf8(name, CHECK_NULL);\n+  m->set_name_index(name_index);\n+  u2 sig_index = cp->utf8(sig, CHECK_NULL);\n+  m->set_signature_index(sig_index);\n@@ -976,1 +978,1 @@\n-           method->get_exception_name(), method->get_exception_message());\n+           method->get_exception_name(), method->get_exception_message(), CHECK);\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}