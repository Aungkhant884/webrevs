{"files":[{"patch":"@@ -195,1 +195,1 @@\n-java\/awt\/FullScreen\/FullScreenInsets\/FullScreenInsets.java 7019055,8266245 windows-all,linux-all,macosx-aarch64\n+java\/awt\/FullScreen\/FullScreenInsets\/FullScreenInsets.java 7019055,8266245 windows-all,linux-all,macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+    \/\/ move away from cursor\n+    private final static int OFFSET_X = -20;\n+    private final static int OFFSET_Y = -20;\n+\n@@ -104,1 +108,1 @@\n-        Color c = r.getPixelColor(p.x + f.getWidth() \/ 2, p.y + f.getHeight() \/ 2);\n+        Color c = r.getPixelColor(p.x + f.getWidth() \/ 2 - OFFSET_X, p.y + f.getHeight() \/ 2 - OFFSET_Y);\n","filename":"test\/jdk\/java\/awt\/Dialog\/MakeWindowAlwaysOnTop\/MakeWindowAlwaysOnTop.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.Rectangle;\n@@ -30,0 +31,1 @@\n+import java.awt.Toolkit;\n@@ -59,0 +61,4 @@\n+    private static volatile Point location;\n+    \/\/ move away from cursor\n+    private final static int OFFSET_X = -20;\n+    private final static int OFFSET_Y = -20;\n@@ -62,1 +68,1 @@\n-        robot.setAutoDelay(50);\n+        robot.setAutoDelay(100);\n@@ -66,0 +72,1 @@\n+        robot.delay(1000);\n@@ -70,1 +77,1 @@\n-            Point location = frame.getLocation();\n+            location = frame.getLocation();\n@@ -77,0 +84,2 @@\n+        System.out.println(\"scale \" + scale);\n+\n@@ -78,1 +87,0 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n@@ -80,3 +88,11 @@\n-        Thread.sleep(100);\n-        Color color = robot.getPixelColor(centerX, centerY);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        Color color = robot.getPixelColor(centerX - OFFSET_X, centerY - OFFSET_Y);\n+\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        Rectangle screen = new Rectangle(0, 0, (int) screenSize.getWidth(), (int) screenSize.getHeight());\n+        BufferedImage img = robot.createScreenCapture(screen);\n+        javax.imageio.ImageIO.write(img, \"png\", new java.io.File(\"image.png\"));\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n@@ -86,3 +102,7 @@\n-        if ((scale == 1 && !similar(color, COLOR_1X))\n-                || (scale == 2 && !similar(color, COLOR_2X))) {\n-            throw new RuntimeException(\"Colors are different!\");\n+        if (scale == 1 && !similar(color, COLOR_1X)) {\n+            System.out.println(\"color \" + color + \" COLOR_1X \" + COLOR_1X);\n+            throw new RuntimeException(\"Colors is different for scale=1!\");\n+        }\n+        if (scale == 2 && !similar(color, COLOR_2X)) {\n+            System.out.println(\"color \" + color + \" COLOR_2X \" + COLOR_2X);\n+            throw new RuntimeException(\"Colors is different for scale=2!\");\n@@ -90,0 +110,1 @@\n+        System.out.println(\"Test Passed\");\n@@ -111,0 +132,2 @@\n+        frame.setUndecorated(true);\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/javax\/swing\/JButton\/8151303\/PressedIconTest.java","additions":32,"deletions":9,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.awt.Dimension;\n@@ -29,0 +30,2 @@\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n@@ -55,0 +58,4 @@\n+     \/\/ move away from cursor\n+    private final static int OFFSET_X = -20;\n+    private final static int OFFSET_Y = -20;\n+\n@@ -69,1 +76,1 @@\n-            robot.setAutoDelay(50);\n+            robot.setAutoDelay(100);\n@@ -82,1 +89,1 @@\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -84,1 +91,1 @@\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -91,1 +98,13 @@\n-            if (!FRAME_COLOR.equals(robot.getPixelColor(cx, cy))) {\n+            robot.waitForIdle();\n+            Color color = robot.getPixelColor(cx - OFFSET_X, cy - OFFSET_Y);\n+\n+            if (!FRAME_COLOR.equals(color)) {\n+                System.out.println(\"cx \" + cx + \" cy \" + cy);\n+                System.err.println(\"FRAME_COLOR Red: \" + FRAME_COLOR.getRed() + \"; Green: \" + FRAME_COLOR.getGreen() + \"; Blue: \" + FRAME_COLOR.getBlue());\n+                System.err.println(\"Pixel color Red: \" + color.getRed() + \"; Green: \" + color.getGreen() + \"; Blue: \" + color.getBlue());\n+\n+                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+                Rectangle screen = new Rectangle(0, 0, (int) screenSize.getWidth(), (int) screenSize.getHeight());\n+                BufferedImage img = robot.createScreenCapture(screen);\n+                javax.imageio.ImageIO.write(img, \"png\", new java.io.File(\"image.png\"));\n+\n@@ -95,3 +114,5 @@\n-            if (frame != null) {\n-                frame.dispose();\n-            }\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n@@ -99,0 +120,1 @@\n+        System.out.println(\"Test Passed\");\n@@ -103,0 +125,1 @@\n+        System.out.println(\"d3d \" + d3d);\n@@ -141,0 +164,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/8069348\/bug8069348.java","additions":31,"deletions":7,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class bug6276188 extends JFrame {\n+public class bug6276188 {\n@@ -44,0 +44,5 @@\n+    private static JFrame testFrame;\n+\n+     \/\/ move away from cursor\n+    private final static int OFFSET_X = -20;\n+    private final static int OFFSET_Y = -20;\n@@ -46,2 +51,3 @@\n-        SynthLookAndFeel lookAndFeel = new SynthLookAndFeel();\n-        lookAndFeel.load(bug6276188.class.getResourceAsStream(\"bug6276188.xml\"), bug6276188.class);\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n@@ -49,7 +55,3 @@\n-        UIManager.setLookAndFeel(lookAndFeel);\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                JFrame testFrame = new JFrame();\n-                testFrame.setLayout(new BorderLayout());\n-                testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-                testFrame.add(BorderLayout.CENTER, button = new JButton());\n+            SynthLookAndFeel lookAndFeel = new SynthLookAndFeel();\n+            lookAndFeel.load(bug6276188.class.getResourceAsStream(\"bug6276188.xml\"), bug6276188.class);\n+            UIManager.setLookAndFeel(lookAndFeel);\n@@ -57,4 +59,6 @@\n-                testFrame.setSize(new Dimension(320, 200));\n-                testFrame.setVisible(true);\n-            }\n-        });\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    testFrame = new JFrame();\n+                    testFrame.setLayout(new BorderLayout());\n+                    testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    testFrame.add(BorderLayout.CENTER, button = new JButton());\n@@ -62,4 +66,5 @@\n-        Robot robot = new Robot();\n-        robot.setAutoDelay(50);\n-        robot.waitForIdle();\n-        robot.delay(200);\n+                    testFrame.setSize(new Dimension(320, 200));\n+                    testFrame.setLocationRelativeTo(null);\n+                    testFrame.setVisible(true);\n+                }\n+            });\n@@ -67,1 +72,2 @@\n-        p = Util.getCenterPoint(button);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n@@ -69,4 +75,2 @@\n-        robot.mouseMove(p.x , p.y);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.waitForIdle();\n-        robot.delay(1000);\n+            p = Util.getCenterPoint(button);\n+            System.out.println(\"Button center point: \" + p);\n@@ -74,6 +78,23 @@\n-        Color color = robot.getPixelColor(p.x, p.y);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        boolean red = color.getRed() > 0 && color.getGreen() == 0 && color.getBlue() == 0;\n-        if (!red) {\n-            System.err.println(\"Red: \" + color.getRed() + \"; Green: \" + color.getGreen() + \"; Blue: \" + color.getBlue());\n-            throw new RuntimeException(\"Synth ButtonUI does not handle PRESSED & MOUSE_OVER state\");\n+            robot.mouseMove(p.x , p.y);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            Color color = robot.getPixelColor(p.x - OFFSET_X, p.y - OFFSET_y);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            boolean red = color.getRed() > 0 && color.getGreen() == 0 && color.getBlue() == 0;\n+            if (!red) {\n+                System.err.println(\"Red: \" + color.getRed() + \"; Green: \" + color.getGreen() + \"; Blue: \" + color.getBlue());\n+                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+                Rectangle screen = new Rectangle(0, 0, (int) screenSize.getWidth(), (int) screenSize.getHeight());\n+                BufferedImage img = robot.createScreenCapture(screen);\n+                javax.imageio.ImageIO.write(img, \"png\", new java.io.File(\"image.png\"));\n+                throw new RuntimeException(\"Synth ButtonUI does not handle PRESSED & MOUSE_OVER state\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (testFrame != null) {\n+                    testFrame.dispose();\n+                }\n+            });\n","filename":"test\/jdk\/javax\/swing\/plaf\/synth\/SynthButtonUI\/6276188\/bug6276188.java","additions":50,"deletions":29,"binary":false,"changes":79,"status":"modified"}]}