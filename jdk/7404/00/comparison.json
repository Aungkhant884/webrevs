{"files":[{"patch":"@@ -0,0 +1,302 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSpinner;\n+import javax.swing.SpinnerDateModel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4670051\n+ * @summary Checks whether JSpinner with a SpinnerDateModel\n+ * exactly spins the field where cursor is there.\n+ * @run main JSpinnerFieldUnderCursorTest\n+ *\/\n+public class JSpinnerFieldUnderCursorTest {\n+\n+    private static final Calendar cal1 = Calendar.getInstance();\n+    private static final Calendar cal2 = Calendar.getInstance();\n+    private static Robot robot;\n+    private static JSpinner spinner;\n+    private static Date initValue;\n+    private static Date upValue;\n+    private static Date downValue;\n+    private static JFrame frame;\n+    private static boolean passed = true;\n+    private static volatile Point spinnerUpButtonCenter;\n+    private static volatile Point spinnerDownButtonCenter;\n+    private static volatile Date spinnerValue;\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+\n+        spinner = new JSpinner(new SpinnerDateModel());\n+        JSpinner.DateEditor editor = new JSpinner.DateEditor(spinner, \" dd\/MM\/yy \");\n+        spinner.setEditor(editor);\n+        spinner.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+        panel.add(spinner);\n+\n+        frame.add(panel);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+    }\n+\n+    private static void setLookAndFeel(final String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+            System.out.println(\"LookAndFeel: \" + laf);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(UIManager.LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    setLookAndFeel(laf);\n+                    createUI();\n+                });\n+                SwingUtilities.invokeAndWait(() -> {\n+                    Point loc = spinner.getLocationOnScreen();\n+                    int editorWidth = spinner.getEditor().getWidth();\n+                    int buttonWidth = spinner.getWidth() - editorWidth;\n+                    int quarterHeight = spinner.getHeight() \/ 4;\n+\n+                    spinnerUpButtonCenter = new Point(loc.x + editorWidth\n+                            + (buttonWidth \/ 2),\n+                            loc.y + quarterHeight);\n+                    spinnerDownButtonCenter = new Point(spinnerUpButtonCenter.x,\n+                            loc.y + (3 * quarterHeight));\n+                });\n+\n+                \/\/ Cursor at Day field.\n+                updateSpinnerValue();\n+                \/\/ Increment Day\n+                initValue = spinnerValue;\n+                mousePressOnUpButton();\n+                updateSpinnerValue();\n+                upValue = spinnerValue;\n+                verifyDayIncrement();\n+                \/\/ Decrement Day\n+                updateSpinnerValue();\n+                initValue = spinnerValue;\n+                mousePressOnDownButton();\n+                updateSpinnerValue();\n+                downValue = spinnerValue;\n+                verifyDayDecrement();\n+\n+                \/\/ Cursor at Month Field\n+                pressRightArrowKey();\n+                \/\/ Increment Month\n+                updateSpinnerValue();\n+                initValue = spinnerValue;\n+                mousePressOnUpButton();\n+                updateSpinnerValue();\n+                upValue = spinnerValue;\n+                verifyMonthIncrement();\n+                \/\/ Decrement Month\n+                updateSpinnerValue();\n+                initValue = spinnerValue;\n+                mousePressOnDownButton();\n+                updateSpinnerValue();\n+                downValue = spinnerValue;\n+                verifyMonthDecrement();\n+\n+                \/\/ Cursor at Year Field\n+                pressRightArrowKey();\n+                \/\/ Increment Year\n+                updateSpinnerValue();\n+                initValue = spinnerValue;\n+                mousePressOnUpButton();\n+                updateSpinnerValue();\n+                upValue = spinnerValue;\n+                verifyYearIncrement();\n+                \/\/ Decrement Year\n+                updateSpinnerValue();\n+                initValue = spinnerValue;\n+                mousePressOnDownButton();\n+                updateSpinnerValue();\n+                downValue = spinnerValue;\n+                verifyYearDecrement();\n+\n+                if (passed) {\n+                    System.out.println(\"Test Passed\");\n+                } else {\n+                    throw new RuntimeException(\"Test Failed as one or more cases failed\");\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(JSpinnerFieldUnderCursorTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void updateSpinnerValue() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> spinnerValue = (Date) spinner.getValue());\n+    }\n+\n+\n+    public static void pressRightArrowKey() {\n+        robot.keyPress(KeyEvent.VK_RIGHT);\n+        robot.keyRelease(KeyEvent.VK_RIGHT);\n+    }\n+\n+\n+    public static void mousePressOnUpButton() {\n+        robot.mouseMove(spinnerUpButtonCenter.x, spinnerUpButtonCenter.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+    }\n+\n+    public static void mousePressOnDownButton() {\n+        robot.mouseMove(spinnerDownButtonCenter.x, spinnerDownButtonCenter.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    public static void main(String[] s) throws Exception {\n+        runTest();\n+    }\n+\n+    public static boolean compareDates(Calendar d1, Calendar d2) {\n+        return (d1.get(Calendar.DATE) == d2.get(Calendar.DATE)) &&\n+                (d1.get(Calendar.DAY_OF_YEAR) == d2.get(Calendar.DAY_OF_YEAR)) &&\n+                (d1.get(Calendar.DAY_OF_MONTH) == d2.get(Calendar.DAY_OF_MONTH));\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+\n+    private static void checkResult() {\n+        if (compareDates(cal1, cal2)) {\n+            System.out.println(\" Case Passed\");\n+        } else {\n+            passed = false;\n+            System.out.println(\" Case Failed because the expected: \" + cal1.getTime()\n+                    + \" and actual: \" + cal2.getTime() + \" outputs do not match.\");\n+        }\n+    }\n+\n+\n+    private static void updateCalendarObjects(Date finalValue) {\n+        cal1.setTime(initValue);\n+        cal2.setTime(finalValue);\n+    }\n+\n+\n+    \/**\n+     * Verifying that JSpinner increments the date field when cursor is on date field\n+     *\/\n+    private static void verifyDayIncrement() {\n+        System.out.print(\"verifyDateIncrement\");\n+        updateCalendarObjects(upValue);\n+        cal1.add(Calendar.DATE, 1);\n+        checkResult();\n+    }\n+\n+    \/**\n+     * Verifying that JSpinner decrements the date field when cursor is on date field\n+     *\/\n+    private static void verifyDayDecrement() {\n+        System.out.print(\"verifyDateDecrement\");\n+        updateCalendarObjects(downValue);\n+        cal1.add(Calendar.DATE, -1);\n+        checkResult();\n+    }\n+\n+    \/**\n+     * Verifying that JSpinner increments the month field when cursor is on month field\n+     *\/\n+    private static void verifyMonthIncrement() {\n+        System.out.print(\"verifyMonthIncrement\");\n+        updateCalendarObjects(upValue);\n+        cal1.add(Calendar.MONTH, 1);\n+        checkResult();\n+    }\n+\n+\n+    \/**\n+     * Verifying that JSpinner decrements the month field when cursor is on month field\n+     *\/\n+    private static void verifyMonthDecrement() {\n+        System.out.print(\"verifyMonthDecrement\");\n+        updateCalendarObjects(downValue);\n+        cal1.add(Calendar.MONTH, -1);\n+        checkResult();\n+    }\n+\n+    \/**\n+     * Verifying that, JSpinner decrements the year field when the cursor is on year field.\n+     *\/\n+    private static void verifyYearDecrement() {\n+        System.out.print(\"verifyYearDecrement\");\n+        updateCalendarObjects(downValue);\n+        cal1.add(Calendar.YEAR, -1);\n+        checkResult();\n+    }\n+\n+    \/**\n+     * Verifying that JSpinner increments the year field when cursor is on year field\n+     *\/\n+    private static void verifyYearIncrement() {\n+        System.out.print(\"verifyYearIncrement\");\n+        updateCalendarObjects(upValue);\n+        cal1.add(Calendar.YEAR, 1);\n+        checkResult();\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JSpinner\/4670051\/JSpinnerFieldUnderCursorTest.java","additions":302,"deletions":0,"binary":false,"changes":302,"status":"added"}]}