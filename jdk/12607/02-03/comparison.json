{"files":[{"patch":"@@ -426,1 +426,4 @@\n-  guarantee(success, \"shared strings array must point to only archivable objects\");\n+  \/\/ We must succeed because:\n+  \/\/ - _dumped_interned_strings do not contain any large strings.\n+  \/\/ - StringTable::init_shared_table() doesn't create any large arrays.\n+  assert(success, \"shared strings array must not point to arrays or strings that are too large to archive\");\n@@ -564,8 +567,7 @@\n-    if (!ArchiveHeapWriter::is_string_too_large_to_archive(s)) {\n-      bool success = archive_reachable_objects_from(1, _default_subgraph_info,\n-                                                    s, \/*is_closed_archive=*\/true);\n-      assert(success, \"must be\");\n-      \/\/ Prevent string deduplication from changing the value field to\n-      \/\/ something not in the archive.\n-      java_lang_String::set_deduplication_forbidden(s);\n-    }\n+    assert(!ArchiveHeapWriter::is_string_too_large_to_archive(s), \"large strings must have been filtered\");\n+    bool success = archive_reachable_objects_from(1, _default_subgraph_info,\n+                                                  s, \/*is_closed_archive=*\/true);\n+    assert(success, \"string must be short enough to be archived\");\n+    \/\/ Prevent string deduplication from changing the value field to\n+    \/\/ something not in the archive.\n+    java_lang_String::set_deduplication_forbidden(s);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -796,1 +796,5 @@\n-      fatal(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+      \/\/ This can only happen if you have an extremely large number of classes that\n+      \/\/ refer to more than 16384 * 16384 = 26M interned strings! Not a practical concern\n+      \/\/ but bail out for safety.\n+      log_error(cds)(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+      os::_exit(1);\n@@ -817,0 +821,1 @@\n+      assert(!ArchiveHeapWriter::is_too_large_to_archive(secondary), \"sanity\");\n@@ -824,0 +829,21 @@\n+#ifdef ASSERT\n+void StringTable::verify_secondary_array_index_bits() {\n+  int max;\n+  for (max = 1; ; max++) {\n+    size_t next_size = objArrayOopDesc::object_size(1 << (max + 1));\n+    if (ArchiveHeapWriter::is_too_large_to_archive(next_size)) {\n+      break;\n+    }\n+  }\n+  \/\/ Currently max is 17 for +UseCompressedOops, 16 for -UseCompressedOops.\n+  \/\/ When we add support for Shenandoah (which has a smaller mininum region size than G1),\n+  \/\/ max will become 15\/14.\n+  \/\/\n+  \/\/ We use _secondary_array_index_bits==14 as that will be the eventual value, and will\n+  \/\/ make testing easier.\n+  assert(_secondary_array_index_bits <= max,\n+         \"_secondary_array_index_bits (%d) must be smaller than max possible value (%d)\",\n+         _secondary_array_index_bits, max);\n+}\n+#endif\n+\n@@ -833,0 +859,2 @@\n+  verify_secondary_array_index_bits();\n+\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -134,0 +134,3 @@\n+\n+  \/\/ make sure _secondary_array_index_bits is not too big\n+  static void verify_secondary_array_index_bits() PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}