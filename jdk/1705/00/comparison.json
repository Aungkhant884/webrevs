{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"jvmci\/jvmci.hpp\"\n@@ -332,11 +333,1 @@\n-  Symbol* box_classes[] = { java_lang_Boolean::symbol(), java_lang_Byte_ByteCache::symbol(),\n-    java_lang_Short_ShortCache::symbol(), java_lang_Character_CharacterCache::symbol(),\n-    java_lang_Integer_IntegerCache::symbol(), java_lang_Long_LongCache::symbol() };\n-\n-  for (unsigned i = 0; i < sizeof(box_classes) \/ sizeof(Symbol*); i++) {\n-    Klass* k = SystemDictionary::resolve_or_fail(box_classes[i], true, CHECK);\n-    InstanceKlass* ik = InstanceKlass::cast(k);\n-    if (ik->is_not_initialized()) {\n-      ik->initialize(CHECK);\n-    }\n-  }\n+  JVMCI::ensure_box_caches_initialized(CHECK);\n","filename":"src\/hotspot\/share\/aot\/aotLoader.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+volatile bool JVMCI::_box_caches_initialized = false;\n@@ -128,0 +129,29 @@\n+void JVMCI::ensure_box_caches_initialized(TRAPS) {\n+  if (_box_caches_initialized) {\n+    return;\n+  }\n+  MutexLocker locker(JVMCI_lock);\n+  \/\/ Check again after locking\n+  if (_box_caches_initialized) {\n+    return;\n+  }\n+\n+  Symbol* box_classes[] = {\n+    java_lang_Boolean::symbol(),\n+    java_lang_Byte_ByteCache::symbol(),\n+    java_lang_Short_ShortCache::symbol(),\n+    java_lang_Character_CharacterCache::symbol(),\n+    java_lang_Integer_IntegerCache::symbol(),\n+    java_lang_Long_LongCache::symbol()\n+  };\n+\n+  for (unsigned i = 0; i < sizeof(box_classes) \/ sizeof(Symbol*); i++) {\n+    Klass* k = SystemDictionary::resolve_or_fail(box_classes[i], true, CHECK);\n+    InstanceKlass* ik = InstanceKlass::cast(k);\n+    if (ik->is_not_initialized()) {\n+      ik->initialize(CHECK);\n+    }\n+  }\n+  _box_caches_initialized = true;\n+}\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -56,0 +56,3 @@\n+  \/\/ used to synchronize lazy initialization of boxing cache classes.\n+  static volatile bool _box_caches_initialized;\n+\n@@ -113,0 +116,3 @@\n+  \/\/ Ensures the boxing cache classes (e.g., java.lang.Integer.IntegerCache) are initialized.\n+  static void ensure_box_caches_initialized(TRAPS);\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1025,0 +1025,1 @@\n+  bool has_auto_box = false;\n@@ -1031,0 +1032,3 @@\n+    if (is_auto_box) {\n+      has_auto_box = true;\n+    }\n@@ -1052,0 +1056,5 @@\n+\n+  if (has_auto_box) {\n+    JavaThread* THREAD = JavaThread::current();\n+    JVMCI::ensure_box_caches_initialized(CHECK_NULL);\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}