{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,0 @@\n-\/*************************************************************\/\n-\n-extern \"C\" {\n@@ -104,48 +101,0 @@\n-char *jlong_to_string(jlong value, char *string) {\n-    char buffer[32];\n-    char *pbuf, *pstr;\n-\n-    pstr = string;\n-    if (value == 0) {\n-        *pstr++ = '0';\n-    } else {\n-        if (value < 0) {\n-            *pstr++ = '-';\n-            value = -value;\n-        }\n-        pbuf = buffer;\n-        while (value != 0) {\n-            *pbuf++ = '0' + (char)(value % 10);\n-            value = value \/ 10;\n-        }\n-        while (pbuf != buffer) {\n-            *pstr++ = *--pbuf;\n-        }\n-    }\n-    *pstr = '\\0';\n-\n-    return string;\n-}\n-\n-char *julong_to_string(julong value, char *string) {\n-    char buffer[32];\n-    char *pbuf, *pstr;\n-\n-    pstr = string;\n-    if (value == 0) {\n-        *pstr++ = '0';\n-    } else {\n-        pbuf = buffer;\n-        while (value != 0) {\n-            *pbuf++ = '0' + (char)(value % 10);\n-            value = value \/ 10;\n-        }\n-        while (pbuf != buffer) {\n-            *pstr++ = *--pbuf;\n-        }\n-    }\n-    *pstr = '\\0';\n-\n-    return string;\n-}\n-\n@@ -200,1 +149,0 @@\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/jni_tools.cpp","additions":1,"deletions":53,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+#include \"jvmti_common.h\"\n+\n@@ -55,10 +57,0 @@\n-\/**\n- * Additional Java basic types\n- *\/\n-\n-#ifdef _WIN32\n-    typedef unsigned __int64 julong;\n-#else\n-    typedef unsigned long long julong;\n-#endif\n-\n@@ -97,4 +89,0 @@\n-extern \"C\" {\n-\n-\/*************************************************************\/\n-\n@@ -130,16 +118,0 @@\n-\/**\n- * Convert the digits of the given value argument to a null-terminated\n- * character string and store the result (up to 32 bytes) in string.\n- * If value is negative, the first character of the stored string is\n- * the minus sign (-). The function returns a pointer to the begining\n- * of the result string.\n- *\/\n-char *jlong_to_string(jlong value, char *string);\n-\n-\/**\n- * Convert the digits of the given value argument to a null-terminated\n- * character string and store the result (up to 32 bytes) in string.\n- * The function returns a pointer to the begining of the result string.\n- *\/\n-char *julong_to_string(julong value, char *string);\n-\n@@ -166,4 +138,0 @@\n-}\n-\n-\/*************************************************************\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/jni_tools.h","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,300 +28,0 @@\n-extern \"C\" {\n-\n-const char* TranslateState(jint flags) {\n-    static char str[15 * 20];\n-\n-    if (flags == 0)\n-        return \"<none>\";\n-\n-    str[0] = '\\0';\n-\n-    if (flags & JVMTI_THREAD_STATE_ALIVE) {\n-        strcat(str, \" ALIVE\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_TERMINATED) {\n-        strcat(str, \" TERMINATED\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_RUNNABLE) {\n-        strcat(str, \" RUNNABLE\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_WAITING) {\n-        strcat(str, \" WAITING\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_WAITING_INDEFINITELY) {\n-        strcat(str, \" WAITING_INDEFINITELY\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT) {\n-        strcat(str, \" WAITING_WITH_TIMEOUT\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_SLEEPING) {\n-        strcat(str, \" SLEEPING\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_IN_OBJECT_WAIT) {\n-        strcat(str, \" IN_OBJECT_WAIT\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_PARKED) {\n-        strcat(str, \" PARKED\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) {\n-        strcat(str, \" BLOCKED_ON_MONITOR_ENTER\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_SUSPENDED) {\n-        strcat(str, \" SUSPENDED\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_INTERRUPTED) {\n-        strcat(str, \" INTERRUPTED\");\n-    }\n-\n-    if (flags & JVMTI_THREAD_STATE_IN_NATIVE) {\n-        strcat(str, \" IN_NATIVE\");\n-    }\n-\n-\n-    return str;\n-}\n-\n-const char* TranslateEvent(jvmtiEvent event_type) {\n-    switch (event_type) {\n-    case JVMTI_EVENT_VM_INIT:\n-        return (\"JVMTI_EVENT_VM_INIT\");\n-    case JVMTI_EVENT_VM_DEATH:\n-        return (\"JVMTI_EVENT_VM_DEATH\");\n-    case JVMTI_EVENT_THREAD_START:\n-        return (\"JVMTI_EVENT_THREAD_START\");\n-    case JVMTI_EVENT_THREAD_END:\n-        return (\"JVMTI_EVENT_THREAD_END\");\n-    case JVMTI_EVENT_CLASS_FILE_LOAD_HOOK:\n-        return (\"JVMTI_EVENT_CLASS_FILE_LOAD_HOOK\");\n-    case JVMTI_EVENT_CLASS_LOAD:\n-        return (\"JVMTI_EVENT_CLASS_LOAD\");\n-    case JVMTI_EVENT_CLASS_PREPARE:\n-        return (\"JVMTI_EVENT_CLASS_PREPARE\");\n-    case JVMTI_EVENT_VM_START:\n-        return (\"JVMTI_EVENT_VM_START\");\n-    case JVMTI_EVENT_EXCEPTION:\n-        return (\"JVMTI_EVENT_EXCEPTION\");\n-    case JVMTI_EVENT_EXCEPTION_CATCH:\n-        return (\"JVMTI_EVENT_EXCEPTION_CATCH\");\n-    case JVMTI_EVENT_SINGLE_STEP:\n-        return (\"JVMTI_EVENT_SINGLE_STEP\");\n-    case JVMTI_EVENT_FRAME_POP:\n-        return (\"JVMTI_EVENT_FRAME_POP\");\n-    case JVMTI_EVENT_BREAKPOINT:\n-        return (\"JVMTI_EVENT_BREAKPOINT\");\n-    case JVMTI_EVENT_FIELD_ACCESS:\n-        return (\"JVMTI_EVENT_FIELD_ACCESS\");\n-    case JVMTI_EVENT_FIELD_MODIFICATION:\n-        return (\"JVMTI_EVENT_FIELD_MODIFICATION\");\n-    case JVMTI_EVENT_METHOD_ENTRY:\n-        return (\"JVMTI_EVENT_METHOD_ENTRY\");\n-    case JVMTI_EVENT_METHOD_EXIT:\n-        return (\"JVMTI_EVENT_METHOD_EXIT\");\n-    case JVMTI_EVENT_NATIVE_METHOD_BIND:\n-        return (\"JVMTI_EVENT_NATIVE_METHOD_BIND\");\n-    case JVMTI_EVENT_COMPILED_METHOD_LOAD:\n-        return (\"JVMTI_EVENT_COMPILED_METHOD_LOAD\");\n-    case JVMTI_EVENT_COMPILED_METHOD_UNLOAD:\n-        return (\"JVMTI_EVENT_COMPILED_METHOD_UNLOAD\");\n-    case JVMTI_EVENT_DYNAMIC_CODE_GENERATED:\n-        return (\"JVMTI_EVENT_DYNAMIC_CODE_GENERATED\");\n-    case JVMTI_EVENT_DATA_DUMP_REQUEST:\n-        return (\"JVMTI_EVENT_DATA_DUMP_REQUEST\");\n-    case JVMTI_EVENT_MONITOR_WAIT:\n-        return (\"JVMTI_EVENT_MONITOR_WAIT\");\n-    case JVMTI_EVENT_MONITOR_WAITED:\n-        return (\"JVMTI_EVENT_MONITOR_WAITED\");\n-    case JVMTI_EVENT_MONITOR_CONTENDED_ENTER:\n-        return (\"JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n-    case JVMTI_EVENT_MONITOR_CONTENDED_ENTERED:\n-        return (\"JVMTI_EVENT_MONITOR_CONTENDED_ENTERED\");\n-    case JVMTI_EVENT_GARBAGE_COLLECTION_START:\n-        return (\"JVMTI_EVENT_GARBAGE_COLLECTION_START\");\n-    case JVMTI_EVENT_GARBAGE_COLLECTION_FINISH:\n-        return (\"JVMTI_EVENT_GARBAGE_COLLECTION_FINISH\");\n-    case JVMTI_EVENT_OBJECT_FREE:\n-        return (\"JVMTI_EVENT_OBJECT_FREE\");\n-    case JVMTI_EVENT_VM_OBJECT_ALLOC:\n-        return (\"JVMTI_EVENT_VM_OBJECT_ALLOC\");\n-    default:\n-        return (\"<unknown event>\");\n-    }\n-}\n-\n-const char* TranslateError(jvmtiError err) {\n-    switch (err) {\n-    case JVMTI_ERROR_NONE:\n-        return (\"JVMTI_ERROR_NONE\");\n-    case JVMTI_ERROR_INVALID_THREAD:\n-        return (\"JVMTI_ERROR_INVALID_THREAD\");\n-    case JVMTI_ERROR_INVALID_THREAD_GROUP:\n-        return (\"JVMTI_ERROR_INVALID_THREAD_GROUP\");\n-    case JVMTI_ERROR_INVALID_PRIORITY:\n-        return (\"JVMTI_ERROR_INVALID_PRIORITY\");\n-    case JVMTI_ERROR_THREAD_NOT_SUSPENDED:\n-        return (\"JVMTI_ERROR_THREAD_NOT_SUSPENDED\");\n-    case JVMTI_ERROR_THREAD_SUSPENDED:\n-        return (\"JVMTI_ERROR_THREAD_SUSPENDED\");\n-    case JVMTI_ERROR_THREAD_NOT_ALIVE:\n-        return (\"JVMTI_ERROR_THREAD_NOT_ALIVE\");\n-    case JVMTI_ERROR_INVALID_OBJECT:\n-        return (\"JVMTI_ERROR_INVALID_OBJECT\");\n-    case JVMTI_ERROR_INVALID_CLASS:\n-        return (\"JVMTI_ERROR_INVALID_CLASS\");\n-    case JVMTI_ERROR_CLASS_NOT_PREPARED:\n-        return (\"JVMTI_ERROR_CLASS_NOT_PREPARED\");\n-    case JVMTI_ERROR_INVALID_METHODID:\n-        return (\"JVMTI_ERROR_INVALID_METHODID\");\n-    case JVMTI_ERROR_INVALID_LOCATION:\n-        return (\"JVMTI_ERROR_INVALID_LOCATION\");\n-    case JVMTI_ERROR_INVALID_FIELDID:\n-        return (\"JVMTI_ERROR_INVALID_FIELDID\");\n-    case JVMTI_ERROR_NO_MORE_FRAMES:\n-        return (\"JVMTI_ERROR_NO_MORE_FRAMES\");\n-    case JVMTI_ERROR_OPAQUE_FRAME:\n-        return (\"JVMTI_ERROR_OPAQUE_FRAME\");\n-    case JVMTI_ERROR_TYPE_MISMATCH:\n-        return (\"JVMTI_ERROR_TYPE_MISMATCH\");\n-    case JVMTI_ERROR_INVALID_SLOT:\n-        return (\"JVMTI_ERROR_INVALID_SLOT\");\n-    case JVMTI_ERROR_DUPLICATE:\n-        return (\"JVMTI_ERROR_DUPLICATE\");\n-    case JVMTI_ERROR_NOT_FOUND:\n-        return (\"JVMTI_ERROR_NOT_FOUND\");\n-    case JVMTI_ERROR_INVALID_MONITOR:\n-        return (\"JVMTI_ERROR_INVALID_MONITOR\");\n-    case JVMTI_ERROR_NOT_MONITOR_OWNER:\n-        return (\"JVMTI_ERROR_NOT_MONITOR_OWNER\");\n-    case JVMTI_ERROR_INTERRUPT:\n-        return (\"JVMTI_ERROR_INTERRUPT\");\n-    case JVMTI_ERROR_INVALID_CLASS_FORMAT:\n-        return (\"JVMTI_ERROR_INVALID_CLASS_FORMAT\");\n-    case JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION:\n-        return (\"JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION\");\n-    case JVMTI_ERROR_FAILS_VERIFICATION:\n-        return (\"JVMTI_ERROR_FAILS_VERIFICATION\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED\");\n-    case JVMTI_ERROR_INVALID_TYPESTATE:\n-        return (\"JVMTI_ERROR_INVALID_TYPESTATE\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED\");\n-    case JVMTI_ERROR_UNSUPPORTED_VERSION:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_VERSION\");\n-    case JVMTI_ERROR_NAMES_DONT_MATCH:\n-        return (\"JVMTI_ERROR_NAMES_DONT_MATCH\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED\");\n-    case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED:\n-        return (\"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED\");\n-    case JVMTI_ERROR_UNMODIFIABLE_CLASS:\n-        return (\"JVMTI_ERROR_UNMODIFIABLE_CLASS\");\n-    case JVMTI_ERROR_NOT_AVAILABLE:\n-        return (\"JVMTI_ERROR_NOT_AVAILABLE\");\n-    case JVMTI_ERROR_MUST_POSSESS_CAPABILITY:\n-        return (\"JVMTI_ERROR_MUST_POSSESS_CAPABILITY\");\n-    case JVMTI_ERROR_NULL_POINTER:\n-        return (\"JVMTI_ERROR_NULL_POINTER\");\n-    case JVMTI_ERROR_ABSENT_INFORMATION:\n-        return (\"JVMTI_ERROR_ABSENT_INFORMATION\");\n-    case JVMTI_ERROR_INVALID_EVENT_TYPE:\n-        return (\"JVMTI_ERROR_INVALID_EVENT_TYPE\");\n-    case JVMTI_ERROR_ILLEGAL_ARGUMENT:\n-        return (\"JVMTI_ERROR_ILLEGAL_ARGUMENT\");\n-    case JVMTI_ERROR_NATIVE_METHOD:\n-        return (\"JVMTI_ERROR_NATIVE_METHOD\");\n-    case JVMTI_ERROR_OUT_OF_MEMORY:\n-        return (\"JVMTI_ERROR_OUT_OF_MEMORY\");\n-    case JVMTI_ERROR_ACCESS_DENIED:\n-        return (\"JVMTI_ERROR_ACCESS_DENIED\");\n-    case JVMTI_ERROR_WRONG_PHASE:\n-        return (\"JVMTI_ERROR_WRONG_PHASE\");\n-    case JVMTI_ERROR_INTERNAL:\n-        return (\"JVMTI_ERROR_INTERNAL\");\n-    case JVMTI_ERROR_UNATTACHED_THREAD:\n-        return (\"JVMTI_ERROR_UNATTACHED_THREAD\");\n-    case JVMTI_ERROR_INVALID_ENVIRONMENT:\n-        return (\"JVMTI_ERROR_INVALID_ENVIRONMENT\");\n-    default:\n-        return (\"<unknown error>\");\n-    }\n-}\n-\n-const char* TranslatePhase(jvmtiPhase phase) {\n-    switch (phase) {\n-    case JVMTI_PHASE_ONLOAD:\n-        return (\"JVMTI_PHASE_ONLOAD\");\n-    case JVMTI_PHASE_PRIMORDIAL:\n-        return (\"JVMTI_PHASE_PRIMORDIAL\");\n-    case JVMTI_PHASE_START:\n-        return (\"JVMTI_PHASE_START\");\n-    case JVMTI_PHASE_LIVE:\n-        return (\"JVMTI_PHASE_LIVE\");\n-    case JVMTI_PHASE_DEAD:\n-        return (\"JVMTI_PHASE_DEAD\");\n-    default:\n-        return (\"<unknown phase>\");\n-    }\n-}\n-\n-const char* TranslateRootKind(jvmtiHeapRootKind root) {\n-    switch (root) {\n-    case JVMTI_HEAP_ROOT_JNI_GLOBAL:\n-        return (\"JVMTI_HEAP_ROOT_JNI_GLOBAL\");\n-    case JVMTI_HEAP_ROOT_JNI_LOCAL:\n-        return (\"JVMTI_HEAP_ROOT_JNI_LOCAL\");\n-    case JVMTI_HEAP_ROOT_SYSTEM_CLASS:\n-        return (\"JVMTI_HEAP_ROOT_SYSTEM_CLASS\");\n-    case JVMTI_HEAP_ROOT_MONITOR:\n-        return (\"JVMTI_HEAP_ROOT_MONITOR\");\n-    case JVMTI_HEAP_ROOT_STACK_LOCAL:\n-        return (\"JVMTI_HEAP_ROOT_STACK_LOCAL\");\n-    case JVMTI_HEAP_ROOT_THREAD:\n-        return (\"JVMTI_HEAP_ROOT_THREAD\");\n-    case JVMTI_HEAP_ROOT_OTHER:\n-        return (\"JVMTI_HEAP_ROOT_OTHER\");\n-    default:\n-        return (\"<unknown root kind>\");\n-    }\n-}\n-\n-const char* TranslateObjectRefKind(jvmtiObjectReferenceKind ref) {\n-    switch (ref) {\n-    case JVMTI_REFERENCE_CLASS:\n-        return (\"JVMTI_REFERENCE_CLASS\");\n-    case JVMTI_REFERENCE_FIELD:\n-        return (\"JVMTI_REFERENCE_FIELD\");\n-    case JVMTI_REFERENCE_ARRAY_ELEMENT:\n-        return (\"JVMTI_REFERENCE_ARRAY_ELEMENT\");\n-    case JVMTI_REFERENCE_CLASS_LOADER:\n-        return (\"JVMTI_REFERENCE_CLASS_LOADER\");\n-    case JVMTI_REFERENCE_SIGNERS:\n-        return (\"JVMTI_REFERENCE_SIGNERS\");\n-    case JVMTI_REFERENCE_PROTECTION_DOMAIN:\n-        return (\"JVMTI_REFERENCE_PROTECTION_DOMAIN\");\n-    case JVMTI_REFERENCE_INTERFACE:\n-        return (\"JVMTI_REFERENCE_INTERFACE\");\n-    case JVMTI_REFERENCE_STATIC_FIELD:\n-        return (\"JVMTI_REFERENCE_STATIC_FIELD\");\n-    case JVMTI_REFERENCE_CONSTANT_POOL:\n-        return (\"JVMTI_REFERENCE_CONSTANT_POOL\");\n-    default:\n-        return (\"<unknown reference kind>\");\n-    }\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/JVMTITools.cpp","additions":1,"deletions":301,"binary":false,"changes":302,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,33 +29,1 @@\n-extern \"C\" {\n-\n-\/**\n- * Return string representation of given JVMTI event constant.\n- *\/\n-const char* TranslateEvent(jvmtiEvent event_type);\n-\n-\/**\n- * Return string representation of given JVMTI thread state constant.\n- *\/\n-const char* TranslateState(jint flags);\n-\n-\/**\n- * Return string representation of given JVMTI error code.\n- *\/\n-const char* TranslateError(jvmtiError err);\n-\n-\/**\n- * Return string representation of given phase of VM execution.\n- *\/\n-const char* TranslatePhase(jvmtiPhase phase);\n-\n-\/**\n- * Return string representation of given heap root kind.\n- *\/\n-const char* TranslateRootKind(jvmtiHeapRootKind root);\n-\n-\/**\n- * Return string representation of given heap root kind.\n- *\/\n-const char* TranslateObjectRefKind(jvmtiObjectReferenceKind ref);\n-\n-}\n+#include \"jvmti_common.h\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/JVMTITools.h","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -39,0 +39,12 @@\n+#include \"jvmti.h\"\n+\n+\/**\n+ * Additional Java basic types\n+ *\/\n+\n+#ifdef _WIN32\n+    typedef unsigned __int64 julong;\n+#else\n+    typedef unsigned long long julong;\n+#endif\n+\n@@ -54,2 +66,8 @@\n-char*\n-jlong_to_string(jlong value, char *string) {\n+\/**\n+ * Convert the digits of the given value argument to a null-terminated\n+ * character string and store the result (up to 32 bytes) in string.\n+ * If value is negative, the first character of the stored string is\n+ * the minus sign (-). The function returns a pointer to the begining\n+ * of the result string.\n+ *\/\n+char* jlong_to_string(jlong value, char *string) {\n@@ -81,0 +99,27 @@\n+\/**\n+ * Convert the digits of the given value argument to a null-terminated\n+ * character string and store the result (up to 32 bytes) in string.\n+ * The function returns a pointer to the begining of the result string.\n+ *\/\n+char* julong_to_string(julong value, char *string) {\n+    char buffer[32];\n+    char *pbuf, *pstr;\n+\n+    pstr = string;\n+    if (value == 0) {\n+        *pstr++ = '0';\n+    } else {\n+        pbuf = buffer;\n+        while (value != 0) {\n+            *pbuf++ = '0' + (char)(value % 10);\n+            value = value \/ 10;\n+        }\n+        while (pbuf != buffer) {\n+            *pstr++ = *--pbuf;\n+        }\n+    }\n+    *pstr = '\\0';\n+\n+    return string;\n+}\n+\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.h","additions":47,"deletions":2,"binary":false,"changes":49,"status":"modified"}]}