{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,3 +151,3 @@\n-  \/\/ Can't assert that the DCQ is empty.  There is early execution on\n-  \/\/ the main thread, before it gets added to the threads list, which\n-  \/\/ is where this is called.  That execution may enqueue dirty cards.\n+  G1DirtyCardQueue& dq = G1ThreadLocalData::dirty_card_queue(thread);\n+  assert(dq.buffer() == nullptr, \"Dirty Card queue should not have a buffer\");\n+  assert(dq.index() == 0, \"Dirty Card queue index should be zero\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-  G1BarrierSet::dirty_card_queue_set().flush_queue(*this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -146,0 +146,4 @@\n+  return JNI_OK;\n+}\n+\n+jint init_globals2() {\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+jint init_globals2();    \/\/ construction of early Java objects (main Java thread)\n","filename":"src\/hotspot\/share\/runtime\/init.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -556,0 +556,15 @@\n+  \/\/ Add main_thread to threads list to finish barrier setup with\n+  \/\/ on_thread_attach.  Should be before starting to build Java objects in\n+  \/\/ init_globals2, which invokes barriers.\n+  { MutexLocker mu(Threads_lock);\n+    Threads::add(main_thread);\n+  }\n+\n+  status = init_globals2();\n+  if (status != JNI_OK) {\n+    Threads::remove(main_thread, false);\n+    main_thread->smr_delete();\n+    *canTryAgain = false; \/\/ don't let caller call JNI_CreateJavaVM again\n+    return status;\n+  }\n+\n@@ -561,4 +576,0 @@\n-  { MutexLocker mu(Threads_lock);\n-    Threads::add(main_thread);\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}