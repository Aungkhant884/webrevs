{"files":[{"patch":"@@ -974,0 +974,7 @@\n+\n+            \/\/ In case an Abort was thrown before processAnnotations could be called,\n+            \/\/ we could have deferred diagnostics that haven't been reported.\n+            if (deferredDiagnosticHandler != null) {\n+                deferredDiagnosticHandler.reportDeferredDiagnostics();\n+                log.popDiagnosticHandler(deferredDiagnosticHandler);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309499\n+ * @summary Verify that java.lang unavailable error is not swallowed when\n+ *  annotation processor is used.\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build NoJavaLangWithAnnotationProcessorTest JavacTestingAbstractProcessor\n+ * @run main NoJavaLangWithAnnotationProcessorTest\n+ *\/\n+\n+import java.nio.file.*;\n+import java.util.Set;\n+\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.lang.model.element.TypeElement;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class NoJavaLangWithAnnotationProcessorTest extends JavacTestingAbstractProcessor {\n+\n+    private static final String noJavaLangSrc =\n+        \"public class NoJavaLang {\\n\" +\n+        \"    private String s;\\n\" +\n+        \"}\";\n+\n+    private static final String compilerErrorMessage =\n+        \"compiler.err.no.java.lang\";\n+\n+    \/\/ No-Op annotation processor\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        return false;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new NoJavaLangWithAnnotationProcessorTest().run();\n+    }\n+\n+    final ToolBox tb = new ToolBox();\n+\n+    void run() throws Exception {\n+        testCompilesNormallyWithNonEmptyBootClassPath();\n+        testBootClassPath();\n+        testModulePath();\n+    }\n+\n+    \/\/ Normal case with java.lang available\n+    void testCompilesNormallyWithNonEmptyBootClassPath() {\n+        new JavacTask(tb)\n+                .sources(noJavaLangSrc)\n+                .options(\"-processor\", \"NoJavaLangWithAnnotationProcessorTest\")\n+                .run();\n+    }\n+\n+\n+    \/\/ test with bootclasspath, for as long as its around\n+    void testBootClassPath() {\n+        String[] bcpOpts = {\"-XDrawDiagnostics\", \"-Xlint:-options\", \"-source\", \"8\", \"-target\", \"8\",\n+            \"-bootclasspath\", \".\", \"-classpath\", \".\",\n+            \"-processor\", \"NoJavaLangWithAnnotationProcessorTest\", \"-processorpath\", System.getProperty(\"test.class.path\") };\n+        test(bcpOpts, compilerErrorMessage);\n+    }\n+\n+    \/\/ test with module path\n+    void testModulePath() throws Exception {\n+        \/\/ need to ensure there is an empty java.base to avoid different error message\n+        Files.createDirectories(Paths.get(\"modules\/java.base\"));\n+        new JavacTask(tb)\n+                .sources(\"module java.base { }\",\n+                         \"package java.lang; public class Object {}\")\n+                .outdir(\"modules\/java.base\")\n+                .run();\n+\n+        Files.delete(Paths.get(\"modules\", \"java.base\", \"java\", \"lang\", \"Object.class\"));\n+\n+        String[] mpOpts = {\"-XDrawDiagnostics\", \"--system\", \"none\", \"--module-path\", \"modules\",\n+            \"-processor\", \"NoJavaLangWithAnnotationProcessorTest\", \"-processorpath\", System.getProperty(\"test.class.path\") };\n+        test(mpOpts, compilerErrorMessage);\n+    }\n+\n+    private void test(String[] options, String expect) {\n+        System.err.println(\"Testing \" + java.util.Arrays.toString(options));\n+\n+        String out = new JavacTask(tb)\n+                .options(options)\n+                .sources(noJavaLangSrc)\n+                .run(Task.Expect.FAIL, 1)\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        if (!out.contains(expect)) {\n+            throw new AssertionError(\"javac generated error output is not correct\");\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/fatalErrors\/NoJavaLangWithAnnotationProcessorTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}