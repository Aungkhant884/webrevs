[{"commit":{"message":"Move deferred diagnostic reporting to catch clause. Remove unnecessary\ncomment."},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"}],"sha":"0be60cfacea7a204a5108f434000d35b98b5d40b"},{"commit":{"message":"Update a comment as suggested in review"},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"}],"sha":"228b730422ff86842d5718e1c3e0f812c7301517"},{"commit":{"message":"Fix trailing whitespace"},"files":[{"filename":"test\/langtools\/tools\/javac\/fatalErrors\/NoJavaLangWithAnnotationProcessorTest.java"}],"sha":"03944bf405a9c0d56e046b076005c8888ffe957d"},{"commit":{"message":"8309499: Don't swallow diagnostics with annotation processors.\n\nWithin `initProcessAnnotations` a `deferredDiagnosticHandler` is\ninstalled when annotation processing is enabled. Normally, when\n`processAnnotations` is called after `enterTrees`, the\n`processAnnotations` code calls `reportDeferredDiagnostics`. However, if\nan Abort gets thrown in `enterTrees` (currently only when java.lang is\nmissing), no one ends up calling `reportDeferredDiagnostics` and these\ndiagnostics end up being lost.\n\nThis commit adds a call in the finally clause to catch this situation\nand adds tests based on the existing NoJavaLang tests to ensure that\nthese errors bubble up even when annotation processors are enabled."},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"test\/langtools\/tools\/javac\/fatalErrors\/NoJavaLangWithAnnotationProcessorTest.java"}],"sha":"d7ca4ad06f6b0e04a48d212e20a6e94708bbd75d"}]