{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-  memset((void*)_bin,0,sizeof(bucket)*_size);\n+  memset((void*)_bin, 0, sizeof(bucket) * _size);\n@@ -78,1 +78,15 @@\n-  memset((void*)_bin,0,sizeof(bucket)*_size);\n+  memset((void*)_bin, 0, sizeof(bucket) * _size);\n+}\n+\n+\/\/ Deep copy into arena of choice\n+Dict::Dict(const Dict &d, Arena *arena)\n+: _arena(arena), _size(d._size), _cnt(d._cnt), _hash(d._hash), _cmp(d._cmp) {\n+  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket) * _size);\n+  memcpy((void*)_bin, (void*)d._bin, sizeof(bucket) * _size);\n+  for (uint i = 0; i < _size; i++) {\n+    if (!_bin[i]._keyvals) {\n+      continue;\n+    }\n+    _bin[i]._keyvals = (void**)_arena->Amalloc_4(sizeof(void *) * _bin[i]._max * 2);\n+    memcpy(_bin[i]._keyvals, d._bin[i]._keyvals, _bin[i]._cnt*2*sizeof(void*));\n+  }\n@@ -146,35 +160,0 @@\n-\/\/------------------------------Dict-----------------------------------------\n-\/\/ Deep copy a dictionary.\n-Dict::Dict( const Dict &d ) : ResourceObj(d), _arena(d._arena), _size(d._size), _cnt(d._cnt), _hash(d._hash), _cmp(d._cmp) {\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket)*_size);\n-  memcpy( (void*)_bin, (void*)d._bin, sizeof(bucket)*_size );\n-  for( uint i=0; i<_size; i++ ) {\n-    if( !_bin[i]._keyvals ) continue;\n-    _bin[i]._keyvals=(void**)_arena->Amalloc_4( sizeof(void *)*_bin[i]._max*2);\n-    memcpy( _bin[i]._keyvals, d._bin[i]._keyvals,_bin[i]._cnt*2*sizeof(void*));\n-  }\n-}\n-\n-\/\/------------------------------Dict-----------------------------------------\n-\/\/ Deep copy a dictionary.\n-Dict &Dict::operator =( const Dict &d ) {\n-  if( _size < d._size ) {       \/\/ If must have more buckets\n-    _arena = d._arena;\n-    _bin = (bucket*)_arena->Arealloc( _bin, sizeof(bucket)*_size, sizeof(bucket)*d._size );\n-    memset( (void*)(&_bin[_size]), 0, (d._size-_size)*sizeof(bucket) );\n-    _size = d._size;\n-  }\n-  uint i;\n-  for( i=0; i<_size; i++ ) \/\/ All buckets are empty\n-    _bin[i]._cnt = 0;           \/\/ But leave bucket allocations alone\n-  _cnt = d._cnt;\n-  *(Hash*)(&_hash) = d._hash;\n-  *(CmpKey*)(&_cmp) = d._cmp;\n-  for( i=0; i<_size; i++ ) {\n-    bucket *b = &d._bin[i];     \/\/ Shortcut to source bucket\n-    for( uint j=0; j<b->_cnt; j++ )\n-      Insert( b->_keyvals[j+j], b->_keyvals[j+j+1] );\n-  }\n-  return *this;\n-}\n-\n","filename":"src\/hotspot\/share\/libadt\/dict.cpp","additions":17,"deletions":38,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,3 @@\n-  Dict( CmpKey cmp, Hash hash );\n-  Dict( CmpKey cmp, Hash hash, Arena *arena, int size=16 );\n+  Dict(CmpKey cmp, Hash hash);\n+  Dict(CmpKey cmp, Hash hash, Arena *arena, int size = 16);\n+  Dict(const Dict &base, Arena *arena); \/\/ Deep-copy\n@@ -64,2 +65,0 @@\n-  Dict( const Dict & );         \/\/ Deep-copy guts\n-  Dict &operator =( const Dict & );\n","filename":"src\/hotspot\/share\/libadt\/dict.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-  Dict *tdic = new (type_arena) Dict( (CmpKey)Type::cmp,(Hash)Type::uhash, type_arena, 128 );\n+  Dict *tdic = new (type_arena) Dict(*_shared_type_dict, type_arena);\n@@ -706,7 +706,0 @@\n-\n-  \/\/ Transfer the shared types.\n-  DictI i(_shared_type_dict);\n-  for( ; i.test(); ++i ) {\n-    Type* t = (Type*)i._value;\n-    tdic->Insert(t,t);  \/\/ New Type, insert into Type table\n-  }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}