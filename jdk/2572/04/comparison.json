{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.nio.file.AccessDeniedException;\n@@ -514,0 +515,16 @@\n+                    } catch (AccessDeniedException ade) {\n+                        \/\/ This can be either a temporary, or a more permanent issue.\n+                        \/\/ The lock file might be still pending deletion from a previous run\n+                        \/\/ (temporary), or the parent directory might not be accessible,\n+                        \/\/ not writable, etc..\n+                        \/\/ If we can write to the current directory, and this is a regular file,\n+                        \/\/ let's try again.\n+                        if (Files.isRegularFile(lockFilePath, LinkOption.NOFOLLOW_LINKS)\n+                            && isParentWritable(lockFilePath)) {\n+                            \/\/ Try again. If it doesn't work, then this will\n+                            \/\/ eventually ensure that we increment \"unique\" and\n+                            \/\/ use another file name.\n+                            continue;\n+                        } else {\n+                            throw ade; \/\/ no need to retry\n+                        }\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/FileHandler.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.util.logging.FileHandler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+\n+\/**\n+ * @test\n+ * @bug 8252883\n+ * @summary tests the handling of AccessDeniedException due to delay in Windows deletion.\n+ * @modules java.logging\/java.util.logging:open\n+ * @run main\/othervm FileHandlerAccessTest process 20\n+ * @run main\/othervm FileHandlerAccessTest thread 20\n+ * @author evwhelan\n+ *\/\n+\n+public class FileHandlerAccessTest {\n+    public static void main(String[] args) {\n+        if (!(args.length == 2 || args.length == 1)) {\n+            throw new IllegalArgumentException(\"Usage error: expects java FileHandlerAccessTest [process\/thread] <count>\");\n+        } else if (args.length == 2) {\n+            var type = args[0];\n+            var count = Integer.parseInt(args[1]);\n+\n+            for (var i = 0; i < count; i++) {\n+                System.out.println(\"Testing with arguments: type=\" + type + \", count=\"+count);\n+                if (type.equals(\"process\")) {\n+                    new Thread(FileHandlerAccessTest::accessProcess).start();\n+                }\n+                else if (type.equals(\"thread\")) {\n+                    new Thread(FileHandlerAccessTest::access).start();\n+                }\n+            }\n+        } else {\n+            access();\n+        }\n+    }\n+\n+    private static void access() {\n+        try {\n+            var handler = new FileHandler(\"sample%g.log\", 1048576, 2, true);\n+            handler.publish(new LogRecord(Level.SEVERE, \"TEST\"));\n+            handler.close();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void accessProcess() {\n+        final var javaHome = System.getProperty(\"java.home\");\n+        var name = Thread.currentThread().getName();\n+        BufferedReader bufferedReader = null;\n+        Process childProcess = null;\n+        final String className = new Object(){}.getClass().getEnclosingClass().getName();\n+\n+        try {\n+            ProcessBuilder processBuilder = new ProcessBuilder(javaHome + File.separator + \"bin\" + File.separator + \"java\", \"-cp\", \".\", className, \"doProcess\");\n+            processBuilder.redirectErrorStream(true);\n+            childProcess = processBuilder.start();\n+\n+            bufferedReader = new BufferedReader(new InputStreamReader(childProcess.getInputStream()));\n+            String line;\n+            while ((line = bufferedReader.readLine()) != null) {\n+                System.out.println(name + \"\\t|\" + line);\n+            }\n+\n+            int exitCode = childProcess.waitFor();\n+            if (exitCode != 0) {\n+                throw new RuntimeException(\"An error occured in the child process.\");\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (childProcess != null) {\n+                childProcess.destroy();\n+            }\n+            if (bufferedReader != null) {\n+                try {\n+                    bufferedReader.close();\n+                } catch (Exception ignored) {}\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/logging\/FileHandlerAccessTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}