{"files":[{"patch":"@@ -56,2 +56,2 @@\n-          \"Seed for IGVN stress testing (if unset, a random one is \"        \\\n-          \"generated\")                                                      \\\n+          \"Seed for randomized stress testing (if unset, a random one is \"  \\\n+          \"generated)\")                                                     \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -732,3 +732,3 @@\n-  \/\/ If IGVN is randomized for stress testing, seed random number\n-  \/\/ generation and log the seed for repeatability.\n-  if (StressIGVN) {\n+  \/\/ If LCM, GCM, or IGVN are randomized for stress testing, seed\n+  \/\/ random number generation and log the seed for repeatability.\n+  if (StressLCM || StressGCM || StressIGVN) {\n@@ -4491,1 +4491,1 @@\n-  return (os::random() & RANDOMIZED_DOMAIN_MASK) < (RANDOMIZED_DOMAIN \/ count);\n+  return (random() & RANDOMIZED_DOMAIN_MASK) < (RANDOMIZED_DOMAIN \/ count);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1142,1 +1142,1 @@\n-  static bool randomized_select(int count);\n+  bool randomized_select(int count);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1201,1 +1201,1 @@\n-        (StressGCM && Compile::randomized_select(cand_cnt)) || \/\/ Should be randomly accepted in stress mode\n+        (StressGCM && C->randomized_select(cand_cnt)) || \/\/ Should be randomly accepted in stress mode\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -635,1 +635,1 @@\n-         ((StressLCM && Compile::randomized_select(cand_cnt)) ||\n+         ((StressLCM && C->randomized_select(cand_cnt)) ||\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestCloneAccessStressGCM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestInitializingACLoadWithBadMem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestLoadBypassACWithWrongMem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/controldependency\/TestEliminatedCastPPAtPhi.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @summary Tests that using -XX:+StressIGVN without -XX:StressSeed=N generates\n+ * @summary Tests that using a stress option without -XX:StressSeed=N generates\n@@ -38,1 +38,3 @@\n- * @run driver compiler.debug.TestGenerateStressSeed\n+ * @run driver compiler.debug.TestGenerateStressSeed StressLCM\n+ * @run driver compiler.debug.TestGenerateStressSeed StressGCM\n+ * @run driver compiler.debug.TestGenerateStressSeed StressIGVN\n@@ -50,1 +52,1 @@\n-        if (args.length == 0) {\n+        if (args[0].startsWith(\"Stress\")) {\n@@ -52,0 +54,1 @@\n+            String stressOpt = args[0];\n@@ -55,1 +58,1 @@\n-                \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+StressIGVN\",\n+                \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+\" + stressOpt,\n@@ -60,1 +63,1 @@\n-        } else if (args.length > 0) {\n+        } else {\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestGenerateStressSeed.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8253765\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @summary Tests that, when compiling with StressLCM or StressGCM, using the\n+ *          same seed results in the same compilation, and using different seeds\n+ *          results in different compilations (the latter does not necessarily\n+ *          hold for all pairs of seeds). The output of PrintOptoStatistics is\n+ *          used to compare among compilations, instead of the more intuitive\n+ *          TraceOptoPipelining which prints non-deterministic memory addresses.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStressCM StressLCM\n+ * @run driver compiler.debug.TestStressCM StressGCM\n+ *\/\n+\n+public class TestStressCM {\n+\n+    static String optoStats(String stressOpt, int stressSeed) throws Exception {\n+        String className = TestStressCM.class.getName();\n+        String[] procArgs = {\n+            \"-Xcomp\", \"-XX:-TieredCompilation\",\n+            \"-XX:CompileOnly=\" + className + \"::sum\",\n+            \"-XX:+PrintOptoStatistics\", \"-XX:+\" + stressOpt,\n+            \"-XX:StressSeed=\" + stressSeed, className, \"10\"};\n+        ProcessBuilder pb  = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        return out.getStdout();\n+    }\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args[0].startsWith(\"Stress\")) {\n+            String stressOpt = args[0];\n+            Asserts.assertEQ(optoStats(stressOpt, 10), optoStats(stressOpt, 10),\n+                \"got different optimization stats for the same seed\");\n+            Asserts.assertNE(optoStats(stressOpt, 10), optoStats(stressOpt, 20),\n+                \"got the same optimization stats for different seeds\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressCM.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -36,1 +36,2 @@\n- *          traces.\n+ *          traces (the latter does not necessarily hold for all pairs of\n+ *          seeds).\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressIGVN.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopUnswitchingLostCastDependency.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestPredicateLostDependency.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRangeCheckPredicatesControl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/compiler\/membars\/DekkerTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestExpandedWBLostNullCheckDep.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key stress randomness\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestWriteBarrierClearControl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}