{"files":[{"patch":"@@ -870,3 +870,1 @@\n-    \/\/ -XX:ParallelGCThreads expects that a value of max_juint+1 (4294967296)\n-    \/\/ will set ParallelGCThreads to 0.  So, allow values of max_juint+1.\n-    if (v > (julong)max_juint + 1) {\n+    if (v > max_juint) {\n@@ -879,12 +877,11 @@\n-    if (!is_neg && v > (uintx)(max_intx)) {\n-      return false;  \/\/ Value exceeds max_intx.\n-    }\n-    if (is_neg && v > (uintx)(min_intx)) {\n-      return false;  \/\/ Value is less than min_intx.\n-    }\n-\n-    \/\/ intx_v will already be negative for extreme specified values such as\n-    \/\/ -9223372036854775808.  Negating intx_v for such values will erroneously\n-    \/\/ make them positive.\n-    if (is_neg && intx_v > 0) {\n-      intx_v = -intx_v;\n+    if (is_neg) {\n+      if (intx_v != min_intx) {\n+        intx_v = - intx_v;\n+        if (intx_v > 0) {\n+          return false; \/\/ underflow\n+        }\n+      }\n+    } else {\n+      if (intx_v < 0) {\n+        return false; \/\/ overflow\n+      }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -240,0 +240,1 @@\n+  friend class LargeOptionsTest;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"runtime\/arguments.hpp\"\n+#include \"runtime\/flags\/jvmFlag.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"unittest.hpp\"\n+\n+class LargeOptionsTest : public ::testing::Test {\n+public:\n+  static bool test_option_value(const char* option, intx value) {\n+    char buffer[100];\n+    UnlockDiagnosticVMOptions = true;\n+    os::snprintf(buffer, 100, \"%s=\" INTX_FORMAT, option, value);\n+    return Arguments::parse_argument(buffer, JVMFlagOrigin::COMMAND_LINE);\n+  }\n+\n+  static bool test_option_value(const char* option) {\n+    UnlockDiagnosticVMOptions = true;\n+    return Arguments::parse_argument(option, JVMFlagOrigin::COMMAND_LINE);\n+  }\n+};\n+\n+\n+\/\/ CompilerDirectivesLimit is a diagnostic int option.\n+TEST_VM(LARGE_OPTION, large_ints) {\n+  for (intx x = max_jint - 1; x <= (intx)max_jint + 1; x++) {\n+    bool result = LargeOptionsTest::test_option_value(\"CompilerDirectivesLimit\", x);\n+    if (x > max_jint) {\n+      ASSERT_FALSE(result);\n+    } else {\n+      ASSERT_TRUE(result);\n+      ASSERT_EQ(CompilerDirectivesLimit, x);\n+    }\n+  }\n+}\n+\n+\n+TEST_VM(LARGE_OPTION, small_ints) {\n+  for (intx x = min_jint + 1; x >= (intx)min_jint - 1; x--) {\n+    bool result = LargeOptionsTest::test_option_value(\"CompilerDirectivesLimit\", x);\n+    if (x < min_jint) {\n+      ASSERT_FALSE(result);\n+    } else {\n+      ASSERT_TRUE(result);\n+      ASSERT_EQ(CompilerDirectivesLimit, x);\n+    }\n+  }\n+}\n+\n+\n+TEST_VM(LARGE_OPTION, large_int_overflow) { \/\/ Test 0x100000000\n+  ASSERT_FALSE(LargeOptionsTest::test_option_value(\"CompilerDirectivesLimit\", 4294967296));\n+}\n+\n+\n+\/\/ HandshakeTimeout is a diagnostic uint option.\n+TEST_VM(LARGE_OPTION, large_uints) {\n+  for (uintx x = max_juint - 1; x <= (uintx)max_juint + 1; x++) {\n+    bool result = LargeOptionsTest::test_option_value(\"HandshakeTimeout\", x);\n+    if (x <= max_juint) {\n+      ASSERT_TRUE(result);\n+      ASSERT_EQ(HandshakeTimeout, x);\n+    } else {\n+      ASSERT_FALSE(result);\n+    }\n+  }\n+}\n+\n+\n+\/\/ MaxJNILocalCapacity is an intx option.\n+TEST_VM(LARGE_OPTION, large_intxs) {\n+  \/\/ max_intx + 1 equals min_intx!\n+  for (julong x = max_intx - 1; x <= (julong)max_intx + 1; x++) {\n+    ASSERT_TRUE(LargeOptionsTest::test_option_value(\"MaxJNILocalCapacity\", x));\n+    ASSERT_EQ((julong)MaxJNILocalCapacity, x);\n+  }\n+}\n+\n+\n+TEST_VM(LARGE_OPTION, small_intxs) {\n+  ASSERT_TRUE(LargeOptionsTest::test_option_value(\"MaxJNILocalCapacity\", min_intx + 1));\n+  ASSERT_EQ(MaxJNILocalCapacity, -9223372036854775807);\n+  ASSERT_TRUE(LargeOptionsTest::test_option_value(\"MaxJNILocalCapacity\", min_intx));\n+  ASSERT_EQ(MaxJNILocalCapacity, min_intx);\n+  \/\/ Test value that's less than min_intx (-0x8000000000000001).\n+  ASSERT_FALSE(LargeOptionsTest::test_option_value(\"MaxJNILocalCapacity=-9223372036854775809\"));\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_largeOptions.cpp","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -118,9 +118,6 @@\n-    \/\/ and setting ParallelGCThreads=4294967296 should give back 0. (SerialGC is ok with ParallelGCThreads=0)\n-    for (long i = 4294967295L; i <= 4294967296L; i++) {\n-      long count = getParallelGCThreadCount(\n-          \"-XX:+UseSerialGC\",\n-          \"-XX:ParallelGCThreads=\" + i,\n-          \"-XX:+PrintFlagsFinal\",\n-          \"-version\");\n-      Asserts.assertEQ(count, i % 4294967296L, \"Specifying ParallelGCThreads=\" + i + \" does not set the thread count properly!\");\n-    }\n+    long count = getParallelGCThreadCount(\n+        \"-XX:+UseSerialGC\",\n+        \"-XX:ParallelGCThreads=4294967295\",\n+        \"-XX:+PrintFlagsFinal\",\n+        \"-version\");\n+    Asserts.assertEQ(count, 4294967295L, \"Specifying ParallelGCThreads=4294967295 does not set the thread count properly!\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,127 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8281472\n- * @summary Test that values for numeric options fail if too large or too small.\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver TestValueTruncation\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class TestValueTruncation {\n-\n-    public static void main(String args[]) throws Exception {\n-      \/\/ Test some large valid values for int, uint, and intx options.\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:+PrintFlagsFinal\", \"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:CompilerDirectivesLimit=2147483647\",       \/\/ 0x7fffffff\n-          \"-XX:HandshakeTimeout=4294967295\",              \/\/ 0xffffffff\n-          \"-XX:MaxJNILocalCapacity=9223372036854775807\",  \/\/ 0x7fffffffffffffff\n-          \"-version\");\n-      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldMatch(\"CompilerDirectivesLimit += 2147483647\");\n-      output.shouldMatch(\"HandshakeTimeout += 4294967295\");\n-      output.shouldMatch(\"MaxJNILocalCapacity += 9223372036854775807\");\n-      output.shouldHaveExitValue(0);\n-\n-      \/\/ Test an int option with value 0x100000000.  It should fail.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:CompilerDirectivesLimit=4294967296\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=4294967296'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-\n-      \/\/ Test an int option with value max_int + 1.  It should fail.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:CompilerDirectivesLimit=2147483648\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=2147483648'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-\n-      \/\/ Test an int option with value min_int.  It should succeed.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:+PrintFlagsFinal\", \"-XX:CompilerDirectivesLimit=-2147483648\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldMatch(\"CompilerDirectivesLimit += -2147483648\");\n-      output.shouldHaveExitValue(0);\n-\n-      \/\/ Test an int option with value min_int - 1.  It should fail.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:CompilerDirectivesLimit=-2147483649\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=-2147483649'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-\n-      \/\/ Test an uint option with value 0x100000000.  It should return 0.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:+PrintFlagsFinal\", \"-XX:HandshakeTimeout=4294967296\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldMatch(\"HandshakeTimeout += 0\");\n-      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldNotContain(\"Improperly specified VM option\");\n-      output.shouldHaveExitValue(0);\n-\n-      \/\/ Test an uint option with value 0x100000001.  It should fail.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:HandshakeTimeout=4294967297\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'HandshakeTimeout=4294967297'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-\n-      \/\/ Test that an intx option with a value of min_jint succeeds.\n-      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+PrintFlagsFinal\",\n-          \"-XX:MaxJNILocalCapacity=-9223372036854775808\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldMatch(\"MaxJNILocalCapacity += -9223372036854775808\");\n-      output.shouldHaveExitValue(0);\n-\n-      \/\/ Test that an intx option with a value < min_jint fails.\n-      pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:MaxJNILocalCapacity=-9223372036854775809\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'MaxJNILocalCapacity=-9223372036854775809'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-\n-      \/\/ Test that an intx option with a value > max_jint fails.\n-      pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:MaxJNILocalCapacity=9223372036854775808\", \"-version\");\n-      output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"Improperly specified VM option 'MaxJNILocalCapacity=9223372036854775808'\");\n-      output.shouldContain(\"Could not create the Java Virtual Machine\");\n-      output.shouldHaveExitValue(1);\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestValueTruncation.java","additions":0,"deletions":127,"binary":false,"changes":127,"status":"deleted"}]}