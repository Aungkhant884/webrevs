{"files":[{"patch":"@@ -865,0 +865,3 @@\n+    if ((!is_neg && v > max_jint) || (is_neg && -(intx)v < min_jint)) {\n+      return false;\n+    }\n@@ -867,0 +870,5 @@\n+    \/\/ -XX:ParallelGCThreads expects that a value of max_juint+1 (4294967296)\n+    \/\/ will set ParallelGCThreads to 0.  So, allow values of max_juint+1.\n+    if (v > (julong)max_juint + 1) {\n+      return false;\n+    }\n@@ -871,1 +879,11 @@\n-    if (is_neg) {\n+    if (!is_neg && v > (uintx)(max_intx)) {\n+      return false;  \/\/ Value exceeds max_intx.\n+    }\n+    if (is_neg && v > (uintx)(min_intx)) {\n+      return false;  \/\/ Value is less than min_intx.\n+    }\n+\n+    \/\/ intx_v will already be negative for extreme specified values such as\n+    \/\/ -9223372036854775808.  Negating intx_v for such values will erroneously\n+    \/\/ make them positive.\n+    if (is_neg && intx_v > 0) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281472\n+ * @summary Test that values for numeric options fail if too large or too small.\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestValueTruncation\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestValueTruncation {\n+\n+    public static void main(String args[]) throws Exception {\n+      \/\/ Test some large valid values for int, uint, and intx options.\n+      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:+PrintFlagsFinal\", \"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:CompilerDirectivesLimit=2147483647\",       \/\/ 0x7fffffff\n+          \"-XX:HandshakeTimeout=4294967295\",              \/\/ 0xffffffff\n+          \"-XX:MaxJNILocalCapacity=9223372036854775807\",  \/\/ 0x7fffffffffffffff\n+          \"-version\");\n+      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldMatch(\"CompilerDirectivesLimit += 2147483647\");\n+      output.shouldMatch(\"HandshakeTimeout += 4294967295\");\n+      output.shouldMatch(\"MaxJNILocalCapacity += 9223372036854775807\");\n+      output.shouldHaveExitValue(0);\n+\n+      \/\/ Test an int option with value 0x100000000.  It should fail.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:CompilerDirectivesLimit=4294967296\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=4294967296'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+\n+      \/\/ Test an int option with value max_int + 1.  It should fail.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:CompilerDirectivesLimit=2147483648\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=2147483648'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+\n+      \/\/ Test an int option with value min_int.  It should succeed.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:+PrintFlagsFinal\", \"-XX:CompilerDirectivesLimit=-2147483648\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldMatch(\"CompilerDirectivesLimit += -2147483648\");\n+      output.shouldHaveExitValue(0);\n+\n+      \/\/ Test an int option with value min_int - 1.  It should fail.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:CompilerDirectivesLimit=-2147483649\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'CompilerDirectivesLimit=-2147483649'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+\n+      \/\/ Test an uint option with value 0x100000000.  It should return 0.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:+PrintFlagsFinal\", \"-XX:HandshakeTimeout=4294967296\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldMatch(\"HandshakeTimeout += 0\");\n+      output.shouldNotContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldNotContain(\"Improperly specified VM option\");\n+      output.shouldHaveExitValue(0);\n+\n+      \/\/ Test an uint option with value 0x100000001.  It should fail.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:HandshakeTimeout=4294967297\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'HandshakeTimeout=4294967297'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+\n+      \/\/ Test that an intx option with a value of min_jint succeeds.\n+      pb = ProcessTools.createJavaProcessBuilder(\"-XX:+PrintFlagsFinal\",\n+          \"-XX:MaxJNILocalCapacity=-9223372036854775808\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldMatch(\"MaxJNILocalCapacity += -9223372036854775808\");\n+      output.shouldHaveExitValue(0);\n+\n+      \/\/ Test that an intx option with a value < min_jint fails.\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:MaxJNILocalCapacity=-9223372036854775809\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'MaxJNILocalCapacity=-9223372036854775809'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+\n+      \/\/ Test that an intx option with a value > max_jint fails.\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:MaxJNILocalCapacity=9223372036854775808\", \"-version\");\n+      output = new OutputAnalyzer(pb.start());\n+      output.shouldContain(\"Improperly specified VM option 'MaxJNILocalCapacity=9223372036854775808'\");\n+      output.shouldContain(\"Could not create the Java Virtual Machine\");\n+      output.shouldHaveExitValue(1);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestValueTruncation.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,1 +294,1 @@\n-                    \"-XX:StressSeed=\" + Math.abs(rng.nextLong()),\n+                    \"-XX:StressSeed=\" + Math.abs(rng.nextInt()),\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}