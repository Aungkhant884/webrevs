{"files":[{"patch":"@@ -55,0 +55,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -588,0 +589,10 @@\n+  const char* val = Arguments::PropertyList_get_value(Arguments::system_properties(), \"test.jvmci.lookupTypeException\");\n+  if (val != nullptr) {\n+    if (strstr(val, \"<trace>\") != nullptr) {\n+      tty->print_cr(\"CompilerToVM.lookupType: %s\", str);\n+    } else if (strstr(val, str) != nullptr) {\n+      THROW_MSG_0(vmSymbols::java_lang_Exception(),\n+                  err_msg(\"lookupTypeException: %s\", str));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -436,2 +436,1 @@\n-  int encode(JavaThread* THREAD, jlong buffer, int buffer_size) {\n-    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n+  bool handle_pending_exception(JavaThread* THREAD, jlong buffer, int buffer_size) {\n@@ -454,0 +453,8 @@\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  int encode(JavaThread* THREAD, jlong buffer, int buffer_size) {\n+    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n+    if (handle_pending_exception(THREAD, buffer, buffer_size)) {\n@@ -465,0 +472,3 @@\n+    if (handle_pending_exception(THREAD, buffer, buffer_size)) {\n+      return 0;\n+    }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.internal.misc.VM;\n+\n@@ -59,0 +61,1 @@\n+        maybeFailClinit();\n@@ -70,0 +73,16 @@\n+    \/**\n+     * Helper to test exception translation.\n+     *\/\n+    private static void maybeFailClinit() {\n+        String className = VM.getSavedProperty(\"test.jvmci.TranslatedException.clinit.throw\");\n+        if (className != null) {\n+            try {\n+                throw (Throwable) Class.forName(className).getDeclaredConstructor().newInstance();\n+            } catch (RuntimeException | Error e) {\n+                throw e;\n+            } catch (Throwable e) {\n+                throw new InternalError(e);\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/TranslatedException.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}