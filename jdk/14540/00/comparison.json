{"files":[{"patch":"@@ -985,2 +985,5 @@\n-                                         size_t max_alloc_words) {\n-  if (requestor == this || _promotion_failed) {\n+                                          size_t max_alloc_words) {\n+  assert(requestor != this, \"precondition\");\n+  assert(GenCollectedHeap::heap()->is_old_gen(requestor), \"We should not call our own generation\");\n+\n+  if (_promotion_failed) {\n@@ -989,1 +992,0 @@\n-  assert(GenCollectedHeap::heap()->is_old_gen(requestor), \"We should not call our own generation\");\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -251,3 +251,3 @@\n-  \/\/ For non-youngest collection, the DefNewGeneration can contribute\n-  \/\/ \"to-space\".\n-  virtual void contribute_scratch(ScratchBlock*& list, Generation* requestor,\n+  \/\/ For Old collection (part of running Full GC), the DefNewGeneration can\n+  \/\/ contribute \"to-space\" as the scratch space.\n+  void contribute_scratch(ScratchBlock*& list, Generation* requestor,\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -947,2 +947,3 @@\n-  _young_gen->contribute_scratch(res, requestor, max_alloc_words);\n-  _old_gen->contribute_scratch(res, requestor, max_alloc_words);\n+  \/\/ Workaround to get the precise type\n+  DefNewGeneration* cast_young_gen = (DefNewGeneration*)_young_gen;\n+  cast_young_gen->contribute_scratch(res, requestor, max_alloc_words);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -329,12 +329,0 @@\n-  \/\/ The \"requestor\" generation is performing some garbage collection\n-  \/\/ action for which it would be useful to have scratch space.  If\n-  \/\/ the target is not the requestor, no gc actions will be required\n-  \/\/ of the target.  The requestor promises to allocate no more than\n-  \/\/ \"max_alloc_words\" in the target generation (via promotion say,\n-  \/\/ if the requestor is a young generation and the target is older).\n-  \/\/ If the target generation can provide any scratch space, it adds\n-  \/\/ it to \"list\", leaving \"list\" pointing to the head of the\n-  \/\/ augmented list.  The default is to offer no space.\n-  virtual void contribute_scratch(ScratchBlock*& list, Generation* requestor,\n-                                  size_t max_alloc_words) {}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}