[{"commit":{"message":"Merge branch 'openjdk:master' into indexofchar"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"c5d423474daa9840990c7af695d432f5d0e80154"},{"commit":{"message":"8268363: AArch64: Implement string_indexof_char intrinsic in SVE\n\nThis patch implements string_indexof_char intrinsic in SVE for both\nUTF-16 and Latin-8 variants. In the current underneath implementation,\nthere is only 4 and 8 characters are compared at a time in UTF-16 and\nLatin-8 respectively. In this patch, we adopt SVE to vectorize this\nintrinsic so that a wider comparison can be performed each time.\n\nI've run [1] with this patch on an SVE machine, and the performance of\nStringIndexOfChar.latin1_mixed_char (length=65) and\nStringIndexOfChar.utf16_mixed_char (length=65) are improved significantly,\nwhile no visible regression for other cases with shorter strings.\n(length=7, 8, 15, 16 and 32)\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/test\/micro\/org\/openjdk\/bench\/java\/lang\/StringIndexOfChar.java"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"623e519692c28060bb590af525cf040af808f708"}]