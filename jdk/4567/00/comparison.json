{"files":[{"patch":"@@ -5460,0 +5460,9 @@\n+operand pReg()\n+%{\n+  constraint(ALLOC_IN_RC(pr_reg));\n+  match(RegVectMask);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -16630,2 +16639,2 @@\n-                              iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n-                              iRegINoSp tmp3, rFlagsReg cr)\n+                             iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n+                             iRegINoSp tmp3, rFlagsReg cr)\n@@ -16634,1 +16643,1 @@\n-  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U);\n+  predicate((UseSVE == 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n@@ -16648,0 +16657,18 @@\n+instruct string_indexof_char_sve(iRegP_R1 str1, iRegI_R2 cnt1, iRegI_R3 ch,\n+                                 iRegI_R0 result, vReg ztmp1, vReg ztmp2,\n+                                 pRegGov pgtmp, pReg ptmp, rFlagsReg cr)\n+%{\n+  match(Set result (StrIndexOfChar (Binary str1 cnt1) ch));\n+  predicate((UseSVE > 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n+  effect(TEMP ztmp1, TEMP ztmp2, TEMP pgtmp, TEMP ptmp, KILL cr);\n+\n+  format %{ \"StringUTF16 IndexOf char[] $str1,$cnt1,$ch -> $result # use sve\" %}\n+\n+  ins_encode %{\n+    __ string_indexof_char_sve($str1$$Register, $cnt1$$Register, $ch$$Register, $result$$Register,\n+                               as_FloatRegister($ztmp1$$reg), as_FloatRegister($ztmp2$$reg),\n+                               as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg), false \/* isL *\/);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n@@ -16653,1 +16680,1 @@\n-  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L);\n+  predicate((UseSVE == 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n@@ -16661,2 +16688,20 @@\n-                           $result$$Register, $tmp1$$Register, $tmp2$$Register,\n-                           $tmp3$$Register);\n+                            $result$$Register, $tmp1$$Register, $tmp2$$Register,\n+                            $tmp3$$Register);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n+instruct stringL_indexof_char_sve(iRegP_R1 str1, iRegI_R2 cnt1, iRegI_R3 ch,\n+                                  iRegI_R0 result, vReg ztmp1, vReg ztmp2,\n+                                  pRegGov pgtmp, pReg ptmp, rFlagsReg cr)\n+%{\n+  match(Set result (StrIndexOfChar (Binary str1 cnt1) ch));\n+  predicate((UseSVE > 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n+  effect(TEMP ztmp1, TEMP ztmp2, TEMP pgtmp, TEMP ptmp, KILL cr);\n+\n+  format %{ \"StringLatin1 IndexOf char[] $str1,$cnt1,$ch -> $result # use sve\" %}\n+\n+  ins_encode %{\n+    __ string_indexof_char_sve($str1$$Register, $cnt1$$Register, $ch$$Register, $result$$Register,\n+                               as_FloatRegister($ztmp1$$reg), as_FloatRegister($ztmp2$$reg),\n+                               as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg), true \/* isL *\/);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":51,"deletions":6,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -3248,0 +3248,58 @@\n+\/\/ SVE integer compare vector (wide-element variants are not included)\n+#define INSN(NAME, cond)                                                                          \\\n+  void NAME(PRegister Pd, SIMD_RegVariant T, PRegister Pg, FloatRegister Zn, FloatRegister Zm)  { \\\n+    starti;                                                                                       \\\n+    assert(T != Q, \"invalid size\");                                                               \\\n+    f(0b00100100, 31, 24), f(T, 23, 22), f(0, 21), rf(Zm, 16), f((cond >> 1) & 7, 15, 13);        \\\n+    pgrf(Pg, 10), rf(Zn, 5), f(cond & 1, 4), prf(Pd, 0);                                          \\\n+  }\n+\n+  INSN(sve_cmpeq, 0b1010);\n+  INSN(sve_cmpne, 0b1011);\n+  INSN(sve_cmpge, 0b1000);\n+  INSN(sve_cmpgt, 0b1001);\n+#undef INSN\n+\n+\/\/ SVE 64-bit while[cond] (32-bit variants are not included)\n+#define INSN(NAME, decode)                                                \\\n+  void NAME(PRegister Pd, SIMD_RegVariant T, Register Rn, Register Rm) {  \\\n+    starti;                                                               \\\n+    assert(T != Q, \"invalid register variant\");                           \\\n+    f(0b00100101, 31, 24), f(T, 23, 22), f(1, 21),                        \\\n+    zrf(Rm, 16), f(0, 15, 13), f(1, 12), f(decode >> 1, 11, 10),          \\\n+    zrf(Rn, 5), f(decode & 1, 4), prf(Pd, 0);                             \\\n+  }\n+\n+  INSN(sve_whilelt, 0b010);\n+  INSN(sve_whilele, 0b011);\n+  INSN(sve_whilelo, 0b110);\n+  INSN(sve_whilels, 0b111);\n+#undef INSN\n+\n+  void sve_brka(PRegister pd, PRegister pg, PRegister pn, bool isMerge) {\n+    starti;\n+    f(0b00100101, 31, 24), f(0b00, 23, 22), f(0b01000001, 21, 14),\n+    prf(pg, 10), f(0b0, 9), prf(pn, 5), f(isMerge ? 1 : 0, 4), prf(pd, 0);\n+  }\n+\n+\/\/ SVE cnt[b|h|w|d]\n+#define INSN(NAME, TYPE)                                                             \\\n+  void NAME(Register Xdn, unsigned imm4 = 1, int pattern = 0b11111) {                \\\n+    starti;                                                                          \\\n+    f(0b00000100, 31, 24), f(TYPE, 23, 22), f(0b10, 21, 20);                         \\\n+    f(imm4 - 1, 19, 16), f(0b11100, 15, 11), f(0, 10), f(pattern, 9, 5), rf(Xdn, 0); \\\n+  }\n+\n+  INSN(sve_cntb, B);\n+  INSN(sve_cnth, H);\n+  INSN(sve_cntw, S);\n+  INSN(sve_cntd, D);\n+#undef INSN\n+\n+  void sve_incp(const Register rd, SIMD_RegVariant T, PRegister pg) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    f(0b00100101, 31, 24), f(T, 23, 22), f(0b1011001000100, 21, 9),\n+    prf(pg, 5), rf(rd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -543,0 +543,69 @@\n+void C2_MacroAssembler::string_indexof_char_sve(Register str1, Register cnt1,\n+                                                Register ch, Register result,\n+                                                FloatRegister ztmp1,\n+                                                FloatRegister ztmp2,\n+                                                PRegister tmp_pg,\n+                                                PRegister tmp_pdn, bool isL)\n+{\n+  \/\/ Note that `tmp_pdn` should *NOT* be used as governing predicate register.\n+  assert(tmp_pg->is_governing(),\n+         \"this register has to be a governing predicate register\");\n+\n+  Label LOOP, MATCH, DONE, NOMATCH;\n+  Register vec_len = rscratch1;\n+  Register idx = rscratch2;\n+\n+  SIMD_RegVariant T = (isL == true) ? B : H;\n+\n+  cbz(cnt1, NOMATCH);\n+\n+  \/\/ Assign the particular char throughout the vector.\n+  sve_dup(ztmp2, T, ch);\n+  if (isL) {\n+    sve_cntb(vec_len);\n+  } else {\n+    sve_cnth(vec_len);\n+  }\n+  mov(idx, 0);\n+\n+  \/\/ Generate a predicate to control the reading of input string.\n+  sve_whilelt(tmp_pg, T, idx, cnt1);\n+\n+  BIND(LOOP);\n+    \/\/ Read a vector of 8- or 16-bit data depending on the string type. Note\n+    \/\/ that inactive elements indicated by the predicate register won't cause\n+    \/\/ a data read from memory to the destination vector.\n+    if (isL) {\n+      sve_ld1b(ztmp1, T, tmp_pg, Address(str1, idx));\n+    } else {\n+      sve_ld1h(ztmp1, T, tmp_pg, Address(str1, idx, Address::lsl(1)));\n+    }\n+    add(idx, idx, vec_len);\n+\n+    \/\/ Perform the comparison. An element of the destination predicate is set\n+    \/\/ to active if the particular char is matched.\n+    sve_cmpeq(tmp_pdn, T, tmp_pg, ztmp1, ztmp2);\n+\n+    \/\/ Branch if the particular char is found.\n+    br(NE, MATCH);\n+\n+    sve_whilelt(tmp_pg, T, idx, cnt1);\n+\n+    \/\/ Loop back if the particular char not found.\n+    br(MI, LOOP);\n+\n+  BIND(NOMATCH);\n+    mov(result, -1);\n+    b(DONE);\n+\n+  BIND(MATCH);\n+    \/\/ Undo the index increment.\n+    sub(idx, idx, vec_len);\n+\n+    \/\/ Crop the vector to find its location.\n+    sve_brka(tmp_pdn, tmp_pg, tmp_pdn, false \/* isMerge *\/);\n+    add(result, idx, -1);\n+    sve_incp(result, T, tmp_pdn);\n+  BIND(DONE);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -49,2 +49,7 @@\n-                           Register ch, Register result,\n-                           Register tmp1, Register tmp2, Register tmp3);\n+                            Register ch, Register result,\n+                            Register tmp1, Register tmp2, Register tmp3);\n+\n+  void string_indexof_char_sve(Register str1, Register cnt1,\n+                               Register ch, Register result,\n+                               FloatRegister ztmp1, FloatRegister ztmp2,\n+                               PRegister pgtmp, PRegister ptmp, bool isL);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,0 +245,1 @@\n+    number_of_governing_registers = 8,\n@@ -260,0 +261,1 @@\n+  bool  is_governing() const      { return 0 <= (intptr_t)this && (intptr_t)this < number_of_governing_registers; }\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -911,1 +911,8 @@\n-           self._merge = \"\/m\"\n+           assert len(args) > 2, \"Must specify predicate type\"\n+           for arg in args[2:]:\n+              if arg == 'm':\n+                 self._merge = \"\/m\"\n+              elif arg == 'z':\n+                 self._merge = \"\/z\"\n+              else:\n+                 assert arg == \"dn\", \"Unknown predicate type\"\n@@ -914,1 +921,1 @@\n-           self._merge =\"\"\n+           self._merge = \"\"\n@@ -924,0 +931,2 @@\n+\n+        self._dnm = None\n@@ -925,3 +934,4 @@\n-            self._dnm = args[2]\n-        else:\n-            self._dnm = None\n+           for arg in args[2:]:\n+             if arg == \"dn\":\n+               self._dnm = arg\n+\n@@ -1546,0 +1556,2 @@\n+                        [\"dup\",    \"__ sve_dup(z4, __ B, r3);\",                          \"dup\\tz4.b, w3\"],\n+                        [\"dup\",    \"__ sve_dup(z14, __ H, r22);\",                        \"dup\\tz14.h, w22\"],\n@@ -1561,0 +1573,11 @@\n+                        [\"cntb\",   \"__ sve_cntb(r9);\",                                   \"cntb\\tx9\"],\n+                        [\"cnth\",   \"__ sve_cnth(r10);\",                                  \"cnth\\tx10\"],\n+                        [\"cntw\",   \"__ sve_cntw(r11);\",                                  \"cntw\\tx11\"],\n+                        [\"cntd\",   \"__ sve_cntd(r12);\",                                  \"cntd\\tx12\"],\n+                        [\"brka\",   \"__ sve_brka(p2, p0, p2, false);\",                    \"brka\\tp2.b, p0\/z, p2.b\"],\n+                        [\"brka\",   \"__ sve_brka(p1, p2, p3, true);\",                     \"brka\\tp1.b, p2\/m, p3.b\"],\n+                        [\"incp\",   \"__ sve_incp(r0, __ B, p2);\",                         \"incp\\tx0, p2.b\"],\n+                        [\"whilelt\",   \"__ sve_whilelt(p0, __ B, r1, r28);\",              \"whilelt\\tp0.b, x1, x28\"],\n+                        [\"whilele\",   \"__ sve_whilele(p2, __ H, r11, r8);\",              \"whilele\\tp2.h, x11, x8\"],\n+                        [\"whilelo\",   \"__ sve_whilelo(p3, __ S, r7, r2);\",               \"whilelo\\tp3.s, x7, x2\"],\n+                        [\"whilels\",   \"__ sve_whilels(p4, __ D, r17, r10);\",             \"whilels\\tp4.d, x17, x10\"],\n@@ -1596,30 +1619,30 @@\n-                       [\"abs\", \"ZPZ\"],\n-                       [\"add\", \"ZPZ\", \"dn\"],\n-                       [\"asr\", \"ZPZ\", \"dn\"],\n-                       [\"cnt\", \"ZPZ\"],\n-                       [\"lsl\", \"ZPZ\", \"dn\"],\n-                       [\"lsr\", \"ZPZ\", \"dn\"],\n-                       [\"mul\", \"ZPZ\", \"dn\"],\n-                       [\"neg\", \"ZPZ\"],\n-                       [\"not\", \"ZPZ\"],\n-                       [\"smax\", \"ZPZ\", \"dn\"],\n-                       [\"smin\", \"ZPZ\", \"dn\"],\n-                       [\"sub\", \"ZPZ\", \"dn\"],\n-                       [\"fabs\", \"ZPZ\"],\n-                       [\"fadd\", \"ZPZ\", \"dn\"],\n-                       [\"fdiv\", \"ZPZ\", \"dn\"],\n-                       [\"fmax\", \"ZPZ\", \"dn\"],\n-                       [\"fmin\", \"ZPZ\", \"dn\"],\n-                       [\"fmul\", \"ZPZ\", \"dn\"],\n-                       [\"fneg\", \"ZPZ\"],\n-                       [\"frintm\", \"ZPZ\"],\n-                       [\"frintn\", \"ZPZ\"],\n-                       [\"frintp\", \"ZPZ\"],\n-                       [\"fsqrt\", \"ZPZ\"],\n-                       [\"fsub\", \"ZPZ\", \"dn\"],\n-                       [\"fmla\", \"ZPZZ\"],\n-                       [\"fmls\", \"ZPZZ\"],\n-                       [\"fnmla\", \"ZPZZ\"],\n-                       [\"fnmls\", \"ZPZZ\"],\n-                       [\"mla\", \"ZPZZ\"],\n-                       [\"mls\", \"ZPZZ\"],\n+                       [\"abs\", \"ZPZ\", \"m\"],\n+                       [\"add\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"asr\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"cnt\", \"ZPZ\", \"m\"],\n+                       [\"lsl\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"lsr\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"mul\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"neg\", \"ZPZ\", \"m\"],\n+                       [\"not\", \"ZPZ\", \"m\"],\n+                       [\"smax\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"smin\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"sub\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fabs\", \"ZPZ\", \"m\"],\n+                       [\"fadd\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fdiv\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fmax\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fmin\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fmul\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fneg\", \"ZPZ\", \"m\"],\n+                       [\"frintm\", \"ZPZ\", \"m\"],\n+                       [\"frintn\", \"ZPZ\", \"m\"],\n+                       [\"frintp\", \"ZPZ\", \"m\"],\n+                       [\"fsqrt\", \"ZPZ\", \"m\"],\n+                       [\"fsub\", \"ZPZ\", \"m\", \"dn\"],\n+                       [\"fmla\", \"ZPZZ\", \"m\"],\n+                       [\"fmls\", \"ZPZZ\", \"m\"],\n+                       [\"fnmla\", \"ZPZZ\", \"m\"],\n+                       [\"fnmls\", \"ZPZZ\", \"m\"],\n+                       [\"mla\", \"ZPZZ\", \"m\"],\n+                       [\"mls\", \"ZPZZ\", \"m\"],\n@@ -1630,0 +1653,4 @@\n+                       [\"cmpeq\", \"PPZZ\", \"z\"],\n+                       [\"cmpge\", \"PPZZ\", \"z\"],\n+                       [\"cmpgt\", \"PPZZ\", \"z\"],\n+                       [\"cmpne\", \"PPZZ\", \"z\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":62,"deletions":35,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -745,0 +745,2 @@\n+    __ sve_dup(z4, __ B, r3);                          \/\/       dup     z4.b, w3\n+    __ sve_dup(z14, __ H, r22);                        \/\/       dup     z14.h, w22\n@@ -760,0 +762,11 @@\n+    __ sve_cntb(r9);                                   \/\/       cntb    x9\n+    __ sve_cnth(r10);                                  \/\/       cnth    x10\n+    __ sve_cntw(r11);                                  \/\/       cntw    x11\n+    __ sve_cntd(r12);                                  \/\/       cntd    x12\n+    __ sve_brka(p2, p0, p2, false);                    \/\/       brka    p2.b, p0\/z, p2.b\n+    __ sve_brka(p1, p2, p3, true);                     \/\/       brka    p1.b, p2\/m, p3.b\n+    __ sve_incp(r0, __ B, p2);                         \/\/       incp    x0, p2.b\n+    __ sve_whilelt(p0, __ B, r1, r28);                 \/\/       whilelt p0.b, x1, x28\n+    __ sve_whilele(p2, __ H, r11, r8);                 \/\/       whilele p2.h, x11, x8\n+    __ sve_whilelo(p3, __ S, r7, r2);                  \/\/       whilelo p3.s, x7, x2\n+    __ sve_whilels(p4, __ D, r17, r10);                \/\/       whilels p4.d, x17, x10\n@@ -935,0 +948,4 @@\n+    __ sve_cmpeq(p5, __ S, p6, z5, z19);               \/\/       cmpeq   p5.s, p6\/z, z5.s, z19.s\n+    __ sve_cmpge(p4, __ S, p5, z16, z29);              \/\/       cmpge   p4.s, p5\/z, z16.s, z29.s\n+    __ sve_cmpgt(p5, __ D, p0, z4, z17);               \/\/       cmpgt   p5.d, p0\/z, z4.d, z17.d\n+    __ sve_cmpne(p1, __ D, p5, z4, z23);               \/\/       cmpne   p1.d, p5\/z, z4.d, z23.d\n@@ -937,9 +954,9 @@\n-    __ sve_andv(v21, __ S, p6, z5);                    \/\/       andv s21, p6, z5.s\n-    __ sve_orv(v21, __ S, p4, z22);                    \/\/       orv s21, p4, z22.s\n-    __ sve_eorv(v29, __ B, p5, z19);                   \/\/       eorv b29, p5, z19.b\n-    __ sve_smaxv(v4, __ B, p4, z23);                   \/\/       smaxv b4, p4, z23.b\n-    __ sve_sminv(v19, __ D, p1, z23);                  \/\/       sminv d19, p1, z23.d\n-    __ sve_fminv(v19, __ S, p0, z8);                   \/\/       fminv s19, p0, z8.s\n-    __ sve_fmaxv(v14, __ D, p6, z17);                  \/\/       fmaxv d14, p6, z17.d\n-    __ sve_fadda(v21, __ S, p1, z30);                  \/\/       fadda s21, p1, s21, z30.s\n-    __ sve_uaddv(v10, __ B, p5, z12);                  \/\/       uaddv d10, p5, z12.b\n+    __ sve_andv(v19, __ H, p0, z8);                    \/\/       andv h19, p0, z8.h\n+    __ sve_orv(v14, __ D, p6, z17);                    \/\/       orv d14, p6, z17.d\n+    __ sve_eorv(v21, __ B, p1, z30);                   \/\/       eorv b21, p1, z30.b\n+    __ sve_smaxv(v10, __ B, p5, z12);                  \/\/       smaxv b10, p5, z12.b\n+    __ sve_sminv(v9, __ S, p1, z24);                   \/\/       sminv s9, p1, z24.s\n+    __ sve_fminv(v4, __ S, p6, z6);                    \/\/       fminv s4, p6, z6.s\n+    __ sve_fmaxv(v27, __ D, p6, z13);                  \/\/       fmaxv d27, p6, z13.d\n+    __ sve_fadda(v30, __ D, p5, z22);                  \/\/       fadda d30, p5, d30, z22.d\n+    __ sve_uaddv(v30, __ H, p7, z9);                   \/\/       uaddv d30, p7, z9.h\n@@ -964,7 +981,7 @@\n-    0x14000000,     0x17ffffd7,     0x140002fb,     0x94000000,\n-    0x97ffffd4,     0x940002f8,     0x3400000a,     0x34fffa2a,\n-    0x34005eaa,     0x35000008,     0x35fff9c8,     0x35005e48,\n-    0xb400000b,     0xb4fff96b,     0xb4005deb,     0xb500001d,\n-    0xb5fff91d,     0xb5005d9d,     0x10000013,     0x10fff8b3,\n-    0x10005d33,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305cb6,     0x3758000c,     0x375ff7cc,     0x37585c4c,\n+    0x14000000,     0x17ffffd7,     0x1400030c,     0x94000000,\n+    0x97ffffd4,     0x94000309,     0x3400000a,     0x34fffa2a,\n+    0x340060ca,     0x35000008,     0x35fff9c8,     0x35006068,\n+    0xb400000b,     0xb4fff96b,     0xb400600b,     0xb500001d,\n+    0xb5fff91d,     0xb5005fbd,     0x10000013,     0x10fff8b3,\n+    0x10005f53,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305ed6,     0x3758000c,     0x375ff7cc,     0x37585e6c,\n@@ -975,13 +992,13 @@\n-    0x54005a20,     0x54000001,     0x54fff541,     0x540059c1,\n-    0x54000002,     0x54fff4e2,     0x54005962,     0x54000002,\n-    0x54fff482,     0x54005902,     0x54000003,     0x54fff423,\n-    0x540058a3,     0x54000003,     0x54fff3c3,     0x54005843,\n-    0x54000004,     0x54fff364,     0x540057e4,     0x54000005,\n-    0x54fff305,     0x54005785,     0x54000006,     0x54fff2a6,\n-    0x54005726,     0x54000007,     0x54fff247,     0x540056c7,\n-    0x54000008,     0x54fff1e8,     0x54005668,     0x54000009,\n-    0x54fff189,     0x54005609,     0x5400000a,     0x54fff12a,\n-    0x540055aa,     0x5400000b,     0x54fff0cb,     0x5400554b,\n-    0x5400000c,     0x54fff06c,     0x540054ec,     0x5400000d,\n-    0x54fff00d,     0x5400548d,     0x5400000e,     0x54ffefae,\n-    0x5400542e,     0x5400000f,     0x54ffef4f,     0x540053cf,\n+    0x54005c40,     0x54000001,     0x54fff541,     0x54005be1,\n+    0x54000002,     0x54fff4e2,     0x54005b82,     0x54000002,\n+    0x54fff482,     0x54005b22,     0x54000003,     0x54fff423,\n+    0x54005ac3,     0x54000003,     0x54fff3c3,     0x54005a63,\n+    0x54000004,     0x54fff364,     0x54005a04,     0x54000005,\n+    0x54fff305,     0x540059a5,     0x54000006,     0x54fff2a6,\n+    0x54005946,     0x54000007,     0x54fff247,     0x540058e7,\n+    0x54000008,     0x54fff1e8,     0x54005888,     0x54000009,\n+    0x54fff189,     0x54005829,     0x5400000a,     0x54fff12a,\n+    0x540057ca,     0x5400000b,     0x54fff0cb,     0x5400576b,\n+    0x5400000c,     0x54fff06c,     0x5400570c,     0x5400000d,\n+    0x54fff00d,     0x540056ad,     0x5400000e,     0x54ffefae,\n+    0x5400564e,     0x5400000f,     0x54ffef4f,     0x540055ef,\n@@ -1019,1 +1036,1 @@\n-    0xbd1b1869,     0x5800441b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800463b,     0x1800000b,     0xf8945060,\n@@ -1111,45 +1128,49 @@\n-    0x25b8efe2,     0x25f8f007,     0xa400a3e0,     0xa4a8a7ea,\n-    0xa547a814,     0xa4084ffe,     0xa55c53e0,     0xa5e1540b,\n-    0xe400fbf6,     0xe408ffff,     0xe547e400,     0xe4014be0,\n-    0xe4a84fe0,     0xe5f15000,     0x858043e0,     0x85a043ff,\n-    0xe59f5d08,     0x1e601000,     0x1e603000,     0x1e621000,\n-    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n-    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n-    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n-    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n-    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n-    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n-    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n-    0x1e7e3000,     0xf8208193,     0xf83101b6,     0xf83c13fe,\n-    0xf821239a,     0xf824309e,     0xf826535e,     0xf8304109,\n-    0xf82c7280,     0xf8216058,     0xf8a08309,     0xf8ba03d0,\n-    0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,\n-    0xf8a2418a,     0xf8ac71af,     0xf8a26287,     0xf8fa8090,\n-    0xf8e20184,     0xf8f01215,     0xf8f022ab,     0xf8f7334c,\n-    0xf8f751dc,     0xf8eb4038,     0xf8ec715f,     0xf8f06047,\n-    0xf863826d,     0xf8710070,     0xf86113cb,     0xf86521e8,\n-    0xf87d301e,     0xf8745287,     0xf87742bc,     0xf87b70b9,\n-    0xf8616217,     0xb83f8185,     0xb82901fc,     0xb83d13f6,\n-    0xb83320bf,     0xb82e33f0,     0xb830529b,     0xb830416c,\n-    0xb82973c6,     0xb831639b,     0xb8be8147,     0xb8b4008a,\n-    0xb8b81231,     0xb8b623a3,     0xb8af3276,     0xb8b35056,\n-    0xb8af4186,     0xb8b071ab,     0xb8b763c1,     0xb8f38225,\n-    0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,\n-    0xb8ff5278,     0xb8f14389,     0xb8fb70ef,     0xb8f563f7,\n-    0xb87983e2,     0xb87b0150,     0xb8771073,     0xb8702320,\n-    0xb87a3057,     0xb870508c,     0xb87c43be,     0xb87070db,\n-    0xb86961fd,     0xce273c87,     0xce080ac9,     0xce7e8e9b,\n-    0xce808b45,     0xce79806e,     0xce758768,     0xcec0835a,\n-    0xce608ad8,     0x043100c4,     0x046105e3,     0x65c900a6,\n-    0x65d60a87,     0x65c80545,     0x0416a63e,     0x04001f8b,\n-    0x0450979a,     0x04dabe0d,     0x045381a5,     0x04918b4f,\n-    0x049006cb,     0x0497a264,     0x045eadd1,     0x04881062,\n-    0x040a04d7,     0x04810f71,     0x04dca450,     0x65c084c3,\n-    0x65cd8d93,     0x65c69a68,     0x65878ae0,     0x65c29db3,\n-    0x049da0e6,     0x6582b911,     0x65c0b6d6,     0x65c1a1e2,\n-    0x65cda494,     0x65c18107,     0x65af1493,     0x65e52b36,\n-    0x65ab4ed0,     0x65f06a8d,     0x0451448f,     0x049c7c86,\n-    0x0429335d,     0x04bc3162,     0x047a3027,     0x04e831d1,\n-    0x049a38b5,     0x049832d5,     0x0419367d,     0x040832e4,\n-    0x04ca26f3,     0x65872113,     0x65c63a2e,     0x659827d5,\n-    0x0401358a,\n+    0x25b8efe2,     0x25f8f007,     0x05203864,     0x05603ace,\n+    0xa400a3e0,     0xa4a8a7ea,     0xa547a814,     0xa4084ffe,\n+    0xa55c53e0,     0xa5e1540b,     0xe400fbf6,     0xe408ffff,\n+    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n+    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x0420e3e9,\n+    0x0460e3ea,     0x04a0e3eb,     0x04e0e3ec,     0x25104042,\n+    0x25104871,     0x252c8840,     0x253c1420,     0x25681572,\n+    0x25a21ce3,     0x25ea1e34,     0x1e601000,     0x1e603000,\n+    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,\n+    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,\n+    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,\n+    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,\n+    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,\n+    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,\n+    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,\n+    0x1e7e1000,     0x1e7e3000,     0xf8208193,     0xf83101b6,\n+    0xf83c13fe,     0xf821239a,     0xf824309e,     0xf826535e,\n+    0xf8304109,     0xf82c7280,     0xf8216058,     0xf8a08309,\n+    0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,\n+    0xf8aa522f,     0xf8a2418a,     0xf8ac71af,     0xf8a26287,\n+    0xf8fa8090,     0xf8e20184,     0xf8f01215,     0xf8f022ab,\n+    0xf8f7334c,     0xf8f751dc,     0xf8eb4038,     0xf8ec715f,\n+    0xf8f06047,     0xf863826d,     0xf8710070,     0xf86113cb,\n+    0xf86521e8,     0xf87d301e,     0xf8745287,     0xf87742bc,\n+    0xf87b70b9,     0xf8616217,     0xb83f8185,     0xb82901fc,\n+    0xb83d13f6,     0xb83320bf,     0xb82e33f0,     0xb830529b,\n+    0xb830416c,     0xb82973c6,     0xb831639b,     0xb8be8147,\n+    0xb8b4008a,     0xb8b81231,     0xb8b623a3,     0xb8af3276,\n+    0xb8b35056,     0xb8af4186,     0xb8b071ab,     0xb8b763c1,\n+    0xb8f38225,     0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,\n+    0xb8fb3023,     0xb8ff5278,     0xb8f14389,     0xb8fb70ef,\n+    0xb8f563f7,     0xb87983e2,     0xb87b0150,     0xb8771073,\n+    0xb8702320,     0xb87a3057,     0xb870508c,     0xb87c43be,\n+    0xb87070db,     0xb86961fd,     0xce273c87,     0xce080ac9,\n+    0xce7e8e9b,     0xce808b45,     0xce79806e,     0xce758768,\n+    0xcec0835a,     0xce608ad8,     0x043100c4,     0x046105e3,\n+    0x65c900a6,     0x65d60a87,     0x65c80545,     0x0416a63e,\n+    0x04001f8b,     0x0450979a,     0x04dabe0d,     0x045381a5,\n+    0x04918b4f,     0x049006cb,     0x0497a264,     0x045eadd1,\n+    0x04881062,     0x040a04d7,     0x04810f71,     0x04dca450,\n+    0x65c084c3,     0x65cd8d93,     0x65c69a68,     0x65878ae0,\n+    0x65c29db3,     0x049da0e6,     0x6582b911,     0x65c0b6d6,\n+    0x65c1a1e2,     0x65cda494,     0x65c18107,     0x65af1493,\n+    0x65e52b36,     0x65ab4ed0,     0x65f06a8d,     0x0451448f,\n+    0x049c7c86,     0x0429335d,     0x04bc3162,     0x047a3027,\n+    0x04e831d1,     0x2493b8a5,     0x249d9604,     0x24d18095,\n+    0x24d7b491,     0x045a2113,     0x04d83a2e,     0x041927d5,\n+    0x0408358a,     0x048a2709,     0x658738c4,     0x65c639bb,\n+    0x65d836de,     0x04413d3e,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":96,"deletions":75,"binary":false,"changes":171,"status":"modified"}]}