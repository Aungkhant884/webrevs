{"files":[{"patch":"@@ -173,1 +173,1 @@\n- * not a <a href=\"ClassLoader.html#binary-name\">binary name<\/a>,\n+ * not a {@linkplain ClassLoader##binary-name binary name},\n@@ -545,2 +545,2 @@\n-     * Returns the {@code Class} with the given <a href=\"ClassLoader.html#binary-name\">\n-     * binary name<\/a> in the given module.\n+     * Returns the {@code Class} with the given {@linkplain ClassLoader##binary-name\n+     * binary name} in the given module.\n@@ -569,1 +569,1 @@\n-     * @param  name     The <a href=\"ClassLoader.html#binary-name\">binary name<\/a>\n+     * @param  name     The {@linkplain ClassLoader##binary-name binary name}\n@@ -897,1 +897,1 @@\n-     *      then the <a href=\"ClassLoader.html#binary-name\">binary name<\/a>\n+     *      then the {@linkplain ClassLoader##binary-name binary name}\n@@ -901,1 +901,1 @@\n-     *      where {@code N} is the <a href=\"ClassLoader.html#binary-name\">binary name<\/a>\n+     *      where {@code N} is the {@linkplain ClassLoader##binary-name binary name}\n@@ -921,1 +921,1 @@\n-     * <tr><th scope=\"row\"> class or interface with <a href=\"ClassLoader.html#binary-name\">binary name<\/a> <i>N<\/i>\n+     * <tr><th scope=\"row\"> class or interface with {@linkplain ClassLoader##binary-name binary name} <i>N<\/i>\n@@ -949,0 +949,3 @@\n+     * @apiNote\n+     * Distinct class objects can have the same name but different class loaders.\n+     *\n@@ -4537,1 +4540,1 @@\n-     *      where <em>N<\/em> is the <a href=\"ClassLoader.html#binary-name\">binary name<\/a>\n+     *      where <em>N<\/em> is the {@linkplain ClassLoader##binary-name binary name}\n@@ -4565,5 +4568,0 @@\n-     * @apiNote\n-     * This is not a strict inverse of {@link #forName};\n-     * distinct classes which share a common name but have different class loaders\n-     * will have identical descriptor strings.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import static java.lang.invoke.MethodType.fromDescriptor;\n@@ -1162,2 +1161,3 @@\n-     * Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.\n-     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n+     * Finds or creates an instance of a method type of the given method descriptor\n+     * (JVMS {@jvms 4.3.3}). This method is a convenience method for\n+     * {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n@@ -1165,5 +1165,6 @@\n-     * resolved by the given loader (or if it is null, on the system class loader).\n-     * <p>\n-     * Note that it is possible to encounter method types which cannot be\n-     * constructed by this method, because their component types are\n-     * not all reachable from a common class loader.\n+     * resolved by the given loader (or if it is {@code null}, on the system class loader).\n+     *\n+     * @apiNote\n+     * It is possible to encounter method types that have valid descriptors but\n+     * cannot be constructed by this method, because their component types are\n+     * not visible from a common class loader.\n@@ -1173,1 +1174,1 @@\n-     * @param descriptor a bytecode-level type descriptor string \"(T...)T\"\n+     * @param descriptor a method descriptor string\n@@ -1175,3 +1176,3 @@\n-     * @return a method type matching the bytecode-level type descriptor\n-     * @throws NullPointerException if the string is null\n-     * @throws IllegalArgumentException if the string is not well-formed\n+     * @return a method type of the given method descriptor\n+     * @throws NullPointerException if the string is {@code null}\n+     * @throws IllegalArgumentException if the string is not a method descriptor\n@@ -1182,0 +1183,1 @@\n+     * @jvms 4.3.3 Method Descriptors\n@@ -1221,1 +1223,1 @@\n-     * Returns a descriptor string for the method type.  This method\n+     * {@return the descriptor string for this method type} This method\n@@ -1224,4 +1226,8 @@\n-     * <p>\n-     * Note that this is not a strict inverse of {@link #fromMethodDescriptorString fromMethodDescriptorString}.\n-     * Two distinct classes which share a common name but have different class loaders\n-     * will appear identical when viewed within descriptor strings.\n+     * @apiNote\n+     * This is not a strict inverse of {@link #fromMethodDescriptorString\n+     * fromMethodDescriptorString} which requires a method type descriptor\n+     * (JVMS {@jvms 4.3.3}) and a suitable class loader argument.\n+     * Two distinct {@code MethodType} objects can have an identical\n+     * descriptor string as distinct classes can have the same name\n+     * but different class loaders.\n+     *\n@@ -1231,3 +1237,0 @@\n-     * {@link #fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) fromMethodDescriptorString},\n-     * because the latter requires a suitable class loader argument.\n-     * @return the descriptor string for this method type\n@@ -1247,1 +1250,1 @@\n-     * Returns a descriptor string for this method type.\n+     * {@return the descriptor string for this method type}\n@@ -1250,1 +1253,1 @@\n-     * If this method type can be <a href=\"#descriptor\">described nominally<\/a>,\n+     * If this method type can be {@linkplain ##descriptor described nominally},\n@@ -1256,1 +1259,1 @@\n-     * If this method type cannot be <a href=\"#descriptor\">described nominally<\/a>\n+     * If this method type cannot be {@linkplain ##descriptor described nominally}\n@@ -1265,1 +1268,0 @@\n-     * @return the descriptor string for this method type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"}]}