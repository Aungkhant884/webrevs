{"files":[{"patch":"@@ -2550,1 +2550,5 @@\n-\n+        if (c.isRecord()) {\n+            for (RecordComponent rc: c.getRecordComponents()) {\n+                rc.accessor = lookupMethod(c, rc.name, List.nil());\n+            }\n+        }\n@@ -2554,0 +2558,9 @@\n+    private MethodSymbol lookupMethod(TypeSymbol tsym, Name name, List<Type> argtypes) {\n+        for (Symbol s : tsym.members().getSymbolsByName(name, s -> s.kind == MTH)) {\n+            if (types.isSameTypes(s.type.getParameterTypes(), argtypes)) {\n+                return (MethodSymbol) s;\n+            }\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify that annotation processing works for records\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build JavacTestingAbstractProcessor\n+ * @compile CheckingAccessorsOnLoadedRecordClasses.java\n+ * @run main\/othervm CheckingAccessorsOnLoadedRecordClasses\n+ *\/\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+import javax.annotation.processing.*;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.RecordComponentElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.util.ElementFilter;\n+import javax.lang.model.util.ElementScanner14;\n+import javax.tools.Diagnostic.Kind;\n+import javax.tools.*;\n+\n+import java.lang.annotation.*;\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.*;\n+import javax.tools.Diagnostic.Kind;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.sun.tools.javac.util.Assert;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class CheckingAccessorsOnLoadedRecordClasses extends TestRunner {\n+    protected ToolBox tb;\n+\n+    CheckingAccessorsOnLoadedRecordClasses() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new CheckingAccessorsOnLoadedRecordClasses().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    static final String RecordSrc =\n+            \"\"\"\n+            package pkg1;\n+            import java.util.List;\n+            public record R(List<String> data) {}\n+            \"\"\";\n+\n+    static final String ISrc =\n+            \"\"\"\n+            package pkg2;\n+            import pkg1.R;\n+\n+            @FunctionalInterface\n+            public interface I {\n+                void foo(R r);\n+            }\n+            \"\"\";\n+\n+    @Test\n+    public void testAnnoProcessing(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path out = base.resolve(\"out\");\n+        Files.createDirectories(out);\n+        Path pkg1 = src.resolve(\"pkg1\");\n+\n+        tb.writeJavaFiles(src, RecordSrc);\n+        \/\/ lets first compile the record\n+        new JavacTask(tb)\n+                .files(findJavaFiles(pkg1))\n+                .outdir(out)\n+                .run();\n+\n+        Path pkg2 = src.resolve(\"pkg2\");\n+        tb.writeJavaFiles(src, ISrc);\n+        \/* now the annotated interface which uses the record, given that the record class\n+         * is now in the classpath, we will force jvm.ClassReader to load it and set the\n+         * accessors correctly\n+         *\/\n+        new JavacTask(tb, Mode.API)\n+                .options(\"-nowarn\", \"-processor\", Processor.class.getName())\n+                .classpath(out)\n+                .files(findJavaFiles(pkg2))\n+                .outdir(out)\n+                .run();\n+    }\n+\n+    \/** This processor will look for records in the arguments of the methods annotated with any\n+     *  annotation for a given source. Then it will check that those records have at least one\n+     *  record component and that the accessor associated with it is not null and that it has the\n+     *  same name as its corresponding record component\n+     *\/\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class Processor extends JavacTestingAbstractProcessor {\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            if (!roundEnv.processingOver()) {\n+                for (TypeElement annotation : annotations) {\n+                    Set<? extends Element> annotatedElems = roundEnv.getElementsAnnotatedWith(annotation);\n+                    for (Element annotatedElement : annotatedElems) {\n+                        TypeElement typeElement = (TypeElement) annotatedElement;\n+\n+                        for (Element enclosedElement : typeElement.getEnclosedElements()) {\n+                            if (enclosedElement.getKind() == ElementKind.METHOD) {\n+                                validateMethod((ExecutableElement) enclosedElement, roundEnv);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        protected void validateMethod(ExecutableElement method, RoundEnvironment roundEnv) {\n+            for (VariableElement parameter : method.getParameters()) {\n+                TypeMirror parameterType = parameter.asType();\n+                if (parameterType.getKind() == TypeKind.DECLARED) {\n+                    Element parameterElement = ((DeclaredType) parameterType).asElement();\n+                    if (parameterElement.getKind() == ElementKind.RECORD) {\n+                        validateRecord((TypeElement) parameterElement, roundEnv);\n+                    }\n+                }\n+            }\n+        }\n+\n+        protected void validateRecord(TypeElement recordElement, RoundEnvironment roundEnv) {\n+            List<? extends RecordComponentElement> recordComponents = recordElement.getRecordComponents();\n+\n+            if (recordComponents.isEmpty()) {\n+                processingEnv.getMessager()\n+                        .printMessage(Diagnostic.Kind.ERROR, \"Record element \" + recordElement.getQualifiedName()\n+                                + \" has no record components\");\n+            } else {\n+                for (RecordComponentElement recordComponent : recordComponents) {\n+                    ExecutableElement accessor = recordComponent.getAccessor();\n+                    if (accessor == null) {\n+                        processingEnv.getMessager()\n+                                .printMessage(Diagnostic.Kind.ERROR,\n+                                        \"Record component \" + recordComponent.getSimpleName() + \" from record \" + recordElement\n+                                                .getQualifiedName() + \" has no accessor\");\n+                    }\n+                    if (!accessor.getSimpleName().equals(recordComponent.getSimpleName())) {\n+                        processingEnv.getMessager()\n+                                .printMessage(Diagnostic.Kind.ERROR,\n+                                        \"Record component \" + recordComponent.getSimpleName() + \" from record \" +\n+                                                recordElement.getQualifiedName() + \" has an accessor with name \" + accessor.getSimpleName());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/CheckingAccessorsOnLoadedRecordClasses.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"}]}