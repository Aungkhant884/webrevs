{"files":[{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Container;\n-import java.awt.Robot;\n-\n-import javax.swing.AbstractButton;\n-import javax.swing.JFileChooser;\n-import javax.swing.JFrame;\n-import javax.swing.JTable;\n-import javax.swing.JToggleButton;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.WindowConstants;\n-\n-import java.util.function.Predicate;\n-\n-\/*\n- * @test\n- * @bug 8301606\n- * @key headful\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @summary Test to check if the Size label in details view,\n- * doesn't cut off Metal Look&Feel\n- * @run main\/manual\/othervm -Dsun.java2d.uiScale=2.25 FileChooserSizeLabelCutOffTest\n- *\/\n-\n-public class FileChooserSizeLabelCutOffTest {\n-    static JFrame frame;\n-    static JFileChooser jfc;\n-    static PassFailJFrame passFailJFrame;\n-\n-    public static void main(String[] args) throws Exception {\n-        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n-        Robot robot = new Robot();\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                try {\n-                    initialize();\n-                } catch (Exception e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-        });\n-        robot.delay(500);\n-        robot.waitForIdle();\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                switchToDetailsView();\n-            }\n-        });\n-        robot.delay(500);\n-        robot.waitForIdle();\n-        passFailJFrame.awaitAndCheck();\n-    }\n-\n-    static void initialize() throws Exception {\n-        final String INSTRUCTIONS = \"\"\"\n-                Instructions to Test:\n-                1. Verify that the UI scaling is set to 225%.\n-                2. If Size label is cut off with table\n-                 header cell, test FAIL else test is PASS.\n-                \"\"\";\n-        frame = new JFrame(\"JFileChooser Size Label test\");\n-        jfc = new JFileChooser();\n-        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS,\n-                5L, 8, 25);\n-\n-        PassFailJFrame.addTestWindow(frame);\n-        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.TOP_LEFT_CORNER);\n-\n-        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n-        jfc.setControlButtonsAreShown(false);\n-        jfc.setDialogType(JFileChooser.CUSTOM_DIALOG);\n-\n-        frame.add(jfc, BorderLayout.CENTER);\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n-    private static void switchToDetailsView() {\n-\n-        AbstractButton detailsBtn = findDetailsButton(jfc);\n-        if (detailsBtn == null) {\n-            throw new Error(\"'Details' button not found in JFileChooser\");\n-        }\n-        detailsBtn.doClick();\n-    }\n-    private static AbstractButton findDetailsButton(final Container container) {\n-        Component result = findComponent(container,\n-                c -> c instanceof JToggleButton button\n-                        && \"Details\".equals(button.getToolTipText()));\n-        return (AbstractButton) result;\n-    }\n-\n-    private static JTable findTable(final Container container) {\n-        Component result = findComponent(container,\n-                c -> c instanceof JTable);\n-        return (JTable) result;\n-    }\n-\n-    private static Component findComponent(final Container container,\n-                                           final Predicate<Component> predicate) {\n-        for (Component child : container.getComponents()) {\n-            if (predicate.test(child)) {\n-                return child;\n-            }\n-            if (child instanceof Container cont && cont.getComponentCount() > 0) {\n-                Component result = findComponent(cont, predicate);\n-                if (result != null) {\n-                    return result;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileChooserSizeLabelCutOffTest.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JLabel;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.JTableHeader;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.UIManager;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @bug 8301606\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if the Right aligned header\n+ * label doesn't cut off Metal Look&Feel\n+ * @run main JTableHeaderLabelRightAlignTest\n+ *\/\n+\n+public class JTableHeaderLabelRightAlignTest {\n+    static JTable table;\n+    private static final int WIDTH = 300;\n+    private static final int HEIGHT = 150;\n+    private static final double SCALE = 2.25;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                JTableHeaderLabelRightAlignTest.Test();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    public static void Test() throws Exception {\n+        int verticalLineCol;\n+        int expectedRGB;\n+        BufferedImage imgHeader;\n+        double w;\n+        double h;\n+        String[][] data = {\n+                { \"1\", \"1\", \"Green\"},\n+                { \"2\", \"2\", \"Blue\"}\n+        };\n+\n+        String[] columnNames = { \"Size\", \"Size\", \"Size\"};\n+\n+        table = new JTable(data, columnNames);\n+        table.setSize(WIDTH,HEIGHT);\n+        ((JLabel)table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment( JLabel.RIGHT );\n+\n+        final JTableHeader header = table.getTableHeader();\n+        TableCellRenderer renderer = header.getDefaultRenderer();\n+        header.setDefaultRenderer(renderer);\n+        table.updateUI();\n+\n+        Dimension size = header.getPreferredSize();\n+        header.setSize(size);\n+        w = SCALE * size.width;\n+        h = SCALE * size.height;\n+        imgHeader = new BufferedImage((int)(w),(int)(h),BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = imgHeader.createGraphics();\n+        g2d.scale(SCALE, SCALE);\n+        try {\n+            header.paint(g2d);\n+        } finally {\n+            g2d.dispose();\n+        }\n+\n+        verticalLineCol = (int)(table.getTableHeader().\n+                getColumnModel().getColumn(0).getWidth() * SCALE);\n+        expectedRGB = imgHeader.getRGB(verticalLineCol,1);\n+\n+        for(int i = 1; i < imgHeader.getHeight()-3; i++) {\n+            for(int j = verticalLineCol; j < verticalLineCol + 1; j++) {\n+                if(expectedRGB != imgHeader.getRGB(j, i)) {\n+                    ImageIO.write(imgHeader, \"png\",new File(\"FailureImage.png\"));\n+                    throw new RuntimeException(\"Test Failed\");\n+                }\n+            }\n+        }\n+        System.out.println(\"Test Pass!!\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/JTableHeaderLabelRightAlignTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}