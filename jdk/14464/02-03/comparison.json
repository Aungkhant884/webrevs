{"files":[{"patch":"@@ -24,0 +24,1 @@\n+import javax.imageio.ImageIO;\n@@ -28,1 +29,0 @@\n-import javax.swing.table.TableCellRenderer;\n@@ -36,1 +36,1 @@\n-import javax.imageio.ImageIO;\n+import java.io.IOException;\n@@ -41,2 +41,0 @@\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n@@ -44,1 +42,1 @@\n- * label doesn't cut off Metal Look&Feel\n+ *          label doesn't cut off Metal Look&Feel\n@@ -47,1 +45,0 @@\n-\n@@ -49,1 +46,0 @@\n-    static JTable table;\n@@ -57,5 +53,1 @@\n-            try {\n-                JTableHeaderLabelRightAlignTest.Test();\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n+            test();\n@@ -65,6 +57,3 @@\n-    public static void Test() throws Exception {\n-        int verticalLineCol;\n-        int expectedRGB;\n-        BufferedImage imgHeader;\n-        double w;\n-        double h;\n+    private static void test() {\n+        JTable table;\n+\n@@ -72,2 +61,1 @@\n-                { \"1\", \"1\", \"Green\"},\n-                { \"2\", \"2\", \"Blue\"}\n+                { \"1\", \"1\"}\n@@ -76,1 +64,1 @@\n-        String[] columnNames = { \"Size\", \"Size\", \"Size\"};\n+        String[] columnNames = { \"Size\", \"Size\"};\n@@ -79,1 +67,1 @@\n-        table.setSize(WIDTH,HEIGHT);\n+        table.setSize(WIDTH, HEIGHT);\n@@ -84,4 +72,0 @@\n-        TableCellRenderer renderer = header.getDefaultRenderer();\n-        header.setDefaultRenderer(renderer);\n-        table.updateUI();\n-\n@@ -90,3 +74,4 @@\n-        w = SCALE * size.width;\n-        h = SCALE * size.height;\n-        imgHeader = new BufferedImage((int)(w), (int)(h),\n+\n+        int w = (int)Math.ceil(SCALE * size.width);\n+        int h = (int)Math.ceil(SCALE * size.height);\n+        BufferedImage imgHeader = new BufferedImage((w), (h),\n@@ -102,1 +87,1 @@\n-        verticalLineCol = (int)(table.getTableHeader().\n+        int verticalLine = (int)(table.getTableHeader().\n@@ -104,1 +89,1 @@\n-        expectedRGB = imgHeader.getRGB(verticalLineCol, 1);\n+        int expectedRGB = imgHeader.getRGB(verticalLine, 1);\n@@ -106,5 +91,9 @@\n-        for (int i = 1; i < imgHeader.getHeight()-3; i++) {\n-            for (int j = verticalLineCol; j < verticalLineCol + 1; j++) {\n-                if (expectedRGB != imgHeader.getRGB(j, i)) {\n-                    ImageIO.write(imgHeader, \"png\",\n-                            new File(\"FailureImage.png\"));\n+        for (int y = 1; y < (imgHeader.getHeight() -3); y++) {\n+            for (int x = verticalLine; x < verticalLine + 1; x++) {\n+                if (expectedRGB != imgHeader.getRGB(x, y)) {\n+                    try {\n+                        ImageIO.write(imgHeader, \"png\",\n+                                new File(\"FailureImage.png\"));\n+                    } catch (IOException ioException){\n+                        ioException.printStackTrace();\n+                    }\n@@ -115,1 +104,1 @@\n-        System.out.println(\"Test Pass!!\");\n+        System.out.println(\"Test Passed\");\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/JTableHeaderLabelRightAlignTest.java","additions":26,"deletions":37,"binary":false,"changes":63,"status":"modified"}]}