{"files":[{"patch":"@@ -2263,3 +2263,1 @@\n-\/\/ The promoted_flags parameter is used to pass relevant access_flags\n-\/\/ from the method back up to the containing klass. These flag values\n-\/\/ are added to klass's access_flags.\n+\/\/ The has_localvariable_table parameter is used to pass up the value to InstanceKlass.\n@@ -2270,1 +2268,1 @@\n-                                      AccessFlags* const promoted_flags,\n+                                      bool* const has_localvariable_table,\n@@ -2274,1 +2272,1 @@\n-  assert(promoted_flags != NULL, \"invariant\");\n+  assert(has_localvariable_table != NULL, \"invariant\");\n@@ -2823,1 +2821,1 @@\n-    promoted_flags->set_has_localvariable_table();\n+    *has_localvariable_table = true;\n@@ -2879,3 +2877,0 @@\n-\/\/ The promoted_flags parameter is used to pass relevant access_flags\n-\/\/ from the methods back up to the containing klass. These flag values\n-\/\/ are added to klass's access_flags.\n@@ -2885,1 +2880,1 @@\n-                                    AccessFlags* promoted_flags,\n+                                    bool* const has_localvariable_table,\n@@ -2890,1 +2885,1 @@\n-  assert(promoted_flags != NULL, \"invariant\");\n+  assert(has_localvariable_table != NULL, \"invariant\");\n@@ -2910,1 +2905,1 @@\n-                                    promoted_flags,\n+                                    has_localvariable_table,\n@@ -5336,0 +5331,4 @@\n+  if (_has_localvariable_table) {\n+    ik->set_has_localvariable_table(true);\n+  }\n+\n@@ -5599,0 +5598,1 @@\n+  _has_localvariable_table(false),\n@@ -5904,1 +5904,0 @@\n-  AccessFlags promoted_flags;\n@@ -5907,1 +5906,1 @@\n-                &promoted_flags,\n+                &_has_localvariable_table,\n@@ -5914,3 +5913,0 @@\n-  \/\/ promote flags from parse_methods() to the klass' flags\n-  _access_flags.add_promoted_flags(promoted_flags.as_int());\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -190,0 +190,1 @@\n+  bool _has_localvariable_table;\n@@ -270,1 +271,1 @@\n-                       AccessFlags* const promoted_flags,\n+                       bool* const has_localvariable_table,\n@@ -275,1 +276,1 @@\n-                     AccessFlags* const promoted_flags,\n+                     bool* const has_localvariable_table,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -339,0 +339,3 @@\n+  bool has_localvariable_table() const     { return _misc_status.has_localvariable_table(); }\n+  void set_has_localvariable_table(bool b) { _misc_status.set_has_localvariable_table(b); }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/safepoint.hpp\"\n@@ -60,0 +61,9 @@\n+\n+#ifdef ASSERT\n+void InstanceKlassMiscStatus::assert_is_safe(bool set) {\n+  \/\/ Setting a flag is safe if it's set once or at a safepoint. RedefineClasses can set or\n+  \/\/ reset flags at a safepoint.\n+  assert(!set || SafepointSynchronize::is_at_safepoint(), \"set once or at safepoint\");\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlassMiscStatus.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-    flag(has_contended_annotations          , 1 << 13) \/* has @Contended annotation *\/\n+    flag(has_contended_annotations          , 1 << 13) \/* has @Contended annotation *\/ \\\n+    flag(has_localvariable_table            , 1 << 14) \/* has localvariable information *\/\n@@ -75,1 +76,1 @@\n-    assert(!name(), \"set once\");    \\\n+    assert_is_safe(name());         \\\n@@ -88,0 +89,1 @@\n+  void assert_is_safe(bool set) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/oops\/instanceKlassMiscStatus.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3525,1 +3525,1 @@\n-  if (!ik->access_flags().has_localvariable_table()) {\n+  if (!ik->has_localvariable_table()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4374,10 +4374,3 @@\n-  if (scratch_class->access_flags().has_localvariable_table() !=\n-      the_class->access_flags().has_localvariable_table()) {\n-\n-    AccessFlags flags = the_class->access_flags();\n-    if (scratch_class->access_flags().has_localvariable_table()) {\n-      flags.set_has_localvariable_table();\n-    } else {\n-      flags.clear_has_localvariable_table();\n-    }\n-    the_class->set_access_flags(flags);\n+  if (scratch_class->has_localvariable_table() !=\n+      the_class->has_localvariable_table()) {\n+    the_class->set_has_localvariable_table(scratch_class->has_localvariable_table());\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2101,1 +2101,0 @@\n-  declare_constant(JVM_ACC_PROMOTED_FLAGS)                                \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,0 @@\n-  JVM_ACC_PROMOTED_FLAGS          = 0x00400000,     \/\/ flags promoted from methods to the holding klass\n-\n@@ -159,1 +157,1 @@\n-  \/\/ Klass* and Method* flags\n+  \/\/ Method* flags\n@@ -187,1 +185,0 @@\n-  void add_promoted_flags(jint flags)   { _flags |= (flags & JVM_ACC_PROMOTED_FLAGS); }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    \/\/ Klass* and Method* flags\n+    \/\/ Method* flags\n@@ -139,2 +139,0 @@\n-    \/\/ flags promoted from methods to the holding klass\n-    public static final long JVM_ACC_PROMOTED_FLAGS           = 0x00200000;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ClassConstants.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}