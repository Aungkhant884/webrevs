{"files":[{"patch":"@@ -129,0 +129,11 @@\n+\n+  virtual ZNMethodEntry nmethod_entry() const {\n+    if (ClassUnloading) {\n+      \/\/ All encountered nmethods should have been \"entered\" during stack walking\n+      return ZNMethodEntry::VerifyDisarmed;\n+    } else {\n+      \/\/ All nmethods are considered roots and will be visited.\n+      \/\/ Make sure that the unvisited gets fixed and disarmed before proceeding.\n+      return ZNMethodEntry::PreBarrier;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -585,2 +585,3 @@\n-  virtual bool should_disarm_nmethods() const {\n-    return true;\n+  virtual ZNMethodEntry nmethod_entry() const {\n+    \/\/ Only apply closure to armed nmethods, and then disarm them.\n+    return ZNMethodEntry::Disarm;\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -239,2 +239,3 @@\n-  OopClosure* const _cl;\n-  const bool        _should_disarm_nmethods;\n+  OopClosure* const        _cl;\n+  const ZNMethodEntry      _entry;\n+  BarrierSetNMethod* const _bs_nm;\n@@ -243,1 +244,1 @@\n-  ZNMethodToOopsDoClosure(OopClosure* cl, bool should_disarm_nmethods) :\n+  ZNMethodToOopsDoClosure(OopClosure* cl, ZNMethodEntry entry) :\n@@ -245,1 +246,2 @@\n-      _should_disarm_nmethods(should_disarm_nmethods) {}\n+      _entry(entry),\n+      _bs_nm(BarrierSet::barrier_set()->barrier_set_nmethod()) {}\n@@ -248,0 +250,5 @@\n+    if (_entry == ZNMethodEntry::PreBarrier) {\n+      \/\/ Apply entry barrier before proceeding with closure\n+      _bs_nm->nmethod_entry_barrier(nm);\n+    }\n+\n@@ -253,1 +260,6 @@\n-    if (_should_disarm_nmethods) {\n+    if (_entry == ZNMethodEntry::VerifyDisarmed) {\n+      \/\/ Only verify\n+      assert(!ZNMethod::is_armed(nm), \"Must be disarmed\");\n+\n+    } else if (_entry == ZNMethodEntry::Disarm) {\n+      \/\/ Apply closure and disarm only armed nmethods\n@@ -258,2 +270,0 @@\n-    } else {\n-      ZNMethod::nmethod_oops_do(nm, _cl);\n@@ -261,0 +271,2 @@\n+\n+    ZNMethod::nmethod_oops_do(nm, _cl);\n@@ -272,2 +284,2 @@\n-void ZNMethod::oops_do(OopClosure* cl, bool should_disarm_nmethods) {\n-  ZNMethodToOopsDoClosure nmethod_cl(cl, should_disarm_nmethods);\n+void ZNMethod::oops_do(OopClosure* cl, ZNMethodEntry entry) {\n+  ZNMethodToOopsDoClosure nmethod_cl(cl, entry);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -34,0 +34,7 @@\n+enum class ZNMethodEntry {\n+  PreBarrier,\n+  Disarm,\n+  VerifyDisarmed,\n+  None\n+};\n+\n@@ -55,1 +62,1 @@\n-  static void oops_do(OopClosure* cl, bool should_disarm_nmethods);\n+  static void oops_do(OopClosure* cl, ZNMethodEntry entry);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,0 +72,4 @@\n+\n+  virtual ZNMethodEntry nmethod_entry() const {\n+    return ZNMethodEntry::None;\n+  }\n@@ -78,0 +82,4 @@\n+\n+  virtual ZNMethodEntry nmethod_entry() const {\n+    return ZNMethodEntry::None;\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zOopClosures.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-  ZNMethod::oops_do(cl, cl->should_disarm_nmethods());\n+  ZNMethod::oops_do(cl, cl->nmethod_entry());\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/z\/zNMethod.hpp\"\n@@ -64,3 +65,1 @@\n-  virtual bool should_disarm_nmethods() const {\n-    return false;\n-  }\n+  virtual ZNMethodEntry nmethod_entry() const = 0;\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -97,0 +97,5 @@\n+\n+  virtual ZNMethodEntry nmethod_entry() const {\n+    \/\/ Verification performs its own verification\n+    return ZNMethodEntry::None;\n+  }\n@@ -191,1 +196,1 @@\n-class ZVerifyOopClosure : public ClaimMetadataVisitingOopIterateClosure, public ZRootsIteratorClosure  {\n+class ZVerifyOopClosure : public ClaimMetadataVisitingOopIterateClosure {\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}