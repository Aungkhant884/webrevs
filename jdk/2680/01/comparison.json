{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -74,1 +75,1 @@\n-    private char cb[];\n+    private char[] cb;\n@@ -149,1 +150,1 @@\n-                    char ncb[] = new char[readAheadLimit];\n+                    char[] ncb = new char[readAheadLimit];\n@@ -240,1 +241,2 @@\n-     * true: <ul>\n+     * true:\n+     * <ul>\n@@ -251,1 +253,2 @@\n-     * <\/ul> If the first {@code read} on the underlying stream returns\n+     * <\/ul>\n+     * If the first {@code read} on the underlying stream returns\n@@ -267,3 +270,3 @@\n-     * @param      cbuf  Destination buffer\n-     * @param      off   Offset at which to start storing characters\n-     * @param      len   Maximum number of characters to read\n+     * @param      cbuf  {@inheritDoc}\n+     * @param      off   {@inheritDoc}\n+     * @param      len   {@inheritDoc}\n@@ -271,2 +274,1 @@\n-     * @return     The number of characters read, or -1 if the end of the\n-     *             stream has been reached\n+     * @return     {@inheritDoc}\n@@ -274,1 +276,0 @@\n-     * @throws     IOException  If an I\/O error occurs\n@@ -276,0 +277,1 @@\n+     * @throws     IOException  {@inheritDoc}\n@@ -277,1 +279,1 @@\n-    public int read(char cbuf[], int off, int len) throws IOException {\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n@@ -280,4 +282,2 @@\n-            if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n-                ((off + len) > cbuf.length) || ((off + len) < 0)) {\n-                throw new IndexOutOfBoundsException();\n-            } else if (len == 0) {\n+            Objects.checkFromIndexSize(off, len, cbuf.length);\n+            if (len == 0) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Objects;\n+\n@@ -37,1 +39,1 @@\n-    protected char buf[];\n+    protected char[] buf;\n@@ -55,1 +57,1 @@\n-    public CharArrayReader(char buf[]) {\n+    public CharArrayReader(char[] buf) {\n@@ -78,1 +80,1 @@\n-    public CharArrayReader(char buf[], int offset, int length) {\n+    public CharArrayReader(char[] buf, int offset, int length) {\n@@ -112,5 +114,0 @@\n-     * @param   b  Destination buffer\n-     * @param   off  Offset at which to start storing characters\n-     * @param   len   Maximum number of characters to read\n-     * @return  The actual number of characters read, or -1 if\n-     *          the end of the stream has been reached\n@@ -118,2 +115,14 @@\n-     * @throws  IOException  If an I\/O error occurs\n-     * @throws  IndexOutOfBoundsException {@inheritDoc}\n+     * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n+     * returned; otherwise, there is an attempt to read at least one character.\n+     * If no character is available because the stream is at its end, the value\n+     * {@code -1} is returned; otherwise, at least one character is read and\n+     * stored into {@code cbuf}.\n+     *\n+     * @param      cbuf  {@inheritDoc}\n+     * @param      off   {@inheritDoc}\n+     * @param      len   {@inheritDoc}\n+     *\n+     * @return     {@inheritDoc}\n+     *\n+     * @throws     IndexOutOfBoundsException  {@inheritDoc}\n+     * @throws     IOException  {@inheritDoc}\n@@ -121,1 +130,1 @@\n-    public int read(char b[], int off, int len) throws IOException {\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n@@ -124,4 +133,2 @@\n-            if ((off < 0) || (off > b.length) || (len < 0) ||\n-                ((off + len) > b.length) || ((off + len) < 0)) {\n-                throw new IndexOutOfBoundsException();\n-            } else if (len == 0) {\n+            Objects.checkFromIndexSize(off, len, cbuf.length);\n+            if (len == 0) {\n@@ -142,1 +149,1 @@\n-            System.arraycopy(buf, pos, b, off, len);\n+            System.arraycopy(buf, pos, cbuf, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/CharArrayReader.java","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -69,4 +69,2 @@\n-     * Reads characters into a portion of an array.\n-     *\n-     * @throws     IOException  If an I\/O error occurs\n-     * @throws     IndexOutOfBoundsException {@inheritDoc}\n+     * {@inheritDoc}\n+     * @throws     IndexOutOfBoundsException  {@inheritDoc}\n@@ -74,1 +72,1 @@\n-    public int read(char cbuf[], int off, int len) throws IOException {\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilterReader.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,11 +165,2 @@\n-     * Reads characters into a portion of an array.\n-     *\n-     * @param      cbuf     Destination buffer\n-     * @param      offset   Offset at which to start storing characters\n-     * @param      length   Maximum number of characters to read\n-     *\n-     * @return     The number of characters read, or -1 if the end of the\n-     *             stream has been reached\n-     *\n-     * @throws     IOException  If an I\/O error occurs\n-     * @throws     IndexOutOfBoundsException {@inheritDoc}\n+     * {@inheritDoc}\n+     * @throws     IndexOutOfBoundsException  {@inheritDoc}\n@@ -177,2 +168,2 @@\n-    public int read(char cbuf[], int offset, int length) throws IOException {\n-        return sd.read(cbuf, offset, length);\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n+        return sd.read(cbuf, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStreamReader.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -165,2 +165,11 @@\n-     * Read characters into a portion of an array.\n-     * <a href=\"#lt\">Line terminators<\/a> are compressed into single newline\n+     * Reads characters into a portion of an array.  This method will block\n+     * until some input is available, an I\/O error occurs, or the end of the\n+     * stream is reached.\n+     *\n+     * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n+     * returned; otherwise, there is an attempt to read at least one character.\n+     * If no character is available because the stream is at its end, the value\n+     * {@code -1} is returned; otherwise, at least one character is read and\n+     * stored into {@code cbuf}.\n+     *\n+     * <p><a href=\"#lt\">Line terminators<\/a> are compressed into single newline\n@@ -171,8 +180,3 @@\n-     * @param  cbuf\n-     *         Destination buffer\n-     *\n-     * @param  off\n-     *         Offset at which to start storing characters\n-     *\n-     * @param  len\n-     *         Maximum number of characters to read\n+     * @param  cbuf  {@inheritDoc}\n+     * @param  off   {@inheritDoc}\n+     * @param  len   {@inheritDoc}\n@@ -180,5 +184,1 @@\n-     * @return  The number of characters read, or -1 if the end of the stream\n-     *          has already been reached\n-     *\n-     * @throws  IOException\n-     *          If an I\/O error occurs\n+     * @return  {@inheritDoc}\n@@ -187,0 +187,1 @@\n+     * @throws  IOException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/io\/LineNumberReader.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.Objects;\n@@ -273,5 +274,1 @@\n-     * Reads up to {@code len} characters of data from this piped\n-     * stream into an array of characters. Less than {@code len} characters\n-     * will be read if the end of the data stream is reached or if\n-     * {@code len} exceeds the pipe's buffer size. This method\n-     * blocks until at least one character of input is available.\n+     * {@inheritDoc}\n@@ -279,6 +276,10 @@\n-     * @param      cbuf     the buffer into which the data is read.\n-     * @param      off   the start offset of the data.\n-     * @param      len   the maximum number of characters read.\n-     * @return     the total number of characters read into the buffer, or\n-     *             {@code -1} if there is no more data because the end of\n-     *             the stream has been reached.\n+     * <p> Fewer than {@code len} characters will be read if\n+     * {@code len} exceeds the pipe's buffer size.\n+     *\n+     * @param      cbuf  {@inheritDoc}\n+     * @param      off   {@inheritDoc}\n+     * @param      len   {@inheritDoc}\n+     *\n+     * @return     {@inheritDoc}\n+     *\n+     * @throws     IndexOutOfBoundsException {@inheritDoc}\n@@ -289,1 +290,0 @@\n-     * @throws     IndexOutOfBoundsException {@inheritDoc}\n@@ -301,4 +301,2 @@\n-        if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n-            ((off + len) > cbuf.length) || ((off + len) < 0)) {\n-            throw new IndexOutOfBoundsException();\n-        } else if (len == 0) {\n+        Objects.checkFromIndexSize(off, len, cbuf.length);\n+        if (len == 0) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedReader.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Objects;\n@@ -95,11 +96,1 @@\n-     * Reads characters into a portion of an array.\n-     *\n-     * @param      cbuf  Destination buffer\n-     * @param      off   Offset at which to start writing characters\n-     * @param      len   Maximum number of characters to read\n-     *\n-     * @return     The number of characters read, or -1 if the end of the\n-     *             stream has been reached\n-     *\n-     * @throws     IOException  If an I\/O error occurs\n-     * @throws     IndexOutOfBoundsException {@inheritDoc}\n+     * {@inheritDoc}\n@@ -107,1 +98,1 @@\n-    public int read(char cbuf[], int off, int len) throws IOException {\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n@@ -111,6 +102,2 @@\n-                if (len <= 0) {\n-                    if (len < 0) {\n-                        throw new IndexOutOfBoundsException();\n-                    } else if ((off < 0) || (off > cbuf.length)) {\n-                        throw new IndexOutOfBoundsException();\n-                    }\n+                Objects.checkFromIndexSize(off, len, cbuf.length);\n+                if (len == 0) {\n@@ -175,1 +162,1 @@\n-    public void unread(char cbuf[], int off, int len) throws IOException {\n+    public void unread(char[] cbuf, int off, int len) throws IOException {\n@@ -196,1 +183,1 @@\n-    public void unread(char cbuf[]) throws IOException {\n+    public void unread(char[] cbuf) throws IOException {\n","filename":"src\/java.base\/share\/classes\/java\/io\/PushbackReader.java","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -256,1 +256,0 @@\n-     * @throws     IOException  If an I\/O error occurs\n@@ -260,0 +259,1 @@\n+     * @throws     IOException  If an I\/O error occurs\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Objects;\n@@ -79,3 +80,5 @@\n-     * @param      cbuf  Destination buffer\n-     * @param      off   Offset at which to start writing characters\n-     * @param      len   Maximum number of characters to read\n+     * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n+     * returned; otherwise, there is an attempt to read at least one character.\n+     * If no character is available because the stream is at its end, the value\n+     * {@code -1} is returned; otherwise, at least one character is read and\n+     * stored into {@code cbuf}.\n@@ -83,2 +86,3 @@\n-     * @return     The number of characters read, or -1 if the end of the\n-     *             stream has been reached\n+     * @param      cbuf  {@inheritDoc}\n+     * @param      off   {@inheritDoc}\n+     * @param      len   {@inheritDoc}\n@@ -86,2 +90,4 @@\n-     * @throws     IOException  If an I\/O error occurs\n-     * @throws     IndexOutOfBoundsException {@inheritDoc}\n+     * @return     {@inheritDoc}\n+     *\n+     * @throws     IndexOutOfBoundsException  {@inheritDoc}\n+     * @throws     IOException  {@inheritDoc}\n@@ -89,1 +95,1 @@\n-    public int read(char cbuf[], int off, int len) throws IOException {\n+    public int read(char[] cbuf, int off, int len) throws IOException {\n@@ -92,4 +98,2 @@\n-            if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n-                ((off + len) > cbuf.length) || ((off + len) < 0)) {\n-                throw new IndexOutOfBoundsException();\n-            } else if (len == 0) {\n+            Objects.checkFromIndexSize(off, len, cbuf.length);\n+            if (len == 0) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringReader.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"}]}