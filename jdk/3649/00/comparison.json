{"files":[{"patch":"@@ -136,1 +136,0 @@\n-java\/awt\/Focus\/KeyEventForBadFocusOwnerTest\/KeyEventForBadFocusOwnerTest.java 8198621 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+    static JFrame frame;\n@@ -59,46 +60,48 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                JFrame frame = new JFrame(\"TEST\");\n-                JMenuBar mb = new JMenuBar();\n-                JMenu one = new JMenu(ITEM_ONE_TEXT);\n-                JMenu two = new JMenu(ITEM_TWO_TEXT);\n-\n-                mb.add(one);\n-                mb.add(two);\n-\n-                ActionListener al = new ActionListener() {\n-                    public void actionPerformed(ActionEvent ae) {\n-                        String itemText = ((JMenuItem)ae.getSource()).getText();\n-                        System.out.println(\"--> \" + itemText);\n-                        unexpectedItemSelected = true;\n-                    }\n-                };\n-                one.setMnemonic(KeyEvent.VK_O);\n-                JMenuItem item = new JMenuItem(\"one 1\");\n-                item.setMnemonic(KeyEvent.VK_O);\n-                item.addActionListener(al);\n-                one.add(item);\n-                one.add(\"two\");\n-                one.add(\"three\");\n-\n-                two.setMnemonic(KeyEvent.VK_T);\n-                item = new JMenuItem(\"two 2\");\n-                item.setMnemonic(KeyEvent.VK_T);\n-                item.addActionListener(al);\n-                two.add(item);\n-                two.add(\"three\");\n-                two.add(\"four\");\n-\n-                PopupMenuListener popupMenuListener = new PopupMenuListener() {\n-                    public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n-                        System.out.print(e);\n-                        System.out.print(e.getSource());\n-                        String itemText = ((JPopupMenu)e.getSource()).getName();\n-                        System.out.println(\"Menu \" + itemText + \"is opened.\");\n-                        switch(itemText) {\n-                            case ITEM_ONE_TEXT:\n-                                itemOneSelected = true;\n-                                break;\n-                            case ITEM_TWO_TEXT:\n-                                itemTwoSelected = true;\n-                                break;\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    frame = new JFrame(\"TEST\");\n+                    JMenuBar mb = new JMenuBar();\n+                    JMenu one = new JMenu(ITEM_ONE_TEXT);\n+                    JMenu two = new JMenu(ITEM_TWO_TEXT);\n+\n+                    mb.add(one);\n+                    mb.add(two);\n+\n+                    ActionListener al = new ActionListener() {\n+                        public void actionPerformed(ActionEvent ae) {\n+                            String itemText = ((JMenuItem)ae.getSource()).getText();\n+                            System.out.println(\"--> \" + itemText);\n+                            unexpectedItemSelected = true;\n+                        }\n+                    };\n+                    one.setMnemonic(KeyEvent.VK_O);\n+                    JMenuItem item = new JMenuItem(\"one 1\");\n+                    item.setMnemonic(KeyEvent.VK_O);\n+                    item.addActionListener(al);\n+                    one.add(item);\n+                    one.add(\"two\");\n+                    one.add(\"three\");\n+\n+                    two.setMnemonic(KeyEvent.VK_T);\n+                    item = new JMenuItem(\"two 2\");\n+                    item.setMnemonic(KeyEvent.VK_T);\n+                    item.addActionListener(al);\n+                    two.add(item);\n+                    two.add(\"three\");\n+                    two.add(\"four\");\n+\n+                    PopupMenuListener popupMenuListener = new PopupMenuListener() {\n+                        public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+                            System.out.print(e);\n+                            System.out.print(e.getSource());\n+                            String itemText = ((JPopupMenu)e.getSource()).getName();\n+                            System.out.println(\"Menu \" + itemText + \"is opened.\");\n+                            switch(itemText) {\n+                                case ITEM_ONE_TEXT:\n+                                    itemOneSelected = true;\n+                                    break;\n+                                case ITEM_TWO_TEXT:\n+                                    itemTwoSelected = true;\n+                                    break;\n+                            }\n@@ -106,27 +109,0 @@\n-                    }\n-\n-                    public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}\n-                    public void popupMenuCanceled(PopupMenuEvent e) {}\n-                };\n-                one.getPopupMenu().setName(ITEM_ONE_TEXT);\n-                two.getPopupMenu().setName(ITEM_TWO_TEXT);\n-                one.getPopupMenu().addPopupMenuListener(popupMenuListener);\n-                two.getPopupMenu().addPopupMenuListener(popupMenuListener);\n-                frame.setJMenuBar(mb);\n-                frame.setSize(100,100);\n-                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-                frame.pack();\n-                frame.setVisible(true);\n-            }\n-        });\n-\n-\n-        robot = new Robot();\n-        robot.setAutoDelay(100);\n-        robot.waitForIdle();\n-\n-        Util.hitMnemonics(robot, KeyEvent.VK_O);\n-        Util.hitMnemonics(robot, KeyEvent.VK_T);\n-\n-        robot.waitForIdle();\n-        Thread.sleep(1000); \/\/ workaround for MacOS\n@@ -134,5 +110,40 @@\n-        if (unexpectedItemSelected) {\n-            throw new Exception(\"Test failed. KeyEvent dispatched to old focus owner. \");\n-        }\n-        if (!itemOneSelected || !itemTwoSelected) {\n-            throw new Exception(\"Not all expected events were received\");\n+                        public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}\n+                        public void popupMenuCanceled(PopupMenuEvent e) {}\n+                    };\n+                    one.getPopupMenu().setName(ITEM_ONE_TEXT);\n+                    two.getPopupMenu().setName(ITEM_TWO_TEXT);\n+                    one.getPopupMenu().addPopupMenuListener(popupMenuListener);\n+                    two.getPopupMenu().addPopupMenuListener(popupMenuListener);\n+                    frame.setJMenuBar(mb);\n+                    frame.setSize(100,100);\n+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    frame.setLocationRelativeTo(null);\n+                    frame.pack();\n+                    frame.setVisible(true);\n+                }\n+            });\n+\n+\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Util.hitMnemonics(robot, KeyEvent.VK_O);\n+            Util.hitMnemonics(robot, KeyEvent.VK_T);\n+\n+            robot.waitForIdle();\n+            Thread.sleep(1000); \/\/ workaround for MacOS\n+\n+            if (unexpectedItemSelected) {\n+                throw new Exception(\"Test failed. KeyEvent dispatched to old focus owner. \");\n+            }\n+            if (!itemOneSelected || !itemTwoSelected) {\n+                throw new Exception(\"Not all expected events were received\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n","filename":"test\/jdk\/java\/awt\/Focus\/KeyEventForBadFocusOwnerTest\/KeyEventForBadFocusOwnerTest.java","additions":90,"deletions":79,"binary":false,"changes":169,"status":"modified"}]}