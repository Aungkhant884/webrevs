{"files":[{"patch":"@@ -77,1 +77,1 @@\n-            return Collections.EMPTY_LIST;\n+            return Collections.emptyList();\n@@ -141,1 +141,1 @@\n-                Future future = e.submit(Executors.callable(new PrivilegedAction() {\n+                Future<?> future = e.submit(Executors.callable(new PrivilegedAction<Object>() {\n@@ -162,1 +162,1 @@\n-                Future future = e.submit(Executors.callable(new PrivilegedExceptionAction() {\n+                Future<?> future = e.submit(Executors.callable(new PrivilegedExceptionAction<Object>() {\n@@ -180,1 +180,1 @@\n-                Future future = e.submit(Executors.callable(new PrivilegedExceptionAction() {\n+                Future<?> future = e.submit(Executors.callable(new PrivilegedExceptionAction<Object>() {\n@@ -243,1 +243,1 @@\n-            Callable c = new Callable() {\n+            Callable<Object> c = new Callable<Object>() {\n@@ -614,1 +614,1 @@\n-                for (Future future : futures)\n+                for (Future<?> future : futures)\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AbstractExecutorServiceTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-    static class Succeed extends AbstractQueue<Integer> {\n-        public boolean offer(Integer x) {\n+    static class Succeed extends AbstractQueue<Item> {\n+        public boolean offer(Item x) {\n@@ -57,2 +57,2 @@\n-        public Integer peek() { return one; }\n-        public Integer poll() { return one; }\n+        public Item peek() { return one; }\n+        public Item poll() { return one; }\n@@ -60,1 +60,1 @@\n-        public Iterator iterator() { return null; } \/\/ not needed\n+        public Iterator<Item> iterator() { return null; } \/\/ not needed\n@@ -63,2 +63,2 @@\n-    static class Fail extends AbstractQueue<Integer> {\n-        public boolean offer(Integer x) {\n+    static class Fail extends AbstractQueue<Item> {\n+        public boolean offer(Item x) {\n@@ -68,2 +68,2 @@\n-        public Integer peek() { return null; }\n-        public Integer poll() { return null; }\n+        public Item peek() { return null; }\n+        public Item poll() { return null; }\n@@ -71,1 +71,1 @@\n-        public Iterator iterator() { return null; } \/\/ not needed\n+        public Iterator<Item> iterator() { return null; } \/\/ not needed\n@@ -169,1 +169,1 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = new Item[SIZE];\n@@ -171,1 +171,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -182,1 +182,1 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = new Item[SIZE];\n@@ -184,1 +184,1 @@\n-            ints[i] = new Integer(i);\n+            items[i] = itemFor(i);\n@@ -186,1 +186,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -196,3 +196,1 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = seqItems(SIZE);\n@@ -200,1 +198,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AbstractQueueTest.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -80,1 +80,1 @@\n-        protected BlockingQueue emptyCollection() {\n+        protected BlockingQueue<Item> emptyCollection() {\n@@ -86,1 +86,1 @@\n-        protected BlockingQueue emptyCollection() {\n+        protected BlockingQueue<Item> emptyCollection() {\n@@ -93,1 +93,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -95,1 +95,1 @@\n-    static ArrayBlockingQueue<Integer> populatedQueue(int n) {\n+    static ArrayBlockingQueue<Item> populatedQueue(int n) {\n@@ -101,1 +101,1 @@\n-     * Integers 0 ... n - 1, with given capacity range and fairness.\n+     * Items 0 ... n - 1, with given capacity range and fairness.\n@@ -103,1 +103,1 @@\n-    static ArrayBlockingQueue<Integer> populatedQueue(\n+    static ArrayBlockingQueue<Item> populatedQueue(\n@@ -107,1 +107,1 @@\n-        ArrayBlockingQueue<Integer> q = new ArrayBlockingQueue<>(capacity);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<>(capacity);\n@@ -112,1 +112,1 @@\n-            for (int i = 0; i < n; i++) q.add(42);\n+            for (int i = 0; i < n; i++) q.add(fortytwo);\n@@ -116,4 +116,4 @@\n-            assertTrue(q.offer((Integer) i));\n-        assertEquals(size == 0, q.isEmpty());\n-        assertEquals(capacity - size, q.remainingCapacity());\n-        assertEquals(size, q.size());\n+            mustOffer(q, i);\n+        mustEqual(size == 0, q.isEmpty());\n+        mustEqual(capacity - size, q.remainingCapacity());\n+        mustEqual(size, q.size());\n@@ -121,1 +121,1 @@\n-            assertEquals((Integer) 0, q.peek());\n+            mustEqual(0, q.peek());\n@@ -129,1 +129,1 @@\n-        assertEquals(SIZE, new ArrayBlockingQueue(SIZE).remainingCapacity());\n+        mustEqual(SIZE, new ArrayBlockingQueue<Item>(SIZE).remainingCapacity());\n@@ -138,1 +138,1 @@\n-                new ArrayBlockingQueue(i);\n+                new ArrayBlockingQueue<Item>(i);\n@@ -143,1 +143,1 @@\n-                    new ArrayBlockingQueue(i, fair);\n+                    new ArrayBlockingQueue<Item>(i, fair);\n@@ -155,1 +155,1 @@\n-            new ArrayBlockingQueue(1, true, null);\n+            new ArrayBlockingQueue<Item>(1, true, null);\n@@ -164,1 +164,1 @@\n-        Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        Collection<Item> elements = Arrays.asList(new Item[SIZE]);\n@@ -166,1 +166,1 @@\n-            new ArrayBlockingQueue(SIZE, false, elements);\n+            new ArrayBlockingQueue<Item>(SIZE, false, elements);\n@@ -175,4 +175,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = i;\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        Item[] items = new Item[2]; items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -180,1 +178,1 @@\n-            new ArrayBlockingQueue(SIZE, false, elements);\n+            new ArrayBlockingQueue<Item>(SIZE, false, elements);\n@@ -190,2 +188,2 @@\n-        new ArrayBlockingQueue(SIZE, false,\n-                               Collections.nCopies(SIZE, \"\"));\n+        new ArrayBlockingQueue<Object>(SIZE, false,\n+                                       Collections.nCopies(SIZE, \"\"));\n@@ -193,1 +191,1 @@\n-            new ArrayBlockingQueue(SIZE - 1, false,\n+            new ArrayBlockingQueue<Object>(SIZE - 1, false,\n@@ -203,1 +201,3 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        Collection<Item> elements = Arrays.asList(items);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE, true, elements);\n@@ -205,5 +205,1 @@\n-            ints[i] = i;\n-        Collection<Integer> elements = Arrays.asList(ints);\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE, true, elements);\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -216,1 +212,1 @@\n-        BlockingQueue q = populatedQueue(0, 2, 2, false);\n+        BlockingQueue<Item> q = populatedQueue(0, 2, 2, false);\n@@ -218,1 +214,1 @@\n-        assertEquals(2, q.remainingCapacity());\n+        mustEqual(2, q.remainingCapacity());\n@@ -223,1 +219,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -232,1 +228,1 @@\n-        BlockingQueue q = populatedQueue(size, size, 2 * size, false);\n+        BlockingQueue<Item> q = populatedQueue(size, size, 2 * size, false);\n@@ -236,3 +232,3 @@\n-            assertEquals(spare + i, q.remainingCapacity());\n-            assertEquals(capacity, q.size() + q.remainingCapacity());\n-            assertEquals(i, q.remove());\n+            mustEqual(spare + i, q.remainingCapacity());\n+            mustEqual(capacity, q.size() + q.remainingCapacity());\n+            mustEqual(i, q.remove());\n@@ -241,3 +237,3 @@\n-            assertEquals(capacity - i, q.remainingCapacity());\n-            assertEquals(capacity, q.size() + q.remainingCapacity());\n-            assertTrue(q.add(i));\n+            mustEqual(capacity - i, q.remainingCapacity());\n+            mustEqual(capacity, q.size() + q.remainingCapacity());\n+            mustAdd(q, i);\n@@ -251,1 +247,1 @@\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(1);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(1);\n@@ -260,3 +256,3 @@\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE);\n-        for (int i = 0; i < SIZE; i++) assertTrue(q.add((Integer) i));\n-        assertEquals(0, q.remainingCapacity());\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE);\n+        for (int i = 0; i < SIZE; i++) assertTrue(q.add(itemFor(i)));\n+        mustEqual(0, q.remainingCapacity());\n@@ -264,1 +260,1 @@\n-            q.add((Integer) SIZE);\n+            q.add(itemFor(SIZE));\n@@ -273,1 +269,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -285,4 +281,2 @@\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE);\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -290,1 +284,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -300,1 +294,1 @@\n-        ArrayBlockingQueue q = populatedQueue(0, size, size, false);\n+        ArrayBlockingQueue<Item> q = populatedQueue(0, size, size, false);\n@@ -303,3 +297,3 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(size, q.size());\n-        assertEquals(0, q.peek());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(size, q.size());\n+        mustEqual(0, q.peek());\n@@ -308,1 +302,1 @@\n-            q.addAll(Collections.nCopies(size + 1, 42));\n+            q.addAll(Collections.nCopies(size + 1, fortytwo));\n@@ -317,5 +311,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE);\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE);\n@@ -323,1 +315,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -325,1 +317,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -332,1 +324,1 @@\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE);\n@@ -334,1 +326,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -336,1 +328,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -338,1 +330,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -345,1 +337,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE);\n@@ -350,3 +342,3 @@\n-                    q.put(i);\n-                assertEquals(SIZE, q.size());\n-                assertEquals(0, q.remainingCapacity());\n+                    q.put(itemFor(i));\n+                mustEqual(SIZE, q.size());\n+                mustEqual(0, q.remainingCapacity());\n@@ -356,1 +348,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -363,1 +355,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -373,2 +365,2 @@\n-        assertEquals(SIZE, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(SIZE, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -382,1 +374,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(capacity);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(capacity);\n@@ -388,1 +380,1 @@\n-                    q.put(i);\n+                    q.put(itemFor(i));\n@@ -390,1 +382,1 @@\n-                q.put(86);\n+                q.put(eightysix);\n@@ -394,1 +386,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -401,1 +393,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -408,2 +400,2 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(0, q.take());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(0, q.take());\n@@ -415,1 +407,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -422,1 +414,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(2);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(2);\n@@ -426,2 +418,2 @@\n-                q.put(new Object());\n-                q.put(new Object());\n+                q.put(one);\n+                q.put(two);\n@@ -429,1 +421,1 @@\n-                assertFalse(q.offer(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offer(zero, timeoutMillis(), MILLISECONDS));\n@@ -434,1 +426,1 @@\n-                    q.offer(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offer(three, randomTimeout(), randomTimeUnit());\n@@ -441,1 +433,1 @@\n-                    q.offer(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offer(four, LONGER_DELAY_MS, MILLISECONDS);\n@@ -457,1 +449,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -459,1 +451,1 @@\n-            assertEquals(i, q.take());\n+            mustEqual(i, q.take());\n@@ -467,1 +459,1 @@\n-        final ArrayBlockingQueue q = populatedQueue(SIZE);\n+        final ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -471,1 +463,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.take());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.take());\n@@ -498,1 +490,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -500,1 +492,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -509,1 +501,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -511,1 +503,1 @@\n-            assertEquals(i, q.poll(0, MILLISECONDS));\n+            mustEqual(i, q.poll(0, MILLISECONDS));\n@@ -521,1 +513,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -524,1 +516,1 @@\n-            assertEquals(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -538,1 +530,1 @@\n-        final BlockingQueue<Integer> q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -543,1 +535,1 @@\n-                    assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -571,1 +563,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -573,2 +565,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -585,1 +577,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -587,2 +579,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -600,1 +592,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -602,1 +594,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -615,1 +607,1 @@\n-        ArrayBlockingQueue q = populatedQueue(size, size, 2 * size, false);\n+        ArrayBlockingQueue<Item> q = populatedQueue(size, size, 2 * size, false);\n@@ -618,3 +610,3 @@\n-            assertTrue(q.contains(new Integer(i)));\n-            assertEquals(i, q.poll());\n-            assertFalse(q.contains(new Integer(i)));\n+            mustContain(q, i);\n+            mustEqual(i, q.poll());\n+            mustNotContain(q, i);\n@@ -629,1 +621,1 @@\n-        ArrayBlockingQueue q = populatedQueue(size, size, 2 * size, false);\n+        ArrayBlockingQueue<Item> q = populatedQueue(size, size, 2 * size, false);\n@@ -633,2 +625,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(capacity, q.remainingCapacity());\n+        mustEqual(0, q.size());\n+        mustEqual(capacity, q.remainingCapacity());\n@@ -637,1 +629,1 @@\n-        assertTrue(q.contains(one));\n+        mustContain(q, one);\n@@ -646,2 +638,2 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n-        ArrayBlockingQueue p = new ArrayBlockingQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> p = new ArrayBlockingQueue<Item>(SIZE);\n@@ -651,1 +643,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -660,2 +652,2 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n-        ArrayBlockingQueue p = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> p = populatedQueue(SIZE);\n@@ -670,1 +662,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -680,2 +672,2 @@\n-            ArrayBlockingQueue q = populatedQueue(SIZE);\n-            ArrayBlockingQueue p = populatedQueue(i);\n+            ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n+            ArrayBlockingQueue<Item> p = populatedQueue(i);\n@@ -683,1 +675,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -685,2 +677,2 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                Item x = p.remove();\n+                mustNotContain(q, x);\n@@ -691,1 +683,1 @@\n-    void checkToArray(ArrayBlockingQueue<Integer> q) {\n+    void checkToArray(ArrayBlockingQueue<Item> q) {\n@@ -694,6 +686,6 @@\n-        assertEquals(size, a1.length);\n-        Integer[] a2 = q.toArray(new Integer[0]);\n-        assertEquals(size, a2.length);\n-        Integer[] a3 = q.toArray(new Integer[Math.max(0, size - 1)]);\n-        assertEquals(size, a3.length);\n-        Integer[] a4 = new Integer[size];\n+        mustEqual(size, a1.length);\n+        Item[] a2 = q.toArray(new Item[0]);\n+        mustEqual(size, a2.length);\n+        Item[] a3 = q.toArray(new Item[Math.max(0, size - 1)]);\n+        mustEqual(size, a3.length);\n+        Item[] a4 = new Item[size];\n@@ -701,2 +693,2 @@\n-        Integer[] a5 = new Integer[size + 1];\n-        Arrays.fill(a5, 42);\n+        Item[] a5 = new Item[size + 1];\n+        Arrays.fill(a5, fortytwo);\n@@ -704,2 +696,2 @@\n-        Integer[] a6 = new Integer[size + 2];\n-        Arrays.fill(a6, 42);\n+        Item[] a6 = new Item[size + 2];\n+        Arrays.fill(a6, fortytwo);\n@@ -710,1 +702,1 @@\n-            if (a.length > size + 1) assertEquals(42, a[size + 1]);\n+            if (a.length > size + 1) mustEqual(fortytwo, a[size + 1]);\n@@ -712,2 +704,2 @@\n-        Iterator it = q.iterator();\n-        Integer s = q.peek();\n+        Iterator<? extends Item> it = q.iterator();\n+        Item s = q.peek();\n@@ -715,2 +707,2 @@\n-            Integer x = (Integer) it.next();\n-            assertEquals(s + i, (int) x);\n+            Item x = (Item) it.next();\n+            mustEqual(s.value + i, x);\n@@ -718,1 +710,1 @@\n-                assertSame(a[i], x);\n+                mustEqual(a[i], x);\n@@ -729,1 +721,1 @@\n-        ArrayBlockingQueue<Integer> q = new ArrayBlockingQueue<>(capacity);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<>(capacity);\n@@ -732,1 +724,1 @@\n-            q.add(i);\n+            mustAdd(q, i);\n@@ -738,2 +730,2 @@\n-            assertEquals((Integer) i, q.poll());\n-            q.add(size + i);\n+            mustEqual(i, q.poll());\n+            q.add(new Item(size + i));\n@@ -743,1 +735,1 @@\n-            assertEquals((Integer) (added + i), q.poll());\n+            mustEqual((added + i), q.poll());\n@@ -751,1 +743,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -766,2 +758,2 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -770,2 +762,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -776,2 +768,2 @@\n-            assertEquals(it.next(), q.take());\n-        assertEquals(i, SIZE);\n+            mustEqual(it.next(), q.take());\n+        mustEqual(i, SIZE);\n@@ -785,1 +777,1 @@\n-        assertIteratorExhausted(new ArrayBlockingQueue(SIZE).iterator());\n+        assertIteratorExhausted(new ArrayBlockingQueue<Item>(SIZE).iterator());\n@@ -792,1 +784,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(3);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(3);\n@@ -797,1 +789,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -811,1 +803,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(3);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(3);\n@@ -819,2 +811,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -822,1 +814,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -829,1 +821,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(3);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(3);\n@@ -833,1 +825,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -837,1 +829,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -844,1 +836,1 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -855,1 +847,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(2);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(2);\n@@ -866,1 +858,1 @@\n-                    assertEquals(0, q.remainingCapacity());\n+                    mustEqual(0, q.remainingCapacity());\n@@ -872,1 +864,1 @@\n-                    assertEquals(0, q.remainingCapacity());\n+                    mustEqual(0, q.remainingCapacity());\n@@ -882,1 +874,1 @@\n-        final ArrayBlockingQueue q = new ArrayBlockingQueue(2);\n+        final ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(2);\n@@ -906,2 +898,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -910,2 +902,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -915,1 +907,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -924,2 +916,2 @@\n-        ArrayBlockingQueue q = populatedQueue(SIZE);\n-        ArrayList l = new ArrayList();\n+        ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -927,2 +919,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, l.size());\n@@ -930,1 +922,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -934,2 +926,2 @@\n-        assertTrue(q.contains(zero));\n-        assertTrue(q.contains(one));\n+        mustContain(q, zero);\n+        mustContain(q, one);\n@@ -938,2 +930,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -941,1 +933,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -948,1 +940,1 @@\n-        final ArrayBlockingQueue q = populatedQueue(SIZE);\n+        final ArrayBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -951,1 +943,1 @@\n-                q.put(new Integer(SIZE + 1));\n+                q.put(new Item(SIZE + 1));\n@@ -955,1 +947,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -959,1 +951,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -968,1 +960,1 @@\n-        ArrayBlockingQueue q = new ArrayBlockingQueue(SIZE * 2);\n+        ArrayBlockingQueue<Item> q = new ArrayBlockingQueue<Item>(SIZE * 2);\n@@ -971,2 +963,2 @@\n-                assertTrue(q.offer(new Integer(j)));\n-            ArrayList l = new ArrayList();\n+                mustOffer(q, j);\n+            ArrayList<Item> l = new ArrayList<Item>();\n@@ -975,2 +967,2 @@\n-            assertEquals(k, l.size());\n-            assertEquals(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n@@ -978,1 +970,1 @@\n-                assertEquals(l.get(j), new Integer(j));\n+                mustEqual(l.get(j), j);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ArrayBlockingQueueTest.java","additions":193,"deletions":201,"binary":false,"changes":394,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                     () -> new ArrayDeque().spliterator().getComparator());\n+                     () -> new ArrayDeque<Item>().spliterator().getComparator());\n@@ -62,2 +62,2 @@\n-        ArrayDeque q = new ArrayDeque();\n-        Spliterator s = q.spliterator();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n+        Spliterator<Item> s = q.spliterator();\n@@ -69,1 +69,1 @@\n-        assertEquals(required, characteristics & required);\n+        mustEqual(required, characteristics & required);\n@@ -71,1 +71,1 @@\n-        assertEquals(0, characteristics\n+        mustEqual(0, characteristics\n@@ -88,1 +88,1 @@\n-        final Integer e = 42;\n+        final Item e = fortytwo;\n@@ -92,1 +92,1 @@\n-                     () -> new ArrayDeque(Integer.MAX_VALUE));\n+                     () -> new ArrayDeque<Item>(Integer.MAX_VALUE));\n@@ -95,2 +95,2 @@\n-            ArrayDeque q = new ArrayDeque(maxArraySize - 1);\n-            assertEquals(0, q.size());\n+            ArrayDeque<Object> q = new ArrayDeque<Object>(maxArraySize - 1);\n+            mustEqual(0, q.size());\n@@ -102,1 +102,1 @@\n-            ArrayDeque q = new ArrayDeque();\n+            ArrayDeque<Object> q = new ArrayDeque<Object>();\n@@ -104,8 +104,8 @@\n-            assertEquals(e, q.peekFirst());\n-            assertEquals(e, q.peekLast());\n-            assertEquals(maxArraySize - 3, q.size());\n-            q.addFirst((Integer) 0);\n-            q.addLast((Integer) 1);\n-            assertEquals((Integer) 0, q.peekFirst());\n-            assertEquals((Integer) 1, q.peekLast());\n-            assertEquals(maxArraySize - 1, q.size());\n+            mustEqual(e, q.peekFirst());\n+            mustEqual(e, q.peekLast());\n+            mustEqual(maxArraySize - 3, q.size());\n+            q.addFirst(zero);\n+            q.addLast(one);\n+            mustEqual(zero, q.peekFirst());\n+            mustEqual(one, q.peekLast());\n+            mustEqual(maxArraySize - 1, q.size());\n@@ -113,1 +113,1 @@\n-            ArrayDeque smallish = new ArrayDeque(\n+            ArrayDeque<Object> smallish = new ArrayDeque<Object>(\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ArrayDeque8Test.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -66,1 +66,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -68,1 +68,1 @@\n-    private static ArrayDeque<Integer> populatedDeque(int n) {\n+    private static ArrayDeque<Item> populatedDeque(int n) {\n@@ -71,1 +71,1 @@\n-        final ArrayDeque<Integer> q;\n+        final ArrayDeque<Item> q;\n@@ -74,6 +74,6 @@\n-        case 0: q = new ArrayDeque<Integer>();      break;\n-        case 1: q = new ArrayDeque<Integer>(0);     break;\n-        case 2: q = new ArrayDeque<Integer>(1);     break;\n-        case 3: q = new ArrayDeque<Integer>(Math.max(0, n - 1)); break;\n-        case 4: q = new ArrayDeque<Integer>(n);     break;\n-        case 5: q = new ArrayDeque<Integer>(n + 1); break;\n+        case 0: q = new ArrayDeque<Item>();      break;\n+        case 1: q = new ArrayDeque<Item>(0);     break;\n+        case 2: q = new ArrayDeque<Item>(1);     break;\n+        case 3: q = new ArrayDeque<Item>(Math.max(0, n - 1)); break;\n+        case 4: q = new ArrayDeque<Item>(n);     break;\n+        case 5: q = new ArrayDeque<Item>(n + 1); break;\n@@ -84,2 +84,2 @@\n-            q.addFirst(42);\n-            assertEquals((Integer) 42, q.removeLast());\n+            q.addFirst(fortytwo);\n+            mustEqual(42, q.removeLast());\n@@ -88,2 +88,2 @@\n-            q.addLast(42);\n-            assertEquals((Integer) 42, q.removeFirst());\n+            q.addLast(fortytwo);\n+            mustEqual(42, q.removeFirst());\n@@ -97,1 +97,1 @@\n-                assertTrue(q.offerLast((Integer) i));\n+                assertTrue(q.offerLast(itemFor(i)));\n@@ -100,2 +100,2 @@\n-                q.addFirst((Integer) i);\n-        assertEquals(n, q.size());\n+                q.addFirst(itemFor(i));\n+        mustEqual(n, q.size());\n@@ -104,2 +104,2 @@\n-            assertEquals((Integer) 0, q.peekFirst());\n-            assertEquals((Integer) (n - 1), q.peekLast());\n+            mustEqual(0, q.peekFirst());\n+            mustEqual((n - 1), q.peekLast());\n@@ -114,1 +114,1 @@\n-        assertEquals(0, new ArrayDeque().size());\n+        mustEqual(0, new ArrayDeque<Item>().size());\n@@ -122,1 +122,1 @@\n-            new ArrayDeque((Collection)null);\n+            new ArrayDeque<Object>((Collection<Object>)null);\n@@ -132,1 +132,1 @@\n-            new ArrayDeque(Arrays.asList(new Integer[SIZE]));\n+            new ArrayDeque<Item>(Arrays.asList(new Item[SIZE]));\n@@ -141,3 +141,1 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -145,1 +143,1 @@\n-            new ArrayDeque(Arrays.asList(ints));\n+            new ArrayDeque<Item>(Arrays.asList(items));\n@@ -154,1 +152,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        ArrayDeque<Item> q = new ArrayDeque<Item>(Arrays.asList(items));\n@@ -156,4 +155,1 @@\n-            ints[i] = new Integer(i);\n-        ArrayDeque q = new ArrayDeque(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -166,1 +162,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -168,1 +164,1 @@\n-        q.add(new Integer(1));\n+        q.add(one);\n@@ -170,1 +166,1 @@\n-        q.add(new Integer(2));\n+        q.add(two);\n@@ -180,1 +176,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -182,1 +178,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -186,2 +182,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -195,1 +191,1 @@\n-        ArrayDeque q = new ArrayDeque(1);\n+        ArrayDeque<Item> q = new ArrayDeque<Item>(1);\n@@ -206,1 +202,1 @@\n-        ArrayDeque q = populatedDeque(3);\n+        ArrayDeque<Item> q = populatedDeque(3);\n@@ -216,1 +212,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -218,1 +214,1 @@\n-            assertEquals(i, q.pop());\n+            mustEqual(i, q.pop());\n@@ -230,1 +226,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -241,1 +237,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -252,1 +248,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -263,1 +259,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -274,1 +270,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -285,1 +281,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -296,1 +292,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -307,1 +303,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -318,1 +314,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -329,1 +325,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -340,1 +336,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -351,1 +347,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -362,1 +358,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -373,1 +369,1 @@\n-        ArrayDeque q = new ArrayDeque();\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -375,1 +371,1 @@\n-            q.addAll(Arrays.asList(new Integer[SIZE]));\n+            q.addAll(Arrays.asList(new Item[SIZE]));\n@@ -385,4 +381,2 @@\n-        ArrayDeque q = new ArrayDeque();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -390,1 +384,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -399,5 +393,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        ArrayDeque q = new ArrayDeque();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -405,1 +397,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -407,1 +399,1 @@\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -414,1 +406,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -416,1 +408,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -425,1 +417,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -427,1 +419,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -436,1 +428,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -438,1 +430,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -447,1 +439,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -449,1 +441,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -461,1 +453,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -463,4 +455,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -469,5 +461,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -482,1 +474,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -484,2 +476,2 @@\n-            assertEquals(i, q.peekFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.peekFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -496,1 +488,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -498,2 +490,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -510,1 +502,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -512,2 +504,2 @@\n-            assertEquals(i, q.peekLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.peekLast());\n+            mustEqual(i, q.pollLast());\n@@ -524,1 +516,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -526,2 +518,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -539,1 +531,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -541,2 +533,2 @@\n-            assertEquals(i, q.getFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.getFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -554,1 +546,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -556,2 +548,2 @@\n-            assertEquals(i, q.getLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.getLast());\n+            mustEqual(i, q.pollLast());\n@@ -570,1 +562,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -572,1 +564,1 @@\n-            assertEquals(i, q.removeFirst());\n+            mustEqual(i, q.removeFirst());\n@@ -585,1 +577,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -587,1 +579,1 @@\n-            assertEquals(i, q.removeLast());\n+            mustEqual(i, q.removeLast());\n@@ -600,1 +592,1 @@\n-        Deque<Integer> q = populatedDeque(SIZE);\n+        Deque<Item> q = populatedDeque(SIZE);\n@@ -603,2 +595,2 @@\n-            assertTrue(q.removeFirstOccurrence(i));\n-            assertFalse(q.contains(i));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n+            mustNotContain(q, i);\n@@ -607,4 +599,4 @@\n-            assertTrue(q.removeFirstOccurrence(i));\n-            assertFalse(q.removeFirstOccurrence(i + 1));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.contains(i + 1));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n+            assertFalse(q.removeFirstOccurrence(itemFor(i + 1)));\n+            mustNotContain(q, i);\n+            mustNotContain(q, i + 1);\n@@ -614,2 +606,2 @@\n-        assertFalse(q.removeFirstOccurrence(42));\n-        q = new ArrayDeque();\n+        assertFalse(q.removeFirstOccurrence(fortytwo));\n+        q = new ArrayDeque<Item>();\n@@ -617,1 +609,1 @@\n-        assertFalse(q.removeFirstOccurrence(42));\n+        assertFalse(q.removeFirstOccurrence(fortytwo));\n@@ -624,1 +616,1 @@\n-        Deque<Integer> q = populatedDeque(SIZE);\n+        Deque<Item> q = populatedDeque(SIZE);\n@@ -627,2 +619,2 @@\n-            assertTrue(q.removeLastOccurrence(i));\n-            assertFalse(q.contains(i));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n+            mustNotContain(q, i);\n@@ -631,4 +623,4 @@\n-            assertTrue(q.removeLastOccurrence(i));\n-            assertFalse(q.removeLastOccurrence(i + 1));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.contains(i + 1));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n+            assertFalse(q.removeLastOccurrence(itemFor(i + 1)));\n+            mustNotContain(q, i);\n+            mustNotContain(q, i + 1);\n@@ -638,2 +630,2 @@\n-        assertFalse(q.removeLastOccurrence(42));\n-        q = new ArrayDeque();\n+        assertFalse(q.removeLastOccurrence(fortytwo));\n+        q = new ArrayDeque<Item>();\n@@ -641,1 +633,1 @@\n-        assertFalse(q.removeLastOccurrence(42));\n+        assertFalse(q.removeLastOccurrence(fortytwo));\n@@ -648,1 +640,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -650,3 +642,3 @@\n-            assertTrue(q.contains(new Integer(i)));\n-            assertEquals(i, q.pollFirst());\n-            assertFalse(q.contains(new Integer(i)));\n+            mustContain(q, i);\n+            mustEqual(i, q.pollFirst());\n+            mustNotContain(q, i);\n@@ -660,1 +652,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -663,2 +655,2 @@\n-        assertEquals(0, q.size());\n-        assertTrue(q.add(new Integer(1)));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -674,2 +666,2 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n-        ArrayDeque p = new ArrayDeque();\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n+        ArrayDeque<Item> p = new ArrayDeque<Item>();\n@@ -679,1 +671,1 @@\n-            assertTrue(p.add(new Integer(i)));\n+            mustAdd(p, i);\n@@ -688,2 +680,2 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n-        ArrayDeque p = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n+        ArrayDeque<Item> p = populatedDeque(SIZE);\n@@ -692,1 +684,1 @@\n-            assertEquals(changed, (i > 0));\n+            mustEqual(changed, (i > 0));\n@@ -694,1 +686,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -704,2 +696,2 @@\n-            ArrayDeque q = populatedDeque(SIZE);\n-            ArrayDeque p = populatedDeque(i);\n+            ArrayDeque<Item> q = populatedDeque(SIZE);\n+            ArrayDeque<Item> p = populatedDeque(i);\n@@ -707,1 +699,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -709,1 +701,1 @@\n-                assertFalse(q.contains(p.removeFirst()));\n+                mustNotContain(q, p.removeFirst());\n@@ -714,1 +706,1 @@\n-    void checkToArray(ArrayDeque<Integer> q) {\n+    void checkToArray(ArrayDeque<Item> q) {\n@@ -717,6 +709,6 @@\n-        assertEquals(size, a1.length);\n-        Integer[] a2 = q.toArray(new Integer[0]);\n-        assertEquals(size, a2.length);\n-        Integer[] a3 = q.toArray(new Integer[Math.max(0, size - 1)]);\n-        assertEquals(size, a3.length);\n-        Integer[] a4 = new Integer[size];\n+        mustEqual(size, a1.length);\n+        Item[] a2 = q.toArray(new Item[0]);\n+        mustEqual(size, a2.length);\n+        Item[] a3 = q.toArray(new Item[Math.max(0, size - 1)]);\n+        mustEqual(size, a3.length);\n+        Item[] a4 = new Item[size];\n@@ -724,2 +716,2 @@\n-        Integer[] a5 = new Integer[size + 1];\n-        Arrays.fill(a5, 42);\n+        Item[] a5 = new Item[size + 1];\n+        Arrays.fill(a5, fortytwo);\n@@ -727,2 +719,2 @@\n-        Integer[] a6 = new Integer[size + 2];\n-        Arrays.fill(a6, 42);\n+        Item[] a6 = new Item[size + 2];\n+        Arrays.fill(a6, fortytwo);\n@@ -733,1 +725,1 @@\n-            if (a.length > size + 1) assertEquals(42, a[size + 1]);\n+            if (a.length > size + 1) mustEqual(fortytwo, a[size + 1]);\n@@ -735,2 +727,2 @@\n-        Iterator it = q.iterator();\n-        Integer s = q.peekFirst();\n+        Iterator<? extends Item> it = q.iterator();\n+        Item s = q.peekFirst();\n@@ -738,2 +730,2 @@\n-            Integer x = (Integer) it.next();\n-            assertEquals(s + i, (int) x);\n+            Item x = (Item) it.next();\n+            mustEqual(s.value + i, x);\n@@ -750,1 +742,1 @@\n-        ArrayDeque<Integer> q = new ArrayDeque<>(size);\n+        ArrayDeque<Item> q = new ArrayDeque<>(size);\n@@ -753,1 +745,1 @@\n-            q.addLast(i);\n+            q.addLast(itemFor(i));\n@@ -759,2 +751,2 @@\n-            assertEquals((Integer) i, q.poll());\n-            q.addLast(size + i);\n+            mustEqual(i, q.poll());\n+            q.addLast(itemFor(size + i));\n@@ -764,1 +756,1 @@\n-            assertEquals((Integer) (added + i), q.poll());\n+            mustEqual((added + i), q.poll());\n@@ -772,2 +764,2 @@\n-        ArrayDeque l = new ArrayDeque();\n-        l.add(new Object());\n+        ArrayDeque<Item> l = new ArrayDeque<Item>();\n+        l.add(zero);\n@@ -784,2 +776,2 @@\n-        ArrayDeque l = new ArrayDeque();\n-        l.add(new Integer(5));\n+        ArrayDeque<Item> l = new ArrayDeque<Item>();\n+        l.add(five);\n@@ -800,2 +792,2 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n-        Iterator it = q.iterator();\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -804,2 +796,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -813,1 +805,1 @@\n-        Deque c = new ArrayDeque();\n+        Deque<Item> c = new ArrayDeque<Item>();\n@@ -822,1 +814,1 @@\n-        final ArrayDeque q = new ArrayDeque();\n+        final ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -827,2 +819,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -831,1 +823,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -838,1 +830,1 @@\n-        final ArrayDeque q = new ArrayDeque();\n+        final ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -844,2 +836,2 @@\n-                q.add(new Integer(j));\n-            Iterator it = q.iterator();\n+                mustAdd(q, j);\n+            Iterator<? extends Item> it = q.iterator();\n@@ -847,1 +839,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -849,1 +841,1 @@\n-            assertEquals(it.next(), new Integer(split + 1));\n+            mustEqual(it.next(), split + 1);\n@@ -851,1 +843,1 @@\n-                q.remove(new Integer(j));\n+                q.remove(itemFor(j));\n@@ -854,1 +846,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -866,1 +858,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -868,1 +860,1 @@\n-        Iterator it = q.descendingIterator();\n+        Iterator<? extends Item> it = q.descendingIterator();\n@@ -870,1 +862,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -873,1 +865,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -885,1 +877,1 @@\n-        final ArrayDeque q = new ArrayDeque();\n+        final ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -887,3 +879,3 @@\n-            q.add(new Integer(3));\n-            q.add(new Integer(2));\n-            q.add(new Integer(1));\n+            q.add(three);\n+            q.add(two);\n+            q.add(one);\n@@ -891,2 +883,2 @@\n-            for (Iterator it = q.descendingIterator(); it.hasNext();) {\n-                assertEquals(++k, it.next());\n+            for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext();) {\n+                mustEqual(++k, it.next());\n@@ -895,1 +887,1 @@\n-            assertEquals(3, k);\n+            mustEqual(3, k);\n@@ -906,1 +898,1 @@\n-        final ArrayDeque q = new ArrayDeque();\n+        final ArrayDeque<Item> q = new ArrayDeque<Item>();\n@@ -912,2 +904,2 @@\n-                q.add(new Integer(j));\n-            Iterator it = q.descendingIterator();\n+                q.add(itemFor(j));\n+            Iterator<? extends Item> it = q.descendingIterator();\n@@ -915,1 +907,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), itemFor(j));\n@@ -917,1 +909,1 @@\n-            assertEquals(it.next(), new Integer(split + 1));\n+            mustEqual(it.next(), itemFor(split + 1));\n@@ -919,1 +911,1 @@\n-                q.remove(new Integer(j));\n+                q.remove(itemFor(j));\n@@ -922,1 +914,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -934,1 +926,1 @@\n-        ArrayDeque q = populatedDeque(SIZE);\n+        ArrayDeque<Item> q = populatedDeque(SIZE);\n@@ -945,2 +937,2 @@\n-        Queue x = populatedDeque(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedDeque(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -949,3 +941,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(Arrays.toString(x.toArray()), Arrays.toString(y.toArray()));\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(Arrays.toString(x.toArray()), Arrays.toString(y.toArray()));\n@@ -955,1 +947,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -964,2 +956,2 @@\n-        ArrayDeque<Integer> x = populatedDeque(SIZE);\n-        ArrayDeque<Integer> y = x.clone();\n+        ArrayDeque<Item> x = populatedDeque(SIZE);\n+        ArrayDeque<Item> y = x.clone();\n@@ -968,2 +960,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -973,1 +965,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ArrayDequeTest.java","additions":210,"deletions":218,"binary":false,"changes":428,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -69,5 +69,6 @@\n-        ArrayList<Integer> x = new ArrayList<>();\n-        x.add(1);\n-        x.add(2);\n-        x.add(3);\n-        ArrayList<Integer> y = (ArrayList<Integer>) x.clone();\n+        ArrayList<Item> x = new ArrayList<>();\n+        x.add(one);\n+        x.add(two);\n+        x.add(three);\n+        @SuppressWarnings(\"unchecked\")\n+        ArrayList<Item> y = (ArrayList<Item>) x.clone();\n@@ -76,4 +77,4 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -83,1 +84,1 @@\n-            assertEquals(x.remove(0), y.remove(0));\n+            mustEqual(x.remove(0), y.remove(0));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ArrayListTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-    static Integer addInteger17(Integer x) {\n-        return x.intValue() + 17;\n+    static Item addItem17(Item x) {\n+        return new Item(x.intValue() + 17);\n@@ -65,2 +65,2 @@\n-    static Integer sumInteger(Integer x, Integer y) {\n-        return x.intValue() + y.intValue();\n+    static Item sumItem(Item x, Item y) {\n+        return new Item(x.intValue() + y.intValue());\n@@ -71,1 +71,1 @@\n-    volatile Integer anIntegerField;\n+    volatile Item anItemField;\n@@ -83,1 +83,1 @@\n-    AtomicReferenceFieldUpdater<Atomic8Test,Integer> anIntegerFieldUpdater() {\n+    AtomicReferenceFieldUpdater<Atomic8Test,Item> anItemFieldUpdater() {\n@@ -85,1 +85,1 @@\n-            (Atomic8Test.class, Integer.class, \"anIntegerField\");\n+            (Atomic8Test.class, Item.class, \"anItemField\");\n@@ -94,3 +94,3 @@\n-        assertEquals(1L, a.getAndUpdate(Atomic8Test::addLong17));\n-        assertEquals(18L, a.getAndUpdate(Atomic8Test::addLong17));\n-        assertEquals(35L, a.get());\n+        mustEqual(1L, a.getAndUpdate(Atomic8Test::addLong17));\n+        mustEqual(18L, a.getAndUpdate(Atomic8Test::addLong17));\n+        mustEqual(35L, a.get());\n@@ -105,2 +105,2 @@\n-        assertEquals(18L, a.updateAndGet(Atomic8Test::addLong17));\n-        assertEquals(35L, a.updateAndGet(Atomic8Test::addLong17));\n+        mustEqual(18L, a.updateAndGet(Atomic8Test::addLong17));\n+        mustEqual(35L, a.updateAndGet(Atomic8Test::addLong17));\n@@ -115,3 +115,3 @@\n-        assertEquals(1L, a.getAndAccumulate(2L, Long::sum));\n-        assertEquals(3L, a.getAndAccumulate(3L, Long::sum));\n-        assertEquals(6L, a.get());\n+        mustEqual(1L, a.getAndAccumulate(2L, Long::sum));\n+        mustEqual(3L, a.getAndAccumulate(3L, Long::sum));\n+        mustEqual(6L, a.get());\n@@ -126,3 +126,3 @@\n-        assertEquals(7L, a.accumulateAndGet(6L, Long::sum));\n-        assertEquals(10L, a.accumulateAndGet(3L, Long::sum));\n-        assertEquals(10L, a.get());\n+        mustEqual(7L, a.accumulateAndGet(6L, Long::sum));\n+        mustEqual(10L, a.accumulateAndGet(3L, Long::sum));\n+        mustEqual(10L, a.get());\n@@ -137,3 +137,3 @@\n-        assertEquals(1, a.getAndUpdate(Atomic8Test::addInt17));\n-        assertEquals(18, a.getAndUpdate(Atomic8Test::addInt17));\n-        assertEquals(35, a.get());\n+        mustEqual(1, a.getAndUpdate(Atomic8Test::addInt17));\n+        mustEqual(18, a.getAndUpdate(Atomic8Test::addInt17));\n+        mustEqual(35, a.get());\n@@ -148,3 +148,3 @@\n-        assertEquals(18, a.updateAndGet(Atomic8Test::addInt17));\n-        assertEquals(35, a.updateAndGet(Atomic8Test::addInt17));\n-        assertEquals(35, a.get());\n+        mustEqual(18, a.updateAndGet(Atomic8Test::addInt17));\n+        mustEqual(35, a.updateAndGet(Atomic8Test::addInt17));\n+        mustEqual(35, a.get());\n@@ -159,3 +159,3 @@\n-        assertEquals(1, a.getAndAccumulate(2, Integer::sum));\n-        assertEquals(3, a.getAndAccumulate(3, Integer::sum));\n-        assertEquals(6, a.get());\n+        mustEqual(1, a.getAndAccumulate(2, Integer::sum));\n+        mustEqual(3, a.getAndAccumulate(3, Integer::sum));\n+        mustEqual(6, a.get());\n@@ -170,3 +170,3 @@\n-        assertEquals(7, a.accumulateAndGet(6, Integer::sum));\n-        assertEquals(10, a.accumulateAndGet(3, Integer::sum));\n-        assertEquals(10, a.get());\n+        mustEqual(7, a.accumulateAndGet(6, Integer::sum));\n+        mustEqual(10, a.accumulateAndGet(3, Integer::sum));\n+        mustEqual(10, a.get());\n@@ -180,4 +180,4 @@\n-        AtomicReference<Integer> a = new AtomicReference<>(one);\n-        assertEquals((Integer) 1, a.getAndUpdate(Atomic8Test::addInteger17));\n-        assertEquals((Integer) 18, a.getAndUpdate(Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.get());\n+        AtomicReference<Item> a = new AtomicReference<>(one);\n+        mustEqual(1, a.getAndUpdate(Atomic8Test::addItem17));\n+        mustEqual(18, a.getAndUpdate(Atomic8Test::addItem17));\n+        mustEqual(35, a.get());\n@@ -191,4 +191,4 @@\n-        AtomicReference<Integer> a = new AtomicReference<>(one);\n-        assertEquals((Integer) 18, a.updateAndGet(Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.updateAndGet(Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.get());\n+        AtomicReference<Item> a = new AtomicReference<>(one);\n+        mustEqual(18, a.updateAndGet(Atomic8Test::addItem17));\n+        mustEqual(35, a.updateAndGet(Atomic8Test::addItem17));\n+        mustEqual(35, a.get());\n@@ -202,4 +202,4 @@\n-        AtomicReference<Integer> a = new AtomicReference<>(one);\n-        assertEquals((Integer) 1, a.getAndAccumulate(2, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 3, a.getAndAccumulate(3, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 6, a.get());\n+        AtomicReference<Item> a = new AtomicReference<>(one);\n+        mustEqual( 1, a.getAndAccumulate(two, Atomic8Test::sumItem));\n+        mustEqual( 3, a.getAndAccumulate(three, Atomic8Test::sumItem));\n+        mustEqual( 6, a.get());\n@@ -213,4 +213,4 @@\n-        AtomicReference<Integer> a = new AtomicReference<>(one);\n-        assertEquals((Integer) 7, a.accumulateAndGet(6, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 10, a.accumulateAndGet(3, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 10, a.get());\n+        AtomicReference<Item> a = new AtomicReference<>(one);\n+        mustEqual( 7, a.accumulateAndGet(six, Atomic8Test::sumItem));\n+        mustEqual( 10, a.accumulateAndGet(three, Atomic8Test::sumItem));\n+        mustEqual( 10, a.get());\n@@ -226,3 +226,3 @@\n-        assertEquals(1L, a.getAndUpdate(0, Atomic8Test::addLong17));\n-        assertEquals(18L, a.getAndUpdate(0, Atomic8Test::addLong17));\n-        assertEquals(35L, a.get(0));\n+        mustEqual(1L, a.getAndUpdate(0, Atomic8Test::addLong17));\n+        mustEqual(18L, a.getAndUpdate(0, Atomic8Test::addLong17));\n+        mustEqual(35L, a.get(0));\n@@ -238,3 +238,3 @@\n-        assertEquals(18L, a.updateAndGet(0, Atomic8Test::addLong17));\n-        assertEquals(35L, a.updateAndGet(0, Atomic8Test::addLong17));\n-        assertEquals(35L, a.get(0));\n+        mustEqual(18L, a.updateAndGet(0, Atomic8Test::addLong17));\n+        mustEqual(35L, a.updateAndGet(0, Atomic8Test::addLong17));\n+        mustEqual(35L, a.get(0));\n@@ -250,3 +250,3 @@\n-        assertEquals(1L, a.getAndAccumulate(0, 2L, Long::sum));\n-        assertEquals(3L, a.getAndAccumulate(0, 3L, Long::sum));\n-        assertEquals(6L, a.get(0));\n+        mustEqual(1L, a.getAndAccumulate(0, 2L, Long::sum));\n+        mustEqual(3L, a.getAndAccumulate(0, 3L, Long::sum));\n+        mustEqual(6L, a.get(0));\n@@ -262,3 +262,3 @@\n-        assertEquals(7L, a.accumulateAndGet(0, 6L, Long::sum));\n-        assertEquals(10L, a.accumulateAndGet(0, 3L, Long::sum));\n-        assertEquals(10L, a.get(0));\n+        mustEqual(7L, a.accumulateAndGet(0, 6L, Long::sum));\n+        mustEqual(10L, a.accumulateAndGet(0, 3L, Long::sum));\n+        mustEqual(10L, a.get(0));\n@@ -274,3 +274,3 @@\n-        assertEquals(1, a.getAndUpdate(0, Atomic8Test::addInt17));\n-        assertEquals(18, a.getAndUpdate(0, Atomic8Test::addInt17));\n-        assertEquals(35, a.get(0));\n+        mustEqual(1, a.getAndUpdate(0, Atomic8Test::addInt17));\n+        mustEqual(18, a.getAndUpdate(0, Atomic8Test::addInt17));\n+        mustEqual(35, a.get(0));\n@@ -286,3 +286,3 @@\n-        assertEquals(18, a.updateAndGet(0, Atomic8Test::addInt17));\n-        assertEquals(35, a.updateAndGet(0, Atomic8Test::addInt17));\n-        assertEquals(35, a.get(0));\n+        mustEqual(18, a.updateAndGet(0, Atomic8Test::addInt17));\n+        mustEqual(35, a.updateAndGet(0, Atomic8Test::addInt17));\n+        mustEqual(35, a.get(0));\n@@ -298,3 +298,3 @@\n-        assertEquals(1, a.getAndAccumulate(0, 2, Integer::sum));\n-        assertEquals(3, a.getAndAccumulate(0, 3, Integer::sum));\n-        assertEquals(6, a.get(0));\n+        mustEqual(1, a.getAndAccumulate(0, 2, Integer::sum));\n+        mustEqual(3, a.getAndAccumulate(0, 3, Integer::sum));\n+        mustEqual(6, a.get(0));\n@@ -310,2 +310,2 @@\n-        assertEquals(7, a.accumulateAndGet(0, 6, Integer::sum));\n-        assertEquals(10, a.accumulateAndGet(0, 3, Integer::sum));\n+        mustEqual(7, a.accumulateAndGet(0, 6, Integer::sum));\n+        mustEqual(10, a.accumulateAndGet(0, 3, Integer::sum));\n@@ -319,1 +319,1 @@\n-        AtomicReferenceArray<Integer> a = new AtomicReferenceArray<>(1);\n+        AtomicReferenceArray<Item> a = new AtomicReferenceArray<>(1);\n@@ -321,3 +321,3 @@\n-        assertEquals((Integer) 1, a.getAndUpdate(0, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 18, a.getAndUpdate(0, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.get(0));\n+        mustEqual( 1, a.getAndUpdate(0, Atomic8Test::addItem17));\n+        mustEqual( 18, a.getAndUpdate(0, Atomic8Test::addItem17));\n+        mustEqual( 35, a.get(0));\n@@ -331,1 +331,1 @@\n-        AtomicReferenceArray<Integer> a = new AtomicReferenceArray<>(1);\n+        AtomicReferenceArray<Item> a = new AtomicReferenceArray<>(1);\n@@ -333,2 +333,2 @@\n-        assertEquals((Integer) 18, a.updateAndGet(0, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.updateAndGet(0, Atomic8Test::addInteger17));\n+        mustEqual( 18, a.updateAndGet(0, Atomic8Test::addItem17));\n+        mustEqual( 35, a.updateAndGet(0, Atomic8Test::addItem17));\n@@ -342,1 +342,1 @@\n-        AtomicReferenceArray<Integer> a = new AtomicReferenceArray<>(1);\n+        AtomicReferenceArray<Item> a = new AtomicReferenceArray<>(1);\n@@ -344,3 +344,3 @@\n-        assertEquals((Integer) 1, a.getAndAccumulate(0, 2, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 3, a.getAndAccumulate(0, 3, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 6, a.get(0));\n+        mustEqual( 1, a.getAndAccumulate(0, two, Atomic8Test::sumItem));\n+        mustEqual( 3, a.getAndAccumulate(0, three, Atomic8Test::sumItem));\n+        mustEqual( 6, a.get(0));\n@@ -354,1 +354,1 @@\n-        AtomicReferenceArray<Integer> a = new AtomicReferenceArray<>(1);\n+        AtomicReferenceArray<Item> a = new AtomicReferenceArray<>(1);\n@@ -356,2 +356,2 @@\n-        assertEquals((Integer) 7, a.accumulateAndGet(0, 6, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 10, a.accumulateAndGet(0, 3, Atomic8Test::sumInteger));\n+        mustEqual( 7, a.accumulateAndGet(0, six, Atomic8Test::sumItem));\n+        mustEqual( 10, a.accumulateAndGet(0, three, Atomic8Test::sumItem));\n@@ -365,6 +365,6 @@\n-        AtomicLongFieldUpdater a = aLongFieldUpdater();\n-        a.set(this, 1);\n-        assertEquals(1L, a.getAndUpdate(this, Atomic8Test::addLong17));\n-        assertEquals(18L, a.getAndUpdate(this, Atomic8Test::addLong17));\n-        assertEquals(35L, a.get(this));\n-        assertEquals(35L, aLongField);\n+        AtomicLongFieldUpdater<Atomic8Test> a = aLongFieldUpdater();\n+        a.set(this, 1L);\n+        mustEqual(1L, a.getAndUpdate(this, Atomic8Test::addLong17));\n+        mustEqual(18L, a.getAndUpdate(this, Atomic8Test::addLong17));\n+        mustEqual(35L, a.get(this));\n+        mustEqual(35L, aLongField);\n@@ -378,6 +378,6 @@\n-        AtomicLongFieldUpdater a = aLongFieldUpdater();\n-        a.set(this, 1);\n-        assertEquals(18L, a.updateAndGet(this, Atomic8Test::addLong17));\n-        assertEquals(35L, a.updateAndGet(this, Atomic8Test::addLong17));\n-        assertEquals(35L, a.get(this));\n-        assertEquals(35L, aLongField);\n+        AtomicLongFieldUpdater<Atomic8Test> a = aLongFieldUpdater();\n+        a.set(this, 1L);\n+        mustEqual(18L, a.updateAndGet(this, Atomic8Test::addLong17));\n+        mustEqual(35L, a.updateAndGet(this, Atomic8Test::addLong17));\n+        mustEqual(35L, a.get(this));\n+        mustEqual(35L, aLongField);\n@@ -391,6 +391,6 @@\n-        AtomicLongFieldUpdater a = aLongFieldUpdater();\n-        a.set(this, 1);\n-        assertEquals(1L, a.getAndAccumulate(this, 2L, Long::sum));\n-        assertEquals(3L, a.getAndAccumulate(this, 3L, Long::sum));\n-        assertEquals(6L, a.get(this));\n-        assertEquals(6L, aLongField);\n+        AtomicLongFieldUpdater<Atomic8Test> a = aLongFieldUpdater();\n+        a.set(this, 1L);\n+        mustEqual(1L, a.getAndAccumulate(this, 2L, Long::sum));\n+        mustEqual(3L, a.getAndAccumulate(this, 3L, Long::sum));\n+        mustEqual(6L, a.get(this));\n+        mustEqual(6L, aLongField);\n@@ -404,6 +404,6 @@\n-        AtomicLongFieldUpdater a = aLongFieldUpdater();\n-        a.set(this, 1);\n-        assertEquals(7L, a.accumulateAndGet(this, 6L, Long::sum));\n-        assertEquals(10L, a.accumulateAndGet(this, 3L, Long::sum));\n-        assertEquals(10L, a.get(this));\n-        assertEquals(10L, aLongField);\n+        AtomicLongFieldUpdater<Atomic8Test> a = aLongFieldUpdater();\n+        a.set(this, 1L);\n+        mustEqual(7L, a.accumulateAndGet(this, 6L, Long::sum));\n+        mustEqual(10L, a.accumulateAndGet(this, 3L, Long::sum));\n+        mustEqual(10L, a.get(this));\n+        mustEqual(10L, aLongField);\n@@ -417,1 +417,1 @@\n-        AtomicIntegerFieldUpdater a = anIntFieldUpdater();\n+        AtomicIntegerFieldUpdater<Atomic8Test> a = anIntFieldUpdater();\n@@ -419,4 +419,4 @@\n-        assertEquals(1, a.getAndUpdate(this, Atomic8Test::addInt17));\n-        assertEquals(18, a.getAndUpdate(this, Atomic8Test::addInt17));\n-        assertEquals(35, a.get(this));\n-        assertEquals(35, anIntField);\n+        mustEqual(1, a.getAndUpdate(this, Atomic8Test::addInt17));\n+        mustEqual(18, a.getAndUpdate(this, Atomic8Test::addInt17));\n+        mustEqual(35, a.get(this));\n+        mustEqual(35, anIntField);\n@@ -430,1 +430,1 @@\n-        AtomicIntegerFieldUpdater a = anIntFieldUpdater();\n+        AtomicIntegerFieldUpdater<Atomic8Test> a = anIntFieldUpdater();\n@@ -432,4 +432,4 @@\n-        assertEquals(18, a.updateAndGet(this, Atomic8Test::addInt17));\n-        assertEquals(35, a.updateAndGet(this, Atomic8Test::addInt17));\n-        assertEquals(35, a.get(this));\n-        assertEquals(35, anIntField);\n+        mustEqual(18, a.updateAndGet(this, Atomic8Test::addInt17));\n+        mustEqual(35, a.updateAndGet(this, Atomic8Test::addInt17));\n+        mustEqual(35, a.get(this));\n+        mustEqual(35, anIntField);\n@@ -443,1 +443,1 @@\n-        AtomicIntegerFieldUpdater a = anIntFieldUpdater();\n+        AtomicIntegerFieldUpdater<Atomic8Test> a = anIntFieldUpdater();\n@@ -445,4 +445,4 @@\n-        assertEquals(1, a.getAndAccumulate(this, 2, Integer::sum));\n-        assertEquals(3, a.getAndAccumulate(this, 3, Integer::sum));\n-        assertEquals(6, a.get(this));\n-        assertEquals(6, anIntField);\n+        mustEqual(1, a.getAndAccumulate(this, 2, Integer::sum));\n+        mustEqual(3, a.getAndAccumulate(this, 3, Integer::sum));\n+        mustEqual(6, a.get(this));\n+        mustEqual(6, anIntField);\n@@ -456,1 +456,1 @@\n-        AtomicIntegerFieldUpdater a = anIntFieldUpdater();\n+        AtomicIntegerFieldUpdater<Atomic8Test> a = anIntFieldUpdater();\n@@ -458,4 +458,4 @@\n-        assertEquals(7, a.accumulateAndGet(this, 6, Integer::sum));\n-        assertEquals(10, a.accumulateAndGet(this, 3, Integer::sum));\n-        assertEquals(10, a.get(this));\n-        assertEquals(10, anIntField);\n+        mustEqual(7, a.accumulateAndGet(this, 6, Integer::sum));\n+        mustEqual(10, a.accumulateAndGet(this, 3, Integer::sum));\n+        mustEqual(10, a.get(this));\n+        mustEqual(10, anIntField);\n@@ -469,1 +469,1 @@\n-        AtomicReferenceFieldUpdater<Atomic8Test,Integer> a = anIntegerFieldUpdater();\n+        AtomicReferenceFieldUpdater<Atomic8Test,Item> a = anItemFieldUpdater();\n@@ -471,4 +471,4 @@\n-        assertEquals((Integer) 1, a.getAndUpdate(this, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 18, a.getAndUpdate(this, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.get(this));\n-        assertEquals((Integer) 35, anIntegerField);\n+        mustEqual( 1, a.getAndUpdate(this, Atomic8Test::addItem17));\n+        mustEqual( 18, a.getAndUpdate(this, Atomic8Test::addItem17));\n+        mustEqual( 35, a.get(this));\n+        mustEqual( 35, anItemField);\n@@ -482,1 +482,1 @@\n-        AtomicReferenceFieldUpdater<Atomic8Test,Integer> a = anIntegerFieldUpdater();\n+        AtomicReferenceFieldUpdater<Atomic8Test,Item> a = anItemFieldUpdater();\n@@ -484,4 +484,4 @@\n-        assertEquals((Integer) 18, a.updateAndGet(this, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.updateAndGet(this, Atomic8Test::addInteger17));\n-        assertEquals((Integer) 35, a.get(this));\n-        assertEquals((Integer) 35, anIntegerField);\n+        mustEqual( 18, a.updateAndGet(this, Atomic8Test::addItem17));\n+        mustEqual( 35, a.updateAndGet(this, Atomic8Test::addItem17));\n+        mustEqual( 35, a.get(this));\n+        mustEqual( 35, anItemField);\n@@ -495,1 +495,1 @@\n-        AtomicReferenceFieldUpdater<Atomic8Test,Integer> a = anIntegerFieldUpdater();\n+        AtomicReferenceFieldUpdater<Atomic8Test,Item> a = anItemFieldUpdater();\n@@ -497,4 +497,4 @@\n-        assertEquals((Integer) 1, a.getAndAccumulate(this, 2, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 3, a.getAndAccumulate(this, 3, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 6, a.get(this));\n-        assertEquals((Integer) 6, anIntegerField);\n+        mustEqual( 1, a.getAndAccumulate(this, two, Atomic8Test::sumItem));\n+        mustEqual( 3, a.getAndAccumulate(this, three, Atomic8Test::sumItem));\n+        mustEqual( 6, a.get(this));\n+        mustEqual( 6, anItemField);\n@@ -508,1 +508,1 @@\n-        AtomicReferenceFieldUpdater<Atomic8Test,Integer> a = anIntegerFieldUpdater();\n+        AtomicReferenceFieldUpdater<Atomic8Test,Item> a = anItemFieldUpdater();\n@@ -510,4 +510,4 @@\n-        assertEquals((Integer) 7, a.accumulateAndGet(this, 6, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 10, a.accumulateAndGet(this, 3, Atomic8Test::sumInteger));\n-        assertEquals((Integer) 10, a.get(this));\n-        assertEquals((Integer) 10, anIntegerField);\n+        mustEqual( 7, a.accumulateAndGet(this, six, Atomic8Test::sumItem));\n+        mustEqual( 10, a.accumulateAndGet(this, three, Atomic8Test::sumItem));\n+        mustEqual( 10, a.get(this));\n+        mustEqual( 10, anItemField);\n@@ -520,0 +520,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -531,1 +532,1 @@\n-            () -> anIntegerFieldUpdater().getAndUpdate(this, null));\n+            () -> anItemFieldUpdater().getAndUpdate(this, null));\n@@ -537,0 +538,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -548,1 +550,1 @@\n-            () -> anIntegerFieldUpdater().updateAndGet(this, null));\n+            () -> anItemFieldUpdater().updateAndGet(this, null));\n@@ -555,0 +557,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -566,1 +569,1 @@\n-            () -> anIntegerFieldUpdater().getAndAccumulate(this, one, null));\n+            () -> anItemFieldUpdater().getAndAccumulate(this, one, null));\n@@ -573,0 +576,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -584,1 +588,1 @@\n-            () -> anIntegerFieldUpdater().accumulateAndGet(this, one, null));\n+            () -> anItemFieldUpdater().accumulateAndGet(this, one, null));\n@@ -592,0 +596,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -596,1 +601,1 @@\n-        final AtomicReferenceFieldUpdater refUpdater = anIntegerFieldUpdater();\n+        final AtomicReferenceFieldUpdater refUpdater = anItemFieldUpdater();\n@@ -606,1 +611,1 @@\n-                () -> refUpdater.set(x, (Integer) 17),\n+                () -> refUpdater.set(x,  new Item(17)),\n@@ -617,1 +622,1 @@\n-                () -> refUpdater.compareAndSet(x, (Integer) 17, (Integer) 42));\n+                () -> refUpdater.compareAndSet(x,  17,  fortytwo));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/Atomic8Test.java","additions":159,"deletions":154,"binary":false,"changes":313,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicBooleanTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -190,0 +191,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicIntegerArrayTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicIntegerTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -189,0 +190,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicLongArrayTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicLongTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -56,1 +56,1 @@\n-        AtomicMarkableReference a2 = new AtomicMarkableReference(null, true);\n+        AtomicMarkableReference<Item> a2 = new AtomicMarkableReference<Item>(null, true);\n@@ -66,1 +66,1 @@\n-        AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -88,1 +88,1 @@\n-        AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -102,1 +102,1 @@\n-        AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -111,2 +111,2 @@\n-        assertTrue(ai.compareAndSet(two, m3, false, true));\n-        assertSame(m3, ai.get(mark));\n+        assertTrue(ai.compareAndSet(two, minusThree, false, true));\n+        assertSame(minusThree, ai.get(mark));\n@@ -115,2 +115,2 @@\n-        assertFalse(ai.compareAndSet(two, m3, true, true));\n-        assertSame(m3, ai.get(mark));\n+        assertFalse(ai.compareAndSet(two, minusThree, true, true));\n+        assertSame(minusThree, ai.get(mark));\n@@ -125,1 +125,1 @@\n-        final AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        final AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -145,1 +145,1 @@\n-        final AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        final AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -166,1 +166,1 @@\n-        AtomicMarkableReference ai = new AtomicMarkableReference(one, false);\n+        AtomicMarkableReference<Item> ai = new AtomicMarkableReference<Item>(one, false);\n@@ -175,2 +175,2 @@\n-        do {} while (!ai.weakCompareAndSet(two, m3, false, true));\n-        assertSame(m3, ai.get(mark));\n+        do {} while (!ai.weakCompareAndSet(two, minusThree, false, true));\n+        assertSame(minusThree, ai.get(mark));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicMarkableReferenceTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.getPlain());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.getPlain());\n@@ -54,3 +54,3 @@\n-        assertEquals(two, ai.getPlain());\n-        ai.set(m3);\n-        assertEquals(m3, ai.getPlain());\n+        mustEqual(two, ai.getPlain());\n+        ai.set(minusThree);\n+        mustEqual(minusThree, ai.getPlain());\n@@ -63,2 +63,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.getOpaque());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.getOpaque());\n@@ -66,3 +66,3 @@\n-        assertEquals(two, ai.getOpaque());\n-        ai.set(m3);\n-        assertEquals(m3, ai.getOpaque());\n+        mustEqual(two, ai.getOpaque());\n+        ai.set(minusThree);\n+        mustEqual(minusThree, ai.getOpaque());\n@@ -75,2 +75,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.getAcquire());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.getAcquire());\n@@ -78,3 +78,3 @@\n-        assertEquals(two, ai.getAcquire());\n-        ai.set(m3);\n-        assertEquals(m3, ai.getAcquire());\n+        mustEqual(two, ai.getAcquire());\n+        ai.set(minusThree);\n+        mustEqual(minusThree, ai.getAcquire());\n@@ -87,2 +87,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.get());\n@@ -90,3 +90,3 @@\n-        assertEquals(two, ai.get());\n-        ai.setPlain(m3);\n-        assertEquals(m3, ai.get());\n+        mustEqual(two, ai.get());\n+        ai.setPlain(minusThree);\n+        mustEqual(minusThree, ai.get());\n@@ -99,2 +99,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.get());\n@@ -102,3 +102,3 @@\n-        assertEquals(two, ai.get());\n-        ai.setOpaque(m3);\n-        assertEquals(m3, ai.get());\n+        mustEqual(two, ai.get());\n+        ai.setOpaque(minusThree);\n+        mustEqual(minusThree, ai.get());\n@@ -111,2 +111,2 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.get());\n@@ -114,3 +114,3 @@\n-        assertEquals(two, ai.get());\n-        ai.setRelease(m3);\n-        assertEquals(m3, ai.get());\n+        mustEqual(two, ai.get());\n+        ai.setRelease(minusThree);\n+        mustEqual(minusThree, ai.get());\n@@ -124,8 +124,8 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.compareAndExchange(one, two));\n-        assertEquals(two, ai.compareAndExchange(two, m4));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchange(m5, seven));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchange(m4, seven));\n-        assertEquals(seven, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.compareAndExchange(one, two));\n+        mustEqual(two, ai.compareAndExchange(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchange(minusFive, seven));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchange(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -139,8 +139,8 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.compareAndExchangeAcquire(one, two));\n-        assertEquals(two, ai.compareAndExchangeAcquire(two, m4));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchangeAcquire(m5, seven));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchangeAcquire(m4, seven));\n-        assertEquals(seven, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.compareAndExchangeAcquire(one, two));\n+        mustEqual(two, ai.compareAndExchangeAcquire(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchangeAcquire(minusFive, seven));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchangeAcquire(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -154,8 +154,8 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n-        assertEquals(one, ai.compareAndExchangeRelease(one, two));\n-        assertEquals(two, ai.compareAndExchangeRelease(two, m4));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchangeRelease(m5, seven));\n-        assertEquals(m4, ai.get());\n-        assertEquals(m4, ai.compareAndExchangeRelease(m4, seven));\n-        assertEquals(seven, ai.get());\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n+        mustEqual(one, ai.compareAndExchangeRelease(one, two));\n+        mustEqual(two, ai.compareAndExchangeRelease(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchangeRelease(minusFive, seven));\n+        mustEqual(minusFour, ai.get());\n+        mustEqual(minusFour, ai.compareAndExchangeRelease(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -169,1 +169,1 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n@@ -171,4 +171,4 @@\n-        do {} while (!ai.weakCompareAndSetPlain(two, m4));\n-        assertEquals(m4, ai.get());\n-        do {} while (!ai.weakCompareAndSetPlain(m4, seven));\n-        assertEquals(seven, ai.get());\n+        do {} while (!ai.weakCompareAndSetPlain(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        do {} while (!ai.weakCompareAndSetPlain(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -182,1 +182,1 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n@@ -184,4 +184,4 @@\n-        do {} while (!ai.weakCompareAndSetVolatile(two, m4));\n-        assertEquals(m4, ai.get());\n-        do {} while (!ai.weakCompareAndSetVolatile(m4, seven));\n-        assertEquals(seven, ai.get());\n+        do {} while (!ai.weakCompareAndSetVolatile(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        do {} while (!ai.weakCompareAndSetVolatile(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -195,1 +195,1 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n@@ -197,4 +197,4 @@\n-        do {} while (!ai.weakCompareAndSetAcquire(two, m4));\n-        assertEquals(m4, ai.get());\n-        do {} while (!ai.weakCompareAndSetAcquire(m4, seven));\n-        assertEquals(seven, ai.get());\n+        do {} while (!ai.weakCompareAndSetAcquire(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        do {} while (!ai.weakCompareAndSetAcquire(minusFour, seven));\n+        mustEqual(seven, ai.get());\n@@ -208,1 +208,1 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n+        AtomicReference<Item> ai = new AtomicReference<>(one);\n@@ -210,4 +210,4 @@\n-        do {} while (!ai.weakCompareAndSetRelease(two, m4));\n-        assertEquals(m4, ai.get());\n-        do {} while (!ai.weakCompareAndSetRelease(m4, seven));\n-        assertEquals(seven, ai.get());\n+        do {} while (!ai.weakCompareAndSetRelease(two, minusFour));\n+        mustEqual(minusFour, ai.get());\n+        do {} while (!ai.weakCompareAndSetRelease(minusFour, seven));\n+        mustEqual(seven, ai.get());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReference9Test.java","additions":74,"deletions":74,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -82,2 +82,2 @@\n-            aa.set(i, m3);\n-            assertEquals(m3, aa.getPlain(i));\n+            aa.set(i, minusThree);\n+            assertEquals(minusThree, aa.getPlain(i));\n@@ -91,1 +91,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -97,2 +97,2 @@\n-            aa.set(i, m3);\n-            assertEquals(m3, aa.getOpaque(i));\n+            aa.set(i, minusThree);\n+            assertEquals(minusThree, aa.getOpaque(i));\n@@ -106,1 +106,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -112,2 +112,2 @@\n-            aa.set(i, m3);\n-            assertEquals(m3, aa.getAcquire(i));\n+            aa.set(i, minusThree);\n+            assertEquals(minusThree, aa.getAcquire(i));\n@@ -121,1 +121,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -127,2 +127,2 @@\n-            aa.setPlain(i, m3);\n-            assertEquals(m3, aa.get(i));\n+            aa.setPlain(i, minusThree);\n+            assertEquals(minusThree, aa.get(i));\n@@ -136,1 +136,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -142,2 +142,2 @@\n-            aa.setOpaque(i, m3);\n-            assertEquals(m3, aa.get(i));\n+            aa.setOpaque(i, minusThree);\n+            assertEquals(minusThree, aa.get(i));\n@@ -151,1 +151,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -157,2 +157,2 @@\n-            aa.setRelease(i, m3);\n-            assertEquals(m3, aa.get(i));\n+            aa.setRelease(i, minusThree);\n+            assertEquals(minusThree, aa.get(i));\n@@ -167,1 +167,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -171,5 +171,5 @@\n-            assertEquals(two, aa.compareAndExchange(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchange(i,m5, seven));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchange(i, m4, seven));\n+            assertEquals(two, aa.compareAndExchange(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchange(i,minusFive, seven));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchange(i, minusFour, seven));\n@@ -185,1 +185,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -189,5 +189,5 @@\n-            assertEquals(two, aa.compareAndExchangeAcquire(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchangeAcquire(i,m5, seven));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchangeAcquire(i, m4, seven));\n+            assertEquals(two, aa.compareAndExchangeAcquire(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchangeAcquire(i,minusFive, seven));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchangeAcquire(i, minusFour, seven));\n@@ -203,1 +203,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -207,5 +207,5 @@\n-            assertEquals(two, aa.compareAndExchangeRelease(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchangeRelease(i,m5, seven));\n-            assertEquals(m4, aa.get(i));\n-            assertEquals(m4, aa.compareAndExchangeRelease(i, m4, seven));\n+            assertEquals(two, aa.compareAndExchangeRelease(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchangeRelease(i,minusFive, seven));\n+            assertEquals(minusFour, aa.get(i));\n+            assertEquals(minusFour, aa.compareAndExchangeRelease(i, minusFour, seven));\n@@ -221,1 +221,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -225,3 +225,3 @@\n-            do {} while (!aa.weakCompareAndSetPlain(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            do {} while (!aa.weakCompareAndSetPlain(i, m4, seven));\n+            do {} while (!aa.weakCompareAndSetPlain(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            do {} while (!aa.weakCompareAndSetPlain(i, minusFour, seven));\n@@ -237,1 +237,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -241,3 +241,3 @@\n-            do {} while (!aa.weakCompareAndSetVolatile(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            do {} while (!aa.weakCompareAndSetVolatile(i, m4, seven));\n+            do {} while (!aa.weakCompareAndSetVolatile(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            do {} while (!aa.weakCompareAndSetVolatile(i, minusFour, seven));\n@@ -253,1 +253,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -257,3 +257,3 @@\n-            do {} while (!aa.weakCompareAndSetAcquire(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            do {} while (!aa.weakCompareAndSetAcquire(i, m4, seven));\n+            do {} while (!aa.weakCompareAndSetAcquire(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            do {} while (!aa.weakCompareAndSetAcquire(i, minusFour, seven));\n@@ -269,1 +269,1 @@\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(SIZE);\n@@ -273,3 +273,3 @@\n-            do {} while (!aa.weakCompareAndSetRelease(i, two, m4));\n-            assertEquals(m4, aa.get(i));\n-            do {} while (!aa.weakCompareAndSetRelease(i, m4, seven));\n+            do {} while (!aa.weakCompareAndSetRelease(i, two, minusFour));\n+            assertEquals(minusFour, aa.get(i));\n+            do {} while (!aa.weakCompareAndSetRelease(i, minusFour, seven));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceArray9Test.java","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        Integer[] a = { two, one, three, four, seven };\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(a);\n+        Item[] a = { two, one, three, four, seven };\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(a);\n@@ -86,1 +86,1 @@\n-        Integer[] a = { two, one, three, four, seven };\n+        Item[] a = { two, one, three, four, seven };\n@@ -100,0 +100,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -130,1 +131,1 @@\n-        AtomicReferenceArray aa = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<Item>(SIZE);\n@@ -136,2 +137,2 @@\n-            aa.set(i, m3);\n-            assertSame(m3, aa.get(i));\n+            aa.set(i, minusThree);\n+            assertSame(minusThree, aa.get(i));\n@@ -145,1 +146,1 @@\n-        AtomicReferenceArray aa = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<Item>(SIZE);\n@@ -151,2 +152,2 @@\n-            aa.lazySet(i, m3);\n-            assertSame(m3, aa.get(i));\n+            aa.lazySet(i, minusThree);\n+            assertSame(minusThree, aa.get(i));\n@@ -160,1 +161,1 @@\n-        AtomicReferenceArray aa = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<Item>(SIZE);\n@@ -164,5 +165,5 @@\n-            assertTrue(aa.compareAndSet(i, two, m4));\n-            assertSame(m4, aa.get(i));\n-            assertFalse(aa.compareAndSet(i, m5, seven));\n-            assertSame(m4, aa.get(i));\n-            assertTrue(aa.compareAndSet(i, m4, seven));\n+            assertTrue(aa.compareAndSet(i, two, minusFour));\n+            assertSame(minusFour, aa.get(i));\n+            assertFalse(aa.compareAndSet(i, minusFive, seven));\n+            assertSame(minusFour, aa.get(i));\n+            assertTrue(aa.compareAndSet(i, minusFour, seven));\n@@ -178,1 +179,1 @@\n-        final AtomicReferenceArray a = new AtomicReferenceArray(1);\n+        final AtomicReferenceArray<Item> a = new AtomicReferenceArray<Item>(1);\n@@ -197,0 +198,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -198,1 +200,1 @@\n-        AtomicReferenceArray aa = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<Item>(SIZE);\n@@ -202,3 +204,3 @@\n-            do {} while (!aa.weakCompareAndSet(i, two, m4));\n-            assertSame(m4, aa.get(i));\n-            do {} while (!aa.weakCompareAndSet(i, m4, seven));\n+            do {} while (!aa.weakCompareAndSet(i, two, minusFour));\n+            assertSame(minusFour, aa.get(i));\n+            do {} while (!aa.weakCompareAndSet(i, minusFour, seven));\n@@ -213,1 +215,1 @@\n-        AtomicReferenceArray aa = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<Item>(SIZE);\n@@ -217,2 +219,2 @@\n-            assertSame(zero, aa.getAndSet(i, m10));\n-            assertSame(m10, aa.getAndSet(i, one));\n+            assertSame(zero, aa.getAndSet(i, minusTen));\n+            assertSame(minusTen, aa.getAndSet(i, one));\n@@ -226,1 +228,1 @@\n-        AtomicReferenceArray x = new AtomicReferenceArray(SIZE);\n+        AtomicReferenceArray<Item> x = new AtomicReferenceArray<Item>(SIZE);\n@@ -228,1 +230,1 @@\n-            x.set(i, new Integer(-i));\n+            x.set(i, minusOne);\n@@ -230,1 +232,1 @@\n-        AtomicReferenceArray y = serialClone(x);\n+        AtomicReferenceArray<Item> y = serialClone(x);\n@@ -242,2 +244,2 @@\n-        Integer[] a = { two, one, three, four, seven };\n-        AtomicReferenceArray<Integer> aa = new AtomicReferenceArray<>(a);\n+        Item[] a = { two, one, three, four, seven };\n+        AtomicReferenceArray<Item> aa = new AtomicReferenceArray<>(a);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceArrayTest.java","additions":30,"deletions":28,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-    volatile Integer x = null;\n-    protected volatile Integer protectedField;\n-    private volatile Integer privateField;\n+    volatile Item x = null;\n+    protected volatile Item protectedField;\n+    private volatile Item privateField;\n@@ -46,1 +46,1 @@\n-    Integer w;\n+    Item w;\n@@ -56,1 +56,1 @@\n-    static AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> updaterFor(String fieldName) {\n+    static AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> updaterFor(String fieldName) {\n@@ -58,1 +58,1 @@\n-            (AtomicReferenceFieldUpdaterTest.class, Integer.class, fieldName);\n+            (AtomicReferenceFieldUpdaterTest.class, Item.class, fieldName);\n@@ -124,1 +124,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -130,2 +130,2 @@\n-        a.set(this, m3);\n-        assertSame(m3, a.get(this));\n+        a.set(this, minusThree);\n+        assertSame(minusThree, a.get(this));\n@@ -138,1 +138,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -144,2 +144,2 @@\n-        a.lazySet(this, m3);\n-        assertSame(m3, a.get(this));\n+        a.lazySet(this, minusThree);\n+        assertSame(minusThree, a.get(this));\n@@ -152,1 +152,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -156,3 +156,3 @@\n-        assertTrue(a.compareAndSet(this, two, m4));\n-        assertSame(m4, a.get(this));\n-        assertFalse(a.compareAndSet(this, m5, seven));\n+        assertTrue(a.compareAndSet(this, two, minusFour));\n+        assertSame(minusFour, a.get(this));\n+        assertFalse(a.compareAndSet(this, minusFive, seven));\n@@ -160,1 +160,1 @@\n-        assertTrue(a.compareAndSet(this, m4, seven));\n+        assertTrue(a.compareAndSet(this, minusFour, seven));\n@@ -179,1 +179,1 @@\n-        final AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        final AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -199,1 +199,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -203,3 +203,3 @@\n-        do {} while (!a.weakCompareAndSet(this, two, m4));\n-        assertSame(m4, a.get(this));\n-        do {} while (!a.weakCompareAndSet(this, m4, seven));\n+        do {} while (!a.weakCompareAndSet(this, two, minusFour));\n+        assertSame(minusFour, a.get(this));\n+        do {} while (!a.weakCompareAndSet(this, minusFour, seven));\n@@ -213,1 +213,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Integer> a;\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest, Item> a;\n@@ -217,2 +217,2 @@\n-        assertSame(zero, a.getAndSet(this, m10));\n-        assertSame(m10, a.getAndSet(this, 1));\n+        assertSame(zero, a.getAndSet(this, minusTen));\n+        assertSame(minusTen, a.getAndSet(this, one));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceFieldUpdaterTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -61,1 +61,1 @@\n-        AtomicReference ai = new AtomicReference();\n+        AtomicReference<Item> ai = new AtomicReference<Item>();\n@@ -69,1 +69,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -73,2 +73,2 @@\n-        ai.set(m3);\n-        assertSame(m3, ai.get());\n+        ai.set(minusThree);\n+        assertSame(minusThree, ai.get());\n@@ -81,1 +81,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -85,2 +85,2 @@\n-        ai.lazySet(m3);\n-        assertSame(m3, ai.get());\n+        ai.lazySet(minusThree);\n+        assertSame(minusThree, ai.get());\n@@ -93,1 +93,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -95,5 +95,5 @@\n-        assertTrue(ai.compareAndSet(two, m4));\n-        assertSame(m4, ai.get());\n-        assertFalse(ai.compareAndSet(m5, seven));\n-        assertSame(m4, ai.get());\n-        assertTrue(ai.compareAndSet(m4, seven));\n+        assertTrue(ai.compareAndSet(two, minusFour));\n+        assertSame(minusFour, ai.get());\n+        assertFalse(ai.compareAndSet(minusFive, seven));\n+        assertSame(minusFour, ai.get());\n+        assertTrue(ai.compareAndSet(minusFour, seven));\n@@ -108,1 +108,1 @@\n-        final AtomicReference ai = new AtomicReference(one);\n+        final AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -126,0 +126,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -127,1 +128,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -129,3 +130,3 @@\n-        do {} while (!ai.weakCompareAndSet(two, m4));\n-        assertSame(m4, ai.get());\n-        do {} while (!ai.weakCompareAndSet(m4, seven));\n+        do {} while (!ai.weakCompareAndSet(two, minusFour));\n+        assertSame(minusFour, ai.get());\n+        do {} while (!ai.weakCompareAndSet(minusFour, seven));\n@@ -139,1 +140,1 @@\n-        AtomicReference ai = new AtomicReference(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n@@ -141,2 +142,2 @@\n-        assertSame(zero, ai.getAndSet(m10));\n-        assertSame(m10, ai.getAndSet(one));\n+        assertSame(zero, ai.getAndSet(minusTen));\n+        assertSame(minusTen, ai.getAndSet(one));\n@@ -149,2 +150,2 @@\n-        AtomicReference x = new AtomicReference();\n-        AtomicReference y = serialClone(x);\n+        AtomicReference<Item> x = new AtomicReference<Item>();\n+        AtomicReference<Item> y = serialClone(x);\n@@ -153,1 +154,1 @@\n-        AtomicReference z = serialClone(x);\n+        AtomicReference<Item> z = serialClone(x);\n@@ -164,1 +165,1 @@\n-        AtomicReference<Integer> ai = new AtomicReference<>(one);\n+        AtomicReference<Item> ai = new AtomicReference<Item>(one);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceTest.java","additions":27,"deletions":26,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -56,1 +56,1 @@\n-        AtomicStampedReference a2 = new AtomicStampedReference(null, 1);\n+        AtomicStampedReference<Item> a2 = new AtomicStampedReference<Item>(null, 1);\n@@ -66,1 +66,1 @@\n-        AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -88,1 +88,1 @@\n-        AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -102,1 +102,1 @@\n-        AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -111,2 +111,2 @@\n-        assertTrue(ai.compareAndSet(two, m3, 0, 1));\n-        assertSame(m3, ai.get(mark));\n+        assertTrue(ai.compareAndSet(two, minusThree, 0, 1));\n+        assertSame(minusThree, ai.get(mark));\n@@ -115,2 +115,2 @@\n-        assertFalse(ai.compareAndSet(two, m3, 1, 1));\n-        assertSame(m3, ai.get(mark));\n+        assertFalse(ai.compareAndSet(two, minusThree, 1, 1));\n+        assertSame(minusThree, ai.get(mark));\n@@ -125,1 +125,1 @@\n-        final AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        final AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -145,1 +145,1 @@\n-        final AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        final AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -166,1 +166,1 @@\n-        AtomicStampedReference ai = new AtomicStampedReference(one, 0);\n+        AtomicStampedReference<Item> ai = new AtomicStampedReference<Item>(one, 0);\n@@ -175,2 +175,2 @@\n-        do {} while (!ai.weakCompareAndSet(two, m3, 0, 1));\n-        assertSame(m3, ai.get(mark));\n+        do {} while (!ai.weakCompareAndSet(two, minusThree, 0, 1));\n+        assertSame(minusThree, ai.get(mark));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicStampedReferenceTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        return Integer.valueOf(i);\n+        return JSR166TestCase.itemFor(i);\n@@ -151,1 +151,1 @@\n-        final Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        final Collection elements = Arrays.asList(new Item[SIZE]);\n@@ -226,7 +226,8 @@\n-            Object one = makeElement(1);\n-            q.add(one);\n-            for (int n : ns)\n-                assertEquals(0, q.drainTo(sink, n));\n-            assertEquals(1, q.size());\n-            assertSame(one, q.poll());\n-            assertTrue(sink.isEmpty());\n+            Object e = makeElement(1);\n+            if (q.add(e)) {\n+                for (int n : ns)\n+                    assertEquals(0, q.drainTo(sink, n));\n+                assertEquals(1, q.size());\n+                assertEquals(e, q.poll());\n+                assertTrue(sink.isEmpty());\n+            }\n@@ -379,2 +380,2 @@\n-                assertEquals((pass == 0), q.contains(elts[i]));\n-                assertEquals((pass == 0), q.remove(elts[i]));\n+                mustEqual((pass == 0), q.contains(elts[i]));\n+                mustEqual((pass == 0), q.remove(elts[i]));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/BlockingQueueTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -123,2 +123,2 @@\n-        assertEquals(0, c.size());\n-        assertEquals(\"[]\", c.toString());\n+        mustEqual(0, c.size());\n+        mustEqual(\"[]\", c.toString());\n@@ -127,5 +127,5 @@\n-            assertEquals(1, x.hashCode());\n-            assertEquals(x, Collections.emptyList());\n-            assertEquals(Collections.emptyList(), x);\n-            assertEquals(-1, x.indexOf(impl.makeElement(86)));\n-            assertEquals(-1, x.lastIndexOf(impl.makeElement(99)));\n+            mustEqual(1, x.hashCode());\n+            mustEqual(x, Collections.emptyList());\n+            mustEqual(Collections.emptyList(), x);\n+            mustEqual(-1, x.indexOf(impl.makeElement(86)));\n+            mustEqual(-1, x.lastIndexOf(impl.makeElement(99)));\n@@ -138,3 +138,3 @@\n-            assertEquals(0, c.hashCode());\n-            assertEquals(c, Collections.emptySet());\n-            assertEquals(Collections.emptySet(), c);\n+            mustEqual(0, c.hashCode());\n+            mustEqual(c, Collections.emptySet());\n+            mustEqual(Collections.emptySet(), c);\n@@ -144,1 +144,1 @@\n-            assertEquals(0, a.length);\n+            mustEqual(0, a.length);\n@@ -152,1 +152,1 @@\n-            Integer[] a = new Integer[0];\n+            Item[] a = new Item[0];\n@@ -156,1 +156,1 @@\n-            Integer[] a = { 1, 2, 3};\n+            Item[] a = { one, two, three};\n@@ -159,2 +159,2 @@\n-            assertSame(2, a[1]);\n-            assertSame(3, a[2]);\n+            mustEqual(2, a[1]);\n+            mustEqual(3, a[2]);\n@@ -169,1 +169,1 @@\n-            assertEquals(0, c.spliterator().estimateSize());\n+            mustEqual(0, c.spliterator().estimateSize());\n@@ -201,0 +201,1 @@\n+        Collection nullCollection = null;\n@@ -203,4 +204,4 @@\n-            () -> c.addAll(null),\n-            () -> c.containsAll(null),\n-            () -> c.retainAll(null),\n-            () -> c.removeAll(null),\n+            () -> c.addAll(nullCollection),\n+            () -> c.containsAll(nullCollection),\n+            () -> c.retainAll(nullCollection),\n+            () -> c.removeAll(nullCollection),\n@@ -322,3 +323,3 @@\n-                assertEquals(modified, accepts.size() > 0);\n-                assertEquals(modified, rejects.size() != n);\n-                assertEquals(accepts.size() + rejects.size(), n);\n+                mustEqual(modified, accepts.size() > 0);\n+                mustEqual(modified, rejects.size() != n);\n+                mustEqual(accepts.size() + rejects.size(), n);\n@@ -326,1 +327,1 @@\n-                    assertEquals(rejects,\n+                    mustEqual(rejects,\n@@ -329,1 +330,1 @@\n-                    assertEquals(new HashSet(rejects),\n+                    mustEqual(new HashSet(rejects),\n@@ -353,1 +354,1 @@\n-                assertEquals(n - accepts.size(), c.size());\n+                mustEqual(n - accepts.size(), c.size());\n@@ -516,1 +517,1 @@\n-        assertEquals(cset, new HashSet(parallelStreamForEached));\n+        mustEqual(cset, new HashSet(parallelStreamForEached));\n@@ -518,7 +519,7 @@\n-            assertEquals(iterated, iteratedForEachRemaining);\n-            assertEquals(iterated, tryAdvanced);\n-            assertEquals(iterated, spliterated);\n-            assertEquals(iterated, splitonced);\n-            assertEquals(iterated, forEached);\n-            assertEquals(iterated, streamForEached);\n-            assertEquals(iterated, removeIfed);\n+            mustEqual(iterated, iteratedForEachRemaining);\n+            mustEqual(iterated, tryAdvanced);\n+            mustEqual(iterated, spliterated);\n+            mustEqual(iterated, splitonced);\n+            mustEqual(iterated, forEached);\n+            mustEqual(iterated, streamForEached);\n+            mustEqual(iterated, removeIfed);\n@@ -526,8 +527,8 @@\n-            assertEquals(cset, new HashSet(iterated));\n-            assertEquals(cset, new HashSet(iteratedForEachRemaining));\n-            assertEquals(cset, new HashSet(tryAdvanced));\n-            assertEquals(cset, new HashSet(spliterated));\n-            assertEquals(cset, new HashSet(splitonced));\n-            assertEquals(cset, new HashSet(forEached));\n-            assertEquals(cset, new HashSet(streamForEached));\n-            assertEquals(cset, new HashSet(removeIfed));\n+            mustEqual(cset, new HashSet(iterated));\n+            mustEqual(cset, new HashSet(iteratedForEachRemaining));\n+            mustEqual(cset, new HashSet(tryAdvanced));\n+            mustEqual(cset, new HashSet(spliterated));\n+            mustEqual(cset, new HashSet(splitonced));\n+            mustEqual(cset, new HashSet(forEached));\n+            mustEqual(cset, new HashSet(streamForEached));\n+            mustEqual(cset, new HashSet(removeIfed));\n@@ -545,2 +546,2 @@\n-            assertEquals(iterated, descending);\n-            assertEquals(iterated, descendingForEachRemaining);\n+            mustEqual(iterated, descending);\n+            mustEqual(iterated, descendingForEachRemaining);\n@@ -584,1 +585,1 @@\n-        assertEquals(r1, r2);\n+        mustEqual(r1, r2);\n@@ -606,1 +607,1 @@\n-                assertEquals(impl.makeElement(0), it.next());\n+                mustEqual(impl.makeElement(0), it.next());\n@@ -608,1 +609,1 @@\n-                assertEquals(impl.makeElement(1), it.next());\n+                mustEqual(impl.makeElement(1), it.next());\n@@ -628,1 +629,1 @@\n-                    assertEquals(n - 1, c.size());\n+                    mustEqual(n - 1, c.size());\n@@ -644,1 +645,1 @@\n-            assertEquals(impl.makeElement(n - 1), it.next());\n+            mustEqual(impl.makeElement(n - 1), it.next());\n@@ -646,1 +647,1 @@\n-            assertEquals(impl.makeElement(n - 2), it.next());\n+            mustEqual(impl.makeElement(n - 2), it.next());\n@@ -650,1 +651,1 @@\n-                assertEquals(n - 1, d.size());\n+                mustEqual(n - 1, d.size());\n@@ -672,1 +673,1 @@\n-        assertEquals(Collections.singletonList(x), found);\n+        mustEqual(Collections.singletonList(x), found);\n@@ -677,1 +678,1 @@\n-        assertEquals(2, found.size());\n+        mustEqual(2, found.size());\n@@ -729,1 +730,1 @@\n-        assertEquals(Collections.singletonList(x), found);\n+        mustEqual(Collections.singletonList(x), found);\n@@ -734,1 +735,1 @@\n-        assertEquals(2, found.size());\n+        mustEqual(2, found.size());\n@@ -908,1 +909,1 @@\n-            assertEquals(1L, count.get());\n+            mustEqual(1L, count.get());\n@@ -935,1 +936,1 @@\n-        assertEquals(c, c);\n+        mustEqual(c, c);\n@@ -971,1 +972,1 @@\n-            assertEquals(it.next(), copy.get(i));\n+            mustEqual(it.next(), copy.get(i));\n@@ -975,1 +976,1 @@\n-            assertEquals(it.next(), copy.get(i));\n+            mustEqual(it.next(), copy.get(i));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/Collection8Test.java","additions":60,"deletions":59,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -107,2 +107,2 @@\n-        assertEquals(expectedValue, f.join());\n-        assertEquals(expectedValue, f.getNow(null));\n+        mustEqual(expectedValue, f.join());\n+        mustEqual(expectedValue, f.getNow(null));\n@@ -114,1 +114,1 @@\n-        assertEquals(expectedValue, result);\n+        mustEqual(expectedValue, result);\n@@ -238,1 +238,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -247,1 +247,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -249,1 +249,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -261,1 +261,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -275,1 +275,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -287,1 +287,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -310,1 +310,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -313,1 +313,1 @@\n-        CompletableFuture<Integer> f;\n+        CompletableFuture<Item> f;\n@@ -345,1 +345,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -347,2 +347,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        assertEquals(0, f.getNumberOfDependents());\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        mustEqual(0, f.getNumberOfDependents());\n@@ -350,2 +350,2 @@\n-        assertEquals(1, f.getNumberOfDependents());\n-        assertEquals(0, g.getNumberOfDependents());\n+        mustEqual(1, f.getNumberOfDependents());\n+        mustEqual(0, g.getNumberOfDependents());\n@@ -353,2 +353,2 @@\n-        assertEquals(2, f.getNumberOfDependents());\n-        assertEquals(0, h.getNumberOfDependents());\n+        mustEqual(2, f.getNumberOfDependents());\n+        mustEqual(0, h.getNumberOfDependents());\n@@ -358,3 +358,3 @@\n-        assertEquals(0, f.getNumberOfDependents());\n-        assertEquals(0, g.getNumberOfDependents());\n-        assertEquals(0, h.getNumberOfDependents());\n+        mustEqual(0, f.getNumberOfDependents());\n+        mustEqual(0, g.getNumberOfDependents());\n+        mustEqual(0, h.getNumberOfDependents());\n@@ -370,1 +370,1 @@\n-            assertEquals(identityString(f) + \"[Not completed]\",\n+            mustEqual(identityString(f) + \"[Not completed]\",\n@@ -379,1 +379,1 @@\n-            assertEquals(identityString(f) + \"[Completed normally]\",\n+            mustEqual(identityString(f) + \"[Completed normally]\",\n@@ -417,1 +417,1 @@\n-            assertEquals(0, invocationCount++);\n+            mustEqual(0, invocationCount++);\n@@ -419,2 +419,2 @@\n-        void assertNotInvoked() { assertEquals(0, invocationCount); }\n-        void assertInvoked() { assertEquals(1, invocationCount); }\n+        void assertNotInvoked() { mustEqual(0, invocationCount); }\n+        void assertInvoked() { mustEqual(1, invocationCount); }\n@@ -423,4 +423,4 @@\n-    abstract static class CheckedIntegerAction extends CheckedAction {\n-        Integer value;\n-        CheckedIntegerAction(ExecutionMode m) { super(m); }\n-        void assertValue(Integer expected) {\n+    abstract static class CheckedItemAction extends CheckedAction {\n+        Item value;\n+        CheckedItemAction(ExecutionMode m) { super(m); }\n+        void assertValue(Item expected) {\n@@ -428,1 +428,1 @@\n-            assertEquals(expected, value);\n+            mustEqual(expected, value);\n@@ -432,2 +432,2 @@\n-    static class IntegerSupplier extends CheckedAction\n-        implements Supplier<Integer>\n+    static class ItemSupplier extends CheckedAction\n+        implements Supplier<Item>\n@@ -435,2 +435,2 @@\n-        final Integer value;\n-        IntegerSupplier(ExecutionMode m, Integer value) {\n+        final Item value;\n+        ItemSupplier(ExecutionMode m, Item value) {\n@@ -440,1 +440,1 @@\n-        public Integer get() {\n+        public Item get() {\n@@ -447,2 +447,2 @@\n-    static Integer inc(Integer x) {\n-        return (x == null) ? null : x + 1;\n+    static Item inc(Item x) {\n+        return (x == null) ? null : new Item(x.value + 1);\n@@ -451,2 +451,2 @@\n-    static class NoopConsumer extends CheckedIntegerAction\n-        implements Consumer<Integer>\n+    static class NoopConsumer extends CheckedItemAction\n+        implements Consumer<Item>\n@@ -455,1 +455,1 @@\n-        public void accept(Integer x) {\n+        public void accept(Item x) {\n@@ -461,2 +461,2 @@\n-    static class IncFunction extends CheckedIntegerAction\n-        implements Function<Integer,Integer>\n+    static class IncFunction extends CheckedItemAction\n+        implements Function<Item,Item>\n@@ -465,1 +465,1 @@\n-        public Integer apply(Integer x) {\n+        public Item apply(Item x) {\n@@ -473,1 +473,1 @@\n-    static Integer subtract(Integer x, Integer y) {\n+    static Item subtract(Item x, Item y) {\n@@ -475,2 +475,2 @@\n-            ((x == null) ? 42 : x.intValue())\n-            - ((y == null) ? 99 : y.intValue());\n+            new Item(((x == null) ? 42 : x.value)\n+                    - ((y == null) ? 99 : y.value));\n@@ -479,2 +479,2 @@\n-    static class SubtractAction extends CheckedIntegerAction\n-        implements BiConsumer<Integer, Integer>\n+    static class SubtractAction extends CheckedItemAction\n+        implements BiConsumer<Item, Item>\n@@ -483,1 +483,1 @@\n-        public void accept(Integer x, Integer y) {\n+        public void accept(Item x, Item y) {\n@@ -489,2 +489,2 @@\n-    static class SubtractFunction extends CheckedIntegerAction\n-        implements BiFunction<Integer, Integer, Integer>\n+    static class SubtractFunction extends CheckedItemAction\n+        implements BiFunction<Item, Item, Item>\n@@ -493,1 +493,1 @@\n-        public Integer apply(Integer x, Integer y) {\n+        public Item apply(Item x, Item y) {\n@@ -507,1 +507,1 @@\n-        implements Supplier<Integer>\n+        implements Supplier<Item>\n@@ -511,1 +511,1 @@\n-        public Integer get() {\n+        public Item get() {\n@@ -517,2 +517,2 @@\n-    static class FailingConsumer extends CheckedIntegerAction\n-        implements Consumer<Integer>\n+    static class FailingConsumer extends CheckedItemAction\n+        implements Consumer<Item>\n@@ -522,1 +522,1 @@\n-        public void accept(Integer x) {\n+        public void accept(Item x) {\n@@ -529,2 +529,2 @@\n-    static class FailingBiConsumer extends CheckedIntegerAction\n-        implements BiConsumer<Integer, Integer>\n+    static class FailingBiConsumer extends CheckedItemAction\n+        implements BiConsumer<Item, Item>\n@@ -534,1 +534,1 @@\n-        public void accept(Integer x, Integer y) {\n+        public void accept(Item x, Item y) {\n@@ -541,2 +541,2 @@\n-    static class FailingFunction extends CheckedIntegerAction\n-        implements Function<Integer, Integer>\n+    static class FailingFunction extends CheckedItemAction\n+        implements Function<Item, Item>\n@@ -546,1 +546,1 @@\n-        public Integer apply(Integer x) {\n+        public Item apply(Item x) {\n@@ -553,2 +553,2 @@\n-    static class FailingBiFunction extends CheckedIntegerAction\n-        implements BiFunction<Integer, Integer, Integer>\n+    static class FailingBiFunction extends CheckedItemAction\n+        implements BiFunction<Item, Item, Item>\n@@ -558,1 +558,1 @@\n-        public Integer apply(Integer x, Integer y) {\n+        public Item apply(Item x, Item y) {\n@@ -574,2 +574,2 @@\n-    static class CompletableFutureInc extends CheckedIntegerAction\n-        implements Function<Integer, CompletableFuture<Integer>>\n+    static class CompletableFutureInc extends CheckedItemAction\n+        implements Function<Item, CompletableFuture<Item>>\n@@ -578,1 +578,1 @@\n-        public CompletableFuture<Integer> apply(Integer x) {\n+        public CompletableFuture<Item> apply(Item x) {\n@@ -586,1 +586,1 @@\n-        implements Function<Throwable, CompletableFuture<Integer>>\n+        implements Function<Throwable, CompletableFuture<Item>>\n@@ -590,1 +590,1 @@\n-        public CompletableFuture<Integer> apply(Throwable x) {\n+        public CompletableFuture<Item> apply(Throwable x) {\n@@ -597,2 +597,2 @@\n-        implements Function<Throwable, CompletionStage<Integer>> {\n-        final Integer value = 3;\n+        implements Function<Throwable, CompletionStage<Item>> {\n+        final Item value = three;\n@@ -600,1 +600,1 @@\n-        public CompletionStage<Integer> apply(Throwable x) {\n+        public CompletionStage<Item> apply(Throwable x) {\n@@ -606,2 +606,2 @@\n-    static class FailingCompletableFutureFunction extends CheckedIntegerAction\n-        implements Function<Integer, CompletableFuture<Integer>>\n+    static class FailingCompletableFutureFunction extends CheckedItemAction\n+        implements Function<Item, CompletableFuture<Item>>\n@@ -611,1 +611,1 @@\n-        public CompletableFuture<Integer> apply(Integer x) {\n+        public CompletableFuture<Item> apply(Item x) {\n@@ -733,1 +733,1 @@\n-                assertEquals(defaultExecutorIsCommonPool,\n+                mustEqual(defaultExecutorIsCommonPool,\n@@ -954,1 +954,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -957,1 +957,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -959,1 +959,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionally\n+        final CompletableFuture<Item> g = m.exceptionally\n@@ -968,1 +968,1 @@\n-        assertEquals(0, ran.get());\n+        mustEqual(0, ran.get());\n@@ -978,1 +978,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -982,1 +982,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -984,1 +984,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionally\n+        final CompletableFuture<Item> g = m.exceptionally\n@@ -994,1 +994,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1008,1 +1008,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1010,1 +1010,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionally\n+        final CompletableFuture<Item> g = m.exceptionally\n@@ -1021,1 +1021,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1031,1 +1031,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1034,1 +1034,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1036,1 +1036,1 @@\n-        final CompletableFuture<Integer> g = m.whenComplete\n+        final CompletableFuture<Item> g = m.whenComplete\n@@ -1038,1 +1038,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1048,1 +1048,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1061,1 +1061,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1063,1 +1063,1 @@\n-        final CompletableFuture<Integer> g = m.whenComplete\n+        final CompletableFuture<Item> g = m.whenComplete\n@@ -1065,1 +1065,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1075,1 +1075,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1088,1 +1088,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1090,1 +1090,1 @@\n-        final CompletableFuture<Integer> g = m.whenComplete\n+        final CompletableFuture<Item> g = m.whenComplete\n@@ -1092,1 +1092,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1102,1 +1102,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1112,1 +1112,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1116,1 +1116,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1118,1 +1118,1 @@\n-        final CompletableFuture<Integer> g = m.whenComplete\n+        final CompletableFuture<Item> g = m.whenComplete\n@@ -1120,1 +1120,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1131,1 +1131,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1146,1 +1146,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1149,1 +1149,1 @@\n-        final CompletableFuture<Integer> g = m.whenComplete\n+        final CompletableFuture<Item> g = m.whenComplete\n@@ -1151,1 +1151,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1163,1 +1163,1 @@\n-            assertEquals(1, ex1.getSuppressed().length);\n+            mustEqual(1, ex1.getSuppressed().length);\n@@ -1166,1 +1166,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1176,1 +1176,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1178,1 +1178,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1181,1 +1181,1 @@\n-        final CompletableFuture<Integer> g = m.handle\n+        final CompletableFuture<Item> g = m.handle\n@@ -1183,1 +1183,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1194,1 +1194,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1204,1 +1204,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1206,1 +1206,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1210,1 +1210,1 @@\n-        final CompletableFuture<Integer> g = m.handle\n+        final CompletableFuture<Item> g = m.handle\n@@ -1212,1 +1212,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1223,1 +1223,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1234,1 +1234,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1236,1 +1236,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1239,1 +1239,1 @@\n-        final CompletableFuture<Integer> g = m.handle\n+        final CompletableFuture<Item> g = m.handle\n@@ -1241,1 +1241,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1252,1 +1252,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1262,1 +1262,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1264,1 +1264,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1268,1 +1268,1 @@\n-        final CompletableFuture<Integer> g = m.handle\n+        final CompletableFuture<Item> g = m.handle\n@@ -1270,1 +1270,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1281,1 +1281,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1296,1 +1296,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1299,1 +1299,1 @@\n-        final CompletableFuture<Integer> g = m.handle\n+        final CompletableFuture<Item> g = m.handle\n@@ -1301,1 +1301,1 @@\n-             (Integer result, Throwable t) -> {\n+             (Item result, Throwable t) -> {\n@@ -1312,1 +1312,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -1358,1 +1358,1 @@\n-        assertEquals(1, e.count.get());\n+        mustEqual(1, e.count.get());\n@@ -1370,1 +1370,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1372,2 +1372,2 @@\n-        final IntegerSupplier r = new IntegerSupplier(m, v1);\n-        final CompletableFuture<Integer> f = m.supplyAsync(r);\n+        final ItemSupplier r = new ItemSupplier(m, v1);\n+        final CompletableFuture<Item> f = m.supplyAsync(r);\n@@ -1390,1 +1390,1 @@\n-        CompletableFuture<Integer> f = m.supplyAsync(r);\n+        CompletableFuture<Item> f = m.supplyAsync(r);\n@@ -1405,1 +1405,1 @@\n-        assertEquals(1, e.count.get());\n+        mustEqual(1, e.count.get());\n@@ -1415,1 +1415,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1417,1 +1417,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1450,1 +1450,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1482,1 +1482,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1512,1 +1512,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1514,1 +1514,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1540,1 +1540,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1542,1 +1542,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1546,2 +1546,2 @@\n-        final CompletableFuture<Integer> h0 = m.thenApply(f, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(f, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.thenApply(f, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(f, f, rs[1]);\n@@ -1551,2 +1551,2 @@\n-        final CompletableFuture<Integer> h2 = m.thenApply(f, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(f, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.thenApply(f, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(f, f, rs[3]);\n@@ -1570,1 +1570,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1574,2 +1574,2 @@\n-        final CompletableFuture<Integer> h0 = m.thenApply(f, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(f, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.thenApply(f, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(f, f, rs[1]);\n@@ -1577,2 +1577,2 @@\n-        final CompletableFuture<Integer> h2 = m.thenApply(f, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(f, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.thenApply(f, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(f, f, rs[3]);\n@@ -1595,1 +1595,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1599,2 +1599,2 @@\n-        final CompletableFuture<Integer> h0 = m.thenApply(f, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(f, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.thenApply(f, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(f, f, rs[1]);\n@@ -1602,2 +1602,2 @@\n-        final CompletableFuture<Integer> h2 = m.thenApply(f, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(f, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.thenApply(f, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(f, f, rs[3]);\n@@ -1618,1 +1618,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1620,1 +1620,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1624,2 +1624,2 @@\n-        final CompletableFuture<Integer> h0 = m.thenApply(f, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(f, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.thenApply(f, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(f, f, rs[1]);\n@@ -1627,2 +1627,2 @@\n-        final CompletableFuture<Integer> h2 = m.thenApply(f, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(f, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.thenApply(f, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(f, f, rs[3]);\n@@ -1642,1 +1642,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1644,1 +1644,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1672,1 +1672,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1697,1 +1697,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1720,1 +1720,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1722,1 +1722,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -1746,2 +1746,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -1749,2 +1749,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1754,4 +1754,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -1759,2 +1759,2 @@\n-        final CompletableFuture<Integer> h0 = m.thenCombine(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.thenCombine(fst, fst, rs[1]);\n+        final CompletableFuture<Item> h0 = m.thenCombine(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.thenCombine(fst, fst, rs[1]);\n@@ -1762,2 +1762,2 @@\n-        final CompletableFuture<Integer> h2 = m.thenCombine(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.thenCombine(fst, fst, rs[3]);\n+        final CompletableFuture<Item> h2 = m.thenCombine(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.thenCombine(fst, fst, rs[3]);\n@@ -1771,1 +1771,1 @@\n-        final CompletableFuture<Integer> h4 = m.thenCombine(f, g, rs[4]);\n+        final CompletableFuture<Item> h4 = m.thenCombine(f, g, rs[4]);\n@@ -1792,1 +1792,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1794,2 +1794,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1801,2 +1801,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -1810,1 +1810,1 @@\n-        final CompletableFuture<Integer> h1 = m.thenCombine(f, g, r1);\n+        final CompletableFuture<Item> h1 = m.thenCombine(f, g, r1);\n@@ -1812,1 +1812,1 @@\n-        final CompletableFuture<Integer> h2 = m.thenCombine(f, g, r2);\n+        final CompletableFuture<Item> h2 = m.thenCombine(f, g, r2);\n@@ -1816,1 +1816,1 @@\n-        final CompletableFuture<Integer> h3 = m.thenCombine(f, g, r3);\n+        final CompletableFuture<Item> h3 = m.thenCombine(f, g, r3);\n@@ -1836,1 +1836,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1838,2 +1838,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1844,2 +1844,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -1853,1 +1853,1 @@\n-        final CompletableFuture<Integer> h1 = m.thenCombine(f, g, r1);\n+        final CompletableFuture<Item> h1 = m.thenCombine(f, g, r1);\n@@ -1855,1 +1855,1 @@\n-        final CompletableFuture<Integer> h2 = m.thenCombine(f, g, r2);\n+        final CompletableFuture<Item> h2 = m.thenCombine(f, g, r2);\n@@ -1859,1 +1859,1 @@\n-        final CompletableFuture<Integer> h3 = m.thenCombine(f, g, r3);\n+        final CompletableFuture<Item> h3 = m.thenCombine(f, g, r3);\n@@ -1877,2 +1877,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -1880,2 +1880,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1886,4 +1886,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -1891,1 +1891,1 @@\n-        final CompletableFuture<Integer> h1 = m.thenCombine(f, g, r1);\n+        final CompletableFuture<Item> h1 = m.thenCombine(f, g, r1);\n@@ -1893,1 +1893,1 @@\n-        final CompletableFuture<Integer> h2 = m.thenCombine(f, g, r2);\n+        final CompletableFuture<Item> h2 = m.thenCombine(f, g, r2);\n@@ -1895,1 +1895,1 @@\n-        final CompletableFuture<Integer> h3 = m.thenCombine(f, g, r3);\n+        final CompletableFuture<Item> h3 = m.thenCombine(f, g, r3);\n@@ -1914,2 +1914,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -1917,2 +1917,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1923,4 +1923,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -1956,1 +1956,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -1958,2 +1958,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -1965,2 +1965,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -2000,1 +2000,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2002,2 +2002,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2008,2 +2008,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -2041,2 +2041,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2044,2 +2044,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2050,4 +2050,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -2078,2 +2078,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2081,2 +2081,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2087,4 +2087,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -2120,1 +2120,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2122,2 +2122,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2129,2 +2129,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -2164,1 +2164,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2166,2 +2166,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2172,2 +2172,2 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n@@ -2205,2 +2205,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2208,2 +2208,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2214,4 +2214,4 @@\n-        final CompletableFuture<Integer> fst =  fFirst ? f : g;\n-        final CompletableFuture<Integer> snd = !fFirst ? f : g;\n-        final Integer w1 =  fFirst ? v1 : v2;\n-        final Integer w2 = !fFirst ? v1 : v2;\n+        final CompletableFuture<Item> fst =  fFirst ? f : g;\n+        final CompletableFuture<Item> snd = !fFirst ? f : g;\n+        final Item w1 =  fFirst ? v1 : v2;\n+        final Item w2 = !fFirst ? v1 : v2;\n@@ -2241,2 +2241,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2244,2 +2244,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2249,2 +2249,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2258,2 +2258,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2265,2 +2265,2 @@\n-        final CompletableFuture<Integer> h4 = m.applyToEither(f, g, rs[4]);\n-        final CompletableFuture<Integer> h5 = m.applyToEither(g, f, rs[5]);\n+        final CompletableFuture<Item> h4 = m.applyToEither(f, g, rs[4]);\n+        final CompletableFuture<Item> h5 = m.applyToEither(g, f, rs[5]);\n@@ -2289,1 +2289,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2291,2 +2291,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2297,2 +2297,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2306,2 +2306,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2313,2 +2313,2 @@\n-        final CompletableFuture<Integer> h4 = m.applyToEither(f, g, rs[4]);\n-        final CompletableFuture<Integer> h5 = m.applyToEither(g, f, rs[5]);\n+        final CompletableFuture<Item> h4 = m.applyToEither(f, g, rs[4]);\n+        final CompletableFuture<Item> h5 = m.applyToEither(g, f, rs[5]);\n@@ -2316,1 +2316,1 @@\n-            assertEquals(inc(v1), h4.join());\n+            mustEqual(inc(v1), h4.join());\n@@ -2323,1 +2323,1 @@\n-            assertEquals(inc(v1), h5.join());\n+            mustEqual(inc(v1), h5.join());\n@@ -2343,1 +2343,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2345,2 +2345,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2351,2 +2351,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2355,2 +2355,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2360,1 +2360,1 @@\n-            assertEquals(inc(v1), h0.join());\n+            mustEqual(inc(v1), h0.join());\n@@ -2367,1 +2367,1 @@\n-            assertEquals(inc(v1), h1.join());\n+            mustEqual(inc(v1), h1.join());\n@@ -2374,1 +2374,1 @@\n-            assertEquals(inc(v1), h2.join());\n+            mustEqual(inc(v1), h2.join());\n@@ -2381,1 +2381,1 @@\n-            assertEquals(inc(v1), h3.join());\n+            mustEqual(inc(v1), h3.join());\n@@ -2398,1 +2398,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2400,2 +2400,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2405,2 +2405,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2414,2 +2414,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2421,2 +2421,2 @@\n-        final CompletableFuture<Integer> h4 = m.applyToEither(f, g, rs[4]);\n-        final CompletableFuture<Integer> h5 = m.applyToEither(g, f, rs[5]);\n+        final CompletableFuture<Item> h4 = m.applyToEither(f, g, rs[4]);\n+        final CompletableFuture<Item> h5 = m.applyToEither(g, f, rs[5]);\n@@ -2424,1 +2424,1 @@\n-            assertEquals(inc(v1), h4.join());\n+            mustEqual(inc(v1), h4.join());\n@@ -2431,1 +2431,1 @@\n-            assertEquals(inc(v1), h5.join());\n+            mustEqual(inc(v1), h5.join());\n@@ -2451,1 +2451,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2453,2 +2453,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2458,2 +2458,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2462,2 +2462,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2467,1 +2467,1 @@\n-            assertEquals(inc(v1), h0.join());\n+            mustEqual(inc(v1), h0.join());\n@@ -2474,1 +2474,1 @@\n-            assertEquals(inc(v1), h1.join());\n+            mustEqual(inc(v1), h1.join());\n@@ -2481,1 +2481,1 @@\n-            assertEquals(inc(v1), h2.join());\n+            mustEqual(inc(v1), h2.join());\n@@ -2488,1 +2488,1 @@\n-            assertEquals(inc(v1), h3.join());\n+            mustEqual(inc(v1), h3.join());\n@@ -2504,2 +2504,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2507,2 +2507,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2512,2 +2512,2 @@\n-        final CompletableFuture<Integer> h0 = m.applyToEither(f, g, rs[0]);\n-        final CompletableFuture<Integer> h1 = m.applyToEither(g, f, rs[1]);\n+        final CompletableFuture<Item> h0 = m.applyToEither(f, g, rs[0]);\n+        final CompletableFuture<Item> h1 = m.applyToEither(g, f, rs[1]);\n@@ -2515,2 +2515,2 @@\n-        final CompletableFuture<Integer> h2 = m.applyToEither(f, g, rs[2]);\n-        final CompletableFuture<Integer> h3 = m.applyToEither(g, f, rs[3]);\n+        final CompletableFuture<Item> h2 = m.applyToEither(f, g, rs[2]);\n+        final CompletableFuture<Item> h3 = m.applyToEither(g, f, rs[3]);\n@@ -2526,2 +2526,2 @@\n-        final CompletableFuture<Integer> h4 = m.applyToEither(f, g, rs[4]);\n-        final CompletableFuture<Integer> h5 = m.applyToEither(g, f, rs[5]);\n+        final CompletableFuture<Item> h4 = m.applyToEither(f, g, rs[4]);\n+        final CompletableFuture<Item> h5 = m.applyToEither(g, f, rs[5]);\n@@ -2546,2 +2546,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2549,2 +2549,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2598,1 +2598,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2600,2 +2600,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2653,1 +2653,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2655,2 +2655,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2708,1 +2708,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2710,2 +2710,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2763,2 +2763,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2766,2 +2766,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2805,2 +2805,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -2809,2 +2809,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2858,1 +2858,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2860,2 +2860,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2913,1 +2913,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2915,2 +2915,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -2968,1 +2968,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -2970,2 +2970,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -3023,2 +3023,2 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n-        for (Integer v2 : new Integer[] { 2, null })\n+        for (Item v1 : new Item[] { one, null })\n+        for (Item v2 : new Item[] { two, null })\n@@ -3026,2 +3026,2 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -3058,1 +3058,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3060,1 +3060,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3063,1 +3063,1 @@\n-        final CompletableFuture<Integer> g = m.thenCompose(f, r);\n+        final CompletableFuture<Item> g = m.thenCompose(f, r);\n@@ -3081,1 +3081,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3083,1 +3083,1 @@\n-        final CompletableFuture<Integer> g = m.thenCompose(f, r);\n+        final CompletableFuture<Item> g = m.thenCompose(f, r);\n@@ -3097,1 +3097,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3099,1 +3099,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3103,1 +3103,1 @@\n-        final CompletableFuture<Integer> g = m.thenCompose(f, r);\n+        final CompletableFuture<Item> g = m.thenCompose(f, r);\n@@ -3118,1 +3118,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3121,1 +3121,1 @@\n-        final CompletableFuture<Integer> g = m.thenCompose(f, r);\n+        final CompletableFuture<Item> g = m.thenCompose(f, r);\n@@ -3137,1 +3137,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3140,3 +3140,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n-        final CompletableFuture<Integer> h;\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> h;\n@@ -3190,1 +3190,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3192,1 +3192,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3196,1 +3196,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionallyCompose(f, r);\n+        final CompletableFuture<Item> g = m.exceptionallyCompose(f, r);\n@@ -3215,1 +3215,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3217,1 +3217,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionallyCompose(f, r);\n+        final CompletableFuture<Item> g = m.exceptionallyCompose(f, r);\n@@ -3233,1 +3233,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3237,1 +3237,1 @@\n-        final CompletableFuture<Integer> g = m.exceptionallyCompose(f, r);\n+        final CompletableFuture<Item> g = m.exceptionallyCompose(f, r);\n@@ -3255,3 +3255,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final CompletableFuture<Integer> g = new CompletableFuture<>();\n-        final CompletableFuture<Integer> h;\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> g = new CompletableFuture<>();\n+        final CompletableFuture<Item> h;\n@@ -3315,2 +3315,3 @@\n-            CompletableFuture<Integer>[] fs\n-                = (CompletableFuture<Integer>[]) new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs\n+                = (CompletableFuture<Item>[]) new CompletableFuture[k];\n@@ -3332,2 +3333,3 @@\n-            CompletableFuture<Integer>[] fs\n-                = (CompletableFuture<Integer>[]) new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs\n+                = (CompletableFuture<Item>[]) new CompletableFuture[k];\n@@ -3349,2 +3351,3 @@\n-            CompletableFuture<Integer>[] fs\n-                = (CompletableFuture<Integer>[]) new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs\n+                = (CompletableFuture<Item>[]) new CompletableFuture[k];\n@@ -3356,0 +3359,1 @@\n+                Item I = itemFor(i);\n@@ -3359,2 +3363,2 @@\n-                    fs[i].complete(i);\n-                    checkCompletedNormally(fs[i], i);\n+                    fs[i].complete(I);\n+                    checkCompletedNormally(fs[i], I);\n@@ -3375,1 +3379,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3390,1 +3394,3 @@\n-            CompletableFuture[] fs = new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs =\n+                (CompletableFuture<Item>[])new CompletableFuture[k];\n@@ -3396,4 +3402,4 @@\n-                fs[i].complete(i);\n-                checkCompletedNormally(f, 0);\n-                int x = (int) CompletableFuture.anyOf(fs).join();\n-                assertTrue(0 <= x && x <= i);\n+                fs[i].complete(itemFor(i));\n+                checkCompletedNormally(f, zero);\n+                Item x = (Item)CompletableFuture.anyOf(fs).join();\n+                assertTrue(0 <= x.value && x.value <= i);\n@@ -3405,1 +3411,3 @@\n-            CompletableFuture[] fs = new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs =\n+                (CompletableFuture<Item>[])new CompletableFuture[k];\n@@ -3411,4 +3419,4 @@\n-                fs[i].complete(i);\n-                checkCompletedNormally(f, k - 1);\n-                int x = (int) CompletableFuture.anyOf(fs).join();\n-                assertTrue(i <= x && x <= k - 1);\n+                fs[i].complete(itemFor(i));\n+                checkCompletedNormally(f, itemFor(k - 1));\n+                Item x = (Item)CompletableFuture.anyOf(fs).join();\n+                assertTrue(i <= x.value && x.value <= k - 1);\n@@ -3424,1 +3432,3 @@\n-            CompletableFuture[] fs = new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Item>[] fs =\n+                (CompletableFuture<Item>[])new CompletableFuture[k];\n@@ -3442,1 +3452,3 @@\n-            CompletableFuture[] fs = new CompletableFuture[k];\n+            @SuppressWarnings(\"unchecked\")\n+            CompletableFuture<Object>[] fs =\n+                (CompletableFuture<Object>[])new CompletableFuture[k];\n@@ -3463,3 +3475,3 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletableFuture<Integer> g = new CompletableFuture<>();\n-        CompletableFuture<Integer> nullFuture = (CompletableFuture<Integer>)null;\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletableFuture<Item> g = new CompletableFuture<>();\n+        CompletableFuture<Item> nullFuture = (CompletableFuture<Item>)null;\n@@ -3473,1 +3485,1 @@\n-            () -> CompletableFuture.supplyAsync(new IntegerSupplier(ExecutionMode.SYNC, 42), null),\n+            () -> CompletableFuture.supplyAsync(new ItemSupplier(ExecutionMode.SYNC, fortytwo), null),\n@@ -3570,1 +3582,1 @@\n-            () -> f.completeOnTimeout(42, 1L, null),\n+            () -> f.completeOnTimeout(fortytwo, 1L, null),\n@@ -3575,1 +3587,1 @@\n-        assertEquals(0, exec.count.get());\n+        mustEqual(0, exec.count.get());\n@@ -3582,1 +3594,1 @@\n-        for (Integer v : new Integer[] { 1, null })\n+        for (Item v : new Item[] { one, null })\n@@ -3586,2 +3598,2 @@\n-        final CompletableFuture<Integer> complete = CompletableFuture.completedFuture(v);\n-        final CompletableFuture<Integer> incomplete = new CompletableFuture<>();\n+        final CompletableFuture<Item> complete = CompletableFuture.completedFuture(v);\n+        final CompletableFuture<Item> incomplete = new CompletableFuture<>();\n@@ -3591,1 +3603,1 @@\n-        List<CompletableFuture<Integer>> srcs = new ArrayList<>();\n+        List<CompletableFuture<Item>> srcs = new ArrayList<>();\n@@ -3595,1 +3607,1 @@\n-        for (CompletableFuture<Integer> src : srcs) {\n+        for (CompletableFuture<Item> src : srcs) {\n@@ -3661,1 +3673,1 @@\n-        assertEquals(futures.size(), e.count.get());\n+        mustEqual(futures.size(), e.count.get());\n@@ -3670,1 +3682,1 @@\n-        for (Integer v : new Integer[] { 1, null })\n+        for (Item v : new Item[] { one, null })\n@@ -3674,2 +3686,2 @@\n-        final CompletableFuture<Integer> complete = CompletableFuture.completedFuture(v);\n-        final CompletableFuture<Integer> incomplete = new CompletableFuture<>();\n+        final CompletableFuture<Item> complete = CompletableFuture.completedFuture(v);\n+        final CompletableFuture<Item> incomplete = new CompletableFuture<>();\n@@ -3714,1 +3726,1 @@\n-        assertEquals(0, e.count.get());\n+        mustEqual(0, e.count.get());\n@@ -3721,1 +3733,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3731,1 +3743,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3733,2 +3745,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletableFuture<Integer> g = f.newIncompleteFuture();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletableFuture<Item> g = f.newIncompleteFuture();\n@@ -3751,3 +3763,3 @@\n-        CompletionStage<Integer> f = CompletableFuture.completedStage(1);\n-        f.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v);});\n-        assertEquals(x.get(), 1);\n+        CompletionStage<Item> f = CompletableFuture.completedStage(one);\n+        f.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v.value);});\n+        mustEqual(x.get(), 1);\n@@ -3762,1 +3774,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3777,1 +3789,1 @@\n-        CompletableFuture<Integer> f = CompletableFuture.failedFuture(ex);\n+        CompletableFuture<Item> f = CompletableFuture.failedFuture(ex);\n@@ -3787,1 +3799,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3789,1 +3801,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3791,1 +3803,1 @@\n-        CompletableFuture<Integer> g = f.copy();\n+        CompletableFuture<Item> g = f.copy();\n@@ -3809,1 +3821,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3811,1 +3823,1 @@\n-        CompletableFuture<Integer> g = f.copy();\n+        CompletableFuture<Item> g = f.copy();\n@@ -3825,2 +3837,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        assertTrue(f.copy().complete(1));\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        assertTrue(f.copy().complete(one));\n@@ -3839,2 +3851,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> g = f.minimalCompletionStage();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> g = f.minimalCompletionStage();\n@@ -3844,4 +3856,4 @@\n-        g.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v);});\n-        f.complete(1);\n-        checkCompletedNormally(f, 1);\n-        assertEquals(x.get(), 1);\n+        g.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v.value);});\n+        f.complete(one);\n+        checkCompletedNormally(f, one);\n+        mustEqual(x.get(), 1);\n@@ -3856,2 +3868,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> g = f.minimalCompletionStage();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> g = f.minimalCompletionStage();\n@@ -3860,1 +3872,1 @@\n-        g.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v);});\n+        g.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v.value);});\n@@ -3865,2 +3877,2 @@\n-        assertEquals(x.get(), 0);\n-        assertEquals(r.get().getCause(), ex);\n+        mustEqual(x.get(), 0);\n+        mustEqual(r.get().getCause(), ex);\n@@ -3875,1 +3887,1 @@\n-        CompletionStage<Integer> f = CompletableFuture.failedStage(ex);\n+        CompletionStage<Item> f = CompletableFuture.failedStage(ex);\n@@ -3878,3 +3890,3 @@\n-        f.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v);});\n-        assertEquals(x.get(), 0);\n-        assertEquals(r.get(), ex);\n+        f.whenComplete((v, e) -> {if (e != null) r.set(e); else x.set(v.value);});\n+        mustEqual(x.get(), 0);\n+        mustEqual(r.get(), ex);\n@@ -3887,1 +3899,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3889,1 +3901,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3899,1 +3911,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3913,1 +3925,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3915,1 +3927,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3920,1 +3932,1 @@\n-        assertEquals(1, executor.count.get());\n+        mustEqual(1, executor.count.get());\n@@ -3928,1 +3940,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3937,1 +3949,1 @@\n-        assertEquals(1, executor.count.get());\n+        mustEqual(1, executor.count.get());\n@@ -3945,1 +3957,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3956,1 +3968,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3958,2 +3970,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletableFuture<Integer> g = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -3974,1 +3986,1 @@\n-        testInParallel(() -> testCompleteOnTimeout_timesOut(42),\n+        testInParallel(() -> testCompleteOnTimeout_timesOut(fortytwo),\n@@ -3981,1 +3993,1 @@\n-    public void testCompleteOnTimeout_timesOut(Integer v) {\n+    public void testCompleteOnTimeout_timesOut(Item v) {\n@@ -3983,1 +3995,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -3988,1 +4000,1 @@\n-        f.complete(99);         \/\/ should have no effect\n+        f.complete(ninetynine);         \/\/ should have no effect\n@@ -3996,1 +4008,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -3998,2 +4010,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletableFuture<Integer> g = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -4002,2 +4014,2 @@\n-        assertSame(f, f.completeOnTimeout(-1, LONG_DELAY_MS, MILLISECONDS));\n-        assertSame(g, g.completeOnTimeout(-1, LONG_DELAY_MS, MILLISECONDS));\n+        mustEqual(f, f.completeOnTimeout(minusOne, LONG_DELAY_MS, MILLISECONDS));\n+        mustEqual(g, g.completeOnTimeout(minusOne, LONG_DELAY_MS, MILLISECONDS));\n@@ -4015,3 +4027,3 @@\n-                       () -> testDelayedExecutor(null, 1),\n-                       () -> testDelayedExecutor(new ThreadExecutor(), 1),\n-                       () -> testDelayedExecutor(new ThreadExecutor(), 1));\n+                       () -> testDelayedExecutor(null, one),\n+                       () -> testDelayedExecutor(new ThreadExecutor(), one),\n+                       () -> testDelayedExecutor(new ThreadExecutor(), one));\n@@ -4020,1 +4032,1 @@\n-    public void testDelayedExecutor(Executor executor, Integer v) throws Exception {\n+    public void testDelayedExecutor(Executor executor, Item v) throws Exception {\n@@ -4033,1 +4045,1 @@\n-        CompletableFuture<Integer> f =\n+        CompletableFuture<Item> f =\n@@ -4035,1 +4047,1 @@\n-        CompletableFuture<Integer> g =\n+        CompletableFuture<Item> g =\n@@ -4080,2 +4092,2 @@\n-        final CompletableFuture<Integer> v42 = CompletableFuture.completedFuture(42);\n-        final CompletableFuture<Integer> incomplete = new CompletableFuture<>();\n+        final CompletableFuture<Item> v42 = CompletableFuture.completedFuture(fortytwo);\n+        final CompletableFuture<Item> incomplete = new CompletableFuture<>();\n@@ -4084,2 +4096,2 @@\n-        final Consumer<Integer> noopConsumer = new NoopConsumer(m);\n-        final Function<Integer, Integer> incFunction = new IncFunction(m);\n+        final Consumer<Item> noopConsumer = new NoopConsumer(m);\n+        final Function<Item, Item> incFunction = new IncFunction(m);\n@@ -4087,1 +4099,1 @@\n-        List<Function<CompletableFuture<Integer>, CompletableFuture<?>>> funs\n+        List<Function<CompletableFuture<Item>, CompletableFuture<?>>> funs\n@@ -4105,1 +4117,1 @@\n-        funs.add(y -> m.whenComplete(y, (Integer r, Throwable t) -> {}));\n+        funs.add(y -> m.whenComplete(y, (Item r, Throwable t) -> {}));\n@@ -4116,1 +4128,1 @@\n-        for (Function<CompletableFuture<Integer>, CompletableFuture<?>>\n+        for (Function<CompletableFuture<Item>, CompletableFuture<?>>\n@@ -4118,1 +4130,1 @@\n-            CompletableFuture<Integer> f = new CompletableFuture<>();\n+            CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4120,1 +4132,1 @@\n-            CompletableFuture<Integer> src = m.thenApply(f, incFunction);\n+            CompletableFuture<Item> src = m.thenApply(f, incFunction);\n@@ -4127,1 +4139,1 @@\n-        for (Function<CompletableFuture<Integer>, CompletableFuture<?>>\n+        for (Function<CompletableFuture<Item>, CompletableFuture<?>>\n@@ -4129,2 +4141,2 @@\n-            CompletableFuture<Integer> f = new CompletableFuture<>();\n-            CompletableFuture<Integer> src = m.thenApply(f, incFunction);\n+            CompletableFuture<Item> f = new CompletableFuture<>();\n+            CompletableFuture<Item> src = m.thenApply(f, incFunction);\n@@ -4139,1 +4151,1 @@\n-        for (Function<CompletableFuture<Integer>, CompletableFuture<?>>\n+        for (Function<CompletableFuture<Item>, CompletableFuture<?>>\n@@ -4141,1 +4153,1 @@\n-            CompletableFuture<Integer> f = new CompletableFuture<>();\n+            CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4144,1 +4156,1 @@\n-            CompletableFuture<Integer> src = m.thenApply(f, incFunction);\n+            CompletableFuture<Item> src = m.thenApply(f, incFunction);\n@@ -4152,1 +4164,1 @@\n-        for (Function<CompletableFuture<Integer>, CompletableFuture<?>>\n+        for (Function<CompletableFuture<Item>, CompletableFuture<?>>\n@@ -4154,2 +4166,2 @@\n-            CompletableFuture<Integer> f = new CompletableFuture<>();\n-            CompletableFuture<Integer> src = m.thenApply(f, incFunction);\n+            CompletableFuture<Item> f = new CompletableFuture<>();\n+            CompletableFuture<Item> src = m.thenApply(f, incFunction);\n@@ -4195,3 +4207,3 @@\n-        List<CompletionStage<Integer>> stages = new ArrayList<>();\n-        CompletionStage<Integer> min =\n-            new CompletableFuture<Integer>().minimalCompletionStage();\n+        List<CompletionStage<Item>> stages = new ArrayList<>();\n+        CompletionStage<Item> min =\n+            new CompletableFuture<Item>().minimalCompletionStage();\n@@ -4200,1 +4212,1 @@\n-        stages.add(CompletableFuture.completedStage(1));\n+        stages.add(CompletableFuture.completedStage(one));\n@@ -4214,1 +4226,1 @@\n-            for (CompletionStage<Integer> stage : stages) {\n+            for (CompletionStage<Item> stage : stages) {\n@@ -4238,1 +4250,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4240,2 +4252,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> minimal = f.minimalCompletionStage();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> minimal = f.minimalCompletionStage();\n@@ -4243,1 +4255,1 @@\n-        CompletableFuture<Integer> g = minimal.toCompletableFuture();\n+        CompletableFuture<Item> g = minimal.toCompletableFuture();\n@@ -4261,2 +4273,2 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> minimal = f.minimalCompletionStage();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> minimal = f.minimalCompletionStage();\n@@ -4264,1 +4276,1 @@\n-        CompletableFuture<Integer> g = minimal.toCompletableFuture();\n+        CompletableFuture<Item> g = minimal.toCompletableFuture();\n@@ -4278,1 +4290,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4280,3 +4292,3 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage minimal = f.minimalCompletionStage();\n-        CompletableFuture<Integer> g = minimal.toCompletableFuture();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> minimal = f.minimalCompletionStage();\n+        CompletableFuture<Item> g = minimal.toCompletableFuture();\n@@ -4294,1 +4306,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4296,1 +4308,1 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4298,1 +4310,1 @@\n-        CompletionStage<Integer> minimal = f.minimalCompletionStage();\n+        CompletionStage<Item> minimal = f.minimalCompletionStage();\n@@ -4300,2 +4312,2 @@\n-        assertEquals(v1, minimal.toCompletableFuture().join());\n-        assertEquals(v1, minimal.toCompletableFuture().get());\n+        mustEqual(v1, minimal.toCompletableFuture().join());\n+        mustEqual(v1, minimal.toCompletableFuture().get());\n@@ -4310,3 +4322,3 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> g = f.minimalCompletionStage();\n-        assertTrue(g.toCompletableFuture().complete(1));\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> g = f.minimalCompletionStage();\n+        assertTrue(g.toCompletableFuture().complete(one));\n@@ -4318,2 +4330,2 @@\n-        f.complete(1);\n-        checkCompletedNormally(g.toCompletableFuture(), 1);\n+        f.complete(one);\n+        checkCompletedNormally(g.toCompletableFuture(), one);\n@@ -4343,1 +4355,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4345,3 +4357,3 @@\n-        CompletableFuture<Integer> f = new CompletableFuture<>();\n-        CompletionStage<Integer> minimal = f.minimalCompletionStage();\n-        CompletableFuture<Integer> g = new CompletableFuture<>();\n+        CompletableFuture<Item> f = new CompletableFuture<>();\n+        CompletionStage<Item> minimal = f.minimalCompletionStage();\n+        CompletableFuture<Item> g = new CompletableFuture<>();\n@@ -4354,1 +4366,1 @@\n-        assertEquals(v1, join(minimal));\n+        mustEqual(v1, join(minimal));\n@@ -4401,1 +4413,1 @@\n-                assertEquals(fval, gval);\n+                mustEqual(fval, gval);\n@@ -4511,2 +4523,2 @@\n-        CompletableFuture<Integer> head = new CompletableFuture<>();\n-        CompletableFuture<Integer> tail = head;\n+        CompletableFuture<Item> head = new CompletableFuture<>();\n+        CompletableFuture<Item> tail = head;\n@@ -4514,6 +4526,6 @@\n-            if (addDeadEnds) m.thenApply(tail, v -> v + 1);\n-            tail = m.thenApply(tail, v -> v + 1);\n-            if (addDeadEnds) m.applyToEither(tail, tail, v -> v + 1);\n-            tail = m.applyToEither(tail, tail, v -> v + 1);\n-            if (addDeadEnds) m.thenCombine(tail, tail, (v, w) -> v + 1);\n-            tail = m.thenCombine(tail, tail, (v, w) -> v + 1);\n+            if (addDeadEnds) m.thenApply(tail, v -> new Item(v.value + 1));\n+            tail = m.thenApply(tail, v -> new Item(v.value + 1));\n+            if (addDeadEnds) m.applyToEither(tail, tail, v -> new Item(v.value + 1));\n+            tail = m.applyToEither(tail, tail, v -> new Item(v.value + 1));\n+            if (addDeadEnds) m.thenCombine(tail, tail, (v, w) -> new Item(v.value + 1));\n+            tail = m.thenCombine(tail, tail, (v, w) -> new Item(v.value + 1));\n@@ -4521,2 +4533,2 @@\n-        head.complete(val);\n-        assertEquals(val + 3 * n, (int) tail.join());\n+        head.complete(itemFor(val));\n+        mustEqual(val + 3 * n, tail.join());\n@@ -4555,1 +4567,1 @@\n-        assertEquals(5 * 3 * n, count.get());\n+        mustEqual(5 * 3 * n, count.get());\n@@ -4562,2 +4574,2 @@\n-        final CompletableFuture<Integer> incomplete = new CompletableFuture<>();\n-        CompletableFuture<Integer> f;\n+        final CompletableFuture<Item> incomplete = new CompletableFuture<>();\n+        CompletableFuture<Item> f;\n@@ -4607,1 +4619,1 @@\n-        for (Integer v : new Integer[] { 1, null })\n+        for (Item v : new Item[] { one, null })\n@@ -4610,2 +4622,3 @@\n-        CompletableFuture<Integer>[] fs\n-            = (CompletableFuture<Integer>[]) new CompletableFuture<?>[100];\n+        @SuppressWarnings(\"unchecked\")\n+        CompletableFuture<Item>[] fs =\n+            (CompletableFuture<Item>[])new CompletableFuture[100];\n@@ -4627,2 +4640,3 @@\n-        CompletableFuture<Integer>[] fs\n-            = (CompletableFuture<Integer>[]) new CompletableFuture<?>[100];\n+        @SuppressWarnings(\"unchecked\")\n+        CompletableFuture<Item>[] fs\n+            = (CompletableFuture<Item>[]) new CompletableFuture<?>[100];\n@@ -4645,1 +4659,1 @@\n-        CompletableFuture<Integer> neverCompleted = new CompletableFuture<>();\n+        CompletableFuture<Item> neverCompleted = new CompletableFuture<>();\n@@ -4660,2 +4674,2 @@\n-        CompletableFuture<Integer> neverCompleted = new CompletableFuture<>();\n-        CompletionStage minimal = neverCompleted.minimalCompletionStage();\n+        CompletableFuture<Item> neverCompleted = new CompletableFuture<>();\n+        CompletionStage<Item> minimal = neverCompleted.minimalCompletionStage();\n@@ -4846,1 +4860,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4849,3 +4863,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4853,1 +4867,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyAsync\n+        final CompletionStage<Item> g = d.exceptionallyAsync\n@@ -4862,1 +4876,1 @@\n-        assertEquals(0, ran.get());\n+        mustEqual(0, ran.get());\n@@ -4871,1 +4885,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4875,3 +4889,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4879,1 +4893,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyAsync\n+        final CompletionStage<Item> g = d.exceptionallyAsync\n@@ -4889,1 +4903,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -4903,3 +4917,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4907,1 +4921,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyAsync\n+        final CompletionStage<Item> g = d.exceptionallyAsync\n@@ -4918,1 +4932,1 @@\n-        assertEquals(1, ran.get());\n+        mustEqual(1, ran.get());\n@@ -4927,1 +4941,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4929,1 +4943,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4932,2 +4946,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4935,1 +4949,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyCompose(r);\n+        final CompletionStage<Item> g = d.exceptionallyCompose(r);\n@@ -4953,3 +4967,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4957,1 +4971,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyCompose(r);\n+        final CompletionStage<Item> g = d.exceptionallyCompose(r);\n@@ -4973,1 +4987,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4976,2 +4990,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -4979,1 +4993,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyCompose(r);\n+        final CompletionStage<Item> g = d.exceptionallyCompose(r);\n@@ -4993,1 +5007,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -4995,1 +5009,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -4998,2 +5012,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5001,1 +5015,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r);\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r);\n@@ -5019,3 +5033,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5023,1 +5037,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r);\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r);\n@@ -5039,1 +5053,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -5042,2 +5056,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5045,1 +5059,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r);\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r);\n@@ -5059,1 +5073,1 @@\n-        for (Integer v1 : new Integer[] { 1, null })\n+        for (Item v1 : new Item[] { one, null })\n@@ -5061,1 +5075,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -5064,2 +5078,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5067,1 +5081,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n@@ -5085,3 +5099,3 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5089,1 +5103,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n@@ -5105,1 +5119,1 @@\n-        final CompletableFuture<Integer> f = new CompletableFuture<>();\n+        final CompletableFuture<Item> f = new CompletableFuture<>();\n@@ -5108,2 +5122,2 @@\n-        final DelegatedCompletionStage<Integer> d =\n-            new DelegatedCompletionStage<Integer>(f);\n+        final DelegatedCompletionStage<Item> d =\n+            new DelegatedCompletionStage<Item>(f);\n@@ -5111,1 +5125,1 @@\n-        final CompletionStage<Integer> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n+        final CompletionStage<Item> g = d.exceptionallyComposeAsync(r, new ThreadExecutor());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CompletableFutureTest.java","additions":627,"deletions":613,"binary":false,"changes":1240,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -66,2 +66,2 @@\n-    private static ConcurrentHashMap map5() {\n-        ConcurrentHashMap map = new ConcurrentHashMap(5);\n+    private static ConcurrentHashMap<Item,String> map5() {\n+        ConcurrentHashMap<Item,String> map = new ConcurrentHashMap<Item,String>(5);\n@@ -75,1 +75,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -83,3 +83,3 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(map.getOrDefault(one, \"Z\"), \"A\");\n-        assertEquals(map.getOrDefault(six, \"Z\"), \"Z\");\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(map.getOrDefault(one, \"Z\"), \"A\");\n+        mustEqual(map.getOrDefault(six, \"Z\"), \"Z\");\n@@ -92,1 +92,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -101,2 +101,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"A\", map.computeIfAbsent(one, x -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.computeIfAbsent(one, x -> \"Z\"));\n@@ -109,1 +109,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -118,1 +118,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -127,2 +127,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"Z\", map.computeIfPresent(one, (x, y) -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"Z\", map.computeIfPresent(one, (x, y) -> \"Z\"));\n@@ -135,1 +135,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -144,2 +144,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"Z\", map.compute(six, (x, y) -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"Z\", map.compute(six, (x, y) -> \"Z\"));\n@@ -152,2 +152,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"Z\", map.compute(one, (x, y) -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"Z\", map.compute(one, (x, y) -> \"Z\"));\n@@ -160,1 +160,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -169,2 +169,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"Y\", map.merge(six, \"Y\", (x, y) -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"Y\", map.merge(six, \"Y\", (x, y) -> \"Z\"));\n@@ -177,2 +177,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"Z\", map.merge(one, \"Y\", (x, y) -> \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"Z\", map.merge(one, \"Y\", (x, y) -> \"Z\"));\n@@ -185,1 +185,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -190,2 +190,2 @@\n-    static Set<Integer> populatedSet(int n) {\n-        Set<Integer> a = ConcurrentHashMap.<Integer>newKeySet();\n+    static Set<Item> populatedSet(int n) {\n+        Set<Item> a = ConcurrentHashMap.<Item>newKeySet();\n@@ -194,3 +194,3 @@\n-            assertTrue(a.add(i));\n-        assertEquals(n == 0, a.isEmpty());\n-        assertEquals(n, a.size());\n+            mustAdd(a, i);\n+        mustEqual(n == 0, a.isEmpty());\n+        mustEqual(n, a.size());\n@@ -200,2 +200,2 @@\n-    static Set populatedSet(Integer[] elements) {\n-        Set<Integer> a = ConcurrentHashMap.<Integer>newKeySet();\n+    static Set<Item> populatedSet(Item[] elements) {\n+        Set<Item> a = ConcurrentHashMap.<Item>newKeySet();\n@@ -203,1 +203,1 @@\n-        for (Integer element : elements)\n+        for (Item element : elements)\n@@ -206,1 +206,1 @@\n-        assertEquals(elements.length, a.size());\n+        mustEqual(elements.length, a.size());\n@@ -214,7 +214,7 @@\n-        ConcurrentHashMap<Integer, String> map = map5();\n-        map.replaceAll((x, y) -> (x > 3) ? \"Z\" : y);\n-        assertEquals(\"A\", map.get(one));\n-        assertEquals(\"B\", map.get(two));\n-        assertEquals(\"C\", map.get(three));\n-        assertEquals(\"Z\", map.get(four));\n-        assertEquals(\"Z\", map.get(five));\n+        ConcurrentHashMap<Item, String> map = map5();\n+        map.replaceAll((x, y) -> (x.value > 3) ? \"Z\" : y);\n+        mustEqual(\"A\", map.get(one));\n+        mustEqual(\"B\", map.get(two));\n+        mustEqual(\"C\", map.get(three));\n+        mustEqual(\"Z\", map.get(four));\n+        mustEqual(\"Z\", map.get(five));\n@@ -227,1 +227,1 @@\n-        Set a = ConcurrentHashMap.newKeySet();\n+        Set<Item> a = ConcurrentHashMap.<Item>newKeySet();\n@@ -236,3 +236,3 @@\n-        ConcurrentHashMap map = map5();\n-        Set set1 = map.keySet();\n-        Set set2 = map.keySet(true);\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Set<Item> set1 = map.keySet();\n+        Set<Item> set2 = map.keySet(\"added\");\n@@ -242,6 +242,6 @@\n-        assertEquals(set2.size(), map.size());\n-        assertEquals(set1.size(), map.size());\n-        assertTrue((Boolean)map.get(six));\n-        assertTrue(set1.contains(six));\n-        assertTrue(set2.contains(six));\n-        set2.remove(six);\n+        mustEqual(set2.size(), map.size());\n+        mustEqual(set1.size(), map.size());\n+        assertEquals(map.get(six), \"added\");\n+        mustContain(set1, six);\n+        mustContain(set2, six);\n+        mustRemove(set2, six);\n@@ -249,2 +249,2 @@\n-        assertFalse(set1.contains(six));\n-        assertFalse(set2.contains(six));\n+        mustNotContain(set1, six);\n+        mustNotContain(set2, six);\n@@ -257,1 +257,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -259,1 +259,1 @@\n-        assertEquals(6, full.size());\n+        mustEqual(6, full.size());\n@@ -261,1 +261,1 @@\n-        assertEquals(6, full.size());\n+        mustEqual(6, full.size());\n@@ -269,1 +269,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -272,1 +272,1 @@\n-        assertEquals(5, full.size());\n+        mustEqual(5, full.size());\n@@ -274,1 +274,1 @@\n-        assertEquals(5, full.size());\n+        mustEqual(5, full.size());\n@@ -281,1 +281,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -283,1 +283,1 @@\n-        assertEquals(3, full.size());\n+        mustEqual(3, full.size());\n@@ -290,1 +290,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -292,1 +292,1 @@\n-        assertTrue(full.contains(three));\n+        mustContain(full, three);\n@@ -294,1 +294,1 @@\n-        assertTrue(full.contains(three));\n+        mustContain(full, three);\n@@ -302,1 +302,1 @@\n-        Set full = map5().keySet();\n+        Set<Item> full = map5().keySet();\n@@ -314,1 +314,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -325,1 +325,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -327,0 +327,1 @@\n+        String added = \"added\";\n@@ -331,1 +332,1 @@\n-        ConcurrentHashMap.KeySetView set = map.keySet(one);\n+        ConcurrentHashMap.KeySetView<Item,String> set = map.keySet(added);\n@@ -335,4 +336,4 @@\n-        assertSame(one, set.getMappedValue());\n-        assertNotSame(one, map.get(one));\n-        assertSame(one, map.get(six));\n-        assertSame(one, map.get(seven));\n+        assertSame(added, set.getMappedValue());\n+        assertNotSame(added, map.get(one));\n+        assertSame(added, map.get(six));\n+        assertSame(added, map.get(seven));\n@@ -343,1 +344,1 @@\n-        assertEquals(requiredCharacteristics,\n+        mustEqual(requiredCharacteristics,\n@@ -352,3 +353,3 @@\n-        ConcurrentHashMap map = map5();\n-        Set set = map.keySet();\n-        Spliterator<Integer> sp = set.spliterator();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Set<Item> set = map.keySet();\n+        Spliterator<Item> sp = set.spliterator();\n@@ -356,3 +357,3 @@\n-        assertEquals(sp.estimateSize(), map.size());\n-        Spliterator<Integer> sp2 = sp.trySplit();\n-        sp.forEachRemaining((Integer x) -> adder.add(x.longValue()));\n+        mustEqual(sp.estimateSize(), map.size());\n+        Spliterator<Item> sp2 = sp.trySplit();\n+        sp.forEachRemaining((Item x) -> adder.add(x.longValue()));\n@@ -360,1 +361,1 @@\n-        sp2.forEachRemaining((Integer x) -> adder.add(x.longValue()));\n+        sp2.forEachRemaining((Item x) -> adder.add(x.longValue()));\n@@ -362,1 +363,1 @@\n-        assertEquals(v + v2, 15);\n+        mustEqual(v + v2, 15);\n@@ -369,1 +370,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -371,1 +372,1 @@\n-        assertEquals(0, full.size());\n+        mustEqual(0, full.size());\n@@ -378,3 +379,3 @@\n-        Set full = populatedSet(3);\n-        assertTrue(full.contains(one));\n-        assertFalse(full.contains(five));\n+        Set<Item> full = populatedSet(3);\n+        mustContain(full, one);\n+        mustNotContain(full, five);\n@@ -387,2 +388,2 @@\n-        Set a = populatedSet(3);\n-        Set b = populatedSet(3);\n+        Set<Item> a = populatedSet(3);\n+        Set<Item> b = populatedSet(3);\n@@ -391,2 +392,2 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n-        a.add(m1);\n+        mustEqual(a.hashCode(), b.hashCode());\n+        a.add(minusOne);\n@@ -395,1 +396,1 @@\n-        b.add(m1);\n+        b.add(minusOne);\n@@ -398,1 +399,1 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n+        mustEqual(a.hashCode(), b.hashCode());\n@@ -405,1 +406,1 @@\n-        Collection full = populatedSet(3);\n+        Collection<Item> full = populatedSet(3);\n@@ -426,1 +427,1 @@\n-        Collection empty = ConcurrentHashMap.newKeySet();\n+        Collection<Item> empty = ConcurrentHashMap.<Item>newKeySet();\n@@ -434,3 +435,1 @@\n-        Integer[] elements = new Integer[size];\n-        for (int i = 0; i < size; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(size);\n@@ -438,1 +437,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -440,1 +439,1 @@\n-        Iterator it = full.iterator();\n+        Iterator<? extends Item> it = full.iterator();\n@@ -453,3 +452,3 @@\n-        assertIteratorExhausted(new ConcurrentHashMap().entrySet().iterator());\n-        assertIteratorExhausted(new ConcurrentHashMap().values().iterator());\n-        assertIteratorExhausted(new ConcurrentHashMap().keySet().iterator());\n+        assertIteratorExhausted(new ConcurrentHashMap<Item,String>().entrySet().iterator());\n+        assertIteratorExhausted(new ConcurrentHashMap<Item,String>().values().iterator());\n+        assertIteratorExhausted(new ConcurrentHashMap<Item,String>().keySet().iterator());\n@@ -462,2 +461,2 @@\n-        Set q = populatedSet(3);\n-        Iterator it = q.iterator();\n+        Set<Item> q = populatedSet(3);\n+        Iterator<Item> it = q.iterator();\n@@ -477,2 +476,2 @@\n-        assertEquals(\"[]\", ConcurrentHashMap.newKeySet().toString());\n-        Set full = populatedSet(3);\n+        mustEqual(\"[]\", ConcurrentHashMap.newKeySet().toString());\n+        Set<Item> full = populatedSet(3);\n@@ -488,1 +487,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -490,1 +489,1 @@\n-        assertEquals(1, full.size());\n+        mustEqual(1, full.size());\n@@ -492,1 +491,1 @@\n-        assertEquals(1, full.size());\n+        mustEqual(1, full.size());\n@@ -499,1 +498,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -501,2 +500,2 @@\n-        assertFalse(full.contains(one));\n-        assertEquals(2, full.size());\n+        mustNotContain(full, one);\n+        mustEqual(2, full.size());\n@@ -509,4 +508,4 @@\n-        Set empty = ConcurrentHashMap.newKeySet();\n-        Set full = populatedSet(3);\n-        assertEquals(3, full.size());\n-        assertEquals(0, empty.size());\n+        Set<Item> empty = ConcurrentHashMap.newKeySet();\n+        Set<Item> full = populatedSet(3);\n+        mustEqual(3, full.size());\n+        mustEqual(0, empty.size());\n@@ -524,3 +523,1 @@\n-        Integer[] elements = new Integer[size];\n-        for (int i = 0; i < size; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(size);\n@@ -528,1 +525,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -536,1 +533,1 @@\n-     * toArray(Integer array) returns an Integer array containing all\n+     * toArray(Item array) returns an Item array containing all\n@@ -540,2 +537,2 @@\n-        Collection empty = ConcurrentHashMap.newKeySet();\n-        Integer[] a;\n+        Collection<Item> empty = ConcurrentHashMap.<Item>newKeySet();\n+        Item[] a;\n@@ -544,1 +541,1 @@\n-        a = new Integer[0];\n+        a = new Item[0];\n@@ -547,2 +544,2 @@\n-        a = new Integer[size \/ 2];\n-        Arrays.fill(a, 42);\n+        a = new Item[size \/ 2];\n+        Arrays.fill(a, fortytwo);\n@@ -552,1 +549,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -554,3 +551,1 @@\n-        Integer[] elements = new Integer[size];\n-        for (int i = 0; i < size; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(size);\n@@ -558,1 +553,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -560,1 +555,1 @@\n-        Arrays.fill(a, 42);\n+        Arrays.fill(a, fortytwo);\n@@ -563,2 +558,2 @@\n-            assertEquals(42, (int) a[i]);\n-        assertSame(Integer[].class, full.toArray(a).getClass());\n+            mustEqual(42, a[i]);\n+        assertSame(Item[].class, full.toArray(a).getClass());\n@@ -566,2 +561,2 @@\n-        a = new Integer[size];\n-        Arrays.fill(a, 42);\n+        a = new Item[size];\n+        Arrays.fill(a, fortytwo);\n@@ -577,2 +572,2 @@\n-        Set x = populatedSet(size);\n-        Set y = serialClone(x);\n+        Set<Item> x = populatedSet(size);\n+        Set<Item> y = serialClone(x);\n@@ -581,3 +576,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -614,1 +609,1 @@\n-        assertEquals(adder.sum(), SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), SIZE * (SIZE - 1) \/ 2);\n@@ -624,1 +619,1 @@\n-        assertEquals(adder.sum(), SIZE * (SIZE - 1));\n+        mustEqual(adder.sum(), SIZE * (SIZE - 1));\n@@ -634,1 +629,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -644,1 +639,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -654,1 +649,1 @@\n-        assertEquals(adder.sum(), SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), SIZE * (SIZE - 1) \/ 2);\n@@ -664,1 +659,1 @@\n-        assertEquals(adder.sum(), SIZE * (SIZE - 1));\n+        mustEqual(adder.sum(), SIZE * (SIZE - 1));\n@@ -674,1 +669,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -684,1 +679,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -696,1 +691,1 @@\n-        assertEquals(adder.sum(), 4 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 4 * SIZE * (SIZE - 1) \/ 2);\n@@ -708,1 +703,1 @@\n-        assertEquals(adder.sum(), 4 * SIZE * (SIZE - 1));\n+        mustEqual(adder.sum(), 4 * SIZE * (SIZE - 1));\n@@ -720,1 +715,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -732,1 +727,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -744,1 +739,1 @@\n-        assertEquals(adder.sum(), 4 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 4 * SIZE * (SIZE - 1) \/ 2);\n@@ -756,1 +751,1 @@\n-        assertEquals(adder.sum(), 4 * SIZE * (SIZE - 1));\n+        mustEqual(adder.sum(), 4 * SIZE * (SIZE - 1));\n@@ -768,1 +763,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -780,1 +775,1 @@\n-        assertEquals(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(adder.sum(), 3 * SIZE * (SIZE - 1) \/ 2);\n@@ -790,1 +785,1 @@\n-        assertEquals((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n@@ -800,1 +795,1 @@\n-        assertEquals((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n@@ -810,1 +805,1 @@\n-        assertEquals(r.getKey().longValue(), (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(r.getKey().longValue(), (long)SIZE * (SIZE - 1) \/ 2);\n@@ -820,1 +815,1 @@\n-        assertEquals((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)SIZE * (SIZE - 1) \/ 2);\n@@ -830,1 +825,1 @@\n-        assertEquals((long)r, (long)SIZE * (SIZE - 1));\n+        mustEqual((long)r, (long)SIZE * (SIZE - 1));\n@@ -840,1 +835,1 @@\n-        assertEquals(r.getKey().longValue(), (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(r.getKey().longValue(), (long)SIZE * (SIZE - 1) \/ 2);\n@@ -850,1 +845,1 @@\n-        assertEquals((long)r, (long)4 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)4 * SIZE * (SIZE - 1) \/ 2);\n@@ -860,1 +855,1 @@\n-        assertEquals((long)r, (long)4 * SIZE * (SIZE - 1));\n+        mustEqual((long)r, (long)4 * SIZE * (SIZE - 1));\n@@ -871,1 +866,1 @@\n-        assertEquals((long)r, (long)3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)3 * SIZE * (SIZE - 1) \/ 2);\n@@ -881,1 +876,1 @@\n-        assertEquals((long)r, (long)4 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)4 * SIZE * (SIZE - 1) \/ 2);\n@@ -891,1 +886,1 @@\n-        assertEquals((long)r, (long)4 * SIZE * (SIZE - 1));\n+        mustEqual((long)r, (long)4 * SIZE * (SIZE - 1));\n@@ -902,1 +897,1 @@\n-        assertEquals((long)r, (long)3 * SIZE * (SIZE - 1) \/ 2);\n+        mustEqual((long)r, (long)3 * SIZE * (SIZE - 1) \/ 2);\n@@ -911,1 +906,1 @@\n-        assertEquals(lr, (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(lr, (long)SIZE * (SIZE - 1) \/ 2);\n@@ -920,1 +915,1 @@\n-        assertEquals(ir, SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(ir, SIZE * (SIZE - 1) \/ 2);\n@@ -929,1 +924,1 @@\n-        assertEquals(dr, (double)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(dr, (double)SIZE * (SIZE - 1) \/ 2);\n@@ -938,1 +933,1 @@\n-        assertEquals(lr, (long)SIZE * (SIZE - 1));\n+        mustEqual(lr, (long)SIZE * (SIZE - 1));\n@@ -947,1 +942,1 @@\n-        assertEquals(ir, SIZE * (SIZE - 1));\n+        mustEqual(ir, SIZE * (SIZE - 1));\n@@ -956,1 +951,1 @@\n-        assertEquals(dr, (double)SIZE * (SIZE - 1));\n+        mustEqual(dr, (double)SIZE * (SIZE - 1));\n@@ -965,1 +960,1 @@\n-        assertEquals(lr, (long)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(lr, (long)SIZE * (SIZE - 1) \/ 2);\n@@ -974,1 +969,1 @@\n-        assertEquals(ir, SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(ir, SIZE * (SIZE - 1) \/ 2);\n@@ -983,1 +978,1 @@\n-        assertEquals(dr, (double)SIZE * (SIZE - 1) \/ 2);\n+        mustEqual(dr, (double)SIZE * (SIZE - 1) \/ 2);\n@@ -992,1 +987,1 @@\n-        assertEquals(lr, (long)SIZE * (SIZE - 1));\n+        mustEqual(lr, (long)SIZE * (SIZE - 1));\n@@ -1001,1 +996,1 @@\n-        assertEquals(ir, SIZE * (SIZE - 1));\n+        mustEqual(ir, SIZE * (SIZE - 1));\n@@ -1010,1 +1005,1 @@\n-        assertEquals(dr, (double)SIZE * (SIZE - 1));\n+        mustEqual(dr, (double)SIZE * (SIZE - 1));\n@@ -1021,1 +1016,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1035,1 +1030,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1049,1 +1044,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1062,1 +1057,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1075,1 +1070,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1088,1 +1083,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1101,1 +1096,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1114,1 +1109,1 @@\n-        assertEquals((long)r, (long)(SIZE\/2));\n+        mustEqual((long)r, (long)(SIZE\/2));\n@@ -1128,3 +1123,5 @@\n-        final ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>();\n-        for (int i = 0; i < mapSize; i++)\n-            map.put(i, i);\n+        final ConcurrentHashMap<Item, Item> map = new ConcurrentHashMap<>();\n+        for (int i = 0; i < mapSize; i++) {\n+            Item I = itemFor(i);\n+            map.put(I, I);\n+        }\n@@ -1137,1 +1134,1 @@\n-                        result += map.computeIfAbsent(i % mapSize, k -> k + k);\n+                        result += map.computeIfAbsent(itemFor(i % mapSize), k -> itemFor(k.value * 2)).value;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentHashMap8Test.java","additions":190,"deletions":193,"binary":false,"changes":383,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -71,2 +71,2 @@\n-    private static ConcurrentHashMap<Integer, String> map5() {\n-        ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>(5);\n+    private static ConcurrentHashMap<Item, String> map5() {\n+        ConcurrentHashMap<Item, String> map = new ConcurrentHashMap<>(5);\n@@ -80,1 +80,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -226,1 +226,1 @@\n-            assertEquals(map.get(k), k);\n+            mustEqual(map.get(k), k);\n@@ -229,2 +229,2 @@\n-        assertEquals(count, size);\n-        assertEquals(map.size(), size);\n+        mustEqual(count, size);\n+        mustEqual(map.size(), size);\n@@ -232,1 +232,1 @@\n-            assertEquals(map.put(k, k), k);\n+            mustEqual(map.put(k, k), k);\n@@ -240,1 +240,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -242,1 +242,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -249,4 +249,4 @@\n-        ConcurrentHashMap map1 = map5();\n-        ConcurrentHashMap map2 = map5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        ConcurrentHashMap<Item,String> map1 = map5();\n+        ConcurrentHashMap<Item,String> map2 = map5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -262,1 +262,1 @@\n-        ConcurrentHashMap<Integer,String> map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -264,1 +264,1 @@\n-        for (Map.Entry<Integer,String> e : map.entrySet())\n+        for (Map.Entry<Item,String> e : map.entrySet())\n@@ -266,1 +266,1 @@\n-        assertEquals(sum, map.hashCode());\n+        mustEqual(sum, map.hashCode());\n@@ -273,1 +273,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -282,1 +282,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -291,1 +291,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -301,2 +301,2 @@\n-        ConcurrentHashMap map = map5();\n-        Enumeration e = map.elements();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Enumeration<String> e = map.elements();\n@@ -308,1 +308,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -316,3 +316,3 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"A\", (String)map.get(one));\n-        ConcurrentHashMap empty = new ConcurrentHashMap();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n+        ConcurrentHashMap<Item,String> empty = new ConcurrentHashMap<Item,String>();\n@@ -327,2 +327,2 @@\n-        ConcurrentHashMap empty = new ConcurrentHashMap();\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> empty = new ConcurrentHashMap<Item,String>();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -337,2 +337,2 @@\n-        ConcurrentHashMap map = map5();\n-        Enumeration e = map.keys();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Enumeration<Item> e = map.keys();\n@@ -344,1 +344,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -351,8 +351,8 @@\n-        ConcurrentHashMap map = map5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(one));\n-        assertTrue(s.contains(two));\n-        assertTrue(s.contains(three));\n-        assertTrue(s.contains(four));\n-        assertTrue(s.contains(five));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, one);\n+        mustContain(s, two);\n+        mustContain(s, three);\n+        mustContain(s, four);\n+        mustContain(s, five);\n@@ -365,2 +365,2 @@\n-        ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();\n-        Set<Integer> set = map.keySet();\n+        ConcurrentHashMap<Item, String> map = new ConcurrentHashMap<>();\n+        Set<Item> set = map.keySet();\n@@ -380,2 +380,2 @@\n-        ConcurrentHashMap map = map5();\n-        Set s = map.keySet();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n@@ -384,2 +384,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -393,5 +393,5 @@\n-        ConcurrentHashMap map = map5();\n-        Collection v = map.values();\n-        Object[] ar = v.toArray();\n-        ArrayList s = new ArrayList(Arrays.asList(ar));\n-        assertEquals(5, ar.length);\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Collection<String> v = map.values();\n+        String[] ar = v.toArray(new String[0]);\n+        ArrayList<String> s = new ArrayList<String>(Arrays.asList(ar));\n+        mustEqual(5, ar.length);\n@@ -409,2 +409,2 @@\n-        ConcurrentHashMap map = map5();\n-        Set s = map.entrySet();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n@@ -412,1 +412,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -423,3 +423,3 @@\n-        ConcurrentHashMap map = map5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        ConcurrentHashMap<Item,String> map = map5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -437,4 +437,4 @@\n-        ConcurrentHashMap map = map5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        ConcurrentHashMap<Item, String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -442,1 +442,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -456,9 +456,9 @@\n-        ConcurrentHashMap empty = new ConcurrentHashMap();\n-        ConcurrentHashMap map = map5();\n-        empty.putAll(map);\n-        assertEquals(5, empty.size());\n-        assertTrue(empty.containsKey(one));\n-        assertTrue(empty.containsKey(two));\n-        assertTrue(empty.containsKey(three));\n-        assertTrue(empty.containsKey(four));\n-        assertTrue(empty.containsKey(five));\n+        ConcurrentHashMap<Item,String> p = new ConcurrentHashMap<Item,String>();\n+        ConcurrentHashMap<Item,String> map = map5();\n+        p.putAll(map);\n+        mustEqual(5, p.size());\n+        assertTrue(p.containsKey(one));\n+        assertTrue(p.containsKey(two));\n+        assertTrue(p.containsKey(three));\n+        assertTrue(p.containsKey(four));\n+        assertTrue(p.containsKey(five));\n@@ -471,1 +471,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -480,2 +480,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"A\", map.putIfAbsent(one, \"Z\"));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.putIfAbsent(one, \"Z\"));\n@@ -488,1 +488,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -497,1 +497,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -499,1 +499,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -506,2 +506,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -509,1 +509,1 @@\n-        assertEquals(\"A\", map.get(one));\n+        mustEqual(\"A\", map.get(one));\n@@ -516,2 +516,2 @@\n-        ConcurrentHashMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentHashMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -519,1 +519,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -526,1 +526,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -528,1 +528,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -536,1 +536,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -538,1 +538,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -541,1 +541,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -549,4 +549,4 @@\n-        ConcurrentHashMap map = map5();\n-        ConcurrentHashMap empty = new ConcurrentHashMap();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        ConcurrentHashMap<Item,String> map = map5();\n+        ConcurrentHashMap<Item,String> empty = new ConcurrentHashMap<Item,String>();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -559,1 +559,1 @@\n-        ConcurrentHashMap map = map5();\n+        ConcurrentHashMap<Item,String> map = map5();\n@@ -573,1 +573,1 @@\n-            new ConcurrentHashMap(-1);\n+            new ConcurrentHashMap<Item,String>(-1);\n@@ -584,1 +584,1 @@\n-            new ConcurrentHashMap(-1, .75f);\n+            new ConcurrentHashMap<Item,String>(-1, .75f);\n@@ -589,1 +589,1 @@\n-            new ConcurrentHashMap(16, -1);\n+            new ConcurrentHashMap<Item,String>(16, -1);\n@@ -600,1 +600,1 @@\n-            new ConcurrentHashMap(-1, .75f, 1);\n+            new ConcurrentHashMap<Item,String>(-1, .75f, 1);\n@@ -605,1 +605,1 @@\n-            new ConcurrentHashMap(16, -1, 1);\n+            new ConcurrentHashMap<Item,String>(16, -1, 1);\n@@ -610,1 +610,1 @@\n-            new ConcurrentHashMap(16, .75f, -1);\n+            new ConcurrentHashMap<Item,String>(16, .75f, -1);\n@@ -621,1 +621,1 @@\n-            new ConcurrentHashMap(null);\n+            new ConcurrentHashMap<Item,String>(null);\n@@ -631,2 +631,2 @@\n-        ConcurrentHashMap map1 = map5();\n-        ConcurrentHashMap map2 = new ConcurrentHashMap(map5());\n+        ConcurrentHashMap<Item,String> map1 = map5();\n+        ConcurrentHashMap<Item,String> map2 = new ConcurrentHashMap<Item,String>(map1);\n@@ -642,1 +642,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -653,1 +653,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -664,1 +664,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -675,1 +675,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -686,1 +686,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -697,1 +697,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -699,1 +699,1 @@\n-            c.put(\"whatever\", null);\n+            c.put(zero, null);\n@@ -708,1 +708,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -719,1 +719,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -730,1 +730,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -732,1 +732,1 @@\n-            c.replace(null, one, \"whatever\");\n+            c.replace(null, \"A\", \"B\");\n@@ -741,1 +741,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -743,1 +743,1 @@\n-            c.putIfAbsent(\"whatever\", null);\n+            c.putIfAbsent(zero, null);\n@@ -752,1 +752,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -754,1 +754,1 @@\n-            c.replace(\"whatever\", null);\n+            c.replace(one, null);\n@@ -763,1 +763,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -765,1 +765,1 @@\n-            c.replace(\"whatever\", null, \"A\");\n+            c.replace(one, null, \"A\");\n@@ -774,1 +774,1 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n@@ -776,1 +776,1 @@\n-            c.replace(\"whatever\", one, null);\n+            c.replace(zero, \"A\", null);\n@@ -785,2 +785,2 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n-        c.put(\"sadsdf\", \"asdads\");\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n+        c.put(one, \"asdads\");\n@@ -797,2 +797,2 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n-        c.put(\"sadsdf\", \"asdads\");\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n+        c.put(one, \"asdads\");\n@@ -809,3 +809,3 @@\n-        ConcurrentHashMap c = new ConcurrentHashMap(5);\n-        c.put(\"sadsdf\", \"asdads\");\n-        assertFalse(c.remove(\"sadsdf\", null));\n+        ConcurrentHashMap<Item,String> c = new ConcurrentHashMap<Item,String>(5);\n+        c.put(one, \"asdads\");\n+        assertFalse(c.remove(one, null));\n@@ -818,2 +818,2 @@\n-        Map x = map5();\n-        Map y = serialClone(x);\n+        Map<Item,String> x = map5();\n+        Map<Item,String> y = serialClone(x);\n@@ -822,3 +822,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -830,0 +830,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -832,1 +833,1 @@\n-        ConcurrentHashMap map = new ConcurrentHashMap(2, 5.0f, 1);\n+        ConcurrentHashMap<Object,Object> map = new ConcurrentHashMap<Object,Object>(2, 5.0f, 1);\n@@ -835,1 +836,1 @@\n-            map.put(new Integer(i), new Integer(i));\n+            map.put(itemFor(i), itemFor(i));\n@@ -837,1 +838,2 @@\n-        Map.Entry entry1 = (Map.Entry)map.entrySet().iterator().next();\n+        Item key = itemFor(16);\n+        Map.Entry<Object,Object> entry1 = map.entrySet().iterator().next();\n@@ -842,2 +844,2 @@\n-        if (!entry1.getKey().equals(new Integer(16))) {\n-            map.remove(new Integer(16));\n+        if (!entry1.getKey().equals(key)) {\n+            map.remove(key);\n@@ -856,5 +858,7 @@\n-        final ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>();\n-        for (int i = 0; i < mapSize; i++)\n-            map.put(i, i);\n-        Set<Integer> keySet = map.keySet();\n-        Collection<Integer> removeMe = Arrays.asList(new Integer[] { -99, -86 });\n+        final ConcurrentHashMap<Item, Item> map = new ConcurrentHashMap<>();\n+        for (int i = 0; i < mapSize; i++) {\n+            Item I = itemFor(i);\n+            map.put(I, I);\n+        }\n+        Set<Item> keySet = map.keySet();\n+        Collection<Item> removeMe = Arrays.asList(new Item[] { minusOne, minusTwo });\n@@ -863,1 +867,1 @@\n-        assertEquals(mapSize, map.size());\n+        mustEqual(mapSize, map.size());\n@@ -867,1 +871,1 @@\n-        ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>(16);\n+        ConcurrentHashMap<Item, Item> map = new ConcurrentHashMap<>(16);\n@@ -870,1 +874,1 @@\n-                map.computeIfAbsent(i, key -> findValue(map, key));\n+                map.computeIfAbsent(new Item(i), key -> new Item(findValue(map, key)));\n@@ -876,4 +880,4 @@\n-    private Integer findValue(ConcurrentHashMap<Integer, Integer> map,\n-                              Integer key) {\n-        return (key % 5 == 0) ?  key :\n-            map.computeIfAbsent(key + 1, k -> findValue(map, k));\n+    private static Item findValue(ConcurrentHashMap<Item, Item> map,\n+                                  Item key) {\n+        return (key.value % 5 == 0) ?  key :\n+            map.computeIfAbsent(new Item(key.value + 1), k -> new Item(findValue(map, k)));\n@@ -881,1 +885,0 @@\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentHashMapTest.java","additions":153,"deletions":150,"binary":false,"changes":303,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -70,1 +70,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -72,2 +72,2 @@\n-    private static ConcurrentLinkedDeque<Integer> populatedDeque(int n) {\n-        ConcurrentLinkedDeque<Integer> q = new ConcurrentLinkedDeque<>();\n+    private static ConcurrentLinkedDeque<Item> populatedDeque(int n) {\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<>();\n@@ -76,1 +76,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -78,3 +78,3 @@\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peekFirst());\n-        assertEquals((Integer) (n - 1), q.peekLast());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peekFirst());\n+        mustEqual((n - 1), q.peekLast());\n@@ -88,2 +88,2 @@\n-        assertTrue(new ConcurrentLinkedDeque().isEmpty());\n-        assertEquals(0, new ConcurrentLinkedDeque().size());\n+        assertTrue(new ConcurrentLinkedDeque<Item>().isEmpty());\n+        mustEqual(0, new ConcurrentLinkedDeque<Item>().size());\n@@ -97,1 +97,1 @@\n-            new ConcurrentLinkedDeque((Collection)null);\n+            new ConcurrentLinkedDeque<Item>((Collection<Item>)null);\n@@ -107,1 +107,1 @@\n-            new ConcurrentLinkedDeque(Arrays.asList(new Integer[SIZE]));\n+            new ConcurrentLinkedDeque<Item>(Arrays.asList(new Item[SIZE]));\n@@ -116,3 +116,1 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -120,1 +118,1 @@\n-            new ConcurrentLinkedDeque(Arrays.asList(ints));\n+            new ConcurrentLinkedDeque<Item>(Arrays.asList(items));\n@@ -129,1 +127,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>(Arrays.asList(items));\n@@ -131,4 +130,1 @@\n-            ints[i] = new Integer(i);\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -141,1 +137,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -155,1 +151,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -157,1 +153,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -161,2 +157,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -170,1 +166,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -181,1 +177,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(3);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(3);\n@@ -191,1 +187,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -193,1 +189,1 @@\n-            assertEquals(i, q.pop());\n+            mustEqual(i, q.pop());\n@@ -205,1 +201,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -216,1 +212,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -227,1 +223,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -238,1 +234,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -249,1 +245,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -260,1 +256,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -271,1 +267,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -282,1 +278,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -293,1 +289,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -304,1 +300,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -315,1 +311,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -326,1 +322,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -337,1 +333,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -348,1 +344,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -359,1 +355,1 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -361,1 +357,1 @@\n-            q.addAll(Arrays.asList(new Integer[SIZE]));\n+            q.addAll(Arrays.asList(new Item[SIZE]));\n@@ -371,4 +367,2 @@\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -376,1 +370,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -385,5 +379,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -391,1 +383,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -393,1 +385,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -400,1 +392,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -402,1 +394,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -411,1 +403,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -413,1 +405,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -422,1 +414,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -424,1 +416,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -433,1 +425,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -435,2 +427,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -447,1 +439,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -449,2 +441,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -462,1 +454,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -464,1 +456,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -476,1 +468,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -478,4 +470,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -484,5 +476,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -497,1 +489,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -499,2 +491,2 @@\n-            assertEquals(i, q.peekFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.peekFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -511,1 +503,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -513,2 +505,2 @@\n-            assertEquals(i, q.peekLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.peekLast());\n+            mustEqual(i, q.pollLast());\n@@ -525,1 +517,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -527,2 +519,2 @@\n-            assertEquals(i, q.getFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.getFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -540,1 +532,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -542,2 +534,2 @@\n-            assertEquals(i, q.getLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.getLast());\n+            mustEqual(i, q.pollLast());\n@@ -556,1 +548,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -558,1 +550,1 @@\n-            assertEquals(i, q.removeFirst());\n+            mustEqual(i, q.removeFirst());\n@@ -571,1 +563,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -573,1 +565,1 @@\n-            assertEquals(i, q.removeLast());\n+            mustEqual(i, q.removeLast());\n@@ -586,1 +578,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -588,1 +580,1 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n@@ -591,2 +583,2 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n-            assertFalse(q.removeFirstOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n+            assertFalse(q.removeFirstOccurrence(itemFor(i + 1)));\n@@ -601,1 +593,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -603,1 +595,1 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n@@ -606,2 +598,2 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n-            assertFalse(q.removeLastOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n+            assertFalse(q.removeLastOccurrence(itemFor(i + 1)));\n@@ -616,1 +608,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -618,1 +610,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -620,1 +612,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -628,1 +620,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -631,1 +623,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -642,2 +634,2 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n-        ConcurrentLinkedDeque p = new ConcurrentLinkedDeque();\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> p = new ConcurrentLinkedDeque<Item>();\n@@ -647,1 +639,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -656,2 +648,2 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n-        ConcurrentLinkedDeque p = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> p = populatedDeque(SIZE);\n@@ -666,1 +658,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -676,2 +668,2 @@\n-            ConcurrentLinkedDeque q = populatedDeque(SIZE);\n-            ConcurrentLinkedDeque p = populatedDeque(i);\n+            ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n+            ConcurrentLinkedDeque<Item> p = populatedDeque(i);\n@@ -679,1 +671,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -681,2 +673,1 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.remove());\n@@ -691,1 +682,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -703,5 +694,5 @@\n-        ConcurrentLinkedDeque<Integer> q = populatedDeque(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -716,1 +707,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -727,1 +718,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -738,2 +729,2 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n-        Iterator it = q.iterator();\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n+        Iterator<Item> it = q.iterator();\n@@ -742,2 +733,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -751,1 +742,1 @@\n-        Deque c = new ConcurrentLinkedDeque();\n+        Deque<Item> c = new ConcurrentLinkedDeque<Item>();\n@@ -760,1 +751,1 @@\n-        final ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        final ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -766,2 +757,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -770,1 +761,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -777,1 +768,1 @@\n-        final ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        final ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -782,1 +773,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -787,1 +778,1 @@\n-        assertEquals(\"deque should be empty again\", 0, q.size());\n+        mustEqual(0, q.size());\n@@ -794,1 +785,1 @@\n-        final ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        final ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -800,2 +791,2 @@\n-                q.add(new Integer(j));\n-            Iterator it = q.iterator();\n+                mustAdd(q, j);\n+            Iterator<? extends Item> it = q.iterator();\n@@ -803,1 +794,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -805,1 +796,1 @@\n-            assertEquals(it.next(), new Integer(split + 1));\n+            mustEqual(it.next(), itemFor(split + 1));\n@@ -807,1 +798,1 @@\n-                q.remove(new Integer(j));\n+                q.remove(itemFor(j));\n@@ -810,1 +801,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -822,1 +813,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -824,1 +815,1 @@\n-        Iterator it = q.descendingIterator();\n+        Iterator<? extends Item> it = q.descendingIterator();\n@@ -826,1 +817,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -829,1 +820,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -841,1 +832,1 @@\n-        final ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        final ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -843,3 +834,3 @@\n-            q.add(new Integer(3));\n-            q.add(new Integer(2));\n-            q.add(new Integer(1));\n+            mustAdd(q, three);\n+            mustAdd(q, two);\n+            mustAdd(q, one);\n@@ -847,2 +838,2 @@\n-            for (Iterator it = q.descendingIterator(); it.hasNext();) {\n-                assertEquals(++k, it.next());\n+            for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext();) {\n+                mustEqual(++k, it.next());\n@@ -851,1 +842,1 @@\n-            assertEquals(3, k);\n+            mustEqual(3, k);\n@@ -862,1 +853,1 @@\n-        final ConcurrentLinkedDeque q = new ConcurrentLinkedDeque();\n+        final ConcurrentLinkedDeque<Item> q = new ConcurrentLinkedDeque<Item>();\n@@ -868,2 +859,2 @@\n-                q.add(new Integer(j));\n-            Iterator it = q.descendingIterator();\n+                mustAdd(q, j);\n+            Iterator<? extends Item> it = q.descendingIterator();\n@@ -871,1 +862,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -873,1 +864,1 @@\n-            assertEquals(it.next(), new Integer(split + 1));\n+            mustEqual(it.next(), itemFor(split + 1));\n@@ -875,1 +866,1 @@\n-                q.remove(new Integer(j));\n+                q.remove(itemFor(j));\n@@ -878,1 +869,1 @@\n-                assertEquals(it.next(), new Integer(j));\n+                mustEqual(it.next(), j);\n@@ -890,1 +881,1 @@\n-        ConcurrentLinkedDeque q = populatedDeque(SIZE);\n+        ConcurrentLinkedDeque<Item> q = populatedDeque(SIZE);\n@@ -901,2 +892,2 @@\n-        Queue x = populatedDeque(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedDeque(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -905,2 +896,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -910,1 +901,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -959,1 +950,1 @@\n-            ConcurrentLinkedDeque<Integer> d = new ConcurrentLinkedDeque<>();\n+            ConcurrentLinkedDeque<Item> d = new ConcurrentLinkedDeque<>();\n@@ -963,1 +954,1 @@\n-                Integer x = peek ? d.peekFirst() : d.pollFirst();\n+                Item x = peek ? d.peekFirst() : d.pollFirst();\n@@ -965,1 +956,1 @@\n-                else if (x == 0) zeros.increment();\n+                else if (x.value == 0) zeros.increment();\n@@ -973,1 +964,1 @@\n-            Runnable adder = () -> { d.addFirst(0); d.addLast(42); };\n+            Runnable adder = () -> { d.addFirst(zero); d.addLast(fortytwo); };\n@@ -986,1 +977,1 @@\n-            ConcurrentLinkedDeque<Integer> d = new ConcurrentLinkedDeque<>();\n+            ConcurrentLinkedDeque<Item> d = new ConcurrentLinkedDeque<>();\n@@ -990,1 +981,1 @@\n-                Integer x = peek ? d.peekLast() : d.pollLast();\n+                Item x = peek ? d.peekLast() : d.pollLast();\n@@ -992,1 +983,1 @@\n-                else if (x == 0) zeros.increment();\n+                else if (x.value == 0) zeros.increment();\n@@ -1000,1 +991,1 @@\n-            Runnable adder = () -> { d.addLast(0); d.addFirst(42); };\n+            Runnable adder = () -> { d.addLast(zero); d.addFirst(fortytwo); };\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentLinkedDequeTest.java","additions":172,"deletions":181,"binary":false,"changes":353,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -65,1 +65,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -67,2 +67,2 @@\n-    private static ConcurrentLinkedQueue<Integer> populatedQueue(int n) {\n-        ConcurrentLinkedQueue<Integer> q = new ConcurrentLinkedQueue<>();\n+    private static ConcurrentLinkedQueue<Item> populatedQueue(int n) {\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<>();\n@@ -71,1 +71,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -73,2 +73,2 @@\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peek());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peek());\n@@ -82,1 +82,1 @@\n-        assertEquals(0, new ConcurrentLinkedQueue().size());\n+        mustEqual(0, new ConcurrentLinkedQueue<Item>().size());\n@@ -90,1 +90,1 @@\n-            new ConcurrentLinkedQueue((Collection)null);\n+            new ConcurrentLinkedQueue<Item>((Collection<Item>)null);\n@@ -100,1 +100,1 @@\n-            new ConcurrentLinkedQueue(Arrays.asList(new Integer[SIZE]));\n+            new ConcurrentLinkedQueue<Item>(Arrays.asList(new Item[SIZE]));\n@@ -109,3 +109,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -113,1 +112,1 @@\n-            new ConcurrentLinkedQueue(Arrays.asList(ints));\n+            new ConcurrentLinkedQueue<Item>(Arrays.asList(items));\n@@ -122,1 +121,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>(Arrays.asList(items));\n@@ -124,4 +124,1 @@\n-            ints[i] = new Integer(i);\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -134,1 +131,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -148,1 +145,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -150,1 +147,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -154,2 +151,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -163,1 +160,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -174,1 +171,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -185,1 +182,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -194,1 +191,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -196,2 +193,2 @@\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(new Integer(i)));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -205,1 +202,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -216,1 +213,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -227,1 +224,1 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -229,1 +226,1 @@\n-            q.addAll(Arrays.asList(new Integer[SIZE]));\n+            q.addAll(Arrays.asList(new Item[SIZE]));\n@@ -239,4 +236,3 @@\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -244,1 +240,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -253,5 +249,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -259,1 +253,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -261,1 +255,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -268,1 +262,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -270,1 +264,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -279,1 +273,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -281,2 +275,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -293,1 +287,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -295,2 +289,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -308,1 +302,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -310,1 +304,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -322,1 +316,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -324,4 +318,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -330,5 +324,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -343,1 +337,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -345,1 +339,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -347,1 +341,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -355,1 +349,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -358,1 +352,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -369,2 +363,2 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n-        ConcurrentLinkedQueue p = new ConcurrentLinkedQueue();\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> p = new ConcurrentLinkedQueue<Item>();\n@@ -374,1 +368,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -383,2 +377,2 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n-        ConcurrentLinkedQueue p = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> p = populatedQueue(SIZE);\n@@ -393,1 +387,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -403,2 +397,2 @@\n-            ConcurrentLinkedQueue q = populatedQueue(SIZE);\n-            ConcurrentLinkedQueue p = populatedQueue(i);\n+            ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n+            ConcurrentLinkedQueue<Item> p = populatedQueue(i);\n@@ -406,1 +400,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -408,1 +402,1 @@\n-                Integer x = (Integer)(p.remove());\n+                Item x = p.remove();\n@@ -418,1 +412,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -430,5 +424,5 @@\n-        ConcurrentLinkedQueue<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -443,1 +437,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -454,1 +448,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -465,2 +459,2 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -469,2 +463,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -478,1 +472,1 @@\n-        assertIteratorExhausted(new ConcurrentLinkedQueue().iterator());\n+        assertIteratorExhausted(new ConcurrentLinkedQueue<Item>().iterator());\n@@ -485,1 +479,1 @@\n-        final ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        final ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -491,2 +485,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -495,1 +489,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -502,1 +496,1 @@\n-        final ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        final ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -507,1 +501,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -512,1 +506,1 @@\n-        assertEquals(\"queue should be empty again\", 0, q.size());\n+        mustEqual(0, q.size());\n@@ -519,1 +513,1 @@\n-        final ConcurrentLinkedQueue q = new ConcurrentLinkedQueue();\n+        final ConcurrentLinkedQueue<Item> q = new ConcurrentLinkedQueue<Item>();\n@@ -523,1 +517,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -536,1 +530,1 @@\n-        ConcurrentLinkedQueue q = populatedQueue(SIZE);\n+        ConcurrentLinkedQueue<Item> q = populatedQueue(SIZE);\n@@ -547,2 +541,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -551,2 +545,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -556,1 +550,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentLinkedQueueTest.java","additions":103,"deletions":109,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -71,2 +71,2 @@\n-    private static ConcurrentSkipListMap map5() {\n-        ConcurrentSkipListMap map = new ConcurrentSkipListMap();\n+    private static ConcurrentSkipListMap<Item,String> map5() {\n+        ConcurrentSkipListMap<Item,String> map = new ConcurrentSkipListMap<Item,String>();\n@@ -80,1 +80,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -88,1 +88,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -90,1 +90,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -97,3 +97,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        ConcurrentSkipListMap map2 = new ConcurrentSkipListMap(map);\n-        assertEquals(map, map2);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        ConcurrentSkipListMap<Item,String> map2 = new ConcurrentSkipListMap<Item,String>(map);\n+        mustEqual(map, map2);\n@@ -106,4 +106,4 @@\n-        ConcurrentSkipListMap map1 = map5();\n-        ConcurrentSkipListMap map2 = map5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        ConcurrentSkipListMap<Item,String> map1 = map5();\n+        ConcurrentSkipListMap<Item,String> map2 = map5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -119,1 +119,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -128,1 +128,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -138,3 +138,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(\"A\", (String)map.get(one));\n-        ConcurrentSkipListMap empty = new ConcurrentSkipListMap();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n+        ConcurrentSkipListMap<Item,String> empty = new ConcurrentSkipListMap<Item,String>();\n@@ -148,2 +148,2 @@\n-        ConcurrentSkipListMap empty = new ConcurrentSkipListMap();\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> empty = new ConcurrentSkipListMap<Item,String>();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -158,2 +158,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(one, map.firstKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(one, map.firstKey());\n@@ -166,2 +166,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(five, map.lastKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(five, map.lastKey());\n@@ -174,2 +174,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.keySet();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n@@ -178,2 +178,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -187,2 +187,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.descendingKeySet();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Item> s = map.descendingKeySet();\n@@ -190,1 +190,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -192,1 +192,1 @@\n-        ar[0] = m10;\n+        ar[0] = minusTen;\n@@ -200,8 +200,8 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(one));\n-        assertTrue(s.contains(two));\n-        assertTrue(s.contains(three));\n-        assertTrue(s.contains(four));\n-        assertTrue(s.contains(five));\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, one);\n+        mustContain(s, two);\n+        mustContain(s, three);\n+        mustContain(s, four);\n+        mustContain(s, five);\n@@ -214,5 +214,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = i.next();\n+        mustEqual(last, one);\n@@ -221,1 +221,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = i.next();\n@@ -226,1 +226,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -233,5 +233,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableSet s = map.navigableKeySet();\n-        Iterator i = s.descendingIterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, five);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableSet<Item> s = map.navigableKeySet();\n+        Iterator<? extends Item> i = s.descendingIterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, five);\n@@ -240,1 +240,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -245,1 +245,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -252,5 +252,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.descendingKeySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, five);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Item> s = map.descendingKeySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, five);\n@@ -259,1 +259,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -264,1 +264,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -271,5 +271,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableSet s = map.descendingKeySet();\n-        Iterator i = s.descendingIterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableSet<Item> s = map.descendingKeySet();\n+        Iterator<? extends Item> i = s.descendingIterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, one);\n@@ -278,1 +278,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -283,1 +283,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -290,5 +290,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        Collection v = map.values();\n-        Object[] ar = v.toArray();\n-        ArrayList s = new ArrayList(Arrays.asList(ar));\n-        assertEquals(5, ar.length);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Collection<String> v = map.values();\n+        String[] ar = v.toArray(new String[0]);\n+        ArrayList<String> s = new ArrayList<String>(Arrays.asList(ar));\n+        mustEqual(5, ar.length);\n@@ -306,3 +306,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -320,4 +320,4 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -325,1 +325,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -339,4 +339,4 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.descendingMap().entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.descendingMap().entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -344,1 +344,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -358,2 +358,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.entrySet();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n@@ -361,1 +361,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -372,2 +372,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        Set s = map.descendingMap().entrySet();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.descendingMap().entrySet();\n@@ -375,1 +375,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -386,9 +386,9 @@\n-        ConcurrentSkipListMap empty = new ConcurrentSkipListMap();\n-        ConcurrentSkipListMap map = map5();\n-        empty.putAll(map);\n-        assertEquals(5, empty.size());\n-        assertTrue(empty.containsKey(one));\n-        assertTrue(empty.containsKey(two));\n-        assertTrue(empty.containsKey(three));\n-        assertTrue(empty.containsKey(four));\n-        assertTrue(empty.containsKey(five));\n+        ConcurrentSkipListMap<Item,String> p = new ConcurrentSkipListMap<Item,String>();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        p.putAll(map);\n+        mustEqual(5, p.size());\n+        assertTrue(p.containsKey(one));\n+        assertTrue(p.containsKey(two));\n+        assertTrue(p.containsKey(three));\n+        assertTrue(p.containsKey(four));\n+        assertTrue(p.containsKey(five));\n@@ -401,1 +401,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -410,2 +410,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(\"A\", map.putIfAbsent(one, \"Z\"));\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.putIfAbsent(one, \"Z\"));\n@@ -418,1 +418,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -427,1 +427,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -429,1 +429,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -436,2 +436,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -439,1 +439,1 @@\n-        assertEquals(\"A\", map.get(one));\n+        mustEqual(\"A\", map.get(one));\n@@ -446,2 +446,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -449,1 +449,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -456,1 +456,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -458,1 +458,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -466,1 +466,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -468,1 +468,1 @@\n-        assertEquals(\"E\", map.get(five));\n+        mustEqual(\"E\", map.get(five));\n@@ -470,1 +470,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -473,1 +473,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -481,3 +481,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e1 = map.lowerEntry(three);\n-        assertEquals(two, e1.getKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(three);\n+        mustEqual(two, e1.getKey());\n@@ -485,2 +485,2 @@\n-        Map.Entry e2 = map.lowerEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -488,1 +488,1 @@\n-        Map.Entry e3 = map.lowerEntry(one);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(one);\n@@ -491,1 +491,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -499,3 +499,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e1 = map.higherEntry(three);\n-        assertEquals(four, e1.getKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(three);\n+        mustEqual(four, e1.getKey());\n@@ -503,2 +503,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -506,1 +506,1 @@\n-        Map.Entry e3 = map.higherEntry(five);\n+        Map.Entry<Item,String> e3 = map.higherEntry(five);\n@@ -509,1 +509,1 @@\n-        Map.Entry e4 = map.higherEntry(six);\n+        Map.Entry<Item,String> e4 = map.higherEntry(six);\n@@ -517,3 +517,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e1 = map.floorEntry(three);\n-        assertEquals(three, e1.getKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -521,2 +521,2 @@\n-        Map.Entry e2 = map.floorEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -524,2 +524,2 @@\n-        Map.Entry e3 = map.floorEntry(one);\n-        assertEquals(one, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(one);\n+        mustEqual(one, e3.getKey());\n@@ -527,1 +527,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -535,3 +535,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e1 = map.ceilingEntry(three);\n-        assertEquals(three, e1.getKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -539,2 +539,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -542,2 +542,2 @@\n-        Map.Entry e3 = map.ceilingEntry(five);\n-        assertEquals(five, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(five);\n+        mustEqual(five, e3.getKey());\n@@ -545,1 +545,1 @@\n-        Map.Entry e4 = map.ceilingEntry(six);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(six);\n@@ -554,3 +554,3 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e = map.lowerEntry(three);\n-        assertEquals(two, e.getKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.lowerEntry(three);\n+        mustEqual(two, e.getKey());\n@@ -562,1 +562,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -568,1 +568,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -574,1 +574,1 @@\n-        assertEquals(five, e.getKey());\n+        mustEqual(five, e.getKey());\n@@ -585,1 +585,1 @@\n-        ConcurrentSkipListMap q = map5();\n+        ConcurrentSkipListMap<Item,String> q = map5();\n@@ -587,1 +587,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -590,1 +590,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -603,1 +603,1 @@\n-        ConcurrentSkipListMap q = map5();\n+        ConcurrentSkipListMap<Item,String> q = map5();\n@@ -605,1 +605,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -608,1 +608,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -621,1 +621,1 @@\n-        ConcurrentSkipListMap q = map5();\n+        ConcurrentSkipListMap<Item,String> q = map5();\n@@ -623,1 +623,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -626,1 +626,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -629,1 +629,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -639,1 +639,1 @@\n-        ConcurrentSkipListMap q = map5();\n+        ConcurrentSkipListMap<Item,String> q = map5();\n@@ -641,1 +641,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -644,1 +644,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -647,1 +647,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -657,4 +657,4 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -662,1 +662,1 @@\n-        assertEquals(two, e.getKey());\n+        mustEqual(two, e.getKey());\n@@ -665,2 +665,2 @@\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -668,1 +668,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -671,1 +671,1 @@\n-        assertEquals(five, e.getKey());\n+        mustEqual(five, e.getKey());\n@@ -684,4 +684,4 @@\n-        ConcurrentSkipListMap map = map5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -689,1 +689,1 @@\n-        assertEquals(four, e.getKey());\n+        mustEqual(four, e.getKey());\n@@ -692,2 +692,2 @@\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -695,1 +695,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -698,1 +698,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -711,4 +711,4 @@\n-        ConcurrentSkipListMap map = map5();\n-        ConcurrentSkipListMap empty = new ConcurrentSkipListMap();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        ConcurrentSkipListMap<Item,String> empty = new ConcurrentSkipListMap<Item,String>();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -721,1 +721,1 @@\n-        ConcurrentSkipListMap map = map5();\n+        ConcurrentSkipListMap<Item,String> map = map5();\n@@ -734,1 +734,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -745,1 +745,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -756,1 +756,1 @@\n-        ConcurrentSkipListMap c = new ConcurrentSkipListMap();\n+        ConcurrentSkipListMap<Item,String> c = new ConcurrentSkipListMap<Item,String>();\n@@ -767,1 +767,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -778,1 +778,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -789,1 +789,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -791,1 +791,1 @@\n-            c.replace(null, \"whatever\");\n+            c.replace(null, \"A\");\n@@ -800,1 +800,1 @@\n-        ConcurrentSkipListMap c = map5();\n+        ConcurrentSkipListMap<Item,String> c = map5();\n@@ -802,1 +802,1 @@\n-            c.replace(null, one, \"whatever\");\n+            c.replace(null, \"A\", \"B\");\n@@ -811,2 +811,2 @@\n-        ConcurrentSkipListMap c = new ConcurrentSkipListMap();\n-        c.put(\"sadsdf\", \"asdads\");\n+        ConcurrentSkipListMap<Item,String> c = new ConcurrentSkipListMap<Item,String>();\n+        c.put(zero, \"A\");\n@@ -823,2 +823,2 @@\n-        ConcurrentSkipListMap c = new ConcurrentSkipListMap();\n-        c.put(\"sadsdf\", \"asdads\");\n+        ConcurrentSkipListMap<Item,String> c = new ConcurrentSkipListMap<Item,String>();\n+        c.put(zero, \"asdads\");\n@@ -835,2 +835,2 @@\n-        ConcurrentSkipListMap c = new ConcurrentSkipListMap();\n-        c.put(\"sadsdf\", \"asdads\");\n+        ConcurrentSkipListMap<Item,String> c = new ConcurrentSkipListMap<Item,String>();\n+        c.put(zero, \"asdads\");\n@@ -844,2 +844,2 @@\n-        ConcurrentSkipListMap x = map5();\n-        ConcurrentSkipListMap y = x.clone();\n+        ConcurrentSkipListMap<Item,String> x = map5();\n+        ConcurrentSkipListMap<Item,String> y = x.clone();\n@@ -848,4 +848,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -861,2 +861,2 @@\n-        NavigableMap x = map5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = map5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -865,4 +865,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -878,5 +878,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableMap sm = map.subMap(two, true, four, false);\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(2, sm.size());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.subMap(two, true, four, false);\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(2, sm.size());\n@@ -888,6 +888,6 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -895,5 +895,5 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(three, k);\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> r = sm.descendingKeySet().iterator();\n+        k = (Item)(r.next());\n+        mustEqual(three, k);\n+        k = (Item)(r.next());\n+        mustEqual(two, k);\n@@ -902,1 +902,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -906,5 +906,5 @@\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(three));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(three));\n@@ -912,1 +912,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -916,5 +916,5 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableMap sm = map.subMap(two, true, three, false);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(two, sm.lastKey());\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.subMap(two, true, three, false);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(two, sm.lastKey());\n@@ -926,4 +926,4 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n@@ -931,3 +931,3 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> r = sm.descendingKeySet().iterator();\n+        k = (Item)(r.next());\n+        mustEqual(two, k);\n@@ -936,1 +936,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -940,2 +940,2 @@\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -944,1 +944,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -951,2 +951,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableMap sm = map.headMap(four, false);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.headMap(four, false);\n@@ -958,8 +958,8 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(one, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -969,2 +969,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(four, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(four, map.firstKey());\n@@ -977,2 +977,2 @@\n-        ConcurrentSkipListMap map = map5();\n-        NavigableMap sm = map.tailMap(two, true);\n+        ConcurrentSkipListMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.tailMap(two, true);\n@@ -984,10 +984,9 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -995,9 +994,9 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(five, k);\n-        k = (Integer)(r.next());\n-        assertEquals(four, k);\n-        k = (Integer)(r.next());\n-        assertEquals(three, k);\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<Item> r = sm.descendingKeySet().iterator();\n+        k = r.next();\n+        mustEqual(five, k);\n+        k = r.next();\n+        mustEqual(four, k);\n+        k = r.next();\n+        mustEqual(three, k);\n+        k = r.next();\n+        mustEqual(two, k);\n@@ -1006,14 +1005,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(two, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(three, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(four, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = (ei.next());\n+        mustEqual(two, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(three, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(four, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -1022,7 +1021,7 @@\n-        NavigableMap ssm = sm.tailMap(four, true);\n-        assertEquals(four, ssm.firstKey());\n-        assertEquals(five, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        NavigableMap<Item,String> ssm = sm.tailMap(four, true);\n+        mustEqual(four, ssm.firstKey());\n+        mustEqual(five, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(four));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n@@ -1039,2 +1038,2 @@\n-        Class cl = ConcurrentSkipListMap.class;\n-        NavigableMap<Integer, Integer> map = newMap(cl);\n+        Class<?> cl = ConcurrentSkipListMap.class;\n+        NavigableMap<Item, Item> map = newMap(cl);\n@@ -1051,1 +1050,1 @@\n-        bashSubMap(map.subMap(0, true, mapSize, false),\n+        bashSubMap(map.subMap(zero, true, itemFor(mapSize), false),\n@@ -1055,4 +1054,5 @@\n-    static NavigableMap<Integer, Integer> newMap(Class cl) throws Exception {\n-        NavigableMap<Integer, Integer> result =\n-            (NavigableMap<Integer, Integer>) cl.getConstructor().newInstance();\n-        assertEquals(0, result.size());\n+    static NavigableMap<Item, Item> newMap(Class<?> cl) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        NavigableMap<Item, Item> result =\n+            (NavigableMap<Item, Item>) cl.getConstructor().newInstance();\n+        mustEqual(0, result.size());\n@@ -1063,1 +1063,1 @@\n-    void populate(NavigableMap<Integer, Integer> map, int limit) {\n+    void populate(NavigableMap<Item, Item> map, int limit) {\n@@ -1070,1 +1070,1 @@\n-    void mutateMap(NavigableMap<Integer, Integer> map, int min, int max) {\n+    void mutateMap(NavigableMap<Item, Item> map, int min, int max) {\n@@ -1080,1 +1080,1 @@\n-        for (Iterator<Integer> it = map.keySet().iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = map.keySet().iterator(); it.hasNext(); ) {\n@@ -1082,1 +1082,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -1095,1 +1095,1 @@\n-    void mutateSubMap(NavigableMap<Integer, Integer> map, int min, int max) {\n+    void mutateSubMap(NavigableMap<Item, Item> map, int min, int max) {\n@@ -1105,1 +1105,1 @@\n-        for (Iterator<Integer> it = map.keySet().iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = map.keySet().iterator(); it.hasNext(); ) {\n@@ -1107,1 +1107,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -1119,1 +1119,1 @@\n-                    map.put(key, 2 * key);\n+                    map.put(itemFor(key), itemFor(2 * key));\n@@ -1126,2 +1126,2 @@\n-    void put(NavigableMap<Integer, Integer> map, int key) {\n-        if (map.put(key, 2 * key) == null)\n+    void put(NavigableMap<Item, Item> map, int key) {\n+        if (map.put(itemFor(key), itemFor(2 * key)) == null)\n@@ -1131,2 +1131,2 @@\n-    void remove(NavigableMap<Integer, Integer> map, int key) {\n-        if (map.remove(key) != null)\n+    void remove(NavigableMap<Item, Item> map, int key) {\n+        if (map.remove(itemFor(key)) != null)\n@@ -1136,1 +1136,1 @@\n-    void bashSubMap(NavigableMap<Integer, Integer> map,\n+    void bashSubMap(NavigableMap<Item, Item> map,\n@@ -1152,1 +1152,1 @@\n-        NavigableMap<Integer,Integer> hm = map.headMap(midPoint, incl);\n+        NavigableMap<Item,Item> hm = map.headMap(itemFor(midPoint), incl);\n@@ -1169,1 +1169,1 @@\n-        NavigableMap<Integer,Integer> tm = map.tailMap(midPoint,incl);\n+        NavigableMap<Item,Item> tm = map.tailMap(itemFor(midPoint),incl);\n@@ -1194,2 +1194,2 @@\n-            NavigableMap<Integer,Integer> sm = map.subMap(\n-                endpoints[0], lowIncl, endpoints[1], highIncl);\n+            NavigableMap<Item,Item> sm = map.subMap(\n+                itemFor(endpoints[0]), lowIncl, itemFor(endpoints[1]), highIncl);\n@@ -1203,2 +1203,2 @@\n-            NavigableMap<Integer,Integer> sm = map.subMap(\n-                endpoints[1], highIncl, endpoints[0], lowIncl);\n+            NavigableMap<Item,Item> sm = map.subMap(\n+                itemFor(endpoints[1]), highIncl, itemFor(endpoints[0]), lowIncl);\n@@ -1217,1 +1217,1 @@\n-    void check(NavigableMap<Integer, Integer> map,\n+    void check(NavigableMap<Item, Item> map,\n@@ -1281,1 +1281,1 @@\n-            assertEquals(bsContainsI, map.containsKey(i));\n+            mustEqual(bsContainsI, map.containsKey(itemFor(i)));\n@@ -1285,1 +1285,1 @@\n-        assertEquals(size, map.size());\n+        mustEqual(size, map.size());\n@@ -1290,2 +1290,2 @@\n-        for (int key : map.keySet()) {\n-            assertTrue(bs.get(key));\n+        for (Item key : map.keySet()) {\n+            assertTrue(bs.get(key.value));\n@@ -1294,2 +1294,2 @@\n-                (ascending ? key - previousKey > 0 : key - previousKey < 0));\n-            previousKey = key;\n+                (ascending ? key.value - previousKey > 0 : key.value - previousKey < 0));\n+            previousKey = key.value;\n@@ -1297,1 +1297,1 @@\n-        assertEquals(size2, size);\n+        mustEqual(size2, size);\n@@ -1301,4 +1301,5 @@\n-            assertEq(map.lowerKey(key), rs.lower(key));\n-            assertEq(map.floorKey(key), rs.floor(key));\n-            assertEq(map.higherKey(key), rs.higher(key));\n-            assertEq(map.ceilingKey(key), rs.ceiling(key));\n+            Item k = itemFor(key);\n+            assertEq(map.lowerKey(k), rs.lower(key));\n+            assertEq(map.floorKey(k), rs.floor(key));\n+            assertEq(map.higherKey(k), rs.higher(key));\n+            assertEq(map.ceilingKey(k), rs.ceiling(key));\n@@ -1312,2 +1313,2 @@\n-            assertEq(rs.first(), -1);\n-            assertEq(rs.last(),  -1);\n+            mustEqual(rs.first(), -1);\n+            mustEqual(rs.last(),  -1);\n@@ -1325,1 +1326,1 @@\n-    static void assertEq(Integer i, int j) {\n+    static void assertEq(Item i, int j) {\n@@ -1327,1 +1328,1 @@\n-            assertEquals(j, -1);\n+            mustEqual(j, -1);\n@@ -1329,1 +1330,1 @@\n-            assertEquals((int) i, j);\n+            mustEqual(i, j);\n@@ -1332,2 +1333,2 @@\n-    static boolean eq(Integer i, int j) {\n-        return (i == null) ? j == -1 : i == j;\n+    static boolean eq(Item i, int j) {\n+        return (i == null) ? j == -1 : i.value == j;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentSkipListMapTest.java","additions":358,"deletions":357,"binary":false,"changes":715,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -65,1 +66,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -67,2 +68,2 @@\n-    private static ConcurrentSkipListSet<Integer> populatedSet(int n) {\n-        ConcurrentSkipListSet<Integer> q = new ConcurrentSkipListSet<>();\n+    private static ConcurrentSkipListSet<Item> populatedSet(int n) {\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<>();\n@@ -71,1 +72,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -73,1 +74,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -75,1 +76,1 @@\n-        assertEquals(n, q.size());\n+        mustEqual(n, q.size());\n@@ -82,2 +83,2 @@\n-    private static ConcurrentSkipListSet set5() {\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+    private static ConcurrentSkipListSet<Item> set5() {\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -90,1 +91,1 @@\n-        assertEquals(5, q.size());\n+        mustEqual(5, q.size());\n@@ -98,1 +99,1 @@\n-        assertEquals(0, new ConcurrentSkipListSet().size());\n+        mustEqual(0, new ConcurrentSkipListSet<Item>().size());\n@@ -106,1 +107,1 @@\n-            new ConcurrentSkipListSet((Collection)null);\n+            new ConcurrentSkipListSet<Item>((Collection<Item>)null);\n@@ -116,1 +117,1 @@\n-            new ConcurrentSkipListSet(Arrays.asList(new Integer[SIZE]));\n+            new ConcurrentSkipListSet<Item>(Arrays.asList(new Item[SIZE]));\n@@ -125,3 +126,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -129,1 +129,1 @@\n-            new ConcurrentSkipListSet(Arrays.asList(ints));\n+            new ConcurrentSkipListSet<Item>(Arrays.asList(items));\n@@ -138,1 +138,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>(Arrays.asList(items));\n@@ -140,4 +141,1 @@\n-            ints[i] = new Integer(i);\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -151,6 +149,5 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet(cmp);\n-        assertEquals(cmp, q.comparator());\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        q.addAll(Arrays.asList(ints));\n+        @SuppressWarnings(\"unchecked\")\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>(cmp);\n+        mustEqual(cmp, q.comparator());\n+        Item[] items = defaultItems;\n+        q.addAll(Arrays.asList(items));\n@@ -158,1 +155,1 @@\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -165,1 +162,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -167,1 +164,1 @@\n-        q.add(new Integer(1));\n+        mustAdd(q, one);\n@@ -169,1 +166,1 @@\n-        q.add(new Integer(2));\n+        mustAdd(q, two);\n@@ -179,1 +176,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -181,1 +178,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -185,2 +182,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -194,1 +191,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -205,1 +202,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -214,1 +211,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -223,1 +220,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Object> q = new ConcurrentSkipListSet<Object>();\n@@ -234,1 +231,1 @@\n-            assertEquals(0, q.size());\n+            mustEqual(0, q.size());\n@@ -242,1 +239,1 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -253,2 +250,2 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n-        Integer[] ints = new Integer[SIZE];\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n+        Item[] items = new Item[SIZE];\n@@ -256,1 +253,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -266,4 +263,2 @@\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -271,1 +266,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -280,5 +275,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -286,1 +279,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -288,1 +281,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -295,1 +288,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -297,1 +290,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -306,1 +299,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -308,1 +301,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -317,1 +310,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -319,4 +312,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -325,5 +318,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -338,1 +331,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -340,1 +333,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -342,1 +335,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -350,1 +343,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -353,2 +346,2 @@\n-        assertEquals(0, q.size());\n-        q.add(new Integer(1));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -364,2 +357,2 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n-        ConcurrentSkipListSet p = new ConcurrentSkipListSet();\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> p = new ConcurrentSkipListSet<Item>();\n@@ -369,1 +362,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -378,2 +371,2 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n-        ConcurrentSkipListSet p = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> p = populatedSet(SIZE);\n@@ -388,1 +381,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -398,2 +391,2 @@\n-            ConcurrentSkipListSet q = populatedSet(SIZE);\n-            ConcurrentSkipListSet p = populatedSet(i);\n+            ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n+            ConcurrentSkipListSet<Item> p = populatedSet(i);\n@@ -401,1 +394,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -403,2 +396,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -413,1 +405,1 @@\n-        ConcurrentSkipListSet q = set5();\n+        ConcurrentSkipListSet<Item> q = set5();\n@@ -415,1 +407,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -418,1 +410,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -431,1 +423,1 @@\n-        ConcurrentSkipListSet q = set5();\n+        ConcurrentSkipListSet<Item> q = set5();\n@@ -433,1 +425,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -436,1 +428,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -449,1 +441,1 @@\n-        ConcurrentSkipListSet q = set5();\n+        ConcurrentSkipListSet<Item> q = set5();\n@@ -451,1 +443,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -454,1 +446,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -457,1 +449,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -467,1 +459,1 @@\n-        ConcurrentSkipListSet q = set5();\n+        ConcurrentSkipListSet<Item> q = set5();\n@@ -469,1 +461,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -472,1 +464,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -475,1 +467,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -485,1 +477,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -497,4 +489,4 @@\n-        ConcurrentSkipListSet<Integer> q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        assertSame(ints, q.toArray(ints));\n-        for (Integer o : ints)\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n+        Item[] items = new Item[SIZE];\n+        assertSame(items, q.toArray(items));\n+        for (Item o : items)\n@@ -509,2 +501,2 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n-        Iterator it = q.iterator();\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -513,2 +505,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -522,1 +514,1 @@\n-        NavigableSet s = new ConcurrentSkipListSet();\n+        NavigableSet<Item> s = new ConcurrentSkipListSet<Item>();\n@@ -531,4 +523,4 @@\n-        final ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -536,1 +528,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -541,2 +533,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -550,1 +542,1 @@\n-        ConcurrentSkipListSet q = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> q = populatedSet(SIZE);\n@@ -561,2 +553,2 @@\n-        ConcurrentSkipListSet x = populatedSet(SIZE);\n-        ConcurrentSkipListSet y = x.clone();\n+        ConcurrentSkipListSet<Item> x = populatedSet(SIZE);\n+        ConcurrentSkipListSet<Item> y = x.clone();\n@@ -565,3 +557,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -570,1 +562,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -579,2 +571,2 @@\n-        NavigableSet x = populatedSet(SIZE);\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = populatedSet(SIZE);\n+        NavigableSet<Item> y = serialClone(x);\n@@ -583,3 +575,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -588,1 +580,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -597,16 +589,15 @@\n-        ConcurrentSkipListSet set = set5();\n-        SortedSet sm = set.subSet(two, four);\n-        assertEquals(two, sm.first());\n-        assertEquals(three, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        ConcurrentSkipListSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, four);\n+        mustEqual(two, sm.first());\n+        mustEqual(three, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -614,1 +605,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -617,6 +608,6 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.first());\n-        assertEquals(three, sm.last());\n-        assertTrue(sm.remove(three));\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.first());\n+        mustEqual(three, sm.last());\n+        mustRemove(sm, three);\n@@ -624,1 +615,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -628,14 +619,13 @@\n-        ConcurrentSkipListSet set = set5();\n-        SortedSet sm = set.subSet(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.first());\n-        assertEquals(two, sm.last());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertFalse(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        ConcurrentSkipListSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.first());\n+        mustEqual(two, sm.last());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustNotContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n@@ -643,1 +633,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -646,3 +636,3 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -650,2 +640,2 @@\n-        assertFalse(sm.remove(three));\n-        assertEquals(4, set.size());\n+        mustNotRemove(sm, three);\n+        mustEqual(4, set.size());\n@@ -658,15 +648,14 @@\n-        ConcurrentSkipListSet set = set5();\n-        SortedSet sm = set.headSet(four);\n-        assertTrue(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        ConcurrentSkipListSet<Item> set = set5();\n+        SortedSet<Item> sm = set.headSet(four);\n+        mustContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(one, k);\n+        k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -676,2 +665,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(four, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(four, set.first());\n@@ -684,17 +673,17 @@\n-        ConcurrentSkipListSet set = set5();\n-        SortedSet sm = set.tailSet(two);\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertTrue(sm.contains(four));\n-        assertTrue(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        ConcurrentSkipListSet<Item> set = set5();\n+        SortedSet<Item> sm = set.tailSet(two);\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustContain(sm, four);\n+        mustContain(sm, five);\n+        mustContain(sm, two);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -703,7 +692,7 @@\n-        SortedSet ssm = sm.tailSet(four);\n-        assertEquals(four, ssm.first());\n-        assertEquals(five, ssm.last());\n-        assertTrue(ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(four);\n+        mustEqual(four, ssm.first());\n+        mustEqual(five, ssm.last());\n+        mustRemove(ssm, four);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n@@ -719,1 +708,1 @@\n-        Class cl = ConcurrentSkipListSet.class;\n+        Class<?> cl = ConcurrentSkipListSet.class;\n@@ -721,1 +710,1 @@\n-        NavigableSet<Integer> set = newSet(cl);\n+        NavigableSet<Item> set = newSet(cl);\n@@ -732,1 +721,1 @@\n-        bashSubSet(set.subSet(0, true, setSize, false),\n+        bashSubSet(set.subSet(zero, true, itemFor(setSize), false),\n@@ -740,2 +729,2 @@\n-        Set x = populatedSet(SIZE);\n-        Set y = new ConcurrentSkipListSet(x);\n+        Set<Item> x = populatedSet(SIZE);\n+        Set<Item> y = new ConcurrentSkipListSet<Item>(x);\n@@ -743,2 +732,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -747,4 +736,5 @@\n-    static NavigableSet<Integer> newSet(Class cl) throws Exception {\n-        NavigableSet<Integer> result =\n-            (NavigableSet<Integer>) cl.getConstructor().newInstance();\n-        assertEquals(0, result.size());\n+    static NavigableSet<Item> newSet(Class<?> cl) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        NavigableSet<Item> result =\n+            (NavigableSet<Item>) cl.getConstructor().newInstance();\n+        mustEqual(0, result.size());\n@@ -755,1 +745,1 @@\n-    void populate(NavigableSet<Integer> set, int limit, BitSet bs) {\n+    void populate(NavigableSet<Item> set, int limit, BitSet bs) {\n@@ -762,1 +752,1 @@\n-    void mutateSet(NavigableSet<Integer> set, int min, int max, BitSet bs) {\n+    void mutateSet(NavigableSet<Item> set, int min, int max, BitSet bs) {\n@@ -772,1 +762,1 @@\n-        for (Iterator<Integer> it = set.iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = set.iterator(); it.hasNext(); ) {\n@@ -774,1 +764,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -787,1 +777,1 @@\n-    void mutateSubSet(NavigableSet<Integer> set, int min, int max,\n+    void mutateSubSet(NavigableSet<Item> set, int min, int max,\n@@ -798,1 +788,1 @@\n-        for (Iterator<Integer> it = set.iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = set.iterator(); it.hasNext(); ) {\n@@ -800,1 +790,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -812,1 +802,1 @@\n-                    set.add(element);\n+                    set.add(itemFor(element));\n@@ -819,2 +809,2 @@\n-    void put(NavigableSet<Integer> set, int element, BitSet bs) {\n-        if (set.add(element))\n+    void put(NavigableSet<Item> set, int element, BitSet bs) {\n+        if (set.add(itemFor(element)))\n@@ -824,2 +814,2 @@\n-    void remove(NavigableSet<Integer> set, int element, BitSet bs) {\n-        if (set.remove(element))\n+    void remove(NavigableSet<Item> set, int element, BitSet bs) {\n+        if (set.remove(itemFor(element)))\n@@ -829,1 +819,1 @@\n-    void bashSubSet(NavigableSet<Integer> set,\n+    void bashSubSet(NavigableSet<Item> set,\n@@ -846,1 +836,1 @@\n-        NavigableSet<Integer> hm = set.headSet(midPoint, incl);\n+        NavigableSet<Item> hm = set.headSet(itemFor(midPoint), incl);\n@@ -863,1 +853,1 @@\n-        NavigableSet<Integer> tm = set.tailSet(midPoint,incl);\n+        NavigableSet<Item> tm = set.tailSet(itemFor(midPoint),incl);\n@@ -888,2 +878,2 @@\n-            NavigableSet<Integer> sm = set.subSet(\n-                endpoints[0], lowIncl, endpoints[1], highIncl);\n+            NavigableSet<Item> sm = set.subSet(\n+                itemFor(endpoints[0]), lowIncl, itemFor(endpoints[1]), highIncl);\n@@ -897,2 +887,2 @@\n-            NavigableSet<Integer> sm = set.subSet(\n-                endpoints[1], highIncl, endpoints[0], lowIncl);\n+            NavigableSet<Item> sm = set.subSet(\n+                itemFor(endpoints[1]), highIncl, itemFor(endpoints[0]), lowIncl);\n@@ -911,1 +901,1 @@\n-    void check(NavigableSet<Integer> set,\n+    void check(NavigableSet<Item> set,\n@@ -980,1 +970,1 @@\n-            assertEquals(bsContainsI, set.contains(i));\n+            mustEqual(bsContainsI, set.contains(itemFor(i)));\n@@ -984,1 +974,1 @@\n-        assertEquals(size, set.size());\n+        mustEqual(size, set.size());\n@@ -989,2 +979,2 @@\n-        for (int element : set) {\n-            assertTrue(bs.get(element));\n+        for (Item element : set) {\n+            assertTrue(bs.get(element.value));\n@@ -993,2 +983,2 @@\n-                element - previousElement > 0 : element - previousElement < 0));\n-            previousElement = element;\n+                element.value - previousElement > 0 : element.value - previousElement < 0));\n+            previousElement = element.value;\n@@ -996,1 +986,1 @@\n-        assertEquals(size2, size);\n+        mustEqual(size2, size);\n@@ -1000,4 +990,5 @@\n-            assertEq(set.lower(element), rs.lower(element));\n-            assertEq(set.floor(element), rs.floor(element));\n-            assertEq(set.higher(element), rs.higher(element));\n-            assertEq(set.ceiling(element), rs.ceiling(element));\n+            Item e = itemFor(element);\n+            assertEq(set.lower(e), rs.lower(element));\n+            assertEq(set.floor(e), rs.floor(element));\n+            assertEq(set.higher(e), rs.higher(element));\n+            assertEq(set.ceiling(e), rs.ceiling(element));\n@@ -1011,2 +1002,2 @@\n-            assertEq(rs.first(), -1);\n-            assertEq(rs.last(),  -1);\n+            mustEqual(rs.first(), -1);\n+            mustEqual(rs.last(),  -1);\n@@ -1024,1 +1015,1 @@\n-    static void assertEq(Integer i, int j) {\n+    static void assertEq(Item i, int j) {\n@@ -1026,1 +1017,1 @@\n-            assertEquals(j, -1);\n+            mustEqual(j, -1);\n@@ -1028,1 +1019,1 @@\n-            assertEquals((int) i, j);\n+            mustEqual(i, j);\n@@ -1031,2 +1022,2 @@\n-    static boolean eq(Integer i, int j) {\n-        return (i == null) ? j == -1 : i == j;\n+    static boolean eq(Item i, int j) {\n+        return (i == null) ? j == -1 : i.value == j;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentSkipListSetTest.java","additions":256,"deletions":265,"binary":false,"changes":521,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -59,2 +59,2 @@\n-    private static ConcurrentNavigableMap map5() {\n-        ConcurrentSkipListMap map = new ConcurrentSkipListMap();\n+    private static ConcurrentNavigableMap<Item,String> map5() {\n+        ConcurrentSkipListMap<Item,String>map = new ConcurrentSkipListMap<Item,String>();\n@@ -70,1 +70,1 @@\n-        assertEquals(7, map.size());\n+        mustEqual(7, map.size());\n@@ -75,1 +75,1 @@\n-     * Returns a new map from Integers -5 to -1 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items -5 to -1 to Strings \"A\"-\"E\".\n@@ -77,2 +77,2 @@\n-    private static ConcurrentNavigableMap dmap5() {\n-        ConcurrentSkipListMap map = new ConcurrentSkipListMap();\n+    private static ConcurrentNavigableMap<Item,String> dmap5() {\n+        ConcurrentSkipListMap<Item,String>map = new ConcurrentSkipListMap<Item,String>();\n@@ -80,5 +80,5 @@\n-        map.put(m1, \"A\");\n-        map.put(m5, \"E\");\n-        map.put(m3, \"C\");\n-        map.put(m2, \"B\");\n-        map.put(m4, \"D\");\n+        map.put(minusOne, \"A\");\n+        map.put(minusFive, \"E\");\n+        map.put(minusThree, \"C\");\n+        map.put(minusTwo, \"B\");\n+        map.put(minusFour, \"D\");\n@@ -86,1 +86,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -90,2 +90,2 @@\n-    private static ConcurrentNavigableMap map0() {\n-        ConcurrentSkipListMap map = new ConcurrentSkipListMap();\n+    private static ConcurrentNavigableMap<Item,String> map0() {\n+        ConcurrentSkipListMap<Item,String>map = new ConcurrentSkipListMap<Item,String>();\n@@ -96,2 +96,2 @@\n-    private static ConcurrentNavigableMap dmap0() {\n-        ConcurrentSkipListMap map = new ConcurrentSkipListMap();\n+    private static ConcurrentNavigableMap<Item,String> dmap0() {\n+        ConcurrentSkipListMap<Item,String>map = new ConcurrentSkipListMap<Item,String>();\n@@ -106,1 +106,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -108,1 +108,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -115,4 +115,4 @@\n-        ConcurrentNavigableMap map1 = map5();\n-        ConcurrentNavigableMap map2 = map5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        ConcurrentNavigableMap<Item,String> map1 = map5();\n+        ConcurrentNavigableMap<Item,String> map2 = map5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -128,1 +128,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -137,1 +137,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -147,3 +147,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(\"A\", (String)map.get(one));\n-        ConcurrentNavigableMap empty = map0();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n+        ConcurrentNavigableMap<Item,String> empty = map0();\n@@ -157,2 +157,2 @@\n-        ConcurrentNavigableMap empty = map0();\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> empty = map0();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -167,2 +167,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(one, map.firstKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(one, map.firstKey());\n@@ -175,2 +175,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(five, map.lastKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(five, map.lastKey());\n@@ -183,8 +183,8 @@\n-        ConcurrentNavigableMap map = map5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(one));\n-        assertTrue(s.contains(two));\n-        assertTrue(s.contains(three));\n-        assertTrue(s.contains(four));\n-        assertTrue(s.contains(five));\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, one);\n+        mustContain(s, two);\n+        mustContain(s, three);\n+        mustContain(s, four);\n+        mustContain(s, five);\n@@ -197,5 +197,5 @@\n-        ConcurrentNavigableMap map = map5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = i.next();\n+        mustEqual(last, one);\n@@ -203,1 +203,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = i.next();\n@@ -213,3 +213,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -227,2 +227,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        Set s = map.keySet();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n@@ -231,2 +231,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -240,4 +240,4 @@\n-        ConcurrentNavigableMap map = map5();\n-        Set s = map.descendingKeySet();\n-        Object[] ar = s.toArray();\n-        assertEquals(5, ar.length);\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.descendingKeySet();\n+        Item[] ar = s.toArray(new Item[0]);\n+        mustEqual(5, ar.length);\n@@ -245,1 +245,1 @@\n-        ar[0] = m10;\n+        ar[0] = minusTen;\n@@ -253,5 +253,5 @@\n-        ConcurrentNavigableMap map = map5();\n-        Collection v = map.values();\n-        Object[] ar = v.toArray();\n-        ArrayList s = new ArrayList(Arrays.asList(ar));\n-        assertEquals(5, ar.length);\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Collection<String> v = map.values();\n+        String[] ar = v.toArray(new String[0]);\n+        ArrayList<String> s = new ArrayList<String>(Arrays.asList(ar));\n+        mustEqual(5, ar.length);\n@@ -269,4 +269,4 @@\n-        ConcurrentNavigableMap map = map5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -274,1 +274,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -288,2 +288,2 @@\n-        ConcurrentNavigableMap empty = map0();\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> empty = map0();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -291,1 +291,1 @@\n-        assertEquals(5, empty.size());\n+        mustEqual(5, empty.size());\n@@ -303,1 +303,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -312,2 +312,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(\"A\", map.putIfAbsent(one, \"Z\"));\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.putIfAbsent(one, \"Z\"));\n@@ -320,1 +320,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -329,1 +329,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -331,1 +331,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -338,2 +338,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -341,1 +341,1 @@\n-        assertEquals(\"A\", map.get(one));\n+        mustEqual(\"A\", map.get(one));\n@@ -348,2 +348,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        assertEquals(\"A\", map.get(one));\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n@@ -351,1 +351,1 @@\n-        assertEquals(\"Z\", map.get(one));\n+        mustEqual(\"Z\", map.get(one));\n@@ -358,1 +358,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -360,1 +360,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -368,1 +368,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -370,1 +370,1 @@\n-        assertEquals(\"E\", map.get(five));\n+        mustEqual(\"E\", map.get(five));\n@@ -372,1 +372,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -375,1 +375,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -383,3 +383,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e1 = map.lowerEntry(three);\n-        assertEquals(two, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(three);\n+        mustEqual(two, e1.getKey());\n@@ -387,2 +387,2 @@\n-        Map.Entry e2 = map.lowerEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -390,1 +390,1 @@\n-        Map.Entry e3 = map.lowerEntry(one);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(one);\n@@ -393,1 +393,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -401,3 +401,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e1 = map.higherEntry(three);\n-        assertEquals(four, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(three);\n+        mustEqual(four, e1.getKey());\n@@ -405,2 +405,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -408,1 +408,1 @@\n-        Map.Entry e3 = map.higherEntry(five);\n+        Map.Entry<Item,String> e3 = map.higherEntry(five);\n@@ -411,1 +411,1 @@\n-        Map.Entry e4 = map.higherEntry(six);\n+        Map.Entry<Item,String> e4 = map.higherEntry(six);\n@@ -419,3 +419,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e1 = map.floorEntry(three);\n-        assertEquals(three, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -423,2 +423,2 @@\n-        Map.Entry e2 = map.floorEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -426,2 +426,2 @@\n-        Map.Entry e3 = map.floorEntry(one);\n-        assertEquals(one, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(one);\n+        mustEqual(one, e3.getKey());\n@@ -429,1 +429,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -437,3 +437,3 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e1 = map.ceilingEntry(three);\n-        assertEquals(three, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -441,2 +441,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -444,2 +444,2 @@\n-        Map.Entry e3 = map.ceilingEntry(five);\n-        assertEquals(five, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(five);\n+        mustEqual(five, e3.getKey());\n@@ -447,1 +447,1 @@\n-        Map.Entry e4 = map.ceilingEntry(six);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(six);\n@@ -455,4 +455,4 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -460,1 +460,1 @@\n-        assertEquals(two, e.getKey());\n+        mustEqual(two, e.getKey());\n@@ -463,2 +463,2 @@\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -466,1 +466,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -469,1 +469,1 @@\n-        assertEquals(five, e.getKey());\n+        mustEqual(five, e.getKey());\n@@ -482,4 +482,4 @@\n-        ConcurrentNavigableMap map = map5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -487,1 +487,1 @@\n-        assertEquals(four, e.getKey());\n+        mustEqual(four, e.getKey());\n@@ -490,2 +490,2 @@\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -493,1 +493,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -496,1 +496,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -509,4 +509,4 @@\n-        ConcurrentNavigableMap map = map5();\n-        ConcurrentNavigableMap empty = map0();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        ConcurrentNavigableMap<Item,String> empty = map0();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -519,1 +519,1 @@\n-        ConcurrentNavigableMap map = map5();\n+        ConcurrentNavigableMap<Item,String> map = map5();\n@@ -533,1 +533,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -544,1 +544,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -555,1 +555,1 @@\n-            ConcurrentNavigableMap c = map0();\n+            ConcurrentNavigableMap<Item,String> c = map0();\n@@ -566,1 +566,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -577,1 +577,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -588,2 +588,2 @@\n-            ConcurrentNavigableMap c = map5();\n-            c.replace(null, \"whatever\");\n+            ConcurrentNavigableMap<Item,String> c = map5();\n+            c.replace(null, \"A\");\n@@ -599,2 +599,2 @@\n-            ConcurrentNavigableMap c = map5();\n-            c.replace(null, one, \"whatever\");\n+            ConcurrentNavigableMap<Item,String> c = map5();\n+            c.replace(null, \"A\", \"B\");\n@@ -610,1 +610,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -621,1 +621,1 @@\n-            ConcurrentNavigableMap c = map5();\n+            ConcurrentNavigableMap<Item,String> c = map5();\n@@ -631,2 +631,2 @@\n-        NavigableMap x = map5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = map5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -635,4 +635,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -645,5 +645,5 @@\n-        ConcurrentNavigableMap map = map5();\n-        SortedMap sm = map.subMap(two, four);\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(2, sm.size());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.subMap(two, four);\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(2, sm.size());\n@@ -655,6 +655,6 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -662,1 +662,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -666,5 +666,5 @@\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(three));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(three));\n@@ -672,1 +672,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -676,5 +676,5 @@\n-        ConcurrentNavigableMap map = map5();\n-        SortedMap sm = map.subMap(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(two, sm.lastKey());\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.subMap(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(two, sm.lastKey());\n@@ -686,4 +686,4 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n@@ -691,1 +691,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -695,2 +695,2 @@\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -699,1 +699,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -706,2 +706,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        SortedMap sm = map.headMap(four);\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.headMap(four);\n@@ -713,1 +713,1 @@\n-        Iterator i = sm.keySet().iterator();\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n@@ -715,6 +715,6 @@\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        k = (Item)(i.next());\n+        mustEqual(one, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -724,2 +724,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(four, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(four, map.firstKey());\n@@ -732,2 +732,2 @@\n-        ConcurrentNavigableMap map = map5();\n-        SortedMap sm = map.tailMap(two);\n+        ConcurrentNavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.tailMap(two);\n@@ -739,10 +739,9 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        Iterator<Item> i = sm.keySet().iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -751,14 +750,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(two, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(three, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(four, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = (ei.next());\n+        mustEqual(two, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(three, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(four, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -767,7 +766,7 @@\n-        SortedMap ssm = sm.tailMap(four);\n-        assertEquals(four, ssm.firstKey());\n-        assertEquals(five, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        SortedMap<Item,String> ssm = sm.tailMap(four);\n+        mustEqual(four, ssm.firstKey());\n+        mustEqual(five, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(four));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n@@ -780,1 +779,1 @@\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -782,1 +781,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -789,4 +788,4 @@\n-        ConcurrentNavigableMap map1 = dmap5();\n-        ConcurrentNavigableMap map2 = dmap5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        ConcurrentNavigableMap<Item,String> map1 = dmap5();\n+        ConcurrentNavigableMap<Item,String> map2 = dmap5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -802,2 +801,2 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertTrue(map.containsKey(m1));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        assertTrue(map.containsKey(minusOne));\n@@ -811,1 +810,1 @@\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -821,4 +820,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(\"A\", (String)map.get(m1));\n-        ConcurrentNavigableMap empty = dmap0();\n-        assertNull(empty.get(m1));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(\"A\", map.get(minusOne));\n+        ConcurrentNavigableMap<Item,String> empty = dmap0();\n+        assertNull(empty.get(minusOne));\n@@ -831,2 +830,2 @@\n-        ConcurrentNavigableMap empty = dmap0();\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> empty = dmap0();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -841,2 +840,2 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(m1, map.firstKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(minusOne, map.firstKey());\n@@ -849,2 +848,2 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(m5, map.lastKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(minusFive, map.lastKey());\n@@ -857,8 +856,8 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(m1));\n-        assertTrue(s.contains(m2));\n-        assertTrue(s.contains(m3));\n-        assertTrue(s.contains(m4));\n-        assertTrue(s.contains(m5));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, minusOne);\n+        mustContain(s, minusTwo);\n+        mustContain(s, minusThree);\n+        mustContain(s, minusFour);\n+        mustContain(s, minusFive);\n@@ -871,5 +870,5 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, m1);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = i.next();\n+        mustEqual(last, minusOne);\n@@ -877,1 +876,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = i.next();\n@@ -887,3 +886,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -901,3 +900,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        Object[] ar = s.toArray();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        Item[] ar = s.toArray(new Item[0]);\n@@ -905,2 +904,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -914,4 +913,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Set s = map.descendingKeySet();\n-        Object[] ar = s.toArray();\n-        assertEquals(5, ar.length);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.descendingKeySet();\n+        Item[] ar = s.toArray(new Item[0]);\n+        mustEqual(5, ar.length);\n@@ -919,1 +918,1 @@\n-        ar[0] = m10;\n+        ar[0] = minusTen;\n@@ -927,5 +926,5 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Collection v = map.values();\n-        Object[] ar = v.toArray();\n-        ArrayList s = new ArrayList(Arrays.asList(ar));\n-        assertEquals(5, ar.length);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Collection<String> v = map.values();\n+        String[] ar = v.toArray(new String[0]);\n+        ArrayList<String> s = new ArrayList<String>(Arrays.asList(ar));\n+        mustEqual(5, ar.length);\n@@ -943,4 +942,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -948,1 +947,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -950,5 +949,5 @@\n-                       (e.getKey().equals(m1) && e.getValue().equals(\"A\")) ||\n-                       (e.getKey().equals(m2) && e.getValue().equals(\"B\")) ||\n-                       (e.getKey().equals(m3) && e.getValue().equals(\"C\")) ||\n-                       (e.getKey().equals(m4) && e.getValue().equals(\"D\")) ||\n-                       (e.getKey().equals(m5) && e.getValue().equals(\"E\")));\n+                       (e.getKey().equals(minusOne) && e.getValue().equals(\"A\")) ||\n+                       (e.getKey().equals(minusTwo) && e.getValue().equals(\"B\")) ||\n+                       (e.getKey().equals(minusThree) && e.getValue().equals(\"C\")) ||\n+                       (e.getKey().equals(minusFour) && e.getValue().equals(\"D\")) ||\n+                       (e.getKey().equals(minusFive) && e.getValue().equals(\"E\")));\n@@ -962,2 +961,2 @@\n-        ConcurrentNavigableMap empty = dmap0();\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> empty = dmap0();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -965,6 +964,6 @@\n-        assertEquals(5, empty.size());\n-        assertTrue(empty.containsKey(m1));\n-        assertTrue(empty.containsKey(m2));\n-        assertTrue(empty.containsKey(m3));\n-        assertTrue(empty.containsKey(m4));\n-        assertTrue(empty.containsKey(m5));\n+        mustEqual(5, empty.size());\n+        assertTrue(empty.containsKey(minusOne));\n+        assertTrue(empty.containsKey(minusTwo));\n+        assertTrue(empty.containsKey(minusThree));\n+        assertTrue(empty.containsKey(minusFour));\n+        assertTrue(empty.containsKey(minusFive));\n@@ -977,1 +976,1 @@\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -986,2 +985,2 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(\"A\", map.putIfAbsent(m1, \"Z\"));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(\"A\", map.putIfAbsent(minusOne, \"Z\"));\n@@ -994,1 +993,1 @@\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -1003,3 +1002,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertNotNull(map.replace(m1, \"Z\"));\n-        assertEquals(\"Z\", map.get(m1));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        assertNotNull(map.replace(minusOne, \"Z\"));\n+        mustEqual(\"Z\", map.get(minusOne));\n@@ -1012,4 +1011,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(\"A\", map.get(m1));\n-        assertFalse(map.replace(m1, \"Z\", \"Z\"));\n-        assertEquals(\"A\", map.get(m1));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(\"A\", map.get(minusOne));\n+        assertFalse(map.replace(minusOne, \"Z\", \"Z\"));\n+        mustEqual(\"A\", map.get(minusOne));\n@@ -1022,4 +1021,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertEquals(\"A\", map.get(m1));\n-        assertTrue(map.replace(m1, \"A\", \"Z\"));\n-        assertEquals(\"Z\", map.get(m1));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        mustEqual(\"A\", map.get(minusOne));\n+        assertTrue(map.replace(minusOne, \"A\", \"Z\"));\n+        mustEqual(\"Z\", map.get(minusOne));\n@@ -1032,4 +1031,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        map.remove(m5);\n-        assertEquals(4, map.size());\n-        assertFalse(map.containsKey(m5));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        map.remove(minusFive);\n+        mustEqual(4, map.size());\n+        assertFalse(map.containsKey(minusFive));\n@@ -1042,9 +1041,9 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        assertTrue(map.containsKey(m5));\n-        assertEquals(\"E\", map.get(m5));\n-        map.remove(m5, \"E\");\n-        assertEquals(4, map.size());\n-        assertFalse(map.containsKey(m5));\n-        map.remove(m4, \"A\");\n-        assertEquals(4, map.size());\n-        assertTrue(map.containsKey(m4));\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        assertTrue(map.containsKey(minusFive));\n+        mustEqual(\"E\", map.get(minusFive));\n+        map.remove(minusFive, \"E\");\n+        mustEqual(4, map.size());\n+        assertFalse(map.containsKey(minusFive));\n+        map.remove(minusFour, \"A\");\n+        mustEqual(4, map.size());\n+        assertTrue(map.containsKey(minusFour));\n@@ -1057,3 +1056,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e1 = map.lowerEntry(m3);\n-        assertEquals(m2, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(minusThree);\n+        mustEqual(minusTwo, e1.getKey());\n@@ -1061,2 +1060,2 @@\n-        Map.Entry e2 = map.lowerEntry(m6);\n-        assertEquals(m5, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(minusSix);\n+        mustEqual(minusFive, e2.getKey());\n@@ -1064,1 +1063,1 @@\n-        Map.Entry e3 = map.lowerEntry(m1);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(minusOne);\n@@ -1067,1 +1066,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -1075,3 +1074,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e1 = map.higherEntry(m3);\n-        assertEquals(m4, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(minusThree);\n+        mustEqual(minusFour, e1.getKey());\n@@ -1079,2 +1078,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(m1, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(minusOne, e2.getKey());\n@@ -1082,1 +1081,1 @@\n-        Map.Entry e3 = map.higherEntry(m5);\n+        Map.Entry<Item,String> e3 = map.higherEntry(minusFive);\n@@ -1085,1 +1084,1 @@\n-        Map.Entry e4 = map.higherEntry(m6);\n+        Map.Entry<Item,String> e4 = map.higherEntry(minusSix);\n@@ -1093,3 +1092,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e1 = map.floorEntry(m3);\n-        assertEquals(m3, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(minusThree);\n+        mustEqual(minusThree, e1.getKey());\n@@ -1097,2 +1096,2 @@\n-        Map.Entry e2 = map.floorEntry(m6);\n-        assertEquals(m5, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(minusSix);\n+        mustEqual(minusFive, e2.getKey());\n@@ -1100,2 +1099,2 @@\n-        Map.Entry e3 = map.floorEntry(m1);\n-        assertEquals(m1, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(minusOne);\n+        mustEqual(minusOne, e3.getKey());\n@@ -1103,1 +1102,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -1111,3 +1110,3 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e1 = map.ceilingEntry(m3);\n-        assertEquals(m3, e1.getKey());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(minusThree);\n+        mustEqual(minusThree, e1.getKey());\n@@ -1115,2 +1114,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(m1, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(minusOne, e2.getKey());\n@@ -1118,2 +1117,2 @@\n-        Map.Entry e3 = map.ceilingEntry(m5);\n-        assertEquals(m5, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(minusFive);\n+        mustEqual(minusFive, e3.getKey());\n@@ -1121,1 +1120,1 @@\n-        Map.Entry e4 = map.ceilingEntry(m6);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(minusSix);\n@@ -1129,4 +1128,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(m1, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(minusOne, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -1134,2 +1133,2 @@\n-        assertEquals(m2, e.getKey());\n-        map.put(m1, \"A\");\n+        mustEqual(minusTwo, e.getKey());\n+        map.put(minusOne, \"A\");\n@@ -1137,2 +1136,2 @@\n-        assertEquals(m1, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(minusOne, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -1140,2 +1139,2 @@\n-        assertEquals(m3, e.getKey());\n-        map.remove(m4);\n+        mustEqual(minusThree, e.getKey());\n+        map.remove(minusFour);\n@@ -1143,1 +1142,1 @@\n-        assertEquals(m5, e.getKey());\n+        mustEqual(minusFive, e.getKey());\n@@ -1156,4 +1155,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -1161,2 +1160,2 @@\n-        assertEquals(m4, e.getKey());\n-        map.put(m5, \"E\");\n+        mustEqual(minusFour, e.getKey());\n+        map.put(minusFive, \"E\");\n@@ -1164,2 +1163,2 @@\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -1167,2 +1166,2 @@\n-        assertEquals(m3, e.getKey());\n-        map.remove(m2);\n+        mustEqual(minusThree, e.getKey());\n+        map.remove(minusTwo);\n@@ -1170,1 +1169,1 @@\n-        assertEquals(m1, e.getKey());\n+        mustEqual(minusOne, e.getKey());\n@@ -1183,4 +1182,4 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        ConcurrentNavigableMap empty = dmap0();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        ConcurrentNavigableMap<Item,String> empty = dmap0();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -1193,1 +1192,1 @@\n-        ConcurrentNavigableMap map = dmap5();\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n@@ -1207,1 +1206,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1218,1 +1217,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1229,1 +1228,1 @@\n-            ConcurrentNavigableMap c = dmap0();\n+            ConcurrentNavigableMap<Item,String> c = dmap0();\n@@ -1240,1 +1239,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1251,1 +1250,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1262,1 +1261,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1273,2 +1272,2 @@\n-            ConcurrentNavigableMap c = dmap5();\n-            c.replace(null, m1, \"whatever\");\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n+            c.replace(null, \"A\", \"B\");\n@@ -1284,1 +1283,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1295,1 +1294,1 @@\n-            ConcurrentNavigableMap c = dmap5();\n+            ConcurrentNavigableMap<Item,String> c = dmap5();\n@@ -1305,2 +1304,2 @@\n-        NavigableMap x = dmap5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = dmap5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -1309,4 +1308,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -1319,16 +1318,16 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        SortedMap sm = map.subMap(m2, m4);\n-        assertEquals(m2, sm.firstKey());\n-        assertEquals(m3, sm.lastKey());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.subMap(minusTwo, minusFour);\n+        mustEqual(minusTwo, sm.firstKey());\n+        mustEqual(minusThree, sm.lastKey());\n+        mustEqual(2, sm.size());\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusThree, k);\n@@ -1336,1 +1335,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -1339,6 +1338,6 @@\n-        assertFalse(map.containsKey(m2));\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(m3, sm.firstKey());\n-        assertEquals(m3, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(m3));\n+        assertFalse(map.containsKey(minusTwo));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(minusThree, sm.firstKey());\n+        mustEqual(minusThree, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(minusThree));\n@@ -1346,1 +1345,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -1350,14 +1349,14 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        SortedMap sm = map.subMap(m2, m3);\n-        assertEquals(1, sm.size());\n-        assertEquals(m2, sm.firstKey());\n-        assertEquals(m2, sm.lastKey());\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertFalse(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.subMap(minusTwo, minusThree);\n+        mustEqual(1, sm.size());\n+        mustEqual(minusTwo, sm.firstKey());\n+        mustEqual(minusTwo, sm.lastKey());\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertFalse(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n@@ -1365,1 +1364,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -1368,3 +1367,3 @@\n-        assertFalse(map.containsKey(m2));\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        assertFalse(map.containsKey(minusTwo));\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -1372,2 +1371,2 @@\n-        assertSame(sm.remove(m3), null);\n-        assertEquals(4, map.size());\n+        assertSame(sm.remove(minusThree), null);\n+        mustEqual(4, map.size());\n@@ -1380,15 +1379,15 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        SortedMap sm = map.headMap(m4);\n-        assertTrue(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m1, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.headMap(minusFour);\n+        assertTrue(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusOne, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusThree, k);\n@@ -1398,2 +1397,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(m4, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(minusFour, map.firstKey());\n@@ -1406,17 +1405,16 @@\n-        ConcurrentNavigableMap map = dmap5();\n-        SortedMap sm = map.tailMap(m2);\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertTrue(sm.containsKey(m4));\n-        assertTrue(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m4, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m5, k);\n+        ConcurrentNavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.tailMap(minusTwo);\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertTrue(sm.containsKey(minusFour));\n+        assertTrue(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = (i.next());\n+        mustEqual(minusThree, k);\n+        k = (i.next());\n+        mustEqual(minusFour, k);\n+        k = (i.next());\n+        mustEqual(minusFive, k);\n@@ -1425,14 +1423,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m2, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m3, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m4, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = (ei.next());\n+        mustEqual(minusTwo, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusThree, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusFour, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -1441,7 +1439,7 @@\n-        SortedMap ssm = sm.tailMap(m4);\n-        assertEquals(m4, ssm.firstKey());\n-        assertEquals(m5, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(m4));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        SortedMap<Item,String> ssm = sm.tailMap(minusFour);\n+        mustEqual(minusFour, ssm.firstKey());\n+        mustEqual(minusFive, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(minusFour));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentSkipListSubMapTest.java","additions":503,"deletions":505,"binary":false,"changes":1008,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -60,1 +61,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -62,2 +63,2 @@\n-    private static NavigableSet<Integer> populatedSet(int n) {\n-        ConcurrentSkipListSet<Integer> q = new ConcurrentSkipListSet<>();\n+    private static NavigableSet<Item> populatedSet(int n) {\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<>();\n@@ -67,1 +68,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -69,4 +70,4 @@\n-            assertTrue(q.add(new Integer(i)));\n-        assertTrue(q.add(new Integer(-n)));\n-        assertTrue(q.add(new Integer(n)));\n-        NavigableSet s = q.subSet(new Integer(0), true, new Integer(n), false);\n+            mustAdd(q, i);\n+        mustAdd(q, -n);\n+        mustAdd(q, n);\n+        NavigableSet<Item> s = q.subSet(itemFor(0), true, itemFor(n), false);\n@@ -74,1 +75,1 @@\n-        assertEquals(n, s.size());\n+        mustEqual(n, s.size());\n@@ -81,2 +82,2 @@\n-    private static NavigableSet set5() {\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+    private static NavigableSet<Item> set5() {\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -91,2 +92,2 @@\n-        NavigableSet s = q.subSet(one, true, seven, false);\n-        assertEquals(5, s.size());\n+        NavigableSet<Item> s = q.subSet(one, true, seven, false);\n+        mustEqual(5, s.size());\n@@ -99,2 +100,2 @@\n-    private static NavigableSet dset5() {\n-        ConcurrentSkipListSet q = new ConcurrentSkipListSet();\n+    private static NavigableSet<Item> dset5() {\n+        ConcurrentSkipListSet<Item> q = new ConcurrentSkipListSet<Item>();\n@@ -102,7 +103,7 @@\n-        q.add(m1);\n-        q.add(m2);\n-        q.add(m3);\n-        q.add(m4);\n-        q.add(m5);\n-        NavigableSet s = q.descendingSet();\n-        assertEquals(5, s.size());\n+        q.add(minusOne);\n+        q.add(minusTwo);\n+        q.add(minusThree);\n+        q.add(minusFour);\n+        q.add(minusFive);\n+        NavigableSet<Item> s = q.descendingSet();\n+        mustEqual(5, s.size());\n@@ -112,2 +113,2 @@\n-    private static NavigableSet set0() {\n-        ConcurrentSkipListSet set = new ConcurrentSkipListSet();\n+    private static NavigableSet<Item> set0() {\n+        ConcurrentSkipListSet<Item> set = new ConcurrentSkipListSet<Item>();\n@@ -115,1 +116,1 @@\n-        return set.tailSet(m1, true);\n+        return set.tailSet(minusOne, true);\n@@ -118,2 +119,2 @@\n-    private static NavigableSet dset0() {\n-        ConcurrentSkipListSet set = new ConcurrentSkipListSet();\n+    private static NavigableSet<Item> dset0() {\n+        ConcurrentSkipListSet<Item> set = new ConcurrentSkipListSet<Item>();\n@@ -128,1 +129,1 @@\n-        assertEquals(0, set0().size());\n+        mustEqual(0, set0().size());\n@@ -135,1 +136,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -137,1 +138,1 @@\n-        q.add(new Integer(1));\n+        mustAdd(q, one);\n@@ -139,1 +140,1 @@\n-        q.add(new Integer(2));\n+        mustAdd(q, two);\n@@ -149,1 +150,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -151,1 +152,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -155,2 +156,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -164,1 +165,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -175,1 +176,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -183,1 +184,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -192,1 +193,2 @@\n-        NavigableSet q = set0();\n+        ConcurrentSkipListSet<Object> src = new ConcurrentSkipListSet<Object>();\n+        NavigableSet<Object> q = src.tailSet(minusOne, true);\n@@ -204,1 +206,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -215,2 +217,2 @@\n-        NavigableSet q = set0();\n-        Integer[] ints = new Integer[SIZE];\n+        NavigableSet<Item> q = set0();\n+        Item[] items = new Item[SIZE];\n@@ -218,1 +220,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -228,4 +230,2 @@\n-        NavigableSet q = set0();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i + SIZE);\n+        NavigableSet<Item> q = set0();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -233,1 +233,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -242,2 +242,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] empty = new Item[0];\n+        Item[] items = new Item[SIZE];\n@@ -245,2 +245,2 @@\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        NavigableSet q = set0();\n+            items[i] = itemFor(SIZE - 1 - i);\n+        NavigableSet<Item> q = set0();\n@@ -248,1 +248,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -250,1 +250,1 @@\n-            assertEquals(new Integer(i), q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -257,1 +257,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -259,1 +259,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -268,1 +268,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -270,4 +270,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -276,5 +276,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -289,1 +289,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -291,1 +291,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -293,1 +293,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -301,1 +301,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -304,2 +304,2 @@\n-        assertEquals(0, q.size());\n-        q.add(new Integer(1));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -315,2 +315,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = set0();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = set0();\n@@ -320,1 +320,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -329,2 +329,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = populatedSet(SIZE);\n@@ -339,1 +339,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -349,2 +349,2 @@\n-            NavigableSet q = populatedSet(SIZE);\n-            NavigableSet p = populatedSet(i);\n+            NavigableSet<Item> q = populatedSet(SIZE);\n+            NavigableSet<Item> p = populatedSet(i);\n@@ -352,1 +352,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -354,2 +354,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -364,1 +363,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -366,1 +365,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -369,1 +368,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -382,1 +381,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -384,1 +383,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -387,1 +386,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -400,1 +399,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -402,1 +401,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -405,1 +404,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -408,1 +407,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -418,1 +417,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -420,1 +419,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -423,1 +422,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -426,1 +425,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -436,1 +435,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -448,5 +447,5 @@\n-        NavigableSet<Integer> q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -461,2 +460,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        Iterator it = q.iterator();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -466,1 +465,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -481,6 +480,5 @@\n-        final NavigableSet q = set0();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n-\n-        Iterator it = q.iterator();\n+        final NavigableSet<Item> q = set0();\n+        mustAdd(q, two);\n+        mustAdd(q, one);\n+        mustAdd(q, three);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -491,2 +489,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -500,1 +498,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -511,2 +509,2 @@\n-        NavigableSet x = populatedSet(SIZE);\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = populatedSet(SIZE);\n+        NavigableSet<Item> y = serialClone(x);\n@@ -515,3 +513,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -520,1 +518,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -529,16 +527,15 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.subSet(two, four);\n-        assertEquals(two, sm.first());\n-        assertEquals(three, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, four);\n+        mustEqual(two, sm.first());\n+        mustEqual(three, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -546,1 +543,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -549,6 +546,6 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.first());\n-        assertEquals(three, sm.last());\n-        assertTrue(sm.remove(three));\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.first());\n+        mustEqual(three, sm.last());\n+        mustRemove(sm, three);\n@@ -556,1 +553,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -560,14 +557,13 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.subSet(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.first());\n-        assertEquals(two, sm.last());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertFalse(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.first());\n+        mustEqual(two, sm.last());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustNotContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n@@ -575,1 +571,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -578,3 +574,3 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -583,1 +579,1 @@\n-        assertEquals(4, set.size());\n+        mustEqual(4, set.size());\n@@ -590,15 +586,14 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.headSet(four);\n-        assertTrue(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.headSet(four);\n+        mustContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(one, k);\n+        k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -608,2 +603,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(four, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(four, set.first());\n@@ -616,2 +611,7 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.tailSet(two);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.tailSet(two);\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustContain(sm, four);\n+        mustContain(sm, five);\n@@ -623,10 +623,9 @@\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -635,7 +634,7 @@\n-        SortedSet ssm = sm.tailSet(four);\n-        assertEquals(four, ssm.first());\n-        assertEquals(five, ssm.last());\n-        assertTrue(ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(four);\n+        mustEqual(four, ssm.first());\n+        mustEqual(five, ssm.last());\n+        mustRemove(ssm, four);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n@@ -648,1 +647,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -650,1 +649,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -654,2 +653,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -663,1 +662,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Item> q = dset0();\n@@ -674,2 +673,2 @@\n-        NavigableSet q = dset0();\n-        assertTrue(q.add(m6));\n+        NavigableSet<Item> q = dset0();\n+        assertTrue(q.add(minusSix));\n@@ -682,3 +681,3 @@\n-        NavigableSet q = dset0();\n-        assertTrue(q.add(m6));\n-        assertFalse(q.add(m6));\n+        NavigableSet<Item> q = dset0();\n+        assertTrue(q.add(minusSix));\n+        assertFalse(q.add(minusSix));\n@@ -691,1 +690,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Object> q = new ConcurrentSkipListSet<Object>();\n@@ -703,1 +702,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Item> q = dset0();\n@@ -714,2 +713,2 @@\n-        NavigableSet q = dset0();\n-        Integer[] ints = new Integer[SIZE];\n+        NavigableSet<Item> q = dset0();\n+        Item[] items = new Item[1];\n@@ -717,1 +716,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -727,4 +726,2 @@\n-        NavigableSet q = dset0();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i + SIZE);\n+        NavigableSet<Item> q = dset0();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -732,1 +729,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -741,2 +738,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] empty = new Item[0];\n+        Item[] items = new Item[SIZE];\n@@ -744,2 +741,2 @@\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        NavigableSet q = dset0();\n+            items[i] = itemFor(SIZE - 1 - i);\n+        NavigableSet<Item> q = dset0();\n@@ -747,1 +744,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -749,1 +746,1 @@\n-            assertEquals(new Integer(i), q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -756,1 +753,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -758,1 +755,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -767,1 +764,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -769,1 +766,1 @@\n-            assertTrue(q.remove(new Integer(i)));\n+            mustRemove(q, i);\n@@ -772,2 +769,2 @@\n-            assertTrue(q.remove(new Integer(i)));\n-            assertFalse(q.remove(new Integer(i + 1)));\n+            mustRemove(q, i);\n+            mustNotRemove(q, i + 1);\n@@ -782,1 +779,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -784,1 +781,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -786,1 +783,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -794,1 +791,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -797,2 +794,2 @@\n-        assertEquals(0, q.size());\n-        q.add(new Integer(1));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -808,2 +805,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = dset0();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = dset0();\n@@ -813,1 +810,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -822,2 +819,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = populatedSet(SIZE);\n@@ -832,1 +829,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -842,2 +839,2 @@\n-            NavigableSet q = populatedSet(SIZE);\n-            NavigableSet p = populatedSet(i);\n+            NavigableSet<Item> q = populatedSet(SIZE);\n+            NavigableSet<Item> p = populatedSet(i);\n@@ -845,1 +842,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -847,2 +844,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -857,3 +853,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.lower(m3);\n-        assertEquals(m2, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.lower(minusThree);\n+        mustEqual(minusTwo, e1);\n@@ -861,2 +857,2 @@\n-        Object e2 = q.lower(m6);\n-        assertEquals(m5, e2);\n+        Object e2 = q.lower(minusSix);\n+        mustEqual(minusFive, e2);\n@@ -864,1 +860,1 @@\n-        Object e3 = q.lower(m1);\n+        Object e3 = q.lower(minusOne);\n@@ -875,3 +871,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.higher(m3);\n-        assertEquals(m4, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.higher(minusThree);\n+        mustEqual(minusFour, e1);\n@@ -880,1 +876,1 @@\n-        assertEquals(m1, e2);\n+        mustEqual(minusOne, e2);\n@@ -882,1 +878,1 @@\n-        Object e3 = q.higher(m5);\n+        Object e3 = q.higher(minusFive);\n@@ -885,1 +881,1 @@\n-        Object e4 = q.higher(m6);\n+        Object e4 = q.higher(minusSix);\n@@ -893,3 +889,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.floor(m3);\n-        assertEquals(m3, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.floor(minusThree);\n+        mustEqual(minusThree, e1);\n@@ -897,2 +893,2 @@\n-        Object e2 = q.floor(m6);\n-        assertEquals(m5, e2);\n+        Object e2 = q.floor(minusSix);\n+        mustEqual(minusFive, e2);\n@@ -900,2 +896,2 @@\n-        Object e3 = q.floor(m1);\n-        assertEquals(m1, e3);\n+        Object e3 = q.floor(minusOne);\n+        mustEqual(minusOne, e3);\n@@ -911,3 +907,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.ceiling(m3);\n-        assertEquals(m3, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.ceiling(minusThree);\n+        mustEqual(minusThree, e1);\n@@ -916,1 +912,1 @@\n-        assertEquals(m1, e2);\n+        mustEqual(minusOne, e2);\n@@ -918,2 +914,2 @@\n-        Object e3 = q.ceiling(m5);\n-        assertEquals(m5, e3);\n+        Object e3 = q.ceiling(minusFive);\n+        mustEqual(minusFive, e3);\n@@ -921,1 +917,1 @@\n-        Object e4 = q.ceiling(m6);\n+        Object e4 = q.ceiling(minusSix);\n@@ -929,1 +925,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -933,1 +929,1 @@\n-            assertEquals(o[i], q.pollFirst());\n+            mustEqual(o[i], q.pollFirst());\n@@ -940,6 +936,6 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        assertSame(ints, q.toArray(ints));\n-        Arrays.sort(ints);\n-        for (int i = 0; i < ints.length; i++)\n-            assertEquals(ints[i], q.pollFirst());\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Item[] items = new Item[SIZE];\n+        assertSame(items, q.toArray(items));\n+        Arrays.sort(items);\n+        for (int i = 0; i < items.length; i++)\n+            mustEqual(items[i], q.pollFirst());\n@@ -952,1 +948,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -954,1 +950,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -956,1 +952,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -959,1 +955,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -966,1 +962,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Item> q = dset0();\n@@ -968,1 +964,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -970,1 +966,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -973,1 +969,1 @@\n-        assertEquals(0, i);\n+        mustEqual(0, i);\n@@ -980,4 +976,4 @@\n-        final NavigableSet q = dset0();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final NavigableSet<Item> q = dset0();\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -985,1 +981,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -990,2 +986,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -999,1 +995,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -1010,2 +1006,2 @@\n-        NavigableSet x = dset5();\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = dset5();\n+        NavigableSet<Item> y = serialClone(x);\n@@ -1014,3 +1010,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -1019,1 +1015,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -1028,16 +1024,15 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.subSet(m2, m4);\n-        assertEquals(m2, sm.first());\n-        assertEquals(m3, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.subSet(minusTwo, minusFour);\n+        mustEqual(minusTwo, sm.first());\n+        mustEqual(minusThree, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n@@ -1045,1 +1040,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -1048,6 +1043,6 @@\n-        assertFalse(set.contains(m2));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(m3, sm.first());\n-        assertEquals(m3, sm.last());\n-        assertTrue(sm.remove(m3));\n+        mustNotContain(set, minusTwo);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(minusThree, sm.first());\n+        mustEqual(minusThree, sm.last());\n+        mustRemove(sm, minusThree);\n@@ -1055,1 +1050,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -1059,14 +1054,13 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.subSet(m2, m3);\n-        assertEquals(1, sm.size());\n-        assertEquals(m2, sm.first());\n-        assertEquals(m2, sm.last());\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertFalse(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.subSet(minusTwo, minusThree);\n+        mustEqual(1, sm.size());\n+        mustEqual(minusTwo, sm.first());\n+        mustEqual(minusTwo, sm.last());\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustNotContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n@@ -1074,1 +1068,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -1077,3 +1071,3 @@\n-        assertFalse(set.contains(m2));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, minusTwo);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -1081,2 +1075,2 @@\n-        assertFalse(sm.remove(m3));\n-        assertEquals(4, set.size());\n+        mustNotRemove(sm, minusThree);\n+        mustEqual(4, set.size());\n@@ -1089,15 +1083,14 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.headSet(m4);\n-        assertTrue(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m1, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.headSet(minusFour);\n+        mustContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusOne, k);\n+        k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n@@ -1107,2 +1100,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(m4, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(minusFour, set.first());\n@@ -1115,17 +1108,16 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.tailSet(m2);\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertTrue(sm.contains(m4));\n-        assertTrue(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m4, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m5, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.tailSet(minusTwo);\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustContain(sm, minusFour);\n+        mustContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n+        k = i.next();\n+        mustEqual(minusFour, k);\n+        k = i.next();\n+        mustEqual(minusFive, k);\n@@ -1134,7 +1126,7 @@\n-        SortedSet ssm = sm.tailSet(m4);\n-        assertEquals(m4, ssm.first());\n-        assertEquals(m5, ssm.last());\n-        assertTrue(ssm.remove(m4));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(minusFour);\n+        mustEqual(minusFour, ssm.first());\n+        mustEqual(minusFive, ssm.last());\n+        mustRemove(ssm, minusFour);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ConcurrentSkipListSubSetTest.java","additions":382,"deletions":390,"binary":false,"changes":772,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -64,0 +64,1 @@\n+            @SuppressWarnings(\"unchecked\")\n@@ -79,2 +80,2 @@\n-    static CopyOnWriteArrayList<Integer> populatedList(int n) {\n-        CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();\n+    static CopyOnWriteArrayList<Item> populatedList(int n) {\n+        CopyOnWriteArrayList<Item> list = new CopyOnWriteArrayList<>();\n@@ -83,3 +84,3 @@\n-            list.add(i);\n-        assertEquals(n <= 0, list.isEmpty());\n-        assertEquals(n, list.size());\n+            mustAdd(list, i);\n+        mustEqual(n <= 0, list.isEmpty());\n+        mustEqual(n, list.size());\n@@ -89,2 +90,2 @@\n-    static CopyOnWriteArrayList<Integer> populatedList(Integer[] elements) {\n-        CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();\n+    static CopyOnWriteArrayList<Item> populatedList(Item[] elements) {\n+        CopyOnWriteArrayList<Item> list = new CopyOnWriteArrayList<>();\n@@ -92,1 +93,1 @@\n-        for (Integer element : elements)\n+        for (Item element : elements)\n@@ -95,1 +96,1 @@\n-        assertEquals(elements.length, list.size());\n+        mustEqual(elements.length, list.size());\n@@ -103,1 +104,1 @@\n-        List list = new CopyOnWriteArrayList();\n+        List<Item> list = new CopyOnWriteArrayList<Item>();\n@@ -111,4 +112,2 @@\n-        Integer[] elts = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            elts[i] = i;\n-        List list = new CopyOnWriteArrayList(elts);\n+        Item[] elts = defaultItems;\n+        List<Item> list = new CopyOnWriteArrayList<Item>(elts);\n@@ -116,1 +115,1 @@\n-            assertEquals(elts[i], list.get(i));\n+            mustEqual(elts[i], list.get(i));\n@@ -123,4 +122,2 @@\n-        Integer[] elts = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            elts[i] = i;\n-        List list = new CopyOnWriteArrayList(Arrays.asList(elts));\n+        Item[] elts = defaultItems;\n+        List<Item> list = new CopyOnWriteArrayList<Item>(Arrays.asList(elts));\n@@ -128,1 +125,1 @@\n-            assertEquals(elts[i], list.get(i));\n+            mustEqual(elts[i], list.get(i));\n@@ -135,1 +132,1 @@\n-        List list = populatedList(3);\n+        List<Item> list = populatedList(3);\n@@ -137,1 +134,1 @@\n-        assertEquals(6, list.size());\n+        mustEqual(6, list.size());\n@@ -139,1 +136,1 @@\n-        assertEquals(9, list.size());\n+        mustEqual(9, list.size());\n@@ -147,1 +144,1 @@\n-        CopyOnWriteArrayList list = populatedList(3);\n+        CopyOnWriteArrayList<Item> list = populatedList(3);\n@@ -149,4 +146,4 @@\n-        assertEquals(2, list.addAllAbsent(Arrays.asList(three, four, one)));\n-        assertEquals(5, list.size());\n-        assertEquals(0, list.addAllAbsent(Arrays.asList(three, four, one)));\n-        assertEquals(5, list.size());\n+        mustEqual(2, list.addAllAbsent(Arrays.asList(three, four, one)));\n+        mustEqual(5, list.size());\n+        mustEqual(0, list.addAllAbsent(Arrays.asList(three, four, one)));\n+        mustEqual(5, list.size());\n@@ -159,1 +156,1 @@\n-        CopyOnWriteArrayList list = populatedList(SIZE);\n+        CopyOnWriteArrayList<Item> list = populatedList(SIZE);\n@@ -161,1 +158,1 @@\n-        assertEquals(SIZE, list.size());\n+        mustEqual(SIZE, list.size());\n@@ -168,1 +165,1 @@\n-        CopyOnWriteArrayList list = populatedList(SIZE);\n+        CopyOnWriteArrayList<Item> list = populatedList(SIZE);\n@@ -170,1 +167,1 @@\n-        assertTrue(list.contains(three));\n+        mustContain(list, three);\n@@ -177,1 +174,1 @@\n-        List list = populatedList(SIZE);\n+        List<Item> list = populatedList(SIZE);\n@@ -179,1 +176,1 @@\n-        assertEquals(0, list.size());\n+        mustEqual(0, list.size());\n@@ -186,3 +183,4 @@\n-        CopyOnWriteArrayList l1 = populatedList(SIZE);\n-        CopyOnWriteArrayList l2 = (CopyOnWriteArrayList)(l1.clone());\n-        assertEquals(l1, l2);\n+        CopyOnWriteArrayList<Item> l1 = populatedList(SIZE);\n+        @SuppressWarnings(\"unchecked\")\n+        CopyOnWriteArrayList<Item> l2 = (CopyOnWriteArrayList<Item>)(l1.clone());\n+        mustEqual(l1, l2);\n@@ -197,3 +195,3 @@\n-        List list = populatedList(3);\n-        assertTrue(list.contains(one));\n-        assertFalse(list.contains(five));\n+        List<Item> list = populatedList(3);\n+        mustContain(list, one);\n+        mustNotContain(list, five);\n@@ -206,5 +204,5 @@\n-        List list = populatedList(3);\n-        list.add(0, m1);\n-        assertEquals(4, list.size());\n-        assertEquals(m1, list.get(0));\n-        assertEquals(zero, list.get(1));\n+        List<Item> list = populatedList(3);\n+        list.add(0, minusOne);\n+        mustEqual(4, list.size());\n+        mustEqual(minusOne, list.get(0));\n+        mustEqual(zero, list.get(1));\n@@ -212,4 +210,4 @@\n-        list.add(2, m2);\n-        assertEquals(5, list.size());\n-        assertEquals(m2, list.get(2));\n-        assertEquals(two, list.get(4));\n+        list.add(2, minusTwo);\n+        mustEqual(5, list.size());\n+        mustEqual(minusTwo, list.get(2));\n+        mustEqual(two, list.get(4));\n@@ -222,2 +220,2 @@\n-        List a = populatedList(3);\n-        List b = populatedList(3);\n+        List<Item> a = populatedList(3);\n+        List<Item> b = populatedList(3);\n@@ -228,2 +226,2 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n-        a.add(m1);\n+        mustEqual(a.hashCode(), b.hashCode());\n+        a.add(minusOne);\n@@ -234,1 +232,1 @@\n-        b.add(m1);\n+        b.add(minusOne);\n@@ -239,1 +237,1 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n+        mustEqual(a.hashCode(), b.hashCode());\n@@ -248,1 +246,1 @@\n-        List list = populatedList(3);\n+        List<Item> list = populatedList(3);\n@@ -265,2 +263,2 @@\n-        List list = populatedList(3);\n-        assertEquals(0, list.get(0));\n+        List<Item> list = populatedList(3);\n+        mustEqual(0, list.get(0));\n@@ -275,2 +273,2 @@\n-        List list = populatedList(3);\n-        assertEquals(-1, list.indexOf(-42));\n+        List<Item> list = populatedList(3);\n+        mustEqual(-1, list.indexOf(minusTen));\n@@ -279,6 +277,7 @@\n-            assertEquals(i, list.indexOf(i));\n-            assertEquals(i, list.subList(0, size).indexOf(i));\n-            assertEquals(i, list.subList(0, i + 1).indexOf(i));\n-            assertEquals(-1, list.subList(0, i).indexOf(i));\n-            assertEquals(0, list.subList(i, size).indexOf(i));\n-            assertEquals(-1, list.subList(i + 1, size).indexOf(i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.indexOf(I));\n+            mustEqual(i, list.subList(0, size).indexOf(I));\n+            mustEqual(i, list.subList(0, i + 1).indexOf(I));\n+            mustEqual(-1, list.subList(0, i).indexOf(I));\n+            mustEqual(0, list.subList(i, size).indexOf(I));\n+            mustEqual(-1, list.subList(i + 1, size).indexOf(I));\n@@ -287,7 +286,7 @@\n-        list.add(1);\n-        assertEquals(1, list.indexOf(1));\n-        assertEquals(1, list.subList(0, size + 1).indexOf(1));\n-        assertEquals(0, list.subList(1, size + 1).indexOf(1));\n-        assertEquals(size - 2, list.subList(2, size + 1).indexOf(1));\n-        assertEquals(0, list.subList(size, size + 1).indexOf(1));\n-        assertEquals(-1, list.subList(size + 1, size + 1).indexOf(1));\n+        list.add(one);\n+        mustEqual(1, list.indexOf(one));\n+        mustEqual(1, list.subList(0, size + 1).indexOf(one));\n+        mustEqual(0, list.subList(1, size + 1).indexOf(one));\n+        mustEqual(size - 2, list.subList(2, size + 1).indexOf(one));\n+        mustEqual(0, list.subList(size, size + 1).indexOf(one));\n+        mustEqual(-1, list.subList(size + 1, size + 1).indexOf(one));\n@@ -302,1 +301,1 @@\n-        CopyOnWriteArrayList list = populatedList(3);\n+        CopyOnWriteArrayList<Item> list = populatedList(3);\n@@ -304,1 +303,1 @@\n-        assertEquals(-1, list.indexOf(-42, 0));\n+        mustEqual(-1, list.indexOf(minusTen, 0));\n@@ -307,2 +306,2 @@\n-        assertEquals(-1, list.indexOf(0, size));\n-        assertEquals(-1, list.indexOf(0, Integer.MAX_VALUE));\n+        mustEqual(-1, list.indexOf(zero, size));\n+        mustEqual(-1, list.indexOf(zero, Integer.MAX_VALUE));\n@@ -312,2 +311,2 @@\n-            () -> list.indexOf(0, -1),\n-            () -> list.indexOf(0, Integer.MIN_VALUE));\n+            () -> list.indexOf(zero, -1),\n+            () -> list.indexOf(zero, Integer.MIN_VALUE));\n@@ -316,3 +315,4 @@\n-            assertEquals(i, list.indexOf(i, 0));\n-            assertEquals(i, list.indexOf(i, i));\n-            assertEquals(-1, list.indexOf(i, i + 1));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.indexOf(I, 0));\n+            mustEqual(i, list.indexOf(I, i));\n+            mustEqual(-1, list.indexOf(I, i + 1));\n@@ -321,5 +321,5 @@\n-        list.add(1);\n-        assertEquals(1, list.indexOf(1, 0));\n-        assertEquals(1, list.indexOf(1, 1));\n-        assertEquals(size, list.indexOf(1, 2));\n-        assertEquals(size, list.indexOf(1, size));\n+        list.add(one);\n+        mustEqual(1, list.indexOf(one, 0));\n+        mustEqual(1, list.indexOf(one, 1));\n+        mustEqual(size, list.indexOf(one, 2));\n+        mustEqual(size, list.indexOf(one, size));\n@@ -332,1 +332,1 @@\n-        List empty = new CopyOnWriteArrayList();\n+        List<Item> empty = new CopyOnWriteArrayList<Item>();\n@@ -336,1 +336,1 @@\n-        List full = populatedList(SIZE);\n+        List<Item> full = populatedList(SIZE);\n@@ -347,1 +347,1 @@\n-        Collection empty = new CopyOnWriteArrayList();\n+        Collection<Item> empty = new CopyOnWriteArrayList<Item>();\n@@ -354,3 +354,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -358,1 +356,1 @@\n-        Collection<Integer> full = populatedList(elements);\n+        Collection<Item> full = populatedList(elements);\n@@ -360,1 +358,1 @@\n-        Iterator it = full.iterator();\n+        Iterator<? extends Item> it = full.iterator();\n@@ -363,1 +361,1 @@\n-            assertEquals(elements[j], it.next());\n+            mustEqual(elements[j], it.next());\n@@ -372,1 +370,1 @@\n-        Collection c = new CopyOnWriteArrayList();\n+        Collection<Item> c = new CopyOnWriteArrayList<Item>();\n@@ -380,2 +378,2 @@\n-        CopyOnWriteArrayList list = populatedList(SIZE);\n-        Iterator it = list.iterator();\n+        CopyOnWriteArrayList<Item> list = populatedList(SIZE);\n+        Iterator<? extends Item> it = list.iterator();\n@@ -393,2 +391,2 @@\n-        assertEquals(\"[]\", new CopyOnWriteArrayList().toString());\n-        List list = populatedList(3);\n+        mustEqual(\"[]\", new CopyOnWriteArrayList<Item>().toString());\n+        List<Item> list = populatedList(3);\n@@ -398,1 +396,1 @@\n-        assertEquals(new ArrayList(list).toString(),\n+        mustEqual(new ArrayList<Item>(list).toString(),\n@@ -408,2 +406,2 @@\n-        List list = populatedList(3);\n-        assertEquals(-1, list.lastIndexOf(-42));\n+        List<Item> list = populatedList(3);\n+        mustEqual(-1, list.lastIndexOf(itemFor(-42)));\n@@ -412,6 +410,7 @@\n-            assertEquals(i, list.lastIndexOf(i));\n-            assertEquals(i, list.subList(0, size).lastIndexOf(i));\n-            assertEquals(i, list.subList(0, i + 1).lastIndexOf(i));\n-            assertEquals(-1, list.subList(0, i).lastIndexOf(i));\n-            assertEquals(0, list.subList(i, size).lastIndexOf(i));\n-            assertEquals(-1, list.subList(i + 1, size).lastIndexOf(i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.lastIndexOf(I));\n+            mustEqual(i, list.subList(0, size).lastIndexOf(I));\n+            mustEqual(i, list.subList(0, i + 1).lastIndexOf(I));\n+            mustEqual(-1, list.subList(0, i).lastIndexOf(I));\n+            mustEqual(0, list.subList(i, size).lastIndexOf(I));\n+            mustEqual(-1, list.subList(i + 1, size).lastIndexOf(I));\n@@ -420,6 +419,6 @@\n-        list.add(1);\n-        assertEquals(size, list.lastIndexOf(1));\n-        assertEquals(size, list.subList(0, size + 1).lastIndexOf(1));\n-        assertEquals(1, list.subList(0, size).lastIndexOf(1));\n-        assertEquals(0, list.subList(1, 2).lastIndexOf(1));\n-        assertEquals(-1, list.subList(0, 1).indexOf(1));\n+        list.add(one);\n+        mustEqual(size, list.lastIndexOf(one));\n+        mustEqual(size, list.subList(0, size + 1).lastIndexOf(one));\n+        mustEqual(1, list.subList(0, size).lastIndexOf(one));\n+        mustEqual(0, list.subList(1, 2).lastIndexOf(one));\n+        mustEqual(-1, list.subList(0, 1).indexOf(one));\n@@ -434,1 +433,1 @@\n-        CopyOnWriteArrayList list = populatedList(3);\n+        CopyOnWriteArrayList<Item> list = populatedList(3);\n@@ -437,1 +436,1 @@\n-        assertEquals(-1, list.lastIndexOf(0, -1));\n+        mustEqual(-1, list.lastIndexOf(zero, -1));\n@@ -442,2 +441,2 @@\n-            () -> list.lastIndexOf(0, size),\n-            () -> list.lastIndexOf(0, Integer.MAX_VALUE));\n+            () -> list.lastIndexOf(zero, size),\n+            () -> list.lastIndexOf(zero, Integer.MAX_VALUE));\n@@ -446,2 +445,3 @@\n-            assertEquals(i, list.lastIndexOf(i, i));\n-            assertEquals(list.indexOf(i), list.lastIndexOf(i, i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.lastIndexOf(I, i));\n+            mustEqual(list.indexOf(I), list.lastIndexOf(I, i));\n@@ -449,1 +449,1 @@\n-                assertEquals(-1, list.lastIndexOf(i, i - 1));\n+                mustEqual(-1, list.lastIndexOf(I, i - 1));\n@@ -453,5 +453,5 @@\n-        assertEquals(1, list.lastIndexOf(one, 1));\n-        assertEquals(1, list.lastIndexOf(one, 2));\n-        assertEquals(3, list.lastIndexOf(one, 3));\n-        assertEquals(3, list.lastIndexOf(one, 4));\n-        assertEquals(-1, list.lastIndexOf(three, 3));\n+        mustEqual(1, list.lastIndexOf(one, 1));\n+        mustEqual(1, list.lastIndexOf(one, 2));\n+        mustEqual(3, list.lastIndexOf(one, 3));\n+        mustEqual(3, list.lastIndexOf(one, 4));\n+        mustEqual(-1, list.lastIndexOf(three, 3));\n@@ -464,2 +464,2 @@\n-        List list = populatedList(SIZE);\n-        ListIterator i = list.listIterator();\n+        List<Item> list = populatedList(SIZE);\n+        ListIterator<? extends Item> i = list.listIterator();\n@@ -468,2 +468,2 @@\n-            assertEquals(j, i.next());\n-        assertEquals(SIZE, j);\n+            mustEqual(j, i.next());\n+        mustEqual(SIZE, j);\n@@ -476,2 +476,2 @@\n-        List list = populatedList(3);\n-        ListIterator i = list.listIterator(1);\n+        List<Item> list = populatedList(3);\n+        ListIterator<? extends Item> i = list.listIterator(1);\n@@ -480,2 +480,2 @@\n-            assertEquals(j + 1, i.next());\n-        assertEquals(2, j);\n+            mustEqual(j + 1, i.next());\n+        mustEqual(2, j);\n@@ -490,4 +490,4 @@\n-            List list = populatedList(SIZE);\n-            assertEquals(i, list.remove(i));\n-            assertEquals(SIZE - 1, list.size());\n-            assertFalse(list.contains(new Integer(i)));\n+            List<Item> list = populatedList(SIZE);\n+            mustEqual(i, list.remove(i));\n+            mustEqual(SIZE - 1, list.size());\n+            mustNotContain(list, i);\n@@ -503,5 +503,5 @@\n-            List list = populatedList(SIZE);\n-            assertFalse(list.remove(new Integer(-42)));\n-            assertTrue(list.remove(new Integer(i)));\n-            assertEquals(SIZE - 1, list.size());\n-            assertFalse(list.contains(new Integer(i)));\n+            List<Item> list = populatedList(SIZE);\n+            mustNotRemove(list, fortytwo);\n+            mustRemove(list, i);\n+            mustEqual(SIZE - 1, list.size());\n+            mustNotContain(list, i);\n@@ -509,8 +509,8 @@\n-        CopyOnWriteArrayList x = new CopyOnWriteArrayList(Arrays.asList(4, 5, 6));\n-        assertTrue(x.remove(new Integer(6)));\n-        assertEquals(x, Arrays.asList(4, 5));\n-        assertTrue(x.remove(new Integer(4)));\n-        assertEquals(x, Arrays.asList(5));\n-        assertTrue(x.remove(new Integer(5)));\n-        assertEquals(x, Arrays.asList());\n-        assertFalse(x.remove(new Integer(5)));\n+        CopyOnWriteArrayList<Item> x = new CopyOnWriteArrayList<Item>(Arrays.asList(four, five, six));\n+        mustRemove(x, six);\n+        mustEqual(x, Arrays.asList(four, five));\n+        mustRemove(x, four);\n+        mustEqual(x, Arrays.asList(five));\n+        mustRemove(x, five);\n+        mustEqual(x, Arrays.asList());\n+        mustNotRemove(x, five);\n@@ -523,1 +523,1 @@\n-        List list = populatedList(3);\n+        List<Item> list = populatedList(3);\n@@ -525,1 +525,1 @@\n-        assertEquals(1, list.size());\n+        mustEqual(1, list.size());\n@@ -527,1 +527,1 @@\n-        assertEquals(1, list.size());\n+        mustEqual(1, list.size());\n@@ -534,3 +534,3 @@\n-        List list = populatedList(3);\n-        assertEquals(2, list.set(2, four));\n-        assertEquals(4, list.get(2));\n+        List<Item> list = populatedList(3);\n+        mustEqual(2, list.set(2, four));\n+        mustEqual(4, list.get(2));\n@@ -543,3 +543,3 @@\n-        List empty = new CopyOnWriteArrayList();\n-        assertEquals(0, empty.size());\n-        assertEquals(0, empty.subList(0, 0).size());\n+        List<Item> empty = new CopyOnWriteArrayList<Item>();\n+        mustEqual(0, empty.size());\n+        mustEqual(0, empty.subList(0, 0).size());\n@@ -547,4 +547,4 @@\n-        List full = populatedList(SIZE);\n-        assertEquals(SIZE, full.size());\n-        assertEquals(0, full.subList(0, 0).size());\n-        assertEquals(0, full.subList(SIZE, SIZE).size());\n+        List<Item> full = populatedList(SIZE);\n+        mustEqual(SIZE, full.size());\n+        mustEqual(0, full.subList(0, 0).size());\n+        mustEqual(0, full.subList(SIZE, SIZE).size());\n@@ -558,1 +558,1 @@\n-        Object[] a = new CopyOnWriteArrayList().toArray();\n+        Object[] a = new CopyOnWriteArrayList<Item>().toArray();\n@@ -562,3 +562,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -566,1 +564,1 @@\n-        Collection<Integer> full = populatedList(elements);\n+        Collection<Item> full = populatedList(elements);\n@@ -573,1 +571,1 @@\n-     * toArray(Integer array) returns an Integer array containing all\n+     * toArray(Item array) returns an Item array containing all\n@@ -577,2 +575,2 @@\n-        Collection empty = new CopyOnWriteArrayList();\n-        Integer[] a;\n+        Collection<Item> empty = new CopyOnWriteArrayList<Item>();\n+        Item[] a;\n@@ -580,1 +578,1 @@\n-        a = new Integer[0];\n+        a = new Item[0];\n@@ -583,2 +581,2 @@\n-        a = new Integer[SIZE \/ 2];\n-        Arrays.fill(a, 42);\n+        a = new Item[SIZE \/ 2];\n+        Arrays.fill(a, fortytwo);\n@@ -588,1 +586,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -590,3 +588,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -594,1 +590,1 @@\n-        Collection<Integer> full = populatedList(elements);\n+        Collection<Item> full = populatedList(elements);\n@@ -596,1 +592,1 @@\n-        Arrays.fill(a, 42);\n+        Arrays.fill(a, fortytwo);\n@@ -599,2 +595,2 @@\n-            assertEquals(42, (int) a[i]);\n-        assertSame(Integer[].class, full.toArray(a).getClass());\n+            mustEqual(42, a[i]);\n+        assertSame(Item[].class, full.toArray(a).getClass());\n@@ -602,2 +598,2 @@\n-        a = new Integer[SIZE];\n-        Arrays.fill(a, 42);\n+        a = new Item[SIZE];\n+        Arrays.fill(a, fortytwo);\n@@ -607,2 +603,2 @@\n-        a = new Integer[2 * SIZE];\n-        Arrays.fill(a, 42);\n+        a = new Item[2 * SIZE];\n+        Arrays.fill(a, fortytwo);\n@@ -613,1 +609,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -620,1 +616,1 @@\n-        List a = populatedList(10);\n+        List<Item> a = populatedList(10);\n@@ -624,1 +620,1 @@\n-                List b = a.subList(j,i);\n+                List<Item> b = a.subList(j,i);\n@@ -626,1 +622,1 @@\n-                    assertEquals(new Integer(k), b.get(k-j));\n+                    mustEqual(itemFor(k), b.get(k-j));\n@@ -631,4 +627,4 @@\n-        List s = a.subList(2, 5);\n-        assertEquals(3, s.size());\n-        s.set(2, m1);\n-        assertEquals(a.get(4), m1);\n+        List<Item> s = a.subList(2, 5);\n+        mustEqual(3, s.size());\n+        s.set(2, minusOne);\n+        mustEqual(a.get(4), minusOne);\n@@ -636,1 +632,1 @@\n-        assertEquals(7, a.size());\n+        mustEqual(7, a.size());\n@@ -641,1 +637,1 @@\n-            () -> s.set(0, 42));\n+            () -> s.set(0, fortytwo));\n@@ -651,4 +647,4 @@\n-        List list = new CopyOnWriteArrayList();\n-        \/\/ Integers are not auto-converted to Longs\n-        list.add(86);\n-        list.add(99);\n+        List<Item> list = new CopyOnWriteArrayList<Item>();\n+        \/\/ Items are not auto-converted to Longs\n+        list.add(eightysix);\n+        list.add(ninetynine);\n@@ -661,0 +657,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -700,1 +697,1 @@\n-        List x = populatedList(rnd.nextInt(5));\n+        List<Item> x = populatedList(rnd.nextInt(5));\n@@ -708,1 +705,1 @@\n-        List subList = x.subList(start, end);\n+        List<Item> subList = x.subList(start, end);\n@@ -716,2 +713,2 @@\n-        List x = populatedList(SIZE);\n-        List y = serialClone(x);\n+        List<Item> x = populatedList(SIZE);\n+        List<Item> y = serialClone(x);\n@@ -720,2 +717,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -723,2 +720,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -727,1 +724,1 @@\n-            assertEquals(x.remove(0), y.remove(0));\n+            mustEqual(x.remove(0), y.remove(0));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CopyOnWriteArrayListTest.java","additions":210,"deletions":213,"binary":false,"changes":423,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -63,2 +63,2 @@\n-    static CopyOnWriteArraySet<Integer> populatedSet(int n) {\n-        CopyOnWriteArraySet<Integer> a = new CopyOnWriteArraySet<>();\n+    static CopyOnWriteArraySet<Item> populatedSet(int n) {\n+        CopyOnWriteArraySet<Item> a = new CopyOnWriteArraySet<>();\n@@ -67,3 +67,3 @@\n-            a.add(i);\n-        assertEquals(n == 0, a.isEmpty());\n-        assertEquals(n, a.size());\n+            mustAdd(a, i);\n+        mustEqual(n == 0, a.isEmpty());\n+        mustEqual(n, a.size());\n@@ -73,2 +73,2 @@\n-    static CopyOnWriteArraySet populatedSet(Integer[] elements) {\n-        CopyOnWriteArraySet<Integer> a = new CopyOnWriteArraySet<>();\n+    static CopyOnWriteArraySet<Item> populatedSet(Item[] elements) {\n+        CopyOnWriteArraySet<Item> a = new CopyOnWriteArraySet<>();\n@@ -77,1 +77,1 @@\n-            a.add(elements[i]);\n+            mustAdd(a, elements[i]);\n@@ -79,1 +79,1 @@\n-        assertEquals(elements.length, a.size());\n+        mustEqual(elements.length, a.size());\n@@ -87,1 +87,1 @@\n-        CopyOnWriteArraySet a = new CopyOnWriteArraySet();\n+        CopyOnWriteArraySet<Item> a = new CopyOnWriteArraySet<Item>();\n@@ -95,4 +95,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n-        CopyOnWriteArraySet a = new CopyOnWriteArraySet(Arrays.asList(ints));\n+        Item[] items = defaultItems;\n+        CopyOnWriteArraySet<Item> a = new CopyOnWriteArraySet<Item>(Arrays.asList(items));\n@@ -100,1 +98,1 @@\n-            assertTrue(a.contains(ints[i]));\n+            mustContain(a, i);\n@@ -107,1 +105,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -109,1 +107,1 @@\n-        assertEquals(6, full.size());\n+        mustEqual(6, full.size());\n@@ -111,1 +109,1 @@\n-        assertEquals(6, full.size());\n+        mustEqual(6, full.size());\n@@ -118,1 +116,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -121,1 +119,1 @@\n-        assertEquals(5, full.size());\n+        mustEqual(5, full.size());\n@@ -123,1 +121,1 @@\n-        assertEquals(5, full.size());\n+        mustEqual(5, full.size());\n@@ -130,1 +128,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -132,1 +130,1 @@\n-        assertEquals(3, full.size());\n+        mustEqual(3, full.size());\n@@ -139,1 +137,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -141,1 +139,1 @@\n-        assertTrue(full.contains(three));\n+        mustContain(full, three);\n@@ -148,1 +146,1 @@\n-        Collection full = populatedSet(3);\n+        Collection<Item> full = populatedSet(3);\n@@ -150,1 +148,1 @@\n-        assertEquals(0, full.size());\n+        mustEqual(0, full.size());\n@@ -158,3 +156,3 @@\n-        Collection full = populatedSet(3);\n-        assertTrue(full.contains(one));\n-        assertFalse(full.contains(five));\n+        Collection<Item> full = populatedSet(3);\n+        mustContain(full, one);\n+        mustNotContain(full, five);\n@@ -167,2 +165,2 @@\n-        CopyOnWriteArraySet a = populatedSet(3);\n-        CopyOnWriteArraySet b = populatedSet(3);\n+        CopyOnWriteArraySet<Item> a = populatedSet(3);\n+        CopyOnWriteArraySet<Item> b = populatedSet(3);\n@@ -173,2 +171,2 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n-        assertEquals(a.size(), b.size());\n+        mustEqual(a.hashCode(), b.hashCode());\n+        mustEqual(a.size(), b.size());\n@@ -176,1 +174,1 @@\n-        a.add(m1);\n+        a.add(minusOne);\n@@ -181,1 +179,1 @@\n-        b.add(m1);\n+        b.add(minusOne);\n@@ -186,1 +184,1 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n+        mustEqual(a.hashCode(), b.hashCode());\n@@ -188,1 +186,1 @@\n-        Object x = a.iterator().next();\n+        Item x = a.iterator().next();\n@@ -199,2 +197,2 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n-        assertEquals(a.size(), b.size());\n+        mustEqual(a.hashCode(), b.hashCode());\n+        mustEqual(a.size(), b.size());\n@@ -202,2 +200,2 @@\n-        CopyOnWriteArraySet empty1 = new CopyOnWriteArraySet(Arrays.asList());\n-        CopyOnWriteArraySet empty2 = new CopyOnWriteArraySet(Arrays.asList());\n+        CopyOnWriteArraySet<Item> empty1 = new CopyOnWriteArraySet<Item>(Arrays.asList());\n+        CopyOnWriteArraySet<Item> empty2 = new CopyOnWriteArraySet<Item>(Arrays.asList());\n@@ -217,1 +215,1 @@\n-        Collection full = populatedSet(3);\n+        Collection<Item> full = populatedSet(3);\n@@ -225,2 +223,2 @@\n-        CopyOnWriteArraySet empty1 = new CopyOnWriteArraySet(Arrays.asList());\n-        CopyOnWriteArraySet empty2 = new CopyOnWriteArraySet(Arrays.asList());\n+        CopyOnWriteArraySet<Item> empty1 = new CopyOnWriteArraySet<Item>(Arrays.asList());\n+        CopyOnWriteArraySet<Item> empty2 = new CopyOnWriteArraySet<Item>(Arrays.asList());\n@@ -251,1 +249,1 @@\n-        Collection empty = new CopyOnWriteArraySet();\n+        Collection<Item> empty = new CopyOnWriteArraySet<Item>();\n@@ -258,3 +256,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -262,1 +258,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -264,1 +260,1 @@\n-        Iterator it = full.iterator();\n+        Iterator<? extends Item> it = full.iterator();\n@@ -267,1 +263,1 @@\n-            assertEquals(elements[j], it.next());\n+            mustEqual(elements[j], it.next());\n@@ -276,1 +272,1 @@\n-        assertIteratorExhausted(new CopyOnWriteArraySet().iterator());\n+        assertIteratorExhausted(new CopyOnWriteArraySet<Item>().iterator());\n@@ -283,2 +279,2 @@\n-        Collection full = populatedSet(3);\n-        Iterator it = full.iterator();\n+        Collection<Item> full = populatedSet(3);\n+        Iterator<? extends Item> it = full.iterator();\n@@ -296,2 +292,2 @@\n-        assertEquals(\"[]\", new CopyOnWriteArraySet().toString());\n-        Collection full = populatedSet(3);\n+        mustEqual(\"[]\", new CopyOnWriteArraySet<Item>().toString());\n+        Collection<Item> full = populatedSet(3);\n@@ -301,1 +297,1 @@\n-        assertEquals(new ArrayList(full).toString(),\n+        mustEqual(new ArrayList<Item>(full).toString(),\n@@ -309,1 +305,1 @@\n-        Set full = populatedSet(3);\n+        Set<Item> full = populatedSet(3);\n@@ -311,1 +307,1 @@\n-        assertEquals(1, full.size());\n+        mustEqual(1, full.size());\n@@ -313,1 +309,1 @@\n-        assertEquals(1, full.size());\n+        mustEqual(1, full.size());\n@@ -320,1 +316,1 @@\n-        Collection full = populatedSet(3);\n+        Collection<Item> full = populatedSet(3);\n@@ -322,2 +318,2 @@\n-        assertFalse(full.contains(one));\n-        assertEquals(2, full.size());\n+        mustNotContain(full, one);\n+        mustEqual(2, full.size());\n@@ -330,4 +326,4 @@\n-        Collection empty = new CopyOnWriteArraySet();\n-        Collection full = populatedSet(3);\n-        assertEquals(3, full.size());\n-        assertEquals(0, empty.size());\n+        Collection<Item> empty = new CopyOnWriteArraySet<Item>();\n+        Collection<Item> full = populatedSet(3);\n+        mustEqual(3, full.size());\n+        mustEqual(0, empty.size());\n@@ -341,1 +337,1 @@\n-        Object[] a = new CopyOnWriteArraySet().toArray();\n+        Object[] a = new CopyOnWriteArraySet<Item>().toArray();\n@@ -345,3 +341,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -349,1 +343,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -356,1 +350,1 @@\n-     * toArray(Integer array) returns an Integer array containing all\n+     * toArray(Item array) returns an Item array containing all\n@@ -360,2 +354,2 @@\n-        Collection empty = new CopyOnWriteArraySet();\n-        Integer[] a;\n+        Collection<Item> empty = new CopyOnWriteArraySet<Item>();\n+        Item[] a;\n@@ -363,1 +357,1 @@\n-        a = new Integer[0];\n+        a = new Item[0];\n@@ -366,2 +360,2 @@\n-        a = new Integer[SIZE \/ 2];\n-        Arrays.fill(a, 42);\n+        a = new Item[SIZE \/ 2];\n+        Arrays.fill(a, fortytwo);\n@@ -371,1 +365,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -373,3 +367,1 @@\n-        Integer[] elements = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; i++)\n-            elements[i] = i;\n+        Item[] elements = seqItems(SIZE);\n@@ -377,1 +369,1 @@\n-        Collection<Integer> full = populatedSet(elements);\n+        Collection<Item> full = populatedSet(elements);\n@@ -379,1 +371,1 @@\n-        Arrays.fill(a, 42);\n+        Arrays.fill(a, fortytwo);\n@@ -382,2 +374,2 @@\n-            assertEquals(42, (int) a[i]);\n-        assertSame(Integer[].class, full.toArray(a).getClass());\n+            mustEqual(42, a[i]);\n+        assertSame(Item[].class, full.toArray(a).getClass());\n@@ -385,2 +377,2 @@\n-        a = new Integer[SIZE];\n-        Arrays.fill(a, 42);\n+        a = new Item[SIZE];\n+        Arrays.fill(a, fortytwo);\n@@ -390,2 +382,2 @@\n-        a = new Integer[2 * SIZE];\n-        Arrays.fill(a, 42);\n+        a = new Item[2 * SIZE];\n+        Arrays.fill(a, fortytwo);\n@@ -396,1 +388,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -404,3 +396,3 @@\n-        CopyOnWriteArraySet c = new CopyOnWriteArraySet();\n-        c.add(\"zfasdfsdf\");\n-        c.add(\"asdadasd\");\n+        CopyOnWriteArraySet<Item> c = new CopyOnWriteArraySet<Item>();\n+        c.add(one);\n+        c.add(two);\n@@ -417,2 +409,2 @@\n-        Set x = populatedSet(SIZE);\n-        Set y = serialClone(x);\n+        Set<Item> x = populatedSet(SIZE);\n+        Set<Item> y = serialClone(x);\n@@ -421,2 +413,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -424,2 +416,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -432,2 +424,2 @@\n-        Set x = populatedSet(SIZE);\n-        Set y = new CopyOnWriteArraySet(x);\n+        Set<Item> x = populatedSet(SIZE);\n+        Set<Item> y = new CopyOnWriteArraySet<Item>(x);\n@@ -435,2 +427,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CopyOnWriteArraySetTest.java","additions":98,"deletions":106,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    private void testInvokeOnPool(ForkJoinPool pool, ForkJoinTask a) {\n+    private void testInvokeOnPool(ForkJoinPool pool, ForkJoinTask<?> a) {\n@@ -97,1 +97,1 @@\n-    void checkNotDone(CountedCompleter a) {\n+    void checkNotDone(CountedCompleter<?> a) {\n@@ -148,1 +148,1 @@\n-    void checkCancelled(CountedCompleter a) {\n+    void checkCancelled(CountedCompleter<?> a) {\n@@ -185,1 +185,1 @@\n-    void checkCompletedAbnormally(CountedCompleter a, Throwable t) {\n+    void checkCompletedAbnormally(CountedCompleter<?> a, Throwable t) {\n@@ -248,2 +248,2 @@\n-        CheckedCC(CountedCompleter p) { super(p); }\n-        CheckedCC(CountedCompleter p, int n) { super(p, n); }\n+        CheckedCC(CountedCompleter<?> p) { super(p); }\n+        CheckedCC(CountedCompleter<?> p, int n) { super(p, n); }\n@@ -255,1 +255,1 @@\n-        public void onCompletion(CountedCompleter caller) {\n+        public void onCompletion(CountedCompleter<?> caller) {\n@@ -260,1 +260,1 @@\n-                                               CountedCompleter caller) {\n+                                               CountedCompleter<?> caller) {\n@@ -308,2 +308,2 @@\n-        NoopCC(CountedCompleter p) { super(p); }\n-        NoopCC(CountedCompleter p, int initialPendingCount) {\n+        NoopCC(CountedCompleter<?> p) { super(p); }\n+        NoopCC(CountedCompleter<?> p, int initialPendingCount) {\n@@ -430,1 +430,1 @@\n-        CountedCompleter b = new NoopCC(a);\n+        NoopCC b = new NoopCC(a);\n@@ -432,1 +432,1 @@\n-        CountedCompleter c = new NoopCC(b);\n+        NoopCC c = new NoopCC(b);\n@@ -555,1 +555,1 @@\n-        public CCF(CountedCompleter parent, int n) {\n+        public CCF(CountedCompleter<?> parent, int n) {\n@@ -573,1 +573,1 @@\n-        public LCCF(CountedCompleter parent, int n) {\n+        public LCCF(CountedCompleter<?> parent, int n) {\n@@ -576,1 +576,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -587,1 +587,1 @@\n-        public RCCF(CountedCompleter parent, int n) {\n+        public RCCF(CountedCompleter<?> parent, int n) {\n@@ -590,1 +590,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -606,1 +606,1 @@\n-        public FailingCCF(CountedCompleter parent, int n) {\n+        public FailingCCF(CountedCompleter<?> parent, int n) {\n@@ -624,1 +624,1 @@\n-        public LFCCF(CountedCompleter parent, int n) {\n+        public LFCCF(CountedCompleter<?> parent, int n) {\n@@ -627,1 +627,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -638,1 +638,1 @@\n-        public RFCCF(CountedCompleter parent, int n) {\n+        public RFCCF(CountedCompleter<?> parent, int n) {\n@@ -641,1 +641,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -653,1 +653,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -669,1 +669,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -683,1 +683,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -698,1 +698,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -713,1 +713,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -728,1 +728,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -744,1 +744,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -760,1 +760,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -778,1 +778,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -795,1 +795,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -809,1 +809,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -827,1 +827,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -847,1 +847,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -867,1 +867,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -882,1 +882,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -900,1 +900,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -919,1 +919,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -938,1 +938,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -957,1 +957,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -973,1 +973,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -984,1 +984,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -995,1 +995,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1006,1 +1006,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1017,1 +1017,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1029,1 +1029,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1045,1 +1045,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1062,1 +1062,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1076,1 +1076,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1096,1 +1096,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1101,1 +1101,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<CCF> set = new HashSet<CCF>();\n@@ -1120,1 +1120,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1137,1 +1137,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1155,1 +1155,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1172,1 +1172,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1191,1 +1191,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1196,1 +1196,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1215,1 +1215,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1234,1 +1234,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1256,1 +1256,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1276,1 +1276,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1295,1 +1295,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1313,1 +1313,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1334,1 +1334,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1354,1 +1354,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1377,1 +1377,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1393,1 +1393,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1407,1 +1407,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1422,1 +1422,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1437,1 +1437,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1452,1 +1452,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1468,1 +1468,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1484,1 +1484,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1500,1 +1500,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1517,1 +1517,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1531,1 +1531,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1549,1 +1549,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1569,1 +1569,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1589,1 +1589,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1604,1 +1604,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1622,1 +1622,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1641,1 +1641,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1660,1 +1660,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1679,1 +1679,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1694,1 +1694,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1710,1 +1710,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1727,1 +1727,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1741,1 +1741,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1761,1 +1761,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1766,1 +1766,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1785,1 +1785,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1802,1 +1802,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1820,1 +1820,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1837,1 +1837,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1856,1 +1856,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1861,1 +1861,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CountedCompleterTest.java","additions":97,"deletions":97,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -153,3 +153,3 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-        assertEquals(n, q.size());\n-        assertEquals(new PDelay(0), q.peek());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(n, q.size());\n+        mustEqual(new PDelay(0), q.peek());\n@@ -163,1 +163,1 @@\n-        assertEquals(Integer.MAX_VALUE, new DelayQueue().remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, new DelayQueue<PDelay>().remainingCapacity());\n@@ -171,1 +171,1 @@\n-            new DelayQueue(null);\n+            new DelayQueue<PDelay>(null);\n@@ -181,1 +181,1 @@\n-            new DelayQueue(Arrays.asList(new PDelay[SIZE]));\n+            new DelayQueue<PDelay>(Arrays.asList(new PDelay[SIZE]));\n@@ -194,1 +194,1 @@\n-            new DelayQueue(Arrays.asList(a));\n+            new DelayQueue<PDelay>(Arrays.asList(a));\n@@ -203,1 +203,1 @@\n-        PDelay[] ints = new PDelay[SIZE];\n+        PDelay[] items = new PDelay[SIZE];\n@@ -205,2 +205,2 @@\n-            ints[i] = new PDelay(i);\n-        DelayQueue q = new DelayQueue(Arrays.asList(ints));\n+            items[i] = new PDelay(i);\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>(Arrays.asList(items));\n@@ -208,1 +208,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -215,1 +215,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -217,1 +217,1 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -230,1 +230,1 @@\n-        BlockingQueue q = populatedQueue(SIZE);\n+        BlockingQueue<PDelay> q = populatedQueue(SIZE);\n@@ -232,2 +232,2 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(SIZE - i, q.size());\n@@ -237,2 +237,2 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(i, q.size());\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(i, q.size());\n@@ -247,1 +247,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -256,1 +256,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -258,1 +258,1 @@\n-            assertEquals(i, q.size());\n+            mustEqual(i, q.size());\n@@ -267,1 +267,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -279,1 +279,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -294,1 +294,1 @@\n-        PDelay[] ints = new PDelay[SIZE];\n+        PDelay[] items = new PDelay[SIZE];\n@@ -296,2 +296,2 @@\n-            ints[i] = new PDelay(i);\n-        DelayQueue q = new DelayQueue();\n+            items[i] = new PDelay(i);\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -299,1 +299,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -301,1 +301,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -308,1 +308,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -314,1 +314,1 @@\n-        assertEquals(SIZE, q.size());\n+        mustEqual(SIZE, q.size());\n@@ -321,1 +321,1 @@\n-        final DelayQueue q = new DelayQueue();\n+        final DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -331,1 +331,1 @@\n-        assertEquals(4, q.size());\n+        mustEqual(4, q.size());\n@@ -338,1 +338,1 @@\n-        final DelayQueue q = new DelayQueue();\n+        final DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -354,1 +354,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -356,1 +356,1 @@\n-            assertEquals(new PDelay(i), q.take());\n+            mustEqual(new PDelay(i), q.take());\n@@ -364,1 +364,1 @@\n-        final DelayQueue q = populatedQueue(SIZE);\n+        final DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -369,1 +369,1 @@\n-                    assertEquals(new PDelay(i), ((PDelay)q.take()));\n+                    mustEqual(new PDelay(i), q.take());\n@@ -396,1 +396,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -398,1 +398,1 @@\n-            assertEquals(new PDelay(i), q.poll());\n+            mustEqual(new PDelay(i), q.poll());\n@@ -407,1 +407,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -409,1 +409,1 @@\n-            assertEquals(new PDelay(i), q.poll(0, MILLISECONDS));\n+            mustEqual(new PDelay(i), q.poll(0, MILLISECONDS));\n@@ -418,1 +418,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -421,1 +421,1 @@\n-            assertEquals(new PDelay(i), q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(new PDelay(i), q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -436,1 +436,1 @@\n-        final DelayQueue q = populatedQueue(SIZE);\n+        final DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -440,2 +440,2 @@\n-                    assertEquals(new PDelay(i),\n-                                 ((PDelay)q.poll(LONG_DELAY_MS, MILLISECONDS)));\n+                    mustEqual(new PDelay(i),\n+                              q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -469,1 +469,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -471,2 +471,2 @@\n-            assertEquals(new PDelay(i), q.peek());\n-            assertEquals(new PDelay(i), q.poll());\n+            mustEqual(new PDelay(i), q.peek());\n+            mustEqual(new PDelay(i), q.poll());\n@@ -485,1 +485,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -487,1 +487,1 @@\n-            assertEquals(new PDelay(i), q.element());\n+            mustEqual(new PDelay(i), q.element());\n@@ -500,1 +500,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -502,1 +502,1 @@\n-            assertEquals(new PDelay(i), q.remove());\n+            mustEqual(new PDelay(i), q.remove());\n@@ -514,1 +514,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -526,1 +526,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -529,2 +529,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(0, q.size());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -543,2 +543,2 @@\n-        DelayQueue q = populatedQueue(SIZE);\n-        DelayQueue p = new DelayQueue();\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> p = new DelayQueue<PDelay>();\n@@ -557,2 +557,2 @@\n-        DelayQueue q = populatedQueue(SIZE);\n-        DelayQueue p = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> p = populatedQueue(SIZE);\n@@ -567,1 +567,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -577,2 +577,2 @@\n-            DelayQueue q = populatedQueue(SIZE);\n-            DelayQueue p = populatedQueue(i);\n+            DelayQueue<PDelay> q = populatedQueue(SIZE);\n+            DelayQueue<PDelay> p = populatedQueue(i);\n@@ -580,1 +580,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -582,2 +582,1 @@\n-                PDelay x = (PDelay)(p.remove());\n-                assertFalse(q.contains(x));\n+                assertFalse(q.contains(p.remove()));\n@@ -592,1 +591,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -606,5 +605,5 @@\n-        PDelay[] ints = new PDelay[SIZE];\n-        PDelay[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        Arrays.sort(ints);\n-        for (PDelay o : ints)\n+        PDelay[] items = new PDelay[SIZE];\n+        PDelay[] array = q.toArray(items);\n+        assertSame(items, array);\n+        Arrays.sort(items);\n+        for (PDelay o : items)\n@@ -619,1 +618,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -630,1 +629,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -632,1 +631,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<PDelay> it = q.iterator();\n@@ -637,1 +636,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -645,1 +644,1 @@\n-        assertIteratorExhausted(new DelayQueue().iterator());\n+        assertIteratorExhausted(new DelayQueue<PDelay>().iterator());\n@@ -652,1 +651,1 @@\n-        final DelayQueue q = new DelayQueue();\n+        final DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -656,1 +655,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<PDelay> it = q.iterator();\n@@ -660,2 +659,2 @@\n-        assertEquals(new PDelay(2), it.next());\n-        assertEquals(new PDelay(3), it.next());\n+        mustEqual(new PDelay(2), it.next());\n+        mustEqual(new PDelay(3), it.next());\n@@ -669,1 +668,1 @@\n-        DelayQueue q = populatedQueue(SIZE);\n+        DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -679,1 +678,1 @@\n-        final DelayQueue q = new DelayQueue();\n+        final DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -723,1 +722,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<NanoDelay> q = new DelayQueue<NanoDelay>();\n@@ -732,1 +731,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<NanoDelay> q = new DelayQueue<NanoDelay>();\n@@ -741,1 +740,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<NanoDelay> q = new DelayQueue<NanoDelay>();\n@@ -752,1 +751,1 @@\n-        DelayQueue q = new DelayQueue();\n+        DelayQueue<PDelay> q = new DelayQueue<PDelay>();\n@@ -758,1 +757,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<PDelay> l = new ArrayList<PDelay>();\n@@ -760,1 +759,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -762,1 +761,1 @@\n-            assertEquals(elems[i], l.get(i));\n+            mustEqual(elems[i], l.get(i));\n@@ -770,2 +769,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -773,1 +772,1 @@\n-            assertEquals(elems[i], l.get(i));\n+            mustEqual(elems[i], l.get(i));\n@@ -780,1 +779,1 @@\n-        final DelayQueue q = populatedQueue(SIZE);\n+        final DelayQueue<PDelay> q = populatedQueue(SIZE);\n@@ -787,1 +786,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<PDelay> l = new ArrayList<PDelay>();\n@@ -799,2 +798,2 @@\n-            DelayQueue q = populatedQueue(SIZE);\n-            ArrayList l = new ArrayList();\n+            DelayQueue<PDelay> q = populatedQueue(SIZE);\n+            ArrayList<PDelay> l = new ArrayList<PDelay>();\n@@ -803,2 +802,2 @@\n-            assertEquals(SIZE - k, q.size());\n-            assertEquals(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/DelayQueueTest.java","additions":99,"deletions":100,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n@@ -78,1 +78,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n@@ -98,1 +98,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n@@ -115,1 +115,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n@@ -132,1 +132,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n@@ -150,1 +150,1 @@\n-        final Exchanger e = new Exchanger();\n+        final Exchanger<Item> e = new Exchanger<Item>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ExchangerTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            new ExecutorCompletionService(null);\n+            new ExecutorCompletionService<Item>(null);\n@@ -78,1 +78,1 @@\n-            new ExecutorCompletionService(cachedThreadPool, null);\n+            new ExecutorCompletionService<Item>(cachedThreadPool, null);\n@@ -87,1 +87,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<Item> cs = new ExecutorCompletionService<Item>(cachedThreadPool);\n@@ -89,1 +89,1 @@\n-            cs.submit((Callable) null);\n+            cs.submit((Callable<Item>) null);\n@@ -98,1 +98,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<Boolean> cs = new ExecutorCompletionService<Boolean>(cachedThreadPool);\n@@ -109,1 +109,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n@@ -111,1 +111,1 @@\n-        Future f = cs.take();\n+        Future<?> f = cs.take();\n@@ -120,3 +120,3 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n-        Future f1 = cs.submit(new StringTask());\n-        Future f2 = cs.take();\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n+        Future<?> f1 = cs.submit(new StringTask());\n+        Future<?> f2 = cs.take();\n@@ -130,1 +130,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n@@ -135,1 +135,1 @@\n-        Future f;\n+        Future<?> f;\n@@ -149,1 +149,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n@@ -154,1 +154,1 @@\n-        Future f;\n+        Future<?> f;\n@@ -169,1 +169,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n@@ -171,1 +171,1 @@\n-        cs.submit(new Callable() { public String call() throws Exception {\n+        cs.submit(new Callable<String>() { public String call() throws Exception {\n@@ -189,1 +189,1 @@\n-        CompletionService cs = new ExecutorCompletionService(cachedThreadPool);\n+        CompletionService<String> cs = new ExecutorCompletionService<String>(cachedThreadPool);\n@@ -234,1 +234,1 @@\n-            Future f1 = cs.submit(c);\n+            Future<?> f1 = cs.submit(c);\n@@ -237,1 +237,1 @@\n-            Future f2 = cs.take();\n+            Future<?> f2 = cs.take();\n@@ -264,1 +264,1 @@\n-            Future f1 = cs.submit(r, null);\n+            Future<?> f1 = cs.submit(r, null);\n@@ -267,1 +267,1 @@\n-            Future f2 = cs.take();\n+            Future<?> f2 = cs.take();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ExecutorCompletionServiceTest.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-            Future f = p.schedule(Executors.callable(task, Boolean.TRUE),\n+            Future<?> f = p.schedule(Executors.callable(task, Boolean.TRUE),\n@@ -260,1 +260,1 @@\n-            Future f = p.schedule(Executors.callable(task, Boolean.TRUE),\n+            Future<?> f = p.schedule(Executors.callable(task, Boolean.TRUE),\n@@ -286,1 +286,1 @@\n-            Future f = p.schedule(Executors.callable(task, Boolean.TRUE),\n+            Future<?> f = p.schedule(Executors.callable(task, Boolean.TRUE),\n@@ -320,1 +320,1 @@\n-                    Future future = executor.submit(sleeper);\n+                    Future<?> future = executor.submit(sleeper);\n@@ -472,1 +472,1 @@\n-                Callable task = Executors.privilegedCallable(new CheckCCL());\n+                Callable<?> task = Executors.privilegedCallable(new CheckCCL());\n@@ -551,1 +551,1 @@\n-        Callable c = Executors.callable(new NoOpRunnable());\n+        Callable<?> c = Executors.callable(new NoOpRunnable());\n@@ -559,1 +559,1 @@\n-        Callable c = Executors.callable(new NoOpRunnable(), one);\n+        Callable<?> c = Executors.callable(new NoOpRunnable(), one);\n@@ -567,1 +567,1 @@\n-        Callable c = Executors.callable(new PrivilegedAction() {\n+        Callable<?> c = Executors.callable(new PrivilegedAction() {\n@@ -576,1 +576,1 @@\n-        Callable c = Executors.callable(new PrivilegedExceptionAction() {\n+        Callable<?> c = Executors.callable(new PrivilegedExceptionAction() {\n@@ -586,1 +586,1 @@\n-            Callable unused = Executors.callable((Runnable) null);\n+            Callable<?> unused = Executors.callable((Runnable) null);\n@@ -596,1 +596,1 @@\n-            Callable unused = Executors.callable((Runnable) null, one);\n+            Callable<?> unused = Executors.callable((Runnable) null, one);\n@@ -606,1 +606,1 @@\n-            Callable unused = Executors.callable((PrivilegedAction) null);\n+            Callable<?> unused = Executors.callable((PrivilegedAction) null);\n@@ -616,1 +616,1 @@\n-            Callable unused = Executors.callable((PrivilegedExceptionAction) null);\n+            Callable<?> unused = Executors.callable((PrivilegedExceptionAction) null);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ExecutorsTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    private void checkInvoke(ForkJoinTask a) {\n+    private void checkInvoke(ForkJoinTask<?> a) {\n@@ -95,1 +95,1 @@\n-    void checkNotDone(ForkJoinTask a) {\n+    void checkNotDone(ForkJoinTask<?> a) {\n@@ -126,1 +126,1 @@\n-    void checkCompletedNormally(ForkJoinTask a) {\n+    void checkCompletedNormally(ForkJoinTask<?> a) {\n@@ -146,1 +146,1 @@\n-    void checkCancelled(ForkJoinTask a) {\n+    void checkCancelled(ForkJoinTask<?> a) {\n@@ -173,1 +173,1 @@\n-    void checkCompletedAbnormally(ForkJoinTask a, Throwable t) {\n+    void checkCompletedAbnormally(ForkJoinTask<?> a, Throwable t) {\n@@ -769,1 +769,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -867,1 +867,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -883,1 +883,1 @@\n-    abstract static class CCF extends CountedCompleter {\n+    abstract static class CCF extends CountedCompleter<Void> {\n@@ -887,1 +887,1 @@\n-        public CCF(CountedCompleter parent, int n) {\n+        public CCF(CountedCompleter<?> parent, int n) {\n@@ -893,1 +893,1 @@\n-            CountedCompleter p;\n+            CountedCompleter<?> p;\n@@ -910,1 +910,1 @@\n-        public LCCF(CountedCompleter parent, int n) {\n+        public LCCF(CountedCompleter<?> parent, int n) {\n@@ -913,1 +913,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -926,1 +926,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -937,1 +937,1 @@\n-    abstract static class FailingCCF extends CountedCompleter {\n+    abstract static class FailingCCF extends CountedCompleter<Void> {\n@@ -941,1 +941,1 @@\n-        public FailingCCF(CountedCompleter parent, int n) {\n+        public FailingCCF(CountedCompleter<?> parent, int n) {\n@@ -947,1 +947,1 @@\n-            CountedCompleter p;\n+            CountedCompleter<?> p;\n@@ -964,1 +964,1 @@\n-        public LFCCF(CountedCompleter parent, int n) {\n+        public LFCCF(CountedCompleter<?> parent, int n) {\n@@ -967,1 +967,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -977,1 +977,1 @@\n-        public RFCCF(CountedCompleter parent, int n) {\n+        public RFCCF(CountedCompleter<?> parent, int n) {\n@@ -980,1 +980,1 @@\n-        public final void onCompletion(CountedCompleter caller) {\n+        public final void onCompletion(CountedCompleter<?> caller) {\n@@ -991,1 +991,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1007,1 +1007,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1021,1 +1021,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1036,1 +1036,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1051,1 +1051,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1066,1 +1066,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1082,1 +1082,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1097,1 +1097,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1114,1 +1114,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1128,1 +1128,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1146,1 +1146,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1166,1 +1166,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1186,1 +1186,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1201,1 +1201,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1219,1 +1219,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1238,1 +1238,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1257,1 +1257,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1276,1 +1276,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1291,1 +1291,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1302,1 +1302,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1313,1 +1313,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1325,1 +1325,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1343,1 +1343,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1360,1 +1360,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1374,1 +1374,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1394,1 +1394,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1399,1 +1399,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1418,1 +1418,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1435,1 +1435,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1453,1 +1453,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1470,1 +1470,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1489,1 +1489,1 @@\n-        ForkJoinTask a = new CheckedRecursiveAction() {\n+        CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1494,1 +1494,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1517,1 +1517,1 @@\n-            ForkJoinTask a = new CheckedRecursiveAction() {\n+            CheckedRecursiveAction a = new CheckedRecursiveAction() {\n@@ -1576,1 +1576,1 @@\n-            ForkJoinTask a = new CheckedRecursiveAction() {\n+            CheckedRecursiveAction a = new CheckedRecursiveAction() {\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool8Test.java","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -407,4 +407,4 @@\n-            ForkJoinTask a = p.submit(awaiter(done));\n-            ForkJoinTask b = p.submit(awaiter(done));\n-            ForkJoinTask c = p.submit(awaiter(done));\n-            ForkJoinTask r = p.pollSubmission();\n+            ForkJoinTask<?> a = p.submit(awaiter(done));\n+            ForkJoinTask<?> b = p.submit(awaiter(done));\n+            ForkJoinTask<?> c = p.submit(awaiter(done));\n+            ForkJoinTask<?> r = p.pollSubmission();\n@@ -424,4 +424,4 @@\n-            ForkJoinTask a = p.submit(awaiter(done));\n-            ForkJoinTask b = p.submit(awaiter(done));\n-            ForkJoinTask c = p.submit(awaiter(done));\n-            ArrayList<ForkJoinTask> al = new ArrayList();\n+            ForkJoinTask<?> a = p.submit(awaiter(done));\n+            ForkJoinTask<?> b = p.submit(awaiter(done));\n+            ForkJoinTask<?> c = p.submit(awaiter(done));\n+            ArrayList<ForkJoinTask<?>> al = new ArrayList<>();\n@@ -430,1 +430,1 @@\n-            for (ForkJoinTask r : al) {\n+            for (ForkJoinTask<?> r : al) {\n@@ -502,1 +502,1 @@\n-        final Callable callable = Executors.callable(new PrivilegedAction() {\n+        final Callable<Object> callable = Executors.callable(new PrivilegedAction<Object>() {\n@@ -508,1 +508,1 @@\n-                Future future = e.submit(callable);\n+                Future<Object> future = e.submit(callable);\n@@ -520,2 +520,2 @@\n-        final Callable callable =\n-            Executors.callable(new PrivilegedExceptionAction() {\n+        final Callable<Object> callable =\n+            Executors.callable(new PrivilegedExceptionAction<Object>() {\n@@ -527,1 +527,1 @@\n-                Future future = e.submit(callable);\n+                Future<Object> future = e.submit(callable);\n@@ -539,2 +539,2 @@\n-        final Callable callable =\n-            Executors.callable(new PrivilegedExceptionAction() {\n+        final Callable<Object> callable =\n+            Executors.callable(new PrivilegedExceptionAction<Object>() {\n@@ -546,1 +546,1 @@\n-                Future future = e.submit(callable);\n+                Future<Object> future = e.submit(callable);\n@@ -579,1 +579,1 @@\n-                Future<String> unused = e.submit((Callable) null);\n+                Future<String> unused = e.submit((Callable<String>) null);\n@@ -619,1 +619,1 @@\n-                p.submit(new Callable() {\n+                p.submit(new Callable<Object>() {\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPoolTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-    void checkNotDone(ForkJoinTask a) {\n+    void checkNotDone(ForkJoinTask<?> a) {\n@@ -182,1 +182,1 @@\n-    void checkCompletedAbnormally(ForkJoinTask a, Throwable t) {\n+    void checkCompletedAbnormally(ForkJoinTask<?> a, Throwable t) {\n@@ -953,1 +953,1 @@\n-                ForkJoinTask[] tasks = { f, g };\n+                ForkJoinTask<?>[] tasks = { f, g };\n@@ -980,1 +980,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n@@ -1007,1 +1007,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n@@ -1202,3 +1202,3 @@\n-        final ForkJoinTask a = ForkJoinTask.adapt(awaiter(done));\n-        final ForkJoinTask b = ForkJoinTask.adapt(awaiter(done));\n-        final ForkJoinTask c = ForkJoinTask.adapt(awaiter(done));\n+        final ForkJoinTask<?> a = ForkJoinTask.adapt(awaiter(done));\n+        final ForkJoinTask<?> b = ForkJoinTask.adapt(awaiter(done));\n+        final ForkJoinTask<?> c = ForkJoinTask.adapt(awaiter(done));\n@@ -1223,1 +1223,1 @@\n-                    ForkJoinTask r = ForkJoinTask.pollSubmission();\n+                    ForkJoinTask<?> r = ForkJoinTask.pollSubmission();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinTask8Test.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-    void checkNotDone(ForkJoinTask a) {\n+    void checkNotDone(ForkJoinTask<?> a) {\n@@ -153,1 +153,1 @@\n-    void checkCancelled(ForkJoinTask a) {\n+    void checkCancelled(ForkJoinTask<?> a) {\n@@ -190,1 +190,1 @@\n-    void checkCompletedAbnormally(ForkJoinTask a, Throwable t) {\n+    void checkCompletedAbnormally(ForkJoinTask<?> a, Throwable t) {\n@@ -888,1 +888,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -928,1 +928,1 @@\n-                ForkJoinTask[] tasks = { f, g };\n+                ForkJoinTask<?>[] tasks = { f, g };\n@@ -966,1 +966,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n@@ -987,1 +987,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n@@ -1557,1 +1557,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1597,1 +1597,1 @@\n-                ForkJoinTask[] tasks = { f, g };\n+                ForkJoinTask<?>[] tasks = { f, g };\n@@ -1635,1 +1635,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n@@ -1656,1 +1656,1 @@\n-                ForkJoinTask[] tasks = { f, g, h };\n+                ForkJoinTask<?>[] tasks = { f, g, h };\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinTaskTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-            FutureTask ft = (FutureTask<?>) f;\n+            FutureTask<?> ft = (FutureTask<?>) f;\n@@ -194,1 +194,1 @@\n-    static class PublicFutureTask extends FutureTask {\n+    static class PublicFutureTask extends FutureTask<Object> {\n@@ -221,1 +221,1 @@\n-        PublicFutureTask(Callable callable) {\n+        PublicFutureTask(Callable<?> callable) {\n@@ -224,1 +224,1 @@\n-        private PublicFutureTask(final Callable callable,\n+        private PublicFutureTask(final Callable<?> callable,\n@@ -226,1 +226,1 @@\n-            super(new Callable() {\n+            super(new Callable<Object>() {\n@@ -265,1 +265,1 @@\n-            new FutureTask(null);\n+            new FutureTask<Void>(null);\n@@ -275,1 +275,1 @@\n-            new FutureTask(null, Boolean.TRUE);\n+            new FutureTask<Boolean>(null, Boolean.TRUE);\n@@ -707,1 +707,1 @@\n-        final PublicFutureTask task = new PublicFutureTask(new Callable() {\n+        final PublicFutureTask task = new PublicFutureTask(new Callable<Object>() {\n@@ -731,1 +731,1 @@\n-        final PublicFutureTask task = new PublicFutureTask(new Callable() {\n+        final PublicFutureTask task = new PublicFutureTask(new Callable<Object>() {\n@@ -752,1 +752,1 @@\n-        final FutureTask task = new FutureTask(new NoOpCallable());\n+        final FutureTask<Object> task = new FutureTask<Object>(new NoOpCallable());\n@@ -781,1 +781,1 @@\n-        final FutureTask task = new FutureTask(new NoOpCallable());\n+        final FutureTask<Object> task = new FutureTask<Object>(new NoOpCallable());\n@@ -810,1 +810,1 @@\n-        FutureTask task = new FutureTask(new NoOpCallable());\n+        FutureTask<Object> task = new FutureTask<Object>(new NoOpCallable());\n@@ -824,1 +824,1 @@\n-        FutureTask task = new FutureTask(new NoOpCallable());\n+        FutureTask<Object> task = new FutureTask<Object>(new NoOpCallable());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/FutureTaskTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * This file is available under and governed by the GNU General Public\n+ * License version 2 only, as published by the Free Software Foundation.\n+ * However, the following notice accompanied the original version of this\n+ * file:\n+ *\n+ * Written by Doug Lea with assistance from members of JCP JSR-166\n+ * Expert Group and released to the public domain, as explained at\n+ * http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\n+ *\/\n+\n+\/\/ A simple element class for collections etc\n+import java.util.Comparator;\n+import java.io.Serializable;\n+\n+public final class Item extends Number implements Comparable<Item>, Serializable {\n+    public final int value;\n+    public Item(int v) { value = v; }\n+    public Item(Item i) { value = i.value; }\n+    public Item(Integer i) { value = i.intValue(); }\n+    public static Item valueOf(int i) { return new Item(i); }\n+\n+    public int intValue() { return value; }\n+    public long longValue() { return (long)value; }\n+    public float floatValue() { return (float)value; }\n+    public double doubleValue() { return (double)value; }\n+\n+    public boolean equals(Object x) {\n+        return (x instanceof Item) && ((Item)x).value == value;\n+    }\n+    public boolean equals(int b) {\n+        return value == b;\n+    }\n+    public int compareTo(Item x) {\n+        int a = value, b = x.value;\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+    public int compareTo(int b) {\n+        int a = value;\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+\n+    public int hashCode() { return value; }\n+    public String toString() { return Integer.toString(value); }\n+    public static int compare(Item x, Item y) {\n+        int a = x.value, b = y.value;\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+    public static int compare(Item x, int b) {\n+        int a = x.value;\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+    public static int compare(int a, Item y) {\n+        int b = y.value;\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+    public static int compare(int a, int b) {\n+        return (a == b) ? 0 : (a < b) ? -1 : 1;\n+    }\n+\n+    public static Comparator<Item> comparator() { return new Cpr(); }\n+    public static class Cpr implements Comparator<Item> {\n+        public int compare(Item x, Item y) {\n+            int a = x.value, b = y.value;\n+            return (a == b) ? 0 : (a < b) ? -1 : 1;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/Item.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -104,0 +104,1 @@\n+import java.util.Queue;\n@@ -180,0 +181,5 @@\n+ * Class Item is used for elements of collections and related\n+ * purposes. Many tests rely on themir keys being equal to ints. To\n+ * check these, methods mustEqual, mustContain, etc adapt the JUnit\n+ * assert methods to intercept ints.\n+ *\n@@ -741,0 +747,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1215,1 +1222,1 @@\n-    void assertFutureTimesOut(Future future) {\n+    void assertFutureTimesOut(Future<?> future) {\n@@ -1222,1 +1229,1 @@\n-    void assertFutureTimesOut(Future future, long timeoutMillis) {\n+    void assertFutureTimesOut(Future<?> future, long timeoutMillis) {\n@@ -1257,22 +1264,131 @@\n-     *\/\n-    public static final int SIZE = 20;\n-\n-    \/\/ Some convenient Integer constants\n-\n-    public static final Integer zero  = new Integer(0);\n-    public static final Integer one   = new Integer(1);\n-    public static final Integer two   = new Integer(2);\n-    public static final Integer three = new Integer(3);\n-    public static final Integer four  = new Integer(4);\n-    public static final Integer five  = new Integer(5);\n-    public static final Integer six   = new Integer(6);\n-    public static final Integer seven = new Integer(7);\n-    public static final Integer eight = new Integer(8);\n-    public static final Integer nine  = new Integer(9);\n-    public static final Integer m1  = new Integer(-1);\n-    public static final Integer m2  = new Integer(-2);\n-    public static final Integer m3  = new Integer(-3);\n-    public static final Integer m4  = new Integer(-4);\n-    public static final Integer m5  = new Integer(-5);\n-    public static final Integer m6  = new Integer(-6);\n-    public static final Integer m10 = new Integer(-10);\n+     * Must be at least ten;\n+     *\/\n+    public static final int SIZE = 32;\n+\n+    static Item[] seqItems(int size) {\n+        Item[] s = new Item[size];\n+        for (int i = 0; i < size; ++i)\n+            s[i] = new Item(i);\n+        return s;\n+    }\n+    static Item[] negativeSeqItems(int size) {\n+        Item[] s = new Item[size];\n+        for (int i = 0; i < size; ++i)\n+            s[i] = new Item(-i);\n+        return s;\n+    }\n+\n+    \/\/ Many tests rely on defaultItems all being sequential nonnegative\n+    public static final Item[] defaultItems = seqItems(SIZE);\n+\n+    static Item itemFor(int i) { \/\/ check cache for defaultItems\n+        Item[] items = defaultItems;\n+        return (i >= 0 && i < items.length) ? items[i] : new Item(i);\n+    }\n+\n+    public static final Item zero  = defaultItems[0];\n+    public static final Item one   = defaultItems[1];\n+    public static final Item two   = defaultItems[2];\n+    public static final Item three = defaultItems[3];\n+    public static final Item four  = defaultItems[4];\n+    public static final Item five  = defaultItems[5];\n+    public static final Item six   = defaultItems[6];\n+    public static final Item seven = defaultItems[7];\n+    public static final Item eight = defaultItems[8];\n+    public static final Item nine  = defaultItems[9];\n+    public static final Item ten   = defaultItems[10];\n+\n+    public static final Item[] negativeItems = negativeSeqItems(SIZE);\n+\n+    public static final Item minusOne   = negativeItems[1];\n+    public static final Item minusTwo   = negativeItems[2];\n+    public static final Item minusThree = negativeItems[3];\n+    public static final Item minusFour  = negativeItems[4];\n+    public static final Item minusFive  = negativeItems[5];\n+    public static final Item minusSix   = negativeItems[6];\n+    public static final Item minusSeven = negativeItems[7];\n+    public static final Item minusEight = negativeItems[8];\n+    public static final Item minusNone  = negativeItems[9];\n+    public static final Item minusTen   = negativeItems[10];\n+\n+    \/\/ elements expected to be missing\n+    public static final Item fortytwo = new Item(42);\n+    public static final Item eightysix = new Item(86);\n+    public static final Item ninetynine = new Item(99);\n+\n+    \/\/ Interop across Item, int\n+\n+    static void mustEqual(Item x, Item y) {\n+        if (x != y)\n+            assertEquals(x.value, y.value);\n+    }\n+    static void mustEqual(Item x, int y) {\n+        assertEquals(x.value, y);\n+    }\n+    static void mustEqual(int x, Item y) {\n+        assertEquals(x, y.value);\n+    }\n+    static void mustEqual(int x, int y) {\n+        assertEquals(x, y);\n+    }\n+    static void mustEqual(Object x, Object y) {\n+        if (x != y)\n+            assertEquals(x, y);\n+    }\n+    static void mustEqual(int x, Object y) {\n+        if (y instanceof Item)\n+            assertEquals(x, ((Item)y).value);\n+        else fail();\n+    }\n+    static void mustEqual(Object x, int y) {\n+        if (x instanceof Item)\n+            assertEquals(((Item)x).value, y);\n+        else fail();\n+    }\n+    static void mustEqual(boolean x, boolean y) {\n+        assertEquals(x, y);\n+    }\n+    static void mustEqual(long x, long y) {\n+        assertEquals(x, y);\n+    }\n+    static void mustEqual(double x, double y) {\n+        assertEquals(x, y);\n+    }\n+    static void mustContain(Collection<Item> c, int i) {\n+        assertTrue(c.contains(itemFor(i)));\n+    }\n+    static void mustContain(Collection<Item> c, Item i) {\n+        assertTrue(c.contains(i));\n+    }\n+    static void mustNotContain(Collection<Item> c, int i) {\n+        assertFalse(c.contains(itemFor(i)));\n+    }\n+    static void mustNotContain(Collection<Item> c, Item i) {\n+        assertFalse(c.contains(i));\n+    }\n+    static void mustRemove(Collection<Item> c, int i) {\n+        assertTrue(c.remove(itemFor(i)));\n+    }\n+    static void mustRemove(Collection<Item> c, Item i) {\n+        assertTrue(c.remove(i));\n+    }\n+    static void mustNotRemove(Collection<Item> c, int i) {\n+        Item[] items = defaultItems;\n+        Item x = (i >= 0 && i < items.length) ? items[i] : new Item(i);\n+        assertFalse(c.remove(x));\n+    }\n+    static void mustNotRemove(Collection<Item> c, Item i) {\n+        assertFalse(c.remove(i));\n+    }\n+    static void mustAdd(Collection<Item> c, int i) {\n+        assertTrue(c.add(itemFor(i)));\n+    }\n+    static void mustAdd(Collection<Item> c, Item i) {\n+        assertTrue(c.add(i));\n+    }\n+    static void mustOffer(Queue<Item> c, int i) {\n+        assertTrue(c.offer(itemFor(i)));\n+    }\n+    static void mustOffer(Queue<Item> c, Item i) {\n+        assertTrue(c.offer(i));\n+    }\n@@ -1626,1 +1742,1 @@\n-    public static class NoOpCallable implements Callable {\n+    public static class NoOpCallable implements Callable<Object> {\n@@ -1819,1 +1935,1 @@\n-    void checkEmpty(BlockingQueue q) {\n+    void checkEmpty(BlockingQueue<?> q) {\n@@ -1866,0 +1982,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -2015,1 +2132,1 @@\n-            es.submit((Callable) null);\n+            es.submit((Callable<?>) null);\n@@ -2027,1 +2144,1 @@\n-            ses.schedule((Callable) null,\n+            ses.schedule((Callable<?>) null,\n@@ -2186,1 +2303,1 @@\n-            assertEquals(new HashSet(x), new HashSet(y));\n+            assertEquals(new HashSet<Object>(x), new HashSet<Object>(y));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":146,"deletions":29,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                     () -> new LinkedBlockingDeque().spliterator().getComparator());\n+                     () -> new LinkedBlockingDeque<Item>().spliterator().getComparator());\n@@ -61,2 +61,2 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n-        Spliterator s = q.spliterator();\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n+        Spliterator<Item> s = q.spliterator();\n@@ -67,1 +67,1 @@\n-        assertEquals(required, characteristics & required);\n+        mustEqual(required, characteristics & required);\n@@ -69,1 +69,1 @@\n-        assertEquals(0, characteristics\n+        mustEqual(0, characteristics\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingDeque8Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -86,1 +86,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -88,3 +88,3 @@\n-    private static LinkedBlockingDeque<Integer> populatedDeque(int n) {\n-        LinkedBlockingDeque<Integer> q =\n-            new LinkedBlockingDeque<Integer>(n);\n+    private static LinkedBlockingDeque<Item> populatedDeque(int n) {\n+        LinkedBlockingDeque<Item> q =\n+            new LinkedBlockingDeque<Item>(n);\n@@ -93,1 +93,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -95,4 +95,4 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peekFirst());\n-        assertEquals((Integer) (n - 1), q.peekLast());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peekFirst());\n+        mustEqual((n - 1), q.peekLast());\n@@ -106,1 +106,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -108,1 +108,1 @@\n-        q.add(new Integer(1));\n+        q.add(one);\n@@ -110,1 +110,1 @@\n-        q.add(new Integer(2));\n+        q.add(two);\n@@ -120,1 +120,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -122,1 +122,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -126,2 +126,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, one);\n@@ -135,1 +135,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -146,1 +146,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -157,3 +157,3 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n-        assertTrue(q.offerFirst(new Integer(0)));\n-        assertTrue(q.offerFirst(new Integer(1)));\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n+        assertTrue(q.offerFirst(zero));\n+        assertTrue(q.offerFirst(two));\n@@ -166,3 +166,3 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n-        assertTrue(q.offerLast(new Integer(0)));\n-        assertTrue(q.offerLast(new Integer(1)));\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n+        assertTrue(q.offerLast(zero));\n+        assertTrue(q.offerLast(one));\n@@ -175,1 +175,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -177,1 +177,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -186,1 +186,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -188,1 +188,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -197,1 +197,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -199,2 +199,2 @@\n-            assertEquals(i, q.peekFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.peekFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -211,1 +211,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -213,2 +213,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.pollFirst());\n@@ -225,1 +225,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -227,2 +227,2 @@\n-            assertEquals(i, q.peekLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.peekLast());\n+            mustEqual(i, q.pollLast());\n@@ -239,1 +239,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -241,2 +241,2 @@\n-            assertEquals(i, q.getFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.getFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -255,1 +255,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -257,2 +257,2 @@\n-            assertEquals(i, q.getLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.getLast());\n+            mustEqual(i, q.pollLast());\n@@ -271,1 +271,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -273,1 +273,1 @@\n-            assertEquals(i, q.removeFirst());\n+            mustEqual(i, q.removeFirst());\n@@ -286,1 +286,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -288,1 +288,1 @@\n-            assertEquals(i, q.removeLast());\n+            mustEqual(i, q.removeLast());\n@@ -301,1 +301,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -303,1 +303,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -315,1 +315,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -317,1 +317,1 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n@@ -320,2 +320,2 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n-            assertFalse(q.removeFirstOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n+            assertFalse(q.removeFirstOccurrence(itemFor(i + 1)));\n@@ -330,1 +330,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -332,1 +332,1 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n@@ -335,2 +335,2 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n-            assertFalse(q.removeLastOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n+            assertFalse(q.removeLastOccurrence(itemFor(i + 1)));\n@@ -345,1 +345,1 @@\n-        LinkedBlockingDeque q = populatedDeque(3);\n+        LinkedBlockingDeque<Item> q = populatedDeque(3);\n@@ -355,1 +355,1 @@\n-        LinkedBlockingDeque q = populatedDeque(3);\n+        LinkedBlockingDeque<Item> q = populatedDeque(3);\n@@ -366,2 +366,2 @@\n-        assertEquals(SIZE, new LinkedBlockingDeque(SIZE).remainingCapacity());\n-        assertEquals(Integer.MAX_VALUE, new LinkedBlockingDeque().remainingCapacity());\n+        mustEqual(SIZE, new LinkedBlockingDeque<Item>(SIZE).remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, new LinkedBlockingDeque<Item>().remainingCapacity());\n@@ -375,1 +375,1 @@\n-            new LinkedBlockingDeque(0);\n+            new LinkedBlockingDeque<Item>(0);\n@@ -385,1 +385,1 @@\n-            new LinkedBlockingDeque(null);\n+            new LinkedBlockingDeque<Item>(null);\n@@ -394,1 +394,1 @@\n-        Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        Collection<Item> elements = Arrays.asList(new Item[SIZE]);\n@@ -396,1 +396,1 @@\n-            new LinkedBlockingDeque(elements);\n+            new LinkedBlockingDeque<Item>(elements);\n@@ -406,4 +406,3 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = i;\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -411,1 +410,1 @@\n-            new LinkedBlockingDeque(elements);\n+            new LinkedBlockingDeque<Item>(elements);\n@@ -420,4 +419,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = i;\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(Arrays.asList(ints));\n+        Item[] items = defaultItems;\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(Arrays.asList(items));\n@@ -425,1 +422,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -432,1 +429,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -434,1 +431,1 @@\n-        assertEquals(\"should have room for 2\", 2, q.remainingCapacity());\n+        mustEqual(2, q.remainingCapacity());\n@@ -439,1 +436,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -447,1 +444,1 @@\n-        BlockingQueue q = populatedDeque(SIZE);\n+        BlockingQueue<Item> q = populatedDeque(SIZE);\n@@ -449,3 +446,3 @@\n-            assertEquals(i, q.remainingCapacity());\n-            assertEquals(SIZE, q.size() + q.remainingCapacity());\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remainingCapacity());\n+            mustEqual(SIZE, q.size() + q.remainingCapacity());\n+            mustEqual(i, q.remove());\n@@ -454,3 +451,3 @@\n-            assertEquals(SIZE - i, q.remainingCapacity());\n-            assertEquals(SIZE, q.size() + q.remainingCapacity());\n-            assertTrue(q.add(i));\n+            mustEqual(SIZE - i, q.remainingCapacity());\n+            mustEqual(SIZE, q.size() + q.remainingCapacity());\n+            mustAdd(q, i);\n@@ -464,1 +461,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(1);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(1);\n@@ -475,1 +472,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -477,1 +474,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -479,1 +476,1 @@\n-            assertEquals(x, q.peek());\n+            mustEqual(x, q.peek());\n@@ -481,1 +478,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -483,1 +480,1 @@\n-            q.push(new Integer(SIZE));\n+            q.push(itemFor(SIZE));\n@@ -492,1 +489,1 @@\n-        LinkedBlockingDeque q = populatedDeque(3);\n+        LinkedBlockingDeque<Item> q = populatedDeque(3);\n@@ -502,1 +499,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -504,1 +501,1 @@\n-            assertEquals(i, q.pop());\n+            mustEqual(i, q.pop());\n@@ -516,1 +513,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(1);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(1);\n@@ -525,1 +522,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -527,2 +524,2 @@\n-            assertTrue(q.add(new Integer(i)));\n-        assertEquals(0, q.remainingCapacity());\n+            mustAdd(q, i);\n+        mustEqual(0, q.remainingCapacity());\n@@ -530,1 +527,1 @@\n-            q.add(new Integer(SIZE));\n+            q.add(itemFor(SIZE));\n@@ -539,1 +536,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -551,5 +548,3 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n+        Item[] items = new Item[2]; items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -566,5 +561,3 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE - 1);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE - 1);\n+        Item[] items = defaultItems;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -581,5 +574,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -587,1 +578,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -589,1 +580,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -596,1 +587,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -598,1 +589,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -600,1 +591,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -602,1 +593,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -609,1 +600,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -614,3 +605,3 @@\n-                    q.put(i);\n-                assertEquals(SIZE, q.size());\n-                assertEquals(0, q.remainingCapacity());\n+                    q.put(itemFor(i));\n+                mustEqual(SIZE, q.size());\n+                mustEqual(0, q.remainingCapacity());\n@@ -620,1 +611,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -627,1 +618,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -637,2 +628,2 @@\n-        assertEquals(SIZE, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(SIZE, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -646,1 +637,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(capacity);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(capacity);\n@@ -652,1 +643,1 @@\n-                    q.put(i);\n+                    q.put(itemFor(i));\n@@ -654,1 +645,1 @@\n-                q.put(86);\n+                q.put(eightysix);\n@@ -658,1 +649,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -665,1 +656,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -672,2 +663,2 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(0, q.take());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(0, q.take());\n@@ -679,1 +670,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -686,1 +677,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -690,2 +681,2 @@\n-                q.put(new Object());\n-                q.put(new Object());\n+                q.put(zero);\n+                q.put(one);\n@@ -694,1 +685,1 @@\n-                assertFalse(q.offer(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offer(two, timeoutMillis(), MILLISECONDS));\n@@ -699,1 +690,1 @@\n-                    q.offer(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offer(three, randomTimeout(), randomTimeUnit());\n@@ -706,1 +697,1 @@\n-                    q.offer(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offer(four, LONGER_DELAY_MS, MILLISECONDS);\n@@ -722,1 +713,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -724,1 +715,1 @@\n-            assertEquals(i, q.take());\n+            mustEqual(i, q.take());\n@@ -732,1 +723,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -736,1 +727,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.take());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.take());\n@@ -763,1 +754,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -765,1 +756,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -774,1 +765,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -776,1 +767,1 @@\n-            assertEquals(i, q.poll(0, MILLISECONDS));\n+            mustEqual(i, q.poll(0, MILLISECONDS));\n@@ -785,1 +776,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -788,1 +779,1 @@\n-            assertEquals(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -802,1 +793,1 @@\n-        final BlockingQueue<Integer> q = populatedDeque(SIZE);\n+        final BlockingQueue<Item> q = populatedDeque(SIZE);\n@@ -807,1 +798,1 @@\n-                    assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -835,1 +826,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -846,1 +837,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -848,1 +839,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -850,1 +841,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -852,1 +843,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -859,1 +850,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -864,3 +855,3 @@\n-                    q.putFirst(i);\n-                assertEquals(SIZE, q.size());\n-                assertEquals(0, q.remainingCapacity());\n+                    q.putFirst(itemFor(i));\n+                mustEqual(SIZE, q.size());\n+                mustEqual(0, q.remainingCapacity());\n@@ -870,1 +861,1 @@\n-                    q.putFirst(99);\n+                    q.putFirst(ninetynine);\n@@ -877,1 +868,1 @@\n-                    q.putFirst(99);\n+                    q.putFirst(ninetynine);\n@@ -887,2 +878,2 @@\n-        assertEquals(SIZE, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(SIZE, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -896,1 +887,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(capacity);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(capacity);\n@@ -902,1 +893,1 @@\n-                    q.putFirst(i);\n+                    q.putFirst(itemFor(i));\n@@ -904,1 +895,1 @@\n-                q.putFirst(86);\n+                q.putFirst(eightysix);\n@@ -908,1 +899,1 @@\n-                    q.putFirst(99);\n+                    q.putFirst(ninetynine);\n@@ -915,2 +906,2 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(capacity - 1, q.take());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(capacity - 1, q.take());\n@@ -922,1 +913,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -929,1 +920,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -933,2 +924,2 @@\n-                q.putFirst(new Object());\n-                q.putFirst(new Object());\n+                q.putFirst(zero);\n+                q.putFirst(one);\n@@ -937,1 +928,1 @@\n-                assertFalse(q.offerFirst(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offerFirst(two, timeoutMillis(), MILLISECONDS));\n@@ -942,1 +933,1 @@\n-                    q.offerFirst(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offerFirst(three, randomTimeout(), randomTimeUnit());\n@@ -949,1 +940,1 @@\n-                    q.offerFirst(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offerFirst(four, LONGER_DELAY_MS, MILLISECONDS);\n@@ -965,1 +956,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -967,1 +958,1 @@\n-            assertEquals(i, q.takeFirst());\n+            mustEqual(i, q.takeFirst());\n@@ -975,1 +966,1 @@\n-        final BlockingDeque q = new LinkedBlockingDeque();\n+        final BlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -998,1 +989,1 @@\n-        final BlockingDeque q = new LinkedBlockingDeque();\n+        final BlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1016,1 +1007,1 @@\n-        final BlockingDeque q = new LinkedBlockingDeque();\n+        final BlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1039,1 +1030,1 @@\n-        final BlockingDeque q = new LinkedBlockingDeque();\n+        final BlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1057,1 +1048,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1061,1 +1052,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.takeFirst());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.takeFirst());\n@@ -1088,1 +1079,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1090,1 +1081,1 @@\n-            assertEquals(i, q.pollFirst(0, MILLISECONDS));\n+            mustEqual(i, q.pollFirst(0, MILLISECONDS));\n@@ -1099,1 +1090,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1102,1 +1093,1 @@\n-            assertEquals(i, q.pollFirst(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.pollFirst(LONG_DELAY_MS, MILLISECONDS));\n@@ -1116,1 +1107,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1121,1 +1112,1 @@\n-                    assertEquals(i, q.pollFirst(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.pollFirst(LONG_DELAY_MS, MILLISECONDS));\n@@ -1149,1 +1140,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -1191,1 +1182,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -1202,1 +1193,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -1204,1 +1195,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -1206,1 +1197,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -1208,1 +1199,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -1215,1 +1206,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(SIZE);\n@@ -1220,3 +1211,3 @@\n-                    q.putLast(i);\n-                assertEquals(SIZE, q.size());\n-                assertEquals(0, q.remainingCapacity());\n+                    q.putLast(itemFor(i));\n+                mustEqual(SIZE, q.size());\n+                mustEqual(0, q.remainingCapacity());\n@@ -1226,1 +1217,1 @@\n-                    q.putLast(99);\n+                    q.putLast(ninetynine);\n@@ -1233,1 +1224,1 @@\n-                    q.putLast(99);\n+                    q.putLast(ninetynine);\n@@ -1243,2 +1234,2 @@\n-        assertEquals(SIZE, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(SIZE, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -1252,1 +1243,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(capacity);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(capacity);\n@@ -1258,1 +1249,1 @@\n-                    q.putLast(i);\n+                    q.putLast(itemFor(i));\n@@ -1260,1 +1251,1 @@\n-                q.putLast(86);\n+                q.putLast(eightysix);\n@@ -1264,1 +1255,1 @@\n-                    q.putLast(99);\n+                    q.putLast(ninetynine);\n@@ -1271,1 +1262,1 @@\n-                    q.putLast(99);\n+                    q.putLast(ninetynine);\n@@ -1278,2 +1269,2 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(0, q.take());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(0, q.take());\n@@ -1285,1 +1276,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -1292,1 +1283,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -1296,2 +1287,2 @@\n-                q.putLast(new Object());\n-                q.putLast(new Object());\n+                q.putLast(zero);\n+                q.putLast(one);\n@@ -1300,1 +1291,1 @@\n-                assertFalse(q.offerLast(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offerLast(two, timeoutMillis(), MILLISECONDS));\n@@ -1305,1 +1296,1 @@\n-                    q.offerLast(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offerLast(three, randomTimeout(), randomTimeUnit());\n@@ -1311,1 +1302,1 @@\n-                    q.offerLast(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offerLast(four, LONGER_DELAY_MS, MILLISECONDS);\n@@ -1326,1 +1317,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1328,1 +1319,1 @@\n-            assertEquals(SIZE - i - 1, q.takeLast());\n+            mustEqual(SIZE - i - 1, q.takeLast());\n@@ -1336,1 +1327,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1341,1 +1332,1 @@\n-                    assertEquals(SIZE - i - 1, q.takeLast());\n+                    mustEqual(SIZE - i - 1, q.takeLast());\n@@ -1368,1 +1359,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1370,1 +1361,1 @@\n-            assertEquals(SIZE - i - 1, q.pollLast(0, MILLISECONDS));\n+            mustEqual(SIZE - i - 1, q.pollLast(0, MILLISECONDS));\n@@ -1379,1 +1370,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1382,1 +1373,1 @@\n-            assertEquals(SIZE - i - 1, q.pollLast(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(SIZE - i - 1, q.pollLast(LONG_DELAY_MS, MILLISECONDS));\n@@ -1396,1 +1387,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1401,1 +1392,1 @@\n-                    assertEquals(SIZE - i - 1,\n+                    mustEqual(SIZE - i - 1,\n@@ -1431,1 +1422,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -1475,1 +1466,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1477,1 +1468,1 @@\n-            assertEquals(i, q.element());\n+            mustEqual(i, q.element());\n@@ -1490,1 +1481,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1492,1 +1483,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -1494,1 +1485,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -1502,1 +1493,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1505,2 +1496,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, q.remainingCapacity());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, q.remainingCapacity());\n@@ -1509,1 +1500,1 @@\n-        assertTrue(q.contains(one));\n+        mustContain(q, one);\n@@ -1518,2 +1509,2 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n-        LinkedBlockingDeque p = new LinkedBlockingDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> p = new LinkedBlockingDeque<Item>(SIZE);\n@@ -1523,1 +1514,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -1532,2 +1523,2 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n-        LinkedBlockingDeque p = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> p = populatedDeque(SIZE);\n@@ -1542,1 +1533,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -1552,2 +1543,2 @@\n-            LinkedBlockingDeque q = populatedDeque(SIZE);\n-            LinkedBlockingDeque p = populatedDeque(i);\n+            LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+            LinkedBlockingDeque<Item> p = populatedDeque(i);\n@@ -1555,1 +1546,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -1557,2 +1548,1 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.remove());\n@@ -1567,1 +1557,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1579,5 +1569,5 @@\n-        LinkedBlockingDeque<Integer> q = populatedDeque(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -1592,1 +1582,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1603,2 +1593,2 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n-        Iterator it = q.iterator();\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -1607,2 +1597,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -1613,2 +1603,2 @@\n-            assertEquals(it.next(), q.take());\n-        assertEquals(i, SIZE);\n+            mustEqual(it.next(), q.take());\n+        mustEqual(i, SIZE);\n@@ -1622,1 +1612,1 @@\n-        Deque c = new LinkedBlockingDeque();\n+        Deque<Item> c = new LinkedBlockingDeque<Item>();\n@@ -1631,1 +1621,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(3);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(3);\n@@ -1636,1 +1626,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -1650,1 +1640,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(3);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(3);\n@@ -1654,1 +1644,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -1656,2 +1646,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -1659,1 +1649,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -1666,1 +1656,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(3);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(3);\n@@ -1670,1 +1660,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -1674,1 +1664,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -1681,1 +1671,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1683,1 +1673,1 @@\n-        Iterator it = q.descendingIterator();\n+        Iterator<? extends Item> it = q.descendingIterator();\n@@ -1685,1 +1675,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -1688,1 +1678,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -1700,1 +1690,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1702,3 +1692,4 @@\n-            q.add(new Integer(3));\n-            q.add(new Integer(2));\n-            q.add(new Integer(1));\n+            mustAdd(q, three);\n+            mustAdd(q, two);\n+            mustAdd(q, one);\n+\n@@ -1706,2 +1697,2 @@\n-            for (Iterator it = q.descendingIterator(); it.hasNext();) {\n-                assertEquals(++k, it.next());\n+            for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext();) {\n+                mustEqual(++k, it.next());\n@@ -1710,1 +1701,1 @@\n-            assertEquals(3, k);\n+            mustEqual(3, k);\n@@ -1721,1 +1712,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1723,5 +1714,5 @@\n-            q.add(new Integer(3));\n-            q.add(new Integer(2));\n-            q.add(new Integer(1));\n-            Iterator it = q.descendingIterator();\n-            assertEquals(it.next(), new Integer(1));\n+            mustAdd(q, three);\n+            mustAdd(q, two);\n+            mustAdd(q, one);\n+            Iterator<? extends Item> it = q.descendingIterator();\n+            mustEqual(it.next(), one);\n@@ -1729,1 +1720,1 @@\n-            assertEquals(it.next(), new Integer(2));\n+            mustEqual(it.next(), two);\n@@ -1731,2 +1722,2 @@\n-            assertEquals(it.next(), new Integer(2));\n-            assertEquals(it.next(), new Integer(3));\n+            mustEqual(it.next(), two);\n+            mustEqual(it.next(), three);\n@@ -1743,1 +1734,1 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1754,1 +1745,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -1765,1 +1756,1 @@\n-                    assertEquals(0, q.remainingCapacity());\n+                    mustEqual(0, q.remainingCapacity());\n@@ -1780,1 +1771,1 @@\n-        final LinkedBlockingDeque q = new LinkedBlockingDeque(2);\n+        final LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>(2);\n@@ -1804,2 +1795,2 @@\n-        Queue x = populatedDeque(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedDeque(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -1808,2 +1799,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -1813,1 +1804,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -1822,2 +1813,2 @@\n-        LinkedBlockingDeque q = populatedDeque(SIZE);\n-        ArrayList l = new ArrayList();\n+        LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -1825,2 +1816,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, l.size());\n@@ -1828,1 +1819,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -1832,2 +1823,2 @@\n-        assertTrue(q.contains(zero));\n-        assertTrue(q.contains(one));\n+        mustContain(q, zero);\n+        mustContain(q, one);\n@@ -1836,2 +1827,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -1839,1 +1830,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -1846,1 +1837,1 @@\n-        final LinkedBlockingDeque q = populatedDeque(SIZE);\n+        final LinkedBlockingDeque<Item> q = populatedDeque(SIZE);\n@@ -1849,1 +1840,1 @@\n-                q.put(new Integer(SIZE + 1));\n+                q.put(new Item(SIZE + 1));\n@@ -1853,1 +1844,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -1857,1 +1848,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -1866,1 +1857,1 @@\n-        LinkedBlockingDeque q = new LinkedBlockingDeque();\n+        LinkedBlockingDeque<Item> q = new LinkedBlockingDeque<Item>();\n@@ -1869,2 +1860,2 @@\n-                assertTrue(q.offer(new Integer(j)));\n-            ArrayList l = new ArrayList();\n+                mustOffer(q, j);\n+            ArrayList<Item> l = new ArrayList<Item>();\n@@ -1873,2 +1864,2 @@\n-            assertEquals(k, l.size());\n-            assertEquals(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n@@ -1876,1 +1867,1 @@\n-                assertEquals(l.get(j), new Integer(j));\n+                mustEqual(l.get(j), j);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingDequeTest.java","additions":319,"deletions":328,"binary":false,"changes":647,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                     () -> new LinkedBlockingQueue().spliterator().getComparator());\n+                     () -> new LinkedBlockingQueue<Item>().spliterator().getComparator());\n@@ -61,2 +61,2 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue();\n-        Spliterator s = q.spliterator();\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>();\n+        Spliterator<Item> s = q.spliterator();\n@@ -67,1 +67,1 @@\n-        assertEquals(required, characteristics & required);\n+        mustEqual(required, characteristics & required);\n@@ -69,1 +69,1 @@\n-        assertEquals(0, characteristics\n+        mustEqual(0, characteristics\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingQueue8Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -86,1 +86,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -88,2 +88,2 @@\n-    private static LinkedBlockingQueue<Integer> populatedQueue(int n) {\n-        LinkedBlockingQueue<Integer> q = new LinkedBlockingQueue<>(n);\n+    private static LinkedBlockingQueue<Item> populatedQueue(int n) {\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<>(n);\n@@ -92,1 +92,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -94,3 +94,3 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peek());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peek());\n@@ -105,2 +105,2 @@\n-        assertEquals(SIZE, new LinkedBlockingQueue(SIZE).remainingCapacity());\n-        assertEquals(Integer.MAX_VALUE, new LinkedBlockingQueue().remainingCapacity());\n+        mustEqual(SIZE, new LinkedBlockingQueue<Item>(SIZE).remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, new LinkedBlockingQueue<Item>().remainingCapacity());\n@@ -114,1 +114,1 @@\n-            new LinkedBlockingQueue(0);\n+            new LinkedBlockingQueue<Item>(0);\n@@ -124,1 +124,1 @@\n-            new LinkedBlockingQueue(null);\n+            new LinkedBlockingQueue<Item>(null);\n@@ -133,1 +133,1 @@\n-        Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        Collection<Item> elements = Arrays.asList(new Item[SIZE]);\n@@ -135,1 +135,1 @@\n-            new LinkedBlockingQueue(elements);\n+            new LinkedBlockingQueue<Item>(elements);\n@@ -145,4 +145,3 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -150,1 +149,1 @@\n-            new LinkedBlockingQueue(elements);\n+            new LinkedBlockingQueue<Item>(elements);\n@@ -159,1 +158,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(Arrays.asList(items));\n@@ -161,4 +161,1 @@\n-            ints[i] = new Integer(i);\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -171,1 +168,1 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(2);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(2);\n@@ -173,1 +170,1 @@\n-        assertEquals(\"should have room for 2\", 2, q.remainingCapacity());\n+        mustEqual(2, q.remainingCapacity());\n@@ -178,1 +175,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -186,1 +183,1 @@\n-        BlockingQueue q = populatedQueue(SIZE);\n+        BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -188,3 +185,3 @@\n-            assertEquals(i, q.remainingCapacity());\n-            assertEquals(SIZE, q.size() + q.remainingCapacity());\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remainingCapacity());\n+            mustEqual(SIZE, q.size() + q.remainingCapacity());\n+            mustEqual(i, q.remove());\n@@ -193,3 +190,3 @@\n-            assertEquals(SIZE - i, q.remainingCapacity());\n-            assertEquals(SIZE, q.size() + q.remainingCapacity());\n-            assertTrue(q.add(i));\n+            mustEqual(SIZE - i, q.remainingCapacity());\n+            mustEqual(SIZE, q.size() + q.remainingCapacity());\n+            mustAdd(q, i);\n@@ -203,1 +200,1 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(1);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(1);\n@@ -212,1 +209,1 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE);\n@@ -214,2 +211,2 @@\n-            assertTrue(q.add(new Integer(i)));\n-        assertEquals(0, q.remainingCapacity());\n+            mustAdd(q, i);\n+        mustEqual(0, q.remainingCapacity());\n@@ -217,1 +214,1 @@\n-            q.add(new Integer(SIZE));\n+            q.add(new Item(SIZE));\n@@ -226,1 +223,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -238,5 +235,3 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE);\n+        Item[] items = new Item[2]; items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -253,5 +248,3 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE - 1);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE - 1);\n+        Item[] items = defaultItems;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -268,5 +261,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE);\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE);\n@@ -274,1 +265,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -276,1 +267,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -283,1 +274,1 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE);\n@@ -285,1 +276,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -287,1 +278,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -289,1 +280,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -296,1 +287,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(SIZE);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(SIZE);\n@@ -301,3 +292,3 @@\n-                    q.put(i);\n-                assertEquals(SIZE, q.size());\n-                assertEquals(0, q.remainingCapacity());\n+                    q.put(itemFor(i));\n+                mustEqual(SIZE, q.size());\n+                mustEqual(0, q.remainingCapacity());\n@@ -307,1 +298,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -314,1 +305,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -324,2 +315,2 @@\n-        assertEquals(SIZE, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(SIZE, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -333,1 +324,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(2);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(2);\n@@ -339,1 +330,1 @@\n-                    q.put(i);\n+                    q.put(itemFor(i));\n@@ -341,1 +332,1 @@\n-                q.put(86);\n+                q.put(eightysix);\n@@ -345,1 +336,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -352,1 +343,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -359,2 +350,2 @@\n-        assertEquals(0, q.remainingCapacity());\n-        assertEquals(0, q.take());\n+        mustEqual(0, q.remainingCapacity());\n+        mustEqual(0, q.take());\n@@ -366,1 +357,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -373,1 +364,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(2);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(2);\n@@ -377,2 +368,2 @@\n-                q.put(new Object());\n-                q.put(new Object());\n+                q.put(zero);\n+                q.put(one);\n@@ -381,1 +372,1 @@\n-                assertFalse(q.offer(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offer(two, timeoutMillis(), MILLISECONDS));\n@@ -386,1 +377,1 @@\n-                    q.offer(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offer(three, randomTimeout(), randomTimeUnit());\n@@ -393,1 +384,1 @@\n-                    q.offer(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offer(two, LONGER_DELAY_MS, MILLISECONDS);\n@@ -409,1 +400,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -411,1 +402,1 @@\n-            assertEquals(i, q.take());\n+            mustEqual(i, q.take());\n@@ -419,1 +410,1 @@\n-        final BlockingQueue q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -423,1 +414,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.take());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.take());\n@@ -450,1 +441,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -452,1 +443,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -461,1 +452,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -463,1 +454,1 @@\n-            assertEquals(i, q.poll(0, MILLISECONDS));\n+            mustEqual(i, q.poll(0, MILLISECONDS));\n@@ -472,1 +463,1 @@\n-        LinkedBlockingQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -475,1 +466,1 @@\n-            assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -489,1 +480,1 @@\n-        final BlockingQueue<Integer> q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -494,1 +485,1 @@\n-                    assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -522,1 +513,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -524,2 +515,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -536,1 +527,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -538,2 +529,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -551,1 +542,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -553,1 +544,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -565,6 +556,6 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue();\n-        assertTrue(q.add(new Integer(1)));\n-        assertTrue(q.add(new Integer(2)));\n-        assertTrue(q.remove(new Integer(1)));\n-        assertTrue(q.remove(new Integer(2)));\n-        assertTrue(q.add(new Integer(3)));\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>();\n+        assertTrue(q.add(one));\n+        assertTrue(q.add(two));\n+        mustRemove(q, one);\n+        mustRemove(q, two);\n+        mustAdd(q, three);\n@@ -578,1 +569,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -580,1 +571,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -582,1 +573,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -590,1 +581,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -593,2 +584,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, q.remainingCapacity());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, q.remainingCapacity());\n@@ -606,2 +597,2 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n-        LinkedBlockingQueue p = new LinkedBlockingQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> p = new LinkedBlockingQueue<Item>(SIZE);\n@@ -611,1 +602,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -620,2 +611,2 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n-        LinkedBlockingQueue p = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> p = populatedQueue(SIZE);\n@@ -630,1 +621,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -640,2 +631,2 @@\n-            LinkedBlockingQueue q = populatedQueue(SIZE);\n-            LinkedBlockingQueue p = populatedQueue(i);\n+            LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+            LinkedBlockingQueue<Item> p = populatedQueue(i);\n@@ -643,1 +634,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -645,2 +636,1 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.remove());\n@@ -655,1 +645,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -667,5 +657,5 @@\n-        LinkedBlockingQueue<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -680,1 +670,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -691,2 +681,2 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -695,2 +685,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -701,2 +691,2 @@\n-            assertEquals(it.next(), q.take());\n-        assertEquals(i, SIZE);\n+            mustEqual(it.next(), q.take());\n+        mustEqual(i, SIZE);\n@@ -710,1 +700,1 @@\n-        assertIteratorExhausted(new LinkedBlockingQueue().iterator());\n+        assertIteratorExhausted(new LinkedBlockingQueue<Item>().iterator());\n@@ -717,1 +707,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(3);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(3);\n@@ -722,1 +712,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -736,1 +726,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(3);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(3);\n@@ -740,1 +730,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -742,2 +732,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -745,1 +735,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -752,1 +742,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(3);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(3);\n@@ -756,1 +746,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -760,1 +750,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -767,1 +757,1 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -778,1 +768,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(2);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(2);\n@@ -789,1 +779,1 @@\n-                    assertEquals(0, q.remainingCapacity());\n+                    mustEqual(0, q.remainingCapacity());\n@@ -804,1 +794,1 @@\n-        final LinkedBlockingQueue q = new LinkedBlockingQueue(2);\n+        final LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>(2);\n@@ -828,2 +818,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -832,2 +822,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -837,1 +827,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -846,2 +836,2 @@\n-        LinkedBlockingQueue q = populatedQueue(SIZE);\n-        ArrayList l = new ArrayList();\n+        LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -849,2 +839,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, l.size());\n@@ -852,1 +842,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -856,2 +846,2 @@\n-        assertTrue(q.contains(zero));\n-        assertTrue(q.contains(one));\n+        mustContain(q, zero);\n+        mustContain(q, one);\n@@ -860,2 +850,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -863,1 +853,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -870,1 +860,1 @@\n-        final LinkedBlockingQueue q = populatedQueue(SIZE);\n+        final LinkedBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -873,1 +863,1 @@\n-                q.put(new Integer(SIZE + 1));\n+                q.put(new Item(SIZE + 1));\n@@ -877,1 +867,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -881,1 +871,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -890,1 +880,1 @@\n-        LinkedBlockingQueue q = new LinkedBlockingQueue();\n+        LinkedBlockingQueue<Item> q = new LinkedBlockingQueue<Item>();\n@@ -893,2 +883,2 @@\n-                assertTrue(q.offer(new Integer(j)));\n-            ArrayList l = new ArrayList();\n+                mustOffer(q, j);\n+            ArrayList<Item> l = new ArrayList<Item>();\n@@ -897,2 +887,2 @@\n-            assertEquals(k, l.size());\n-            assertEquals(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n@@ -900,1 +890,1 @@\n-                assertEquals(l.get(j), new Integer(j));\n+                mustEqual(l.get(j), j);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingQueueTest.java","additions":169,"deletions":179,"binary":false,"changes":348,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -60,0 +60,1 @@\n+            @SuppressWarnings(\"unchecked\")\n@@ -77,1 +78,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -79,2 +80,2 @@\n-    private static LinkedList<Integer> populatedQueue(int n) {\n-        LinkedList<Integer> q = new LinkedList<>();\n+    private static LinkedList<Item> populatedQueue(int n) {\n+        LinkedList<Item> q = new LinkedList<>();\n@@ -83,1 +84,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -85,3 +86,3 @@\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peekFirst());\n-        assertEquals((Integer) (n - 1), q.peekLast());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peekFirst());\n+        mustEqual((n - 1), q.peekLast());\n@@ -95,1 +96,1 @@\n-        assertEquals(0, new LinkedList().size());\n+        mustEqual(0, new LinkedList<Item>().size());\n@@ -103,1 +104,1 @@\n-            new LinkedList((Collection)null);\n+            new LinkedList<Item>((Collection<Item>)null);\n@@ -112,1 +113,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        LinkedList<Item> q = new LinkedList<Item>(Arrays.asList(items));\n@@ -114,4 +116,1 @@\n-            ints[i] = i;\n-        LinkedList q = new LinkedList(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -124,1 +123,1 @@\n-        LinkedList q = new LinkedList();\n+        LinkedList<Item> q = new LinkedList<Item>();\n@@ -126,1 +125,1 @@\n-        q.add(new Integer(1));\n+        q.add(one);\n@@ -128,1 +127,1 @@\n-        q.add(new Integer(2));\n+        q.add(two);\n@@ -138,1 +137,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -140,1 +139,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -144,2 +143,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -153,1 +152,1 @@\n-        LinkedList q = new LinkedList();\n+        LinkedList<Item> q = new LinkedList<Item>();\n@@ -163,3 +162,3 @@\n-        LinkedList q = new LinkedList();\n-        assertTrue(q.offer(new Integer(0)));\n-        assertTrue(q.offer(new Integer(1)));\n+        LinkedList<Item> q = new LinkedList<Item>();\n+        mustOffer(q, zero);\n+        mustOffer(q, one);\n@@ -172,1 +171,1 @@\n-        LinkedList q = new LinkedList();\n+        LinkedList<Item> q = new LinkedList<Item>();\n@@ -174,2 +173,2 @@\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(new Integer(i)));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -183,1 +182,1 @@\n-        LinkedList q = new LinkedList();\n+        LinkedList<Item> q = new LinkedList<Item>();\n@@ -194,5 +193,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = i;\n-        LinkedList q = new LinkedList();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        LinkedList<Item> q = new LinkedList<Item>();\n@@ -200,1 +197,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -202,1 +199,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -209,4 +206,4 @@\n-        LinkedList l = new LinkedList();\n-        l.add(new Object());\n-        LinkedList m = new LinkedList();\n-        m.add(new Object());\n+        LinkedList<Item> l = new LinkedList<Item>();\n+        l.add(zero);\n+        LinkedList<Item> m = new LinkedList<Item>();\n+        m.add(one);\n@@ -223,4 +220,4 @@\n-        LinkedList l = new LinkedList();\n-        l.add(new Object());\n-        LinkedList m = new LinkedList();\n-        m.add(new Object());\n+        LinkedList<Item> l = new LinkedList<Item>();\n+        l.add(zero);\n+        LinkedList<Item> m = new LinkedList<Item>();\n+        m.add(one);\n@@ -237,1 +234,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -239,1 +236,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -248,1 +245,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -250,2 +247,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -262,1 +259,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -264,2 +261,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -277,1 +274,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -279,1 +276,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -291,1 +288,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -293,4 +290,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove((Integer)i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -299,5 +296,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove((Integer)i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove((Integer)(i + 1)));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -312,1 +309,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -314,1 +311,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -316,1 +313,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -324,1 +321,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -327,2 +324,2 @@\n-        assertEquals(0, q.size());\n-        assertTrue(q.add(new Integer(1)));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -338,2 +335,2 @@\n-        LinkedList q = populatedQueue(SIZE);\n-        LinkedList p = new LinkedList();\n+        LinkedList<Item> q = populatedQueue(SIZE);\n+        LinkedList<Item> p = new LinkedList<Item>();\n@@ -343,1 +340,1 @@\n-            assertTrue(p.add(new Integer(i)));\n+            mustAdd(p, i);\n@@ -352,2 +349,2 @@\n-        LinkedList q = populatedQueue(SIZE);\n-        LinkedList p = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n+        LinkedList<Item> p = populatedQueue(SIZE);\n@@ -362,1 +359,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -372,2 +369,2 @@\n-            LinkedList q = populatedQueue(SIZE);\n-            LinkedList p = populatedQueue(i);\n+            LinkedList<Item> q = populatedQueue(SIZE);\n+            LinkedList<Item> p = populatedQueue(i);\n@@ -375,1 +372,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -377,2 +374,1 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.remove());\n@@ -387,1 +383,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -399,5 +395,5 @@\n-        LinkedList<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        LinkedList<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -412,2 +408,2 @@\n-        LinkedList l = new LinkedList();\n-        l.add(new Object());\n+        LinkedList<Item> l = new LinkedList<Item>();\n+        l.add(zero);\n@@ -415,1 +411,1 @@\n-            l.toArray((Object[])null);\n+            l.toArray((Item[])null);\n@@ -424,2 +420,2 @@\n-        LinkedList l = new LinkedList();\n-        l.add(new Integer(5));\n+        LinkedList<Item> l = new LinkedList<Item>();\n+        l.add(five);\n@@ -436,2 +432,2 @@\n-        LinkedList q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        LinkedList<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -440,2 +436,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -449,1 +445,1 @@\n-        assertIteratorExhausted(new LinkedList().iterator());\n+        assertIteratorExhausted(new LinkedList<Item>().iterator());\n@@ -456,4 +452,4 @@\n-        final LinkedList q = new LinkedList();\n-        q.add(new Integer(1));\n-        q.add(new Integer(2));\n-        q.add(new Integer(3));\n+        final LinkedList<Item> q = new LinkedList<Item>();\n+        q.add(one);\n+        q.add(two);\n+        q.add(three);\n@@ -461,2 +457,2 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -465,1 +461,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -472,6 +468,6 @@\n-        final LinkedList q = new LinkedList();\n-        q.add(new Integer(1));\n-        q.add(new Integer(2));\n-        q.add(new Integer(3));\n-        Iterator it = q.iterator();\n-        assertEquals(1, it.next());\n+        final LinkedList<Item> q = new LinkedList<Item>();\n+        q.add(one);\n+        q.add(two);\n+        q.add(three);\n+        Iterator<? extends Item> it = q.iterator();\n+        mustEqual(1, it.next());\n@@ -480,2 +476,2 @@\n-        assertEquals(2, it.next());\n-        assertEquals(3, it.next());\n+        mustEqual(2, it.next());\n+        mustEqual(3, it.next());\n@@ -489,1 +485,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -491,1 +487,1 @@\n-        Iterator it = q.descendingIterator();\n+        Iterator<? extends Item> it = q.descendingIterator();\n@@ -493,1 +489,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -496,1 +492,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -508,4 +504,4 @@\n-        final LinkedList q = new LinkedList();\n-        q.add(new Integer(3));\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n+        final LinkedList<Item> q = new LinkedList<Item>();\n+        q.add(three);\n+        q.add(two);\n+        q.add(one);\n@@ -513,2 +509,2 @@\n-        for (Iterator it = q.descendingIterator(); it.hasNext();) {\n-            assertEquals(++k, it.next());\n+        for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext();) {\n+            mustEqual(++k, it.next());\n@@ -517,1 +513,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -524,1 +520,1 @@\n-        final LinkedList q = new LinkedList();\n+        final LinkedList<Item> q = new LinkedList<Item>();\n@@ -528,1 +524,1 @@\n-        Iterator it = q.descendingIterator();\n+        Iterator<? extends Item> it = q.descendingIterator();\n@@ -541,1 +537,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -552,1 +548,1 @@\n-        LinkedList q = populatedQueue(3);\n+        LinkedList<Item> q = populatedQueue(3);\n@@ -561,1 +557,1 @@\n-        LinkedList q = populatedQueue(3);\n+        LinkedList<Item> q = populatedQueue(3);\n@@ -570,1 +566,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -572,1 +568,1 @@\n-            assertEquals(i, q.pop());\n+            mustEqual(i, q.pop());\n@@ -584,3 +580,3 @@\n-        LinkedList q = new LinkedList();\n-        assertTrue(q.offerFirst(new Integer(0)));\n-        assertTrue(q.offerFirst(new Integer(1)));\n+        LinkedList<Item> q = new LinkedList<Item>();\n+        assertTrue(q.offerFirst(zero));\n+        assertTrue(q.offerFirst(one));\n@@ -593,3 +589,3 @@\n-        LinkedList q = new LinkedList();\n-        assertTrue(q.offerLast(new Integer(0)));\n-        assertTrue(q.offerLast(new Integer(1)));\n+        LinkedList<Item> q = new LinkedList<Item>();\n+        assertTrue(q.offerLast(zero));\n+        assertTrue(q.offerLast(one));\n@@ -602,1 +598,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -604,1 +600,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -613,1 +609,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -615,2 +611,2 @@\n-            assertEquals(i, q.peekFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.peekFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -627,1 +623,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -629,2 +625,2 @@\n-            assertEquals(i, q.peekLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.peekLast());\n+            mustEqual(i, q.pollLast());\n@@ -638,1 +634,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -640,2 +636,2 @@\n-            assertEquals(i, q.getFirst());\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.getFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -653,1 +649,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -655,2 +651,2 @@\n-            assertEquals(i, q.getLast());\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.getLast());\n+            mustEqual(i, q.pollLast());\n@@ -669,1 +665,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -671,1 +667,1 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n@@ -674,2 +670,2 @@\n-            assertTrue(q.removeFirstOccurrence(new Integer(i)));\n-            assertFalse(q.removeFirstOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeFirstOccurrence(itemFor(i)));\n+            assertFalse(q.removeFirstOccurrence(itemFor(i + 1)));\n@@ -684,1 +680,1 @@\n-        LinkedList q = populatedQueue(SIZE);\n+        LinkedList<Item> q = populatedQueue(SIZE);\n@@ -686,1 +682,1 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n@@ -689,2 +685,2 @@\n-            assertTrue(q.removeLastOccurrence(new Integer(i)));\n-            assertFalse(q.removeLastOccurrence(new Integer(i + 1)));\n+            assertTrue(q.removeLastOccurrence(itemFor(i)));\n+            assertFalse(q.removeLastOccurrence(itemFor(i + 1)));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedListTest.java","additions":155,"deletions":159,"binary":false,"changes":314,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -83,1 +83,1 @@\n-        assertEquals(0, new LinkedTransferQueue().size());\n+        mustEqual(0, new LinkedTransferQueue().size());\n@@ -103,1 +103,1 @@\n-        Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        Collection<Item> elements = Arrays.asList(new Item[SIZE]);\n@@ -115,4 +115,3 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = i;\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -129,9 +128,6 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i) {\n-            ints[i] = i;\n-        }\n-        List intList = Arrays.asList(ints);\n-        LinkedTransferQueue q\n-            = new LinkedTransferQueue(intList);\n-        assertEquals(q.size(), intList.size());\n-        assertEquals(q.toString(), intList.toString());\n+        Item[] items = defaultItems;\n+        List<Item> intList = Arrays.asList(items);\n+        LinkedTransferQueue<Item> q\n+            = new LinkedTransferQueue<Item>(intList);\n+        mustEqual(q.size(), intList.size());\n+        mustEqual(q.toString(), intList.toString());\n@@ -145,1 +141,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -153,1 +149,1 @@\n-        BlockingQueue q = populatedQueue(SIZE);\n+        BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -155,3 +151,3 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(SIZE - i, q.size());\n-            assertEquals(i, q.remove());\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(SIZE - i, q.size());\n+            mustEqual(i, q.remove());\n@@ -160,3 +156,3 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(i));\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -170,1 +166,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -182,4 +178,2 @@\n-        LinkedTransferQueue q = new LinkedTransferQueue();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = i;\n+        LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -187,1 +181,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -196,5 +190,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i) {\n-            ints[i] = i;\n-        }\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n@@ -203,1 +194,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -205,1 +196,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -213,1 +204,2 @@\n-        LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n+        LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n+        Item[] items = defaultItems;\n@@ -215,3 +207,3 @@\n-            assertEquals(i, q.size());\n-            q.put(i);\n-            assertTrue(q.contains(i));\n+            mustEqual(i, q.size());\n+            q.put(items[i]);\n+            mustContain(q, items[i]);\n@@ -225,1 +217,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -227,1 +219,1 @@\n-            assertEquals(i, (int) q.take());\n+            mustEqual(i, q.take());\n@@ -235,1 +227,1 @@\n-        final BlockingQueue q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -239,1 +231,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.take());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.take());\n@@ -266,1 +258,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -268,1 +260,1 @@\n-            assertEquals(i, (int) q.poll());\n+            mustEqual(i, q.poll());\n@@ -278,1 +270,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -280,1 +272,1 @@\n-            assertEquals(i, (int) q.poll(0, MILLISECONDS));\n+            mustEqual(i, q.poll(0, MILLISECONDS));\n@@ -290,1 +282,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -293,1 +285,1 @@\n-            assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -307,1 +299,1 @@\n-        final BlockingQueue<Integer> q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -312,1 +304,1 @@\n-                    assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -341,1 +333,1 @@\n-        final BlockingQueue<Integer> q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -346,1 +338,1 @@\n-                    assertEquals(i, (int) q.poll(randomTimeout(), randomTimeUnit()));\n+                    mustEqual(i, q.poll(randomTimeout(), randomTimeUnit()));\n@@ -362,1 +354,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -364,2 +356,2 @@\n-            assertEquals(i, (int) q.peek());\n-            assertEquals(i, (int) q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -367,1 +359,1 @@\n-                       i != (int) q.peek());\n+                       i != q.peek().value);\n@@ -377,1 +369,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -379,2 +371,2 @@\n-            assertEquals(i, (int) q.element());\n-            assertEquals(i, (int) q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -393,1 +385,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -395,1 +387,1 @@\n-            assertEquals(i, (int) q.remove());\n+            mustEqual(i, q.remove());\n@@ -408,7 +400,7 @@\n-        LinkedTransferQueue q = new LinkedTransferQueue();\n-        assertTrue(q.add(one));\n-        assertTrue(q.add(two));\n-        assertTrue(q.remove(one));\n-        assertTrue(q.remove(two));\n-        assertTrue(q.add(three));\n-        assertSame(q.take(), three);\n+        LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n+        mustAdd(q, one);\n+        mustAdd(q, two);\n+        mustRemove(q, one);\n+        mustRemove(q, two);\n+        mustAdd(q, three);\n+        mustEqual(q.take(), three);\n@@ -421,1 +413,1 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -423,3 +415,3 @@\n-            assertTrue(q.contains(i));\n-            assertEquals(i, (int) q.poll());\n-            assertFalse(q.contains(i));\n+            mustContain(q, i);\n+            mustEqual(i, q.poll());\n+            mustNotContain(q, i);\n@@ -433,1 +425,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -436,1 +428,1 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -439,2 +431,2 @@\n-        assertEquals(1, q.size());\n-        assertTrue(q.contains(one));\n+        mustEqual(1, q.size());\n+        mustContain(q, one);\n@@ -449,2 +441,2 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n-        LinkedTransferQueue<Integer> p = new LinkedTransferQueue<>();\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> p = new LinkedTransferQueue<>();\n@@ -454,1 +446,1 @@\n-            p.add(i);\n+            mustAdd(p, i);\n@@ -464,2 +456,2 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n-        LinkedTransferQueue p = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> p = populatedQueue(SIZE);\n@@ -474,1 +466,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -485,2 +477,2 @@\n-            LinkedTransferQueue q = populatedQueue(SIZE);\n-            LinkedTransferQueue p = populatedQueue(i);\n+            LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n+            LinkedTransferQueue<Item> p = populatedQueue(i);\n@@ -488,1 +480,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -490,1 +482,1 @@\n-                assertFalse(q.contains(p.remove()));\n+                mustNotContain(q, p.remove());\n@@ -499,1 +491,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -511,5 +503,5 @@\n-        LinkedTransferQueue<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -524,1 +516,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -535,2 +527,2 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -539,2 +531,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -545,2 +537,2 @@\n-            assertEquals(it.next(), q.take());\n-        assertEquals(i, SIZE);\n+            mustEqual(it.next(), q.take());\n+        mustEqual(i, SIZE);\n@@ -561,1 +553,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -566,1 +558,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -580,2 +572,2 @@\n-        final LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -585,1 +577,1 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -587,2 +579,2 @@\n-        for (Integer n : q) {\n-            assertEquals(++k, (int) n);\n+        for (Item n : q) {\n+            mustEqual(++k, n);\n@@ -590,1 +582,1 @@\n-        assertEquals(3, k);\n+        mustEqual(3, k);\n@@ -597,1 +589,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -601,1 +593,1 @@\n-        for (Iterator it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n@@ -605,1 +597,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -612,1 +604,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -623,1 +615,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -649,1 +641,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -676,2 +668,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -680,2 +672,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -685,1 +677,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -694,1 +686,1 @@\n-        LinkedTransferQueue q = populatedQueue(SIZE);\n+        LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -697,2 +689,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, l.size());\n@@ -700,1 +692,1 @@\n-            assertEquals(i, l.get(i));\n+            mustEqual(i, l.get(i));\n@@ -705,2 +697,2 @@\n-        assertTrue(q.contains(zero));\n-        assertTrue(q.contains(one));\n+        mustContain(q, zero);\n+        mustContain(q, one);\n@@ -709,2 +701,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -712,1 +704,1 @@\n-            assertEquals(i, l.get(i));\n+            mustEqual(i, l.get(i));\n@@ -720,1 +712,1 @@\n-        final LinkedTransferQueue q = populatedQueue(SIZE);\n+        final LinkedTransferQueue<Item> q = populatedQueue(SIZE);\n@@ -723,1 +715,1 @@\n-                q.put(SIZE + 1);\n+                q.put(new Item(SIZE + 1));\n@@ -729,1 +721,1 @@\n-            assertEquals(i, l.get(i));\n+            mustEqual(i, l.get(i));\n@@ -738,1 +730,1 @@\n-        LinkedTransferQueue q = new LinkedTransferQueue();\n+        LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -741,1 +733,1 @@\n-                assertTrue(q.offer(j));\n+                mustOffer(q, j);\n@@ -746,2 +738,2 @@\n-            assertEquals(k, l.size());\n-            assertEquals(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n@@ -749,1 +741,1 @@\n-                assertEquals(j, l.get(j));\n+                mustEqual(j, l.get(j));\n@@ -759,2 +751,2 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n-        assertEquals(0, q.getWaitingConsumerCount());\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n+        mustEqual(0, q.getWaitingConsumerCount());\n@@ -769,1 +761,1 @@\n-                assertEquals(0, q.getWaitingConsumerCount());\n+                mustEqual(0, q.getWaitingConsumerCount());\n@@ -782,1 +774,1 @@\n-        assertEquals(0, q.getWaitingConsumerCount());\n+        mustEqual(0, q.getWaitingConsumerCount());\n@@ -793,1 +785,1 @@\n-            LinkedTransferQueue q = new LinkedTransferQueue();\n+            LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -804,1 +796,1 @@\n-        final LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n@@ -829,1 +821,1 @@\n-        final LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n@@ -834,2 +826,2 @@\n-                assertFalse(q.contains(four));\n-                assertEquals(1, q.size());\n+                mustNotContain(q, four);\n+                mustEqual(1, q.size());\n@@ -848,1 +840,1 @@\n-        assertEquals(2, q.size());\n+        mustEqual(2, q.size());\n@@ -851,1 +843,1 @@\n-        assertEquals(1, q.size());\n+        mustEqual(1, q.size());\n@@ -862,1 +854,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -867,1 +859,1 @@\n-                assertFalse(q.contains(four));\n+                mustNotContain(q, four);\n@@ -874,1 +866,1 @@\n-        assertEquals(1, q.size());\n+        mustEqual(1, q.size());\n@@ -885,1 +877,1 @@\n-        final LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n@@ -896,1 +888,1 @@\n-        assertEquals(1, q.size());\n+        mustEqual(1, q.size());\n@@ -906,1 +898,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -918,1 +910,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Object> q = new LinkedTransferQueue<Object>();\n@@ -930,1 +922,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Object> q = new LinkedTransferQueue<Object>();\n@@ -954,1 +946,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Object> q = new LinkedTransferQueue<Object>();\n@@ -974,1 +966,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Object> q = new LinkedTransferQueue<Object>();\n@@ -1006,1 +998,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Object> q = new LinkedTransferQueue<Object>();\n@@ -1026,1 +1018,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -1039,1 +1031,1 @@\n-        assertEquals(2, q.size());\n+        mustEqual(2, q.size());\n@@ -1051,1 +1043,1 @@\n-        final LinkedTransferQueue q = new LinkedTransferQueue();\n+        final LinkedTransferQueue<Item> q = new LinkedTransferQueue<Item>();\n@@ -1053,1 +1045,1 @@\n-        assertEquals(1, q.size());\n+        mustEqual(1, q.size());\n@@ -1057,1 +1049,1 @@\n-        assertEquals(1, q.size());\n+        mustEqual(1, q.size());\n@@ -1063,2 +1055,2 @@\n-    private LinkedTransferQueue<Integer> populatedQueue(int n) {\n-        LinkedTransferQueue<Integer> q = new LinkedTransferQueue<>();\n+    private LinkedTransferQueue<Item> populatedQueue(int n) {\n+        LinkedTransferQueue<Item> q = new LinkedTransferQueue<>();\n@@ -1067,3 +1059,3 @@\n-            assertEquals(i, q.size());\n-            assertTrue(q.offer(i));\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(i, q.size());\n+            mustOffer(q, i);\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedTransferQueueTest.java","additions":162,"deletions":170,"binary":false,"changes":332,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+@SuppressWarnings(\"unchecked\")\n@@ -71,1 +72,1 @@\n-            assertEquals(0, m.size());\n+            mustEqual(0, m.size());\n@@ -76,1 +77,1 @@\n-            assertEquals(1, m.size());\n+            mustEqual(1, m.size());\n@@ -171,1 +172,1 @@\n-        assertEquals(1, m.size());\n+        mustEqual(1, m.size());\n@@ -202,1 +203,1 @@\n-            assertEquals(m2.get(elt), m1.get(elt));\n+            mustEqual(m2.get(elt), m1.get(elt));\n@@ -205,1 +206,1 @@\n-        assertEquals(size1 + size2, m1.size());\n+        mustEqual(size1 + size2, m1.size());\n@@ -220,3 +221,3 @@\n-        assertEquals(size, map.size());\n-        assertEquals(size, clone.size());\n-        assertEquals(map.isEmpty(), clone.isEmpty());\n+        mustEqual(size, map.size());\n+        mustEqual(size, clone.size());\n+        mustEqual(map.isEmpty(), clone.isEmpty());\n@@ -225,2 +226,2 @@\n-        assertEquals(size, map.size());\n-        assertEquals(size + 1, clone.size());\n+        mustEqual(size, map.size());\n+        mustEqual(size + 1, clone.size());\n@@ -229,2 +230,2 @@\n-        assertEquals(size, map.size());\n-        assertEquals(0, clone.size());\n+        mustEqual(size, map.size());\n+        mustEqual(0, clone.size());\n@@ -264,1 +265,1 @@\n-                    assertEquals(invocations[0], invocations[1]);\n+                    mustEqual(invocations[0], invocations[1]);\n@@ -282,1 +283,1 @@\n-                    assertEquals(invocations[0], invocations[1]);\n+                    mustEqual(invocations[0], invocations[1]);\n@@ -296,1 +297,1 @@\n-        assertEquals(expectedSum.get(), sum);\n+        mustEqual(expectedSum.get(), sum);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/MapTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-        Integer one = new Integer(1);\n-        Integer two = new Integer(2);\n+        Item one = new Item(1);\n+        Item two = new Item(2);\n@@ -76,1 +76,1 @@\n-        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest,Integer> a =\n+        AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest,Item> a =\n@@ -78,1 +78,1 @@\n-                AtomicReferenceFieldUpdaterTest.class, Integer.class, \"x\");\n+                AtomicReferenceFieldUpdaterTest.class, Item.class, \"x\");\n@@ -192,1 +192,1 @@\n-            AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest,Integer> a =\n+            AtomicReferenceFieldUpdater<AtomicReferenceFieldUpdaterTest,Item> a =\n@@ -195,1 +195,1 @@\n-                    Integer.class, \"protectedField\");\n+                    Item.class, \"protectedField\");\n@@ -198,3 +198,3 @@\n-            assertTrue(a.compareAndSet(this, two, m4));\n-            assertSame(m4, a.get(this));\n-            assertFalse(a.compareAndSet(this, m5, seven));\n+            assertTrue(a.compareAndSet(this, two, minusFour));\n+            assertSame(minusFour, a.get(this));\n+            assertFalse(a.compareAndSet(this, minusFive, seven));\n@@ -202,1 +202,1 @@\n-            assertTrue(a.compareAndSet(this, m4, seven));\n+            assertTrue(a.compareAndSet(this, minusFour, seven));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/NonNestmates.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-        for (int size = 1; size < nine; size++) {\n+        for (int size = 1; size < 9; size++) {\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/PhaserTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -86,0 +86,1 @@\n+            @SuppressWarnings(\"unchecked\")\n@@ -92,1 +93,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -106,0 +107,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -113,1 +115,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -115,3 +117,3 @@\n-    private static PriorityBlockingQueue<Integer> populatedQueue(int n) {\n-        PriorityBlockingQueue<Integer> q =\n-            new PriorityBlockingQueue<Integer>(n);\n+    private static PriorityBlockingQueue<Item> populatedQueue(int n) {\n+        PriorityBlockingQueue<Item> q =\n+            new PriorityBlockingQueue<Item>(n);\n@@ -120,1 +122,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -122,1 +124,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -124,3 +126,3 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peek());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peek());\n@@ -134,2 +136,2 @@\n-        assertEquals(Integer.MAX_VALUE,\n-                     new PriorityBlockingQueue(SIZE).remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE,\n+                     new PriorityBlockingQueue<Item>(SIZE).remainingCapacity());\n@@ -143,1 +145,1 @@\n-            new PriorityBlockingQueue(0);\n+            new PriorityBlockingQueue<Item>(0);\n@@ -153,1 +155,1 @@\n-            new PriorityBlockingQueue(null);\n+            new PriorityBlockingQueue<Item>(null);\n@@ -162,1 +164,1 @@\n-        Collection<Integer> elements = Arrays.asList(new Integer[SIZE]);\n+        Collection<Item> elements = Arrays.asList(new Item[SIZE]);\n@@ -164,1 +166,1 @@\n-            new PriorityBlockingQueue(elements);\n+            new PriorityBlockingQueue<Item>(elements);\n@@ -173,4 +175,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = i;\n-        Collection<Integer> elements = Arrays.asList(ints);\n+        Item[] items = new Item[2]; items[0] = zero;\n+        Collection<Item> elements = Arrays.asList(items);\n@@ -178,1 +178,1 @@\n-            new PriorityBlockingQueue(elements);\n+            new PriorityBlockingQueue<Item>(elements);\n@@ -187,1 +187,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(Arrays.asList(items));\n@@ -189,4 +190,1 @@\n-            ints[i] = i;\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -200,6 +198,5 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE, cmp);\n-        assertEquals(cmp, q.comparator());\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        q.addAll(Arrays.asList(ints));\n+        @SuppressWarnings(\"unchecked\")\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE, cmp);\n+        mustEqual(cmp, q.comparator());\n+        Item[] items = defaultItems;\n+        q.addAll(Arrays.asList(items));\n@@ -207,1 +204,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -214,1 +211,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(2);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(2);\n@@ -216,1 +213,1 @@\n-        assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n+        mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n@@ -229,1 +226,1 @@\n-        BlockingQueue q = populatedQueue(SIZE);\n+        BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -231,3 +228,3 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(SIZE - i, q.size());\n-            assertEquals(i, q.remove());\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(SIZE - i, q.size());\n+            mustEqual(i, q.remove());\n@@ -236,3 +233,3 @@\n-            assertEquals(Integer.MAX_VALUE, q.remainingCapacity());\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(i));\n+            mustEqual(Integer.MAX_VALUE, q.remainingCapacity());\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -246,1 +243,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(1);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(1);\n@@ -255,1 +252,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(1);\n+        PriorityBlockingQueue<Object> q = new PriorityBlockingQueue<Object>(1);\n@@ -261,1 +258,1 @@\n-            assertEquals(0, q.size());\n+            mustEqual(0, q.size());\n@@ -270,1 +267,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE);\n@@ -272,2 +269,2 @@\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(new Integer(i)));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -281,1 +278,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -293,4 +290,3 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -298,1 +294,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -307,5 +303,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = SIZE - 1; i >= 0; --i)\n-            ints[i] = new Integer(i);\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE);\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE);\n@@ -313,1 +307,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -315,1 +309,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -322,1 +316,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE);\n@@ -324,1 +318,1 @@\n-            Integer x = new Integer(i);\n+            Item x = itemFor(i);\n@@ -326,1 +320,1 @@\n-            assertTrue(q.contains(x));\n+            mustContain(q, x);\n@@ -328,1 +322,1 @@\n-        assertEquals(SIZE, q.size());\n+        mustEqual(SIZE, q.size());\n@@ -335,1 +329,1 @@\n-        final PriorityBlockingQueue q = new PriorityBlockingQueue(2);\n+        final PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(2);\n@@ -340,1 +334,1 @@\n-                    q.put(new Integer(0));\n+                    q.put(zero);\n@@ -344,1 +338,1 @@\n-        assertEquals(size, q.size());\n+        mustEqual(size, q.size());\n@@ -352,1 +346,1 @@\n-        final PriorityBlockingQueue q = new PriorityBlockingQueue(2);\n+        final PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(2);\n@@ -355,4 +349,4 @@\n-                q.put(new Integer(0));\n-                q.put(new Integer(0));\n-                assertTrue(q.offer(new Integer(0), SHORT_DELAY_MS, MILLISECONDS));\n-                assertTrue(q.offer(new Integer(0), LONG_DELAY_MS, MILLISECONDS));\n+                q.put(one);\n+                q.put(two);\n+                assertTrue(q.offer(zero, SHORT_DELAY_MS, MILLISECONDS));\n+                assertTrue(q.offer(zero, LONG_DELAY_MS, MILLISECONDS));\n@@ -368,1 +362,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -370,1 +364,1 @@\n-            assertEquals(i, q.take());\n+            mustEqual(i, q.take());\n@@ -378,1 +372,1 @@\n-        final PriorityBlockingQueue q = populatedQueue(SIZE);\n+        final PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -382,1 +376,1 @@\n-                for (int i = 0; i < SIZE; i++) assertEquals(i, q.take());\n+                for (int i = 0; i < SIZE; i++) mustEqual(i, q.take());\n@@ -409,1 +403,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -411,1 +405,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -420,1 +414,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -422,1 +416,1 @@\n-            assertEquals(i, q.poll(0, MILLISECONDS));\n+            mustEqual(i, q.poll(0, MILLISECONDS));\n@@ -431,1 +425,1 @@\n-        PriorityBlockingQueue<Integer> q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -434,1 +428,1 @@\n-            assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+            mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -448,1 +442,1 @@\n-        final BlockingQueue<Integer> q = populatedQueue(SIZE);\n+        final BlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -453,1 +447,1 @@\n-                    assertEquals(i, (int) q.poll(LONG_DELAY_MS, MILLISECONDS));\n+                    mustEqual(i, q.poll(LONG_DELAY_MS, MILLISECONDS));\n@@ -480,1 +474,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -482,2 +476,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -494,1 +488,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -496,2 +490,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -509,1 +503,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -511,1 +505,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -523,1 +517,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -525,1 +519,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -527,1 +521,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -535,1 +529,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -538,1 +532,1 @@\n-        assertEquals(0, q.size());\n+        mustEqual(0, q.size());\n@@ -541,1 +535,1 @@\n-        assertTrue(q.contains(one));\n+        mustContain(q, one);\n@@ -550,2 +544,2 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n-        PriorityBlockingQueue p = new PriorityBlockingQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> p = new PriorityBlockingQueue<Item>(SIZE);\n@@ -555,1 +549,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -564,2 +558,2 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n-        PriorityBlockingQueue p = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> p = populatedQueue(SIZE);\n@@ -574,1 +568,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -584,2 +578,2 @@\n-            PriorityBlockingQueue q = populatedQueue(SIZE);\n-            PriorityBlockingQueue p = populatedQueue(i);\n+            PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+            PriorityBlockingQueue<Item> p = populatedQueue(i);\n@@ -587,1 +581,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -589,2 +583,2 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                Item x = p.remove();\n+                mustNotContain(q, x);\n@@ -599,1 +593,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -612,6 +606,6 @@\n-        PriorityBlockingQueue<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        Arrays.sort(ints);\n-        for (Integer o : ints)\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        Arrays.sort(items);\n+        for (Item o : items)\n@@ -626,1 +620,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -637,2 +631,2 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -641,2 +635,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -650,1 +644,1 @@\n-        assertIteratorExhausted(new PriorityBlockingQueue().iterator());\n+        assertIteratorExhausted(new PriorityBlockingQueue<Item>().iterator());\n@@ -657,4 +651,4 @@\n-        final PriorityBlockingQueue q = new PriorityBlockingQueue(3);\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(3);\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -662,1 +656,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -667,2 +661,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -676,1 +670,1 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -687,1 +681,1 @@\n-        final PriorityBlockingQueue q = new PriorityBlockingQueue(2);\n+        final PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(2);\n@@ -711,2 +705,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -715,1 +709,1 @@\n-        assertEquals(x.size(), y.size());\n+        mustEqual(x.size(), y.size());\n@@ -718,1 +712,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n@@ -727,2 +721,2 @@\n-        PriorityBlockingQueue q = populatedQueue(SIZE);\n-        ArrayList l = new ArrayList();\n+        PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -730,2 +724,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(SIZE, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(SIZE, l.size());\n@@ -733,1 +727,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -737,2 +731,1 @@\n-        assertTrue(q.contains(zero));\n-        assertTrue(q.contains(one));\n+        mustContain(q, one);\n@@ -741,2 +734,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(2, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(2, l.size());\n@@ -744,1 +737,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -751,1 +744,1 @@\n-        final PriorityBlockingQueue q = populatedQueue(SIZE);\n+        final PriorityBlockingQueue<Item> q = populatedQueue(SIZE);\n@@ -754,1 +747,1 @@\n-                q.put(new Integer(SIZE + 1));\n+                q.put(new Item(SIZE + 1));\n@@ -758,1 +751,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -762,1 +755,1 @@\n-            assertEquals(l.get(i), new Integer(i));\n+            mustEqual(l.get(i), i);\n@@ -771,1 +764,1 @@\n-        PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE * 2);\n+        PriorityBlockingQueue<Item> q = new PriorityBlockingQueue<Item>(SIZE * 2);\n@@ -774,2 +767,2 @@\n-                assertTrue(q.offer(new Integer(j)));\n-            ArrayList l = new ArrayList();\n+                mustOffer(q, j);\n+            ArrayList<Item> l = new ArrayList<Item>();\n@@ -778,2 +771,2 @@\n-            assertEquals(k, l.size());\n-            assertEquals(SIZE - k, q.size());\n+            mustEqual(k, l.size());\n+            mustEqual(SIZE - k, q.size());\n@@ -781,1 +774,1 @@\n-                assertEquals(l.get(j), new Integer(j));\n+                mustEqual(l.get(j), j);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/PriorityBlockingQueueTest.java","additions":150,"deletions":157,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -60,0 +60,1 @@\n+            @SuppressWarnings(\"unchecked\")\n@@ -63,1 +64,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -74,0 +75,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -81,1 +83,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -83,2 +85,2 @@\n-    private static PriorityQueue<Integer> populatedQueue(int n) {\n-        PriorityQueue<Integer> q = new PriorityQueue<>(n);\n+    private static PriorityQueue<Item> populatedQueue(int n) {\n+        PriorityQueue<Item> q = new PriorityQueue<>(n);\n@@ -87,1 +89,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -89,1 +91,1 @@\n-            assertTrue(q.offer(new Integer(i)));\n+            mustOffer(q, i);\n@@ -91,2 +93,2 @@\n-        assertEquals(n, q.size());\n-        assertEquals((Integer) 0, q.peek());\n+        mustEqual(n, q.size());\n+        mustEqual(0, q.peek());\n@@ -100,1 +102,1 @@\n-        assertEquals(0, new PriorityQueue(SIZE).size());\n+        mustEqual(0, new PriorityQueue<Item>(SIZE).size());\n@@ -108,1 +110,1 @@\n-            new PriorityQueue(0);\n+            new PriorityQueue<Item>(0);\n@@ -118,1 +120,1 @@\n-            new PriorityQueue((Collection)null);\n+            new PriorityQueue<Item>((Collection<Item>)null);\n@@ -128,1 +130,1 @@\n-            new PriorityQueue(Arrays.asList(new Integer[SIZE]));\n+            new PriorityQueue<Item>(Arrays.asList(new Item[SIZE]));\n@@ -137,3 +139,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -141,1 +142,1 @@\n-            new PriorityQueue(Arrays.asList(ints));\n+            new PriorityQueue<Item>(Arrays.asList(items));\n@@ -150,1 +151,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(Arrays.asList(items));\n@@ -152,4 +154,1 @@\n-            ints[i] = new Integer(i);\n-        PriorityQueue q = new PriorityQueue(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -163,1 +162,2 @@\n-        PriorityQueue q = new PriorityQueue(SIZE, cmp);\n+        @SuppressWarnings(\"unchecked\")\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(SIZE, cmp);\n@@ -165,4 +165,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        q.addAll(Arrays.asList(ints));\n+        Item[] items = seqItems(SIZE);\n+        q.addAll(Arrays.asList(items));\n@@ -170,1 +168,1 @@\n-            assertEquals(ints[i], q.poll());\n+            mustEqual(items[i], q.poll());\n@@ -177,1 +175,1 @@\n-        PriorityQueue q = new PriorityQueue(2);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(2);\n@@ -179,1 +177,1 @@\n-        q.add(new Integer(1));\n+        q.add(one);\n@@ -181,1 +179,1 @@\n-        q.add(new Integer(2));\n+        q.add(two);\n@@ -191,1 +189,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -193,1 +191,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -197,2 +195,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -206,1 +204,1 @@\n-        PriorityQueue q = new PriorityQueue(1);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(1);\n@@ -217,1 +215,1 @@\n-        PriorityQueue q = new PriorityQueue(1);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(1);\n@@ -228,1 +226,1 @@\n-        PriorityQueue q = new PriorityQueue(1);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(1);\n@@ -237,1 +235,1 @@\n-        PriorityQueue q = new PriorityQueue(1);\n+        PriorityQueue<Object> q = new PriorityQueue<Object>(1);\n@@ -243,1 +241,1 @@\n-            assertEquals(0, q.size());\n+            mustEqual(0, q.size());\n@@ -252,1 +250,1 @@\n-        PriorityQueue q = new PriorityQueue(SIZE);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(SIZE);\n@@ -254,2 +252,2 @@\n-            assertEquals(i, q.size());\n-            assertTrue(q.add(new Integer(i)));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -263,1 +261,1 @@\n-        PriorityQueue q = new PriorityQueue(1);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(1);\n@@ -274,1 +272,1 @@\n-        PriorityQueue q = new PriorityQueue(SIZE);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(SIZE);\n@@ -276,1 +274,1 @@\n-            q.addAll(Arrays.asList(new Integer[SIZE]));\n+            q.addAll(Arrays.asList(new Item[SIZE]));\n@@ -286,4 +284,3 @@\n-        PriorityQueue q = new PriorityQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(SIZE);\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -291,1 +288,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -300,2 +297,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] empty = new Item[0];\n+        Item[] items = new Item[SIZE];\n@@ -303,2 +300,2 @@\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        PriorityQueue q = new PriorityQueue(SIZE);\n+            items[i] = itemFor(SIZE - 1 - i);\n+        PriorityQueue<Item> q = new PriorityQueue<Item>(SIZE);\n@@ -306,1 +303,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -308,1 +305,1 @@\n-            assertEquals(new Integer(i), q.poll());\n+            mustEqual(i, q.poll());\n@@ -315,1 +312,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -317,1 +314,1 @@\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.poll());\n@@ -326,1 +323,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -328,2 +325,2 @@\n-            assertEquals(i, q.peek());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.peek());\n+            mustEqual(i, q.poll());\n@@ -340,1 +337,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -342,2 +339,2 @@\n-            assertEquals(i, q.element());\n-            assertEquals(i, q.poll());\n+            mustEqual(i, q.element());\n+            mustEqual(i, q.poll());\n@@ -355,1 +352,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -357,1 +354,1 @@\n-            assertEquals(i, q.remove());\n+            mustEqual(i, q.remove());\n@@ -369,1 +366,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -371,4 +368,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -377,5 +374,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -390,1 +387,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -392,1 +389,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -394,1 +391,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -402,1 +399,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -405,2 +402,2 @@\n-        assertEquals(0, q.size());\n-        q.add(new Integer(1));\n+        mustEqual(0, q.size());\n+        q.add(one);\n@@ -416,2 +413,2 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n-        PriorityQueue p = new PriorityQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n+        PriorityQueue<Item> p = new PriorityQueue<Item>(SIZE);\n@@ -421,1 +418,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -430,2 +427,2 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n-        PriorityQueue p = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n+        PriorityQueue<Item> p = populatedQueue(SIZE);\n@@ -440,1 +437,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -450,2 +447,2 @@\n-            PriorityQueue q = populatedQueue(SIZE);\n-            PriorityQueue p = populatedQueue(i);\n+            PriorityQueue<Item> q = populatedQueue(SIZE);\n+            PriorityQueue<Item> p = populatedQueue(i);\n@@ -453,1 +450,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -455,2 +452,1 @@\n-                Integer x = (Integer)(p.remove());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.remove());\n@@ -465,1 +461,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -478,6 +474,6 @@\n-        PriorityQueue<Integer> q = populatedQueue(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        Arrays.sort(ints);\n-        for (Integer o : ints)\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        Arrays.sort(items);\n+        for (Item o : items)\n@@ -492,2 +488,2 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n-        Iterator it = q.iterator();\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -496,2 +492,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -505,1 +501,1 @@\n-        assertIteratorExhausted(new PriorityQueue().iterator());\n+        assertIteratorExhausted(new PriorityQueue<Item>().iterator());\n@@ -512,4 +508,4 @@\n-        final PriorityQueue q = new PriorityQueue(3);\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final PriorityQueue<Item> q = new PriorityQueue<Item>(3);\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -517,1 +513,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -522,2 +518,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -531,1 +527,1 @@\n-        PriorityQueue q = populatedQueue(SIZE);\n+        PriorityQueue<Item> q = populatedQueue(SIZE);\n@@ -542,2 +538,2 @@\n-        Queue x = populatedQueue(SIZE);\n-        Queue y = serialClone(x);\n+        Queue<Item> x = populatedQueue(SIZE);\n+        Queue<Item> y = serialClone(x);\n@@ -546,1 +542,1 @@\n-        assertEquals(x.size(), y.size());\n+        mustEqual(x.size(), y.size());\n@@ -549,1 +545,1 @@\n-            assertEquals(x.remove(), y.remove());\n+            mustEqual(x.remove(), y.remove());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/PriorityQueueTest.java","additions":114,"deletions":118,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -950,1 +950,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -1048,1 +1048,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/RecursiveActionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    void checkNotDone(RecursiveTask a) {\n+    void checkNotDone(RecursiveTask<?> a) {\n@@ -152,1 +152,1 @@\n-    void checkCancelled(RecursiveTask a) {\n+    void checkCancelled(RecursiveTask<?> a) {\n@@ -179,1 +179,1 @@\n-    void checkCompletedAbnormally(RecursiveTask a, Throwable t) {\n+    void checkCompletedAbnormally(RecursiveTask<?> a, Throwable t) {\n@@ -778,1 +778,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n@@ -878,1 +878,1 @@\n-                HashSet set = new HashSet();\n+                HashSet<ForkJoinTask<?>> set = new HashSet<ForkJoinTask<?>>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/RecursiveTaskTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-            Callable task = new CheckedCallable<Boolean>() {\n+            Callable<Boolean> task = new CheckedCallable<Boolean>() {\n@@ -159,1 +159,1 @@\n-            Future f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n+            Future<Boolean> f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n@@ -178,1 +178,1 @@\n-            Future f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n+            Future<?> f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n@@ -198,1 +198,1 @@\n-            ScheduledFuture f =\n+            ScheduledFuture<?> f =\n@@ -220,1 +220,1 @@\n-            ScheduledFuture f =\n+            ScheduledFuture<?> f =\n@@ -248,1 +248,1 @@\n-                final ScheduledFuture periodicTask =\n+                final ScheduledFuture<?> periodicTask =\n@@ -294,1 +294,1 @@\n-                final ScheduledFuture periodicTask =\n+                final ScheduledFuture<?> periodicTask =\n@@ -621,1 +621,2 @@\n-            ScheduledFuture[] tasks = new ScheduledFuture[5];\n+            @SuppressWarnings(\"unchecked\")\n+            ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -644,1 +645,2 @@\n-            ScheduledFuture[] tasks = new ScheduledFuture[5];\n+            @SuppressWarnings(\"unchecked\")\n+            ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -672,1 +674,2 @@\n-        final ScheduledFuture[] tasks = new ScheduledFuture[5];\n+        @SuppressWarnings(\"unchecked\")\n+        ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -674,1 +677,1 @@\n-            for (ScheduledFuture task : tasks)\n+            for (ScheduledFuture<?> task : tasks)\n@@ -740,1 +743,1 @@\n-        List<ScheduledFuture> tasks = new ArrayList<>();\n+        List<ScheduledFuture<?>> tasks = new ArrayList<>();\n@@ -748,1 +751,1 @@\n-            assertEquals(new HashSet(tasks), new HashSet(p.getQueue()));\n+            assertEquals(new HashSet<Object>(tasks), new HashSet<Object>(p.getQueue()));\n@@ -758,1 +761,1 @@\n-            assertEquals(new HashSet(tasks), new HashSet(queuedTasks));\n+            assertEquals(new HashSet<Object>(tasks), new HashSet<Object>(queuedTasks));\n@@ -760,1 +763,1 @@\n-        for (ScheduledFuture task : tasks) {\n+        for (ScheduledFuture<?> task : tasks) {\n@@ -1359,1 +1362,1 @@\n-                for (Future future : futures)\n+                for (Future<?> future : futures)\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ScheduledExecutorSubclassTest.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            Callable task = new CheckedCallable<Boolean>() {\n+            Callable<Boolean> task = new CheckedCallable<Boolean>() {\n@@ -102,1 +102,1 @@\n-            Future f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n+            Future<Boolean> f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n@@ -122,1 +122,1 @@\n-            Future f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n+            Future<?> f = p.schedule(task, timeoutMillis(), MILLISECONDS);\n@@ -142,1 +142,1 @@\n-            ScheduledFuture f =\n+            ScheduledFuture<?> f =\n@@ -164,1 +164,1 @@\n-            ScheduledFuture f =\n+            ScheduledFuture<?> f =\n@@ -192,1 +192,1 @@\n-                final ScheduledFuture periodicTask =\n+                final ScheduledFuture<?> periodicTask =\n@@ -238,1 +238,1 @@\n-                final ScheduledFuture periodicTask =\n+                final ScheduledFuture<?> periodicTask =\n@@ -579,1 +579,2 @@\n-            ScheduledFuture[] tasks = new ScheduledFuture[5];\n+            @SuppressWarnings(\"unchecked\")\n+            ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -602,1 +603,2 @@\n-            ScheduledFuture[] tasks = new ScheduledFuture[5];\n+            @SuppressWarnings(\"unchecked\")\n+            ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -630,1 +632,2 @@\n-        final ScheduledFuture[] tasks = new ScheduledFuture[5];\n+        @SuppressWarnings(\"unchecked\")\n+        ScheduledFuture<?>[] tasks = (ScheduledFuture<?>[])new ScheduledFuture[5];\n@@ -632,1 +635,1 @@\n-            for (ScheduledFuture task : tasks)\n+            for (ScheduledFuture<?> task : tasks)\n@@ -699,1 +702,1 @@\n-        List<ScheduledFuture> tasks = new ArrayList<>();\n+        List<ScheduledFuture<?>> tasks = new ArrayList<>();\n@@ -707,1 +710,1 @@\n-            assertEquals(new HashSet(tasks), new HashSet(p.getQueue()));\n+            assertEquals(new HashSet<Object>(tasks), new HashSet<Object>(p.getQueue()));\n@@ -717,1 +720,1 @@\n-            assertEquals(new HashSet(tasks), new HashSet(queuedTasks));\n+            assertEquals(new HashSet<Object>(tasks), new HashSet<Object>(queuedTasks));\n@@ -719,1 +722,1 @@\n-        for (ScheduledFuture task : tasks) {\n+        for (ScheduledFuture<?> task : tasks) {\n@@ -1318,1 +1321,1 @@\n-                for (Future future : futures)\n+                for (Future<?> future : futures)\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ScheduledExecutorTest.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1431,1 +1431,1 @@\n-        final List<CompletableFuture> futures = new ArrayList<>();\n+        final List<CompletableFuture<?>> futures = new ArrayList<>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/StampedLockTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-    static boolean reqHandle(AtomicInteger count, Subscriber s) {\n+    static boolean reqHandle(AtomicInteger count, Subscriber<?> s) {\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SubmissionPublisherTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -83,2 +83,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.size());\n+        mustEqual(0, q.remainingCapacity());\n@@ -94,1 +94,1 @@\n-        SynchronousQueue q = new SynchronousQueue(fair);\n+        SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -104,2 +104,2 @@\n-        SynchronousQueue q = new SynchronousQueue(fair);\n-        assertEquals(0, q.remainingCapacity());\n+        SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        mustEqual(0, q.remainingCapacity());\n@@ -118,1 +118,1 @@\n-        SynchronousQueue q = new SynchronousQueue(fair);\n+        SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -125,1 +125,1 @@\n-    \/**\n+    \/**S\n@@ -131,5 +131,3 @@\n-        SynchronousQueue q = new SynchronousQueue(fair);\n-        Integer[] ints = new Integer[1];\n-        for (int i = 0; i < ints.length; i++)\n-            ints[i] = i;\n-        Collection<Integer> coll = Arrays.asList(ints);\n+        SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Item[] items = seqItems(1);\n+        Collection<Item> coll = Arrays.asList(items);\n@@ -148,1 +146,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -154,1 +152,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -161,1 +159,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -171,1 +169,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -180,1 +178,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -190,1 +188,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -197,1 +195,1 @@\n-                    q.put(99);\n+                    q.put(ninetynine);\n@@ -204,1 +202,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -212,1 +210,1 @@\n-        assertEquals(0, q.remainingCapacity());\n+        mustEqual(0, q.remainingCapacity());\n@@ -220,1 +218,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -226,1 +224,1 @@\n-                assertFalse(q.offer(new Object(), timeoutMillis(), MILLISECONDS));\n+                assertFalse(q.offer(zero, timeoutMillis(), MILLISECONDS));\n@@ -231,1 +229,1 @@\n-                    q.offer(new Object(), randomTimeout(), randomTimeUnit());\n+                    q.offer(one, randomTimeout(), randomTimeUnit());\n@@ -238,1 +236,1 @@\n-                    q.offer(new Object(), LONGER_DELAY_MS, MILLISECONDS);\n+                    q.offer(two, LONGER_DELAY_MS, MILLISECONDS);\n@@ -256,1 +254,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -266,1 +264,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -276,1 +274,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -289,1 +287,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -337,1 +335,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -347,1 +345,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -360,1 +358,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -373,1 +371,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -383,1 +381,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -394,2 +392,2 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n-        Integer[] empty = new Integer[0];\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Item[] empty = new Item[0];\n@@ -397,2 +395,2 @@\n-        Integer[] ints = new Integer[1]; ints[0] = zero;\n-        assertFalse(q.containsAll(Arrays.asList(ints)));\n+        Item[] items = new Item[1]; items[0] = zero;\n+        assertFalse(q.containsAll(Arrays.asList(items)));\n@@ -407,2 +405,2 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n-        Integer[] empty = new Integer[0];\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Item[] empty = new Item[0];\n@@ -410,2 +408,2 @@\n-        Integer[] ints = new Integer[1]; ints[0] = zero;\n-        assertFalse(q.retainAll(Arrays.asList(ints)));\n+        Item[] items = new Item[1]; items[0] = zero;\n+        assertFalse(q.retainAll(Arrays.asList(items)));\n@@ -420,2 +418,2 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n-        Integer[] empty = new Integer[0];\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Item[] empty = new Item[0];\n@@ -423,2 +421,2 @@\n-        Integer[] ints = new Integer[1]; ints[0] = zero;\n-        assertFalse(q.containsAll(Arrays.asList(ints)));\n+        Item[] items = new Item[1]; items[0] = zero;\n+        assertFalse(q.containsAll(Arrays.asList(items)));\n@@ -433,1 +431,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -435,1 +433,1 @@\n-        assertEquals(0, o.length);\n+        mustEqual(0, o.length);\n@@ -439,1 +437,1 @@\n-     * toArray(Integer array) returns its argument with the first\n+     * toArray(Item array) returns its argument with the first\n@@ -445,2 +443,2 @@\n-        final SynchronousQueue<Integer> q = new SynchronousQueue<>(fair);\n-        Integer[] a;\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Item[] a;\n@@ -448,1 +446,1 @@\n-        a = new Integer[0];\n+        a = new Item[0];\n@@ -451,2 +449,2 @@\n-        a = new Integer[3];\n-        Arrays.fill(a, 42);\n+        a = new Item[3];\n+        Arrays.fill(a, fortytwo);\n@@ -456,1 +454,1 @@\n-            assertEquals(42, (int) a[i]);\n+            mustEqual(42, a[i]);\n@@ -465,1 +463,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -478,1 +476,1 @@\n-        assertIteratorExhausted(new SynchronousQueue(fair).iterator());\n+        assertIteratorExhausted(new SynchronousQueue<Item>(fair).iterator());\n@@ -487,2 +485,2 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n-        Iterator it = q.iterator();\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -501,1 +499,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -512,1 +510,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -522,1 +520,1 @@\n-                    assertEquals(0, q.remainingCapacity());\n+                    mustEqual(0, q.remainingCapacity());\n@@ -539,1 +537,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -563,3 +561,3 @@\n-        final SynchronousQueue x = new SynchronousQueue();\n-        final SynchronousQueue y = new SynchronousQueue(false);\n-        final SynchronousQueue z = new SynchronousQueue(true);\n+        final SynchronousQueue<Item> x = new SynchronousQueue<Item>();\n+        final SynchronousQueue<Item> y = new SynchronousQueue<Item>(false);\n+        final SynchronousQueue<Item> z = new SynchronousQueue<Item>(true);\n@@ -568,3 +566,5 @@\n-        SynchronousQueue[] qs = { x, y, z };\n-        for (SynchronousQueue q : qs) {\n-            SynchronousQueue clone = serialClone(q);\n+        SynchronousQueue[] rqs = { x, y, z };\n+        @SuppressWarnings(\"unchecked\")\n+        SynchronousQueue<Item>[] qs = (SynchronousQueue<Item>[])rqs;\n+        for (SynchronousQueue<Item> q : qs) {\n+            SynchronousQueue<Item> clone = serialClone(q);\n@@ -574,2 +574,2 @@\n-            assertEquals(0, clone.size());\n-            assertEquals(0, clone.remainingCapacity());\n+            mustEqual(0, clone.size());\n+            mustEqual(0, clone.remainingCapacity());\n@@ -586,2 +586,2 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n-        ArrayList l = new ArrayList();\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -589,2 +589,2 @@\n-        assertEquals(0, q.size());\n-        assertEquals(0, l.size());\n+        mustEqual(0, q.size());\n+        mustEqual(0, l.size());\n@@ -599,1 +599,1 @@\n-        final SynchronousQueue q = new SynchronousQueue(fair);\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>(fair);\n@@ -605,1 +605,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -613,1 +613,1 @@\n-        assertEquals(1, l.size());\n+        mustEqual(1, l.size());\n@@ -622,1 +622,1 @@\n-        final SynchronousQueue q = new SynchronousQueue();\n+        final SynchronousQueue<Item> q = new SynchronousQueue<Item>();\n@@ -633,1 +633,1 @@\n-        ArrayList l = new ArrayList();\n+        ArrayList<Item> l = new ArrayList<Item>();\n@@ -636,2 +636,2 @@\n-        assertEquals(1, drained);\n-        assertEquals(1, l.size());\n+        mustEqual(1, drained);\n+        mustEqual(1, l.size());\n@@ -639,2 +639,2 @@\n-        assertEquals(1, drained);\n-        assertEquals(2, l.size());\n+        mustEqual(1, drained);\n+        mustEqual(2, l.size());\n@@ -651,1 +651,1 @@\n-        Collection<?> q = new SynchronousQueue();\n+        Collection<?> q = new SynchronousQueue<Item>();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SynchronousQueueTest.java","additions":86,"deletions":86,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-    static ThreadLocal<Integer> tl = new ThreadLocal<Integer>() {\n-            public Integer initialValue() {\n+    static ThreadLocal<Item> tl = new ThreadLocal<Item>() {\n+            public Item initialValue() {\n@@ -54,3 +54,3 @@\n-    static InheritableThreadLocal<Integer> itl =\n-        new InheritableThreadLocal<Integer>() {\n-            protected Integer initialValue() {\n+    static InheritableThreadLocal<Item> itl =\n+        new InheritableThreadLocal<Item>() {\n+            protected Item initialValue() {\n@@ -60,2 +60,2 @@\n-            protected Integer childValue(Integer parentValue) {\n-                return new Integer(parentValue.intValue() + 1);\n+            protected Item childValue(Item parentValue) {\n+                return new Item(parentValue.intValue() + 1);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadLocalTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -690,1 +690,3 @@\n-            FutureTask[] tasks = new FutureTask[5];\n+            FutureTask[] rtasks = new FutureTask[5];\n+            @SuppressWarnings(\"unchecked\")\n+            FutureTask<Boolean>[] tasks = (FutureTask<Boolean>[])rtasks;\n@@ -699,1 +701,1 @@\n-                tasks[i] = new FutureTask(task);\n+                tasks[i] = new FutureTask<Boolean>(task);\n@@ -756,1 +758,3 @@\n-            FutureTask[] tasks = new FutureTask[5];\n+            FutureTask[] rtasks = new FutureTask[5];\n+            @SuppressWarnings(\"unchecked\")\n+            FutureTask<Boolean>[] tasks = (FutureTask<Boolean>[])rtasks;\n@@ -764,1 +768,1 @@\n-                tasks[i] = new FutureTask(task);\n+                tasks[i] = new FutureTask<Boolean>(task);\n@@ -1858,1 +1862,1 @@\n-                for (Future future : futures)\n+                for (Future<?> future : futures)\n@@ -1996,1 +2000,1 @@\n-\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadPoolExecutorSubclassTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -593,1 +593,3 @@\n-            FutureTask[] tasks = new FutureTask[5];\n+            FutureTask[] rtasks = new FutureTask[5];\n+            @SuppressWarnings(\"unchecked\")\n+            FutureTask<Boolean>[] tasks = (FutureTask<Boolean>[])rtasks;\n@@ -595,1 +597,1 @@\n-                Callable task = new CheckedCallable<Boolean>() {\n+                Callable<Boolean> task = new CheckedCallable<Boolean>() {\n@@ -602,1 +604,1 @@\n-                tasks[i] = new FutureTask(task);\n+                tasks[i] = new FutureTask<Boolean>(task);\n@@ -659,1 +661,3 @@\n-            FutureTask[] tasks = new FutureTask[5];\n+            FutureTask[] rtasks = new FutureTask[5];\n+            @SuppressWarnings(\"unchecked\")\n+            FutureTask<Boolean>[] tasks = (FutureTask<Boolean>[])rtasks;\n@@ -661,1 +665,1 @@\n-                Callable task = new CheckedCallable<Boolean>() {\n+                Callable<Boolean> task = new CheckedCallable<Boolean>() {\n@@ -667,1 +671,1 @@\n-                tasks[i] = new FutureTask(task);\n+                tasks[i] = new FutureTask<Boolean>(task);\n@@ -789,1 +793,1 @@\n-                                   (BlockingQueue) null);\n+                                   (BlockingQueue<Runnable>) null);\n@@ -860,1 +864,1 @@\n-                                   (BlockingQueue) null,\n+                                   (BlockingQueue<Runnable>) null,\n@@ -944,1 +948,1 @@\n-                                   (BlockingQueue) null,\n+                                   (BlockingQueue<Runnable>) null,\n@@ -1033,1 +1037,1 @@\n-                                   (BlockingQueue) null,\n+                                   (BlockingQueue<Runnable>) null,\n@@ -1080,1 +1084,1 @@\n-                    Callable task = new CheckedCallable<Boolean>() {\n+                    Callable<Boolean> task = new CheckedCallable<Boolean>() {\n@@ -1819,1 +1823,1 @@\n-                for (Future future : futures)\n+                for (Future<?> future : futures)\n@@ -1934,1 +1938,1 @@\n-                                   new ArrayBlockingQueue(30));\n+                                   new ArrayBlockingQueue<Runnable>(30));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadPoolExecutorTest.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -69,2 +69,2 @@\n-    private static TreeMap map5() {\n-        TreeMap map = new TreeMap();\n+    private static TreeMap<Item,String> map5() {\n+        TreeMap<Item,String> map = new TreeMap<Item,String>();\n@@ -78,1 +78,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -86,1 +86,1 @@\n-        TreeMap map = map5();\n+        TreeMap<Item,String> map = map5();\n@@ -88,1 +88,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -95,3 +95,3 @@\n-        TreeMap map = map5();\n-        TreeMap map2 = new TreeMap(map);\n-        assertEquals(map, map2);\n+        TreeMap<Item,String> map = map5();\n+        TreeMap<Item,String> map2 = new TreeMap<Item,String>(map);\n+        mustEqual(map, map2);\n@@ -104,4 +104,4 @@\n-        TreeMap map1 = map5();\n-        TreeMap map2 = map5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        TreeMap<Item,String> map1 = map5();\n+        TreeMap<Item,String> map2 = map5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -117,1 +117,1 @@\n-        TreeMap map = map5();\n+        TreeMap<Item,String> map = map5();\n@@ -126,1 +126,1 @@\n-        TreeMap map = map5();\n+        TreeMap<Item,String> map = map5();\n@@ -136,3 +136,3 @@\n-        TreeMap map = map5();\n-        assertEquals(\"A\", (String)map.get(one));\n-        TreeMap empty = new TreeMap();\n+        TreeMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n+        TreeMap<Item,String> empty = new TreeMap<Item,String>();\n@@ -146,2 +146,2 @@\n-        TreeMap empty = new TreeMap();\n-        TreeMap map = map5();\n+        TreeMap<Item,String> empty = new TreeMap<Item,String>();\n+        TreeMap<Item,String> map = map5();\n@@ -156,2 +156,2 @@\n-        TreeMap map = map5();\n-        assertEquals(one, map.firstKey());\n+        TreeMap<Item,String> map = map5();\n+        mustEqual(one, map.firstKey());\n@@ -164,2 +164,2 @@\n-        TreeMap map = map5();\n-        assertEquals(five, map.lastKey());\n+        TreeMap<Item,String> map = map5();\n+        mustEqual(five, map.lastKey());\n@@ -172,2 +172,2 @@\n-        TreeMap map = map5();\n-        Set s = map.keySet();\n+        TreeMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n@@ -176,2 +176,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -185,2 +185,2 @@\n-        TreeMap map = map5();\n-        Set s = map.descendingKeySet();\n+        TreeMap<Item,String> map = map5();\n+        Set<Item> s = map.descendingKeySet();\n@@ -188,1 +188,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -190,1 +190,1 @@\n-        ar[0] = m10;\n+        ar[0] = minusTen;\n@@ -198,8 +198,8 @@\n-        TreeMap map = map5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(one));\n-        assertTrue(s.contains(two));\n-        assertTrue(s.contains(three));\n-        assertTrue(s.contains(four));\n-        assertTrue(s.contains(five));\n+        TreeMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, one);\n+        mustContain(s, two);\n+        mustContain(s, three);\n+        mustContain(s, four);\n+        mustContain(s, five);\n@@ -212,5 +212,5 @@\n-        TreeMap map = map5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        TreeMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = i.next();\n+        mustEqual(last, one);\n@@ -219,1 +219,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = i.next();\n@@ -224,1 +224,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -231,5 +231,5 @@\n-        TreeMap map = map5();\n-        NavigableSet s = map.navigableKeySet();\n-        Iterator i = s.descendingIterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, five);\n+        TreeMap<Item,String> map = map5();\n+        NavigableSet<Item> s = map.navigableKeySet();\n+        Iterator<? extends Item> i = s.descendingIterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, five);\n@@ -238,1 +238,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -243,1 +243,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -250,5 +250,5 @@\n-        TreeMap map = map5();\n-        Set s = map.descendingKeySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, five);\n+        TreeMap<Item,String> map = map5();\n+        Set<Item> s = map.descendingKeySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, five);\n@@ -257,1 +257,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -262,1 +262,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -269,5 +269,5 @@\n-        TreeMap map = map5();\n-        NavigableSet s = map.descendingKeySet();\n-        Iterator i = s.descendingIterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        TreeMap<Item,String> map = map5();\n+        NavigableSet<Item> s = map.descendingKeySet();\n+        Iterator<? extends Item> i = s.descendingIterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, one);\n@@ -276,1 +276,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -281,1 +281,1 @@\n-        assertEquals(5, count);\n+        mustEqual(5, count);\n@@ -288,3 +288,3 @@\n-        TreeMap map = map5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        TreeMap<Item,String> map = map5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -302,4 +302,4 @@\n-        TreeMap map = map5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        TreeMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -307,1 +307,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -321,4 +321,4 @@\n-        TreeMap map = map5();\n-        Set s = map.descendingMap().entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        TreeMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.descendingMap().entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -326,1 +326,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -340,2 +340,2 @@\n-        TreeMap map = map5();\n-        Set s = map.entrySet();\n+        TreeMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n@@ -343,1 +343,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -354,2 +354,2 @@\n-        TreeMap map = map5();\n-        Set s = map.descendingMap().entrySet();\n+        TreeMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.descendingMap().entrySet();\n@@ -357,1 +357,1 @@\n-        assertEquals(5, ar.length);\n+        mustEqual(5, ar.length);\n@@ -368,2 +368,2 @@\n-        TreeMap empty = new TreeMap();\n-        TreeMap map = map5();\n+        TreeMap<Item,String> empty = new TreeMap<Item,String>();\n+        TreeMap<Item,String> map = map5();\n@@ -371,1 +371,1 @@\n-        assertEquals(5, empty.size());\n+        mustEqual(5, empty.size());\n@@ -383,1 +383,1 @@\n-        TreeMap map = map5();\n+        TreeMap<Item,String> map = map5();\n@@ -385,1 +385,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -393,3 +393,3 @@\n-        TreeMap map = map5();\n-        Map.Entry e1 = map.lowerEntry(three);\n-        assertEquals(two, e1.getKey());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(three);\n+        mustEqual(two, e1.getKey());\n@@ -397,2 +397,2 @@\n-        Map.Entry e2 = map.lowerEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -400,1 +400,1 @@\n-        Map.Entry e3 = map.lowerEntry(one);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(one);\n@@ -403,1 +403,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -411,3 +411,3 @@\n-        TreeMap map = map5();\n-        Map.Entry e1 = map.higherEntry(three);\n-        assertEquals(four, e1.getKey());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(three);\n+        mustEqual(four, e1.getKey());\n@@ -415,2 +415,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -418,1 +418,1 @@\n-        Map.Entry e3 = map.higherEntry(five);\n+        Map.Entry<Item,String> e3 = map.higherEntry(five);\n@@ -421,1 +421,1 @@\n-        Map.Entry e4 = map.higherEntry(six);\n+        Map.Entry<Item,String> e4 = map.higherEntry(six);\n@@ -429,3 +429,3 @@\n-        TreeMap map = map5();\n-        Map.Entry e1 = map.floorEntry(three);\n-        assertEquals(three, e1.getKey());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -433,2 +433,2 @@\n-        Map.Entry e2 = map.floorEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -436,2 +436,2 @@\n-        Map.Entry e3 = map.floorEntry(one);\n-        assertEquals(one, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(one);\n+        mustEqual(one, e3.getKey());\n@@ -439,1 +439,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -447,3 +447,3 @@\n-        TreeMap map = map5();\n-        Map.Entry e1 = map.ceilingEntry(three);\n-        assertEquals(three, e1.getKey());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -451,2 +451,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -454,2 +454,2 @@\n-        Map.Entry e3 = map.ceilingEntry(five);\n-        assertEquals(five, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(five);\n+        mustEqual(five, e3.getKey());\n@@ -457,1 +457,1 @@\n-        Map.Entry e4 = map.ceilingEntry(six);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(six);\n@@ -465,1 +465,1 @@\n-        TreeMap q = map5();\n+        TreeMap<Item,String> q = map5();\n@@ -467,1 +467,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -470,1 +470,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -483,1 +483,1 @@\n-        TreeMap q = map5();\n+        TreeMap<Item,String> q = map5();\n@@ -485,1 +485,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -488,1 +488,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -501,1 +501,1 @@\n-        TreeMap q = map5();\n+        TreeMap<Item,String> q = map5();\n@@ -503,1 +503,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -506,1 +506,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -509,1 +509,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -519,1 +519,1 @@\n-        TreeMap q = map5();\n+        TreeMap<Item,String> q = map5();\n@@ -521,1 +521,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -524,1 +524,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -527,1 +527,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -537,4 +537,4 @@\n-        TreeMap map = map5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -542,1 +542,1 @@\n-        assertEquals(two, e.getKey());\n+        mustEqual(two, e.getKey());\n@@ -545,2 +545,2 @@\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -548,1 +548,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -551,1 +551,1 @@\n-        assertEquals(five, e.getKey());\n+        mustEqual(five, e.getKey());\n@@ -564,4 +564,4 @@\n-        TreeMap map = map5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        TreeMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -569,1 +569,1 @@\n-        assertEquals(four, e.getKey());\n+        mustEqual(four, e.getKey());\n@@ -572,2 +572,2 @@\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -575,1 +575,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -578,1 +578,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -591,4 +591,4 @@\n-        TreeMap map = map5();\n-        TreeMap empty = new TreeMap();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        TreeMap<Item,String> map = map5();\n+        TreeMap<Item,String> empty = new TreeMap<Item,String>();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -601,1 +601,1 @@\n-        TreeMap map = map5();\n+        TreeMap<Item,String> map = map5();\n@@ -614,1 +614,1 @@\n-        TreeMap c = map5();\n+        TreeMap<Item,String> c = map5();\n@@ -625,1 +625,1 @@\n-        TreeMap c = map5();\n+        TreeMap<Item,String> c = map5();\n@@ -636,2 +636,2 @@\n-        TreeMap c = new TreeMap();\n-        c.put(\"sadsdf\", \"asdads\");\n+        TreeMap<Item,String> c = new TreeMap<Item,String>();\n+        c.put(one, \"asdads\");\n@@ -648,2 +648,2 @@\n-        NavigableMap x = map5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = map5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -652,4 +652,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -662,5 +662,5 @@\n-        TreeMap map = map5();\n-        NavigableMap sm = map.subMap(two, true, four, false);\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(2, sm.size());\n+        TreeMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.subMap(two, true, four, false);\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(2, sm.size());\n@@ -672,6 +672,6 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -679,5 +679,5 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(three, k);\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> r = sm.descendingKeySet().iterator();\n+        k = (Item)(r.next());\n+        mustEqual(three, k);\n+        k = (Item)(r.next());\n+        mustEqual(two, k);\n@@ -686,1 +686,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -690,5 +690,5 @@\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(three));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(three));\n@@ -696,1 +696,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -700,5 +700,5 @@\n-        TreeMap map = map5();\n-        NavigableMap sm = map.subMap(two, true, three, false);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(two, sm.lastKey());\n+        TreeMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.subMap(two, true, three, false);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(two, sm.lastKey());\n@@ -710,4 +710,4 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n@@ -715,3 +715,3 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> r = sm.descendingKeySet().iterator();\n+        k = (Item)(r.next());\n+        mustEqual(two, k);\n@@ -720,1 +720,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -724,2 +724,2 @@\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -728,1 +728,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -735,2 +735,2 @@\n-        TreeMap map = map5();\n-        NavigableMap sm = map.headMap(four, false);\n+        TreeMap<Item,String> map = map5();\n+        NavigableMap<Item, String> sm = map.headMap(four, false);\n@@ -742,8 +742,8 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(one, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -753,2 +753,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(four, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(four, map.firstKey());\n@@ -761,2 +761,2 @@\n-        TreeMap map = map5();\n-        NavigableMap sm = map.tailMap(two, true);\n+        TreeMap<Item,String> map = map5();\n+        NavigableMap<Item,String> sm = map.tailMap(two, true);\n@@ -768,10 +768,9 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k = (i.next());\n+        mustEqual(two, k);\n+        k = (i.next());\n+        mustEqual(three, k);\n+        k = (i.next());\n+        mustEqual(four, k);\n+        k = (i.next());\n+        mustEqual(five, k);\n@@ -779,9 +778,9 @@\n-        Iterator r = sm.descendingKeySet().iterator();\n-        k = (Integer)(r.next());\n-        assertEquals(five, k);\n-        k = (Integer)(r.next());\n-        assertEquals(four, k);\n-        k = (Integer)(r.next());\n-        assertEquals(three, k);\n-        k = (Integer)(r.next());\n-        assertEquals(two, k);\n+        Iterator<? extends Item> r = sm.descendingKeySet().iterator();\n+        k = (r.next());\n+        mustEqual(five, k);\n+        k = (r.next());\n+        mustEqual(four, k);\n+        k = (r.next());\n+        mustEqual(three, k);\n+        k = (r.next());\n+        mustEqual(two, k);\n@@ -790,14 +789,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(two, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(three, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(four, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = (ei.next());\n+        mustEqual(two, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(three, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(four, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -806,7 +805,7 @@\n-        NavigableMap ssm = sm.tailMap(four, true);\n-        assertEquals(four, ssm.firstKey());\n-        assertEquals(five, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        NavigableMap<Item,String> ssm = sm.tailMap(four, true);\n+        mustEqual(four, ssm.firstKey());\n+        mustEqual(five, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(four));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n@@ -823,2 +822,2 @@\n-        Class cl = TreeMap.class;\n-        NavigableMap<Integer, Integer> map = newMap(cl);\n+        Class<?> cl = TreeMap.class;\n+        NavigableMap<Item, Item> map = newMap(cl);\n@@ -835,1 +834,1 @@\n-        bashSubMap(map.subMap(0, true, mapSize, false),\n+        bashSubMap(map.subMap(zero, true, itemFor(mapSize), false),\n@@ -839,4 +838,5 @@\n-    static NavigableMap<Integer, Integer> newMap(Class cl) throws Exception {\n-        NavigableMap<Integer, Integer> result\n-            = (NavigableMap<Integer, Integer>) cl.getConstructor().newInstance();\n-        assertEquals(0, result.size());\n+    static NavigableMap<Item, Item> newMap(Class<?> cl) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        NavigableMap<Item, Item> result\n+            = (NavigableMap<Item, Item>) cl.getConstructor().newInstance();\n+        mustEqual(0, result.size());\n@@ -847,1 +847,1 @@\n-    void populate(NavigableMap<Integer, Integer> map, int limit) {\n+    void populate(NavigableMap<Item, Item> map, int limit) {\n@@ -854,1 +854,1 @@\n-    void mutateMap(NavigableMap<Integer, Integer> map, int min, int max) {\n+    void mutateMap(NavigableMap<Item, Item> map, int min, int max) {\n@@ -864,1 +864,1 @@\n-        for (Iterator<Integer> it = map.keySet().iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = map.keySet().iterator(); it.hasNext(); ) {\n@@ -866,1 +866,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -879,1 +879,1 @@\n-    void mutateSubMap(NavigableMap<Integer, Integer> map, int min, int max) {\n+    void mutateSubMap(NavigableMap<Item, Item> map, int min, int max) {\n@@ -889,1 +889,1 @@\n-        for (Iterator<Integer> it = map.keySet().iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = map.keySet().iterator(); it.hasNext(); ) {\n@@ -891,1 +891,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -903,1 +903,1 @@\n-                    map.put(key, 2 * key);\n+                    map.put(itemFor(key), itemFor(2 * key));\n@@ -910,2 +910,2 @@\n-    void put(NavigableMap<Integer, Integer> map, int key) {\n-        if (map.put(key, 2 * key) == null)\n+    void put(NavigableMap<Item, Item> map, int key) {\n+        if (map.put(itemFor(key), itemFor(2 * key)) == null)\n@@ -915,2 +915,2 @@\n-    void remove(NavigableMap<Integer, Integer> map, int key) {\n-        if (map.remove(key) != null)\n+    void remove(NavigableMap<Item, Item> map, int key) {\n+        if (map.remove(itemFor(key)) != null)\n@@ -920,1 +920,1 @@\n-    void bashSubMap(NavigableMap<Integer, Integer> map,\n+    void bashSubMap(NavigableMap<Item, Item> map,\n@@ -936,1 +936,1 @@\n-        NavigableMap<Integer,Integer> hm = map.headMap(midPoint, incl);\n+        NavigableMap<Item,Item> hm = map.headMap(itemFor(midPoint), incl);\n@@ -953,1 +953,1 @@\n-        NavigableMap<Integer,Integer> tm = map.tailMap(midPoint,incl);\n+        NavigableMap<Item,Item> tm = map.tailMap(itemFor(midPoint),incl);\n@@ -978,2 +978,2 @@\n-            NavigableMap<Integer,Integer> sm = map.subMap(\n-                endpoints[0], lowIncl, endpoints[1], highIncl);\n+            NavigableMap<Item,Item> sm = map.subMap(\n+                itemFor(endpoints[0]), lowIncl, itemFor(endpoints[1]), highIncl);\n@@ -987,2 +987,2 @@\n-            NavigableMap<Integer,Integer> sm = map.subMap(\n-                endpoints[1], highIncl, endpoints[0], lowIncl);\n+            NavigableMap<Item,Item> sm = map.subMap(\n+                itemFor(endpoints[1]), highIncl, itemFor(endpoints[0]), lowIncl);\n@@ -1001,1 +1001,1 @@\n-    void check(NavigableMap<Integer, Integer> map,\n+    void check(NavigableMap<Item, Item> map,\n@@ -1065,1 +1065,1 @@\n-            assertEquals(bsContainsI, map.containsKey(i));\n+            mustEqual(bsContainsI, map.containsKey(itemFor(i)));\n@@ -1069,1 +1069,1 @@\n-        assertEquals(size, map.size());\n+        mustEqual(size, map.size());\n@@ -1074,2 +1074,2 @@\n-        for (int key : map.keySet()) {\n-            assertTrue(bs.get(key));\n+        for (Item key : map.keySet()) {\n+            assertTrue(bs.get(key.value));\n@@ -1078,2 +1078,2 @@\n-                (ascending ? key - previousKey > 0 : key - previousKey < 0));\n-            previousKey = key;\n+                (ascending ? key.value - previousKey > 0 : key.value - previousKey < 0));\n+            previousKey = key.value;\n@@ -1081,1 +1081,1 @@\n-        assertEquals(size2, size);\n+        mustEqual(size2, size);\n@@ -1085,4 +1085,5 @@\n-            assertEq(map.lowerKey(key), rs.lower(key));\n-            assertEq(map.floorKey(key), rs.floor(key));\n-            assertEq(map.higherKey(key), rs.higher(key));\n-            assertEq(map.ceilingKey(key), rs.ceiling(key));\n+            Item k = itemFor(key);\n+            assertEq(map.lowerKey(k), rs.lower(key));\n+            assertEq(map.floorKey(k), rs.floor(key));\n+            assertEq(map.higherKey(k), rs.higher(key));\n+            assertEq(map.ceilingKey(k), rs.ceiling(key));\n@@ -1096,2 +1097,2 @@\n-            assertEq(rs.first(), -1);\n-            assertEq(rs.last(),  -1);\n+            mustEqual(rs.first(), -1);\n+            mustEqual(rs.last(),  -1);\n@@ -1109,1 +1110,1 @@\n-    static void assertEq(Integer i, int j) {\n+    static void assertEq(Item i, int j) {\n@@ -1111,1 +1112,1 @@\n-            assertEquals(j, -1);\n+            mustEqual(j, -1);\n@@ -1113,1 +1114,1 @@\n-            assertEquals((int) i, j);\n+            mustEqual(i, j);\n@@ -1116,2 +1117,2 @@\n-    static boolean eq(Integer i, int j) {\n-        return i == null ? j == -1 : i == j;\n+    static boolean eq(Item i, int j) {\n+        return i == null ? j == -1 : i.value == j;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/TreeMapTest.java","additions":308,"deletions":307,"binary":false,"changes":615,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -63,5 +64,0 @@\n-    \/**\n-     * The number of elements to place in collections, arrays, etc.\n-     *\/\n-    static final int SIZE = 20;\n-\n@@ -70,1 +66,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -72,2 +68,2 @@\n-    private static TreeSet<Integer> populatedSet(int n) {\n-        TreeSet<Integer> q = new TreeSet<>();\n+    private static TreeSet<Item> populatedSet(int n) {\n+        TreeSet<Item> q = new TreeSet<>();\n@@ -76,1 +72,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -78,1 +74,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -80,1 +76,1 @@\n-        assertEquals(n, q.size());\n+        mustEqual(n, q.size());\n@@ -87,2 +83,2 @@\n-    private static TreeSet set5() {\n-        TreeSet q = new TreeSet();\n+    private static TreeSet<Item> set5() {\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -95,1 +91,1 @@\n-        assertEquals(5, q.size());\n+        mustEqual(5, q.size());\n@@ -103,1 +99,1 @@\n-        assertEquals(0, new TreeSet().size());\n+        mustEqual(0, new TreeSet<Item>().size());\n@@ -111,1 +107,1 @@\n-            new TreeSet((Collection)null);\n+            new TreeSet<Item>((Collection<Item>)null);\n@@ -121,1 +117,1 @@\n-            new TreeSet(Arrays.asList(new Integer[SIZE]));\n+            new TreeSet<Item>(Arrays.asList(new Item[SIZE]));\n@@ -130,3 +126,2 @@\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        Item[] items = new Item[2];\n+        items[1] = zero;\n@@ -134,1 +129,1 @@\n-            new TreeSet(Arrays.asList(ints));\n+            new TreeSet<Item>(Arrays.asList(items));\n@@ -143,1 +138,2 @@\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] items = defaultItems;\n+        TreeSet<Item> q = new TreeSet<Item>(Arrays.asList(items));\n@@ -145,4 +141,1 @@\n-            ints[i] = new Integer(i);\n-        TreeSet q = new TreeSet(Arrays.asList(ints));\n-        for (int i = 0; i < SIZE; ++i)\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -156,6 +149,5 @@\n-        TreeSet q = new TreeSet(cmp);\n-        assertEquals(cmp, q.comparator());\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(i);\n-        q.addAll(Arrays.asList(ints));\n+        @SuppressWarnings(\"unchecked\")\n+        TreeSet<Item> q = new TreeSet<Item>(cmp);\n+        mustEqual(cmp, q.comparator());\n+        Item[] items = defaultItems;\n+        q.addAll(Arrays.asList(items));\n@@ -163,1 +155,1 @@\n-            assertEquals(ints[i], q.pollFirst());\n+            mustEqual(items[i], q.pollFirst());\n@@ -170,1 +162,1 @@\n-        TreeSet q = new TreeSet();\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -172,1 +164,1 @@\n-        q.add(new Integer(1));\n+        q.add(one);\n@@ -174,1 +166,1 @@\n-        q.add(new Integer(2));\n+        q.add(two);\n@@ -184,1 +176,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -186,1 +178,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -190,2 +182,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -199,1 +191,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -210,1 +202,1 @@\n-        TreeSet q = new TreeSet();\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -219,1 +211,1 @@\n-        TreeSet q = new TreeSet();\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -228,1 +220,1 @@\n-        TreeSet q = new TreeSet();\n+        TreeSet<Object> q = new TreeSet<Object>();\n@@ -240,1 +232,1 @@\n-        TreeSet q = new TreeSet();\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -251,2 +243,2 @@\n-        TreeSet q = new TreeSet();\n-        Integer[] ints = new Integer[SIZE];\n+        TreeSet<Item> q = new TreeSet<Item>();\n+        Item[] items = new Item[2];\n@@ -254,1 +246,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -264,4 +256,3 @@\n-        TreeSet q = new TreeSet();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i);\n+        TreeSet<Item> q = new TreeSet<Item>();\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -269,1 +260,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -278,5 +269,3 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE; ++i)\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        TreeSet q = new TreeSet();\n+        Item[] empty = new Item[0];\n+        Item[] items = defaultItems;\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -284,1 +273,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -286,1 +275,1 @@\n-            assertEquals(new Integer(i), q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -293,1 +282,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -295,1 +284,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -304,1 +293,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -306,1 +295,1 @@\n-            assertEquals(i, q.pollLast());\n+            mustEqual(i, q.pollLast());\n@@ -315,1 +304,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -317,4 +306,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -323,5 +312,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -336,1 +325,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -338,1 +327,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -340,1 +329,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -348,1 +337,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -351,2 +340,2 @@\n-        assertEquals(0, q.size());\n-        q.add(new Integer(1));\n+        mustEqual(0, q.size());\n+        q.add(one);\n@@ -362,2 +351,2 @@\n-        TreeSet q = populatedSet(SIZE);\n-        TreeSet p = new TreeSet();\n+        TreeSet<Item> q = populatedSet(SIZE);\n+        TreeSet<Item> p = new TreeSet<Item>();\n@@ -367,1 +356,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -376,2 +365,2 @@\n-        TreeSet q = populatedSet(SIZE);\n-        TreeSet p = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n+        TreeSet<Item> p = populatedSet(SIZE);\n@@ -386,1 +375,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -396,2 +385,2 @@\n-            TreeSet q = populatedSet(SIZE);\n-            TreeSet p = populatedSet(i);\n+            TreeSet<Item> q = populatedSet(SIZE);\n+            TreeSet<Item> p = populatedSet(i);\n@@ -399,1 +388,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -401,2 +390,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -411,1 +399,1 @@\n-        TreeSet q = set5();\n+        TreeSet<Item> q = set5();\n@@ -413,1 +401,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -416,1 +404,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -429,1 +417,1 @@\n-        TreeSet q = set5();\n+        TreeSet<Item> q = set5();\n@@ -431,1 +419,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -434,1 +422,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -447,1 +435,1 @@\n-        TreeSet q = set5();\n+        TreeSet<Item> q = set5();\n@@ -449,1 +437,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -452,1 +440,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -455,1 +443,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -465,1 +453,1 @@\n-        TreeSet q = set5();\n+        TreeSet<Item> q = set5();\n@@ -467,1 +455,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -470,1 +458,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -473,1 +461,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -483,1 +471,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -495,5 +483,5 @@\n-        TreeSet<Integer> q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        TreeSet<Item> q = populatedSet(SIZE);\n+        Item[] items = new Item[SIZE];\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -508,2 +496,2 @@\n-        TreeSet q = populatedSet(SIZE);\n-        Iterator it = q.iterator();\n+        TreeSet<Item> q = populatedSet(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -513,1 +501,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -521,1 +509,1 @@\n-        assertIteratorExhausted(new TreeSet().iterator());\n+        assertIteratorExhausted(new TreeSet<Item>().iterator());\n@@ -528,4 +516,4 @@\n-        final TreeSet q = new TreeSet();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final TreeSet<Item> q = new TreeSet<Item>();\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -533,1 +521,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -538,2 +526,2 @@\n-        assertEquals(it.next(), new Integer(2));\n-        assertEquals(it.next(), new Integer(3));\n+        mustEqual(it.next(), two);\n+        mustEqual(it.next(), three);\n@@ -547,1 +535,1 @@\n-        TreeSet q = populatedSet(SIZE);\n+        TreeSet<Item> q = populatedSet(SIZE);\n@@ -558,2 +546,2 @@\n-        NavigableSet x = populatedSet(SIZE);\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = populatedSet(SIZE);\n+        NavigableSet<Item> y = serialClone(x);\n@@ -562,3 +550,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -567,1 +555,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -576,16 +564,15 @@\n-        TreeSet set = set5();\n-        SortedSet sm = set.subSet(two, four);\n-        assertEquals(two, sm.first());\n-        assertEquals(three, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        TreeSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, four);\n+        mustEqual(two, sm.first());\n+        mustEqual(three, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -593,1 +580,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -596,6 +583,6 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.first());\n-        assertEquals(three, sm.last());\n-        assertTrue(sm.remove(three));\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.first());\n+        mustEqual(three, sm.last());\n+        mustRemove(sm, three);\n@@ -603,1 +590,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -607,14 +594,13 @@\n-        TreeSet set = set5();\n-        SortedSet sm = set.subSet(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.first());\n-        assertEquals(two, sm.last());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertFalse(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        TreeSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.first());\n+        mustEqual(two, sm.last());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustNotContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n@@ -622,1 +608,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -625,3 +611,3 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -629,2 +615,2 @@\n-        assertFalse(sm.remove(three));\n-        assertEquals(4, set.size());\n+        mustNotRemove(sm, three);\n+        mustEqual(4, set.size());\n@@ -637,15 +623,14 @@\n-        TreeSet set = set5();\n-        SortedSet sm = set.headSet(four);\n-        assertTrue(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        TreeSet<Item> set = set5();\n+        SortedSet<Item> sm = set.headSet(four);\n+        mustContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(one, k);\n+        k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -655,2 +640,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(four, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(four, set.first());\n@@ -663,17 +648,16 @@\n-        TreeSet set = set5();\n-        SortedSet sm = set.tailSet(two);\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertTrue(sm.contains(four));\n-        assertTrue(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        TreeSet<Item> set = set5();\n+        SortedSet<Item> sm = set.tailSet(two);\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustContain(sm, four);\n+        mustContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -682,7 +666,7 @@\n-        SortedSet ssm = sm.tailSet(four);\n-        assertEquals(four, ssm.first());\n-        assertEquals(five, ssm.last());\n-        assertTrue(ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(four);\n+        mustEqual(four, ssm.first());\n+        mustEqual(five, ssm.last());\n+        mustRemove(ssm, four);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n@@ -699,1 +683,1 @@\n-        Class cl = TreeSet.class;\n+        Class<?> cl = TreeSet.class;\n@@ -701,1 +685,1 @@\n-        NavigableSet<Integer> set = newSet(cl);\n+        NavigableSet<Item> set = newSet(cl);\n@@ -712,1 +696,1 @@\n-        bashSubSet(set.subSet(0, true, setSize, false),\n+        bashSubSet(set.subSet(zero, true, itemFor(setSize), false),\n@@ -720,2 +704,2 @@\n-        Set x = populatedSet(SIZE);\n-        Set y = new TreeSet(x);\n+        Set<Item> x = populatedSet(SIZE);\n+        Set<Item> y = new TreeSet<Item>(x);\n@@ -723,2 +707,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -727,4 +711,5 @@\n-    static NavigableSet<Integer> newSet(Class cl) throws Exception {\n-        NavigableSet<Integer> result =\n-            (NavigableSet<Integer>) cl.getConstructor().newInstance();\n-        assertEquals(0, result.size());\n+    static NavigableSet<Item> newSet(Class<?> cl) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        NavigableSet<Item> result =\n+            (NavigableSet<Item>) cl.getConstructor().newInstance();\n+        mustEqual(0, result.size());\n@@ -735,1 +720,1 @@\n-    void populate(NavigableSet<Integer> set, int limit) {\n+    void populate(NavigableSet<Item> set, int limit) {\n@@ -742,1 +727,1 @@\n-    void mutateSet(NavigableSet<Integer> set, int min, int max) {\n+    void mutateSet(NavigableSet<Item> set, int min, int max) {\n@@ -752,1 +737,1 @@\n-        for (Iterator<Integer> it = set.iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = set.iterator(); it.hasNext(); ) {\n@@ -754,1 +739,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -767,1 +752,1 @@\n-    void mutateSubSet(NavigableSet<Integer> set, int min, int max) {\n+    void mutateSubSet(NavigableSet<Item> set, int min, int max) {\n@@ -777,1 +762,1 @@\n-        for (Iterator<Integer> it = set.iterator(); it.hasNext(); ) {\n+        for (Iterator<Item> it = set.iterator(); it.hasNext(); ) {\n@@ -779,1 +764,1 @@\n-                bs.clear(it.next());\n+                bs.clear(it.next().value);\n@@ -791,1 +776,1 @@\n-                    set.add(element);\n+                    set.add(itemFor(element));\n@@ -798,2 +783,2 @@\n-    void put(NavigableSet<Integer> set, int element) {\n-        if (set.add(element))\n+    void put(NavigableSet<Item> set, int element) {\n+        if (set.add(itemFor(element)))\n@@ -803,2 +788,2 @@\n-    void remove(NavigableSet<Integer> set, int element) {\n-        if (set.remove(element))\n+    void remove(NavigableSet<Item> set, int element) {\n+        if (set.remove(itemFor(element)))\n@@ -808,1 +793,1 @@\n-    void bashSubSet(NavigableSet<Integer> set,\n+    void bashSubSet(NavigableSet<Item> set,\n@@ -824,1 +809,1 @@\n-        NavigableSet<Integer> hm = set.headSet(midPoint, incl);\n+        NavigableSet<Item> hm = set.headSet(itemFor(midPoint), incl);\n@@ -841,1 +826,1 @@\n-        NavigableSet<Integer> tm = set.tailSet(midPoint,incl);\n+        NavigableSet<Item> tm = set.tailSet(itemFor(midPoint),incl);\n@@ -866,2 +851,2 @@\n-            NavigableSet<Integer> sm = set.subSet(\n-                endpoints[0], lowIncl, endpoints[1], highIncl);\n+            NavigableSet<Item> sm = set.subSet(\n+                itemFor(endpoints[0]), lowIncl, itemFor(endpoints[1]), highIncl);\n@@ -875,2 +860,2 @@\n-            NavigableSet<Integer> sm = set.subSet(\n-                endpoints[1], highIncl, endpoints[0], lowIncl);\n+            NavigableSet<Item> sm = set.subSet(\n+                itemFor(endpoints[1]), highIncl, itemFor(endpoints[0]), lowIncl);\n@@ -889,1 +874,1 @@\n-    void check(NavigableSet<Integer> set,\n+    void check(NavigableSet<Item> set,\n@@ -957,1 +942,1 @@\n-            assertEquals(bsContainsI, set.contains(i));\n+            mustEqual(bsContainsI, set.contains(itemFor(i)));\n@@ -961,1 +946,1 @@\n-        assertEquals(size, set.size());\n+        mustEqual(size, set.size());\n@@ -966,2 +951,2 @@\n-        for (int element : set) {\n-            assertTrue(bs.get(element));\n+        for (Item element : set) {\n+            assertTrue(bs.get(element.value));\n@@ -970,2 +955,2 @@\n-                element - previousElement > 0 : element - previousElement < 0));\n-            previousElement = element;\n+                element.value - previousElement > 0 : element.value - previousElement < 0));\n+            previousElement = element.value;\n@@ -973,1 +958,1 @@\n-        assertEquals(size2, size);\n+        mustEqual(size2, size);\n@@ -977,4 +962,5 @@\n-            assertEq(set.lower(element), rs.lower(element));\n-            assertEq(set.floor(element), rs.floor(element));\n-            assertEq(set.higher(element), rs.higher(element));\n-            assertEq(set.ceiling(element), rs.ceiling(element));\n+            Item e = itemFor(element);\n+            assertEq(set.lower(e), rs.lower(element));\n+            assertEq(set.floor(e), rs.floor(element));\n+            assertEq(set.higher(e), rs.higher(element));\n+            assertEq(set.ceiling(e), rs.ceiling(element));\n@@ -988,2 +974,2 @@\n-            assertEq(rs.first(), -1);\n-            assertEq(rs.last(),  -1);\n+            mustEqual(rs.first(), -1);\n+            mustEqual(rs.last(),  -1);\n@@ -1001,1 +987,1 @@\n-    static void assertEq(Integer i, int j) {\n+    static void assertEq(Item i, int j) {\n@@ -1003,1 +989,1 @@\n-            assertEquals(j, -1);\n+            mustEqual(j, -1);\n@@ -1005,1 +991,1 @@\n-            assertEquals((int) i, j);\n+            mustEqual(i, j);\n@@ -1008,2 +994,2 @@\n-    static boolean eq(Integer i, int j) {\n-        return (i == null) ? j == -1 : i == j;\n+    static boolean eq(Item i, int j) {\n+        return (i == null) ? j == -1 : i.value == j;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/TreeSetTest.java","additions":249,"deletions":263,"binary":false,"changes":512,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-     * Returns a new map from Integers 1-5 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items 1-5 to Strings \"A\"-\"E\".\n@@ -58,2 +58,2 @@\n-    private static NavigableMap map5() {\n-        TreeMap map = new TreeMap();\n+    private static NavigableMap<Item,String> map5() {\n+        TreeMap<Item,String> map = new TreeMap<Item,String>();\n@@ -69,1 +69,1 @@\n-        assertEquals(7, map.size());\n+        mustEqual(7, map.size());\n@@ -73,2 +73,2 @@\n-    private static NavigableMap map0() {\n-        TreeMap map = new TreeMap();\n+    private static NavigableMap<Item,String> map0() {\n+        TreeMap<Item,String> map = new TreeMap<Item,String>();\n@@ -80,1 +80,1 @@\n-     * Returns a new map from Integers -5 to -1 to Strings \"A\"-\"E\".\n+     * Returns a new map from Items -5 to -1 to Strings \"A\"-\"E\".\n@@ -82,2 +82,2 @@\n-    private static NavigableMap dmap5() {\n-        TreeMap map = new TreeMap();\n+    private static NavigableMap<Item,String> dmap5() {\n+        TreeMap<Item,String> map = new TreeMap<Item,String>();\n@@ -85,5 +85,5 @@\n-        map.put(m1, \"A\");\n-        map.put(m5, \"E\");\n-        map.put(m3, \"C\");\n-        map.put(m2, \"B\");\n-        map.put(m4, \"D\");\n+        map.put(minusOne, \"A\");\n+        map.put(minusFive, \"E\");\n+        map.put(minusThree, \"C\");\n+        map.put(minusTwo, \"B\");\n+        map.put(minusFour, \"D\");\n@@ -91,1 +91,1 @@\n-        assertEquals(5, map.size());\n+        mustEqual(5, map.size());\n@@ -95,2 +95,2 @@\n-    private static NavigableMap dmap0() {\n-        TreeMap map = new TreeMap();\n+    private static NavigableMap<Item,String> dmap0() {\n+        TreeMap<Item,String> map = new TreeMap<Item,String>();\n@@ -105,1 +105,1 @@\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> map = map5();\n@@ -107,1 +107,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -114,4 +114,4 @@\n-        NavigableMap map1 = map5();\n-        NavigableMap map2 = map5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        NavigableMap<Item,String> map1 = map5();\n+        NavigableMap<Item,String> map2 = map5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -127,1 +127,1 @@\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> map = map5();\n@@ -136,1 +136,1 @@\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> map = map5();\n@@ -146,3 +146,3 @@\n-        NavigableMap map = map5();\n-        assertEquals(\"A\", (String)map.get(one));\n-        NavigableMap empty = map0();\n+        NavigableMap<Item,String> map = map5();\n+        mustEqual(\"A\", map.get(one));\n+        NavigableMap<Item,String> empty = map0();\n@@ -156,2 +156,2 @@\n-        NavigableMap empty = map0();\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> empty = map0();\n+        NavigableMap<Item,String> map = map5();\n@@ -166,2 +166,2 @@\n-        NavigableMap map = map5();\n-        assertEquals(one, map.firstKey());\n+        NavigableMap<Item,String> map = map5();\n+        mustEqual(one, map.firstKey());\n@@ -174,2 +174,2 @@\n-        NavigableMap map = map5();\n-        assertEquals(five, map.lastKey());\n+        NavigableMap<Item,String> map = map5();\n+        mustEqual(five, map.lastKey());\n@@ -182,8 +182,8 @@\n-        NavigableMap map = map5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(one));\n-        assertTrue(s.contains(two));\n-        assertTrue(s.contains(three));\n-        assertTrue(s.contains(four));\n-        assertTrue(s.contains(five));\n+        NavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, one);\n+        mustContain(s, two);\n+        mustContain(s, three);\n+        mustContain(s, four);\n+        mustContain(s, five);\n@@ -196,5 +196,5 @@\n-        NavigableMap map = map5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, one);\n+        NavigableMap<Item,String> map = map5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = i.next();\n+        mustEqual(last, one);\n@@ -202,1 +202,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = i.next();\n@@ -212,3 +212,3 @@\n-        NavigableMap map = map5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        NavigableMap<Item,String> map = map5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -226,4 +226,4 @@\n-        NavigableMap map = map5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        NavigableMap<Item,String> map = map5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<? extends Map.Entry<Item,String>> it = s.iterator();\n@@ -231,1 +231,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -245,2 +245,2 @@\n-        NavigableMap empty = map0();\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> empty = map0();\n+        NavigableMap<Item,String> map = map5();\n@@ -248,1 +248,1 @@\n-        assertEquals(5, empty.size());\n+        mustEqual(5, empty.size());\n@@ -260,1 +260,1 @@\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> map = map5();\n@@ -262,1 +262,1 @@\n-        assertEquals(4, map.size());\n+        mustEqual(4, map.size());\n@@ -270,3 +270,3 @@\n-        NavigableMap map = map5();\n-        Map.Entry e1 = map.lowerEntry(three);\n-        assertEquals(two, e1.getKey());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(three);\n+        mustEqual(two, e1.getKey());\n@@ -274,2 +274,2 @@\n-        Map.Entry e2 = map.lowerEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -277,1 +277,1 @@\n-        Map.Entry e3 = map.lowerEntry(one);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(one);\n@@ -280,1 +280,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -288,3 +288,3 @@\n-        NavigableMap map = map5();\n-        Map.Entry e1 = map.higherEntry(three);\n-        assertEquals(four, e1.getKey());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(three);\n+        mustEqual(four, e1.getKey());\n@@ -292,2 +292,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -295,1 +295,1 @@\n-        Map.Entry e3 = map.higherEntry(five);\n+        Map.Entry<Item,String> e3 = map.higherEntry(five);\n@@ -298,1 +298,1 @@\n-        Map.Entry e4 = map.higherEntry(six);\n+        Map.Entry<Item,String> e4 = map.higherEntry(six);\n@@ -306,3 +306,3 @@\n-        NavigableMap map = map5();\n-        Map.Entry e1 = map.floorEntry(three);\n-        assertEquals(three, e1.getKey());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -310,2 +310,2 @@\n-        Map.Entry e2 = map.floorEntry(six);\n-        assertEquals(five, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(six);\n+        mustEqual(five, e2.getKey());\n@@ -313,2 +313,2 @@\n-        Map.Entry e3 = map.floorEntry(one);\n-        assertEquals(one, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(one);\n+        mustEqual(one, e3.getKey());\n@@ -316,1 +316,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -324,3 +324,3 @@\n-        NavigableMap map = map5();\n-        Map.Entry e1 = map.ceilingEntry(three);\n-        assertEquals(three, e1.getKey());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(three);\n+        mustEqual(three, e1.getKey());\n@@ -328,2 +328,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(one, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(one, e2.getKey());\n@@ -331,2 +331,2 @@\n-        Map.Entry e3 = map.ceilingEntry(five);\n-        assertEquals(five, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(five);\n+        mustEqual(five, e3.getKey());\n@@ -334,1 +334,1 @@\n-        Map.Entry e4 = map.ceilingEntry(six);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(six);\n@@ -342,4 +342,4 @@\n-        NavigableMap map = map5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -347,1 +347,1 @@\n-        assertEquals(two, e.getKey());\n+        mustEqual(two, e.getKey());\n@@ -350,2 +350,2 @@\n-        assertEquals(one, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(one, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -353,1 +353,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -356,1 +356,1 @@\n-        assertEquals(five, e.getKey());\n+        mustEqual(five, e.getKey());\n@@ -362,1 +362,1 @@\n-        Map.Entry f = map.firstEntry();\n+        Map.Entry<Item,String> f = map.firstEntry();\n@@ -372,4 +372,4 @@\n-        NavigableMap map = map5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        NavigableMap<Item,String> map = map5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -377,1 +377,1 @@\n-        assertEquals(four, e.getKey());\n+        mustEqual(four, e.getKey());\n@@ -380,2 +380,2 @@\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -383,1 +383,1 @@\n-        assertEquals(three, e.getKey());\n+        mustEqual(three, e.getKey());\n@@ -386,1 +386,1 @@\n-        assertEquals(one, e.getKey());\n+        mustEqual(one, e.getKey());\n@@ -399,4 +399,4 @@\n-        NavigableMap map = map5();\n-        NavigableMap empty = map0();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        NavigableMap<Item,String> map = map5();\n+        NavigableMap<Item,String> empty = map0();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -409,1 +409,1 @@\n-        NavigableMap map = map5();\n+        NavigableMap<Item,String> map = map5();\n@@ -422,1 +422,1 @@\n-        NavigableMap c = map5();\n+        NavigableMap<Item,String> c = map5();\n@@ -433,1 +433,1 @@\n-        NavigableMap c = map5();\n+        NavigableMap<Item,String> c = map5();\n@@ -444,1 +444,1 @@\n-        NavigableMap c = map5();\n+        NavigableMap<Item,String> c = map5();\n@@ -455,1 +455,1 @@\n-        NavigableMap c = map5();\n+        NavigableMap<Item,String> c = map5();\n@@ -466,2 +466,2 @@\n-        NavigableMap x = map5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = map5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -470,4 +470,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -480,5 +480,5 @@\n-        NavigableMap map = map5();\n-        SortedMap sm = map.subMap(two, four);\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(2, sm.size());\n+        NavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.subMap(two, four);\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(2, sm.size());\n@@ -490,6 +490,6 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -497,1 +497,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -501,5 +501,5 @@\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.firstKey());\n-        assertEquals(three, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(three));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.firstKey());\n+        mustEqual(three, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(three));\n@@ -507,1 +507,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -511,5 +511,5 @@\n-        NavigableMap map = map5();\n-        SortedMap sm = map.subMap(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.firstKey());\n-        assertEquals(two, sm.lastKey());\n+        NavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.subMap(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.firstKey());\n+        mustEqual(two, sm.lastKey());\n@@ -521,1 +521,1 @@\n-        Iterator i = sm.keySet().iterator();\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n@@ -523,2 +523,2 @@\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n@@ -526,1 +526,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -530,2 +530,2 @@\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -533,2 +533,2 @@\n-        assertSame(sm.remove(three), null);\n-        assertEquals(4, map.size());\n+        assertNull(sm.remove(three));\n+        mustEqual(4, map.size());\n@@ -541,2 +541,2 @@\n-        NavigableMap map = map5();\n-        SortedMap sm = map.headMap(four);\n+        NavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.headMap(four);\n@@ -548,8 +548,8 @@\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(one, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n@@ -559,2 +559,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(four, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(four, map.firstKey());\n@@ -567,2 +567,2 @@\n-        NavigableMap map = map5();\n-        SortedMap sm = map.tailMap(two);\n+        NavigableMap<Item,String> map = map5();\n+        SortedMap<Item,String> sm = map.tailMap(two);\n@@ -574,1 +574,1 @@\n-        Iterator i = sm.keySet().iterator();\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n@@ -576,8 +576,8 @@\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        k = (Item)(i.next());\n+        mustEqual(two, k);\n+        k = (Item)(i.next());\n+        mustEqual(three, k);\n+        k = (Item)(i.next());\n+        mustEqual(four, k);\n+        k = (Item)(i.next());\n+        mustEqual(five, k);\n@@ -586,14 +586,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(two, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(three, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(four, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(five, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = ei.next();\n+        mustEqual(two, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(three, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(four, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(five, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -602,7 +602,7 @@\n-        SortedMap ssm = sm.tailMap(four);\n-        assertEquals(four, ssm.firstKey());\n-        assertEquals(five, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        SortedMap<Item,String> ssm = sm.tailMap(four);\n+        mustEqual(four, ssm.firstKey());\n+        mustEqual(five, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(four));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n@@ -615,1 +615,1 @@\n-        NavigableMap map = dmap5();\n+        NavigableMap<Item,String> map = dmap5();\n@@ -617,1 +617,1 @@\n-        assertEquals(0, map.size());\n+        mustEqual(0, map.size());\n@@ -624,4 +624,4 @@\n-        NavigableMap map1 = dmap5();\n-        NavigableMap map2 = dmap5();\n-        assertEquals(map1, map2);\n-        assertEquals(map2, map1);\n+        NavigableMap<Item,String> map1 = dmap5();\n+        NavigableMap<Item,String> map2 = dmap5();\n+        mustEqual(map1, map2);\n+        mustEqual(map2, map1);\n@@ -637,2 +637,2 @@\n-        NavigableMap map = dmap5();\n-        assertTrue(map.containsKey(m1));\n+        NavigableMap<Item,String> map = dmap5();\n+        assertTrue(map.containsKey(minusOne));\n@@ -646,1 +646,1 @@\n-        NavigableMap map = dmap5();\n+        NavigableMap<Item,String> map = dmap5();\n@@ -656,4 +656,4 @@\n-        NavigableMap map = dmap5();\n-        assertEquals(\"A\", (String)map.get(m1));\n-        NavigableMap empty = dmap0();\n-        assertNull(empty.get(m1));\n+        NavigableMap<Item,String> map = dmap5();\n+        mustEqual(\"A\", map.get(minusOne));\n+        NavigableMap<Item,String> empty = dmap0();\n+        assertNull(empty.get(minusOne));\n@@ -666,2 +666,2 @@\n-        NavigableMap empty = dmap0();\n-        NavigableMap map = dmap5();\n+        NavigableMap<Item,String> empty = dmap0();\n+        NavigableMap<Item,String> map = dmap5();\n@@ -676,2 +676,2 @@\n-        NavigableMap map = dmap5();\n-        assertEquals(m1, map.firstKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        mustEqual(minusOne, map.firstKey());\n@@ -684,2 +684,2 @@\n-        NavigableMap map = dmap5();\n-        assertEquals(m5, map.lastKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        mustEqual(minusFive, map.lastKey());\n@@ -692,8 +692,8 @@\n-        NavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        assertEquals(5, s.size());\n-        assertTrue(s.contains(m1));\n-        assertTrue(s.contains(m2));\n-        assertTrue(s.contains(m3));\n-        assertTrue(s.contains(m4));\n-        assertTrue(s.contains(m5));\n+        NavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        mustEqual(5, s.size());\n+        mustContain(s, minusOne);\n+        mustContain(s, minusTwo);\n+        mustContain(s, minusThree);\n+        mustContain(s, minusFour);\n+        mustContain(s, minusFive);\n@@ -706,5 +706,5 @@\n-        NavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        Iterator i = s.iterator();\n-        Integer last = (Integer)i.next();\n-        assertEquals(last, m1);\n+        NavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        Iterator<? extends Item> i = s.iterator();\n+        Item last = (Item)i.next();\n+        mustEqual(last, minusOne);\n@@ -712,1 +712,1 @@\n-            Integer k = (Integer)i.next();\n+            Item k = (Item)i.next();\n@@ -722,3 +722,3 @@\n-        NavigableMap map = dmap5();\n-        Collection s = map.values();\n-        assertEquals(5, s.size());\n+        NavigableMap<Item,String> map = dmap5();\n+        Collection<String> s = map.values();\n+        mustEqual(5, s.size());\n@@ -736,3 +736,3 @@\n-        NavigableMap map = dmap5();\n-        Set s = map.keySet();\n-        Object[] ar = s.toArray();\n+        NavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.keySet();\n+        Item[] ar = s.toArray(new Item[0]);\n@@ -740,2 +740,2 @@\n-        assertEquals(5, ar.length);\n-        ar[0] = m10;\n+        mustEqual(5, ar.length);\n+        ar[0] = minusTen;\n@@ -749,4 +749,4 @@\n-        NavigableMap map = dmap5();\n-        Set s = map.descendingKeySet();\n-        Object[] ar = s.toArray();\n-        assertEquals(5, ar.length);\n+        NavigableMap<Item,String> map = dmap5();\n+        Set<Item> s = map.descendingKeySet();\n+        Item[] ar = s.toArray(new Item[0]);\n+        mustEqual(5, ar.length);\n@@ -754,1 +754,1 @@\n-        ar[0] = m10;\n+        ar[0] = minusTen;\n@@ -762,5 +762,5 @@\n-        NavigableMap map = dmap5();\n-        Collection v = map.values();\n-        Object[] ar = v.toArray();\n-        ArrayList s = new ArrayList(Arrays.asList(ar));\n-        assertEquals(5, ar.length);\n+        NavigableMap<Item,String> map = dmap5();\n+        Collection<String> v = map.values();\n+        String[] ar = v.toArray(new String[0]);\n+        ArrayList<String> s = new ArrayList<String>(Arrays.asList(ar));\n+        mustEqual(5, ar.length);\n@@ -778,4 +778,4 @@\n-        NavigableMap map = dmap5();\n-        Set s = map.entrySet();\n-        assertEquals(5, s.size());\n-        Iterator it = s.iterator();\n+        NavigableMap<Item,String> map = dmap5();\n+        Set<Map.Entry<Item,String>> s = map.entrySet();\n+        mustEqual(5, s.size());\n+        Iterator<Map.Entry<Item,String>> it = s.iterator();\n@@ -783,1 +783,1 @@\n-            Map.Entry e = (Map.Entry) it.next();\n+            Map.Entry<Item,String> e = it.next();\n@@ -785,5 +785,5 @@\n-                       (e.getKey().equals(m1) && e.getValue().equals(\"A\")) ||\n-                       (e.getKey().equals(m2) && e.getValue().equals(\"B\")) ||\n-                       (e.getKey().equals(m3) && e.getValue().equals(\"C\")) ||\n-                       (e.getKey().equals(m4) && e.getValue().equals(\"D\")) ||\n-                       (e.getKey().equals(m5) && e.getValue().equals(\"E\")));\n+                       (e.getKey().equals(minusOne) && e.getValue().equals(\"A\")) ||\n+                       (e.getKey().equals(minusTwo) && e.getValue().equals(\"B\")) ||\n+                       (e.getKey().equals(minusThree) && e.getValue().equals(\"C\")) ||\n+                       (e.getKey().equals(minusFour) && e.getValue().equals(\"D\")) ||\n+                       (e.getKey().equals(minusFive) && e.getValue().equals(\"E\")));\n@@ -797,2 +797,2 @@\n-        NavigableMap empty = dmap0();\n-        NavigableMap map = dmap5();\n+        NavigableMap<Item,String> empty = dmap0();\n+        NavigableMap<Item,String> map = dmap5();\n@@ -800,6 +800,6 @@\n-        assertEquals(5, empty.size());\n-        assertTrue(empty.containsKey(m1));\n-        assertTrue(empty.containsKey(m2));\n-        assertTrue(empty.containsKey(m3));\n-        assertTrue(empty.containsKey(m4));\n-        assertTrue(empty.containsKey(m5));\n+        mustEqual(5, empty.size());\n+        assertTrue(empty.containsKey(minusOne));\n+        assertTrue(empty.containsKey(minusTwo));\n+        assertTrue(empty.containsKey(minusThree));\n+        assertTrue(empty.containsKey(minusFour));\n+        assertTrue(empty.containsKey(minusFive));\n@@ -812,4 +812,4 @@\n-        NavigableMap map = dmap5();\n-        map.remove(m5);\n-        assertEquals(4, map.size());\n-        assertFalse(map.containsKey(m5));\n+        NavigableMap<Item,String> map = dmap5();\n+        map.remove(minusFive);\n+        mustEqual(4, map.size());\n+        assertFalse(map.containsKey(minusFive));\n@@ -822,3 +822,3 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e1 = map.lowerEntry(m3);\n-        assertEquals(m2, e1.getKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.lowerEntry(minusThree);\n+        mustEqual(minusTwo, e1.getKey());\n@@ -826,2 +826,2 @@\n-        Map.Entry e2 = map.lowerEntry(m6);\n-        assertEquals(m5, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.lowerEntry(minusSix);\n+        mustEqual(minusFive, e2.getKey());\n@@ -829,1 +829,1 @@\n-        Map.Entry e3 = map.lowerEntry(m1);\n+        Map.Entry<Item,String> e3 = map.lowerEntry(minusOne);\n@@ -832,1 +832,1 @@\n-        Map.Entry e4 = map.lowerEntry(zero);\n+        Map.Entry<Item,String> e4 = map.lowerEntry(zero);\n@@ -840,3 +840,3 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e1 = map.higherEntry(m3);\n-        assertEquals(m4, e1.getKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.higherEntry(minusThree);\n+        mustEqual(minusFour, e1.getKey());\n@@ -844,2 +844,2 @@\n-        Map.Entry e2 = map.higherEntry(zero);\n-        assertEquals(m1, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.higherEntry(zero);\n+        mustEqual(minusOne, e2.getKey());\n@@ -847,1 +847,1 @@\n-        Map.Entry e3 = map.higherEntry(m5);\n+        Map.Entry<Item,String> e3 = map.higherEntry(minusFive);\n@@ -850,1 +850,1 @@\n-        Map.Entry e4 = map.higherEntry(m6);\n+        Map.Entry<Item,String> e4 = map.higherEntry(minusSix);\n@@ -858,3 +858,3 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e1 = map.floorEntry(m3);\n-        assertEquals(m3, e1.getKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.floorEntry(minusThree);\n+        mustEqual(minusThree, e1.getKey());\n@@ -862,2 +862,2 @@\n-        Map.Entry e2 = map.floorEntry(m6);\n-        assertEquals(m5, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.floorEntry(minusSix);\n+        mustEqual(minusFive, e2.getKey());\n@@ -865,2 +865,2 @@\n-        Map.Entry e3 = map.floorEntry(m1);\n-        assertEquals(m1, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.floorEntry(minusOne);\n+        mustEqual(minusOne, e3.getKey());\n@@ -868,1 +868,1 @@\n-        Map.Entry e4 = map.floorEntry(zero);\n+        Map.Entry<Item,String> e4 = map.floorEntry(zero);\n@@ -876,3 +876,3 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e1 = map.ceilingEntry(m3);\n-        assertEquals(m3, e1.getKey());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e1 = map.ceilingEntry(minusThree);\n+        mustEqual(minusThree, e1.getKey());\n@@ -880,2 +880,2 @@\n-        Map.Entry e2 = map.ceilingEntry(zero);\n-        assertEquals(m1, e2.getKey());\n+        Map.Entry<Item,String> e2 = map.ceilingEntry(zero);\n+        mustEqual(minusOne, e2.getKey());\n@@ -883,2 +883,2 @@\n-        Map.Entry e3 = map.ceilingEntry(m5);\n-        assertEquals(m5, e3.getKey());\n+        Map.Entry<Item,String> e3 = map.ceilingEntry(minusFive);\n+        mustEqual(minusFive, e3.getKey());\n@@ -886,1 +886,1 @@\n-        Map.Entry e4 = map.ceilingEntry(m6);\n+        Map.Entry<Item,String> e4 = map.ceilingEntry(minusSix);\n@@ -894,4 +894,4 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e = map.pollFirstEntry();\n-        assertEquals(m1, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e = map.pollFirstEntry();\n+        mustEqual(minusOne, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -899,2 +899,2 @@\n-        assertEquals(m2, e.getKey());\n-        map.put(m1, \"A\");\n+        mustEqual(minusTwo, e.getKey());\n+        map.put(minusOne, \"A\");\n@@ -902,2 +902,2 @@\n-        assertEquals(m1, e.getKey());\n-        assertEquals(\"A\", e.getValue());\n+        mustEqual(minusOne, e.getKey());\n+        mustEqual(\"A\", e.getValue());\n@@ -905,2 +905,2 @@\n-        assertEquals(m3, e.getKey());\n-        map.remove(m4);\n+        mustEqual(minusThree, e.getKey());\n+        map.remove(minusFour);\n@@ -908,1 +908,1 @@\n-        assertEquals(m5, e.getKey());\n+        mustEqual(minusFive, e.getKey());\n@@ -921,4 +921,4 @@\n-        NavigableMap map = dmap5();\n-        Map.Entry e = map.pollLastEntry();\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        NavigableMap<Item,String> map = dmap5();\n+        Map.Entry<Item,String> e = map.pollLastEntry();\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -926,2 +926,2 @@\n-        assertEquals(m4, e.getKey());\n-        map.put(m5, \"E\");\n+        mustEqual(minusFour, e.getKey());\n+        map.put(minusFive, \"E\");\n@@ -929,2 +929,2 @@\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -932,2 +932,2 @@\n-        assertEquals(m3, e.getKey());\n-        map.remove(m2);\n+        mustEqual(minusThree, e.getKey());\n+        map.remove(minusTwo);\n@@ -935,1 +935,1 @@\n-        assertEquals(m1, e.getKey());\n+        mustEqual(minusOne, e.getKey());\n@@ -948,4 +948,4 @@\n-        NavigableMap map = dmap5();\n-        NavigableMap empty = dmap0();\n-        assertEquals(0, empty.size());\n-        assertEquals(5, map.size());\n+        NavigableMap<Item,String> map = dmap5();\n+        NavigableMap<Item,String> empty = dmap0();\n+        mustEqual(0, empty.size());\n+        mustEqual(5, map.size());\n@@ -958,1 +958,1 @@\n-        NavigableMap map = dmap5();\n+        NavigableMap<Item,String> map = dmap5();\n@@ -971,1 +971,1 @@\n-        NavigableMap c = dmap5();\n+        NavigableMap<Item,String> c = dmap5();\n@@ -982,1 +982,1 @@\n-        NavigableMap c = dmap5();\n+        NavigableMap<Item,String> c = dmap5();\n@@ -993,2 +993,2 @@\n-        NavigableMap x = dmap5();\n-        NavigableMap y = serialClone(x);\n+        NavigableMap<Item,String> x = dmap5();\n+        NavigableMap<Item,String> y = serialClone(x);\n@@ -997,4 +997,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -1007,16 +1007,16 @@\n-        NavigableMap map = dmap5();\n-        SortedMap sm = map.subMap(m2, m4);\n-        assertEquals(m2, sm.firstKey());\n-        assertEquals(m3, sm.lastKey());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.subMap(minusTwo, minusFour);\n+        mustEqual(minusTwo, sm.firstKey());\n+        mustEqual(minusThree, sm.lastKey());\n+        mustEqual(2, sm.size());\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusThree, k);\n@@ -1024,1 +1024,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -1027,6 +1027,6 @@\n-        assertFalse(map.containsKey(m2));\n-        assertEquals(4, map.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(m3, sm.firstKey());\n-        assertEquals(m3, sm.lastKey());\n-        assertEquals(\"C\", sm.remove(m3));\n+        assertFalse(map.containsKey(minusTwo));\n+        mustEqual(4, map.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(minusThree, sm.firstKey());\n+        mustEqual(minusThree, sm.lastKey());\n+        mustEqual(\"C\", sm.remove(minusThree));\n@@ -1034,1 +1034,1 @@\n-        assertEquals(3, map.size());\n+        mustEqual(3, map.size());\n@@ -1038,14 +1038,14 @@\n-        NavigableMap map = dmap5();\n-        SortedMap sm = map.subMap(m2, m3);\n-        assertEquals(1, sm.size());\n-        assertEquals(m2, sm.firstKey());\n-        assertEquals(m2, sm.lastKey());\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertFalse(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n+        NavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.subMap(minusTwo, minusThree);\n+        mustEqual(1, sm.size());\n+        mustEqual(minusTwo, sm.firstKey());\n+        mustEqual(minusTwo, sm.lastKey());\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertFalse(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n@@ -1053,1 +1053,1 @@\n-        Iterator j = sm.keySet().iterator();\n+        Iterator<? extends Item> j = sm.keySet().iterator();\n@@ -1056,3 +1056,3 @@\n-        assertFalse(map.containsKey(m2));\n-        assertEquals(4, map.size());\n-        assertEquals(0, sm.size());\n+        assertFalse(map.containsKey(minusTwo));\n+        mustEqual(4, map.size());\n+        mustEqual(0, sm.size());\n@@ -1060,2 +1060,2 @@\n-        assertSame(sm.remove(m3), null);\n-        assertEquals(4, map.size());\n+        assertNull(sm.remove(minusThree));\n+        mustEqual(4, map.size());\n@@ -1068,15 +1068,15 @@\n-        NavigableMap map = dmap5();\n-        SortedMap sm = map.headMap(m4);\n-        assertTrue(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertFalse(sm.containsKey(m4));\n-        assertFalse(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m1, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.headMap(minusFour);\n+        assertTrue(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertFalse(sm.containsKey(minusFour));\n+        assertFalse(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusOne, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusThree, k);\n@@ -1086,2 +1086,2 @@\n-        assertEquals(2, map.size());\n-        assertEquals(m4, map.firstKey());\n+        mustEqual(2, map.size());\n+        mustEqual(minusFour, map.firstKey());\n@@ -1094,17 +1094,17 @@\n-        NavigableMap map = dmap5();\n-        SortedMap sm = map.tailMap(m2);\n-        assertFalse(sm.containsKey(m1));\n-        assertTrue(sm.containsKey(m2));\n-        assertTrue(sm.containsKey(m3));\n-        assertTrue(sm.containsKey(m4));\n-        assertTrue(sm.containsKey(m5));\n-        Iterator i = sm.keySet().iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m4, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m5, k);\n+        NavigableMap<Item,String> map = dmap5();\n+        SortedMap<Item,String> sm = map.tailMap(minusTwo);\n+        assertFalse(sm.containsKey(minusOne));\n+        assertTrue(sm.containsKey(minusTwo));\n+        assertTrue(sm.containsKey(minusThree));\n+        assertTrue(sm.containsKey(minusFour));\n+        assertTrue(sm.containsKey(minusFive));\n+        Iterator<? extends Item> i = sm.keySet().iterator();\n+        Item k;\n+        k = (Item)(i.next());\n+        mustEqual(minusTwo, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusThree, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusFour, k);\n+        k = (Item)(i.next());\n+        mustEqual(minusFive, k);\n@@ -1113,14 +1113,14 @@\n-        Iterator ei = sm.entrySet().iterator();\n-        Map.Entry e;\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m2, e.getKey());\n-        assertEquals(\"B\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m3, e.getKey());\n-        assertEquals(\"C\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m4, e.getKey());\n-        assertEquals(\"D\", e.getValue());\n-        e = (Map.Entry)(ei.next());\n-        assertEquals(m5, e.getKey());\n-        assertEquals(\"E\", e.getValue());\n+        Iterator<Map.Entry<Item,String>> ei = sm.entrySet().iterator();\n+        Map.Entry<Item,String> e;\n+        e = (ei.next());\n+        mustEqual(minusTwo, e.getKey());\n+        mustEqual(\"B\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusThree, e.getKey());\n+        mustEqual(\"C\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusFour, e.getKey());\n+        mustEqual(\"D\", e.getValue());\n+        e = (ei.next());\n+        mustEqual(minusFive, e.getKey());\n+        mustEqual(\"E\", e.getValue());\n@@ -1129,7 +1129,7 @@\n-        SortedMap ssm = sm.tailMap(m4);\n-        assertEquals(m4, ssm.firstKey());\n-        assertEquals(m5, ssm.lastKey());\n-        assertEquals(\"D\", ssm.remove(m4));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, map.size());\n+        SortedMap<Item,String> ssm = sm.tailMap(minusFour);\n+        mustEqual(minusFour, ssm.firstKey());\n+        mustEqual(minusFive, ssm.lastKey());\n+        mustEqual(\"D\", ssm.remove(minusFour));\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, map.size());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/TreeSubMapTest.java","additions":437,"deletions":437,"binary":false,"changes":874,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -61,1 +62,1 @@\n-     * Integers 0 ... n - 1.\n+     * Items 0 ... n - 1.\n@@ -63,2 +64,2 @@\n-    private static NavigableSet<Integer> populatedSet(int n) {\n-        TreeSet<Integer> q = new TreeSet<>();\n+    private static NavigableSet<Item> populatedSet(int n) {\n+        TreeSet<Item> q = new TreeSet<>();\n@@ -68,1 +69,1 @@\n-            assertTrue(q.add(new Integer(i)));\n+            mustAdd(q, i);\n@@ -70,4 +71,4 @@\n-            assertTrue(q.add(new Integer(i)));\n-        assertTrue(q.add(new Integer(-n)));\n-        assertTrue(q.add(new Integer(n)));\n-        NavigableSet s = q.subSet(new Integer(0), true, new Integer(n), false);\n+            mustAdd(q, i);\n+        mustAdd(q, new Item(-n));\n+        mustAdd(q, new Item(n));\n+        NavigableSet<Item> s = q.subSet(zero, true, itemFor(n), false);\n@@ -75,1 +76,1 @@\n-        assertEquals(n, s.size());\n+        mustEqual(n, s.size());\n@@ -82,2 +83,2 @@\n-    private static NavigableSet set5() {\n-        TreeSet q = new TreeSet();\n+    private static NavigableSet<Item> set5() {\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -92,2 +93,2 @@\n-        NavigableSet s = q.subSet(one, true, seven, false);\n-        assertEquals(5, s.size());\n+        NavigableSet<Item> s = q.subSet(one, true, seven, false);\n+        mustEqual(5, s.size());\n@@ -97,2 +98,2 @@\n-    private static NavigableSet dset5() {\n-        TreeSet q = new TreeSet();\n+    private static NavigableSet<Item> dset5() {\n+        TreeSet<Item> q = new TreeSet<Item>();\n@@ -100,7 +101,7 @@\n-        q.add(m1);\n-        q.add(m2);\n-        q.add(m3);\n-        q.add(m4);\n-        q.add(m5);\n-        NavigableSet s = q.descendingSet();\n-        assertEquals(5, s.size());\n+        q.add(minusOne);\n+        q.add(minusTwo);\n+        q.add(minusThree);\n+        q.add(minusFour);\n+        q.add(minusFive);\n+        NavigableSet<Item> s = q.descendingSet();\n+        mustEqual(5, s.size());\n@@ -110,2 +111,2 @@\n-    private static NavigableSet set0() {\n-        TreeSet set = new TreeSet();\n+    private static NavigableSet<Item> set0() {\n+        TreeSet<Item> set = new TreeSet<Item>();\n@@ -113,1 +114,1 @@\n-        return set.tailSet(m1, false);\n+        return set.tailSet(minusOne, false);\n@@ -116,2 +117,2 @@\n-    private static NavigableSet dset0() {\n-        TreeSet set = new TreeSet();\n+    private static NavigableSet<Item> dset0() {\n+        TreeSet<Item> set = new TreeSet<Item>();\n@@ -126,1 +127,1 @@\n-        assertEquals(0, set0().size());\n+        mustEqual(0, set0().size());\n@@ -133,1 +134,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -135,1 +136,1 @@\n-        assertTrue(q.add(new Integer(1)));\n+        assertTrue(q.add(one));\n@@ -137,1 +138,1 @@\n-        assertTrue(q.add(new Integer(2)));\n+        assertTrue(q.add(two));\n@@ -147,1 +148,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -149,1 +150,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -153,2 +154,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -162,1 +163,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -173,1 +174,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -181,1 +182,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -190,1 +191,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Object> q = new TreeSet<Object>();\n@@ -202,1 +203,1 @@\n-        NavigableSet q = set0();\n+        NavigableSet<Item> q = set0();\n@@ -213,2 +214,2 @@\n-        NavigableSet q = set0();\n-        Integer[] ints = new Integer[SIZE];\n+        NavigableSet<Item> q = set0();\n+        Item[] items = new Item[2];\n@@ -216,1 +217,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -226,4 +227,3 @@\n-        NavigableSet q = set0();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i + SIZE);\n+        NavigableSet<Item> q = set0();\n+        Item[] items = new Item[2];\n+        items[0] = zero;\n@@ -231,1 +231,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -240,2 +240,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] empty = new Item[0];\n+        Item[] items = new Item[SIZE];\n@@ -243,2 +243,2 @@\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        NavigableSet q = set0();\n+            items[i] = itemFor(SIZE - 1 - i);\n+        NavigableSet<Item> q = set0();\n@@ -246,1 +246,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -248,1 +248,1 @@\n-            assertEquals(new Integer(i), q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -255,1 +255,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -257,1 +257,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -266,1 +266,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -268,4 +268,4 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertTrue(q.contains(i - 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustContain(q, i - 1);\n@@ -274,5 +274,5 @@\n-            assertTrue(q.contains(i));\n-            assertTrue(q.remove(i));\n-            assertFalse(q.contains(i));\n-            assertFalse(q.remove(i + 1));\n-            assertFalse(q.contains(i + 1));\n+            mustContain(q, i);\n+            mustRemove(q, i);\n+            mustNotContain(q, i);\n+            mustNotRemove(q, i + 1);\n+            mustNotContain(q, i + 1);\n@@ -287,1 +287,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -289,3 +289,2 @@\n-            assertTrue(q.contains(new Integer(i)));\n-            q.pollFirst();\n-            assertFalse(q.contains(new Integer(i)));\n+            mustContain(q, i);\n+            mustNotContain(q, q.pollFirst());\n@@ -299,1 +298,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -302,2 +301,2 @@\n-        assertEquals(0, q.size());\n-        assertTrue(q.add(new Integer(1)));\n+        mustEqual(0, q.size());\n+        assertTrue(q.add(one));\n@@ -313,2 +312,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = set0();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = set0();\n@@ -318,1 +317,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -327,2 +326,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = populatedSet(SIZE);\n@@ -337,1 +336,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -347,2 +346,2 @@\n-            NavigableSet q = populatedSet(SIZE);\n-            NavigableSet p = populatedSet(i);\n+            NavigableSet<Item> q = populatedSet(SIZE);\n+            NavigableSet<Item> p = populatedSet(i);\n@@ -350,1 +349,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -352,2 +351,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -362,1 +360,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -364,1 +362,1 @@\n-        assertEquals(two, e1);\n+        mustEqual(two, e1);\n@@ -367,1 +365,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -380,1 +378,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -382,1 +380,1 @@\n-        assertEquals(four, e1);\n+        mustEqual(four, e1);\n@@ -385,1 +383,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -398,1 +396,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -400,1 +398,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -403,1 +401,1 @@\n-        assertEquals(five, e2);\n+        mustEqual(five, e2);\n@@ -406,1 +404,1 @@\n-        assertEquals(one, e3);\n+        mustEqual(one, e3);\n@@ -416,1 +414,1 @@\n-        NavigableSet q = set5();\n+        NavigableSet<Item> q = set5();\n@@ -418,1 +416,1 @@\n-        assertEquals(three, e1);\n+        mustEqual(three, e1);\n@@ -421,1 +419,1 @@\n-        assertEquals(one, e2);\n+        mustEqual(one, e2);\n@@ -424,1 +422,1 @@\n-        assertEquals(five, e3);\n+        mustEqual(five, e3);\n@@ -434,1 +432,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -446,5 +444,5 @@\n-        NavigableSet<Integer> q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        Integer[] array = q.toArray(ints);\n-        assertSame(ints, array);\n-        for (Integer o : ints)\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Item[] items = seqItems(SIZE);\n+        Item[] array = q.toArray(items);\n+        assertSame(items, array);\n+        for (Item o : items)\n@@ -459,2 +457,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        Iterator it = q.iterator();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Iterator<? extends Item> it = q.iterator();\n@@ -463,2 +461,2 @@\n-            assertTrue(q.contains(it.next()));\n-        assertEquals(i, SIZE);\n+            mustContain(q, it.next());\n+        mustEqual(i, SIZE);\n@@ -479,4 +477,4 @@\n-        final NavigableSet q = set0();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final NavigableSet<Item> q = set0();\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -484,1 +482,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -489,2 +487,2 @@\n-        assertEquals(2, it.next());\n-        assertEquals(3, it.next());\n+        mustEqual(two, it.next());\n+        mustEqual(three, it.next());\n@@ -498,1 +496,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -509,2 +507,2 @@\n-        NavigableSet x = populatedSet(SIZE);\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = populatedSet(SIZE);\n+        NavigableSet<Item> y = serialClone(x);\n@@ -513,3 +511,3 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -518,1 +516,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -527,16 +525,15 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.subSet(two, four);\n-        assertEquals(two, sm.first());\n-        assertEquals(three, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, four);\n+        mustEqual(two, sm.first());\n+        mustEqual(three, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -544,1 +541,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -547,6 +544,6 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(three, sm.first());\n-        assertEquals(three, sm.last());\n-        assertTrue(sm.remove(three));\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(three, sm.first());\n+        mustEqual(three, sm.last());\n+        mustRemove(sm, three);\n@@ -554,1 +551,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -558,14 +555,13 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.subSet(two, three);\n-        assertEquals(1, sm.size());\n-        assertEquals(two, sm.first());\n-        assertEquals(two, sm.last());\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertFalse(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.subSet(two, three);\n+        mustEqual(1, sm.size());\n+        mustEqual(two, sm.first());\n+        mustEqual(two, sm.last());\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustNotContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n@@ -573,1 +569,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -576,3 +572,3 @@\n-        assertFalse(set.contains(two));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, two);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -580,2 +576,2 @@\n-        assertFalse(sm.remove(three));\n-        assertEquals(4, set.size());\n+        mustNotRemove(sm, three);\n+        mustEqual(4, set.size());\n@@ -588,15 +584,14 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.headSet(four);\n-        assertTrue(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertFalse(sm.contains(four));\n-        assertFalse(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(one, k);\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.headSet(four);\n+        mustContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustNotContain(sm, four);\n+        mustNotContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(one, k);\n+        k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n@@ -606,2 +601,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(four, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(four, set.first());\n@@ -614,17 +609,16 @@\n-        NavigableSet set = set5();\n-        SortedSet sm = set.tailSet(two);\n-        assertFalse(sm.contains(one));\n-        assertTrue(sm.contains(two));\n-        assertTrue(sm.contains(three));\n-        assertTrue(sm.contains(four));\n-        assertTrue(sm.contains(five));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(two, k);\n-        k = (Integer)(i.next());\n-        assertEquals(three, k);\n-        k = (Integer)(i.next());\n-        assertEquals(four, k);\n-        k = (Integer)(i.next());\n-        assertEquals(five, k);\n+        NavigableSet<Item> set = set5();\n+        SortedSet<Item> sm = set.tailSet(two);\n+        mustNotContain(sm, one);\n+        mustContain(sm, two);\n+        mustContain(sm, three);\n+        mustContain(sm, four);\n+        mustContain(sm, five);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(two, k);\n+        k = i.next();\n+        mustEqual(three, k);\n+        k = i.next();\n+        mustEqual(four, k);\n+        k = i.next();\n+        mustEqual(five, k);\n@@ -633,7 +627,7 @@\n-        SortedSet ssm = sm.tailSet(four);\n-        assertEquals(four, ssm.first());\n-        assertEquals(five, ssm.last());\n-        assertTrue(ssm.remove(four));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(four);\n+        mustEqual(four, ssm.first());\n+        mustEqual(five, ssm.last());\n+        mustRemove(ssm, four);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n@@ -646,1 +640,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -648,1 +642,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -652,2 +646,2 @@\n-            assertEquals(i, q.size());\n-            q.add(new Integer(i));\n+            mustEqual(i, q.size());\n+            mustAdd(q, i);\n@@ -661,2 +655,2 @@\n-        NavigableSet q = dset0();\n-        assertTrue(q.add(m6));\n+        NavigableSet<Item> q = dset0();\n+        assertTrue(q.add(minusSix));\n@@ -669,3 +663,3 @@\n-        NavigableSet q = dset0();\n-        assertTrue(q.add(m6));\n-        assertFalse(q.add(m6));\n+        NavigableSet<Item> q = dset0();\n+        assertTrue(q.add(minusSix));\n+        assertFalse(q.add(minusSix));\n@@ -678,1 +672,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Object> q = new TreeSet<Object>();\n@@ -690,1 +684,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Item> q = dset0();\n@@ -701,2 +695,2 @@\n-        NavigableSet q = dset0();\n-        Integer[] ints = new Integer[SIZE];\n+        NavigableSet<Item> q = dset0();\n+        Item[] items = new Item[2]; items[0] = zero;\n@@ -704,1 +698,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -714,4 +708,3 @@\n-        NavigableSet q = dset0();\n-        Integer[] ints = new Integer[SIZE];\n-        for (int i = 0; i < SIZE - 1; ++i)\n-            ints[i] = new Integer(i + SIZE);\n+        NavigableSet<Item> q = dset0();\n+        Item[] items = new Item[2];\n+        items[0] = ninetynine;\n@@ -719,1 +712,1 @@\n-            q.addAll(Arrays.asList(ints));\n+            q.addAll(Arrays.asList(items));\n@@ -728,2 +721,2 @@\n-        Integer[] empty = new Integer[0];\n-        Integer[] ints = new Integer[SIZE];\n+        Item[] empty = new Item[0];\n+        Item[] items = new Item[SIZE];\n@@ -731,2 +724,2 @@\n-            ints[i] = new Integer(SIZE - 1 - i);\n-        NavigableSet q = dset0();\n+            items[i] = itemFor(SIZE - 1 - i);\n+        NavigableSet<Item> q = dset0();\n@@ -734,1 +727,1 @@\n-        assertTrue(q.addAll(Arrays.asList(ints)));\n+        assertTrue(q.addAll(Arrays.asList(items)));\n@@ -736,1 +729,1 @@\n-            assertEquals(new Integer(i), q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -743,1 +736,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -745,1 +738,1 @@\n-            assertEquals(i, q.pollFirst());\n+            mustEqual(i, q.pollFirst());\n@@ -754,1 +747,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -756,1 +749,1 @@\n-            assertTrue(q.remove(new Integer(i)));\n+            mustRemove(q, i);\n@@ -759,2 +752,2 @@\n-            assertTrue(q.remove(new Integer(i)));\n-            assertFalse(q.remove(new Integer(i + 1)));\n+            mustRemove(q, i);\n+            mustNotRemove(q, i + 1);\n@@ -769,1 +762,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -771,1 +764,1 @@\n-            assertTrue(q.contains(new Integer(i)));\n+            mustContain(q, i);\n@@ -773,1 +766,1 @@\n-            assertFalse(q.contains(new Integer(i)));\n+            mustNotContain(q, i);\n@@ -781,1 +774,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -784,2 +777,2 @@\n-        assertEquals(0, q.size());\n-        assertTrue(q.add(new Integer(1)));\n+        mustEqual(0, q.size());\n+        mustAdd(q, one);\n@@ -795,2 +788,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = dset0();\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = dset0();\n@@ -800,1 +793,1 @@\n-            p.add(new Integer(i));\n+            mustAdd(p, i);\n@@ -809,2 +802,2 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        NavigableSet p = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        NavigableSet<Item> p = populatedSet(SIZE);\n@@ -819,1 +812,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -829,2 +822,2 @@\n-            NavigableSet q = populatedSet(SIZE);\n-            NavigableSet p = populatedSet(i);\n+            NavigableSet<Item> q = populatedSet(SIZE);\n+            NavigableSet<Item> p = populatedSet(i);\n@@ -832,1 +825,1 @@\n-            assertEquals(SIZE - i, q.size());\n+            mustEqual(SIZE - i, q.size());\n@@ -834,2 +827,1 @@\n-                Integer x = (Integer)(p.pollFirst());\n-                assertFalse(q.contains(x));\n+                mustNotContain(q, p.pollFirst());\n@@ -844,3 +836,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.lower(m3);\n-        assertEquals(m2, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.lower(minusThree);\n+        mustEqual(minusTwo, e1);\n@@ -848,2 +840,2 @@\n-        Object e2 = q.lower(m6);\n-        assertEquals(m5, e2);\n+        Object e2 = q.lower(minusSix);\n+        mustEqual(minusFive, e2);\n@@ -851,1 +843,1 @@\n-        Object e3 = q.lower(m1);\n+        Object e3 = q.lower(minusOne);\n@@ -862,3 +854,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.higher(m3);\n-        assertEquals(m4, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.higher(minusThree);\n+        mustEqual(minusFour, e1);\n@@ -867,1 +859,1 @@\n-        assertEquals(m1, e2);\n+        mustEqual(minusOne, e2);\n@@ -869,1 +861,1 @@\n-        Object e3 = q.higher(m5);\n+        Object e3 = q.higher(minusFive);\n@@ -872,1 +864,1 @@\n-        Object e4 = q.higher(m6);\n+        Object e4 = q.higher(minusSix);\n@@ -880,3 +872,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.floor(m3);\n-        assertEquals(m3, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.floor(minusThree);\n+        mustEqual(minusThree, e1);\n@@ -884,2 +876,2 @@\n-        Object e2 = q.floor(m6);\n-        assertEquals(m5, e2);\n+        Object e2 = q.floor(minusSix);\n+        mustEqual(minusFive, e2);\n@@ -887,2 +879,2 @@\n-        Object e3 = q.floor(m1);\n-        assertEquals(m1, e3);\n+        Object e3 = q.floor(minusOne);\n+        mustEqual(minusOne, e3);\n@@ -898,3 +890,3 @@\n-        NavigableSet q = dset5();\n-        Object e1 = q.ceiling(m3);\n-        assertEquals(m3, e1);\n+        NavigableSet<Item> q = dset5();\n+        Object e1 = q.ceiling(minusThree);\n+        mustEqual(minusThree, e1);\n@@ -903,1 +895,1 @@\n-        assertEquals(m1, e2);\n+        mustEqual(minusOne, e2);\n@@ -905,2 +897,2 @@\n-        Object e3 = q.ceiling(m5);\n-        assertEquals(m5, e3);\n+        Object e3 = q.ceiling(minusFive);\n+        mustEqual(minusFive, e3);\n@@ -908,1 +900,1 @@\n-        Object e4 = q.ceiling(m6);\n+        Object e4 = q.ceiling(minusSix);\n@@ -916,1 +908,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -920,1 +912,1 @@\n-            assertEquals(o[i], q.pollFirst());\n+            mustEqual((Item)o[i], q.pollFirst());\n@@ -927,6 +919,6 @@\n-        NavigableSet q = populatedSet(SIZE);\n-        Integer[] ints = new Integer[SIZE];\n-        assertSame(ints, q.toArray(ints));\n-        Arrays.sort(ints);\n-        for (int i = 0; i < ints.length; i++)\n-            assertEquals(ints[i], q.pollFirst());\n+        NavigableSet<Item> q = populatedSet(SIZE);\n+        Item[] items = new Item[SIZE];\n+        assertSame(items, q.toArray(items));\n+        Arrays.sort(items);\n+        for (int i = 0; i < items.length; i++)\n+            mustEqual(items[i], q.pollFirst());\n@@ -939,1 +931,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -941,1 +933,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -943,1 +935,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -946,1 +938,1 @@\n-        assertEquals(i, SIZE);\n+        mustEqual(i, SIZE);\n@@ -953,1 +945,1 @@\n-        NavigableSet q = dset0();\n+        NavigableSet<Item> q = dset0();\n@@ -955,1 +947,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -957,1 +949,1 @@\n-            assertTrue(q.contains(it.next()));\n+            mustContain(q, it.next());\n@@ -960,1 +952,1 @@\n-        assertEquals(0, i);\n+        mustEqual(0, i);\n@@ -967,4 +959,4 @@\n-        final NavigableSet q = dset0();\n-        q.add(new Integer(2));\n-        q.add(new Integer(1));\n-        q.add(new Integer(3));\n+        final NavigableSet<Item> q = dset0();\n+        q.add(two);\n+        q.add(one);\n+        q.add(three);\n@@ -972,1 +964,1 @@\n-        Iterator it = q.iterator();\n+        Iterator<? extends Item> it = q.iterator();\n@@ -977,2 +969,2 @@\n-        assertEquals(2, it.next());\n-        assertEquals(3, it.next());\n+        mustEqual(two, it.next());\n+        mustEqual(three, it.next());\n@@ -986,1 +978,1 @@\n-        NavigableSet q = populatedSet(SIZE);\n+        NavigableSet<Item> q = populatedSet(SIZE);\n@@ -997,2 +989,2 @@\n-        NavigableSet x = dset5();\n-        NavigableSet y = serialClone(x);\n+        NavigableSet<Item> x = dset5();\n+        NavigableSet<Item> y = serialClone(x);\n@@ -1001,4 +993,4 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -1007,1 +999,1 @@\n-            assertEquals(x.pollFirst(), y.pollFirst());\n+            mustEqual(x.pollFirst(), y.pollFirst());\n@@ -1016,16 +1008,15 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.subSet(m2, m4);\n-        assertEquals(m2, sm.first());\n-        assertEquals(m3, sm.last());\n-        assertEquals(2, sm.size());\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.subSet(minusTwo, minusFour);\n+        mustEqual(minusTwo, sm.first());\n+        mustEqual(minusThree, sm.last());\n+        mustEqual(2, sm.size());\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n@@ -1033,1 +1024,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -1036,6 +1027,6 @@\n-        assertFalse(set.contains(m2));\n-        assertEquals(4, set.size());\n-        assertEquals(1, sm.size());\n-        assertEquals(m3, sm.first());\n-        assertEquals(m3, sm.last());\n-        assertTrue(sm.remove(m3));\n+        mustNotContain(set, minusTwo);\n+        mustEqual(4, set.size());\n+        mustEqual(1, sm.size());\n+        mustEqual(minusThree, sm.first());\n+        mustEqual(minusThree, sm.last());\n+        mustRemove(sm, minusThree);\n@@ -1043,1 +1034,1 @@\n-        assertEquals(3, set.size());\n+        mustEqual(3, set.size());\n@@ -1047,14 +1038,13 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.subSet(m2, m3);\n-        assertEquals(1, sm.size());\n-        assertEquals(m2, sm.first());\n-        assertEquals(m2, sm.last());\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertFalse(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.subSet(minusTwo, minusThree);\n+        mustEqual(1, sm.size());\n+        mustEqual(minusTwo, sm.first());\n+        mustEqual(minusTwo, sm.last());\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustNotContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n@@ -1062,1 +1052,1 @@\n-        Iterator j = sm.iterator();\n+        Iterator<? extends Item> j = sm.iterator();\n@@ -1065,3 +1055,3 @@\n-        assertFalse(set.contains(m2));\n-        assertEquals(4, set.size());\n-        assertEquals(0, sm.size());\n+        mustNotContain(set, minusTwo);\n+        mustEqual(4, set.size());\n+        mustEqual(0, sm.size());\n@@ -1069,2 +1059,2 @@\n-        assertFalse(sm.remove(m3));\n-        assertEquals(4, set.size());\n+        mustNotRemove(sm, minusThree);\n+        mustEqual(4, set.size());\n@@ -1077,15 +1067,14 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.headSet(m4);\n-        assertTrue(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertFalse(sm.contains(m4));\n-        assertFalse(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m1, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.headSet(minusFour);\n+        mustContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustNotContain(sm, minusFour);\n+        mustNotContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusOne, k);\n+        k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n@@ -1095,2 +1084,2 @@\n-        assertEquals(2, set.size());\n-        assertEquals(m4, set.first());\n+        mustEqual(2, set.size());\n+        mustEqual(minusFour, set.first());\n@@ -1103,17 +1092,16 @@\n-        NavigableSet set = dset5();\n-        SortedSet sm = set.tailSet(m2);\n-        assertFalse(sm.contains(m1));\n-        assertTrue(sm.contains(m2));\n-        assertTrue(sm.contains(m3));\n-        assertTrue(sm.contains(m4));\n-        assertTrue(sm.contains(m5));\n-        Iterator i = sm.iterator();\n-        Object k;\n-        k = (Integer)(i.next());\n-        assertEquals(m2, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m3, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m4, k);\n-        k = (Integer)(i.next());\n-        assertEquals(m5, k);\n+        NavigableSet<Item> set = dset5();\n+        SortedSet<Item> sm = set.tailSet(minusTwo);\n+        mustNotContain(sm, minusOne);\n+        mustContain(sm, minusTwo);\n+        mustContain(sm, minusThree);\n+        mustContain(sm, minusFour);\n+        mustContain(sm, minusFive);\n+        Iterator<? extends Item> i = sm.iterator();\n+        Item k = i.next();\n+        mustEqual(minusTwo, k);\n+        k = i.next();\n+        mustEqual(minusThree, k);\n+        k = i.next();\n+        mustEqual(minusFour, k);\n+        k = i.next();\n+        mustEqual(minusFive, k);\n@@ -1122,7 +1110,7 @@\n-        SortedSet ssm = sm.tailSet(m4);\n-        assertEquals(m4, ssm.first());\n-        assertEquals(m5, ssm.last());\n-        assertTrue(ssm.remove(m4));\n-        assertEquals(1, ssm.size());\n-        assertEquals(3, sm.size());\n-        assertEquals(4, set.size());\n+        SortedSet<Item> ssm = sm.tailSet(minusFour);\n+        mustEqual(minusFour, ssm.first());\n+        mustEqual(minusFive, ssm.last());\n+        mustRemove(ssm, minusFour);\n+        mustEqual(1, ssm.size());\n+        mustEqual(3, sm.size());\n+        mustEqual(4, set.size());\n@@ -1135,2 +1123,2 @@\n-        Set x = populatedSet(SIZE);\n-        Set y = new TreeSet(x);\n+        Set<Item> x = populatedSet(SIZE);\n+        Set<Item> y = new TreeSet<Item>(x);\n@@ -1138,2 +1126,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/TreeSubSetTest.java","additions":389,"deletions":401,"binary":false,"changes":790,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            public Object makeElement(int i) { return i; }\n+            public Object makeElement(int i) { return JSR166TestCase.itemFor(i); }\n@@ -58,0 +58,1 @@\n+            @SuppressWarnings(\"unchecked\")\n@@ -73,2 +74,2 @@\n-    static Vector<Integer> populatedList(int n) {\n-        Vector<Integer> list = new Vector<>();\n+    static Vector<Item> populatedList(int n) {\n+        Vector<Item> list = new Vector<>();\n@@ -77,3 +78,3 @@\n-            list.add(i);\n-        assertEquals(n <= 0, list.isEmpty());\n-        assertEquals(n, list.size());\n+            mustAdd(list, i);\n+        mustEqual(n <= 0, list.isEmpty());\n+        mustEqual(n, list.size());\n@@ -87,1 +88,1 @@\n-        List list = populatedList(3);\n+        List<Item> list = populatedList(3);\n@@ -89,1 +90,1 @@\n-        assertEquals(6, list.size());\n+        mustEqual(6, list.size());\n@@ -91,1 +92,1 @@\n-        assertEquals(9, list.size());\n+        mustEqual(9, list.size());\n@@ -98,1 +99,1 @@\n-        List list = populatedList(SIZE);\n+        List<Item> list = populatedList(SIZE);\n@@ -100,1 +101,1 @@\n-        assertEquals(0, list.size());\n+        mustEqual(0, list.size());\n@@ -107,3 +108,4 @@\n-        Vector l1 = populatedList(SIZE);\n-        Vector l2 = (Vector)(l1.clone());\n-        assertEquals(l1, l2);\n+        Vector<Item> l1 = populatedList(SIZE);\n+        @SuppressWarnings(\"unchecked\")\n+        Vector<Item> l2 = (Vector<Item>)(l1.clone());\n+        mustEqual(l1, l2);\n@@ -118,3 +120,3 @@\n-        List list = populatedList(3);\n-        assertTrue(list.contains(one));\n-        assertFalse(list.contains(five));\n+        List<Item> list = populatedList(3);\n+        mustContain(list, one);\n+        mustNotContain(list, five);\n@@ -127,10 +129,10 @@\n-        List list = populatedList(3);\n-        list.add(0, m1);\n-        assertEquals(4, list.size());\n-        assertEquals(m1, list.get(0));\n-        assertEquals(zero, list.get(1));\n-\n-        list.add(2, m2);\n-        assertEquals(5, list.size());\n-        assertEquals(m2, list.get(2));\n-        assertEquals(two, list.get(4));\n+        List<Item> list = populatedList(3);\n+        list.add(0, minusOne);\n+        mustEqual(4, list.size());\n+        mustEqual(minusOne, list.get(0));\n+        mustEqual(zero, list.get(1));\n+\n+        list.add(2, minusTwo);\n+        mustEqual(5, list.size());\n+        mustEqual(minusTwo, list.get(2));\n+        mustEqual(two, list.get(4));\n@@ -143,2 +145,2 @@\n-        List a = populatedList(3);\n-        List b = populatedList(3);\n+        List<Item> a = populatedList(3);\n+        List<Item> b = populatedList(3);\n@@ -149,2 +151,2 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n-        a.add(m1);\n+        mustEqual(a.hashCode(), b.hashCode());\n+        a.add(minusOne);\n@@ -155,1 +157,1 @@\n-        b.add(m1);\n+        b.add(minusOne);\n@@ -160,1 +162,1 @@\n-        assertEquals(a.hashCode(), b.hashCode());\n+        mustEqual(a.hashCode(), b.hashCode());\n@@ -169,1 +171,1 @@\n-        List list = populatedList(3);\n+        List<Item> list = populatedList(3);\n@@ -186,2 +188,2 @@\n-        List list = populatedList(3);\n-        assertEquals(0, list.get(0));\n+        List<Item> list = populatedList(3);\n+        mustEqual(0, list.get(0));\n@@ -196,2 +198,2 @@\n-        List list = populatedList(3);\n-        assertEquals(-1, list.indexOf(-42));\n+        List<Item> list = populatedList(3);\n+        mustEqual(-1, list.indexOf(minusTen));\n@@ -200,6 +202,7 @@\n-            assertEquals(i, list.indexOf(i));\n-            assertEquals(i, list.subList(0, size).indexOf(i));\n-            assertEquals(i, list.subList(0, i + 1).indexOf(i));\n-            assertEquals(-1, list.subList(0, i).indexOf(i));\n-            assertEquals(0, list.subList(i, size).indexOf(i));\n-            assertEquals(-1, list.subList(i + 1, size).indexOf(i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.indexOf(I));\n+            mustEqual(i, list.subList(0, size).indexOf(I));\n+            mustEqual(i, list.subList(0, i + 1).indexOf(I));\n+            mustEqual(-1, list.subList(0, i).indexOf(I));\n+            mustEqual(0, list.subList(i, size).indexOf(I));\n+            mustEqual(-1, list.subList(i + 1, size).indexOf(I));\n@@ -208,7 +211,7 @@\n-        list.add(1);\n-        assertEquals(1, list.indexOf(1));\n-        assertEquals(1, list.subList(0, size + 1).indexOf(1));\n-        assertEquals(0, list.subList(1, size + 1).indexOf(1));\n-        assertEquals(size - 2, list.subList(2, size + 1).indexOf(1));\n-        assertEquals(0, list.subList(size, size + 1).indexOf(1));\n-        assertEquals(-1, list.subList(size + 1, size + 1).indexOf(1));\n+        list.add(one);\n+        mustEqual(1, list.indexOf(one));\n+        mustEqual(1, list.subList(0, size + 1).indexOf(one));\n+        mustEqual(0, list.subList(1, size + 1).indexOf(one));\n+        mustEqual(size - 2, list.subList(2, size + 1).indexOf(one));\n+        mustEqual(0, list.subList(size, size + 1).indexOf(one));\n+        mustEqual(-1, list.subList(size + 1, size + 1).indexOf(one));\n@@ -223,1 +226,1 @@\n-        Vector list = populatedList(3);\n+        Vector<Item> list = populatedList(3);\n@@ -225,1 +228,1 @@\n-        assertEquals(-1, list.indexOf(-42, 0));\n+        mustEqual(-1, list.indexOf(minusTen, 0));\n@@ -228,2 +231,2 @@\n-        assertEquals(-1, list.indexOf(0, size));\n-        assertEquals(-1, list.indexOf(0, Integer.MAX_VALUE));\n+        mustEqual(-1, list.indexOf(zero, size));\n+        mustEqual(-1, list.indexOf(zero, Integer.MAX_VALUE));\n@@ -233,2 +236,2 @@\n-            () -> list.indexOf(0, -1),\n-            () -> list.indexOf(0, Integer.MIN_VALUE));\n+            () -> list.indexOf(zero, -1),\n+            () -> list.indexOf(zero, Integer.MIN_VALUE));\n@@ -237,3 +240,4 @@\n-            assertEquals(i, list.indexOf(i, 0));\n-            assertEquals(i, list.indexOf(i, i));\n-            assertEquals(-1, list.indexOf(i, i + 1));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.indexOf(I, 0));\n+            mustEqual(i, list.indexOf(I, i));\n+            mustEqual(-1, list.indexOf(I, i + 1));\n@@ -242,5 +246,5 @@\n-        list.add(1);\n-        assertEquals(1, list.indexOf(1, 0));\n-        assertEquals(1, list.indexOf(1, 1));\n-        assertEquals(size, list.indexOf(1, 2));\n-        assertEquals(size, list.indexOf(1, size));\n+        list.add(one);\n+        mustEqual(1, list.indexOf(one, 0));\n+        mustEqual(1, list.indexOf(one, 1));\n+        mustEqual(size, list.indexOf(one, 2));\n+        mustEqual(size, list.indexOf(one, size));\n@@ -253,1 +257,1 @@\n-        List empty = new Vector();\n+        List<Item> empty = new Vector<Item>();\n@@ -257,1 +261,1 @@\n-        List full = populatedList(SIZE);\n+        List<Item> full = populatedList(SIZE);\n@@ -267,1 +271,1 @@\n-        Collection c = new Vector();\n+        Collection<Item> c = new Vector<Item>();\n@@ -277,2 +281,2 @@\n-        List list = populatedList(3);\n-        assertEquals(-1, list.lastIndexOf(-42));\n+        List<Item> list = populatedList(3);\n+        mustEqual(-1, list.lastIndexOf(minusTen));\n@@ -281,6 +285,7 @@\n-            assertEquals(i, list.lastIndexOf(i));\n-            assertEquals(i, list.subList(0, size).lastIndexOf(i));\n-            assertEquals(i, list.subList(0, i + 1).lastIndexOf(i));\n-            assertEquals(-1, list.subList(0, i).lastIndexOf(i));\n-            assertEquals(0, list.subList(i, size).lastIndexOf(i));\n-            assertEquals(-1, list.subList(i + 1, size).lastIndexOf(i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.lastIndexOf(I));\n+            mustEqual(i, list.subList(0, size).lastIndexOf(I));\n+            mustEqual(i, list.subList(0, i + 1).lastIndexOf(I));\n+            mustEqual(-1, list.subList(0, i).lastIndexOf(I));\n+            mustEqual(0, list.subList(i, size).lastIndexOf(I));\n+            mustEqual(-1, list.subList(i + 1, size).lastIndexOf(I));\n@@ -289,6 +294,6 @@\n-        list.add(1);\n-        assertEquals(size, list.lastIndexOf(1));\n-        assertEquals(size, list.subList(0, size + 1).lastIndexOf(1));\n-        assertEquals(1, list.subList(0, size).lastIndexOf(1));\n-        assertEquals(0, list.subList(1, 2).lastIndexOf(1));\n-        assertEquals(-1, list.subList(0, 1).indexOf(1));\n+        list.add(one);\n+        mustEqual(size, list.lastIndexOf(one));\n+        mustEqual(size, list.subList(0, size + 1).lastIndexOf(one));\n+        mustEqual(1, list.subList(0, size).lastIndexOf(one));\n+        mustEqual(0, list.subList(1, 2).lastIndexOf(one));\n+        mustEqual(-1, list.subList(0, 1).indexOf(one));\n@@ -303,1 +308,1 @@\n-        Vector list = populatedList(3);\n+        Vector<Item> list = populatedList(3);\n@@ -306,1 +311,1 @@\n-        assertEquals(-1, list.lastIndexOf(0, -1));\n+        mustEqual(-1, list.lastIndexOf(zero, -1));\n@@ -311,2 +316,2 @@\n-            () -> list.lastIndexOf(0, size),\n-            () -> list.lastIndexOf(0, Integer.MAX_VALUE));\n+            () -> list.lastIndexOf(zero, size),\n+            () -> list.lastIndexOf(zero, Integer.MAX_VALUE));\n@@ -315,2 +320,3 @@\n-            assertEquals(i, list.lastIndexOf(i, i));\n-            assertEquals(list.indexOf(i), list.lastIndexOf(i, i));\n+            Item I = itemFor(i);\n+            mustEqual(i, list.lastIndexOf(I, i));\n+            mustEqual(list.indexOf(I), list.lastIndexOf(I, i));\n@@ -318,1 +324,1 @@\n-                assertEquals(-1, list.lastIndexOf(i, i - 1));\n+                mustEqual(-1, list.lastIndexOf(I, i - 1));\n@@ -322,5 +328,5 @@\n-        assertEquals(1, list.lastIndexOf(one, 1));\n-        assertEquals(1, list.lastIndexOf(one, 2));\n-        assertEquals(3, list.lastIndexOf(one, 3));\n-        assertEquals(3, list.lastIndexOf(one, 4));\n-        assertEquals(-1, list.lastIndexOf(three, 3));\n+        mustEqual(1, list.lastIndexOf(one, 1));\n+        mustEqual(1, list.lastIndexOf(one, 2));\n+        mustEqual(3, list.lastIndexOf(one, 3));\n+        mustEqual(3, list.lastIndexOf(one, 4));\n+        mustEqual(-1, list.lastIndexOf(three, 3));\n@@ -333,8 +339,8 @@\n-        List empty = new Vector();\n-        assertEquals(0, empty.size());\n-        assertEquals(0, empty.subList(0, 0).size());\n-\n-        List full = populatedList(SIZE);\n-        assertEquals(SIZE, full.size());\n-        assertEquals(0, full.subList(0, 0).size());\n-        assertEquals(0, full.subList(SIZE, SIZE).size());\n+        List<Item> empty = new Vector<Item>();\n+        mustEqual(0, empty.size());\n+        mustEqual(0, empty.subList(0, 0).size());\n+\n+        List<Item> full = populatedList(SIZE);\n+        mustEqual(SIZE, full.size());\n+        mustEqual(0, full.subList(0, 0).size());\n+        mustEqual(0, full.subList(SIZE, SIZE).size());\n@@ -347,1 +353,1 @@\n-        List a = populatedList(10);\n+        List<Item> a = populatedList(10);\n@@ -351,1 +357,1 @@\n-                List b = a.subList(j,i);\n+                List<Item> b = a.subList(j,i);\n@@ -353,1 +359,1 @@\n-                    assertEquals(new Integer(k), b.get(k-j));\n+                    mustEqual(k, b.get(k-j));\n@@ -358,4 +364,4 @@\n-        List s = a.subList(2, 5);\n-        assertEquals(3, s.size());\n-        s.set(2, m1);\n-        assertEquals(a.get(4), m1);\n+        List<Item> s = a.subList(2, 5);\n+        mustEqual(3, s.size());\n+        s.set(2, minusOne);\n+        mustEqual(a.get(4), minusOne);\n@@ -363,1 +369,1 @@\n-        assertEquals(7, a.size());\n+        mustEqual(7, a.size());\n@@ -368,1 +374,1 @@\n-            () -> s.set(0, 42));\n+            () -> s.set(0, fortytwo));\n@@ -376,4 +382,4 @@\n-        List list = new Vector();\n-        \/\/ Integers are not auto-converted to Longs\n-        list.add(86);\n-        list.add(99);\n+        List<Item> list = new Vector<Item>();\n+        \/\/ Items are not auto-converted to Longs\n+        list.add(eightysix);\n+        list.add(ninetynine);\n@@ -386,0 +392,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -425,1 +432,1 @@\n-        List x = populatedList(rnd.nextInt(5));\n+        List<Item> x = populatedList(rnd.nextInt(5));\n@@ -436,1 +443,1 @@\n-        List subList = x.subList(start, end);\n+        List<Item> subList = x.subList(start, end);\n@@ -444,2 +451,2 @@\n-        List x = populatedList(SIZE);\n-        List y = serialClone(x);\n+        List<Item> x = populatedList(SIZE);\n+        List<Item> y = serialClone(x);\n@@ -448,2 +455,2 @@\n-        assertEquals(x.size(), y.size());\n-        assertEquals(x.toString(), y.toString());\n+        mustEqual(x.size(), y.size());\n+        mustEqual(x.toString(), y.toString());\n@@ -451,2 +458,2 @@\n-        assertEquals(x, y);\n-        assertEquals(y, x);\n+        mustEqual(x, y);\n+        mustEqual(y, x);\n@@ -455,1 +462,1 @@\n-            assertEquals(x.remove(0), y.remove(0));\n+            mustEqual(x.remove(0), y.remove(0));\n@@ -464,1 +471,1 @@\n-        final Vector v = new Vector();\n+        final Vector<Item> v = new Vector<Item>();\n@@ -467,1 +474,1 @@\n-            assertEquals(n, v.size());\n+            mustEqual(n, v.size());\n@@ -472,1 +479,1 @@\n-            assertEquals(n, v.size());\n+            mustEqual(n, v.size());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/VectorTest.java","additions":134,"deletions":127,"binary":false,"changes":261,"status":"modified"}]}