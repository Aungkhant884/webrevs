{"files":[{"patch":"@@ -201,2 +201,1 @@\n-    JvmtiThreadState* state = thread->jvmti_thread_state();\n-    if (state != NULL && state->is_virtual()) {\n+    if (thread->vthread() != NULL) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Verifies JVMTI can_support_virtual_threads works with agents loaded into running VM\n+ * @summary Verifies JVMTI can_support_virtual_threads works for agents loaded at startup and into running VM\n@@ -30,1 +30,4 @@\n- * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest VirtualThreadStartTest\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest=can_support_virtual_threads VirtualThreadStartTest\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest attach\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest attach can_support_virtual_threads\n@@ -42,2 +45,9 @@\n-        VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n-        vm.loadAgentLibrary(AGENT_LIB);\n+        System.out.println(\"loading \" + AGENT_LIB + \" lib\");\n+\n+        if (args.length > 0 && args[0].equals(\"attach\")) { \/\/ agent loaded into running VM case\n+            String arg = args.length == 2 ? args[1] : \"\"; \n+            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+            vm.loadAgentLibrary(AGENT_LIB, arg);\n+        } else {\n+            System.loadLibrary(AGENT_LIB);\n+        }\n@@ -47,1 +57,1 @@\n-            Thread.ofVirtual().start(() -> {}).join();\n+            Thread.ofVirtual().name(\"Tested-VT-\" + i).start(() -> {}).join();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/VirtualThreadStartTest.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,0 +34,22 @@\n+static const char* TESTED_TNAME_START = \"Tested-VT\";\n+static const size_t TESTED_TNAME_START_LEN = strlen(TESTED_TNAME_START);\n+static bool can_support_vt_enabled = false;\n+\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread) {\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n+  RawMonitorLocker agent_start_locker(jvmti, jni, agent_event_lock);\n+\n+  if (tname != NULL && strncmp(tname, TESTED_TNAME_START, TESTED_TNAME_START_LEN) == 0) {\n+    jboolean is_virtual = jni->IsVirtualThread(thread);\n+    if (!is_virtual) {\n+      fatal(jni, \"Failed: tested thread expected to be virtual\");\n+    }\n+    if (can_support_vt_enabled) {\n+      fatal(jni, \"Failed: expected VirtualThreadStart instead of ThreadStart event\");\n+    }\n+    printf(\"ThreadStart event: %s\\n\", tname);\n+    started_thread_cnt++;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n+}\n@@ -36,0 +58,2 @@\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n@@ -37,1 +61,13 @@\n-  started_thread_cnt++;\n+\n+  if (tname != NULL && strncmp(tname, TESTED_TNAME_START, TESTED_TNAME_START_LEN) == 0) {\n+    jboolean is_virtual = jni->IsVirtualThread(thread);\n+    if (!is_virtual) {\n+      fatal(jni, \"Failed: tested thread expected to be virtual\");\n+    }\n+    if (!can_support_vt_enabled) {\n+      fatal(jni, \"Failed: expected ThreadStart instead of VirtualThreadStart event\");\n+    }\n+    printf(\"VirtualThreadStart event: %s\\n\", tname);\n+    started_thread_cnt++;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n@@ -54,1 +90,0 @@\n-  LOG(\"Agent_OnLoad started\\n\");\n@@ -60,2 +95,1 @@\n-\n-  caps.can_support_virtual_threads = 1;\n+  callbacks.ThreadStart = &ThreadStart;\n@@ -64,4 +98,20 @@\n-  err = jvmti->AddCapabilities(&caps);\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"Agent init: error in JVMTI AddCapabilities: %s (%d)\\n\", TranslateError(err), err);\n-    return JNI_ERR;\n+  if (options != NULL && strcmp(options, \"can_support_virtual_threads\") == 0) {\n+    can_support_vt_enabled = true;\n+    caps.can_support_virtual_threads = 1;\n+\n+    err = jvmti->AddCapabilities(&caps);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI AddCapabilities: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_START, NULL);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI SetEventNotificationMode: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n+  } else {\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI SetEventNotificationMode: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n@@ -69,0 +119,2 @@\n+  printf(\"agent_init: can_support_virtual_threads capability: %d\\n\",\n+         caps.can_support_virtual_threads);\n@@ -75,6 +127,0 @@\n-\n-  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_START, NULL);\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"Agent init: error in JVMTI SetEventNotificationMode: %s (%d)\\n\", TranslateError(err), err);\n-    return JNI_ERR;\n-  }\n@@ -88,0 +134,1 @@\n+  LOG(\"Agent_OnLoad started\\n\");\n@@ -93,0 +140,1 @@\n+  LOG(\"Agent_OnAttach started\\n\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/libVirtualThreadStartTest.cpp","additions":62,"deletions":14,"binary":false,"changes":76,"status":"modified"}]}