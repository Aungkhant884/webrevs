{"files":[{"patch":"@@ -201,2 +201,1 @@\n-    JvmtiThreadState* state = thread->jvmti_thread_state();\n-    if (state != NULL && state->is_virtual()) {\n+    if (thread->vthread() != NULL) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+  jc.can_support_virtual_threads = 1;\n@@ -124,1 +125,0 @@\n-  jc.can_support_virtual_threads = 1;\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies JVMTI can_support_virtual_threads works for agents loaded at startup and into running VM\n+ * @requires vm.jvmti\n+ * @requires vm.continuations\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest VirtualThreadStartTest\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest=can_support_virtual_threads VirtualThreadStartTest\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest attach\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest attach can_support_virtual_threads\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+\n+public class VirtualThreadStartTest {\n+    private static final String AGENT_LIB = \"VirtualThreadStartTest\";\n+    private static final int THREAD_CNT = 10;\n+\n+    private static native int getAndResetStartedThreads();\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"loading \" + AGENT_LIB + \" lib\");\n+\n+        if (args.length > 0 && args[0].equals(\"attach\")) { \/\/ agent loaded into running VM case\n+            String arg = args.length == 2 ? args[1] : \"\";\n+            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+            vm.loadAgentLibrary(AGENT_LIB, arg);\n+        } else {\n+            System.loadLibrary(AGENT_LIB);\n+        }\n+        getAndResetStartedThreads();\n+\n+        for (int i = 0; i < THREAD_CNT; i++) {\n+            Thread.ofVirtual().name(\"Tested-VT-\" + i).start(() -> {}).join();\n+        }\n+\n+        int startedThreads = getAndResetStartedThreads();\n+        System.out.println(\"ThreadStart event count: \" + startedThreads + \", expected: \" + THREAD_CNT);\n+        if (startedThreads != THREAD_CNT) {\n+            throw new RuntimeException(\"Failed: wrong ThreadStart event count\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/VirtualThreadStartTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <cstdlib>\n+#include <cstring>\n+#include <jvmti.h>\n+#include \"jvmti_common.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv *jvmti;\n+static int started_thread_cnt = 0;\n+static jrawMonitorID agent_event_lock = NULL;\n+static const char* TESTED_TNAME_START = \"Tested-VT\";\n+static const size_t TESTED_TNAME_START_LEN = strlen(TESTED_TNAME_START);\n+static bool can_support_vt_enabled = false;\n+\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread) {\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n+  RawMonitorLocker agent_start_locker(jvmti, jni, agent_event_lock);\n+\n+  if (tname != NULL && strncmp(tname, TESTED_TNAME_START, TESTED_TNAME_START_LEN) == 0) {\n+    jboolean is_virtual = jni->IsVirtualThread(thread);\n+    if (!is_virtual) {\n+      fatal(jni, \"Failed: tested thread expected to be virtual\");\n+    }\n+    if (can_support_vt_enabled) {\n+      fatal(jni, \"Failed: expected VirtualThreadStart instead of ThreadStart event\");\n+    }\n+    printf(\"ThreadStart event: %s\\n\", tname);\n+    started_thread_cnt++;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n+}\n+\n+void JNICALL VirtualThreadStart(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread) {\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n+  RawMonitorLocker agent_start_locker(jvmti, jni, agent_event_lock);\n+\n+  if (tname != NULL && strncmp(tname, TESTED_TNAME_START, TESTED_TNAME_START_LEN) == 0) {\n+    jboolean is_virtual = jni->IsVirtualThread(thread);\n+    if (!is_virtual) {\n+      fatal(jni, \"Failed: tested thread expected to be virtual\");\n+    }\n+    if (!can_support_vt_enabled) {\n+      fatal(jni, \"Failed: expected ThreadStart instead of VirtualThreadStart event\");\n+    }\n+    printf(\"VirtualThreadStart event: %s\\n\", tname);\n+    started_thread_cnt++;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_VirtualThreadStartTest_getAndResetStartedThreads(JNIEnv* jni, jclass clazz) {\n+  RawMonitorLocker agent_start_locker(jvmti, jni, agent_event_lock);\n+\n+  int result = started_thread_cnt;\n+  started_thread_cnt = 0;\n+  return result;\n+}\n+\n+jint agent_init(JavaVM *jvm, char *options, void *reserved) {\n+  jvmtiCapabilities caps;\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiError err;\n+\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+  memset(&caps, 0, sizeof(caps));\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.ThreadStart = &ThreadStart;\n+  callbacks.VirtualThreadStart = &VirtualThreadStart;\n+\n+  if (options != NULL && strcmp(options, \"can_support_virtual_threads\") == 0) {\n+    can_support_vt_enabled = true;\n+    caps.can_support_virtual_threads = 1;\n+\n+    err = jvmti->AddCapabilities(&caps);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI AddCapabilities: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_START, NULL);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI SetEventNotificationMode: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n+  } else {\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG(\"Agent init: error in JVMTI SetEventNotificationMode: %s (%d)\\n\", TranslateError(err), err);\n+      return JNI_ERR;\n+    }\n+  }\n+  printf(\"agent_init: can_support_virtual_threads capability: %d\\n\",\n+         caps.can_support_virtual_threads);\n+\n+  err = jvmti->SetEventCallbacks(&callbacks, (jint)sizeof(callbacks));\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"Agent init: error in JVMTI AddCapabilities: %s (%d)\\n\", TranslateError(err), err);\n+    return JNI_ERR;\n+  }\n+  agent_event_lock = create_raw_monitor(jvmti, \"agent_event_lock\");\n+\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnLoad started\\n\");\n+  return agent_init(jvm, options, reserved);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnAttach(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnAttach started\\n\");\n+  return agent_init(jvm, options, reserved);\n+}\n+\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/libVirtualThreadStartTest.cpp","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}