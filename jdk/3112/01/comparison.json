{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import javax.swing.*;\n+\n+public class MyMacCanvas extends Canvas {\n+\n+    static {\n+        try {\n+            System.loadLibrary(\"mylib\");\n+        } catch (Throwable t) {\n+            System.out.println(\"Test failed!!\");\n+            t.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    public void addNotify() {\n+        super.addNotify();\n+        addNativeCoreAnimationLayer();\n+    }\n+\n+    public native void addNativeCoreAnimationLayer();\n+\n+    static JAWTFrame f;\n+    public static void main(String[] args) {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeLater(new Runnable() {\n+                public void run() {\n+                    f = new JAWTFrame(\"JAWTExample\");\n+                    f.setBackground(Color.white);\n+                    f.setLayout(new BorderLayout(10, 20));\n+                    f.setLocation(50, 50);\n+                    ((JComponent) f.getContentPane()).setBorder(BorderFactory.createMatteBorder(10, 10, 10, 10, Color.cyan));\n+                    f.addNotify();\n+                    f.pack();\n+                    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    f.setVisible(true);\n+                }\n+            });\n+            robot.delay(5000);\n+            Color col1 = new Color(0, 0, 0);\n+            Color col2 = robot.getPixelColor(f.getX()+50, f.getY()+50);\n+            if (col1.equals(col2)) {\n+                System.out.println(\"Test passed!\");\n+            } else {\n+                System.out.println(\"col1 \" + col1 + \" col2 \" + col2);\n+                throw new RuntimeException(\"Color of JAWT canvas is wrong or \" +\n+                        \"it was not rendered. \" + \"Check that other windows \" +\n+                        \"do not block the test frame.\");\n+            }\n+            System.exit(0);\n+        } catch (Throwable t) {\n+            System.out.println(\"Test failed!\");\n+            t.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static class JAWTFrame extends JFrame {\n+        public JAWTFrame(final String title) {\n+            super(title);\n+        }\n+\n+        public void addNotify() {\n+            super.addNotify(); \/\/ ensures native component hierarchy is setup\n+\n+            final Component layerBackedCanvas = new MyMacCanvas();\n+            layerBackedCanvas.setPreferredSize(new Dimension(400, 200));\n+            add(layerBackedCanvas, BorderLayout.CENTER);\n+\n+            invalidate();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/JAWT\/MyMacCanvas.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+#!\/bin\/sh\n+\n+set -e\n+\n+JAVA_HOME='\/export\/lanai\/build\/macosx-x64-debug\/jdk'\n+\n+$JAVA_HOME\/bin\/javac MyMacCanvas.java\n+\n+gcc -v myfile.m -I\"$JAVA_HOME\/include\" -c -o myfile.o\n+\n+gcc -v myfile.o -L$JAVA_HOME\/lib -ljawt -framework AppKit -framework OpenGL -framework Metal -framework Quartz -shared -o libmylib.jnilib\n+\n+$JAVA_HOME\/bin\/java -Djava.library.path=. -Dsun.java2d.metal=True MyMacCanvas\n","filename":"test\/jdk\/java\/awt\/JAWT\/jawt-mac-buildrun.sh","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"JAVAVM\/jawt_md.h\"\n+#import <Quartz\/Quartz.h>\n+\n+\/*\n+ * Pass the block to a selector of a class that extends NSObject\n+ * There is no need to copy the block since this class always waits.\n+ *\/\n+@interface BlockRunner : NSObject { }\n+\n++ (void)invokeBlock:(void (^)())block;\n+@end\n+\n+@implementation BlockRunner\n+\n++ (void)invokeBlock:(void (^)())block{\n+  block();\n+}\n+\n++ (void)performBlock:(void (^)())block {\n+  [self performSelectorOnMainThread:@selector(invokeBlock:) withObject:block waitUntilDone:YES];\n+}\n+\n+@end\n+\n+\n+\/*\n+ * Class:        MyMacCanvas\n+ * Method:       paint\n+ * SIgnature:    (Ljava\/awt\/Graphics;)V\n+ *\/\n+JNIEXPORT void JNICALL Java_MyMacCanvas_addNativeCoreAnimationLayer\n+(JNIEnv* env, jobject canvas, jobject graphics)\n+{\n+    printf(\"paint called\\n\");\n+\n+    JAWT awt;\n+    awt.version = JAWT_VERSION_1_4 | JAWT_MACOSX_USE_CALAYER;\n+    if (JAWT_GetAWT(env, &awt) == JNI_FALSE) {\n+        printf(\"AWT Not found\\n\");\n+        return;\n+    }\n+\n+    printf(\"JAWT found\\n\");\n+\n+    \/* Get the drawing surface *\/\n+    JAWT_DrawingSurface* ds = awt.GetDrawingSurface(env, canvas);\n+    if (ds == NULL) {\n+        printf(\"NULL drawing surface\\n\");\n+        return;\n+    }\n+\n+    \/* Lock the drawing surface *\/\n+    jint lock = ds->Lock(ds);\n+    printf(\"Lock value %d\\n\", (int)lock);\n+    if((lock & JAWT_LOCK_ERROR) != 0) {\n+        printf(\"Error locking surface\");\n+        return;\n+    }\n+\n+    \/* Get the drawing surface info *\/\n+    JAWT_DrawingSurfaceInfo *dsi = ds->GetDrawingSurfaceInfo(ds);\n+    if (dsi == NULL) {\n+        printf(\"Error getting surface info\\n\");\n+        ds->Unlock(ds);\n+        return;\n+    }\n+\n+    \/\/ create and attach the layer on the AppKit thread\n+    void (^block)() = ^(){\n+        \/\/ attach the \"root layer\" to the AWT Canvas surface layers\n+        CALayer *layer = [[CALayer new] autorelease];\n+        id <JAWT_SurfaceLayers> surfaceLayers = (id <JAWT_SurfaceLayers>)dsi->platformInfo;\n+        CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB ();\n+        CGFloat rgba[4] = {0.0, 0.0, 0.0, 1.0};\n+        CGColorRef color = CGColorCreate (colorspace, rgba);\n+        layer.backgroundColor = color;\n+        surfaceLayers.layer = layer;\n+    };\n+\n+    if ([NSThread isMainThread]) {\n+        block();\n+    } else {\n+        [BlockRunner performBlock:block];\n+    }\n+\n+    \/* Free the drawing surface info *\/\n+    ds->FreeDrawingSurfaceInfo(dsi);\n+\n+    \/* Unlock the drawing surface *\/\n+    ds->Unlock(ds);\n+\n+    \/* Free the drawing surface *\/\n+    awt.FreeDrawingSurface(ds);\n+}\n","filename":"test\/jdk\/java\/awt\/JAWT\/myfile.m","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}