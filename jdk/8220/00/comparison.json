{"files":[{"patch":"@@ -0,0 +1,321 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4422535\n+ * @summary setCurrentAccessibleValue returns true only for an Integer\n+ * @run main SetCurrentAccessibleValueTest\n+ *\/\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import javax.swing.JButton;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JProgressBar;\n+import javax.swing.JScrollBar;\n+import javax.swing.JSlider;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+\n+public class SetCurrentAccessibleValueTest {\n+\n+    public static void doTest() {\n+\n+        JButton jButton = new JButton();\n+        JInternalFrame iFrame = new JInternalFrame();\n+        JSplitPane jSplitPane = new JSplitPane();\n+        JScrollBar jScrollBar = new JScrollBar();\n+        JProgressBar jProgressBar = new JProgressBar();\n+        JSlider jSlider = new JSlider();\n+\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+\n+        if (!jButton.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"JButton's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"JScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!iFrame.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"iFrame's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                +\"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!jSplitPane.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"jSplitPane's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!jScrollBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"jScrollBar's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!jProgressBar.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"jProgressBar's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Integer.valueOf(5))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept Integer\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Float.valueOf(5))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept Float\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Double.valueOf(5))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept Double\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Long.valueOf(5))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept Long\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(Short.valueOf((short) 123))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept Short\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(BigInteger.ONE)) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept BigInteger.ONE\");\n+        }\n+        if (!jSlider.getAccessibleContext().getAccessibleValue()\n+            .setCurrentAccessibleValue(new BigDecimal(BigInteger.ONE))) {\n+            throw new RuntimeException(\"jSlider's Accessible Value\"\n+                + \" implementation doesn't accept new \"\n+                + \"BigDecimal(BigInteger.ONE)\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> doTest());\n+        System.out.println(\"Test Passed\");\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/accessibility\/4422535\/SetCurrentAccessibleValueTest.java","additions":321,"deletions":0,"binary":false,"changes":321,"status":"added"}]}