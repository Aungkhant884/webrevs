{"files":[{"patch":"@@ -866,0 +866,3 @@\n+\/\/ Once started the code cache marking cycle must only be finished after marking of\n+\/\/ the java heap is complete. Otherwise nmethods could appear to be not on stack even\n+\/\/ if they have frames in continuation StackChunks that were not yet visited.\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3370,1 +3370,8 @@\n-void G1CollectedHeap::start_codecache_marking_cycle_if_inactive() {\n+void G1CollectedHeap::start_codecache_marking_cycle_if_inactive(bool concurrent_mark_start) {\n+  \/\/ We can reach here with an active code cache marking cycle either because the\n+  \/\/ previous G1 concurrent marking cycle was undone (if heap occupancy after the\n+  \/\/ concurrent start young collection was below the threshold) or aborted. See\n+  \/\/ CodeCache::on_gc_marking_cycle_finish() why this is.  We must not start a new code\n+  \/\/ cache cycle then. If we are about to start a new g1 concurrent marking cycle we\n+  \/\/ still have to arm all nmethod entry barriers. They are needed for adding oop\n+  \/\/ constants to the SATB snapshot. Full GC does not need nmethods to be armed.\n@@ -3372,6 +3379,0 @@\n-    \/\/ This is the normal case when we do not call collect when a\n-    \/\/ concurrent mark is ongoing. We then start a new code marking\n-    \/\/ cycle. If, on the other hand, a concurrent mark is ongoing, we\n-    \/\/ will be conservative and use the last code marking cycle. Code\n-    \/\/ caches marked between the two concurrent marks will live a bit\n-    \/\/ longer than needed.\n@@ -3379,0 +3380,2 @@\n+  }\n+  if (concurrent_mark_start) {\n@@ -3382,0 +3385,5 @@\n+\n+void G1CollectedHeap::finish_codecache_marking_cycle() {\n+  CodeCache::on_gc_marking_cycle_finish();\n+  CodeCache::arm_all_nmethods();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -936,1 +936,2 @@\n-  static void start_codecache_marking_cycle_if_inactive();\n+  static void start_codecache_marking_cycle_if_inactive(bool concurrent_mark_start);\n+  static void finish_codecache_marking_cycle();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-  G1CollectedHeap::start_codecache_marking_cycle_if_inactive();\n+  G1CollectedHeap::start_codecache_marking_cycle_if_inactive(true \/* concurrent_mark_start *\/);\n@@ -1303,0 +1303,2 @@\n+\n+    G1CollectedHeap::finish_codecache_marking_cycle();\n@@ -1319,3 +1321,0 @@\n-  CodeCache::on_gc_marking_cycle_finish();\n-  CodeCache::arm_all_nmethods();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-  G1CollectedHeap::start_codecache_marking_cycle_if_inactive();\n+  G1CollectedHeap::start_codecache_marking_cycle_if_inactive(false \/* concurrent_mark_start *\/);\n@@ -214,2 +214,1 @@\n-  CodeCache::on_gc_marking_cycle_finish();\n-  CodeCache::arm_all_nmethods();\n+  G1CollectedHeap::finish_codecache_marking_cycle();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}