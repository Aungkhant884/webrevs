{"files":[{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -76,0 +78,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -85,0 +88,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +98,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -103,0 +108,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -112,0 +118,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -121,0 +128,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -130,0 +138,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -140,0 +149,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -150,0 +160,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -161,0 +172,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -173,0 +185,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -182,0 +195,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,1 +204,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayCopyTest.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -57,0 +59,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -66,0 +69,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -75,0 +79,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -84,0 +89,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -102,0 +108,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -111,0 +118,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -122,0 +130,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -142,1 +151,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayIndexFillTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -65,0 +67,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -74,0 +77,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -83,0 +87,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -92,0 +97,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -101,0 +107,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -110,0 +117,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -119,0 +127,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -129,0 +138,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -138,0 +148,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -147,0 +158,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -156,0 +168,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -164,1 +177,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayInvariantFillTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -71,0 +73,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -80,0 +83,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -89,0 +93,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -98,0 +103,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -107,0 +113,21 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public short[] shortShiftLargeDistConstant() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts1[i] >> 65);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public short[] shortShiftLargeDistInvariant() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts2[i] >> (largeDist - 25));\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -116,0 +143,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -125,2 +153,2 @@\n-    \/\/ Note that any shift operation with distance value from another array\n-    \/\/ cannot be vectorized since C2 vector shift node doesn't support it.\n+    \/\/ Note that shift with variant distance cannot be vectorized.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -136,0 +164,12 @@\n+    \/\/ Note that shift with variant distance cannot be vectorized.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] loopIndexShiftDistance() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts1[i] >> i);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,1 +186,2 @@\n-    \/\/ vectorized since precise type info about signness is missing.\n+    \/\/ vectorized since precise type info about signedness is missing.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -155,1 +196,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayShiftOpTest.java","additions":44,"deletions":4,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -132,0 +134,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n@@ -141,0 +144,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n@@ -150,0 +154,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n@@ -159,0 +164,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n@@ -169,0 +175,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n@@ -178,0 +185,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n@@ -206,0 +215,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -215,0 +225,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -224,0 +235,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -233,0 +245,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -243,0 +256,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -252,0 +266,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -261,0 +276,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -270,0 +287,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -280,0 +299,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -289,0 +309,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -297,1 +318,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayTypeConvertTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -95,0 +97,1 @@\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -103,1 +106,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayUnsafeOpTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -72,0 +74,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -81,0 +84,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -90,0 +94,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -98,1 +103,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicBooleanOpTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -64,0 +66,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +76,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +86,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +96,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +106,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +116,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +126,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +137,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +147,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +157,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +167,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +178,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +188,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +198,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -191,1 +207,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicByteOpTest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -67,0 +69,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -76,2 +79,1 @@\n-    \/\/ Note that Math.abs() on unsigned subword types can NOT be vectorized\n-    \/\/ since all the values are non-negative according to the semantics.\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +89,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +99,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -105,0 +109,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -114,0 +119,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -123,0 +129,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -133,0 +140,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -142,0 +150,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -151,0 +160,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -160,0 +170,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -170,0 +181,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -179,0 +191,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -188,0 +201,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -198,0 +212,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -207,0 +222,3 @@\n+    \/\/ Note that reverseBytes cannot be vectorized if the vector element\n+    \/\/ type doesn't match the caller's class type.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -215,1 +233,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -64,0 +66,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +76,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +86,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +96,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +106,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +116,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +126,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +136,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,0 +146,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -145,0 +156,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +166,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,0 +176,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -172,0 +186,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -181,0 +196,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,0 +206,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -199,0 +216,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -208,0 +226,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -217,0 +236,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -253,1 +273,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -64,0 +66,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +76,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +86,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +96,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +106,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +116,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +126,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +136,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,0 +146,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -145,0 +156,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +166,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,0 +176,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -172,0 +186,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -181,0 +196,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,0 +206,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -226,1 +243,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicFloatOpTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -64,0 +66,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +76,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +86,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +96,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +106,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +116,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +126,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +136,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +147,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +157,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +167,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -164,0 +177,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +188,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +198,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -192,0 +208,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -238,0 +255,2 @@\n+    \/\/ Note that integer max produces non-vectorizable CMoveI node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -247,0 +266,2 @@\n+    \/\/ Note that integer min produces non-vectorizable CMoveI node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -255,1 +276,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicIntOpTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -64,0 +66,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +76,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +86,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +96,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +106,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +116,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +126,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +137,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +147,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +157,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +167,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +178,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +188,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +198,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -229,0 +245,2 @@\n+    \/\/ Note that long integer max produces non-vectorizable CMoveL node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -238,0 +256,2 @@\n+    \/\/ Note that long integer min produces non-vectorizable CMoveL node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -246,1 +266,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicLongOpTest.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -67,0 +69,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -76,0 +79,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -85,0 +89,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +99,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -103,0 +109,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -112,0 +119,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -121,0 +129,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -131,0 +140,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -140,0 +150,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -149,0 +160,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -158,0 +170,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -168,0 +181,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -177,0 +191,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -186,0 +201,26 @@\n+    \/\/ Note that min operations on subword types cannot be vectorized\n+    \/\/ because higher bits will be lost.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] vectorMin() {\n+        short[] res = new short[SIZE];\n+        int val = 65536;\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) Math.min(a[i], val);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    \/\/ Note that max operations on subword types cannot be vectorized\n+    \/\/ because higher bits will be lost.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] vectorMax() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) Math.max(a[i], b[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -196,0 +237,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -205,0 +247,3 @@\n+    \/\/ Note that reverseBytes cannot be vectorized if the vector element\n+    \/\/ type doesn't match the caller's class type.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -213,1 +258,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -78,0 +80,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +90,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +100,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -106,0 +111,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -116,0 +122,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -126,0 +133,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,1 +144,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -146,1 +155,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -207,2 +217,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n-    \/\/ between src and dest of the assignment.\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -220,1 +230,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -231,1 +242,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -242,1 +254,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -253,1 +266,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -265,0 +279,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -276,1 +291,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -287,1 +303,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopArrayIndexComputeTest.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -83,0 +85,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -92,0 +95,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -101,0 +105,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -110,0 +115,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -119,0 +125,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +135,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -141,0 +149,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +163,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +175,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -178,0 +189,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -189,0 +201,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -200,0 +213,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -211,0 +225,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -221,0 +236,13 @@\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public int[] multipleOpsWith2DifferentTypesAndSharedOp() {\n+        int i = 0, sum = 0;\n+        int[] res1 = new int[SIZE];\n+        short[] res2 = new short[SIZE];\n+        while (++i < SIZE) {\n+            sum += (res1[i]--);\n+            res2[i]++;\n+        }\n+        return res1;\n+    }\n+\n@@ -258,0 +286,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -268,0 +297,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -278,1 +308,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopCombinedOpTest.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -65,0 +67,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -89,1 +92,0 @@\n-}\n@@ -91,0 +93,12 @@\n+    @Test\n+    \/\/ Note that this loop cannot be vectorized due to early break.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public int conditionalBreakReduction() {\n+        int sum = 0, i = 0;\n+        for (i = 0; i < SIZE; i++) {\n+            sum += i;\n+            if (invCond) break;\n+        }\n+        return i;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopControlFlowTest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -53,0 +55,3 @@\n+    \/\/ tmp[] may be modified and thus should not be returned in cases.\n+    private int[] tmp;\n+\n@@ -58,0 +63,1 @@\n+        tmp = new int[SIZE];\n@@ -64,0 +70,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -74,0 +81,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -84,0 +92,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +103,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -104,0 +114,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,1 +147,0 @@\n-}\n@@ -138,0 +148,11 @@\n+    @Test\n+    public int nestedLoopIndexLiveOut() {\n+        int k = 0;\n+        for (int i = 0; i < 50; i += 2) {\n+            for (int j = 0; j < 10; j++) {\n+                tmp[k++] = 5;\n+            }\n+        }\n+        return k;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopLiveOutNodesTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -78,0 +80,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +90,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +100,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -105,0 +110,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -114,0 +120,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -125,0 +132,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,1 +171,0 @@\n-\n@@ -165,0 +172,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -184,0 +192,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -193,0 +202,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -201,1 +211,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopRangeStrideTest.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -77,0 +79,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.LOAD_VECTOR, \">0\"})\n@@ -95,2 +98,2 @@\n-    \/\/ Note that adding constant in loop would be directly optimized to\n-    \/\/ scalar operations, hence this case is not vectorized.\n+    \/\/ Note that this loop should be optimized to straight-line code.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -106,0 +109,2 @@\n+    \/\/ Note that this loop should be optimized to straight-line code.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -115,0 +120,1 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"}, counts = {IRNode.LOAD_VECTOR, \">0\"})\n@@ -168,0 +174,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -189,1 +196,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopReductionOpTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -63,0 +65,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -80,0 +83,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +98,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -108,0 +113,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -117,1 +123,0 @@\n-}\n@@ -119,0 +124,20 @@\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public float reductionLoopWithAnotherReductionInput() {\n+        float res = 0.0F;\n+        int N = 400;\n+        int[] arr = new int[N];\n+        int i1 = 0, i2 = 0, i3, i4;\n+        for (int j = 0; j < N; ++j) {\n+            for (i3 = 1; i3 < 63; ++i3) {\n+                arr[i3] -= 1;\n+                i1 +=i3;\n+            }\n+            for (i4 = 2; i4 < 63; ++i4) {\n+                res += i4 - i2;\n+                i2 = i1;\n+            }\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/MultipleLoopsTest.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -61,0 +63,1 @@\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"}, counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -77,1 +80,0 @@\n-}\n@@ -79,0 +81,15 @@\n+    @Test\n+    public int stripMinedOneIterationLoop() {\n+        int[] res = new int[SIZE];\n+        int i1, i2, i3, i4 = 11937;\n+        for (i1 = 1; i1 < SIZE; i1++) {\n+            for (i2 = 1; i2 < 2; i2++) {\n+                for (i3 = 1; i3 < 2; i3++) {\n+                    i4 &= i3;\n+                }\n+            }\n+            res[i1] = 0;\n+        }\n+        return res[0] + i4;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/StripMinedLoopTest.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -37,0 +39,1 @@\n+import jdk.test.lib.Platform;\n@@ -53,4 +56,0 @@\n-    @Target(ElementType.METHOD)\n-    @Retention(RetentionPolicy.RUNTIME)\n-    protected @interface Test {}\n-\n@@ -58,4 +57,1 @@\n-        \/\/ Add extra VM options to enable post loop vectorization\n-        WB.setBooleanVMFlag(\"UnlockExperimentalVMOptions\", true);\n-        WB.setBooleanVMFlag(\"PostLoopMultiversioning\", true);\n-\n+        \/\/ 1) Vectorization correctness test\n@@ -68,0 +64,3 @@\n+        \/\/ Add extra VM options to verify experimental auto-vectorization\n+        WB.setBooleanVMFlag(\"UnlockExperimentalVMOptions\", true);\n+        WB.setBooleanVMFlag(\"PostLoopMultiversioning\", true);\n@@ -79,0 +78,8 @@\n+\n+        \/\/ 2) Vectorization ability test\n+        \/\/ To test vectorizability, invoke the IR test framework to check existence of\n+        \/\/ expected C2 IR node.\n+        TestFramework irTest = new TestFramework(klass);\n+        \/\/ Add extra VM options to enable more auto-vectorization chances\n+        irTest.addFlags(\"-XX:-OptimizeFill\");\n+        irTest.start();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/VectorizationTestRunner.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"}]}