{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -76,0 +78,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -85,0 +89,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +100,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -103,0 +111,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -112,0 +122,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -121,0 +133,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -130,0 +144,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -140,0 +156,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -150,0 +168,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -161,0 +181,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -173,0 +195,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -182,0 +206,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,1 +216,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayCopyTest.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -57,0 +59,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -66,0 +70,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -75,0 +81,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -84,0 +92,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -102,0 +112,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -111,0 +123,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -122,0 +136,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -142,1 +158,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayIndexFillTest.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -44,0 +44,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -48,1 +50,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -65,0 +67,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -74,0 +78,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -83,0 +89,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -92,0 +100,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -101,0 +111,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -110,0 +122,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -119,0 +133,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -129,0 +145,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -138,0 +156,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -147,0 +167,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -156,0 +178,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -164,1 +188,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayInvariantFillTest.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -71,0 +73,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -80,0 +84,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -89,0 +95,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -98,0 +106,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -107,0 +117,24 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public short[] shortShiftLargeDistConstant() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts1[i] >> 65);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public short[] shortShiftLargeDistInvariant() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts2[i] >> (largeDist - 25));\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -116,0 +150,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -125,2 +161,2 @@\n-    \/\/ Note that any shift operation with distance value from another array\n-    \/\/ cannot be vectorized since C2 vector shift node doesn't support it.\n+    \/\/ Note that shift with variant distance cannot be vectorized.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -136,0 +172,13 @@\n+    \/\/ Note that shift with variant distance cannot be vectorized.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] loopIndexShiftDistance() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) (shorts1[i] >> i);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,1 +195,2 @@\n-    \/\/ vectorized since precise type info about signness is missing.\n+    \/\/ vectorized since precise type info about signedness is missing.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -155,1 +205,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayShiftOpTest.java","additions":55,"deletions":6,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -132,0 +134,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n@@ -141,0 +145,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n@@ -150,0 +156,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512dq\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n@@ -159,0 +167,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx512dq\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n@@ -169,0 +179,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n@@ -178,0 +190,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n@@ -206,0 +221,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -215,0 +232,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx512dq\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -224,0 +243,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -233,0 +254,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx512dq\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -243,0 +266,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -252,0 +277,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -261,0 +288,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -270,0 +300,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=32\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -280,0 +313,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n@@ -289,0 +324,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n@@ -297,1 +334,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayTypeConvertTest.java","additions":39,"deletions":3,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -49,1 +51,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -95,0 +97,1 @@\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -103,1 +106,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayUnsafeOpTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -72,0 +74,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -81,0 +85,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -90,0 +96,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -98,1 +106,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicBooleanOpTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -64,0 +66,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +77,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +88,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +99,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +110,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +121,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +132,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +144,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +155,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +166,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +177,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +189,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +200,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +211,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -191,1 +221,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicByteOpTest.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -67,0 +69,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -76,2 +80,2 @@\n-    \/\/ Note that Math.abs() on unsigned subword types can NOT be vectorized\n-    \/\/ since all the values are non-negative according to the semantics.\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +91,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +102,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -105,0 +113,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -114,0 +124,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -123,0 +135,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -133,0 +147,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -142,0 +158,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -151,0 +169,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -160,0 +180,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -170,0 +192,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -179,0 +203,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -188,0 +214,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -198,0 +226,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -207,0 +237,3 @@\n+    \/\/ Note that reverseBytes cannot be vectorized if the vector element\n+    \/\/ type doesn't match the caller's class type.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -215,1 +248,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":37,"deletions":5,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -64,0 +66,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +77,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +88,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +99,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +110,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +121,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +132,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +143,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,0 +154,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -145,0 +165,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +176,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,0 +187,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -172,0 +198,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -181,0 +209,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,0 +220,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -199,0 +231,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -208,0 +242,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -217,0 +253,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -253,1 +291,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -64,0 +66,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +77,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +88,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +99,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +110,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +121,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +132,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +143,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,0 +154,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -145,0 +165,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +176,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,0 +187,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -172,0 +198,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -181,0 +209,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -190,0 +220,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -226,1 +258,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicFloatOpTest.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -64,0 +66,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +77,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +88,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +99,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +110,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +121,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +132,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -127,0 +143,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +155,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +166,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +177,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -164,0 +188,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +200,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +211,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -192,0 +222,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -238,0 +270,2 @@\n+    \/\/ Note that integer max produces non-vectorizable CMoveI node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -247,0 +281,2 @@\n+    \/\/ Note that integer min produces non-vectorizable CMoveI node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -255,1 +291,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicIntOpTest.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -64,0 +66,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -73,0 +77,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx512vl\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -82,0 +88,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -91,0 +99,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -100,0 +110,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -109,0 +121,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -118,0 +132,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +144,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -137,0 +155,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -146,0 +166,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -155,0 +177,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +189,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -174,0 +200,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -183,0 +211,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -229,0 +259,2 @@\n+    \/\/ Note that long integer max produces non-vectorizable CMoveL node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -238,0 +270,2 @@\n+    \/\/ Note that long integer min produces non-vectorizable CMoveL node.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -246,1 +280,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicLongOpTest.java","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -45,1 +47,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -67,0 +69,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -76,0 +80,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -85,0 +91,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +102,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -103,0 +113,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -112,0 +124,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -121,0 +135,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -131,0 +147,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -140,0 +158,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -149,0 +169,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -158,0 +180,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -168,0 +192,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -177,0 +203,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -186,0 +214,27 @@\n+    \/\/ Note that min operations on subword types cannot be vectorized\n+    \/\/ because higher bits will be lost.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] vectorMin() {\n+        short[] res = new short[SIZE];\n+        int val = 65536;\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) Math.min(a[i], val);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    \/\/ Note that max operations on subword types cannot be vectorized\n+    \/\/ because higher bits will be lost.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public short[] vectorMax() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = (short) Math.max(a[i], b[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -196,0 +251,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -205,0 +262,3 @@\n+    \/\/ Note that reverseBytes cannot be vectorized if the vector element\n+    \/\/ type doesn't match the caller's class type.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -213,1 +273,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":62,"deletions":3,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -78,0 +80,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +91,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +102,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -106,0 +114,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -116,0 +126,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -126,0 +138,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -136,1 +150,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -146,1 +161,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -207,2 +223,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n-    \/\/ between src and dest of the assignment.\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -220,1 +236,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -231,1 +248,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -242,1 +260,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -253,1 +272,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -265,0 +285,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -276,1 +298,2 @@\n-    \/\/ Note that this case cannot be vectorized due to data dependence\n+    \/\/ Note that this case cannot be vectorized due to data dependence.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -287,1 +310,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopArrayIndexComputeTest.java","additions":34,"deletions":12,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -83,0 +85,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -92,0 +96,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -101,0 +107,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -110,0 +118,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -119,0 +129,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -128,0 +140,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -141,0 +155,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -154,0 +170,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -165,0 +183,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -178,0 +198,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -189,0 +211,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -200,0 +224,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -211,0 +237,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -221,0 +249,14 @@\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public int[] multipleOpsWith2DifferentTypesAndSharedOp() {\n+        int i = 0, sum = 0;\n+        int[] res1 = new int[SIZE];\n+        short[] res2 = new short[SIZE];\n+        while (++i < SIZE) {\n+            sum += (res1[i]--);\n+            res2[i]++;\n+        }\n+        return res1;\n+    }\n+\n@@ -258,0 +300,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -268,0 +312,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -278,1 +324,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopCombinedOpTest.java","additions":48,"deletions":3,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -65,0 +67,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -89,1 +93,0 @@\n-}\n@@ -91,0 +94,12 @@\n+    @Test\n+    \/\/ Note that this loop cannot be vectorized due to early break.\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n+    public int conditionalBreakReduction() {\n+        int sum = 0, i = 0;\n+        for (i = 0; i < SIZE; i++) {\n+            sum += i;\n+            if (invCond) break;\n+        }\n+        return i;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopControlFlowTest.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 3333;\n+    private static final int SIZE = 543;\n@@ -53,0 +55,3 @@\n+    \/\/ tmp[] may be modified and thus should not be returned in cases.\n+    private int[] tmp;\n+\n@@ -58,0 +63,1 @@\n+        tmp = new int[SIZE];\n@@ -59,2 +65,2 @@\n-        start = 999 + ran.nextInt() % 100;\n-        limit = start + 1357;\n+        start = ran.nextInt() % 100;\n+        limit = start + 235;\n@@ -64,0 +70,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -74,0 +82,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -84,0 +94,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +106,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -104,0 +118,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -111,1 +127,1 @@\n-            res[j] = a[j - 500] + 2323;\n+            res[j] = a[j] + 2323;\n@@ -136,1 +152,0 @@\n-}\n@@ -138,0 +153,11 @@\n+    @Test\n+    public int nestedLoopIndexLiveOut() {\n+        int k = 0;\n+        for (int i = 0; i < 50; i += 2) {\n+            for (int j = 0; j < 10; j++) {\n+                tmp[k++] = 5;\n+            }\n+        }\n+        return k;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopLiveOutNodesTest.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -63,2 +65,2 @@\n-        start = Math.abs(ran.nextInt() % 1000);\n-        end = start + 1315;\n+        start = Math.abs(ran.nextInt() % 100);\n+        end = start + 315;\n@@ -78,0 +80,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -87,0 +91,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -96,0 +102,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -105,0 +113,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -107,1 +117,1 @@\n-        for (short s = 123; s < 789; s++) {\n+        for (short s = 123; s < 456; s++) {\n@@ -114,0 +124,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -125,0 +137,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -163,1 +177,0 @@\n-\n@@ -165,0 +178,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -184,0 +199,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -193,0 +210,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -201,1 +220,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopRangeStrideTest.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -47,1 +49,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -77,0 +79,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.LOAD_VECTOR, \">0\"})\n@@ -95,2 +99,2 @@\n-    \/\/ Note that adding constant in loop would be directly optimized to\n-    \/\/ scalar operations, hence this case is not vectorized.\n+    \/\/ Note that this loop should be optimized to straight-line code.\n+    @IR(failOn = {IRNode.COUNTED_LOOP})\n@@ -115,0 +119,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.LOAD_VECTOR, \">0\"})\n@@ -168,0 +174,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -189,1 +197,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopReductionOpTest.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -43,0 +43,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -63,0 +65,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -80,0 +84,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -94,0 +100,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -108,0 +116,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -117,1 +127,0 @@\n-}\n@@ -119,0 +128,21 @@\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n+    public float reductionLoopWithAnotherReductionInput() {\n+        float res = 0.0F;\n+        int N = 400;\n+        int[] arr = new int[N];\n+        int i1 = 0, i2 = 0, i3, i4;\n+        for (int j = 0; j < N; ++j) {\n+            for (i3 = 1; i3 < 63; ++i3) {\n+                arr[i3] -= 1;\n+                i1 += i3;\n+            }\n+            for (i4 = 2; i4 < 63; ++i4) {\n+                res += i4 - i2;\n+                i2 = i1;\n+            }\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/MultipleLoopsTest.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -44,0 +44,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -48,1 +50,1 @@\n-    private static final int SIZE = 2345;\n+    private static final int SIZE = 543;\n@@ -61,0 +63,2 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"},\n+        counts = {IRNode.STORE_VECTOR, \">0\"})\n@@ -77,1 +81,0 @@\n-}\n@@ -79,0 +82,15 @@\n+    @Test\n+    public int stripMinedOneIterationLoop() {\n+        int[] res = new int[SIZE];\n+        int i1, i2, i3, i4 = 11937;\n+        for (i1 = 1; i1 < SIZE; i1++) {\n+            for (i2 = 1; i2 < 2; i2++) {\n+                for (i3 = 1; i3 < 2; i3++) {\n+                    i4 &= i3;\n+                }\n+            }\n+            res[i1] = 0;\n+        }\n+        return res[0] + i4;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/StripMinedLoopTest.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -37,0 +39,1 @@\n+import jdk.test.lib.Platform;\n@@ -53,4 +56,0 @@\n-    @Target(ElementType.METHOD)\n-    @Retention(RetentionPolicy.RUNTIME)\n-    protected @interface Test {}\n-\n@@ -58,4 +57,1 @@\n-        \/\/ Add extra VM options to enable post loop vectorization\n-        WB.setBooleanVMFlag(\"UnlockExperimentalVMOptions\", true);\n-        WB.setBooleanVMFlag(\"PostLoopMultiversioning\", true);\n-\n+        \/\/ 1) Vectorization correctness test\n@@ -68,0 +64,3 @@\n+        \/\/ Add extra VM options to verify experimental auto-vectorization\n+        WB.setBooleanVMFlag(\"UnlockExperimentalVMOptions\", true);\n+        WB.setBooleanVMFlag(\"PostLoopMultiversioning\", true);\n@@ -79,0 +78,8 @@\n+\n+        \/\/ 2) Vectorization ability test\n+        \/\/ To test vectorizability, invoke the IR test framework to check existence of\n+        \/\/ expected C2 IR node.\n+        TestFramework irTest = new TestFramework(klass);\n+        \/\/ Add extra VM options to enable more auto-vectorization chances\n+        irTest.addFlags(\"-XX:-OptimizeFill\");\n+        irTest.start();\n@@ -207,1 +214,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/VectorizationTestRunner.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"}]}