{"files":[{"patch":"@@ -882,9 +882,9 @@\n-\/\/ Note: this method is much like resolve_from_stream, but\n-\/\/ does not publish the classes via the SystemDictionary.\n-\/\/ Handles Lookup.defineClass hidden, unsafe_DefineAnonymousClass\n-\/\/ and redefineclasses. RedefinedClasses do not add to the class hierarchy.\n-InstanceKlass* SystemDictionary::parse_stream(Symbol* class_name,\n-                                              Handle class_loader,\n-                                              ClassFileStream* st,\n-                                              const ClassLoadInfo& cl_info,\n-                                              TRAPS) {\n+\/\/ Note: this method is much like resolve_class_from_stream, but\n+\/\/ does not publish the classes in the SystemDictionary.\n+\/\/ Handles Lookup.defineClass hidden and unsafe_DefineAnonymousClass.\n+InstanceKlass* SystemDictionary::resolve_hidden_class_from_stream(\n+                                                     ClassFileStream* st,\n+                                                     Symbol* class_name,\n+                                                     Handle class_loader,\n+                                                     const ClassLoadInfo& cl_info,\n+                                                     TRAPS) {\n@@ -901,2 +901,2 @@\n-  if (is_unsafe_anon_class || cl_info.is_hidden()) {\n-    guarantee(!is_unsafe_anon_class || cl_info.unsafe_anonymous_host()->class_loader() == class_loader(),\n+  assert (is_unsafe_anon_class || cl_info.is_hidden(), \"only used for hidden classes\");\n+  guarantee(!is_unsafe_anon_class || cl_info.unsafe_anonymous_host()->class_loader() == class_loader(),\n@@ -904,5 +904,2 @@\n-    bool create_mirror_cld = is_unsafe_anon_class || !cl_info.is_strong_hidden();\n-    loader_data = register_loader(class_loader, create_mirror_cld);\n-  } else {\n-    loader_data = ClassLoaderData::class_loader_data(class_loader());\n-  }\n+  bool create_mirror_cld = is_unsafe_anon_class || !cl_info.is_strong_hidden();\n+  loader_data = register_loader(class_loader, create_mirror_cld);\n@@ -914,4 +911,0 @@\n-  \/\/ Note that we do this even though this klass might\n-  \/\/ already be present in the SystemDictionary, otherwise we would not\n-  \/\/ throw potential ClassFormatErrors.\n-\n@@ -925,7 +918,6 @@\n-  if (cl_info.is_hidden() || is_unsafe_anon_class) {\n-    \/\/ Hidden classes that are not strong and unsafe anonymous classes must update\n-    \/\/ ClassLoaderData holder so that they can be unloaded when the mirror is no\n-    \/\/ longer referenced.\n-    if (!cl_info.is_strong_hidden() || is_unsafe_anon_class) {\n-      k->class_loader_data()->initialize_holder(Handle(THREAD, k->java_mirror()));\n-    }\n+  \/\/ Hidden classes that are not strong and unsafe anonymous classes must update\n+  \/\/ ClassLoaderData holder so that they can be unloaded when the mirror is no\n+  \/\/ longer referenced.\n+  if (!cl_info.is_strong_hidden() || is_unsafe_anon_class) {\n+    k->class_loader_data()->initialize_holder(Handle(THREAD, k->java_mirror()));\n+  }\n@@ -933,6 +925,6 @@\n-    {\n-      MutexLocker mu_r(THREAD, Compile_lock);\n-      \/\/ Add to class hierarchy, and do possible deoptimizations.\n-      add_to_hierarchy(k);\n-      \/\/ But, do not add to dictionary.\n-    }\n+  {\n+    MutexLocker mu_r(THREAD, Compile_lock);\n+    \/\/ Add to class hierarchy, and do possible deoptimizations.\n+    add_to_hierarchy(k);\n+    \/\/ But, do not add to dictionary.\n+  }\n@@ -940,5 +932,5 @@\n-    \/\/ Rewrite and patch constant pool here.\n-    k->link_class(CHECK_NULL);\n-    if (cl_info.cp_patches() != NULL) {\n-      k->constants()->patch_resolved_references(cl_info.cp_patches());\n-    }\n+  \/\/ Rewrite and patch constant pool here.\n+  k->link_class(CHECK_NULL);\n+  if (cl_info.cp_patches() != NULL) {\n+    k->constants()->patch_resolved_references(cl_info.cp_patches());\n+  }\n@@ -946,4 +938,4 @@\n-    \/\/ If it's anonymous, initialize it now, since nobody else will.\n-    if (is_unsafe_anon_class) {\n-      k->eager_initialize(CHECK_NULL);\n-    }\n+  \/\/ If it's anonymous, initialize it now, since nobody else will.\n+  if (is_unsafe_anon_class) {\n+    k->eager_initialize(CHECK_NULL);\n+  }\n@@ -951,7 +943,6 @@\n-    \/\/ notify jvmti\n-    if (JvmtiExport::should_post_class_load()) {\n-      JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n-    }\n-    if (class_load_start_event.should_commit()) {\n-      post_class_load_event(&class_load_start_event, k, loader_data);\n-    }\n+  \/\/ notify jvmti\n+  if (JvmtiExport::should_post_class_load()) {\n+    JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n+  }\n+  if (class_load_start_event.should_commit()) {\n+    post_class_load_event(&class_load_start_event, k, loader_data);\n@@ -959,0 +950,1 @@\n+\n@@ -971,3 +963,1 @@\n-InstanceKlass* SystemDictionary::resolve_from_stream(Symbol* class_name,\n-                                                     Handle class_loader,\n-                                                     Handle protection_domain,\n+InstanceKlass* SystemDictionary::resolve_class_from_stream(\n@@ -975,0 +965,3 @@\n+                                                     Symbol* class_name,\n+                                                     Handle class_loader,\n+                                                     const ClassLoadInfo& cl_info,\n@@ -996,1 +989,1 @@\n-                                                   protection_domain,\n+                                                   cl_info.protection_domain(),\n@@ -1003,1 +996,0 @@\n-    ClassLoadInfo cl_info(protection_domain);\n@@ -1034,0 +1026,14 @@\n+InstanceKlass* SystemDictionary::resolve_from_stream(ClassFileStream* st,\n+                                                     Symbol* class_name,\n+                                                     Handle class_loader,\n+                                                     const ClassLoadInfo& cl_info,\n+                                                     TRAPS) {\n+  bool is_unsafe_anon_class = cl_info.unsafe_anonymous_host() != NULL;\n+  if (cl_info.is_hidden() || is_unsafe_anon_class) {\n+    return resolve_hidden_class_from_stream(st, class_name, class_loader, cl_info, CHECK_NULL);\n+  } else {\n+    return resolve_class_from_stream(st, class_name, class_loader, cl_info, CHECK_NULL);\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":60,"deletions":54,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -124,0 +124,9 @@\n+ private:\n+  \/\/ Parse the stream to create an unsafe anonymous or hidden class.\n+  \/\/ Used by JVMTI RedefineClasses and by Unsafe_DefineAnonymousClass\n+  \/\/ and jvm_lookup_define_class.\n+  static InstanceKlass* resolve_hidden_class_from_stream(ClassFileStream* st,\n+                                                         Symbol* class_name,\n+                                                         Handle class_loader,\n+                                                         const ClassLoadInfo& cl_info,\n+                                                         TRAPS);\n@@ -125,8 +134,7 @@\n-  \/\/ Parse new stream. This won't update the dictionary or class\n-  \/\/ hierarchy, simply parse the stream. Used by JVMTI RedefineClasses\n-  \/\/ and by Unsafe_DefineAnonymousClass and jvm_lookup_define_class.\n-  static InstanceKlass* parse_stream(Symbol* class_name,\n-                                     Handle class_loader,\n-                                     ClassFileStream* st,\n-                                     const ClassLoadInfo& cl_info,\n-                                     TRAPS);\n+  \/\/ Resolve a class from stream (called by jni_DefineClass and JVM_DefineClass)\n+  \/\/ This class is added to the SystemDictionary.\n+  static InstanceKlass* resolve_class_from_stream(ClassFileStream* st,\n+                                                  Symbol* class_name,\n+                                                  Handle class_loader,\n+                                                  const ClassLoadInfo& cl_info,\n+                                                  TRAPS);\n@@ -134,2 +142,4 @@\n-  \/\/ Resolve from stream (called by jni_DefineClass and JVM_DefineClass)\n-  static InstanceKlass* resolve_from_stream(Symbol* class_name,\n+ public:\n+  \/\/ Resolve either a hidden or normal class from a stream of bytes, based on passed ClassLoadInfo\n+  static InstanceKlass* resolve_from_stream(ClassFileStream* st,\n+                                            Symbol* class_name,\n@@ -137,2 +147,1 @@\n-                                            Handle protection_domain,\n-                                            ClassFileStream* st,\n+                                            const ClassLoadInfo& cl_info,\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+#include \"classfile\/classLoader.hpp\"\n+#include \"classfile\/classLoadInfo.hpp\"\n@@ -286,1 +288,3 @@\n-  Klass* k = SystemDictionary::resolve_from_stream(class_name,\n+  Handle protection_domain;\n+  ClassLoadInfo cl_info(protection_domain);\n+  Klass* k = SystemDictionary::resolve_from_stream(&st, class_name,\n@@ -288,2 +292,1 @@\n-                                                   Handle(),\n-                                                   &st,\n+                                                   cl_info,\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -863,1 +863,2 @@\n-  Klass* k = SystemDictionary::resolve_from_stream(class_name,\n+  ClassLoadInfo cl_info(protection_domain);\n+  Klass* k = SystemDictionary::resolve_from_stream(&st, class_name,\n@@ -865,2 +866,1 @@\n-                                                   protection_domain,\n-                                                   &st,\n+                                                   cl_info,\n@@ -950,1 +950,2 @@\n-    ik = SystemDictionary::resolve_from_stream(class_name,\n+    ClassLoadInfo cl_info(protection_domain);\n+    ik = SystemDictionary::resolve_from_stream(&st, class_name,\n@@ -952,2 +953,1 @@\n-                                               protection_domain,\n-                                               &st,\n+                                               cl_info,\n@@ -969,5 +969,4 @@\n-    ik = SystemDictionary::parse_stream(class_name,\n-                                        class_loader,\n-                                        &st,\n-                                        cl_info,\n-                                        CHECK_NULL);\n+    ik = SystemDictionary::resolve_from_stream(&st, class_name,\n+                                               class_loader,\n+                                               cl_info,\n+                                               CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/klassFactory.hpp\"\n@@ -1370,1 +1370,0 @@\n-    Symbol*  the_class_sym = the_class->name();\n@@ -1382,2 +1381,0 @@\n-    Handle the_class_loader(current, the_class->class_loader());\n-    Handle protection_domain(current, the_class->protection_domain());\n@@ -1391,0 +1388,1 @@\n+    Handle protection_domain(THREAD, the_class->protection_domain());\n@@ -1392,4 +1390,3 @@\n-    InstanceKlass* scratch_class = SystemDictionary::parse_stream(\n-                                                      the_class_sym,\n-                                                      the_class_loader,\n-                                                      &st,\n+    InstanceKlass* scratch_class = KlassFactory::create_from_stream(&st,\n+                                                      the_class->name(),\n+                                                      the_class->class_loader_data(),\n@@ -1398,0 +1395,1 @@\n+\n@@ -1410,1 +1408,1 @@\n-      log_info(redefine, class, load, exceptions)(\"parse_stream exception: '%s'\", ex_name->as_C_string());\n+      log_info(redefine, class, load, exceptions)(\"create_from_stream exception: '%s'\", ex_name->as_C_string());\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-\/\/ - SystemDictionary::parse_stream() was called with a NULL protection\n+\/\/ - KlassFactory::create_from_stream() was called with a NULL protection\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -868,5 +868,4 @@\n-  InstanceKlass* anonk = SystemDictionary::parse_stream(no_class_name,\n-                                                        host_loader,\n-                                                        &st,\n-                                                        cl_info,\n-                                                        CHECK_NULL);\n+  InstanceKlass* anonk = SystemDictionary::resolve_from_stream(&st, no_class_name,\n+                                                               host_loader,\n+                                                               cl_info,\n+                                                               CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}