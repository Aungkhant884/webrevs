{"files":[{"patch":"@@ -194,2 +194,3 @@\n-        relocate(adr.rspec());                                 \\\n-        NAME(adr.target(), temp);                              \\\n+        relocate(adr.rspec(), [&] {                            \\\n+          NAME(adr.target(), temp);                            \\\n+        });                                                    \\\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -481,1 +481,2 @@\n-    relocate(InternalAddress(dest).rspec());\n+    relocate(InternalAddress(dest).rspec());                                \\\n+    IncompressibleRegion ir(this);  \/* relocations *\/\n@@ -526,2 +527,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rd, adr.target());                                                                    \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rd, adr.target());                                                                  \\\n+        });                                                                                        \\\n@@ -600,2 +602,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rd, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rd, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -743,2 +746,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rs, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rs, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -786,2 +790,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rs, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rs, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -2145,0 +2150,21 @@\n+public:\n+  \/\/ Emit a relocation.\n+  void relocate(RelocationHolder const& rspec, int format = 0) {\n+    AbstractAssembler::relocate(rspec, format);\n+  }\n+  void relocate(relocInfo::relocType rtype, int format = 0) {\n+    AbstractAssembler::relocate(rtype, format);\n+  }\n+  template <typename Callback>\n+  void relocate(relocInfo::relocType rtype, Callback emit_insts, int format = 0) {\n+    AbstractAssembler::relocate(rtype, format);\n+    IncompressibleRegion ir(this);  \/\/ relocations\n+    emit_insts();\n+  }\n+  template <typename Callback>\n+  void relocate(RelocationHolder const& rspec, Callback emit_insts, int format = 0) {\n+    AbstractAssembler::relocate(rspec, format);\n+    IncompressibleRegion ir(this);  \/\/ relocations\n+    emit_insts();\n+  }\n+\n@@ -3041,1 +3067,1 @@\n-  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_region(false) {\n+  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_region(true) {\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -45,2 +45,3 @@\n-  __ relocate(safepoint_pc.rspec());\n-  __ la(t0, safepoint_pc.target());\n+  __ relocate(safepoint_pc.rspec(), [&] {\n+    __ la(t0, safepoint_pc.target());\n+  });\n@@ -104,3 +105,6 @@\n-  int32_t off = 0;\n-  __ la_patchable(ra, RuntimeAddress(Runtime1::entry_for(stub_id)), off);\n-  __ jalr(ra, ra, off);\n+  RuntimeAddress target(Runtime1::entry_for(stub_id));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(ra, target, offset);\n+    __ jalr(ra, ra, offset);\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1412,3 +1412,5 @@\n-  int32_t off = 0;\n-  __ la_patchable(exceptionPC->as_register(), pc_for_athrow, off);\n-  __ addi(exceptionPC->as_register(), exceptionPC->as_register(), off);\n+  __ relocate(pc_for_athrow.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(exceptionPC->as_register(), pc_for_athrow, offset);\n+    __ addi(exceptionPC->as_register(), exceptionPC->as_register(), offset);\n+  });\n@@ -1842,3 +1844,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(dest), offset);\n-    __ jalr(x1, t0, offset);\n+    RuntimeAddress target(dest);\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -70,3 +70,6 @@\n-  int32_t off = 0;\n-  la_patchable(t0, RuntimeAddress(entry), off);\n-  jalr(x1, t0, off);\n+  RuntimeAddress target(entry);\n+  relocate(target.rspec(), [&] {\n+    int offset;\n+    la_patchable(t0, target, offset);\n+    jalr(x1, t0, offset);\n+  });\n@@ -570,3 +573,6 @@\n-  int32_t off = 0;\n-  __ la_patchable(t0, RuntimeAddress(target), off);\n-  __ jalr(x1, t0, off);\n+  RuntimeAddress addr(target);\n+  __ relocate(addr.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, addr, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,2 +42,3 @@\n-  masm.relocate(safepoint_pc.rspec());\n-  __ la(t0, safepoint_pc.target());\n+  masm.relocate(safepoint_pc.rspec(), [&] {\n+    __ la(t0, safepoint_pc.target());\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/c2_safepointPollStubTable_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -341,3 +341,7 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, stub->slow_path(), offset);\n-    __ jalr(x1, t0, offset);\n+\n+    Address target(stub->slow_path());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -185,3 +185,6 @@\n-  int32_t offset = 0;\n-  la_patchable(xdispatch, ExternalAddress((address)Interpreter::dispatch_table()), offset);\n-  addi(xdispatch, xdispatch, offset);\n+  ExternalAddress target((address)Interpreter::dispatch_table());\n+  relocate(target.rspec(), [&] {\n+    int offset;\n+    la_patchable(xdispatch, target, offset);\n+    addi(xdispatch, xdispatch, offset);\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -76,4 +76,6 @@\n-  Label slow;\n-  int32_t offset = 0;\n-  __ la_patchable(rcounter_addr, SafepointSynchronize::safepoint_counter_addr(), offset);\n-  __ addi(rcounter_addr, rcounter_addr, offset);\n+  Address target(SafepointSynchronize::safepoint_counter_addr());\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(rcounter_addr, target, offset);\n+    __ addi(rcounter_addr, rcounter_addr, offset);\n+  });\n@@ -81,0 +83,1 @@\n+  Label slow;\n@@ -93,5 +96,6 @@\n-    int32_t offset2;\n-    __ la_patchable(result,\n-                    ExternalAddress((address) JvmtiExport::get_field_access_count_addr()),\n-                    offset2);\n-    __ lwu(result, Address(result, offset2));\n+    ExternalAddress target((address) JvmtiExport::get_field_access_count_addr());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(result, target, offset);\n+      __ lwu(result, Address(result, offset));\n+    });\n@@ -172,3 +176,6 @@\n-    int32_t tmp_offset = 0;\n-    __ la_patchable(t0, ExternalAddress(slow_case_addr), tmp_offset);\n-    __ jalr(x1, t0, tmp_offset);\n+    ExternalAddress target(slow_case_addr);\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -310,3 +310,6 @@\n-    int32_t offset = 0;\n-    la_patchable(t0, RuntimeAddress(StubRoutines::forward_exception_entry()), offset);\n-    jalr(x0, t0, offset);\n+    RuntimeAddress target(StubRoutines::forward_exception_entry());\n+    relocate(target.rspec(), [&] {\n+      int offset;\n+      la_patchable(t0, target, offset);\n+      jalr(x0, t0, offset);\n+    });\n@@ -385,3 +388,6 @@\n-  int32_t offset = 0;\n-  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), offset);\n-  ld(t1, Address(t1, offset));\n+  ExternalAddress target(StubRoutines::verify_oop_subroutine_entry_address());\n+  relocate(target.rspec(), [&] {\n+    int offset;\n+    la_patchable(t1, target, offset);\n+    ld(t1, Address(t1, offset));\n+  });\n@@ -424,3 +430,6 @@\n-  int32_t offset = 0;\n-  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), offset);\n-  ld(t1, Address(t1, offset));\n+  ExternalAddress target(StubRoutines::verify_oop_subroutine_entry_address());\n+  relocate(target.rspec(), [&] {\n+    int offset;\n+    la_patchable(t1, target, offset);\n+    ld(t1, Address(t1, offset));\n+  });\n@@ -739,2 +748,3 @@\n-        relocate(adr.rspec());\n-        movptr(Rd, adr.target());\n+        relocate(adr.rspec(), [&] {\n+          movptr(Rd, adr.target());\n+        });\n@@ -1343,3 +1353,6 @@\n-      int32_t offset = 0;\n-      la_patchable(xheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()), offset);\n-      ld(xheapbase, Address(xheapbase, offset));\n+      ExternalAddress target(CompressedOops::ptrs_base_addr());\n+      relocate(target.rspec(), [&] {\n+        int offset;\n+        la_patchable(xheapbase, target, offset);\n+        ld(xheapbase, Address(xheapbase, offset));\n+      });\n@@ -1352,2 +1365,3 @@\n-  relocate(dest.rspec());\n-  movptr(Rd, dest.target());\n+  relocate(dest.rspec(), [&] {\n+    movptr(Rd, dest.target());\n+  });\n@@ -1699,2 +1713,6 @@\n-  _masm->la_patchable(t0, ExternalAddress((address)flag_addr), offset);\n-  _masm->lbu(t0, Address(t0, offset));\n+  ExternalAddress target((address)flag_addr);\n+  _masm->relocate(target.rspec(), [&] {\n+    int offset;\n+    _masm->la_patchable(t0, target, offset);\n+    _masm->lbu(t0, Address(t0, offset));\n+  });\n@@ -2444,1 +2462,0 @@\n-  int32_t offset = 0;\n@@ -2448,2 +2465,5 @@\n-    la_patchable(tmp, entry, offset);\n-    jalr(x0, tmp, offset);\n+    relocate(entry.rspec(), [&] {\n+      int offset;\n+      la_patchable(tmp, entry, offset);\n+      jalr(x0, tmp, offset);\n+    });\n@@ -2463,1 +2483,0 @@\n-  int32_t offset = 0;\n@@ -2467,2 +2486,5 @@\n-    la_patchable(tmp, entry, offset);\n-    jalr(x1, tmp, offset); \/\/ link\n+    relocate(entry.rspec(), [&] {\n+      int offset;\n+      la_patchable(tmp, entry, offset);\n+      jalr(x1, tmp, offset); \/\/ link\n+    });\n@@ -2704,1 +2726,0 @@\n-  relocate(dest.rspec());\n@@ -2744,3 +2765,6 @@\n-    int32_t offset = 0;\n-    la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone)), offset);\n-    jalr(x1, t0, offset);\n+    RuntimeAddress target(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone));\n+    relocate(target.rspec(), [&] {\n+      int offset;\n+      la_patchable(t0, target, offset);\n+      jalr(x1, t0, offset);\n+    });\n@@ -2752,3 +2776,6 @@\n-    offset = 0;\n-    la_patchable(t0, RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry()), offset);\n-    jalr(x0, t0, offset);\n+    target = RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry());\n+    relocate(target.rspec(), [&] {\n+      int offset;\n+      la_patchable(t0, target, offset);\n+      jalr(x0, t0, offset);\n+    });\n@@ -2768,2 +2795,3 @@\n-  relocate(rtype);\n-  lwu(zr, Address(r, offset));\n+  relocate(rtype, [&] {\n+    lwu(zr, Address(r, offset));\n+  });\n@@ -2783,2 +2811,3 @@\n-  relocate(oop_Relocation::spec(oop_index));\n-  li32(dst, 0xDEADBEEF);\n+  relocate(oop_Relocation::spec(oop_index), [&] {\n+    li32(dst, 0xDEADBEEF);\n+  });\n@@ -2795,2 +2824,3 @@\n-  relocate(metadata_Relocation::spec(index));\n-  li32(dst, nk);\n+  relocate(metadata_Relocation::spec(index), [&] {\n+    li32(dst, nk);\n+  });\n@@ -2843,2 +2873,3 @@\n-  relocate(entry.rspec());\n-  jal(target);\n+  relocate(entry.rspec(), [&] {\n+    jal(target);\n+  });\n@@ -2852,0 +2883,1 @@\n+  IncompressibleRegion ir(this);  \/\/ relocations\n@@ -2883,2 +2915,2 @@\n-  relocate(trampoline_stub_Relocation::spec(code()->insts()->start() +\n-                                            insts_call_instruction_offset));\n+  RelocationHolder rh = trampoline_stub_Relocation::spec(code()->insts()->start() +\n+                                                         insts_call_instruction_offset);\n@@ -2886,12 +2918,13 @@\n-\n-  \/\/ Now, create the trampoline stub's code:\n-  \/\/ - load the call\n-  \/\/ - call\n-  Label target;\n-  ld(t0, target);  \/\/ auipc + ld\n-  jr(t0);          \/\/ jalr\n-  bind(target);\n-  assert(offset() - stub_start_offset == NativeCallTrampolineStub::data_offset,\n-         \"should be\");\n-  assert(offset() % wordSize == 0, \"bad alignment\");\n-  emit_int64((intptr_t)dest);\n+  relocate(rh, [&] {\n+    \/\/ Now, create the trampoline stub's code:\n+    \/\/ - load the call\n+    \/\/ - call\n+    Label target;\n+    ld(t0, target);  \/\/ auipc + ld\n+    jr(t0);          \/\/ jalr\n+    bind(target);\n+    assert(offset() - stub_start_offset == NativeCallTrampolineStub::data_offset,\n+           \"should be\");\n+    assert(offset() % wordSize == 0, \"bad alignment\");\n+    emit_int64((int64_t)dest);\n+  });\n@@ -2965,3 +2998,5 @@\n-  int32_t offset;\n-  la_patchable(t0, src2, offset);\n-  ld(t0, Address(t0, offset));\n+  relocate(src2.rspec(), [&] {\n+    int offset;\n+    la_patchable(t0, src2, offset);\n+    ld(t0, Address(t0, offset));\n+  });\n@@ -4152,0 +4187,1 @@\n+  RuntimeAddress target(dest);\n@@ -4153,1 +4189,1 @@\n-    far_call(RuntimeAddress(dest));\n+    far_call(target);\n@@ -4155,3 +4191,5 @@\n-    int32_t offset = 0;\n-    la_patchable(tmp, RuntimeAddress(dest), offset);\n-    jalr(x1, tmp, offset);\n+    relocate(target.rspec(), [&] {\n+      int offset;\n+      la_patchable(tmp, target, offset);\n+      jalr(x1, tmp, offset);\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":98,"deletions":60,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -639,0 +639,1 @@\n+public:\n@@ -938,3 +939,6 @@\n-      int32_t offset = 0;\n-      la_patchable(dest, InternalAddress(const_addr.target()), offset);\n-      ld(dest, Address(dest, offset));\n+      InternalAddress target(const_addr.target());\n+      relocate(target.rspec(), [&] {\n+        int offset;\n+        la_patchable(dest, target, offset);\n+        ld(dest, Address(dest, offset));\n+      });\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -342,3 +342,6 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::fixup_callers_callsite)), offset);\n-  __ jalr(x1, t0, offset);\n+  RuntimeAddress target(CAST_FROM_FN_PTR(address, SharedRuntime::fixup_callers_callsite));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -1290,3 +1293,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ lbu(t0, Address(t0, offset));\n+    ExternalAddress target((address)&DTraceMethodProbes);\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lbu(t0, Address(t0, offset));\n+    });\n@@ -1493,3 +1499,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ lbu(t0, Address(t0, offset));\n+    ExternalAddress target((address)&DTraceMethodProbes);\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lbu(t0, Address(t0, offset));\n+    });\n@@ -1626,3 +1635,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)), offset);\n-    __ jalr(x1, t0, offset);\n+    RuntimeAddress target(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n@@ -1800,3 +1812,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap)), offset);\n-    __ jalr(x1, t0, offset);\n+    RuntimeAddress target(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap));\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n@@ -1894,3 +1909,6 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::fetch_unroll_info)), offset);\n-  __ jalr(x1, t0, offset);\n+  RuntimeAddress target(CAST_FROM_FN_PTR(address, Deoptimization::fetch_unroll_info));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -2038,3 +2056,6 @@\n-  offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), offset);\n-  __ jalr(x1, t0, offset);\n+  target = RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -2130,5 +2151,6 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0,\n-        RuntimeAddress(CAST_FROM_FN_PTR(address,\n-                                        Deoptimization::uncommon_trap)), offset);\n-  __ jalr(x1, t0, offset);\n+  RuntimeAddress target(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -2256,3 +2278,6 @@\n-  offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), offset);\n-  __ jalr(x1, t0, offset);\n+  target = RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -2327,3 +2352,6 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(call_ptr), offset);\n-  __ jalr(x1, t0, offset);\n+  RuntimeAddress target(call_ptr);\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n@@ -2437,3 +2465,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(destination), offset);\n-    __ jalr(x1, t0, offset);\n+    RuntimeAddress target(destination);\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ jalr(x1, t0, offset);\n+    });\n@@ -2568,3 +2599,6 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, OptoRuntime::handle_exception_C)), offset);\n-  __ jalr(x1, t0, offset);\n+  RuntimeAddress target(CAST_FROM_FN_PTR(address, OptoRuntime::handle_exception_C));\n+  __ relocate(target.rspec(), [&] {\n+    int offset;\n+    __ la_patchable(t0, target, offset);\n+    __ jalr(x1, t0, offset);\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":72,"deletions":38,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2266,3 +2266,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address) JvmtiExport::get_field_access_count_addr()), offset);\n-    __ lwu(x10, Address(t0, offset));\n+    ExternalAddress target((address) JvmtiExport::get_field_access_count_addr());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lwu(x10, Address(t0, offset));\n+    });\n@@ -2482,3 +2485,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), offset);\n-    __ lwu(x10, Address(t0, offset));\n+    ExternalAddress target((address)JvmtiExport::get_field_modification_count_addr());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lwu(x10, Address(t0, offset));\n+    });\n@@ -2781,3 +2787,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), offset);\n-    __ lwu(c_rarg3, Address(t0, offset));\n+    ExternalAddress target((address)JvmtiExport::get_field_modification_count_addr());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lwu(c_rarg3, Address(t0, offset));\n+    });\n@@ -2917,3 +2926,6 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_access_count_addr()), offset);\n-    __ lwu(x12, Address(t0, offset));\n+    ExternalAddress target((address)JvmtiExport::get_field_access_count_addr());\n+    __ relocate(target.rspec(), [&] {\n+      int offset;\n+      __ la_patchable(t0, target, offset);\n+      __ lwu(x12, Address(t0, offset));\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"}]}