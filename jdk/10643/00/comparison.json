{"files":[{"patch":"@@ -194,2 +194,3 @@\n-        relocate(adr.rspec());                                 \\\n-        NAME(adr.target(), temp);                              \\\n+        relocate(adr.rspec(), [&] {                            \\\n+          NAME(adr.target(), temp);                            \\\n+        });                                                    \\\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -481,1 +481,2 @@\n-    relocate(InternalAddress(dest).rspec());\n+    relocate(InternalAddress(dest).rspec());                                \\\n+    IncompressibleRegion ir(this);  \/* relocations *\/\n@@ -526,2 +527,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rd, adr.target());                                                                    \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rd, adr.target());                                                                  \\\n+        });                                                                                        \\\n@@ -600,2 +602,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rd, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rd, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -743,2 +746,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rs, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rs, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -786,2 +790,3 @@\n-        relocate(adr.rspec());                                                                     \\\n-        NAME(Rs, adr.target(), temp);                                                              \\\n+        relocate(adr.rspec(), [&] {                                                                \\\n+          NAME(Rs, adr.target(), temp);                                                            \\\n+        });                                                                                        \\\n@@ -2145,0 +2150,21 @@\n+public:\n+  \/\/ Emit a relocation.\n+  void relocate(RelocationHolder const& rspec, int format = 0) {\n+    AbstractAssembler::relocate(rspec, format);\n+  }\n+  void relocate(relocInfo::relocType rtype, int format = 0) {\n+    AbstractAssembler::relocate(rtype, format);\n+  }\n+  template <typename Callback>\n+  void relocate(relocInfo::relocType rtype, Callback emit_insts, int format = 0) {\n+    AbstractAssembler::relocate(rtype, format);\n+    IncompressibleRegion ir(this);  \/\/ relocations\n+    emit_insts();\n+  }\n+  template <typename Callback>\n+  void relocate(RelocationHolder const& rspec, Callback emit_insts, int format = 0) {\n+    AbstractAssembler::relocate(rspec, format);\n+    IncompressibleRegion ir(this);  \/\/ relocations\n+    emit_insts();\n+  }\n+\n@@ -3041,1 +3067,1 @@\n-  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_region(false) {\n+  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_region(true) {\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -45,2 +45,3 @@\n-  __ relocate(safepoint_pc.rspec());\n-  __ la(t0, safepoint_pc.target());\n+  __ relocate(safepoint_pc.rspec(), [&] {\n+    __ la(t0, safepoint_pc.target());\n+  });\n@@ -104,3 +105,2 @@\n-  int32_t off = 0;\n-  __ la_patchable(ra, RuntimeAddress(Runtime1::entry_for(stub_id)), off);\n-  __ jalr(ra, ra, off);\n+  __ la_patchable(ra, RuntimeAddress(Runtime1::entry_for(stub_id)), [&] (int32_t off) {\n+  __ jalr(ra, ra, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1412,3 +1412,3 @@\n-  int32_t off = 0;\n-  __ la_patchable(exceptionPC->as_register(), pc_for_athrow, off);\n-  __ addi(exceptionPC->as_register(), exceptionPC->as_register(), off);\n+  __ la_patchable(exceptionPC->as_register(), pc_for_athrow, [&] (int32_t off) {\n+    __ addi(exceptionPC->as_register(), exceptionPC->as_register(), off);\n+  });\n@@ -1842,3 +1842,2 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(dest), offset);\n-    __ jalr(x1, t0, offset);\n+    __ la_patchable(t0, RuntimeAddress(dest), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -70,3 +70,2 @@\n-  int32_t off = 0;\n-  la_patchable(t0, RuntimeAddress(entry), off);\n-  jalr(x1, t0, off);\n+  la_patchable(t0, RuntimeAddress(entry), [&] (int32_t off) {\n+  jalr(x1, t0, off);});\n@@ -570,3 +569,2 @@\n-  int32_t off = 0;\n-  __ la_patchable(t0, RuntimeAddress(target), off);\n-  __ jalr(x1, t0, off);\n+  __ la_patchable(t0, RuntimeAddress(target), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,2 +42,3 @@\n-  masm.relocate(safepoint_pc.rspec());\n-  __ la(t0, safepoint_pc.target());\n+  masm.relocate(safepoint_pc.rspec(), [&] {\n+    __ la(t0, safepoint_pc.target());\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/c2_safepointPollStubTable_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -341,3 +341,2 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, stub->slow_path(), offset);\n-    __ jalr(x1, t0, offset);\n+    __ la_patchable(t0, stub->slow_path(), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -185,3 +185,3 @@\n-  int32_t offset = 0;\n-  la_patchable(xdispatch, ExternalAddress((address)Interpreter::dispatch_table()), offset);\n-  addi(xdispatch, xdispatch, offset);\n+  la_patchable(xdispatch, ExternalAddress((address)Interpreter::dispatch_table()), [&] (int32_t off) {\n+    addi(xdispatch, xdispatch, off);\n+  });\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,4 +76,3 @@\n-  Label slow;\n-  int32_t offset = 0;\n-  __ la_patchable(rcounter_addr, SafepointSynchronize::safepoint_counter_addr(), offset);\n-  __ addi(rcounter_addr, rcounter_addr, offset);\n+  __ la_patchable(rcounter_addr, SafepointSynchronize::safepoint_counter_addr(), [&] (int32_t off) {\n+    __ addi(rcounter_addr, rcounter_addr, off);\n+  });\n@@ -81,0 +80,1 @@\n+  Label slow;\n@@ -93,1 +93,0 @@\n-    int32_t offset2;\n@@ -96,2 +95,3 @@\n-                    offset2);\n-    __ lwu(result, Address(result, offset2));\n+                    [&] (int32_t off) {\n+      __ lwu(result, Address(result, off));\n+    });\n@@ -172,3 +172,2 @@\n-    int32_t tmp_offset = 0;\n-    __ la_patchable(t0, ExternalAddress(slow_case_addr), tmp_offset);\n-    __ jalr(x1, t0, tmp_offset);\n+    __ la_patchable(t0, ExternalAddress(slow_case_addr), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -310,3 +310,2 @@\n-    int32_t offset = 0;\n-    la_patchable(t0, RuntimeAddress(StubRoutines::forward_exception_entry()), offset);\n-    jalr(x0, t0, offset);\n+    la_patchable(t0, RuntimeAddress(StubRoutines::forward_exception_entry()), [&] (int32_t off) {\n+    jalr(x0, t0, off);});\n@@ -385,3 +384,3 @@\n-  int32_t offset = 0;\n-  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), offset);\n-  ld(t1, Address(t1, offset));\n+  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), [&] (int32_t off) {\n+    ld(t1, Address(t1, off));\n+  });\n@@ -424,3 +423,3 @@\n-  int32_t offset = 0;\n-  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), offset);\n-  ld(t1, Address(t1, offset));\n+  la_patchable(t1, ExternalAddress(StubRoutines::verify_oop_subroutine_entry_address()), [&] (int32_t off) {\n+    ld(t1, Address(t1, off));\n+  });\n@@ -739,2 +738,3 @@\n-        relocate(adr.rspec());\n-        movptr(Rd, adr.target());\n+        relocate(adr.rspec(), [&] {\n+          movptr(Rd, adr.target());\n+        });\n@@ -1343,3 +1343,3 @@\n-      int32_t offset = 0;\n-      la_patchable(xheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()), offset);\n-      ld(xheapbase, Address(xheapbase, offset));\n+      la_patchable(xheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()), [&] (int32_t off) {\n+        ld(xheapbase, Address(xheapbase, off));\n+      });\n@@ -1352,2 +1352,3 @@\n-  relocate(dest.rspec());\n-  movptr(Rd, dest.target());\n+  relocate(dest.rspec(), [&] {\n+    movptr(Rd, dest.target());\n+  });\n@@ -1699,2 +1700,3 @@\n-  _masm->la_patchable(t0, ExternalAddress((address)flag_addr), offset);\n-  _masm->lbu(t0, Address(t0, offset));\n+  _masm->la_patchable(t0, ExternalAddress((address)flag_addr), [&] (int32_t off) {\n+    _masm->lbu(t0, Address(t0, off));\n+  });\n@@ -2444,1 +2446,0 @@\n-  int32_t offset = 0;\n@@ -2448,2 +2449,2 @@\n-    la_patchable(tmp, entry, offset);\n-    jalr(x0, tmp, offset);\n+    la_patchable(tmp, entry, [&] (int32_t off) {\n+    jalr(x0, tmp, off);});\n@@ -2463,1 +2464,0 @@\n-  int32_t offset = 0;\n@@ -2467,2 +2467,2 @@\n-    la_patchable(tmp, entry, offset);\n-    jalr(x1, tmp, offset); \/\/ link\n+    la_patchable(tmp, entry, [&] (int32_t off) {\n+    jalr(x1, tmp, off);}); \/\/ link\n@@ -2704,1 +2704,0 @@\n-  relocate(dest.rspec());\n@@ -2744,3 +2743,2 @@\n-    int32_t offset = 0;\n-    la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone)), offset);\n-    jalr(x1, t0, offset);\n+    la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone)), [&] (int32_t off) {\n+    jalr(x1, t0, off);});\n@@ -2752,3 +2750,2 @@\n-    offset = 0;\n-    la_patchable(t0, RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry()), offset);\n-    jalr(x0, t0, offset);\n+    la_patchable(t0, RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry()), [&] (int32_t off) {\n+    jalr(x0, t0, off);});\n@@ -2768,2 +2765,3 @@\n-  relocate(rtype);\n-  lwu(zr, Address(r, offset));\n+  relocate(rtype, [&] {\n+    lwu(zr, Address(r, offset));\n+  });\n@@ -2783,2 +2781,3 @@\n-  relocate(oop_Relocation::spec(oop_index));\n-  li32(dst, 0xDEADBEEF);\n+  relocate(oop_Relocation::spec(oop_index), [&] {\n+    li32(dst, 0xDEADBEEF);\n+  });\n@@ -2795,2 +2794,3 @@\n-  relocate(metadata_Relocation::spec(index));\n-  li32(dst, nk);\n+  relocate(metadata_Relocation::spec(index), [&] {\n+    li32(dst, nk);\n+  });\n@@ -2843,2 +2843,3 @@\n-  relocate(entry.rspec());\n-  jal(target);\n+  relocate(entry.rspec(), [&] {\n+    jal(target);\n+  });\n@@ -2852,0 +2853,1 @@\n+  IncompressibleRegion ir(this);  \/\/ relocations\n@@ -2883,2 +2885,2 @@\n-  relocate(trampoline_stub_Relocation::spec(code()->insts()->start() +\n-                                            insts_call_instruction_offset));\n+  RelocationHolder rh = trampoline_stub_Relocation::spec(code()->insts()->start() +\n+                                                         insts_call_instruction_offset);\n@@ -2886,12 +2888,13 @@\n-\n-  \/\/ Now, create the trampoline stub's code:\n-  \/\/ - load the call\n-  \/\/ - call\n-  Label target;\n-  ld(t0, target);  \/\/ auipc + ld\n-  jr(t0);          \/\/ jalr\n-  bind(target);\n-  assert(offset() - stub_start_offset == NativeCallTrampolineStub::data_offset,\n-         \"should be\");\n-  assert(offset() % wordSize == 0, \"bad alignment\");\n-  emit_int64((intptr_t)dest);\n+  relocate(rh, [&] {\n+    \/\/ Now, create the trampoline stub's code:\n+    \/\/ - load the call\n+    \/\/ - call\n+    Label target;\n+    ld(t0, target);  \/\/ auipc + ld\n+    jr(t0);          \/\/ jalr\n+    bind(target);\n+    assert(offset() - stub_start_offset == NativeCallTrampolineStub::data_offset,\n+           \"should be\");\n+    assert(offset() % wordSize == 0, \"bad alignment\");\n+    emit_int64((int64_t)dest);\n+  });\n@@ -2965,3 +2968,3 @@\n-  int32_t offset;\n-  la_patchable(t0, src2, offset);\n-  ld(t0, Address(t0, offset));\n+  la_patchable(t0, src2, [&] (int32_t off) {\n+    ld(t0, Address(t0, off));\n+  });\n@@ -4155,3 +4158,2 @@\n-    int32_t offset = 0;\n-    la_patchable(tmp, RuntimeAddress(dest), offset);\n-    jalr(x1, tmp, offset);\n+    la_patchable(tmp, RuntimeAddress(dest), [&] (int32_t off) {\n+    jalr(x1, tmp, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":61,"deletions":59,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -639,0 +639,1 @@\n+private:\n@@ -640,0 +641,9 @@\n+public:\n+  template <typename Callback>\n+  void la_patchable(Register reg1, const Address &dest, Callback do_offset) {\n+    relocate(dest.rspec(), [&] {\n+      int32_t off;\n+      la_patchable(reg1, dest, off);\n+      do_offset(off);\n+    });\n+  }\n@@ -938,3 +948,3 @@\n-      int32_t offset = 0;\n-      la_patchable(dest, InternalAddress(const_addr.target()), offset);\n-      ld(dest, Address(dest, offset));\n+      la_patchable(dest, InternalAddress(const_addr.target()), [&] (int32_t off) {\n+        ld(dest, Address(dest, off));\n+      });\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -342,3 +342,2 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::fixup_callers_callsite)), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::fixup_callers_callsite)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -1290,3 +1289,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ lbu(t0, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), [&] (int32_t off) {\n+      __ lbu(t0, Address(t0, off));\n+    });\n@@ -1493,3 +1492,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ lbu(t0, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address)&DTraceMethodProbes), [&] (int32_t off) {\n+      __ lbu(t0, Address(t0, off));\n+    });\n@@ -1626,3 +1625,2 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)), offset);\n-    __ jalr(x1, t0, offset);\n+    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n@@ -1800,3 +1798,2 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap)), offset);\n-    __ jalr(x1, t0, offset);\n+    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap)), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n@@ -1894,3 +1891,2 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::fetch_unroll_info)), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::fetch_unroll_info)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -2038,3 +2034,2 @@\n-  offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -2130,1 +2125,0 @@\n-  int32_t offset = 0;\n@@ -2133,2 +2127,2 @@\n-                                        Deoptimization::uncommon_trap)), offset);\n-  __ jalr(x1, t0, offset);\n+                                        Deoptimization::uncommon_trap)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -2256,3 +2250,2 @@\n-  offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::unpack_frames)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -2327,3 +2320,2 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(call_ptr), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(call_ptr), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n@@ -2437,3 +2429,2 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, RuntimeAddress(destination), offset);\n-    __ jalr(x1, t0, offset);\n+    __ la_patchable(t0, RuntimeAddress(destination), [&] (int32_t off) {\n+    __ jalr(x1, t0, off);});\n@@ -2568,3 +2559,2 @@\n-  int32_t offset = 0;\n-  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, OptoRuntime::handle_exception_C)), offset);\n-  __ jalr(x1, t0, offset);\n+  __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, OptoRuntime::handle_exception_C)), [&] (int32_t off) {\n+  __ jalr(x1, t0, off);});\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":26,"deletions":36,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2266,3 +2266,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address) JvmtiExport::get_field_access_count_addr()), offset);\n-    __ lwu(x10, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address) JvmtiExport::get_field_access_count_addr()), [&] (int32_t off) {\n+      __ lwu(x10, Address(t0, off));\n+    });\n@@ -2482,3 +2482,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), offset);\n-    __ lwu(x10, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), [&] (int32_t off) {\n+      __ lwu(x10, Address(t0, off));\n+    });\n@@ -2781,3 +2781,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), offset);\n-    __ lwu(c_rarg3, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_modification_count_addr()), [&] (int32_t off) {\n+      __ lwu(c_rarg3, Address(t0, off));\n+    });\n@@ -2917,3 +2917,3 @@\n-    int32_t offset = 0;\n-    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_access_count_addr()), offset);\n-    __ lwu(x12, Address(t0, offset));\n+    __ la_patchable(t0, ExternalAddress((address)JvmtiExport::get_field_access_count_addr()), [&] (int32_t off) {\n+      __ lwu(x12, Address(t0, off));\n+    });\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}