{"files":[{"patch":"@@ -933,1 +933,0 @@\n-\/\/ Used by VMSelfDestructTimer and the MemProfiler.\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -768,1 +768,0 @@\n-\/\/ Used by VMSelfDestructTimer and the MemProfiler.\n@@ -770,1 +769,0 @@\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1273,1 +1273,0 @@\n-\/\/ Used by VMSelfDestructTimer and the MemProfiler.\n@@ -1275,1 +1274,0 @@\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -686,3 +686,0 @@\n-  develop(bool, MemProfiling, false,                                        \\\n-          \"Write memory usage profiling to log file\")                       \\\n-                                                                            \\\n@@ -1380,3 +1377,0 @@\n-  notproduct(intx, MemProfilingInterval, 500,                               \\\n-          \"Time between each invocation of the MemProfiler\")                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-#include \"runtime\/memprofiler.hpp\"\n@@ -228,4 +227,0 @@\n-  if (MemProfiling) {\n-    MemProfiler::disengage();\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n-#include \"code\/codeCache.hpp\"\n-#include \"gc\/shared\/collectedHeap.inline.hpp\"\n-#include \"interpreter\/oopMapCache.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"memory\/universe.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n-#include \"runtime\/jniHandles.hpp\"\n-#include \"runtime\/memprofiler.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/task.hpp\"\n-#include \"runtime\/thread.inline.hpp\"\n-#include \"runtime\/threadSMR.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n-\n-#ifndef PRODUCT\n-\n-\/\/ --------------------------------------------------------\n-\/\/ MemProfilerTask\n-\n-class MemProfilerTask : public PeriodicTask {\n- public:\n-  MemProfilerTask(int interval_time) : PeriodicTask(interval_time) {}\n-  void task();\n-};\n-\n-\n-void MemProfilerTask::task() {\n-  MemProfiler::do_trace();\n-}\n-\n-\n-\/\/----------------------------------------------------------\n-\/\/ Implementation of MemProfiler\n-\n-MemProfilerTask* MemProfiler::_task   = NULL;\n-FILE*            MemProfiler::_log_fp = NULL;\n-\n-\n-bool MemProfiler::is_active() {\n-  return _task != NULL;\n-}\n-\n-\n-void MemProfiler::engage() {\n-  const char *log_name = \"mprofile.log\";\n-  if (!is_active()) {\n-    \/\/ Create log file\n-    _log_fp = fopen(log_name , \"w+\");\n-    if (_log_fp == NULL) {\n-      fatal(\"MemProfiler: Cannot create log file: %s\", log_name);\n-    }\n-    fprintf(_log_fp, \"MemProfiler: sizes are in Kb, time is in seconds since startup\\n\\n\");\n-    fprintf(_log_fp, \"  time, #thr, #cls,  heap,  heap,  perm,  perm,  code, hndls, rescs, oopmp\\n\");\n-    fprintf(_log_fp, \"                     used, total,  used, total, total, total, total, total\\n\");\n-    fprintf(_log_fp, \"--------------------------------------------------------------------------\\n\");\n-\n-    _task = new MemProfilerTask(MemProfilingInterval);\n-    _task->enroll();\n-  }\n-}\n-\n-\n-void MemProfiler::disengage() {\n-  if (!is_active()) return;\n-  \/\/ Do one last trace at disengage time\n-  do_trace();\n-\n-  \/\/ Close logfile\n-  fprintf(_log_fp, \"MemProfiler detached\\n\");\n-  fclose(_log_fp);\n-\n-  \/\/ remove MemProfilerTask\n-  assert(_task != NULL, \"sanity check\");\n-  _task->disenroll();\n-  delete _task;\n-  _task = NULL;\n-}\n-\n-\n-void MemProfiler::do_trace() {\n-  \/\/ Calculate thread local sizes\n-  size_t handles_memory_usage    = VMThread::vm_thread()->handle_area()->size_in_bytes();\n-  size_t resource_memory_usage   = VMThread::vm_thread()->resource_area()->size_in_bytes();\n-  {\n-    JavaThreadIteratorWithHandle jtiwh;\n-    for (; JavaThread *cur = jtiwh.next(); ) {\n-      handles_memory_usage  += cur->handle_area()->size_in_bytes();\n-      resource_memory_usage += cur->resource_area()->size_in_bytes();\n-    }\n-\n-    \/\/ Print trace line in log\n-    fprintf(_log_fp, \"%6.1f,%5d,\" SIZE_FORMAT_W(5) \",\" UINTX_FORMAT_W(6) \",\" UINTX_FORMAT_W(6) \",\",\n-            os::elapsedTime(),\n-            jtiwh.length(),\n-            ClassLoaderDataGraph::num_instance_classes(),\n-            Universe::heap()->used() \/ K,\n-            Universe::heap()->capacity() \/ K);\n-  }\n-\n-  fprintf(_log_fp, UINTX_FORMAT_W(6) \",\", CodeCache::capacity() \/ K);\n-\n-  fprintf(_log_fp, UINTX_FORMAT_W(6) \",\" UINTX_FORMAT_W(6) \",%6ld\\n\",\n-          handles_memory_usage \/ K,\n-          resource_memory_usage \/ K,\n-          0L);\n-  fflush(_log_fp);\n-}\n-\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/memprofiler.cpp","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_RUNTIME_MEMPROFILER_HPP\n-#define SHARE_RUNTIME_MEMPROFILER_HPP\n-\n-\/\/ Prints periodic memory usage trace of HotSpot VM\n-\n-class MemProfilerTask;\n-\n-class MemProfiler : AllStatic {\n- friend class MemProfilerTask;\n- private:\n-  static MemProfilerTask* _task;\n-  static FILE* _log_fp;\n-  \/\/ Do trace (callback from MemProfilerTask and from disengage)\n-  static void do_trace()      PRODUCT_RETURN;\n- public:\n-  \/\/ Start\/stop the profiler\n-  static void engage()        PRODUCT_RETURN;\n-  static void disengage()     PRODUCT_RETURN;\n-  \/\/ Tester\n-  static bool is_active()     PRODUCT_RETURN0;\n-};\n-\n-#endif \/\/ SHARE_RUNTIME_MEMPROFILER_HPP\n","filename":"src\/hotspot\/share\/runtime\/memprofiler.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -90,1 +90,0 @@\n-#include \"runtime\/memprofiler.hpp\"\n@@ -3385,1 +3384,0 @@\n-  if (MemProfiling)                   MemProfiler::engage();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}