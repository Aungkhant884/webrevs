{"files":[{"patch":"@@ -52,1 +52,1 @@\n-import java.util.zip.ZipInputStream;\n+import java.util.zip.ZipOutputStream;\n@@ -111,0 +111,24 @@\n+\n+        \/\/ 6: Check that JarSigner does not move unrelated [SF,RSA] files to the beginning of signed JARs\n+        try(JarFile zf = new JarFile(sm)) {\n+\n+            List<String> actualOrder = zf.stream().map(ZipEntry::getName).toList();\n+\n+            List<String> expectedOrder = List.of(\n+                    \"META-INF\/MANIFEST.MF\",\n+                    \"META-INF\/SIGNER2.SF\",\n+                    \"META-INF\/SIGNER2.RSA\",\n+                    \"a.txt\",\n+                    \"META-INF\/subdirectory\/META-INF\/SIGNER1.SF\",\n+                    \"META-INF\/subdirectory\/META-INF\/SIGNER1.RSA\"\n+            );\n+\n+            if(!expectedOrder.equals(actualOrder)) {\n+                String msg = (\"\"\"\n+                        Unexpected file order in JAR with unrelated SF,RSA files\n+                        Expected order: %s\n+                        Actual order: %s\"\"\")\n+                        .formatted(expectedOrder, actualOrder);\n+                throw new Exception(msg);\n+            }\n+        }\n@@ -204,1 +228,1 @@\n-    private static File moveSignatureRelated(File s) throws IOException {\n+    private static File moveSignatureRelated(File s) throws Exception {\n@@ -207,0 +231,2 @@\n+        try(ZipFile in = new ZipFile(s);\n+            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(m))) {\n@@ -208,3 +234,1 @@\n-        try(ZipInputStream in = new JarInputStream(new FileInputStream(s));\n-            JarOutputStream out = new JarOutputStream(new FileOutputStream(m))) {\n-\n+            \/\/ Change the digest of the manifest by lower-casing the Manifest-Version attribute:\n@@ -214,13 +238,2 @@\n-            ZipEntry entry;\n-            while((entry = in.getNextEntry()) != null) {\n-                String name = entry.getName();\n-\n-                \/\/ Skip the existing manifest\n-                if(\"META-INF\/MANIFEST.MF\".equals(name)) {\n-                    continue;\n-                }\n-\n-                \/\/ Move signature related files into subdirectory of META-INF\n-                if(name.endsWith(\".SF\") || name.endsWith(\".RSA\")) {\n-                    name = \"META-INF\/subdirectory\/\" + name;\n-                }\n+            \/\/ Copy over the regular a.txt file\n+            copy(\"a.txt\", \"a.txt\", in, out);\n@@ -228,3 +241,4 @@\n-                out.putNextEntry(new ZipEntry(name));\n-                in.transferTo(out);\n-            }\n+            \/\/ These are also just regular files in their new location, but putting them at end\n+            \/\/ allows us to verify that JarSigner does not move them to the beginning of the signed JAR\n+            copy(\"META-INF\/SIGNER1.SF\", \"META-INF\/subdirectory\/META-INF\/SIGNER1.SF\", in, out);\n+            copy(\"META-INF\/SIGNER1.RSA\", \"META-INF\/subdirectory\/META-INF\/SIGNER1.RSA\", in, out);\n@@ -234,0 +248,8 @@\n+\n+    \/\/ Copy a file from a ZipFile into a ZipOutputStream\n+    private static void copy(String from, String to, ZipFile in, ZipOutputStream out) throws Exception {\n+        out.putNextEntry(new ZipEntry(to));\n+        try(InputStream zi = in.getInputStream(new ZipEntry(from))) {\n+            zi.transferTo(out);\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/VerifyUnrelatedSignatureFiles.java","additions":43,"deletions":21,"binary":false,"changes":64,"status":"modified"}]}