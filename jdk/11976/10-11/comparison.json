{"files":[{"patch":"@@ -216,1 +216,1 @@\n-            \/\/ see http:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/jar\/jar.html#Digital_Signatures\n+            \/\/ see https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/specs\/jar\/jar.html#digital-signatures\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,5 +41,1 @@\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.PrintStream;\n+import java.io.*;\n@@ -58,0 +54,1 @@\n+import java.util.Set;\n@@ -78,0 +75,1 @@\n+        \/\/ Regular signed JAR\n@@ -80,0 +78,2 @@\n+\n+        \/\/ Singed JAR with unrelated signature files\n@@ -83,0 +83,4 @@\n+        \/\/ Signed JAR with custom SIG-* files\n+        Path ca = createCustomAlgJar();\n+        Path cas = signJarFile(ca, \"SIGNER1\", \"custom-signed\");\n+\n@@ -168,0 +172,17 @@\n+\n+        \/\/ 8: Check that SignatureFileVerifier.isSigningRelated handles custom SIG-* files correctly\n+        try (JarFile jf = new JarFile(cas.toFile(), true)) {\n+\n+            \/\/ These files are not signature-related and should be signed\n+            Set<String> expectedSigned = Set.of(\"a.txt\",\n+                    \"META-INF\/SIG-CUSTOM2.C-1\",\n+                    \"META-INF\/subdirectory\/SIG-CUSTOM2.SF\",\n+                    \"META-INF\/subdirectory\/SIG-CUSTOM2.CS1\");\n+\n+            Set<String> actualSigned = jf.getManifest().getEntries().keySet();\n+\n+            if(!expectedSigned.equals(actualSigned)) {\n+                throw new Exception(\"Unexpected MANIFEST entries. Expected %s, got %s\"\n+                        .formatted(expectedSigned, actualSigned));\n+            }\n+        }\n@@ -226,2 +247,1 @@\n-            out.putNextEntry(new JarEntry(\"a.txt\"));\n-            out.write(\"a\".getBytes(StandardCharsets.UTF_8));\n+            write(out, \"a.txt\", \"a\");\n@@ -232,0 +252,31 @@\n+\n+    private static Path createCustomAlgJar() throws Exception {\n+        Path jar = Path.of(\"unrelated-signature-file-custom-sig.jar\");\n+\n+        Manifest manifest = new Manifest();\n+        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n+        try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(jar), manifest)) {\n+            \/\/ Regular file\n+            write(out, \"a.txt\", \"a\");\n+            \/\/ Custom SIG files with valid extension\n+            write(out, \"META-INF\/SIG-CUSTOM.SF\", \"\");\n+            write(out, \"META-INF\/SIG-CUSTOM.CS1\", \"\");\n+\n+            \/\/ Custom SIG files with invalid extension\n+            write(out, \"META-INF\/SIG-CUSTOM2.SF\", \"\");\n+            write(out, \"META-INF\/SIG-CUSTOM2.C-1\", \"\");\n+\n+            \/\/ Custom SIG files with valid extension, invalid directory\n+            write(out, \"META-INF\/subdirectory\/SIG-CUSTOM2.SF\", \"\");\n+            write(out, \"META-INF\/subdirectory\/SIG-CUSTOM2.CS1\", \"\");\n+\n+        }\n+\n+        return jar;\n+    }\n+\n+    private static void write(JarOutputStream out, String name, String content) throws IOException {\n+        out.putNextEntry(new JarEntry(name));\n+        out.write(content.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/IgnoreUnrelatedSignatureFiles.java","additions":58,"deletions":7,"binary":false,"changes":65,"status":"modified"}]}