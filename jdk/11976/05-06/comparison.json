{"files":[{"patch":"@@ -42,0 +42,2 @@\n+import static sun.security.util.SignatureFileVerifier.isInMetaInf;\n+\n@@ -138,2 +140,2 @@\n-            String uname = name.toUpperCase(Locale.ENGLISH);\n-            if (isInMetaInf(uname)) {\n+\n+            if (isInMetaInf(name)) {\n@@ -145,1 +147,1 @@\n-\n+                String uname = name.toUpperCase(Locale.ENGLISH);\n@@ -198,8 +200,0 @@\n-    \/**\n-     * Returns true iff the entry resides directly in the META-INF\/ directory\n-     *\/\n-    private boolean isInMetaInf(String uname) {\n-        return (uname.startsWith(\"META-INF\/\") || uname.startsWith(\"\/META-INF\/\") )\n-                && uname.lastIndexOf('\/') < \"META-INF\/\".length();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -84,0 +84,2 @@\n+    private static final String META_INF = \"META-INF\/\";\n+\n@@ -144,0 +146,12 @@\n+    \/**\n+     * Utility method used by JarVerifier and JarSigner\n+     * to determine if a path is located directly in the\n+     * META-INF\/ directory\n+     *\n+     * @param name the path name to check\n+     * @return true if the path resides in META-INF directly, ignoring case\n+     *\/\n+    public static boolean isInMetaInf(String name) {\n+        return name.regionMatches(true, 0, META_INF, 0, META_INF.length())\n+                && name.lastIndexOf('\/') < META_INF.length();\n+    }\n@@ -194,6 +208,1 @@\n-        name = name.toUpperCase(Locale.ENGLISH);\n-        if (!name.startsWith(\"META-INF\/\")) {\n-            return false;\n-        }\n-        name = name.substring(9);\n-        if (name.indexOf('\/') != -1) {\n+        if (!isInMetaInf(name)) {\n@@ -202,0 +211,1 @@\n+        name = name.toUpperCase(Locale.ENGLISH);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+import static sun.security.util.SignatureFileVerifier.isInMetaInf;\n+\n@@ -478,2 +480,0 @@\n-    private static final String META_INF = \"META-INF\/\";\n-\n@@ -734,1 +734,1 @@\n-            if (isInMetaInf(ze)) {\n+            if (isInMetaInf(ze.getName())) {\n@@ -962,1 +962,1 @@\n-            if (!isInMetaInf(ze)) {\n+            if (!isInMetaInf(ze.getName())) {\n@@ -977,6 +977,0 @@\n-    \/**\n-     * Returns true iff the entry resides directly in the META-INF\/ directory\n-     *\/\n-    private boolean isInMetaInf(ZipEntry ze) {\n-        return ze.getName().startsWith(META_INF) && ze.getName().lastIndexOf('\/') < META_INF.length();\n-    }\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -838,2 +838,1 @@\n-                    hasSignature = hasSignature\n-                            || SignatureFileVerifier.isBlockOrSF(name);\n+                    hasSignature |= signatureRelated(name) && SignatureFileVerifier.isBlockOrSF(name);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile VerifyUnrelatedSignatureFiles.java\n+ * @modules jdk.jartool\/sun.security.tools.jarsigner\n@@ -38,0 +38,1 @@\n+import sun.security.tools.jarsigner.Main;\n@@ -40,1 +41,5 @@\n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n@@ -42,0 +47,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -65,4 +72,4 @@\n-        File j = createJarFile();\n-        File s = signJarFile(j, \"SIGNER1\", \"signed\");\n-        File m = moveSignatureRelated(s);\n-        File sm = signJarFile(m, \"SIGNER2\", \"modified-signed\");\n+        Path j = createJarFile();\n+        Path s = signJarFile(j, \"SIGNER1\", \"signed\");\n+        Path m = moveSignatureRelated(s);\n+        Path sm = signJarFile(m, \"SIGNER2\", \"modified-signed\");\n@@ -71,2 +78,2 @@\n-        try(JarFile jarFile = new JarFile(m)) {\n-            final List<String> manifestAndSignatureRelatedFiles = JUZA.getManifestAndSignatureRelatedFiles(jarFile);\n+        try (JarFile jarFile = new JarFile(m.toFile())) {\n+            List<String> manifestAndSignatureRelatedFiles = JUZA.getManifestAndSignatureRelatedFiles(jarFile);\n@@ -75,1 +82,1 @@\n-                if(!\"META-INF\".equals(dir)) {\n+                if (!\"META-INF\".equals(dir)) {\n@@ -82,1 +89,1 @@\n-        if(SignatureFileVerifier.isSigningRelated(SUBDIR_SF_PATH)) {\n+        if (SignatureFileVerifier.isSigningRelated(SUBDIR_SF_PATH)) {\n@@ -87,2 +94,2 @@\n-        try(JarInputStream in = new JarInputStream(new FileInputStream(m), true)) {\n-            while( in.getNextEntry() != null) {\n+        try (JarInputStream in = new JarInputStream(Files.newInputStream(m), true)) {\n+             while (in.getNextEntry() != null) {\n@@ -94,4 +101,4 @@\n-        try(ZipFile zf = new ZipFile(sm)) {\n-            final ZipEntry mf = zf.getEntry(\"META-INF\/MANIFEST.MF\");\n-            try(InputStream stream = zf.getInputStream(mf)) {\n-                final String manifest = new String(stream.readAllBytes(), StandardCharsets.UTF_8);\n+        try (ZipFile zf = new ZipFile(sm.toFile())) {\n+            ZipEntry mf = zf.getEntry(\"META-INF\/MANIFEST.MF\");\n+            try (InputStream stream = zf.getInputStream(mf)) {\n+                String manifest = new String(stream.readAllBytes(), StandardCharsets.UTF_8);\n@@ -101,1 +108,1 @@\n-                if(manifest.startsWith(\"manifest-version\")) {\n+                if (manifest.startsWith(\"manifest-version\")) {\n@@ -108,1 +115,1 @@\n-        try(JarFile jf = new JarFile(sm, true)) {\n+        try (JarFile jf = new JarFile(sm.toFile(), true)) {\n@@ -114,1 +121,1 @@\n-        try(JarFile zf = new JarFile(sm)) {\n+        try (JarFile zf = new JarFile(sm.toFile())) {\n@@ -129,1 +136,1 @@\n-            if(!expectedOrder.equals(actualOrder)) {\n+            if (!expectedOrder.equals(actualOrder)) {\n@@ -138,0 +145,21 @@\n+\n+        \/\/ 7: Check that jarsigner ignores unrelated signature files\n+        String message = jarSignerVerify(m);\n+        if (message.contains(\"WARNING\")) {\n+            throw new Exception(\"jarsigner output contains unexpected  warning: \" +message);\n+        }\n+    }\n+\n+    \/**\n+     * run \"jarsigner -verify\" on the JAR and return the captured output\n+     *\/\n+    private static String jarSignerVerify(Path m) throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        PrintStream currentOut = System.out;\n+        try {\n+            System.setOut(new PrintStream(out));\n+            Main.main(new String[] {\"-verify\", m.toAbsolutePath().toString()});\n+            return out.toString(StandardCharsets.UTF_8);\n+        } finally {\n+            System.setOut(currentOut);\n+        }\n@@ -147,1 +175,1 @@\n-        try(InputStream in = jf.getInputStream(je)) {\n+        try (InputStream in = jf.getInputStream(je)) {\n@@ -166,1 +194,1 @@\n-        if(!actualSigner.equals(expectedSigner)) {\n+        if (!actualSigner.equals(expectedSigner)) {\n@@ -174,3 +202,1 @@\n-    private static File createJarFile() throws Exception {\n-\n-        File f = File.createTempFile(\"unrelated-signature-file-\", \".jar\");\n+    private static Path createJarFile() throws Exception {\n@@ -178,0 +204,1 @@\n+        Path jar = Path.of(\"unrelated-signature-file.jar\");\n@@ -181,1 +208,1 @@\n-        try(JarOutputStream out = new JarOutputStream(new FileOutputStream(f), manifest)) {\n+        try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(jar), manifest)) {\n@@ -186,1 +213,1 @@\n-        return f;\n+        return jar;\n@@ -191,2 +218,2 @@\n-    private static File signJarFile(File f, String signerName, String classifier) throws Exception {\n-        File s = File.createTempFile(\"unrelated-signature-files-\" + classifier +\"-\", \".jar\");\n+    private static Path signJarFile(Path jar, String signerName, String classifier) throws Exception {\n+        Path s = Path.of(\"unrelated-signature-files-\" + classifier +\".jar\");\n@@ -194,1 +221,1 @@\n-        new File(\"ks\").delete();\n+        Files.deleteIfExists(Path.of(\"ks\"));\n@@ -215,2 +242,2 @@\n-        try(ZipFile in = new ZipFile(f);\n-            OutputStream out = new FileOutputStream(s)) {\n+        try (ZipFile in = new ZipFile(jar.toFile());\n+            OutputStream out = Files.newOutputStream(s)) {\n@@ -231,2 +258,2 @@\n-    private static File moveSignatureRelated(File s) throws Exception {\n-        File m = File.createTempFile(\"unrelated-signature-files-modified-\", \".jar\");\n+    private static Path moveSignatureRelated(Path s) throws Exception {\n+        Path m = Path.of(\"unrelated-signature-files-modified.jar\");\n@@ -234,2 +261,2 @@\n-        try(ZipFile in = new ZipFile(s);\n-            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(m))) {\n+        try (ZipFile in = new ZipFile(s.toFile());\n+            ZipOutputStream out = new ZipOutputStream(Files.newOutputStream(m))) {\n@@ -258,1 +285,1 @@\n-        try(InputStream zi = in.getInputStream(new ZipEntry(from))) {\n+        try (InputStream zi = in.getInputStream(new ZipEntry(from))) {\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/VerifyUnrelatedSignatureFiles.java","additions":64,"deletions":37,"binary":false,"changes":101,"status":"modified"}]}