{"files":[{"patch":"@@ -27,2 +27,5 @@\n- * @compile --add-exports java.base\/jdk.internal.access=ALL-UNNAMED --add-exports java.base\/sun.security.util=ALL-UNNAMED --add-exports java.base\/sun.security.tools.keytool=ALL-UNNAMED VerifyUnrelatedSignatureFiles.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.access=ALL-UNNAMED  --add-exports java.base\/sun.security.util=ALL-UNNAMED --add-exports java.base\/sun.security.tools.keytool=ALL-UNNAMED VerifyUnrelatedSignatureFiles\n+ * @modules java.base\/jdk.internal.access\n+ * @modules java.base\/sun.security.util\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @compile VerifyUnrelatedSignatureFiles.java\n+ * @run main\/othervm VerifyUnrelatedSignatureFiles\n@@ -38,0 +41,1 @@\n+import java.security.CodeSigner;\n@@ -42,0 +46,1 @@\n+import java.security.cert.X509Certificate;\n@@ -53,1 +58,1 @@\n-    \/\/ These paths do not reside directly in META-INF\/ and should not be considered signature related\n+    \/\/ This path resides in a subdirectory of META-INF, so it should not be considered signature related\n@@ -60,1 +65,1 @@\n-        File s = signJarFile(j, \"signed\");\n+        File s = signJarFile(j, \"SIGNER1\", \"signed\");\n@@ -62,0 +67,1 @@\n+        File sm = signJarFile(m, \"SIGNER2\", \"modified-signed\");\n@@ -86,4 +92,1 @@\n-        \/\/ 4: Check that jar with unrelated .SF, .RSA files are signed as-if they are unsigned\n-\n-        File sm = signJarFile(m, \"modified-signed\");\n-\n+        \/\/ 4: Check that a JAR containing unrelated .SF, .RSA files is signed as-if it is unsigned\n@@ -102,0 +105,37 @@\n+\n+        \/\/ 5: Check that a JAR containing non signature related .SF, .RSA files can be signed\n+        try(JarFile jf = new JarFile(sm, true)) {\n+            checkSignedBy(jf, \"a.txt\", \"CN=SIGNER2\");\n+            checkSignedBy(jf, \"META-INF\/subdirectory\/META-INF\/SIGNER1.SF\", \"CN=SIGNER2\");\n+        }\n+    }\n+\n+    \/**\n+     * Check that a path of a given JAR is signed once by the expected signer CN\n+     *\/\n+    private static void checkSignedBy(JarFile jf, String name, String expectedSigner) throws Exception {\n+        JarEntry je = jf.getJarEntry(name);\n+\n+        \/\/ Read the contents to trigger verification\n+        try(InputStream in = jf.getInputStream(je)) {\n+            in.transferTo(OutputStream.nullOutputStream());\n+        }\n+\n+        \/\/ Verify that the entry is signed\n+        CodeSigner[] signers = je.getCodeSigners();\n+        if (signers == null) {\n+            throw new Exception(String.format(\"Expected %s to be signed\", name));\n+        }\n+\n+        \/\/ There should be a single signer\n+        if (signers.length != 1) {\n+            throw new Exception(String.format(\"Expected %s to be signed by exactly one signer\", name));\n+        }\n+\n+        String actualSigner = ((X509Certificate) signers[0]\n+                .getSignerCertPath().getCertificates().get(0))\n+                .getIssuerX500Principal().getName();\n+\n+        if(!actualSigner.equals(expectedSigner)) {\n+            throw new Exception(String.format(\"Expected %s to be signed by %s, was signed by %s\", name, expectedSigner, actualSigner));\n+        }\n@@ -124,1 +164,1 @@\n-    private static File signJarFile(File f, String classifier) throws Exception {\n+    private static File signJarFile(File f, String signerName, String classifier) throws Exception {\n@@ -131,1 +171,1 @@\n-                        \" CN=RSA -alias r -genkeypair -keyalg rsa\").split(\" \"));\n+                        \" CN=\" + signerName +\" -alias r -genkeypair -keyalg rsa\").split(\" \"));\n@@ -145,0 +185,1 @@\n+                .signerName(signerName)\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/VerifyUnrelatedSignatureFiles.java","additions":51,"deletions":10,"binary":false,"changes":61,"status":"modified"}]}