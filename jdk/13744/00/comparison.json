{"files":[{"patch":"@@ -62,2 +62,7 @@\n- *   $type$ array{#if[char]?, a string,} or some other $type$\n- *   buffer into this buffer;<\/p><\/li>\n+ *   $type$ array{#if[char]?, a string, a <code>CharSequence<\/code>,}\n+ *   or some other $type$ buffer into this buffer{#if[char]?,}{#if[!char]?;}\n+#if[char]\n+ *   with relative bulk put capability for {@linkplain CharSequence} sources\n+ *   provided in the form of the\n+ *   {@linkplain #append(CharSequence,int,int) <i>append<\/i>} methods;\n+#end[char]\n@@ -1450,0 +1455,91 @@\n+    \/**\n+     * Absolute bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n+     *\n+     * <p> This method transfers $type$s from the given\n+     * {@linkplain CharSequence} into this buffer.  If there are more $type$s\n+     * to be copied from the {@code CharSequence} than remain in this buffer,\n+     * that is, if\n+     * <code>end&nbsp;-&nbsp;start<\/code>&nbsp;{@code >}&nbsp;\n+     * {@code limit()}&nbsp;-&nbsp;{@code index},\n+     * then no $type$s are transferred and a {@link BufferOverflowException}\n+     * is thrown.\n+     *\n+     * <p> Otherwise, this method copies\n+     * <i>n<\/i>&nbsp;=&nbsp;{@code end}&nbsp;-&nbsp;{@code start} $type$s\n+     * from the given {@code CharSequence} into this buffer, starting at the\n+     * given {@code start} index and at the given {@code index} in this buffer.\n+     * The position of this buffer is unchanged.\n+     *\n+     * <p> In other words, an invocation of this method of the form\n+     * <code>dst.put(index,&nbsp;csq,&nbsp;start,&nbsp;end)<\/code>\n+     * has exactly the same effect as the loop\n+     *\n+     * <pre>{@code\n+     *     for (int i = start, j = index; i < end; i++, j++)\n+     *         dst.put(j, csq.charAt(i));\n+     * }<\/pre>\n+     *\n+     * except that it first checks that there is sufficient space in this\n+     * buffer and it is potentially much more efficient.\n+     *\n+     * @apiNote\n+     * Unlike the other four-parameter absolute bulk put methods in this class,\n+     * this method:\n+     * <ul>\n+     * <li>defines the range of characters to be read from the source in terms\n+     * of the half-open interval {@code [start,}&nbsp;{@code  end)} instead of\n+     * an {@code offset} and a {@code length};<\/li>\n+     * <li>throws a {@code BufferOverflowException} instead of an\n+     * {@code IndexOutOfBoundsException} for the condition\n+     * {@code index}&nbsp;{@code +}&nbsp;{@code end}&nbsp;{@code -}&nbsp;\n+     * {@code start}&nbsp;{@code >}&nbsp;{@code limit()}.<\/li>\n+     * <\/ul>\n+     *\n+     * @param  index\n+     *         The index in this buffer at which the first char will be written;\n+     *         must be non-negative and less than {@code limit()}\n+     *\n+     * @param  csq\n+     *         The {@code CharSequence} from which $type$s are to be read\n+     *\n+     * @param  start\n+     *         The offset within the {@code CharSequence} of the first $type$\n+     *         to be read; must be non-negative and no larger than\n+     *         {@code csq.length()}\n+     *\n+     * @param  end\n+     *         The offset within the {@code CharSequence} of the last $type$\n+     *         to be read, plus one; must be non-negative and no larger than\n+     *         {@code csq.length()}\n+     *\n+     * @return  This buffer\n+     *\n+     * @throws  BufferOverflowException\n+     *          If there is insufficient space in this buffer\n+     *\n+     * @throws  IndexOutOfBoundsException\n+     *          If the preconditions on the {@code index}, {@code start},\n+     *          and {@code end} parameters do not hold\n+     *\n+     * @throws  ReadOnlyBufferException\n+     *          If this buffer is read-only\n+     *\n+     * @see #append(CharSequence, int, int)\n+     * @see #put(int, $type$[], int, int)\n+     * @see #put(int, $Type$Buffer, int, int)\n+     * @since 21\n+     *\/\n+    public $Type$Buffer put(int index, CharSequence csq, int start, int end) {\n+        Objects.checkFromToIndex(start, end, csq.length());\n+        Objects.checkIndex(index, limit());\n+        if (end - start > limit() - index)\n+            throw new BufferOverflowException();\n+        if (isReadOnly())\n+            throw new ReadOnlyBufferException();\n+\n+        for (int i = start; i < end; i++)\n+            this.put(index++, csq.charAt(i));\n+\n+        return this;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":98,"deletions":2,"binary":false,"changes":100,"status":"modified"}]}