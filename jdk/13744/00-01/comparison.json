{"files":[{"patch":"@@ -1547,1 +1547,1 @@\n-     * @since 21\n+     * @since 22\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.Random;\n@@ -48,1 +49,0 @@\n-\n@@ -633,1 +633,4 @@\n-        \/\/ 8306623 and 8306959\n+        \/\/ 8306623, 8306959, and 4860681\n+        long seed = System.nanoTime();\n+        Random rnd = new Random(seed);\n+\n@@ -671,1 +674,1 @@\n-                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                    catchIndexOutOfBounds(cbIOOBE, () ->\n@@ -674,1 +677,1 @@\n-                tryCatch(cb, IndexOutOfBoundsException.class, () ->\n+                catchIndexOutOfBounds(cb, () ->\n@@ -684,0 +687,32 @@\n+\n+                \/\/ begin 4860681\n+\n+                \/\/ put() should throw NullPointerException\n+                catchNullArgument(cb, () ->\n+                    cb.put(7, (CharSequence)null, 0, 42));\n+\n+                \/\/ BufferOverflowException\n+                \/\/ put() should throw BufferOverflowException\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cbBOE.put(0, csq, cslen\/4, cslen\/2));\n+\n+                \/\/ put() should throw IndexOutOfBoundsException\n+                for (int[] bds : bounds)\n+                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                        cbIOOBE.put(0, csq, bds[0], bds[1]));\n+\n+                \/\/ Verify correct copying behavior\n+                int cap = Math.max(1, rnd.nextInt(cslen));\n+                CharBuffer cbTarget = f.apply(cap);\n+                int index = rnd.nextInt(cap);\n+                int afterLast = Math.max(1, rnd.nextInt(cslen));\n+                int first = Math.max(0, afterLast - (cap - index));\n+                cbTarget.put(index, csq, first, afterLast);\n+                for (int j = index, i = first; i < afterLast; i++, j++) {\n+                    if (cbTarget.get(j) != csq.charAt(i)) {\n+                        String s = String.format(\"Unequal values (seed %d)%n\");\n+                        throw new RuntimeException(s);\n+                    }\n+                }\n+\n+                \/\/ end 4860681\n@@ -1063,0 +1098,3 @@\n+        \/\/ 4860681\n+        catchReadOnlyBuffer(b, () -> rb.put(0, \"123\", 1, 2));\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,3 +27,4 @@\n- *      4526177 4463011 4660660 4661219 4663521 4782970 4804304 4938424 5029431\n- *      5071718 6231529 6221101 6234263 6535542 6591971 6593946 6795561 7190219\n- *      7199551 8065556 8149469 8230665 8237514 8306374 8306623 8306959\n+ *      4526177 4463011 4660660 4661219 4663521 4782970 4804304 4860681 4938424\n+ *      5029431 5071718 6231529 6221101 6234263 6535542 6591971 6593946 6795561\n+ *      7190219 7199551 8065556 8149469 8230665 8237514 8306374 8306623 8306959\n+ * @key randomness\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1065,0 +1100,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicByte.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.Random;\n@@ -48,1 +49,0 @@\n-\n@@ -633,1 +633,4 @@\n-        \/\/ 8306623 and 8306959\n+        \/\/ 8306623, 8306959, and 4860681\n+        long seed = System.nanoTime();\n+        Random rnd = new Random(seed);\n+\n@@ -671,1 +674,1 @@\n-                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                    catchIndexOutOfBounds(cbIOOBE, () ->\n@@ -674,1 +677,1 @@\n-                tryCatch(cb, IndexOutOfBoundsException.class, () ->\n+                catchIndexOutOfBounds(cb, () ->\n@@ -684,0 +687,32 @@\n+\n+                \/\/ begin 4860681\n+\n+                \/\/ put() should throw NullPointerException\n+                catchNullArgument(cb, () ->\n+                    cb.put(7, (CharSequence)null, 0, 42));\n+\n+                \/\/ BufferOverflowException\n+                \/\/ put() should throw BufferOverflowException\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cbBOE.put(0, csq, cslen\/4, cslen\/2));\n+\n+                \/\/ put() should throw IndexOutOfBoundsException\n+                for (int[] bds : bounds)\n+                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                        cbIOOBE.put(0, csq, bds[0], bds[1]));\n+\n+                \/\/ Verify correct copying behavior\n+                int cap = Math.max(1, rnd.nextInt(cslen));\n+                CharBuffer cbTarget = f.apply(cap);\n+                int index = rnd.nextInt(cap);\n+                int afterLast = Math.max(1, rnd.nextInt(cslen));\n+                int first = Math.max(0, afterLast - (cap - index));\n+                cbTarget.put(index, csq, first, afterLast);\n+                for (int j = index, i = first; i < afterLast; i++, j++) {\n+                    if (cbTarget.get(j) != csq.charAt(i)) {\n+                        String s = String.format(\"Unequal values (seed %d)%n\");\n+                        throw new RuntimeException(s);\n+                    }\n+                }\n+\n+                \/\/ end 4860681\n@@ -1063,0 +1098,3 @@\n+        \/\/ 4860681\n+        catchReadOnlyBuffer(b, () -> rb.put(0, \"123\", 1, 2));\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1061,0 +1096,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicDouble.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1061,0 +1096,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicFloat.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1061,0 +1096,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicInt.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1061,0 +1096,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicLong.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -701,0 +701,35 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1061,0 +1096,3 @@\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicShort.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}