{"files":[{"patch":"@@ -520,7 +520,3 @@\n-        q = i \/ 10;\n-        r = (q * 10) - i;\n-        buf[--charPos] = (byte)('0' + r);\n-\n-        \/\/ Whatever left is the remaining digit.\n-        if (q < 0) {\n-            buf[--charPos] = (byte)('0' - q);\n+        buf[--charPos] = DigitOnes[-i];\n+        if (i < -9) {\n+            buf[--charPos] = DigitTens[-i];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -568,7 +568,3 @@\n-        q2 = i2 \/ 10;\n-        r  = (q2 * 10) - i2;\n-        buf[--charPos] = (byte)('0' + r);\n-\n-        \/\/ Whatever left is the remaining digit.\n-        if (q2 < 0) {\n-            buf[--charPos] = (byte)('0' - q2);\n+        buf[--charPos] = Integer.DigitOnes[-i2];\n+        if (i2 < -9) {\n+            buf[--charPos] = Integer.DigitTens[-i2];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1552,7 +1552,3 @@\n-        q = i \/ 10;\n-        r = (q * 10) - i;\n-        putChar(buf, --charPos, '0' + r);\n-\n-        \/\/ Whatever left is the remaining digit.\n-        if (q < 0) {\n-            putChar(buf, --charPos, '0' - q);\n+        putChar(buf, --charPos, Integer.DigitOnes[-i]);\n+        if (i < -9) {\n+            putChar(buf, --charPos, Integer.DigitTens[-i]);\n@@ -1607,7 +1603,3 @@\n-        q2 = i2 \/ 10;\n-        r  = (q2 * 10) - i2;\n-        putChar(buf, --charPos, '0' + r);\n-\n-        \/\/ Whatever left is the remaining digit.\n-        if (q2 < 0) {\n-            putChar(buf, --charPos, '0' - q2);\n+        putChar(buf, --charPos, Integer.DigitOnes[-i2]);\n+        if (i2 < -9) {\n+            putChar(buf, --charPos, Integer.DigitTens[-i2]);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    private int[] intsTiny;\n@@ -61,2 +62,3 @@\n-        Random r = new Random(0);\n-        strings = new String[size];\n+        Random r  = new Random(0);\n+        strings   = new String[size];\n+        intsTiny  = new int[size];\n@@ -64,1 +66,1 @@\n-        intsBig = new int[size];\n+        intsBig   = new int[size];\n@@ -67,0 +69,1 @@\n+            intsTiny[i] = r.nextInt(99);\n@@ -94,0 +97,8 @@\n+    \/** Performs toString on very small values, just one or two digits. *\/\n+    @Benchmark\n+    public void toStringTiny(Blackhole bh) {\n+        for (int i : intsTiny) {\n+            bh.consume(Integer.toString(i));\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}