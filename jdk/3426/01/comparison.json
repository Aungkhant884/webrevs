{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -792,3 +792,0 @@\n-  if (inner_classes_length > 0) {\n-    write_inner_classes_attribute(inner_classes_length);\n-  }\n@@ -801,3 +798,0 @@\n-  if (cpool()->operands() != NULL) {\n-    write_bootstrapmethod_attribute();\n-  }\n@@ -816,0 +810,6 @@\n+  if (cpool()->operands() != NULL) {\n+    write_bootstrapmethod_attribute();\n+  }\n+  if (inner_classes_length > 0) {\n+    write_inner_classes_attribute(inner_classes_length);\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,3 @@\n+        \/\/ workaroud for JDK-8264667: create log message before addTransformer()\n+        String msg = \"Added transformer \" + transformer\n+            + \" with canRetransform=\" + canRetransform;\n@@ -121,2 +124,1 @@\n-        verbosePrint(\"Added transformer \" + transformer\n-            + \" with canRetransform=\" + canRetransform);\n+        verbosePrint(msg);\n","filename":"test\/jdk\/java\/lang\/instrument\/ATransformerManagementTestCase.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,13 @@\n+\/*\n+ * @test\n+ * @bug 7064927\n+ * @summary Verify LocalVariableTable (LVT) exists when passed to transform() on a retransform operation.\n+ * @author Daniel D. Daugherty\n+ *\n+ * @library \/test\/lib\n+ * @run build VerifyLocalVariableTableOnRetransformTest\n+ * @run compile -g DummyClassWithLVT.java\n+ * @run shell MakeJAR.sh retransformAgent\n+ * @run main\/othervm -javaagent:retransformAgent.jar VerifyLocalVariableTableOnRetransformTest VerifyLocalVariableTableOnRetransformTest\n+ *\/\n+\n@@ -29,0 +42,6 @@\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -37,0 +56,1 @@\n+    private String  classFileName = fTargetClassName + \".class\";\n@@ -47,2 +67,1 @@\n-        String resourceName = fTargetClassName + \".class\";\n-        File f = new File(System.getProperty(\"test.classes\", \".\"), resourceName);\n+        File f = originalClassFile();\n@@ -58,1 +77,1 @@\n-            fail(\"Could not load the class: \"+resourceName);\n+            fail(\"Could not load the class: \" + f.getName());\n@@ -108,2 +127,1 @@\n-        assertTrue(fTargetClassName + \" did not match .class file\",\n-            fTargetClassMatches);\n+        compareClassFileBytes(true);\n@@ -123,2 +141,82 @@\n-        assertTrue(fTargetClassName + \" did not match .class file\",\n-            fTargetClassMatches);\n+        compareClassFileBytes(false);\n+    }\n+\n+    private File originalClassFile() {\n+        return new File(System.getProperty(\"test.classes\", \".\"), classFileName);\n+    }\n+\n+    private File transformedClassFile() {\n+        \/\/ This file will get created in the test execution\n+        \/\/ directory so there is no conflict with the file\n+        \/\/ in the test classes directory.\n+        return new File(classFileName);\n+    }\n+\n+    private static final String[] expectedDifferentStrings = {\n+            \"^Classfile .+$\",\n+            \"^[\\\\s]+SHA-256 checksum .[^\\\\s]+$\"\n+    };\n+\n+    private boolean expectedDifferent(String line) {\n+        for (String s: expectedDifferentStrings) {\n+            Pattern p = Pattern.compile(s);\n+            if (p.matcher(line).find()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void compareClassFileBytes(boolean initialLoad) throws Throwable {\n+        if (fTargetClassMatches) {\n+            return;\n+        }\n+        File f1 = originalClassFile();\n+        File f2 = transformedClassFile();\n+        System.out.println(fTargetClassName + \" did not match .class file\");\n+        System.out.println(\"Disassembly difference (\" + f1 + \" vs \" + f2 +\"):\");\n+        \/\/ compare 'javap -v' output for the class files\n+        List<String> out1 = disassembleClassFile(f1);\n+        List<String> out2 = disassembleClassFile(f2);\n+        boolean different = false;\n+        boolean orderChanged = false;\n+        int lineNum = 0;\n+        for (String line: out1) {\n+            if (!expectedDifferent(line)) {\n+                if (!out2.contains(line)) {\n+                    different = true;\n+                    System.out.println(\"< (\" + (lineNum + 1) + \") \" + line);\n+                } else {\n+                    if (lineNum < out2.size() && out1.get(lineNum) != out2.get(lineNum)) {\n+                        \/\/ out2 contains line, but at different position\n+                        orderChanged = true;\n+                    }\n+                }\n+            }\n+            lineNum++;\n+        }\n+        lineNum = 0;\n+        for (String line: out2) {\n+            if (!expectedDifferent(line)) {\n+                if (!out1.contains(line)) {\n+                    different = true;\n+                    System.out.println(\"> (\" + (lineNum + 1) + \") \" + line);\n+                }\n+            }\n+            lineNum++;\n+        }\n+        \/\/ accordingly the spec orderChanged is fine, but we consider it as error\n+        \/\/ (see comments in verifyClassFileBuffer())\n+        if (different || orderChanged) {\n+            fail(fTargetClassName + \" (\" + (initialLoad ? \"load\" : \"retransform\") + \") did not match .class file\"\n+                    + (different ? \"\" : \" (only order changed)\"));\n+        }\n+    }\n+\n+    private List<String> disassembleClassFile(File file) throws Throwable {\n+        JDKToolLauncher javap = JDKToolLauncher.create(\"javap\")\n+                                               .addToolArg(\"-v\")\n+                                               .addToolArg(file.toString());\n+        ProcessBuilder pb = new ProcessBuilder(javap.getCommand());\n+        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n+        return out.asLines();\n@@ -137,6 +235,1 @@\n-                FileOutputStream fos = null;\n-                \/\/ This file will get created in the test execution\n-                \/\/ directory so there is no conflict with the file\n-                \/\/ in the test classes directory.\n-                String resourceName = fTargetClassName + \".class\";\n-                fos = new FileOutputStream(resourceName);\n+                FileOutputStream fos = new FileOutputStream(transformedClassFile());\n","filename":"test\/jdk\/java\/lang\/instrument\/VerifyLocalVariableTableOnRetransformTest.java","additions":107,"deletions":14,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-#\n-# Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-# @test\n-# @bug 7064927\n-# @summary Verify LocalVariableTable (LVT) exists when passed to\n-# transform() on a retransform operation.\n-# @author Daniel D. Daugherty\n-#\n-# @run build VerifyLocalVariableTableOnRetransformTest\n-# @run compile -g DummyClassWithLVT.java\n-# @run shell MakeJAR.sh retransformAgent\n-# @run shell VerifyLocalVariableTableOnRetransformTest.sh\n-\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-JAVA=\"${TESTJAVA}\"\/bin\/java\n-\n-\"${JAVA}\" ${TESTVMOPTS} -Dtest.classes=\"${TESTCLASSES}\" \\\n-    -javaagent:retransformAgent.jar \\\n-    -classpath \"${TESTCLASSES}\" \\\n-    VerifyLocalVariableTableOnRetransformTest \\\n-    VerifyLocalVariableTableOnRetransformTest \\\n-    > output.log 2>&1\n-cat output.log\n-\n-MESG=\"did not match .class file\"\n-grep \"$MESG\" output.log\n-result=$?\n-if [ \"$result\" = 0 ]; then\n-    echo \"FAIL: found '$MESG' in the test output\"\n-\n-    echo \"INFO: 'javap -v' comparison between the .class files:\"\n-    ${JAVA}p -v -classpath \"${TESTCLASSES}\" DummyClassWithLVT > orig.javap\n-    ${JAVA}p -v DummyClassWithLVT > mismatched.javap\n-    diff orig.javap mismatched.javap\n-\n-    result=1\n-else\n-    echo \"PASS: did NOT find '$MESG' in the test output\"\n-    result=0\n-fi\n-\n-exit $result\n","filename":"test\/jdk\/java\/lang\/instrument\/VerifyLocalVariableTableOnRetransformTest.sh","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"}]}