{"files":[{"patch":"@@ -1943,1 +1943,2 @@\n-    else if( instr->_matrule && instr->_matrule->_rChild && !strcmp(instr->_matrule->_rChild->_opType,\"CMoveP\") ) {\n+    else if (instr->_matrule && instr->_matrule->_rChild &&\n+              (!strcmp(instr->_matrule->_rChild->_opType,\"CMoveP\") || !strcmp(instr->_matrule->_rChild->_opType,\"CMoveN\")) ) {\n@@ -1947,17 +1948,8 @@\n-      if( rl && !strcmp(rl->_opType, \"Binary\") ) {\n-          MatchNode *rlr = rl->_rChild;\n-          if (rlr && strncmp(rlr->_opType, \"Cmp\", 3) == 0)\n-            offset = 2;\n-      }\n-      \/\/ Special hack for ideal CMoveP; ideal type depends on inputs\n-      fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveP\\n\",\n-        offset, offset+1, offset+1);\n-    }\n-    else if( instr->_matrule && instr->_matrule->_rChild && !strcmp(instr->_matrule->_rChild->_opType,\"CMoveN\") ) {\n-      int offset = 1;\n-      \/\/ Special special hack to see if the Cmp? has been incorporated in the conditional move\n-      MatchNode *rl = instr->_matrule->_rChild->_lChild;\n-      if( rl && !strcmp(rl->_opType, \"Binary\") ) {\n-          MatchNode *rlr = rl->_rChild;\n-          if (rlr && strncmp(rlr->_opType, \"Cmp\", 3) == 0)\n-            offset = 2;\n+      if (rl && !strcmp(rl->_opType, \"Binary\") && rl->_rChild && strncmp(rl->_rChild->_opType, \"Cmp\", 3) == 0) {\n+        offset = 2;\n+        fprintf(fp,\"  const Type            *bottom_type() const { if (req() == 3) return in(2)->bottom_type();\\n\\tconst Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ %s\\n\",\n+        offset, offset+1, offset+1, instr->_matrule->_rChild->_opType);\n+      } else {\n+        \/\/ Special hack for ideal CMove; ideal type depends on inputs\n+        fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ %s\\n\",\n+        offset, offset+1, offset+1, instr->_matrule->_rChild->_opType);\n@@ -1965,3 +1957,0 @@\n-      \/\/ Special hack for ideal CMoveN; ideal type depends on inputs\n-      fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveN\\n\",\n-        offset, offset+1, offset+1);\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"}]}