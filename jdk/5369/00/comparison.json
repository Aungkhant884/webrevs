{"files":[{"patch":"@@ -1947,7 +1947,7 @@\n-      if( rl && !strcmp(rl->_opType, \"Binary\") ) {\n-          MatchNode *rlr = rl->_rChild;\n-          if (rlr && strncmp(rlr->_opType, \"Cmp\", 3) == 0)\n-            offset = 2;\n-      }\n-      \/\/ Special hack for ideal CMoveP; ideal type depends on inputs\n-      fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveP\\n\",\n+      if( rl && !strcmp(rl->_opType, \"Binary\") && rl->_rChild && strncmp(rl->_rChild->_opType, \"Cmp\", 3) == 0) {\n+        offset = 2;\n+        fprintf(fp,\"  const Type            *bottom_type() const { if (req() == 3) return in(2)->bottom_type();\\n\\tconst Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveP\\n\",\n+        offset, offset+1, offset+1);\n+      } else {\n+        \/\/ Special hack for ideal CMoveP; ideal type depends on inputs\n+        fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveP\\n\",\n@@ -1955,0 +1955,1 @@\n+      }\n@@ -1960,7 +1961,7 @@\n-      if( rl && !strcmp(rl->_opType, \"Binary\") ) {\n-          MatchNode *rlr = rl->_rChild;\n-          if (rlr && strncmp(rlr->_opType, \"Cmp\", 3) == 0)\n-            offset = 2;\n-      }\n-      \/\/ Special hack for ideal CMoveN; ideal type depends on inputs\n-      fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveN\\n\",\n+      if( rl && !strcmp(rl->_opType, \"Binary\") && rl->_rChild && strncmp(rl->_rChild->_opType, \"Cmp\", 3) == 0) {\n+        offset = 2;\n+        fprintf(fp,\"  const Type            *bottom_type() const { if (req() == 3) return in(2)->bottom_type();\\n\\tconst Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveN\\n\",\n+        offset, offset+1, offset+1);\n+      } else {\n+        \/\/ Special hack for ideal CMoveN; ideal type depends on inputs\n+        fprintf(fp,\"  const Type            *bottom_type() const { const Type *t = in(oper_input_base()+%d)->bottom_type(); return (req() <= oper_input_base()+%d) ? t : t->meet(in(oper_input_base()+%d)->bottom_type()); } \/\/ CMoveN\\n\",\n@@ -1968,0 +1969,1 @@\n+      }\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}