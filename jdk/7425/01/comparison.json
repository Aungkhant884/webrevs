{"files":[{"patch":"@@ -337,1 +337,1 @@\n-                                            height, jwidth, dx, dy, 1);\n+                                            height, jwidth, dx, dy);\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_Robot.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2474,1 +2474,1 @@\n-     jint y, jint width, jint height, jint jwidth, int dx, int dy, jint scale) {\n+     jint y, jint width, jint height, jint jwidth, int dx, int dy) {\n@@ -2482,13 +2482,0 @@\n-    if (pixbuf && scale != 1) {\n-        GdkPixbuf *scaledPixbuf;\n-        x \/= scale;\n-        y \/= scale;\n-        width \/= scale;\n-        height \/= scale;\n-        dx \/= scale;\n-        dy \/= scale;\n-        scaledPixbuf = (*fp_gdk_pixbuf_scale_simple)(pixbuf, width, height,\n-                                                     GDK_INTERP_BILINEAR);\n-        (*fp_g_object_unref)(pixbuf);\n-        pixbuf = scaledPixbuf;\n-    }\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk2_interface.c","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include <math.h>\n@@ -41,0 +42,1 @@\n+#include \"debug_assert.h\"\n@@ -2864,0 +2866,8 @@\n+inline static int scale_down_to_plus_inf(int what, int scale) {\n+    return (int)ceilf(what \/ (float)scale);\n+}\n+\n+inline static int scale_down_to_minus_inf(int what, int scale) {\n+    return (int)floorf(what \/ (float)scale);\n+}\n+\n@@ -2865,2 +2875,1 @@\n-     int x, jint y, jint width, jint height, jint jwidth, int dx, int dy,\n-                                                                   jint scale) {\n+     int x, jint y, jint width, jint height, jint jwidth, int dx, int dy) {\n@@ -2870,0 +2879,2 @@\n+    int skip_left = 0;\n+    int skip_top = 0;\n@@ -2873,0 +2884,18 @@\n+\n+        \/\/ Scale the coordinate and size carefully such that the captured area\n+        \/\/ is at least as large as requested. We trim off excess later by\n+        \/\/ using the skip_* variables.\n+        const int x_scaled = scale_down_to_minus_inf(x, win_scale);\n+        const int y_scaled = scale_down_to_minus_inf(y, win_scale);\n+        skip_left = x - x_scaled*win_scale;\n+        skip_top  = y - y_scaled*win_scale;\n+        DASSERT(skip_left >= 0 && skip_top >= 0);\n+\n+        const int x_right_scaled = scale_down_to_plus_inf(x + width, win_scale);\n+        const int width_scaled = x_right_scaled - x_scaled;\n+        DASSERT(width_scaled > 0);\n+\n+        const int y_bottom_scaled = scale_down_to_plus_inf(y + height, win_scale);\n+        const int height_scaled = y_bottom_scaled - y_scaled;\n+        DASSERT(height_scaled > 0);\n+\n@@ -2874,1 +2903,1 @@\n-            root, x, y, (int) (width \/ (float) win_scale + 0.5), (int) (height \/ (float) win_scale + 0.5));\n+            root, x_scaled, y_scaled, width_scaled, height_scaled);\n@@ -2879,14 +2908,0 @@\n-    if (pixbuf && scale != 1) {\n-        GdkPixbuf *scaledPixbuf;\n-        x \/= scale;\n-        y \/= scale;\n-        width \/= scale;\n-        height \/= scale;\n-        dx \/= scale;\n-        dy \/= scale;\n-        scaledPixbuf = (*fp_gdk_pixbuf_scale_simple)(pixbuf, width, height,\n-                                                     GDK_INTERP_BILINEAR);\n-        (*fp_g_object_unref)(pixbuf);\n-        pixbuf = scaledPixbuf;\n-    }\n-\n@@ -2909,1 +2924,2 @@\n-                        p = pix + (intptr_t) _y * stride + _x * nchan;\n+                        p = pix + (intptr_t) (_y + skip_top) * stride\n+                                + (_x + skip_left) * nchan;\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":35,"deletions":19,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-                                       jint jwidth, int dx, int dy, jint scale);\n+                                       jint jwidth, int dx, int dy);\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk_interface.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.awt.Point;\n@@ -34,0 +35,3 @@\n+import javax.imageio.ImageIO;\n+import java.io.File;\n+import java.io.IOException;\n@@ -38,2 +42,2 @@\n- * @bug 8073320\n- * @summary  Windows HiDPI support\n+ * @bug 8073320 8280861\n+ * @summary  Linux and Windows HiDPI support\n@@ -44,0 +48,2 @@\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 HiDPIRobotScreenCaptureTest\n+ * @run main\/othervm -Dsun.java2d.uiScale=2 HiDPIRobotScreenCaptureTest\n@@ -63,1 +69,8 @@\n-        frame.setBounds(40, 30, 400, 300);\n+        \/\/ Position the frame on prime number coordinates to avoid\n+        \/\/ them being multiple of the desktop scale; this tests Linux\n+        \/\/ color picker better.\n+        \/\/ Also, the position should be far enough from the top left\n+        \/\/ corner of the screen to reduce the chance of being repositioned\n+        \/\/ by the system because that area's occupied by the global\n+        \/\/ menu bar and such.\n+        frame.setBounds(83, 97, 400, 300);\n@@ -89,1 +102,1 @@\n-        Thread.sleep(200);\n+        robot.delay(500);\n@@ -94,0 +107,1 @@\n+        System.out.println(\"Creating screen capture of \" + rect);\n@@ -104,7 +118,5 @@\n-        if (image.getRGB(w \/ 4, h \/ 4) != COLORS[0].getRGB()) {\n-            throw new RuntimeException(\"Wrong image color!\");\n-        }\n-\n-        if (image.getRGB(3 * w \/ 4, h \/ 4) != COLORS[1].getRGB()) {\n-            throw new RuntimeException(\"Wrong image color!\");\n-        }\n+        checkRectColor(image, new Rectangle(0, 0, w \/ 2, h \/ 2), COLORS[0]);\n+        checkRectColor(image, new Rectangle(w \/ 2, 0, w \/ 2, h \/ 2), COLORS[1]);\n+        checkRectColor(image, new Rectangle(0, h \/ 2, w \/ 2, h \/ 2), COLORS[2]);\n+        checkRectColor(image, new Rectangle(w \/ 2, h \/ 2, w \/ 2, h \/ 2), COLORS[3]);\n+    }\n@@ -112,3 +124,10 @@\n-        if (image.getRGB(w \/ 4, 3 * h \/ 4) != COLORS[2].getRGB()) {\n-            throw new RuntimeException(\"Wrong image color!\");\n-        }\n+    private static final int OFFSET = 5;\n+    static void checkRectColor(BufferedImage image, Rectangle rect, Color expectedColor) {\n+        System.out.println(\"Checking rectangle \" + rect + \" to have color \" + expectedColor);\n+        final Point[] pointsToCheck = new Point[] {\n+                new Point(rect.x + OFFSET, rect.y + OFFSET),                           \/\/ top left corner\n+                new Point(rect.x + rect.width - OFFSET, rect.y + OFFSET),              \/\/ top right corner\n+                new Point(rect.x + rect.width \/ 2, rect.y + rect.height \/ 2),          \/\/ center\n+                new Point(rect.x + OFFSET, rect.y + rect.height - OFFSET),             \/\/ bottom left corner\n+                new Point(rect.x + rect.width - OFFSET, rect.y + rect.height - OFFSET) \/\/ bottom right corner\n+        };\n@@ -116,2 +135,15 @@\n-        if (image.getRGB(3 * w \/ 4, 3 * h \/ 4) != COLORS[3].getRGB()) {\n-            throw new RuntimeException(\"Wrong image color!\");\n+        for (final var point : pointsToCheck) {\n+            System.out.print(\"Checking color at \" + point + \" to be equal to \" + expectedColor);\n+            final int actualColor = image.getRGB(point.x, point.y);\n+            if (actualColor != expectedColor.getRGB()) {\n+                System.out.println(\"... Mismatch: found \" + new Color(actualColor) + \" instead. Check image.png.\");\n+                try {\n+                    ImageIO.write(image, \"png\", new File(\"image.png\"));\n+                } catch(IOException e) {\n+                    System.out.println(\"failed to save image.png.\");\n+                    e.printStackTrace();\n+                }\n+                throw new RuntimeException(\"Wrong image color!\");\n+            } else {\n+                System.out.println(\"... OK\");\n+            }\n@@ -120,1 +152,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8280861\n+ * @summary  Verifies Robot screen capture capabilities with different\n+ *           Gtk backends and presence of UI scaling\n+ * @requires os.family == \"linux\"\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=1 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=1 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n+ *\/\n+\n+public class ScreenCaptureGtkTest {\n+    private static final Color[] COLORS = {\n+            Color.GREEN, Color.BLUE, Color.ORANGE, Color.RED};\n+\n+    public static void main(String[] args) throws Exception {\n+        Frame frame = new Frame();\n+        \/\/ Position the frame on prime number coordinates to avoid\n+        \/\/ them being multiple of the desktop scale; this tests Linux\n+        \/\/ color picker better.\n+        \/\/ Also, the position should be far enough from the top left\n+        \/\/ corner of the screen to reduce the chance of being repositioned\n+        \/\/ by the system because that area's occupied by the global\n+        \/\/ menu bar and such.\n+        frame.setBounds(83, 97, 400, 300);\n+        frame.setUndecorated(true);\n+\n+        Panel panel = new Panel(new BorderLayout());\n+        Canvas canvas = new Canvas() {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                int w = getWidth();\n+                int h = getHeight();\n+                g.setColor(COLORS[0]);\n+                g.fillRect(0, 0, w, h);\n+                \/\/ Paint several distinct pixels next to one another\n+                \/\/ in order to test color picker's precision.\n+                for (int i = 1; i < 4; i++) {\n+                    g.setColor(COLORS[i]);\n+                    g.fillRect(i, 0, 1, 1);\n+                }\n+            }\n+        };\n+\n+        panel.add(canvas);\n+        frame.add(panel);\n+        frame.setVisible(true);\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        final Point screenLocation = frame.getLocationOnScreen();\n+        checkPixelColors(robot, screenLocation.x, screenLocation.y);\n+\n+        robot.delay(100);\n+        frame.dispose();\n+    }\n+\n+    static void checkPixelColors(Robot robot, int x, int y) {\n+        for (int i = 0; i < 4; i++) {\n+            final Color actualColor = robot.getPixelColor(x + i, y);\n+            System.out.print(\"Checking color at \" + (x + i) + \", \" + y + \" to be equal to \" + COLORS[i]);\n+            if (!actualColor.equals(COLORS[i])) {\n+                System.out.println(\"... Mismatch: found \" + actualColor + \" instead\");\n+                throw new RuntimeException(\"Wrong screen pixel color\");\n+\n+            } else {\n+                System.out.println(\"... OK\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JPasswordField\/TestSelectedTextBackgroundColor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/TestJProgressBarHighlightColor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JSlider\/TestJSliderRendering.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JSpinner\/TestSelectedTextBackgroundColor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JTextPane\/TestJTextPaneBackgroundColor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-                    frame.setSize(200, 200);\n+                    frame.setSize(400, 400);\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/TestTooltipBackgroundColor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}