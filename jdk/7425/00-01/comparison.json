{"files":[{"patch":"@@ -337,1 +337,1 @@\n-                                            height, jwidth, dx, dy, 1);\n+                                            height, jwidth, dx, dy);\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_Robot.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2474,1 +2474,1 @@\n-     jint y, jint width, jint height, jint jwidth, int dx, int dy, jint scale) {\n+     jint y, jint width, jint height, jint jwidth, int dx, int dy) {\n@@ -2482,13 +2482,0 @@\n-    if (pixbuf && scale != 1) {\n-        GdkPixbuf *scaledPixbuf;\n-        x \/= scale;\n-        y \/= scale;\n-        width \/= scale;\n-        height \/= scale;\n-        dx \/= scale;\n-        dy \/= scale;\n-        scaledPixbuf = (*fp_gdk_pixbuf_scale_simple)(pixbuf, width, height,\n-                                                     GDK_INTERP_BILINEAR);\n-        (*fp_g_object_unref)(pixbuf);\n-        pixbuf = scaledPixbuf;\n-    }\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk2_interface.c","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2875,2 +2875,1 @@\n-     int x, jint y, jint width, jint height, jint jwidth, int dx, int dy,\n-                                                                   jint scale) {\n+     int x, jint y, jint width, jint height, jint jwidth, int dx, int dy) {\n@@ -2909,14 +2908,0 @@\n-    if (pixbuf && scale != 1) {\n-        GdkPixbuf *scaledPixbuf;\n-        x \/= scale;\n-        y \/= scale;\n-        width \/= scale;\n-        height \/= scale;\n-        dx \/= scale;\n-        dy \/= scale;\n-        scaledPixbuf = (*fp_gdk_pixbuf_scale_simple)(pixbuf, width, height,\n-                                                     GDK_INTERP_BILINEAR);\n-        (*fp_g_object_unref)(pixbuf);\n-        pixbuf = scaledPixbuf;\n-    }\n-\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-                                       jint jwidth, int dx, int dy, jint scale);\n+                                       jint jwidth, int dx, int dy);\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk_interface.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,7 +94,0 @@\n-\n-                \/\/ Several distinct pixels next to one another\n-                \/\/ in order to test color picker's precision.\n-                for (int i = 1; i < 4; i++) {\n-                    g.setColor(COLORS[i]);\n-                    g.fillRect(i, 0, 1, 1);\n-                }\n@@ -111,3 +104,0 @@\n-        final Point screenLocation = frame.getLocationOnScreen();\n-        checkPixelColors(robot, screenLocation.x, screenLocation.y);\n-\n@@ -128,1 +118,0 @@\n-\n@@ -135,14 +124,0 @@\n-    static void checkPixelColors(Robot robot, int x, int y) {\n-        for (int i = 0; i < 4; i++) {\n-            final Color actualColor = robot.getPixelColor(x + i, y);\n-            System.out.print(\"Checking color at \" + (x + i) + \", \" + y + \" to be equal to \" + COLORS[i]);\n-            if (!actualColor.equals(COLORS[i])) {\n-                System.out.println(\"... Mismatch: found \" + actualColor + \" instead\");\n-                throw new RuntimeException(\"Wrong screen pixel color\");\n-\n-            } else {\n-                System.out.println(\"... OK\");\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8280861\n+ * @summary  Verifies Robot screen capture capabilities with different\n+ *           Gtk backends and presence of UI scaling\n+ * @requires os.family == \"linux\"\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=1 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=1 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n+ * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n+ *\/\n+\n+public class ScreenCaptureGtkTest {\n+    private static final Color[] COLORS = {\n+            Color.GREEN, Color.BLUE, Color.ORANGE, Color.RED};\n+\n+    public static void main(String[] args) throws Exception {\n+        Frame frame = new Frame();\n+        \/\/ Position the frame on prime number coordinates to avoid\n+        \/\/ them being multiple of the desktop scale; this tests Linux\n+        \/\/ color picker better.\n+        \/\/ Also, the position should be far enough from the top left\n+        \/\/ corner of the screen to reduce the chance of being repositioned\n+        \/\/ by the system because that area's occupied by the global\n+        \/\/ menu bar and such.\n+        frame.setBounds(83, 97, 400, 300);\n+        frame.setUndecorated(true);\n+\n+        Panel panel = new Panel(new BorderLayout());\n+        Canvas canvas = new Canvas() {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                int w = getWidth();\n+                int h = getHeight();\n+                g.setColor(COLORS[0]);\n+                g.fillRect(0, 0, w, h);\n+                \/\/ Paint several distinct pixels next to one another\n+                \/\/ in order to test color picker's precision.\n+                for (int i = 1; i < 4; i++) {\n+                    g.setColor(COLORS[i]);\n+                    g.fillRect(i, 0, 1, 1);\n+                }\n+            }\n+        };\n+\n+        panel.add(canvas);\n+        frame.add(panel);\n+        frame.setVisible(true);\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        final Point screenLocation = frame.getLocationOnScreen();\n+        checkPixelColors(robot, screenLocation.x, screenLocation.y);\n+\n+        robot.delay(100);\n+        frame.dispose();\n+    }\n+\n+    static void checkPixelColors(Robot robot, int x, int y) {\n+        for (int i = 0; i < 4; i++) {\n+            final Color actualColor = robot.getPixelColor(x + i, y);\n+            System.out.print(\"Checking color at \" + (x + i) + \", \" + y + \" to be equal to \" + COLORS[i]);\n+            if (!actualColor.equals(COLORS[i])) {\n+                System.out.println(\"... Mismatch: found \" + actualColor + \" instead\");\n+                throw new RuntimeException(\"Wrong screen pixel color\");\n+\n+            } else {\n+                System.out.println(\"... OK\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}