{"files":[{"patch":"@@ -73,1 +73,0 @@\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                                comp.getDiagramModel().selectGraph(theGraph);\n+                                comp.getModel().selectGraph(theGraph);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/BlockQuickSearch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,4 +186,0 @@\n-    public boolean getHideDuplicates() {\n-        return hideDuplicates;\n-    }\n-\n@@ -191,2 +187,0 @@\n-        System.err.println(\"setHideDuplicates: \" + b);\n-        hideDuplicates = b;\n@@ -194,1 +188,1 @@\n-        if (hideDuplicates) {\n+        if (b) {\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    DiagramViewModel getModel();\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        return editor.getDiagramModel().getGraphToView();\n+        return editor.getModel().getGraphToView();\n@@ -60,1 +60,1 @@\n-        return editor.getDiagramModel().getGraphsBackward();\n+        return editor.getModel().getGraphsBackward();\n@@ -65,1 +65,1 @@\n-        return editor.getDiagramModel().getGraphsForward();\n+        return editor.getModel().getGraphsForward();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorInputGraphProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,6 +26,0 @@\n-import com.lowagie.text.Document;\n-import com.lowagie.text.Rectangle;\n-import com.lowagie.text.pdf.PdfContentByte;\n-import com.lowagie.text.pdf.PdfGraphics2D;\n-import com.lowagie.text.pdf.PdfTemplate;\n-import com.lowagie.text.pdf.PdfWriter;\n@@ -47,2 +41,0 @@\n-import java.awt.event.HierarchyBoundsListener;\n-import java.awt.event.HierarchyEvent;\n@@ -52,2 +44,0 @@\n-import java.io.*;\n-import java.nio.charset.StandardCharsets;\n@@ -58,5 +48,0 @@\n-import org.apache.batik.dom.GenericDOMImplementation;\n-import org.apache.batik.svggen.SVGGeneratorContext;\n-import org.apache.batik.svggen.SVGGraphics2D;\n-import org.openide.DialogDisplayer;\n-import org.openide.NotifyDescriptor;\n@@ -76,1 +61,0 @@\n-import org.w3c.dom.DOMImplementation;\n@@ -83,1 +67,1 @@\n-public final class EditorTopComponent extends TopComponent implements PropertyChangeListener {\n+public final class EditorTopComponent extends TopComponent {\n@@ -86,1 +70,0 @@\n-    private InstanceContent content;\n@@ -88,3 +71,0 @@\n-    private EnableSeaLayoutAction seaLayoutAction;\n-    private EnableBlockLayoutAction blockLayoutAction;\n-    private EnableCFGLayoutAction cfgLayoutAction;\n@@ -92,5 +72,0 @@\n-    private HideDuplicatesAction hideDuplicatesAction;\n-    private PredSuccAction predSuccAction;\n-    private ShowEmptyBlocksAction showEmptyBlocksAction;\n-    private SelectionModeAction selectionModeAction;\n-    private boolean notFirstTime;\n@@ -100,3 +75,0 @@\n-    private RangeSlider rangeSlider;\n-    private JToggleButton overviewButton;\n-    private JToggleButton hideDuplicatesButton;\n@@ -109,17 +81,0 @@\n-    private DiagramViewModel rangeSliderModel;\n-    private ExportCookie exportCookie = new ExportCookie() {\n-\n-        @Override\n-        public void export(File f) {\n-\n-            String lcFileName = f.getName().toLowerCase();\n-            if (lcFileName.endsWith(\".pdf\")) {\n-                exportToPDF(scene, f);\n-            } else if (lcFileName.endsWith(\".svg\")) {\n-                exportToSVG(scene, f);\n-            } else {\n-                NotifyDescriptor message = new NotifyDescriptor.Message(\"Unknown image file extension: expected either '.pdf' or '.svg'\", NotifyDescriptor.ERROR_MESSAGE);\n-                DialogDisplayer.getDefault().notifyLater(message);\n-            }\n-        }\n-    };\n@@ -149,0 +104,1 @@\n+        initComponents();\n@@ -171,1 +127,1 @@\n-                ShrinkDiffAction.get(ShrinkDiffAction.class),\n+                ReduceDiffAction.get(ReduceDiffAction.class),\n@@ -175,1 +131,1 @@\n-                ShowAllAction.get(HideAction.class),\n+                HideAction.get(HideAction.class),\n@@ -185,1 +141,1 @@\n-                ShowAllAction.get(HideAction.class),\n+                HideAction.get(HideAction.class),\n@@ -191,1 +147,0 @@\n-        initComponents();\n@@ -199,1 +154,0 @@\n-        this.add(container, BorderLayout.NORTH);\n@@ -201,1 +155,0 @@\n-        container.add(BorderLayout.NORTH, toolBar);\n@@ -203,3 +156,6 @@\n-        rangeSliderModel = new DiagramViewModel(diagram.getGraph().getGroup(), filterChain, sequence);\n-        rangeSlider = new RangeSlider();\n-        rangeSlider.setModel(rangeSliderModel);\n+        DiagramViewModel diagramViewModel = new DiagramViewModel(diagram.getGraph().getGroup(), filterChain, sequence);\n+        RangeSlider rangeSlider = new RangeSlider();\n+        rangeSlider.setModel(diagramViewModel);\n+        if (diagram.getGraph().getGroup().getGraphsCount() == 1) {\n+            rangeSlider.setVisible(false);\n+        }\n@@ -208,0 +164,1 @@\n+        this.add(container, BorderLayout.NORTH);\n@@ -209,2 +166,1 @@\n-        scene = new DiagramScene(actions, actionsWithSelection, rangeSliderModel);\n-        content = new InstanceContent();\n+        scene = new DiagramScene(actions, actionsWithSelection, diagramViewModel);\n@@ -212,3 +168,3 @@\n-        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)}));\n-        content.add(exportCookie);\n-        content.add(rangeSliderModel);\n+        InstanceContent content = new InstanceContent();\n+        content.add(new ExportGraph());\n+        content.add(diagramViewModel);\n@@ -216,0 +172,1 @@\n+        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)}));\n@@ -217,9 +174,2 @@\n-        rangeSliderModel.getDiagramChangedEvent().addListener(diagramChangedListener);\n-        rangeSliderModel.selectGraph(diagram.getGraph());\n-        rangeSliderModel.getViewPropertiesChangedEvent().addListener(new ChangedListener<DiagramViewModel>() {\n-                @Override\n-                public void changed(DiagramViewModel source) {\n-                    hideDuplicatesButton.setSelected(getModel().getHideDuplicates());\n-                    hideDuplicatesAction.setState(getModel().getHideDuplicates());\n-                }\n-            });\n+        diagramViewModel.getDiagramChangedEvent().addListener(diagramChangedListener);\n+        diagramViewModel.selectGraph(diagram.getGraph());\n@@ -234,0 +184,14 @@\n+        cardLayout = new CardLayout();\n+        centerPanel = new JPanel();\n+        centerPanel.setLayout(cardLayout);\n+        centerPanel.setBackground(Color.WHITE);\n+        satelliteComponent = scene.createSatelliteView();\n+        satelliteComponent.setSize(200, 200);\n+        centerPanel.add(SCENE_STRING, scene.getComponent());\n+        centerPanel.add(SATELLITE_STRING, satelliteComponent);\n+        this.add(centerPanel, BorderLayout.CENTER);\n+\n+        ToolbarPool.getDefault().setPreferredIconSize(16);\n+        toolBar = new Toolbar();\n+        toolBar.setBorder((Border) UIManager.get(\"Nb.Editor.Toolbar.border\")); \/\/NOI18N\n+\n@@ -237,1 +201,1 @@\n-        toolBar.add(ShrinkDiffAction.get(ShrinkDiffAction.class));\n+        toolBar.add(ReduceDiffAction.get(ReduceDiffAction.class));\n@@ -241,1 +205,1 @@\n-        toolBar.add(ShowAllAction.get(HideAction.class));\n+        toolBar.add(HideAction.get(HideAction.class));\n@@ -244,2 +208,2 @@\n-        toolBar.add(ShowAllAction.get(ZoomOutAction.class));\n-        toolBar.add(ShowAllAction.get(ZoomInAction.class));\n+        toolBar.add(ZoomOutAction.get(ZoomOutAction.class));\n+        toolBar.add(ZoomInAction.get(ZoomInAction.class));\n@@ -250,20 +214,15 @@\n-        seaLayoutAction = new EnableSeaLayoutAction();\n-        JToggleButton button = new JToggleButton(seaLayoutAction);\n-        button.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.SEA_OF_NODES);\n-        layoutButtons.add(button);\n-        toolBar.add(button);\n-        seaLayoutAction.addPropertyChangeListener(this);\n-\n-        blockLayoutAction = new EnableBlockLayoutAction();\n-        button = new JToggleButton(blockLayoutAction);\n-        button.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.CLUSTERED_SEA_OF_NODES);\n-        layoutButtons.add(button);\n-        toolBar.add(button);\n-        blockLayoutAction.addPropertyChangeListener(this);\n-\n-        cfgLayoutAction = new EnableCFGLayoutAction();\n-        button = new JToggleButton(cfgLayoutAction);\n-        button.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.CONTROL_FLOW_GRAPH);\n-        layoutButtons.add(button);\n-        toolBar.add(button);\n-        cfgLayoutAction.addPropertyChangeListener(this);\n+        JToggleButton seaLayoutButton = new JToggleButton(new EnableSeaLayoutAction(this));\n+        seaLayoutButton.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.SEA_OF_NODES);\n+        layoutButtons.add(seaLayoutButton);\n+        toolBar.add(seaLayoutButton);\n+\n+        JToggleButton blockLayoutButton = new JToggleButton(new EnableBlockLayoutAction(this));\n+        blockLayoutButton.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.CLUSTERED_SEA_OF_NODES);\n+        layoutButtons.add(blockLayoutButton);\n+        toolBar.add(blockLayoutButton);\n+\n+        EnableCFGLayoutAction cfgLayoutAction = new EnableCFGLayoutAction(this);\n+        JToggleButton cfgLayoutButton = new JToggleButton(cfgLayoutAction);\n+        cfgLayoutButton.setSelected(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.CONTROL_FLOW_GRAPH);\n+        layoutButtons.add(cfgLayoutButton);\n+        toolBar.add(cfgLayoutButton);\n@@ -272,24 +231,4 @@\n-        overviewAction = new OverviewAction();\n-        overviewButton = new JToggleButton(overviewAction);\n-        overviewButton.setSelected(false);\n-        toolBar.add(overviewButton);\n-        overviewAction.addPropertyChangeListener(this);\n-\n-        predSuccAction = new PredSuccAction();\n-        button = new JToggleButton(predSuccAction);\n-        button.setSelected(true);\n-        toolBar.add(button);\n-        predSuccAction.addPropertyChangeListener(this);\n-\n-        showEmptyBlocksAction = new ShowEmptyBlocksAction();\n-        button = new JToggleButton(showEmptyBlocksAction);\n-        button.setSelected(true);\n-        button.setEnabled(Settings.get().getInt(Settings.DEFAULT_VIEW, Settings.DEFAULT_VIEW_DEFAULT) == Settings.DefaultView.CONTROL_FLOW_GRAPH);\n-        toolBar.add(button);\n-        showEmptyBlocksAction.addPropertyChangeListener(this);\n-\n-        hideDuplicatesAction = new HideDuplicatesAction();\n-        hideDuplicatesButton = new JToggleButton(hideDuplicatesAction);\n-        hideDuplicatesButton.setSelected(false);\n-        toolBar.add(hideDuplicatesButton);\n-        hideDuplicatesAction.addPropertyChangeListener(this);\n+        toolBar.add(new JToggleButton(new OverviewAction(centerPanel)));\n+        toolBar.add(new JToggleButton(new PredSuccAction()));\n+        toolBar.add(new JToggleButton(new ShowEmptyBlocksAction(cfgLayoutAction, true)));\n+        toolBar.add(new JToggleButton(new HideDuplicatesAction()));\n@@ -306,5 +245,1 @@\n-        selectionModeAction = new SelectionModeAction();\n-        button = new JToggleButton(selectionModeAction);\n-        button.setSelected(false);\n-        toolBar.add(button);\n-        selectionModeAction.addPropertyChangeListener(this);\n+        toolBar.add(new JToggleButton(new SelectionModeAction()));\n@@ -330,56 +265,0 @@\n-        centerPanel = new JPanel();\n-        centerPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(\n-                KeyStroke.getKeyStroke(KeyEvent.VK_S, 0, false), \"showSatellite\");\n-        centerPanel.getActionMap().put(\"showSatellite\",\n-                new AbstractAction(\"showSatellite\") {\n-                    @Override public void actionPerformed(ActionEvent e) {\n-                        EditorTopComponent.this.overviewButton.setSelected(true);\n-                        EditorTopComponent.this.overviewAction.setState(true);\n-                    }\n-                });\n-        centerPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(\n-                KeyStroke.getKeyStroke(KeyEvent.VK_S, 0, true), \"showScene\");\n-        centerPanel.getActionMap().put(\"showScene\",\n-                new AbstractAction(\"showScene\") {\n-                    @Override\n-                    public void actionPerformed(ActionEvent e) {\n-                        EditorTopComponent.this.overviewButton.setSelected(false);\n-                        EditorTopComponent.this.overviewAction.setState(false);\n-                    }\n-                });\n-\n-\n-        this.add(centerPanel, BorderLayout.CENTER);\n-        cardLayout = new CardLayout();\n-        centerPanel.setLayout(cardLayout);\n-        centerPanel.add(SCENE_STRING, scene.getComponent());\n-        centerPanel.setBackground(Color.WHITE);\n-        satelliteComponent = scene.createSatelliteView();\n-        satelliteComponent.setSize(200, 200);\n-        centerPanel.add(SATELLITE_STRING, satelliteComponent);\n-\n-        scene.getComponent().addHierarchyBoundsListener(new HierarchyBoundsListener() {\n-\n-            @Override\n-            public void ancestorMoved(HierarchyEvent e) {\n-            }\n-\n-            @Override\n-            public void ancestorResized(HierarchyEvent e) {\n-                if (!notFirstTime && scene.getComponent().getBounds().width > 0) {\n-                    notFirstTime = true;\n-                    SwingUtilities.invokeLater(new Runnable() {\n-\n-                        @Override\n-                        public void run() {\n-                            EditorTopComponent.this.scene.initialize();\n-                        }\n-                    });\n-                }\n-            }\n-        });\n-\n-        if (diagram.getGraph().getGroup().getGraphsCount() == 1) {\n-            rangeSlider.setVisible(false);\n-        }\n-\n@@ -389,2 +268,2 @@\n-    public DiagramViewModel getDiagramModel() {\n-        return rangeSliderModel;\n+    public DiagramViewModel getModel() {\n+        return  scene.getModel();\n@@ -393,3 +272,3 @@\n-    private void showSatellite() {\n-        cardLayout.show(centerPanel, SATELLITE_STRING);\n-        satelliteComponent.requestFocus();\n+    private Diagram getDiagram() {\n+        return getModel().getDiagramToView();\n+    }\n@@ -397,0 +276,6 @@\n+    public void selectionMode(boolean b) {\n+        if (b) {\n+            scene.setInteractionMode(DiagramViewer.InteractionMode.SELECTION);\n+        } else {\n+            scene.setInteractionMode(DiagramViewer.InteractionMode.PANNING);\n+        }\n@@ -399,3 +284,8 @@\n-    private void showScene() {\n-        cardLayout.show(centerPanel, SCENE_STRING);\n-        scene.getComponent().requestFocus();\n+    public void showSatellite(boolean b) {\n+        if (b) {\n+            cardLayout.show(centerPanel, SATELLITE_STRING);\n+            satelliteComponent.requestFocus();\n+        } else {\n+            cardLayout.show(centerPanel, SCENE_STRING);\n+            scene.getComponent().requestFocus();\n+        }\n@@ -412,14 +302,0 @@\n-    public void showPrevDiagram() {\n-        int fp = getModel().getFirstPosition();\n-        int sp = getModel().getSecondPosition();\n-        if (fp != 0) {\n-            fp--;\n-            sp--;\n-            getModel().setPositions(fp, sp);\n-        }\n-    }\n-\n-    public DiagramViewModel getModel() {\n-        return rangeSliderModel;\n-    }\n-\n@@ -431,37 +307,5 @@\n-        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n-    }\n-\n-    \/** This method is called from within the constructor to\n-     * initialize the form.\n-     * WARNING: Do NOT modify this code. The content of this method is\n-     * always regenerated by the Form Editor.\n-     *\/\n-        \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n-        private void initComponents() {\n-                jCheckBox1 = new javax.swing.JCheckBox();\n-\n-                org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, \"jCheckBox1\");\n-                jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-                jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));\n-\n-                setLayout(new java.awt.BorderLayout());\n-\n-        }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n-        \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n-        private javax.swing.JCheckBox jCheckBox1;\n-        \/\/ End of variables declaration\/\/GEN-END:variables\n-\n-    @Override\n-    public int getPersistenceType() {\n-        return TopComponent.PERSISTENCE_NEVER;\n-    }\n-\n-    @Override\n-    public void componentClosed() {\n-        super.componentClosed();\n-        rangeSliderModel.close();\n-    }\n-\n-    @Override\n-    protected String preferredID() {\n-        return PREFERRED_ID;\n+        TopComponent topComponent = EditorTopComponent.getRegistry().getActivated();\n+        if (topComponent instanceof EditorTopComponent) {\n+            return (EditorTopComponent) topComponent;\n+        }\n+        return null;\n@@ -491,4 +335,0 @@\n-    public boolean showPredSucc() {\n-        return (Boolean) predSuccAction.getValue(PredSuccAction.STATE);\n-    }\n-\n@@ -497,1 +337,1 @@\n-        Properties.PropertySelector<Figure> selector = new Properties.PropertySelector<>(getModel().getDiagramToView().getFigures());\n+        Properties.PropertySelector<Figure> selector = new Properties.PropertySelector<>(getDiagram().getFigures());\n@@ -508,1 +348,0 @@\n-\n@@ -514,2 +353,1 @@\n-\n-        for (Figure f : getModel().getDiagramToView().getFigures()) {\n+        for (Figure f : getDiagram().getFigures()) {\n@@ -523,1 +361,0 @@\n-\n@@ -529,1 +366,1 @@\n-        for (Figure f : getModel().getDiagramToView().getFigures()) {\n+        for (Figure f : getDiagram().getFigures()) {\n@@ -537,44 +374,2 @@\n-    @Override\n-    public void propertyChange(PropertyChangeEvent evt) {\n-        if (evt.getSource() == this.predSuccAction) {\n-            boolean b = (Boolean) predSuccAction.getValue(PredSuccAction.STATE);\n-            this.getModel().setShowNodeHull(b);\n-        } else if (evt.getSource() == this.showEmptyBlocksAction) {\n-            boolean b = (Boolean) showEmptyBlocksAction.getValue(ShowEmptyBlocksAction.STATE);\n-            this.getModel().setShowEmptyBlocks(b);\n-        } else if (evt.getSource() == this.overviewAction) {\n-            boolean b = (Boolean) overviewAction.getValue(OverviewAction.STATE);\n-            if (b) {\n-                showSatellite();\n-            } else {\n-                showScene();\n-            }\n-        } else if (evt.getSource() == this.seaLayoutAction) {\n-            boolean b = seaLayoutAction.isSelected();\n-            this.getModel().setShowSea(b);\n-            this.showEmptyBlocksAction.setEnabled(false);\n-        } else if (evt.getSource() == this.blockLayoutAction) {\n-            boolean b = blockLayoutAction.isSelected();\n-            this.getModel().setShowBlocks(b);\n-            this.showEmptyBlocksAction.setEnabled(false);\n-        } else if (evt.getSource() == this.cfgLayoutAction) {\n-            boolean b = cfgLayoutAction.isSelected();\n-            this.getModel().setShowCFG(b);\n-            this.showEmptyBlocksAction.setEnabled(true);\n-        } else if (evt.getSource() == this.hideDuplicatesAction) {\n-            boolean b = (Boolean) hideDuplicatesAction.getValue(HideDuplicatesAction.STATE);\n-            this.getModel().setHideDuplicates(b);\n-        } else if (evt.getSource() == this.selectionModeAction) {\n-            boolean b = (Boolean) selectionModeAction.getValue(SelectionModeAction.STATE);\n-            if (b) {\n-                scene.setInteractionMode(DiagramViewer.InteractionMode.SELECTION);\n-            } else {\n-                scene.setInteractionMode(DiagramViewer.InteractionMode.PANNING);\n-            }\n-        } else {\n-            assert false : \"Unknown event source\";\n-        }\n-    }\n-\n-    public void extract() {\n-        getModel().showOnly(getModel().getSelectedNodes());\n+    public Rectangle getSceneBounds() {\n+        return scene.getBounds();\n@@ -583,5 +378,2 @@\n-    public void hideNodes() {\n-        Set<Integer> selectedNodes = this.getModel().getSelectedNodes();\n-        HashSet<Integer> nodes = new HashSet<>(getModel().getHiddenNodes());\n-        nodes.addAll(selectedNodes);\n-        this.getModel().showNot(nodes);\n+    public void paintScene(Graphics2D generator) {\n+        scene.paint(generator);\n@@ -590,23 +382,3 @@\n-    public void expandPredecessors() {\n-        Set<Figure> oldSelection = getModel().getSelectedFigures();\n-        Set<Figure> figures = new HashSet<>();\n-\n-        for (Figure f : this.getDiagramModel().getDiagramToView().getFigures()) {\n-            boolean ok = false;\n-            if (oldSelection.contains(f)) {\n-                ok = true;\n-            } else {\n-                for (Figure pred : f.getSuccessors()) {\n-                    if (oldSelection.contains(pred)) {\n-                        ok = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (ok) {\n-                figures.add(f);\n-            }\n-        }\n-\n-        getModel().showAll(figures);\n+    @Override\n+    public int getPersistenceType() {\n+        return TopComponent.PERSISTENCE_NEVER;\n@@ -615,23 +387,3 @@\n-    public void expandSuccessors() {\n-        Set<Figure> oldSelection = getModel().getSelectedFigures();\n-        Set<Figure> figures = new HashSet<>();\n-\n-        for (Figure f : this.getDiagramModel().getDiagramToView().getFigures()) {\n-            boolean ok = false;\n-            if (oldSelection.contains(f)) {\n-                ok = true;\n-            } else {\n-                for (Figure succ : f.getPredecessors()) {\n-                    if (oldSelection.contains(succ)) {\n-                        ok = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (ok) {\n-                figures.add(f);\n-            }\n-        }\n-\n-        getModel().showAll(figures);\n+    @Override\n+    protected String preferredID() {\n+        return PREFERRED_ID;\n@@ -640,3 +392,2 @@\n-    public void showAll() {\n-        getModel().showNot(new HashSet<Integer>());\n-    }\n+    @Override\n+    public void componentOpened() { }\n@@ -644,2 +395,3 @@\n-    public Diagram getDiagram() {\n-        return getDiagramModel().getDiagramToView();\n+    @Override\n+    public void componentClosed() {\n+        getModel().close();\n@@ -652,1 +404,0 @@\n-\n@@ -679,4 +430,8 @@\n-    @Override\n-    protected Object writeReplace() throws ObjectStreamException {\n-        throw new NotSerializableException();\n-    }\n+    \/** This method is called from within the constructor to\n+     * initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is\n+     * always regenerated by the Form Editor.\n+     *\/\n+    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n+    private void initComponents() {\n+        jCheckBox1 = new javax.swing.JCheckBox();\n@@ -684,26 +439,3 @@\n-    private static void exportToPDF(DiagramViewer scene, File f) {\n-        int width = scene.getBounds().width;\n-        int height = scene.getBounds().height;\n-        com.lowagie.text.Document document = new Document(new Rectangle(width, height));\n-        PdfWriter writer = null;\n-        try {\n-            writer = PdfWriter.getInstance(document, new FileOutputStream(f));\n-            writer.setCloseStream(true);\n-            document.open();\n-            PdfContentByte contentByte = writer.getDirectContent();\n-            PdfTemplate template = contentByte.createTemplate(width, height);\n-            PdfGraphics2D pdfGenerator = new PdfGraphics2D(contentByte, width, height);\n-            scene.paint(pdfGenerator);\n-            pdfGenerator.dispose();\n-            contentByte.addTemplate(template, 0, 0);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        } finally {\n-            if (document.isOpen()) {\n-                document.close();\n-            }\n-            if (writer != null) {\n-                writer.close();\n-            }\n-        }\n-    }\n+        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, \"jCheckBox1\");\n+        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));\n+        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));\n@@ -711,14 +443,6 @@\n-    private static void exportToSVG(DiagramViewer scene, File f) {\n-        DOMImplementation dom = GenericDOMImplementation.getDOMImplementation();\n-        org.w3c.dom.Document document = dom.createDocument(\"http:\/\/www.w3.org\/2000\/svg\", \"svg\", null);\n-        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);\n-        ctx.setEmbeddedFontsOn(true);\n-        SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, true);\n-        scene.paint(svgGenerator);\n-        try (FileOutputStream os = new FileOutputStream(f)) {\n-            Writer out = new OutputStreamWriter(os, StandardCharsets.UTF_8);\n-            svgGenerator.stream(out, true);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n+        setLayout(new java.awt.BorderLayout());\n+\n+    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n+    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n+    private javax.swing.JCheckBox jCheckBox1;\n+    \/\/ End of variables declaration\/\/GEN-END:variables\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":116,"deletions":392,"binary":false,"changes":508,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.hotspot.igv.view;\n+\n+import com.lowagie.text.Document;\n+import com.lowagie.text.Rectangle;\n+import com.lowagie.text.pdf.PdfContentByte;\n+import com.lowagie.text.pdf.PdfGraphics2D;\n+import com.lowagie.text.pdf.PdfTemplate;\n+import com.lowagie.text.pdf.PdfWriter;\n+import org.apache.batik.dom.GenericDOMImplementation;\n+import org.apache.batik.svggen.SVGGeneratorContext;\n+import org.apache.batik.svggen.SVGGraphics2D;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.w3c.dom.DOMImplementation;\n+\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class ExportGraph implements ExportCookie {\n+\n+    @Override\n+    public void export(File f) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            String lcFileName = f.getName().toLowerCase();\n+            if (lcFileName.endsWith(\".pdf\")) {\n+                exportToPDF(editor, f);\n+            } else if (lcFileName.endsWith(\".svg\")) {\n+                exportToSVG(editor, f);\n+            } else {\n+                NotifyDescriptor message = new NotifyDescriptor.Message(\"Unknown image file extension: expected either '.pdf' or '.svg'\", NotifyDescriptor.ERROR_MESSAGE);\n+                DialogDisplayer.getDefault().notifyLater(message);\n+            }\n+        }\n+    }\n+\n+    private static void exportToPDF(EditorTopComponent editor, File f) {\n+        int width = editor.getSceneBounds().width;\n+        int height = editor.getSceneBounds().height;\n+        com.lowagie.text.Document document = new Document(new Rectangle(width, height));\n+        PdfWriter writer = null;\n+        try {\n+            writer = PdfWriter.getInstance(document, new FileOutputStream(f));\n+            writer.setCloseStream(true);\n+            document.open();\n+            PdfContentByte contentByte = writer.getDirectContent();\n+            PdfTemplate template = contentByte.createTemplate(width, height);\n+            PdfGraphics2D pdfGenerator = new PdfGraphics2D(contentByte, width, height);\n+            editor.paintScene(pdfGenerator);\n+            pdfGenerator.dispose();\n+            contentByte.addTemplate(template, 0, 0);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (document.isOpen()) {\n+                document.close();\n+            }\n+            if (writer != null) {\n+                writer.close();\n+            }\n+        }\n+    }\n+\n+    private static void exportToSVG(EditorTopComponent editor, File f) {\n+        DOMImplementation dom = GenericDOMImplementation.getDOMImplementation();\n+        org.w3c.dom.Document document = dom.createDocument(\"http:\/\/www.w3.org\/2000\/svg\", \"svg\", null);\n+        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);\n+        ctx.setEmbeddedFontsOn(true);\n+        SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, true);\n+        editor.paintScene(svgGenerator);\n+        try (FileOutputStream os = new FileOutputStream(f)) {\n+            Writer out = new OutputStreamWriter(os, StandardCharsets.UTF_8);\n+            svgGenerator.stream(out, true);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/ExportGraph.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -124,1 +124,1 @@\n-                                    comp.getDiagramModel().selectGraph(theGraph);\n+                                    comp.getModel().selectGraph(theGraph);\n@@ -153,1 +153,1 @@\n-                                    comp.getDiagramModel().selectGraph(theGraph);\n+                                    comp.getModel().selectGraph(theGraph);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/NodeQuickSearch.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n@@ -30,0 +32,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -36,1 +40,3 @@\n-public class EnableBlockLayoutAction extends AbstractAction {\n+public class EnableBlockLayoutAction extends AbstractAction implements PropertyChangeListener {\n+\n+    EditorTopComponent editor;\n@@ -38,1 +44,2 @@\n-    public EnableBlockLayoutAction() {\n+    public EnableBlockLayoutAction(EditorTopComponent etc) {\n+        editor = etc;\n@@ -42,0 +49,1 @@\n+        this.addPropertyChangeListener(this);\n@@ -53,2 +61,1 @@\n-    public void actionPerformed(ActionEvent e) {\n-    }\n+    public void actionPerformed(ActionEvent e) { }\n@@ -56,0 +63,4 @@\n+    @Override\n+    public void propertyChange(PropertyChangeEvent evt) {\n+        editor.getModel().setShowBlocks(this.isSelected());\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableBlockLayoutAction.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n@@ -30,0 +32,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -32,1 +36,3 @@\n-public class EnableCFGLayoutAction extends AbstractAction {\n+public class EnableCFGLayoutAction extends AbstractAction implements PropertyChangeListener {\n+\n+    EditorTopComponent editor;\n@@ -34,1 +40,2 @@\n-    public EnableCFGLayoutAction() {\n+    public EnableCFGLayoutAction(EditorTopComponent etc) {\n+        editor = etc;\n@@ -38,0 +45,1 @@\n+        this.addPropertyChangeListener(this);\n@@ -49,1 +57,5 @@\n-    public void actionPerformed(ActionEvent e) {\n+    public void actionPerformed(ActionEvent e) { }\n+\n+    @Override\n+    public void propertyChange(PropertyChangeEvent evt) {\n+        editor.getModel().setShowCFG(this.isSelected());\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableCFGLayoutAction.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n@@ -30,0 +32,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -32,1 +36,1 @@\n-public class EnableSeaLayoutAction extends AbstractAction {\n+public class EnableSeaLayoutAction extends AbstractAction implements PropertyChangeListener {\n@@ -34,1 +38,3 @@\n-    public EnableSeaLayoutAction() {\n+    EditorTopComponent editor;\n+    public EnableSeaLayoutAction(EditorTopComponent etc) {\n+        editor = etc;\n@@ -38,0 +44,1 @@\n+        this.addPropertyChangeListener(this);\n@@ -49,1 +56,5 @@\n-    public void actionPerformed(ActionEvent e) {\n+    public void actionPerformed(ActionEvent e) { }\n+\n+    @Override\n+    public void propertyChange(PropertyChangeEvent evt) {\n+        editor.getModel().setShowSea(this.isSelected());\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableSeaLayoutAction.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    public Action createContextAwareInstance(Lookup arg0) {\n+    public Action createContextAwareInstance(Lookup lookup) {\n@@ -94,0 +94,5 @@\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExpandDiffAction.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import com.sun.hotspot.igv.graph.Figure;\n@@ -30,0 +31,3 @@\n+import java.util.HashSet;\n+import java.util.Set;\n+\n@@ -40,1 +44,22 @@\n-            editor.expandPredecessors();\n+            Set<Figure> oldSelection = editor.getModel().getSelectedFigures();\n+            Set<Figure> figures = new HashSet<>();\n+\n+            for (Figure f : editor.getModel().getDiagramToView().getFigures()) {\n+                boolean ok = false;\n+                if (oldSelection.contains(f)) {\n+                    ok = true;\n+                } else {\n+                    for (Figure pred : f.getSuccessors()) {\n+                        if (oldSelection.contains(pred)) {\n+                            ok = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                if (ok) {\n+                    figures.add(f);\n+                }\n+            }\n+\n+            editor.getModel().showAll(figures);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExpandPredecessorsAction.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import com.sun.hotspot.igv.graph.Figure;\n@@ -30,0 +31,3 @@\n+import java.util.HashSet;\n+import java.util.Set;\n+\n@@ -40,1 +44,22 @@\n-            editor.expandSuccessors();\n+            Set<Figure> oldSelection = editor.getModel().getSelectedFigures();\n+            Set<Figure> figures = new HashSet<>();\n+\n+            for (Figure f : editor.getModel().getDiagramToView().getFigures()) {\n+                boolean ok = false;\n+                if (oldSelection.contains(f)) {\n+                    ok = true;\n+                } else {\n+                    for (Figure succ : f.getPredecessors()) {\n+                        if (oldSelection.contains(succ)) {\n+                            ok = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                if (ok) {\n+                    figures.add(f);\n+                }\n+            }\n+\n+            editor.getModel().showAll(figures);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExpandSuccessorsAction.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.util.ContextAction;\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n@@ -32,0 +35,1 @@\n+import org.openide.util.Lookup;\n@@ -39,1 +43,1 @@\n-public final class ExtractAction extends CallableSystemAction {\n+public final class ExtractAction extends ContextAction<DiagramViewModel> implements ChangedListener<DiagramViewModel> {\n@@ -41,7 +45,1 @@\n-    @Override\n-    public void performAction() {\n-        EditorTopComponent editor = EditorTopComponent.getActive();\n-        if (editor != null) {\n-            editor.extract();\n-        }\n-    }\n+    private DiagramViewModel model;\n@@ -55,0 +53,10 @@\n+    @Override\n+    public Class<DiagramViewModel> contextClass() {\n+        return DiagramViewModel.class;\n+    }\n+\n+    @Override\n+    public void performAction(DiagramViewModel model) {\n+        model.showOnly(model.getSelectedNodes());\n+    }\n+\n@@ -74,0 +82,29 @@\n+\n+    @Override\n+    public void update(DiagramViewModel model) {\n+        super.update(model);\n+        if (this.model != model) {\n+            if (this.model != null) {\n+                this.model.getViewChangedEvent().removeListener(this);\n+            }\n+            this.model = model;\n+            if (this.model != null) {\n+                this.model.getViewChangedEvent().addListener(this);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewModel source) {\n+        update(source);\n+    }\n+\n+    @Override\n+    public boolean isEnabled(DiagramViewModel model) {\n+        return model != null && !model.getSelectedNodes().isEmpty();\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup lookup) {\n+        return new ExtractAction();\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExtractAction.java","additions":45,"deletions":8,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.util.ContextAction;\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n@@ -29,0 +32,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -32,1 +37,1 @@\n-import org.openide.util.actions.CallableSystemAction;\n+import org.openide.util.Lookup;\n@@ -39,1 +44,1 @@\n-public final class HideAction extends CallableSystemAction {\n+public final class HideAction extends ContextAction<DiagramViewModel> implements ChangedListener<DiagramViewModel> {\n@@ -41,7 +46,1 @@\n-    @Override\n-    public void performAction() {\n-        EditorTopComponent editor = EditorTopComponent.getActive();\n-        if (editor != null) {\n-            editor.hideNodes();\n-        }\n-    }\n+    private DiagramViewModel model;\n@@ -65,0 +64,13 @@\n+    @Override\n+    public Class<DiagramViewModel> contextClass() {\n+        return DiagramViewModel.class;\n+    }\n+\n+    @Override\n+    public void performAction(DiagramViewModel model) {\n+        Set<Integer> selectedNodes = model.getSelectedNodes();\n+        HashSet<Integer> nodes = new HashSet<>(model.getHiddenNodes());\n+        nodes.addAll(selectedNodes);\n+        model.showNot(nodes);\n+    }\n+\n@@ -74,0 +86,29 @@\n+\n+    @Override\n+    public void update(DiagramViewModel model) {\n+        super.update(model);\n+        if (this.model != model) {\n+            if (this.model != null) {\n+                this.model.getViewChangedEvent().removeListener(this);\n+            }\n+            this.model = model;\n+            if (this.model != null) {\n+                this.model.getViewChangedEvent().addListener(this);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewModel source) {\n+        update(source);\n+    }\n+\n+    @Override\n+    public boolean isEnabled(DiagramViewModel model) {\n+        return model != null && !model.getSelectedNodes().isEmpty();\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup lookup) {\n+        return new HideAction();\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/HideAction.java","additions":50,"deletions":9,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -38,3 +40,0 @@\n-    private boolean state;\n-    public static final String STATE = \"state\";\n-\n@@ -43,0 +42,1 @@\n+        putValue(Action.SELECTED_KEY, false);\n@@ -44,1 +44,0 @@\n-        setState(false);\n@@ -49,6 +48,5 @@\n-        setState(!state);\n-    }\n-\n-    public void setState(boolean b) {\n-        this.putValue(STATE, b);\n-        this.state = b;\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            boolean selected = (boolean)getValue(SELECTED_KEY);\n+            editor.getModel().setHideDuplicates(selected);\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/HideDuplicatesAction.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/NextDiagramAction.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.awt.*;\n@@ -27,3 +28,4 @@\n-import javax.swing.AbstractAction;\n-import javax.swing.Action;\n-import javax.swing.ImageIcon;\n+import java.awt.event.KeyEvent;\n+import javax.swing.*;\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -37,0 +39,2 @@\n+    private static final String SATELLITE_STRING = \"satellite\";\n+    private static final String SCENE_STRING = \"scene\";\n@@ -38,2 +42,19 @@\n-    private boolean state;\n-    public static final String STATE = \"state\";\n+    public OverviewAction(JPanel panel) {\n+        int keyCode = KeyEvent.VK_S;\n+        panel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(\n+                KeyStroke.getKeyStroke(keyCode, 0, false), SATELLITE_STRING);\n+        panel.getActionMap().put(SATELLITE_STRING,\n+                new AbstractAction(SATELLITE_STRING) {\n+                    @Override public void actionPerformed(ActionEvent e) {\n+                        OverviewAction.this.setSelected(true);\n+                    }\n+                });\n+        panel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(\n+                KeyStroke.getKeyStroke(keyCode, 0, true), SCENE_STRING);\n+        panel.getActionMap().put(SCENE_STRING,\n+                new AbstractAction(SCENE_STRING) {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        OverviewAction.this.setSelected(false);\n+                    }\n+                });\n@@ -41,1 +62,0 @@\n-    public OverviewAction() {\n@@ -43,0 +63,1 @@\n+        putValue(Action.SELECTED_KEY, false);\n@@ -44,1 +65,0 @@\n-        setState(false);\n@@ -49,1 +69,5 @@\n-        setState(!state);\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            boolean selected = (boolean)getValue(SELECTED_KEY);\n+            editor.showSatellite(selected);\n+        }\n@@ -52,3 +76,6 @@\n-    public void setState(boolean b) {\n-        this.putValue(STATE, b);\n-        this.state = b;\n+    public void setSelected(boolean selected) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            putValue(Action.SELECTED_KEY, selected);\n+            editor.showSatellite(selected);\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/OverviewAction.java","additions":39,"deletions":12,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -38,2 +40,0 @@\n-    private boolean state;\n-    public static final String STATE = \"state\";\n@@ -42,1 +42,1 @@\n-        state = true;\n+        putValue(Action.SELECTED_KEY, true);\n@@ -44,1 +44,0 @@\n-        putValue(STATE, true);\n@@ -50,2 +49,5 @@\n-        this.state = !state;\n-        this.putValue(STATE, state);\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            boolean selected = (boolean)getValue(SELECTED_KEY);\n+            editor.getModel().setShowNodeHull(selected);\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/PredSuccAction.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/PrevDiagramAction.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.util.ContextAction;\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n+import javax.swing.Action;\n+import javax.swing.ImageIcon;\n+import org.openide.util.*;\n+\n+public final class ReduceDiffAction extends ContextAction<DiagramViewModel> implements ChangedListener<DiagramViewModel> {\n+    private DiagramViewModel model;\n+\n+    public ReduceDiffAction() {\n+        putValue(Action.SHORT_DESCRIPTION, \"Reduce the difference selection\");\n+        putValue(Action.SMALL_ICON, new ImageIcon(ImageUtilities.loadImage(\"com\/sun\/hotspot\/igv\/view\/images\/shrink_right.png\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NbBundle.getMessage(ReduceDiffAction.class, \"CTL_ReduceDiffAction\");\n+    }\n+\n+    @Override\n+    public HelpCtx getHelpCtx() {\n+        return HelpCtx.DEFAULT_HELP;\n+    }\n+\n+    @Override\n+    public Class<DiagramViewModel> contextClass() {\n+        return DiagramViewModel.class;\n+    }\n+\n+    @Override\n+    public void performAction(DiagramViewModel model) {\n+        int firstPos = model.getFirstPosition();\n+        int secondPos = model.getSecondPosition();\n+        if (firstPos < secondPos) {\n+            model.setPositions(firstPos, secondPos - 1);\n+        }\n+    }\n+\n+    @Override\n+    public void update(DiagramViewModel model) {\n+        super.update(model);\n+\n+        if (this.model != model) {\n+            if (this.model != null) {\n+                this.model.getDiagramChangedEvent().removeListener(this);\n+            }\n+\n+            this.model = model;\n+            if (this.model != null) {\n+                this.model.getDiagramChangedEvent().addListener(this);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEnabled(DiagramViewModel model) {\n+        return model.getFirstPosition() != model.getSecondPosition();\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup arg0) {\n+        return new ReduceDiffAction();\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewModel source) {\n+        update(source);\n+    }\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ReduceDiffAction.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -34,4 +36,0 @@\n-    private boolean state;\n-\n-    public static final String STATE = \"state\";\n-\n@@ -41,2 +39,1 @@\n-        state = false;\n-        putValue(STATE, false);\n+        putValue(SELECTED_KEY, false);\n@@ -47,6 +44,5 @@\n-        setState(!state);\n-    }\n-\n-    public void setState(boolean b) {\n-        this.putValue(STATE, b);\n-        this.state = b;\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            boolean selected = (boolean)getValue(SELECTED_KEY);\n+            editor.selectionMode(selected);\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/SelectionModeAction.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.util.ContextAction;\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n@@ -29,0 +32,1 @@\n+import java.util.HashSet;\n@@ -32,1 +36,1 @@\n-import org.openide.util.actions.CallableSystemAction;\n+import org.openide.util.Lookup;\n@@ -39,1 +43,3 @@\n-public final class ShowAllAction extends CallableSystemAction {\n+public final class ShowAllAction extends ContextAction<DiagramViewModel> implements ChangedListener<DiagramViewModel> {\n+\n+    private DiagramViewModel model;\n@@ -42,5 +48,7 @@\n-    public void performAction() {\n-        EditorTopComponent editor = EditorTopComponent.getActive();\n-        if (editor != null) {\n-            editor.showAll();\n-        }\n+    public Class<DiagramViewModel> contextClass() {\n+        return DiagramViewModel.class;\n+    }\n+\n+    @Override\n+    public void performAction(DiagramViewModel model) {\n+        model.showNot(new HashSet<Integer>());\n@@ -74,0 +82,30 @@\n+\n+    @Override\n+    public void update(DiagramViewModel model) {\n+        super.update(model);\n+        if (this.model != model) {\n+            if (this.model != null) {\n+                this.model.getHiddenNodesChangedEvent().removeListener(this);\n+            }\n+\n+            this.model = model;\n+            if (this.model != null) {\n+                this.model.getHiddenNodesChangedEvent().addListener(this);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewModel source) {\n+        update(source);\n+    }\n+\n+    @Override\n+    public boolean isEnabled(DiagramViewModel model) {\n+        return model != null && !model.getHiddenNodes().isEmpty();\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup lookup) {\n+        return new ShowAllAction();\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ShowAllAction.java","additions":45,"deletions":7,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n@@ -30,0 +32,2 @@\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n@@ -32,1 +36,1 @@\n-public class ShowEmptyBlocksAction extends AbstractAction {\n+public class ShowEmptyBlocksAction extends AbstractAction implements PropertyChangeListener  {\n@@ -34,2 +38,2 @@\n-    private boolean state;\n-    public static final String STATE = \"state\";\n+    private boolean selected;\n+    private AbstractAction parentAction;\n@@ -37,5 +41,8 @@\n-    public ShowEmptyBlocksAction() {\n-        state = true;\n-        putValue(AbstractAction.SMALL_ICON, new ImageIcon(ImageUtilities.loadImage(iconResource())));\n-        putValue(STATE, true);\n-        putValue(Action.SHORT_DESCRIPTION, \"Show empty blocks in control-flow graph view\");\n+    public ShowEmptyBlocksAction(AbstractAction action, boolean select) {\n+        this.parentAction = action;\n+        this.selected = select;\n+        this.parentAction.addPropertyChangeListener(this);\n+        putValue(SELECTED_KEY, this.selected);\n+        putValue(SMALL_ICON, new ImageIcon(ImageUtilities.loadImage(iconResource())));\n+        putValue(SHORT_DESCRIPTION, \"Show empty blocks in control-flow graph view\");\n+        enableIfParentSelected();\n@@ -46,2 +53,5 @@\n-        this.state = !state;\n-        this.putValue(STATE, state);\n+        this.selected = isSelected();\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.getModel().setShowEmptyBlocks(this.selected);\n+        }\n@@ -53,0 +63,24 @@\n+\n+    private boolean isSelected() {\n+        return (Boolean)getValue(SELECTED_KEY);\n+    }\n+\n+    private void enableIfParentSelected() {\n+        boolean enable = parentAction.isEnabled() && (Boolean)parentAction.getValue(SELECTED_KEY);\n+        if (enable != this.isEnabled()) {\n+            if (enable) {\n+                putValue(SELECTED_KEY, this.selected);\n+            } else {\n+                this.selected = isSelected();\n+                putValue(SELECTED_KEY, false);\n+            }\n+        }\n+        this.setEnabled(enable);\n+    }\n+\n+    @Override\n+    public void propertyChange(PropertyChangeEvent evt) {\n+        if (evt.getSource() == this.parentAction) {\n+            enableIfParentSelected();\n+        }\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ShowEmptyBlocksAction.java","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.view.actions;\n-\n-import com.sun.hotspot.igv.data.ChangedListener;\n-import com.sun.hotspot.igv.util.ContextAction;\n-import com.sun.hotspot.igv.view.DiagramViewModel;\n-import javax.swing.Action;\n-import javax.swing.ImageIcon;\n-import org.openide.util.*;\n-\n-public final class ShrinkDiffAction extends ContextAction<DiagramViewModel> implements ChangedListener<DiagramViewModel> {\n-    private DiagramViewModel model;\n-\n-    public ShrinkDiffAction() {\n-        putValue(Action.SHORT_DESCRIPTION, \"Reduce the difference selection\");\n-        putValue(Action.SMALL_ICON, new ImageIcon(ImageUtilities.loadImage(\"com\/sun\/hotspot\/igv\/view\/images\/shrink_right.png\")));\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return NbBundle.getMessage(ShrinkDiffAction.class, \"CTL_ShrinkDiffAction\");\n-    }\n-\n-    @Override\n-    public HelpCtx getHelpCtx() {\n-        return HelpCtx.DEFAULT_HELP;\n-    }\n-\n-    @Override\n-    public Class<DiagramViewModel> contextClass() {\n-        return DiagramViewModel.class;\n-    }\n-\n-    @Override\n-    public void performAction(DiagramViewModel model) {\n-        int firstPos = model.getFirstPosition();\n-        int secondPos = model.getSecondPosition();\n-        if (secondPos != model.getPositions().size() - 1) {\n-            model.setPositions(firstPos, (firstPos < secondPos) ? secondPos - 1 : secondPos);\n-        }\n-    }\n-\n-    @Override\n-    public void update(DiagramViewModel model) {\n-        super.update(model);\n-\n-        if (this.model != model) {\n-            if (this.model != null) {\n-                this.model.getDiagramChangedEvent().removeListener(this);\n-            }\n-\n-            this.model = model;\n-            if (this.model != null) {\n-                this.model.getDiagramChangedEvent().addListener(this);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public boolean isEnabled(DiagramViewModel model) {\n-        return model.getSecondPosition() != model.getPositions().size() - 1;\n-    }\n-\n-    @Override\n-    public Action createContextAwareInstance(Lookup arg0) {\n-        return new ShrinkDiffAction();\n-    }\n-\n-    @Override\n-    public void changed(DiagramViewModel source) {\n-        update(source);\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ShrinkDiffAction.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -4,1 +4,1 @@\n-CTL_ShrinkDiffAction=Reduce difference selection\n+CTL_ReduceDiffAction=Reduce difference selection\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/actions\/Bundle.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ShrinkDiffAction.instance\"\/>\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ReduceDiffAction.instance\"\/>\n@@ -24,1 +24,1 @@\n-            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ShrinkDiffAction.instance\"\/>\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ReduceDiffAction.instance\"\/>\n@@ -39,1 +39,1 @@\n-            <file name=\"com-sun-hotspot-igv-view-actions-ShrinkDiffAction.instance\"><attr name=\"position\" intvalue=\"2001\"\/><\/file>\n+            <file name=\"com-sun-hotspot-igv-view-actions-ReduceDiffAction.instance\"><attr name=\"position\" intvalue=\"2001\"\/><\/file>\n@@ -64,2 +64,2 @@\n-            <file name=\"com-sun-hotspot-igv-view-actions-ShrinkDiffAction.shadow\">\n-                <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ShrinkDiffAction.instance\"\/>\n+            <file name=\"com-sun-hotspot-igv-view-actions-ReduceDiffAction.shadow\">\n+                <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ReduceDiffAction.instance\"\/>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/layer.xml","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}