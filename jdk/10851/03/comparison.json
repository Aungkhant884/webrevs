{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run main\/othervm SelectWhenRefused\n@@ -34,0 +35,1 @@\n+import java.util.Set;\n@@ -36,0 +38,2 @@\n+    static int MAX_TRIES = 3;\n+    static String GREETINGS_MESSAGE = \"Greetings from SelectWhenRefused!\";\n@@ -38,0 +42,4 @@\n+        \/\/ If another datagram test interferes with this test ignoreStrayWakeup\n+        \/\/ will be set to true, and the loop below will retry the test\n+        boolean ignoreStrayWakeup;\n+\n@@ -52,9 +60,17 @@\n-            \/* Test 1: not connected so ICMP port unreachable should not be received *\/\n-            sendDatagram(dc, refuser);\n-            int n = sel.select(2000);\n-            if (n > 0) {\n-                sel.selectedKeys().clear();\n-                \/\/ BindException will be thrown if another service is using\n-                \/\/ our expected refuser port, cannot run just exit.\n-                DatagramChannel.open().bind(refuser).close();\n-                throw new RuntimeException(\"Unexpected wakeup\");\n+            for (int i = 0; i < MAX_TRIES; i++) {\n+                \/* Test 1: not connected so ICMP port unreachable should not be received *\/\n+                sendDatagram(dc, refuser);\n+                int n = sel.select(2000);\n+                if (n > 0) {\n+                    ignoreStrayWakeup = checkUnexpectedWakeup(dc, sel.selectedKeys());\n+                    sel.selectedKeys().clear();\n+                    if (ignoreStrayWakeup) {\n+                        if (i < MAX_TRIES - 1) continue;\n+                    }\n+                    \/\/ BindException will be thrown if another service is using\n+                    \/\/ our expected refuser port, cannot run just exit.\n+                    DatagramChannel.open().bind(refuser).close();\n+                    throw new RuntimeException(\"Unexpected wakeup\");\n+                } else {\n+                    break;\n+                }\n@@ -62,1 +78,0 @@\n-\n@@ -66,9 +81,21 @@\n-                sendDatagram(dc, refuser);\n-                n = sel.select(2000);\n-                if (n > 0) {\n-                    sel.selectedKeys().clear();\n-                    try {\n-                        n = dc.read(ByteBuffer.allocate(100));\n-                        throw new RuntimeException(\"Unexpected datagram received\");\n-                    } catch (PortUnreachableException pue) {\n-                        \/\/ expected\n+                for (int i = 0; i < MAX_TRIES; i++) {\n+                    sendDatagram(dc, refuser);\n+                    int n = sel.select(2000);\n+                    if (n > 0) {\n+                        sel.selectedKeys().clear();\n+                        try {\n+                            ByteBuffer buf = ByteBuffer.allocate(100);\n+                            SocketAddress sa = dc.receive(buf);\n+                            String message = new String(buf.array());\n+                            System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n+                            \/\/If any received data contains the message from sendDatagram then return true\n+                            if (message.contains(GREETINGS_MESSAGE)) {\n+                                throw new RuntimeException(\"Unexpected datagram received\");\n+                            }\n+                            \/\/ BindException will be thrown if another service is using\n+                            \/\/ our expected refuser port, cannot run just exit.\n+                            DatagramChannel.open().bind(refuser).close();\n+                            throw new RuntimeException(\"PortUnreachableException not raised\");\n+                        } catch (PortUnreachableException pue) {\n+                            \/\/ expected\n+                        }\n@@ -76,0 +103,1 @@\n+                    break;\n@@ -80,6 +108,13 @@\n-\n-            \/* Test 3: not connected so ICMP port unreachable should not be received *\/\n-            sendDatagram(dc, refuser);\n-            n = sel.select(2000);\n-            if (n > 0) {\n-                throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n+            for (int i = 0; i < MAX_TRIES; i++) {\n+                \/* Test 3: not connected so ICMP port unreachable should not be received *\/\n+                sendDatagram(dc, refuser);\n+                int n = sel.select(2000);\n+                if (n > 0) {\n+                    ignoreStrayWakeup = checkUnexpectedWakeup(dc, sel.selectedKeys());\n+                    sel.selectedKeys().clear();\n+                    if (ignoreStrayWakeup) {\n+                        if (i < MAX_TRIES - 1) continue;\n+                    }\n+                    throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n+                }\n+                break;\n@@ -87,2 +122,1 @@\n-\n-        } catch(BindException e) {\n+        } catch (BindException e) {\n@@ -97,3 +131,2 @@\n-        throws IOException\n-    {\n-        ByteBuffer bb = ByteBuffer.wrap(\"Greetings!\".getBytes());\n+            throws IOException {\n+        ByteBuffer bb = ByteBuffer.wrap(GREETINGS_MESSAGE.getBytes());\n@@ -102,0 +135,24 @@\n+\n+    static boolean checkUnexpectedWakeup(DatagramChannel dc, Set<SelectionKey> selectedKeys) {\n+        System.out.format(\"Received %d keys%n\", selectedKeys.size());\n+        for (SelectionKey key : selectedKeys) {\n+            if (!key.isValid() || !key.isReadable()) {\n+                System.out.println(\"Invalid or unreadable key: \" + key);\n+                continue;\n+            }\n+            try {\n+                System.out.println(\"Attempting to read datagram from key: \" + key);\n+                ByteBuffer buf = ByteBuffer.allocate(100);\n+                SocketAddress sa = dc.receive(buf);\n+                String message = new String(buf.array());\n+                System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n+                \/\/If any received data contains the message from sendDatagram then return true\n+                if (message.contains(GREETINGS_MESSAGE)) {\n+                    return true;\n+                }\n+            } catch (IOException io) {\n+                System.out.println(\"Unable to read from datagram \" + io);\n+            }\n+        }\n+        return false;\n+    }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SelectWhenRefused.java","additions":88,"deletions":31,"binary":false,"changes":119,"status":"modified"}]}