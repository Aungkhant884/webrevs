{"files":[{"patch":"@@ -42,4 +42,0 @@\n-        \/\/ If another datagram test interferes with this test ignoreStrayWakeup\n-        \/\/ will be set to true, and the loop below will retry the test\n-        boolean ignoreStrayWakeup;\n-\n@@ -62,12 +58,2 @@\n-                sendDatagram(dc, refuser);\n-                int n = sel.select(2000);\n-                if (n > 0) {\n-                    ignoreStrayWakeup = checkUnexpectedWakeup(sel.selectedKeys());\n-                    sel.selectedKeys().clear();\n-                    if (ignoreStrayWakeup) {\n-                        if (i < MAX_TRIES - 1) continue;\n-                    }\n-                    \/\/ BindException will be thrown if another service is using\n-                    \/\/ our expected refuser port, cannot run just exit.\n-                    DatagramChannel.open().bind(refuser).close();\n-                    throw new RuntimeException(\"Unexpected wakeup\");\n+                if (!testNoPUEBeforeConnection(dc, refuser, sel, i)) {\n+                    break;\n@@ -75,1 +61,0 @@\n-                break;\n@@ -82,26 +67,2 @@\n-                    sendDatagram(dc, refuser);\n-                    int n = sel.select(2000);\n-                    if (n > 0) {\n-                        sel.selectedKeys().clear();\n-                        try {\n-                            ByteBuffer buf = ByteBuffer.allocate(100);\n-                            SocketAddress sa = dc.receive(buf);\n-                            if (sa != null) {\n-                                buf.flip();\n-                                byte[] bytes = new byte[buf.remaining()];\n-                                buf.get(bytes);\n-                                String message = new String(bytes);\n-                                System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n-                                \/\/ If any received data contains the message from sendDatagram then throw exception\n-                                if (message.contains(GREETINGS_MESSAGE)) {\n-                                    throw new RuntimeException(\"Unexpected datagram received\");\n-                                }\n-                            }\n-                            \/\/ BindException will be thrown if another service is using\n-                            \/\/ our expected refuser port, cannot run just exit.\n-                            DatagramChannel.open().bind(refuser).close();\n-                            if (i < MAX_TRIES - 1) continue;\n-                            throw new RuntimeException(\"PortUnreachableException not raised\");\n-                        } catch (PortUnreachableException pue) {\n-                            System.out.println(\"Got expected PortUnreachableException \" + pue);\n-                        }\n+                    if (!testPUEOnConnect(dc, refuser, sel, i)) {\n+                        break;\n@@ -109,1 +70,0 @@\n-                    break;\n@@ -117,9 +77,2 @@\n-                sendDatagram(dc, refuser);\n-                int n = sel.select(2000);\n-                if (n > 0) {\n-                    ignoreStrayWakeup = checkUnexpectedWakeup(sel.selectedKeys());\n-                    sel.selectedKeys().clear();\n-                    if (ignoreStrayWakeup) {\n-                        if (i < MAX_TRIES - 1) continue;\n-                    }\n-                    throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n+                if (!testNoPUEAfterDisconnect(dc, refuser, sel, i)) {\n+                    break;\n@@ -127,1 +80,0 @@\n-                break;\n@@ -137,0 +89,104 @@\n+    \/*\n+     * Send a datagram to non existent unconnected UDP end point\n+     * This shouldn't result in an PortUnreachableException\n+     * Handle unexpected read events on the senders DC with\n+     * retry when message received is external and Throw Exception\n+     * on receipt of own message\n+     *\/\n+    static boolean testNoPUEBeforeConnection(DatagramChannel dc,\n+                                             SocketAddress refuser,\n+                                             Selector sel,\n+                                             int retryCount) throws IOException {\n+        sendDatagram(dc, refuser);\n+        int n = sel.select(2000);\n+        if (n > 0) {\n+            boolean ignoreStrayWakeup = checkUnexpectedWakeup(sel.selectedKeys());\n+            sel.selectedKeys().clear();\n+\n+            if (ignoreStrayWakeup) {\n+                if (retryCount < MAX_TRIES - 1) {\n+                    return true;\n+                }\n+            }\n+\n+            \/\/ BindException will be thrown if another service is using\n+            \/\/ our expected refuser port, cannot run just exit.\n+            DatagramChannel.open().bind(refuser).close();\n+            throw new RuntimeException(\"Unexpected wakeup\");\n+        }\n+        return false;\n+    }\n+\n+    \/*\n+     * Send a datagram to a connected UDP end point\n+     * This should result in an PortUnreachableException\n+     * Handle unexpected read events on the senders DC with\n+     * retry when message received is external and Throw Exception\n+     * on receipt of own message\n+     *\/\n+    static boolean testPUEOnConnect(DatagramChannel dc,\n+                                    SocketAddress refuser,\n+                                    Selector sel,\n+                                    int retryCount) throws IOException {\n+        sendDatagram(dc, refuser);\n+        int n = sel.select(2000);\n+        if (n > 0) {\n+            sel.selectedKeys().clear();\n+\n+            try {\n+                \/\/ Attempt to read from Selected Key\n+                ByteBuffer buf = ByteBuffer.allocate(100);\n+                SocketAddress sa = dc.receive(buf);\n+\n+                if (sa != null) {\n+                    buf.flip();\n+                    byte[] bytes = new byte[buf.remaining()];\n+                    buf.get(bytes);\n+                    String message = new String(bytes);\n+                    System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n+\n+                    \/\/ If any received data contains the message from sendDatagram then throw exception\n+                    if (message.contains(GREETINGS_MESSAGE)) {\n+                        throw new RuntimeException(\"Unexpected datagram received\");\n+                    }\n+                }\n+\n+                if (retryCount < MAX_TRIES - 1) {\n+                    return true;\n+                }\n+                throw new RuntimeException(\"PortUnreachableException not raised\");\n+            } catch (PortUnreachableException pue) {\n+                System.out.println(\"Got expected PortUnreachableException \" + pue);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/*\n+     * Send a datagram to a disconnected UDP end point\n+     * This should result in an PortUnreachableException\n+     * Handle unexpected read events on the senders DC with\n+     * retry when message received is external and Throw Exception\n+     * on receipt of own message\n+     *\/\n+    static boolean testNoPUEAfterDisconnect(DatagramChannel dc,\n+                                            SocketAddress refuser,\n+                                            Selector sel,\n+                                            int retryCount) throws IOException {\n+        sendDatagram(dc, refuser);\n+        int n = sel.select(2000);\n+        if (n > 0) {\n+            boolean ignoreStrayWakeup = checkUnexpectedWakeup(sel.selectedKeys());\n+            sel.selectedKeys().clear();\n+\n+            if (ignoreStrayWakeup) {\n+                if (retryCount < MAX_TRIES - 1) {\n+                    return true;\n+                }\n+            }\n+\n+            throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n+        }\n+        return false;\n+    }\n+\n@@ -143,0 +199,6 @@\n+    \/*\n+     * Attempt to read and Log the data from SelectedKeys,\n+     * If a message can be received, and it came from\n+     * another test return True\n+     *\n+     *\/\n@@ -145,0 +207,1 @@\n+\n@@ -150,0 +213,1 @@\n+\n@@ -155,0 +219,1 @@\n+\n@@ -161,0 +226,1 @@\n+\n@@ -166,0 +232,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SelectWhenRefused.java","additions":121,"deletions":54,"binary":false,"changes":175,"status":"modified"}]}