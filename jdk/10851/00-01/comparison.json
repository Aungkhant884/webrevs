{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @bug 6935563 7044870 8293696\n+ * @bug 6935563 7044870\n@@ -40,0 +40,4 @@\n+        \/\/If another datagram test interferes with this test ignoreStrayWakeup\n+        \/\/ will be set to true, and the loop below will retry the test\n+        boolean ignoreStrayWakeup;\n+\n@@ -54,11 +58,15 @@\n-            \/* Test 1: not connected so ICMP port unreachable should not be received *\/\n-            sendDatagram(dc, refuser);\n-            int n = sel.select(2000);\n-            if (n > 0) {\n-                logUnexpectedWakeup(dc, sel.selectedKeys());\n-                sel.selectedKeys().clear();\n-                \/\/ BindException will be thrown if another service is using\n-                \/\/ our expected refuser port, cannot run just exit.\n-                DatagramChannel.open().bind(refuser).close();\n-                throw new RuntimeException(\"Unexpected wakeup\");\n-            }\n+            for (;;) {\n+                \/* Test 1: not connected so ICMP port unreachable should not be received *\/\n+                sendDatagram(dc, refuser);\n+                int n = sel.select(2000);\n+                if (n > 0) {\n+                    ignoreStrayWakeup = checkUnexpectedWakeup(dc, sel.selectedKeys());\n+                    sel.selectedKeys().clear();\n+                    if (ignoreStrayWakeup) {\n+                        continue;\n+                    }\n+                    \/\/ BindException will be thrown if another service is using\n+                    \/\/ our expected refuser port, cannot run just exit.\n+                    DatagramChannel.open().bind(refuser).close();\n+                    throw new RuntimeException(\"Unexpected wakeup\");\n+                }\n@@ -66,3 +74,27 @@\n-            \/* Test 2: connected so ICMP port unreachable may be received *\/\n-            dc.connect(refuser);\n-            try {\n+                \/* Test 2: connected so ICMP port unreachable may be received *\/\n+                dc.connect(refuser);\n+                try {\n+                    sendDatagram(dc, refuser);\n+                    n = sel.select(2000);\n+                    if (n > 0) {\n+                        sel.selectedKeys().clear();\n+                        try {\n+                            ByteBuffer buf = ByteBuffer.allocate(100);\n+                            SocketAddress sa = dc.receive(buf);\n+                            String message = new String(buf.array());\n+                            System.out.format(\"received %s at %s from %s%n\", message, dc.getLocalAddress(), sa);\n+                            \/\/If any received data contains the message from sendDatagram then return true\n+                            if (message.contains(\"Greetings!\")) {\n+                                throw new RuntimeException(\"Unexpected datagram received\");\n+                            }\n+                            \/\/unexpected datagram received from elsewhere, retry\n+                            continue;\n+                        } catch (PortUnreachableException pue) {\n+                            \/\/ expected\n+                        }\n+                    }\n+                } finally {\n+                    dc.disconnect();\n+                }\n+\n+                \/* Test 3: not connected so ICMP port unreachable should not be received *\/\n@@ -72,0 +104,1 @@\n+                    ignoreStrayWakeup = checkUnexpectedWakeup(dc, sel.selectedKeys());\n@@ -73,8 +106,2 @@\n-                    try {\n-                        ByteBuffer buf = ByteBuffer.allocate(100);\n-                        n = dc.read(buf);\n-                        String message = new String(buf.array());\n-                        System.out.format(\"received %s at %s%n\", message, dc.getLocalAddress());\n-                        throw new RuntimeException(\"Unexpected datagram received\");\n-                    } catch (PortUnreachableException pue) {\n-                        \/\/ expected\n+                    if (ignoreStrayWakeup) {\n+                        continue;\n@@ -82,0 +109,1 @@\n+                    throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n@@ -83,2 +111,1 @@\n-            } finally {\n-                dc.disconnect();\n+                break;\n@@ -86,10 +113,1 @@\n-\n-            \/* Test 3: not connected so ICMP port unreachable should not be received *\/\n-            sendDatagram(dc, refuser);\n-            n = sel.select(2000);\n-            if (n > 0) {\n-                logUnexpectedWakeup(dc, sel.selectedKeys());\n-                throw new RuntimeException(\"Unexpected wakeup after disconnect\");\n-            }\n-\n-        } catch(BindException e) {\n+        } catch (BindException e) {\n@@ -110,1 +128,1 @@\n-    static void logUnexpectedWakeup(DatagramChannel dc, Set<SelectionKey> selectedKeys) {\n+    static boolean checkUnexpectedWakeup(DatagramChannel dc, Set<SelectionKey> selectedKeys) {\n@@ -114,1 +132,1 @@\n-                return;\n+                continue;\n@@ -122,0 +140,4 @@\n+                \/\/If any received data contains the message from sendDatagram then return true\n+                if (message.contains(\"Greetings!\")) {\n+                    return true;\n+                }\n@@ -126,0 +148,1 @@\n+        return false;\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SelectWhenRefused.java","additions":60,"deletions":37,"binary":false,"changes":97,"status":"modified"}]}