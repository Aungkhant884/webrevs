{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,0 @@\n-     * @throws IOException if an I\/O error occurs\n@@ -115,1 +114,1 @@\n-    public String annotate(DataInputStream in) throws IOException {\n+    public String annotate(DataInputStream in) {\n@@ -119,2 +118,11 @@\n-        } finally {\n-            return sb.toString();\n+        } catch (IOException e) {\n+            \/*\n+             * Formatters are designed to be nested, where one formatter can call another and the valuable output\n+             * is the formatted string that has been accumulated from the beginning of the stream.\n+             *\n+             * The choice of DataInputStream was chosen for the convenience of the methods to read different types.\n+             * and (declared) exceptions are an unwelcome artifact.\n+             *\n+             * If an exception was percolated up and the formatted output discarded, it would defeat the purpose.\n+             * So we just catch it here and still return useful information about the stream to this point.\n+             *\/\n@@ -122,0 +130,1 @@\n+        return sb.toString();\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/ASN1Formatter.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}