{"files":[{"patch":"@@ -30,2 +30,3 @@\n-import java.io.File;\n-import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -99,2 +100,2 @@\n-    private File pathname(String name) {\n-        return new File(dumpDir, encodeForFilename(name) + \".class\");\n+    private Path pathname(String name) {\n+        return Path.of(dumpDir, encodeForFilename(name) + \".class\");\n@@ -132,5 +133,1 @@\n-    private void write(File file, byte[] bytes) {\n-        \/\/ use java.io.File instead of java.nio.file.Path to avoid\n-        \/\/ recursive initialization during early startup. e.g.\n-        \/\/ Enum::valueOf causes method handle to be invoked which\n-        \/\/ may cause classes to be spinned and dumped\n+    private void write(Path path, byte[] bytes) {\n@@ -140,7 +137,2 @@\n-                    \/\/ use absolute file to workaround writing to $CWD\/file if\n-                    \/\/ -Duser.dir is set\n-                    File path = file.getAbsoluteFile();\n-                    path.getParentFile().mkdirs();\n-                    FileOutputStream fos = new FileOutputStream(path);\n-                    fos.write(bytes);\n-                    fos.close();\n+                    Files.createDirectories(path.getParent());\n+                    Files.write(path, bytes);\n@@ -152,1 +144,1 @@\n-                                        file + \" \" + ex.getMessage());\n+                                        path + \" \" + ex.getMessage());\n@@ -164,1 +156,1 @@\n-    private static File validateDumpDir(String dir) {\n+    private static Path validateDumpDir(String dir) {\n@@ -167,11 +159,7 @@\n-            public File run() {\n-                \/\/ use java.io.File instead of java.nio.file.Path to avoid\n-                \/\/ recursive initialization during early startup.\n-\n-                \/\/ use absolute file to workaround an issue using the file relative\n-                \/\/ to CWD if -Duser.dir is set\n-                File path = new File(dir).getAbsoluteFile();\n-                if (!path.exists()) {\n-                    boolean rc = path.mkdirs();\n-                    if (!rc) {\n-                        throw new IllegalArgumentException(\"Fail to create \" + path);\n+            public Path run() {\n+                Path path = Path.of(dir);\n+                if (Files.notExists(path)) {\n+                    try {\n+                        Files.createDirectories(path);\n+                    } catch (IOException ex) {\n+                        throw new IllegalArgumentException(\"Fail to create \" + path, ex);\n@@ -180,1 +168,1 @@\n-                if (!path.isDirectory()) {\n+                if (!Files.isDirectory(path)) {\n@@ -182,1 +170,1 @@\n-                } else if (!path.canWrite()) {\n+                } else if (!Files.isWritable(path)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ClassFileDumper.java","additions":19,"deletions":31,"binary":false,"changes":50,"status":"modified"}]}