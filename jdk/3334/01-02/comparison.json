{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/sizes.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_ext_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"memory\/universe.hpp\"\n@@ -68,0 +69,16 @@\n+#ifdef _LP64\n+\n+bool VM_Version::supports_clflush() {\n+  \/\/ clflush should always be available on x86_64\n+  \/\/ if not we are in real trouble because we rely on it\n+  \/\/ to flush the code cache.\n+  \/\/ Unfortunately, Assembler::clflush is currently called as part\n+  \/\/ of generation of the code cache flush routine. This happens\n+  \/\/ under Universe::init before the processor features are set\n+  \/\/ up. Assembler::flush calls this routine to check that clflush\n+  \/\/ is allowed. So, we give the caller a free pass if Universe init\n+  \/\/ is still in progress.\n+  assert ((!Universe::is_fully_initialized() || (_features & CPU_FLUSH) != 0), \"clflush should be available\");\n+  return true;\n+}\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/universe.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/sizes.hpp\"\n@@ -1036,13 +1036,2 @@\n-  static bool supports_clflush() {\n-    \/\/ clflush should always be available on x86_64\n-    \/\/ if not we are in real trouble because we rely on it\n-    \/\/ to flush the code cache.\n-    \/\/ Unfortunately, Assembler::clflush is currently called as part\n-    \/\/ of generation of the code cache flush routine. This happens\n-    \/\/ under Universe::init before the processor features are set\n-    \/\/ up. Assembler::flush calls this routine to check that clflush\n-    \/\/ is allowed. So, we give the caller a free pass if Universe init\n-    \/\/ is still in progress.\n-    assert ((!Universe::is_fully_initialized() || (_features & CPU_FLUSH) != 0), \"clflush should be available\");\n-    return true;\n-  }\n+\n+  static bool supports_clflush(); \/\/ Can't inline due to header file conflict\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  if (os::supports_serialize()) {\n+  if (VM_Version::supports_serialize()) {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/orderAccess_linux_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,4 +461,0 @@\n-bool os::supports_serialize(){\n-  return VM_Version::supports_serialize();\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-  static bool supports_serialize();\n+\/\/  static bool supports_serialize();\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/orderAccess.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/globals.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vm_version.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}