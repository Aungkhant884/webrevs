{"files":[{"patch":"@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDHParamGensLongKey.java)\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGens.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDHParamGens.java)\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGensLongKey.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDSAParamGenLongKey.java)\n","filename":"test\/jdk\/sun\/security\/provider\/DSA\/SupportedDSAParamGen.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDSAParamGen.java)\n","filename":"test\/jdk\/sun\/security\/provider\/DSA\/SupportedDSAParamGenLongKey.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see TestDSAGenParameterSpecLongKey.java)\n","filename":"test\/jdk\/sun\/security\/provider\/NSASuiteB\/TestDSAGenParameterSpec.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see TestDSAGenParameterSpec.java)\n","filename":"test\/jdk\/sun\/security\/provider\/NSASuiteB\/TestDSAGenParameterSpecLongKey.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n- * @summary Create a signature for RSA and get its signed data. re-initiate\n+ * @summary Ensure keys created from KeyFactory::getKeySpec and from constructors\n+ *          are equal.\n+ *          Create a signature for RSA and get its signed data. re-initiate\n@@ -146,0 +148,6 @@\n+                X509EncodedKeySpec x509KeySpec1 = kf.getKeySpec(key, X509EncodedKeySpec.class);\n+                X509EncodedKeySpec x509KeySpec2 = new X509EncodedKeySpec(key.getEncoded());\n+\n+                Asserts.assertTrue(encodedKeySpecEquals(x509KeySpec1, x509KeySpec2),\n+                        \"Both X509EncodedKeySpec should be equal\");\n+\n@@ -149,1 +157,1 @@\n-                        kf.generatePublic(new X509EncodedKeySpec(key.getEncoded()))\n+                        kf.generatePublic(x509KeySpec1)\n@@ -166,0 +174,6 @@\n+                PKCS8EncodedKeySpec pkcsKeySpec1 = kf.getKeySpec(key, PKCS8EncodedKeySpec.class);\n+                PKCS8EncodedKeySpec pkcsKeySpec2 = new PKCS8EncodedKeySpec(key.getEncoded());\n+\n+                Asserts.assertTrue(encodedKeySpecEquals(pkcsKeySpec1, pkcsKeySpec2),\n+                        \"Both PKCS8EncodedKeySpec should be equal\");\n+\n@@ -169,2 +183,1 @@\n-                        kf.generatePrivate(new PKCS8EncodedKeySpec(\n-                                key.getEncoded()))\n+                        kf.generatePrivate(pkcsKeySpec1)\n@@ -227,0 +240,5 @@\n+    private static boolean encodedKeySpecEquals(EncodedKeySpec spec1, EncodedKeySpec spec2) {\n+        return Objects.equals(spec1.getAlgorithm(), spec2.getAlgorithm())\n+                && spec1.getFormat().equals(spec2.getFormat())\n+                && Arrays.equals(spec1.getEncoded(), spec2.getEncoded());\n+    }\n","filename":"test\/jdk\/sun\/security\/rsa\/SignatureTest.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"}]}