{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,0 +372,3 @@\n+static jint SIZE_TABLE[] = { 9, 99, 999, 9999, 99999, 999999, 9999999,\n+                            99999999, 999999999, 0x7fffffff };\n+\n@@ -640,8 +643,0 @@\n-  size_table_field = C->env()->Integer_klass()->get_field_by_name(ciSymbol::make(\"sizeTable\"),\n-                                                                  ciSymbols::int_array_signature(), true);\n-  if (size_table_field == NULL) {\n-    \/\/ Something wrong so give up.\n-    assert(false, \"why can't we find Integer.sizeTable?\");\n-    return;\n-  }\n-\n@@ -1171,31 +1166,0 @@\n-Node* PhaseStringOpts::fetch_static_field(GraphKit& kit, ciField* field) {\n-  const TypeInstPtr* mirror_type = TypeInstPtr::make(field->holder()->java_mirror());\n-  Node* klass_node = __ makecon(mirror_type);\n-  BasicType bt = field->layout_type();\n-  ciType* field_klass = field->type();\n-\n-  const Type *type;\n-  if( bt == T_OBJECT ) {\n-    if (!field->type()->is_loaded()) {\n-      type = TypeInstPtr::BOTTOM;\n-    } else if (field->is_static_constant()) {\n-      \/\/ This can happen if the constant oop is non-perm.\n-      ciObject* con = field->constant_value().as_object();\n-      \/\/ Do not \"join\" in the previous type; it doesn't add value,\n-      \/\/ and may yield a vacuous result if the field is of interface type.\n-      type = TypeOopPtr::make_from_constant(con, true)->isa_oopptr();\n-      assert(type != NULL, \"field singleton type must be consistent\");\n-      return __ makecon(type);\n-    } else {\n-      type = TypeOopPtr::make_from_klass(field_klass->as_klass());\n-    }\n-  } else {\n-    type = Type::get_const_basic_type(bt);\n-  }\n-\n-  return kit.make_load(NULL, kit.basic_plus_adr(klass_node, field->offset_in_bytes()),\n-                       type, T_OBJECT,\n-                       C->get_alias_index(mirror_type->add_offset(field->offset_in_bytes())),\n-                       MemNode::unordered);\n-}\n-\n@@ -1204,3 +1168,3 @@\n-    \/\/ Constant integer. Compute constant length using Integer.sizeTable\n-    int arg_val = arg->get_int();\n-    int count = 1;\n+    \/\/ Constant integer. Compute constant length\n+    jint arg_val = arg->get_int();\n+    jint count = 1;\n@@ -1216,4 +1180,2 @@\n-\n-    ciArray* size_table = (ciArray*)size_table_field->constant_value().as_object();\n-    for (int i = 0; i < size_table->length(); i++) {\n-      if (arg_val <= size_table->element_value(i).as_int()) {\n+    for (int i = 0; i < (int)(sizeof(SIZE_TABLE) \/ sizeof(SIZE_TABLE[0])); i++) {\n+      if (arg_val <= SIZE_TABLE[i]) {\n@@ -1227,1 +1189,1 @@\n-  RegionNode *final_merge = new RegionNode(3);\n+  RegionNode* final_merge = new RegionNode(3);\n@@ -1231,0 +1193,4 @@\n+  Node* final_mem = new PhiNode(final_merge, Type::MEMORY, TypePtr::BOTTOM);\n+  kit.gvn().set_type(final_mem, Type::MEMORY);\n+  Node* final_io = new PhiNode(final_merge, Type::ABIO);\n+  kit.gvn().set_type(final_io, Type::ABIO);\n@@ -1238,0 +1204,2 @@\n+  final_mem->init_req(1, kit.merged_memory());\n+  final_io->init_req(1, kit.i_o());\n@@ -1243,0 +1211,2 @@\n+    final_mem->init_req(2, C->top());\n+    final_io->init_req(2, C->top());\n@@ -1244,1 +1214,0 @@\n-\n@@ -1268,0 +1237,18 @@\n+    \/\/ int[] sizeTable = new int[10];\n+    \/\/ sizeTable[0] = 9;\n+    \/\/ sizeTable[1] = 99;\n+    \/\/ ...\n+    \/\/ sizeTable[9] = Integer.MAX_VALUE\n+    Node* sizeTable = NULL;\n+    {\n+      PreserveReexecuteState preexces(&kit);\n+      kit.jvms()->set_should_reexecute(true);\n+      Node* array_klass = __ makecon(TypeKlassPtr::make(ciTypeArrayKlass::make(T_INT)));\n+      sizeTable = kit.new_array(array_klass, __ intcon(10), 1);\n+    }\n+    for (int i = 0; i < 10; i++) {\n+      Node* elem = kit.array_element_address(sizeTable, __ intcon(i), T_INT);\n+      __ store_to_memory(kit.control(), elem, __ intcon(SIZE_TABLE[i]), T_INT,\n+                        TypeAryPtr::INTS, MemNode::unordered);\n+    }\n+\n@@ -1284,1 +1271,0 @@\n-    Node* sizeTable = fetch_static_field(kit, size_table_field);\n@@ -1303,0 +1289,2 @@\n+    final_mem->init_req(2, kit.reset_memory());\n+    final_io->init_req(2, kit.i_o());\n@@ -1306,0 +1294,3 @@\n+  kit.set_all_memory(final_mem);\n+  kit.set_i_o(final_io);\n+\n@@ -1308,1 +1299,2 @@\n-\n+  C->record_for_igvn(final_mem);\n+  C->record_for_igvn(final_io);\n@@ -1817,0 +1809,4 @@\n+  Node* overflow_mem = new PhiNode(overflow, Type::MEMORY, TypePtr::BOTTOM);\n+  kit.gvn().set_type(overflow_mem, Type::MEMORY);\n+  Node* overflow_io = new PhiNode(overflow, Type::ABIO);\n+  kit.gvn().set_type(overflow_io, Type::ABIO);\n@@ -1989,0 +1985,2 @@\n+      overflow_mem->set_req(argi, kit.merged_memory());\n+      overflow_io->set_req(argi, kit.i_o());\n@@ -1996,0 +1994,2 @@\n+    kit.set_all_memory(overflow_mem);\n+    kit.set_i_o(overflow_io);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,0 @@\n-  \/\/ Integer.sizeTable - used for int to String conversion\n-  ciField* size_table_field;\n-\n@@ -62,3 +59,0 @@\n-  \/\/ Load the value of a static field, performing any constant folding.\n-  Node* fetch_static_field(GraphKit& kit, ciField* field);\n-\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -532,4 +532,0 @@\n-    \/\/ Left here for compatibility reasons, see JDK-8143900.\n-    static final int [] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999,\n-                                      99999999, 999999999, Integer.MAX_VALUE };\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}