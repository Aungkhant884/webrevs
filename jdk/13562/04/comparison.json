{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.foreign.layout.ValueLayouts;\n@@ -38,0 +39,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -51,0 +53,1 @@\n+import java.util.List;\n@@ -72,0 +75,1 @@\n+        function = stripNames(function);\n@@ -91,0 +95,1 @@\n+        function = stripNames(function);\n@@ -177,0 +182,26 @@\n+    private static MemoryLayout stripNames(MemoryLayout ml) {\n+        \/\/ we don't care about transferring alignment and byte order here\n+        \/\/ since the linker already restricts those such that they will always be the same\n+        return switch (ml) {\n+            case StructLayout sl -> MemoryLayout.structLayout(stripNames(sl.memberLayouts()));\n+            case UnionLayout ul -> MemoryLayout.unionLayout(stripNames(ul.memberLayouts()));\n+            case SequenceLayout sl -> MemoryLayout.sequenceLayout(sl.elementCount(), stripNames(sl.elementLayout()));\n+            case AddressLayout al -> al.targetLayout()\n+                    .map(tl -> al.withoutName().withTargetLayout(stripNames(tl)))\n+                    .orElseGet(al::withoutName);\n+            default -> ml.withoutName(); \/\/ ValueLayout and PaddingLayout\n+        };\n+    }\n+\n+    private static MemoryLayout[] stripNames(List<MemoryLayout> layouts) {\n+        return layouts.stream()\n+                .map(AbstractLinker::stripNames)\n+                .toArray(MemoryLayout[]::new);\n+    }\n+\n+    private static FunctionDescriptor stripNames(FunctionDescriptor function) {\n+        return function.returnLayout()\n+                .map(rl -> FunctionDescriptor.of(stripNames(rl), stripNames(function.argumentLayouts())))\n+                .orElseGet(() -> FunctionDescriptor.ofVoid(stripNames(function.argumentLayouts())));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+import static java.lang.foreign.MemoryLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n+import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n+import static org.testng.Assert.assertSame;\n@@ -42,2 +46,4 @@\n-    @Test\n-    public void testLinkerOptionsCache() {\n+    record LinkRequest(FunctionDescriptor descriptor, Linker.Option... options) {}\n+\n+    @Test(dataProvider = \"notSameCases\")\n+    public void testLinkerOptionsCache(LinkRequest l1, LinkRequest l2) {\n@@ -45,3 +51,2 @@\n-        FunctionDescriptor descriptor = FunctionDescriptor.ofVoid(C_INT, C_INT);\n-        MethodHandle mh1 = linker.downcallHandle(descriptor);\n-        MethodHandle mh2 = linker.downcallHandle(descriptor, Linker.Option.firstVariadicArg(1));\n+        MethodHandle mh1 = linker.downcallHandle(l1.descriptor(), l1.options());\n+        MethodHandle mh2 = linker.downcallHandle(l2.descriptor(), l2.options());\n@@ -52,0 +57,49 @@\n+    @DataProvider\n+    public static Object[][] notSameCases() {\n+        FunctionDescriptor fd_II_V = FunctionDescriptor.ofVoid(C_INT, C_INT);\n+        return new Object[][]{\n+            {new LinkRequest(fd_II_V), new LinkRequest(fd_II_V, Linker.Option.firstVariadicArg(1))},\n+            {new LinkRequest(FunctionDescriptor.ofVoid(JAVA_SHORT)), new LinkRequest(FunctionDescriptor.ofVoid(JAVA_CHAR))},\n+            {new LinkRequest(FunctionDescriptor.ofVoid(JAVA_SHORT)), new LinkRequest(FunctionDescriptor.ofVoid(JAVA_CHAR))},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"namedDescriptors\")\n+    public void testNamedLinkerCache(FunctionDescriptor f1, FunctionDescriptor f2) {\n+        Linker linker = Linker.nativeLinker();\n+        MethodHandle mh1 = linker.downcallHandle(f1);\n+        MethodHandle mh2 = linker.downcallHandle(f2);\n+        \/\/ assert that these are the same link request, even though layout names differ\n+        assertSame(mh1, mh2);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] namedDescriptors() {\n+        return new Object[][]{\n+            { FunctionDescriptor.ofVoid(C_INT),\n+                    FunctionDescriptor.ofVoid(C_INT.withName(\"x\")) },\n+            { FunctionDescriptor.ofVoid(structLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(structLayout(C_INT).withName(\"x\")) },\n+            { FunctionDescriptor.ofVoid(structLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(structLayout(C_INT.withName(\"x\"))) },\n+            { FunctionDescriptor.ofVoid(structLayout(C_INT, paddingLayout(32), C_LONG_LONG)),\n+                    FunctionDescriptor.ofVoid(structLayout(C_INT, paddingLayout(32), C_LONG_LONG.withName(\"x\"))) },\n+            { FunctionDescriptor.ofVoid(structLayout(C_INT, paddingLayout(32), C_LONG_LONG)),\n+                    FunctionDescriptor.ofVoid(structLayout(C_INT, paddingLayout(32).withName(\"x\"), C_LONG_LONG)) },\n+            { FunctionDescriptor.ofVoid(structLayout(sequenceLayout(1, C_INT))),\n+                    FunctionDescriptor.ofVoid(structLayout(sequenceLayout(1, C_INT).withName(\"x\"))) },\n+            { FunctionDescriptor.ofVoid(structLayout(sequenceLayout(1, C_INT))),\n+                    FunctionDescriptor.ofVoid(structLayout(sequenceLayout(1, C_INT.withName(\"x\")))) },\n+            { FunctionDescriptor.ofVoid(unionLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(unionLayout(C_INT).withName(\"x\")) },\n+            { FunctionDescriptor.ofVoid(unionLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(unionLayout(C_INT.withName(\"x\"))) },\n+            { FunctionDescriptor.ofVoid(C_POINTER),\n+                    FunctionDescriptor.ofVoid(C_POINTER.withName(\"x\")) },\n+            { FunctionDescriptor.ofVoid(C_POINTER.withTargetLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(C_POINTER.withTargetLayout(C_INT.withName(\"x\"))) },\n+            { FunctionDescriptor.ofVoid(C_POINTER.withTargetLayout(C_INT)),\n+                    FunctionDescriptor.ofVoid(C_POINTER.withName(\"x\").withTargetLayout(C_INT.withName(\"x\"))) },\n+        };\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"}]}