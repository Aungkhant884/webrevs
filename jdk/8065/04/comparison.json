{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,7 @@\n+ * There used to be a finalize() implementation that sent close_notify's, but\n+ * decided that was not needed.  Not closing properly is more properly an\n+ * error condition that should be avoided.  Applications should close sockets\n+ * and not rely on garbage collection.\n+ *\n+ * The underlying native resources are handled by the Socket Cleaner.\n+ *\n@@ -265,31 +272,0 @@\n-    \/**\n-     * Ensures that the SSL connection is closed down as cleanly\n-     * as possible, in case the application forgets to do so.\n-     * This allows SSL connections to be implicitly reclaimed,\n-     * rather than forcing them to be explicitly reclaimed at\n-     * the penalty of prematurly killing SSL sessions.\n-     *\/\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    protected final void finalize() throws Throwable {\n-        try {\n-            close();\n-        } catch (IOException e1) {\n-            try {\n-                if (self == this) {\n-                    super.close();\n-                }\n-            } catch (IOException e2) {\n-                \/\/ ignore\n-            }\n-        } finally {\n-            \/\/ We called close on the underlying socket above to\n-            \/\/ make doubly sure all resources got released.  We\n-            \/\/ don't finalize self in the case of overlain sockets,\n-            \/\/ that's a different object which the GC will finalize\n-            \/\/ separately.\n-\n-            super.finalize();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/BaseSSLSocketImpl.java","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"}]}