{"files":[{"patch":"@@ -1638,1 +1638,1 @@\n-                                           bool is_double, bool is_min) {\n+                                           bool is_double, bool is_min, int length_in_bytes) {\n@@ -1642,1 +1642,6 @@\n-  vsetvli(t0, x0, is_double ? Assembler::e64 : Assembler::e32);\n+  if (length_in_bytes != MaxVectorSize) {\n+    mv(t0, length_in_bytes \/ type2aelembytes(is_double ? T_DOUBLE : T_FLOAT));\n+    vsetvli(t0, t0, is_double ? Assembler::e64 : Assembler::e32);\n+  } else {\n+    vsetvli(t0, x0, is_double ? Assembler::e64 : Assembler::e32);\n+  }\n@@ -1675,1 +1680,1 @@\n-                                            BasicType bt, int opc) {\n+                                            BasicType bt, int opc, int length_in_bytes) {\n@@ -1679,1 +1684,6 @@\n-  vsetvli(t0, x0, sew);\n+  if (length_in_bytes != MaxVectorSize) {\n+    mv(t0, length_in_bytes \/ type2aelembytes(bt));\n+    vsetvli(t0, t0, sew);\n+  } else {\n+    vsetvli(t0, x0, sew);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-                         bool is_double, bool is_min);\n+                         bool is_double, bool is_min, int length_in_bytes);\n@@ -197,1 +197,1 @@\n-                          BasicType bt, int opc);\n+                          BasicType bt, int opc, int length_in_bytes);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1939,0 +1939,1 @@\n+\n@@ -1943,4 +1944,1 @@\n-  if (bt == T_BYTE) {\n-    \/\/ To support vector api shuffle\/rearrange.\n-    size = 4;\n-  } else if (bt == T_BOOLEAN) {\n+  if (bt == T_BOOLEAN) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -831,1 +831,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -847,1 +848,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -867,1 +869,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -883,1 +886,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -903,1 +907,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -919,1 +924,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -939,1 +945,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -955,1 +962,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -968,1 +976,7 @@\n-    __ vsetvli(t0, x0, Assembler::e32);\n+    int length_in_bytes = Matcher::vector_length_in_bytes(this, $src2);\n+    if (length_in_bytes != MaxVectorSize) {\n+      __ mv(t0, length_in_bytes \/ type2aelembytes(T_FLOAT));\n+      __ vsetvli(t0, t0, Assembler::e32);\n+    } else {\n+      __ vsetvli(t0, x0, Assembler::e32);\n+    }\n@@ -985,1 +999,7 @@\n-    __ vsetvli(t0, x0, Assembler::e64);\n+    int length_in_bytes = Matcher::vector_length_in_bytes(this, $src2);\n+    if (length_in_bytes != MaxVectorSize) {\n+      __ mv(t0, length_in_bytes \/ type2aelembytes(T_DOUBLE));\n+      __ vsetvli(t0, t0, Assembler::e64);\n+    } else {\n+      __ vsetvli(t0, x0, Assembler::e64);\n+    }\n@@ -1007,1 +1027,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -1021,1 +1042,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -1039,1 +1061,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -1053,1 +1076,2 @@\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt, this->ideal_Opcode());\n+                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n@@ -1070,1 +1094,1 @@\n-                          false \/* is_double *\/, false \/* is_min *\/);\n+                          false \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n@@ -1085,1 +1109,1 @@\n-                          true \/* is_double *\/, false \/* is_min *\/);\n+                          true \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n@@ -1102,1 +1126,1 @@\n-                          false \/* is_double *\/, true \/* is_min *\/);\n+                          false \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n@@ -1117,1 +1141,1 @@\n-                          true \/* is_double *\/, true \/* is_min *\/);\n+                          true \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":42,"deletions":18,"binary":false,"changes":60,"status":"modified"}]}