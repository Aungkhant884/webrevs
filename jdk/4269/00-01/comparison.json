{"files":[{"patch":"@@ -155,0 +155,4 @@\n+    \/\/ Ignore cached subklass_false case.\n+    \/\/ It could be invalidated by concurrent class loading and\n+    \/\/ can result in type paradoxes during compilation when\n+    \/\/ a subclass is observed, but has_subklass() returns false.\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,5 +81,4 @@\n-#ifdef ASSERT\n-  if (that->is_instance_klass() && !that->is_interface()) {\n-    assert(!is_subtype || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n-  }\n-#endif \/\/ ASSERT\n+  \/\/ Ensure consistency with ciInstanceKlass::has_subklass().\n+  assert(!that->is_instance_klass() || \/\/ array klasses are irrelevant\n+          that->is_interface()      || \/\/ has_subklass is always false for interfaces\n+         !is_subtype || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n@@ -104,5 +103,4 @@\n-#ifdef ASSERT\n-  if (that->is_instance_klass() && !that->is_interface()) {\n-    assert(!is_subclass || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n-  }\n-#endif \/\/ ASSERT\n+  \/\/ Ensure consistency with ciInstanceKlass::has_subklass().\n+  assert(!that->is_instance_klass() || \/\/ array klasses are irrelevant\n+          that->is_interface()      || \/\/ has_subklass is always false for interfaces\n+         !is_subclass || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"}]}