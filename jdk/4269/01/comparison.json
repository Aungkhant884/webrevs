{"files":[{"patch":"@@ -155,7 +155,6 @@\n-    if (_has_subklass == subklass_unknown ||\n-        (_is_shared && _has_subklass == subklass_false)) {\n-      if (flags().is_final()) {\n-        return false;\n-      } else {\n-        return compute_shared_has_subklass();\n-      }\n+    \/\/ Ignore cached subklass_false case.\n+    \/\/ It could be invalidated by concurrent class loading and\n+    \/\/ can result in type paradoxes during compilation when\n+    \/\/ a subclass is observed, but has_subklass() returns false.\n+    if (_has_subklass == subklass_true) {\n+      return true;\n@@ -163,1 +162,4 @@\n-    return _has_subklass == subklass_true;\n+    if (flags().is_final()) {\n+      return false;\n+    }\n+    return compute_shared_has_subklass();\n@@ -165,0 +167,1 @@\n+\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -78,4 +78,2 @@\n-  VM_ENTRY_MARK;\n-  Klass* this_klass = get_Klass();\n-  Klass* that_klass = that->get_Klass();\n-  bool result = this_klass->is_subtype_of(that_klass);\n+  bool is_subtype;\n+  GUARDED_VM_ENTRY(is_subtype = get_Klass()->is_subtype_of(that->get_Klass());)\n@@ -83,1 +81,6 @@\n-  return result;\n+  \/\/ Ensure consistency with ciInstanceKlass::has_subklass().\n+  assert(!that->is_instance_klass() || \/\/ array klasses are irrelevant\n+          that->is_interface()      || \/\/ has_subklass is always false for interfaces\n+         !is_subtype || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n+\n+  return is_subtype;\n@@ -92,1 +95,14 @@\n-  GUARDED_VM_ENTRY(return get_Klass()->is_subclass_of(that->get_Klass());)\n+  \/\/ Check to see if the klasses are identical.\n+  if (this == that) {\n+    return true;\n+  }\n+\n+  bool is_subclass;\n+  GUARDED_VM_ENTRY(is_subclass = get_Klass()->is_subclass_of(that->get_Klass());)\n+\n+  \/\/ Ensure consistency with ciInstanceKlass::has_subklass().\n+  assert(!that->is_instance_klass() || \/\/ array klasses are irrelevant\n+          that->is_interface()      || \/\/ has_subklass is always false for interfaces\n+         !is_subclass || that->as_instance_klass()->has_subklass(), \"inconsistent\");\n+\n+  return is_subclass;\n@@ -154,0 +170,1 @@\n+    assert(this->is_subtype_of(that), \"sanity\");\n@@ -157,0 +174,1 @@\n+    assert(that->is_subtype_of(this), \"sanity\");\n@@ -164,0 +182,1 @@\n+  assert(this->is_subtype_of(result) && that->is_subtype_of(result), \"sanity\");\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"}]}