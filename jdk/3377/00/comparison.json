{"files":[{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/objArrayOop.hpp\"\n@@ -491,1 +492,1 @@\n-const char* JfrJavaSupport::c_str(jstring string, Thread* t) {\n+const char* JfrJavaSupport::c_str(oop string, Thread* t) {\n@@ -493,6 +494,2 @@\n-  if (string == NULL) {\n-    return NULL;\n-  }\n-  const char* temp = NULL;\n-  const oop java_string = resolve_non_null(string);\n-  const typeArrayOop value = java_lang_String::value(java_string);\n+  char* resource_copy = NULL;\n+  const typeArrayOop value = java_lang_String::value(string);\n@@ -500,5 +497,5 @@\n-    const size_t length = java_lang_String::utf8_length(java_string, value);\n-    temp = NEW_RESOURCE_ARRAY_IN_THREAD(t, const char, (length + 1));\n-    if (temp == NULL) {\n-       JfrJavaSupport::throw_out_of_memory_error(\"Unable to allocate thread local native memory\", t);\n-       return NULL;\n+    const int length = java_lang_String::utf8_length(string, value);\n+    resource_copy = NEW_RESOURCE_ARRAY_IN_THREAD(t, char, (length + 1));\n+    if (resource_copy == NULL) {\n+      JfrJavaSupport::throw_out_of_memory_error(\"Unable to allocate thread local native memory\", t);\n+      return NULL;\n@@ -506,2 +503,2 @@\n-    assert(temp != NULL, \"invariant\");\n-    java_lang_String::as_utf8_string(java_string, value, const_cast<char*>(temp), (int) length + 1);\n+    assert(resource_copy != NULL, \"invariant\");\n+    java_lang_String::as_utf8_string(string, value, resource_copy, length + 1);\n@@ -509,1 +506,7 @@\n-  return temp;\n+  return resource_copy;\n+}\n+\n+\/\/ caller needs ResourceMark\n+const char* JfrJavaSupport::c_str(jstring string, Thread* t) {\n+  DEBUG_ONLY(check_java_thread_in_vm(t));\n+  return string != NULL ? c_str(resolve_non_null(string), t) : NULL;\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+  static const char* c_str(oop string, Thread* t);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -261,0 +261,4 @@\n+JVM_ENTRY_NO_ENV(void, jfr_log_event(JNIEnv* env, jobject jvm, jint level, jobjectArray lines, jboolean system))\n+  JfrJavaLog::log_event(env, level, lines, system == JNI_TRUE, thread);\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+void JNICALL jfr_log_event(JNIEnv* env, jobject jvm, jint level, jobjectArray lines, jboolean system);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+      (char*)\"logEvent\", (char*)\"(I[Ljava\/lang\/String;Z)V\", (void*)jfr_log_event,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -159,1 +159,0 @@\n-  log_trace(jfr, event)(\"Reporting network utilization\");\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNetworkUtilization.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"logging\/logMessage.hpp\"\n@@ -32,0 +33,2 @@\n+#include \"oops\/objArrayOop.hpp\"\n+#include \"oops\/objArrayOop.inline.hpp\"\n@@ -122,0 +125,32 @@\n+void JfrJavaLog::log_event(JNIEnv* env, jint level, jobjectArray lines, bool system, TRAPS) {\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));\n+  if (lines == NULL) {\n+    return;\n+  }\n+  if (level < (jint)LogLevel::First || level > (jint)LogLevel::Last) {\n+    JfrJavaSupport::throw_illegal_argument_exception(\"LogLevel passed is outside valid range\", THREAD);\n+    return;\n+  }\n+\n+  objArrayOop the_lines = objArrayOop(JfrJavaSupport::resolve_non_null(lines));\n+  assert(the_lines != NULL, \"invariant\");\n+  assert(the_lines->is_array(), \"must be array\");\n+  const int length = the_lines->length();\n+\n+  ResourceMark rm(THREAD);\n+  LogMessage(jfr, event) jfr_event;\n+  LogMessage(jfr, system, event) jfr_event_system;\n+  for (int i = 0; i < length; ++i) {\n+    const char* text = JfrJavaSupport::c_str(the_lines->obj_at(i), THREAD);\n+    if (text == NULL) {\n+      \/\/ An oome has been thrown and is pending.\n+      return;\n+    }\n+    if (system) {\n+      jfr_event_system.write((LogLevelType)level, \"%s\", text);\n+    } else {\n+      jfr_event.write((LogLevelType)level, \"%s\", text);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrJavaLog.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  static void log_event(JNIEnv* env, jint level, jobjectArray lines, bool system, TRAPS);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrJavaLog.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"filename":"src\/jdk.jfr.zip","binary":true,"status":"added"},{"patch":"@@ -191,0 +191,11 @@\n+    \/**\n+     * Log an event to jfr+event or jfr+event+system.\n+     * <p>\n+     * Caller should ensure that message is not null or too large to handle.\n+     *\n+     * @param level log level\n+     * @param lines lines to log\n+     * @param system if lines should be written to jfr+event+system\n+     *\/\n+    public static native void logEvent(int level, String[] lines, boolean system);\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -98,1 +98,10 @@\n-}\n+\n+    public LogLevel level() {\n+        for (LogLevel l : LogLevel.values()) {\n+            if (l.level == tagSetLevel) {\n+                return l;\n+            }\n+        }\n+        return LogLevel.WARN; \/\/ default\n+    }\n+ }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/LogTag.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Arrays;\n+\n@@ -35,1 +37,2 @@\n-    private static final int MAX_SIZE = 10000;\n+    private static final int MAX_SIZE = 10_000;\n+    private static final int MAX_EVENT_SIZE = 100_000;\n@@ -48,0 +51,19 @@\n+    public static void logEvent(LogLevel logLevel, String[] lines, boolean system) {\n+        if (lines == null || lines.length == 0) {\n+            return;\n+        }\n+        if (shouldLog(LogTag.JFR_EVENT, logLevel) || shouldLog(LogTag.JFR_SYSTEM_EVENT, logLevel)) {\n+            int size = 0;\n+            for (int i = 0; i < lines.length; i++) {\n+                String line = lines[i];\n+                if (size + line.length() > MAX_EVENT_SIZE) {\n+                    lines = Arrays.copyOf(lines, i + 1);\n+                    lines[i] = \"...\";\n+                    break;\n+                }\n+                size+=line.length();\n+            }\n+            JVM.logEvent(logLevel.level, lines, system);\n+        }\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Logger.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private final boolean  isJDK;\n+    private final boolean isJDK;\n@@ -191,0 +191,4 @@\n+    public boolean isSystem() {\n+        return isJVM || isJDK;\n+    }\n+\n@@ -288,1 +292,1 @@\n-            LogTag logTag = isJVM() || isJDK() ? LogTag.JFR_SYSTEM_EVENT : LogTag.JFR_EVENT;\n+            LogTag logTag = isSystem() ? LogTag.JFR_SYSTEM_METADATA : LogTag.JFR_METADATA;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import jdk.jfr.internal.consumer.EventLog;\n@@ -65,1 +66,1 @@\n-    private final List<PlatformRecording> recordings = new ArrayList<>();\n+    private final ArrayList<PlatformRecording> recordings = new ArrayList<>();\n@@ -248,0 +249,3 @@\n+                if (EventLog.shouldLog()) {\n+                    EventLog.start();\n+                }\n@@ -262,0 +266,3 @@\n+                if (EventLog.shouldLog()) {\n+                    EventLog.start();\n+                }\n@@ -350,0 +357,3 @@\n+        if (!isToDisk()) {\n+            EventLog.stop();\n+        }\n@@ -479,0 +489,3 @@\n+                if (isToDisk()) {\n+                    EventLog.update();\n+                }\n@@ -486,0 +499,12 @@\n+    private boolean isToDisk() {\n+        \/\/ Use indexing to avoid Iterator allocation if nothing happens\n+        int count = recordings.size();\n+        for (int i = 0; i < count; i++) {\n+            PlatformRecording r = recordings.get(0);\n+            if (r.isToDisk() && r.getState() == RecordingState.RUNNING) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-                    if (Logger.shouldLog(LogTag.JFR_SYSTEM_EVENT, LogLevel.DEBUG)) {\n-                        Logger.log(LogTag.JFR_SYSTEM_EVENT, LogLevel.DEBUG, \"Executed periodic hook for \" + type.getLogName());\n+                    if (Logger.shouldLog(LogTag.JFR_SYSTEM, LogLevel.DEBUG)) {\n+                        Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, \"Executed periodic hook for \" + type.getLogName());\n@@ -79,1 +79,1 @@\n-                Logger.log(LogTag.JFR_SYSTEM_EVENT, LogLevel.WARN, \"Exception occurred during execution of period hook for \" + type.getLogName());\n+                Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Exception occurred during execution of period hook for \" + type.getLogName());\n@@ -140,2 +140,2 @@\n-        if (type.isJDK() || type.isJVM()) {\n-            Logger.log(LogTag.JFR_SYSTEM_EVENT, LogLevel.INFO, action + \" periodic hook for \" + type.getLogName());\n+        if (type.isSystem()) {\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.INFO, action + \" periodic hook for \" + type.getLogName());\n@@ -143,1 +143,1 @@\n-            Logger.log(LogTag.JFR_EVENT, LogLevel.INFO, action + \" periodic hook for \" + type.getLogName());\n+            Logger.log(LogTag.JFR, LogLevel.INFO, action + \" periodic hook for \" + type.getLogName());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RequestEngine.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-    static void setDaemonThread(Thread t, boolean daemon) {\n+    public static void setDaemonThread(Thread t, boolean daemon) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,2 @@\n+    private boolean daemon = false;\n+\n@@ -104,0 +106,5 @@\n+    \/\/ Only used if -Xlog:jfr+event* is specified\n+    public final void setDaemon(boolean daemon) {\n+        this.daemon = daemon;\n+    }\n+\n@@ -222,0 +229,1 @@\n+        SecuritySupport.setDaemonThread(thread, daemon);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/AbstractEventStream.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.consumer;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import jdk.jfr.EventType;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.consumer.EventStream;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.internal.LogLevel;\n+import jdk.jfr.internal.LogTag;\n+import jdk.jfr.internal.Logger;\n+import jdk.jfr.internal.PlatformEventType;\n+import jdk.jfr.internal.PrivateAccess;\n+import jdk.jfr.internal.tool.PrettyWriter;\n+\n+\n+public final class EventLog {\n+    private static final class LogWriter extends Writer {\n+        private final StringBuilder builder = new StringBuilder();\n+        private LogLevel level = LogLevel.WARN;\n+        private boolean system;\n+\n+        public void setSystem(boolean system) {\n+            this.system = system;\n+        }\n+\n+        public void setLevel(LogLevel level) {\n+            this.level = level;\n+        }\n+\n+        @Override\n+        public void write(char[] buffer, int off, int len) throws IOException {\n+            builder.append(buffer, off, len);\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+            String[] lines = builder.toString().split(\"\\n\");\n+            builder.setLength(0);\n+            Logger.logEvent(level, lines, system);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            \/\/ ignore\n+        }\n+    }\n+\n+    private static EventStream logStream;\n+    private static PrettyWriter prettyWriter;\n+    private static LogWriter logWriter;\n+    private static Set<Long> systemEventLookup;\n+\n+    \/\/ 1) At least one disk recording must be running\n+    \/\/    before calling this method\n+    \/\/ 2) Caller must hold PlatformRecorder lock\n+    public static void update() {\n+        boolean shouldLog = shouldLog();\n+        if (shouldLog && !isLogging()) {\n+            start();\n+            return;\n+        }\n+        if (!shouldLog && isLogging()) {\n+            stop();\n+            return;\n+        }\n+    }\n+\n+    \/\/ 1) At least one disk recording must be running\n+    \/\/    before calling this method\n+    \/\/ 2) Caller must hold PlatformRecorder lock\n+    public static void start() {\n+        if (logStream != null) {\n+            return;\n+        }\n+        try {\n+            ensureSystemEventLookup();\n+            logStream = EventStream.openRepository();\n+            ((AbstractEventStream)logStream).setDaemon(true);\n+            logStream.onEvent(EventLog::log);\n+            logWriter = new LogWriter();\n+            prettyWriter = new PrettyWriter(new PrintWriter(logWriter));\n+            prettyWriter.setLineSeparator(\"\\n\");\n+            logStream.startAsync();\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, \"Log stream started\");\n+        } catch (Exception e) {\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Unable to print events to the log\");\n+        }\n+    }\n+\n+    \/\/ Caller must hold PlatformRecorder lock\n+    public static void stop() {\n+        if (logStream == null) {\n+            return;\n+        }\n+        try {\n+            logStream.close();\n+            logStream = null;\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, \"Log stream stopped\");\n+        } catch (Exception e) {\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Unable to stop printing events to the log\");\n+        }\n+    }\n+\n+    public static boolean shouldLog() {\n+        if (Logger.shouldLog(LogTag.JFR_EVENT, LogLevel.DEBUG)) {\n+            return true;\n+        }\n+        if (Logger.shouldLog(LogTag.JFR_SYSTEM_EVENT, LogLevel.DEBUG)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static void log(RecordedEvent event) {\n+        boolean system = isSystemEvent(event);\n+        LogTag tag = system ? LogTag.JFR_SYSTEM_EVENT : LogTag.JFR_EVENT;\n+        LogLevel level = tag.level();\n+        if (Logger.shouldLog(tag, LogLevel.TRACE)) {\n+            log(event, 64, level, system);\n+            return;\n+        }\n+\n+        if (Logger.shouldLog(tag, LogLevel.DEBUG)) {\n+            log(event, 5, level, system);\n+            return;\n+        }\n+    }\n+\n+    private static void log(RecordedEvent event, int stackDepth, LogLevel level, boolean system) {\n+        logWriter.setSystem(system);\n+        logWriter.setLevel(level);\n+        prettyWriter.setStackDepth(stackDepth);\n+        prettyWriter.print(event);\n+        prettyWriter.flush(true);\n+        try {\n+            logWriter.flush();\n+        } catch (IOException e) {\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Unable to print event to the log\");\n+        }\n+    }\n+\n+    private static boolean isSystemEvent(RecordedEvent event) {\n+        return systemEventLookup.contains(event.getEventType().getId());\n+    }\n+\n+    \/\/ The file format doesn't contains information if an event is\n+    \/\/ from the JDK\/JVM, besides the prefix \"jdk.\" which is not reliable\n+    \/\/ Therefore, create a lookup by event type ID to see if is a JDK\/JVM event.\n+    private static void ensureSystemEventLookup() {\n+        if (systemEventLookup == null) {\n+            systemEventLookup = new HashSet<>();\n+            for (EventType type : FlightRecorder.getFlightRecorder().getEventTypes()) {\n+                PlatformEventType pe = PrivateAccess.getInstance().getPlatformEventType(type);\n+                if (pe.isSystem()) {\n+                    systemEventLookup.add(pe.getId());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isLogging() {\n+        return logStream != null;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventLog.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"},{"patch":"@@ -31,2 +31,0 @@\n-    private static final String LINE_SEPARATOR = String.format(\"%n\");\n-\n@@ -41,0 +39,1 @@\n+    private String lineSeparator = String.format(\"%n\");\n@@ -46,0 +45,4 @@\n+    public void setLineSeparator(String lineSeparator) {\n+        this.lineSeparator = lineSeparator;\n+    }\n+\n@@ -70,1 +73,1 @@\n-        builder.append(LINE_SEPARATOR);\n+        builder.append(lineSeparator);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/StructuredWriter.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/\/ Helper class for analyzing log output from a live process\n+public class LogAnalyzer {\n+    private final Path path;\n+\n+    public LogAnalyzer(String filename) throws IOException {\n+        this.path = Path.of(filename);\n+    }\n+\n+    public void shouldNotContain(String text) throws Exception {\n+        System.out.println(\"Should not contain: '\" + text + \"'\");\n+        while (true) {\n+            try {\n+                for (String line : Files.readAllLines(path)) {\n+                    if (line.contains(text)) {\n+                        throw new Exception(\"Found unexpected log message: \" + line);\n+                    }\n+                }\n+                return;\n+            } catch (IOException e) {\n+                System.out.println(\"Could not read log file \" + path.toAbsolutePath());\n+                e.printStackTrace();\n+            }\n+            Thread.sleep(100);\n+        }\n+    }\n+\n+    public void await(String text) throws InterruptedException {\n+        System.out.println(\"Awaiting... '\" + text + \"' \");\n+        while (true) {\n+            try {\n+                for (String line : Files.readAllLines(path)) {\n+                    if (line.contains(text)) {\n+                        System.out.println(\"Found!\");\n+                        return;\n+                    }\n+                }\n+            } catch (IOException e) {\n+                System.out.println(\"Could not read log file \" + path.toAbsolutePath());\n+                e.printStackTrace();\n+            }\n+            Thread.sleep(100);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/LogAnalyzer.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that the event payload is printed when using\n+ *          -Xlog:jfr+event=trace\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event=trace:file=test-content.log\n+ *      jdk.jfr.api.consumer.log.TestContent\n+ *\/\n+public class TestContent {\n+\n+    public static class ApplicationEvent extends Event {\n+        int value;\n+        String text;\n+        boolean truth;\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        FlightRecorder.addPeriodicEvent(ApplicationEvent.class, () -> {\n+            ApplicationEvent e = new ApplicationEvent();\n+            e.value = 4711;\n+            e.text = \"hello, world!\";\n+            e.truth = true;\n+            e.commit();\n+        });\n+        LogAnalyzer la = new LogAnalyzer(\"test-content.log\");\n+        try (Recording r = new Recording()) {\n+            r.enable(ApplicationEvent.class).withPeriod(Duration.ofSeconds(1));\n+            r.start();\n+            la.await(\"value = 4711\");\n+            la.await(\"text = \\\"hello, world!\\\"\");\n+            la.await(\"truth = true\");\n+            r.stop();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestContent.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that event logging can't be turned on and off\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=debug,jfr+system=debug:file=disk-on-off.log\n+ *      jdk.jfr.api.consumer.log.TestDiskOnOff\n+ *\/\n+public class TestDiskOnOff {\n+\n+    public static void main(String... args) throws Exception {\n+        LogAnalyzer la = new LogAnalyzer(\"disk-on-off.log\");\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            la.await(\"Log stream started\");\n+        }\n+        la.await(\"Log stream stopped\");\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            la.await(\"Log stream started\");\n+        }\n+        la.await(\"Log stream stopped\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestDiskOnOff.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary Tests that log responds to log level changes after JVM has\n+ *          started\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm jdk.jfr.api.consumer.log.TestDynamicStart\n+ *\/\n+public class TestDynamicStart {\n+    private static final String FILE = \"log.txt\";\n+\n+    static class UserEvent extends Event {\n+        String message;\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        FlightRecorder.addPeriodicEvent(UserEvent.class, () -> {\n+            UserEvent event = new UserEvent();\n+            event.message = \"Giraffe\";\n+            event.commit();\n+        });\n+        LogAnalyzer la = new LogAnalyzer(FILE);\n+        try (Recording r = new Recording()) {\n+            r.enable(UserEvent.class).withPeriod(Duration.ofSeconds(1));\n+            r.start();\n+            executeJcmd(\"VM.log what=jfr+event=debug,jfr+system=debug output=\" + FILE);\n+            la.await(\"Log stream started\");\n+            la.await(\"Giraffe\");\n+            r.stop();\n+            executeJcmd(\"VM.log what=jfr+event=warning output=\" + FILE);\n+            la.await(\"Log stream stopped\");\n+        }\n+    }\n+\n+    private static void executeJcmd(String cmd) {\n+        CommandExecutor executor = new PidJcmdExecutor();\n+        OutputAnalyzer oa = executor.execute(cmd);\n+        oa.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestDynamicStart.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that transition between disk=true\/false works\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=debug,jfr+system=debug:file=memory-disk.log\n+ *      jdk.jfr.api.consumer.log.TestMemoryDiskTransition\n+ *\/\n+public class TestMemoryDiskTransition {\n+\n+    public static void main(String... args) throws Exception {\n+        LogAnalyzer la = new LogAnalyzer(\"memory-disk.log\");\n+        try (Recording r1 = new Recording()) {\n+            r1.setToDisk(false);\n+            r1.start();\n+            la.shouldNotContain(\"Log stream started\");\n+            try (Recording r2 = new Recording()) {\n+                r2.setToDisk(true);\n+                r2.start(); \/\/ transition to disk\n+                la.shouldNotContain(\"Log stream stopped\");\n+                la.await(\"Log stream started\");\n+                r2.stop(); \/\/ transition back to memory\n+            }\n+            la.await(\"Log stream stopped\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestMemoryDiskTransition.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that a stream is not started if disk=false\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=debug,jfr+system=debug:file=memory-only.log\n+ *      jdk.jfr.api.consumer.log.TestMemoryOnly\n+ *\/\n+public class TestMemoryOnly {\n+\n+    public static void main(String... args) throws Exception {\n+        LogAnalyzer la = new LogAnalyzer(\"memory-only.log\");\n+        try (Recording r = new Recording()) {\n+            r.setToDisk(false);\n+            r.start();\n+            r.stop();\n+            la.shouldNotContain(\"Log stream started\");\n+        }\n+        la.shouldNotContain(\"Log stream stopped\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestMemoryOnly.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Period;\n+\n+\/**\n+ * @test\n+ * @summary Tests that only system events are emitted\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *     -Xlog:jfr+event+system=trace:file=system.log\n+ *     -XX:StartFlightRecording jdk.jfr.api.consumer.log.TestSystemEvents\n+ *\/\n+public class TestSystemEvents {\n+    \/\/ Testing with -XX:StartFlightRecording, since it's\n+    \/\/ a likely use case and there could be issues\n+    \/\/ with starting the stream before main.\n+    @Period(\"1 s\")\n+    static class UserEvent extends Event {\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        FlightRecorder.addPeriodicEvent(UserEvent.class, () -> {\n+            UserEvent e = new UserEvent();\n+            e.commit();\n+        });\n+        LogAnalyzer la = new LogAnalyzer(\"system.log\");\n+        la.await(\"CPULoad\"); \/\/ emitted 1\/s\n+        la.shouldNotContain(\"UserEvent\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestSystemEvents.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Period;\n+\n+\/**\n+ * @test\n+ * @summary Tests that only user events are emitted\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event=trace:file=user.log\n+ *      -XX:StartFlightRecording\n+ *      jdk.jfr.api.consumer.log.TestUserEvents\n+ *\/\n+public class TestUserEvents {\n+    \/\/ Testing with -XX:StartFlightRecording, since it's\n+    \/\/ a likely use case and there could be issues\n+    \/\/ with starting the stream before main.\n+    @Period(\"1 s\")\n+    static class UserEvent extends Event {\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        FlightRecorder.addPeriodicEvent(UserEvent.class, () -> {\n+            UserEvent e = new UserEvent();\n+            e.commit();\n+        });\n+        LogAnalyzer la = new LogAnalyzer(\"user.log\");\n+        la.await(\"UserEvent\");\n+        la.shouldNotContain(\"CPULoad\"); \/\/ Emitted 1\/s\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestUserEvents.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import java.io.Closeable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.jfr.Event;\n+\n+\/**\n+ * @test\n+ * @summary Tests output from various tag sets and levels\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=trace:file=trace.log\n+ *      -XX:StartFlightRecording\n+ *      jdk.jfr.api.consumer.log.TestVerbosity trace\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=debug:file=debug.log\n+ *      -XX:StartFlightRecording\n+ *      jdk.jfr.api.consumer.log.TestVerbosity debug\n+ * @run main\/othervm\n+ *      -Xlog:jfr+event*=info:file=info.log\n+ *      -XX:StartFlightRecording\n+ *      jdk.jfr.api.consumer.log.TestVerbosity info\n+ *\/\n+public class TestVerbosity {\n+\n+    static class UserEvent extends Event {\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        String level = args[0];\n+        var scheduler = Executors.newScheduledThreadPool(1);\n+        try (Closeable close = scheduler::shutdown) {\n+\n+            scheduler.scheduleAtFixedRate(() -> {\n+                method1();\n+            }, 0, 10, TimeUnit.MILLISECONDS);\n+\n+            LogAnalyzer la = new LogAnalyzer(level + \".log\");\n+            System.out.println(\"Testing log level: \" + level);\n+            if (level.equals(\"trace\")) {\n+                la.await(\"CPULoad\"); \/\/ Emitted 1\/s\n+                la.await(\"UserEvent\");\n+                la.await(\"method6\");\n+                la.await(\"method1\");\n+            }\n+            if (level.equals(\"debug\")) {\n+                la.await(\"CPULoad\");\n+                la.await(\"UserEvent\");\n+                la.await(\"method6\");\n+                la.shouldNotContain(\"method1\");\n+            }\n+            if (level.equals(\"info\")) {\n+                la.shouldNotContain(\"CPULoad\");\n+                la.shouldNotContain(\"UserEvent\");\n+            }\n+        }\n+    }\n+\n+    private static void method1() {\n+        method2();\n+    }\n+\n+    private static void method2() {\n+        method3();\n+    }\n+\n+    private static void method3() {\n+        method4();\n+    }\n+\n+    private static void method4() {\n+        method5();\n+    }\n+\n+    private static void method5() {\n+        method6();\n+    }\n+\n+    private static void method6() {\n+        UserEvent event = new UserEvent();\n+        event.commit();\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestVerbosity.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.api.consumer.log;\n+\n+import java.io.Closeable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.Name;\n+import jdk.jfr.consumer.RecordingStream;\n+\n+\/**\n+ * @test\n+ * @summary Checks that it is possible to stream together with log stream\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @build jdk.jfr.api.consumer.log.LogAnalyzer\n+ * @run main\/othervm -Xlog:jfr+event*=debug:file=with-streaming.log\n+ *      jdk.jfr.api.consumer.log.TestWithStreaming\n+ *\/\n+public class TestWithStreaming {\n+\n+    @Name(\"TwoStreams\")\n+    static class TwoStreams extends Event {\n+        String message;\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        LogAnalyzer la = new LogAnalyzer(\"with-streaming.log\");\n+        CountDownLatch latch = new CountDownLatch(2);\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(TwoStreams.class);\n+            rs.onEvent(\"TwoStreams\", e -> {\n+                latch.countDown();\n+            });\n+            rs.startAsync();\n+            TwoStreams e1 = new TwoStreams();\n+            e1.commit();\n+            TwoStreams e2 = new TwoStreams();\n+            e2.commit();\n+            latch.await();\n+            var scheduler = Executors.newScheduledThreadPool(1);\n+            try (Closeable close = scheduler::shutdown) {\n+                scheduler.scheduleAtFixedRate(() -> {\n+                    TwoStreams e = new TwoStreams();\n+                    e.message = \"hello\";\n+                    e.commit();\n+                }, 0, 10, TimeUnit.MILLISECONDS);\n+                la.await(\"hello\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/log\/TestWithStreaming.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}