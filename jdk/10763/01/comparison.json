{"files":[{"patch":"@@ -26,1 +26,2 @@\n-<li><a href=\"#using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/a><ul>\n+<li><a href=\"#overview\">Overview<\/a><\/li>\n+<li><a href=\"#running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/a><ul>\n@@ -52,4 +53,6 @@\n-<h2 id=\"using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/h2>\n-<p>This new way of running tests is developer-centric. It assumes that you have built a JDK locally and want to test it. Running common test targets is simple, and more complex ad-hoc combination of tests is possible. The user interface is forgiving, and clearly report errors it cannot resolve.<\/p>\n-<p>The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n-<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> (and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code>) are kept as aliases.<\/p>\n+<h2 id=\"overview\">Overview<\/h2>\n+<p>The bulk of JDK tests use <a href=\"https:\/\/openjdk.org\/jtreg\/\">jtreg<\/a>, a regression test framework and test runner built for the JDK's specific needs. Other test frameworks are also used. The different test frameworks can be executed directly, but there is also a set of make targets intended to simplify the interface, and figure out how to run your tests for you.<\/p>\n+<h2 id=\"running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/h2>\n+<p>This is the easiest way to get started. Assuming you've built the JDK locally, execute:<\/p>\n+<pre><code>$ make test<\/code><\/pre>\n+<p>This will run a default set of tests against the JDK, and present you with the results. <code>make test<\/code> is part of a family of test-related make targets which simplify running tests, because they invoke the various test frameworks for you. The &quot;make test framework&quot; is simple to start with, but more complex ad-hoc combination of tests is also possible. You can always invoke the test frameworks directly if you want even more control.<\/p>\n@@ -65,0 +68,2 @@\n+<p>&quot;tier1&quot; and &quot;tier2&quot; refer to tiered testing, see further down. &quot;TEST&quot; is a test selection argument which the make test framework will use to try to find the tests you want. It iterates over the available test frameworks, and if the test isn't present in one, it tries the next one. The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n+<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code> are kept as aliases.<\/p>\n@@ -84,2 +89,2 @@\n-<li><p><code>tier2<\/code>: This test group covers even more ground. These contain, among other things, tests that either run for too long to be at <code>tier1<\/code>, or may require special configuration, or tests that are less stable, or cover the broader range of non-core JVM and JDK features\/components (for example, XML).<\/p><\/li>\n-<li><p><code>tier3<\/code>: This test group includes more stressful tests, the tests for corner cases not covered by previous tiers, plus the tests that require GUIs. As such, this suite should either be run with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful tests (<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n+<li><p><code>tier2<\/code>: This test group covers even more ground. These contain, among other things, tests that either run for too long to be at <code>tier1<\/code>, or may require special configuration, or tests that are less stable, or cover the broader range of non-core JVM and JDK features\/components(for example, XML).<\/p><\/li>\n+<li><p><code>tier3<\/code>: This test group includes more stressful tests, the tests for corner cases not covered by previous tiers, plus the tests that require GUIs. As such, this suite should either be run with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful tests(<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n","filename":"doc\/testing.html","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-## Using \"make test\" (the run-test framework)\n+## Overview\n@@ -5,4 +5,5 @@\n-This new way of running tests is developer-centric. It assumes that you have\n-built a JDK locally and want to test it. Running common test targets is simple,\n-and more complex ad-hoc combination of tests is possible. The user interface is\n-forgiving, and clearly report errors it cannot resolve.\n+The bulk of JDK tests use [jtreg](https:\/\/openjdk.org\/jtreg\/), a regression\n+test framework and test runner built for the JDK's specific needs. Other test\n+frameworks are also used. The different test frameworks can be executed\n+directly, but there is also a set of make targets intended to simplify the\n+interface, and figure out how to run your tests for you.\n@@ -10,4 +11,1 @@\n-The main target `test` uses the jdk-image as the tested product. There is\n-also an alternate target `exploded-test` that uses the exploded image\n-instead. Not all tests will run successfully on the exploded image, but using\n-this target can greatly improve rebuild times for certain workflows.\n+## Running tests locally with `make test`\n@@ -15,4 +13,11 @@\n-Previously, `make test` was used to invoke an old system for running tests, and\n-`make run-test` was used for the new test framework. For backward compatibility\n-with scripts and muscle memory, `run-test` (and variants like\n-`exploded-run-test` or `run-test-tier1`) are kept as aliases.\n+This is the easiest way to get started. Assuming you've built the JDK locally,\n+execute:\n+\n+    $ make test\n+\n+This will run a default set of tests against the JDK, and present you with the\n+results. `make test` is part of a family of test-related make targets which\n+simplify running tests, because they invoke the various test frameworks for\n+you. The \"make test framework\" is simple to start with, but more complex\n+ad-hoc combination of tests is also possible. You can always invoke the test\n+frameworks directly if you want even more control.\n@@ -31,0 +36,14 @@\n+\"tier1\" and \"tier2\" refer to tiered testing, see further down. \"TEST\" is a\n+ test selection argument which the make test framework will use to try to\n+ find the tests you want. It iterates over the available test frameworks, and\n+ if the test isn't present in one, it tries the next one. The main target\n+ `test` uses the jdk-image as the tested product. There is also an alternate\n+ target `exploded-test` that uses the exploded image instead. Not all tests\n+ will run successfully on the exploded image, but using this target can\n+ greatly improve rebuild times for certain workflows.\n+\n+Previously, `make test` was used to invoke an old system for running tests,\n+and `make run-test` was used for the new test framework. For backward\n+compatibility with scripts and muscle memory, `run-test` and variants like\n+`exploded-run-test` or `run-test-tier1` are kept as aliases.\n+\n@@ -94,2 +113,2 @@\n-Ideally, all tests are run for every change but this may not be practical due to the limited\n-testing resources, the scope of the change, etc.\n+Ideally, all tests are run for every change but this may not be practical due\n+to the limited testing resources, the scope of the change, etc.\n@@ -97,4 +116,4 @@\n-The source tree currently defines a few common test groups in the relevant `TEST.groups`\n-files. There are test groups that cover a specific component, for example `hotspot_gc`.\n-It is a good idea to look into `TEST.groups` files to get a sense what tests are relevant\n-to a particular JDK component.\n+The source tree currently defines a few common test groups in the relevant\n+`TEST.groups` files. There are test groups that cover a specific component,\n+for example `hotspot_gc`. It is a good idea to look into `TEST.groups` files\n+to get a sense what tests are relevant to a particular JDK component.\n@@ -102,4 +121,5 @@\n-Component-specific tests may miss some unintended consequences of a change, so other\n-tests should also be run. Again, it might be impractical to run all tests, and therefore\n-_tiered_ test groups exist. Tiered test groups are not component-specific, but rather cover\n-the significant parts of the entire JDK.\n+Component-specific tests may miss some unintended consequences of a change, so\n+other tests should also be run. Again, it might be impractical to run all\n+tests, and therefore\n+_tiered_ test groups exist. Tiered test groups are not component-specific, but\n+ rather cover the significant parts of the entire JDK.\n@@ -107,4 +127,5 @@\n-Multiple tiers allow balancing test coverage and testing costs. Lower test tiers are supposed to\n-contain the simpler, quicker and more stable tests. Higher tiers are supposed to contain\n-progressively more thorough, slower, and sometimes less stable tests, or the tests that require\n-special configuration.\n+Multiple tiers allow balancing test coverage and testing costs. Lower test\n+tiers are supposed to contain the simpler, quicker and more stable tests.\n+Higher tiers are supposed to contain progressively more thorough, slower, and\n+sometimes less stable tests, or the tests that require special\n+configuration.\n@@ -112,2 +133,2 @@\n-Contributors are expected to run the tests for the areas that are changed, and the first N tiers\n-they can afford to run, but at least tier1.\n+Contributors are expected to run the tests for the areas that are changed, and\n+the first N tiers they can afford to run, but at least tier1.\n@@ -117,20 +138,22 @@\n-- `tier1`: This is the lowest test tier. Multiple developers run these tests every day.\n-Because of the widespread use, the tests in `tier1` are carefully selected and optimized to run\n-fast, and to run in the most stable manner. The test failures in `tier1` are usually followed up\n-on quickly, either with fixes, or adding relevant tests to problem list. GitHub Actions workflows,\n-if enabled, run `tier1` tests.\n-\n-- `tier2`: This test group covers even more ground. These contain, among other things,\n-tests that either run for too long to be at `tier1`, or may require special configuration,\n-or tests that are less stable, or cover the broader range of non-core JVM and JDK features\/components\n-(for example, XML).\n-\n-- `tier3`: This test group includes more stressful tests, the tests for corner cases\n-not covered by previous tiers, plus the tests that require GUIs. As such, this suite\n-should either be run with low concurrency (`TEST_JOBS=1`), or without headful tests\n-(`JTREG_KEYWORDS=\\!headful`), or both.\n-\n-- `tier4`: This test group includes every other test not covered by previous tiers. It includes,\n-for example, `vmTestbase` suites for Hotspot, which run for many hours even on large\n-machines. It also runs GUI tests, so the same `TEST_JOBS` and `JTREG_KEYWORDS` caveats\n-apply.\n+- `tier1`: This is the lowest test tier. Multiple developers run these tests\n+  every day. Because of the widespread use, the tests in `tier1` are\n+  carefully selected and optimized to run fast, and to run in the most stable\n+  manner. The test failures in `tier1` are usually followed up on quickly,\n+  either with fixes, or adding relevant tests to problem list. GitHub Actions\n+  workflows, if enabled, run `tier1` tests.\n+\n+- `tier2`: This test group covers even more ground. These contain, among other\n+  things, tests that either run for too long to be at `tier1`, or may require\n+  special configuration, or tests that are less stable, or cover the broader\n+  range of non-core JVM and JDK features\/components(for example, XML).\n+\n+- `tier3`: This test group includes more stressful tests, the tests for corner\n+  cases not covered by previous tiers, plus the tests that require GUIs. As\n+  such, this suite should either be run with low concurrency\n+  (`TEST_JOBS=1`), or without headful tests(`JTREG_KEYWORDS=\\!headful`), or\n+  both.\n+\n+- `tier4`: This test group includes every other test not covered by previous\n+  tiers. It includes, for example, `vmTestbase` suites for Hotspot, which run\n+  for many hours even on large machines. It also runs GUI tests, so the same\n+  `TEST_JOBS` and `JTREG_KEYWORDS` caveats apply.\n","filename":"doc\/testing.md","additions":72,"deletions":49,"binary":false,"changes":121,"status":"modified"}]}