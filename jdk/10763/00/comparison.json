{"files":[{"patch":"@@ -26,1 +26,2 @@\n-<li><a href=\"#using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/a><ul>\n+<li><a href=\"#overview\">Overview<\/a><\/li>\n+<li><a href=\"#running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/a><ul>\n@@ -52,4 +53,6 @@\n-<h2 id=\"using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/h2>\n-<p>This new way of running tests is developer-centric. It assumes that you have built a JDK locally and want to test it. Running common test targets is simple, and more complex ad-hoc combination of tests is possible. The user interface is forgiving, and clearly report errors it cannot resolve.<\/p>\n-<p>The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n-<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> (and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code>) are kept as aliases.<\/p>\n+<h2 id=\"overview\">Overview<\/h2>\n+<p>The bulk of JDK tests use <a href=\"https:\/\/openjdk.org\/jtreg\/\">jtreg<\/a>, a regression test framework and test runner built for the JDK's specific needs. Other test frameworks are also used. The different test frameworks can be executed directly, but there is also a set of make targets intended to simplify the interface, and figure out how to run your tests for you.<\/p>\n+<h2 id=\"running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/h2>\n+<p>This is the easiest way to get started. Assuming you've built the JDK locally, execute:<\/p>\n+<pre><code>$ make test<\/code><\/pre>\n+<p>This will run a default set of tests against the JDK, and present you with the results. <code>make test<\/code> is part of a family of test-related make targets which simplify running tests, because they invoke the various test frameworks for you. The &quot;make test framework&quot; is simple to start with, but more complex ad-hoc combination of tests is also possible. You can always invoke the test frameworks directly if you want even more control.<\/p>\n@@ -65,0 +68,2 @@\n+<p>&quot;tier1&quot; and &quot;tier2&quot; refer to tiered testing, see further down. &quot;TEST&quot; is a test selection argument which the make test framework will use to try to find the tests you want. It iterates over the available test frameworks, and if the test isn't present in one, it tries the next one. The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n+<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code> are kept as aliases.<\/p>\n","filename":"doc\/testing.html","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-## Using \"make test\" (the run-test framework)\n+## Overview\n@@ -5,4 +5,4 @@\n-This new way of running tests is developer-centric. It assumes that you have\n-built a JDK locally and want to test it. Running common test targets is simple,\n-and more complex ad-hoc combination of tests is possible. The user interface is\n-forgiving, and clearly report errors it cannot resolve.\n+The bulk of JDK tests use [jtreg](https:\/\/openjdk.org\/jtreg\/), a regression test framework and test runner\n+built for the JDK's specific needs. Other test frameworks are also used. The different test frameworks can be executed directly, but\n+there is also a set of make targets intended to simplify the interface, and figure\n+out how to run your tests for you.\n@@ -10,4 +10,1 @@\n-The main target `test` uses the jdk-image as the tested product. There is\n-also an alternate target `exploded-test` that uses the exploded image\n-instead. Not all tests will run successfully on the exploded image, but using\n-this target can greatly improve rebuild times for certain workflows.\n+## Running tests locally with `make test`\n@@ -15,4 +12,9 @@\n-Previously, `make test` was used to invoke an old system for running tests, and\n-`make run-test` was used for the new test framework. For backward compatibility\n-with scripts and muscle memory, `run-test` (and variants like\n-`exploded-run-test` or `run-test-tier1`) are kept as aliases.\n+This is the easiest way to get started. Assuming you've built the JDK locally, execute:\n+\n+    $ make test\n+\n+This will run a default set of tests against the JDK, and present you with the results. `make test` is part of a family\n+of test-related make targets which simplify running tests, because they invoke the\n+various test frameworks for you. The \"make test framework\" is simple to start with,\n+but more complex ad-hoc combination of tests is also possible. You can always invoke\n+the test frameworks directly if you want even more control.\n@@ -31,0 +33,10 @@\n+\"tier1\" and \"tier2\" refer to tiered testing, see further down. \"TEST\" is a test selection argument which the make test framework will use to try to find the tests you want. It iterates over the available test frameworks, and if the test isn't present in one, it tries the next one. The main target `test` uses the jdk-image as the tested product. There is\n+also an alternate target `exploded-test` that uses the exploded image\n+instead. Not all tests will run successfully on the exploded image, but using\n+this target can greatly improve rebuild times for certain workflows.\n+\n+Previously, `make test` was used to invoke an old system for running tests, and\n+`make run-test` was used for the new test framework. For backward compatibility\n+with scripts and muscle memory, `run-test` and variants like\n+`exploded-run-test` or `run-test-tier1` are kept as aliases.\n+\n","filename":"doc\/testing.md","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"}]}