{"files":[{"patch":"@@ -35,0 +35,1 @@\n+const char* VM_Version::_isa = \"\";\n@@ -36,0 +37,1 @@\n+riscv_cpu_feature VM_Version::_cpu_features;\n@@ -165,1 +167,1 @@\n-    if (!(_features & CPU_V)) {\n+    if (!_cpu_features.ext_v) {\n@@ -174,1 +176,1 @@\n-  if (UseRVC && !(_features & CPU_C)) {\n+  if (UseRVC && !_cpu_features.ext_c) {\n@@ -184,0 +186,45 @@\n+  if (UseZba && !_cpu_features.ext_zba) {\n+    warning(\"Zba is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZba, false);\n+  }\n+\n+  if (UseZbb && !_cpu_features.ext_zbb) {\n+    warning(\"Zbb is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZbb, false);\n+  }\n+\n+  if (UseZbs && !_cpu_features.ext_zbs) {\n+    warning(\"Zbs is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZbs, false);\n+  }\n+\n+  if (UseZic64b && !_cpu_features.ext_zic64b) {\n+    warning(\"Zic64b is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZic64b, false);\n+  }\n+\n+  if (UseZicbom && !_cpu_features.ext_zicbom) {\n+    warning(\"Zicbom is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZicbom, false);\n+  }\n+\n+  if (UseZicbop && !_cpu_features.ext_zicbop) {\n+    warning(\"Zicbop is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZicbop, false);\n+  }\n+\n+  if (UseZicboz && !_cpu_features.ext_zicboz) {\n+    warning(\"Zicboz is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZicboz, false);\n+  }\n+\n+  if (UseZfhmin && !_cpu_features.ext_zfhmin) {\n+    warning(\"Zfhmin is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZfhmin, false);\n+  }\n+\n+  if (UseZihintpause && !_cpu_features.ext_zihintpause) {\n+    warning(\"Zihintpause is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseZihintpause, false);\n+  }\n+\n@@ -211,5 +258,1 @@\n-  strcat(buf, \"rv64\");\n-#define ADD_FEATURE_IF_SUPPORTED(id, name, bit) if (_features & CPU_##id) strcat(buf, name);\n-  CPU_FEATURE_FLAGS(ADD_FEATURE_IF_SUPPORTED)\n-#undef ADD_FEATURE_IF_SUPPORTED\n-\n+  strcat(buf, _isa);\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":50,"deletions":7,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -35,0 +35,19 @@\n+struct riscv_cpu_feature {\n+  bool ext_i;\n+  bool ext_m;\n+  bool ext_a;\n+  bool ext_f;\n+  bool ext_d;\n+  bool ext_c;\n+  bool ext_v;\n+  bool ext_zba;\n+  bool ext_zbb;\n+  bool ext_zbs;\n+  bool ext_zic64b;\n+  bool ext_zicbom;\n+  bool ext_zicbop;\n+  bool ext_zicboz;\n+  bool ext_zihintpause;\n+  bool ext_zfhmin;\n+};\n+\n@@ -53,0 +72,1 @@\n+  static const char* _isa;\n@@ -54,0 +74,1 @@\n+  static riscv_cpu_feature _cpu_features;\n@@ -57,0 +78,1 @@\n+  static void get_isa();\n@@ -66,15 +88,0 @@\n-  enum Feature_Flag {\n-#define CPU_FEATURE_FLAGS(decl)               \\\n-    decl(I,            \"i\",            8)     \\\n-    decl(M,            \"m\",           12)     \\\n-    decl(A,            \"a\",            0)     \\\n-    decl(F,            \"f\",            5)     \\\n-    decl(D,            \"d\",            3)     \\\n-    decl(C,            \"c\",            2)     \\\n-    decl(V,            \"v\",           21)\n-\n-#define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1 << bit),\n-    CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_FLAG)\n-#undef DECLARE_CPU_FEATURE_FLAG\n-  };\n-\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2021, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -32,31 +32,0 @@\n-#include <asm\/hwcap.h>\n-#include <sys\/auxv.h>\n-\n-#ifndef HWCAP_ISA_I\n-#define HWCAP_ISA_I  (1 << ('I' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_M\n-#define HWCAP_ISA_M  (1 << ('M' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_A\n-#define HWCAP_ISA_A  (1 << ('A' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_F\n-#define HWCAP_ISA_F  (1 << ('F' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_D\n-#define HWCAP_ISA_D  (1 << ('D' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_C\n-#define HWCAP_ISA_C  (1 << ('C' - 'A'))\n-#endif\n-\n-#ifndef HWCAP_ISA_V\n-#define HWCAP_ISA_V  (1 << ('V' - 'A'))\n-#endif\n-\n@@ -74,1 +43,1 @@\n-  assert(_features & CPU_V, \"should not call this\");\n+  assert(_cpu_features.ext_v, \"should not call this\");\n@@ -93,23 +62,8 @@\n-\n-  uint64_t auxv = getauxval(AT_HWCAP);\n-\n-  static_assert(CPU_I == HWCAP_ISA_I, \"Flag CPU_I must follow Linux HWCAP\");\n-  static_assert(CPU_M == HWCAP_ISA_M, \"Flag CPU_M must follow Linux HWCAP\");\n-  static_assert(CPU_A == HWCAP_ISA_A, \"Flag CPU_A must follow Linux HWCAP\");\n-  static_assert(CPU_F == HWCAP_ISA_F, \"Flag CPU_F must follow Linux HWCAP\");\n-  static_assert(CPU_D == HWCAP_ISA_D, \"Flag CPU_D must follow Linux HWCAP\");\n-  static_assert(CPU_C == HWCAP_ISA_C, \"Flag CPU_C must follow Linux HWCAP\");\n-  static_assert(CPU_V == HWCAP_ISA_V, \"Flag CPU_V must follow Linux HWCAP\");\n-\n-  \/\/ RISC-V has four bit-manipulation ISA-extensions: Zba\/Zbb\/Zbc\/Zbs.\n-  \/\/ Availability for those extensions could not be queried from HWCAP.\n-  \/\/ TODO: Add proper detection for those extensions.\n-  _features = auxv & (\n-      HWCAP_ISA_I |\n-      HWCAP_ISA_M |\n-      HWCAP_ISA_A |\n-      HWCAP_ISA_F |\n-      HWCAP_ISA_D |\n-      HWCAP_ISA_C |\n-      HWCAP_ISA_V);\n-\n+  \/**\n+   * The following is an example of the output typical of \/proc\/cpuinfo:\n+   * processor       : 1\n+   * hard            : 1\n+   * isa             : rv64imafdc\n+   * mmu             : sv39\n+   * uarch           : sifive,u74-mc\n+   *\/\n@@ -120,1 +74,1 @@\n-        if (strncmp(buf, \"mmu\", sizeof \"mmu\" - 1) == 0) {\n+        if (!strncmp(buf, \"mmu\", sizeof \"mmu\" - 1)) {\n@@ -127,1 +81,9 @@\n-        } else if (strncmp(buf, \"uarch\", sizeof \"uarch\" - 1) == 0) {\n+        } else if (!strncmp(buf, \"isa\", sizeof \"isa\" - 1)) {\n+          if (_isa[0]!= '\\0') {\n+            continue;\n+          }\n+          char* isa = os::strdup(p + 2);\n+          isa[strcspn(isa, \"\\n\")] = '\\0';\n+          _isa = isa;\n+          get_isa();\n+        } else if (!strncmp(buf, \"uarch\", sizeof \"uarch\" - 1)) {\n@@ -138,0 +100,53 @@\n+\n+void VM_Version::get_isa() {\n+  char isa_buf[500];\n+  strcpy(isa_buf, _isa);\n+  char* saved_ptr;\n+  char* isa_ext = strtok_r(isa_buf, \"_\", &saved_ptr);\n+  while (isa_ext != nullptr) {\n+    \/\/ special case for rv64* substring\n+    if (!strncmp(isa_ext, \"rv64\", sizeof \"rv64\" - 1)) {\n+      const char* base_ext = os::strdup(isa_ext + 4); \/\/ skip \"rv64\"\n+      int i = 0;\n+      while (base_ext[i] != '\\0') {\n+        const char ch = base_ext[i++];\n+        if (ch == 'i') {\n+          _cpu_features.ext_i = true;\n+        } else if (ch == 'm') {\n+          _cpu_features.ext_m = true;\n+        } else if (ch == 'a') {\n+          _cpu_features.ext_a = true;\n+        } else if (ch == 'f') {\n+          _cpu_features.ext_f = true;\n+        } else if (ch == 'd') {\n+          _cpu_features.ext_d = true;\n+        } else if (ch == 'c') {\n+          _cpu_features.ext_c = true;\n+        } else if (ch == 'v') {\n+          _cpu_features.ext_v = true;\n+        }\n+      }\n+    } else if (!strncmp(isa_ext, \"zba\",         sizeof \"zba\" - 1)) {\n+      _cpu_features.ext_zba         = true;\n+    } else if (!strncmp(isa_ext, \"zbb\",         sizeof \"zbb\" - 1)) {\n+      _cpu_features.ext_zbb         = true;\n+    } else if (!strncmp(isa_ext, \"zbs\",         sizeof \"zbs\" - 1)) {\n+      _cpu_features.ext_zbs         = true;\n+    } else if (!strncmp(isa_ext, \"zic64b\",      sizeof \"zic64b\" - 1)) {\n+      _cpu_features.ext_zic64b      = true;\n+    } else if (!strncmp(isa_ext, \"zicbom\",      sizeof \"zicbom\" - 1)) {\n+      _cpu_features.ext_zicbom      = true;\n+    } else if (!strncmp(isa_ext, \"zicbop\",      sizeof \"zicbop\" - 1)) {\n+      _cpu_features.ext_zicbop      = true;\n+    } else if (!strncmp(isa_ext, \"zicboz\",      sizeof \"zicboz\" - 1)) {\n+      _cpu_features.ext_zicboz      = true;\n+    } else if (!strncmp(isa_ext, \"zihintpause\", sizeof \"zhintpause\" - 1)) {\n+      _cpu_features.ext_zihintpause = true;\n+    } else if (!strncmp(isa_ext, \"zfhmin\",      sizeof \"zfhmin\" - 1)) {\n+      _cpu_features.ext_zfhmin      = true;\n+    }\n+\n+    \/\/ read next isa extension string, if any\n+    isa_ext = strtok_r(nullptr, \"_\", &saved_ptr);\n+  }\n+}\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":73,"deletions":58,"binary":false,"changes":131,"status":"modified"}]}