{"files":[{"patch":"@@ -109,1 +109,1 @@\n- *         {@code GMT} <i>Sign<\/i> <i>TwoDigitHours<\/i> {@code :} <i>Minutes<\/i> [<i>Seconds<\/i>]\n+ *         {@code GMT} <i>Sign<\/i> <i>TwoDigitHours<\/i> {@code :} <i>Minutes<\/i> [<i>ColonSeconds<\/i>]\n@@ -116,1 +116,1 @@\n- * <i>Seconds:<\/i>\n+ * <i>ColonSeconds:<\/i>\n@@ -122,1 +122,1 @@\n- * <i>Seconds<\/i> part only appears if the value is non-zero.\n+ * <i>ColonSeconds<\/i> part only appears if the seconds value is non-zero.\n@@ -540,2 +540,2 @@\n-            var totalSecs = zo.getTotalSeconds();\n-            return new ZoneInfo(totalSecs == 0 ? \"UTC\" : GMT_ID + tzid, totalSecs);\n+            var totalMillis = zo.getTotalSeconds() * 1_000;\n+            return new ZoneInfo(totalMillis == 0 ? \"UTC\" : GMT_ID + tzid, totalMillis);\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.ZoneOffset;\n@@ -44,4 +45,6 @@\n-                {ZoneId.of(\"+00:01\"), 60},\n-                {ZoneId.of(\"-00:01\"), -60},\n-                {ZoneId.of(\"+00:00:01\"), 1},\n-                {ZoneId.of(\"-00:00:01\"), -1},\n+                {ZoneId.of(\"+00:01\"), 60_000},\n+                {ZoneId.of(\"-00:01\"), -60_000},\n+                {ZoneId.of(\"+00:00:01\"), 1_000},\n+                {ZoneId.of(\"-00:00:01\"), -1_000},\n+                {ZoneId.of(\"GMT+00:00:01\"), 1_000},\n+                {ZoneOffset.of(\"+00:00:01\"), 1_000},\n@@ -55,1 +58,1 @@\n-        assertEquals(tz.toZoneId().normalized(), zid);\n+        assertEquals(tz.toZoneId().normalized(), zid.normalized());\n","filename":"test\/jdk\/java\/util\/TimeZone\/ZoneOffsetRoundTripTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}