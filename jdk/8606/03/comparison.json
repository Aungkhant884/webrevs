{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.time.ZoneOffset;\n@@ -77,0 +78,1 @@\n+ *         {@code GMT} <i>Sign<\/i> <i>Hours<\/i> {@code :} <i>Minutes<\/i> {@code :} <i>Seconds<\/i>\n@@ -87,0 +89,2 @@\n+ * <i>Seconds:<\/i>\n+ *         <i>Digit<\/i> <i>Digit<\/i>\n@@ -91,1 +95,1 @@\n- * <i>Hours<\/i> must be between 0 to 23 and <i>Minutes<\/i> must be\n+ * <i>Hours<\/i> must be between 0 to 23 and <i>Minutes<\/i>\/<i>Seconds<\/i> must be\n@@ -105,1 +109,1 @@\n- *         {@code GMT} <i>Sign<\/i> <i>TwoDigitHours<\/i> {@code :} <i>Minutes<\/i>\n+ *         {@code GMT} <i>Sign<\/i> <i>TwoDigitHours<\/i> {@code :} <i>Minutes<\/i> [<i>ColonSeconds<\/i>]\n@@ -112,0 +116,2 @@\n+ * <i>ColonSeconds:<\/i>\n+ *         {@code :} <i>Digit<\/i> <i>Digit<\/i>\n@@ -116,0 +122,1 @@\n+ * <i>ColonSeconds<\/i> part only appears if the seconds value is non-zero.\n@@ -532,5 +539,5 @@\n-        char c = tzid.charAt(0);\n-        if (c == '+' || c == '-') {\n-            tzid = \"GMT\" + tzid;\n-        } else if (c == 'Z' && tzid.length() == 1) {\n-            tzid = \"UTC\";\n+        if (zoneId instanceof ZoneOffset zo) {\n+            var totalMillis = zo.getTotalSeconds() * 1_000;\n+            return new ZoneInfo(totalMillis == 0 ? \"UTC\" : GMT_ID + tzid, totalMillis);\n+        } else if (tzid.startsWith(\"UT\")) {\n+            tzid = tzid.replaceFirst(\"(UTC|UT)(.*)\", \"GMT$2\");\n@@ -826,0 +833,1 @@\n+        int minutes = 0;\n@@ -832,1 +840,1 @@\n-                if (countDelim > 0) {\n+                if (countDelim > 1) {\n@@ -835,1 +843,1 @@\n-                if (len > 2) {\n+                if (len == 0 || len > 2) {\n@@ -838,1 +846,5 @@\n-                hours = num;\n+                if (countDelim == 0) {\n+                    hours = num;\n+                } else if (countDelim == 1){\n+                    minutes = num;\n+                }\n@@ -856,0 +868,1 @@\n+                minutes = 0;\n@@ -857,1 +870,1 @@\n-            } else {\n+            } else if (len <= 4) {\n@@ -859,1 +872,11 @@\n-                num %= 100;\n+                minutes = num % 100;\n+                num = 0;\n+            } else {\n+                return null;\n+            }\n+        } else if (countDelim == 1){\n+            if (len == 2) {\n+                minutes = num;\n+                num = 0;\n+            } else {\n+                return null;\n@@ -866,1 +889,1 @@\n-        if (hours > 23 || num > 59) {\n+        if (hours > 23 || minutes > 59 || num > 59) {\n@@ -869,1 +892,1 @@\n-        int gmtOffset =  (hours * 60 + num) * 60 * 1000;\n+        int gmtOffset =  (hours * 3_600 + minutes * 60 + num) * 1_000;\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-        int offset = gmtOffset \/ 60000;\n+        int offset = gmtOffset \/ 1_000;\n@@ -188,2 +188,3 @@\n-        int hh = offset \/ 60;\n-        int mm = offset % 60;\n+        int hh = offset \/ 3_600;\n+        int mm = (offset % 3_600) \/ 60;\n+        int ss = offset % 60;\n@@ -200,1 +201,7 @@\n-        return new String(buf);\n+        var id = new String(buf);\n+        if (ss != 0) {\n+            buf[7] = (char)('0' + ss \/ 10);\n+            buf[8] = (char)('0' + ss % 10);\n+            id += new String(buf, 6, 3);\n+        }\n+        return id;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfoFile.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- *      8228469 8274407\n+ *      8228469 8274407 8285844\n@@ -32,0 +32,1 @@\n+ * @run main TimeZoneTest -verbose\n@@ -223,1 +224,1 @@\n-    static final String formatMinutes(int min) {\n+    static final String formatSeconds(int sec) {\n@@ -225,4 +226,6 @@\n-        if (min < 0) { sign = '-'; min = -min; }\n-        int h = min\/60;\n-        min = min%60;\n-        return \"\" + sign + h + \":\" + ((min<10) ? \"0\" : \"\") + min;\n+        if (sec < 0) { sign = '-'; sec = -sec; }\n+        int h = sec \/ 3_600;\n+        int m = sec % 3_600 \/ 60;\n+        sec = sec % 60;\n+        return \"\" + sign + h + \":\" + ((m<10) ? \"0\" : \"\") + m +\n+                (sec > 0 ? \":\" + ((sec < 10) ? \"0\" : \"\") + sec : \"\");\n@@ -243,15 +246,22 @@\n-            \/\/ ID        Expected offset in minutes\n-            \"GMT\",       null,\n-            \"GMT+0\",     new Integer(0),\n-            \"GMT+1\",     new Integer(60),\n-            \"GMT-0030\",  new Integer(-30),\n-            \"GMT+15:99\", null,\n-            \"GMT+\",      null,\n-            \"GMT-\",      null,\n-            \"GMT+0:\",    null,\n-            \"GMT-:\",     null,\n-            \"GMT+0010\",  new Integer(10), \/\/ Interpret this as 00:10\n-            \"GMT-10\",    new Integer(-10*60),\n-            \"GMT+30\",    null,\n-            \"GMT-3:30\",  new Integer(-(3*60+30)),\n-            \"GMT-230\",   new Integer(-(2*60+30)),\n+            \/\/ ID               Expected offset in seconds\n+            \"GMT\",              null,\n+            \"GMT+0\",            0,\n+            \"GMT+1\",            60 * 60,\n+            \"GMT-0030\",         -30 * 60,\n+            \"GMT+15:99\",        null,\n+            \"GMT+\",             null,\n+            \"GMT-\",             null,\n+            \"GMT+0:\",           null,\n+            \"GMT-:\",            null,\n+            \"GMT+0010\",         10 * 60, \/\/ Interpret this as 00:10\n+            \"GMT-10\",           -10 * 60 * 60,\n+            \"GMT+30\",           null,\n+            \"GMT-3:30\",         -(3 * 60 + 30) * 60,\n+            \"GMT-230\",          -(2 * 60 + 30) * 60,\n+            \"GMT+00:00:01\",     1,\n+            \"GMT-00:00:01\",     -1,\n+            \"GMT+00000\",        null,\n+            \"GMT+00:00:01:\",    null,\n+            \"GMT+00:00:012\",    null,\n+            \"GMT+00:00:0\",      null,\n+            \"GMT+00:00:\",       null,\n@@ -269,1 +279,1 @@\n-                    throw new Exception(\"Expected offset of \" + formatMinutes(exp.intValue()) +\n+                    throw new Exception(\"Expected offset of \" + formatSeconds(exp.intValue()) +\n@@ -274,2 +284,2 @@\n-                int ioffset = zone.getRawOffset()\/60000;\n-                String offset = formatMinutes(ioffset);\n+                int ioffset = zone.getRawOffset() \/ 1_000;\n+                String offset = formatSeconds(ioffset);\n@@ -283,1 +293,1 @@\n-                    throw new Exception(\"Expected offset of \" + formatMinutes(exp.intValue()) +\n+                    throw new Exception(\"Expected offset of \" + formatSeconds(exp.intValue()) +\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneTest.java","additions":36,"deletions":26,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+import static org.testng.Assert.assertEquals;\n+\n+\/**\n+ * @test\n+ * @bug 8285844\n+ * @summary Checks round-trips between TimeZone and ZoneId are consistent\n+ * @run testng ZoneIdRoundTripTest\n+ *\/\n+@Test\n+public class ZoneIdRoundTripTest {\n+\n+    @DataProvider\n+    private Object[][] testZoneIds() {\n+        return new Object[][] {\n+                {ZoneId.of(\"Z\"), 0},\n+                {ZoneId.of(\"UT\"), 0},\n+                {ZoneId.of(\"UTC\"), 0},\n+                {ZoneId.of(\"GMT\"), 0},\n+                {ZoneId.of(\"+00:01\"), 60_000},\n+                {ZoneId.of(\"-00:01\"), -60_000},\n+                {ZoneId.of(\"+00:00:01\"), 1_000},\n+                {ZoneId.of(\"-00:00:01\"), -1_000},\n+                {ZoneId.of(\"UT+00:00:01\"), 1_000},\n+                {ZoneId.of(\"UT-00:00:01\"), -1_000},\n+                {ZoneId.of(\"UTC+00:00:01\"), 1_000},\n+                {ZoneId.of(\"UTC-00:00:01\"), -1_000},\n+                {ZoneId.of(\"GMT+00:00:01\"), 1_000},\n+                {ZoneId.of(\"GMT-00:00:01\"), -1_000},\n+                {ZoneOffset.of(\"+00:00:01\"), 1_000},\n+                {ZoneOffset.of(\"-00:00:01\"), -1_000},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"testZoneIds\")\n+    public void test_ZoneIdRoundTrip(ZoneId zid, int offset) {\n+        var tz = TimeZone.getTimeZone(zid);\n+        assertEquals(tz.getRawOffset(), offset);\n+        assertEquals(tz.toZoneId().normalized(), zid.normalized());\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/util\/TimeZone\/ZoneIdRoundTripTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}