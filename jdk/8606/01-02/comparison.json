{"files":[{"patch":"@@ -542,2 +542,2 @@\n-        } else {\n-            return getTimeZone(tzid, true);\n+        } else if (tzid.startsWith(\"UT\")) {\n+            tzid = tzid.replaceFirst(\"(UTC|UT)([+-]*)(.*)\", \"GMT$2$3\");\n@@ -545,0 +545,1 @@\n+        return getTimeZone(tzid, true);\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+import static org.testng.Assert.assertEquals;\n+\n+\/**\n+ * @test\n+ * @bug 8285844\n+ * @summary Checks round-trips between TimeZone and ZoneId are consistent\n+ * @run testng ZoneIdRoundTripTest\n+ *\/\n+@Test\n+public class ZoneIdRoundTripTest {\n+\n+    @DataProvider\n+    private Object[][] testZoneIds() {\n+        return new Object[][] {\n+                {ZoneId.of(\"Z\"), 0},\n+                {ZoneId.of(\"UT\"), 0},\n+                {ZoneId.of(\"UTC\"), 0},\n+                {ZoneId.of(\"+00:01\"), 60_000},\n+                {ZoneId.of(\"-00:01\"), -60_000},\n+                {ZoneId.of(\"+00:00:01\"), 1_000},\n+                {ZoneId.of(\"-00:00:01\"), -1_000},\n+                {ZoneId.of(\"UT+00:00:01\"), 1_000},\n+                {ZoneId.of(\"UT-00:00:01\"), -1_000},\n+                {ZoneId.of(\"UTC+00:00:01\"), 1_000},\n+                {ZoneId.of(\"UTC-00:00:01\"), -1_000},\n+                {ZoneId.of(\"GMT+00:00:01\"), 1_000},\n+                {ZoneId.of(\"GMT-00:00:01\"), -1_000},\n+                {ZoneOffset.of(\"+00:00:01\"), 1_000},\n+                {ZoneOffset.of(\"-00:00:01\"), -1_000},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"testZoneIds\")\n+    public void test_ZoneIdRoundTrip(ZoneId zid, int offset) {\n+        var tz = TimeZone.getTimeZone(zid);\n+        assertEquals(tz.getRawOffset(), offset);\n+        assertEquals(tz.toZoneId().normalized(), zid.normalized());\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/util\/TimeZone\/ZoneIdRoundTripTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.time.ZoneId;\n-import java.time.ZoneOffset;\n-import java.util.TimeZone;\n-\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n-import static org.testng.Assert.assertEquals;\n-\n-\/**\n- * @test\n- * @bug 8285844\n- * @summary Checks round-trips between TimeZone and ZoneOffset are consistent\n- * @run testng ZoneOffsetRoundTripTest\n- *\/\n-@Test\n-public class ZoneOffsetRoundTripTest {\n-\n-    @DataProvider\n-    private Object[][] testZoneOffsets() {\n-        return new Object[][] {\n-                {ZoneId.of(\"Z\"), 0},\n-                {ZoneId.of(\"+00:01\"), 60_000},\n-                {ZoneId.of(\"-00:01\"), -60_000},\n-                {ZoneId.of(\"+00:00:01\"), 1_000},\n-                {ZoneId.of(\"-00:00:01\"), -1_000},\n-                {ZoneId.of(\"GMT+00:00:01\"), 1_000},\n-                {ZoneOffset.of(\"+00:00:01\"), 1_000},\n-        };\n-    }\n-\n-    @Test(dataProvider=\"testZoneOffsets\")\n-    public void test_ZoneOffsetRoundTrip(ZoneId zid, int offset) {\n-        var tz = TimeZone.getTimeZone(zid);\n-        assertEquals(tz.getRawOffset(), offset);\n-        assertEquals(tz.toZoneId().normalized(), zid.normalized());\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/util\/TimeZone\/ZoneOffsetRoundTripTest.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"}]}