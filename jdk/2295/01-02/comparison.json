{"files":[{"patch":"@@ -160,0 +160,4 @@\n+  if (java_lang_Class::is_primitive(my_oop)) {\n+    assert(java_lang_Class::as_Klass(my_oop) == NULL, \"invariant\");\n+    return (traceid)java_lang_Class::primitive_type(my_oop);\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    assert(java_lang_Class::as_Klass(my_oop) == NULL, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,0 +82,3 @@\n+        \/\/ use the index as the key here, it will not conflict\n+        \/\/ with the key generated in jfrTypeSet, because the\n+        \/\/ latter will contain checkpoint_id\n@@ -96,0 +99,3 @@\n+        \/\/ use the index as the key here, it will not conflict\n+        \/\/ with the key generated by JfrTraceId::next_class_id,\n+        \/\/ because the latter must be greater than LAST_TYPE_ID\n@@ -97,1 +103,1 @@\n-        \/\/ class loader is null\n+        \/\/ FIXME: should we use _the_null_class_loader_data here?\n@@ -103,1 +109,1 @@\n-        \/\/ modifier\n+        \/\/ modifier, same with JVM_GetClassModifiers\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}