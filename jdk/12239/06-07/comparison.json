{"files":[{"patch":"@@ -515,5 +515,4 @@\n-    \/\/ Returns comma-separated file names for stdout and stderr.\n-    private String redirectOutputToLogFile(String msg, ProcessBuilder pb, String fileNameBase) {\n-        if (!Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n-            return \"\";\n-        }\n+    \/\/ Configures process builder to redirect process stdout and stderr to a file.\n+    \/\/ Returns file names for stdout and stderr.\n+    private Map<String, String> redirectOutputToLogFile(String msg, ProcessBuilder pb, String fileNameBase) {\n+        Map<String, String> result = new HashMap<>();\n@@ -525,0 +524,1 @@\n+        result.put(\"stdout\", stdoutFileName);\n@@ -529,0 +529,1 @@\n+        result.put(\"stderr\", stderrFileName);\n@@ -530,1 +531,1 @@\n-        return stdoutFileName + \",\" + stderrFileName;\n+        return result;\n@@ -533,22 +534,13 @@\n-    private void printLogfileContent(String logFileNames) {\n-        if (logFileNames.isEmpty()) {\n-            return;\n-        }\n-\n-        log(\"------------- stdout: \");\n-        try {\n-            Files.lines(Path.of(logFileNames.split(\",\")[0]))\n-                 .forEach(line -> log(line));\n-        } catch (IOException ie) {\n-            log(\"Exception while reading stdout file: \" + ie);\n-        }\n-        log(\"------------- \");\n-\n-        log(\"------------- stderr: \");\n-        try {\n-            Files.lines(Path.of(logFileNames.split(\",\")[1]))\n-                .forEach(line -> log(line));\n-        } catch (IOException ie) {\n-            log(\"Exception while reading stderr file: \" + ie);\n-        }\n-        log(\"------------- \");\n+    private void printLogfileContent(Map<String, String> logFileNames) {\n+        logFileNames.entrySet().stream()\n+            .forEach(entry ->\n+                {\n+                    log(\"------------- \" + entry.getKey());\n+                    try {\n+                        Files.lines(Path.of(entry.getValue()))\n+                            .forEach(line -> log(line));\n+                    } catch (IOException ie) {\n+                        log(\"Exception while reading file: \" + ie);\n+                    }\n+                    log(\"-------------\");\n+                });\n@@ -560,1 +552,1 @@\n-        String logFileNames = redirectOutputToLogFile(\"checkDockerSupport(): <container> ps\",\n+        Map<String, String> logFileNames = redirectOutputToLogFile(\"checkDockerSupport(): <container> ps\",\n@@ -687,1 +679,1 @@\n-     * Logs diagnostic message.\n+     * Log diagnostic message.\n@@ -692,3 +684,2 @@\n-        if (!Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n-            return;\n-        }\n+        \/\/ Always log to a file.\n+        logToFile(msg);\n@@ -696,0 +687,1 @@\n+        \/\/ Also log to stderr; guarded by property to avoid excessive verbosity.\n@@ -700,1 +692,18 @@\n-        System.err.println(\"VMProps: \" + msg);\n+        if (Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n+            System.err.println(\"VMProps: \" + msg);\n+        }\n+    }\n+\n+    \/**\n+     * Log diagnostic message to a file.\n+     *\n+     * @param msg\n+     *\/\n+    protected static void logToFile(String msg) {\n+        String fileName = \".\/vmprops.log\";\n+        try {\n+            Files.writeString(Paths.get(fileName), msg + \"\\n\", Charset.forName(\"ISO-8859-1\"),\n+                    StandardOpenOption.APPEND, StandardOpenOption.CREATE);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to log into '\" + fileName + \"'\", e);\n+        }\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":43,"deletions":34,"binary":false,"changes":77,"status":"modified"}]}