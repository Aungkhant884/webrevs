{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.io.File;\n+import java.nio.charset.Charset;\n@@ -34,0 +36,1 @@\n+import java.time.Instant;\n@@ -90,0 +93,1 @@\n+        log(\"Entering call()\");\n@@ -130,0 +134,1 @@\n+        log(\"Leaving call()\");\n@@ -476,0 +481,2 @@\n+        log(\"Entering dockerSupport()\");\n+\n@@ -494,0 +501,2 @@\n+        log(\"dockerSupport(): platform check: isSupported = \" + isSupported);\n+\n@@ -502,0 +511,1 @@\n+        log(\"dockerSupport(): returning isSupported = \" + isSupported);\n@@ -505,0 +515,42 @@\n+    \/\/ Returns comma-separated file names for stdout and stderr.\n+    private String redirectOutputToLogFile(String msg, ProcessBuilder pb, String fileNameBase) {\n+        if (!Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n+            return \"\";\n+        }\n+        String timeStamp = Instant.now().toString().replace(\":\", \"-\").replace(\".\", \"-\");\n+\n+        String stdoutFileName = String.format(\".\/%s-stdout--%s.log\", fileNameBase, timeStamp);\n+        pb.redirectOutput(new File(stdoutFileName));\n+        log(msg + \": child process stdout redirected to \" + stdoutFileName);\n+\n+        String stderrFileName = String.format(\".\/%s-stderr--%s.log\", fileNameBase, timeStamp);\n+        pb.redirectError(new File(stderrFileName));\n+        log(msg + \": child process stderr redirected to \" + stderrFileName);\n+\n+        return stdoutFileName + \",\" + stderrFileName;\n+    }\n+\n+    private void printLogfileContent(String logFileNames) {\n+        if (logFileNames.isEmpty()) {\n+            return;\n+        }\n+\n+        log(\"------------- stdout: \");\n+        try {\n+            Files.lines(Path.of(logFileNames.split(\",\")[0]))\n+                 .forEach(line -> log(line));\n+        } catch (IOException ie) {\n+            log(\"Exception while reading stdout file: \" + ie);\n+        }\n+        log(\"------------- \");\n+\n+        log(\"------------- stderr: \");\n+        try {\n+            Files.lines(Path.of(logFileNames.split(\",\")[1]))\n+                .forEach(line -> log(line));\n+        } catch (IOException ie) {\n+            log(\"Exception while reading stderr file: \" + ie);\n+        }\n+        log(\"------------- \");\n+    }\n+\n@@ -506,0 +558,1 @@\n+        log(\"checkDockerSupport(): entering\");\n@@ -507,0 +560,2 @@\n+        String logFileNames = redirectOutputToLogFile(\"checkDockerSupport(): <container> ps\",\n+                                                      pb, \"container-ps\");\n@@ -509,0 +564,1 @@\n+        int exitValue = p.exitValue();\n@@ -510,1 +566,6 @@\n-        return (p.exitValue() == 0);\n+        log(String.format(\"checkDockerSupport(): exitValue = %s, pid = %s\", exitValue, p.pid()));\n+        if (exitValue != 0) {\n+            printLogfileContent(logFileNames);\n+        }\n+\n+        return (exitValue == 0);\n@@ -625,0 +686,16 @@\n+    \/**\n+     * Logs diagnostic message.\n+     *\n+     * @param msg\n+     *\/\n+    protected static void log(String msg) {\n+        if (!Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n+            return;\n+        }\n+        \/\/ By jtreg design stderr produced here will be visible\n+        \/\/ in the output of a parent process. Note: stdout should not be used\n+        \/\/ for logging as jtreg parses that output directly and only echoes it\n+        \/\/ in the event of a failure.\n+        System.err.println(\"VMProps: \" + msg);\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":79,"deletions":2,"binary":false,"changes":81,"status":"modified"}]}