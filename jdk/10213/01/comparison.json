{"files":[{"patch":"@@ -58,1 +58,1 @@\n-    static JmodOutputStream newOutputStream(Path file, LocalDateTime date) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compLevel) throws IOException {\n@@ -61,1 +61,1 @@\n-        return new JmodOutputStream(bos, date);\n+        return new JmodOutputStream(bos, date, compLevel);\n@@ -66,1 +66,1 @@\n-    private JmodOutputStream(OutputStream out, LocalDateTime date) {\n+    private JmodOutputStream(OutputStream out, LocalDateTime date, int compLevel) {\n@@ -68,0 +68,1 @@\n+        this.zos.setLevel(compLevel);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+import java.util.zip.Deflater;\n@@ -170,0 +171,1 @@\n+        int compLevel;\n@@ -441,1 +443,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compLevel)) {\n@@ -1027,1 +1029,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compLevel))\n@@ -1182,0 +1184,20 @@\n+    static class CompLevelConverter implements ValueConverter<Integer> {\n+        @Override\n+        public Integer convert(String value) {\n+\n+            try {\n+                int level = Integer.parseInt(value);\n+                if (level < 0 || level > 9) {\n+                    throw new CommandException(\"err.compression.level.out.of.range\", value);\n+                }\n+                return level;\n+            } catch (NumberFormatException x) {\n+                throw new CommandException(\"err.compression.level.out.of.range\", value);\n+            }\n+        }\n+\n+        @Override public Class<Integer> valueType() { return Integer.class; }\n+\n+        @Override public String valuePattern() { return \"compression level (0-9)\"; }\n+    }\n+\n@@ -1422,0 +1444,5 @@\n+        OptionSpec<Integer> compLevel\n+                = parser.accepts(\"compression-level\", getMessage(\"main.opt.compression-level\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new CompLevelConverter());\n+\n@@ -1491,0 +1518,10 @@\n+            if (opts.has(compLevel)) {\n+                if (!options.mode.equals(Mode.CREATE)) {\n+                    throw new CommandException(\"err.compression.level.wrong.mode\")\n+                            .showUsage(true);\n+                }\n+                options.compLevel = getLastElement(opts.valuesOf(compLevel));\n+            } else {\n+                \/\/ Default to fast compression.\n+                options.compLevel = Deflater.DEFAULT_COMPRESSION;\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+main.opt.compression-level=Compression level to use when creating the JMOD archive.\\\n+Accepted levels are: 0 (no compression) .. 9 (best compression).\n+\n@@ -116,0 +119,2 @@\n+err.compression.level.out.of.range=--compression-level {0} is out of the valid range: 0-9\n+err.compression.level.wrong.mode=--compression-level {0} is only accepted with create mode\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -742,0 +742,62 @@\n+    @Test\n+    public void testCompressionLevel() throws IOException {\n+        String cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\").toString();\n+        Path jmod = MODS_DIR.resolve(\"foo.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--compression-level=0\",\n+             jmod.toString())\n+            .assertSuccess();\n+\n+        jmod(\"list\",\n+             \"--compression-level=0\",\n+             jmod.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertTrue(r.output.contains(\"is only accepted with create mode\"), \"Error message printed\");\n+            });\n+\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--compression-level=9\",\n+             jmod.toString())\n+            .assertSuccess();\n+\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--compression-level=-1\",\n+             jmod.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertTrue(r.output.contains(\"is out of the valid range: 0-9\"), \"Error message printed\");\n+            });\n+\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--compression-level=10\",\n+             jmod.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertTrue(r.output.contains(\"is out of the valid range: 0-9\"), \"Error message printed\");\n+            });\n+\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--compression-level=test\",\n+             jmod.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertTrue(r.output.contains(\"is out of the valid range: 0-9\"), \"Error message printed\");\n+            });\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"}]}