{"files":[{"patch":"@@ -1077,0 +1077,3 @@\n+    <Field type=\"boolean\" name=\"compressed\" label=\"Compressed\" \/>\n+    <Field type=\"uint\" name=\"truncatedArrayCount\" label=\"Truncated Array Count\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"truncatedLength\" label=\"Truncated length\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -404,0 +404,3 @@\n+  uint _truncated_array_count;\n+  size_t _truncated_length;\n+\n@@ -450,0 +453,8 @@\n+\n+  uint truncated_array_count() { return _truncated_array_count; }\n+  size_t truncated_length() { return _truncated_length; }\n+\n+  void count_truncation(size_t length) {\n+    _truncated_array_count++;\n+    _truncated_length += length;\n+  }\n@@ -458,1 +469,3 @@\n-  _backend(writer, compressor, io_buffer_max_size, io_buffer_max_waste) {\n+  _backend(writer, compressor, io_buffer_max_size, io_buffer_max_waste),\n+  _truncated_array_count(0),\n+  _truncated_length(0) {\n@@ -1132,0 +1145,1 @@\n+    size_t real_length = length_in_bytes;\n@@ -1137,0 +1151,1 @@\n+    writer->count_truncation(real_length - length_in_bytes);\n@@ -1960,0 +1975,3 @@\n+    event.set_compressed(compression > 0);\n+    event.set_truncatedArrayCount(writer.truncated_array_count());\n+    event.set_truncatedLength(writer.truncated_length());\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -46,0 +47,1 @@\n+ * @requires os.maxMemory > 8G\n@@ -53,1 +55,1 @@\n-        Path path = Paths.get(\"dump.hprof\").toAbsolutePath();\n+        Path path = Paths.get(\"dump.hprof.gz\").toAbsolutePath();\n@@ -57,0 +59,2 @@\n+            \/\/ max segment size is 4G\n+            long[] bigArray = new long[(1 << 29) + (1 << 27)];\n@@ -66,2 +70,5 @@\n-            Events.assertField(e, \"onOutOfMemoryError\").equals(false);\n-            Events.assertField(e, \"size\").equals(Files.size(path));\n+            Events.assertField(e, \"onOutOfMemoryError\").equal(false);\n+            Events.assertField(e, \"size\").equal(Files.size(path));\n+            Events.assertField(e, \"compressed\").equal(true);\n+            Events.assertField(e, \"truncatedArrayCount\").equal(1);\n+            Events.assertField(e, \"truncatedLength\").above(1024L * 1024L * 1024L);\n@@ -69,0 +76,1 @@\n+            path.toFile().delete();\n@@ -73,7 +81,1 @@\n-        ObjectName objectName = new ObjectName(\"com.sun.management:type=HotSpotDiagnostic\");\n-        MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-        Object[] parameters = new Object[2];\n-        parameters[0] = path.toString();\n-        parameters[1] = true;\n-        String[] signature = new String[] { String.class.getName(), boolean.class.toString() };\n-        mbeanServer.invoke(objectName, \"dumpHeap\", parameters, signature);\n+        new PidJcmdExecutor().execute(\"GC.heap_dump -all=false -gz=1 \" + path.toString());\n","filename":"test\/jdk\/jdk\/jfr\/event\/diagnostics\/TestHeapDump.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}