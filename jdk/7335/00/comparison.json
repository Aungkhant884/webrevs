{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+import jtreg.SkippedException;\n@@ -398,1 +399,1 @@\n-        Files.createSymbolicLink(symlink, target);\n+        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n@@ -400,11 +401,12 @@\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assertEquals(response.statusCode(), 404);\n-            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-            assertEquals(response.body(), expectedBody);\n-        } finally {\n-            server.stop(0);\n+            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+            server.start();\n+            try {\n+                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+                var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n+                var response = client.send(request, BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 404);\n+                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+                assertEquals(response.body(), expectedBody);\n+            } finally {\n+                server.stop(0);\n+            }\n@@ -425,1 +427,1 @@\n-        Files.createSymbolicLink(symlink, target);\n+        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n@@ -427,2 +429,16 @@\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n+            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+            server.start();\n+            try {\n+                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+                var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n+                var response = client.send(request, BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 404);\n+                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+                assertEquals(response.body(), expectedBody);\n+            } finally {\n+                server.stop(0);\n+            }\n+        }\n+    }\n+\n+    private boolean createSymLink(Path symlink, Path target) {\n@@ -430,8 +446,6 @@\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assertEquals(response.statusCode(), 404);\n-            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-            assertEquals(response.body(), expectedBody);\n-        } finally {\n-            server.stop(0);\n+            Files.createSymbolicLink(symlink, target);\n+            return true;\n+        } catch (UnsupportedOperationException uoe) {\n+            throw new SkippedException(\"sym link creation not supported\", uoe);\n+        } catch (IOException ioe) {\n+            throw new SkippedException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CustomFileSystemTest.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import jtreg.SkippedException;\n@@ -390,1 +391,1 @@\n-        Files.createSymbolicLink(symlink, target);\n+        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n@@ -392,11 +393,12 @@\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assertEquals(response.statusCode(), 404);\n-            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-            assertEquals(response.body(), expectedBody);\n-        } finally {\n-            server.stop(0);\n+            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+            server.start();\n+            try {\n+                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+                var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n+                var response = client.send(request, BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 404);\n+                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+                assertEquals(response.body(), expectedBody);\n+            } finally {\n+                server.stop(0);\n+            }\n@@ -417,1 +419,1 @@\n-        Files.createSymbolicLink(symlink, target);\n+        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n@@ -419,2 +421,16 @@\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-        server.start();\n+            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+            server.start();\n+            try {\n+                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+                var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n+                var response = client.send(request, BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 404);\n+                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+                assertEquals(response.body(), expectedBody);\n+            } finally {\n+                server.stop(0);\n+            }\n+        }\n+    }\n+\n+    private boolean createSymLink(Path symlink, Path target) {\n@@ -422,8 +438,6 @@\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assertEquals(response.statusCode(), 404);\n-            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-            assertEquals(response.body(), expectedBody);\n-        } finally {\n-            server.stop(0);\n+            Files.createSymbolicLink(symlink, target);\n+            return true;\n+        } catch (UnsupportedOperationException uoe) {\n+            throw new SkippedException(\"sym link creation not supported\", uoe);\n+        } catch (IOException ioe) {\n+            throw new SkippedException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"}]}