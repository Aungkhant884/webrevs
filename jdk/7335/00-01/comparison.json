{"files":[{"patch":"@@ -74,1 +74,0 @@\n-import jtreg.SkippedException;\n@@ -78,0 +77,1 @@\n+import org.testng.SkipException;\n@@ -399,1 +399,1 @@\n-        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n+        createSymLink(symlink, target);\n@@ -401,12 +401,11 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n@@ -427,1 +426,1 @@\n-        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n+        createSymLink(symlink, target);\n@@ -429,12 +428,11 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n@@ -444,1 +442,1 @@\n-    private boolean createSymLink(Path symlink, Path target) {\n+    private void createSymLink(Path symlink, Path target) {\n@@ -447,1 +445,0 @@\n-            return true;\n@@ -449,1 +446,1 @@\n-            throw new SkippedException(\"sym link creation not supported\", uoe);\n+            throw new SkipException(\"sym link creation not supported\", uoe);\n@@ -451,1 +448,1 @@\n-            throw new SkippedException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n+            throw new SkipException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CustomFileSystemTest.java","additions":28,"deletions":31,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import jtreg.SkippedException;\n@@ -60,0 +59,1 @@\n+import org.testng.SkipException;\n@@ -391,1 +391,1 @@\n-        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n+        createSymLink(symlink, target);\n@@ -393,12 +393,11 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"symlink\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n@@ -419,1 +418,1 @@\n-        if (createSymLink(symlink, target)) {  \/\/ sym link creation succeeded\n+        createSymLink(symlink, target);\n@@ -421,12 +420,11 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"symlink\/aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n@@ -436,1 +434,1 @@\n-    private boolean createSymLink(Path symlink, Path target) {\n+    private void createSymLink(Path symlink, Path target) {\n@@ -439,1 +437,0 @@\n-            return true;\n@@ -441,1 +438,1 @@\n-            throw new SkippedException(\"sym link creation not supported\", uoe);\n+            throw new SkipException(\"sym link creation not supported\", uoe);\n@@ -443,1 +440,1 @@\n-            throw new SkippedException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n+            throw new SkipException(\"probably insufficient privileges to create sym links (Windows)\", ioe);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":28,"deletions":31,"binary":false,"changes":59,"status":"modified"}]}