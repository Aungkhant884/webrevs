{"files":[{"patch":"@@ -542,0 +542,26 @@\n+\/\/ The HeapBlockClaimer is used during parallel iteration over the heap,\n+\/\/ allowing workers to claim heap blocks, gaining exclusive rights to these blocks.\n+\/\/ The eden and survivor spaces are treated as single blocks as it is hard to divide\n+\/\/ these spaces.\n+\/\/ The old spaces are divided into serveral fixed-size blocks.\n+class HeapBlockClaimer : public StackObj {\n+  \/\/ Index of iterable block, negative values for indexes of young generation spaces,\n+  \/\/ zero and positive values for indexes of blocks in old generation space.\n+  ssize_t _claimed_index;\n+ public:\n+  static const ssize_t EdenIndex = -2;\n+  static const ssize_t SurvivorIndex = -1;\n+\n+  HeapBlockClaimer() : _claimed_index(EdenIndex) { }\n+  \/\/ Claim the block and get the block index.\n+  bool claim_and_get_block(ssize_t* block_index) {\n+    assert(block_index != NULL, \"Invalid index pointer\");\n+    *block_index = Atomic::fetch_and_add(&_claimed_index, 1);\n+    ssize_t iterable_blocks = (ssize_t)ParallelScavengeHeap::heap()->old_gen()->iterable_blocks();\n+    if (*block_index >= iterable_blocks) {\n+      return false;\n+    }\n+    return true;\n+  }\n+};\n+\n@@ -544,1 +570,1 @@\n-  int block_index;\n+  ssize_t block_index;\n@@ -553,1 +579,1 @@\n-      old_gen()->block_iterate(cl, block_index);\n+      old_gen()->block_iterate(cl, (size_t)block_index);\n@@ -558,10 +584,0 @@\n-bool HeapBlockClaimer::claim_and_get_block(int* block_index) {\n-  assert(block_index != NULL, \"Invalid index pointer\");\n-  *block_index = Atomic::fetch_and_add(&_claimed_index, 1);\n-  int itrable_blocks = (int)ParallelScavengeHeap::heap()->old_gen()->iterable_blocks();\n-  if (*block_index >= itrable_blocks) {\n-    return false;\n-  }\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-  friend class HeapBlockClaimer;\n@@ -293,15 +292,0 @@\n-\/\/ The HeapBlockClaimer is used during parallel iteration over heap,\n-\/\/ allowing workers to claim heap blocks, gaining exclusive rights to these blocks.\n-\/\/ The eden and survivor spaces are treated as single blocks as it is hard to divide\n-\/\/ these spaces.\n-\/\/ The old spaces are divided into serveral fixed-size blocks.\n-class HeapBlockClaimer : public StackObj {\n-  int _claimed_index;\n- public:\n-  HeapBlockClaimer() : _claimed_index(EdenIndex) { }\n-  \/\/ Claim the block and get the block index.\n-  bool claim_and_get_block(int* block_index);\n-  static const int EdenIndex = -2;\n-  static const int SurvivorIndex = -1;\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-void PSOldGen::block_iterate(ObjectClosure* cl, uint block_index) {\n+void PSOldGen::block_iterate(ObjectClosure* cl, size_t block_index) {\n@@ -212,2 +212,3 @@\n-    assert(begin <= start && start < end,\n-           \"object %p must in the range of [%p, %p)\\n\", start, begin, end);\n+    assert(begin <= start,\n+           \"object address\" PTR_FORMAT \" must be larger or equal to block address at \" PTR_FORMAT \"\\n\",\n+           start, begin);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -172,2 +172,1 @@\n-  void block_iterate(ObjectClosure* cl, uint block_index);\n-\n+  void block_iterate(ObjectClosure* cl, size_t block_index);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}