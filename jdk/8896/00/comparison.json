{"files":[{"patch":"@@ -46,2 +46,4 @@\n- * This class is used by the text components, AquaEditorPaneUI, AquaTextAreaUI, AquaTextFieldUI and AquaTextPaneUI to control painting of the\n- * component's border.  NOTE: It is assumed that this handler is added to components that extend JComponent.\n+ * This class is used by the text components, AquaEditorPaneUI, AquaTextAreaUI,\n+ * AquaTextFieldUI and AquaTextPaneUI to control painting of the component's\n+ * border. NOTE: It is assumed that this handler is added to components\n+ * that extend JComponent.\n@@ -50,1 +52,2 @@\n-    \/\/ Flag to help focusGained() determine whether the origin focus loss was due to a temporary focus loss or not.\n+    \/\/ Flag to help focusGained() determine whether the origin focus loss was\n+    \/\/ due to a temporary focus loss or not.\n@@ -53,1 +56,2 @@\n-    \/\/ Flag to track when a border needs a repaint due to a window becoming activate\/inactive.\n+    \/\/ Flag to track when a border needs a repaint due to a window becoming\n+    \/\/ activate\/inactive.\n@@ -70,2 +74,2 @@\n-\n-        \/\/ If we lost focus due to a permanent focus loss then repaint the border on the component.\n+        \/\/ If we lost focus due to a permanent focus loss then repaint the\n+        \/\/ border on the component.\n@@ -81,3 +85,7 @@\n-            \/\/ The FRAME_ACTIVE_PROPERTY change event is sent before a component gains focus.\n-            \/\/ We set a flag to help the focusGained() determine when they should be repainting\n-            \/\/ the components focus.\n+            \/\/ The FRAME_ACTIVE_PROPERTY change event is sent before a component\n+            \/\/ gains focus.We set a flag to help the focusGained() determine when\n+            \/\/ they should be repainting the components focus.\n+\n+            \/\/ this call added to change focus ring color (for\n+            \/\/ table and list) according to accent color changes.\n+            changeFocusRingColor();\n@@ -86,2 +94,3 @@\n-            \/\/ The FRAME_ACTIVE_PROPERTY change event is sent after a component loses focus.\n-            \/\/ We use the wasTemporary flag to determine if we need to repaint the border.\n+            \/\/ The FRAME_ACTIVE_PROPERTY change event is sent after a component\n+            \/\/ loses focus. We use the wasTemporary flag to determine if we need\n+            \/\/ to repaint the border.\n@@ -94,1 +103,2 @@\n-        final Object activeObj = c.getClientProperty(AquaFocusHandler.FRAME_ACTIVE_PROPERTY);\n+        final Object activeObj = c.getClientProperty(\n+                AquaFocusHandler.FRAME_ACTIVE_PROPERTY);\n@@ -116,2 +126,4 @@\n-    static void swapSelectionColors(final String prefix, final JTree c, final Object value) {\n-        \/\/ <rdar:\/\/problem\/8166173> JTree: selection color does not dim when window becomes inactive\n+    static void swapSelectionColors(final String prefix, final JTree c,\n+                                    final Object value) {\n+        \/\/ <rdar:\/\/problem\/8166173> JTree: selection color does not dim when\n+        \/\/ window becomes inactive\n@@ -121,1 +133,2 @@\n-    static void swapSelectionColors(final String prefix, final JTable c, final Object value) {\n+    static void swapSelectionColors(final String prefix, final JTable c,\n+                                    final Object value) {\n@@ -142,2 +155,2 @@\n-    static void setSelectionColors(final JTable c, final String fgName, final String bgName) {\n-\n+    static void setSelectionColors(final JTable c, final String fgName,\n+                                   final String bgName) {\n@@ -146,9 +159,0 @@\n-\n-        \/\/ focus ring changes for on-the-fly accent color changes\n-        Color prominentFocusRing = AquaLookAndFeel.deriveProminentFocusRing(\n-                UIManager.getColor(\"Table.cellFocusRing\"));\n-        BorderUIResource.LineBorderUIResource focusCellHighlightBorder =\n-                new BorderUIResource.LineBorderUIResource(prominentFocusRing, 2);\n-        UIManager.getDefaults().put(\"Table.focusCellHighlightBorder\",\n-                focusCellHighlightBorder);\n-\n@@ -157,1 +161,2 @@\n-    static void swapSelectionColors(final String prefix, final JList<?> c, final Object value) {\n+    static void swapSelectionColors(final String prefix, final JList<?> c,\n+                                    final Object value) {\n@@ -177,1 +182,2 @@\n-    static void setSelectionColors(final JList<?> c, final String fgName, final String bgName) {\n+    static void setSelectionColors(final JList<?> c, final String fgName,\n+                                   final String bgName) {\n@@ -188,0 +194,17 @@\n+\n+    \/\/ focus ring changes for tables and list for\n+    \/\/ on-the-fly accent color changes\n+    private static void changeFocusRingColor() {\n+        Color focusRingColor = UIManager.getColor(\"CellFocus.color\");\n+\n+        if (focusRingColor != null) {\n+            Color prominentFocusRing = AquaLookAndFeel.deriveProminentFocusRing(\n+                    focusRingColor);\n+            BorderUIResource.LineBorderUIResource focusCellHighlightBorder =\n+                    new BorderUIResource.LineBorderUIResource(prominentFocusRing, 2);\n+            UIManager.getDefaults().put(\"Table.focusCellHighlightBorder\",\n+                    focusCellHighlightBorder);\n+            UIManager.getDefaults().put(\"List.focusCellHighlightBorder\",\n+                    focusCellHighlightBorder);\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaFocusHandler.java","additions":51,"deletions":28,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -389,3 +389,1 @@\n-        final Border focusCellHighlightBorder = new BorderUIResource.LineBorderUIResource(focusRingColor);\n-\n-        \/\/ for table cell highlighter\n+        \/\/ for table and list cell highlighter\n@@ -393,0 +391,2 @@\n+        final Border focusCellHighlightBorder = new BorderUIResource.LineBorderUIResource(\n+                deriveProminentFocusRing(cellFocusRingColor), 2);\n@@ -453,0 +453,2 @@\n+            \"CellFocus.color\", cellFocusRingColor,\n+\n@@ -895,3 +897,1 @@\n-            \"Table.cellFocusRing\", cellFocusRingColor,\n-            \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(\n-                    deriveProminentFocusRing(cellFocusRingColor), 2),\n+            \"Table.focusCellHighlightBorder\", focusCellHighlightBorder,\n@@ -1147,2 +1147,2 @@\n-        float satLowerValue = 0.30f;\n-        float satUpperValue = 1.0f;\n+        final float satLowerValue = 0.30f;\n+        final float satUpperValue = 1.0f;\n@@ -1151,1 +1151,1 @@\n-        float satGrayScale = 0.10f;\n+        final float satGrayScale = 0.10f;\n@@ -1155,1 +1155,1 @@\n-        float saturationThreshold = 0.5f;\n+        final float saturationThreshold = 0.5f;\n@@ -1158,1 +1158,1 @@\n-        float brightnessValue = 1.0f;\n+        final float brightnessValue = 1.0f;\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @bug 7124282\n- * @key headful\n- * @requires (os.family == \"mac\")\n- * @summary Checks whether the JTable's focus ring color's RGB color\n- * diff with selectionBackground is greater in comparison to original\n- * focus ring (represented by 'Table.cellFocusRing' property in Aqua LAF\n- * UIDefaults).\n- * @run main JTableFocusRingTest\n- *\/\n-\n-import java.awt.Color;\n-import java.util.Arrays;\n-import javax.swing.plaf.BorderUIResource.LineBorderUIResource;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.UnsupportedLookAndFeelException;\n-\n-public class JTableFocusRingTest {\n-\n-    public static void main(String[] args) throws Exception{\n-\n-        try {\n-                UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n-        } catch (ClassNotFoundException | InstantiationException |\n-                IllegalAccessException | UnsupportedLookAndFeelException e) {\n-                throw new RuntimeException(\"Unsupported Look&Feel Class\");\n-        }\n-        SwingUtilities.invokeAndWait(() -> {\n-\n-            float[] bckRGB = new float[3];\n-            float[] oldCellRingRGB = new float[3];\n-            float[] newCellRingRGB = new float[3];\n-\n-            Color selectionBck = null;\n-            Color originalRingColor = null;\n-            Color newRingColor = null;\n-\n-            \/\/ saturation threshold for grayish colors\n-            float satGrayScale = 0.10f;\n-\n-            if (UIManager.getDefaults().get(\"Table.selectionBackground\") != null\n-                    && UIManager.getDefaults().get(\"Table.selectionBackground\")\n-                    instanceof Color) {\n-                selectionBck = (Color) UIManager.getDefaults()\n-                        .get(\"Table.selectionBackground\");\n-            }\n-            if (UIManager.getDefaults().get(\"Table.cellFocusRing\") != null\n-                    && UIManager.getDefaults().get(\"Table.cellFocusRing\")\n-                    instanceof Color) {\n-               originalRingColor = (Color) UIManager.getDefaults().get(\"Table.cellFocusRing\");\n-            }\n-\n-            if (UIManager.getDefaults()\n-                    .get(\"Table.focusCellHighlightBorder\") != null &&\n-                    UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\")\n-                            instanceof LineBorderUIResource) {\n-                LineBorderUIResource cellFocusBorderObj = (LineBorderUIResource)\n-                        UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\");\n-                newRingColor = cellFocusBorderObj.getLineColor();\n-            }\n-\n-            if (selectionBck == null || originalRingColor == null ||\n-                    newRingColor == null) {\n-                throw new RuntimeException(\"One or more color values are null\");\n-            }\n-            System.out.println(UIManager.getLookAndFeel().toString());\n-            System.out.println(\"Selection Background Color: \"\n-                    + selectionBck.toString());\n-\n-            System.out.println(\"Original FocusRing Color: \"\n-                    + originalRingColor.toString());\n-\n-            System.out.println(\"Brighter FocusRing Color: \"\n-                    + newRingColor.toString());\n-\n-            int redValue = originalRingColor.getRed();\n-            int greenValue = originalRingColor.getGreen();\n-            int blueValue = originalRingColor.getBlue();\n-\n-            float[] hsbValues = new float[3];\n-            Color.RGBtoHSB(redValue, greenValue, blueValue, hsbValues);\n-\n-            System.out.println(\"Original Focus Ring Hue, Saturation and\" +\n-                    \" Brightness: \"+ Arrays.toString(hsbValues));\n-\n-            \/\/ Edge case - Original Focus ring color: WHITE\/BLACK\/GRAY\n-            if (((hsbValues[0] == 0 && hsbValues[1] == 0)\n-                    || hsbValues[1] <= satGrayScale) &&\n-                    newRingColor.equals(Color.LIGHT_GRAY)) {\n-                System.out.println(\"Original Focus ring color:\" +\n-                        \"WHITE\/BLACK\/GRAYISH, Cell Focus Ring Color: LIGHT GRAY\");\n-                System.out.println(\"Test case passed\");\n-                return;\n-            }\n-            selectionBck.getRGBColorComponents(bckRGB);\n-            originalRingColor.getRGBColorComponents(oldCellRingRGB);\n-            newRingColor.getRGBColorComponents(newCellRingRGB);\n-\n-            float originalRGBDiff = calculateRGBDiff(oldCellRingRGB, bckRGB);\n-            float brighterRGBDiff = calculateRGBDiff(newCellRingRGB, bckRGB);\n-\n-            System.out.println(\"Original RGB Diff: \"+ originalRGBDiff);\n-            System.out.println(\"Brighter RGB Diff: \"+ brighterRGBDiff);\n-\n-            if (brighterRGBDiff <= originalRGBDiff) {\n-                throw new RuntimeException(\"Cell Focus Ring Not Visible\");\n-            }\n-        });\n-    }\n-\n-    \/* calculates the difference between individual RGB components of 2 colors\n-       and returns the total difference. A higher RGB difference is preferred\n-       for a prominent cell highlighter *\/\n-\n-    private static float calculateRGBDiff(float[] focusRingRGB, float[] bckRGB) {\n-\n-        float totalRGBDiff = 0;\n-        for (int i=0; i< focusRingRGB.length; i++) {\n-            totalRGBDiff += Math.abs(focusRingRGB[i] - bckRGB[i]);\n-        }\n-        return totalRGBDiff;\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JTable\/7124282\/JTableFocusRingTest.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7124282\n+ * @key headful\n+ * @requires (os.family == \"mac\")\n+ * @summary Checks whether Table & List's focus ring color is more prominent\n+ * in comparison to original focus ring (represented by 'CellFocus.color'\n+ * property in Aqua LAF UIDefaults) for MacOS accent colors.\n+ * @run main CellFocusRingTest\n+ *\/\n+\n+import java.awt.Color;\n+import javax.swing.plaf.BorderUIResource.LineBorderUIResource;\n+import javax.swing.UIManager;\n+\n+public class CellFocusRingTest {\n+\n+    private static StringBuffer errorLog = new StringBuffer();\n+\n+    public static void main(String[] args) {\n+        try {\n+            UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unsupported Look&Feel Class\");\n+        }\n+\n+        System.out.println(\"Test for Table\");\n+        testFocusRingColor(\"Table\");\n+        System.out.println(\"--------------------------------\");\n+\n+        System.out.println(\"Test for List\");\n+        testFocusRingColor(\"List\");\n+        System.out.println(\"--------------------------------\");\n+\n+        if (errorLog.isEmpty()) {\n+            System.out.println(\"Test passed !!\");\n+        }\n+        else {\n+            throw new RuntimeException(\"Following cases failed.\\n\"+ errorLog);\n+        }\n+    }\n+\n+    private static void testFocusRingColor(String prefix) {\n+        float[] bckRGB = new float[3];\n+        float[] oldCellRingRGB = new float[3];\n+        float[] newCellRingRGB = new float[3];\n+\n+        Color selectionBck = null;\n+        Color originalRingColor = null;\n+        Color newRingColor = null;\n+\n+        \/\/ saturation threshold for grayish colors\n+        float satGrayScale = 0.10f;\n+\n+        if (UIManager.getDefaults().get(prefix + \".selectionBackground\") != null\n+                && UIManager.getDefaults().get(prefix + \".selectionBackground\")\n+                instanceof Color) {\n+            selectionBck = (Color) UIManager.getDefaults()\n+                    .get(prefix + \".selectionBackground\");\n+        }\n+\n+        if (UIManager.getDefaults().get(\"CellFocus.color\") != null\n+                && UIManager.getDefaults().get(\"CellFocus.color\")\n+                instanceof Color) {\n+            originalRingColor = (Color) UIManager.getDefaults()\n+                    .get(\"CellFocus.color\");\n+        }\n+\n+        if (UIManager.getDefaults()\n+                .get(prefix + \".focusCellHighlightBorder\") != null &&\n+                UIManager.getDefaults().get(prefix + \".focusCellHighlightBorder\")\n+                        instanceof LineBorderUIResource cellFocusBorderObj) {\n+            newRingColor = cellFocusBorderObj.getLineColor();\n+        }\n+\n+        if (selectionBck == null || originalRingColor == null ||\n+                newRingColor == null) {\n+            errorLog.append(prefix + \": One or more color values are null.\\n\");\n+        }\n+        System.out.println(UIManager.getLookAndFeel().toString());\n+        System.out.println(\"Selection Background Color: \"\n+                + selectionBck.toString());\n+\n+        System.out.println(\"Original FocusRing Color: \"\n+                + originalRingColor.toString());\n+\n+        System.out.println(\"Brighter FocusRing Color: \"\n+                + newRingColor.toString());\n+\n+        int redValue = originalRingColor.getRed();\n+        int greenValue = originalRingColor.getGreen();\n+        int blueValue = originalRingColor.getBlue();\n+\n+        float[] hsbValues = new float[3];\n+        Color.RGBtoHSB(redValue, greenValue, blueValue, hsbValues);\n+\n+        \/\/ Edge case - Original Focus ring color: WHITE\/BLACK\/GRAY\n+        if (((hsbValues[0] == 0 && hsbValues[1] == 0)\n+                || hsbValues[1] <= satGrayScale) &&\n+                newRingColor.equals(Color.LIGHT_GRAY)) {\n+            System.out.println(\"Original Focus ring color:\" +\n+                    \"WHITE\/BLACK\/GRAYISH, Cell Focus Ring Color: LIGHT GRAY\");\n+            return;\n+        }\n+        selectionBck.getRGBColorComponents(bckRGB);\n+        originalRingColor.getRGBColorComponents(oldCellRingRGB);\n+        newRingColor.getRGBColorComponents(newCellRingRGB);\n+\n+        float originalRGBDiff = calculateRGBDiff(oldCellRingRGB, bckRGB);\n+        float brighterRGBDiff = calculateRGBDiff(newCellRingRGB, bckRGB);\n+\n+        System.out.println(\"Original RGB Diff: \"+ originalRGBDiff);\n+        System.out.println(\"Brighter RGB Diff: \"+ brighterRGBDiff);\n+\n+        if (brighterRGBDiff <= originalRGBDiff) {\n+            errorLog.append(prefix + \": Cell Focus Ring Not Visible.\\n\");\n+        }\n+    }\n+\n+    \/* calculates the difference between individual RGB components of 2 colors\n+       and returns the total difference. A higher RGB difference is preferred\n+       for a prominent cell highlighter *\/\n+    private static float calculateRGBDiff(float[] focusRingRGB, float[] bckRGB) {\n+        float totalRGBDiff = 0;\n+        for (int i=0; i< focusRingRGB.length; i++) {\n+            totalRGBDiff += Math.abs(focusRingRGB[i] - bckRGB[i]);\n+        }\n+        return totalRGBDiff;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JTable\/CellFocusRingTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}