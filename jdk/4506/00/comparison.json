{"files":[{"patch":"@@ -52,1 +52,1 @@\n-final class HttpClientFacade extends HttpClient implements Trackable {\n+public final class HttpClientFacade extends HttpClient implements Trackable {\n@@ -113,0 +113,4 @@\n+    public Executor theExecutor() {\n+        return impl.theExecutor();\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientFacade.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    private final boolean server;\n+    private int maskingKey;\n@@ -65,0 +67,4 @@\n+        this(output, false);\n+    }\n+\n+    MessageDecoder(MessageStreamConsumer output, boolean server) {\n@@ -66,0 +72,1 @@\n+        this.server = server;\n@@ -146,1 +153,1 @@\n-        if (value) {\n+        if (value && !server) {\n@@ -149,0 +156,3 @@\n+        if (!value && server) {\n+            throw new FailWebSocketException(\"Masked frame expected\");\n+        }\n@@ -178,1 +188,3 @@\n-        throw new InternalError();\n+        if (!server)\n+            throw new InternalError();\n+        maskingKey = value;\n@@ -207,1 +219,5 @@\n-                output.onBinary(data.slice(), last);\n+                ByteBuffer slice = data.slice();\n+                if (server) {\n+                    unMask(slice);\n+                }\n+                output.onBinary(slice, last);\n@@ -211,0 +227,3 @@\n+                if (server) {\n+                    unMask(data);\n+                }\n@@ -228,0 +247,11 @@\n+    private void unMask(ByteBuffer src) {\n+        int pos = src.position();\n+        int size = src.remaining();\n+        ByteBuffer temp = ByteBuffer.allocate(size);\n+        Frame.Masker.transferMasking(src, temp, maskingKey);\n+        temp.flip();\n+        src.position(pos);\n+        src.put(temp);\n+        src.position(pos).limit(pos+size);\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/MessageDecoder.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -84,0 +84,9 @@\n+    private final boolean server;\n+\n+    MessageEncoder() {\n+        this(false);\n+    }\n+\n+    MessageEncoder(boolean isServer) {\n+        this.server = isServer;\n+    }\n@@ -372,2 +381,9 @@\n-        int mask = maskingKeySource.nextInt();\n-        headerWriter.fin(fin)\n+        \/\/ for server setting mask to 0 disables masking (xor)\n+        int mask = this.server ? 0 : maskingKeySource.nextInt();\n+        if (mask == 0) {\n+            headerWriter.fin(fin)\n+                    .opcode(opcode)\n+                    .payloadLen(payloadLen)\n+                    .write(headerBuffer);\n+        } else {\n+            headerWriter.fin(fin)\n@@ -378,0 +394,1 @@\n+        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/MessageEncoder.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.net.http.HttpClientFacade;\n@@ -40,0 +41,1 @@\n+import java.net.http.HttpClient;\n@@ -47,0 +49,1 @@\n+import java.util.concurrent.Executor;\n@@ -118,0 +121,1 @@\n+    private final Executor clientExecutor;\n@@ -122,0 +126,1 @@\n+                                       b.getClient(),\n@@ -143,0 +148,1 @@\n+                                     HttpClient client,\n@@ -146,1 +152,1 @@\n-        WebSocketImpl ws = new WebSocketImpl(uri, subprotocol, listener, transport);\n+        WebSocketImpl ws = new WebSocketImpl(uri, client, subprotocol, listener, transport);\n@@ -154,0 +160,1 @@\n+                          HttpClient client,\n@@ -158,0 +165,1 @@\n+        this.clientExecutor = ((HttpClientFacade)client).theExecutor();\n@@ -359,1 +367,1 @@\n-            receiveScheduler.runOrSchedule();\n+            receiveScheduler.runOrSchedule(clientExecutor);\n@@ -401,1 +409,1 @@\n-     *       x --(1)--> IDLE --(2)--> y (otherwise we're loosing events, or\n+     *       x --(1)--> IDLE --(2)--> y (otherwise we're losing events, or\n@@ -705,1 +713,1 @@\n-        receiveScheduler.runOrSchedule();\n+        receiveScheduler.runOrSchedule(clientExecutor);\n@@ -837,1 +845,1 @@\n-                receiveScheduler.runOrSchedule();\n+                receiveScheduler.runOrSchedule(clientExecutor);\n@@ -853,1 +861,1 @@\n-            receiveScheduler.runOrSchedule();\n+            receiveScheduler.runOrSchedule(clientExecutor);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/WebSocketImpl.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268294\n+ * @modules java.net.http\/jdk.internal.net.http.websocket:open jdk.httpserver\n+ * @run main\/othervm\/timeout=18\n+ *      --add-reads java.net.http=ALL-UNNAMED\n+ *      --add-reads java.net.http=jdk.httpserver\n+ *      java.net.http\/jdk.internal.net.http.websocket.WebSocketAndHttpTest\n+ *\/\n+public final class WebSocketServerDriver { }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketServerDriver.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+import java.nio.ByteBuffer;\n+\n+\/**\n+ * No implementation provided for onInit() because that must always be\n+ * implemented by user\n+ *\/\n+abstract class DefaultMessageStreamHandler implements MessageStreamHandler {\n+\n+    public void onText(CharSequence data, boolean last) {}\n+\n+    public void onBinary(ByteBuffer data, boolean last) {}\n+\n+    public void onPing(ByteBuffer data) {}\n+\n+    public void onPong(ByteBuffer data) {}\n+\n+    public void onClose(int statusCode, CharSequence reason) {}\n+\n+    public void onComplete() {}\n+\n+    public void onError(Throwable e) {}\n+}\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/DefaultMessageStreamHandler.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+\/**\n+ * WebSocket server listener interface, which is the same as the client API\n+ * in java.net.http. See MessageStreamResponder for how listener methods\n+ * can send response messages back to the client\n+ *\n+ * All MessageStreamConsumer methods must be implemented (plus the handler method\n+ * declared here). DefaultMessageStreamHandler provides empty implementations of all\n+ * that can be extended, except for onInit() which must always be implemented.\n+ *\n+ *    void onText(CharSequence data, boolean last);\n+ *\n+ *    void onBinary(ByteBuffer data, boolean last);\n+ *\n+ *    void onPing(ByteBuffer data);\n+ *\n+ *    void onPong(ByteBuffer data);\n+ *\n+ *    void onClose(int statusCode, CharSequence reason);\n+ *\n+ *    void onComplete();\n+ *\n+ *    void onError(Throwable e);\n+ *\/\n+interface MessageStreamHandler extends MessageStreamConsumer {\n+\n+    \/**\n+     * called before any of the methods above to supply a\n+     * MessageStreamResponder for any new connection, which can be used to send replies\n+     * sendText(), sendBinary(), sendClose() etc\n+     *\/\n+    void onInit(MessageStreamResponder responder);\n+}\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/MessageStreamHandler.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+import java.io.*;\n+import java.nio.*;\n+import java.util.List;\n+\n+\/**\n+ * One of these supplied for each incoming client connection for use\n+ * by user written MessageStreamConsumer.\n+ *\/\n+interface MessageStreamResponder {\n+\n+    public void sendText(CharBuffer src, boolean last) throws IOException;\n+\n+    public void sendBinary(ByteBuffer src, boolean last) throws IOException;\n+\n+    public void sendPing(ByteBuffer src) throws IOException;\n+\n+    public void sendPong(ByteBuffer src) throws IOException;\n+\n+    public void sendClose(int statusCode, CharBuffer reason) throws IOException;\n+\n+    public void close();\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/MessageStreamResponder.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+package jdk.internal.net.http.websocket;\n+\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.WebSocket;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+\n+\/**\n+ * This is the client side of the test invoked from WebSocketAndHttpTest:\n+ *\n+ * The two args are the addresses of a (local) Websocket and Http server\n+ *\n+ * The test first sends a request to the WS server and in the listener\n+ * which handles the response, it tries to send a request to the http\n+ * server. This hangs if the listener was invoked from the selector\n+ * manager thread. If invoked from a different thread then the http\n+ * response is received and the response string is mapped to string\n+ * \"succeeded\"\n+ *\/\n+public class WebSocketAndHttpClient {\n+\n+    public static void main(String[] args) throws InterruptedException {\n+\n+        ExecutorService executorService = Executors.newCachedThreadPool();\n+        HttpClient httpClient = HttpClient.newBuilder().executor(executorService).build();\n+\n+        WebSocketTest wsTest = new WebSocketTest(httpClient, args[0]);\n+        HttpTest httpTest = new HttpTest(httpClient, args[1]);\n+\n+        AtomicReference<String> result = new AtomicReference<>(\"failed\");\n+\n+        wsTest.listen(message -> httpTest.getData(message).map(s -> \"succeeded\").ifPresent(result::set));\n+        wsTest.sendData(\"TEST_DATA\");\n+\n+        System.out.println(\"Wait some time\");\n+        Thread.sleep(3_000);\n+\n+        executorService.shutdownNow();\n+\n+        System.out.println(\"Result: test \" + result.get());\n+        if (!result.get().equals(\"succeeded\"))\n+            throw new RuntimeException(\"Test failed\");\n+    }\n+\n+    static class WebSocketTest {\n+        final HttpClient httpClient;\n+        final String server;\n+        volatile WebSocket webSocket;\n+\n+        WebSocketTest(HttpClient httpClient, String server) {\n+            this.httpClient = httpClient;\n+            this.server = server;\n+        }\n+\n+        public void listen(Consumer<String> consumer) {\n+            URI uri = URI.create(server);\n+            System.out.println(\"WS API client - Connecting to \" + uri.toString());\n+            CompletableFuture<WebSocket> cf = httpClient.newWebSocketBuilder()\n+                .buildAsync(uri, new WebSocket.Listener() {\n+                    @Override\n+                    public CompletionStage<?> onText(WebSocket webSocket, CharSequence data, boolean last) {\n+                        System.out.println(\"WS API client - received data: \" + data);\n+                        consumer.accept(data.toString());\n+                        return null;\n+                    }\n+                    public void onError(WebSocket webSocket, Throwable error) {\n+                        System.out.println(\"WS API client - error\");\n+                        error.printStackTrace();\n+                    }\n+                });\n+            System.out.println(\"CF created\");\n+            webSocket = cf.join();\n+            System.out.println(\"Websocket created\");\n+        }\n+\n+        void sendData(String data) {\n+            System.out.println(\"WS API client - sending data via WebSocket: {}\" + data);\n+            webSocket.sendText(data, true).join();\n+        }\n+    }\n+\n+    static class HttpTest {\n+        final HttpClient httpClient;\n+        final String baseUrl;\n+\n+        HttpTest(HttpClient httpClient, String baseUrl) {\n+            this.httpClient = httpClient;\n+            this.baseUrl = baseUrl;\n+        }\n+\n+        private Optional<String> getData(String data) {\n+            try {\n+                URI uri = URI.create(baseUrl + \"?param=\" + data);\n+                HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();\n+                System.out.println(\"Http API Client - send HTTP GET request with parameter {}\" + data);\n+                HttpResponse<String> send = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n+                Optional<String> responseData = Optional.ofNullable(send.body());\n+                responseData.ifPresent(s -> System.out.println(\"Http API Client - response for HTTP GET request received\"));\n+                return responseData;\n+            } catch (Exception e) {\n+                System.out.println(\"Http API Client - Error getting data: \" + e.getMessage());\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/WebSocketAndHttpClient.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+import java.net.*;\n+import java.nio.CharBuffer;\n+import java.io.*;\n+\n+import com.sun.net.httpserver.*;\n+\n+public class WebSocketAndHttpTest {\n+    static class WHandler extends DefaultMessageStreamHandler {\n+        volatile MessageStreamResponder responder;\n+\n+        public void onText(CharSequence data, boolean last) {\n+            System.out.println(\"onText: \" + data);\n+            System.out.println(\"onText: \" + Thread.currentThread());\n+            try {\n+                responder.sendText(CharBuffer.wrap(data), true);\n+                System.out.println(\"onText: send ok\");\n+            } catch (IOException e) {\n+                System.out.println(\"onText: \" + e);\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        public void onInit(MessageStreamResponder responder) {\n+            System.out.println(\"onInit\");\n+            this.responder = responder;\n+        }\n+    }\n+\n+    static HttpHandler httpHandler = (ex) -> ex.sendResponseHeaders(200, -1);\n+\n+    public static void main(String[] args) throws Exception {\n+        HttpServer hserver = null;\n+        try {\n+            WebSocketServer server = new WebSocketServer(new WHandler());\n+            server.open();\n+            URI uri = server.getURI();\n+\n+            hserver = HttpServer.create(new InetSocketAddress(0), 4);\n+            hserver.createContext(\"\/\", httpHandler);\n+            hserver.start();\n+\n+            int port = hserver.getAddress().getPort();\n+            URI huri = new URI(\"http:\/\/127.0.0.1:\" + port + \"\/foo\");\n+\n+            WebSocketAndHttpClient.main(new String[]{uri.toString(), huri.toString()});\n+        } finally {\n+            hserver.stop(0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/WebSocketAndHttpTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.io.*;\n+import java.nio.*;\n+import java.nio.channels.*;\n+\n+public class WebSocketResponder implements MessageStreamResponder {\n+\n+    final MessageStreamConsumer consumer;\n+    final LinkedList<ByteBuffer> queue;\n+    volatile boolean closed = false;\n+\n+    final MessageEncoder encoder;\n+    final MessageDecoder decoder;\n+\n+    static final int BUF_SIZE = 1024;\n+\n+    public WebSocketResponder(MessageStreamConsumer consumer) {\n+        this.consumer = consumer;\n+        this.queue = new LinkedList<>();\n+        this.decoder = new MessageDecoder(consumer, true);\n+        this.encoder = new MessageEncoder(true);\n+    }\n+\n+    \/\/ own thread\n+    public void readLoop(SocketChannel chan) throws IOException {\n+        chan.configureBlocking(true);\n+        boolean eof = false;\n+        ByteBuffer buf = ByteBuffer.allocate(8 * 1024);\n+        Frame.Reader reader = new Frame.Reader();\n+        try {\n+            while (!eof) {\n+                int count;\n+                buf.clear();\n+                eof = ((count=chan.read(buf)) == -1);\n+                if (!eof) {\n+                    buf.flip();\n+                    reader.readFrame(buf, decoder);\n+                }\n+            }\n+        } catch (IOException e) {\n+            if (!closed)\n+                throw e;\n+        }\n+    }\n+\n+    \/\/ own thread\n+    public void writeLoop(SocketChannel chan) throws IOException {\n+        \/\/ read queue and send data\n+        while (true) {\n+            ByteBuffer buf;\n+            synchronized(queue) {\n+                while (queue.isEmpty()) {\n+                    try {\n+                        queue.wait();\n+                    } catch (InterruptedException e) {\n+                        throw new IOException(e);\n+                    }\n+                    if (queue.isEmpty() && closed) {\n+                        chan.close();\n+                        return;\n+                    }\n+                }\n+                buf = queue.remove(0);\n+            }\n+            chan.write(buf);\n+        }\n+    }\n+\n+    \/**\n+     * Public methods below used y MessageStreamHandler to send replies\n+     * to client.\n+     *\/\n+    @Override\n+    public void sendText(CharBuffer src, boolean last) throws IOException {\n+        ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);\n+        LinkedList<ByteBuffer> bufs = new LinkedList<>();\n+        boolean done = false;\n+        do {\n+            buf.clear();\n+            done = encoder.encodeText(src, last, buf);\n+            buf.flip();\n+            bufs.add(buf);\n+        } while (!done);\n+        sendMessage(bufs);\n+    }\n+\n+    @Override\n+    public void sendBinary(ByteBuffer src, boolean last) throws IOException {\n+        ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);\n+        LinkedList<ByteBuffer> bufs = new LinkedList<>();\n+        boolean done = false;\n+        do {\n+            buf.clear();\n+            done = encoder.encodeBinary(src, last, buf);\n+            buf.flip();\n+            bufs.add(buf);\n+        } while (!done);\n+        sendMessage(bufs);\n+    }\n+\n+    @Override\n+    public void sendPing(ByteBuffer src) throws IOException {\n+        ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);\n+        LinkedList<ByteBuffer> bufs = new LinkedList<>();\n+        boolean done = false;\n+        do {\n+            buf.clear();\n+            done = encoder.encodePing(src, buf);\n+            buf.flip();\n+            bufs.add(buf);\n+        } while (!done);\n+        sendMessage(bufs);\n+    }\n+\n+    @Override\n+    public void sendPong(ByteBuffer src) throws IOException {\n+        ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);\n+        LinkedList<ByteBuffer> bufs = new LinkedList<>();\n+        boolean done = false;\n+        do {\n+            buf.clear();\n+            done = encoder.encodePong(src, buf);\n+            buf.flip();\n+            bufs.add(buf);\n+        } while (!done);\n+        sendMessage(bufs);\n+    }\n+\n+    @Override\n+    public void sendClose(int statusCode, CharBuffer reason) throws IOException {\n+        ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);\n+        LinkedList<ByteBuffer> bufs = new LinkedList<>();\n+        boolean done = false;\n+        do {\n+            buf.clear();\n+            done = encoder.encodeClose(statusCode, reason, buf);\n+            buf.flip();\n+            bufs.add(buf);\n+        } while (!done);\n+        sendMessage(bufs);\n+        close();\n+    }\n+\n+    private void sendMessage(List<ByteBuffer> bufs) throws IOException {\n+        if (closed)\n+            throw new IOException(\"closed\");\n+        synchronized(queue) {\n+            queue.addAll(bufs);\n+            queue.notify();\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        synchronized(queue) {\n+            closed = true;\n+            queue.notify();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/WebSocketResponder.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -0,0 +1,435 @@\n+\/*\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http.websocket;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.StandardSocketOptions;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.ClosedByInterruptException;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.CharacterCodingException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static java.lang.System.err;\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * WebSocket Server. This is a copy of the DummyWebSocketServer test class\n+ * but which also supports sending and receiving of websocket messages\n+ * using a simple API once the connection has been established\n+ *\n+ * MessageStreamHandler is the \"listener\" API to be implemented for handling\n+ * incoming messages. MessageStreamResponder is used by that handler to send\n+ * responses back to the client.\n+ *\n+ * Performs simpler version of the WebSocket Opening Handshake over HTTP (i.e.\n+ * no proxying, cookies, etc.) Supports sequential connections, one at a time,\n+ * i.e. in order for a client to connect to the server the previous client must\n+ * disconnect first.\n+ *\n+ * Expected client request:\n+ *\n+ *     GET \/chat HTTP\/1.1\n+ *     Host: server.example.com\n+ *     Upgrade: websocket\n+ *     Connection: Upgrade\n+ *     Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n+ *     Origin: http:\/\/example.com\n+ *     Sec-WebSocket-Protocol: chat, superchat\n+ *     Sec-WebSocket-Version: 13\n+ *\n+ * This server response:\n+ *\n+ *     HTTP\/1.1 101 Switching Protocols\n+ *     Upgrade: websocket\n+ *     Connection: Upgrade\n+ *     Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n+ *     Sec-WebSocket-Protocol: chat\n+ *\/\n+public class WebSocketServer implements Closeable {\n+\n+    private final AtomicBoolean started = new AtomicBoolean();\n+    private final Thread thread;\n+    private volatile ServerSocketChannel ssc;\n+    private volatile InetSocketAddress address;\n+    private ByteBuffer read = ByteBuffer.allocate(16384);\n+    private final CountDownLatch readReady = new CountDownLatch(1);\n+    private final MessageStreamHandler handler;\n+    private final WebSocketResponder responder;\n+    private volatile int receiveBufferSize;\n+\n+    private static class Credentials {\n+        private final String name;\n+        private final String password;\n+        private Credentials(String name, String password) {\n+            this.name = name;\n+            this.password = password;\n+        }\n+        public String name() { return name; }\n+        public String password() { return password; }\n+    }\n+\n+    public WebSocketServer(MessageStreamHandler handler) {\n+        this(handler, defaultMapping(), null, null);\n+    }\n+\n+    public WebSocketServer() {\n+        this(null, defaultMapping(), null, null);\n+    }\n+\n+    public WebSocketServer(String username, String password) {\n+        this(null, defaultMapping(), username, password);\n+    }\n+\n+    public WebSocketServer(MessageStreamHandler handler,\n+                           BiFunction<List<String>,Credentials,List<String>> mapping,\n+                           String username, String password) {\n+        requireNonNull(mapping);\n+        this.handler = handler;\n+        if (handler == null) {\n+            this.responder = null;\n+        } else {\n+            this.responder = new WebSocketResponder(handler);\n+            handler.onInit(this.responder);\n+        }\n+        Credentials credentials = username != null ?\n+                new Credentials(username, password) : null;\n+\n+        thread = new Thread(() -> {\n+            try {\n+                while (!Thread.currentThread().isInterrupted()) {\n+                    err.println(\"Accepting next connection at: \" + ssc);\n+                    SocketChannel channel = ssc.accept();\n+                    err.println(\"Accepted: \" + channel);\n+                    try {\n+                        channel.setOption(StandardSocketOptions.TCP_NODELAY, true);\n+                        channel.configureBlocking(true);\n+                        while (true) {\n+                            StringBuilder request = new StringBuilder();\n+                            if (!readRequest(channel, request)) {\n+                                throw new IOException(\"Bad request:[\" + request + \"]\");\n+                            }\n+                            List<String> strings = asList(request.toString().split(\"\\r\\n\"));\n+                            List<String> response = mapping.apply(strings, credentials);\n+                            writeResponse(channel, response);\n+\n+                            if (response.get(0).startsWith(\"HTTP\/1.1 401\")) {\n+                                err.println(\"Sent 401 Authentication response \" + channel);\n+                                continue;\n+                            } else {\n+                                serve(channel);\n+                                break;\n+                            }\n+                        }\n+                    } catch (IOException e) {\n+                        err.println(\"Error in connection: \" + channel + \", \" + e);\n+                    } finally {\n+                        err.println(\"Closed: \" + channel);\n+                        close(channel);\n+                        readReady.countDown();\n+                    }\n+                }\n+            } catch (ClosedByInterruptException ignored) {\n+            } catch (Exception e) {\n+                e.printStackTrace(err);\n+            } finally {\n+                close(ssc);\n+                err.println(\"Stopped at: \" + getURI());\n+            }\n+        });\n+        thread.setName(\"WebSocketServer\");\n+        thread.setDaemon(false);\n+    }\n+\n+    \/\/ runs in own thread. Override to implement different behavior\n+    protected void read(SocketChannel ch) throws IOException {\n+        responder.readLoop(ch);\n+    }\n+\n+    \/\/ runs in own thread. Override to implement different behavior\n+    protected void write(SocketChannel ch) throws IOException {\n+        responder.writeLoop(ch);\n+    }\n+\n+    protected final void serve(SocketChannel channel)\n+            throws InterruptedException\n+    {\n+        Thread reader = new Thread(() -> {\n+            try {\n+                read(channel);\n+            } catch (IOException ignored) { }\n+        });\n+        Thread writer = new Thread(() -> {\n+            try {\n+                write(channel);\n+            } catch (IOException ignored) { }\n+        });\n+        reader.start();\n+        writer.start();\n+        try {\n+            reader.join();\n+        } finally {\n+            reader.interrupt();\n+            try {\n+                writer.join();\n+            } finally {\n+                writer.interrupt();\n+            }\n+        }\n+    }\n+\n+    public ByteBuffer read() throws InterruptedException {\n+        readReady.await();\n+        return read.duplicate().asReadOnlyBuffer().flip();\n+    }\n+\n+    public void setReceiveBufferSize(int bufsize) {\n+        assert ssc == null : \"Must configure before calling open()\";\n+        this.receiveBufferSize = bufsize;\n+    }\n+\n+    public void open() throws IOException {\n+        err.println(\"Starting\");\n+        if (!started.compareAndSet(false, true)) {\n+            throw new IllegalStateException(\"Already started\");\n+        }\n+        ssc = ServerSocketChannel.open();\n+        try {\n+            ssc.configureBlocking(true);\n+            var bufsize = receiveBufferSize;\n+            if (bufsize > 0) {\n+                err.printf(\"Configuring receive buffer size to %d%n\", bufsize);\n+                try {\n+                    ssc.setOption(StandardSocketOptions.SO_RCVBUF, bufsize);\n+                } catch (IOException x) {\n+                    err.printf(\"Failed to configure receive buffer size to %d%n\", bufsize);\n+                }\n+            }\n+            ssc.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            address = (InetSocketAddress) ssc.getLocalAddress();\n+            thread.start();\n+        } catch (IOException e) {\n+            close(ssc);\n+            throw e;\n+        }\n+        err.println(\"Started at: \" + getURI());\n+    }\n+\n+    @Override\n+    public void close() {\n+        err.println(\"Stopping: \" + getURI());\n+        thread.interrupt();\n+        close(ssc);\n+    }\n+\n+    URI getURI() {\n+        if (!started.get()) {\n+            throw new IllegalStateException(\"Not yet started\");\n+        }\n+        return URI.create(\"ws:\/\/localhost:\" + address.getPort());\n+    }\n+\n+    private boolean readRequest(SocketChannel channel, StringBuilder request)\n+            throws IOException\n+    {\n+        ByteBuffer buffer = ByteBuffer.allocate(512);\n+        while (channel.read(buffer) != -1) {\n+            \/\/ read the complete HTTP request headers, there should be no body\n+            CharBuffer decoded;\n+            buffer.flip();\n+            try {\n+                decoded = ISO_8859_1.newDecoder().decode(buffer);\n+            } catch (CharacterCodingException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+            request.append(decoded);\n+            if (Pattern.compile(\"\\r\\n\\r\\n\").matcher(request).find())\n+                return true;\n+            buffer.clear();\n+        }\n+        return false;\n+    }\n+\n+    private void writeResponse(SocketChannel channel, List<String> response)\n+            throws IOException\n+    {\n+        String s = response.stream().collect(Collectors.joining(\"\\r\\n\"))\n+                + \"\\r\\n\\r\\n\";\n+        ByteBuffer encoded;\n+        try {\n+            encoded = ISO_8859_1.newEncoder().encode(CharBuffer.wrap(s));\n+        } catch (CharacterCodingException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        while (encoded.hasRemaining()) {\n+            channel.write(encoded);\n+        }\n+    }\n+\n+    private static BiFunction<List<String>,Credentials,List<String>> defaultMapping() {\n+        return (request, credentials) -> {\n+            List<String> response = new LinkedList<>();\n+            Iterator<String> iterator = request.iterator();\n+            if (!iterator.hasNext()) {\n+                throw new IllegalStateException(\"The request is empty\");\n+            }\n+            String statusLine = iterator.next();\n+            if (!(statusLine.startsWith(\"GET \/\") && statusLine.endsWith(\" HTTP\/1.1\"))) {\n+                throw new IllegalStateException\n+                        (\"Unexpected status line: \" + request.get(0));\n+            }\n+            response.add(\"HTTP\/1.1 101 Switching Protocols\");\n+            Map<String, List<String>> requestHeaders = new HashMap<>();\n+            while (iterator.hasNext()) {\n+                String header = iterator.next();\n+                String[] split = header.split(\": \");\n+                if (split.length != 2) {\n+                    throw new IllegalStateException\n+                            (\"Unexpected header: \" + header\n+                                     + \", split=\" + Arrays.toString(split));\n+                }\n+                requestHeaders.computeIfAbsent(split[0], k -> new ArrayList<>()).add(split[1]);\n+\n+            }\n+            if (requestHeaders.containsKey(\"Sec-WebSocket-Protocol\")) {\n+                throw new IllegalStateException(\"Subprotocols are not expected\");\n+            }\n+            if (requestHeaders.containsKey(\"Sec-WebSocket-Extensions\")) {\n+                throw new IllegalStateException(\"Extensions are not expected\");\n+            }\n+            expectHeader(requestHeaders, \"Connection\", \"Upgrade\");\n+            response.add(\"Connection: Upgrade\");\n+            expectHeader(requestHeaders, \"Upgrade\", \"websocket\");\n+            response.add(\"Upgrade: websocket\");\n+            expectHeader(requestHeaders, \"Sec-WebSocket-Version\", \"13\");\n+            List<String> key = requestHeaders.get(\"Sec-WebSocket-Key\");\n+            if (key == null || key.isEmpty()) {\n+                throw new IllegalStateException(\"Sec-WebSocket-Key is missing\");\n+            }\n+            if (key.size() != 1) {\n+                throw new IllegalStateException(\"Sec-WebSocket-Key has too many values : \" + key);\n+            }\n+            MessageDigest sha1 = null;\n+            try {\n+                sha1 = MessageDigest.getInstance(\"SHA-1\");\n+            } catch (NoSuchAlgorithmException e) {\n+                throw new InternalError(e);\n+            }\n+            String x = key.get(0) + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n+            sha1.update(x.getBytes(ISO_8859_1));\n+            String v = Base64.getEncoder().encodeToString(sha1.digest());\n+            response.add(\"Sec-WebSocket-Accept: \" + v);\n+\n+            \/\/ check authorization credentials, if required by the server\n+            if (credentials != null && !authorized(credentials, requestHeaders)) {\n+                response.clear();\n+                response.add(\"HTTP\/1.1 401 Unauthorized\");\n+                response.add(\"Content-Length: 0\");\n+                response.add(\"WWW-Authenticate: Basic realm=\\\"dummy server realm\\\"\");\n+            }\n+\n+            return response;\n+        };\n+    }\n+\n+    \/\/ Checks credentials in the request against those allowable by the server.\n+    private static boolean authorized(Credentials credentials,\n+                                      Map<String,List<String>> requestHeaders) {\n+        List<String> authorization = requestHeaders.get(\"Authorization\");\n+        if (authorization == null)\n+            return false;\n+\n+        if (authorization.size() != 1) {\n+            throw new IllegalStateException(\"Authorization unexpected count:\" + authorization);\n+        }\n+        String header = authorization.get(0);\n+        if (!header.startsWith(\"Basic \"))\n+            throw new IllegalStateException(\"Authorization not Basic: \" + header);\n+\n+        header = header.substring(\"Basic \".length());\n+        String values = new String(Base64.getDecoder().decode(header), UTF_8);\n+        int sep = values.indexOf(':');\n+        if (sep < 1) {\n+            throw new IllegalStateException(\"Authorization not colon: \" +  values);\n+        }\n+        String name = values.substring(0, sep);\n+        String password = values.substring(sep + 1);\n+\n+        if (name.equals(credentials.name()) && password.equals(credentials.password()))\n+            return true;\n+\n+        return false;\n+    }\n+\n+    protected static String expectHeader(Map<String, List<String>> headers,\n+                                         String name,\n+                                         String value) {\n+        List<String> v = headers.get(name);\n+        if (v == null) {\n+            throw new IllegalStateException(\n+                    format(\"Expected '%s' header, not present in %s\",\n+                           name, headers));\n+        }\n+        if (!v.contains(value)) {\n+            throw new IllegalStateException(\n+                    format(\"Expected '%s: %s', actual: '%s: %s'\",\n+                           name, value, name, v)\n+            );\n+        }\n+        return value;\n+    }\n+\n+    private static void close(AutoCloseable... acs) {\n+        for (AutoCloseable ac : acs) {\n+            try {\n+                ac.close();\n+            } catch (Exception ignored) { }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/WebSocketServer.java","additions":435,"deletions":0,"binary":false,"changes":435,"status":"added"}]}