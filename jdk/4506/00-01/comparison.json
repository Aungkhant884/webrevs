{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm\/timeout=18\n+ * @run main\/othervm\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketServerDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -38,1 +37,1 @@\n-        AtomicReference<String> result = new AtomicReference<>(\"failed\");\n+        final CompletableFuture<String> result = new CompletableFuture<>();\n@@ -40,5 +39,8 @@\n-        wsTest.listen(message -> httpTest.getData(message).map(s -> \"succeeded\").ifPresent(result::set));\n-        wsTest.sendData(\"TEST_DATA\");\n-\n-        System.out.println(\"Wait some time\");\n-        Thread.sleep(3_000);\n+        wsTest.listen(message -> {\n+            try {\n+                httpTest.getData(message);\n+                result.complete(message);\n+            } catch (Exception e) {\n+                result.completeExceptionally(e);\n+            }\n+        });\n@@ -46,1 +48,1 @@\n-        executorService.shutdownNow();\n+        wsTest.sendData(\"TEST_DATA\");\n@@ -48,3 +50,7 @@\n-        System.out.println(\"Result: test \" + result.get());\n-        if (!result.get().equals(\"succeeded\"))\n-            throw new RuntimeException(\"Test failed\");\n+        System.out.println(\"Wait for result\");\n+        try {\n+            result.join();\n+            System.out.println(\"Result: success\");\n+        } finally {\n+            executorService.shutdownNow();\n+        }\n@@ -99,13 +105,6 @@\n-        private Optional<String> getData(String data) {\n-            try {\n-                URI uri = URI.create(baseUrl + \"?param=\" + data);\n-                HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();\n-                System.out.println(\"Http API Client - send HTTP GET request with parameter {}\" + data);\n-                HttpResponse<String> send = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n-                Optional<String> responseData = Optional.ofNullable(send.body());\n-                responseData.ifPresent(s -> System.out.println(\"Http API Client - response for HTTP GET request received\"));\n-                return responseData;\n-            } catch (Exception e) {\n-                System.out.println(\"Http API Client - Error getting data: \" + e.getMessage());\n-            }\n-            return Optional.empty();\n+        private String getData(String data) throws Exception {\n+            URI uri = URI.create(baseUrl + \"?param=\" + data);\n+            HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();\n+            System.out.println(\"Http API Client - send HTTP GET request with parameter {}\" + data);\n+            HttpResponse<String> send = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n+            return send.body();\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/WebSocketAndHttpClient.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"}]}