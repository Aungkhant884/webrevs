{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -779,1 +779,1 @@\n-    private StringBuffer key = new StringBuffer(5);\n+    private StringBuilder key = new StringBuilder(5);\n","filename":"src\/java.base\/share\/classes\/java\/text\/CollationElementIterator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        StringBuffer temp = getStringBuffer();\n+        StringBuilder temp = getStringBuilder();\n@@ -190,1 +190,1 @@\n-        StringBuffer temp = getStringBuffer();\n+        StringBuilder temp = getStringBuilder();\n@@ -739,1 +739,1 @@\n-            other.tempBuffer = null;\n+            other.tempBuilder = null;\n@@ -791,6 +791,6 @@\n-        StringBuffer buf = getStringBuffer();\n-        buf.append(\"0.\");\n-        buf.append(digits, 0, count);\n-        buf.append(\"x10^\");\n-        buf.append(decimalAt);\n-        return buf.toString();\n+        StringBuilder temp = getStringBuilder();\n+        temp.append(\"0.\");\n+        temp.append(digits, 0, count);\n+        temp.append(\"x10^\");\n+        temp.append(decimalAt);\n+        return temp.toString();\n@@ -799,1 +799,1 @@\n-    private StringBuffer tempBuffer;\n+    private StringBuilder tempBuilder;\n@@ -801,3 +801,3 @@\n-    private StringBuffer getStringBuffer() {\n-        if (tempBuffer == null) {\n-            tempBuffer = new StringBuffer(MAX_COUNT);\n+    private StringBuilder getStringBuilder() {\n+        if (tempBuilder == null) {\n+            tempBuilder = new StringBuilder(MAX_COUNT);\n@@ -805,1 +805,1 @@\n-            tempBuffer.setLength(0);\n+            tempBuilder.setLength(0);\n@@ -807,1 +807,1 @@\n-        return tempBuffer;\n+        return tempBuilder;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                        tmp.addToBuffer(result, false, withWhiteSpace, last);\n+                        tmp.addToBuilder(result, false, withWhiteSpace, last);\n@@ -108,1 +108,1 @@\n-                entry.addToBuffer(result, false, withWhiteSpace, null);\n+                entry.addToBuilder(result, false, withWhiteSpace, null);\n@@ -115,1 +115,1 @@\n-                tmp.addToBuffer(result, false, withWhiteSpace, last);\n+                tmp.addToBuilder(result, false, withWhiteSpace, last);\n@@ -154,1 +154,1 @@\n-                entry.addToBuffer(result, true, withWhiteSpace, null);\n+                entry.addToBuilder(result, true, withWhiteSpace, null);\n@@ -214,1 +214,1 @@\n-    private transient StringBuffer excess = new StringBuffer();\n+    private transient StringBuilder excess = new StringBuilder();\n@@ -303,1 +303,1 @@\n-                              StringBuffer excessChars) throws ParseException\n+                              StringBuilder excessChars) throws ParseException\n","filename":"src\/java.base\/share\/classes\/java\/text\/MergeCollation.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        addToBuffer(result, true, false, null);\n+        addToBuilder(result, true, false, null);\n@@ -114,4 +114,4 @@\n-    void addToBuffer(StringBuilder toAddTo,\n-                     boolean showExtension,\n-                     boolean showWhiteSpace,\n-                     PatternEntry lastEntry)\n+    void addToBuilder(StringBuilder toAddTo,\n+                      boolean showExtension,\n+                      boolean showWhiteSpace,\n+                      PatternEntry lastEntry)\n@@ -193,2 +193,2 @@\n-                 StringBuffer chars,\n-                 StringBuffer extension)\n+                 StringBuilder chars,\n+                 StringBuilder extension)\n@@ -290,2 +290,2 @@\n-        private StringBuffer newChars = new StringBuffer();\n-        private StringBuffer newExtension = new StringBuffer();\n+        private StringBuilder newChars = new StringBuilder();\n+        private StringBuilder newExtension = new StringBuilder();\n","filename":"src\/java.base\/share\/classes\/java\/text\/PatternEntry.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4170614\n- * @summary Test internal hashCode() and equals() functions\n- * @library patch-src\n- * @build java.base\/java.text.Bug4170614Test\n- * @run main java.base\/java.text.Bug4170614Test\n- *\/\n","filename":"test\/jdk\/sun\/text\/IntHashtable\/Bug4170614TestRun.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n","filename":"test\/jdk\/sun\/text\/IntHashtable\/Bug4705389.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,5 +24,0 @@\n-\/*\n-    (this test doesn't have an at-test tag because it's run by Bug4170614TestRun.java\n-     instead of directly by the test harness)\n-*\/\n-\n@@ -64,0 +59,9 @@\n+\n+\/* @test\n+ * @bug 4170614\n+ * @summary Test internal hashCode() and equals() functions\n+ * @library ..\/..\/..\/..\/patch-src\n+ * @build java.base\/java.text.Bug4170614Test\n+ * @run main java.base\/java.text.Bug4170614Test\n+ *\/\n+\n@@ -70,1 +74,1 @@\n- * Bug #4170614 complained that we had two iternal classes that\n+ * Bug #4170614 complained that we had two internal classes that\n@@ -145,2 +149,2 @@\n-                                             new StringBuffer(\"hello\"),\n-                                             new StringBuffer(\"up\"));\n+                                             new StringBuilder(\"hello\"),\n+                                             new StringBuilder(\"up\"));\n@@ -148,2 +152,2 @@\n-                                               new StringBuffer(\"hello\"),\n-                                               new StringBuffer(\"down\"));\n+                                               new StringBuilder(\"hello\"),\n+                                               new StringBuilder(\"down\"));\n@@ -152,2 +156,2 @@\n-                                              new StringBuffer(\"goodbye\"),\n-                                              new StringBuffer(\"up\"));\n+                                              new StringBuilder(\"goodbye\"),\n+                                              new StringBuilder(\"up\"));\n","filename":"test\/jdk\/sun\/text\/IntHashtable\/patch-src\/java.base\/java\/text\/Bug4170614Test.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"}]}