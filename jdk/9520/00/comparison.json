{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -54,0 +55,3 @@\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n@@ -205,3 +209,3 @@\n-                    Files.find(bin, 2, (path, attrs) -> {\n-                        return attrs.isRegularFile() && !path.toString().endsWith(\".diz\");\n-                    }).forEach(this::setExecutable);\n+                    forEachPath(bin,\n+                        (path, attrs) -> attrs.isRegularFile() && !path.toString().endsWith(\".diz\"),\n+                        this::setExecutable);\n@@ -213,4 +217,4 @@\n-                    Files.find(lib, 2, (path, attrs) -> {\n-                        return path.getFileName().toString().equals(\"jspawnhelper\")\n-                                || path.getFileName().toString().equals(\"jexec\");\n-                    }).forEach(this::setExecutable);\n+                    forEachPath(lib,\n+                        (path, attrs) -> path.getFileName().toString().equals(\"jspawnhelper\")\n+                                      || path.getFileName().toString().equals(\"jexec\"),\n+                        this::setExecutable);\n@@ -222,3 +226,3 @@\n-                    Files.find(legal, 2, (path, attrs) -> {\n-                        return attrs.isRegularFile();\n-                    }).forEach(this::setReadOnly);\n+                    forEachPath(legal,\n+                        (path, attrs) -> attrs.isRegularFile(),\n+                        this::setReadOnly);\n@@ -531,22 +535,23 @@\n-            Files.find(img.getHome().resolve(BIN_DIRNAME), 2, (path, attrs) -> {\n-                return img.getModules().contains(path.getFileName().toString());\n-            }).forEach((p) -> {\n-                try {\n-                    String pattern = \"JLINK_VM_OPTIONS=\";\n-                    byte[] content = Files.readAllBytes(p);\n-                    String str = new String(content, StandardCharsets.UTF_8);\n-                    int index = str.indexOf(pattern);\n-                    StringBuilder builder = new StringBuilder();\n-                    if (index != -1) {\n-                        builder.append(str.substring(0, index)).\n-                                append(pattern);\n-                        for (String s : args) {\n-                            builder.append(s).append(\" \");\n-                        }\n-                        String remain = str.substring(index + pattern.length());\n-                        builder.append(remain);\n-                        str = builder.toString();\n-                        try (BufferedWriter writer = Files.newBufferedWriter(p,\n-                                StandardCharsets.ISO_8859_1,\n-                                StandardOpenOption.WRITE)) {\n-                            writer.write(str);\n+            forEachPath(img.getHome().resolve(BIN_DIRNAME),\n+                (path, attrs) -> img.getModules().contains(path.getFileName().toString()),\n+                p -> {\n+                    try {\n+                        String pattern = \"JLINK_VM_OPTIONS=\";\n+                        byte[] content = Files.readAllBytes(p);\n+                        String str = new String(content, StandardCharsets.UTF_8);\n+                        int index = str.indexOf(pattern);\n+                        StringBuilder builder = new StringBuilder();\n+                        if (index != -1) {\n+                            builder.append(str.substring(0, index)).\n+                                    append(pattern);\n+                            for (String s : args) {\n+                                builder.append(s).append(\" \");\n+                            }\n+                            String remain = str.substring(index + pattern.length());\n+                            builder.append(remain);\n+                            str = builder.toString();\n+                            try (BufferedWriter writer = Files.newBufferedWriter(p,\n+                                    StandardCharsets.ISO_8859_1,\n+                                    StandardOpenOption.WRITE)) {\n+                                writer.write(str);\n+                            }\n@@ -554,0 +559,2 @@\n+                    } catch (IOException ex) {\n+                        throw new RuntimeException(ex);\n@@ -555,4 +562,1 @@\n-                } catch (IOException ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            });\n+                });\n@@ -595,0 +599,7 @@\n+\n+    \/\/ finds subpaths matching the given criteria (up to 2 levels deep) and applies the given lambda\n+    private static void forEachPath(Path dir, BiPredicate<Path, BasicFileAttributes> matcher, Consumer<Path> consumer) throws IOException {\n+        try (Stream<Path> stream = Files.find(dir, 2, matcher)) {\n+            stream.forEach(consumer);\n+        }\n+    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":47,"deletions":36,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -824,2 +824,3 @@\n-                Stream<Archive.Entry> signatures = modularJarArchive.entries().filter((entry) -> {\n-                    String name = entry.name().toUpperCase(Locale.ENGLISH);\n+                try (Stream<Archive.Entry> entries = modularJarArchive.entries()) {\n+                    boolean hasSignatures = entries.anyMatch((entry) -> {\n+                        String name = entry.name().toUpperCase(Locale.ENGLISH);\n@@ -827,1 +828,1 @@\n-                    return name.startsWith(\"META-INF\/\") && name.indexOf('\/', 9) == -1 && (\n+                        return name.startsWith(\"META-INF\/\") && name.indexOf('\/', 9) == -1 && (\n@@ -829,12 +830,13 @@\n-                                name.endsWith(\".DSA\") ||\n-                                name.endsWith(\".RSA\") ||\n-                                name.endsWith(\".EC\") ||\n-                                name.startsWith(\"META-INF\/SIG-\")\n-                            );\n-                });\n-\n-                if (signatures.count() != 0) {\n-                    if (ignoreSigning) {\n-                        System.err.println(taskHelper.getMessage(\"warn.signing\", path));\n-                    } else {\n-                        throw new IllegalArgumentException(taskHelper.getMessage(\"err.signing\", path));\n+                                        name.endsWith(\".DSA\") ||\n+                                        name.endsWith(\".RSA\") ||\n+                                        name.endsWith(\".EC\") ||\n+                                        name.startsWith(\"META-INF\/SIG-\")\n+                        );\n+                    });\n+\n+                    if (hasSignatures) {\n+                        if (ignoreSigning) {\n+                            System.err.println(taskHelper.getMessage(\"warn.signing\", path));\n+                        } else {\n+                            throw new IllegalArgumentException(taskHelper.getMessage(\"err.signing\", path));\n+                        }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import java.util.stream.Stream;\n@@ -685,5 +686,4 @@\n-            try {\n-                return Files.find(dir, Integer.MAX_VALUE,\n-                                  ((path, attrs) -> attrs.isRegularFile()),\n-                                  FileVisitOption.FOLLOW_LINKS)\n-                        .map(dir::relativize)\n+            try (Stream<Path> stream = Files.find(dir, Integer.MAX_VALUE,\n+                                  (path, attrs) -> attrs.isRegularFile(),\n+                                  FileVisitOption.FOLLOW_LINKS)) {\n+                return stream.map(dir::relativize)\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}