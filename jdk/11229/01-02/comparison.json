{"files":[{"patch":"@@ -1311,1 +1311,1 @@\n-     * For class objects representing void, primitive types, and\n+     * For {@code Class} objects representing void, primitive types, and\n@@ -1336,11 +1336,13 @@\n-     * <p> If the underlying class is an array class, then its\n-     * {@code PUBLIC}, {@code PRIVATE} and {@code PROTECTED}\n-     * access flags are the same as those of its component type.  If this\n-     * {@code Class} object represents a primitive type or void, the\n-     * {@code PUBLIC} access flag is present, and the\n-     * {@code PROTECTED} and {@code PRIVATE} access flags are always\n-     * absent. If this {@code Class} object represents an array class, a\n-     * primitive type or void, then the {@code FINAL} access flag is always\n-     * present and the interface access flag is always\n-     * absent. The values of its other access flags are not determined\n-     * by this specification.\n+     * <p> If the underlying class is an array class:\n+     * <ul>\n+     * <li> its {@code PUBLIC}, {@code PRIVATE} and {@code PROTECTED}\n+     *      access flags are the same as those of its component type\n+     * <li> its {@code FINAL} and {@code ABSTRACT} flags are present\n+     * <li> its {@code INTERFACE} flag is absent, even when the\n+     *      component type is an interface\n+     * <\/ul>\n+     *  If this {@code Class} object represents a primitive type or\n+     *  void, the flags are {@code PUBLIC}, {@code ABSTRACT}, and\n+     *  {@code FINAL}.\n+     * For {@code Class} objects representing void, primitive types, and\n+     * arrays, access flags are absent other than as specified above.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8266670 8291734\n+ * @bug 8266670 8291734 8296743\n@@ -101,4 +101,3 @@\n-        var mustBePresent = Set.of(AccessFlag.PUBLIC, AccessFlag.FINAL);\n-        var mustBeAbsent = Set.of(AccessFlag.PRIVATE,\n-                                  AccessFlag.PROTECTED,\n-                                  AccessFlag.INTERFACE);\n+        var expected = Set.of(AccessFlag.PUBLIC,\n+                              AccessFlag.FINAL,\n+                              AccessFlag.ABSTRACT);\n@@ -107,3 +106,0 @@\n-            \/\/ PUBLIC must be present, PROTECTED and PRIVATE must be\n-            \/\/ absent.\n-            \/\/ FINAL must be present, INTERFACE must be absent.\n@@ -111,7 +107,2 @@\n-            if (!accessFlags.containsAll(mustBePresent)) {\n-                throw new RuntimeException(\"Missing mandatory flags on \" +\n-                                           primClass);\n-            }\n-\n-            if (containsAny(accessFlags, mustBeAbsent)) {\n-                throw new RuntimeException(\"Unexpected flags present on \" +\n+            if (!accessFlags.equals(expected)) {\n+                throw new RuntimeException(\"Unexpected flags on \" +\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"}]}