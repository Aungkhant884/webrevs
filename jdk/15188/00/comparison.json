{"files":[{"patch":"@@ -2879,1 +2879,1 @@\n-  if (ret == nullptr) {\n+  if (ret == nullptr && ref_handle != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8313874\n+ * @summary Test calling JNI NewWeakGlobalRef with null value.\n+ *          Should not throw error\/exception. Should return null.\n+ * @library \/test\/lib\n+ * @run main\/othervm\/native NullJNIWeak\n+ *\/\n+public class NullJNIWeak {\n+    static {\n+        System.loadLibrary(\"NullJNIWeak\");\n+    }\n+\n+    private static native Object newWeakGlobalRef(Object o);\n+\n+    public static void main(String[] args) {\n+        Object result = newWeakGlobalRef(null);\n+        Asserts.assertEquals(result, null, \"NewWeakGlobalRef(null) should return null\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/NullJNIWeak\/NullJNIWeak.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ *\/\n+\n+#include <jni.h>\n+\n+\/*\n+ * Class:     NullJNIWeak\n+ * Method:    newWeakGlobalRef\n+ * Signature: (Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+ *\/\n+JNIEXPORT jobject JNICALL\n+Java_NullJNIWeak_newWeakGlobalRef(JNIEnv *env, jclass clazz, jobject obj) {\n+  return (*env)->NewWeakGlobalRef(env, obj);\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/NullJNIWeak\/libNullJNIWeak.c","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"}]}