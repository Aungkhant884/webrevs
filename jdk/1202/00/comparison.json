{"files":[{"patch":"@@ -1945,2 +1945,2 @@\n-    if (con != NULL && !con->is_pinned()) {\n-      \/\/ unpinned constants may have no register, so add mapping from constant to interval\n+    if (con != NULL && (!con->is_pinned() || con->operand()->is_constant())) {\n+      \/\/ Need a mapping from constant to interval if unpinned (may have no register) or if the operand is a constant (no register).\n@@ -1953,1 +1953,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255058\n+ * @summary Add check in LinearScan::resolve_exception_edge for pinned constant that is not virtual which cannot be used to find an interval which\n+            resulted in an assertion error.\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -XX:CompileCommand=dontinline,compiler.c1.TestPinnedConstantExceptionEdge::dontInline\n+ *                   -XX:CompileCommand=compileonly,compiler.c1.TestPinnedConstantExceptionEdge::* compiler.c1.TestPinnedConstantExceptionEdge\n+ *\/\n+package compiler.c1;\n+\n+public class TestPinnedConstantExceptionEdge {\n+\n+    public static long iFld = 0;\n+    public static boolean b1;\n+    public static boolean b2;\n+\n+    public static void test() {\n+        int x = 5;\n+        int y = 11;\n+        for (int i = 1; i < 8; i++) {\n+            for (int j = 1; j < 2; ++j) {\n+                if (b1) {\n+                    try {\n+                        y = (x \/ x);\n+                        y = (500 \/ i);\n+                        y = (-214 \/ i);\n+                    } catch (ArithmeticException a_e) {}\n+                    \/\/ Recursion too deep in UseCountComputer::uses_do and therefore constant 1 is pinned.\n+                    iFld += (b1 ? 1 : 0) + (b2 ? 1 : 0) + 5 + 7 + 6 + 5 + y\n+                            + dontInline(7) + dontInline(5) + 8 + 8 + 9\n+                            + dontInline(3) + dontInline(3) + dontInline(4)\n+                            + dontInline(dontInline(5)) + dontInline(2);\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Not inlined\n+    public static int dontInline(int a) {\n+        return 0;\n+    }\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestPinnedConstantExceptionEdge.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}