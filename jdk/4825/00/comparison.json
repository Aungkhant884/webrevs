{"files":[{"patch":"@@ -515,1 +515,1 @@\n-  switch (_handshakee->thread_state()) {\n+  switch (_handshakee->thread_state_acquire()) {\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    assert(thread->thread_state() == _thread_in_native, \"coming from wrong thread state\");\n+    assert(thread->thread_state_acquire() == _thread_in_native, \"coming from wrong thread state\");\n@@ -213,2 +213,1 @@\n-    OrderAccess::storestore(); \/\/ Keep thread_state change and make_walkable() separate.\n-    _thread->set_thread_state(_thread_in_native);\n+    _thread->release_set_thread_state(_thread_in_native);\n@@ -252,2 +251,1 @@\n-    OrderAccess::storestore(); \/\/ Keep thread_state change and make_walkable() separate.\n-    thread->set_thread_state(_thread_blocked);\n+    thread->release_set_thread_state(_thread_blocked);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -608,1 +608,1 @@\n-      jt->set_thread_state(_thread_in_native);\n+      jt->release_set_thread_state(_thread_in_native);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1837,1 +1837,1 @@\n-  assert(thread->thread_state() == _thread_in_native_trans, \"wrong state\");\n+  assert(thread->thread_state_acquire() == _thread_in_native_trans, \"wrong state\");\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1094,0 +1094,1 @@\n+  inline JavaThreadState thread_state_acquire() const; \/\/ read state with acquire semantics\n@@ -1095,0 +1096,1 @@\n+  inline void release_set_thread_state(JavaThreadState s); \/\/ release before setting thread state\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  return (JavaThreadState) Atomic::load_acquire((volatile jint*)&_thread_state);\n+  return Atomic::load_acquire(&_thread_state);\n@@ -140,1 +140,1 @@\n-  return _thread_state;\n+  return Atomic::load(&_thread_state);\n@@ -144,0 +144,4 @@\n+inline JavaThreadState JavaThread::thread_state_acquire() const    {\n+  return Atomic::load_acquire(&_thread_state);\n+}\n+\n@@ -150,1 +154,1 @@\n-  Atomic::release_store((volatile jint*)&_thread_state, (jint)s);\n+  Atomic::release_store(&_thread_state, s);\n@@ -152,1 +156,1 @@\n-  _thread_state = s;\n+  Atomic::store(&_thread_state, s);\n@@ -156,0 +160,6 @@\n+inline void JavaThread::release_set_thread_state(JavaThreadState s) {\n+  assert(current_or_null() == NULL || current_or_null() == this,\n+         \"state change should only be called by the current thread\");\n+  Atomic::release_store(&_thread_state, s);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}