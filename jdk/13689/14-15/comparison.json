{"files":[{"patch":"@@ -34,8 +34,0 @@\n-    private static boolean isPrivate(Method method) {\n-        return Modifier.isPrivate(method.getModifiers());\n-    }\n-\n-    private static boolean isStatic(Method method) {\n-        return Modifier.isStatic(method.getModifiers());\n-    }\n-\n@@ -58,1 +50,1 @@\n-                \/\/ Must be named \"main\", public|protected|package-private and either\n+                \/\/ Must be named \"main\", public|protected|package-private, not synthetic (bridge) and either\n@@ -61,5 +53,4 @@\n-                        !isPrivate(method) &&\n-                        correctArgs(method) &&\n-                        \/\/ Only statics in the declaring class\n-                        (!isStatic(method) || declc == refc)\n-                ) {\n+                        !method.isSynthetic() &&\n+                        !Modifier.isPrivate(method.getModifiers()) &&\n+                        correctArgs(method))\n+                {\n@@ -77,0 +68,1 @@\n+     * sub-class < super-class.\n@@ -80,1 +72,0 @@\n-     * sub-class < super-class.\n@@ -88,0 +79,11 @@\n+        Class<?> aClass = a.getDeclaringClass();\n+        Class<?> bClass = b.getDeclaringClass();\n+\n+        if (aClass != bClass) {\n+            if (bClass.isAssignableFrom(aClass)) {\n+                return -1;\n+            } else {\n+                return 1;\n+            }\n+        }\n+\n@@ -95,1 +97,1 @@\n-        } else if (bIsStatic && !aIsStatic) {\n+        } else if (!aIsStatic && bIsStatic) {\n@@ -111,1 +113,1 @@\n-        if (aCount > bCount) {\n+        if (bCount < aCount) {\n@@ -113,10 +115,1 @@\n-        } else if (bCount > aCount) {\n-            return 1;\n-        }\n-\n-        Class<?> aClass = a.getDeclaringClass();\n-        Class<?> bClass = b.getDeclaringClass();\n-\n-        if (bClass.isAssignableFrom(aClass)) {\n-            return -1;\n-        } else if (bClass.isAssignableFrom(aClass)) {\n+        } else if (aCount < bCount) {\n@@ -137,13 +130,4 @@\n-        try {\n-            Method mainMethod = mainClass.getMethod(\"main\", String[].class);\n-            int mods = mainMethod.getModifiers();\n-\n-            if (Modifier.isStatic(mods) && mainMethod.getDeclaringClass() != mainClass) {\n-                System.err.println(\"WARNING: static main in super class will be deprecated.\");\n-            }\n-\n-            return mainMethod;\n-        } catch (NoSuchMethodException nsme) {\n-            if (!PreviewFeatures.isEnabled()) {\n-                throw nsme;\n-            }\n+        boolean traditionalMain = !PreviewFeatures.isEnabled();\n+        if (traditionalMain) {\n+            return mainClass.getMethod(\"main\", String[].class);\n+        }\n@@ -151,2 +135,2 @@\n-            List<Method> mains = new ArrayList<>();\n-            gatherMains(mainClass, mainClass, mains);\n+        List<Method> mains = new ArrayList<>();\n+        gatherMains(mainClass, mainClass, mains);\n@@ -154,3 +138,3 @@\n-            if (mains.isEmpty()) {\n-                throw new NoSuchMethodException(\"No main method found\");\n-            }\n+        if (mains.isEmpty()) {\n+            throw new NoSuchMethodException(\"No main method found\");\n+        }\n@@ -158,3 +142,3 @@\n-            if (1 < mains.size()) {\n-                mains.sort(MainMethodFinder::compareMethods);\n-            }\n+        if (1 < mains.size()) {\n+            mains.sort(MainMethodFinder::compareMethods);\n+        }\n@@ -162,1 +146,1 @@\n-            Method mainMethod = mains.get(0);\n+        Method mainMethod = mains.get(0);\n@@ -164,2 +148,1 @@\n-            return mainMethod;\n-        }\n+        return mainMethod;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/MainMethodFinder.java","additions":34,"deletions":51,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -127,2 +127,1 @@\n-                void main() {\n-                   throw new AssertionError();\n+               void main() {\n@@ -133,0 +132,1 @@\n+                   throw new AssertionError();\n@@ -138,0 +138,30 @@\n+    @Test\n+    public void testPublicMain() throws Exception {\n+        test(\"\"\"\n+           class MainClass {\n+               void main(String[] args) {\n+                   throw new AssertionError();\n+               }\n+               public void main() {\n+               }\n+           }\n+           \"\"\");\n+    }\n+\n+    @Test\n+    public void testIgnoreBridgeMain() throws Exception {\n+        test(\"\"\"\n+            public class MainClass extends Super {\n+            }\n+            \n+            class Super {\n+                public void main(String... args) {\n+                }\n+            \n+                public void main() {\n+                    throw new AssertionError();\n+                }\n+            }\n+            \"\"\");\n+    }\n+\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}