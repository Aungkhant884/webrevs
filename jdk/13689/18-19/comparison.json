{"files":[{"patch":"@@ -3987,3 +3987,7 @@\n-                    isTopLevelMethodOrField =\n-                            VirtualParser.tryParse(this,\n-                                    P -> P.topLevelMethodOrFieldDeclaration(finalMods));\n+                    JavacParser speculative = new VirtualParser(this);\n+                    List<JCTree> speculativeResult =\n+                            speculative.topLevelMethodOrFieldDeclaration(finalMods);\n+                    if (speculativeResult.head.hasTag(METHODDEF) ||\n+                        speculativeResult.head.hasTag(VARDEF)) {\n+                        isTopLevelMethodOrField = true;\n+                    }\n@@ -4785,1 +4789,1 @@\n-        throw new AssertionError(\"Not a method or field\");\n+        return List.of(F.Erroneous());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    private boolean hasErrors;\n+\n@@ -57,1 +59,2 @@\n-        throw new AssertionError(\"Speculative parsing fail\");\n+        hasErrors = true;\n+        return F.Erroneous();\n@@ -62,1 +65,2 @@\n-        throw new AssertionError(\"Speculative parsing fail\");\n+        hasErrors = true;\n+        return F.Erroneous();\n@@ -67,1 +71,1 @@\n-        throw new AssertionError(\"Speculative parsing fail\");\n+        hasErrors = true;\n@@ -72,1 +76,5 @@\n-        throw new AssertionError(\"Speculative parsing fail\");\n+        hasErrors = true;\n+    }\n+\n+    public boolean hasErrors() {\n+        return hasErrors;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/VirtualParser.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @compile\/fail\/ref=UnnamedClassRecovery.out -XDrawDiagnostics --enable-preview --source ${jdk.version} UnnamedClassRecovery.java\n+ *\/\n+public void main() {\n+    \/\/the following is intentionally missing a semicolon:\n+    System.err.println(\"Hello!\")\n+}\n","filename":"test\/langtools\/tools\/javac\/unnamed\/UnnamedClassRecovery.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+UnnamedClassRecovery.java:7:33: compiler.err.expected: ';'\n+- compiler.note.preview.filename: UnnamedClassRecovery.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n","filename":"test\/langtools\/tools\/javac\/unnamed\/UnnamedClassRecovery.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}