{"files":[{"patch":"@@ -455,6 +455,9 @@\n-        Constructor<?> constructor;\n-        try {\n-            constructor = appClass.getDeclaredConstructor();\n-        } catch (NoSuchMethodException e) {\n-            throw new Fault(Errors.CantFindConstructor(mainClassName));\n-        }\n+        Object instance = null;\n+\n+        if (!isStatic) {\n+            Constructor<?> constructor;\n+            try {\n+                constructor = appClass.getDeclaredConstructor();\n+            } catch (NoSuchMethodException e) {\n+                throw new Fault(Errors.CantFindConstructor(mainClassName));\n+            }\n@@ -462,6 +465,6 @@\n-        Object instance;\n-        try {\n-            constructor.setAccessible(true);\n-            instance = constructor.newInstance();\n-        } catch (InstantiationException | IllegalAccessException e) {\n-            throw new Fault(Errors.CantAccessConstructor(mainClassName));\n+            try {\n+                constructor.setAccessible(true);\n+                instance = constructor.newInstance();\n+            } catch (InstantiationException | IllegalAccessException e) {\n+                throw new Fault(Errors.CantAccessConstructor(mainClassName));\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-    @Test\n-    public void testStaticMainArgs() throws Exception {\n-        test(\"\"\"\n+    private static final String[] SAMPLES = new String[] {\n+            \/\/ static dominating with args\n+            \"\"\"\n@@ -43,2 +43,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -46,3 +45,2 @@\n-    @Test\n-    public void testStaticMain() throws Exception {\n-        test(\"\"\"\n+            \/\/ static dominating instance\n+            \"\"\"\n@@ -56,2 +54,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -59,3 +56,2 @@\n-    @Test\n-    public void testMainArgs() throws Exception {\n-        test(\"\"\"\n+            \/\/ instance dominating with args\n+            \"\"\"\n@@ -69,2 +65,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -72,3 +67,2 @@\n-    @Test\n-    public void testMain() throws Exception {\n-        test(\"\"\"\n+            \/\/ instance no args\n+            \"\"\"\n@@ -79,2 +73,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -82,3 +75,2 @@\n-    @Test\n-    public void testTLAnonStaticMainArgs() throws Exception {\n-        test(\"\"\"\n+            \/\/ unnamed class static dominating with args\n+            \"\"\"\n@@ -90,2 +82,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -93,3 +84,2 @@\n-    @Test\n-    public void testTLAnonStaticMain() throws Exception {\n-        test(\"\"\"\n+            \/\/ unnamed class static dominating instance\n+            \"\"\"\n@@ -101,2 +91,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -104,3 +93,2 @@\n-    @Test\n-    public void testTLAnonMainArgs() throws Exception {\n-        test(\"\"\"\n+            \/\/ unnamed class instance dominating with args\n+            \"\"\"\n@@ -112,2 +100,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -115,3 +102,2 @@\n-    @Test\n-    public void testTLAnonMain() throws Exception {\n-        test(\"\"\"\n+            \/\/ unnamed class instance main no args\n+            \"\"\"\n@@ -120,2 +106,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -123,14 +108,12 @@\n-    @Test\n-    public void testSuperMain() throws Exception {\n-        test(\"\"\"\n-           class MainClass extends SuperClass {\n-               void main() {\n-               }\n-           }\n-           class SuperClass {\n-               void main(String[] args) {\n-                   throw new AssertionError();\n-               }\n-           }\n-           \"\"\");\n-    }\n+            \/\/ instance main dominating super static\n+            \"\"\"\n+            class MainClass extends SuperClass {\n+                void main() {\n+                }\n+            }\n+            class SuperClass {\n+                void main(String[] args) {\n+                    throw new AssertionError();\n+                }\n+            }\n+            \"\"\",\n@@ -138,3 +121,2 @@\n-    @Test\n-    public void testIgnoreBridgeMain() throws Exception {\n-        test(\"\"\"\n+            \/\/ super instance main with args dominating\n+            \"\"\"\n@@ -143,1 +125,1 @@\n-\n+    \n@@ -147,1 +129,1 @@\n-\n+    \n@@ -152,2 +134,1 @@\n-            \"\"\");\n-    }\n+            \"\"\",\n@@ -155,7 +136,4 @@\n-     @Test\n-    public void testIgnoreSuperMain() throws Exception {\n-        try {\n-            test(\"\"\"\n-                public class MainClass extends Super {\n-                    public static void main(String... args) {\n-                    }\n+            \/\/ ignore super instance main\n+            \"\"\"\n+            public class MainClass extends Super {\n+                public static void main(String... args) {\n@@ -163,4 +141,5 @@\n-\n-                class Super {\n-                    public static void main(String... args) {\n-                    }\n+            }\n+    \n+            class Super {\n+                public static void main(String... args) {\n+                    throw new AssertionError();\n@@ -168,16 +147,30 @@\n-                \"\"\");\n-            throw new AssertionError();\n-        } catch (Throwable ex) {\n-            \/\/ okay\n-        }\n-    }\n-\n-    void test(String source) throws Exception {\n-        Files.writeString(Path.of(\"MainClass.java\"), source);\n-        var version = System.getProperty(\"java.specification.version\");\n-        var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n-        if (!tr.isOK()) {\n-            System.out.println(tr);\n-            throw new AssertionError();\n-        }\n-    }\n+            }\n+            \"\"\",\n+\n+            \/\/ enum main\n+            \"\"\"\n+            enum MainClass {\n+                A;\n+            \n+                public static void main() {\n+                }\n+            }            \n+            \"\"\",\n+\n+            \/\/ record main\n+            \"\"\"\n+            record MainClass() {\n+                 static void main() {\n+                     System.out.println(\"Done!\");\n+                 }\n+            }            \n+            \"\"\",\n+            \/\/ interface main\n+            \"\"\"\n+            interface MainClass {\n+                 static void main() {\n+                     System.out.println(\"Done!\");\n+                 }\n+            }            \n+            \"\"\"\n+    };\n@@ -186,1 +179,10 @@\n-        new InstanceMainTest().run(args);\n+        for (String source : SAMPLES) {\n+            Files.writeString(Path.of(\"MainClass.java\"), source);\n+            var version = System.getProperty(\"java.specification.version\");\n+            var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+            if (!tr.isOK()) {\n+                System.err.println(source);\n+                System.err.println(tr);\n+                throw new AssertionError();\n+            }\n+        }\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":91,"deletions":89,"binary":false,"changes":180,"status":"modified"}]}