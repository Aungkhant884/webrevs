{"files":[{"patch":"@@ -427,0 +427,2 @@\n+\n+        Class<?> appClass;\n@@ -428,10 +430,4 @@\n-            Class<?> appClass = Class.forName(mainClassName, true, cl);\n-            Method mainMethod = MainMethodFinder.findMainMethod(appClass);\n-            int mods = mainMethod.getModifiers();\n-            boolean isStatic = Modifier.isStatic(mods);\n-            boolean isPublic = Modifier.isPublic(mods);\n-            boolean noArgs = mainMethod.getParameterCount() == 0;\n-\n-            if (!PreviewFeatures.isEnabled() && (!isStatic || !isPublic)) {\n-                throw new Fault(Errors.MainNotPublicStatic);\n-            }\n+            appClass = Class.forName(mainClassName, true, cl);\n+        } catch (ClassNotFoundException e) {\n+            throw new Fault(Errors.CantFindClass(mainClassName));\n+        }\n@@ -439,3 +435,19 @@\n-            if (!mainMethod.getReturnType().equals(void.class)) {\n-                throw new Fault(Errors.MainNotVoid);\n-            }\n+        Method mainMethod;\n+        try {\n+            mainMethod = MainMethodFinder.findMainMethod(appClass);\n+        } catch (NoSuchMethodException e) {\n+            throw new Fault(Errors.CantFindMainMethod(mainClassName));\n+        }\n+\n+        int mods = mainMethod.getModifiers();\n+        boolean isStatic = Modifier.isStatic(mods);\n+        boolean isPublic = Modifier.isPublic(mods);\n+        boolean noArgs = mainMethod.getParameterCount() == 0;\n+\n+        if (!PreviewFeatures.isEnabled() && (!isStatic || !isPublic)) {\n+            throw new Fault(Errors.MainNotPublicStatic);\n+        }\n+\n+        if (!mainMethod.getReturnType().equals(void.class)) {\n+            throw new Fault(Errors.MainNotVoid);\n+        }\n@@ -443,0 +455,16 @@\n+        Constructor<?> constructor;\n+        try {\n+            constructor = appClass.getDeclaredConstructor();\n+        } catch (NoSuchMethodException e) {\n+            throw new Fault(Errors.CantFindConstructor(mainClassName));\n+        }\n+\n+        Object instance;\n+        try {\n+            constructor.setAccessible(true);\n+            instance = constructor.newInstance();\n+        } catch (InstantiationException | IllegalAccessException e) {\n+            throw new Fault(Errors.CantAccessConstructor(mainClassName));\n+        }\n+\n+        try {\n@@ -446,0 +474,1 @@\n+            Object receiver = isStatic ? appClass : instance;\n@@ -447,6 +476,2 @@\n-            if (isStatic) {\n-                if (noArgs) {\n-                    mainMethod.invoke(appClass);\n-                } else {\n-                    mainMethod.invoke(appClass, (Object)mainArgs);\n-                }\n+            if (noArgs) {\n+                mainMethod.invoke(receiver);\n@@ -454,9 +479,1 @@\n-                Constructor<?> constructor = appClass.getDeclaredConstructor();\n-                constructor.setAccessible(true);\n-                Object instance = constructor.newInstance();\n-\n-                if (noArgs) {\n-                    mainMethod.invoke(instance);\n-                } else {\n-                    mainMethod.invoke(instance, (Object)mainArgs);\n-                }\n+                mainMethod.invoke(receiver, (Object)mainArgs);\n@@ -464,5 +481,1 @@\n-        } catch (ClassNotFoundException e) {\n-            throw new Fault(Errors.CantFindClass(mainClassName));\n-        } catch (NoSuchMethodException e) {\n-            throw new Fault(Errors.CantFindMainMethod(mainClassName));\n-        } catch (IllegalAccessException | InstantiationException e) {\n+        } catch (IllegalAccessException e) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":46,"deletions":33,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -122,0 +122,8 @@\n+# 0: string\n+launcher.err.cant.find.constructor=\\\n+    can''t find no argument constructor in class: {0}\n+\n+# 0: string\n+launcher.err.cant.access.constructor=\\\n+    can''t access no argument constructor in class: {0}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}