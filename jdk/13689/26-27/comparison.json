{"files":[{"patch":"@@ -160,1 +160,2 @@\n- * <p> A class or interface created by the invocation of\n+ * <h2><a id=hiddenClasses>Hidden Classes<\/a><\/h2>\n+ * A class or interface created by the invocation of\n@@ -188,0 +189,24 @@\n+ * <h2><a id=unnamedClasses>Unnamed Classes<\/a><\/h2>\n+ *\n+ * A {@code class} file representing an unnamed class is generated by\n+ * a Java compiler from a source file for an unnamed class. The {@code\n+ * Class} object representing an unnamed class is top-level,\n+ * {@linkplain #isSynthetic synthetic}, and {@code final}. While an\n+ * unnamed class does <em>not<\/em> have a name in its Java source\n+ * form, the various name-related methods of {@code java.lang.Class}\n+ * do return non-null and non-empty results for the {@code Class}\n+ * object representing an unnamed class.\n+ *\n+ * Conventionally, a Java compiler, starting from a source file for an\n+ * unnamed class, say {@code HelloWorld.java}, creates a\n+ * similarly-named {@code class} file, {@code HelloWorld.class}, where\n+ * the class stored in that {@code class} file is named {@code\n+ * \"HelloWorld\"}, matching the base names of the source and {@code\n+ * class} files.\n+ *\n+ * For the {@code Class} object for an unnamed class {@code\n+ * HelloWorld}, the methods to get the {@linkplain #getName name},\n+ * {@linkplain #getTypeName type name}, {@linkplain #getSimpleName\n+ * simple name}, and {@linkplain #getCanonicalName canonical name} all\n+ * return results equal to {@code \"HelloWorld\"}.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}