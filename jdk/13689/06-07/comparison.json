{"files":[{"patch":"@@ -126,1 +126,1 @@\n-    \/** Class is a top level anonymous class.\n+    \/** Class is a unnamed top level class.\n@@ -128,1 +128,1 @@\n-    public static final int ANONYMOUS_MAIN_CLASS    = 1<<19;\n+    public static final int UNNAMED_CLASS    = 1<<19;\n@@ -497,1 +497,1 @@\n-        ANONYMOUS_MAIN_CLASS(Flags.ANONYMOUS_MAIN_CLASS),\n+        UNNAMED_CLASS(Flags.UNNAMED_CLASS),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-            case ANONYMOUS_MAIN_CLASSES -> true;\n+            case UNNAMED_CLASSES -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-        ANONYMOUS_MAIN_CLASSES(JDK21, Fragments.FeatureAnonymousMainClasses, DiagKind.PLURAL),\n+        UNNAMED_CLASSES(JDK21, Fragments.FeatureUnnamedClasses, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5492,1 +5492,1 @@\n-                if ((c.flags_field & Flags.ANONYMOUS_MAIN_CLASS) != 0) {\n+                if ((c.flags_field & Flags.UNNAMED_CLASS) != 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2275,1 +2275,1 @@\n-            log.error(pos, Errors.AnonymousMainClassDoesNotHaveMainMethod);\n+            log.error(pos, Errors.UnnamedClassDoesNotHaveMainMethod);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -442,1 +442,1 @@\n-            if ((tree.mods.flags & ANONYMOUS_MAIN_CLASS) != 0) {\n+            if ((tree.mods.flags & UNNAMED_CLASS) != 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3865,1 +3865,1 @@\n-        boolean isAnonymousClass = false;\n+        boolean isUnnamedClass = false;\n@@ -3932,1 +3932,1 @@\n-                \/\/ anonymous main classes did not exist and error reporting\n+                \/\/ unnamed classes did not exist and error reporting\n@@ -3934,1 +3934,1 @@\n-                if (Feature.ANONYMOUS_MAIN_CLASSES.allowedInSource(source) && !isDeclaration()) {\n+                if (Feature.UNNAMED_CLASSES.allowedInSource(source) && !isDeclaration()) {\n@@ -3943,1 +3943,1 @@\n-                    isAnonymousClass = true;\n+                    isUnnamedClass = true;\n@@ -3955,1 +3955,1 @@\n-        List<JCTree> topLevelDefs = isAnonymousClass ?  constructAnonymousMainClass(defs.toList()) : defs.toList();\n+        List<JCTree> topLevelDefs = isUnnamedClass ?  constructUnnamedClass(defs.toList()) : defs.toList();\n@@ -3970,3 +3970,3 @@\n-    \/\/ Restructure top level to be an top level anonymous class.\n-    private List<JCTree> constructAnonymousMainClass(List<JCTree> origDefs) {\n-        checkSourceLevel(Feature.ANONYMOUS_MAIN_CLASSES);\n+    \/\/ Restructure top level to be an unnamed class.\n+    private List<JCTree> constructUnnamedClass(List<JCTree> origDefs) {\n+        checkSourceLevel(Feature.UNNAMED_CLASSES);\n@@ -3979,1 +3979,1 @@\n-                log.error(def.pos(), Errors.AnonymousMainClassShouldNotHavePackageDeclaration);\n+                log.error(def.pos(), Errors.UnnamedClassShouldNotHavePackageDeclaration);\n@@ -3999,1 +3999,1 @@\n-                .Modifiers(Flags.FINAL|Flags.MANDATED|Flags.SYNTHETIC|Flags.ANONYMOUS_MAIN_CLASS, List.nil());\n+                .Modifiers(Flags.FINAL|Flags.MANDATED|Flags.SYNTHETIC|Flags.UNNAMED_CLASS, List.nil());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -516,2 +516,2 @@\n-compiler.err.anonymous.main.class.should.not.have.package.declaration=\\\n-    anonymous main class should not have package declaration\n+compiler.err.unnamed.class.should.not.have.package.declaration=\\\n+    unnamed class should not have package declaration\n@@ -519,2 +519,2 @@\n-compiler.err.anonymous.main.class.does.not.have.main.method=\\\n-    anonymous main class does not have main method in the form of void main() or void main(String[] args)\n+compiler.err.unnamed.class.does.not.have.main.method=\\\n+    unnamed class does not have main method in the form of void main() or void main(String[] args)\n@@ -3143,2 +3143,2 @@\n-compiler.misc.feature.anonymous.main.classes=\\\n-    anonymous main classes\n+compiler.misc.feature.unnamed.classes=\\\n+    unnamed classes\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * @test\n+ * @summary test execution priority of main methods\n+ * @run main InstanceMainTest\n+ *\/\n+public class InstanceMainTest extends TestHelper {\n+\n+    @Test\n+    public void testStaticMainArgs() throws Exception {\n+        test(\"\"\"\n+            class MainClass {\n+                static void main() {\n+                    throw new AssertionError();\n+                }\n+                static void main(String[] args) {\n+                }\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testStaticMain() throws Exception {\n+        test(\"\"\"\n+            class MainClass {\n+                void main(String[] args) {\n+                    throw new AssertionError();\n+                }\n+                static void main() {\n+                }\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testMainArgs() throws Exception {\n+        test(\"\"\"\n+            class MainClass {\n+                void main() {\n+                    throw new AssertionError();\n+                }\n+                void main(String[] args) {\n+                }\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testMain() throws Exception {\n+        test(\"\"\"\n+            class MainClass {\n+                void main() {\n+                }\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testTLAnonStaticMainArgs() throws Exception {\n+        test(\"\"\"\n+            static void main() {\n+                throw new AssertionError();\n+            }\n+            static void main(String[] args) {\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testTLAnonStaticMain() throws Exception {\n+        test(\"\"\"\n+            void main(String[] args) {\n+                throw new AssertionError();\n+            }\n+            static void main() {\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testTLAnonMainArgs() throws Exception {\n+        test(\"\"\"\n+            void main() {\n+                throw new AssertionError();\n+            }\n+            void main(String[] args) {\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testTLAnonMain() throws Exception {\n+        test(\"\"\"\n+            void main() {\n+            }\n+            \"\"\");\n+    }\n+\n+    @Test\n+    public void testSuperMain() throws Exception {\n+        test(\"\"\"\n+           class MainClass extends SuperClass {\n+                void main() {\n+                   throw new AssertionError();\n+               }\n+           }\n+           class SuperClass {\n+               void main(String[] args) {\n+               }\n+           }\n+           \"\"\");\n+    }\n+\n+    void test(String source) throws Exception {\n+        Files.writeString(Path.of(\"MainClass.java\"), source);\n+        var version = System.getProperty(\"java.specification.version\");\n+        var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+        if (!tr.isOK()) {\n+            System.out.println(tr);\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new InstanceMainTest().run(args);\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-\/**\n- * @test\n- * @summary test execution priority of main methods\n- * @run main OnrampMainTest\n- *\/\n-public class OnrampMainTest extends TestHelper {\n-\n-    @Test\n-    public void testStaticMainArgs() throws Exception {\n-        test(\"\"\"\n-            class MainClass {\n-                static void main() {\n-                    throw new AssertionError();\n-                }\n-                static void main(String[] args) {\n-                }\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testStaticMain() throws Exception {\n-        test(\"\"\"\n-            class MainClass {\n-                void main(String[] args) {\n-                    throw new AssertionError();\n-                }\n-                static void main() {\n-                }\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testMainArgs() throws Exception {\n-        test(\"\"\"\n-            class MainClass {\n-                void main() {\n-                    throw new AssertionError();\n-                }\n-                void main(String[] args) {\n-                }\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testMain() throws Exception {\n-        test(\"\"\"\n-            class MainClass {\n-                void main() {\n-                }\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testTLAnonStaticMainArgs() throws Exception {\n-        test(\"\"\"\n-            static void main() {\n-                throw new AssertionError();\n-            }\n-            static void main(String[] args) {\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testTLAnonStaticMain() throws Exception {\n-        test(\"\"\"\n-            void main(String[] args) {\n-                throw new AssertionError();\n-            }\n-            static void main() {\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testTLAnonMainArgs() throws Exception {\n-        test(\"\"\"\n-            void main() {\n-                throw new AssertionError();\n-            }\n-            void main(String[] args) {\n-            }\n-            \"\"\");\n-    }\n-\n-    @Test\n-    public void testTLAnonMain() throws Exception {\n-        test(\"\"\"\n-            void main() {\n-            }\n-            \"\"\");\n-    }\n-\n-    void test(String source) throws Exception {\n-        Files.writeString(Path.of(\"MainClass.java\"), source);\n-        var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", \"21\", \"MainClass.java\");\n-        if (!tr.isOK()) {\n-            System.out.println(tr);\n-            throw new AssertionError();\n-        }\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        new OnrampMainTest().run(args);\n-    }\n-}\n","filename":"test\/jdk\/tools\/launcher\/OnrampMainTest.java","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n- \/\/ key: compiler.misc.feature.anonymous.main.classes\n+ \/\/ key: compiler.misc.feature.unnamed.classes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnnamedClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/AnonymousMainClass.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnnamedClassBad-Filename.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/AnonymousMainClassBad-Filename.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n- \/\/ key: compiler.err.anonymous.main.class.should.not.have.package.declaration\n+ \/\/ key: compiler.err.unnamed.class.should.not.have.package.declaration\n@@ -29,1 +29,1 @@\n-package anonymous.main.classes;\n+package unnamed.classes;\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnnamedClassHasPackage.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/AnonymousMainClassHasPackage.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n- \/\/ key: compiler.err.anonymous.main.class.does.not.have.main.method\n+ \/\/ key: compiler.err.unnamed.class.does.not.have.main.method\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnnamedClassNoMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/AnonymousMainClassNoMain.java","status":"renamed"}]}