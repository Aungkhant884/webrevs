{"files":[{"patch":"@@ -1059,2 +1059,4 @@\n-    guarantee(ik->is_initialized(), \"%s must be initialized\", klass_name_str);\n-    CacheType::compute_offsets(ik);\n+    if (!ik->is_in_error_state()) {\n+      guarantee(ik->is_initialized(), \"%s must be initialized\", klass_name_str);\n+      CacheType::compute_offsets(ik);\n+    }\n@@ -1073,5 +1075,11 @@\n-    objArrayOop cache = CacheType::cache(ik);\n-    assert(cache->length() > 0, \"Empty cache\");\n-    _low = BoxType::value(cache->obj_at(0));\n-    _high = _low + cache->length() - 1;\n-    _cache = JNIHandles::make_global(Handle(thread, cache));\n+    if (ik->is_in_error_state()) {\n+      _low = 1;\n+      _high = 0;\n+      _cache = nullptr;\n+    } else {\n+      objArrayOop cache = CacheType::cache(ik);\n+      assert(cache->length() > 0, \"Empty cache\");\n+      _low = BoxType::value(cache->obj_at(0));\n+      _high = _low + cache->length() - 1;\n+      _cache = JNIHandles::make_global(Handle(thread, cache));\n+    }\n@@ -1099,1 +1107,5 @@\n-  oop lookup_raw(intptr_t raw_value) {\n+  oop lookup_raw(intptr_t raw_value, bool& cache_init_error) {\n+    if (_cache == nullptr) {\n+      cache_init_error = true;\n+      return nullptr;\n+    }\n@@ -1129,2 +1141,7 @@\n-    _true_cache = JNIHandles::make_global(Handle(thread, java_lang_Boolean::get_TRUE(ik)));\n-    _false_cache = JNIHandles::make_global(Handle(thread, java_lang_Boolean::get_FALSE(ik)));\n+    if (ik->is_in_error_state()) {\n+      _true_cache = nullptr;\n+      _false_cache = nullptr;\n+    } else {\n+      _true_cache = JNIHandles::make_global(Handle(thread, java_lang_Boolean::get_TRUE(ik)));\n+      _false_cache = JNIHandles::make_global(Handle(thread, java_lang_Boolean::get_FALSE(ik)));\n+    }\n@@ -1146,1 +1163,5 @@\n-  oop lookup_raw(intptr_t raw_value) {\n+  oop lookup_raw(intptr_t raw_value, bool& cache_in_error) {\n+    if (_true_cache == nullptr) {\n+      cache_in_error = true;\n+      return nullptr;\n+    }\n@@ -1161,1 +1182,1 @@\n-oop Deoptimization::get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS) {\n+oop Deoptimization::get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, bool& cache_init_error, TRAPS) {\n@@ -1167,6 +1188,6 @@\n-       case T_INT:     return IntegerBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n-       case T_CHAR:    return CharacterBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n-       case T_SHORT:   return ShortBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n-       case T_BYTE:    return ByteBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n-       case T_BOOLEAN: return BooleanBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n-       case T_LONG:    return LongBoxCache::singleton(THREAD)->lookup_raw(value->get_int());\n+       case T_INT:     return IntegerBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_CHAR:    return CharacterBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_SHORT:   return ShortBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_BYTE:    return ByteBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_BOOLEAN: return BooleanBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_LONG:    return LongBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n@@ -1196,0 +1217,1 @@\n+    bool cache_init_error = false;\n@@ -1201,1 +1223,1 @@\n-        obj = get_cached_box(abv, fr, reg_map, THREAD);\n+        obj = get_cached_box(abv, fr, reg_map, cache_init_error, THREAD);\n@@ -1205,0 +1227,4 @@\n+        } else if (cache_init_error) {\n+          \/\/ Results in an OOME which is valid (as opposed to a class initialization error)\n+          \/\/ and is fine for the rare case a cache initialization failing.\n+          failures = true;\n@@ -1210,1 +1236,1 @@\n-      if (obj == nullptr) {\n+      if (obj == nullptr && !cache_init_error) {\n@@ -1236,1 +1262,1 @@\n-    assert(obj != nullptr || HAS_PENDING_EXCEPTION, \"allocation should succeed or we should get an exception\");\n+    assert(obj != nullptr || HAS_PENDING_EXCEPTION || cache_init_error, \"allocation should succeed or we should get an exception\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":47,"deletions":21,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS);\n+  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, bool& cache_init_error, TRAPS);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-     *            that it possibly needs to be obtained for the box cache instead of creating a new\n+     *            that it possibly needs to be obtained from the box cache instead of creating a new\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/VirtualObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,9 +195,0 @@\n-                \/\/ Make sure all the primitive box caches are populated (required to properly\n-                \/\/ materialize boxed primitives\n-                \/\/ during deoptimization).\n-                Boolean.valueOf(false);\n-                Byte.valueOf((byte) 0);\n-                Short.valueOf((short) 0);\n-                Character.valueOf((char) 0);\n-                Integer.valueOf(0);\n-                Long.valueOf(0);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}