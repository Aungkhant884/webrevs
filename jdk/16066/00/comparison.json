{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.HashSet;\n@@ -57,0 +58,4 @@\n+    \/\/ names of modules whose legal notice files should be excluded from being de-duplicated.\n+    \/\/ such modules will have those files copied over into the module\n+    private static final String EXCLUDE_MODULES = \"exclude-modules\";\n+\n@@ -61,0 +66,1 @@\n+    private List<String> excludeModules;\n@@ -73,0 +79,4 @@\n+        String excludeModulesArgVal = config.get(EXCLUDE_MODULES);\n+        if (excludeModulesArgVal != null) {\n+            excludeModules = Utils.parseList(excludeModulesArgVal);\n+        }\n@@ -77,0 +87,6 @@\n+            } else if (arg.startsWith(EXCLUDE_MODULES + \"=\")) {\n+                \/\/ handle the case where only exclude-modules argument is passed to\n+                \/\/ --dedup-legal-notices option, like below:\n+                \/\/ --dedup-legal-notices exclude-modules=x,y\n+                String val = arg.substring((EXCLUDE_MODULES + \"=\").length());\n+                excludeModules = Utils.parseList(val);\n@@ -129,3 +145,9 @@\n-            entries.add(ResourcePoolEntry.createSymLink(entry.path(),\n-                                                        entry.type(),\n-                                                        otarget.get()));\n+            if (excludeModules != null && excludeModules.contains(entry.moduleName())) {\n+                \/\/ don't de-duplicate and instead add the original entry\n+                entries.add(entry);\n+            } else {\n+                \/\/ de-duplicate and add a symlink\n+                entries.add(ResourcePoolEntry.createSymLink(entry.path(),\n+                        entry.type(),\n+                        otarget.get()));\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8169925\n+ * @bug 8169925 8317634\n@@ -31,0 +31,1 @@\n+ *          java.base\/jdk.internal.util\n@@ -56,0 +57,2 @@\n+\n+import jdk.internal.util.OperatingSystem;\n@@ -92,1 +95,4 @@\n-        List.of(\"m4\"),       Map.of(\"test-license\",    \"test license v4\")\n+        List.of(\"m4\"),       Map.of(\"test-license\",    \"test license v4\",\n+                                    \"common-license\",    \"common\"),\n+        List.of(\"m5\"),       Map.of(\"common-license\",    \"common\"),\n+        List.of(\"m6\"),       Map.of(\"common-license\",    \"common\")\n@@ -250,0 +256,121 @@\n+    private record LicenseFile (String content, boolean symlinkExpected) {}\n+\n+    \/**\n+     * Creates an image with --dedup-legal-notices plugin enabled and by passing exclude-modules\n+     * option to exclude certain modules' license files from being de-duplicated (symlinked). Test\n+     * then verifies that the relevant license files in the generated image aren't symbolic links.\n+     *\/\n+    @Test\n+    public void testExcludeModules() throws Exception {\n+        if (Files.notExists(MODULE_PATH)) {\n+            \/\/ exploded image\n+            return;\n+        }\n+        String targetImageDir = \"test-exclude-modules\";\n+        String mpath = MODULE_PATH.toString() + File.pathSeparator +\n+                JMODS_DIR.toString();\n+        List<String> options = Stream.of(\"--dedup-legal-notices\",\n+                        \"exclude-modules=m1,m5\",\n+                        \"--module-path\", mpath,\n+                        \"--add-modules=m1,m2,m4,m5,m6\",\n+                        \"--output\", imageDir(targetImageDir))\n+                .collect(Collectors.toList());\n+\n+        Path image = createImage(targetImageDir, options);\n+        boolean symlinkSupported = symlinkSupported(image);\n+        \/\/ m1 and m5 license files are expected to be actual entries and not symlinks\n+        \/\/ m6 license file is expected to be a symlink (to m4 license file)\n+        Map<String, LicenseFile> expectedLicenses =\n+                Map.of(\"m1\/LICENSE\", new LicenseFile(\"m1 LICENSE\", false),\n+                        \"m1\/m1-license.txt\", new LicenseFile(\"m1 license\", false),\n+                        \"m1\/test-license\", new LicenseFile(\"test license v1\", false),\n+                        \"m2\/m2-license\", new LicenseFile(\"m2 license\", false),\n+                        \/\/ symlink to target m1\/test-license\n+                        \"m2\/test-license\", new LicenseFile(\"test license v1\", true),\n+                        \"m4\/common-license\", new LicenseFile(\"common\", false),\n+                        \"m5\/common-license\", new LicenseFile(\"common\", false),\n+                        \/\/ symlink to target m4\/common-license\n+                        \"m6\/common-license\", new LicenseFile(\"common\", true));\n+        Path legalDir = image.resolve(\"legal\");\n+        for (Map.Entry<String, LicenseFile> expected : expectedLicenses.entrySet()) {\n+            String p = expected.getKey().replace(\"\/\", File.separator);\n+            Path licenseFilePath = legalDir.resolve(p);\n+            assertTrue(Files.exists(licenseFilePath),\n+                    licenseFilePath + \" is missing in the generated image\");\n+            assertTrue(Files.isRegularFile(licenseFilePath),\n+                    licenseFilePath + \" isn't a regular file in the generated image\");\n+            if (expected.getValue().symlinkExpected) {\n+                \/\/ check if the platform supports symlink\n+                if (symlinkSupported) {\n+                    assertTrue(Files.isSymbolicLink(licenseFilePath),\n+                            licenseFilePath + \" was expected to be a symlink, but isn't\");\n+                    compareFileContent(licenseFilePath, expected.getValue().content);\n+                } else {\n+                    \/\/ on platforms where symlink isn't supported, this will be a replacement\n+                    \/\/ file whose text content will point to the target file.\n+                    \/\/ verify that text content\n+                    assertDeduplicatedLicenseNotice(licenseFilePath);\n+                }\n+            } else {\n+                compareFileContent(licenseFilePath, expected.getValue().content);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Verifies the case where --dedup-legal-notices option of the dedup-legal-notices plugin\n+     * is capable to taking more than one argument\n+     *\/\n+    @Test\n+    public void testMultiArgs() throws Exception {\n+        if (Files.notExists(MODULE_PATH)) {\n+            \/\/ exploded image\n+            return;\n+        }\n+        String targetImageDir = \"test-multi-args\";\n+        String mpath = MODULE_PATH.toString() + File.pathSeparator +\n+                JMODS_DIR.toString();\n+        \/\/ pass both error-if-not-same-content and exclude-modules arguments to the\n+        \/\/ --dedup-legal-notices option\n+        List<String> options = Stream.of(\n+                        \"--dedup-legal-notices=error-if-not-same-content:exclude-modules=m6\",\n+                        \"--module-path\", mpath,\n+                        \"--add-modules=m4,m5,m6\",\n+                        \"--output\", imageDir(targetImageDir))\n+                .collect(Collectors.toList());\n+\n+        Path image = createImage(targetImageDir, options);\n+        boolean symlinkSupported = symlinkSupported(image);\n+        \/\/ m6 license file is expected to be actual entry (even if it's content and license file\n+        \/\/ name matches the ones in m4 and m5)\n+        Map<String, LicenseFile> expectedLicenses =\n+                Map.of(\"m4\/common-license\", new LicenseFile(\"common\", false),\n+                        \/\/ symlink to target m4\/common-license\n+                        \"m5\/common-license\", new LicenseFile(\"common\", true),\n+                        \"m6\/common-license\", new LicenseFile(\"common\", false));\n+        Path legalDir = image.resolve(\"legal\");\n+        for (Map.Entry<String, LicenseFile> expected : expectedLicenses.entrySet()) {\n+            String p = expected.getKey().replace(\"\/\", File.separator);\n+            Path licenseFilePath = legalDir.resolve(p);\n+            assertTrue(Files.exists(licenseFilePath),\n+                    licenseFilePath + \" is missing in the generated image\");\n+            assertTrue(Files.isRegularFile(licenseFilePath),\n+                    licenseFilePath + \" isn't a regular file in the generated image\");\n+            if (expected.getValue().symlinkExpected) {\n+                \/\/ check if the platform supports symlink\n+                if (symlinkSupported) {\n+                    assertTrue(Files.isSymbolicLink(licenseFilePath),\n+                            licenseFilePath + \" was expected to be a symlink, but isn't\");\n+                    compareFileContent(licenseFilePath, expected.getValue().content);\n+                } else {\n+                    \/\/ on platforms where symlink isn't supported, this will be a replacement\n+                    \/\/ file whose text content will point to the target file.\n+                    \/\/ verify that text content\n+                    assertDeduplicatedLicenseNotice(licenseFilePath);\n+                }\n+            } else {\n+                compareFileContent(licenseFilePath, expected.getValue().content);\n+            }\n+        }\n+    }\n+\n@@ -261,0 +388,7 @@\n+    private void assertDeduplicatedLicenseNotice(Path file) throws IOException {\n+        \/\/ read the content of the file, it should start with \"Please see\"\n+        String content = Files.readString(file);\n+        assertTrue(content.startsWith(\"Please see\"),\n+                file + \" isn't a de-duplicated license notice file\");\n+    }\n+\n@@ -270,0 +404,5 @@\n+    private static boolean symlinkSupported(final Path path) {\n+        return !OperatingSystem.isWindows()\n+                && path.getFileSystem().supportedFileAttributeViews().contains(\"posix\");\n+    }\n+\n","filename":"test\/jdk\/tools\/jlink\/plugins\/LegalFilePluginTest.java","additions":142,"deletions":3,"binary":false,"changes":145,"status":"modified"}]}