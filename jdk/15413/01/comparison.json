{"files":[{"patch":"@@ -97,1 +97,1 @@\n-  int index = MIN2(ParallelGCThreads - 1, 7u);\n+  uint index = MIN2(ParallelGCThreads - 1, 7u);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  uint offset = _bot->offset_array(index);\n+  u_char offset = _bot->offset_array(index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  memset_with_concurrent_readers(first, g1_young_gen, last - first);\n+  memset_with_concurrent_readers(first, g1_young_gen, pointer_delta(last, first, sizeof(CardValue)));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -393,2 +393,2 @@\n-  _task_queues(new G1CMTaskQueueSet((int) _max_num_tasks)),\n-  _terminator((int) _max_num_tasks, _task_queues),\n+  _task_queues(new G1CMTaskQueueSet(_max_num_tasks)),\n+  _terminator(_max_num_tasks, _task_queues),\n@@ -543,2 +543,2 @@\n-  _first_overflow_barrier_sync.set_n_workers((int) active_tasks);\n-  _second_overflow_barrier_sync.set_n_workers((int) active_tasks);\n+  _first_overflow_barrier_sync.set_n_workers(active_tasks);\n+  _second_overflow_barrier_sync.set_n_workers(active_tasks);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  void update_accum_task_vtime(int i, double vtime) {\n+  void update_accum_task_vtime(uint i, double vtime) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  size_t already_scanned = slice - start_address;\n+  size_t already_scanned = pointer_delta(slice, start_address);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  int    _length;\n+  uint    _length;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EdenRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -62,1 +63,1 @@\n-  return head & _head_index_mask;\n+  return checked_cast<uint>(head & _head_index_mask);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,4 +103,0 @@\n-size_t G1PageBasedVirtualSpace::addr_to_page_index(char* addr) const {\n-  return (addr - _low_boundary) \/ _page_size;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,3 +87,0 @@\n-  \/\/ Returns the index of the page which contains the given address.\n-  size_t  addr_to_page_index(char* addr) const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -548,1 +548,1 @@\n-    size_t num_cards = dirty_r - dirty_l;\n+    size_t num_cards = pointer_delta(dirty_r, dirty_l, sizeof(CardValue));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  size_t live_bytes_above_tams = (r->top() - r->top_at_mark_start()) * HeapWordSize;\n+  size_t live_bytes_above_tams = pointer_delta(r->top(), r->top_at_mark_start()) * HeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}