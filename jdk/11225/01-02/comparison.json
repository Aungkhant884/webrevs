{"files":[{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.geom.Path2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+\/**\n+ * Clip rendering test\n+ *\n+ * @test\n+ * @bug 8297230\n+ * @summary verify that huge polygon is properly rasterized\n+ *\/\n+public class HugePolygonClipTest {\n+\n+    private static final double LARGE_X_COORDINATE = 4194304.250;\n+    private static final int SCENE_WIDTH = 600;\n+    private static final int SCENE_HEIGHT = 400;\n+\n+    private static final float WIDTH = 2.73f;\n+\n+    private static final int G_MASK = 0x0000ff00;\n+    private static final int R_MASK = 0x00ff0000;\n+    private static final int RGB_MASK = 0x00ffffff;\n+\n+    static final boolean SAVE_IMAGE = false;\n+\n+    public static void main(final String[] args) {\n+\n+        \/\/ First display which renderer is tested:\n+        \/\/ JDK9 only:\n+        System.setProperty(\"sun.java2d.renderer.verbose\", \"true\");\n+\n+        \/\/ enable Marlin logging:\n+        System.setProperty(\"sun.java2d.renderer.log\", \"true\");\n+        System.setProperty(\"sun.java2d.renderer.clip\", \"true\");\n+        System.setProperty(\"sun.java2d.renderer.subPixel_log2_X\", \"8\");\n+\n+        System.out.println(\"HugePolygonClipTest: size = \" + SCENE_WIDTH + \" x \" + SCENE_HEIGHT);\n+\n+        final BufferedImage image = new BufferedImage(SCENE_WIDTH, SCENE_HEIGHT, BufferedImage.TYPE_INT_ARGB);\n+\n+        final Graphics2D g2d = (Graphics2D) image.getGraphics();\n+        try {\n+            g2d.setBackground(Color.BLACK);\n+            g2d.clearRect(0, 0, SCENE_WIDTH, SCENE_HEIGHT);\n+\n+            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n+            g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n+\n+            \/\/ original test case => large moveTo in Filler but no bug in Stroker:\n+            double longWidth = LARGE_X_COORDINATE + SCENE_WIDTH + 0.001;\n+\n+            final Path2D veryWidePolygon = new Path2D.Double();\n+            veryWidePolygon.moveTo(longWidth, 50.0);\n+            veryWidePolygon.lineTo(longWidth, 100.0);\n+            veryWidePolygon.lineTo(0.0, 100.0);\n+            veryWidePolygon.lineTo(0.0, 0.0);\n+            veryWidePolygon.closePath();\n+\n+            g2d.translate(-longWidth + SCENE_WIDTH, 100.0);\n+\n+            g2d.setPaint(Color.RED);\n+            g2d.fill(veryWidePolygon);\n+\n+            g2d.setPaint(Color.GREEN);\n+            g2d.setStroke(new BasicStroke(WIDTH));\n+            g2d.draw(veryWidePolygon);\n+\n+            if (SAVE_IMAGE) {\n+                try {\n+                    final File file = new File(\"TestHugePolygonCoords.png\");\n+\n+                    System.out.println(\"Writing file: \" + file.getAbsolutePath());\n+                    ImageIO.write(image, \"PNG\", file);\n+                } catch (IOException ex) {\n+                    ex.printStackTrace();\n+                }\n+            }\n+\n+            \/\/ Check image on few pixels:\n+            final int x = SCENE_WIDTH \/ 2;\n+            checkColumn(image, x, SCENE_HEIGHT);\n+\n+        } finally {\n+            g2d.dispose();\n+        }\n+    }\n+\n+    private static void checkColumn(final BufferedImage image, final int x, final int maxY) {\n+        boolean trigger = false;\n+        boolean inside = false;\n+\n+        for (int y = 0; y < maxY; y++) {\n+            final int rgb = image.getRGB(x, y);\n+            \/\/ System.out.println(\"pixel at (\" + x + \", \" + y + \") = \" + rgb);\n+\n+            if ((rgb & G_MASK) != 0) {\n+                if (!trigger) {\n+                    trigger = true;\n+                    inside = !inside;\n+                    \/\/ System.out.println(\"inside: \"+inside);\n+                }\n+            } else {\n+                trigger = false;\n+\n+                final int mask = (inside) ? R_MASK : RGB_MASK;\n+\n+                final int expected = (rgb & mask);\n+\n+                \/\/ System.out.println(\"pix[\" + y + \"] = \" + expected + \" inside: \" + inside);\n+                if ((inside && (expected == 0))\n+                        || (!inside && (expected != 0))) {\n+                    throw new IllegalStateException(\"bad pixel at (\" + x + \", \" + y\n+                            + \") = \" + expected + \" inside: \" + inside);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/HugePolygonClipTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}