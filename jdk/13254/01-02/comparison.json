{"files":[{"patch":"@@ -30,1 +30,1 @@\n- *      -Djava.util.concurrent.ForkJoinPool.common.parallelism=1\n+ *      -Djdk.virtualThreadScheduler.parallelism=1\n@@ -54,0 +54,5 @@\n+    \/\/ Currently we cannot test JNI locals for unmounted threads\n+    \/\/ as native calls pin virtual thread.\n+    \/\/ TODO: revise if this changes.\n+    static final boolean testUnmountedJNILocals = false;\n+\n@@ -61,1 +66,1 @@\n-        \/\/ Unmounted virtual thread with stack local and JNI local.\n+        \/\/ Unmounted virtual thread with stack local.\n@@ -65,7 +70,12 @@\n-            createObjAndCallback(VThreadUnmountedJNIReferenced.class,\n-                new Runnable() {\n-                    public void run() {\n-                        unmountedThreadReady.countDown();\n-                        await(dumpedLatch);\n-                    }\n-                });\n+            if (testUnmountedJNILocals) {\n+                createObjAndCallback(VThreadUnmountedJNIReferenced.class,\n+                    new Runnable() {\n+                        public void run() {\n+                            unmountedThreadReady.countDown();\n+                            await(dumpedLatch);\n+                        }\n+                    });\n+            } else {\n+                unmountedThreadReady.countDown();\n+                await(dumpedLatch);\n+            }\n@@ -113,1 +123,3 @@\n-            new TestCase(VThreadUnmountedJNIReferenced.class, 1, vthreadUnmounted.getId()),\n+            new TestCase(VThreadUnmountedJNIReferenced.class,\n+                         testUnmountedJNILocals ? 1 : 0,\n+                         testUnmountedJNILocals ? vthreadUnmounted.getId() : 0),\n@@ -127,5 +139,10 @@\n-        test(testClasses);\n-\n-        \/\/ Finish all threads\n-        endWait();               \/\/ signal mounted vthread to exit\n-        dumpedLatch.countDown(); \/\/ signal unmounted vthread and platform thread to exit\n+        try {\n+            verifyVthreadMounted(vthreadUnmounted, false);\n+            verifyVthreadMounted(vthreadMounted, true);\n+            \n+            test(testClasses);\n+        } finally {\n+            \/\/ Finish all threads\n+            endWait();               \/\/ signal mounted vthread to exit\n+            dumpedLatch.countDown(); \/\/ signal unmounted vthread and platform thread to exit\n+        }\n@@ -164,0 +181,13 @@\n+    private static void verifyVthreadMounted(Thread t, boolean expectedMounted) {\n+        \/\/ Hucky, but simple.\n+        \/\/ If virtual thread is mounted, its toString() contains\n+        \/\/ info about carrier thread, something like\n+        \/\/ VirtualThread[#27]\/runnable@ForkJoinPool-1-worker-1\n+        String s = t.toString();\n+        boolean mounted = t.isVirtual() && s.contains(\"\/runnable@\");\n+        System.out.println(\"Thread \" + t + \": \" + (mounted ? \"mounted\" : \"unmounted\"));\n+        if (mounted != expectedMounted) {\n+            throw new RuntimeException(\"Thread \" + t + \" has unexpected mount state\");\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/FollowReferences\/VThreadStackRefTest.java","additions":45,"deletions":15,"binary":false,"changes":60,"status":"modified"}]}