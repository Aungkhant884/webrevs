{"files":[{"patch":"@@ -2360,68 +2360,0 @@\n-\/\/ A supporting closure used to process unmounted virtual threads.\n-class VThreadClosure : public ObjectClosure {\n-private:\n-  JvmtiTagMap* tag_map;\n-  JNILocalRootsClosure* blk;\n-  bool _continue;\n-\n-public:\n-  VThreadClosure(JvmtiTagMap* tag_map, JNILocalRootsClosure* blk): tag_map(tag_map), blk(blk), _continue(true) {}\n-\n-  inline bool stopped() const { return !_continue; }\n-\n-  \/\/ called for each object in the heap\n-  void do_object(oop o);\n-};\n-\n-void VThreadClosure::do_object(oop o) {\n-  if (stopped()) {\n-    return;\n-  }\n-\n-  if (!java_lang_VirtualThread::is_subclass(o->klass())) {\n-    return;\n-  }\n-  if (!JvmtiEnvBase::is_vthread_alive(o)) {\n-    return;\n-  }\n-  ContinuationWrapper c(java_lang_VirtualThread::continuation(o));\n-  if (c.is_empty()) {\n-    return;\n-  }\n-  assert(!c.is_mounted(), \"sanity check\");\n-\n-  stackChunkOop chunk = c.last_nonempty_chunk();\n-  if (chunk == nullptr || chunk->is_empty()) {\n-    return;\n-  }\n-\n-  \/\/ vframes are resource allocated\n-  Thread* current_thread = Thread::current();\n-  ResourceMark rm(current_thread);\n-  HandleMark hm(current_thread);\n-\n-  StackChunkFrameStream<ChunkFrames::Mixed> fs(chunk);\n-  RegisterMap reg_map(nullptr,\n-                      RegisterMap::UpdateMap::include,\n-                      RegisterMap::ProcessFrames::include,\n-                      RegisterMap::WalkContinuation::include);\n-  fs.initialize_register_map(&reg_map);\n-\n-  \/\/ JavaThread is not required for unmounted virtual threads\n-  StackRootCollector stack_collector(tag_map, blk, nullptr);\n-  if (!stack_collector.set_thread(o)) {\n-    _continue = false;\n-    return;\n-  }\n-\n-  for (; !fs.is_done(); fs.next(&reg_map)) {\n-    frame fr = fs.to_frame();\n-    vframe* vf = vframe::new_vframe(&fr, &reg_map, nullptr);\n-    if (!stack_collector.do_frame(vf)) {\n-      _continue = false;\n-      return;\n-    }\n-  }\n-}\n-\n-\n@@ -2491,0 +2423,1 @@\n+  inline bool collect_vthread_stack_roots(oop vt);\n@@ -2839,2 +2772,3 @@\n-\/\/ Walk the stack of a given thread and find all references (locals\n-\/\/ and JNI calls) and report these as stack references\n+\/\/ Reports the thread as JVMTI_HEAP_REFERENCE_THREAD,\n+\/\/ walks the stack of the thread, finds all references (locals\n+\/\/ and JNI calls) and reports these as stack references\n@@ -2851,0 +2785,2 @@\n+  StackRootCollector stack_collector(tag_map(), blk, java_thread);\n+\n@@ -2854,0 +2790,5 @@\n+\n+    if (!stack_collector.set_thread(threadObj)) {\n+        return false;\n+    }\n+\n@@ -2859,2 +2800,0 @@\n-    StackRootCollector stack_collector(tag_map(), blk, java_thread);\n-\n@@ -2926,0 +2865,25 @@\n+  return true;\n+}\n+\n+\/\/ Reports the unmounted virtual thread as JVMTI_HEAP_REFERENCE_THREAD,\n+\/\/ walks the stack of the thread, finds all references (locals\n+\/\/ and JNI calls) and reports these as stack references.\n+inline bool VM_HeapWalkOperation::collect_vthread_stack_roots(oop vt) {\n+    if (!JvmtiEnvBase::is_vthread_alive(vt)) {\n+        return true;\n+    }\n+    ContinuationWrapper c(java_lang_VirtualThread::continuation(vt));\n+    if (c.is_empty()) {\n+        return true;\n+    }\n+    assert(!c.is_mounted(), \"sanity check\");\n+\n+    stackChunkOop chunk = c.last_nonempty_chunk();\n+    if (chunk == nullptr || chunk->is_empty()) {\n+        return true;\n+    }\n+\n+    \/\/ vframes are resource allocated\n+    Thread* current_thread = Thread::current();\n+    ResourceMark rm(current_thread);\n+    HandleMark hm(current_thread);\n@@ -2927,4 +2891,13 @@\n-  \/\/ process unmounted vthreads.\n-  VThreadClosure vt(tag_map(), &blk);\n-  Universe::heap()->ensure_parsability(false);\n-  Universe::heap()->object_iterate(&vt);\n+    StackChunkFrameStream<ChunkFrames::Mixed> fs(chunk);\n+    RegisterMap reg_map(nullptr,\n+        RegisterMap::UpdateMap::include,\n+        RegisterMap::ProcessFrames::include,\n+        RegisterMap::WalkContinuation::include);\n+    fs.initialize_register_map(&reg_map);\n+\n+    JNILocalRootsClosure blk;\n+    \/\/ JavaThread is not required for unmounted virtual threads\n+    StackRootCollector stack_collector(tag_map(), &blk, nullptr);\n+    if (!stack_collector.set_thread(vt)) {\n+        return false;\n+    }\n@@ -2932,1 +2905,8 @@\n-  return !blk.stopped() && !vt.stopped();\n+    for (; !fs.is_done(); fs.next(&reg_map)) {\n+        frame fr = fs.to_frame();\n+        vframe* vf = vframe::new_vframe(&fr, &reg_map, nullptr);\n+        if (!stack_collector.do_frame(vf)) {\n+            return false;\n+        }\n+    }\n+    return true;\n@@ -2953,0 +2933,5 @@\n+      if (is_advanced_heap_walk() && java_lang_VirtualThread::is_subclass(o->klass())) {\n+        if (!collect_vthread_stack_roots(o)) {\n+          return false;\n+        }\n+      }\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":62,"deletions":77,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -158,5 +158,1 @@\n-            System.out.println(\"  (\" + i + \") \" + testCases[i].cls()\n-                               + \": ref count = \" + refCount\n-                               + \" (expected \" + testCases[i].expectedCount() + \")\"\n-                               + \", thread id = \" + threadId\n-                               + \" (expected \" + testCases[i].expectedThreadId() + \")\");\n+            String status = \"OK\";\n@@ -166,0 +162,1 @@\n+                status = \"ERROR\";\n@@ -167,0 +164,6 @@\n+            System.out.println(\"  (\" + i + \") \" + status\n+                               + \" \" + testCases[i].cls()\n+                               + \": ref count = \" + refCount\n+                               + \" (expected \" + testCases[i].expectedCount() + \")\"\n+                               + \", thread id = \" + threadId\n+                               + \" (expected \" + testCases[i].expectedThreadId() + \")\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/FollowReferences\/VThreadStackRefTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}