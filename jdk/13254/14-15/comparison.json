{"files":[{"patch":"@@ -1124,3 +1124,0 @@\n-\n-  JvmtiVTMSTransitionDisabler disabler;\n-\n@@ -1154,3 +1151,0 @@\n-\n-  JvmtiVTMSTransitionDisabler disabler;\n-\n@@ -2935,1 +2929,3 @@\n-      if (is_advanced_heap_walk() && java_lang_VirtualThread::is_subclass(o->klass())) {\n+      \/\/ we report stack references only when initial object is not specified\n+      \/\/ (in the case we start from heap roots which include platform thread stack references)\n+      if (initial_object().is_null() && java_lang_VirtualThread::is_subclass(o->klass())) {\n@@ -3002,0 +2998,3 @@\n+\n+  JvmtiVTMSTransitionDisabler disabler;\n+\n@@ -3021,0 +3020,3 @@\n+\n+  JvmtiVTMSTransitionDisabler disabler;\n+\n@@ -3049,0 +3051,3 @@\n+\n+  JvmtiVTMSTransitionDisabler disabler;\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  jint testClassCount;\n+  jint test_class_count;\n@@ -39,1 +39,1 @@\n-  jlong *threadId;\n+  jlong *thread_id;\n@@ -41,1 +41,1 @@\n-  RefCounters(): testClassCount(0), count(nullptr) {}\n+  RefCounters(): test_class_count(0), count(nullptr) {}\n@@ -53,4 +53,4 @@\n-  void init(JNIEnv* env, jint testClassCount) {\n-    this->testClassCount = testClassCount;\n-    count = (jint*)alloc(env, sizeof(count[0]) *  testClassCount);\n-    threadId = (jlong*)alloc(env, sizeof(threadId[0]) *  testClassCount);\n+  void init(JNIEnv* env, jint test_class_count) {\n+    this->test_class_count = test_class_count;\n+    count = (jint*)alloc(env, sizeof(count[0]) *  test_class_count);\n+    thread_id = (jlong*)alloc(env, sizeof(thread_id[0]) *  test_class_count);\n@@ -76,2 +76,2 @@\n-      refCounters.threadId[index] = stackInfo->thread_id;\n-      LOG(\"Stack local: index = %d, threadId = %d\\n\",\n+      refCounters.thread_id[index] = stackInfo->thread_id;\n+      LOG(\"Stack local: index = %d, thread_id = %d\\n\",\n@@ -87,2 +87,2 @@\n-      refCounters.threadId[index] = jniInfo->thread_id;\n-      LOG(\"JNI local: index = %d, threadId = %d\\n\",\n+      refCounters.thread_id[index] = jniInfo->thread_id;\n+      LOG(\"JNI local: index = %d, thread_id = %d\\n\",\n@@ -106,1 +106,1 @@\n-  if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || jvmti == nullptr) {\n+  if (vm->GetEnv((void **)&jvmti, JVMTI_VERSION) != JNI_OK) {\n@@ -113,1 +113,0 @@\n-  \/\/capabilities.can_support_virtual_threads = 1;\n@@ -130,1 +129,1 @@\n-  for (int i=0; i<classesCount; i++) {\n+  for (int i = 0; i < classesCount; i++) {\n@@ -151,1 +150,1 @@\n-  return refCounters.threadId[index];\n+  return refCounters.thread_id[index];\n@@ -154,1 +153,1 @@\n-static void printtCreatedClass(JNIEnv* env, jclass cls) {\n+static void printCreatedClass(JNIEnv* env, jclass cls) {\n@@ -166,0 +165,2 @@\n+\/\/ Creates object of the the specified class (local JNI)\n+\/\/ and calls the provided callback.\n@@ -169,1 +170,1 @@\n-  printtCreatedClass(env, cls);\n+  printCreatedClass(env, cls);\n@@ -182,0 +183,3 @@\n+\/\/ Creates object of the the specified class (local JNI),\n+\/\/ sets mountedVthreadReady static field,\n+\/\/ and then waits until endWait() method is called.\n@@ -185,1 +189,1 @@\n-  printtCreatedClass(env, cls);\n+  printCreatedClass(env, cls);\n@@ -200,0 +204,1 @@\n+\/\/ Signals createObjAndWait() to exit.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/FollowReferences\/libVThreadStackRefTest.cpp","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"}]}