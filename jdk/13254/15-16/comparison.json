{"files":[{"patch":"@@ -128,2 +128,2 @@\n-  jsize classesCount = env->GetArrayLength(classes);\n-  for (int i = 0; i < classesCount; i++) {\n+  jsize classes_count = env->GetArrayLength(classes);\n+  for (int i = 0; i < classes_count; i++) {\n@@ -132,5 +132,5 @@\n-  refCounters.init(env, classesCount);\n-  jvmtiHeapCallbacks heapCallBacks;\n-  memset(&heapCallBacks, 0, sizeof(jvmtiHeapCallbacks));\n-  heapCallBacks.heap_reference_callback = HeapReferenceCallback;\n-  jvmtiError err = jvmti->FollowReferences(0, nullptr, nullptr, &heapCallBacks, nullptr);\n+  refCounters.init(env, classes_count);\n+  jvmtiHeapCallbacks callbacks;\n+  memset(&callbacks, 0, sizeof(jvmtiHeapCallbacks));\n+  callbacks.heap_reference_callback = HeapReferenceCallback;\n+  jvmtiError err = jvmti->FollowReferences(0, nullptr, nullptr, &callbacks, nullptr);\n@@ -153,1 +153,1 @@\n-static void printCreatedClass(JNIEnv* env, jclass cls) {\n+static void print_created_class(JNIEnv* env, jclass cls) {\n@@ -170,1 +170,1 @@\n-  printCreatedClass(env, cls);\n+  print_created_class(env, cls);\n@@ -181,1 +181,1 @@\n-static std::atomic<bool> timeToExit(false);\n+static std::atomic<bool> time_to_exit(false);\n@@ -189,1 +189,1 @@\n-  printCreatedClass(env, cls);\n+  print_created_class(env, cls);\n@@ -199,1 +199,1 @@\n-  while (!timeToExit) {\n+  while (!time_to_exit) {\n@@ -207,1 +207,1 @@\n-  timeToExit = true;\n+  time_to_exit = true;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/FollowReferences\/libVThreadStackRefTest.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}