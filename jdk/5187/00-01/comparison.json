{"files":[{"patch":"@@ -4285,1 +4285,1 @@\n-  return HeapAccess<MO_ACQUIRE>::load_at(loader, _loader_data_offset);\n+  return Atomic::load_acquire(loader->field_addr<ClassLoaderData*>(_loader_data_offset));\n@@ -4291,1 +4291,1 @@\n-  return HeapAccess<>::load_at(loader, _loader_data_offset);\n+  return *loader->field_addr<ClassLoaderData*>(_loader_data_offset);\n@@ -4297,1 +4297,1 @@\n-  HeapAccess<MO_RELEASE>::store_at(loader, _loader_data_offset, new_data);\n+  Atomic::release_store(loader->field_addr<ClassLoaderData*>(_loader_data_offset), new_data);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-      return HeapAccess<>::load_at(base, className::_##name##_offset);                                                    \\\n+      return *base->field_addr<jtypename>(className::_##name##_offset);                                                    \\\n@@ -240,1 +240,1 @@\n-      HeapAccess<>::store_at(base, _##name##_offset, x);                                                                  \\\n+      *base->field_addr<jtypename>(className::_##name##_offset) = x;                                                       \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,2 +182,2 @@\n-address oopDesc::address_field(int offset) const                      { return HeapAccess<>::load_at(as_oop(), offset); }\n-address oopDesc::address_field_acquire(int offset) const              { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n+address oopDesc::address_field(int offset) const                      { return *field_addr<address>(offset); }\n+address oopDesc::address_field_acquire(int offset) const              { return Atomic::load_acquire(field_addr<address>(offset)); }\n@@ -185,2 +185,2 @@\n-void oopDesc::address_field_put(int offset, address value)            { HeapAccess<>::store_at(as_oop(), offset, value); }\n-void oopDesc::release_address_field_put(int offset, address value)    { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+void oopDesc::address_field_put(int offset, address value)            { *field_addr<address>(offset) = value; }\n+void oopDesc::release_address_field_put(int offset, address value)    { Atomic::release_store(field_addr<address>(offset), value); }\n@@ -188,2 +188,2 @@\n-Metadata* oopDesc::metadata_field(int offset) const                   { return HeapAccess<>::load_at(as_oop(), offset); }\n-void oopDesc::metadata_field_put(int offset, Metadata* value)         { HeapAccess<>::store_at(as_oop(), offset, value); }\n+Metadata* oopDesc::metadata_field(int offset) const                   { return *field_addr<Metadata*>(offset); }\n+void oopDesc::metadata_field_put(int offset, Metadata* value)         { *field_addr<Metadata*>(offset) = value; }\n@@ -191,2 +191,2 @@\n-Metadata* oopDesc::metadata_field_acquire(int offset) const           { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_metadata_field_put(int offset, Metadata* value) { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+Metadata* oopDesc::metadata_field_acquire(int offset) const           { return Atomic::load_acquire(field_addr<Metadata*>(offset)); }\n+void oopDesc::release_metadata_field_put(int offset, Metadata* value) { Atomic::release_store(field_addr<Metadata*>(offset), value); }\n@@ -194,2 +194,2 @@\n-jbyte oopDesc::byte_field_acquire(int offset) const                   { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_byte_field_put(int offset, jbyte value)         { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jbyte oopDesc::byte_field_acquire(int offset) const                   { return Atomic::load_acquire(field_addr<jbyte>(offset)); }\n+void oopDesc::release_byte_field_put(int offset, jbyte value)         { Atomic::release_store(field_addr<jbyte>(offset), value); }\n@@ -197,2 +197,2 @@\n-jchar oopDesc::char_field_acquire(int offset) const                   { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_char_field_put(int offset, jchar value)         { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jchar oopDesc::char_field_acquire(int offset) const                   { return Atomic::load_acquire(field_addr<jchar>(offset)); }\n+void oopDesc::release_char_field_put(int offset, jchar value)         { Atomic::release_store(field_addr<jchar>(offset), value); }\n@@ -200,2 +200,2 @@\n-jboolean oopDesc::bool_field_acquire(int offset) const                { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_bool_field_put(int offset, jboolean value)      { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, jboolean(value & 1)); }\n+jboolean oopDesc::bool_field_acquire(int offset) const                { return Atomic::load_acquire(field_addr<jboolean>(offset)); }\n+void oopDesc::release_bool_field_put(int offset, jboolean value)      { Atomic::release_store(field_addr<jboolean>(offset), jboolean(value & 1)); }\n@@ -203,2 +203,2 @@\n-jint oopDesc::int_field_acquire(int offset) const                     { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_int_field_put(int offset, jint value)           { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jint oopDesc::int_field_acquire(int offset) const                     { return Atomic::load_acquire(field_addr<jint>(offset)); }\n+void oopDesc::release_int_field_put(int offset, jint value)           { Atomic::release_store(field_addr<jint>(offset), value); }\n@@ -206,2 +206,2 @@\n-jshort oopDesc::short_field_acquire(int offset) const                 { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_short_field_put(int offset, jshort value)       { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jshort oopDesc::short_field_acquire(int offset) const                 { return Atomic::load_acquire(field_addr<jshort>(offset)); }\n+void oopDesc::release_short_field_put(int offset, jshort value)       { Atomic::release_store(field_addr<jshort>(offset), value); }\n@@ -209,2 +209,2 @@\n-jlong oopDesc::long_field_acquire(int offset) const                   { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_long_field_put(int offset, jlong value)         { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jlong oopDesc::long_field_acquire(int offset) const                   { return Atomic::load_acquire(field_addr<jlong>(offset)); }\n+void oopDesc::release_long_field_put(int offset, jlong value)         { Atomic::release_store(field_addr<jlong>(offset), value); }\n@@ -212,2 +212,2 @@\n-jfloat oopDesc::float_field_acquire(int offset) const                 { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_float_field_put(int offset, jfloat value)       { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jfloat oopDesc::float_field_acquire(int offset) const                 { return Atomic::load_acquire(field_addr<jfloat>(offset)); }\n+void oopDesc::release_float_field_put(int offset, jfloat value)       { Atomic::release_store(field_addr<jfloat>(offset), value); }\n@@ -215,2 +215,2 @@\n-jdouble oopDesc::double_field_acquire(int offset) const               { return HeapAccess<MO_ACQUIRE>::load_at(as_oop(), offset); }\n-void oopDesc::release_double_field_put(int offset, jdouble value)     { HeapAccess<MO_RELEASE>::store_at(as_oop(), offset, value); }\n+jdouble oopDesc::double_field_acquire(int offset) const               { return Atomic::load_acquire(field_addr<jdouble>(offset)); }\n+void oopDesc::release_double_field_put(int offset, jdouble value)     { Atomic::release_store(field_addr<jdouble>(offset), value); }\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -94,2 +94,1 @@\n-  ptrdiff_t offset = element_offset<jbyte>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *byte_at_addr(which);\n@@ -99,2 +98,1 @@\n-  ptrdiff_t offset = element_offset<jbyte>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *byte_at_addr(which) = contents;\n@@ -105,2 +103,1 @@\n-  ptrdiff_t offset = element_offset<jboolean>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *bool_at_addr(which);\n@@ -110,2 +107,1 @@\n-  ptrdiff_t offset = element_offset<jboolean>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, jboolean(contents & 1));\n+  *bool_at_addr(which) = jboolean(contents & 1);\n@@ -116,2 +112,1 @@\n-  ptrdiff_t offset = element_offset<jchar>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *char_at_addr(which);\n@@ -121,2 +116,1 @@\n-  ptrdiff_t offset = element_offset<jchar>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *char_at_addr(which) = contents;\n@@ -127,2 +121,1 @@\n-  ptrdiff_t offset = element_offset<jint>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *int_at_addr(which);\n@@ -132,2 +125,1 @@\n-  ptrdiff_t offset = element_offset<jint>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *int_at_addr(which) = contents;\n@@ -138,2 +130,1 @@\n-  ptrdiff_t offset = element_offset<jshort>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *short_at_addr(which);\n@@ -143,2 +134,1 @@\n-  ptrdiff_t offset = element_offset<jshort>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *short_at_addr(which) = contents;\n@@ -149,2 +139,1 @@\n-  ptrdiff_t offset = element_offset<jushort>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *ushort_at_addr(which);\n@@ -152,0 +141,1 @@\n+\n@@ -154,2 +144,1 @@\n-  ptrdiff_t offset = element_offset<jushort>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *ushort_at_addr(which) = contents;\n@@ -160,2 +149,1 @@\n-  ptrdiff_t offset = element_offset<jlong>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *long_at_addr(which);\n@@ -166,1 +154,1 @@\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *long_at_addr(which) = contents;\n@@ -171,2 +159,1 @@\n-  ptrdiff_t offset = element_offset<jfloat>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *float_at_addr(which);\n@@ -174,0 +161,1 @@\n+\n@@ -176,2 +164,1 @@\n-  ptrdiff_t offset = element_offset<jfloat>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *float_at_addr(which) = contents;\n@@ -182,2 +169,1 @@\n-  ptrdiff_t offset = element_offset<jdouble>(which);\n-  return HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *double_at_addr(which);\n@@ -185,0 +171,1 @@\n+\n@@ -187,2 +174,1 @@\n-  ptrdiff_t offset = element_offset<jdouble>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  *double_at_addr(which) = contents;\n@@ -193,2 +179,1 @@\n-  ptrdiff_t offset = element_offset<jbyte>(which);\n-  return HeapAccess<MO_ACQUIRE | IS_ARRAY>::load_at(as_oop(), offset);\n+  return Atomic::load_acquire(byte_at_addr(which));\n@@ -198,2 +183,1 @@\n-  ptrdiff_t offset = element_offset<jbyte>(which);\n-  HeapAccess<MO_RELEASE | IS_ARRAY>::store_at(as_oop(), offset, contents);\n+  Atomic::release_store(byte_at_addr(which), contents);\n@@ -208,2 +192,1 @@\n-  ptrdiff_t offset = element_offset<jlong>(which);\n-  return (Symbol*)(jlong) HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *reinterpret_cast<Symbol**>(long_at_addr(which));\n@@ -211,0 +194,1 @@\n+\n@@ -213,2 +197,1 @@\n-  ptrdiff_t offset = element_offset<jlong>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, (jlong)contents);\n+  *reinterpret_cast<Symbol**>(long_at_addr(which)) = contents;\n@@ -219,2 +202,1 @@\n-  ptrdiff_t offset = element_offset<jint>(which);\n-  return (Symbol*)(jint) HeapAccess<IS_ARRAY>::load_at(as_oop(), offset);\n+  return *reinterpret_cast<Symbol**>(int_at_addr(which));\n@@ -224,2 +206,1 @@\n-  ptrdiff_t offset = element_offset<jint>(which);\n-  HeapAccess<IS_ARRAY>::store_at(as_oop(), offset, (jint)contents);\n+  *reinterpret_cast<Symbol**>(int_at_addr(which)) = contents;\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.inline.hpp","additions":28,"deletions":47,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -221,8 +221,2 @@\n-    if (_obj == NULL) {\n-      GuardUnsafeAccess guard(_thread);\n-      T ret = RawAccess<>::load(addr());\n-      return normalize_for_read(ret);\n-    } else {\n-      T ret = HeapAccess<>::load_at(_obj, _offset);\n-      return normalize_for_read(ret);\n-    }\n+    GuardUnsafeAccess guard(_thread);\n+    return normalize_for_read(*addr());\n@@ -232,6 +226,2 @@\n-    if (_obj == NULL) {\n-      GuardUnsafeAccess guard(_thread);\n-      RawAccess<>::store(addr(), normalize_for_write(x));\n-    } else {\n-      HeapAccess<>::store_at(_obj, _offset, normalize_for_write(x));\n-    }\n+    GuardUnsafeAccess guard(_thread);\n+    *addr() = normalize_for_write(x);\n@@ -242,8 +232,3 @@\n-    if (_obj == NULL) {\n-      GuardUnsafeAccess guard(_thread);\n-      volatile T ret = RawAccess<MO_SEQ_CST>::load(addr());\n-      return normalize_for_read(ret);\n-    } else {\n-      T ret = HeapAccess<MO_SEQ_CST>::load_at(_obj, _offset);\n-      return normalize_for_read(ret);\n-    }\n+    GuardUnsafeAccess guard(_thread);\n+    volatile T ret = Atomic::load_acquire(addr());\n+    return normalize_for_read(ret);\n@@ -253,6 +238,2 @@\n-    if (_obj == NULL) {\n-      GuardUnsafeAccess guard(_thread);\n-      RawAccess<MO_SEQ_CST>::store(addr(), normalize_for_write(x));\n-    } else {\n-      HeapAccess<MO_SEQ_CST>::store_at(_obj, _offset, normalize_for_write(x));\n-    }\n+    GuardUnsafeAccess guard(_thread);\n+    Atomic::release_store_fence(addr(), normalize_for_write(x));\n@@ -748,7 +729,2 @@\n-  if (p == NULL) {\n-    volatile jint* addr = (volatile jint*)index_oop_from_field_offset_long(p, offset);\n-    return RawAccess<>::atomic_cmpxchg(addr, e, x);\n-  } else {\n-    assert_field_offset_sane(p, offset);\n-    return HeapAccess<>::atomic_cmpxchg_at(p, (ptrdiff_t)offset, e, x);\n-  }\n+  volatile jint* addr = (volatile jint*)index_oop_from_field_offset_long(p, offset);\n+  return Atomic::cmpxchg(addr, e, x);\n@@ -759,7 +735,2 @@\n-  if (p == NULL) {\n-    volatile jlong* addr = (volatile jlong*)index_oop_from_field_offset_long(p, offset);\n-    return RawAccess<>::atomic_cmpxchg(addr, e, x);\n-  } else {\n-    assert_field_offset_sane(p, offset);\n-    return HeapAccess<>::atomic_cmpxchg_at(p, (ptrdiff_t)offset, e, x);\n-  }\n+  volatile jlong* addr = (volatile jlong*)index_oop_from_field_offset_long(p, offset);\n+  return Atomic::cmpxchg(addr, e, x);\n@@ -779,7 +750,2 @@\n-  if (p == NULL) {\n-    volatile jint* addr = (volatile jint*)index_oop_from_field_offset_long(p, offset);\n-    return RawAccess<>::atomic_cmpxchg(addr, e, x) == e;\n-  } else {\n-    assert_field_offset_sane(p, offset);\n-    return HeapAccess<>::atomic_cmpxchg_at(p, (ptrdiff_t)offset, e, x) == e;\n-  }\n+  volatile jint* addr = (volatile jint*)index_oop_from_field_offset_long(p, offset);\n+  return Atomic::cmpxchg(addr, e, x) == e;\n@@ -790,7 +756,2 @@\n-  if (p == NULL) {\n-    volatile jlong* addr = (volatile jlong*)index_oop_from_field_offset_long(p, offset);\n-    return RawAccess<>::atomic_cmpxchg(addr, e, x) == e;\n-  } else {\n-    assert_field_offset_sane(p, offset);\n-    return HeapAccess<>::atomic_cmpxchg_at(p, (ptrdiff_t)offset, e, x) == e;\n-  }\n+  volatile jlong* addr = (volatile jlong*)index_oop_from_field_offset_long(p, offset);\n+  return Atomic::cmpxchg(addr, e, x) == e;\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":17,"deletions":56,"binary":false,"changes":73,"status":"modified"}]}