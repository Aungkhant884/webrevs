{"files":[{"patch":"@@ -121,0 +121,3 @@\n+  template<typename T>\n+  inline T* field_addr(int offset) const;\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -216,0 +216,3 @@\n+template<typename T>\n+T*       oopDesc::field_addr(int offset)     const { return reinterpret_cast<T*>(cast_from_oop<intptr_t>(as_oop()) + offset); }\n+\n@@ -228,2 +231,2 @@\n-inline jbyte oopDesc::byte_field(int offset) const                  { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void  oopDesc::byte_field_put(int offset, jbyte value)       { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jbyte oopDesc::byte_field(int offset) const                  { return *field_addr<jbyte>(offset);  }\n+inline void  oopDesc::byte_field_put(int offset, jbyte value)       { *field_addr<jbyte>(offset) = value; }\n@@ -231,2 +234,2 @@\n-inline jchar oopDesc::char_field(int offset) const                  { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void  oopDesc::char_field_put(int offset, jchar value)       { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jchar oopDesc::char_field(int offset) const                  { return *field_addr<jchar>(offset);  }\n+inline void  oopDesc::char_field_put(int offset, jchar value)       { *field_addr<jchar>(offset) = value; }\n@@ -234,6 +237,6 @@\n-inline jboolean oopDesc::bool_field(int offset) const               { return HeapAccess<>::load_at(as_oop(), offset); }\n-inline void     oopDesc::bool_field_put(int offset, jboolean value) { HeapAccess<>::store_at(as_oop(), offset, jboolean(value & 1)); }\n-inline jboolean oopDesc::bool_field_volatile(int offset) const      { return HeapAccess<MO_SEQ_CST>::load_at(as_oop(), offset); }\n-inline void     oopDesc::bool_field_put_volatile(int offset, jboolean value) { HeapAccess<MO_SEQ_CST>::store_at(as_oop(), offset, jboolean(value & 1)); }\n-inline jshort oopDesc::short_field(int offset) const                { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void   oopDesc::short_field_put(int offset, jshort value)    { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jboolean oopDesc::bool_field(int offset) const               { return *field_addr<jboolean>(offset); }\n+inline void     oopDesc::bool_field_put(int offset, jboolean value) { *field_addr<jboolean>(offset) = jboolean(value & 1); }\n+inline jboolean oopDesc::bool_field_volatile(int offset) const      { return Atomic::load_acquire(field_addr<jboolean>(offset)); }\n+inline void     oopDesc::bool_field_put_volatile(int offset, jboolean value) { Atomic::release_store_fence(field_addr<jboolean>(offset), jboolean(value & 1)); }\n+inline jshort oopDesc::short_field(int offset) const                { return *field_addr<jshort>(offset);   }\n+inline void   oopDesc::short_field_put(int offset, jshort value)    { *field_addr<jshort>(offset) = value;  }\n@@ -241,2 +244,2 @@\n-inline jint oopDesc::int_field(int offset) const                    { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void oopDesc::int_field_put(int offset, jint value)          { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jint oopDesc::int_field(int offset) const                    { return *field_addr<jint>(offset);     }\n+inline void oopDesc::int_field_put(int offset, jint value)          { *field_addr<jint>(offset) = value;    }\n@@ -244,2 +247,2 @@\n-inline jlong oopDesc::long_field(int offset) const                  { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void  oopDesc::long_field_put(int offset, jlong value)       { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jlong oopDesc::long_field(int offset) const                  { return *field_addr<jlong>(offset);    }\n+inline void  oopDesc::long_field_put(int offset, jlong value)       { *field_addr<jlong>(offset) = value;   }\n@@ -247,2 +250,2 @@\n-inline jfloat oopDesc::float_field(int offset) const                { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void   oopDesc::float_field_put(int offset, jfloat value)    { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jfloat oopDesc::float_field(int offset) const                { return *field_addr<jfloat>(offset);   }\n+inline void   oopDesc::float_field_put(int offset, jfloat value)    { *field_addr<jfloat>(offset) = value;  }\n@@ -250,2 +253,2 @@\n-inline jdouble oopDesc::double_field(int offset) const              { return HeapAccess<>::load_at(as_oop(), offset);  }\n-inline void    oopDesc::double_field_put(int offset, jdouble value) { HeapAccess<>::store_at(as_oop(), offset, value); }\n+inline jdouble oopDesc::double_field(int offset) const              { return *field_addr<jdouble>(offset);  }\n+inline void    oopDesc::double_field_put(int offset, jdouble value) { *field_addr<jdouble>(offset) = value; }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"}]}