{"files":[{"patch":"@@ -4226,2 +4226,2 @@\n-  nmethodBucket* volatile* vmdeps_addr = (nmethodBucket* volatile*)call_site->field_addr(_vmdependencies_offset);\n-  volatile uint64_t* last_cleanup_addr = (volatile uint64_t*)call_site->field_addr(_last_cleanup_offset);\n+  nmethodBucket* volatile* vmdeps_addr = call_site->field_addr<nmethodBucket* volatile>(_vmdependencies_offset);\n+  volatile uint64_t* last_cleanup_addr = call_site->field_addr<volatile uint64_t>(_last_cleanup_offset);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  return java_string->obj_field_addr<uint8_t>(_flags_offset);\n+  return java_string->field_addr<uint8_t>(_flags_offset);\n@@ -149,1 +149,1 @@\n-  return ref->obj_field_addr<HeapWord>(_referent_offset);\n+  return ref->field_addr<HeapWord>(_referent_offset);\n@@ -165,1 +165,1 @@\n-  return ref->obj_field_addr<HeapWord>(_next_offset);\n+  return ref->field_addr<HeapWord>(_next_offset);\n@@ -181,1 +181,1 @@\n-  return ref->obj_field_addr<HeapWord>(_discovered_offset);\n+  return ref->field_addr<HeapWord>(_discovered_offset);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-      return *base->field_addr<jtypename>(className::_##name##_offset);                                                    \\\n+      return *base->field_addr<jtypename>(className::_##name##_offset);                                                   \\\n@@ -240,1 +240,1 @@\n-      *base->field_addr<jtypename>(className::_##name##_offset) = x;                                                       \\\n+      *base->field_addr<jtypename>(className::_##name##_offset) = x;                                                      \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  T* p         = (T*)obj->obj_field_addr<T>(map->offset());\n+  T* p         = obj->field_addr<T>(map->offset());\n@@ -97,1 +97,1 @@\n-  T* const start = (T*)obj->obj_field_addr<T>(map->offset());\n+  T* const start = obj->field_addr<T>(map->offset());\n@@ -108,1 +108,1 @@\n-  T* p   = (T*)obj->obj_field_addr<T>(map->offset());\n+  T* p   = obj->field_addr<T>(map->offset());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -118,3 +118,0 @@\n-  \/\/ field addresses in oop\n-  inline void* field_addr(int offset) const;\n-\n@@ -124,3 +121,0 @@\n-  \/\/ Need this as public for garbage collection.\n-  template <class T> inline T* obj_field_addr(int offset) const;\n-\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -211,2 +211,0 @@\n-void*    oopDesc::field_addr(int offset)     const { return reinterpret_cast<void*>(cast_from_oop<intptr_t>(as_oop()) + offset); }\n-\n@@ -216,3 +214,0 @@\n-template <class T>\n-T*       oopDesc::obj_field_addr(int offset) const { return (T*) field_addr(offset); }\n-\n@@ -236,2 +231,2 @@\n-inline jboolean oopDesc::bool_field_volatile(int offset) const      { return Atomic::load_acquire(field_addr<jboolean>(offset)); }\n-inline void     oopDesc::bool_field_put_volatile(int offset, jboolean value) { Atomic::release_store_fence(field_addr<jboolean>(offset), jboolean(value & 1)); }\n+inline jboolean oopDesc::bool_field_volatile(int offset) const      { return RawAccess<MO_SEQ_CST>::load(field_addr<jboolean>(offset)); }\n+inline void     oopDesc::bool_field_put_volatile(int offset, jboolean value) { RawAccess<MO_SEQ_CST>::store(field_addr<jboolean>(offset), jboolean(value & 1)); }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -97,1 +96,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -102,1 +100,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -106,1 +103,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -111,1 +107,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -115,1 +110,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -120,1 +114,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -124,1 +117,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -129,1 +121,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -133,1 +124,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -138,1 +128,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -143,1 +132,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -148,1 +136,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -152,2 +139,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n-  ptrdiff_t offset = element_offset<jlong>(which);\n@@ -158,1 +143,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -163,1 +147,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -168,1 +151,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -173,1 +155,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -178,1 +159,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -182,1 +162,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -191,1 +170,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -196,1 +174,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -201,1 +178,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n@@ -205,1 +181,0 @@\n-  assert(is_within_bounds(which), \"index %d out of bounds %d\", which, length());\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.inline.hpp","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-      assert(p->field_addr((jint)byte_offset) == ptr_plus_disp,\n+      assert(p->field_addr<void>((jint)byte_offset) == ptr_plus_disp,\n@@ -233,1 +233,1 @@\n-    volatile T ret = Atomic::load_acquire(addr());\n+    volatile T ret = RawAccess<MO_SEQ_CST>::load(addr());\n@@ -239,1 +239,1 @@\n-    Atomic::release_store_fence(addr(), normalize_for_write(x));\n+    RawAccess<MO_SEQ_CST>::store(addr(), normalize_for_write(x));\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}