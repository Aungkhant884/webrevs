{"files":[{"patch":"@@ -454,1 +454,1 @@\n-            IOUtils.exec(pb);\n+            IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n@@ -470,1 +470,1 @@\n-                IOUtils.exec(pb);\n+                IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n@@ -486,1 +486,1 @@\n-                IOUtils.exec(pb);\n+                IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n@@ -544,1 +544,1 @@\n-            IOUtils.exec(pb);\n+            IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.stream.Collectors;\n@@ -185,1 +184,1 @@\n-                Log.verbose(pb.command(), getOutput(), code);\n+                Log.verbose(pb.command(), getOutput(), code, IOUtils.getPID(p));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Executor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,1 @@\n-        Log.verbose(pb.command(), list, ret);\n+        Log.verbose(pb.command(), list, ret, IOUtils.getPID(p));\n@@ -338,0 +338,11 @@\n+    public static long getPID(Process p) {\n+        try {\n+            return p.pid();\n+        } catch (UnsupportedOperationException ex) {\n+            Log.verbose(ex); \/\/ Just log exception and ignore it. This method\n+                             \/\/ is used for verbose output, so not a problem\n+                             \/\/ if unsupported.\n+            return -1;\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-        Log.verbose(args, List.of(jlinkOut), retVal);\n+        Log.verbose(args, List.of(jlinkOut), retVal, -1);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/JLinkBundlerHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-                List<String> output, int returnCode) {\n+                List<String> output, int returnCode, long pid) {\n@@ -111,1 +111,5 @@\n-                StringBuffer sb = new StringBuffer(\"Command:\\n   \");\n+                StringBuffer sb = new StringBuffer();\n+                sb.append(\"Command [PID: \");\n+                sb.append(pid);\n+                sb.append(\"]:\\n   \");\n+\n@@ -177,2 +181,3 @@\n-    public static void verbose(List<String> strings, List<String> out, int ret) {\n-       instance.get().verbose(strings, out, ret);\n+    public static void verbose(List<String> strings, List<String> out,\n+            int ret, long pid) {\n+       instance.get().verbose(strings, out, ret, pid);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Log.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}