{"files":[{"patch":"@@ -697,1 +697,1 @@\n-            if (!tree.hasUnconditionalPattern) {\n+            if (!tree.hasUnconditionalPattern && !exhaustiveSwitch) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-        return \"\";\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8262891 8268871 8274363 8281100\n+ * @bug 8262891 8268871 8274363 8281100 8294670\n@@ -405,1 +405,1 @@\n-                       };\n+                       }\n@@ -1013,0 +1013,1 @@\n+    @Test\n@@ -1059,0 +1060,113 @@\n+    @Test \/\/JDK-8294670\n+    public void testImplicitDefaultCannotCompleteNormally(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b: return 1;\n+                       }\n+                   }\n+               }\n+               \"\"\");\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b: return 1;\n+                           default: return 1;\n+                       }\n+                   }\n+               }\n+               \"\"\");\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b: break;\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:10:5: compiler.err.missing.ret.stmt\",\n+               \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+               \"- compiler.note.preview.recompile\",\n+               \"1 error\");\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b: return 1;\n+                           default: break;\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:11:5: compiler.err.missing.ret.stmt\",\n+               \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+               \"- compiler.note.preview.recompile\",\n+               \"1 error\");\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b:\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:10:5: compiler.err.missing.ret.stmt\",\n+               \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+               \"- compiler.note.preview.recompile\",\n+               \"1 error\");\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   final class B implements A {}\n+\n+                   int test(A arg) {\n+                       switch (arg) {\n+                           case B b: return 1;\n+                           default:\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:11:5: compiler.err.missing.ret.stmt\",\n+               \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+               \"- compiler.note.preview.recompile\",\n+               \"1 error\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":116,"deletions":2,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -96,1 +96,0 @@\n-        throw new AssertionError(String.valueOf(e));\n","filename":"test\/langtools\/tools\/javac\/switchnull\/SwitchNull.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}