{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,5 +42,0 @@\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/CommandLine.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -227,0 +227,2 @@\n+    public static final String OPTIONS_RESOURCE = \"jdk\/tools\/jlink\/internal\/options\";\n+\n@@ -234,1 +236,2 @@\n-            try (InputStream savedOptions = JlinkTask.class.getModule().getResourceAsStream(\"jdk\/tools\/jlink\/internal\/options\")) {\n+            Module m = JlinkTask.class.getModule();\n+            try (InputStream savedOptions = m.getResourceAsStream(OPTIONS_RESOURCE)) {\n@@ -236,5 +239,5 @@\n-                    List<String> newArgs = new ArrayList<>();\n-                    CommandLine.loadCmdFile(savedOptions, newArgs);\n-                    if (!newArgs.isEmpty()) {\n-                        newArgs.addAll(Arrays.asList(args));\n-                        args = newArgs.toArray(new String[newArgs.size()]);\n+                    List<String> prependArgs = new ArrayList<>();\n+                    CommandLine.loadCmdFile(savedOptions, prependArgs);\n+                    if (!prependArgs.isEmpty()) {\n+                        prependArgs.addAll(Arrays.asList(args));\n+                        args = prependArgs.toArray(new String[prependArgs.size()]);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static jdk.tools.jlink.internal.JlinkTask.OPTIONS_RESOURCE;\n+\n@@ -96,4 +98,4 @@\n-        byte[] savedOptions = argfiles.stream().\n-                        collect(Collectors.joining(\"\\n\")).\n-                        getBytes(StandardCharsets.UTF_8);\n-        out.add(ResourcePoolEntry.create(\"\/jdk.jlink\/jdk\/tools\/jlink\/internal\/options\",\n+        byte[] savedOptions = argfiles.stream()\n+                                      .collect(Collectors.joining(\"\\n\"))\n+                                      .getBytes(StandardCharsets.UTF_8);\n+        out.add(ResourcePoolEntry.create(\"\/jdk.jlink\/\" + OPTIONS_RESOURCE,\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SaveJlinkArgfilesPlugin.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-<filenames> is a ':' (';' on Windows) path of command-line argument files.\n+<filenames> is a ':' (';' on Windows) separated path of command-line argument files.\n@@ -202,1 +202,1 @@\n-\\                            ':' (';' on Windows) path of command-line argument files.\n+\\                            ':' (';' on Windows) separated path of command-line argument files.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.nio.file.Paths;\n@@ -43,1 +42,0 @@\n-import java.util.stream.Stream;\n@@ -81,1 +79,3 @@\n-        oa.shouldNotMatch(\"yzzy\");\n+        oa.shouldNotMatch(\"java.vendor.url.bug = https:\/\/bugs.xyzzy.com\/\");\n+        oa.shouldNotMatch(\"java.vendor.version = XyzzyVM 3.14.15\");\n+        oa.shouldNotMatch(\"foo = xyzzy\");\n@@ -94,2 +94,4 @@\n-        expectNMatchingLines(oa.getStdout(), \"yzzy\", 2);\n-        expectNMatchingLines(oa.getStderr(), \"yzzy\", 3);\n+        oa.stdoutShouldMatch(\" XyzzyVM 3.14.15 \");\n+        oa.stderrShouldMatch(\"java.vendor.url.bug = https:\/\/bugs.xyzzy.com\/\");\n+        oa.stderrShouldMatch(\"java.vendor.version = XyzzyVM 3.14.15\");\n+        oa.stderrShouldMatch(\"foo = xyzzy\");\n@@ -102,15 +104,0 @@\n-\n-    \/**\n-     * Splits {@code input} into lines and ensures that the number of lines containing\n-     * {@code substring} is {@code n}.\n-     *\n-     * @throws AssertionError if the check fails\n-     *\/\n-    private static void expectNMatchingLines(String input, String substring, int n) {\n-        long actual = Stream.of(input.split(\"\\\\R\")).filter(l -> l.contains(substring)).count();\n-        if (actual != n) {\n-            String msg = String.format(\"Expected %d lines containing \\\"%s\\\" in output, got %s%nOutput: %s\",\n-                n, substring, actual, input);\n-            throw new AssertionError(msg);\n-        }\n-    }\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SaveJlinkArgfilesPluginTest.java","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"}]}