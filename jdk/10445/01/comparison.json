{"files":[{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.util.List;\n+\n+\/**\n+ * This file was originally a copy of CommandLine.java in\n+ * com.sun.tools.javac.main.\n+ * It should track changes made to that file.\n+ *\/\n+\n+\/**\n+ * Various utility methods for processing Java tool command line arguments.\n+ *\/\n+public class CommandLine {\n+\n+    static void loadCmdFile(InputStream in, List<String> args)\n+            throws IOException {\n+        try (Reader r = new InputStreamReader(in)) {\n+            Tokenizer t = new Tokenizer(r);\n+            String s;\n+            while ((s = t.nextToken()) != null) {\n+                args.add(s);\n+            }\n+        }\n+    }\n+    public static class Tokenizer {\n+        private final Reader in;\n+        private int ch;\n+\n+        public Tokenizer(Reader in) throws IOException {\n+            this.in = in;\n+            ch = in.read();\n+        }\n+\n+        public String nextToken() throws IOException {\n+            skipWhite();\n+            if (ch == -1) {\n+                return null;\n+            }\n+\n+            StringBuilder sb = new StringBuilder();\n+            char quoteChar = 0;\n+\n+            while (ch != -1) {\n+                switch (ch) {\n+                    case ' ':\n+                    case '\\t':\n+                    case '\\f':\n+                        if (quoteChar == 0) {\n+                            return sb.toString();\n+                        }\n+                        sb.append((char) ch);\n+                        break;\n+\n+                    case '\\n':\n+                    case '\\r':\n+                        return sb.toString();\n+\n+                    case '\\'':\n+                    case '\"':\n+                        if (quoteChar == 0) {\n+                            quoteChar = (char) ch;\n+                        } else if (quoteChar == ch) {\n+                            quoteChar = 0;\n+                        } else {\n+                            sb.append((char) ch);\n+                        }\n+                        break;\n+\n+                    case '\\\\':\n+                        if (quoteChar != 0) {\n+                            ch = in.read();\n+                            switch (ch) {\n+                                case '\\n':\n+                                case '\\r':\n+                                    while (ch == ' ' || ch == '\\n'\n+                                            || ch == '\\r' || ch == '\\t'\n+                                            || ch == '\\f') {\n+                                        ch = in.read();\n+                                    }\n+                                    continue;\n+\n+                                case 'n':\n+                                    ch = '\\n';\n+                                    break;\n+                                case 'r':\n+                                    ch = '\\r';\n+                                    break;\n+                                case 't':\n+                                    ch = '\\t';\n+                                    break;\n+                                case 'f':\n+                                    ch = '\\f';\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        }\n+                        sb.append((char) ch);\n+                        break;\n+\n+                    default:\n+                        sb.append((char) ch);\n+                }\n+\n+                ch = in.read();\n+            }\n+\n+            return sb.toString();\n+        }\n+\n+        void skipWhite() throws IOException {\n+            while (ch != -1) {\n+                switch (ch) {\n+                    case ' ':\n+                    case '\\t':\n+                    case '\\n':\n+                    case '\\r':\n+                    case '\\f':\n+                        break;\n+\n+                    case '#':\n+                        ch = in.read();\n+                        while (ch != '\\n' && ch != '\\r' && ch != -1) {\n+                            ch = in.read();\n+                        }\n+                        break;\n+\n+                    default:\n+                        return;\n+                }\n+\n+                ch = in.read();\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/CommandLine.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import java.io.InputStream;\n@@ -226,0 +227,2 @@\n+    public static final String OPTIONS_RESOURCE = \"jdk\/tools\/jlink\/internal\/options\";\n+\n@@ -233,0 +236,12 @@\n+            Module m = JlinkTask.class.getModule();\n+            try (InputStream savedOptions = m.getResourceAsStream(OPTIONS_RESOURCE)) {\n+                if (savedOptions != null) {\n+                    List<String> prependArgs = new ArrayList<>();\n+                    CommandLine.loadCmdFile(savedOptions, prependArgs);\n+                    if (!prependArgs.isEmpty()) {\n+                        prependArgs.addAll(Arrays.asList(args));\n+                        args = prependArgs.toArray(new String[prependArgs.size()]);\n+                    }\n+                }\n+            }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal.plugins;\n+\n+import static jdk.tools.jlink.internal.JlinkTask.OPTIONS_RESOURCE;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import jdk.tools.jlink.plugin.PluginException;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+import jdk.tools.jlink.plugin.ResourcePoolEntry;\n+\n+\/**\n+ * Saves the arguments in the specified argument files to a resource that's read\n+ * by jlink in the output image. The saved arguments are prepended to the arguments\n+ * specified on the jlink command line.\n+ *\/\n+public final class SaveJlinkArgfilesPlugin extends AbstractPlugin {\n+\n+    public SaveJlinkArgfilesPlugin() {\n+        super(\"save-jlink-argfiles\");\n+    }\n+\n+    private List<String> argfiles = new ArrayList<>();\n+\n+    @Override\n+    public Category getType() {\n+        return Category.ADDER;\n+    }\n+\n+    @Override\n+    public boolean hasArguments() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean hasRawArgument() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, String> config) {\n+        var v = config.get(getName());\n+\n+        if (v == null)\n+            throw new AssertionError();\n+\n+        for (String argfile : v.split(File.pathSeparator)) {\n+            argfiles.add(readArgfile(argfile));\n+        }\n+    }\n+\n+    private static String readArgfile(String argfile) {\n+        try {\n+            return Files.readString(Path.of(argfile));\n+        } catch (IOException e) {\n+            throw new PluginException(\"Argfile \" + argfile + \" is not readable\");\n+        }\n+    }\n+\n+    @Override\n+    public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+        in.transformAndCopy(Function.identity(), out);\n+        byte[] savedOptions = argfiles.stream()\n+                                      .collect(Collectors.joining(\"\\n\"))\n+                                      .getBytes(StandardCharsets.UTF_8);\n+        out.add(ResourcePoolEntry.create(\"\/jdk.jlink\/\" + OPTIONS_RESOURCE,\n+                                         savedOptions));\n+        return out.build();\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SaveJlinkArgfilesPlugin.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -190,0 +190,14 @@\n+save-jlink-argfiles.argument=<filenames>\n+\n+save-jlink-argfiles.description=\\\n+Save the specified argument files that contain the arguments \\n\\\n+to be prepended to the execution of jlink in the output image. \\n\\\n+<filenames> is a ':' (';' on Windows) separated path of command-line argument files.\n+\n+save-jlink-argfiles.usage=\\\n+\\  --save-jlink-argfiles <filenames>\\n\\\n+\\                            Save the specified argument files that contain \\n\\\n+\\                            the arguments to be prepended to the execution of \\n\\\n+\\                            jlink in the output image. <filenames> is a \\n\\\n+\\                            ':' (';' on Windows) separated path of command-line argument files.\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -83,1 +83,2 @@\n-        jdk.tools.jlink.internal.plugins.CDSPlugin;\n+        jdk.tools.jlink.internal.plugins.CDSPlugin,\n+        jdk.tools.jlink.internal.plugins.SaveJlinkArgfilesPlugin;\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test --save-jlink-argfiles plugin\n+ * @library ..\/..\/lib\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.*\n+ * @run main SaveJlinkArgfilesPluginTest\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import tests.Helper;\n+\n+public class SaveJlinkArgfilesPluginTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+\n+        Helper helper = Helper.newHelper();\n+        if (helper == null) {\n+            System.err.println(\"Test not run\");\n+            return;\n+        }\n+\n+        String exe = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \".exe\" : \"\";\n+        Path argfile1 = Path.of(\"argfile1\");\n+        Path argfile2 = Path.of(\"argfile2\");\n+\n+        Files.writeString(argfile1, \"--add-modules jdk.internal.vm.ci --add-options=-Dfoo=xyzzy\");\n+        Files.writeString(argfile2, \"--vendor-version=\\\"XyzzyVM 3.14.15\\\" --vendor-bug-url=https:\/\/bugs.xyzzy.com\/\");\n+\n+        var module = \"base\";\n+        helper.generateDefaultJModule(module);\n+        var image = helper.generateDefaultImage(new String[] {\n+                \"--add-modules\", \"jdk.jlink,jdk.jdeps,jdk.internal.opt,jdk.compiler,java.compiler,jdk.zipfs,jdk.internal.vm.ci\",\n+                \"--keep-packaged-modules\", \"images\/base.image\/jmods\",\n+                \"--save-jlink-argfiles\", argfile1 + File.pathSeparator + argfile2\n+            }, module)\n+            .assertSuccess();\n+        helper.checkImage(image, module, null, null);\n+\n+        Path launcher = image.resolve(\"bin\/java\" + exe);\n+        var oa = ProcessTools.executeProcess(launcher.toString(), \"-XshowSettings:properties\", \"--version\");\n+\n+        \/\/ Check that the primary image creation ignored the saved args\n+        oa.shouldHaveExitValue(0);\n+        oa.shouldNotMatch(\"java.vendor.url.bug = https:\/\/bugs.xyzzy.com\/\");\n+        oa.shouldNotMatch(\"java.vendor.version = XyzzyVM 3.14.15\");\n+        oa.shouldNotMatch(\"foo = xyzzy\");\n+\n+        \/\/ Create a secondary image\n+        Path image2 = Path.of(\"image2\").toAbsolutePath();\n+        launcher = image.resolve(\"bin\/jlink\" + exe);\n+        oa = ProcessTools.executeProcess(launcher.toString(), \"--output\", image2.toString(), \"--add-modules=java.base\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ Ensure the saved `--add-options` and `--vendor-*` options\n+        \/\/ were applied when creating the secondary image.\n+        launcher = image2.resolve(Path.of(\"bin\", \"java\" + exe));\n+        oa = ProcessTools.executeProcess(launcher.toString(), \"-XshowSettings:properties\", \"--version\");\n+        oa.shouldHaveExitValue(0);\n+        oa.stdoutShouldMatch(\" XyzzyVM 3.14.15 \");\n+        oa.stderrShouldMatch(\"java.vendor.url.bug = https:\/\/bugs.xyzzy.com\/\");\n+        oa.stderrShouldMatch(\"java.vendor.version = XyzzyVM 3.14.15\");\n+        oa.stderrShouldMatch(\"foo = xyzzy\");\n+\n+        \/\/ Ensure the saved `--add-modules` option\n+        \/\/ was applied when creating the secondary image.\n+        oa = ProcessTools.executeProcess(launcher.toString(), \"-d\", \"jdk.internal.vm.ci\");\n+        oa.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SaveJlinkArgfilesPluginTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}