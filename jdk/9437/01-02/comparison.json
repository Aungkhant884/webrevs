{"files":[{"patch":"@@ -47,2 +47,2 @@\n- * <p>\n- * An application cannot create its own instance of this class.\n+ *\n+ * <p>An application cannot create its own instance of this class.\n@@ -51,2 +51,2 @@\n- * <p>\n- * The Java Virtual Machine initiates the <i>shutdown sequence<\/i> in response\n+ *\n+ * <p>The Java Virtual Machine initiates the <i>shutdown sequence<\/i> in response\n@@ -57,1 +57,2 @@\n- * <li>when the {@link #exit Runtime.exit} or {@link System#exit System.exit} method is called; or<\/li>\n+ * <li>when the {@link #exit Runtime.exit} or {@link System#exit System.exit} method is called\n+ * for the first time; or<\/li>\n@@ -62,16 +63,21 @@\n- * <p>At the beginning of the shutdown sequence, the set of registered\n- * {@linkplain #addShutdownHook shutdown hooks} is established atomically. After this point,\n- * registration and de-registration of shutdown hooks with {@link #addShutdownHook addShutdownHook}\n- * and {@link #removeShutdownHook removeShutdownHook} is prohibited. The shutdown hooks are then\n- * started in some unspecified order, and they are allowed to run concurrently. Existing\n- * {@linkplain Thread#isAlive() live} threads and any newly started threads also continue to run\n- * concurrently during the shutdown sequence.\n- * <p>\n- * When all shutdown hooks have completed, the Java Virtual Machine terminates as described\n- * below. If for some reason one of the shutdown hooks does not complete, if for example\n- * {@link #exit exit} is called, this will prevent the shutdown sequence from completing.\n- * In this case other threads (including shutdown hooks) continue to execute and can\n- * terminate the JVM via the {@link #halt halt} method.\n- * <p>\n- * If a shutdown hook is started explicitly by calling its {@link Thread#start} method, it is\n- * unspecified whether the shutdown sequence will wait for it to complete.\n+ * <p>At the beginning of the shutdown sequence, the registered shutdown hooks are\n+ * {@linkplain Thread#start started} in some unspecified order, and they are allowed to run\n+ * concurrently. After this point, registration and de-registration of shutdown hooks with\n+ * {@link #addShutdownHook addShutdownHook} and {@link #removeShutdownHook removeShutdownHook}\n+ * is prohibited.\n+ *\n+ * <p>During the shutdown sequence, threads that were {@linkplain Thread#isAlive() alive}\n+ * at the beginning of the shutdown sequence continue to run. Threads and shutdown hooks running\n+ * during the shutdown sequence are permitted to create and start other threads. These threads\n+ * also run concurrently during the shutdown sequence.\n+ *\n+ * <p>The shutdown sequence finishes when all shutdown hooks have terminated. At this point,\n+ * the Java Virtual Machine terminates as described below.\n+ *\n+ * <p>It is possible that one or more shutdown hooks do not terminate, for example, because\n+ * of an infinite loop. In this case, the shutdown sequence will never finish. Other threads\n+ * and shutdown hooks continue to run and can terminate the JVM via the {@link #halt halt} method.\n+ *\n+ * <p>Prior to the beginning of the shutdown sequence, it is possible for a program to start\n+ * a shutdown hook by calling its {@link Thread#start start} method explicitly. If this occurs, the\n+ * effect on the shutdown sequence is unspecified.\n@@ -80,5 +86,9 @@\n- * <p>\n- * When the JVM terminates, all threads (daemon, non-daemon, and shutdown hooks) are immediately\n- * prevented from executing any further Java code. The threads' current methods do not complete\n- * normally or abruptly. No {@code finally} clause of any method is executed, nor is any uncaught\n- * exception handler.\n+ *\n+ * <p>The JVM terminates when the shutdown sequence finishes or when {@link #halt halt} has\n+ * been called.\n+ *\n+ * <p>When the JVM terminates, all threads are immediately prevented from executing any further\n+ * Java code. This includes shutdown hooks as well as daemon and non-daemon threads. The\n+ * threads' current methods do not complete normally or abruptly; no {@code finally} clause\n+ * of any method is executed, nor is any {@linkplain Thread.UncaughtExceptionHandler\n+ * uncaught exception handler}.\n@@ -129,1 +139,1 @@\n-     * halt the VM with the given status code. All other invocations\n+     * terminate the VM with the given status code. All other invocations\n@@ -133,2 +143,2 @@\n-     * a shutdown hook, it will prevent that shutdown hook from completing.\n-     * Consequently, this will prevent the entire shutdown sequence from completing.\n+     * a shutdown hook, it will prevent that shutdown hook from terminating.\n+     * Consequently, this will prevent the shutdown sequence from finishing.\n@@ -167,1 +177,1 @@\n-     * are started at the beginning of the <a href=\"shutdown\">shutdown sequence<\/a>.\n+     * are started at the beginning of the <a href=\"#shutdown\">shutdown sequence<\/a>.\n@@ -173,2 +183,3 @@\n-     * handler has completed, the shutdown hook is considered to have completed and is not\n-     * treated differently from a hook that has completed normally.\n+     * handler has completed, the shutdown hook is considered to have terminated and is not\n+     * treated differently from a hook that has terminated without having thrown an\n+     * uncaught exception.\n@@ -256,1 +267,1 @@\n-     * Immediately terminates the Java Virtual Machine. <a href=\"#termination\">Termination<\/a>\n+     * Immediately <a href=\"#termination\">terminates<\/a> the Java Virtual Machine. Termination\n@@ -258,2 +269,2 @@\n-     * <a href=\"#shutdown\">shutdown sequence<\/a>, nor does it wait for the completion of the\n-     * shutdown sequence if it is already in progress. This method never returns normally.\n+     * <a href=\"#shutdown\">shutdown sequence<\/a>, nor does it wait for the shutdown sequence\n+     * to finish if it is already in progress. This method never returns normally.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":46,"deletions":35,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -70,1 +69,7 @@\n- * Thread defines the {@link #join() join} method to wait for a thread to terminate.\n+ *\n+ * <p> A thread <i>terminates<\/i> if either its {@code run} method completes normally,\n+ * or if its {@code run} method completes abruptly and the appropriate\n+ * {@linkplain Thread.UncaughtExceptionHandler uncaught exception handler} completes\n+ * normally or abruptly. With no code left to run, the thread has completed execution.\n+ *\n+ * <p> The {@link #join() join} method waits for a thread to terminate.\n@@ -127,3 +132,4 @@\n- * <p> Virtual threads are daemon threads and so do not prevent the Java virtual\n- * machine from terminating. Virtual threads have a fixed {@linkplain #getPriority()\n- * thread priority} that cannot be changed.\n+ * <p> Virtual threads are daemon threads and so do not prevent the\n+ * <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> from beginning.\n+ * Virtual threads have a fixed {@linkplain #getPriority() thread priority}\n+ * that cannot be changed.\n@@ -2287,2 +2293,2 @@\n-     * The Java virtual machine terminates when all started non-daemon threads have\n-     * terminated.\n+     * The <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> begins when all\n+     * started non-daemon threads have terminated.\n@@ -2290,1 +2296,1 @@\n-     * The daemon status of a virtual thread is always {@code true} and cannot be\n+     * <p> The daemon status of a virtual thread is always {@code true} and cannot be\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"}]}