{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import jdk.internal.loader.NativeLibrary;\n@@ -56,1 +55,2 @@\n- * <li>when the number of non-daemon threads drops to zero for the first time;<\/li>\n+ * <li>when the number of {@linkplain Thread#isAlive() live} non-daemon threads drops to zero\n+ * for the first time;<\/li>\n@@ -63,9 +63,6 @@\n- * {@linkplain #addShutdownHook shutdown hooks}\n- * is established atomically. After this point, registration and de-registration\n- * of shutdown hooks with\n- * {@link #addShutdownHook addShutdownHook}\n- * and\n- * {@link #removeShutdownHook removeShutdownHook}\n- * is prohibited. The shutdown hooks are then started in some unspecified order,\n- * and they are allowed to run concurrently. Any already-existing threads and any\n- * newly started threads also continue to run concurrently during the shutdown sequence.\n+ * {@linkplain #addShutdownHook shutdown hooks} is established atomically. After this point,\n+ * registration and de-registration of shutdown hooks with {@link #addShutdownHook addShutdownHook}\n+ * and {@link #removeShutdownHook removeShutdownHook} is prohibited. The shutdown hooks are then\n+ * started in some unspecified order, and they are allowed to run concurrently. Existing\n+ * {@linkplain Thread#isAlive() live} threads and any newly started threads also continue to run\n+ * concurrently during the shutdown sequence.\n@@ -78,0 +75,4 @@\n+ * <p>\n+ * If a shutdown hook is started explicitly by calling its {@link Thread#start} method, it is\n+ * unspecified whether the shutdown sequence will wait for it to complete.\n+ *\n@@ -79,0 +80,1 @@\n+ * <p>\n@@ -80,3 +82,3 @@\n- * prevented from executing any further Java code. The threads' current methods do\n- * not complete normally or abruptly. No {@code finally} clause of any method\n- * is executed, nor is any uncaught exception handler.\n+ * prevented from executing any further Java code. The threads' current methods do not complete\n+ * normally or abruptly. No {@code finally} clause of any method is executed, nor is any uncaught\n+ * exception handler.\n@@ -87,3 +89,3 @@\n- * This function is responsible for initiating the shutdown sequence when the number of\n- * non-daemon threads drops to zero. When the shutdown sequence completes and the JVM\n- * terminates, control is returned to native invocation code.\n+ * This function is responsible for initiating the shutdown sequence when the number of running\n+ * ({@linkplain Thread#isAlive() live}) non-daemon threads first drops to zero. When the shutdown\n+ * sequence completes and the JVM terminates, control is returned to native invocation code.\n@@ -91,2 +93,2 @@\n- * In typical JVM implementations, calling {@link #exit exit} or {@link #halt halt} will\n- * also terminate the OS process hosting the JVM.\n+ * In typical JVM implementations, calling {@link #exit exit} or {@link #halt halt} will also\n+ * terminate the OS process hosting the JVM.\n@@ -120,6 +122,4 @@\n-     * Initiates the <a href=\"#shutdown\">shutdown sequence<\/a> of the Java Virtual\n-     * Machine. This method blocks indefinitely; it never returns or throws an\n-     * exception (that is, it does not complete either normally or abruptly).\n-     * The argument\n-     * serves as a status code; by convention, a nonzero status code indicates\n-     * abnormal termination.\n+     * Initiates the <a href=\"#shutdown\">shutdown sequence<\/a> of the Java Virtual Machine.\n+     * This method blocks indefinitely; it never returns or throws an exception (that is, it\n+     * does not complete either normally or abruptly). The argument serves as a status code;\n+     * by convention, a nonzero status code indicates abnormal termination.\n@@ -166,5 +166,4 @@\n-     * <p> A <i>shutdown hook<\/i> is simply an initialized but unstarted\n-     * thread. Shutdown hooks are started at the beginning of the\n-     * <a href=\"shutdown\">shutdown sequence<\/a>.\n-     * Registration and de-registration of shutdown hooks is disallowed\n-     * once the shutdown sequence has begun.\n+     * <p> A <i>shutdown hook<\/i> is simply an initialized but unstarted thread. Shutdown hooks\n+     * are started at the beginning of the <a href=\"shutdown\">shutdown sequence<\/a>.\n+     * Registration and de-registration of shutdown hooks is disallowed once the shutdown\n+     * sequence has begun.\n@@ -172,5 +171,5 @@\n-     * Uncaught exceptions are handled in shutdown hooks just as in any other thread,\n-     * by invoking the {@link ThreadGroup#uncaughtException uncaughtException}\n-     * method of the thread's {@link ThreadGroup} object. After the uncaught exception\n-     * handler has completed, the shutdown hook is considered to have completed and\n-     * is not treated differently from a hook that has completed normally.\n+     * Uncaught exceptions are handled in shutdown hooks just as in any other thread, as\n+     * specified in {@link Thread.UncaughtExceptionHandler}. After the uncaught exception\n+     * handler has completed, the shutdown hook is considered to have completed and is not\n+     * treated differently from a hook that has completed normally.\n+     *\n@@ -257,2 +256,1 @@\n-     * Immediately terminates the Java Virtual Machine.\n-     * <a href=\"#termination\">Termination<\/a>\n+     * Immediately terminates the Java Virtual Machine. <a href=\"#termination\">Termination<\/a>\n@@ -260,3 +258,2 @@\n-     * <a href=\"#shutdown\">shutdown sequence<\/a>,\n-     * nor does it await its completion if it is already in progress.\n-     * This method never returns normally.\n+     * <a href=\"#shutdown\">shutdown sequence<\/a>, nor does it wait for the completion of the\n+     * shutdown sequence if it is already in progress. This method never returns normally.\n@@ -266,2 +263,2 @@\n-     * any cleanup actions intended to be performed by shutdown hooks, possibly\n-     * leading to data corruption.\n+     * any cleanup actions intended to be performed by shutdown hooks, possibly leading to\n+     * data corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":39,"deletions":42,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -97,5 +97,5 @@\n- * The Java virtual machine terminates when all started non-daemon threads have\n- * terminated. Unstarted non-daemon threads do not prevent the Java virtual machine\n- * from terminating. The Java virtual machine can also be terminated by invoking\n- * the {@linkplain Runtime#exit(int)} method, in which case it will terminate even\n- * if there are non-daemon threads still running.\n+ * The <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> begins when all started\n+ * non-daemon threads have terminated. Unstarted non-daemon threads do not prevent\n+ * the shutdown sequence from commencing. Invoking the {@linkplain Runtime#exit(int)}\n+ * method will start the shutdown sequence regardless of whether non-daemon threads\n+ * are still running.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}