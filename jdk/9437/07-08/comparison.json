{"files":[{"patch":"@@ -63,4 +63,0 @@\n- * <p>In contrast to {@link #exit exit}, the {@link #halt halt} method does not initiate the\n- * shutdown sequence. See the <a href=\"#termination\">Java Virtual Machine Termination<\/a> section\n- * below.\n- *\n@@ -92,0 +88,2 @@\n+ * In contrast to {@link #exit exit}, the {@link #halt halt} method does not initiate the\n+ * shutdown sequence.\n@@ -106,2 +104,2 @@\n- * function to await termination of that JVM. The {@code DestroyJavaVM} function is responsible for\n- * initiating the shutdown sequence when the number of {@linkplain Thread#isAlive() running}\n+ * function to await termination of that JVM. The {@code DestroyJavaVM} function is responsible\n+ * for initiating the shutdown sequence when the number of {@linkplain Thread#isAlive() live}\n@@ -109,4 +107,4 @@\n- * terminates, control is returned to the native code that invoked {@code DestroyJavaVM}.\n- * <p>\n- * This differs from the {@link #exit exit} or {@link #halt halt} methods. These methods typically\n- * terminate the OS process hosting the JVM and do not interact with the JNI Invocation API.\n+ * terminates, control is returned to the native code that invoked {@code DestroyJavaVM}. This\n+ * behavior differs from the {@link #exit exit} or {@link #halt halt} methods. These methods\n+ * typically terminate the OS process hosting the JVM and do not interact with the JNI Invocation\n+ * API.\n@@ -200,2 +198,2 @@\n-     * have registered their own shutdown hooks and therefore may themselves in\n-     * the process of shutting down. Attempts to use other thread-based\n+     * have registered their own shutdown hooks and therefore may themselves be\n+     * in the process of shutting down. Attempts to use other thread-based\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -65,4 +65,4 @@\n- * <p> {@code Thread} defines constructors and a {@link Builder} to create threads\n- * that execute {@link Runnable} tasks. {@linkplain  #start() Starting} a thread\n- * schedules it to execute concurrently with the thread that caused it to start.\n- * The newly started thread invokes the task's {@link Runnable#run() run} method.\n+ * <p> {@code Thread} defines constructors and a {@link Builder} to create threads.\n+ * {@linkplain #start() Starting} a thread schedules it to execute its {@link #run() run}\n+ * method. The newly started thread executes concurrently with the thread that caused\n+ * it to start.\n@@ -70,6 +70,5 @@\n- * <p> A platform thread <i>terminates<\/i> if either its {@code run} method completes\n- * normally, or if its {@code run} method completes abruptly and the appropriate\n- * {@linkplain Thread.UncaughtExceptionHandler uncaught exception handler} completes\n- * normally or abruptly. With no code left to run, the thread has completed execution.\n- * Another thread can call this thread's {@link #join() join} method to wait for this\n- * thread to terminate.\n+ * <p> A thread <i>terminates<\/i> if either its {@code run} method completes normally,\n+ * or if its {@code run} method completes abruptly and the appropriate {@linkplain\n+ * Thread.UncaughtExceptionHandler uncaught exception handler} completes normally or\n+ * abruptly. With no code left to run, the thread has completed execution. The\n+ * {@link #join() join} method can be used to wait for a thread to terminate.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}