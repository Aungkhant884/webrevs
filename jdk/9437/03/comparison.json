{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import jdk.internal.loader.NativeLibrary;\n@@ -48,0 +47,54 @@\n+ *\n+ * <p>An application cannot create its own instance of this class.\n+ *\n+ * <h2><a id=\"shutdown\">Shutdown Sequence<\/a><\/h2>\n+ *\n+ * <p>The Java Virtual Machine initiates the <i>shutdown sequence<\/i> in response\n+ * to one of several events:\n+ * <ol>\n+ * <li>when the number of {@linkplain Thread#isAlive() live} non-daemon threads drops to zero\n+ * for the first time;<\/li>\n+ * <li>when the {@link #exit Runtime.exit} or {@link System#exit System.exit} method is called\n+ * for the first time; or<\/li>\n+ * <li>when some external event occurs, such as an interrupt or a signal is received from\n+ * the operating system.<\/li>\n+ * <\/ol>\n+ *\n+ * <p>At the beginning of the shutdown sequence, the registered shutdown hooks are\n+ * {@linkplain Thread#start started} in some unspecified order. They run concurrently\n+ * with any daemon or non-daemon threads that were {@linkplain Thread#isAlive() alive}\n+ * at the beginning of the shutdown sequence.\n+ *\n+ * <p>After the shutdown sequence has begun, registration and de-registration of shutdown hooks\n+ * with {@link #addShutdownHook addShutdownHook} and {@link #removeShutdownHook removeShutdownHook}\n+ * is prohibited. However, creating and starting new threads is permitted. New threads run\n+ * concurrently with the registered shutdown hooks and with any daemon or non-daemon threads\n+ * that are already running.\n+ *\n+ * <p>The shutdown sequence finishes when all shutdown hooks have terminated. At this point,\n+ * the Java Virtual Machine terminates as described below.\n+ *\n+ * <p>It is possible that one or more shutdown hooks do not terminate, for example, because\n+ * of an infinite loop. In this case, the shutdown sequence will never finish. Other threads\n+ * and shutdown hooks continue to run and can terminate the JVM via the {@link #halt halt} method.\n+ *\n+ * <p>Prior to the beginning of the shutdown sequence, it is possible for a program to start\n+ * a shutdown hook by calling its {@link Thread#start start} method explicitly. If this occurs, the\n+ * effect on the shutdown sequence is unspecified.\n+ *\n+ * <h2><a id=\"termination\">Virtual Machine Termination<\/a><\/h2>\n+ *\n+ * <p>The JVM terminates when the shutdown sequence finishes or when {@link #halt halt} is called.\n+ *\n+ * <p>When the JVM terminates, all threads are immediately prevented from executing any further\n+ * Java code. This includes shutdown hooks as well as daemon and non-daemon threads. The\n+ * threads' current methods do not complete normally or abruptly; no {@code finally} clause\n+ * of any method is executed, nor is any {@linkplain Thread.UncaughtExceptionHandler\n+ * uncaught exception handler}.\n+ *\n+ * @implNote\n+ * Conventionally, the native code that has launched the JVM will invoke the JNI function\n+ * <a href=\"{@docRoot}\/..\/specs\/jni\/invocation.html#destroyjavavm\">DestroyJavaVM<\/a>.\n+ * This function is responsible for initiating the shutdown sequence when the number of running\n+ * ({@linkplain Thread#isAlive() live}) non-daemon threads first drops to zero. When the shutdown\n+ * sequence completes and the JVM terminates, control is returned to native invocation code.\n@@ -49,1 +102,2 @@\n- * An application cannot create its own instance of this class.\n+ * In typical JVM implementations, calling {@link #exit exit} or {@link #halt halt} will also\n+ * terminate the OS process hosting the JVM.\n@@ -52,0 +106,1 @@\n+ * @jls     12.8 Program Exit\n@@ -76,9 +131,4 @@\n-     * Terminates the currently running Java virtual machine by initiating its\n-     * shutdown sequence.  This method never returns normally.  The argument\n-     * serves as a status code; by convention, a nonzero status code indicates\n-     * abnormal termination.\n-     *\n-     * <p> All registered {@linkplain #addShutdownHook shutdown hooks}, if any,\n-     * are started in some unspecified order and allowed to run concurrently\n-     * until they finish.  Once this is done the virtual machine\n-     * {@linkplain #halt halts}.\n+     * Initiates the <a href=\"#shutdown\">shutdown sequence<\/a> of the Java Virtual Machine.\n+     * This method blocks indefinitely; it never returns or throws an exception (that is, it\n+     * does not complete either normally or abruptly). The argument serves as a status code;\n+     * by convention, a nonzero status code indicates abnormal termination.\n@@ -89,2 +139,5 @@\n-     * will block indefinitely. If this method is invoked from a shutdown\n-     * hook the system will deadlock.\n+     * simply block indefinitely.\n+     *\n+     * <p> Because this method always blocks indefinitely, if it is invoked from\n+     * a shutdown hook, it will prevent that shutdown hook from terminating.\n+     * Consequently, this will prevent the shutdown sequence from finishing.\n@@ -122,34 +175,14 @@\n-     * <p> The Java virtual machine <i>shuts down<\/i> in response to two kinds\n-     * of events:\n-     *\n-     *   <ul>\n-     *\n-     *   <li> The program <i>exits<\/i> normally, when the last non-daemon\n-     *   thread exits or when the {@link #exit exit} (equivalently,\n-     *   {@link System#exit(int) System.exit}) method is invoked, or\n-     *\n-     *   <li> The virtual machine is <i>terminated<\/i> in response to a\n-     *   user interrupt, such as typing {@code ^C}, or a system-wide event,\n-     *   such as user logoff or system shutdown.\n-     *\n-     *   <\/ul>\n-     *\n-     * <p> A <i>shutdown hook<\/i> is simply an initialized but unstarted\n-     * thread.  When the virtual machine begins its shutdown sequence it will\n-     * start all registered shutdown hooks in some unspecified order and let\n-     * them run concurrently.  When all the hooks have finished it will then\n-     * halt. Note that daemon threads will continue to run during the shutdown\n-     * sequence, as will non-daemon threads if shutdown was initiated by\n-     * invoking the {@link #exit exit} method.\n-     *\n-     * <p> Once the shutdown sequence has begun it can be stopped only by\n-     * invoking the {@link #halt halt} method, which forcibly\n-     * terminates the virtual machine.\n-     *\n-     * <p> Once the shutdown sequence has begun it is impossible to register a\n-     * new shutdown hook or de-register a previously-registered hook.\n-     * Attempting either of these operations will cause an\n-     * {@link IllegalStateException} to be thrown.\n-     *\n-     * <p> Shutdown hooks run at a delicate time in the life cycle of a virtual\n-     * machine and should therefore be coded defensively.  They should, in\n+     * <p> A <i>shutdown hook<\/i> is simply an initialized but unstarted thread. Shutdown hooks\n+     * are started at the beginning of the <a href=\"#shutdown\">shutdown sequence<\/a>.\n+     * Registration and de-registration of shutdown hooks is disallowed once the shutdown\n+     * sequence has begun.\n+     * <p>\n+     * Uncaught exceptions are handled in shutdown hooks just as in any other thread, as\n+     * specified in {@link Thread.UncaughtExceptionHandler}. After the uncaught exception\n+     * handler has completed, the shutdown hook is considered to have terminated and is not\n+     * treated differently from a hook that has terminated without having thrown an\n+     * uncaught exception.\n+     *\n+     * @apiNote\n+     * Shutdown hooks run at a delicate time in the life cycle of a virtual\n+     * machine and should therefore be coded defensively. They should, in\n@@ -157,1 +190,1 @@\n-     * as possible.  They should also not rely blindly upon services that may\n+     * as possible. They should also not rely blindly upon services that may\n@@ -159,1 +192,1 @@\n-     * the process of shutting down.  Attempts to use other thread-based\n+     * the process of shutting down. Attempts to use other thread-based\n@@ -162,3 +195,3 @@\n-     *\n-     * <p> Shutdown hooks should also finish their work quickly.  When a\n-     * program invokes {@link #exit exit} the expectation is\n+     * <p>\n+     * Shutdown hooks should also finish their work quickly.  When a\n+     * program invokes {@link #exit exit}, the expectation is\n@@ -167,2 +200,2 @@\n-     * underlying operating system may only allow a fixed amount of time in\n-     * which to shut down and exit.  It is therefore inadvisable to attempt any\n+     * underlying operating system may only allow a limited amount of time in\n+     * which to shut down and exit. It is therefore inadvisable to attempt any\n@@ -172,18 +205,0 @@\n-     * <p> Uncaught exceptions are handled in shutdown hooks just as in any\n-     * other thread, by invoking the\n-     * {@link ThreadGroup#uncaughtException uncaughtException} method of the\n-     * thread's {@link ThreadGroup} object. The default implementation of this\n-     * method prints the exception's stack trace to {@link System#err} and\n-     * terminates the thread; it does not cause the virtual machine to exit or\n-     * halt.\n-     *\n-     * <p> In rare circumstances the virtual machine may <i>abort<\/i>, that is,\n-     * stop running without shutting down cleanly.  This occurs when the\n-     * virtual machine is terminated externally, for example with the\n-     * {@code SIGKILL} signal on Unix or the {@code TerminateProcess} call on\n-     * Microsoft Windows.  The virtual machine may also abort if a native\n-     * method goes awry by, for example, corrupting internal data structures or\n-     * attempting to access nonexistent memory.  If the virtual machine aborts\n-     * then no guarantee can be made about whether or not any shutdown hooks\n-     * will be run.\n-     *\n@@ -194,3 +209,3 @@\n-     *          If the specified hook has already been registered,\n-     *          or if it can be determined that the hook is already running or\n-     *          has already been run\n+     *          If the same hook (compared using {@code ==}) as the specified hook has\n+     *          already been registered, or if it can be determined that the hook is\n+     *          already running or has already been run\n@@ -199,2 +214,1 @@\n-     *          If the virtual machine is already in the process\n-     *          of shutting down\n+     *          If the shutdown sequence has already begun\n@@ -222,0 +236,3 @@\n+     * Hooks are compared using {@code ==}.\n+     * Registration and de-registration of shutdown hooks is disallowed\n+     * once the shutdown sequence has begun.\n@@ -229,2 +246,1 @@\n-     *          If the virtual machine is already in the process of shutting\n-     *          down\n+     *          If the shutdown sequence has already begun\n@@ -250,8 +266,9 @@\n-     * Forcibly terminates the currently running Java virtual machine.  This\n-     * method never returns normally.\n-     *\n-     * <p> This method should be used with extreme caution.  Unlike the\n-     * {@link #exit exit} method, this method does not cause shutdown\n-     * hooks to be started.  If the shutdown sequence has already been\n-     * initiated then this method does not wait for any running\n-     * shutdown hooks to finish their work.\n+     * Immediately <a href=\"#termination\">terminates<\/a> the Java Virtual Machine. Termination\n+     * is unconditional and immediate. This method does not initiate the\n+     * <a href=\"#shutdown\">shutdown sequence<\/a>, nor does it wait for the shutdown sequence\n+     * to finish if it is already in progress. This method never returns normally.\n+     *\n+     * @apiNote\n+     * This method should be used with extreme caution. Using it may circumvent or disrupt\n+     * any cleanup actions intended to be performed by shutdown hooks, possibly leading to\n+     * data corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":104,"deletions":87,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -1886,1 +1886,2 @@\n-     * Terminates the currently running Java Virtual Machine. The\n+     * Initiates the <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> of the Java Virtual\n+     * Machine. This method always blocks indefinitely. The\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -70,1 +69,7 @@\n- * Thread defines the {@link #join() join} method to wait for a thread to terminate.\n+ *\n+ * <p> A thread <i>terminates<\/i> if either its {@code run} method completes normally,\n+ * or if its {@code run} method completes abruptly and the appropriate\n+ * {@linkplain Thread.UncaughtExceptionHandler uncaught exception handler} completes\n+ * normally or abruptly. With no code left to run, the thread has completed execution.\n+ *\n+ * <p> The {@link #join() join} method waits for a thread to terminate.\n@@ -97,5 +102,5 @@\n- * The Java virtual machine terminates when all started non-daemon threads have\n- * terminated. Unstarted non-daemon threads do not prevent the Java virtual machine\n- * from terminating. The Java virtual machine can also be terminated by invoking\n- * the {@linkplain Runtime#exit(int)} method, in which case it will terminate even\n- * if there are non-daemon threads still running.\n+ * The <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> begins when all started\n+ * non-daemon threads have terminated. Unstarted non-daemon threads do not prevent\n+ * the shutdown sequence from commencing. Invoking the {@linkplain Runtime#exit(int)}\n+ * method will start the shutdown sequence regardless of whether non-daemon threads\n+ * are still running.\n@@ -127,3 +132,4 @@\n- * <p> Virtual threads are daemon threads and so do not prevent the Java virtual\n- * machine from terminating. Virtual threads have a fixed {@linkplain #getPriority()\n- * thread priority} that cannot be changed.\n+ * <p> Virtual threads are daemon threads and so do not prevent the\n+ * <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> from beginning.\n+ * Virtual threads have a fixed {@linkplain #getPriority() thread priority}\n+ * that cannot be changed.\n@@ -2287,2 +2293,2 @@\n-     * The Java virtual machine terminates when all started non-daemon threads have\n-     * terminated.\n+     * The <a href=\"Runtime.html#shutdown\">shutdown sequence<\/a> begins when all\n+     * started non-daemon threads have terminated.\n@@ -2290,1 +2296,1 @@\n-     * The daemon status of a virtual thread is always {@code true} and cannot be\n+     * <p> The daemon status of a virtual thread is always {@code true} and cannot be\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}