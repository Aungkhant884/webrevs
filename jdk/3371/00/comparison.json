{"files":[{"patch":"@@ -5075,2 +5075,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -5086,2 +5085,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -5128,1 +5126,1 @@\n-\/\/    LoadVector  RShiftCntV\n+\/\/    LoadVector  ShiftCntV\n@@ -5135,2 +5133,1 @@\n-\/\/ This case isn't supported by middle-end now. But it's supported by\n-\/\/ panama\/vectorIntrinsics(JEP 338: Vector API).\n+\/\/ This case is used by Vector API(JEP 338).\n@@ -5216,1 +5213,1 @@\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n+  match(Set dst (LShiftVB src (ShiftCntV shift)));\n@@ -5235,1 +5232,1 @@\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n+  match(Set dst (LShiftVB src (ShiftCntV shift)));\n@@ -5255,1 +5252,1 @@\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n+  match(Set dst (RShiftVB src (ShiftCntV shift)));\n@@ -5269,1 +5266,1 @@\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n+  match(Set dst (RShiftVB src (ShiftCntV shift)));\n@@ -5284,1 +5281,1 @@\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n+  match(Set dst (URShiftVB src (ShiftCntV shift)));\n@@ -5303,1 +5300,1 @@\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n+  match(Set dst (URShiftVB src (ShiftCntV shift)));\n@@ -5420,1 +5417,1 @@\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  match(Set dst (LShiftVS src (ShiftCntV shift)));\n@@ -5439,1 +5436,1 @@\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  match(Set dst (LShiftVS src (ShiftCntV shift)));\n@@ -5459,1 +5456,1 @@\n-  match(Set dst (RShiftVS src (RShiftCntV shift)));\n+  match(Set dst (RShiftVS src (ShiftCntV shift)));\n@@ -5473,1 +5470,1 @@\n-  match(Set dst (RShiftVS src (RShiftCntV shift)));\n+  match(Set dst (RShiftVS src (ShiftCntV shift)));\n@@ -5488,1 +5485,1 @@\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  match(Set dst (URShiftVS src (ShiftCntV shift)));\n@@ -5507,1 +5504,1 @@\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  match(Set dst (URShiftVS src (ShiftCntV shift)));\n@@ -5620,1 +5617,1 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n@@ -5633,1 +5630,1 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n@@ -5646,1 +5643,1 @@\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n+  match(Set dst (RShiftVI src (ShiftCntV shift)));\n@@ -5659,1 +5656,1 @@\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n+  match(Set dst (RShiftVI src (ShiftCntV shift)));\n@@ -5672,1 +5669,1 @@\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -5685,1 +5682,1 @@\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -5745,1 +5742,1 @@\n-  match(Set dst (LShiftVL src (LShiftCntV shift)));\n+  match(Set dst (LShiftVL src (ShiftCntV shift)));\n@@ -5758,1 +5755,1 @@\n-  match(Set dst (RShiftVL src (RShiftCntV shift)));\n+  match(Set dst (RShiftVL src (ShiftCntV shift)));\n@@ -5771,1 +5768,1 @@\n-  match(Set dst (URShiftVL src (RShiftCntV shift)));\n+  match(Set dst (URShiftVL src (ShiftCntV shift)));\n@@ -5784,1 +5781,1 @@\n-  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n+  match(Set dst (AddVB dst (RShiftVB src (ShiftCntV shift))));\n@@ -5798,1 +5795,1 @@\n-  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n+  match(Set dst (AddVB dst (RShiftVB src (ShiftCntV shift))));\n@@ -5812,1 +5809,1 @@\n-  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n+  match(Set dst (AddVS dst (RShiftVS src (ShiftCntV shift))));\n@@ -5826,1 +5823,1 @@\n-  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n+  match(Set dst (AddVS dst (RShiftVS src (ShiftCntV shift))));\n@@ -5840,1 +5837,1 @@\n-  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n+  match(Set dst (AddVI dst (RShiftVI src (ShiftCntV shift))));\n@@ -5853,1 +5850,1 @@\n-  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n+  match(Set dst (AddVI dst (RShiftVI src (ShiftCntV shift))));\n@@ -5866,1 +5863,1 @@\n-  match(Set dst (AddVL dst (RShiftVL src (RShiftCntV shift))));\n+  match(Set dst (AddVL dst (RShiftVL src (ShiftCntV shift))));\n@@ -5879,1 +5876,1 @@\n-  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n+  match(Set dst (AddVB dst (URShiftVB src (ShiftCntV shift))));\n@@ -5894,1 +5891,1 @@\n-  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n+  match(Set dst (AddVB dst (URShiftVB src (ShiftCntV shift))));\n@@ -5909,1 +5906,1 @@\n-  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n+  match(Set dst (AddVS dst (URShiftVS src (ShiftCntV shift))));\n@@ -5924,1 +5921,1 @@\n-  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n+  match(Set dst (AddVS dst (URShiftVS src (ShiftCntV shift))));\n@@ -5939,1 +5936,1 @@\n-  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n+  match(Set dst (AddVI dst (URShiftVI src (ShiftCntV shift))));\n@@ -5952,1 +5949,1 @@\n-  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n+  match(Set dst (AddVI dst (URShiftVI src (ShiftCntV shift))));\n@@ -5965,1 +5962,1 @@\n-  match(Set dst (AddVL dst (URShiftVL src (RShiftCntV shift))));\n+  match(Set dst (AddVL dst (URShiftVL src (ShiftCntV shift))));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":39,"deletions":42,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1933,2 +1933,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -2010,1 +2009,1 @@\n-  match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n+  match(Set dst (LShiftV$4 src (ShiftCntV shift)));\n@@ -2044,1 +2043,1 @@\n-  match(Set dst (RShiftV$4 src (RShiftCntV shift)));\n+  match(Set dst (RShiftV$4 src (ShiftCntV shift)));\n@@ -2069,1 +2068,1 @@\n-  match(Set dst (URShiftV$4 src (RShiftCntV shift)));\n+  match(Set dst (URShiftV$4 src (ShiftCntV shift)));\n@@ -2101,1 +2100,1 @@\n-  match(Set dst (AddV$4 dst (URShiftV$4 src (RShiftCntV shift))));\n+  match(Set dst (AddV$4 dst (URShiftV$4 src (ShiftCntV shift))));\n@@ -2125,1 +2124,1 @@\n-  match(Set dst (AddV$4 dst (RShiftV$4 src (RShiftCntV shift))));\n+  match(Set dst (AddV$4 dst (RShiftV$4 src (ShiftCntV shift))));\n@@ -2153,1 +2152,1 @@\n-\/\/    LoadVector  RShiftCntV\n+\/\/    LoadVector  ShiftCntV\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1333,1 +1333,1 @@\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n+  match(Set dst (RShiftVB src (ShiftCntV shift)));\n@@ -1352,1 +1352,1 @@\n-  match(Set dst (RShiftVS src (RShiftCntV shift)));\n+  match(Set dst (RShiftVS src (ShiftCntV shift)));\n@@ -1371,1 +1371,1 @@\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n+  match(Set dst (RShiftVI src (ShiftCntV shift)));\n@@ -1389,1 +1389,1 @@\n-  match(Set dst (RShiftVL src (RShiftCntV shift)));\n+  match(Set dst (RShiftVL src (ShiftCntV shift)));\n@@ -1407,1 +1407,1 @@\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n+  match(Set dst (URShiftVB src (ShiftCntV shift)));\n@@ -1430,1 +1430,1 @@\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  match(Set dst (URShiftVS src (ShiftCntV shift)));\n@@ -1453,1 +1453,1 @@\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -1471,1 +1471,1 @@\n-  match(Set dst (URShiftVL src (RShiftCntV shift)));\n+  match(Set dst (URShiftVL src (ShiftCntV shift)));\n@@ -1489,1 +1489,1 @@\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n+  match(Set dst (LShiftVB src (ShiftCntV shift)));\n@@ -1507,1 +1507,1 @@\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  match(Set dst (LShiftVS src (ShiftCntV shift)));\n@@ -1525,1 +1525,1 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n@@ -1538,1 +1538,1 @@\n-  match(Set dst (LShiftVL src (LShiftCntV shift)));\n+  match(Set dst (LShiftVL src (ShiftCntV shift)));\n@@ -1552,2 +1552,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -1565,2 +1564,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -1577,2 +1575,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -1589,2 +1586,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -806,2 +806,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -828,12 +827,12 @@\n-VSHIFT_IMM_UNPREDICATED(vasrB_imm, RShiftVB,  RShiftCntV, B, 16, sve_asr)\n-VSHIFT_IMM_UNPREDICATED(vasrS_imm, RShiftVS,  RShiftCntV, H,  8, sve_asr)\n-VSHIFT_IMM_UNPREDICATED(vasrI_imm, RShiftVI,  RShiftCntV, S,  4, sve_asr)\n-VSHIFT_IMM_UNPREDICATED(vasrL_imm, RShiftVL,  RShiftCntV, D,  2, sve_asr)\n-VSHIFT_IMM_UNPREDICATED(vlsrB_imm, URShiftVB, RShiftCntV, B, 16, sve_lsr)\n-VSHIFT_IMM_UNPREDICATED(vlsrS_imm, URShiftVS, RShiftCntV, H,  8, sve_lsr)\n-VSHIFT_IMM_UNPREDICATED(vlsrI_imm, URShiftVI, RShiftCntV, S,  4, sve_lsr)\n-VSHIFT_IMM_UNPREDICATED(vlsrL_imm, URShiftVL, RShiftCntV, D,  2, sve_lsr)\n-VSHIFT_IMM_UNPREDICATED(vlslB_imm, LShiftVB,  LShiftCntV, B, 16, sve_lsl)\n-VSHIFT_IMM_UNPREDICATED(vlslS_imm, LShiftVS,  LShiftCntV, H,  8, sve_lsl)\n-VSHIFT_IMM_UNPREDICATED(vlslI_imm, LShiftVI,  LShiftCntV, S,  4, sve_lsl)\n-VSHIFT_IMM_UNPREDICATED(vlslL_imm, LShiftVL,  LShiftCntV, D,  2, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vasrB_imm, RShiftVB,  ShiftCntV, B, 16, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrS_imm, RShiftVS,  ShiftCntV, H,  8, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrI_imm, RShiftVI,  ShiftCntV, S,  4, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrL_imm, RShiftVL,  ShiftCntV, D,  2, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vlsrB_imm, URShiftVB, ShiftCntV, B, 16, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrS_imm, URShiftVS, ShiftCntV, H,  8, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrI_imm, URShiftVI, ShiftCntV, S,  4, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrL_imm, URShiftVL, ShiftCntV, D,  2, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlslB_imm, LShiftVB,  ShiftCntV, B, 16, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslS_imm, LShiftVS,  ShiftCntV, H,  8, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslI_imm, LShiftVI,  ShiftCntV, S,  4, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslL_imm, LShiftVL,  ShiftCntV, D,  2, sve_lsl)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -936,2 +936,1 @@\n-  case Op_LShiftCntV:\n-  case Op_RShiftCntV:\n+  case Op_ShiftCntV:\n@@ -10402,31 +10401,0 @@\n-\/\/ --------------------------------- NEG --------------------------------------\n-\n-instruct vneg8B_reg(vecD dst, vecD src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 8);\n-  effect(DEF dst, USE src);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{ \"VNEG.S8 $dst.D,$src.D\\t! neg packed8B\" %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vnegI($dst$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-instruct vneg16B_reg(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  effect(DEF dst, USE src);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{ \"VNEG.S8 $dst.Q,$src.Q\\t! neg0 packed16B\" %}\n-  ins_encode %{\n-    bool _float = false;\n-    bool quad = true;\n-    __ vnegI($dst$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n@@ -10435,1 +10403,1 @@\n-instruct vslcntD(vecD dst, iRegI cnt) %{\n+instruct vscntD(vecD dst, iRegI cnt) %{\n@@ -10437,1 +10405,1 @@\n-  match(Set dst (LShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -10445,1 +10413,1 @@\n-instruct vslcntX(vecX dst, iRegI cnt) %{\n+instruct vscntX(vecX dst, iRegI cnt) %{\n@@ -10447,1 +10415,1 @@\n-  match(Set dst (LShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -10455,36 +10423,1 @@\n-\/\/ Low bits of vector \"shift\" elements are used, so it\n-\/\/ doesn't matter if we treat it as ints or bytes here.\n-instruct vsrcntD(vecD dst, iRegI cnt) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (RShiftCntV cnt));\n-  size(4*2);\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n-\n-  format %{ \"VDUP.8 $dst.D,$cnt\\n\\t\"\n-            \"VNEG.S8 $dst.D,$dst.D\\t! neg packed8B\" %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vdupI($dst$$FloatRegister, $cnt$$Register,\n-             MacroAssembler::VELEM_SIZE_8, quad);\n-    __ vnegI($dst$$FloatRegister, $dst$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-instruct vsrcntX(vecX dst, iRegI cnt) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (RShiftCntV cnt));\n-  size(4*2);\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n-  format %{ \"VDUP.8 $dst.Q,$cnt\\n\\t\"\n-            \"VNEG.S8 $dst.Q,$dst.Q\\t! neg packed16B\" %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vdupI($dst$$FloatRegister, $cnt$$Register,\n-             MacroAssembler::VELEM_SIZE_8, quad);\n-    __ vnegI($dst$$FloatRegister, $dst$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n+\/\/ ------------------------------ LeftShift -----------------------------------\n@@ -10492,2 +10425,2 @@\n-\/\/ Byte vector logical left\/right shift based on sign\n-instruct vsh8B_reg(vecD dst, vecD src, vecD shift) %{\n+\/\/ Byte vector left shift\n+instruct vsl8B_reg(vecD dst, vecD src, vecD shift) %{\n@@ -10495,1 +10428,1 @@\n-  effect(DEF dst, USE src, USE shift);\n+  match(Set dst (LShiftVB src shift));\n@@ -10499,1 +10432,1 @@\n-    \"VSHL.U8 $dst.D,$src.D,$shift.D\\t! logical left\/right shift packed8B\"\n+    \"VSHL.U8 $dst.D,$src.D,$shift.D\\t! logical left shift packed8B\"\n@@ -10502,1 +10435,0 @@\n-    bool quad = false;\n@@ -10504,1 +10436,1 @@\n-              MacroAssembler::VELEM_SIZE_8, quad);\n+              MacroAssembler::VELEM_SIZE_8, false);\n@@ -10506,1 +10438,2 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -10509,1 +10442,1 @@\n-instruct vsh16B_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsl16B_reg(vecX dst, vecX src, vecX shift) %{\n@@ -10511,1 +10444,1 @@\n-  effect(DEF dst, USE src, USE shift);\n+  match(Set dst (LShiftVB src shift));\n@@ -10515,1 +10448,1 @@\n-    \"VSHL.U8 $dst.Q,$src.Q,$shift.Q\\t! logical left\/right shift packed16B\"\n+    \"VSHL.U8 $dst.Q,$src.Q,$shift.Q\\t! logical left shift packed16B\"\n@@ -10518,1 +10451,0 @@\n-    bool quad = true;\n@@ -10520,1 +10452,1 @@\n-              MacroAssembler::VELEM_SIZE_8, quad);\n+              MacroAssembler::VELEM_SIZE_8, true);\n@@ -10522,1 +10454,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10525,4 +10457,3 @@\n-\/\/ Shorts\/Char vector logical left\/right shift based on sign\n-instruct vsh4S_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsl8B_immI(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVB src (ShiftCntV shift)));\n@@ -10532,1 +10463,1 @@\n-    \"VSHL.U16 $dst.D,$src.D,$shift.D\\t! logical left\/right shift packed4S\"\n+    \"VSHL.I8 $dst.D,$src.D,$shift\\t! logical left shift packed8B\"\n@@ -10536,2 +10467,2 @@\n-    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+    __ vshli($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n+             quad);\n@@ -10542,3 +10473,3 @@\n-instruct vsh8S_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsl16B_immI(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (LShiftVB src (ShiftCntV shift)));\n@@ -10548,1 +10479,1 @@\n-    \"VSHL.U16 $dst.Q,$src.Q,$shift.Q\\t! logical left\/right shift packed8S\"\n+    \"VSHL.I8 $dst.Q,$src.Q,$shift\\t! logical left shift packed16B\"\n@@ -10552,2 +10483,2 @@\n-    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+    __ vshli($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n+             quad);\n@@ -10558,4 +10489,4 @@\n-\/\/ Integers vector logical left\/right shift based on sign\n-instruct vsh2I_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n+\/\/ Shorts\/Chars vector logical left\/right shift\n+instruct vsl4S_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (LShiftVS src shift));\n@@ -10565,1 +10496,1 @@\n-    \"VSHL.U32 $dst.D,$src.D,$shift.D\\t! logical left\/right shift packed2I\"\n+    \"VSHL.U16 $dst.D,$src.D,$shift.D\\t! logical left shift packed4S\"\n@@ -10568,1 +10499,0 @@\n-    bool quad = false;\n@@ -10570,1 +10500,1 @@\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+              MacroAssembler::VELEM_SIZE_16, false);\n@@ -10572,1 +10502,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10575,1 +10505,1 @@\n-instruct vsh4I_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsr4S_reg(vecD dst, vecD src, vecD shift, vecD tmp) %{\n@@ -10577,3 +10507,4 @@\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  match(Set dst (URShiftVS src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -10581,1 +10512,3 @@\n-    \"VSHL.U32 $dst.Q,$src.Q,$shift.Q\\t! logical left\/right shift packed4I\"\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.U16 $dst.D,$src.D,$tmp.D\\t! logical left shift packed4S\"\n@@ -10584,3 +10517,3 @@\n-    bool quad = true;\n-    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, false);\n@@ -10588,1 +10521,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10591,4 +10524,3 @@\n-\/\/ Longs vector logical left\/right shift based on sign\n-instruct vsh2L_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsl8S_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVS src shift));\n@@ -10598,1 +10530,1 @@\n-    \"VSHL.U64 $dst.Q,$src.Q,$shift.Q\\t! logical left\/right shift packed2L\"\n+    \"VSHL.U16 $dst.Q,$src.Q,$shift.Q\\t! logical left shift packed8S\"\n@@ -10601,1 +10533,0 @@\n-    bool quad = true;\n@@ -10603,1 +10534,1 @@\n-              MacroAssembler::VELEM_SIZE_64, quad);\n+              MacroAssembler::VELEM_SIZE_16, true);\n@@ -10605,15 +10536,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ ------------------------------ LeftShift -----------------------------------\n-\n-\/\/ Byte vector left shift\n-instruct vsl8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVB src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh8B_reg(dst, src, shift);\n-  %}\n-%}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10621,8 +10538,0 @@\n-instruct vsl16B_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (LShiftVB src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh16B_reg(dst, src, shift);\n-  %}\n@@ -10631,1 +10540,1 @@\n-instruct vsl8B_immI(vecD dst, vecD src, immI shift) %{\n+instruct vsr8S_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n@@ -10633,19 +10542,4 @@\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.I8 $dst.D,$src.D,$shift\\t! logical left shift packed8B\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshli($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n-             quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-instruct vsl16B_immI(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  match(Set dst (URShiftVS src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -10653,1 +10547,3 @@\n-    \"VSHL.I8 $dst.Q,$src.Q,$shift\\t! logical left shift packed16B\"\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.U16 $dst.Q,$src.Q,$tmp.Q\\t! logical left shift packed8S\"\n@@ -10656,16 +10552,3 @@\n-    bool quad = true;\n-    __ vshli($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n-             quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ Shorts\/Chars vector logical left\/right shift\n-instruct vsl4S_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (LShiftVS src shift));\n-  match(Set dst (URShiftVS src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh4S_reg(dst, src, shift);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, true);\n@@ -10673,0 +10556,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10675,10 +10559,0 @@\n-instruct vsl8S_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVS src shift));\n-  match(Set dst (URShiftVS src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh8S_reg(dst, src, shift);\n-  %}\n-%}\n@@ -10688,1 +10562,1 @@\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  match(Set dst (LShiftVS src (ShiftCntV shift)));\n@@ -10722,0 +10596,15 @@\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.U32 $dst.D,$src.D,$shift.D\\t! logical left shift packed2I\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, false);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsr2I_reg(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2 && VM_Version::has_simd());\n@@ -10723,4 +10612,12 @@\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh2I_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.U32 $dst.D,$src.D,$tmp.D\\t! logical left shift packed2I\"\n+  %}\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, false);\n@@ -10728,0 +10625,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10730,0 +10628,1 @@\n+\n@@ -10733,0 +10632,15 @@\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.U32 $dst.Q,$src.Q,$shift.Q\\t! logical left shift packed4I\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsr4I_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 4 && VM_Version::has_simd());\n@@ -10734,4 +10648,7 @@\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh4I_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.U32 $dst.Q,$src.Q,$tmp.Q\\t! logical left shift packed4I\"\n@@ -10739,0 +10656,6 @@\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, true);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10741,0 +10664,1 @@\n+\n@@ -10743,1 +10667,1 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n@@ -10759,1 +10683,1 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n@@ -10777,0 +10701,15 @@\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.U64 $dst.Q,$src.Q,$shift.Q\\t! logical left shift packed2L\"\n+  %}\n+  ins_encode %{\n+    __ vshlUI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, true);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n+%}\n+\n+instruct vsr2L_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 2);\n@@ -10778,4 +10717,7 @@\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n-  expand %{\n-    vsh2L_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.U64 $dst.Q,$src.Q,$tmp.Q\\t! logical left shift packed2L\"\n@@ -10783,0 +10725,7 @@\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, true);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -10787,1 +10736,1 @@\n-  match(Set dst (LShiftVL src (LShiftCntV shift)));\n+  match(Set dst (LShiftVL src (ShiftCntV shift)));\n@@ -10810,1 +10759,1 @@\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  match(Set dst (URShiftVS src (ShiftCntV shift)));\n@@ -10826,1 +10775,1 @@\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  match(Set dst (URShiftVS src (ShiftCntV shift)));\n@@ -10843,1 +10792,1 @@\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -10859,1 +10808,1 @@\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -10876,1 +10825,1 @@\n-  match(Set dst (URShiftVL src (RShiftCntV shift)));\n+  match(Set dst (URShiftVL src (ShiftCntV shift)));\n@@ -10892,49 +10841,1 @@\n-\/\/ Bytes vector arithmetic left\/right shift based on sign\n-instruct vsha8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.S8 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed8B\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-instruct vsha16B_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.S8 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed16B\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ Shorts vector arithmetic left\/right shift based on sign\n-instruct vsha4S_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.S16 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed4S\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n+\/\/ Byte vector arithmetic right shift\n@@ -10942,1 +10843,1 @@\n-instruct vsha8S_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsra8B_reg(vecD dst, vecD src, vecD shift, vecD tmp) %{\n@@ -10944,36 +10845,4 @@\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.S16 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed8S\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ Integers vector arithmetic left\/right shift based on sign\n-instruct vsha2I_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  format %{\n-    \"VSHL.S32 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed2I\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-instruct vsha4I_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  match(Set dst (RShiftVB src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -10981,1 +10850,3 @@\n-    \"VSHL.S32 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed4I\"\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.S8 $dst.D,$src.D,$tmp.D\\t! arithmetic left shift packed8B\"\n@@ -10984,3 +10855,3 @@\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_8, false);\n@@ -10988,1 +10859,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -10991,6 +10862,6 @@\n-\/\/ Longs vector arithmetic left\/right shift based on sign\n-instruct vsha2L_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+instruct vsrl16B_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (RShiftVB src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -10998,1 +10869,3 @@\n-    \"VSHL.S64 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed2L\"\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\t! neg packed16B\\n\\t\"\n+    \"VSHL.S8 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic left shift packed16B\"\n@@ -11001,26 +10874,3 @@\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_64, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ Byte vector arithmetic right shift\n-\n-instruct vsra8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVB src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha8B_reg(dst, src, shift);\n-  %}\n-%}\n-\n-instruct vsrl16B_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (RShiftVB src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha16B_reg(dst, src, shift);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_8, true);\n@@ -11028,0 +10878,1 @@\n+  ins_pipe(ialu_reg_reg);\n@@ -11063,1 +10914,1 @@\n-instruct vsra4S_reg(vecD dst, vecD src, vecD shift) %{\n+instruct vsra4S_reg(vecD dst, vecD src, vecD shift, vecD tmp) %{\n@@ -11066,4 +10917,7 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha4S_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.S16 $dst.D,$src.D,$tmp.D\\t! arithmetic left shift packed4S\"\n@@ -11071,0 +10925,7 @@\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, false);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -11073,1 +10934,1 @@\n-instruct vsra8S_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsra8S_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n@@ -11076,4 +10937,12 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha8S_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\t! neg packed16B\\n\\t\"\n+    \"VSHL.S16 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic left shift packed8S\"\n+  %}\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, true);\n@@ -11081,0 +10950,2 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -11116,1 +10987,1 @@\n-instruct vsra2I_reg(vecD dst, vecD src, vecD shift) %{\n+instruct vsra2I_reg(vecD dst, vecD src, vecD shift, vecD tmp) %{\n@@ -11119,4 +10990,12 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha2I_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\t! neg packed8B\\n\\t\"\n+    \"VSHL.S32 $dst.D,$src.D,$tmp.D\\t! arithmetic left shift packed2I\"\n+  %}\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, false);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, false);\n@@ -11124,0 +11003,2 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -11126,1 +11007,1 @@\n-instruct vsra4I_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsra4I_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n@@ -11129,4 +11010,12 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha4I_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\t! neg packed16B\\n\\t\"\n+    \"VSHL.S32 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic left shift packed4I\"\n+  %}\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, true);\n@@ -11134,0 +11023,2 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n@@ -11169,1 +11060,1 @@\n-instruct vsra2L_reg(vecX dst, vecX src, vecX shift) %{\n+instruct vsra2L_reg(vecX dst, vecX src, vecX shift, vecX tmp) %{\n@@ -11172,4 +11063,7 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha2L_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"\/\/ Right shift with vector shift count is implemented as left shift by negative shift count\\n\\t\"\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\t! neg packed16B\\n\\t\"\n+    \"VSHL.S64 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic left shift packed2L\"\n@@ -11177,0 +11071,8 @@\n+  ins_encode %{\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister, MacroAssembler::VELEM_SIZE_8, true);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, true);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":265,"deletions":363,"binary":false,"changes":628,"status":"modified"},{"patch":"@@ -5830,2 +5830,1 @@\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n+  match(Set dst (ShiftCntV cnt));\n@@ -6024,3 +6023,3 @@\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  match(Set dst (LShiftVI src (ShiftCntV shift)));\n+  match(Set dst (RShiftVI src (ShiftCntV shift)));\n+  match(Set dst (URShiftVI src (ShiftCntV shift)));\n@@ -6071,2 +6070,2 @@\n-  match(Set dst (LShiftVL src (LShiftCntV shift)));\n-  match(Set dst (URShiftVL src (RShiftCntV shift)));\n+  match(Set dst (LShiftVL src (ShiftCntV shift)));\n+  match(Set dst (URShiftVL src (ShiftCntV shift)));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4188,1 +4188,1 @@\n-    \"LShiftCntV\",\"RShiftCntV\",\n+    \"ShiftCntV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -385,2 +385,1 @@\n-macro(LShiftCntV)\n-macro(RShiftCntV)\n+macro(ShiftCntV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -351,7 +351,1 @@\n-  switch (n->Opcode()) {\n-  case Op_LShiftCntV:\n-  case Op_RShiftCntV:\n-    return true;\n-  default:\n-    return false;\n-  }\n+  return is_vector_shift_count(n->Opcode());\n@@ -562,17 +556,2 @@\n-  \/\/ Match shift count type with shift vector type.\n-  const TypeVect* vt = TypeVect::make(bt, vlen);\n-  switch (opc) {\n-  case Op_LShiftI:\n-  case Op_LShiftL:\n-    return new LShiftCntVNode(cnt, vt);\n-  case Op_RShiftI:\n-  case Op_RShiftL:\n-  case Op_URShiftB:\n-  case Op_URShiftS:\n-  case Op_URShiftI:\n-  case Op_URShiftL:\n-    return new RShiftCntVNode(cnt, vt);\n-  default:\n-    fatal(\"Missed vector creation for '%s'\", NodeClassNames[opc]);\n-    return NULL;\n-  }\n+  assert(is_shift_opcode(opc), \"Missed vector creation for '%s'\", NodeClassNames[opc]);\n+  return new ShiftCntVNode(cnt, TypeVect::make(bt, vlen));\n@@ -604,7 +583,1 @@\n-  switch (opc) {\n-  case Op_RShiftCntV:\n-  case Op_LShiftCntV:\n-    return true;\n-  default:\n-    return false;\n-  }\n+  return opc == Op_ShiftCntV;\n@@ -1164,2 +1137,2 @@\n-  shiftLCnt = phase->transform(new LShiftCntVNode(shiftLCnt, vt));\n-  shiftRCnt = phase->transform(new RShiftCntVNode(shiftRCnt, vt));\n+  shiftLCnt = phase->transform(new ShiftCntVNode(shiftLCnt, vt));\n+  shiftRCnt = phase->transform(new ShiftCntVNode(shiftRCnt, vt));\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":6,"deletions":33,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -628,3 +628,3 @@\n-\/\/------------------------------LShiftCntVNode---------------------------------\n-\/\/ Vector left shift count\n-class LShiftCntVNode : public VectorNode {\n+\/\/------------------------------ShiftCntVNode---------------------------------\n+\/\/ Vector shift count\n+class ShiftCntVNode : public VectorNode {\n@@ -632,9 +632,1 @@\n-  LShiftCntVNode(Node* cnt, const TypeVect* vt) : VectorNode(cnt,vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------RShiftCntVNode---------------------------------\n-\/\/ Vector right shift count\n-class RShiftCntVNode : public VectorNode {\n- public:\n-  RShiftCntVNode(Node* cnt, const TypeVect* vt) : VectorNode(cnt,vt) {}\n+  ShiftCntVNode(Node* cnt, const TypeVect* vt) : VectorNode(cnt,vt) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 8;\n+  private static final int ADD_INIT = Byte.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    byte[] a0 = new byte[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = (byte)(ADD_INIT + i);\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +871,78 @@\n+  static void test_sllc(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << VALUE);\n+    }\n+  }\n+  static void test_sllc_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << (-VALUE));\n+    }\n+  }\n+  static void test_sllc_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << SHIFT);\n+    }\n+  }\n+  static void test_sllc_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << (-SHIFT));\n+    }\n+  }\n+  static void test_sllv(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << b);\n+    }\n+  }\n+\n+  static void test_srlc(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> VALUE);\n+    }\n+  }\n+  static void test_srlc_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> (-VALUE));\n+    }\n+  }\n+  static void test_srlc_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> SHIFT);\n+    }\n+  }\n+  static void test_srlc_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> (-SHIFT));\n+    }\n+  }\n+  static void test_srlv(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> b);\n+    }\n+  }\n+\n+  static void test_srac(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> VALUE);\n+    }\n+  }\n+  static void test_srac_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> (-VALUE));\n+    }\n+  }\n+  static void test_srac_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> SHIFT);\n+    }\n+  }\n+  static void test_srac_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> (-SHIFT));\n+    }\n+  }\n+  static void test_srav(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> b);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestByteVect.java","additions":213,"deletions":1,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 32;\n+  private static final int ADD_INIT = Integer.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    int[] a0 = new int[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = ADD_INIT + i;\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +871,78 @@\n+  static void test_sllc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << VALUE;\n+    }\n+  }\n+  static void test_sllc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-VALUE);\n+    }\n+  }\n+  static void test_sllc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << SHIFT;\n+    }\n+  }\n+  static void test_sllc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-SHIFT);\n+    }\n+  }\n+  static void test_sllv(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << b;\n+    }\n+  }\n+\n+  static void test_srlc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> VALUE;\n+    }\n+  }\n+  static void test_srlc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-VALUE);\n+    }\n+  }\n+  static void test_srlc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> SHIFT;\n+    }\n+  }\n+  static void test_srlc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-SHIFT);\n+    }\n+  }\n+  static void test_srlv(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> b;\n+    }\n+  }\n+\n+  static void test_srac(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> VALUE;\n+    }\n+  }\n+  static void test_srac_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-VALUE);\n+    }\n+  }\n+  static void test_srac_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> SHIFT;\n+    }\n+  }\n+  static void test_srac_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-SHIFT);\n+    }\n+  }\n+  static void test_srav(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> b;\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestIntVect.java","additions":213,"deletions":1,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 64;\n+  private static final long ADD_INIT = Long.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    long[] a0 = new long[ARRLEN];\n@@ -59,0 +63,19 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n+\n@@ -491,0 +514,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = ADD_INIT + i;\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +872,78 @@\n+  static void test_sllc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << VALUE;\n+    }\n+  }\n+  static void test_sllc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-VALUE);\n+    }\n+  }\n+  static void test_sllc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << SHIFT;\n+    }\n+  }\n+  static void test_sllc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-SHIFT);\n+    }\n+  }\n+  static void test_sllv(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << b;\n+    }\n+  }\n+\n+  static void test_srlc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> VALUE;\n+    }\n+  }\n+  static void test_srlc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-VALUE);\n+    }\n+  }\n+  static void test_srlc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> SHIFT;\n+    }\n+  }\n+  static void test_srlc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-SHIFT);\n+    }\n+  }\n+  static void test_srlv(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> b;\n+    }\n+  }\n+\n+  static void test_srac(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> VALUE;\n+    }\n+  }\n+  static void test_srac_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-VALUE);\n+    }\n+  }\n+  static void test_srac_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> SHIFT;\n+    }\n+  }\n+  static void test_srac_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-SHIFT);\n+    }\n+  }\n+  static void test_srav(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> b;\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestLongVect.java","additions":214,"deletions":1,"binary":false,"changes":215,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 16;\n+  private static final int ADD_INIT = Short.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    short[] a0 = new short[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,113 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = (short)(ADD_INIT + i);\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], (short)((short)(ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], (short)((short)(ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], (short)((short)(ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], (short)((short)(ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], (short)((short)(ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], (short)((short)(ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n+\n@@ -737,0 +872,78 @@\n+  static void test_sllc(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << VALUE);\n+    }\n+  }\n+  static void test_sllc_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << (-VALUE));\n+    }\n+  }\n+  static void test_sllc_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << SHIFT);\n+    }\n+  }\n+  static void test_sllc_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << (-SHIFT));\n+    }\n+  }\n+  static void test_sllv(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << b);\n+    }\n+  }\n+\n+  static void test_srlc(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> VALUE);\n+    }\n+  }\n+  static void test_srlc_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> (-VALUE));\n+    }\n+  }\n+  static void test_srlc_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> SHIFT);\n+    }\n+  }\n+  static void test_srlc_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> (-SHIFT));\n+    }\n+  }\n+  static void test_srlv(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> b);\n+    }\n+  }\n+\n+  static void test_srac(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> VALUE);\n+    }\n+  }\n+  static void test_srac_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> (-VALUE));\n+    }\n+  }\n+  static void test_srac_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> SHIFT);\n+    }\n+  }\n+  static void test_srac_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> (-SHIFT));\n+    }\n+  }\n+  static void test_srav(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> b);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestShortVect.java","additions":214,"deletions":1,"binary":false,"changes":215,"status":"modified"}]}