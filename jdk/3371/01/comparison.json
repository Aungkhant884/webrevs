{"files":[{"patch":"@@ -5072,1 +5072,1 @@\n-instruct vshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n+instruct lvshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n@@ -5076,1 +5076,0 @@\n-  match(Set dst (RShiftCntV cnt));\n@@ -5084,1 +5083,1 @@\n-instruct vshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n+instruct lvshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n@@ -5087,1 +5086,0 @@\n-  match(Set dst (RShiftCntV cnt));\n@@ -5095,0 +5093,25 @@\n+instruct rvshiftcnt8B(vecD dst, iRegIorL2I cnt, vecD tmp) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (RShiftCntV cnt));\n+  effect(TEMP tmp);\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector (8B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($tmp$$reg), __ T8B, as_Register($cnt$$reg));\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct rvshiftcnt16B(vecX dst, iRegIorL2I cnt, vecX tmp) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (RShiftCntV cnt));\n+  effect(TEMP tmp);\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector (16B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($tmp$$reg), __ T16B, as_Register($cnt$$reg));\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n@@ -5143,1 +5166,1 @@\n-instruct vsra8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsra8B(vecD dst, vecD src, vecD shift) %{\n@@ -5148,3 +5171,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8B)\" %}\n@@ -5152,2 +5173,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5156,1 +5175,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5161,1 +5180,1 @@\n-instruct vsra16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsra16B(vecX dst, vecX src, vecX shift) %{\n@@ -5165,3 +5184,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -5169,2 +5186,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5173,1 +5188,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5178,1 +5193,1 @@\n-instruct vsrl8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsrl8B(vecD dst, vecD src, vecD shift) %{\n@@ -5183,3 +5198,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8B)\" %}\n@@ -5187,2 +5200,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5191,1 +5202,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5196,1 +5207,1 @@\n-instruct vsrl16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsrl16B(vecX dst, vecX src, vecX shift) %{\n@@ -5200,3 +5211,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -5204,2 +5213,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5208,1 +5215,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5347,1 +5354,1 @@\n-instruct vsra4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsra4S(vecD dst, vecD src, vecD shift) %{\n@@ -5352,3 +5359,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -5356,2 +5361,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5360,1 +5363,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5365,1 +5368,1 @@\n-instruct vsra8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsra8S(vecX dst, vecX src, vecX shift) %{\n@@ -5369,3 +5372,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8H)\" %}\n@@ -5373,2 +5374,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5377,1 +5376,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5382,1 +5381,1 @@\n-instruct vsrl4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsrl4S(vecD dst, vecD src, vecD shift) %{\n@@ -5387,3 +5386,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -5391,2 +5388,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5395,1 +5390,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5400,1 +5395,1 @@\n-instruct vsrl8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsrl8S(vecX dst, vecX src, vecX shift) %{\n@@ -5404,3 +5399,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8H)\" %}\n@@ -5408,2 +5401,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5412,1 +5403,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5550,1 +5541,1 @@\n-instruct vsra2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsra2I(vecD dst, vecD src, vecD shift) %{\n@@ -5554,3 +5545,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -5558,2 +5547,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5562,1 +5549,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5567,1 +5554,1 @@\n-instruct vsra4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsra4I(vecX dst, vecX src, vecX shift) %{\n@@ -5571,3 +5558,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4S)\" %}\n@@ -5575,2 +5560,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5579,1 +5562,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5584,1 +5567,1 @@\n-instruct vsrl2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+instruct vsrl2I(vecD dst, vecD src, vecD shift) %{\n@@ -5588,3 +5571,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -5592,2 +5573,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n@@ -5596,1 +5575,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5601,1 +5580,1 @@\n-instruct vsrl4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsrl4I(vecX dst, vecX src, vecX shift) %{\n@@ -5605,3 +5584,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4S)\" %}\n@@ -5609,2 +5586,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5613,1 +5588,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5709,1 +5684,1 @@\n-instruct vsra2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsra2L(vecX dst, vecX src, vecX shift) %{\n@@ -5713,3 +5688,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2D)\" %}\n@@ -5717,2 +5690,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5721,1 +5692,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -5726,1 +5697,1 @@\n-instruct vsrl2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+instruct vsrl2L(vecX dst, vecX src, vecX shift) %{\n@@ -5730,3 +5701,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2D)\" %}\n@@ -5734,2 +5703,0 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n@@ -5738,1 +5705,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":69,"deletions":102,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -1929,2 +1929,2 @@\n-define(`VSHIFTCNT', `\n-instruct vshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt) %{\n+define(`LVSHIFTCNT', `\n+instruct lvshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt) %{\n@@ -1934,1 +1934,0 @@\n-  match(Set dst (RShiftCntV cnt));\n@@ -1942,2 +1941,19 @@\n-VSHIFTCNT(dup, dup, 8,  B, D)\n-VSHIFTCNT(dup, dup, 16, B, X)\n+LVSHIFTCNT(dup, dup, 8,  B, D)\n+LVSHIFTCNT(dup, dup, 16, B, X)\n+dnl\n+define(`RVSHIFTCNT', `\n+instruct rvshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt, vec$5 tmp) %{\n+  predicate(ifelse($3, 8, n->as_Vector()->length_in_bytes() == 4 ||`\n+            ')n->as_Vector()->length_in_bytes() == $3);\n+  match(Set dst (RShiftCntV cnt));\n+  effect(TEMP tmp);\n+  format %{ \"$1  $dst, $cnt\\t# shift count vector ($3$4)\" %}\n+  ins_encode %{\n+    __ $2(as_FloatRegister($tmp$$reg), __ T$3$4, as_Register($cnt$$reg));\n+    __ negr(as_FloatRegister($dst$$reg), __ T$3$4, as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg`'ifelse($5, D, 64, 128));\n+%}')dnl\n+dnl       $1   $2   $3  $4 $5\n+RVSHIFTCNT(dup, dup, 8,  B, D)\n+RVSHIFTCNT(dup, dup, 16, B, X)\n@@ -1963,2 +1979,2 @@\n-instruct vsra$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+instruct vsra$2$3`'(vec$5 dst, vec$5 src, vec$5 shift) %{\n+  predicate(ifelse($2$3, 8B, n->as_Vector()->length() == 4 ||`\n@@ -1966,3 +1982,3 @@\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (RShiftV$4 src shift));\n+  $2$3, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $2);\n+  match(Set dst (RShiftV$3 src shift));\n@@ -1970,3 +1986,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n+  format %{ \"$1  $dst,$src,$shift\\t# vector ($2$4)\" %}\n@@ -1974,3 +1988,1 @@\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n-            as_FloatRegister($shift$$reg));\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2$4,\n@@ -1978,1 +1990,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -1980,1 +1992,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($5, D, 64, 128));\n@@ -1984,2 +1996,2 @@\n-instruct vsrl$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+instruct vsrl$2$3`'(vec$5 dst, vec$5 src, vec$5 shift) %{\n+  predicate(ifelse($2$3, 8B, n->as_Vector()->length() == 4 ||`\n@@ -1987,3 +1999,3 @@\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (URShiftV$4 src shift));\n+  $2$3, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $2);\n+  match(Set dst (URShiftV$3 src shift));\n@@ -1991,3 +2003,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n+  format %{ \"$1  $dst,$src,$shift\\t# vector ($2$4)\" %}\n@@ -1995,3 +2005,1 @@\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n-            as_FloatRegister($shift$$reg));\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2$4,\n@@ -1999,1 +2007,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($shift$$reg));\n@@ -2001,1 +2009,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($5, D, 64, 128));\n@@ -2168,4 +2176,4 @@\n-VSRA(negr, sshl, 8,  B, B, D)\n-VSRA(negr, sshl, 16, B, B, X)\n-VSRL(negr, ushl, 8,  B, B, D)\n-VSRL(negr, ushl, 16, B, B, X)\n+VSRA(sshl, 8,  B, B, D)\n+VSRA(sshl, 16, B, B, X)\n+VSRL(ushl, 8,  B, B, D)\n+VSRL(ushl, 16, B, B, X)\n@@ -2180,4 +2188,4 @@\n-VSRA(negr, sshl, 4,  S, H, D)\n-VSRA(negr, sshl, 8,  S, H, X)\n-VSRL(negr, ushl, 4,  S, H, D)\n-VSRL(negr, ushl, 8,  S, H, X)\n+VSRA(sshl, 4,  S, H, D)\n+VSRA(sshl, 8,  S, H, X)\n+VSRL(ushl, 4,  S, H, D)\n+VSRL(ushl, 8,  S, H, X)\n@@ -2192,4 +2200,4 @@\n-VSRA(negr, sshl, 2,  I, S, D)\n-VSRA(negr, sshl, 4,  I, S, X)\n-VSRL(negr, ushl, 2,  I, S, D)\n-VSRL(negr, ushl, 4,  I, S, X)\n+VSRA(sshl, 2,  I, S, D)\n+VSRA(sshl, 4,  I, S, X)\n+VSRL(ushl, 2,  I, S, D)\n+VSRL(ushl, 4,  I, S, X)\n@@ -2203,2 +2211,2 @@\n-VSRA(negr, sshl, 2,  L, D, X)\n-VSRL(negr, ushl, 2,  L, D, X)\n+VSRA(sshl, 2,  L, D, X)\n+VSRL(ushl, 2,  L, D, X)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":53,"deletions":45,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 8;\n+  private static final int ADD_INIT = Byte.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    byte[] a0 = new byte[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = (byte)(ADD_INIT + i);\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], (byte)((byte)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +871,78 @@\n+  static void test_sllc(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << VALUE);\n+    }\n+  }\n+  static void test_sllc_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << (-VALUE));\n+    }\n+  }\n+  static void test_sllc_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << SHIFT);\n+    }\n+  }\n+  static void test_sllc_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << (-SHIFT));\n+    }\n+  }\n+  static void test_sllv(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] << b);\n+    }\n+  }\n+\n+  static void test_srlc(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> VALUE);\n+    }\n+  }\n+  static void test_srlc_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> (-VALUE));\n+    }\n+  }\n+  static void test_srlc_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> SHIFT);\n+    }\n+  }\n+  static void test_srlc_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> (-SHIFT));\n+    }\n+  }\n+  static void test_srlv(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >>> b);\n+    }\n+  }\n+\n+  static void test_srac(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> VALUE);\n+    }\n+  }\n+  static void test_srac_n(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> (-VALUE));\n+    }\n+  }\n+  static void test_srac_o(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> SHIFT);\n+    }\n+  }\n+  static void test_srac_on(byte[] a0, byte[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> (-SHIFT));\n+    }\n+  }\n+  static void test_srav(byte[] a0, byte[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (byte)(a1[i] >> b);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestByteVect.java","additions":213,"deletions":1,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 32;\n+  private static final int ADD_INIT = Integer.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    int[] a0 = new int[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = ADD_INIT + i;\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +871,78 @@\n+  static void test_sllc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << VALUE;\n+    }\n+  }\n+  static void test_sllc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-VALUE);\n+    }\n+  }\n+  static void test_sllc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << SHIFT;\n+    }\n+  }\n+  static void test_sllc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-SHIFT);\n+    }\n+  }\n+  static void test_sllv(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << b;\n+    }\n+  }\n+\n+  static void test_srlc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> VALUE;\n+    }\n+  }\n+  static void test_srlc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-VALUE);\n+    }\n+  }\n+  static void test_srlc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> SHIFT;\n+    }\n+  }\n+  static void test_srlc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-SHIFT);\n+    }\n+  }\n+  static void test_srlv(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> b;\n+    }\n+  }\n+\n+  static void test_srac(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> VALUE;\n+    }\n+  }\n+  static void test_srac_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-VALUE);\n+    }\n+  }\n+  static void test_srac_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> SHIFT;\n+    }\n+  }\n+  static void test_srac_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-SHIFT);\n+    }\n+  }\n+  static void test_srav(int[] a0, int[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> b;\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestIntVect.java","additions":213,"deletions":1,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 64;\n+  private static final long ADD_INIT = Long.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    long[] a0 = new long[ARRLEN];\n@@ -59,0 +63,19 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n+\n@@ -491,0 +514,112 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = ADD_INIT + i;\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], ((ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], ((ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], ((ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], ((ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], ((ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], ((ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], ((ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], ((ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], ((ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], ((ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], ((ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], ((ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n@@ -737,0 +872,78 @@\n+  static void test_sllc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << VALUE;\n+    }\n+  }\n+  static void test_sllc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-VALUE);\n+    }\n+  }\n+  static void test_sllc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << SHIFT;\n+    }\n+  }\n+  static void test_sllc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << (-SHIFT);\n+    }\n+  }\n+  static void test_sllv(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] << b;\n+    }\n+  }\n+\n+  static void test_srlc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> VALUE;\n+    }\n+  }\n+  static void test_srlc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-VALUE);\n+    }\n+  }\n+  static void test_srlc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> SHIFT;\n+    }\n+  }\n+  static void test_srlc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> (-SHIFT);\n+    }\n+  }\n+  static void test_srlv(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >>> b;\n+    }\n+  }\n+\n+  static void test_srac(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> VALUE;\n+    }\n+  }\n+  static void test_srac_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-VALUE);\n+    }\n+  }\n+  static void test_srac_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> SHIFT;\n+    }\n+  }\n+  static void test_srac_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> (-SHIFT);\n+    }\n+  }\n+  static void test_srav(long[] a0, long[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = a1[i] >> b;\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestLongVect.java","additions":214,"deletions":1,"binary":false,"changes":215,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+  private static final int SHIFT = 16;\n+  private static final int ADD_INIT = Short.MAX_VALUE - 500;\n+  private static final int VALUE = 7;\n@@ -55,0 +58,1 @@\n+    short[] a0 = new short[ARRLEN];\n@@ -59,0 +63,18 @@\n+      test_sllc(a0, a1);\n+      test_sllc_n(a0, a1);\n+      test_sllc_o(a0, a1);\n+      test_sllc_on(a0, a1);\n+      test_sllv(a0, a1, VALUE);\n+\n+      test_srlc(a0, a1);\n+      test_srlc_n(a0, a1);\n+      test_srlc_o(a0, a1);\n+      test_srlc_on(a0, a1);\n+      test_srlv(a0, a1, VALUE);\n+\n+      test_srac(a0, a1);\n+      test_srac_n(a0, a1);\n+      test_srac_o(a0, a1);\n+      test_srac_on(a0, a1);\n+      test_srav(a0, a1, VALUE);\n+\n@@ -491,0 +513,113 @@\n+      \/\/ Initialize\n+      for (int i = 0; i < ARRLEN; i++) {\n+        a1[i] = (short)(ADD_INIT + i);\n+      }\n+      test_sllc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc: \", i, a0[i], (short)((short)(ADD_INIT + i) << VALUE));\n+      }\n+      test_sllv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv: \", i, a0[i], (short)((short)(ADD_INIT + i) << VALUE));\n+      }\n+\n+      test_srlc(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> VALUE));\n+      }\n+      test_srlv(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> VALUE));\n+      }\n+\n+      test_srac(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac: \", i, a0[i], (short)((short)(ADD_INIT + i) >> VALUE));\n+      }\n+      test_srav(a0, a1, VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav: \", i, a0[i], (short)((short)(ADD_INIT + i) >> VALUE));\n+      }\n+\n+      test_sllc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_n: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-VALUE)));\n+      }\n+      test_sllv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_n: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-VALUE)));\n+      }\n+\n+      test_srlc_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+      test_srlv(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-VALUE)));\n+      }\n+\n+      test_srac_n(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+      test_srav(a0, a1, -VALUE);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_n: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-VALUE)));\n+      }\n+\n+      test_sllc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_o: \", i, a0[i], (short)((short)(ADD_INIT + i) << SHIFT));\n+      }\n+      test_sllv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_o: \", i, a0[i], (short)((short)(ADD_INIT + i) << SHIFT));\n+      }\n+\n+      test_srlc_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> SHIFT));\n+      }\n+      test_srlv(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> SHIFT));\n+      }\n+\n+      test_srac_o(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >> SHIFT));\n+      }\n+      test_srav(a0, a1, SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_o: \", i, a0[i], (short)((short)(ADD_INIT + i) >> SHIFT));\n+      }\n+\n+      test_sllc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllc_on: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+      test_sllv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_sllv_on: \", i, a0[i], (short)((short)(ADD_INIT + i) << (-SHIFT)));\n+      }\n+\n+      test_srlc_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlc_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+      test_srlv(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srlv_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >>> (-SHIFT)));\n+      }\n+\n+      test_srac_on(a0, a1);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srac_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+      test_srav(a0, a1, -SHIFT);\n+      for (int i = 0; i < ARRLEN; i++) {\n+        errn += verify(\"test_srav_on: \", i, a0[i], (short)((short)(ADD_INIT + i) >> (-SHIFT)));\n+      }\n+\n+\n@@ -737,0 +872,78 @@\n+  static void test_sllc(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << VALUE);\n+    }\n+  }\n+  static void test_sllc_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << (-VALUE));\n+    }\n+  }\n+  static void test_sllc_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << SHIFT);\n+    }\n+  }\n+  static void test_sllc_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << (-SHIFT));\n+    }\n+  }\n+  static void test_sllv(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] << b);\n+    }\n+  }\n+\n+  static void test_srlc(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> VALUE);\n+    }\n+  }\n+  static void test_srlc_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> (-VALUE));\n+    }\n+  }\n+  static void test_srlc_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> SHIFT);\n+    }\n+  }\n+  static void test_srlc_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> (-SHIFT));\n+    }\n+  }\n+  static void test_srlv(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >>> b);\n+    }\n+  }\n+\n+  static void test_srac(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> VALUE);\n+    }\n+  }\n+  static void test_srac_n(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> (-VALUE));\n+    }\n+  }\n+  static void test_srac_o(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> SHIFT);\n+    }\n+  }\n+  static void test_srac_on(short[] a0, short[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> (-SHIFT));\n+    }\n+  }\n+  static void test_srav(short[] a0, short[] a1, int b) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (short)(a1[i] >> b);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestShortVect.java","additions":214,"deletions":1,"binary":false,"changes":215,"status":"modified"}]}