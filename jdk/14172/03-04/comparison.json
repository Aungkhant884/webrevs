{"files":[{"patch":"@@ -197,2 +197,2 @@\n-      for (DUIterator i = test_to_check->outs(); test_to_check->has_out(i); i++) {\n-        MachNode* node_out = test_to_check->out(i)->isa_Mach();\n+      for (DUIterator_Fast imax, i = test_to_check->fast_outs(imax); i < imax; i++) {\n+        MachNode* node_out = test_to_check->fast_out(i)->isa_Mach();\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7653,1 +7653,0 @@\n-\n@@ -7680,1 +7679,0 @@\n-\n@@ -7695,1 +7693,0 @@\n-\n@@ -10543,1 +10540,0 @@\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-    else if (!strcmp(ident, \"flag\"))             instr->_flag = flag_parse(instr);\n+    else if (!strcmp(ident, \"flag\"))             instr->_flag      = flag_parse(instr);\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4023,1 +4023,1 @@\n-        fprintf(fp_cpp, \"%s node->add_flag(%s%s\", indent, strncmp(node->_name, prefix, strlen(prefix)) != 0 ? prefix : \"\", node->_name);\n+        fprintf(fp_cpp, \"%s node->add_flag(%s%s\", indent, prefix, node->_name);\n@@ -4026,1 +4026,1 @@\n-        fprintf(fp_cpp, \" | %s%s\", strncmp(node->_name, prefix, strlen(prefix)) != 0 ? prefix : \"\", node->_name);\n+        fprintf(fp_cpp, \" | %s%s\", prefix, node->_name);\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @summary Test that patterns leading to Conv2B are correctly expanded.\n+ * @summary Test that unnessercary test instructions are not present in the final code\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestTestRemovalPeephole.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}