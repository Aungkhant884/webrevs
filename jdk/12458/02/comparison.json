{"files":[{"patch":"@@ -3786,1 +3786,1 @@\n-\/\/ Parse entry point called from JNI_CreateJavaVM\n+static const char* const hotspotrc = \".hotspotrc\";\n@@ -3788,3 +3788,27 @@\n-jint Arguments::parse(const JavaVMInitArgs* initial_cmd_args) {\n-  assert(verify_special_jvm_flags(false), \"deprecated and obsolete flag table inconsistent\");\n-  JVMFlag::check_all_flag_declarations();\n+class PreprocessedArguments final : public CHeapObj<mtArguments> {\n+ public:\n+  PreprocessedArguments() : initial_vm_options_args(\"\"),\n+                            initial_java_tool_options_args(\"env_var='JAVA_TOOL_OPTIONS'\"),\n+                            initial_java_options_args(\"env_var='_JAVA_OPTIONS'\"),\n+                            mod_cmd_args(\"cmd_line_args\"),\n+                            mod_vm_options_args(\"vm_options_args\"),\n+                            mod_java_tool_options_args(\"env_var='JAVA_TOOL_OPTIONS'\"),\n+                            mod_java_options_args(\"env_var='_JAVA_OPTIONS'\") {}\n+\n+  NONCOPYABLE(PreprocessedArguments);\n+\n+  ScopedVMInitArgs initial_vm_options_args;\n+  ScopedVMInitArgs initial_java_tool_options_args;\n+  ScopedVMInitArgs initial_java_options_args;\n+\n+  \/\/ Containers for modified\/expanded options\n+  ScopedVMInitArgs mod_cmd_args;\n+  ScopedVMInitArgs mod_vm_options_args;\n+  ScopedVMInitArgs mod_java_tool_options_args;\n+  ScopedVMInitArgs mod_java_options_args;\n+\n+  \/\/ Pointers to current working set of containers\n+  JavaVMInitArgs* cur_cmd_args = nullptr;\n+  JavaVMInitArgs* cur_vm_options_args = nullptr;\n+  JavaVMInitArgs* cur_java_options_args = nullptr;\n+  JavaVMInitArgs* cur_java_tool_options_args = nullptr;\n@@ -3792,2 +3816,0 @@\n-  \/\/ If flag \"-XX:Flags=flags-file\" is used it will be the first option to be processed.\n-  const char* hotspotrc = \".hotspotrc\";\n@@ -3796,3 +3818,1 @@\n-  ScopedVMInitArgs initial_vm_options_args(\"\");\n-  ScopedVMInitArgs initial_java_tool_options_args(\"env_var='JAVA_TOOL_OPTIONS'\");\n-  ScopedVMInitArgs initial_java_options_args(\"env_var='_JAVA_OPTIONS'\");\n+};\n@@ -3800,5 +3820,1 @@\n-  \/\/ Pointers to current working set of containers\n-  JavaVMInitArgs* cur_cmd_args;\n-  JavaVMInitArgs* cur_vm_options_args;\n-  JavaVMInitArgs* cur_java_options_args;\n-  JavaVMInitArgs* cur_java_tool_options_args;\n+\/\/ Parse entry point called from JNI_CreateJavaVM\n@@ -3806,5 +3822,5 @@\n-  \/\/ Containers for modified\/expanded options\n-  ScopedVMInitArgs mod_cmd_args(\"cmd_line_args\");\n-  ScopedVMInitArgs mod_vm_options_args(\"vm_options_args\");\n-  ScopedVMInitArgs mod_java_tool_options_args(\"env_var='JAVA_TOOL_OPTIONS'\");\n-  ScopedVMInitArgs mod_java_options_args(\"env_var='_JAVA_OPTIONS'\");\n+Arguments::Preprocessed::~Preprocessed() {\n+  if (_impl != nullptr) {\n+    delete _impl;\n+  }\n+}\n@@ -3812,0 +3828,10 @@\n+jint Arguments::preprocess(const JavaVMInitArgs* args, Preprocessed* preproc_args) {\n+  assert(verify_special_jvm_flags(false), \"deprecated and obsolete flag table inconsistent\");\n+  JVMFlag::check_all_flag_declarations();\n+  assert(preproc_args->_impl == nullptr, \"Arguments::Preprocessed used more than once\");\n+\n+  \/\/ If flag \"-XX:Flags=flags-file\" is used it will be the first option to be processed.\n+\n+  PreprocessedArguments* result = new PreprocessedArguments();\n+  \/\/ preproc_args will perform any required cleanup.\n+  preproc_args->_impl = result;\n@@ -3814,1 +3840,1 @@\n-      parse_java_tool_options_environment_variable(&initial_java_tool_options_args);\n+      parse_java_tool_options_environment_variable(&result->initial_java_tool_options_args);\n@@ -3819,1 +3845,1 @@\n-  code = parse_java_options_environment_variable(&initial_java_options_args);\n+  code = parse_java_options_environment_variable(&result->initial_java_options_args);\n@@ -3827,1 +3853,1 @@\n-    code = parse_options_buffer(\"vm options resource\", vmoptions, strlen(vmoptions), &initial_vm_options_args);\n+    code = parse_options_buffer(\"vm options resource\", vmoptions, strlen(vmoptions), &result->initial_vm_options_args);\n@@ -3834,3 +3860,3 @@\n-  code = expand_vm_options_as_needed(initial_java_tool_options_args.get(),\n-                                     &mod_java_tool_options_args,\n-                                     &cur_java_tool_options_args);\n+  code = expand_vm_options_as_needed(result->initial_java_tool_options_args.get(),\n+                                     &result->mod_java_tool_options_args,\n+                                     &result->cur_java_tool_options_args);\n@@ -3841,3 +3867,3 @@\n-  code = expand_vm_options_as_needed(initial_cmd_args,\n-                                     &mod_cmd_args,\n-                                     &cur_cmd_args);\n+  code = expand_vm_options_as_needed(args,\n+                                     &result->mod_cmd_args,\n+                                     &result->cur_cmd_args);\n@@ -3848,3 +3874,3 @@\n-  code = expand_vm_options_as_needed(initial_java_options_args.get(),\n-                                     &mod_java_options_args,\n-                                     &cur_java_options_args);\n+  code = expand_vm_options_as_needed(result->initial_java_options_args.get(),\n+                                     &result->mod_java_options_args,\n+                                     &result->cur_java_options_args);\n@@ -3855,3 +3881,3 @@\n-  code = expand_vm_options_as_needed(initial_vm_options_args.get(),\n-                                     &mod_vm_options_args,\n-                                     &cur_vm_options_args);\n+  code = expand_vm_options_as_needed(result->initial_vm_options_args.get(),\n+                                     &result->mod_vm_options_args,\n+                                     &result->cur_vm_options_args);\n@@ -3863,1 +3889,1 @@\n-  settings_file_specified = (flags_file != nullptr);\n+  result->settings_file_specified = (flags_file != nullptr);\n@@ -3866,3 +3892,3 @@\n-    cur_cmd_args->ignoreUnrecognized = true;\n-    cur_java_tool_options_args->ignoreUnrecognized = true;\n-    cur_java_options_args->ignoreUnrecognized = true;\n+    result->cur_cmd_args->ignoreUnrecognized = true;\n+    result->cur_java_tool_options_args->ignoreUnrecognized = true;\n+    result->cur_java_options_args->ignoreUnrecognized = true;\n@@ -3872,1 +3898,1 @@\n-  if (settings_file_specified) {\n+  if (result->settings_file_specified) {\n@@ -3874,1 +3900,1 @@\n-                               cur_cmd_args->ignoreUnrecognized)) {\n+                               result->cur_cmd_args->ignoreUnrecognized)) {\n@@ -3880,2 +3906,2 @@\n-    if (!process_settings_file(\".hotspotrc\", false,\n-                               cur_cmd_args->ignoreUnrecognized)) {\n+    if (!process_settings_file(hotspotrc, false,\n+                               result->cur_cmd_args->ignoreUnrecognized)) {\n@@ -3887,1 +3913,1 @@\n-      needs_hotspotrc_warning = true;\n+      result->needs_hotspotrc_warning = true;\n@@ -3893,3 +3919,3 @@\n-    print_options(cur_java_tool_options_args);\n-    print_options(cur_cmd_args);\n-    print_options(cur_java_options_args);\n+    print_options(result->cur_java_tool_options_args);\n+    print_options(result->cur_cmd_args);\n+    print_options(result->cur_java_options_args);\n@@ -3898,0 +3924,7 @@\n+  return JNI_OK;\n+}\n+\n+jint Arguments::parse(const Preprocessed& preproc_args) {\n+  const PreprocessedArguments* args = preproc_args._impl;\n+  assert(args != nullptr, \"Arguments::parse called before successful Arguments::preprocess\");\n+\n@@ -3899,4 +3932,4 @@\n-  jint result = parse_vm_init_args(cur_vm_options_args,\n-                                   cur_java_tool_options_args,\n-                                   cur_java_options_args,\n-                                   cur_cmd_args);\n+  jint result = parse_vm_init_args(args->cur_vm_options_args,\n+                                   args->cur_java_tool_options_args,\n+                                   args->cur_java_options_args,\n+                                   args->cur_cmd_args);\n@@ -3910,1 +3943,1 @@\n-  if (needs_hotspotrc_warning) {\n+  if (args->needs_hotspotrc_warning) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":84,"deletions":51,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -235,0 +235,1 @@\n+class PreprocessedArguments;\n@@ -242,0 +243,1 @@\n+\n@@ -272,1 +274,15 @@\n- private:\n+  \/\/ RAII style wrapper representing preprocessed arguments returned from Arguments::preprocess and\n+  \/\/ accepted by Arguments::parse.\n+  class Preprocessed final : public StackObj {\n+   private:\n+    friend class Arguments;\n+\n+    \/\/ Actual implementation defined in source file instead of the header.\n+    PreprocessedArguments* _impl = nullptr;\n+\n+   public:\n+    Preprocessed() = default;\n+\n+    ~Preprocessed();\n+\n+    NONCOPYABLE(Preprocessed);\n@@ -274,0 +290,4 @@\n+    \/\/ Future changes will allow retrieving NativeMemoryTracking and MallocLimit.\n+  };\n+\n+ private:\n@@ -486,2 +506,8 @@\n-  \/\/ Parses the arguments, first phase\n-  static jint parse(const JavaVMInitArgs* args);\n+\n+  \/\/ Preprocess the arguments, placing the results in `preproc_args` when successful. `args` must\n+  \/\/ outlive `preproc_args`.\n+  static jint preprocess(const JavaVMInitArgs* args, Preprocessed* preproc_args);\n+\n+  \/\/ Parses the already preprocessed arguments.\n+  static jint parse(const Preprocessed& args);\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -451,4 +451,13 @@\n-  \/\/ Parse arguments\n-  \/\/ Note: this internally calls os::init_container_support()\n-  jint parse_result = Arguments::parse(args);\n-  if (parse_result != JNI_OK) return parse_result;\n+  {\n+    Arguments::Preprocessed preproc_args;\n+\n+    jint preprocess_result = Arguments::preprocess(args, &preproc_args);\n+    if (preprocess_result != JNI_OK) return preprocess_result;\n+\n+    \/\/ Do not add anything here yet. Future changes will fully separate preprocessing and parsing.\n+\n+    \/\/ Parse arguments\n+    \/\/ Note: this internally calls os::init_container_support()\n+    jint parse_result = Arguments::parse(preproc_args);\n+    if (parse_result != JNI_OK) return parse_result;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}