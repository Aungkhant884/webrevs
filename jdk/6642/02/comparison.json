{"files":[{"patch":"@@ -4351,1 +4351,2 @@\n-                        sym.name == names._super && env.info.constructorArgs)) {\n+                        sym.name == names._super && env.info.constructorArgs &&\n+                        (sitesym.isInterface() || site.tsym == env.enclClass.sym))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8278078\n+ * @summary error: cannot reference super before supertype constructor has been called\n+ * @compile\/fail\/ref=InvalidThisAndSuperInConstructorArgTest.out -XDrawDiagnostics InvalidThisAndSuperInConstructorArgTest.java\n+ *\/\n+public class InvalidThisAndSuperInConstructorArgTest  {\n+\n+    interface InterfaceWithDefault {\n+        default String get() {\n+            return \"\";\n+        }\n+    }\n+\n+    InvalidThisAndSuperInConstructorArgTest(String s) {\n+    }\n+\n+    class InnerClass extends AssertionError implements InterfaceWithDefault {\n+        InnerClass() {\n+            super(InnerClass.super.toString());\n+        }\n+        InnerClass(int i) {\n+            this(InnerClass.super.toString());\n+        }\n+        InnerClass(boolean b) {\n+            super(InnerClass.this.toString());\n+        }\n+        InnerClass(double d) {\n+            this(InnerClass.this.toString());\n+        }\n+        InnerClass(float f) {\n+            super(AssertionError.super.toString());\n+        }\n+        InnerClass(char ch) {\n+            this(AssertionError.super.toString());\n+        }\n+        InnerClass(byte b) {\n+            super(AssertionError.this.toString());\n+        }\n+        InnerClass(Object o) {\n+            this(AssertionError.this.toString());\n+        }\n+        InnerClass(int[] ii) {\n+            this(InterfaceWithDefault.super.get());\n+        }\n+        InnerClass(boolean[] bb) {\n+            super(InterfaceWithDefault.this.get());\n+        }\n+        InnerClass(double[] dd) {\n+            this(InterfaceWithDefault.this.get());\n+        }\n+        InnerClass(float[] ff) {\n+            super(InterfaceWithDefault.super.get());\n+        }\n+        InnerClass(String s) {\n+            super(s);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/8278078\/InvalidThisAndSuperInConstructorArgTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+InvalidThisAndSuperInConstructorArgTest.java:20:29: compiler.err.cant.ref.before.ctor.called: super\n+InvalidThisAndSuperInConstructorArgTest.java:23:28: compiler.err.cant.ref.before.ctor.called: super\n+InvalidThisAndSuperInConstructorArgTest.java:26:29: compiler.err.cant.ref.before.ctor.called: this\n+InvalidThisAndSuperInConstructorArgTest.java:29:28: compiler.err.cant.ref.before.ctor.called: this\n+InvalidThisAndSuperInConstructorArgTest.java:32:33: compiler.err.not.encl.class: java.lang.AssertionError\n+InvalidThisAndSuperInConstructorArgTest.java:35:32: compiler.err.not.encl.class: java.lang.AssertionError\n+InvalidThisAndSuperInConstructorArgTest.java:38:33: compiler.err.not.encl.class: java.lang.AssertionError\n+InvalidThisAndSuperInConstructorArgTest.java:41:32: compiler.err.not.encl.class: java.lang.AssertionError\n+InvalidThisAndSuperInConstructorArgTest.java:44:38: compiler.err.cant.ref.before.ctor.called: super\n+InvalidThisAndSuperInConstructorArgTest.java:47:39: compiler.err.not.encl.class: InvalidThisAndSuperInConstructorArgTest.InterfaceWithDefault\n+InvalidThisAndSuperInConstructorArgTest.java:50:38: compiler.err.not.encl.class: InvalidThisAndSuperInConstructorArgTest.InterfaceWithDefault\n+InvalidThisAndSuperInConstructorArgTest.java:53:39: compiler.err.cant.ref.before.ctor.called: super\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/8278078\/InvalidThisAndSuperInConstructorArgTest.out","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8278078\n+ * @summary error: cannot reference super before supertype constructor has been called\n+ * @compile ValidThisAndSuperInConstructorArgTest.java\n+ * @run main ValidThisAndSuperInConstructorArgTest\n+ *\/\n+public class ValidThisAndSuperInConstructorArgTest  {\n+\n+    static final String SUPER = \"unexpected super call\";\n+    static final String THIS = \"unexpected this call\";\n+\n+    public String get() {\n+        return SUPER;\n+    }\n+\n+    static class StaticSubClass extends ValidThisAndSuperInConstructorArgTest {\n+        @Override\n+        public String get() {\n+            return THIS;\n+        }\n+\n+        class InnerClass extends AssertionError {\n+            InnerClass() {\n+                super(StaticSubClass.super.get());\n+            }\n+            InnerClass(int i) {\n+                this(StaticSubClass.super.get());\n+            }\n+            InnerClass(boolean b) {\n+                super(StaticSubClass.this.get());\n+            }\n+            InnerClass(double d) {\n+                this(StaticSubClass.this.get());\n+            }\n+            InnerClass(String s) {\n+                super(s);\n+            }\n+            void assertThis() {\n+                if (!THIS.equals(getMessage())) throw this;\n+            }\n+            void assertSuper() {\n+                if (!SUPER.equals(getMessage())) throw this;\n+            }\n+        }\n+    }\n+\n+    public static void main(String...args) {\n+        var test = new StaticSubClass();\n+        test.new InnerClass().assertSuper();\n+        test.new InnerClass(1).assertSuper();\n+        test.new InnerClass(true).assertThis();\n+        test.new InnerClass(1.0).assertThis();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/8278078\/ValidThisAndSuperInConstructorArgTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}