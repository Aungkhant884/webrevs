{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.imageio.stream;\n+\n+import java.io.IOException;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import javax.imageio.stream.ImageInputStreamImpl;\n+import javax.imageio.stream.ImageOutputStreamImpl;\n+\n+\/**\n+ * Examine ImageInpuStream operations\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class ImageInputStreamBench {\n+\n+    \/\/ private static final byte[] ARRAY = new byte[8];\n+    private ImageInputStreamImpl imageInputStream;\n+\n+    @Setup\n+    public void createInstants() {\n+        \/\/ Various instants during the same day\n+        imageInputStream = new ImageInputStreamImpl() {\n+            @Override\n+            public int read() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public int read(byte[] b, int off, int len) throws IOException {\n+                \/\/System.arraycopy(ARRAY, 0, b, off, len);\n+                return len;\n+            }\n+        };\n+\n+    }\n+\n+    @Benchmark\n+    public int readInt() throws IOException {\n+        int sum = 0;\n+        for (int i = 0; i < 100; i++) {\n+            sum += imageInputStream.readInt();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public long readLong() throws IOException {\n+        long sum = 0;\n+        for (int i = 0; i < 100; i++) {\n+            sum += imageInputStream.readLong();\n+        }\n+        return sum;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/imageio\/stream\/ImageInputStreamBench.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}