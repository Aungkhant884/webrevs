{"files":[{"patch":"@@ -34,1 +34,1 @@\n- * using {@linkplain ByteOrder#BIG_ENDIAN big endian order} (aka. \"network order\").\n+ * using {@linkplain ByteOrder#LITTLE_ENDIAN little endian order}.\n@@ -39,1 +39,1 @@\n-public final class ByteArray {\n+public final class ByteArrayLittleEndian {\n@@ -41,1 +41,1 @@\n-    private ByteArray() {\n+    private ByteArrayLittleEndian() {\n@@ -44,6 +44,6 @@\n-    private static final VarHandle SHORT = create(short[].class);\n-    private static final VarHandle CHAR = create(char[].class);\n-    private static final VarHandle INT = create(int[].class);\n-    private static final VarHandle FLOAT = create(float[].class);\n-    private static final VarHandle LONG = create(long[].class);\n-    private static final VarHandle DOUBLE = create(double[].class);\n+    private static final VarHandle SHORT = createLittleEndian(short[].class);\n+    private static final VarHandle CHAR = createLittleEndian(char[].class);\n+    private static final VarHandle INT = createLittleEndian(int[].class);\n+    private static final VarHandle FLOAT = createLittleEndian(float[].class);\n+    private static final VarHandle LONG = createLittleEndian(long[].class);\n+    private static final VarHandle DOUBLE = createLittleEndian(double[].class);\n@@ -71,1 +71,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -87,1 +87,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -104,1 +104,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -121,1 +121,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -137,1 +137,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -157,1 +157,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -177,1 +177,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -193,1 +193,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -213,1 +213,1 @@\n-     * using big endian order}.\n+     * using little endian order}.\n@@ -252,1 +252,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -269,1 +269,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -286,1 +286,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -303,1 +303,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -320,1 +320,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -341,1 +341,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -362,1 +362,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -379,1 +379,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -400,1 +400,1 @@\n-     * Sets (writes) the provided {@code value} using big endian order into\n+     * Sets (writes) the provided {@code value} using little endian order into\n@@ -420,2 +420,2 @@\n-    private static VarHandle create(Class<?> viewArrayClass) {\n-        return MethodHandles.byteArrayViewVarHandle(viewArrayClass, ByteOrder.BIG_ENDIAN);\n+    private static VarHandle createLittleEndian(Class<?> viewArrayClass) {\n+        return MethodHandles.byteArrayViewVarHandle(viewArrayClass, ByteOrder.LITTLE_ENDIAN);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ByteArrayLittleEndian.java","additions":29,"deletions":29,"binary":false,"changes":58,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ByteArray.java","status":"copied"},{"patch":"@@ -275,0 +275,2 @@\n+    exports jdk.internal.util to\n+        java.desktop;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.internal.util.ByteArray;\n+import jdk.internal.util.ByteArrayLittleEndian;\n+\n@@ -46,1 +49,1 @@\n-    private Stack<Long> markByteStack = new Stack<>();\n+    private final Stack<Long> markByteStack = new Stack<>();\n@@ -48,1 +51,1 @@\n-    private Stack<Integer> markBitStack = new Stack<>();\n+    private final Stack<Integer> markBitStack = new Stack<>();\n@@ -243,8 +246,3 @@\n-\n-        if (byteOrder == ByteOrder.BIG_ENDIAN) {\n-            return (short)\n-                (((byteBuf[0] & 0xff) << 8) | ((byteBuf[1] & 0xff) << 0));\n-        } else {\n-            return (short)\n-                (((byteBuf[1] & 0xff) << 8) | ((byteBuf[0] & 0xff) << 0));\n-        }\n+        return (byteOrder == ByteOrder.BIG_ENDIAN)\n+                ? ByteArray.getShort(byteBuf, 0)\n+                : ByteArrayLittleEndian.getShort(byteBuf, 0);\n@@ -275,9 +273,3 @@\n-        if (byteOrder == ByteOrder.BIG_ENDIAN) {\n-            return\n-                (((byteBuf[0] & 0xff) << 24) | ((byteBuf[1] & 0xff) << 16) |\n-                 ((byteBuf[2] & 0xff) <<  8) | ((byteBuf[3] & 0xff) <<  0));\n-        } else {\n-            return\n-                (((byteBuf[3] & 0xff) << 24) | ((byteBuf[2] & 0xff) << 16) |\n-                 ((byteBuf[1] & 0xff) <<  8) | ((byteBuf[0] & 0xff) <<  0));\n-        }\n+        return (byteOrder == ByteOrder.BIG_ENDIAN)\n+                ? ByteArray.getInt(byteBuf, 0)\n+                : ByteArrayLittleEndian.getInt(byteBuf, 0);\n@@ -525,3 +517,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                s[off + j] = (short)((b0 << 8) | b1);\n+                s[off + j] = ByteArray.getShort(b, boff);\n@@ -532,3 +522,1 @@\n-                int b0 = b[boff + 1];\n-                int b1 = b[boff] & 0xff;\n-                s[off + j] = (short)((b0 << 8) | b1);\n+                s[off + j] = ByteArrayLittleEndian.getShort(b, boff);\n@@ -544,3 +532,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                c[off + j] = (char)((b0 << 8) | b1);\n+                c[off + j] = ByteArray.getChar(b, boff);\n@@ -551,3 +537,1 @@\n-                int b0 = b[boff + 1];\n-                int b1 = b[boff] & 0xff;\n-                c[off + j] = (char)((b0 << 8) | b1);\n+                c[off + j] = ByteArrayLittleEndian.getChar(b, boff);\n@@ -563,5 +547,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                int b2 = b[boff + 2] & 0xff;\n-                int b3 = b[boff + 3] & 0xff;\n-                i[off + j] = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n+                i[off + j] = ByteArray.getInt(b, boff);\n@@ -572,5 +552,1 @@\n-                int b0 = b[boff + 3];\n-                int b1 = b[boff + 2] & 0xff;\n-                int b2 = b[boff + 1] & 0xff;\n-                int b3 = b[boff] & 0xff;\n-                i[off + j] = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n+                i[off + j] = ByteArrayLittleEndian.getInt(b, boff);\n@@ -586,13 +562,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                int b2 = b[boff + 2] & 0xff;\n-                int b3 = b[boff + 3] & 0xff;\n-                int b4 = b[boff + 4];\n-                int b5 = b[boff + 5] & 0xff;\n-                int b6 = b[boff + 6] & 0xff;\n-                int b7 = b[boff + 7] & 0xff;\n-\n-                int i0 = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                int i1 = (b4 << 24) | (b5 << 16) | (b6 << 8) | b7;\n-\n-                l[off + j] = ((long)i0 << 32) | (i1 & 0xffffffffL);\n+                l[off + j] = ByteArray.getLong(b, boff);\n@@ -603,13 +567,1 @@\n-                int b0 = b[boff + 7];\n-                int b1 = b[boff + 6] & 0xff;\n-                int b2 = b[boff + 5] & 0xff;\n-                int b3 = b[boff + 4] & 0xff;\n-                int b4 = b[boff + 3];\n-                int b5 = b[boff + 2] & 0xff;\n-                int b6 = b[boff + 1] & 0xff;\n-                int b7 = b[boff]     & 0xff;\n-\n-                int i0 = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                int i1 = (b4 << 24) | (b5 << 16) | (b6 << 8) | b7;\n-\n-                l[off + j] = ((long)i0 << 32) | (i1 & 0xffffffffL);\n+                l[off + j] = ByteArrayLittleEndian.getLong(b, boff);\n@@ -625,6 +577,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                int b2 = b[boff + 2] & 0xff;\n-                int b3 = b[boff + 3] & 0xff;\n-                int i = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                f[off + j] = Float.intBitsToFloat(i);\n+                f[off + j] = ByteArray.getFloat(b, boff);\n@@ -635,6 +582,1 @@\n-                int b0 = b[boff + 3];\n-                int b1 = b[boff + 2] & 0xff;\n-                int b2 = b[boff + 1] & 0xff;\n-                int b3 = b[boff + 0] & 0xff;\n-                int i = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                f[off + j] = Float.intBitsToFloat(i);\n+                f[off + j] = ByteArrayLittleEndian.getFloat(b, boff);\n@@ -650,14 +592,1 @@\n-                int b0 = b[boff];\n-                int b1 = b[boff + 1] & 0xff;\n-                int b2 = b[boff + 2] & 0xff;\n-                int b3 = b[boff + 3] & 0xff;\n-                int b4 = b[boff + 4];\n-                int b5 = b[boff + 5] & 0xff;\n-                int b6 = b[boff + 6] & 0xff;\n-                int b7 = b[boff + 7] & 0xff;\n-\n-                int i0 = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                int i1 = (b4 << 24) | (b5 << 16) | (b6 << 8) | b7;\n-                long l = ((long)i0 << 32) | (i1 & 0xffffffffL);\n-\n-                d[off + j] = Double.longBitsToDouble(l);\n+                d[off + j] = ByteArray.getDouble(b, boff);\n@@ -668,14 +597,1 @@\n-                int b0 = b[boff + 7];\n-                int b1 = b[boff + 6] & 0xff;\n-                int b2 = b[boff + 5] & 0xff;\n-                int b3 = b[boff + 4] & 0xff;\n-                int b4 = b[boff + 3];\n-                int b5 = b[boff + 2] & 0xff;\n-                int b6 = b[boff + 1] & 0xff;\n-                int b7 = b[boff] & 0xff;\n-\n-                int i0 = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n-                int i1 = (b4 << 24) | (b5 << 16) | (b6 << 8) | b7;\n-                long l = ((long)i0 << 32) | (i1 & 0xffffffffL);\n-\n-                d[off + j] = Double.longBitsToDouble(l);\n+                d[off + j] = ByteArrayLittleEndian.getDouble(b, boff);\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/ImageInputStreamImpl.java","additions":23,"deletions":107,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.internal.util.ByteArray;\n+import jdk.internal.util.ByteArrayLittleEndian;\n+\n@@ -66,2 +69,1 @@\n-            byteBuf[0] = (byte)(v >>> 8);\n-            byteBuf[1] = (byte)(v >>> 0);\n+            ByteArray.setUnsignedShort(byteBuf, 0, v);\n@@ -69,2 +71,1 @@\n-            byteBuf[0] = (byte)(v >>> 0);\n-            byteBuf[1] = (byte)(v >>> 8);\n+            ByteArrayLittleEndian.setUnsignedShort(byteBuf, 0, v);\n@@ -81,4 +82,1 @@\n-            byteBuf[0] = (byte)(v >>> 24);\n-            byteBuf[1] = (byte)(v >>> 16);\n-            byteBuf[2] = (byte)(v >>>  8);\n-            byteBuf[3] = (byte)(v >>>  0);\n+            ByteArray.setInt(byteBuf, 0, v);\n@@ -86,4 +84,1 @@\n-            byteBuf[0] = (byte)(v >>>  0);\n-            byteBuf[1] = (byte)(v >>>  8);\n-            byteBuf[2] = (byte)(v >>> 16);\n-            byteBuf[3] = (byte)(v >>> 24);\n+            ByteArrayLittleEndian.setInt(byteBuf, 0, v);\n@@ -96,8 +91,1 @@\n-            byteBuf[0] = (byte)(v >>> 56);\n-            byteBuf[1] = (byte)(v >>> 48);\n-            byteBuf[2] = (byte)(v >>> 40);\n-            byteBuf[3] = (byte)(v >>> 32);\n-            byteBuf[4] = (byte)(v >>> 24);\n-            byteBuf[5] = (byte)(v >>> 16);\n-            byteBuf[6] = (byte)(v >>>  8);\n-            byteBuf[7] = (byte)(v >>>  0);\n+            ByteArray.setLong(byteBuf, 0, v);\n@@ -105,8 +93,1 @@\n-            byteBuf[0] = (byte)(v >>>  0);\n-            byteBuf[1] = (byte)(v >>>  8);\n-            byteBuf[2] = (byte)(v >>> 16);\n-            byteBuf[3] = (byte)(v >>> 24);\n-            byteBuf[4] = (byte)(v >>> 32);\n-            byteBuf[5] = (byte)(v >>> 40);\n-            byteBuf[6] = (byte)(v >>> 48);\n-            byteBuf[7] = (byte)(v >>> 56);\n+            ByteArrayLittleEndian.setLong(byteBuf, 0, v);\n@@ -144,3 +125,3 @@\n-                int v = s.charAt(i);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                char v = s.charAt(i);\n+                ByteArray.setChar(b, boff, v);\n+                boff += 2;\n@@ -150,3 +131,3 @@\n-                int v = s.charAt(i);\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n+                char v = s.charAt(i);\n+                ByteArrayLittleEndian.setChar(b, boff, v);\n+                boff += 2;\n@@ -216,2 +197,2 @@\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                ByteArray.setShort(b, boff, v);\n+                boff += 2;\n@@ -222,2 +203,2 @@\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n+                ByteArrayLittleEndian.setShort(b, boff, v);\n+                boff += 2;\n@@ -242,2 +223,2 @@\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                ByteArray.setChar(b, boff, v);\n+                boff += 2;\n@@ -248,2 +229,2 @@\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n+                ByteArrayLittleEndian.setChar(b, boff, v);\n+                boff += 2;\n@@ -268,4 +249,2 @@\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                ByteArray.setInt(b, boff, v);\n+                boff += 4;\n@@ -276,4 +255,2 @@\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 24);\n+                ByteArrayLittleEndian.setInt(b, boff, v);\n+                boff += 4;\n@@ -298,8 +275,2 @@\n-                b[boff++] = (byte)(v >>> 56);\n-                b[boff++] = (byte)(v >>> 48);\n-                b[boff++] = (byte)(v >>> 40);\n-                b[boff++] = (byte)(v >>> 32);\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                ByteArray.setLong(b, boff, v);\n+                boff += 8;\n@@ -310,8 +281,2 @@\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 32);\n-                b[boff++] = (byte)(v >>> 40);\n-                b[boff++] = (byte)(v >>> 48);\n-                b[boff++] = (byte)(v >>> 56);\n+                ByteArrayLittleEndian.setLong(b, boff, v);\n+                boff += 8;\n@@ -335,5 +300,3 @@\n-                int v = Float.floatToIntBits(f[off + i]);\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                float v = f[off + i];\n+                ByteArray.setFloat(b, boff, v);\n+                boff += 4;\n@@ -343,5 +306,3 @@\n-                int v = Float.floatToIntBits(f[off + i]);\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 24);\n+                float v = f[off + i];\n+                ByteArrayLittleEndian.setFloat(b, boff, v);\n+                boff += 4;\n@@ -365,9 +326,3 @@\n-                long v = Double.doubleToLongBits(d[off + i]);\n-                b[boff++] = (byte)(v >>> 56);\n-                b[boff++] = (byte)(v >>> 48);\n-                b[boff++] = (byte)(v >>> 40);\n-                b[boff++] = (byte)(v >>> 32);\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 0);\n+                double v = d[off + i];\n+                ByteArray.setDouble(b, boff, v);\n+                boff += 8;\n@@ -377,9 +332,3 @@\n-                long v = Double.doubleToLongBits(d[off + i]);\n-                b[boff++] = (byte)(v >>> 0);\n-                b[boff++] = (byte)(v >>> 8);\n-                b[boff++] = (byte)(v >>> 16);\n-                b[boff++] = (byte)(v >>> 24);\n-                b[boff++] = (byte)(v >>> 32);\n-                b[boff++] = (byte)(v >>> 40);\n-                b[boff++] = (byte)(v >>> 48);\n-                b[boff++] = (byte)(v >>> 56);\n+                double v = d[off + i];\n+                ByteArrayLittleEndian.setDouble(b, boff, v);\n+                boff += 8;\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/ImageOutputStreamImpl.java","additions":43,"deletions":94,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -40,6 +40,3 @@\n-    static final ByteOrder bigEndian = ByteOrder.BIG_ENDIAN;\n-    static final ByteOrder littleEndian = ByteOrder.LITTLE_ENDIAN;\n-\n-    private static void expect(long e, long g) {\n-        if (e != g) {\n-            throw new RuntimeException(\"Expected \" + e + \", got \" + g);\n+    private static void assertEquals(long actual, long expected) {\n+        if (actual != expected) {\n+            throw new AssertionError(\"Expected 0x\" + Long.toHexString(expected) + \", got 0x\" + Long.toHexString(actual));\n@@ -68,1 +65,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -70,4 +67,4 @@\n-            expect(s[0] & 0xffff, 0x1122);\n-            expect(s[1] & 0xffff, 0x4499);\n-            expect(s[2] & 0xffff, 0xAA33);\n-            expect(s[3] & 0xffff, 0xBBCC);\n+            assertEquals(s[0] & 0xffff, 0x1122);\n+            assertEquals(s[1] & 0xffff, 0x4499);\n+            assertEquals(s[2] & 0xffff, 0xAA33);\n+            assertEquals(s[3] & 0xffff, 0xBBCC);\n@@ -76,1 +73,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -78,4 +75,4 @@\n-            expect(s[0] & 0xffff, 0x2211);\n-            expect(s[1] & 0xffff, 0x9944);\n-            expect(s[2] & 0xffff, 0x33AA);\n-            expect(s[3] & 0xffff, 0xCCBB);\n+            assertEquals(s[0] & 0xffff, 0x2211);\n+            assertEquals(s[1] & 0xffff, 0x9944);\n+            assertEquals(s[2] & 0xffff, 0x33AA);\n+            assertEquals(s[3] & 0xffff, 0xCCBB);\n@@ -84,1 +81,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -86,4 +83,4 @@\n-            expect(c[0], 0x1122);\n-            expect(c[1], 0x4499);\n-            expect(c[2], 0xAA33);\n-            expect(c[3], 0xBBCC);\n+            assertEquals(c[0], 0x1122);\n+            assertEquals(c[1], 0x4499);\n+            assertEquals(c[2], 0xAA33);\n+            assertEquals(c[3], 0xBBCC);\n@@ -92,1 +89,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -94,4 +91,4 @@\n-            expect(c[0], 0x2211);\n-            expect(c[1], 0x9944);\n-            expect(c[2], 0x33AA);\n-            expect(c[3], 0xCCBB);\n+            assertEquals(c[0], 0x2211);\n+            assertEquals(c[1], 0x9944);\n+            assertEquals(c[2], 0x33AA);\n+            assertEquals(c[3], 0xCCBB);\n@@ -100,1 +97,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -102,2 +99,2 @@\n-            expect(i[0] & 0xffffffff, 0x11224499);\n-            expect(i[1] & 0xffffffff, 0xAA33BBCC);\n+            assertEquals(i[0] & 0xffffffff, 0x11224499);\n+            assertEquals(i[1] & 0xffffffff, 0xAA33BBCC);\n@@ -106,1 +103,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -108,2 +105,2 @@\n-            expect(i[0] & 0xffffffff, 0x99442211);\n-            expect(i[1] & 0xffffffff, 0xCCBB33AA);\n+            assertEquals(i[0] & 0xffffffff, 0x99442211);\n+            assertEquals(i[1] & 0xffffffff, 0xCCBB33AA);\n@@ -112,1 +109,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -114,2 +111,2 @@\n-            expect(Float.floatToIntBits(f[0]) & 0xffffffff, 0x11224499);\n-            expect(Float.floatToIntBits(f[1]) & 0xffffffff, 0xAA33BBCC);\n+            assertEquals(Float.floatToIntBits(f[0]) & 0xffffffff, 0x11224499);\n+            assertEquals(Float.floatToIntBits(f[1]) & 0xffffffff, 0xAA33BBCC);\n@@ -118,1 +115,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -120,2 +117,2 @@\n-            expect(Float.floatToIntBits(f[0]) & 0xffffffff, 0x99442211);\n-            expect(Float.floatToIntBits(f[1]) & 0xffffffff, 0xCCBB33AA);\n+            assertEquals(Float.floatToIntBits(f[0]) & 0xffffffff, 0x99442211);\n+            assertEquals(Float.floatToIntBits(f[1]) & 0xffffffff, 0xCCBB33AA);\n@@ -124,1 +121,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -126,1 +123,1 @@\n-            expect(l[0], 0x11224499AA33BBCCL);\n+            assertEquals(l[0], 0x11224499AA33BBCCL);\n@@ -129,1 +126,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -131,1 +128,1 @@\n-            expect(l[0], 0xCCBB33AA99442211L);\n+            assertEquals(l[0], 0xCCBB33AA99442211L);\n@@ -134,1 +131,1 @@\n-            iin.setByteOrder(bigEndian);\n+            iin.setByteOrder(ByteOrder.BIG_ENDIAN);\n@@ -136,1 +133,1 @@\n-            expect(Double.doubleToLongBits(d[0]), 0x11224499AA33BBCCL);\n+            assertEquals(Double.doubleToLongBits(d[0]), 0x11224499AA33BBCCL);\n@@ -139,1 +136,1 @@\n-            iin.setByteOrder(littleEndian);\n+            iin.setByteOrder(ByteOrder.LITTLE_ENDIAN);\n@@ -141,3 +138,3 @@\n-            expect(Double.doubleToLongBits(d[0]), 0xCCBB33AA99442211L);\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Got exception \" + ex);\n+            assertEquals(Double.doubleToLongBits(d[0]), 0xCCBB33AA99442211L);\n+        } catch (Throwable ex) {\n+            throw new RuntimeException(\"Got exception\", ex);\n","filename":"test\/jdk\/javax\/imageio\/stream\/ReadFullyTest.java","additions":45,"deletions":48,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.imageio.stream;\n+\n+import java.io.IOException;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import javax.imageio.stream.ImageInputStreamImpl;\n+import javax.imageio.stream.ImageOutputStreamImpl;\n+\n+\/**\n+ * Examine ImageInpuStream operations\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class ImageInputStreamBench {\n+\n+    \/\/ private static final byte[] ARRAY = new byte[8];\n+    private ImageInputStreamImpl imageInputStream;\n+\n+    @Setup\n+    public void createInstants() {\n+        \/\/ Various instants during the same day\n+        imageInputStream = new ImageInputStreamImpl() {\n+            @Override\n+            public int read() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public int read(byte[] b, int off, int len) throws IOException {\n+                \/\/System.arraycopy(ARRAY, 0, b, off, len);\n+                return len;\n+            }\n+        };\n+\n+    }\n+\n+    @Benchmark\n+    public void readInt(Blackhole bh) throws IOException {\n+        bh.consume(imageInputStream.readInt());\n+    }\n+\n+    @Benchmark\n+    public void readLong(Blackhole bh) throws IOException {\n+        bh.consume(imageInputStream.readLong());\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/imageio\/stream\/ImageInputStreamBench.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}