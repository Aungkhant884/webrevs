{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -582,1 +582,1 @@\n-                csname = GetPropertyAction.privilegedGetProperty(\"sun.stdout.encoding\");\n+                csname = GetPropertyAction.privilegedGetProperty(\"stdout.encoding\");\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-     * {@link Charset#defaultCharset()} otherwise.\n+     * <a href=\"#stdout.encoding\">stdout.encoding<\/a> otherwise.\n@@ -158,1 +158,1 @@\n-     * @see     Charset#defaultCharset()\n+     * @see     <a href=\"#stdout.encoding\">stdout.encoding<\/a>\n@@ -175,1 +175,1 @@\n-     * exists, {@link Charset#defaultCharset()} otherwise.\n+     * exists, <a href=\"#stderr.encoding\">stderr.encoding<\/a> otherwise.\n@@ -178,1 +178,1 @@\n-     * @see     Charset#defaultCharset()\n+     * @see     <a href=\"#stderr.encoding\">stderr.encoding<\/a>\n@@ -771,0 +771,8 @@\n+     * <tr><th scope=\"row\">{@systemProperty stdout.encoding}<\/th>\n+     *     <td>Character encoding name for {@link System#out System.out}.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8},\n+     *     starting it with the property set to another value leads to undefined behavior.\n+     * <tr><th scope=\"row\">{@systemProperty stderr.encoding}<\/th>\n+     *     <td>Character encoding name for {@link System#err System.err}.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8},\n+     *     starting it with the property set to another value leads to undefined behavior.\n@@ -2147,5 +2155,5 @@\n-        \/\/ sun.stdout\/err.encoding are set when the VM is associated with the terminal,\n-        \/\/ thus they are equivalent to Console.charset(), otherwise the encoding\n-        \/\/ defaults to native.encoding\n-        setOut0(newPrintStream(fdOut, props.getProperty(\"sun.stdout.encoding\", StaticProperty.nativeEncoding())));\n-        setErr0(newPrintStream(fdErr, props.getProperty(\"sun.stderr.encoding\", StaticProperty.nativeEncoding())));\n+        \/\/ stdout\/err.encoding are set when the VM is associated with the terminal,\n+        \/\/ thus they are equivalent to Console.charset(), otherwise the encodings\n+        \/\/ of those properties default to native.encoding\n+        setOut0(newPrintStream(fdOut, props.getProperty(\"stdout.encoding\")));\n+        setErr0(newPrintStream(fdErr, props.getProperty(\"stderr.encoding\")));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -80,0 +80,10 @@\n+        \/\/ \"stdout\/err.encoding\", prepared for System.out\/err. For compatibility\n+        \/\/ purposes, substitute them with \"sun.*\" if they don't exist. If \"sun.*\" aren't\n+        \/\/ available either, fall back to \"native.encoding\".\n+        putIfAbsent(props, \"stdout.encoding\", props.getOrDefault(\"sun.stdout.encoding\",\n+                raw.propDefault(Raw._stdout_encoding_NDX)));\n+        putIfAbsent(props, \"stdout.encoding\", nativeEncoding);\n+        putIfAbsent(props, \"stderr.encoding\", props.getOrDefault(\"sun.stderr.encoding\",\n+                raw.propDefault(Raw._stderr_encoding_NDX)));\n+        putIfAbsent(props, \"stderr.encoding\", nativeEncoding);\n+\n@@ -103,2 +113,0 @@\n-        putIfAbsent(props, \"sun.stdout.encoding\", raw.propDefault(Raw._sun_stdout_encoding_NDX));\n-        putIfAbsent(props, \"sun.stderr.encoding\", raw.propDefault(Raw._sun_stderr_encoding_NDX));\n@@ -221,1 +229,3 @@\n-        @Native private static final int _sun_arch_abi_NDX = 1 + _socksProxyPort_NDX;\n+        @Native private static final int _stderr_encoding_NDX = 1 + _socksProxyPort_NDX;\n+        @Native private static final int _stdout_encoding_NDX = 1 + _stderr_encoding_NDX;\n+        @Native private static final int _sun_arch_abi_NDX = 1 + _stdout_encoding_NDX;\n@@ -228,3 +238,1 @@\n-        @Native private static final int _sun_stderr_encoding_NDX = 1 + _sun_os_patch_level_NDX;\n-        @Native private static final int _sun_stdout_encoding_NDX = 1 + _sun_stderr_encoding_NDX;\n-        @Native private static final int _user_dir_NDX = 1 + _sun_stdout_encoding_NDX;\n+        @Native private static final int _user_dir_NDX = 1 + _sun_os_patch_level_NDX;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,2 +163,2 @@\n-    PUTPROP(propArray, _sun_stdout_encoding_NDX, sprops->sun_stdout_encoding);\n-    PUTPROP(propArray, _sun_stderr_encoding_NDX, sprops->sun_stderr_encoding);\n+    PUTPROP(propArray, _stdout_encoding_NDX, sprops->stdout_encoding);\n+    PUTPROP(propArray, _stderr_encoding_NDX, sprops->stderr_encoding);\n","filename":"src\/java.base\/share\/native\/libjava\/System.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,2 +68,2 @@\n-    char *sun_stdout_encoding;\n-    char *sun_stderr_encoding;\n+    char *stdout_encoding;\n+    char *stderr_encoding;\n","filename":"src\/java.base\/share\/native\/libjava\/java_props.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -458,1 +458,1 @@\n-        sprops.sun_stdout_encoding = sprops.encoding;\n+        sprops.stdout_encoding = sprops.encoding;\n@@ -461,1 +461,1 @@\n-        sprops.sun_stderr_encoding = sprops.encoding;\n+        sprops.stderr_encoding = sprops.encoding;\n","filename":"src\/java.base\/unix\/native\/libjava\/java_props_md.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -712,1 +712,1 @@\n-                sprops.sun_stdout_encoding = getConsoleEncoding();\n+                sprops.stdout_encoding = getConsoleEncoding();\n@@ -717,2 +717,2 @@\n-                if (sprops.sun_stdout_encoding != NULL)\n-                    sprops.sun_stderr_encoding = sprops.sun_stdout_encoding;\n+                if (sprops.stdout_encoding != NULL)\n+                    sprops.stderr_encoding = sprops.stdout_encoding;\n@@ -720,1 +720,1 @@\n-                    sprops.sun_stderr_encoding = getConsoleEncoding();\n+                    sprops.stderr_encoding = getConsoleEncoding();\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * @bug 4463345 4244670 8030781 8265989\n+ * @bug 4463345 4244670 8030781 8265989 8283620\n@@ -84,0 +84,2 @@\n+                {\"stdout.encoding\"},\n+                {\"stderr.encoding\"},\n","filename":"test\/jdk\/java\/lang\/System\/PropertyTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}