{"files":[{"patch":"@@ -554,1 +554,3 @@\n-  call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_unwind));\n+  set_last_Java_frame(esp, rfp, (address)pc(), rscratch1);\n+  super_call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::at_unwind), rthread);\n+  reset_last_Java_frame(true);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,1 +1002,3 @@\n-  call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_unwind));\n+  set_last_Java_frame(noreg, rbp, (address)pc());\n+  super_call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::at_unwind), rthread);\n+  reset_last_Java_frame(rthread, true);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1175,4 +1175,1 @@\n-JRT_ENTRY(void, InterpreterRuntime::at_unwind(JavaThread* thread))\n-  \/\/ JRT_END does an implicit safepoint check, hence we are guaranteed to block\n-  \/\/ if this is called during a safepoint\n-\n+JRT_LEAF(void, InterpreterRuntime::at_unwind(JavaThread* thread))\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}