{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/pair.hpp\"\n@@ -1098,12 +1099,1 @@\n-\/\/=============================================================================\n-\/\/------------------------------add_ring---------------------------------------\n-\/\/ Supplied function returns the sum of the inputs.\n-const Type *MaxINode::add_ring( const Type *t0, const Type *t1 ) const {\n-  const TypeInt *r0 = t0->is_int(); \/\/ Handy access\n-  const TypeInt *r1 = t1->is_int();\n-\n-  \/\/ Otherwise just MAX them bits.\n-  return TypeInt::make( MAX2(r0->_lo,r1->_lo), MAX2(r0->_hi,r1->_hi), MAX2(r0->_widen,r1->_widen) );\n-}\n-\n-\/\/ Check if addition of an integer with type 't' and a constant 'c' can overflow\n+\/\/ Check if addition of an integer with type 't' and a constant 'c' can overflow.\n@@ -1117,14 +1107,11 @@\n-\/\/ Ideal transformations for MaxINode\n-Node* MaxINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  \/\/ Force a right-spline graph\n-  Node* l = in(1);\n-  Node* r = in(2);\n-  \/\/ Transform  MaxI1(MaxI2(a, b), c)  into  MaxI1(a, MaxI2(b, c))\n-  \/\/ to force a right-spline graph for the rest of MaxINode::Ideal().\n-  if (l->Opcode() == Op_MaxI) {\n-    assert(l != l->in(1), \"dead loop in MaxINode::Ideal\");\n-    r = phase->transform(new MaxINode(l->in(2), r));\n-    l = l->in(1);\n-    set_req_X(1, l, phase);\n-    set_req_X(2, r, phase);\n-    return this;\n+\/\/ If x == y and neither add(x, x_off) nor add(y, y_off) overflow, return\n+\/\/ add(x, op(x_off, y_off)). Otherwise, return nullptr.\n+Node* MaxNode::extract_add(PhaseGVN* phase, Node* x, jint x_off, Node* y, jint y_off) {\n+  int opcode = Opcode();\n+  assert(opcode == Op_MaxI || opcode == Op_MinI, \"Unexpected opcode\");\n+  const TypeInt* tx = phase->type(x)->isa_int();\n+  if (x == y && tx != nullptr &&\n+      !can_overflow(tx, x_off) &&\n+      !can_overflow(tx, y_off)) {\n+    jint c = opcode == Op_MinI ? MIN2(x_off, y_off) : MAX2(x_off, y_off);\n+    return new AddINode(x, phase->intcon(c));\n@@ -1132,0 +1119,2 @@\n+  return nullptr;\n+}\n@@ -1133,10 +1122,1 @@\n-  \/\/ Get left input & constant\n-  Node* x = l;\n-  jint x_off = 0;\n-  if (x->Opcode() == Op_AddI && \/\/ Check for \"x+c0\" and collect constant\n-      x->in(2)->is_Con()) {\n-    const Type* t = x->in(2)->bottom_type();\n-    if (t == Type::TOP) return nullptr;  \/\/ No progress\n-    x_off = t->is_int()->get_con();\n-    x = x->in(1);\n-  }\n+typedef const Pair<Node*, jint> ConstAddOperands;\n@@ -1144,10 +1124,6 @@\n-  \/\/ Scan a right-spline-tree for MAXs\n-  Node* y = r;\n-  jint y_off = 0;\n-  \/\/ Check final part of MAX tree\n-  if (y->Opcode() == Op_AddI && \/\/ Check for \"y+c1\" and collect constant\n-      y->in(2)->is_Con()) {\n-    const Type* t = y->in(2)->bottom_type();\n-    if (t == Type::TOP) return nullptr;  \/\/ No progress\n-    y_off = t->is_int()->get_con();\n-    y = y->in(1);\n+\/\/ If n is an integer addition of x with a non-TOP constant C, return <x, C>.\n+\/\/ Otherwise, return <nullptr, 0>.\n+static ConstAddOperands as_add_with_constant(Node* n) {\n+  ConstAddOperands null(nullptr, 0);\n+  if (n->Opcode() != Op_AddI) {\n+    return null;\n@@ -1155,3 +1131,4 @@\n-  if (x->_idx > y->_idx && r->Opcode() != Op_MaxI) {\n-    swap_edges(1, 2);\n-    return this;\n+  Node* x = n->in(1);\n+  Node* c = n->in(2);\n+  if (!c->is_Con()) {\n+    return null;\n@@ -1159,0 +1136,6 @@\n+  const Type* c_type = c->bottom_type();\n+  if (c_type == Type::TOP) {\n+    return null;\n+  }\n+  return ConstAddOperands(x, c_type->is_int()->get_con());\n+}\n@@ -1160,12 +1143,19 @@\n-  const TypeInt* tx = phase->type(x)->isa_int();\n-\n-  if (r->Opcode() == Op_MaxI) {\n-    assert(r != r->in(2), \"dead loop in MaxINode::Ideal\");\n-    y = r->in(1);\n-    \/\/ Check final part of MAX tree\n-    if (y->Opcode() == Op_AddI &&\/\/ Check for \"y+c1\" and collect constant\n-        y->in(2)->is_Con()) {\n-      const Type* t = y->in(2)->bottom_type();\n-      if (t == Type::TOP) return nullptr;  \/\/ No progress\n-      y_off = t->is_int()->get_con();\n-      y = y->in(1);\n+Node* MaxNode::IdealI(PhaseGVN* phase, bool can_reshape) {\n+  int opcode = Opcode();\n+  assert(opcode == Op_MinI || opcode == Op_MaxI, \"Unexpected opcode\");\n+  \/\/ Defer handling of op(x, x) to constant\/identity propagation.\n+  if (in(1) == in(2)) {\n+    return nullptr;\n+  }\n+  \/\/ Try to transform the following pattern, in any of its four possible\n+  \/\/ permutations induced by op's commutativity:\n+  \/\/     op(op(add(inner, inner_off), inner_other), add(outer, outer_off))\n+  \/\/ into\n+  \/\/     op(add(inner, op(inner_off, outer_off)), inner_other),\n+  \/\/ where:\n+  \/\/     op is either MinI or MaxI, and\n+  \/\/     inner == outer, and\n+  \/\/     the additions cannot overflow.\n+  for (uint inner_op_index = 1; inner_op_index <= 2; inner_op_index++) {\n+    if (in(inner_op_index)->Opcode() != opcode) {\n+      continue;\n@@ -1173,10 +1163,4 @@\n-\n-    if (x->_idx > y->_idx)\n-      return new MaxINode(r->in(1), phase->transform(new MaxINode(l, r->in(2))));\n-\n-    \/\/ Transform MAX2(x + c0, MAX2(x + c1, z)) into MAX2(x + MAX2(c0, c1), z)\n-    \/\/ if x == y and the additions can't overflow.\n-    if (x == y && tx != nullptr &&\n-        !can_overflow(tx, x_off) &&\n-        !can_overflow(tx, y_off)) {\n-      return new MaxINode(phase->transform(new AddINode(x, phase->intcon(MAX2(x_off, y_off)))), r->in(2));\n+    Node* outer_add = in(inner_op_index == 1 ? 2 : 1);\n+    ConstAddOperands outer_add_operands = as_add_with_constant(outer_add);\n+    if (outer_add_operands.first == nullptr) {\n+      continue;\n@@ -1184,7 +1168,25 @@\n-  } else {\n-    \/\/ Transform MAX2(x + c0, y + c1) into x + MAX2(c0, c1)\n-    \/\/ if x == y and the additions can't overflow.\n-    if (x == y && tx != nullptr &&\n-        !can_overflow(tx, x_off) &&\n-        !can_overflow(tx, y_off)) {\n-      return new AddINode(x, phase->intcon(MAX2(x_off, y_off)));\n+    Node* outer = outer_add_operands.first;\n+    jint outer_off = outer_add_operands.second;\n+    \/\/ One operand is a MinI\/MaxI and the other is an integer addition with\n+    \/\/ constant. Test the operands of the inner MinI\/MaxI.\n+    for (uint inner_add_index = 1; inner_add_index <= 2; inner_add_index++) {\n+      Node* inner_op = in(inner_op_index);\n+      Node* inner_add = inner_op->in(inner_add_index);\n+      ConstAddOperands inner_add_operands = as_add_with_constant(inner_add);\n+      if (inner_add_operands.first == nullptr) {\n+        continue;\n+      }\n+      Node* inner = inner_add_operands.first;\n+      jint inner_off = inner_add_operands.second;\n+      \/\/ Try to extract the inner add.\n+      Node* add_extracted = extract_add(phase, inner, inner_off, outer, outer_off);\n+      if (add_extracted == nullptr) {\n+        continue;\n+      }\n+      Node* add_transformed = phase->transform(add_extracted);\n+      Node* inner_other = inner_op->in(inner_add_index == 1 ? 2 : 1);\n+      if (opcode == Op_MinI) {\n+        return new MinINode(add_transformed, inner_other);\n+      } else {\n+        return new MaxINode(add_transformed, inner_other);\n+      }\n@@ -1193,1 +1195,12 @@\n- return nullptr;\n+  \/\/ Try to transform\n+  \/\/     op(add(x, x_off), add(y, y_off))\n+  \/\/ into\n+  \/\/     add(x, op(x_off, y_off)),\n+  \/\/ where:\n+  \/\/     op is either MinI or MaxI, and\n+  \/\/     inner == outer, and\n+  \/\/     the additions cannot overflow.\n+  ConstAddOperands xC = as_add_with_constant(in(1));\n+  ConstAddOperands yC = as_add_with_constant(in(2));\n+  if (xC.first == nullptr || yC.first == nullptr) return nullptr;\n+  return extract_add(phase, xC.first, xC.second, yC.first, yC.second);\n@@ -1196,18 +1209,4 @@\n-\/\/=============================================================================\n-\/\/------------------------------Idealize---------------------------------------\n-\/\/ MINs show up in range-check loop limit calculations.  Look for\n-\/\/ \"MIN2(x+c0,MIN2(y,x+c1))\".  Pick the smaller constant: \"MIN2(x+c0,y)\"\n-Node *MinINode::Ideal(PhaseGVN *phase, bool can_reshape) {\n-  Node *progress = nullptr;\n-  \/\/ Force a right-spline graph\n-  Node *l = in(1);\n-  Node *r = in(2);\n-  \/\/ Transform  MinI1( MinI2(a,b), c)  into  MinI1( a, MinI2(b,c) )\n-  \/\/ to force a right-spline graph for the rest of MinINode::Ideal().\n-  if( l->Opcode() == Op_MinI ) {\n-    assert( l != l->in(1), \"dead loop in MinINode::Ideal\" );\n-    r = phase->transform(new MinINode(l->in(2),r));\n-    l = l->in(1);\n-    set_req_X(1, l, phase);\n-    set_req_X(2, r, phase);\n-    return this;\n+Node* MaxNode::IdentityI(PhaseGVN* phase) {\n+  assert(Opcode() == Op_MinI || Opcode() == Op_MaxI, \"Unexpected opcode\");\n+  if (in(1) == in(2)) {\n+    return in(1);\n@@ -1215,0 +1214,2 @@\n+  return MaxNode::Identity(phase);\n+}\n@@ -1216,10 +1217,4 @@\n-  \/\/ Get left input & constant\n-  Node *x = l;\n-  jint x_off = 0;\n-  if( x->Opcode() == Op_AddI && \/\/ Check for \"x+c0\" and collect constant\n-      x->in(2)->is_Con() ) {\n-    const Type *t = x->in(2)->bottom_type();\n-    if( t == Type::TOP ) return nullptr;  \/\/ No progress\n-    x_off = t->is_int()->get_con();\n-    x = x->in(1);\n-  }\n+\/\/ Ideal transformations for MaxINode\n+Node* MaxINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return IdealI(phase, can_reshape);\n+}\n@@ -1227,15 +1222,3 @@\n-  \/\/ Scan a right-spline-tree for MINs\n-  Node *y = r;\n-  jint y_off = 0;\n-  \/\/ Check final part of MIN tree\n-  if( y->Opcode() == Op_AddI && \/\/ Check for \"y+c1\" and collect constant\n-      y->in(2)->is_Con() ) {\n-    const Type *t = y->in(2)->bottom_type();\n-    if( t == Type::TOP ) return nullptr;  \/\/ No progress\n-    y_off = t->is_int()->get_con();\n-    y = y->in(1);\n-  }\n-  if( x->_idx > y->_idx && r->Opcode() != Op_MinI ) {\n-    swap_edges(1, 2);\n-    return this;\n-  }\n+Node* MaxINode::Identity(PhaseGVN* phase) {\n+  return IdentityI(phase);\n+}\n@@ -1243,1 +1226,6 @@\n-  const TypeInt* tx = phase->type(x)->isa_int();\n+\/\/=============================================================================\n+\/\/------------------------------add_ring---------------------------------------\n+\/\/ Supplied function returns the sum of the inputs.\n+const Type *MaxINode::add_ring( const Type *t0, const Type *t1 ) const {\n+  const TypeInt *r0 = t0->is_int(); \/\/ Handy access\n+  const TypeInt *r1 = t1->is_int();\n@@ -1245,11 +1233,3 @@\n-  if( r->Opcode() == Op_MinI ) {\n-    assert( r != r->in(2), \"dead loop in MinINode::Ideal\" );\n-    y = r->in(1);\n-    \/\/ Check final part of MIN tree\n-    if( y->Opcode() == Op_AddI &&\/\/ Check for \"y+c1\" and collect constant\n-        y->in(2)->is_Con() ) {\n-      const Type *t = y->in(2)->bottom_type();\n-      if( t == Type::TOP ) return nullptr;  \/\/ No progress\n-      y_off = t->is_int()->get_con();\n-      y = y->in(1);\n-    }\n+  \/\/ Otherwise just MAX them bits.\n+  return TypeInt::make( MAX2(r0->_lo,r1->_lo), MAX2(r0->_hi,r1->_hi), MAX2(r0->_widen,r1->_widen) );\n+}\n@@ -1257,2 +1237,7 @@\n-    if( x->_idx > y->_idx )\n-      return new MinINode(r->in(1),phase->transform(new MinINode(l,r->in(2))));\n+\/\/=============================================================================\n+\/\/------------------------------Idealize---------------------------------------\n+\/\/ MINs show up in range-check loop limit calculations.  Look for\n+\/\/ \"MIN2(x+c0,MIN2(y,x+c1))\".  Pick the smaller constant: \"MIN2(x+c0,y)\"\n+Node* MinINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return IdealI(phase, can_reshape);\n+}\n@@ -1260,17 +1245,2 @@\n-    \/\/ Transform MIN2(x + c0, MIN2(x + c1, z)) into MIN2(x + MIN2(c0, c1), z)\n-    \/\/ if x == y and the additions can't overflow.\n-    if (x == y && tx != nullptr &&\n-        !can_overflow(tx, x_off) &&\n-        !can_overflow(tx, y_off)) {\n-      return new MinINode(phase->transform(new AddINode(x, phase->intcon(MIN2(x_off, y_off)))), r->in(2));\n-    }\n-  } else {\n-    \/\/ Transform MIN2(x + c0, y + c1) into x + MIN2(c0, c1)\n-    \/\/ if x == y and the additions can't overflow.\n-    if (x == y && tx != nullptr &&\n-        !can_overflow(tx, x_off) &&\n-        !can_overflow(tx, y_off)) {\n-      return new AddINode(x,phase->intcon(MIN2(x_off,y_off)));\n-    }\n-  }\n-  return nullptr;\n+Node* MinINode::Identity(PhaseGVN* phase) {\n+  return IdentityI(phase);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":123,"deletions":153,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -255,0 +255,1 @@\n+  Node* extract_add(PhaseGVN* phase, Node* x, jint x_off, Node* y, jint y_off);\n@@ -261,0 +262,2 @@\n+  Node* IdealI(PhaseGVN* phase, bool can_reshape);\n+  Node* IdentityI(PhaseGVN* phase);\n@@ -303,0 +306,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n@@ -319,0 +323,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +43,7 @@\n-    @Run(test = {\"testMax1\", \"testMax2\", \"testMax3\", \"testMin1\", \"testMin2\", \"testMin3\"})\n-    public void runMethod() {\n+    @Run(test = {\"testMax1LL\", \"testMax1LR\", \"testMax1RL\", \"testMax1RR\",\n+                 \"testMax2L\", \"testMax2R\",\n+                 \"testMax3\",\n+                 \"testMin1\",\n+                 \"testMin2\",\n+                 \"testMin3\"})\n+    public void runPositiveTests() {\n@@ -48,4 +54,4 @@\n-        assertResult(a);\n-        assertResult(0);\n-        assertResult(min);\n-        assertResult(max);\n+        assertPositiveResult(a);\n+        assertPositiveResult(0);\n+        assertPositiveResult(min);\n+        assertPositiveResult(max);\n@@ -55,3 +61,7 @@\n-    public void assertResult(int a) {\n-        Asserts.assertEQ(Math.max(((a >> 1) + 100), Math.max(((a >> 1) + 150), 200)), testMax1(a));\n-        Asserts.assertEQ(Math.max(((a >> 1) + 10), ((a >> 1) + 11))                 , testMax2(a));\n+    public void assertPositiveResult(int a) {\n+        Asserts.assertEQ(Math.max(Math.max(((a >> 1) + 150), 200), ((a >> 1) + 100)), testMax1LL(a));\n+        Asserts.assertEQ(testMax1LL(a)                                              , testMax1LR(a));\n+        Asserts.assertEQ(testMax1LL(a)                                              , testMax1RL(a));\n+        Asserts.assertEQ(testMax1LL(a)                                              , testMax1RR(a));\n+        Asserts.assertEQ(Math.max(((a >> 1) + 10), ((a >> 1) + 11))                 , testMax2L(a));\n+        Asserts.assertEQ(testMax2L(a)                                               , testMax2R(a));\n@@ -75,1 +85,17 @@\n-    public int testMax1(int i) {\n+    public int testMax1LL(int i) {\n+        return Math.max(Math.max(((i >> 1) + 150), 200), ((i >> 1) + 100));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1LR(int i) {\n+        return Math.max(Math.max(200, ((i >> 1) + 150)), ((i >> 1) + 100));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1RL(int i) {\n@@ -79,0 +105,8 @@\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1RR(int i) {\n+        return Math.max(((i >> 1) + 100), Math.max(200, ((i >> 1) + 150)));\n+    }\n+\n@@ -94,1 +128,1 @@\n-    public int testMax2(int i) {\n+    public int testMax2L(int i) {\n@@ -98,0 +132,7 @@\n+    @Test\n+    @IR(failOn = {IRNode.MAX_I})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    public int testMax2R(int i) {\n+        return Math.max((i >> 1) + 11, (i >> 1) + 10);\n+    }\n+\n@@ -119,0 +160,72 @@\n+\n+    @Run(test = {\"testTwoLevelsDifferentXY\",\n+                 \"testTwoLevelsNoLeftConstant\",\n+                 \"testTwoLevelsNoRightConstant\",\n+                 \"testDifferentXY\",\n+                 \"testNoLeftConstant\",\n+                 \"testNoRightConstant\"})\n+    public void runNegativeTests() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertNegativeResult(a);\n+        assertNegativeResult(0);\n+        assertNegativeResult(min);\n+        assertNegativeResult(max);\n+\n+        testTwoLevelsDifferentXY(10);\n+        testTwoLevelsNoLeftConstant(10, 42);\n+        testTwoLevelsNoRightConstant(10, 42);\n+        testDifferentXY(10);\n+        testNoLeftConstant(10, 42);\n+        testNoRightConstant(10, 42);\n+    }\n+\n+    @DontCompile\n+    public void assertNegativeResult(int a) {\n+        Asserts.assertEQ(Math.max(Math.max(((a >> 1) + 150), 200), ((a >> 2) + 100)), testTwoLevelsDifferentXY(a));\n+        Asserts.assertEQ(Math.max(Math.max(((a >> 1) + a*2), 200), ((a >> 1) + 100)),  testTwoLevelsNoLeftConstant(a, a*2));\n+        Asserts.assertEQ(Math.max(Math.max(((a >> 1) + 150), 200), ((a >> 1) + a*2)),  testTwoLevelsNoRightConstant(a, a*2));\n+        Asserts.assertEQ(Math.max((a >> 1) + 10, (a >> 2) + 11), testDifferentXY(a));\n+        Asserts.assertEQ(Math.max((a >> 1) + a*2, (a >> 1) + 11), testNoLeftConstant(a, a*2));\n+        Asserts.assertEQ(Math.max((a >> 1) + 10, (a >> 1) + a*2), testNoRightConstant(a, a*2));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"2\"})\n+    public int testTwoLevelsDifferentXY(int i) {\n+        return Math.max(Math.max(((i >> 1) + 150), 200), ((i >> 2) + 100));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"2\"})\n+    public int testTwoLevelsNoLeftConstant(int i, int c0) {\n+        return Math.max(Math.max(((i >> 1) + c0), 200), ((i >> 1) + 100));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"2\"})\n+    public int testTwoLevelsNoRightConstant(int i, int c1) {\n+        return Math.max(Math.max(((i >> 1) + 150), 200), ((i >> 1) + c1));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\"})\n+    public int testDifferentXY(int i) {\n+        return Math.max((i >> 1) + 10, (i >> 2) + 11);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\"})\n+    public int testNoLeftConstant(int i, int c0) {\n+        return Math.max((i >> 1) + c0, (i >> 1) + 11);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\"})\n+    public int testNoRightConstant(int i, int c1) {\n+        return Math.max((i >> 1) + 10, (i >> 1) + c1);\n+    }\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MaxMinINodeIdealizationTests.java","additions":124,"deletions":11,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -797,0 +797,10 @@\n+    public static final String MIN_REDUCTION_V = PREFIX + \"MIN_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(MIN_REDUCTION_V, \"MinReductionV\");\n+    }\n+\n+    public static final String MAX_REDUCTION_V = PREFIX + \"MAX_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(MAX_REDUCTION_V, \"MaxReductionV\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8302673\n+ * @summary [SuperWord] MaxReduction and MinReduction should vectorize for int\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.MinMaxRed_Int\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Arrays;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class MinMaxRed_Int {\n+\n+    private static final Random random = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) throws Exception {\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"maxReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runMaxTest() {\n+        int[] a = new int[1024];\n+        int[] b = new int[1024];\n+        ReductionInit(a, b);\n+        int res = 0;\n+        for (int j = 0; j < 2000; j++) {\n+            res = maxReductionImplement(a, b, res);\n+        }\n+        if (res == Arrays.stream(a).max().getAsInt()) {\n+            System.out.println(\"Success\");\n+        } else {\n+            throw new AssertionError(\"Failed\");\n+        }\n+    }\n+\n+    @Run(test = {\"minReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runMinTest() {\n+        int[] a = new int[1024];\n+        int[] b = new int[1024];\n+        ReductionInit(a, b);\n+        int res = 1;\n+        for (int j = 0; j < 2000; j++) {\n+            res = minReductionImplement(a, b, res);\n+        }\n+        if (res == Arrays.stream(a).min().getAsInt()) {\n+            System.out.println(\"Success\");\n+        } else {\n+            throw new AssertionError(\"Failed\");\n+        }\n+    }\n+\n+    public static void ReductionInit(int[] a, int[] b) {\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = random.nextInt();\n+            b[i] = 1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"SuperWordReductions\", \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = {IRNode.MIN_REDUCTION_V, \" > 0\"})\n+    public static int minReductionImplement(int[] a, int[] b, int res) {\n+        for (int i = 0; i < a.length; i++) {\n+            res = Math.min(res, a[i] * b[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"SuperWordReductions\", \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = {IRNode.MAX_REDUCTION_V, \" > 0\"})\n+    public static int maxReductionImplement(int[] a, int[] b, int res) {\n+        for (int i = 0; i < a.length; i++) {\n+            res = Math.max(res, a[i] * b[i]);\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Int.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}