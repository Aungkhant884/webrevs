{"files":[{"patch":"@@ -36,1 +36,0 @@\n-#include \"utilities\/pair.hpp\"\n@@ -1034,0 +1033,8 @@\n+Node* MaxNode::build_min_max_int(Node* a, Node* b, bool is_max) {\n+  if (is_max) {\n+    return new MaxINode(a, b);\n+  } else {\n+    return new MinINode(a, b);\n+  }\n+}\n+\n@@ -1048,7 +1055,2 @@\n-    if (is_max) {\n-      res =  gvn.transform(new MaxINode(a, b));\n-      assert(gvn.type(res)->is_int()->_lo >= t->is_int()->_lo && gvn.type(res)->is_int()->_hi <= t->is_int()->_hi, \"type doesn't match\");\n-    } else {\n-      Node* res =  gvn.transform(new MinINode(a, b));\n-      assert(gvn.type(res)->is_int()->_lo >= t->is_int()->_lo && gvn.type(res)->is_int()->_hi <= t->is_int()->_hi, \"type doesn't match\");\n-    }\n+    res = gvn.transform(build_min_max_int(a, b, is_max));\n+    assert(gvn.type(res)->is_int()->_lo >= t->is_int()->_lo && gvn.type(res)->is_int()->_hi <= t->is_int()->_hi, \"type doesn't match\");\n@@ -1107,0 +1109,1 @@\n+\/\/ Let <x, x_off> = x_operands and <y, y_off> = y_operands.\n@@ -1109,1 +1112,3 @@\n-Node* MaxNode::extract_add(PhaseGVN* phase, Node* x, jint x_off, Node* y, jint y_off) {\n+Node* MaxNode::extract_add(PhaseGVN* phase, ConstAddOperands x_operands, ConstAddOperands y_operands) {\n+  Node* x = x_operands.first;\n+  Node* y = y_operands.first;\n@@ -1113,0 +1118,2 @@\n+  jint x_off = x_operands.second;\n+  jint y_off = y_operands.second;\n@@ -1122,4 +1129,4 @@\n-typedef const Pair<Node*, jint> ConstAddOperands;\n-\n-\/\/ If n is an integer addition of x with a non-TOP constant C, return <x, C>.\n-\/\/ Otherwise, return <nullptr, 0>.\n+\/\/ Try to cast n as an integer addition with a constant. Return:\n+\/\/   <x, C>,       if n == add(x, C), where 'C' is a non-TOP constant;\n+\/\/   <nullptr, 0>, if n == add(x, C), where 'C' is a TOP constant; or\n+\/\/   <n, 0>,       otherwise.\n@@ -1127,1 +1134,0 @@\n-  ConstAddOperands null(nullptr, 0);\n@@ -1129,1 +1135,1 @@\n-    return null;\n+    return ConstAddOperands(n, 0);\n@@ -1134,1 +1140,1 @@\n-    return null;\n+    return ConstAddOperands(n, 0);\n@@ -1138,1 +1144,1 @@\n-    return null;\n+    return ConstAddOperands(nullptr, 0);\n@@ -1146,4 +1152,0 @@\n-  \/\/ Defer handling of op(x, x) to constant\/identity propagation.\n-  if (in(1) == in(2)) {\n-    return nullptr;\n-  }\n@@ -1168,2 +1170,0 @@\n-    Node* outer = outer_add_operands.first;\n-    jint outer_off = outer_add_operands.second;\n@@ -1179,2 +1179,0 @@\n-      Node* inner = inner_add_operands.first;\n-      jint inner_off = inner_add_operands.second;\n@@ -1182,1 +1180,1 @@\n-      Node* add_extracted = extract_add(phase, inner, inner_off, outer, outer_off);\n+      Node* add_extracted = extract_add(phase, inner_add_operands, outer_add_operands);\n@@ -1188,5 +1186,1 @@\n-      if (opcode == Op_MinI) {\n-        return new MinINode(add_transformed, inner_other);\n-      } else {\n-        return new MaxINode(add_transformed, inner_other);\n-      }\n+      return build_min_max_int(add_transformed, inner_other, opcode == Op_MaxI);\n@@ -1206,9 +1200,1 @@\n-  return extract_add(phase, xC.first, xC.second, yC.first, yC.second);\n-}\n-\n-Node* MaxNode::IdentityI(PhaseGVN* phase) {\n-  assert(Opcode() == Op_MinI || Opcode() == Op_MaxI, \"Unexpected opcode\");\n-  if (in(1) == in(2)) {\n-    return in(1);\n-  }\n-  return MaxNode::Identity(phase);\n+  return extract_add(phase, xC, yC);\n@@ -1222,4 +1208,0 @@\n-Node* MaxINode::Identity(PhaseGVN* phase) {\n-  return IdentityI(phase);\n-}\n-\n@@ -1245,4 +1227,0 @@\n-Node* MinINode::Identity(PhaseGVN* phase) {\n-  return IdentityI(phase);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":26,"deletions":48,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/pair.hpp\"\n@@ -35,0 +36,1 @@\n+typedef const Pair<Node*, jint> ConstAddOperands;\n@@ -253,0 +255,1 @@\n+  static Node* build_min_max_int(Node* a, Node* b, bool is_max);\n@@ -255,1 +258,1 @@\n-  Node* extract_add(PhaseGVN* phase, Node* x, jint x_off, Node* y, jint y_off);\n+  Node* extract_add(PhaseGVN* phase, ConstAddOperands x_operands, ConstAddOperands y_operands);\n@@ -263,1 +266,0 @@\n-  Node* IdentityI(PhaseGVN* phase);\n@@ -306,1 +308,0 @@\n-  virtual Node* Identity(PhaseGVN* phase);\n@@ -323,1 +324,0 @@\n-  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+                 \"testMax1LLNoInnerAdd\", \"testMax1LLNoInnerAdd2\", \"testMax1LLNoOuterAdd\", \"testMax1LLNoAdd\",\n@@ -45,0 +46,1 @@\n+                 \"testMax2LNoLeftAdd\",\n@@ -66,0 +68,4 @@\n+        Asserts.assertEQ(Math.max(Math.max((a >> 1), 200), (a >> 1) + 100)          , testMax1LLNoInnerAdd(a));\n+        Asserts.assertEQ(Math.max(Math.max((a >> 1), (a << 1)), (a >> 1) + 100)     , testMax1LLNoInnerAdd2(a));\n+        Asserts.assertEQ(Math.max(Math.max(((a >> 1) + 150), 200), a >> 1)          , testMax1LLNoOuterAdd(a));\n+        Asserts.assertEQ(Math.max(Math.max((a >> 1), 200), a >> 1)                  , testMax1LLNoAdd(a));\n@@ -68,0 +74,1 @@\n+        Asserts.assertEQ(Math.max(a >> 1, ((a >> 1) + 11))                          , testMax2LNoLeftAdd(a));\n@@ -113,0 +120,31 @@\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1LLNoInnerAdd(int i) {\n+        return Math.max(Math.max((i >> 1), 200), (i >> 1) + 100);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1LLNoInnerAdd2(int i) {\n+        return Math.max(Math.max((i >> 1), (i << 1)), (i >> 1) + 100);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_I, \"1\",\n+                  IRNode.ADD  , \"1\",\n+                 })\n+    public int testMax1LLNoOuterAdd(int i) {\n+        return Math.max(Math.max(((i >> 1) + 150), 200), i >> 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD})\n+    @IR(counts = {IRNode.MAX_I, \"1\"})\n+    public int testMax1LLNoAdd(int i) {\n+        return Math.max(Math.max((i >> 1), 200), i >> 1);\n+    }\n+\n@@ -139,0 +177,7 @@\n+    @Test\n+    @IR(failOn = {IRNode.MAX_I})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    public int testMax2LNoLeftAdd(int i) {\n+        return Math.max(i >> 1, (i >> 1) + 11);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MaxMinINodeIdealizationTests.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}