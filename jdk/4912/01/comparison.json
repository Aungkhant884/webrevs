{"files":[{"patch":"@@ -174,2 +174,0 @@\n-  &DumpTimeSharedClassTable_hash,\n-  primitive_equals<InstanceKlass*>,\n@@ -177,1 +175,3 @@\n-  ResourceObj::C_HEAP>\n+  ResourceObj::C_HEAP,\n+  mtClassShared,\n+  &DumpTimeSharedClassTable_hash>\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,3 +151,0 @@\n-  static bool oop_equals(oop const& p1, oop const& p2) {\n-    return p1 == p2;\n-  }\n@@ -161,2 +158,0 @@\n-      HeapShared::oop_hash,\n-      HeapShared::oop_equals,\n@@ -164,1 +159,3 @@\n-      ResourceObj::C_HEAP> ArchivedObjectCache;\n+      ResourceObj::C_HEAP,\n+      mtClassShared,\n+      HeapShared::oop_hash> ArchivedObjectCache;\n@@ -167,4 +164,0 @@\n-  static bool klass_equals(Klass* const& p1, Klass* const& p2) {\n-    return primitive_equals<Klass*>(p1, p2);\n-  }\n-\n@@ -178,2 +171,0 @@\n-                               HeapShared::klass_hash,\n-                               HeapShared::klass_equals,\n@@ -181,1 +172,3 @@\n-                               ResourceObj::C_HEAP> {\n+                               ResourceObj::C_HEAP,\n+                               mtClassShared,\n+                               HeapShared::klass_hash> {\n@@ -233,2 +226,0 @@\n-      HeapShared::oop_hash,\n-      HeapShared::oop_equals,\n@@ -236,1 +227,3 @@\n-      ResourceObj::C_HEAP> SeenObjectsTable;\n+      ResourceObj::C_HEAP,\n+      mtClassShared,\n+      HeapShared::oop_hash> SeenObjectsTable;\n@@ -403,2 +396,0 @@\n-                           HeapShared::string_oop_hash,\n-                           HeapShared::oop_equals,\n@@ -406,1 +397,3 @@\n-                           ResourceObj::C_HEAP>\n+                           ResourceObj::C_HEAP,\n+                           mtClassShared,\n+                           HeapShared::string_oop_hash>\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -159,2 +159,0 @@\n-                             LambdaProxyClassKey::DUMPTIME_HASH,\n-                             LambdaProxyClassKey::DUMPTIME_EQUALS,\n@@ -162,1 +160,4 @@\n-                             ResourceObj::C_HEAP> {\n+                             ResourceObj::C_HEAP,\n+                             mtClassShared,\n+                             LambdaProxyClassKey::DUMPTIME_HASH,\n+                             LambdaProxyClassKey::DUMPTIME_EQUALS> {\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,1 @@\n+      256, ResourceObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2120,0 +2120,1 @@\n+                            256, ResourceObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,4 +100,0 @@\n-  static bool oop_equals(oop const& s1, oop const& s2) {\n-    return s1 == s2;\n-  }\n-\n@@ -119,1 +115,2 @@\n-      ClassLoaderStatsClosure::oop_hash, ClassLoaderStatsClosure::oop_equals> StatsTable;\n+                            256, ResourceObj::RESOURCE_AREA, mtInternal,\n+                            ClassLoaderStatsClosure::oop_hash> StatsTable;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -375,2 +375,0 @@\n-  primitive_hash<const ModuleEntry*>,\n-  primitive_equals<const ModuleEntry*>,\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,2 +200,0 @@\n-  primitive_hash<const PackageEntry*>,\n-  primitive_equals<const PackageEntry*>,\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -427,2 +427,0 @@\n-  primitive_hash<Symbol*>,\n-  primitive_equals<Symbol*>,\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -274,2 +274,1 @@\n-typedef ResourceHashtable<int, sig_as_verification_types*,\n-                          primitive_hash<int>, primitive_equals<int>, 1007>\n+typedef ResourceHashtable<int, sig_as_verification_types*, 1007>\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2230,2 +2230,4 @@\n-  typedef ResourceHashtable<DependencySignature, int, &DependencySignature::hash,\n-                            &DependencySignature::equals, 11027> DepTable;\n+  typedef ResourceHashtable<DependencySignature, int, 11027,\n+                            ResourceObj::RESOURCE_AREA, mtInternal,\n+                            &DependencySignature::hash,\n+                            &DependencySignature::equals> DepTable;\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -169,6 +169,0 @@\n-    static unsigned hash(const address& a) {\n-      return primitive_hash<address>(a);\n-    }\n-    static bool equals(const address& a0, const address& a1) {\n-      return primitive_equals<address>(a0, a1);\n-    }\n@@ -196,2 +190,0 @@\n-      SourceFileInfo::hash,\n-      SourceFileInfo::equals,\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -289,1 +289,3 @@\n-  ResourceHashtable<const char*, JVMCIObject, &CompilerToVM::cstring_hash, &CompilerToVM::cstring_equals> strings;\n+  ResourceHashtable<const char*, JVMCIObject,\n+                    256, ResourceObj::RESOURCE_AREA, mtInternal,\n+                    &CompilerToVM::cstring_hash, &CompilerToVM::cstring_equals> strings;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,2 +113,0 @@\n-                          primitive_hash<LogFileOutput*>,\n-                          primitive_equals<LogFileOutput*>,\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,4 +186,0 @@\n-  static bool ptr_equals(void * const& s1, void * const& s2) {\n-    return s1 == s2;\n-  }\n-\n@@ -197,3 +193,3 @@\n-  typedef ResourceHashtable<void *, int, &ThreadScanHashtable::ptr_hash,\n-                            &ThreadScanHashtable::ptr_equals, 1031,\n-                            ResourceObj::C_HEAP, mtThread> PtrTable;\n+  typedef ResourceHashtable<void *, int, 1031,\n+                            ResourceObj::C_HEAP, mtThread,\n+                            &ThreadScanHashtable::ptr_hash> PtrTable;\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    K, V, HASH, EQUALS, ALLOC_TYPE, MEM_TYPE> {\n+    K, V, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS> {\n@@ -85,1 +85,1 @@\n-                                     K, V, HASH, EQUALS, ALLOC_TYPE, MEM_TYPE>;\n+                                     K, V, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS>;\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,2 +49,0 @@\n-    unsigned (*HASH)  (K const&),\n-    bool     (*EQUALS)(K const&, K const&),\n@@ -52,1 +50,3 @@\n-    MEMFLAGS MEM_TYPE\n+    MEMFLAGS MEM_TYPE,\n+    unsigned (*HASH)  (K const&),\n+    bool     (*EQUALS)(K const&, K const&)\n@@ -235,2 +235,0 @@\n-    unsigned (*HASH)  (K const&)           = primitive_hash<K>,\n-    bool     (*EQUALS)(K const&, K const&) = primitive_equals<K>,\n@@ -239,1 +237,3 @@\n-    MEMFLAGS MEM_TYPE = mtInternal\n+    MEMFLAGS MEM_TYPE = mtInternal,\n+    unsigned (*HASH)  (K const&)           = primitive_hash<K>,\n+    bool     (*EQUALS)(K const&, K const&) = primitive_equals<K>\n@@ -243,1 +243,1 @@\n-    K, V, HASH, EQUALS, ALLOC_TYPE, MEM_TYPE> {\n+    K, V, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS> {\n@@ -247,1 +247,1 @@\n-                                              K, V, HASH, EQUALS, ALLOC_TYPE, MEM_TYPE>() {}\n+                                              K, V, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS>() {}\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-      ResourceHashtable<K, V, HASH, EQUALS, SIZE, ALLOC_TYPE, MEM_TYPE> rh;\n+      ResourceHashtable<K, V, SIZE, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS> rh;\n@@ -211,1 +211,1 @@\n-      ResourceHashtable<K, V, HASH, EQUALS, SIZE, ALLOC_TYPE, MEM_TYPE> rh;\n+      ResourceHashtable<K, V, SIZE, ALLOC_TYPE, MEM_TYPE, HASH, EQUALS> rh;\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}