{"files":[{"patch":"@@ -1271,1 +1271,2 @@\n-bool LoadNode::has_reinterpret_variant() {\n+bool LoadNode::has_reinterpret_variant(const Type* rt) {\n+  BasicType bt = rt->basic_type();\n@@ -1273,4 +1274,4 @@\n-    case Op_LoadI: return true;\n-    case Op_LoadL: return true;\n-    case Op_LoadF: return true;\n-    case Op_LoadD: return true;\n+    case Op_LoadI: return (bt == T_FLOAT);\n+    case Op_LoadL: return (bt == T_DOUBLE);\n+    case Op_LoadF: return (bt == T_INT);\n+    case Op_LoadD: return (bt == T_LONG);\n@@ -1282,12 +1283,3 @@\n-Node* LoadNode::convert_to_reinterpret_load(PhaseGVN& gvn) {\n-  assert(has_reinterpret_variant(), \"no reinterpret variant: %s\", Name());\n-  BasicType bt = T_ILLEGAL;\n-  const Type* rt = NULL;\n-  switch (Opcode()) {\n-    case Op_LoadI: bt = T_FLOAT;  rt = Type::FLOAT;    break;\n-    case Op_LoadL: bt = T_DOUBLE; rt = Type::DOUBLE;   break;\n-    case Op_LoadF: bt = T_INT;    rt = TypeInt::INT;   break;\n-    case Op_LoadD: bt = T_LONG;   rt = TypeLong::LONG; break;\n-    default:\n-      return NULL;\n-  }\n+Node* LoadNode::convert_to_reinterpret_load(PhaseGVN& gvn, const Type* rt) {\n+  BasicType bt = rt->basic_type();\n+  assert(has_reinterpret_variant(rt), \"no reinterpret variant: %s %s\", Name(), type2name(bt));\n@@ -1304,1 +1296,2 @@\n-bool StoreNode::has_reinterpret_variant() {\n+bool StoreNode::has_reinterpret_variant(const Type* vt) {\n+  BasicType bt = vt->basic_type();\n@@ -1306,4 +1299,4 @@\n-    case Op_StoreI: return true;\n-    case Op_StoreL: return true;\n-    case Op_StoreF: return true;\n-    case Op_StoreD: return true;\n+    case Op_StoreI: return (bt == T_FLOAT);\n+    case Op_StoreL: return (bt == T_DOUBLE);\n+    case Op_StoreF: return (bt == T_INT);\n+    case Op_StoreD: return (bt == T_LONG);\n@@ -1315,11 +1308,3 @@\n-Node* StoreNode::convert_to_reinterpret_store(PhaseGVN& gvn, Node* val) {\n-  assert(has_reinterpret_variant(), \"no reinterpret variant: %s, \", Name());\n-  BasicType bt = T_ILLEGAL;\n-  switch (Opcode()) {\n-    case Op_StoreI: bt = T_FLOAT;  break;\n-    case Op_StoreL: bt = T_DOUBLE; break;\n-    case Op_StoreF: bt = T_INT;    break;\n-    case Op_StoreD: bt = T_LONG;   break;\n-    default:\n-      return NULL;\n-  }\n+Node* StoreNode::convert_to_reinterpret_store(PhaseGVN& gvn, Node* val, const Type* vt) {\n+  BasicType bt = vt->basic_type();\n+  assert(has_reinterpret_variant(vt), \"no reinterpret variant: %s %s\", Name(), type2name(bt));\n@@ -2619,0 +2604,1 @@\n+  Node* value   = in(MemNode::ValueIn);\n@@ -2682,5 +2668,10 @@\n-  if (in(MemNode::ValueIn)->is_Move() && has_reinterpret_variant()) {\n-    if (phase->C->post_loop_opts_phase()) {\n-      return convert_to_reinterpret_store(*phase, in(MemNode::ValueIn)->in(1));\n-    } else {\n-      phase->C->record_for_post_loop_opts_igvn(this);\n+  \/\/ Fold reinterpret cast into memory operation:\n+  \/\/    StoreX mem (MoveY2X v) => StoreY mem v\n+  if (value->is_Move()) {\n+    const Type* vt = value->in(1)->bottom_type();\n+    if (has_reinterpret_variant(vt)) {\n+      if (phase->C->post_loop_opts_phase()) {\n+        return convert_to_reinterpret_store(*phase, value->in(1), vt);\n+      } else {\n+        phase->C->record_for_post_loop_opts_igvn(this); \/\/ attempt the transformation once loop opts are over\n+      }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":29,"deletions":38,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -285,2 +285,2 @@\n-  bool  has_reinterpret_variant();\n-  Node* convert_to_reinterpret_load(PhaseGVN& gvn);\n+  bool  has_reinterpret_variant(const Type* rt);\n+  Node* convert_to_reinterpret_load(PhaseGVN& gvn, const Type* rt);\n@@ -640,2 +640,2 @@\n-  bool  has_reinterpret_variant();\n-  Node* convert_to_reinterpret_store(PhaseGVN& gvn, Node* val);\n+  bool  has_reinterpret_variant(const Type* vt);\n+  Node* convert_to_reinterpret_store(PhaseGVN& gvn, Node* val, const Type* vt);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -359,0 +359,2 @@\n+    \/\/ Fold reinterpret cast into memory operation:\n+    \/\/    MoveX2Y (LoadX mem) => LoadY mem\n@@ -360,5 +362,8 @@\n-    if (ld != NULL && (ld->outcnt() == 1) && ld->has_reinterpret_variant()) {\n-      if (phase->C->post_loop_opts_phase()) {\n-        return ld->convert_to_reinterpret_load(*phase);\n-      } else {\n-        phase->C->record_for_post_loop_opts_igvn(this);\n+    if (ld != NULL && (ld->outcnt() == 1)) { \/\/ replace only\n+      const Type* rt = bottom_type();\n+      if (ld->has_reinterpret_variant(rt)) {\n+        if (phase->C->post_loop_opts_phase()) {\n+          return ld->convert_to_reinterpret_load(*phase, rt);\n+        } else {\n+          phase->C->record_for_post_loop_opts_igvn(this); \/\/ attempt the transformation once loop opts are over\n+        }\n@@ -373,0 +378,1 @@\n+    \/\/ Back-to-back moves: MoveX2Y (MoveY2X v) => v\n@@ -374,1 +380,1 @@\n-    return in(1)->in(1); \/\/ back-to-back moves\n+    return in(1)->in(1);\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -103,1 +103,3 @@\n-  MoveNode(Node* value) : Node(NULL, value) {}\n+  MoveNode(Node* value) : Node(NULL, value) {\n+    init_class_id(Class_Move);\n+  }\n@@ -108,1 +110,0 @@\n-\/\/  virtual const Type* Value(PhaseGVN* phase) const;\n@@ -113,3 +114,1 @@\n-  MoveI2FNode(Node* value) : MoveNode(value) {\n-    init_class_id(Class_Move);\n-  }\n+  MoveI2FNode(Node* value) : MoveNode(value) {}\n@@ -125,3 +124,1 @@\n-  MoveL2DNode(Node* value) : MoveNode(value) {\n-    init_class_id(Class_Move);\n-  }\n+  MoveL2DNode(Node* value) : MoveNode(value) {}\n@@ -137,3 +134,1 @@\n-  MoveF2INode(Node* value) : MoveNode(value) {\n-    init_class_id(Class_Move);\n-  }\n+  MoveF2INode(Node* value) : MoveNode(value) {}\n@@ -149,3 +144,1 @@\n-  MoveD2LNode(Node* value) : MoveNode(value) {\n-    init_class_id(Class_Move);\n-  }\n+  MoveD2LNode(Node* value) : MoveNode(value) {}\n","filename":"src\/hotspot\/share\/opto\/movenode.hpp","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"}]}