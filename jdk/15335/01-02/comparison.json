{"files":[{"patch":"@@ -54,1 +54,1 @@\n-public class StretchedFontTest {\n+public final class StretchedFontTest {\n@@ -58,0 +58,6 @@\n+    private static final Color BACKGROUND = Color.WHITE;\n+    private static final Color[] FOREGROUNDS = {\n+            new Color(0xFF000000, true),\n+            new Color(0x7F000000, true)\n+    };\n+\n@@ -90,1 +96,15 @@\n-                     .map(hint -> testFont(font, hint));\n+                     .flatMap(hint -> testFont(font, hint));\n+    }\n+\n+    \/**\n+     * Tests the font with the specified text antialiasing hint and a set of\n+     * foreground colors.\n+     *\n+     * @param font the font to test\n+     * @param hint the text antialiasing hint to test\n+     * @return a stream of test results\n+     * @see #testFont(Font, Object, Color)\n+     *\/\n+    private static Stream<String> testFont(final Font font, final Object hint) {\n+        return Stream.of(FOREGROUNDS)\n+                     .map(foreground -> testFont(font, hint, foreground));\n@@ -94,2 +114,3 @@\n-     * Tests the font with the specified text antialiasing hint.\n-     * In case of failure, it saves the rendered image to a file.\n+     * Tests the font with the specified text antialiasing hint and\n+     * foreground color. In case of failure, it saves the rendered\n+     * image to a file.\n@@ -99,0 +120,1 @@\n+     * @param foreground the foreground color to use\n@@ -100,2 +122,2 @@\n-     *         a {@code String} with the font family name and the value of\n-     *         the rendering hint\n+     *         a {@code String} with the font family name, the value of\n+     *         the rendering hint and the color in hex\n@@ -103,1 +125,3 @@\n-    private static String testFont(final Font font, final Object hint) {\n+    private static String testFont(final Font font,\n+                                   final Object hint,\n+                                   final Color foreground) {\n@@ -110,1 +134,1 @@\n-            g2d.setColor(Color.WHITE);\n+            g2d.setColor(BACKGROUND);\n@@ -114,1 +138,1 @@\n-            g2d.setColor(Color.BLACK);\n+            g2d.setColor(foreground);\n@@ -126,2 +150,3 @@\n-        saveImage(image, fontName + \"-\" + hintValue);\n-        return \"Font: \" + fontName + \", Hint: \" + hintValue;\n+        String hexColor = String.format(\"0x%08x\", foreground.getRGB());\n+        saveImage(image, fontName + \"-\" + hintValue + \"-\" + hexColor);\n+        return \"Font: \" + fontName + \", Hint: \" + hintValue + \", Color: \" + hexColor;\n@@ -133,2 +158,2 @@\n-     * If the right half of the image contains only white pixels,\n-     * the hieroglyph isn't stretched correctly\n+     * If the right half of the image contains only pixels of the background\n+     * color, the hieroglyph isn't stretched correctly\n@@ -140,1 +165,2 @@\n-     *         white pixels, which means the hieroglyph isn't stretched.\n+     *         background-colored pixels, which means the hieroglyph isn't\n+     *         stretched.\n@@ -147,2 +173,2 @@\n-                if (image.getRGB(x, y) != Color.WHITE.getRGB()) {\n-                    \/\/ Any other color but white means the glyph is stretched\n+                if (image.getRGB(x, y) != BACKGROUND.getRGB()) {\n+                    \/\/ Any other color but background means the glyph is stretched\n@@ -154,1 +180,1 @@\n-        \/\/ Only white pixels on the right side of the image,\n+        \/\/ The right side of the image is filled with the background color only,\n","filename":"test\/jdk\/java\/awt\/font\/FontScaling\/StretchedFontTest.java","additions":43,"deletions":17,"binary":false,"changes":60,"status":"modified"}]}