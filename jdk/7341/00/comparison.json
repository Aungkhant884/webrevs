{"files":[{"patch":"@@ -374,1 +374,4 @@\n-  return MemoryUsage(InitialHeapSize, used(), capacity(), max_capacity());\n+  return MemoryUsage(MIN2(InitialHeapSize, capacity()),\n+                     used(),\n+                     capacity(),\n+                     max_capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=Serial\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.Serial\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UseSerialGC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+\/**\n+ * @test id=Parallel\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.Parallel\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UseParallelGC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+\/**\n+ * @test id=G1\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.G1\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UseG1GC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+\/**\n+ * @test id=Shenandoah\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UseShenandoahGC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+\/**\n+ * @test id=Z\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.Z\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UseZGC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+\/**\n+ * @test id=Epsilon\n+ * @bug 8281254\n+ * @summary Test memory beans report Init == Max, when Xmx == Xms\n+ * @requires vm.gc.Epsilon\n+ * @modules java.management\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xms76m -Xmx76m TestInitMaxMemoryMXBeans\n+ *\/\n+\n+import java.lang.management.*;\n+\n+public class TestInitMaxMemoryMXBeans {\n+    public static void main(String[] args) throws Exception {\n+        MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n+        long heapInit = memoryMXBean.getHeapMemoryUsage().getInit();\n+        long heapMax = memoryMXBean.getHeapMemoryUsage().getMax();\n+\n+        if (heapInit != heapMax) {\n+            throw new IllegalStateException(\"Discrepancy: init = \" + heapInit + \", max = \" + heapMax);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestInitMaxMemoryMXBeans.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}