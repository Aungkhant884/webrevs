{"files":[{"patch":"@@ -1299,0 +1299,5 @@\n+WB_ENTRY(jboolean, WB_IsDefaultVMFlag(JNIEnv* env, jobject o, jstring name))\n+  const JVMFlag* flag = getVMFlag(thread, env, name);\n+  return (flag != nullptr) && flag->is_default();\n+WB_END\n+\n@@ -2696,0 +2701,1 @@\n+  {CC\"isDefaultVMFlag\",    CC\"(Ljava\/lang\/String;)Z\", (void*)&WB_IsDefaultVMFlag},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    vm.gc.ZGenerational \\\n+    vm.gc.ZSinglegen \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n@@ -46,1 +46,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational & (vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\")\n+ * @requires vm.gc.ZGenerational & (vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\")\n@@ -102,1 +102,1 @@\n-        test.addFlags(\"-XX:+UseZGC\", \"-XX:+UnlockExperimentalVMOptions\",\n+        test.addFlags(\"-XX:+UseZGC\", \"-XX:+ZGenerational\", \"-XX:+UnlockExperimentalVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=ZDebug\n+ * @test id=ZSinglegenDebug\n@@ -30,1 +30,1 @@\n- * @requires vm.gc.Z & vm.debug\n+ * @requires vm.gc.ZSinglegen & vm.debug\n@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:+UseZGC\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational\n@@ -41,1 +41,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -46,1 +46,1 @@\n- * @requires vm.gc.Z & !vm.debug\n+ * @requires vm.gc.ZSinglegen & !vm.debug\n@@ -48,1 +48,33 @@\n- * @run main\/othervm -XX:+UseZGC\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:ZCollectionInterval=1\n+ *                   -XX:-CreateCoredumpOnCrash\n+ *                   -XX:CompileCommand=dontinline,*::mergeImpl*\n+ *                   compiler.gcbarriers.UnsafeIntrinsicsTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerationalDebug\n+ * @key randomness\n+ * @bug 8059022 8271855\n+ * @modules java.base\/jdk.internal.misc:+open\n+ * @summary Validate barriers after Unsafe getReference, CAS and swap (GetAndSet)\n+ * @requires vm.gc.ZGenerational & vm.debug\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+ZVerifyOops -XX:ZCollectionInterval=1\n+ *                   -XX:-CreateCoredumpOnCrash\n+ *                   -XX:CompileCommand=dontinline,*::mergeImpl*\n+ *                   compiler.gcbarriers.UnsafeIntrinsicsTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @key randomness\n+ * @bug 8059022 8271855\n+ * @modules java.base\/jdk.internal.misc:+open\n+ * @summary Validate barriers after Unsafe getReference, CAS and swap (GetAndSet)\n+ * @requires vm.gc.ZGenerational & !vm.debug\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/UnsafeIntrinsicsTest.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -27,1 +27,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -31,2 +31,13 @@\n- * @run main\/othervm -XX:+UseZGC compiler.loopopts.TestRangeCheckPredicatesControl\n- * @run main\/othervm -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:+StressGCM compiler.loopopts.TestRangeCheckPredicatesControl\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational compiler.loopopts.TestRangeCheckPredicatesControl\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:+StressGCM compiler.loopopts.TestRangeCheckPredicatesControl\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @key stress randomness\n+ * @requires vm.gc.ZGenerational\n+ * @bug 8237859\n+ * @summary A LoadP node has a wrong control input (too early) which results in an out-of-bounds read of an object array with ZGC.\n+ *\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational compiler.loopopts.TestRangeCheckPredicatesControl\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:+StressGCM compiler.loopopts.TestRangeCheckPredicatesControl\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRangeCheckPredicatesControl.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -52,1 +52,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -54,1 +54,12 @@\n- * @run driver TestNoWarningLoopStripMiningIterSet Z\n+ * @run driver TestNoWarningLoopStripMiningIterSet Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @bug 8241486\n+ * @summary G1\/Z give warning when using LoopStripMiningIter and turn off LoopStripMiningIter (0)\n+ * @requires vm.flagless\n+ * @requires vm.flavor == \"server\" & !vm.graal.enabled\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @run driver TestNoWarningLoopStripMiningIterSet Z -XX:+ZGenerational\n@@ -98,4 +109,13 @@\n-        testWith(output -> output.shouldNotContain(CLSOffLSMGreaterZero), \"should have CLS and LSM enabled\", true, 100, \"-XX:LoopStripMiningIter=100\", gc);\n-        testWith(output -> output.shouldContain(CLSOffLSMGreaterZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=100\", gc);\n-        testWith(output -> output.shouldContain(CLSOnLSMEqualZero), \"should have CLS and LSM enabled\", true, 1, \"-XX:LoopStripMiningIter=0\", gc);\n-        testWith(output -> output.shouldNotContain(CLSOnLSMEqualZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=0\", gc);\n+        if (args.length > 1) {\n+            String extraVMArg = args[1];\n+            testWith(output -> output.shouldNotContain(CLSOffLSMGreaterZero), \"should have CLS and LSM enabled\", true, 100, \"-XX:LoopStripMiningIter=100\", gc, extraVMArg);\n+            testWith(output -> output.shouldContain(CLSOffLSMGreaterZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=100\", gc, extraVMArg);\n+            testWith(output -> output.shouldContain(CLSOnLSMEqualZero), \"should have CLS and LSM enabled\", true, 1, \"-XX:LoopStripMiningIter=0\", gc, extraVMArg);\n+            testWith(output -> output.shouldNotContain(CLSOnLSMEqualZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=0\", gc, extraVMArg);\n+        } else {\n+            testWith(output -> output.shouldNotContain(CLSOffLSMGreaterZero), \"should have CLS and LSM enabled\", true, 100, \"-XX:LoopStripMiningIter=100\", gc);\n+            testWith(output -> output.shouldContain(CLSOffLSMGreaterZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=100\", gc);\n+            testWith(output -> output.shouldContain(CLSOnLSMEqualZero), \"should have CLS and LSM enabled\", true, 1, \"-XX:LoopStripMiningIter=0\", gc);\n+            testWith(output -> output.shouldNotContain(CLSOnLSMEqualZero), \"should have CLS and LSM disabled\", false, 0, \"-XX:-UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=0\", gc);\n+\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestNoWarningLoopStripMiningIterSet.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -37,1 +37,14 @@\n- * @test\n+ * @test id=ZSinglegen\n+ * @bug 8273456\n+ * @summary Test that ttyLock is ranked above StackWatermark_lock\n+ * @requires !vm.graal.enabled & vm.gc.ZSinglegen\n+ * @run main\/othervm -XX:-BackgroundCompilation -Xmx128M -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack\n+ *      -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::main\n+ *      -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::m9_1\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseZGC -XX:-ZGenerational -XX:+LogCompilation -XX:+PrintDeoptimizationDetails -XX:+TraceDeoptimization -XX:+Verbose\n+ *      compiler.uncommontrap.TestDeoptOOM\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n@@ -40,1 +53,1 @@\n- * @requires !vm.graal.enabled & vm.gc.Z\n+ * @requires !vm.graal.enabled & vm.gc.ZGenerational\n@@ -45,1 +58,1 @@\n- *      -XX:+UseZGC -XX:+LogCompilation -XX:+PrintDeoptimizationDetails -XX:+TraceDeoptimization -XX:+Verbose\n+ *      -XX:+UseZGC -XX:+ZGenerational -XX:+LogCompilation -XX:+PrintDeoptimizationDetails -XX:+TraceDeoptimization -XX:+Verbose\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestDeoptOOM.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -41,1 +41,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -45,1 +45,12 @@\n- *      -XX:-TieredCompilation -XX:CICompilerCount=1 -XX:+UseZGC -Xbatch -Xmx256m VectorRebracket128Test\n+ *      -XX:-TieredCompilation -XX:CICompilerCount=1 -XX:+UseZGC -XX:-ZGenerational -Xbatch -Xmx256m VectorRebracket128Test\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @bug 8260473\n+ * @enablePreview\n+ * @requires vm.gc.ZGenerational\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @run testng\/othervm -XX:CompileCommand=compileonly,jdk\/incubator\/vector\/ByteVector.fromMemorySegment\n+ *      -XX:-TieredCompilation -XX:CICompilerCount=1 -XX:+UseZGC -XX:-ZGenerational -Xbatch -Xmx256m VectorRebracket128Test\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorRebracket128Test.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/* @test id=Z\n+\/* @test id=ZSinglegen\n@@ -41,2 +41,1 @@\n- * @requires vm.gc.Z\n- * @requires vm.gc != \"null\"\n+ * @requires vm.gc.ZSinglegen\n@@ -48,1 +47,13 @@\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -XX:-ZGenerational\n+ *      gc.TestReferenceClearDuringReferenceProcessing\n+ *\/\n+\n+\/* @test id=ZGenerational\n+ * @bug 8256517\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceClearDuringReferenceProcessing.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n- * @test id=ZSingleGenMode\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @test id=ZSinglegen\n+ * @requires vm.gc.ZSinglegen\n@@ -70,2 +70,2 @@\n- * @test id=Z\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @test id=ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/TestSystemGC.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @test TestGCBasherWithZ\n+ * @test TestGCBasherWithZGenerational\n@@ -33,1 +33,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n@@ -39,1 +39,1 @@\n- * @test TestGCBasherWithZSingleGenMode\n+ * @test TestGCBasherWithZSinglegen\n@@ -42,1 +42,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n@@ -49,1 +49,1 @@\n- * @test TestGCBasherDeoptWithZ\n+ * @test TestGCBasherDeoptWithZGenerational\n@@ -52,1 +52,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n@@ -61,1 +61,1 @@\n- * @test TestGCBasherDeoptWithZSingleGenMode\n+ * @test TestGCBasherDeoptWithZSinglegen\n@@ -64,1 +64,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithZ.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @test TestGCOldWithZ\n+ * @test TestGCOldWithZGenerational\n@@ -31,1 +31,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n@@ -38,1 +38,1 @@\n- * @test TestGCOldWithZSingleGenMode\n+ * @test TestGCOldWithZSinglegen\n@@ -41,1 +41,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithZ.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication age threshold\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationAgeThreshold.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationFullGC Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationFullGC Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication during full GC\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationFullGC Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationFullGC.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationInterned Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationInterned Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication of interned strings\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationInterned Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationInterned.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationPrintOptions Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationPrintOptions Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication print options\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationPrintOptions Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationPrintOptions.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationTableResize Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationTableResize Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication table resize\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationTableResize Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTableResize.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    private static String selectedGCMode = null;\n@@ -74,0 +75,3 @@\n+        if (args.length > 1) {\n+            selectedGCMode = args[1];\n+        }\n@@ -292,0 +296,3 @@\n+        if (selectedGCMode != null) {\n+            args.add(selectedGCMode);\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n- * @test id=Z\n+ * @test id=ZSinglegen\n@@ -82,1 +82,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -88,1 +88,14 @@\n- * @run driver gc.stringdedup.TestStringDeduplicationYoungGC Z\n+ * @run driver gc.stringdedup.TestStringDeduplicationYoungGC Z -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @summary Test string deduplication during young GC\n+ * @bug 8029075\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationYoungGC Z -XX:+ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationYoungGC.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational & os.family == \"linux\"\n+ * @requires vm.gc.ZSinglegen & os.family == \"linux\"\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestAllocateHeapAt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestAlwaysPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestGarbageCollectorMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestHighUsage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestMemoryMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestMemoryManagerMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z  & !vm.opt.final.ZGenerational & !vm.graal.enabled\n+ * @requires vm.gc.ZSinglegen & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestNoUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestPageCacheFlush.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestRelocateInPlace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestSmallHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational & os.family == \"linux\"\n+ * @requires vm.gc.ZGenerational & os.family == \"linux\"\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestAllocateHeapAt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestAlwaysPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestGarbageCollectorMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestHighUsage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestMemoryMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestMemoryManagerMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational & !vm.graal.enabled\n+ * @requires vm.gc.ZGenerational & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestNoUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestPageCacheFlush.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestRelocateInPlace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestSmallHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n- * @test 8232069 for ZGC\n+ * @test id=ZSinglegen\n+ * @bug 8232069\n@@ -28,1 +29,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -33,1 +34,14 @@\n- * @run driver TestZGCWithCDS\n+ * @run driver TestZGCWithCDS -XX:-ZGenerational\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @bug 8232069\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @requires vm.gc.ZGenerational\n+ * @requires vm.gc.Serial\n+ * @requires vm.gc == null\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestZGCWithCDS -XX:+ZGenerational\n@@ -44,0 +58,1 @@\n+         String zGenerational = args[0];\n@@ -50,0 +65,1 @@\n+                                        zGenerational,\n@@ -58,0 +74,1 @@\n+                         zGenerational,\n@@ -137,0 +154,1 @@\n+                         zGenerational,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestZGCWithCDS.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n- * @test id=custom-cl-zgc\n+ * @test id=custom-cl-zgc-singlegen\n@@ -58,1 +58,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -72,0 +72,17 @@\n+\/**\n+ * @test id=custom-cl-zgc-generational\n+ * @requires vm.cds.custom.loaders\n+ * @requires vm.gc.ZGenerational\n+ * @summary Test dumptime_table entries are removed with zgc eager class unloading\n+ * @bug 8274935\n+ * @library \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n+ * @modules java.base\/jdk.internal.misc\n+ *          jdk.httpserver\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=180 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicLoaderConstraintsTest custom-zgc-generational\n+ *\/\n+\n@@ -104,0 +121,1 @@\n+    static boolean useZGenerational;\n@@ -107,1 +125,2 @@\n-        useZGC = (args.length != 0 && args[0].equals(\"custom-zgc\"));\n+        useZGenerational = (args.length != 0 && args[0].equals(\"custom-zgc-generational\"));\n+        useZGC = useZGenerational || (args.length != 0 && args[0].equals(\"custom-zgc\"));\n@@ -133,1 +152,2 @@\n-            System.out.println(\"errorInDump: \" + errorInDump + \", useCustomLoader: \" + useCustomLoader + \", useZGC: \" + useZGC + \", case: \" + i);\n+            System.out.println(\"errorInDump: \" + errorInDump + \", useCustomLoader: \" + useCustomLoader +\n+                               \", useZGC: \" + useZGC + \", ZGenerational: \" + useZGenerational + \", case: \" + i);\n@@ -147,0 +167,1 @@\n+                    String zGenerational = \"-XX:\" + (useZGenerational ? \"+\" : \"-\") + \"ZGenerational\";\n@@ -149,1 +170,1 @@\n-                                                \"-XX:+UseZGC\", \"-XX:ZCollectionInterval=0.01\",\n+                                                \"-XX:+UseZGC\", zGenerational, \"-XX:ZCollectionInterval=0.01\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/DynamicLoaderConstraintsTest.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -74,2 +74,2 @@\n- * @test id=Z\n- * @requires vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.gc.ZSinglegen\n@@ -82,1 +82,13 @@\n- * @run main\/othervm -XX:+UseZGC HeapDumpCompressedTest\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational HeapDumpCompressedTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @requires vm.gc.ZGenerational\n+ * @summary Test of diagnostic command GC.heap_dump with gzipped output (Z GC)\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational HeapDumpCompressedTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpCompressedTest.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    vm.gc.ZGenerational \\\n+    vm.gc.ZSinglegen \\\n","filename":"test\/jdk\/TEST.ROOT","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -31,4 +31,24 @@\n- * @run main\/othervm -Dsun.java2d.uiScale=1 LargeWindowPaintTest\n- * @run main\/othervm -Dsun.java2d.uiScale=1 -Dsun.java2d.d3d=false LargeWindowPaintTest\n- * @run main\/othervm -XX:+UseZGC -Dsun.java2d.uiScale=1 LargeWindowPaintTest\n- * @run main\/othervm -XX:+UseZGC -Dsun.java2d.uiScale=1 -Dsun.java2d.d3d=false LargeWindowPaintTest\n+ * @run main\/othervm -XX:-UseZGC -Dsun.java2d.uiScale=1 LargeWindowPaintTest\n+ * @run main\/othervm -XX:-UseZGC -Dsun.java2d.uiScale=1 -Dsun.java2d.d3d=false LargeWindowPaintTest\n+ *\/\n+\n+\/*\n+ * @test id=ZSinglegen\n+ * @bug 8240654\n+ * @summary Test painting a large window works\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @requires vm.gc.ZSinglegen\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Dsun.java2d.uiScale=1 LargeWindowPaintTest\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Dsun.java2d.uiScale=1 -Dsun.java2d.d3d=false LargeWindowPaintTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @bug 8240654\n+ * @summary Test painting a large window works\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @requires vm.gc.ZGenerational\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Dsun.java2d.uiScale=1 LargeWindowPaintTest\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Dsun.java2d.uiScale=1 -Dsun.java2d.d3d=false LargeWindowPaintTest\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/LargeWindowPaintTest.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=ZSinglegen\n@@ -30,2 +30,12 @@\n- * @requires vm.gc.Z\n- * @run main\/manual\/othervm -XX:+UseZGC -Dsun.java2d.d3d=false AlphaPrintTest\n+ * @requires vm.gc.ZSinglegen\n+ * @run main\/manual\/othervm -XX:+UseZGC -XX:-ZGenerational -Dsun.java2d.d3d=false AlphaPrintTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @bug 8240654\n+ * @summary Test printing alpha colors - banded printing works with ZGC.\n+ * @key headful printer\n+ * @requires (os.family == \"windows\")\n+ * @requires vm.gc.ZGenerational\n+ * @run main\/manual\/othervm -XX:+UseZGC -XX:+ZGenerational -Dsun.java2d.d3d=false AlphaPrintTest\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/AlphaPrintTest.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.gc != \"Z\"\n@@ -43,1 +44,1 @@\n- * @test id=zgc\n+ * @test id=ZSinglegen\n@@ -46,1 +47,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -58,1 +59,1 @@\n- *   -XX:+UseZGC\n+ *   -XX:+UseZGC -XX:-ZGenerational\n@@ -61,0 +62,21 @@\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @enablePreview\n+ * @requires jdk.foreign.linker != \"UNSUPPORTED\"\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library ..\/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   -Xbatch\n+ *   -XX:+UseZGC -XX:+ZGenerational\n+ *   TestAsyncStackWalk\n+ *\/\n+\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestAsyncStackWalk.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.gc != \"Z\"\n@@ -43,1 +44,1 @@\n- * @test id=zgc\n+ * @test id=ZSinglegen\n@@ -46,1 +47,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZSinglegen\n@@ -58,1 +59,1 @@\n- *   -XX:+UseZGC\n+ *   -XX:+UseZGC -XX:-ZGenerational\n@@ -61,0 +62,21 @@\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @enablePreview\n+ * @requires jdk.foreign.linker != \"UNSUPPORTED\"\n+ * @requires vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @library ..\/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   -Xbatch\n+ *   -XX:+UseZGC -XX:+ZGenerational\n+ *   TestStackWalk\n+ *\/\n+\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm -Xmx32M -Dtest.duration=2 CloseRace\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M -Dtest.duration=2 CloseRace\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/CloseRace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires !vm.debug | vm.gc != \"Z\"\n@@ -32,1 +33,10 @@\n- * @test\n+ * @test id=ZSinglegen\n+ * @requires vm.debug == true & vm.continuations\n+ * @requires vm.gc.ZSinglegen\n+ * @run main\/othervm\/timeout=300 -XX:+UnlockDiagnosticVMOptions\n+ *     -XX:+UseZGC -XX:-ZGenerational\n+ *     -XX:+ZVerifyOops -XX:ZCollectionInterval=0.01 -Xmx1g Skynet\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n@@ -34,1 +44,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZGenerational\n@@ -36,0 +46,1 @@\n+ *     -XX:+UseZGC -XX:+ZGenerational\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/Skynet.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @test\n+ * @test id=ZSinglegen\n@@ -41,1 +41,1 @@\n- * @requires vm.gc == \"Z\" & !vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZSinglegen\n@@ -45,1 +45,1 @@\n- * @run main MemoryTest 2 1\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational MemoryTest 2 1\n@@ -49,1 +49,1 @@\n- * @test\n+ * @test id=ZGenerational\n@@ -53,1 +53,1 @@\n- * @requires vm.gc == \"Z\" & vm.opt.final.ZGenerational\n+ * @requires vm.gc.ZGenerational\n@@ -57,1 +57,1 @@\n- * @run main MemoryTest 4 2\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational MemoryTest 4 2\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/MemoryTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n- * @test id=with_ZGC\n- * @requires vm.gc.Z\n+ * @test id=with_ZGC_Singlegen\n+ * @requires vm.gc.ZSinglegen\n@@ -53,1 +53,9 @@\n- * @run main\/othervm -XX:+UseZGC TypeConverterFactoryMemoryLeakTest\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational TypeConverterFactoryMemoryLeakTest\n+ *\/\n+\n+\/*\n+ * @test id=with_ZGC_Generational\n+ * @requires vm.gc.ZGenerational\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking method handles (Z GC)\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational TypeConverterFactoryMemoryLeakTest\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryMemoryLeakTest.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n- * @test id=with_ZGC\n- * @requires vm.gc.Z\n+ * @test id=with_ZGC_Singlegen\n+ * @requires vm.gc.ZSinglegen\n@@ -53,1 +53,9 @@\n- * @run main\/othervm -XX:+UseZGC TypeConverterFactoryRetentionTests\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational TypeConverterFactoryRetentionTests\n+ *\/\n+\n+\/*\n+ * @test id=with_ZGC_Generational\n+ * @requires vm.gc.ZGenerational\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking class loaders (Z GC)\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational TypeConverterFactoryRetentionTests\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryRetentionTests.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,13 @@\n- * @test\n+ * @test id=ZSinglegen\n+ * @bug 8281544\n+ * @summary Test that ZGC and vectorapi with KNL work together.\n+ * @requires vm.gc.ZSinglegen\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @run testng\/othervm  -XX:-TieredCompilation --add-opens jdk.incubator.vector\/jdk.incubator.vector=ALL-UNNAMED\n+ *                      -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:-ZGenerational -XX:+IgnoreUnrecognizedVMOptions\n+ *                      VectorMaxConversionTests\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n@@ -47,1 +59,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.ZGenerational\n@@ -51,1 +63,1 @@\n- *                      -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions\n+ *                      -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+ZGenerational -XX:+IgnoreUnrecognizedVMOptions\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR & vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n@@ -41,1 +41,1 @@\n- * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestGarbageCollectionEventWithZMajor\n+ * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestGarbageCollectionEventWithZMajor\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestGarbageCollectionEventWithZMajor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @requires vm.hasJFR & vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n@@ -48,1 +48,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestGarbageCollectionEventWithZMinor\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UseZGC  -XX:+ZGenerational -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestGarbageCollectionEventWithZMinor\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestGarbageCollectionEventWithZMinor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR & vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n@@ -41,1 +41,1 @@\n- * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestZOldGarbageCollectionEvent\n+ * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestZOldGarbageCollectionEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestZOldGarbageCollectionEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR & vm.gc.Z & vm.opt.final.ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n@@ -41,1 +41,1 @@\n- * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestZYoungGarbageCollectionEvent\n+ * @run main\/othervm -Xmx50m -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Xlog:gc* jdk.jfr.event.gc.collection.TestZYoungGarbageCollectionEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestZYoungGarbageCollectionEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test TestGCPhaseConcurrent\n+ * @test id=ZGenerational\n@@ -37,2 +37,2 @@\n- * @requires vm.hasJFR & vm.gc.Z & vm.opt.final.ZGenerational\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestGCPhaseConcurrent Z\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestGCPhaseConcurrent Z\n@@ -42,1 +42,1 @@\n- * @test TestGCPhaseConcurrent\n+ * @test id=ZSinglegen\n@@ -45,2 +45,2 @@\n- * @requires vm.hasJFR & vm.gc.Z & !vm.opt.final.ZGenerational\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestGCPhaseConcurrent X\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestGCPhaseConcurrent X\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCPhaseConcurrent.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @test TestZAllocationStallEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -39,1 +39,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestZAllocationStallEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZAllocationStallEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZAllocationStallEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZAllocationStallEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @test TestZPageAllocationEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -39,1 +39,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestZPageAllocationEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZPageAllocationEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZPageAllocationEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZPageAllocationEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @test TestZRelocationSetEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -39,1 +39,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZRelocationSetEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @test TestZRelocationSetGroupEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -39,1 +39,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetGroupEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetGroupEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZRelocationSetGroupEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZRelocationSetGroupEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n- * @test TestZUncommitEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -41,1 +41,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xms32M -Xmx128M -Xlog:gc,gc+heap -XX:+ZUncommit -XX:ZUncommitDelay=1 jdk.jfr.event.gc.detailed.TestZUncommitEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xms32M -Xmx128M -Xlog:gc,gc+heap -XX:+ZUncommit -XX:ZUncommitDelay=1 jdk.jfr.event.gc.detailed.TestZUncommitEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xms32M -Xmx128M -Xlog:gc,gc+heap -XX:+ZUncommit -XX:ZUncommitDelay=1 jdk.jfr.event.gc.detailed.TestZUncommitEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZUncommitEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @test TestZUnmapEvent\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -39,1 +39,9 @@\n- * @run main\/othervm -XX:+UseZGC -Xmx32M jdk.jfr.event.gc.detailed.TestZUnmapEvent\n+ * @run main\/othervm -XX:+UseZGC -XX:-ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZUnmapEvent\n+ *\/\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk \/test\/hotspot\/jtreg\n+ * @run main\/othervm -XX:+UseZGC -XX:+ZGenerational -Xmx32M jdk.jfr.event.gc.detailed.TestZUnmapEvent\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZUnmapEvent.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n- * @test\n+ * @test id=ZSinglegen\n+ * @requires vm.hasJFR & vm.gc.ZSinglegen\n@@ -38,1 +39,0 @@\n- * @requires vm.hasJFR & vm.gc.Z\n@@ -42,1 +42,1 @@\n- * @run main\/othervm  -XX:TLABSize=2k -XX:+UseZGC jdk.jfr.event.oldobject.TestZ\n+ * @run main\/othervm  -XX:TLABSize=2k -XX:+UseZGC -XX:-ZGenerational jdk.jfr.event.oldobject.TestZ\n@@ -44,0 +44,11 @@\n+\n+\/**\n+ * @test id=ZGenerational\n+ * @requires vm.hasJFR & vm.gc.ZGenerational\n+ * @key jfr\n+ * @summary Test leak profiler with ZGC\n+ * @library \/test\/lib \/test\/jdk\n+ * @modules jdk.jfr\/jdk.jfr.internal.test\n+ * @run main\/othervm  -XX:TLABSize=2k -XX:+UseZGC -XX:+ZGenerational jdk.jfr.event.oldobject.TestZ\n+ *\/\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestZ.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n- * @test id=Z\n- * @requires vm.gc.Z\n+ * @test id=ZSinglegen\n+ * @requires vm.gc.ZSinglegen\n@@ -101,1 +101,14 @@\n- * @run main\/othervm\/timeout=240 -XX:+UseZGC BasicJMapTest\n+ * @run main\/othervm\/timeout=240 -XX:+UseZGC -XX:-ZGenerational BasicJMapTest\n+ *\/\n+\n+\/*\n+ * @test id=ZGenerational\n+ * @requires vm.gc.ZGenerational\n+ * @summary Unit test for jmap utility (Z GC)\n+ * @key intermittent\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.hprof.*\n+ * @build jdk.test.lib.hprof.model.*\n+ * @build jdk.test.lib.hprof.parser.*\n+ * @build jdk.test.lib.hprof.util.*\n+ * @run main\/othervm\/timeout=240 -XX:+UseZGC -XX:+ZGenerational BasicJMapTest\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.function.Predicate;\n@@ -297,0 +298,3 @@\n+        Predicate<GC> vmGCProperty = (GC gc) -> (gc.isSupported()\n+                                        && (!isJVMCIEnabled || gc.isSupportedByJVMCICompiler())\n+                                        && (gc.isSelected() || GC.isSelectedErgonomically()));\n@@ -298,4 +302,1 @@\n-            map.put(\"vm.gc.\" + gc.name(),\n-                    () -> \"\" + (gc.isSupported()\n-                            && (!isJVMCIEnabled || gc.isSupportedByJVMCICompiler())\n-                            && (gc.isSelected() || GC.isSelectedErgonomically())));\n+            map.put(\"vm.gc.\" + gc.name(), () -> \"\" + vmGCProperty.test(gc));\n@@ -303,0 +304,11 @@\n+\n+        \/\/ Special handling for ZGC modes\n+        var vmGCZ = vmGCProperty.test(GC.Z);\n+        var genZ = WB.getBooleanVMFlag(\"ZGenerational\");\n+        var genZIsDefault = WB.isDefaultVMFlag(\"ZGenerational\");\n+        \/\/ vm.gc.ZGenerational=true means:\n+        \/\/    vm.gc.Z is true and ZGenerational is either explicitly true, or default\n+        map.put(\"vm.gc.ZGenerational\", () -> \"\" + (vmGCZ && (genZ || genZIsDefault)));\n+        \/\/ vm.gc.ZSinglegen=true means:\n+        \/\/    vm.gc.Z is true and ZGenerational is either explicitly false, or default\n+        map.put(\"vm.gc.ZSinglegen\", () -> \"\" + (vmGCZ && (!genZ || genZIsDefault)));\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -624,0 +624,1 @@\n+  public native boolean isDefaultVMFlag(String name);\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}