{"files":[{"patch":"@@ -1029,1 +1029,0 @@\n-  allocate_dummy_regions();\n@@ -1868,26 +1867,0 @@\n-#ifndef PRODUCT\n-void G1CollectedHeap::allocate_dummy_regions() {\n-  \/\/ Let's fill up most of the region\n-  size_t word_size = HeapRegion::GrainWords - 1024;\n-  \/\/ And as a result the region we'll allocate will be humongous.\n-  guarantee(is_humongous(word_size), \"sanity\");\n-\n-  \/\/ _filler_array_max_size is set to humongous object threshold\n-  \/\/ but temporarily change it to use CollectedHeap::fill_with_object().\n-  AutoModifyRestore<size_t> temporarily(_filler_array_max_size, word_size);\n-\n-  for (uintx i = 0; i < G1DummyRegionsPerGC; ++i) {\n-    \/\/ Let's use the existing mechanism for the allocation\n-    HeapWord* dummy_obj = humongous_obj_allocate(word_size);\n-    if (dummy_obj != NULL) {\n-      MemRegion mr(dummy_obj, word_size);\n-      CollectedHeap::fill_with_object(mr);\n-    } else {\n-      \/\/ If we can't allocate once, we probably cannot allocate\n-      \/\/ again. Let's get out of the loop.\n-      break;\n-    }\n-  }\n-}\n-#endif \/\/ !PRODUCT\n-\n@@ -2771,1 +2744,0 @@\n-  allocate_dummy_regions();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -303,8 +303,0 @@\n-  \/\/ This is a non-product method that is helpful for testing. It is\n-  \/\/ called at the end of a GC and artificially expands the heap by\n-  \/\/ allocating a number of dead regions. This way we can induce very\n-  \/\/ frequent marking cycles and stress the cleanup \/ concurrent\n-  \/\/ cleanup code more (as all the regions that will be allocated by\n-  \/\/ this method will be found dead by the marking cycle).\n-  void allocate_dummy_regions() PRODUCT_RETURN;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -247,5 +247,0 @@\n-  develop(uintx, G1DummyRegionsPerGC, 0,                                    \\\n-          \"The number of dummy regions G1 will allocate at the end of \"     \\\n-          \"each evacuation pause in order to artificially fill up the \"     \\\n-          \"heap and stress the marking implementation.\")                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}