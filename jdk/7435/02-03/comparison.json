{"files":[{"patch":"@@ -320,1 +320,5 @@\n-        Runnable unloader() {\n+        \/*\n+         * Unloader::run method is invoked to unload the native library\n+         * when this class loader becomes phantom reachable.\n+         *\/\n+        private Runnable unloader() {\n@@ -334,0 +338,7 @@\n+\n+        \/*\n+         * Close this native library.\n+         *\/\n+        void close() {\n+            unload(name, isBuiltin, isJNI, handle);\n+        }\n@@ -427,1 +438,1 @@\n-    static void acquireNativeLibraryLock(String libraryName) {\n+    private static void acquireNativeLibraryLock(String libraryName) {\n@@ -442,1 +453,1 @@\n-    static void releaseNativeLibraryLock(String libraryName) {\n+    private static void releaseNativeLibraryLock(String libraryName) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-     * {@snipplet\n+     * {@snippet\n@@ -116,12 +116,2 @@\n-        acquireNativeLibraryLock(pathname);\n-        try {\n-            \/\/ find if this library has already been loaded and registered\n-            NativeLibrary cached = libraries.get(pathname);\n-            if (cached != null) {\n-                return cached;\n-            }\n-\n-            NativeLibraryImpl lib = new NativeLibraryImpl(caller, pathname, false, false);\n-            if (!lib.open()) {\n-                return null;    \/\/ fail to open the native library\n-            }\n+         return libraries.computeIfAbsent(pathname, this::get);\n+    }\n@@ -129,4 +119,4 @@\n-            libraries.put(pathname, lib);\n-            return lib;\n-        } finally {\n-            releaseNativeLibraryLock(pathname);\n+    private NativeLibraryImpl get(String pathname) {\n+        NativeLibraryImpl lib = new NativeLibraryImpl(caller, pathname, false, false);\n+        if (!lib.open()) {\n+            return null;    \/\/ fail to open the native library\n@@ -134,0 +124,1 @@\n+        return lib;\n@@ -137,1 +128,1 @@\n-     * Unloads the given native library\n+     * Unloads the given native library.\n@@ -141,10 +132,2 @@\n-        acquireNativeLibraryLock(lib.name());\n-        try {\n-            NativeLibraryImpl nl = libraries.remove(lib.name());\n-            if (nl != lib) {\n-                throw new IllegalArgumentException(lib.name() + \" not loaded by this RawNativeLibraries instance\");\n-            }\n-            \/\/ unload the native library and also remove from the global name registry\n-            nl.unloader().run();\n-        } finally {\n-            releaseNativeLibraryLock(lib.name());\n+        if (!libraries.remove(lib.name(), lib)) {\n+            throw new IllegalArgumentException(lib.name() + \" not loaded by this RawNativeLibraries instance\");\n@@ -152,0 +135,2 @@\n+        NativeLibraryImpl nl = (NativeLibraryImpl)lib;\n+        nl.close();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/RawNativeLibraries.java","additions":13,"deletions":28,"binary":false,"changes":41,"status":"modified"}]}