{"files":[{"patch":"@@ -45,1 +45,1 @@\n-                                             MemoryType type) :\n+                                             MEMFLAGS type) :\n@@ -70,1 +70,1 @@\n-                                      MemoryType type) :\n+                                      MEMFLAGS type) :\n@@ -133,1 +133,1 @@\n-                                       MemoryType type) :\n+                                       MEMFLAGS type) :\n@@ -243,1 +243,1 @@\n-                                                         MemoryType type) :\n+                                                         MEMFLAGS type) :\n@@ -340,1 +340,1 @@\n-                                                                 MemoryType type) {\n+                                                                 MEMFLAGS type) {\n@@ -358,1 +358,1 @@\n-                                                            MemoryType type) {\n+                                                            MEMFLAGS type) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  MemoryType _memory_type;\n+  MEMFLAGS _memory_type;\n@@ -58,1 +58,1 @@\n-  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MemoryType type);\n+  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MEMFLAGS type);\n@@ -88,1 +88,1 @@\n-                                              MemoryType type);\n+                                              MEMFLAGS type);\n@@ -95,1 +95,1 @@\n-                                                   MemoryType type);\n+                                                   MEMFLAGS type);\n@@ -109,1 +109,1 @@\n-  MemoryType _type;\n+  MEMFLAGS _type;\n@@ -112,1 +112,1 @@\n-  G1RegionToHeteroSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MemoryType type);\n+  G1RegionToHeteroSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MEMFLAGS type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-enum MemoryType {\n+enum class MEMFLAGS {\n@@ -160,1 +160,2 @@\n-typedef MemoryType MEMFLAGS;\n+#define MEMORY_TYPE_SHORTNAME(type, human_readable) \\\n+  constexpr MEMFLAGS type = MEMFLAGS::type;\n@@ -162,0 +163,5 @@\n+\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MEMFLAGS::mtGC.\n+MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME)\n+\n+\/\/ Make an int version of the sentinel end value.\n+constexpr int mt_number_of_types = static_cast<int>(MEMFLAGS::mt_number_of_types);\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -148,6 +148,0 @@\n-  inline MallocMemory* by_index(int index) {\n-    assert(index >= 0, \"Index out of bound\");\n-    assert(index < mt_number_of_types, \"Index out of bound\");\n-    return &_malloc[index];\n-  }\n-\n@@ -272,1 +266,1 @@\n-    _flags = flags;\n+    _flags = NMTUtil::flag_to_index(flags);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    res = (int)(s1.flag() - s2.flag());\n+    res = (int)(NMTUtil::flag_to_index(s1.flag()) - NMTUtil::flag_to_index(s2.flag()));\n","filename":"src\/hotspot\/share\/services\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    assert((flag >= 0 && flag < (int)mt_number_of_types) && flag != mtNone,\n+    assert(NMTUtil::flag_is_valid(flag) && flag != mtNone,\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,11 @@\n+  \/\/ Check if index is a valid MEMFLAGS enum value\n+  static inline bool flag_index_is_valid(int index) {\n+    return index >= 0 && index < mt_number_of_types;\n+  }\n+\n+  \/\/ Check if flag value is a valid MEMFLAGS enum value\n+  static inline bool flag_is_valid(MEMFLAGS flag) {\n+    const int index = static_cast<int>(flag);\n+    return flag_index_is_valid(index);\n+  }\n+\n@@ -52,3 +63,2 @@\n-    const int index = flag & 0xff;\n-    assert(index >= 0 && index < (int)mt_number_of_types, \"Index out of bounds\");\n-    return index;\n+    assert(flag_is_valid(flag), \"Invalid flag\");\n+    return static_cast<int>(flag);\n@@ -64,2 +74,2 @@\n-    assert(index >= 0 && index < (int) mt_number_of_types, \"Index out of bounds\");\n-    return (MEMFLAGS)index;\n+    assert(flag_index_is_valid(index), \"Invalid flag\");\n+    return static_cast<MEMFLAGS>(index);\n","filename":"src\/hotspot\/share\/services\/nmtCommon.hpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -100,6 +100,0 @@\n-  inline VirtualMemory* by_index(int index) {\n-    assert(index >= 0, \"Index out of bound\");\n-    assert(index < mt_number_of_types, \"Index out of bound\");\n-    return &_virtual_memory[index];\n-  }\n-\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}