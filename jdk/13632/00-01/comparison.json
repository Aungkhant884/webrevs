{"files":[{"patch":"@@ -2049,2 +2049,2 @@\n-            \/\/ pre-emptively check for overflow as put(int,CharBuffer,int,int)\n-            \/\/ would throw IndexOutOfBoundsException instead\n+            \/\/ the append method throws BufferOverflowException when\n+            \/\/ there is insufficient space in the buffer\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 5067405 8306623\n+ * @bug 5067405\n@@ -42,1 +42,0 @@\n-import java.nio.BufferOverflowException;\n@@ -47,1 +46,1 @@\n-    void init(Appendable a, CharSequence csq, String exp);\n+    void init(Appendable a, String csq, String exp);\n@@ -111,1 +110,1 @@\n-            public void init(Appendable bw, CharSequence csq, String exp) {\n+            public void init(Appendable bw, String csn, String exp) {\n@@ -117,1 +116,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -132,1 +131,1 @@\n-            public void init(Appendable cw, CharSequence csq, String exp) {\n+            public void init(Appendable cw, String csn, String exp) {\n@@ -134,1 +133,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -148,1 +147,1 @@\n-            public void init(Appendable fw, CharSequence csq, String exp) {\n+            public void init(Appendable fw, String csn, String exp) {\n@@ -154,1 +153,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -184,1 +183,1 @@\n-            public void init(Appendable osw, CharSequence csq, String exp) {\n+            public void init(Appendable osw, String csn, String exp) {\n@@ -190,1 +189,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -204,1 +203,1 @@\n-            public void init(Appendable pw, CharSequence csq, String exp) {\n+            public void init(Appendable pw, String csn, String exp) {\n@@ -206,1 +205,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -221,1 +220,1 @@\n-            public void init(Appendable sw, CharSequence csq, String exp) {\n+            public void init(Appendable sw, String csn, String exp) {\n@@ -223,1 +222,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -236,1 +235,1 @@\n-            public void init(Appendable ps, CharSequence csq, String exp) {\n+            public void init(Appendable ps, String csn, String exp) {\n@@ -238,1 +237,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -253,2 +252,1 @@\n-            private CharSequence csq;\n-            public void init(Appendable cb, CharSequence csq, String exp) {\n+            public void init(Appendable cb, String csn, String exp) {\n@@ -256,2 +254,1 @@\n-                this.csq = csq;\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -263,27 +260,0 @@\n-\n-                \/\/ append() should throw BufferOverflowException\n-                int alen = csq != null ? csq.length() : 0;\n-                try {\n-                    CharBuffer.allocate(alen\/8).append(csq, alen\/4, alen\/2);\n-                } catch (BufferOverflowException expected) {\n-                    \/\/ ignore the BufferOverflowException\n-                } catch (Throwable ex) {\n-                    fail(ex);\n-                }\n-\n-                \/\/ append() should throw IndexOutOfBoundsException\n-                int[][] bounds = new int[][] {\n-                    {-1, alen},         \/\/ negative start\n-                    {0, -1},            \/\/ negative end\n-                    {1, 0},             \/\/ start > end\n-                    {alen\/2, alen + 1}  \/\/ end > alen\n-                };\n-                for (int[] b : bounds) {\n-                    try {\n-                        CharBuffer.allocate(alen + 1).append(csq, b[0], b[1]);\n-                    } catch (IndexOutOfBoundsException expected) {\n-                        \/\/ ignore the IndexOutOfBoundsException\n-                    } catch (Throwable ex) {\n-                        fail(ex);\n-                    }\n-                }\n@@ -300,1 +270,1 @@\n-            public void init(Appendable sb, CharSequence csq, String exp) {\n+            public void init(Appendable sb, String csn, String exp) {\n@@ -302,1 +272,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -316,1 +286,1 @@\n-            public void init(Appendable sb, CharSequence csq, String exp) {\n+            public void init(Appendable sb, String csn, String exp) {\n@@ -318,1 +288,1 @@\n-                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n+                this.csn = csn;\n@@ -338,1 +308,1 @@\n-                           csq,\n+                           csq.getClass().getName(),\n@@ -370,1 +340,1 @@\n-            thunk.init(a.append(null, start, end), (CharSequence)null,\n+            thunk.init(a.append(null, start, end), \"null\",\n","filename":"test\/jdk\/java\/lang\/Appendable\/Basic.java","additions":25,"deletions":55,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -630,0 +630,30 @@\n+        \/\/ 8306623\n+        String str = \"in violet night walking beneath a reign of uncouth stars\";\n+        char[] chars = str.toCharArray();\n+        int cslen = chars.length;\n+        CharSequence[] csqs = new CharSequence[] {\n+            str,\n+            new StringBuffer(str),\n+            new StringBuilder(str),\n+            CharBuffer.wrap(chars),\n+            ByteBuffer.allocateDirect(2*chars.length).asCharBuffer()\n+        };\n+\n+        int[][] bounds = new int[][] {\n+            {-1, cslen},         \/\/ negative start\n+            {0, -1},             \/\/ negative end\n+            {1, 0},              \/\/ start > end\n+            {cslen\/2, cslen + 1} \/\/ end > cslen\n+        };\n+\n+        for (CharSequence csq : csqs) {\n+            \/\/ append() should throw BufferOverflowException\n+            tryCatch(b, BufferOverflowException.class, () ->\n+                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+\n+            \/\/ append() should throw IndexOutOfBoundsException\n+            for (int[] bds : bounds)\n+                tryCatch(b, IndexOutOfBoundsException.class, () ->\n+                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        }\n+        \/\/ end 8306623\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -630,0 +630,30 @@\n+        \/\/ 8306623\n+        String str = \"in violet night walking beneath a reign of uncouth stars\";\n+        char[] chars = str.toCharArray();\n+        int cslen = chars.length;\n+        CharSequence[] csqs = new CharSequence[] {\n+            str,\n+            new StringBuffer(str),\n+            new StringBuilder(str),\n+            CharBuffer.wrap(chars),\n+            ByteBuffer.allocateDirect(2*chars.length).asCharBuffer()\n+        };\n+\n+        int[][] bounds = new int[][] {\n+            {-1, cslen},         \/\/ negative start\n+            {0, -1},             \/\/ negative end\n+            {1, 0},              \/\/ start > end\n+            {cslen\/2, cslen + 1} \/\/ end > cslen\n+        };\n+\n+        for (CharSequence csq : csqs) {\n+            \/\/ append() should throw BufferOverflowException\n+            tryCatch(b, BufferOverflowException.class, () ->\n+                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+\n+            \/\/ append() should throw IndexOutOfBoundsException\n+            for (int[] bds : bounds)\n+                tryCatch(b, IndexOutOfBoundsException.class, () ->\n+                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        }\n+        \/\/ end 8306623\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}