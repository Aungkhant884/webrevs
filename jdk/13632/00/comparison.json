{"files":[{"patch":"@@ -2048,1 +2048,4 @@\n-            int pos = position();\n+            \/\/\n+            \/\/ pre-emptively check for overflow as put(int,CharBuffer,int,int)\n+            \/\/ would throw IndexOutOfBoundsException instead\n+            \/\/\n@@ -2050,0 +2053,6 @@\n+            int pos = position();\n+            int lim = limit();\n+            int rem = (pos <= lim) ? lim - pos : 0;\n+            if (length > rem)\n+                throw new BufferOverflowException();\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 5067405\n+ * @bug 5067405 8306623\n@@ -42,0 +42,1 @@\n+import java.nio.BufferOverflowException;\n@@ -46,1 +47,1 @@\n-    void init(Appendable a, String csq, String exp);\n+    void init(Appendable a, CharSequence csq, String exp);\n@@ -110,1 +111,1 @@\n-            public void init(Appendable bw, String csn, String exp) {\n+            public void init(Appendable bw, CharSequence csq, String exp) {\n@@ -116,1 +117,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -131,1 +132,1 @@\n-            public void init(Appendable cw, String csn, String exp) {\n+            public void init(Appendable cw, CharSequence csq, String exp) {\n@@ -133,1 +134,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -147,1 +148,1 @@\n-            public void init(Appendable fw, String csn, String exp) {\n+            public void init(Appendable fw, CharSequence csq, String exp) {\n@@ -153,1 +154,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -183,1 +184,1 @@\n-            public void init(Appendable osw, String csn, String exp) {\n+            public void init(Appendable osw, CharSequence csq, String exp) {\n@@ -189,1 +190,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -203,1 +204,1 @@\n-            public void init(Appendable pw, String csn, String exp) {\n+            public void init(Appendable pw, CharSequence csq, String exp) {\n@@ -205,1 +206,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -220,1 +221,1 @@\n-            public void init(Appendable sw, String csn, String exp) {\n+            public void init(Appendable sw, CharSequence csq, String exp) {\n@@ -222,1 +223,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -235,1 +236,1 @@\n-            public void init(Appendable ps, String csn, String exp) {\n+            public void init(Appendable ps, CharSequence csq, String exp) {\n@@ -237,1 +238,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -252,1 +253,2 @@\n-            public void init(Appendable cb, String csn, String exp) {\n+            private CharSequence csq;\n+            public void init(Appendable cb, CharSequence csq, String exp) {\n@@ -254,1 +256,2 @@\n-                this.csn = csn;\n+                this.csq = csq;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -260,0 +263,27 @@\n+\n+                \/\/ append() should throw BufferOverflowException\n+                int alen = csq != null ? csq.length() : 0;\n+                try {\n+                    CharBuffer.allocate(alen\/8).append(csq, alen\/4, alen\/2);\n+                } catch (BufferOverflowException expected) {\n+                    \/\/ ignore the BufferOverflowException\n+                } catch (Throwable ex) {\n+                    fail(ex);\n+                }\n+\n+                \/\/ append() should throw IndexOutOfBoundsException\n+                int[][] bounds = new int[][] {\n+                    {-1, alen},         \/\/ negative start\n+                    {0, -1},            \/\/ negative end\n+                    {1, 0},             \/\/ start > end\n+                    {alen\/2, alen + 1}  \/\/ end > alen\n+                };\n+                for (int[] b : bounds) {\n+                    try {\n+                        CharBuffer.allocate(alen + 1).append(csq, b[0], b[1]);\n+                    } catch (IndexOutOfBoundsException expected) {\n+                        \/\/ ignore the IndexOutOfBoundsException\n+                    } catch (Throwable ex) {\n+                        fail(ex);\n+                    }\n+                }\n@@ -270,1 +300,1 @@\n-            public void init(Appendable sb, String csn, String exp) {\n+            public void init(Appendable sb, CharSequence csq, String exp) {\n@@ -272,1 +302,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -286,1 +316,1 @@\n-            public void init(Appendable sb, String csn, String exp) {\n+            public void init(Appendable sb, CharSequence csq, String exp) {\n@@ -288,1 +318,1 @@\n-                this.csn = csn;\n+                this.csn = csq != null ? csq.getClass().getName() : \"null\";\n@@ -308,1 +338,1 @@\n-                           csq.getClass().getName(),\n+                           csq,\n@@ -340,1 +370,1 @@\n-            thunk.init(a.append(null, start, end), \"null\",\n+            thunk.init(a.append(null, start, end), (CharSequence)null,\n","filename":"test\/jdk\/java\/lang\/Appendable\/Basic.java","additions":55,"deletions":25,"binary":false,"changes":80,"status":"modified"}]}