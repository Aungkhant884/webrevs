{"files":[{"patch":"@@ -2048,1 +2048,4 @@\n-            int pos = position();\n+            \/\/\n+            \/\/ the append method throws BufferOverflowException when\n+            \/\/ there is insufficient space in the buffer\n+            \/\/\n@@ -2050,0 +2053,6 @@\n+            int pos = position();\n+            int lim = limit();\n+            int rem = (pos <= lim) ? lim - pos : 0;\n+            if (length > rem)\n+                throw new BufferOverflowException();\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -630,0 +630,30 @@\n+        \/\/ 8306623\n+        String str = \"in violet night walking beneath a reign of uncouth stars\";\n+        char[] chars = str.toCharArray();\n+        int cslen = chars.length;\n+        CharSequence[] csqs = new CharSequence[] {\n+            str,\n+            new StringBuffer(str),\n+            new StringBuilder(str),\n+            CharBuffer.wrap(chars),\n+            ByteBuffer.allocateDirect(2*chars.length).asCharBuffer()\n+        };\n+\n+        int[][] bounds = new int[][] {\n+            {-1, cslen},         \/\/ negative start\n+            {0, -1},             \/\/ negative end\n+            {1, 0},              \/\/ start > end\n+            {cslen\/2, cslen + 1} \/\/ end > cslen\n+        };\n+\n+        for (CharSequence csq : csqs) {\n+            \/\/ append() should throw BufferOverflowException\n+            tryCatch(b, BufferOverflowException.class, () ->\n+                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+\n+            \/\/ append() should throw IndexOutOfBoundsException\n+            for (int[] bds : bounds)\n+                tryCatch(b, IndexOutOfBoundsException.class, () ->\n+                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        }\n+        \/\/ end 8306623\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -630,0 +630,30 @@\n+        \/\/ 8306623\n+        String str = \"in violet night walking beneath a reign of uncouth stars\";\n+        char[] chars = str.toCharArray();\n+        int cslen = chars.length;\n+        CharSequence[] csqs = new CharSequence[] {\n+            str,\n+            new StringBuffer(str),\n+            new StringBuilder(str),\n+            CharBuffer.wrap(chars),\n+            ByteBuffer.allocateDirect(2*chars.length).asCharBuffer()\n+        };\n+\n+        int[][] bounds = new int[][] {\n+            {-1, cslen},         \/\/ negative start\n+            {0, -1},             \/\/ negative end\n+            {1, 0},              \/\/ start > end\n+            {cslen\/2, cslen + 1} \/\/ end > cslen\n+        };\n+\n+        for (CharSequence csq : csqs) {\n+            \/\/ append() should throw BufferOverflowException\n+            tryCatch(b, BufferOverflowException.class, () ->\n+                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+\n+            \/\/ append() should throw IndexOutOfBoundsException\n+            for (int[] bds : bounds)\n+                tryCatch(b, IndexOutOfBoundsException.class, () ->\n+                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        }\n+        \/\/ end 8306623\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}