{"files":[{"patch":"@@ -81,5 +81,5 @@\n-  assert(min_intx ==  (intx)CONST64(0x8000000000000000), \"correct constant\");\n-  assert(max_intx ==  CONST64(0x7FFFFFFFFFFFFFFF), \"correct constant\");\n-  assert(max_uintx == CONST64(0xFFFFFFFFFFFFFFFF), \"correct constant\");\n-  assert( 8 == sizeof( intx),      \"wrong size for basic type\");\n-  assert( 8 == sizeof( jobject),   \"wrong size for basic type\");\n+  static_assert(min_intx ==  (intx)CONST64(0x8000000000000000), \"correct constant\");\n+  static_assert(max_intx ==  CONST64(0x7FFFFFFFFFFFFFFF), \"correct constant\");\n+  static_assert(max_uintx == CONST64(0xFFFFFFFFFFFFFFFF), \"correct constant\");\n+  static_assert( 8 == sizeof( intx),      \"wrong size for basic type\");\n+  static_assert( 8 == sizeof( jobject),   \"wrong size for basic type\");\n@@ -87,5 +87,5 @@\n-  assert(min_intx ==  (intx)0x80000000,  \"correct constant\");\n-  assert(max_intx ==  0x7FFFFFFF,  \"correct constant\");\n-  assert(max_uintx == 0xFFFFFFFF,  \"correct constant\");\n-  assert( 4 == sizeof( intx),      \"wrong size for basic type\");\n-  assert( 4 == sizeof( jobject),   \"wrong size for basic type\");\n+  static_assert(min_intx ==  (intx)0x80000000,  \"correct constant\");\n+  static_assert(max_intx ==  0x7FFFFFFF,  \"correct constant\");\n+  static_assert(max_uintx == 0xFFFFFFFF,  \"correct constant\");\n+  static_assert( 4 == sizeof( intx),      \"wrong size for basic type\");\n+  static_assert( 4 == sizeof( jobject),   \"wrong size for basic type\");\n@@ -93,17 +93,17 @@\n-  assert( (~max_juint) == 0,  \"max_juint has all its bits\");\n-  assert( (~max_uintx) == 0,  \"max_uintx has all its bits\");\n-  assert( (~max_julong) == 0, \"max_julong has all its bits\");\n-  assert( 1 == sizeof( jbyte),     \"wrong size for basic type\");\n-  assert( 2 == sizeof( jchar),     \"wrong size for basic type\");\n-  assert( 2 == sizeof( jshort),    \"wrong size for basic type\");\n-  assert( 4 == sizeof( juint),     \"wrong size for basic type\");\n-  assert( 4 == sizeof( jint),      \"wrong size for basic type\");\n-  assert( 1 == sizeof( jboolean),  \"wrong size for basic type\");\n-  assert( 8 == sizeof( jlong),     \"wrong size for basic type\");\n-  assert( 4 == sizeof( jfloat),    \"wrong size for basic type\");\n-  assert( 8 == sizeof( jdouble),   \"wrong size for basic type\");\n-  assert( 1 == sizeof( u1),        \"wrong size for basic type\");\n-  assert( 2 == sizeof( u2),        \"wrong size for basic type\");\n-  assert( 4 == sizeof( u4),        \"wrong size for basic type\");\n-  assert(wordSize == BytesPerWord, \"should be the same since they're used interchangeably\");\n-  assert(wordSize == HeapWordSize, \"should be the same since they're also used interchangeably\");\n+  static_assert( (~max_juint) == 0,  \"max_juint has all its bits\");\n+  static_assert( (~max_uintx) == 0,  \"max_uintx has all its bits\");\n+  static_assert( (~max_julong) == 0, \"max_julong has all its bits\");\n+  static_assert( 1 == sizeof( jbyte),     \"wrong size for basic type\");\n+  static_assert( 2 == sizeof( jchar),     \"wrong size for basic type\");\n+  static_assert( 2 == sizeof( jshort),    \"wrong size for basic type\");\n+  static_assert( 4 == sizeof( juint),     \"wrong size for basic type\");\n+  static_assert( 4 == sizeof( jint),      \"wrong size for basic type\");\n+  static_assert( 1 == sizeof( jboolean),  \"wrong size for basic type\");\n+  static_assert( 8 == sizeof( jlong),     \"wrong size for basic type\");\n+  static_assert( 4 == sizeof( jfloat),    \"wrong size for basic type\");\n+  static_assert( 8 == sizeof( jdouble),   \"wrong size for basic type\");\n+  static_assert( 1 == sizeof( u1),        \"wrong size for basic type\");\n+  static_assert( 2 == sizeof( u2),        \"wrong size for basic type\");\n+  static_assert( 4 == sizeof( u4),        \"wrong size for basic type\");\n+  static_assert(wordSize == BytesPerWord, \"should be the same since they're used interchangeably\");\n+  static_assert(wordSize == HeapWordSize, \"should be the same since they're also used interchangeably\");\n@@ -158,5 +158,5 @@\n-  assert(is_power_of_2(sizeof(juint)), \"juint must be power of 2\");\n-  assert(is_power_of_2(HeapWordSize), \"HeapWordSize must be power of 2\");\n-  assert((size_t)HeapWordSize >= sizeof(juint),\n-         \"HeapWord should be at least as large as juint\");\n-  assert(sizeof(NULL) == sizeof(char*), \"NULL must be same size as pointer\");\n+  static_assert(is_power_of_2(sizeof(juint)), \"juint must be power of 2\");\n+  static_assert(is_power_of_2(HeapWordSize), \"HeapWordSize must be power of 2\");\n+  static_assert((size_t)HeapWordSize >= sizeof(juint),\n+                \"HeapWord should be at least as large as juint\");\n+  static_assert(sizeof(NULL) == sizeof(char*), \"NULL must be same size as pointer\");\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"}]}