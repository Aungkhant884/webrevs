{"files":[{"patch":"@@ -487,2 +487,2 @@\n-    private static final Comparator<LayoutNode> nodePositionComparator = Comparator.comparingInt(n -> n.pos);\n-    private static final Comparator<LayoutNode> nodeProcessingDownComparator = (n1, n2) -> {\n+    public static final Comparator<LayoutNode> nodePositionComparator = Comparator.comparingInt(n -> n.pos);\n+    public static final Comparator<LayoutNode> nodeProcessingDownComparator = (n1, n2) -> {\n@@ -515,1 +515,1 @@\n-    private static final Comparator<LayoutNode> nodeProcessingUpComparator = (n1, n2) -> {\n+    public static final Comparator<LayoutNode> nodeProcessingUpComparator = (n1, n2) -> {\n@@ -694,1 +694,1 @@\n-    private static class NodeRow {\n+    public static class NodeRow {\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalLayoutManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        nodes.sort(nodePositionComparator);\n+        nodes.sort(HierarchicalLayoutManager.nodePositionComparator);\n@@ -132,2 +132,2 @@\n-        nodeProcessingOrder.sort(nodeProcessingUpComparator);\n-        NodeRow r = new NodeRow(space);\n+        nodeProcessingOrder.sort(HierarchicalLayoutManager.nodeProcessingUpComparator);\n+        HierarchicalLayoutManager.NodeRow r = new HierarchicalLayoutManager.NodeRow(space);\n@@ -147,1 +147,1 @@\n-            layers.get(i).sort(nodePositionComparator);\n+            layers.get(i).sort(HierarchicalLayoutManager.nodePositionComparator);\n@@ -609,1 +609,1 @@\n-            layerNodes.sort(nodePositionComparator);\n+            layerNodes.sort(HierarchicalLayoutManager.nodePositionComparator);\n@@ -1354,62 +1354,0 @@\n-    private static final Comparator<LayoutNode> nodePositionComparator = Comparator.comparingInt(n -> n.pos);\n-    private static final Comparator<LayoutNode> nodeProcessingUpComparator = (n1, n2) -> {\n-        if (n1.vertex == null) {\n-            if (n2.vertex == null) {\n-                return 0;\n-            }\n-            return -1;\n-        }\n-        if (n2.vertex == null) {\n-            return 1;\n-        }\n-        return n1.succs.size() - n2.succs.size();\n-    };\n-\n-    private static class NodeRow {\n-\n-        private final TreeSet<LayoutNode> treeSet;\n-        private final ArrayList<Integer> space;\n-\n-        public NodeRow(ArrayList<Integer> space) {\n-            treeSet = new TreeSet<>(nodePositionComparator);\n-            this.space = space;\n-        }\n-\n-        public int offset(LayoutNode n1, LayoutNode n2) {\n-            int v1 = space.get(n1.pos) + n1.width;\n-            int v2 = space.get(n2.pos);\n-            return v2 - v1;\n-        }\n-\n-        public void insert(LayoutNode n, int pos) {\n-\n-            SortedSet<LayoutNode> headSet = treeSet.headSet(n);\n-\n-            LayoutNode leftNeighbor;\n-            int minX = Integer.MIN_VALUE;\n-            if (!headSet.isEmpty()) {\n-                leftNeighbor = headSet.last();\n-                minX = leftNeighbor.x + leftNeighbor.width + offset(leftNeighbor, n);\n-            }\n-\n-            if (pos < minX) {\n-                n.x = minX;\n-            } else {\n-\n-                LayoutNode rightNeighbor;\n-                SortedSet<LayoutNode> tailSet = treeSet.tailSet(n);\n-                int maxX = Integer.MAX_VALUE;\n-                if (!tailSet.isEmpty()) {\n-                    rightNeighbor = tailSet.first();\n-                    maxX = rightNeighbor.x - offset(n, rightNeighbor) - n.width;\n-                }\n-\n-                n.x = Math.min(pos, maxX);\n-\n-                assert minX <= maxX : minX + \" vs \" + maxX;\n-            }\n-\n-            treeSet.add(n);\n-        }\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalStableLayoutManager.java","additions":5,"deletions":67,"binary":false,"changes":72,"status":"modified"}]}