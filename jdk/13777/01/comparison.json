{"files":[{"patch":"@@ -54,0 +54,4 @@\n+     *\n+     * @see StackIntrospection#canMaterializeVirtualObjects\n+     * @throws IllegalArgumentException if stack introspection does not support\n+     *             materialization of virtual objects for this frame\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/stack\/InspectedFrame.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,8 @@\n+\n+    \/**\n+     * Determines if {@link InspectedFrame#materializeVirtualObjects(boolean)} can be called for frames\n+     * visited by {@link #iterateFrames}.\n+     *\/\n+    default boolean canMaterializeVirtualObjects() {\n+        return true;\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/stack\/StackIntrospection.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,3 @@\n+        if (Thread.currentThread().isVirtual()) {\n+            throw new IllegalArgumentException(\"cannot materialize frames of a virtual thread\");\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotStackFrameReference.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+\n+    @Override\n+    public boolean canMaterializeVirtualObjects() {\n+        \/\/ Virtual threads do not support materializing locals (JDK-8307125)\n+        return !Thread.currentThread().isVirtual();\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotStackIntrospection.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-compiler\/jvmci\/compilerToVM\/MaterializeVirtualObjectTest.java 8307125 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -280,5 +280,0 @@\n-    public static void materializeVirtualObjects(\n-            HotSpotStackFrameReference stackFrame, boolean invalidate) {\n-        CTVM.materializeVirtualObjects(stackFrame, invalidate);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -160,1 +160,5 @@\n-        new MaterializeVirtualObjectTest().test();\n+        try {\n+            new MaterializeVirtualObjectTest().test();\n+        } catch (MaterializationNotSupported e) {\n+            Asserts.assertTrue(Thread.currentThread().isVirtual());\n+        }\n@@ -171,1 +175,0 @@\n-        System.out.println(getName());\n@@ -233,0 +236,8 @@\n+    private static void materializeVirtualObjects(InspectedFrame f, boolean invalidateCode) {\n+        try {\n+            f.materializeVirtualObjects(invalidateCode);\n+        } catch (IllegalArgumentException e) {\n+            throw new MaterializationNotSupported(e);\n+        }\n+    }\n+\n@@ -251,1 +262,1 @@\n-                        f.materializeVirtualObjects(false);\n+                        materializeVirtualObjects(f, false);\n@@ -309,1 +320,1 @@\n-            CompilerToVMHelper.materializeVirtualObjects(materialized, INVALIDATE);\n+            materializeVirtualObjects(materialized, INVALIDATE);\n@@ -334,0 +345,6 @@\n+\n+    static class MaterializationNotSupported extends RuntimeException {\n+        public MaterializationNotSupported(Throwable cause) {\n+            super(cause);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MaterializeVirtualObjectTest.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}