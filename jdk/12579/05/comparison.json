{"files":[{"patch":"@@ -43,1 +43,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -88,3 +87,0 @@\n-    \/\/ Used to ensure that each spun class name is unique\n-    private static final AtomicInteger counter = new AtomicInteger();\n-\n@@ -212,1 +208,1 @@\n-        return name.replace('.', '\/') + \"$$Lambda$\" + counter.incrementAndGet();\n+        return name.replace('.', '\/') + \"$$Lambda$\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -56,0 +56,1 @@\n+    private static AtomicInteger counter = new AtomicInteger();\n@@ -99,1 +100,1 @@\n-    public static String encodeForFilename(String className) {\n+    public String encodeForFilename(String className) {\n@@ -101,2 +102,2 @@\n-        StringBuilder sb = new StringBuilder(len);\n-\n+        \/\/ add some padding to `len` for the index\n+        StringBuilder sb = new StringBuilder(len + 5);\n@@ -123,0 +124,1 @@\n+        sb.append(counter.incrementAndGet());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ProxyClassesDumper.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}