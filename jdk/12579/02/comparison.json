{"files":[{"patch":"@@ -43,1 +43,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -88,3 +87,0 @@\n-    \/\/ Used to ensure that each spun class name is unique\n-    private static final AtomicInteger counter = new AtomicInteger();\n-\n@@ -212,1 +208,1 @@\n-        return name.replace('.', '\/') + \"$$Lambda$\" + counter.incrementAndGet();\n+        return name.replace('.', '\/') + \"$$Lambda$\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -101,1 +100,3 @@\n-        StringBuilder sb = new StringBuilder(len);\n+        \/\/ add some padding to `len` for the timestamp\n+        StringBuilder sb = new StringBuilder(len + 20);\n+        int lastSlash = className.lastIndexOf('\/');\n@@ -104,0 +105,4 @@\n+            if (i == lastSlash + 1) {\n+                \/\/ insert the timestamp\n+                sb.append(System.currentTimeMillis()).append('-');\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ProxyClassesDumper.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}