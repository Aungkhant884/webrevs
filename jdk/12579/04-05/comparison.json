{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.time.Instant;\n@@ -37,0 +36,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -56,0 +56,1 @@\n+    private static AtomicInteger counter = new AtomicInteger();\n@@ -99,1 +100,1 @@\n-    public static String encodeForFilename(String className) {\n+    public String encodeForFilename(String className) {\n@@ -101,4 +102,2 @@\n-        \/\/ add some padding to `len` for the timestamp\n-        StringBuilder sb = new StringBuilder(len + 30);\n-        int lastSlash = className.lastIndexOf('\/');\n-\n+        \/\/ add some padding to `len` for the index\n+        StringBuilder sb = new StringBuilder(len + 5);\n@@ -106,4 +105,0 @@\n-            if (i == lastSlash + 1) {\n-                \/\/ insert the timestamp\n-                sb.append(Instant.now().toString().replace('-', '_').replace(':', '_')).append('-');\n-            }\n@@ -129,0 +124,1 @@\n+        sb.append(counter.incrementAndGet());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ProxyClassesDumper.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-            \"2: VerifyStackTrace$$Lambda$\/0x0000000801001848.run(Unknown Source)\\n\" +\n+            \"2: VerifyStackTrace$$Lambda$1\/0x0000000801001848.run(Unknown Source)\\n\" +\n","filename":"test\/jdk\/java\/lang\/StackWalker\/VerifyStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                \"*-A$I$$Lambda$*.class\")) {\n+                \"A$I$$Lambda$*.class\")) {\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAsm.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}