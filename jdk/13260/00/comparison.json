{"files":[{"patch":"@@ -1094,0 +1094,1 @@\n+\n@@ -1096,1 +1097,1 @@\n-  if (l->Opcode() == Op_MaxI) {\n+  if (l->Opcode() == Op_MaxI && !l->is_reduction()) {\n@@ -1134,1 +1135,1 @@\n-  if (r->Opcode() == Op_MaxI) {\n+  if (r->Opcode() == Op_MaxI && !r->is_reduction()) {\n@@ -1177,0 +1178,1 @@\n+\n@@ -1179,1 +1181,1 @@\n-  if( l->Opcode() == Op_MinI ) {\n+  if( l->Opcode() == Op_MinI && !l->is_reduction()) {\n@@ -1217,1 +1219,1 @@\n-  if( r->Opcode() == Op_MinI ) {\n+  if( r->Opcode() == Op_MinI && !r->is_reduction()) {\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -747,0 +747,10 @@\n+    public static final String MIN_REDUCTION_V = PREFIX + \"MIN_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(MIN_REDUCTION_V, \"MinReductionV\");\n+    }\n+\n+    public static final String MAX_REDUCTION_V = PREFIX + \"MAX_REDUCTION_V\" + POSTFIX;\n+    static {\n+        superWordNodes(MAX_REDUCTION_V, \"MaxReductionV\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8302673\n+ * @summary [SuperWord] MaxReduction and MinReduction should vectorize for int\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.MinMaxRed_Int\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class MinMaxRed_Int {\n+    public static void main(String[] args) throws Exception {\n+        TestFramework framework = new TestFramework();\n+        framework.addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                           \"-XX:LoopUnrollLimit=250\",\n+                           \"-XX:CompileThresholdScaling=0.1\");\n+        framework.start();\n+    }\n+\n+    @Run(test = {\"maxReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runMaxTest() {\n+        int[] a = new int[1024];\n+        int[] b = new int[1024];\n+        ReductionInit(a, b);\n+        int res = 0;\n+        for (int j = 0; j < 2000; j++) {\n+            res = maxReductionImplement(a, b, res);\n+        }\n+        if (res == 0) {\n+            System.out.println(\"Success\");\n+        } else {\n+            throw new AssertionError(\"Failed\");\n+        }\n+    }\n+\n+\n+    @Run(test = {\"minReductionImplement\"},\n+         mode = RunMode.STANDALONE)\n+    public void runMinTest() {\n+        int[] a = new int[1024];\n+        int[] b = new int[1024];\n+        ReductionInit(a, b);\n+        int res = 1;\n+        for (int j = 0; j < 2000; j++) {\n+            res = minReductionImplement(a, b, res);\n+        }\n+        if (res == -1023*1023) {\n+            System.out.println(\"Success\");\n+        } else {\n+            throw new AssertionError(\"Failed\");\n+        }\n+    }\n+\n+    public static void ReductionInit(int[] a, int[] b) {\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = -i;\n+            b[i] = i;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"SuperWordReductions\", \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = {IRNode.MIN_REDUCTION_V, \" > 0\"})\n+    public static int minReductionImplement(int[] a, int[] b, int res) {\n+        for (int i = 0; i < a.length; i++) {\n+            res = Math.min(res, a[i] * b[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"SuperWordReductions\", \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        counts = {IRNode.MAX_REDUCTION_V, \" > 0\"})\n+    public static int maxReductionImplement(int[] a, int[] b, int res) {\n+        for (int i = 0; i < a.length; i++) {\n+            res = Math.max(res, a[i] * b[i]);\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/MinMaxRed_Int.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}