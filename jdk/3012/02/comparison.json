{"files":[{"patch":"@@ -1069,1 +1069,1 @@\n-        int nb = u->replace_edge(ctrl, region);\n+        int nb = u->replace_edge(ctrl, region, &phase->igvn());\n@@ -1251,1 +1251,1 @@\n-            int nb = u_clone->replace_edge(n, n_clone);\n+            int nb = u_clone->replace_edge(n, n_clone, &phase->igvn());\n@@ -1273,1 +1273,1 @@\n-                int nb = u->replace_edge(n, n_clone);\n+                int nb = u->replace_edge(n, n_clone, &phase->igvn());\n@@ -1291,1 +1291,2 @@\n-                  int nb = cmp_clone->replace_edge(nn, create_phis_on_call_return(ctrl, c, nn, nn_clone, projs, phase));\n+                  int nb = cmp_clone->replace_edge(nn, create_phis_on_call_return(ctrl, c, nn, nn_clone, projs, phase),\n+                                                   &phase->igvn());\n@@ -1301,1 +1302,1 @@\n-                  int nb = u->replace_edge(n, create_phis_on_call_return(ctrl, c, n, n_clone, projs, phase));\n+                  int nb = u->replace_edge(n, create_phis_on_call_return(ctrl, c, n, n_clone, projs, phase), &phase->igvn());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -148,8 +148,2 @@\n-      PhaseIterGVN *igvn = phase->is_IterGVN();\n-      if (igvn) {\n-        set_req_X(2,x2,igvn);\n-        set_req_X(1,x1,igvn);\n-      } else {\n-        set_req(2,x2);\n-        set_req(1,x1);\n-      }\n+      set_req_X(2, x2, phase);\n+      set_req_X(1, x1, phase);\n@@ -172,2 +166,2 @@\n-      set_req(1, add2);\n-      set_req(2, a12);\n+      set_req_X(1, add2, phase);\n+      set_req_X(2, a12, phase);\n@@ -645,8 +639,2 @@\n-      PhaseIterGVN *igvn = phase->is_IterGVN();\n-      if( igvn ) {\n-        set_req_X(Address,address,igvn);\n-        set_req_X(Offset,offset,igvn);\n-      } else {\n-        set_req(Address,address);\n-        set_req(Offset,offset);\n-      }\n+      set_req_X(Address, address, phase);\n+      set_req_X(Offset, offset, phase);\n@@ -1126,2 +1114,2 @@\n-    set_req(1, l);\n-    set_req(2, r);\n+    set_req_X(1, l, phase);\n+    set_req_X(2, r, phase);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":8,"deletions":20,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -628,0 +628,7 @@\n+        if (n->outcnt() == 0) {\n+          int uses_found = n->replace_edge(this, phase->C->top(), igvn);\n+          if (uses_found > 1) { \/\/ (--i) done at the end of the loop.\n+            i -= (uses_found - 1);\n+          }\n+          continue;\n+        }\n@@ -644,8 +651,2 @@\n-          uint uses_found = 0;\n-          for( uint k=1; k < n->req(); k++ ) {\n-            if( n->in(k) == this ) {\n-              n->set_req(k, parent_ctrl);\n-              uses_found++;\n-            }\n-          }\n-          if( uses_found > 1 ) { \/\/ (--i) done at the end of the loop.\n+          int uses_found = n->replace_edge(this, parent_ctrl, igvn);\n+          if (uses_found > 1) { \/\/ (--i) done at the end of the loop.\n@@ -884,0 +885,3 @@\n+    if (new_bol->outcnt() == 0) {\n+      igvn->remove_dead_node(new_bol);\n+    }\n@@ -1919,5 +1923,1 @@\n-        if (can_reshape) {\n-          set_req_X(j, top, igvn);\n-        } else {\n-          set_req(j, top);\n-        }\n+        set_req_X(j, top, phase);\n@@ -1961,1 +1961,1 @@\n-          replace_edge(uin, top);\n+          replace_edge(uin, top, phase);\n@@ -2230,1 +2230,1 @@\n-              set_req(i, new_mem);\n+              set_req_X(i, new_mem, phase->is_IterGVN());\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2348,0 +2348,2 @@\n+ check_no_dead_use();\n+\n@@ -2363,0 +2365,19 @@\n+#ifdef ASSERT\n+void Compile::check_no_dead_use() const {\n+  ResourceMark rm;\n+  Unique_Node_List wq;\n+  wq.push(root());\n+  for (uint i = 0; i < wq.size(); ++i) {\n+    Node* n = wq.at(i);\n+    for (DUIterator_Fast jmax, j = n->fast_outs(jmax); j < jmax; j++) {\n+      Node* u = n->fast_out(j);\n+      if (u->outcnt() == 0 && !u->is_Con()) {\n+        u->dump();\n+        fatal(\"no reachable node should have no use\");\n+      }\n+      wq.push(u);\n+    }\n+  }\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1119,0 +1119,1 @@\n+  void check_no_dead_use() const NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -503,1 +503,1 @@\n-      set_req(1,andl->in(1));\n+      set_req_X(1,andl->in(1), phase);\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2772,1 +2772,1 @@\n-      imax -= use->replace_edge(n, m);\n+      imax -= use->replace_edge(n, m, igvn);\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1131,1 +1131,1 @@\n-              int rep = clone->replace_edge(init_n, new_n);\n+              int rep = clone->replace_edge(init_n, new_n, igvn);\n@@ -1138,1 +1138,1 @@\n-            int rep = use->replace_edge(init_n, new_n);\n+            int rep = use->replace_edge(init_n, new_n, igvn);\n@@ -1367,1 +1367,1 @@\n-  iff->set_req(1, new_bol);\n+  iff->set_req_X(1, new_bol, phase);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1202,1 +1202,1 @@\n-      int nrep = n->replace_edge(incr, castii);\n+      int nrep = n->replace_edge(incr, castii, &_igvn);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -546,1 +546,1 @@\n-    int nb = u->replace_edge(iv_to_replace, iv_replacement);\n+    int nb = u->replace_edge(iv_to_replace, iv_replacement, &_igvn);\n@@ -1173,1 +1173,1 @@\n-      int nb = u->replace_edge(n, m);\n+      int nb = u->replace_edge(n, m, &_igvn);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -927,1 +927,1 @@\n-            int count = phi->replace_edge(n, hook);\n+            int count = phi->replace_edge(n, hook, &_igvn);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -895,1 +895,1 @@\n-    sfpt->replace_edges_in_range(res, sobj, start, end);\n+    sfpt->replace_edges_in_range(res, sobj, start, end, &_igvn);\n@@ -970,1 +970,1 @@\n-          ac->replace_edge(res, top());\n+          ac->replace_edge(res, top(), &_igvn);\n@@ -975,1 +975,1 @@\n-          ac->replace_edge(src, top());\n+          ac->replace_edge(src, top(), &_igvn);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-        int nb = u->replace_edge(ctl, phase->C->top());\n+        int nb = u->replace_edge(ctl, phase->C->top(), igvn);\n@@ -2653,7 +2653,3 @@\n-        if (can_reshape) {\n-          use->set_req_X(MemNode::Memory, st->in(MemNode::Memory), phase->is_IterGVN());\n-        } else {\n-          \/\/ It's OK to do this in the parser, since DU info is always accurate,\n-          \/\/ and the parser always refers to nodes via SafePointNode maps.\n-          use->set_req(MemNode::Memory, st->in(MemNode::Memory));\n-        }\n+        \/\/ It's OK to do this in the parser, since DU info is always accurate,\n+        \/\/ and the parser always refers to nodes via SafePointNode maps.\n+        use->set_req_X(MemNode::Memory, st->in(MemNode::Memory), phase);\n@@ -2804,1 +2800,1 @@\n-      set_req(MemNode::ValueIn, val->in(1));\n+      set_req_X(MemNode::ValueIn, val->in(1), phase);\n@@ -2826,1 +2822,1 @@\n-          set_req(MemNode::ValueIn, shl->in(1));\n+          set_req_X(MemNode::ValueIn, shl->in(1), phase);\n@@ -2937,1 +2933,1 @@\n-    set_req(MemNode::OopStore, mem);\n+    set_req_X(MemNode::OopStore, mem, phase);\n@@ -4737,1 +4733,1 @@\n-      set_req(i, new_in);\n+      set_req_X(i, new_in, phase);\n@@ -4743,1 +4739,1 @@\n-    set_req(Compile::AliasIdxBot, new_base);\n+    set_req_X(Compile::AliasIdxBot, new_base, phase);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -107,2 +107,2 @@\n-          set_req(1, mul1->in(1));\n-          set_req(2, phase->makecon( tcon01 ));\n+          set_req_X(1, mul1->in(1), phase);\n+          set_req_X(2, phase->makecon(tcon01), phase);\n@@ -958,2 +958,2 @@\n-      set_req(1, ld);\n-      set_req(2, phase->intcon(0));\n+      set_req_X(1, ld, phase);\n+      set_req_X(2, phase->intcon(0), phase);\n@@ -962,1 +962,1 @@\n-    else if( can_reshape &&\n+    else if (can_reshape &&\n@@ -974,1 +974,1 @@\n-    if( ld->Opcode() == Op_LoadB ) {\n+    if (ld->Opcode() == Op_LoadB) {\n@@ -976,2 +976,2 @@\n-      set_req(1, ld);\n-      set_req(2, phase->intcon(0));\n+      set_req_X(1, ld, phase);\n+      set_req_X(2, phase->intcon(0), phase);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -871,1 +871,1 @@\n-int Node::replace_edge(Node* old, Node* neww) {\n+int Node::replace_edge(Node* old, Node* neww, PhaseGVN* gvn) {\n@@ -877,1 +877,5 @@\n-        set_req(i, neww);\n+        if (gvn != NULL) {\n+          set_req_X(i, neww, gvn);\n+        } else {\n+          set_req(i, neww);\n+        }\n@@ -879,0 +883,1 @@\n+        assert(gvn == NULL || gvn->is_IterGVN() == NULL, \"no support for igvn here\");\n@@ -891,1 +896,1 @@\n-int Node::replace_edges_in_range(Node* old, Node* neww, int start, int end) {\n+int Node::replace_edges_in_range(Node* old, Node* neww, int start, int end, PhaseGVN* gvn) {\n@@ -896,1 +901,1 @@\n-      set_req(i, neww);\n+      set_req_X(i, neww, gvn);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -457,2 +457,2 @@\n-  int replace_edge(Node* old, Node* neww);\n-  int replace_edges_in_range(Node* old, Node* neww, int start, int end);\n+  int replace_edge(Node* old, Node* neww, PhaseGVN* gvn = NULL);\n+  int replace_edges_in_range(Node* old, Node* neww, int start, int end, PhaseGVN* gvn);\n@@ -532,1 +532,2 @@\n-  void set_req_X( uint i, Node *n, PhaseIterGVN *igvn );\n+  void set_req_X(uint i, Node *n, PhaseIterGVN *igvn);\n+  void set_req_X(uint i, Node *n, PhaseGVN *gvn);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1363,1 +1363,1 @@\n-            int nrep = dead->replace_edge(in, NULL);  \/\/ Kill edges\n+            int nrep = dead->replace_edge(in, NULL, this);  \/\/ Kill edges\n@@ -2116,0 +2116,1 @@\n+}\n@@ -2117,0 +2118,7 @@\n+void Node::set_req_X(uint i, Node *n, PhaseGVN *gvn) {\n+  PhaseIterGVN* igvn = gvn->is_IterGVN();\n+  if (igvn == NULL) {\n+    set_req(i, n);\n+    return;\n+  }\n+  set_req_X(i, n, igvn);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    n->set_req(i, in);\n+    n->set_req_X(i, in, this);\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-          use->replace_edge(def, merge);\n+          use->replace_edge(def, merge, NULL);\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1060,8 +1060,2 @@\n-      PhaseIterGVN* igvn = phase->is_IterGVN();\n-      if (igvn != NULL) {\n-        set_req_X(1, lhs, igvn);\n-        set_req_X(2, rhs, igvn);\n-      } else {\n-        set_req(1, lhs);\n-        set_req(2, rhs);\n-      }\n+      set_req_X(1, lhs, phase);\n+      set_req_X(2, rhs, phase);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -199,0 +199,14 @@\n+  Node *p1 = phase->transform(new AddPNode(superklass, superklass, phase->MakeConX(in_bytes(Klass::super_check_offset_offset()))));\n+  Node* m = phase->C->immutable_memory();\n+  LoadINode* chk_off_ld = new LoadINode(NULL, m, p1, phase->type(p1)->is_ptr(), TypeInt::INT, MemNode::unordered);\n+  Node *chk_off = phase->transform(chk_off_ld);\n+  int cacheoff_con = in_bytes(Klass::secondary_super_cache_offset());\n+  bool might_be_cache = (phase->find_int_con(chk_off, cacheoff_con) == cacheoff_con);\n+\n+  if (might_be_cache) {\n+    if (phase->is_IterGVN()) {\n+      phase->is_IterGVN()->_worklist.push(chk_off_ld);\n+    }\n+    return NULL;\n+  }\n+\n@@ -208,10 +222,0 @@\n-    Node *p1 = phase->transform(new AddPNode(superklass, superklass, phase->MakeConX(in_bytes(Klass::super_check_offset_offset()))));\n-    Node* m = phase->C->immutable_memory();\n-    Node *chk_off = phase->transform(new LoadINode(NULL, m, p1, phase->type(p1)->is_ptr(), TypeInt::INT, MemNode::unordered));\n-    int cacheoff_con = in_bytes(Klass::secondary_super_cache_offset());\n-    bool might_be_cache = (phase->find_int_con(chk_off, cacheoff_con) == cacheoff_con);\n-\n-    if (might_be_cache) {\n-      return NULL;\n-    }\n-\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}