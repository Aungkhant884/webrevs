{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.security.AccessController;\n@@ -53,0 +54,46 @@\n+\n+    \/**\n+     * Opens a {@code FileInputStream} object as a privileged action.\n+     *\n+     * Note that this method performs a privileged action using caller-provided\n+     * inputs. The caller of this method should take care to ensure that the\n+     * inputs are not tainted and the returned property is not made accessible\n+     * to untrusted code if it contains sensitive information.\n+     *\n+     * @param file the {@code File} object\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static FileInputStream privilegedGetFileInputStream(File file)\n+            throws Exception {\n+        return AccessController.doPrivileged(\n+                new PrivilegedExceptionAction<>() {\n+                    @Override\n+                    public FileInputStream run() throws Exception {\n+                        return new FileInputStream(file);\n+                    }\n+                }\n+        );\n+    }\n+\n+    \/**\n+     * Opens a {@code FileInputStream} object as a privileged action.\n+     *\n+     * Note that this method performs a privileged action using caller-provided\n+     * inputs. The caller of this method should take care to ensure that the\n+     * inputs are not tainted and the returned property is not made accessible\n+     * to untrusted code if it contains sensitive information.\n+     *\n+     * @param filename the {@code String} object\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static FileInputStream privilegedGetFileInputStream(String filename)\n+            throws Exception {\n+        return AccessController.doPrivileged(\n+                new PrivilegedExceptionAction<>() {\n+                    @Override\n+                    public FileInputStream run() throws Exception {\n+                        return new FileInputStream(filename);\n+                    }\n+                }\n+        );\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/OpenFileInputStreamAction.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import sun.security.action.OpenFileInputStreamAction;\n@@ -1013,7 +1014,2 @@\n-                    fs = AccessController.doPrivileged(\n-                            new PrivilegedExceptionAction<FileInputStream>() {\n-                        @Override\n-                        public FileInputStream run() throws Exception {\n-                            return new FileInputStream(defaultKeyStore);\n-                        }\n-                    });\n+                    fs = OpenFileInputStreamAction.privilegedGetFileInputStream(\n+                        defaultKeyStore);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-                        \"SunX509: skip default keystor\", re);\n+                        \"SunX509: skip default keystore\", re);\n@@ -108,24 +108,0 @@\n-    \/*\n-     * Try to get an InputStream based on the file we pass in.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static FileInputStream getFileInputStream(final File file)\n-            throws Exception {\n-        return AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<FileInputStream>() {\n-                    @Override\n-                    public FileInputStream run() throws Exception {\n-                        try {\n-                            if (file.exists()) {\n-                                return new FileInputStream(file);\n-                            } else {\n-                                return null;\n-                            }\n-                        } catch (FileNotFoundException e) {\n-                            \/\/ couldn't find it, oh well.\n-                            return null;\n-                        }\n-                    }\n-                });\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustManagerFactoryImpl.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -388,2 +388,2 @@\n-                try (@SuppressWarnings(\"removal\") FileInputStream fis = AccessController.doPrivileged(\n-                        new OpenFileInputStreamAction(descriptor.storeFile))) {\n+                try (FileInputStream fis = OpenFileInputStreamAction.\n+                        privilegedGetFileInputStream(descriptor.storeFile)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustStoreManager.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}