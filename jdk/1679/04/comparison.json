{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#import \"JNIUtilities.h\"\n@@ -396,3 +397,3 @@\n-    static JNF_CLASS_CACHE(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n-    static JNF_CTOR_CACHE(jctor_NSEvent, jc_NSEvent, \"(IIIIIIIIDDI)V\");\n-    jobject jEvent = JNFNewObject(env, jctor_NSEvent,\n+    DECLARE_CLASS(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n+    DECLARE_METHOD(jctor_NSEvent, jc_NSEvent, \"<init>\", \"(IIIIIIIIDDI)V\");\n+    jobject jEvent = (*env)->NewObject(env, jc_NSEvent, jctor_NSEvent,\n@@ -410,2 +411,2 @@\n-    static JNF_CLASS_CACHE(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n-    static JNF_MEMBER_CACHE(jm_deliverMouseEvent, jc_PlatformView, \"deliverMouseEvent\", \"(Lsun\/lwawt\/macosx\/NSEvent;)V\");\n+    DECLARE_CLASS(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n+    DECLARE_METHOD(jm_deliverMouseEvent, jc_PlatformView, \"deliverMouseEvent\", \"(Lsun\/lwawt\/macosx\/NSEvent;)V\");\n@@ -414,1 +415,2 @@\n-        JNFCallVoidMethod(env, jlocal, jm_deliverMouseEvent, jEvent);\n+        (*env)->CallVoidMethod(env, jlocal, jm_deliverMouseEvent, jEvent);\n+        CHECK_EXCEPTION();\n@@ -466,3 +468,3 @@\n-    static JNF_CLASS_CACHE(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n-    static JNF_CTOR_CACHE(jctor_NSEvent, jc_NSEvent, \"(IISLjava\/lang\/String;Ljava\/lang\/String;)V\");\n-    jobject jEvent = JNFNewObject(env, jctor_NSEvent,\n+    DECLARE_CLASS(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n+    DECLARE_METHOD(jctor_NSEvent, jc_NSEvent, \"<init>\", \"(IISLjava\/lang\/String;Ljava\/lang\/String;)V\");\n+    jobject jEvent = (*env)->NewObject(env, jc_NSEvent, jctor_NSEvent,\n@@ -476,2 +478,2 @@\n-    static JNF_CLASS_CACHE(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n-    static JNF_MEMBER_CACHE(jm_deliverKeyEvent, jc_PlatformView,\n+    DECLARE_CLASS(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n+    DECLARE_METHOD(jm_deliverKeyEvent, jc_PlatformView,\n@@ -481,1 +483,2 @@\n-        JNFCallVoidMethod(env, jlocal, jm_deliverKeyEvent, jEvent);\n+        (*env)->CallVoidMethod(env, jlocal, jm_deliverKeyEvent, jEvent);\n+        CHECK_EXCEPTION();\n@@ -496,2 +499,2 @@\n-    static JNF_CLASS_CACHE(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n-    static JNF_MEMBER_CACHE(jm_deliverResize, jc_PlatformView, \"deliverResize\", \"(IIII)V\");\n+    DECLARE_CLASS(jc_PlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n+    DECLARE_METHOD(jm_deliverResize, jc_PlatformView, \"deliverResize\", \"(IIII)V\");\n@@ -501,1 +504,2 @@\n-        JNFCallVoidMethod(env, jlocal, jm_deliverResize, x,y,w,h);\n+        (*env)->CallVoidMethod(env, jlocal, jm_deliverResize, x,y,w,h);\n+        CHECK_EXCEPTION();\n@@ -530,2 +534,2 @@\n-        static JNF_CLASS_CACHE(jc_CPlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n-        static JNF_MEMBER_CACHE(jm_deliverWindowDidExposeEvent, jc_CPlatformView, \"deliverWindowDidExposeEvent\", \"()V\");\n+        DECLARE_CLASS(jc_CPlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n+        DECLARE_METHOD(jm_deliverWindowDidExposeEvent, jc_CPlatformView, \"deliverWindowDidExposeEvent\", \"()V\");\n@@ -534,1 +538,2 @@\n-            JNFCallVoidMethod(env, jlocal, jm_deliverWindowDidExposeEvent);\n+            (*env)->CallVoidMethod(env, jlocal, jm_deliverWindowDidExposeEvent);\n+            CHECK_EXCEPTION();\n@@ -569,2 +574,2 @@\n-    static JNF_CLASS_CACHE(jc_CPlatformView, \"sun\/lwawt\/macosx\/CPlatformView\");\n-    static JNF_MEMBER_CACHE(jf_Peer, jc_CPlatformView, \"peer\", \"Lsun\/lwawt\/LWWindowPeer;\");\n+    DECLARE_CLASS_RETURN(jc_CPlatformView, \"sun\/lwawt\/macosx\/CPlatformView\", NULL);\n+    DECLARE_FIELD_RETURN(jf_Peer, jc_CPlatformView, \"peer\", \"Lsun\/lwawt\/LWWindowPeer;\", NULL);\n@@ -583,1 +588,1 @@\n-        peer = JNFGetObjectField(env, jlocal, jf_Peer);\n+        peer = (*env)->GetObjectField(env, jlocal, jf_Peer);\n@@ -586,2 +591,2 @@\n-    static JNF_CLASS_CACHE(jc_LWWindowPeer, \"sun\/lwawt\/LWWindowPeer\");\n-    static JNF_MEMBER_CACHE(jf_Target, jc_LWWindowPeer, \"target\", \"Ljava\/awt\/Component;\");\n+    DECLARE_CLASS_RETURN(jc_LWWindowPeer, \"sun\/lwawt\/LWWindowPeer\", NULL);\n+    DECLARE_FIELD_RETURN(jf_Target, jc_LWWindowPeer, \"target\", \"Ljava\/awt\/Component;\", NULL);\n@@ -593,1 +598,1 @@\n-    jobject comp = JNFGetObjectField(env, peer, jf_Target);\n+    jobject comp = (*env)->GetObjectField(env, peer, jf_Target);\n@@ -600,1 +605,2 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAWTView, sjc_CAccessibility, \"getAWTView\", \"(Ljavax\/accessibility\/Accessible;)J\");\n+    DECLARE_CLASS_RETURN(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\", NULL);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getAWTView, sjc_CAccessibility, \"getAWTView\", \"(Ljavax\/accessibility\/Accessible;)J\", NULL);\n@@ -602,1 +608,2 @@\n-    jlong jptr = JNFCallStaticLongMethod(env, jm_getAWTView, jaccessible);\n+    jlong jptr = (*env)->CallStaticLongMethod(env, sjc_CAccessibility, jm_getAWTView, jaccessible);\n+    CHECK_EXCEPTION();\n@@ -928,1 +935,7 @@\n-JNF_CLASS_CACHE(jc_CInputMethod, \"sun\/lwawt\/macosx\/CInputMethod\");\n+static jclass jc_CInputMethod = NULL;\n+\n+#define GET_CIM_CLASS() \\\n+    GET_CLASS(jc_CInputMethod, \"sun\/lwawt\/macosx\/CInputMethod\");\n+\n+#define GET_CIM_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(jc_CInputMethod, \"sun\/lwawt\/macosx\/CInputMethod\", ret);\n@@ -969,1 +982,2 @@\n-        static JNF_MEMBER_CACHE(jm_selectPreviousGlyph, jc_CInputMethod, \"selectPreviousGlyph\", \"()V\");\n+        GET_CIM_CLASS();\n+        DECLARE_METHOD(jm_selectPreviousGlyph, jc_CInputMethod, \"selectPreviousGlyph\", \"()V\");\n@@ -972,1 +986,2 @@\n-            JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_selectPreviousGlyph);\n+            (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_selectPreviousGlyph);\n+            CHECK_EXCEPTION();\n@@ -976,1 +991,1 @@\n-        static JNF_MEMBER_CACHE(jm_insertText, jc_CInputMethod, \"insertText\", \"(Ljava\/lang\/String;)V\");\n+        DECLARE_METHOD(jm_insertText, jc_CInputMethod, \"insertText\", \"(Ljava\/lang\/String;)V\");\n@@ -978,1 +993,2 @@\n-        JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        CHECK_EXCEPTION();\n@@ -1033,3 +1049,0 @@\n-    static JNF_MEMBER_CACHE(jm_startIMUpdate, jc_CInputMethod, \"startIMUpdate\", \"(Ljava\/lang\/String;)V\");\n-    static JNF_MEMBER_CACHE(jm_addAttribute, jc_CInputMethod, \"addAttribute\", \"(ZZII)V\");\n-    static JNF_MEMBER_CACHE(jm_dispatchText, jc_CInputMethod, \"dispatchText\", \"(IIZ)V\");\n@@ -1037,0 +1050,4 @@\n+    GET_CIM_CLASS();\n+    DECLARE_METHOD(jm_startIMUpdate, jc_CInputMethod, \"startIMUpdate\", \"(Ljava\/lang\/String;)V\");\n+    DECLARE_METHOD(jm_addAttribute, jc_CInputMethod, \"addAttribute\", \"(ZZII)V\");\n+    DECLARE_METHOD(jm_dispatchText, jc_CInputMethod, \"dispatchText\", \"(IIZ)V\");\n@@ -1042,1 +1059,2 @@\n-    JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -1065,1 +1083,3 @@\n-                JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_addAttribute, isThickUnderline, isGray, effectiveRange.location, effectiveRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_addAttribute, isThickUnderline,\n+                       isGray, effectiveRange.location, effectiveRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                CHECK_EXCEPTION();\n@@ -1070,1 +1090,1 @@\n-    static JNF_MEMBER_CACHE(jm_selectPreviousGlyph, jc_CInputMethod, \"selectPreviousGlyph\", \"()V\");\n+    DECLARE_METHOD(jm_selectPreviousGlyph, jc_CInputMethod, \"selectPreviousGlyph\", \"()V\");\n@@ -1073,1 +1093,2 @@\n-        JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_selectPreviousGlyph);\n+        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_selectPreviousGlyph);\n+         CHECK_EXCEPTION();\n@@ -1077,2 +1098,3 @@\n-    JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_dispatchText, selectionRange.location, selectionRange.length, JNI_FALSE); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n-\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_dispatchText,\n+            selectionRange.location, selectionRange.length, JNI_FALSE); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+         CHECK_EXCEPTION();\n@@ -1096,1 +1118,0 @@\n-    static JNF_MEMBER_CACHE(jm_unmarkText, jc_CInputMethod, \"unmarkText\", \"()V\");\n@@ -1098,2 +1119,4 @@\n-    JNFCallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n-\n+    GET_CIM_CLASS();\n+    DECLARE_METHOD(jm_unmarkText, jc_CInputMethod, \"unmarkText\", \"()V\");\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -1112,2 +1135,0 @@\n-    static JNF_MEMBER_CACHE(jf_fCurrentText, jc_CInputMethod, \"fCurrentText\", \"Ljava\/text\/AttributedString;\");\n-    static JNF_MEMBER_CACHE(jf_fCurrentTextLength, jc_CInputMethod, \"fCurrentTextLength\", \"I\");\n@@ -1115,1 +1136,5 @@\n-    jobject currentText = JNFGetObjectField(env, fInputMethodLOCKABLE, jf_fCurrentText);\n+    GET_CIM_CLASS_RETURN(NO);\n+    DECLARE_FIELD_RETURN(jf_fCurrentText, jc_CInputMethod, \"fCurrentText\", \"Ljava\/text\/AttributedString;\", NO);\n+    DECLARE_FIELD_RETURN(jf_fCurrentTextLength, jc_CInputMethod, \"fCurrentTextLength\", \"I\", NO);\n+    jobject currentText = (*env)->GetObjectField(env, fInputMethodLOCKABLE, jf_fCurrentText);\n+    CHECK_EXCEPTION();\n@@ -1117,1 +1142,2 @@\n-    jint currentTextLength = JNFGetIntField(env, fInputMethodLOCKABLE, jf_fCurrentTextLength);\n+    jint currentTextLength = (*env)->GetIntField(env, fInputMethodLOCKABLE, jf_fCurrentTextLength);\n+    CHECK_EXCEPTION();\n@@ -1146,1 +1172,0 @@\n-    static JNF_MEMBER_CACHE(jm_substringFromRange, jc_CInputMethod, \"attributedSubstringFromRange\", \"(II)Ljava\/lang\/String;\");\n@@ -1148,1 +1173,3 @@\n-    jobject theString = JNFCallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    DECLARE_METHOD_RETURN(jm_substringFromRange, jc_CInputMethod, \"attributedSubstringFromRange\", \"(II)Ljava\/lang\/String;\", nil);\n+    jobject theString = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION_NULL_RETURN(theString, nil);\n@@ -1173,1 +1200,0 @@\n-    static JNF_MEMBER_CACHE(jm_markedRange, jc_CInputMethod, \"markedRange\", \"()[I\");\n@@ -1179,0 +1205,2 @@\n+    GET_CIM_CLASS_RETURN(range);\n+    DECLARE_METHOD_RETURN(jm_markedRange, jc_CInputMethod, \"markedRange\", \"()[I\", range);\n@@ -1180,1 +1208,2 @@\n-    array = JNFCallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -1208,1 +1237,0 @@\n-    static JNF_MEMBER_CACHE(jm_selectedRange, jc_CInputMethod, \"selectedRange\", \"()[I\");\n@@ -1214,0 +1242,2 @@\n+    GET_CIM_CLASS_RETURN(range);\n+    DECLARE_METHOD_RETURN(jm_selectedRange, jc_CInputMethod, \"selectedRange\", \"()[I\", range);\n@@ -1219,1 +1249,2 @@\n-    array = JNFCallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -1241,2 +1272,0 @@\n-    static JNF_MEMBER_CACHE(jm_firstRectForCharacterRange, jc_CInputMethod,\n-                            \"firstRectForCharacterRange\", \"(I)[I\");\n@@ -1244,0 +1273,3 @@\n+    GET_CIM_CLASS_RETURN(NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_firstRectForCharacterRange, jc_CInputMethod,\n+                            \"firstRectForCharacterRange\", \"(I)[I\", NSZeroRect);\n@@ -1255,1 +1287,1 @@\n-    array = JNFCallObjectMethod(env, fInputMethodLOCKABLE, jm_firstRectForCharacterRange,\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_firstRectForCharacterRange,\n@@ -1284,2 +1316,0 @@\n-    static JNF_MEMBER_CACHE(jm_characterIndexForPoint, jc_CInputMethod,\n-                            \"characterIndexForPoint\", \"(II)I\");\n@@ -1287,0 +1317,3 @@\n+    GET_CIM_CLASS_RETURN(NSNotFound);\n+    DECLARE_METHOD_RETURN(jm_characterIndexForPoint, jc_CInputMethod,\n+                            \"characterIndexForPoint\", \"(II)I\", NSNotFound);\n@@ -1294,1 +1327,3 @@\n-    jint index = JNFCallIntMethod(env, fInputMethodLOCKABLE, jm_characterIndexForPoint, (jint)flippedLocation.x, (jint)flippedLocation.y); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jint index = (*env)->CallIntMethod(env, fInputMethodLOCKABLE, jm_characterIndexForPoint,\n+                      (jint)flippedLocation.x, (jint)flippedLocation.y); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":94,"deletions":59,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#import \"JNIUtilities.h\"\n@@ -48,1 +49,6 @@\n-static JNF_CLASS_CACHE(jc_CPlatformWindow, \"sun\/lwawt\/macosx\/CPlatformWindow\");\n+static jclass jc_CPlatformWindow = NULL;\n+#define GET_CPLATFORM_WINDOW_CLASS() \\\n+    GET_CLASS(jc_CPlatformWindow, \"sun\/lwawt\/macosx\/CPlatformWindow\");\n+\n+#define GET_CPLATFORM_WINDOW_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(jc_CPlatformWindow, \"sun\/lwawt\/macosx\/CPlatformWindow\", ret);\n@@ -116,2 +122,3 @@\n-        static JNF_MEMBER_CACHE(jf_target, jc_CPlatformWindow, \"target\", \"Ljava\/awt\/Window;\");\n-        jobject awtWindow = JNFGetObjectField(env, platformWindow, jf_target);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_FIELD(jf_target, jc_CPlatformWindow, \"target\", \"Ljava\/awt\/Window;\");\n+        jobject awtWindow = (*env)->GetObjectField(env, platformWindow, jf_target);\n@@ -124,3 +131,6 @@\n-            static JNF_CLASS_CACHE(jc_GestureHandler, \"com\/apple\/eawt\/event\/GestureHandler\");\n-            static JNF_STATIC_MEMBER_CACHE(sjm_handleGestureFromNative, jc_GestureHandler, \"handleGestureFromNative\", \"(Ljava\/awt\/Window;IDDDD)V\");\n-            JNFCallStaticVoidMethod(env, sjm_handleGestureFromNative, awtWindow, type, (jdouble)loc.x, (jdouble)loc.y, (jdouble)a, (jdouble)b);\n+            DECLARE_CLASS(jc_GestureHandler, \"com\/apple\/eawt\/event\/GestureHandler\");\n+            DECLARE_METHOD(sjm_handleGestureFromNative, jc_GestureHandler,\n+                            \"handleGestureFromNative\", \"(Ljava\/awt\/Window;IDDDD)V\");\n+            (*env)->CallStaticVoidMethod(env, jc_GestureHandler, sjm_handleGestureFromNative,\n+                               awtWindow, type, (jdouble)loc.x, (jdouble)loc.y, (jdouble)a, (jdouble)b);\n+            CHECK_EXCEPTION();\n@@ -489,2 +499,4 @@\n-        static JNF_MEMBER_CACHE(jm_isBlocked, jc_CPlatformWindow, \"isBlocked\", \"()Z\");\n-        isBlocked = JNFCallBooleanMethod(env, platformWindow, jm_isBlocked) == JNI_TRUE ? YES : NO;\n+        GET_CPLATFORM_WINDOW_CLASS_RETURN(isBlocked);\n+        DECLARE_METHOD_RETURN(jm_isBlocked, jc_CPlatformWindow, \"isBlocked\", \"()Z\", isBlocked);\n+        isBlocked = (*env)->CallBooleanMethod(env, platformWindow, jm_isBlocked) == JNI_TRUE ? YES : NO;\n+        CHECK_EXCEPTION();\n@@ -504,2 +516,4 @@\n-        static JNF_MEMBER_CACHE(jm_isBlocked, jc_CPlatformWindow, \"isSimpleWindowOwnedByEmbeddedFrame\", \"()Z\");\n-        isSimpleWindowOwnedByEmbeddedFrame = JNFCallBooleanMethod(env, platformWindow, jm_isBlocked) == JNI_TRUE ? YES : NO;\n+        GET_CPLATFORM_WINDOW_CLASS_RETURN(NO);\n+        DECLARE_METHOD_RETURN(jm_isBlocked, jc_CPlatformWindow, \"isSimpleWindowOwnedByEmbeddedFrame\", \"()Z\", NO);\n+        isSimpleWindowOwnedByEmbeddedFrame = (*env)->CallBooleanMethod(env, platformWindow, jm_isBlocked) == JNI_TRUE ? YES : NO;\n+        CHECK_EXCEPTION();\n@@ -523,2 +537,4 @@\n-            static JNF_MEMBER_CACHE(jm_isVisible, jc_CPlatformWindow, \"isVisible\", \"()Z\");\n-            isVisible = JNFCallBooleanMethod(env, platformWindow, jm_isVisible) == JNI_TRUE ? YES : NO;\n+            GET_CPLATFORM_WINDOW_CLASS_RETURN(isVisible);\n+            DECLARE_METHOD_RETURN(jm_isVisible, jc_CPlatformWindow, \"isVisible\", \"()Z\", isVisible)\n+            isVisible = (*env)->CallBooleanMethod(env, platformWindow, jm_isVisible) == JNI_TRUE ? YES : NO;\n+            CHECK_EXCEPTION();\n@@ -592,3 +608,4 @@\n-            static JNF_MEMBER_CACHE(jm_checkBlockingAndOrder, jc_CPlatformWindow,\n-                                    \"checkBlockingAndOrder\", \"()Z\");\n-            JNFCallBooleanMethod(env, platformWindow, jm_checkBlockingAndOrder);\n+            GET_CPLATFORM_WINDOW_CLASS_RETURN(NO);\n+            DECLARE_METHOD_RETURN(jm_checkBlockingAndOrder, jc_CPlatformWindow, \"checkBlockingAndOrder\", \"()Z\", NO);\n+            (*env)->CallBooleanMethod(env, platformWindow, jm_checkBlockingAndOrder);\n+            CHECK_EXCEPTION();\n@@ -625,2 +642,3 @@\n-    static JNF_MEMBER_CACHE(jm_deliverMoveResizeEvent, jc_CPlatformWindow, \"deliverMoveResizeEvent\", \"(IIIIZ)V\");\n-    JNFCallVoidMethod(env, platformWindow, jm_deliverMoveResizeEvent,\n+    GET_CPLATFORM_WINDOW_CLASS();\n+    DECLARE_METHOD(jm_deliverMoveResizeEvent, jc_CPlatformWindow, \"deliverMoveResizeEvent\", \"(IIIIZ)V\");\n+    (*env)->CallVoidMethod(env, platformWindow, jm_deliverMoveResizeEvent,\n@@ -632,0 +650,1 @@\n+    CHECK_EXCEPTION();\n@@ -696,2 +715,4 @@\n-        static JNF_MEMBER_CACHE(jm_deliverIconify, jc_CPlatformWindow, \"deliverIconify\", \"(Z)V\");\n-        JNFCallVoidMethod(env, platformWindow, jm_deliverIconify, iconify);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_METHOD(jm_deliverIconify, jc_CPlatformWindow, \"deliverIconify\", \"(Z)V\");\n+        (*env)->CallVoidMethod(env, platformWindow, jm_deliverIconify, iconify);\n+        CHECK_EXCEPTION();\n@@ -710,2 +731,4 @@\n-        static JNF_MEMBER_CACHE(jm_windowWillMiniaturize, jc_CPlatformWindow, \"windowWillMiniaturize\", \"()V\");\n-        JNFCallVoidMethod(env, platformWindow, jm_windowWillMiniaturize);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_METHOD(jm_windowWillMiniaturize, jc_CPlatformWindow, \"windowWillMiniaturize\", \"()V\");\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowWillMiniaturize);\n+        CHECK_EXCEPTION();\n@@ -740,3 +763,4 @@\n-\n-        static JNF_MEMBER_CACHE(jm_deliverWindowFocusEvent, jc_CPlatformWindow, \"deliverWindowFocusEvent\", \"(ZLsun\/lwawt\/macosx\/CPlatformWindow;)V\");\n-        JNFCallVoidMethod(env, platformWindow, jm_deliverWindowFocusEvent, (jboolean)focused, oppositeWindow);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_METHOD(jm_deliverWindowFocusEvent, jc_CPlatformWindow, \"deliverWindowFocusEvent\", \"(ZLsun\/lwawt\/macosx\/CPlatformWindow;)V\");\n+        (*env)->CallVoidMethod(env, platformWindow, jm_deliverWindowFocusEvent, (jboolean)focused, oppositeWindow);\n+        CHECK_EXCEPTION();\n@@ -769,2 +793,4 @@\n-        static JNF_MEMBER_CACHE(jm_windowDidBecomeMain, jc_CPlatformWindow, \"windowDidBecomeMain\", \"()V\");\n-        JNFCallVoidMethod(env, platformWindow, jm_windowDidBecomeMain);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_METHOD(jm_windowDidBecomeMain, jc_CPlatformWindow, \"windowDidBecomeMain\", \"()V\");\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowDidBecomeMain);\n+        CHECK_EXCEPTION();\n@@ -883,2 +909,4 @@\n-        static JNF_MEMBER_CACHE(jm_deliverWindowClosingEvent, jc_CPlatformWindow, \"deliverWindowClosingEvent\", \"()V\");\n-        JNFCallVoidMethod(env, platformWindow, jm_deliverWindowClosingEvent);\n+        GET_CPLATFORM_WINDOW_CLASS_RETURN(NO);\n+        DECLARE_METHOD_RETURN(jm_deliverWindowClosingEvent, jc_CPlatformWindow, \"deliverWindowClosingEvent\", \"()V\", NO);\n+        (*env)->CallVoidMethod(env, platformWindow, jm_deliverWindowClosingEvent);\n+        CHECK_EXCEPTION();\n@@ -891,1 +919,0 @@\n-\n@@ -893,3 +920,5 @@\n-    static JNF_CLASS_CACHE(jc_FullScreenHandler, \"com\/apple\/eawt\/FullScreenHandler\");\n-    static JNF_STATIC_MEMBER_CACHE(jm_notifyFullScreenOperation, jc_FullScreenHandler, \"handleFullScreenEventFromNative\", \"(Ljava\/awt\/Window;I)V\");\n-    static JNF_MEMBER_CACHE(jf_target, jc_CPlatformWindow, \"target\", \"Ljava\/awt\/Window;\");\n+    DECLARE_CLASS(jc_FullScreenHandler, \"com\/apple\/eawt\/FullScreenHandler\");\n+    DECLARE_STATIC_METHOD(jm_notifyFullScreenOperation, jc_FullScreenHandler,\n+                           \"handleFullScreenEventFromNative\", \"(Ljava\/awt\/Window;I)V\");\n+    GET_CPLATFORM_WINDOW_CLASS();\n+    DECLARE_FIELD(jf_target, jc_CPlatformWindow, \"target\", \"Ljava\/awt\/Window;\");\n@@ -898,1 +927,1 @@\n-        jobject awtWindow = JNFGetObjectField(env, platformWindow, jf_target);\n+        jobject awtWindow = (*env)->GetObjectField(env, platformWindow, jf_target);\n@@ -900,1 +929,2 @@\n-            JNFCallStaticVoidMethod(env, jm_notifyFullScreenOperation, awtWindow, op);\n+            (*env)->CallStaticVoidMethod(env, jc_FullScreenHandler, jm_notifyFullScreenOperation, awtWindow, op);\n+            CHECK_EXCEPTION();\n@@ -909,1 +939,0 @@\n-    static JNF_MEMBER_CACHE(jm_windowWillEnterFullScreen, jc_CPlatformWindow, \"windowWillEnterFullScreen\", \"()V\");\n@@ -911,0 +940,2 @@\n+    GET_CPLATFORM_WINDOW_CLASS();\n+    DECLARE_METHOD(jm_windowWillEnterFullScreen, jc_CPlatformWindow, \"windowWillEnterFullScreen\", \"()V\");\n@@ -913,1 +944,2 @@\n-        JNFCallVoidMethod(env, platformWindow, jm_windowWillEnterFullScreen);\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowWillEnterFullScreen);\n+        CHECK_EXCEPTION();\n@@ -920,1 +952,0 @@\n-    static JNF_MEMBER_CACHE(jm_windowDidEnterFullScreen, jc_CPlatformWindow, \"windowDidEnterFullScreen\", \"()V\");\n@@ -922,0 +953,2 @@\n+    GET_CPLATFORM_WINDOW_CLASS();\n+    DECLARE_METHOD(jm_windowDidEnterFullScreen, jc_CPlatformWindow, \"windowDidEnterFullScreen\", \"()V\");\n@@ -924,1 +957,2 @@\n-        JNFCallVoidMethod(env, platformWindow, jm_windowDidEnterFullScreen);\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowDidEnterFullScreen);\n+        CHECK_EXCEPTION();\n@@ -932,1 +966,0 @@\n-    static JNF_MEMBER_CACHE(jm_windowWillExitFullScreen, jc_CPlatformWindow, \"windowWillExitFullScreen\", \"()V\");\n@@ -934,0 +967,7 @@\n+    GET_CPLATFORM_WINDOW_CLASS();\n+    DECLARE_METHOD(jm_windowWillExitFullScreen, jc_CPlatformWindow, \"windowWillExitFullScreen\", \"()V\");\n+    if (jm_windowWillExitFullScreen == NULL) {\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        jm_windowWillExitFullScreen = (*env)->GetMethodID(env, jc_CPlatformWindow, \"windowWillExitFullScreen\", \"()V\");\n+    }\n+    CHECK_NULL(jm_windowWillExitFullScreen);\n@@ -936,1 +976,2 @@\n-        JNFCallVoidMethod(env, platformWindow, jm_windowWillExitFullScreen);\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowWillExitFullScreen);\n+        CHECK_EXCEPTION();\n@@ -943,1 +984,0 @@\n-    static JNF_MEMBER_CACHE(jm_windowDidExitFullScreen, jc_CPlatformWindow, \"windowDidExitFullScreen\", \"()V\");\n@@ -947,1 +987,4 @@\n-        JNFCallVoidMethod(env, platformWindow, jm_windowDidExitFullScreen);\n+        GET_CPLATFORM_WINDOW_CLASS();\n+        DECLARE_METHOD(jm_windowDidExitFullScreen, jc_CPlatformWindow, \"windowDidExitFullScreen\", \"()V\");\n+        (*env)->CallVoidMethod(env, platformWindow, jm_windowDidExitFullScreen);\n+        CHECK_EXCEPTION();\n@@ -963,2 +1006,4 @@\n-                        static JNF_MEMBER_CACHE(jm_orderAboveSiblings, jc_CPlatformWindow, \"orderAboveSiblings\", \"()V\");\n-                        JNFCallVoidMethod(env,platformWindow, jm_orderAboveSiblings);\n+                        GET_CPLATFORM_WINDOW_CLASS();\n+                        DECLARE_METHOD(jm_orderAboveSiblings, jc_CPlatformWindow, \"orderAboveSiblings\", \"()V\");\n+                        (*env)->CallVoidMethod(env,platformWindow, jm_orderAboveSiblings);\n+                        CHECK_EXCEPTION();\n@@ -981,2 +1026,4 @@\n-                    static JNF_MEMBER_CACHE(jm_deliverNCMouseDown, jc_CPlatformWindow, \"deliverNCMouseDown\", \"()V\");\n-                    JNFCallVoidMethod(env, platformWindow, jm_deliverNCMouseDown);\n+                    GET_CPLATFORM_WINDOW_CLASS();\n+                    DECLARE_METHOD(jm_deliverNCMouseDown, jc_CPlatformWindow, \"deliverNCMouseDown\", \"()V\");\n+                    (*env)->CallVoidMethod(env, platformWindow, jm_deliverNCMouseDown);\n+                    CHECK_EXCEPTION();\n@@ -1201,3 +1248,3 @@\n-    static JNF_CLASS_CACHE(jc_Insets, \"java\/awt\/Insets\");\n-    static JNF_CTOR_CACHE(jc_Insets_ctor, jc_Insets, \"(IIII)V\");\n-    ret = JNFNewObject(env, jc_Insets_ctor, top, left, bottom, right);\n+    DECLARE_CLASS_RETURN(jc_Insets, \"java\/awt\/Insets\", NULL);\n+    DECLARE_METHOD_RETURN(jc_Insets_ctor, jc_Insets, \"<init>\", \"(IIII)V\", NULL);\n+    ret = (*env)->NewObject(env, jc_Insets, jc_Insets_ctor, top, left, bottom, right);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTWindow.m","additions":96,"deletions":49,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#import \"JNIUtilities.h\"\n@@ -246,3 +247,5 @@\n-    static JNF_CLASS_CACHE(sjc_AppMenuBarHandler, \"com\/apple\/eawt\/_AppMenuBarHandler\");\n-    static JNF_STATIC_MEMBER_CACHE(sjm_initMenuStates, sjc_AppMenuBarHandler, \"initMenuStates\", \"(ZZZZ)V\");\n-    JNFCallStaticVoidMethod(env, sjm_initMenuStates, aboutAvailable, aboutEnabled, prefsAvailable, prefsEnabled);\n+    DECLARE_CLASS_RETURN(sjc_AppMenuBarHandler, \"com\/apple\/eawt\/_AppMenuBarHandler\", NULL);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_initMenuStates, sjc_AppMenuBarHandler, \"initMenuStates\", \"(ZZZZ)V\", NULL);\n+    (*env)->CallStaticVoidMethod(env, sjc_AppMenuBarHandler, sjm_initMenuStates,\n+                                 aboutAvailable, aboutEnabled, prefsAvailable, prefsEnabled);\n+    CHECK_EXCEPTION();\n@@ -275,1 +278,6 @@\n-static JNF_CLASS_CACHE(sjc_AppEventHandler, \"com\/apple\/eawt\/_AppEventHandler\");\n+static jclass sjc_AppEventHandler = NULL;\n+#define GET_APPEVENTHANDLER_CLASS() \\\n+    GET_CLASS(sjc_AppEventHandler, \"com\/apple\/eawt\/_AppEventHandler\");\n+\n+#define GET_APPEVENTHANDLER_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_AppEventHandler, \"com\/apple\/eawt\/_AppEventHandler\", ret);\n@@ -286,2 +294,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_handleOpenURI, sjc_AppEventHandler, \"handleOpenURI\", \"(Ljava\/lang\/String;)V\");\n-    JNFCallStaticVoidMethod(env, jm_handleOpenURI, jURL); \/\/ AWT_THREADING Safe (event)\n+    GET_APPEVENTHANDLER_CLASS();\n+    DECLARE_STATIC_METHOD(jm_handleOpenURI, sjc_AppEventHandler, \"handleOpenURI\", \"(Ljava\/lang\/String;)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenURI, jURL); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n@@ -296,3 +306,11 @@\n-    static JNF_CLASS_CACHE(sjc_ArrayList, \"java\/util\/ArrayList\");\n-    static JNF_CTOR_CACHE(jm_ArrayList_ctor, sjc_ArrayList, \"(I)V\");\n-    static JNF_MEMBER_CACHE(jm_ArrayList_add, sjc_ArrayList, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+    static jclass sjc_ArrayList = NULL;\n+    if (sjc_ArrayList == NULL) {\n+        sjc_ArrayList = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+        if (sjc_ArrayList != NULL) sjc_ArrayList = (*env)->NewGlobalRef(env, sjc_ArrayList); \\\n+    }\n+    CHECK_NULL_RETURN(sjc_ArrayList, NULL);\n+    DECLARE_METHOD_RETURN(jm_ArrayList_ctor, sjc_ArrayList, \"<init>\", \"(I)V\", NULL);\n+    DECLARE_METHOD_RETURN(jm_ArrayList_add, sjc_ArrayList, \"add\", \"(Ljava\/lang\/Object;)Z\", NULL);\n+\n+    jobject jFileNamesArray = (*env)->NewObject(env, sjc_ArrayList, jm_ArrayList_ctor, (jint)[filenames count]); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION_NULL_RETURN(jFileNamesArray, NULL);\n@@ -300,1 +318,0 @@\n-    jobject jFileNamesArray = JNFNewObject(env, jm_ArrayList_ctor, (jint)[filenames count]); \/\/ AWT_THREADING Safe (known object)\n@@ -303,1 +320,2 @@\n-        JNFCallVoidMethod(env, jFileNamesArray, jm_ArrayList_add, jFileName);\n+        (*env)->CallVoidMethod(env, jFileNamesArray, jm_ArrayList_add, jFileName);\n+        CHECK_EXCEPTION();\n@@ -328,2 +346,5 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_handleOpenFiles, sjc_AppEventHandler, \"handleOpenFiles\", \"(Ljava\/util\/List;Ljava\/lang\/String;)V\");\n-    JNFCallStaticVoidMethod(env, jm_handleOpenFiles, jFileNamesArray, jSearchString);\n+    GET_APPEVENTHANDLER_CLASS();\n+    DECLARE_STATIC_METHOD(jm_handleOpenFiles, sjc_AppEventHandler,\n+                              \"handleOpenFiles\", \"(Ljava\/util\/List;Ljava\/lang\/String;)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenFiles, jFileNamesArray, jSearchString);\n+    CHECK_EXCEPTION();\n@@ -344,2 +365,5 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_handlePrintFile, sjc_AppEventHandler, \"handlePrintFiles\", \"(Ljava\/util\/List;)V\");\n-    JNFCallStaticVoidMethod(env, jm_handlePrintFile, jFileNamesArray); \/\/ AWT_THREADING Safe (event)\n+    GET_APPEVENTHANDLER_CLASS_RETURN(NSPrintingCancelled);\n+    DECLARE_STATIC_METHOD_RETURN(jm_handlePrintFile, sjc_AppEventHandler,\n+                              \"handlePrintFiles\", \"(Ljava\/util\/List;)V\", NSPrintingCancelled);\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handlePrintFile, jFileNamesArray); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n@@ -357,2 +381,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_handleNativeNotification, sjc_AppEventHandler, \"handleNativeNotification\", \"(I)V\");\n-    JNFCallStaticVoidMethod(env, jm_handleNativeNotification, notificationType); \/\/ AWT_THREADING Safe (event)\n+    GET_APPEVENTHANDLER_CLASS();\n+    DECLARE_STATIC_METHOD(jm_handleNativeNotification, sjc_AppEventHandler, \"handleNativeNotification\", \"(I)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleNativeNotification, notificationType); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/ApplicationDelegate.m","additions":43,"deletions":17,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#import \"jni_util.h\"\n+#import \"JNIUtilities.h\"\n@@ -91,3 +91,0 @@\n-        \/\/ Notify that the content might be changed\n-        static JNF_CLASS_CACHE(jc_CClipboard, \"sun\/lwawt\/macosx\/CClipboard\");\n-        static JNF_STATIC_MEMBER_CACHE(jm_contentChanged, jc_CClipboard, \"notifyChanged\", \"()V\");\n@@ -95,1 +92,5 @@\n-        JNFCallStaticVoidMethod(env, jm_contentChanged);\n+        \/\/ Notify that the content might be changed\n+        DECLARE_CLASS(jc_CClipboard, \"sun\/lwawt\/macosx\/CClipboard\");\n+        DECLARE_STATIC_METHOD(jm_contentChanged, jc_CClipboard, \"notifyChanged\", \"()V\");\n+        (*env)->CallStaticVoidMethod(env, jc_CClipboard, jm_contentChanged);\n+        CHECK_EXCEPTION();\n@@ -98,1 +99,1 @@\n-        static JNF_MEMBER_CACHE(jm_lostOwnership, jc_CClipboard, \"notifyLostOwnership\", \"()V\");\n+        DECLARE_METHOD(jm_lostOwnership, jc_CClipboard, \"notifyLostOwnership\", \"()V\");\n@@ -101,2 +102,2 @@\n-                JNIEnv *env = [ThreadUtilities getJNIEnv];\n-                JNFCallVoidMethod(env, self.clipboardOwner, jm_lostOwnership); \/\/ AWT_THREADING Safe (event)\n+                (*env)->CallVoidMethod(env, self.clipboardOwner, jm_lostOwnership); \/\/ AWT_THREADING Safe (event)\n+                CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CClipboard.m","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#import \"JNIUtilities.h\"\n@@ -72,3 +73,11 @@\n-JNF_CLASS_CACHE(DataTransfererClass, \"sun\/awt\/datatransfer\/DataTransferer\");\n-JNF_CLASS_CACHE(CDragSourceContextPeerClass, \"sun\/lwawt\/macosx\/CDragSourceContextPeer\");\n-JNF_CLASS_CACHE(CImageClass, \"sun\/lwawt\/macosx\/CImage\");\n+static jclass DataTransfererClass = NULL;\n+static jclass CDragSourceContextPeerClass =  NULL;\n+\n+#define GET_DT_CLASS() \\\n+    GET_CLASS(DataTransfererClass, \"sun\/awt\/datatransfer\/DataTransferer\");\n+\n+#define GET_DT_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(DataTransfererClass, \"sun\/awt\/datatransfer\/DataTransferer\", ret);\n+\n+#define GET_DSCP_CLASS() \\\n+    GET_CLASS(CDragSourceContextPeerClass, \"sun\/lwawt\/macosx\/CDragSourceContextPeer\");\n@@ -215,2 +224,5 @@\n-    JNF_STATIC_MEMBER_CACHE(getInstanceMethod, DataTransfererClass, \"getInstance\", \"()Lsun\/awt\/datatransfer\/DataTransferer;\");\n-    return JNFCallStaticObjectMethod(env, getInstanceMethod);\n+    GET_DT_CLASS_RETURN(NULL);\n+    DECLARE_STATIC_METHOD_RETURN(getInstanceMethod, DataTransfererClass, \"getInstance\", \"()Lsun\/awt\/datatransfer\/DataTransferer;\", NULL);\n+    jobject o = (*env)->CallStaticObjectMethod(env, DataTransfererClass, getInstanceMethod);\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -230,2 +242,3 @@\n-        JNF_MEMBER_CACHE(convertDataMethod, DataTransfererClass, \"convertData\", \"(Ljava\/lang\/Object;Ljava\/awt\/datatransfer\/Transferable;JLjava\/util\/Map;Z)[B\");\n-        data = JNFCallObjectMethod(env, transferer, convertDataMethod, fComponent, fTransferable, format, fFormatMap, (jboolean) TRUE);\n+        GET_DT_CLASS_RETURN(NULL);\n+        DECLARE_METHOD_RETURN(convertDataMethod, DataTransfererClass, \"convertData\", \"(Ljava\/lang\/Object;Ljava\/awt\/datatransfer\/Transferable;JLjava\/util\/Map;Z)[B\", NULL);\n+        data = (*env)->CallObjectMethod(env, transferer, convertDataMethod, fComponent, fTransferable, format, fFormatMap, (jboolean) TRUE);\n@@ -233,0 +246,1 @@\n+    CHECK_EXCEPTION();\n@@ -558,1 +572,2 @@\n-        JNF_MEMBER_CACHE(dragDropFinishedMethod, CDragSourceContextPeerClass, \"dragDropFinished\", \"(ZIII)V\");\n+        GET_DSCP_CLASS();\n+        DECLARE_METHOD(dragDropFinishedMethod, CDragSourceContextPeerClass, \"dragDropFinished\", \"(ZIII)V\");\n@@ -560,3 +575,4 @@\n-        JNFCallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n-                JNF_MEMBER_CACHE(resetHoveringMethod, CDragSourceContextPeerClass, \"resetHovering\", \"()V\");\n-        JNFCallVoidMethod(env, fDragSourceContextPeer, resetHoveringMethod); \/\/ Hust reset static variable\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        DECLARE_METHOD(resetHoveringMethod, CDragSourceContextPeerClass, \"resetHovering\", \"()V\");\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, resetHoveringMethod); \/\/ Hust reset static variable\n+        CHECK_EXCEPTION();\n@@ -597,2 +613,4 @@\n-    JNF_MEMBER_CACHE(operationChangedMethod, CDragSourceContextPeerClass, \"operationChanged\", \"(IIII)V\");\n-    JNFCallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    GET_DSCP_CLASS();\n+    DECLARE_METHOD(operationChangedMethod, CDragSourceContextPeerClass, \"operationChanged\", \"(IIII)V\");\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n@@ -670,3 +688,4 @@\n-        JNF_MEMBER_CACHE(dragMotionMethod, CDragSourceContextPeerClass, \"dragMotion\", \"(IIII)V\");\n-        JNFCallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n-\n+        GET_DSCP_CLASS();\n+        DECLARE_METHOD(dragMotionMethod, CDragSourceContextPeerClass, \"dragMotion\", \"(IIII)V\");\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        CHECK_EXCEPTION();\n@@ -674,2 +693,3 @@\n-        JNF_MEMBER_CACHE(dragMouseMovedMethod, CDragSourceContextPeerClass, \"dragMouseMoved\", \"(IIII)V\");\n-        JNFCallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        DECLARE_METHOD(dragMouseMovedMethod, CDragSourceContextPeerClass, \"dragMouseMoved\", \"(IIII)V\");\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        CHECK_EXCEPTION();\n@@ -699,2 +719,4 @@\n-    JNF_MEMBER_CACHE(dragEnterMethod, CDragSourceContextPeerClass, \"dragEnter\", \"(IIII)V\");\n-    JNFCallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    GET_DSCP_CLASS();\n+    DECLARE_METHOD(dragEnterMethod, CDragSourceContextPeerClass, \"dragEnter\", \"(IIII)V\");\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+     CHECK_EXCEPTION();\n@@ -709,2 +731,5 @@\n-    JNF_MEMBER_CACHE(dragExitMethod, CDragSourceContextPeerClass, \"dragExit\", \"(II)V\");\n-    JNFCallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    GET_DSCP_CLASS();\n+    DECLARE_METHOD(dragExitMethod, CDragSourceContextPeerClass, \"dragExit\", \"(II)V\");\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDragSource.m","additions":47,"deletions":22,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#import \"JNIUtilities.h\"\n@@ -60,1 +61,6 @@\n-extern JNFClassInfo jc_CDropTargetContextPeer;\n+extern jclass jc_CDropTargetContextPeer;\n+#define GET_DTCP_CLASS() \\\n+    GET_CLASS(jc_CDropTargetContextPeer, \"sun\/lwawt\/macosx\/CDropTargetContextPeer\");\n+\n+#define GET_DTCP_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(jc_CDropTargetContextPeer, \"sun\/lwawt\/macosx\/CDropTargetContextPeer\", ret);\n@@ -461,1 +467,3 @@\n-        JNF_STATIC_MEMBER_CACHE(getDropTargetContextPeerMethod, jc_CDropTargetContextPeer, \"getDropTargetContextPeer\", \"()Lsun\/lwawt\/macosx\/CDropTargetContextPeer;\");\n+        GET_DTCP_CLASS_RETURN(dragOp);\n+        DECLARE_STATIC_METHOD_RETURN(getDropTargetContextPeerMethod, jc_CDropTargetContextPeer,\n+                                     \"getDropTargetContextPeer\", \"()Lsun\/lwawt\/macosx\/CDropTargetContextPeer;\", dragOp)\n@@ -464,1 +472,2 @@\n-            jobject dropTargetContextPeer = JNFCallStaticObjectMethod(env, getDropTargetContextPeerMethod);\n+            jobject dropTargetContextPeer = (*env)->CallStaticObjectMethod(env, jc_CDropTargetContextPeer, getDropTargetContextPeerMethod);\n+            CHECK_EXCEPTION();\n@@ -496,1 +505,3 @@\n-        JNF_MEMBER_CACHE(handleEnterMessageMethod, jc_CDropTargetContextPeer, \"handleEnterMessage\", \"(Ljava\/awt\/Component;IIII[JJ)I\");\n+        GET_DTCP_CLASS_RETURN(dragOp);\n+        DECLARE_METHOD_RETURN(handleEnterMessageMethod, jc_CDropTargetContextPeer,\n+                              \"handleEnterMessage\", \"(Ljava\/awt\/Component;IIII[JJ)I\", dragOp);\n@@ -500,1 +511,1 @@\n-            actions = JNFCallIntMethod(env, fDropTargetContextPeer, handleEnterMessageMethod,\n+            actions = (*env)->CallIntMethod(env, fDropTargetContextPeer, handleEnterMessageMethod,\n@@ -581,1 +592,2 @@\n-        JNF_MEMBER_CACHE(handleMotionMessageMethod, jc_CDropTargetContextPeer, \"handleMotionMessage\", \"(Ljava\/awt\/Component;IIII[JJ)I\");\n+        GET_DTCP_CLASS_RETURN(dragOp);\n+        DECLARE_METHOD_RETURN(handleMotionMessageMethod, jc_CDropTargetContextPeer, \"handleMotionMessage\", \"(Ljava\/awt\/Component;IIII[JJ)I\", dragOp);\n@@ -584,1 +596,2 @@\n-            userAction = JNFCallIntMethod(env, fDropTargetContextPeer, handleMotionMessageMethod, fComponent, (jint) javaLocation.x, (jint) javaLocation.y, dropAction, actions, formats, ptr_to_jlong(self)); \/\/ AWT_THREADING Safe (CToolkitThreadBlockedHandler)\n+            userAction = (*env)->CallIntMethod(env, fDropTargetContextPeer, handleMotionMessageMethod, fComponent,\n+                         (jint) javaLocation.x, (jint) javaLocation.y, dropAction, actions, formats, ptr_to_jlong(self)); \/\/ AWT_THREADING Safe (CToolkitThreadBlockedHandler)\n@@ -611,1 +624,2 @@\n-        JNF_MEMBER_CACHE(handleExitMessageMethod, jc_CDropTargetContextPeer, \"handleExitMessage\", \"(Ljava\/awt\/Component;J)V\");\n+        GET_DTCP_CLASS();\n+        DECLARE_METHOD(handleExitMessageMethod, jc_CDropTargetContextPeer, \"handleExitMessage\", \"(Ljava\/awt\/Component;J)V\");\n@@ -615,1 +629,1 @@\n-            JNFCallVoidMethod(env, fDropTargetContextPeer,\n+            (*env)->CallVoidMethod(env, fDropTargetContextPeer,\n@@ -617,0 +631,1 @@\n+            CHECK_EXCEPTION();\n@@ -661,1 +676,2 @@\n-        JNF_MEMBER_CACHE(handleDropMessageMethod, jc_CDropTargetContextPeer, \"handleDropMessage\", \"(Ljava\/awt\/Component;IIII[JJ)V\");\n+        GET_DTCP_CLASS_RETURN(NO);\n+        DECLARE_METHOD_RETURN(handleDropMessageMethod, jc_CDropTargetContextPeer, \"handleDropMessage\", \"(Ljava\/awt\/Component;IIII[JJ)V\", NO);\n@@ -664,1 +680,3 @@\n-            JNFCallVoidMethod(env, fDropTargetContextPeer, handleDropMessageMethod, fComponent, (jint) javaLocation.x, (jint) javaLocation.y, dropAction, actions, formats, ptr_to_jlong(self)); \/\/ AWT_THREADING Safe (event)\n+            (*env)->CallVoidMethod(env, fDropTargetContextPeer, handleDropMessageMethod, fComponent,\n+                     (jint) javaLocation.x, (jint) javaLocation.y, dropAction, actions, formats, ptr_to_jlong(self)); \/\/ AWT_THREADING Safe (event)\n+            CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTarget.m","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#import \"JNIUtilities.h\"\n@@ -35,1 +36,6 @@\n-JNF_CLASS_CACHE(jc_CDropTargetContextPeer, \"sun\/lwawt\/macosx\/CDropTargetContextPeer\");\n+jclass jc_CDropTargetContextPeer = NULL;\n+#define GET_DTCP_CLASS() \\\n+    GET_CLASS(jc_CDropTargetContextPeer, \"sun\/lwawt\/macosx\/CDropTargetContextPeer\");\n+\n+#define GET_DTCP_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(jc_CDropTargetContextPeer, \"sun\/lwawt\/macosx\/CDropTargetContextPeer\", ret);\n@@ -40,2 +46,4 @@\n-    JNF_MEMBER_CACHE(transferFailedMethod, jc_CDropTargetContextPeer, \"transferFailed\", \"(J)V\");\n-    JNFCallVoidMethod(env, jthis, transferFailedMethod, jformat); \/\/ AWT_THREADING Safe (!appKit)\n+    GET_DTCP_CLASS();\n+    DECLARE_METHOD(transferFailedMethod, jc_CDropTargetContextPeer, \"transferFailed\", \"(J)V\");\n+    (*env)->CallVoidMethod(env, jthis, transferFailedMethod, jformat); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -80,1 +88,2 @@\n-    JNF_MEMBER_CACHE(newDataMethod, jc_CDropTargetContextPeer, \"newData\", \"(J[B)V\");\n+    GET_DTCP_CLASS_RETURN(result);\n+    DECLARE_METHOD_RETURN(newDataMethod, jc_CDropTargetContextPeer, \"newData\", \"(J[B)V\", result);\n@@ -97,1 +106,1 @@\n-        JNFCallVoidMethod(env, jthis, newDataMethod, jformat, jdropdata); \/\/ AWT_THREADING Safe (!appKit)\n+        (*env)->CallVoidMethod(env, jthis, newDataMethod, jformat, jdropdata); \/\/ AWT_THREADING Safe (!appKit)\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTargetContextPeer.m","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#import \"JNIUtilities.h\"\n@@ -147,3 +148,4 @@\n-    static JNF_CLASS_CACHE(jc_CFileDialog, \"sun\/lwawt\/macosx\/CFileDialog\");\n-    static JNF_MEMBER_CACHE(jm_queryFF, jc_CFileDialog, \"queryFilenameFilter\", \"(Ljava\/lang\/String;)Z\");\n-    BOOL returnValue = JNFCallBooleanMethod(env, fFileDialog, jm_queryFF, jString); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    DECLARE_CLASS_RETURN(jc_CFileDialog, \"sun\/lwawt\/macosx\/CFileDialog\", NO);\n+    DECLARE_METHOD_RETURN(jm_queryFF, jc_CFileDialog, \"queryFilenameFilter\", \"(Ljava\/lang\/String;)Z\", NO);\n+    BOOL returnValue = (*env)->CallBooleanMethod(env, fFileDialog, jm_queryFF, jString); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -225,2 +227,2 @@\n-        static JNF_CLASS_CACHE(jc_String, \"java\/lang\/String\");\n-        returnValue = JNFNewObjectArray(env, &jc_String, count);\n+        DECLARE_CLASS_RETURN(jc_String, \"java\/lang\/String\", NULL);\n+        returnValue = (*env)->NewObjectArray(env, count, jc_String, NULL);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CFileDialog.m","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"JNIUtilities.h\"\n@@ -162,3 +163,4 @@\n-    static JNF_CLASS_CACHE(jc_DisplayMode, \"java\/awt\/DisplayMode\");\n-    static JNF_CTOR_CACHE(jc_DisplayMode_ctor, jc_DisplayMode, \"(IIII)V\");\n-    ret = JNFNewObject(env, jc_DisplayMode_ctor, w, h, bpp, refrate);\n+    DECLARE_CLASS_RETURN(jc_DisplayMode, \"java\/awt\/DisplayMode\", ret);\n+    DECLARE_METHOD_RETURN(jc_DisplayMode_ctor, jc_DisplayMode, \"<init>\", \"(IIII)V\", ret);\n+    ret = (*env)->NewObject(env, jc_DisplayMode, jc_DisplayMode_ctor, w, h, bpp, refrate);\n+    CHECK_EXCEPTION();\n@@ -255,3 +257,3 @@\n-    static JNF_CLASS_CACHE(jc_Insets, \"java\/awt\/Insets\");\n-    static JNF_CTOR_CACHE(jc_Insets_ctor, jc_Insets, \"(IIII)V\");\n-    ret = JNFNewObject(env, jc_Insets_ctor, top, left, bottom, right);\n+    DECLARE_CLASS_RETURN(jc_Insets, \"java\/awt\/Insets\", ret);\n+    DECLARE_METHOD_RETURN(jc_Insets_ctor, jc_Insets, \"<init>\", \"(IIII)V\", ret);\n+    ret = (*env)->NewObject(env, jc_Insets, jc_Insets_ctor, top, left, bottom, right);\n@@ -330,1 +332,1 @@\n-    static JNF_CLASS_CACHE(jc_DisplayMode, \"java\/awt\/DisplayMode\");\n+    DECLARE_CLASS_RETURN(jc_DisplayMode, \"java\/awt\/DisplayMode\", NULL);\n@@ -332,1 +334,1 @@\n-    jreturnArray = JNFNewObjectArray(env, &jc_DisplayMode, (jsize) numModes);\n+    jreturnArray = (*env)->NewObjectArray(env, (jsize)numModes, jc_DisplayMode, NULL);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#import \"jni_util.h\"\n+#import \"JNIUtilities.h\"\n@@ -77,1 +77,2 @@\n-    ret = JNFNewIntArray(env, displayActiveCount);\n+    ret = (*env)->NewIntArray(env, displayActiveCount);\n+    CHECK_NULL_RETURN(ret, NULL);\n@@ -125,2 +126,2 @@\n-            static JNF_CLASS_CACHE(jc_CGraphicsEnvironment, \"sun\/awt\/CGraphicsEnvironment\");\n-            static JNF_MEMBER_CACHE(jm_displayReconfiguration,\n+            DECLARE_CLASS(jc_CGraphicsEnvironment, \"sun\/awt\/CGraphicsEnvironment\");\n+            DECLARE_METHOD(jm_displayReconfiguration,\n@@ -128,1 +129,1 @@\n-            JNFCallVoidMethod(env, graphicsEnv, jm_displayReconfiguration,\n+            (*env)->CallVoidMethod(env, graphicsEnv, jm_displayReconfiguration,\n@@ -131,0 +132,1 @@\n+            CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsEnv.m","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -408,2 +408,2 @@\n-    static JNF_CLASS_CACHE(jc_Dimension, \"java\/awt\/Dimension\");\n-    jreturnArray = JNFNewObjectArray(env, &jc_Dimension, count);\n+    DECLARE_CLASS_RETURN(jc_Dimension, \"java\/awt\/Dimension\", jreturnArray);\n+    jreturnArray = (*env)->NewObjectArray(env, count, jc_Dimension, NULL);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CImage.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#import \"JNIUtilities.h\"\n@@ -40,9 +41,0 @@\n-static JNF_CLASS_CACHE(jc_localeClass, \"java\/util\/Locale\");\n-static JNF_CTOR_CACHE(jm_localeCons, jc_localeClass, \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)V\");\n-static JNF_CLASS_CACHE(jc_arrayListClass, \"java\/util\/ArrayList\");\n-static JNF_CTOR_CACHE(jm_arrayListCons, jc_arrayListClass, \"()V\");\n-static JNF_MEMBER_CACHE(jm_listAdd, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n-static JNF_MEMBER_CACHE(jm_listContains, jc_arrayListClass, \"contains\", \"(Ljava\/lang\/Object;)Z\");\n-\n-\n-\n@@ -54,0 +46,2 @@\n+    DECLARE_CLASS_RETURN(jc_localeClass, \"java\/util\/Locale\", NULL);\n+    DECLARE_METHOD_RETURN(jm_localeCons, jc_localeClass, \"<init>\", \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)V\", NULL);\n@@ -80,1 +74,1 @@\n-                localeObj = JNFNewObject(env, jm_localeCons,langObj, ctryObj,\n+                localeObj = (*env)->NewObject(env, jc_localeClass, jm_localeCons,langObj, ctryObj,\n@@ -82,0 +76,1 @@\n+                CHECK_EXCEPTION();\n@@ -298,0 +293,5 @@\n+    DECLARE_CLASS_RETURN(jc_arrayListClass, \"java\/util\/ArrayList\", NULL);\n+    DECLARE_METHOD_RETURN(jm_arrayListCons, jc_arrayListClass, \"<init>\", \"()V\", NULL);\n+    DECLARE_METHOD_RETURN(jm_listAdd, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\", NULL);\n+    DECLARE_METHOD_RETURN(jm_listContains, jc_arrayListClass, \"contains\", \"(Ljava\/lang\/Object;)Z\", NULL);\n+\n@@ -312,1 +312,2 @@\n-    returnValue = JNFNewObject(env, jm_arrayListCons);\n+    returnValue = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+    CHECK_EXCEPTION_NULL_RETURN(returnValue, NULL);\n@@ -320,2 +321,3 @@\n-        if (JNFCallBooleanMethod(env, returnValue, jm_listContains, localeObj) == JNI_FALSE) {\n-            JNFCallBooleanMethod(env, returnValue, jm_listAdd, localeObj);\n+        if ((*env)->CallBooleanMethod(env, returnValue, jm_listContains, localeObj) == JNI_FALSE) {\n+            if ((*env)->ExceptionOccurred(env)) (*env)->ExceptionClear(env);\n+            (*env)->CallBooleanMethod(env, returnValue, jm_listAdd, localeObj);\n@@ -323,0 +325,1 @@\n+        if ((*env)->ExceptionOccurred(env)) (*env)->ExceptionClear(env);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CInputMethod.m","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#import \"JNIUtilities.h\"\n@@ -95,2 +96,2 @@\n-        static JNF_CLASS_CACHE(jc_CCheckboxMenuItem, \"sun\/lwawt\/macosx\/CCheckboxMenuItem\");\n-        static JNF_MEMBER_CACHE(jm_ckHandleAction, jc_CCheckboxMenuItem, \"handleAction\", \"(Z)V\");\n+        DECLARE_CLASS(jc_CCheckboxMenuItem, \"sun\/lwawt\/macosx\/CCheckboxMenuItem\");\n+        DECLARE_METHOD(jm_ckHandleAction, jc_CCheckboxMenuItem, \"handleAction\", \"(Z)V\");\n@@ -102,1 +103,1 @@\n-        JNFCallVoidMethod(env, fPeer, jm_ckHandleAction, newState);\n+        (*env)->CallVoidMethod(env, fPeer, jm_ckHandleAction, newState);\n@@ -104,2 +105,2 @@\n-        static JNF_CLASS_CACHE(jc_CMenuItem, \"sun\/lwawt\/macosx\/CMenuItem\");\n-        static JNF_MEMBER_CACHE(jm_handleAction, jc_CMenuItem, \"handleAction\", \"(JI)V\"); \/\/ AWT_THREADING Safe (event)\n+        DECLARE_CLASS(jc_CMenuItem, \"sun\/lwawt\/macosx\/CMenuItem\");\n+        DECLARE_METHOD(jm_handleAction, jc_CMenuItem, \"handleAction\", \"(JI)V\"); \/\/ AWT_THREADING Safe (event)\n@@ -110,1 +111,1 @@\n-        JNFCallVoidMethod(env, fPeer, jm_handleAction, UTC(currEvent), javaModifiers); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fPeer, jm_handleAction, UTC(currEvent), javaModifiers); \/\/ AWT_THREADING Safe (event)\n@@ -112,0 +113,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenuItem.m","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,7 +39,23 @@\n-\n-static JNF_CLASS_CACHE(sjc_Paper, \"java\/awt\/print\/Paper\");\n-static JNF_CLASS_CACHE(sjc_PageFormat, \"java\/awt\/print\/PageFormat\");\n-static JNF_CLASS_CACHE(sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\");\n-static JNF_CLASS_CACHE(sjc_CPrinterDialog, \"sun\/lwawt\/macosx\/CPrinterDialog\");\n-static JNF_MEMBER_CACHE(sjm_getNSPrintInfo, sjc_CPrinterJob, \"getNSPrintInfo\", \"()J\");\n-static JNF_MEMBER_CACHE(sjm_printerJob, sjc_CPrinterDialog, \"fPrinterJob\", \"Lsun\/lwawt\/macosx\/CPrinterJob;\");\n+#import \"JNIUtilities.h\"\n+\n+static jclass sjc_Paper = NULL;\n+static jclass sjc_PageFormat = NULL;\n+static jclass sjc_CPrinterJob = NULL;\n+static jclass sjc_CPrinterDialog = NULL;\n+static jmethodID sjm_getNSPrintInfo = NULL;\n+static jmethodID sjm_printerJob = NULL;\n+\n+#define GET_PAPER_CLASS() GET_CLASS(sjc_Paper, \"java\/awt\/print\/Paper\");\n+#define GET_PAGEFORMAT_CLASS() GET_CLASS(sjc_PageFormat, \"java\/awt\/print\/PageFormat\");\n+#define GET_CPRINTERDIALOG_CLASS() GET_CLASS(sjc_CPrinterDialog, \"sun\/lwawt\/macosx\/CPrinterDialog\");\n+#define GET_CPRINTERDIALOG_CLASS_RETURN(ret) GET_CLASS_RETURN(sjc_CPrinterDialog, \"sun\/lwawt\/macosx\/CPrinterDialog\", ret);\n+#define GET_CPRINTERJOB_CLASS() GET_CLASS(sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\");\n+#define GET_CPRINTERJOB_CLASS_RETURN(ret) GET_CLASS_RETURN(sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\", ret);\n+\n+#define GET_NSPRINTINFO_METHOD_RETURN(ret) \\\n+    GET_CPRINTERJOB_CLASS_RETURN(ret); \\\n+    GET_METHOD_RETURN(sjm_getNSPrintInfo, sjc_CPrinterJob, \"getNSPrintInfo\", \"()J\", ret);\n+\n+#define GET_CPRINTERDIALOG_METHOD_RETURN(ret) \\\n+   GET_CPRINTERDIALOG_CLASS_RETURN(ret); \\\n+   GET_METHOD_RETURN(sjm_printerJob, sjc_CPrinterDialog, \"fPrinterJob\", \"Lsun\/lwawt\/macosx\/CPrinterJob;\", ret);\n@@ -143,2 +159,4 @@\n-    static JNF_MEMBER_CACHE(jm_setSize, sjc_Paper, \"setSize\", \"(DD)V\");\n-    static JNF_MEMBER_CACHE(jm_setImageableArea, sjc_Paper, \"setImageableArea\", \"(DDDD)V\");\n+    GET_PAGEFORMAT_CLASS();\n+    GET_PAPER_CLASS();\n+    DECLARE_METHOD(jm_setSize, sjc_Paper, \"setSize\", \"(DD)V\");\n+    DECLARE_METHOD(jm_setImageableArea, sjc_Paper, \"setImageableArea\", \"(DDDD)V\");\n@@ -170,1 +188,2 @@\n-    JNFCallVoidMethod(env, dst, jm_setSize, jPaperW, jPaperH); \/\/ AWT_THREADING Safe (known object - always actual Paper)\n+    (*env)->CallVoidMethod(env, dst, jm_setSize, jPaperW, jPaperH); \/\/ AWT_THREADING Safe (known object - always actual Paper)\n+    CHECK_EXCEPTION();\n@@ -183,1 +202,2 @@\n-    JNFCallVoidMethod(env, dst, jm_setImageableArea, jImageX, jImageY, jImageW, jImageH); \/\/ AWT_THREADING Safe (known object - always actual Paper)\n+    (*env)->CallVoidMethod(env, dst, jm_setImageableArea, jImageX, jImageY, jImageW, jImageH); \/\/ AWT_THREADING Safe (known object - always actual Paper)\n+    CHECK_EXCEPTION();\n@@ -190,6 +210,8 @@\n-    static JNF_MEMBER_CACHE(jm_getWidth, sjc_Paper, \"getWidth\", \"()D\");\n-    static JNF_MEMBER_CACHE(jm_getHeight, sjc_Paper, \"getHeight\", \"()D\");\n-    static JNF_MEMBER_CACHE(jm_getImageableX, sjc_Paper, \"getImageableX\", \"()D\");\n-    static JNF_MEMBER_CACHE(jm_getImageableY, sjc_Paper, \"getImageableY\", \"()D\");\n-    static JNF_MEMBER_CACHE(jm_getImageableW, sjc_Paper, \"getImageableWidth\", \"()D\");\n-    static JNF_MEMBER_CACHE(jm_getImageableH, sjc_Paper, \"getImageableHeight\", \"()D\");\n+    GET_PAGEFORMAT_CLASS();\n+    GET_PAPER_CLASS();\n+    DECLARE_METHOD(jm_getWidth, sjc_Paper, \"getWidth\", \"()D\");\n+    DECLARE_METHOD(jm_getHeight, sjc_Paper, \"getHeight\", \"()D\");\n+    DECLARE_METHOD(jm_getImageableX, sjc_Paper, \"getImageableX\", \"()D\");\n+    DECLARE_METHOD(jm_getImageableY, sjc_Paper, \"getImageableY\", \"()D\");\n+    DECLARE_METHOD(jm_getImageableW, sjc_Paper, \"getImageableWidth\", \"()D\");\n+    DECLARE_METHOD(jm_getImageableH, sjc_Paper, \"getImageableHeight\", \"()D\");\n@@ -202,2 +224,4 @@\n-    jdouble jPhysicalWidth = JNFCallDoubleMethod(env, src, jm_getWidth); \/\/ AWT_THREADING Safe (!appKit)\n-    jdouble jPhysicalHeight = JNFCallDoubleMethod(env, src, jm_getHeight); \/\/ AWT_THREADING Safe (!appKit)\n+    jdouble jPhysicalWidth = (*env)->CallDoubleMethod(env, src, jm_getWidth); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n+    jdouble jPhysicalHeight = (*env)->CallDoubleMethod(env, src, jm_getHeight); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -208,4 +232,8 @@\n-    jdouble jImageX = JNFCallDoubleMethod(env, src, jm_getImageableX); \/\/ AWT_THREADING Safe (!appKit)\n-    jdouble jImageY = JNFCallDoubleMethod(env, src, jm_getImageableY); \/\/ AWT_THREADING Safe (!appKit)\n-    jdouble jImageW = JNFCallDoubleMethod(env, src, jm_getImageableW); \/\/ AWT_THREADING Safe (!appKit)\n-    jdouble jImageH = JNFCallDoubleMethod(env, src, jm_getImageableH); \/\/ AWT_THREADING Safe (!appKit)\n+    jdouble jImageX = (*env)->CallDoubleMethod(env, src, jm_getImageableX); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n+    jdouble jImageY = (*env)->CallDoubleMethod(env, src, jm_getImageableY); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n+    jdouble jImageW = (*env)->CallDoubleMethod(env, src, jm_getImageableW); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n+    jdouble jImageH = (*env)->CallDoubleMethod(env, src, jm_getImageableH); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -223,3 +251,6 @@\n-    static JNF_MEMBER_CACHE(jm_setOrientation, sjc_PageFormat, \"setOrientation\", \"(I)V\");\n-    static JNF_MEMBER_CACHE(jm_setPaper, sjc_PageFormat, \"setPaper\", \"(Ljava\/awt\/print\/Paper;)V\");\n-    static JNF_CTOR_CACHE(jm_Paper_ctor, sjc_Paper, \"()V\");\n+    GET_CPRINTERJOB_CLASS();\n+    GET_PAGEFORMAT_CLASS();\n+    GET_PAPER_CLASS();\n+    DECLARE_METHOD(jm_setOrientation, sjc_PageFormat, \"setOrientation\", \"(I)V\");\n+    DECLARE_METHOD(jm_setPaper, sjc_PageFormat, \"setPaper\", \"(Ljava\/awt\/print\/Paper;)V\");\n+    DECLARE_METHOD(jm_Paper_ctor, sjc_Paper, \"<init>\", \"()V\");\n@@ -249,1 +280,2 @@\n-    JNFCallVoidMethod(env, dst, jm_setOrientation, jOrientation); \/\/ AWT_THREADING Safe (!appKit)\n+    (*env)->CallVoidMethod(env, dst, jm_setOrientation, jOrientation); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -252,1 +284,5 @@\n-    jobject paper = JNFNewObject(env, jm_Paper_ctor); \/\/ AWT_THREADING Safe (known object)\n+    jobject paper = (*env)->NewObject(env, sjc_Paper, jm_Paper_ctor); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n+    if (paper == NULL) {\n+        return;\n+    }\n@@ -257,1 +293,2 @@\n-    JNFCallVoidMethod(env, dst, jm_setPaper, paper); \/\/ AWT_THREADING Safe (!appKit)\n+    (*env)->CallVoidMethod(env, dst, jm_setPaper, paper); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -266,3 +303,6 @@\n-    static JNF_MEMBER_CACHE(jm_getOrientation, sjc_PageFormat, \"getOrientation\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getPaper, sjc_PageFormat, \"getPaper\", \"()Ljava\/awt\/print\/Paper;\");\n-    static JNF_MEMBER_CACHE(jm_getPrinterName, sjc_CPrinterJob, \"getPrinterName\", \"()Ljava\/lang\/String;\");\n+    GET_CPRINTERJOB_CLASS();\n+    GET_PAGEFORMAT_CLASS();\n+    GET_PAPER_CLASS();\n+    DECLARE_METHOD(jm_getOrientation, sjc_PageFormat, \"getOrientation\", \"()I\");\n+    DECLARE_METHOD(jm_getPaper, sjc_PageFormat, \"getPaper\", \"()Ljava\/awt\/print\/Paper;\");\n+    DECLARE_METHOD(jm_getPrinterName, sjc_CPrinterJob, \"getPrinterName\", \"()Ljava\/lang\/String;\");\n@@ -277,1 +317,2 @@\n-    jobject paper = JNFCallObjectMethod(env, srcPageFormat, jm_getPaper); \/\/ AWT_THREADING Safe (!appKit)\n+    jobject paper = (*env)->CallObjectMethod(env, srcPageFormat, jm_getPaper); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -281,1 +322,1 @@\n-    switch (JNFCallIntMethod(env, srcPageFormat, jm_getOrientation)) { \/\/ AWT_THREADING Safe (!appKit)\n+    switch ((*env)->CallIntMethod(env, srcPageFormat, jm_getOrientation)) { \/\/ AWT_THREADING Safe (!appKit)\n@@ -299,0 +340,1 @@\n+    CHECK_EXCEPTION();\n@@ -303,1 +345,2 @@\n-    jobject printerNameObj = JNFCallObjectMethod(env, srcPrintJob, jm_getPrinterName);\n+    jobject printerNameObj = (*env)->CallObjectMethod(env, srcPrintJob, jm_getPrinterName);\n+    CHECK_EXCEPTION();\n@@ -314,6 +357,7 @@\n-    static JNF_MEMBER_CACHE(jm_setService, sjc_CPrinterJob, \"setPrinterServiceFromNative\", \"(Ljava\/lang\/String;)V\");\n-    static JNF_MEMBER_CACHE(jm_setCopiesAttribute, sjc_CPrinterJob, \"setCopiesAttribute\", \"(I)V\");\n-    static JNF_MEMBER_CACHE(jm_setCollated, sjc_CPrinterJob, \"setCollated\", \"(Z)V\");\n-    static JNF_MEMBER_CACHE(jm_setPageRangeAttribute, sjc_CPrinterJob, \"setPageRangeAttribute\", \"(IIZ)V\");\n-    static JNF_MEMBER_CACHE(jm_setPrintToFile, sjc_CPrinterJob, \"setPrintToFile\", \"(Z)V\");\n-    static JNF_MEMBER_CACHE(jm_setDestinationFile, sjc_CPrinterJob, \"setDestinationFile\", \"(Ljava\/lang\/String;)V\");\n+    GET_CPRINTERJOB_CLASS();\n+    DECLARE_METHOD(jm_setService, sjc_CPrinterJob, \"setPrinterServiceFromNative\", \"(Ljava\/lang\/String;)V\");\n+    DECLARE_METHOD(jm_setCopiesAttribute, sjc_CPrinterJob, \"setCopiesAttribute\", \"(I)V\");\n+    DECLARE_METHOD(jm_setCollated, sjc_CPrinterJob, \"setCollated\", \"(Z)V\");\n+    DECLARE_METHOD(jm_setPageRangeAttribute, sjc_CPrinterJob, \"setPageRangeAttribute\", \"(IIZ)V\");\n+    DECLARE_METHOD(jm_setPrintToFile, sjc_CPrinterJob, \"setPrintToFile\", \"(Z)V\");\n+    DECLARE_METHOD(jm_setDestinationFile, sjc_CPrinterJob, \"setDestinationFile\", \"(Ljava\/lang\/String;)V\");\n@@ -324,1 +368,2 @@\n-    JNFCallVoidMethod(env, dstPrinterJob, jm_setService, printerName);\n+    (*env)->CallVoidMethod(env, dstPrinterJob, jm_setService, printerName);\n+    CHECK_EXCEPTION();\n@@ -329,1 +374,2 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, true);\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, true);\n+        CHECK_EXCEPTION();\n@@ -333,1 +379,2 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setDestinationFile, str);\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setDestinationFile, str);\n+        CHECK_EXCEPTION();\n@@ -335,1 +382,2 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, false);\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, false);\n+        CHECK_EXCEPTION();\n@@ -341,1 +389,2 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setCopiesAttribute, [nsCopies integerValue]); \/\/ AWT_THREADING Safe (known object)\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setCopiesAttribute, [nsCopies integerValue]); \/\/ AWT_THREADING Safe (known object)\n+        CHECK_EXCEPTION();\n@@ -347,1 +396,2 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setCollated, [nsCollated boolValue] ? JNI_TRUE : JNI_FALSE); \/\/ AWT_THREADING Safe (known object)\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setCollated, [nsCollated boolValue] ? JNI_TRUE : JNI_FALSE); \/\/ AWT_THREADING Safe (known object)\n+        CHECK_EXCEPTION();\n@@ -370,3 +420,3 @@\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setPageRangeAttribute,\n-                          jFirstPage, jLastPage, isRangeSet);\n-            \/\/ AWT_THREADING Safe (known object)\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setPageRangeAttribute,\n+                          jFirstPage, jLastPage, isRangeSet); \/\/ AWT_THREADING Safe (known object)\n+        CHECK_EXCEPTION();\n@@ -381,12 +431,11 @@\n-    static JNF_CLASS_CACHE(jc_Pageable, \"java\/awt\/print\/Pageable\");\n-    static JNF_MEMBER_CACHE(jm_getCopies, sjc_CPrinterJob, \"getCopiesInt\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_isCollated, sjc_CPrinterJob, \"isCollated\", \"()Z\");\n-    static JNF_MEMBER_CACHE(jm_getFromPage, sjc_CPrinterJob, \"getFromPageAttrib\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getToPage, sjc_CPrinterJob, \"getToPageAttrib\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getMinPage, sjc_CPrinterJob, \"getMinPageAttrib\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getMaxPage, sjc_CPrinterJob, \"getMaxPageAttrib\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getSelectAttrib, sjc_CPrinterJob, \"getSelectAttrib\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getNumberOfPages, jc_Pageable, \"getNumberOfPages\", \"()I\");\n-    static JNF_MEMBER_CACHE(jm_getPageFormat, sjc_CPrinterJob, \"getPageFormatFromAttributes\", \"()Ljava\/awt\/print\/PageFormat;\");\n-    static JNF_MEMBER_CACHE(jm_getDestinationFile, sjc_CPrinterJob,\n-                            \"getDestinationFile\", \"()Ljava\/lang\/String;\");\n+    DECLARE_CLASS(jc_Pageable, \"java\/awt\/print\/Pageable\");\n+    DECLARE_METHOD(jm_getCopies, sjc_CPrinterJob, \"getCopiesInt\", \"()I\");\n+    DECLARE_METHOD(jm_isCollated, sjc_CPrinterJob, \"isCollated\", \"()Z\");\n+    DECLARE_METHOD(jm_getFromPage, sjc_CPrinterJob, \"getFromPageAttrib\", \"()I\");\n+    DECLARE_METHOD(jm_getToPage, sjc_CPrinterJob, \"getToPageAttrib\", \"()I\");\n+    DECLARE_METHOD(jm_getMinPage, sjc_CPrinterJob, \"getMinPageAttrib\", \"()I\");\n+    DECLARE_METHOD(jm_getMaxPage, sjc_CPrinterJob, \"getMaxPageAttrib\", \"()I\");\n+    DECLARE_METHOD(jm_getSelectAttrib, sjc_CPrinterJob, \"getSelectAttrib\", \"()I\");\n+    DECLARE_METHOD(jm_getNumberOfPages, jc_Pageable, \"getNumberOfPages\", \"()I\");\n+    DECLARE_METHOD(jm_getPageFormat, sjc_CPrinterJob, \"getPageFormatFromAttributes\", \"()Ljava\/awt\/print\/PageFormat;\");\n+    DECLARE_METHOD(jm_getDestinationFile, sjc_CPrinterJob, \"getDestinationFile\", \"()Ljava\/lang\/String;\");\n@@ -396,1 +445,2 @@\n-    jint copies = JNFCallIntMethod(env, srcPrinterJob, jm_getCopies); \/\/ AWT_THREADING Safe (known object)\n+    jint copies = (*env)->CallIntMethod(env, srcPrinterJob, jm_getCopies); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n@@ -399,1 +449,2 @@\n-    jboolean collated = JNFCallBooleanMethod(env, srcPrinterJob, jm_isCollated); \/\/ AWT_THREADING Safe (known object)\n+    jboolean collated = (*env)->CallBooleanMethod(env, srcPrinterJob, jm_isCollated); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n@@ -401,3 +452,3 @@\n-    jint selectID = JNFCallIntMethod(env, srcPrinterJob, jm_getSelectAttrib);\n-    jint fromPage = JNFCallIntMethod(env, srcPrinterJob, jm_getFromPage);\n-    jint toPage = JNFCallIntMethod(env, srcPrinterJob, jm_getToPage);\n+    jint selectID = (*env)->CallIntMethod(env, srcPrinterJob, jm_getSelectAttrib);\n+    jint fromPage = (*env)->CallIntMethod(env, srcPrinterJob, jm_getFromPage);\n+    jint toPage = (*env)->CallIntMethod(env, srcPrinterJob, jm_getToPage);\n@@ -412,2 +463,4 @@\n-        jint minPage = JNFCallIntMethod(env, srcPrinterJob, jm_getMinPage);\n-        jint maxPage = JNFCallIntMethod(env, srcPrinterJob, jm_getMaxPage);\n+        jint minPage = (*env)->CallIntMethod(env, srcPrinterJob, jm_getMinPage);\n+        CHECK_EXCEPTION();\n+        jint maxPage = (*env)->CallIntMethod(env, srcPrinterJob, jm_getMaxPage);\n+        CHECK_EXCEPTION();\n@@ -428,1 +481,2 @@\n-    jobject page = JNFCallObjectMethod(env, srcPrinterJob, jm_getPageFormat);\n+    jobject page = (*env)->CallObjectMethod(env, srcPrinterJob, jm_getPageFormat);\n+    CHECK_EXCEPTION();\n@@ -433,1 +487,2 @@\n-    jstring dest = JNFCallObjectMethod(env, srcPrinterJob, jm_getDestinationFile);\n+    jstring dest = (*env)->CallObjectMethod(env, srcPrinterJob, jm_getDestinationFile);\n+    CHECK_EXCEPTION();\n@@ -487,0 +542,1 @@\n+\n@@ -545,5 +601,6 @@\n-    static JNF_MEMBER_CACHE(jm_getPageFormat, sjc_CPrinterJob, \"getPageFormat\", \"(I)Ljava\/awt\/print\/PageFormat;\");\n-    static JNF_MEMBER_CACHE(jm_getPageFormatArea, sjc_CPrinterJob, \"getPageFormatArea\", \"(Ljava\/awt\/print\/PageFormat;)Ljava\/awt\/geom\/Rectangle2D;\");\n-    static JNF_MEMBER_CACHE(jm_getPrinterName, sjc_CPrinterJob, \"getPrinterName\", \"()Ljava\/lang\/String;\");\n-    static JNF_MEMBER_CACHE(jm_getPageable, sjc_CPrinterJob, \"getPageable\", \"()Ljava\/awt\/print\/Pageable;\");\n-    static JNF_MEMBER_CACHE(jm_getPrinterTray, sjc_CPrinterJob, \"getPrinterTray\", \"()Ljava\/lang\/String;\");\n+    GET_CPRINTERJOB_CLASS_RETURN(NO);\n+    DECLARE_METHOD_RETURN(jm_getPageFormat, sjc_CPrinterJob, \"getPageFormat\", \"(I)Ljava\/awt\/print\/PageFormat;\", NO);\n+    DECLARE_METHOD_RETURN(jm_getPageFormatArea, sjc_CPrinterJob, \"getPageFormatArea\", \"(Ljava\/awt\/print\/PageFormat;)Ljava\/awt\/geom\/Rectangle2D;\", NO);\n+    DECLARE_METHOD_RETURN(jm_getPrinterName, sjc_CPrinterJob, \"getPrinterName\", \"()Ljava\/lang\/String;\", NO);\n+    DECLARE_METHOD_RETURN(jm_getPageable, sjc_CPrinterJob, \"getPageable\", \"()Ljava\/awt\/print\/Pageable;\", NO);\n+    DECLARE_METHOD_RETURN(jm_getPrinterTray, sjc_CPrinterJob, \"getPrinterTray\", \"()Ljava\/lang\/String;\", NO);\n@@ -556,1 +613,2 @@\n-    jobject page = JNFCallObjectMethod(env, jthis, jm_getPageFormat, 0); \/\/ AWT_THREADING Safe (!appKit)\n+    jobject page = (*env)->CallObjectMethod(env, jthis, jm_getPageFormat, 0); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n@@ -558,1 +616,2 @@\n-        jobject pageFormatArea = JNFCallObjectMethod(env, jthis, jm_getPageFormatArea, page); \/\/ AWT_THREADING Safe (!appKit)\n+        jobject pageFormatArea = (*env)->CallObjectMethod(env, jthis, jm_getPageFormatArea, page); \/\/ AWT_THREADING Safe (!appKit)\n+        CHECK_EXCEPTION();\n@@ -563,2 +622,4 @@\n-        NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr(JNFCallLongMethod(env, jthis, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n-        jobject printerTrayObj = JNFCallObjectMethod(env, jthis, jm_getPrinterTray);\n+        GET_NSPRINTINFO_METHOD_RETURN(NO)\n+        NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr((*env)->CallLongMethod(env, jthis, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n+        CHECK_EXCEPTION();\n+        jobject printerTrayObj = (*env)->CallObjectMethod(env, jthis, jm_getPrinterTray);\n@@ -577,1 +638,2 @@\n-        jobject printerNameObj = JNFCallObjectMethod(env, jthis, jm_getPrinterName);\n+        jobject printerNameObj = (*env)->CallObjectMethod(env, jthis, jm_getPrinterName);\n+        CHECK_EXCEPTION();\n@@ -587,1 +649,1 @@\n-        jobject pageable = JNFCallObjectMethod(env, jthis, jm_getPageable); \/\/ AWT_THREADING Safe (!appKit)\n+        jobject pageable = (*env)->CallObjectMethod(env, jthis, jm_getPageable); \/\/ AWT_THREADING Safe (!appKit)\n@@ -623,2 +685,2 @@\n-    static JNF_CLASS_CACHE(jc_CPrinterPageDialog, \"sun\/lwawt\/macosx\/CPrinterPageDialog\");\n-    static JNF_MEMBER_CACHE(jm_page, jc_CPrinterPageDialog, \"fPage\", \"Ljava\/awt\/print\/PageFormat;\");\n+    DECLARE_CLASS_RETURN(jc_CPrinterPageDialog, \"sun\/lwawt\/macosx\/CPrinterPageDialog\", NO);\n+    DECLARE_FIELD_RETURN(jm_page, jc_CPrinterPageDialog, \"fPage\", \"Ljava\/awt\/print\/PageFormat;\", NO);\n@@ -628,2 +690,6 @@\n-    jobject printerJob = JNFGetObjectField(env, jthis, sjm_printerJob);\n-    NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr(JNFCallLongMethod(env, printerJob, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n+    GET_CPRINTERDIALOG_METHOD_RETURN(NO);\n+    GET_NSPRINTINFO_METHOD_RETURN(NO)\n+    jobject printerJob = (*env)->GetObjectField(env, jthis, sjm_printerJob);\n+    if (printerJob == NULL) return NO;\n+    NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr((*env)->CallLongMethod(env, printerJob, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n+    if (printInfo == NULL) return result;\n@@ -631,1 +697,2 @@\n-    jobject page = JNFGetObjectField(env, jthis, jm_page);\n+    jobject page = (*env)->GetObjectField(env, jthis, jm_page);\n+    if (page == NULL) return NO;\n@@ -667,2 +734,2 @@\n-    static JNF_CLASS_CACHE(jc_CPrinterJobDialog, \"sun\/lwawt\/macosx\/CPrinterJobDialog\");\n-    static JNF_MEMBER_CACHE(jm_pageable, jc_CPrinterJobDialog, \"fPageable\", \"Ljava\/awt\/print\/Pageable;\");\n+    DECLARE_CLASS_RETURN(jc_CPrinterJobDialog, \"sun\/lwawt\/macosx\/CPrinterJobDialog\", NO);\n+    DECLARE_FIELD_RETURN(jm_pageable, jc_CPrinterJobDialog, \"fPageable\", \"Ljava\/awt\/print\/Pageable;\", NO);\n@@ -672,4 +739,8 @@\n-    jobject printerJob = JNFGetObjectField(env, jthis, sjm_printerJob);\n-    NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr(JNFCallLongMethod(env, printerJob, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n-\n-    jobject pageable = JNFGetObjectField(env, jthis, jm_pageable);\n+    GET_CPRINTERDIALOG_METHOD_RETURN(NO);\n+    jobject printerJob = (*env)->GetObjectField(env, jthis, sjm_printerJob);\n+    if (printerJob == NULL) return NO;\n+    GET_NSPRINTINFO_METHOD_RETURN(NO)\n+    NSPrintInfo* printInfo = (NSPrintInfo*)jlong_to_ptr((*env)->CallLongMethod(env, printerJob, sjm_getNSPrintInfo)); \/\/ AWT_THREADING Safe (known object)\n+\n+    jobject pageable = (*env)->GetObjectField(env, jthis, jm_pageable);\n+    if (pageable == NULL) return NO;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":164,"deletions":93,"binary":false,"changes":257,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#import \"JNIUtilities.h\"\n@@ -49,2 +50,0 @@\n-static JNF_CLASS_CACHE(jc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\");\n-static JNF_STATIC_MEMBER_CACHE(jm_systemColorsChanged, jc_LWCToolkit, \"systemColorsChanged\", \"()V\");\n@@ -60,1 +59,5 @@\n-    JNFCallStaticVoidMethod(env, jm_systemColorsChanged); \/\/ AWT_THREADING Safe (event)\n+    DECLARE_CLASS(jc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\");\n+    DECLARE_STATIC_METHOD(jm_systemColorsChanged, jc_LWCToolkit, \"systemColorsChanged\", \"()V\");\n+    (*env)->CallStaticVoidMethod(env, jc_LWCToolkit, jm_systemColorsChanged); \/\/ AWT_THREADING Safe (event)\n+    CHECK_EXCEPTION();\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CSystemColors.m","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#import \"JNIUtilities.h\"\n@@ -325,1 +326,2 @@\n-static JNF_CLASS_CACHE(jc_StandardGlyphVector, \"sun\/font\/StandardGlyphVector\");\n+static jclass jc_StandardGlyphVector = NULL;\n+#define GET_SGV_CLASS() GET_CLASS(jc_StandardGlyphVector, \"sun\/font\/StandardGlyphVector\");\n@@ -333,2 +335,3 @@\n-    static JNF_MEMBER_CACHE(jm_StandardGlyphVector_gti, jc_StandardGlyphVector, \"gti\", \"Lsun\/font\/StandardGlyphVector$GlyphTransformInfo;\");\n-    jobject gti = JNFGetObjectField(env, gVector, jm_StandardGlyphVector_gti);\n+    GET_SGV_CLASS();\n+    DECLARE_FIELD(jm_StandardGlyphVector_gti, jc_StandardGlyphVector, \"gti\", \"Lsun\/font\/StandardGlyphVector$GlyphTransformInfo;\");\n+    jobject gti = (*env)->GetObjectField(env, gVector, jm_StandardGlyphVector_gti);\n@@ -350,3 +353,3 @@\n-    static JNF_CLASS_CACHE(jc_StandardGlyphVector_GlyphTransformInfo, \"sun\/font\/StandardGlyphVector$GlyphTransformInfo\");\n-    static JNF_MEMBER_CACHE(jm_StandardGlyphVector_GlyphTransformInfo_transforms, jc_StandardGlyphVector_GlyphTransformInfo, \"transforms\", \"[D\");\n-    jdoubleArray g_gtiTransformsArray = JNFGetObjectField(env, gti, jm_StandardGlyphVector_GlyphTransformInfo_transforms); \/\/(*env)->GetObjectField(env, gti, g_gtiTransforms);\n+    DECLARE_CLASS(jc_StandardGlyphVector_GlyphTransformInfo, \"sun\/font\/StandardGlyphVector$GlyphTransformInfo\");\n+    DECLARE_FIELD(jm_StandardGlyphVector_GlyphTransformInfo_transforms, jc_StandardGlyphVector_GlyphTransformInfo, \"transforms\", \"[D\");\n+    jdoubleArray g_gtiTransformsArray = (*env)->GetObjectField(env, gti, jm_StandardGlyphVector_GlyphTransformInfo_transforms); \/\/(*env)->GetObjectField(env, gti, g_gtiTransforms);\n@@ -362,2 +365,2 @@\n-    static JNF_MEMBER_CACHE(jm_StandardGlyphVector_GlyphTransformInfo_indices, jc_StandardGlyphVector_GlyphTransformInfo, \"indices\", \"[I\");\n-    jintArray g_gtiTXIndicesArray = JNFGetObjectField(env, gti, jm_StandardGlyphVector_GlyphTransformInfo_indices);\n+    DECLARE_FIELD(jm_StandardGlyphVector_GlyphTransformInfo_indices, jc_StandardGlyphVector_GlyphTransformInfo, \"indices\", \"[I\");\n+    jintArray g_gtiTXIndicesArray = (*env)->GetObjectField(env, gti, jm_StandardGlyphVector_GlyphTransformInfo_indices);\n@@ -440,2 +443,3 @@\n-    static JNF_MEMBER_CACHE(jm_StandardGlyphVector_positions, jc_StandardGlyphVector, \"positions\", \"[F\");\n-    jfloatArray posArray = JNFGetObjectField(env, gVector, jm_StandardGlyphVector_positions);\n+    GET_SGV_CLASS();\n+    DECLARE_FIELD(jm_StandardGlyphVector_positions, jc_StandardGlyphVector, \"positions\", \"[F\");\n+    jfloatArray posArray = (*env)->GetObjectField(env, gVector, jm_StandardGlyphVector_positions);\n@@ -500,2 +504,3 @@\n-    static JNF_MEMBER_CACHE(jm_StandardGlyphVector_glyphs, jc_StandardGlyphVector, \"glyphs\", \"[I\");\n-    jintArray glyphsArray = JNFGetObjectField(env, gVector, jm_StandardGlyphVector_glyphs);\n+    GET_SGV_CLASS();\n+    DECLARE_FIELD(jm_StandardGlyphVector_glyphs, jc_StandardGlyphVector, \"glyphs\", \"[I\");\n+    jintArray glyphsArray = (*env)->GetObjectField(env, gVector, jm_StandardGlyphVector_glyphs);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CTextPipe.m","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -149,3 +149,3 @@\n-    static JNF_CLASS_CACHE(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n-    static JNF_CTOR_CACHE(jctor_NSEvent, jc_NSEvent, \"(IIIIIIIIDDI)V\");\n-    jobject jEvent = JNFNewObject(env, jctor_NSEvent,\n+    DECLARE_CLASS(jc_NSEvent, \"sun\/lwawt\/macosx\/NSEvent\");\n+    DECLARE_METHOD(jctor_NSEvent, jc_NSEvent, \"<init>\", \"(IIIIIIIIDDI)V\");\n+    jobject jEvent = (*env)->NewObject(env, jc_NSEvent, jctor_NSEvent,\n@@ -163,3 +163,4 @@\n-    static JNF_CLASS_CACHE(jc_TrayIcon, \"sun\/lwawt\/macosx\/CTrayIcon\");\n-    static JNF_MEMBER_CACHE(jm_handleMouseEvent, jc_TrayIcon, \"handleMouseEvent\", \"(Lsun\/lwawt\/macosx\/NSEvent;)V\");\n-    JNFCallVoidMethod(env, peer, jm_handleMouseEvent, jEvent);\n+    DECLARE_CLASS(jc_TrayIcon, \"sun\/lwawt\/macosx\/CTrayIcon\");\n+    DECLARE_METHOD(jm_handleMouseEvent, jc_TrayIcon, \"handleMouseEvent\", \"(Lsun\/lwawt\/macosx\/NSEvent;)V\");\n+    (*env)->CallVoidMethod(env, peer, jm_handleMouseEvent, jEvent);\n+    CHECK_EXCEPTION();\n@@ -271,3 +272,3 @@\n-        static JNF_CLASS_CACHE(jc_CTrayIcon, \"sun\/lwawt\/macosx\/CTrayIcon\");\n-        static JNF_MEMBER_CACHE(jm_getPopupMenuModel, jc_CTrayIcon, \"getPopupMenuModel\", \"()J\");\n-        jlong res = JNFCallLongMethod(env, trayIcon.peer, jm_getPopupMenuModel);\n+        DECLARE_CLASS(jc_CTrayIcon, \"sun\/lwawt\/macosx\/CTrayIcon\");\n+        DECLARE_METHOD(jm_getPopupMenuModel, jc_CTrayIcon, \"getPopupMenuModel\", \"()J\");\n+        jlong res = (*env)->CallLongMethod(env, trayIcon.peer, jm_getPopupMenuModel);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CTrayIcon.m","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"jni.h\"\n+#include \"JNIUtilities.h\"\n@@ -30,1 +30,0 @@\n-CGRect JavaToCGRect(JNIEnv *env, jobject rect);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/GeomUtilities.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,16 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n-static JNF_CLASS_CACHE(sjc_Point2D, \"java\/awt\/geom\/Point2D\");\n-static JNF_MEMBER_CACHE(jm_pt_getX, sjc_Point2D, \"getX\", \"()D\");\n-static JNF_MEMBER_CACHE(jm_pt_getY, sjc_Point2D, \"getY\", \"()D\");\n-\n-static JNF_CLASS_CACHE(sjc_Dimension2D, \"java\/awt\/geom\/Dimension2D\");\n-static JNF_MEMBER_CACHE(jm_sz_getWidth, sjc_Dimension2D, \"getWidth\", \"()D\");\n-static JNF_MEMBER_CACHE(jm_sz_getHeight, sjc_Dimension2D, \"getHeight\", \"()D\");\n-\n-static JNF_CLASS_CACHE(sjc_Rectangle2D, \"java\/awt\/geom\/Rectangle2D\");\n-static JNF_MEMBER_CACHE(jm_rect_getX, sjc_Rectangle2D, \"getX\", \"()D\");\n-static JNF_MEMBER_CACHE(jm_rect_getY, sjc_Rectangle2D, \"getY\", \"()D\");\n-static JNF_MEMBER_CACHE(jm_rect_getWidth, sjc_Rectangle2D, \"getWidth\", \"()D\");\n-static JNF_MEMBER_CACHE(jm_rect_getHeight, sjc_Rectangle2D, \"getHeight\", \"()D\");\n-\n@@ -45,3 +29,5 @@\n-    static JNF_CLASS_CACHE(sjc_Rectangle2DDouble, \"java\/awt\/geom\/Rectangle2D$Double\");\n-    static JNF_CTOR_CACHE(ctor_Rectangle2DDouble, sjc_Rectangle2DDouble, \"(DDDD)V\");\n-    return JNFNewObject(env, ctor_Rectangle2DDouble, x, y, w, h);\n+    DECLARE_CLASS_RETURN(sjc_Rectangle2DDouble, \"java\/awt\/geom\/Rectangle2D$Double\", NULL);\n+    DECLARE_METHOD_RETURN(ctor_Rectangle2DDouble, sjc_Rectangle2DDouble, \"<init>\", \"(DDDD)V\", NULL);\n+    jobject o = (*env)->NewObject(env, sjc_Rectangle2DDouble, ctor_Rectangle2DDouble, x, y, w, h);\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -66,7 +52,0 @@\n-CGRect JavaToCGRect(JNIEnv *env, jobject rect) {\n-    return CGRectMake(JNFCallDoubleMethod(env, rect, jm_rect_getX),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getY),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getWidth),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getHeight));\n-}\n-\n@@ -74,4 +53,9 @@\n-    return NSMakeRect(JNFCallDoubleMethod(env, rect, jm_rect_getX),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getY),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getWidth),\n-                      JNFCallDoubleMethod(env, rect, jm_rect_getHeight));\n+    DECLARE_CLASS_RETURN(sjc_Rectangle2D, \"java\/awt\/geom\/Rectangle2D\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_rect_getX, sjc_Rectangle2D, \"getX\", \"()D\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_rect_getY, sjc_Rectangle2D, \"getY\", \"()D\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_rect_getWidth, sjc_Rectangle2D, \"getWidth\", \"()D\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_rect_getHeight, sjc_Rectangle2D, \"getHeight\", \"()D\", NSZeroRect);\n+    return NSMakeRect((*env)->CallDoubleMethod(env, rect, jm_rect_getX),\n+                      (*env)->CallDoubleMethod(env, rect, jm_rect_getY),\n+                      (*env)->CallDoubleMethod(env, rect, jm_rect_getWidth),\n+                      (*env)->CallDoubleMethod(env, rect, jm_rect_getHeight));\n@@ -81,3 +65,5 @@\n-    static JNF_CLASS_CACHE(sjc_Point2DDouble, \"java\/awt\/geom\/Point2D$Double\");\n-    static JNF_CTOR_CACHE(ctor_Point2DDouble, sjc_Point2DDouble, \"(DD)V\");\n-    return JNFNewObject(env, ctor_Point2DDouble, (jdouble)point.x, (jdouble)point.y);\n+    DECLARE_CLASS_RETURN(sjc_Point2DDouble, \"java\/awt\/geom\/Point2D$Double\", NULL);\n+    DECLARE_METHOD_RETURN(ctor_Point2DDouble, sjc_Point2DDouble, \"<init>\", \"(DD)V\", NULL);\n+    jobject o =  (*env)->NewObject(env, sjc_Point2DDouble, ctor_Point2DDouble, (jdouble)point.x, (jdouble)point.y);\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -87,2 +73,6 @@\n-    return NSMakePoint(JNFCallDoubleMethod(env, point, jm_pt_getX),\n-                       JNFCallDoubleMethod(env, point, jm_pt_getY));\n+    DECLARE_CLASS_RETURN(sjc_Point2D, \"java\/awt\/geom\/Point2D\", NSZeroPoint);\n+    DECLARE_METHOD_RETURN(jm_pt_getX, sjc_Point2D, \"getX\", \"()D\", NSZeroPoint);\n+    DECLARE_METHOD_RETURN(jm_pt_getY, sjc_Point2D, \"getY\", \"()D\", NSZeroPoint);\n+\n+    return NSMakePoint((*env)->CallDoubleMethod(env, point, jm_pt_getX),\n+                       (*env)->CallDoubleMethod(env, point, jm_pt_getY));\n@@ -92,3 +82,5 @@\n-    static JNF_CLASS_CACHE(sjc_Dimension2DDouble, \"java\/awt\/Dimension\"); \/\/ No Dimension2D$Double :-(\n-    static JNF_CTOR_CACHE(ctor_Dimension2DDouble, sjc_Dimension2DDouble, \"(II)V\");\n-    return JNFNewObject(env, ctor_Dimension2DDouble, (jint)size.width, (jint)size.height);\n+    DECLARE_CLASS_RETURN(sjc_Dimension2DDouble, \"java\/awt\/Dimension\", NULL); \/\/ No Dimension2D$Double :-(\n+    DECLARE_METHOD_RETURN(ctor_Dimension2DDouble, sjc_Dimension2DDouble, \"<init>\", \"(II)V\", NULL);\n+    jobject o = (*env)->NewObject(env, sjc_Dimension2DDouble, ctor_Dimension2DDouble, (jint)size.width, (jint)size.height);\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -98,2 +90,6 @@\n-    return NSMakeSize(JNFCallDoubleMethod(env, dimension, jm_sz_getWidth),\n-                      JNFCallDoubleMethod(env, dimension, jm_sz_getHeight));\n+    DECLARE_CLASS_RETURN(sjc_Dimension2D, \"java\/awt\/geom\/Dimension2D\", NSZeroSize);\n+    DECLARE_METHOD_RETURN(jm_sz_getWidth, sjc_Dimension2D, \"getWidth\", \"()D\", NSZeroSize);\n+    DECLARE_METHOD_RETURN(jm_sz_getHeight, sjc_Dimension2D, \"getHeight\", \"()D\", NSZeroSize);\n+\n+    return NSMakeSize((*env)->CallDoubleMethod(env, dimension, jm_sz_getWidth),\n+                      (*env)->CallDoubleMethod(env, dimension, jm_sz_getHeight));\n@@ -105,1 +101,0 @@\n-    if (env != NULL) [JNFException raise:env as:kRuntimeException reason:\"Failed to convert, no screen.\"];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/GeomUtilities.m","additions":36,"deletions":41,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-#import \"jni_util.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n@@ -106,10 +107,3 @@\n-\n-static JNF_CLASS_CACHE(jc_OSXOffScreenSurfaceData, \"sun\/java2d\/OSXOffScreenSurfaceData\");\n-static JNF_MEMBER_CACHE(jm_syncFromCustom, jc_OSXOffScreenSurfaceData, \"syncFromCustom\", \"()V\");\n-static JNF_MEMBER_CACHE(jm_syncToCustom, jc_OSXOffScreenSurfaceData, \"syncToCustom\", \"()V\");\n-static JNF_CLASS_CACHE(jc_BufferedImage, \"java\/awt\/image\/BufferedImage\");\n-static JNF_MEMBER_CACHE(jm_SurfaceData, jc_BufferedImage, \"sData\", \"Lsun\/java2d\/SurfaceData;\");\n-static JNF_CLASS_CACHE(jc_IndexColorModel, \"java\/awt\/image\/IndexColorModel\");\n-static JNF_MEMBER_CACHE(jm_rgb, jc_IndexColorModel, \"rgb\", \"[I\");\n-static JNF_MEMBER_CACHE(jm_transparency, jc_IndexColorModel, \"transparency\", \"I\");\n-static JNF_MEMBER_CACHE(jm_transparent_index, jc_IndexColorModel, \"transparent_index\", \"I\");\n+static jclass jc_OSXOffScreenSurfaceData = NULL;\n+#define GET_OSXOSD_CLASS() \\\n+    GET_CLASS(jc_OSXOffScreenSurfaceData, \"sun\/java2d\/OSXOffScreenSurfaceData\");\n@@ -195,1 +189,5 @@\n-    JNFCallVoidMethod(env, sdo->sdObject, jm_syncFromCustom); \/\/ AWT_THREADING Safe (known object)\n+    GET_OSXOSD_CLASS();\n+    DECLARE_METHOD(jm_syncFromCustom, jc_OSXOffScreenSurfaceData, \"syncFromCustom\", \"()V\");\n+\n+    (*env)->CallVoidMethod(env, sdo->sdObject, jm_syncFromCustom); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n@@ -426,1 +424,4 @@\n-    JNFCallVoidMethod(env, sdo->sdObject, jm_syncToCustom); \/\/ AWT_THREADING Safe (known object)\n+    GET_OSXOSD_CLASS();\n+    DECLARE_METHOD(jm_syncToCustom, jc_OSXOffScreenSurfaceData, \"syncToCustom\", \"()V\");\n+    (*env)->CallVoidMethod(env, sdo->sdObject, jm_syncToCustom); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n@@ -1625,0 +1626,3 @@\n+static jclass jc_BufferedImage = NULL;\n+static jfieldID jm_SurfaceData = NULL;\n+\n@@ -1629,2 +1633,3 @@\n-\n-    return JNFGetObjectField(env, bufImg, jm_SurfaceData);\n+    GET_CLASS_RETURN(jc_BufferedImage, \"java\/awt\/image\/BufferedImage\", NULL);\n+    GET_FIELD_RETURN(jm_SurfaceData, jc_BufferedImage, \"sData\", \"Lsun\/java2d\/SurfaceData;\", NULL);\n+    return (*env)->GetObjectField(env, bufImg, jm_SurfaceData);\n@@ -1638,1 +1643,3 @@\n-    JNFSetObjectField(env, bufImg, jm_SurfaceData, sData);\n+    GET_CLASS(jc_BufferedImage, \"java\/awt\/image\/BufferedImage\");\n+    GET_FIELD(jm_SurfaceData, jc_BufferedImage, \"sData\", \"Lsun\/java2d\/SurfaceData;\");\n+    (*env)->SetObjectField(env, bufImg, jm_SurfaceData, sData);\n@@ -1866,1 +1873,10 @@\n-        jarray lutarray = JNFGetObjectField(env, icm, jm_rgb);\n+        static jclass jc_IndexColorModel = NULL;\n+        if (jc_IndexColorModel == NULL) {\n+            jc_IndexColorModel = (*env)->FindClass(env, \"java\/awt\/image\/IndexColorModel\");\n+        }\n+        CHECK_NULL(jc_IndexColorModel);\n+        DECLARE_FIELD(jm_rgb, jc_IndexColorModel, \"rgb\", \"[I\");\n+        DECLARE_FIELD(jm_transparency, jc_IndexColorModel, \"transparency\", \"I\");\n+        DECLARE_FIELD(jm_transparent_index, jc_IndexColorModel, \"transparent_index\", \"I\");\n+\n+        jarray lutarray = (*env)->GetObjectField(env, icm, jm_rgb);\n@@ -1870,1 +1886,1 @@\n-            jint transparency = JNFGetIntField(env, icm, jm_transparency);\n+            jint transparency = (*env)->GetIntField(env, icm, jm_transparency);\n@@ -1874,1 +1890,1 @@\n-                transparent_index = JNFGetIntField(env, icm, jm_transparent_index);\n+                transparent_index = (*env)->GetIntField(env, icm, jm_transparent_index);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/ImageSurfaceData.m","additions":35,"deletions":19,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#import \"JNIUtilities.h\"\n@@ -60,2 +61,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleActionDescription, sjc_CAccessibility, \"getAccessibleActionDescription\", \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)Ljava\/lang\/String;\");\n-\n@@ -63,0 +62,3 @@\n+    DECLARE_CLASS_RETURN(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\", nil);\n+    DECLARE_METHOD_RETURN(jm_getAccessibleActionDescription, sjc_CAccessibility, \"getAccessibleActionDescription\",\n+                          \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n@@ -69,1 +71,1 @@\n-    jstring jstr = JNFCallStaticObjectMethod( env,\n+    jstring jstr = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n@@ -74,0 +76,1 @@\n+    CHECK_EXCEPTION();\n@@ -84,2 +87,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_doAccessibleAction, sjc_CAccessibility, \"doAccessibleAction\", \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)V\");\n-\n@@ -87,0 +88,3 @@\n+    DECLARE_CLASS(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\");\n+    DECLARE_METHOD(jm_doAccessibleAction, sjc_CAccessibility, \"doAccessibleAction\",\n+                    \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)V\");\n@@ -88,1 +92,3 @@\n-    JNFCallStaticVoidMethod(env, jm_doAccessibleAction, fAccessibleAction, fIndex, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_doAccessibleAction,\n+             fAccessibleAction, fIndex, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.m","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,12 +33,4 @@\n-extern JNFClassInfo sjc_CAccessibility;\n-extern JNFClassInfo sjc_AccessibleComponent;\n-extern JNFClassInfo sjc_AccessibleContext;\n-extern JNFClassInfo sjc_Accessible;\n-extern JNFClassInfo sjc_AccessibleRole;\n-extern JNFClassInfo sjc_Point;\n-extern JNFClassInfo sjc_AccessibleText;\n-\n-extern JNFMemberInfo *sjm_getAccessibleRole;\n-extern JNFMemberInfo *sjf_key;\n-extern JNFMemberInfo *sjf_X;\n-extern JNFMemberInfo *sjf_Y;\n+#define GET_CACCESSIBILITY_CLASS() \\\n+    GET_CLASS(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\");\n+#define GET_CACCESSIBILITY_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\", ret);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.h","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#import \"JNIUtilities.h\"\n@@ -46,1 +47,3 @@\n-static JNF_CLASS_CACHE(sjc_AccessibleState, \"javax\/accessibility\/AccessibleState\");\n+static jclass sjc_AccessibleState = NULL;\n+#define GET_ACCESSIBLESTATE_CLASS_RETURN(ret) \\\n+     GET_CLASS_RETURN(sjc_AccessibleState, \"javax\/accessibility\/AccessibleState\", ret);\n@@ -48,12 +51,1 @@\n-\/\/ Duplicate\n-JNF_CLASS_CACHE(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\");\n-JNF_CLASS_CACHE(sjc_AccessibleComponent, \"javax\/accessibility\/AccessibleComponent\");\n-JNF_CLASS_CACHE(sjc_AccessibleContext, \"javax\/accessibility\/AccessibleContext\");\n-JNF_CLASS_CACHE(sjc_Accessible, \"javax\/accessibility\/Accessible\");\n-JNF_CLASS_CACHE(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\");\n-JNF_CLASS_CACHE(sjc_Point, \"java\/awt\/Point\");\n-JNF_CLASS_CACHE(sjc_AccessibleText, \"javax\/accessibility\/AccessibleText\");\n-\n-JNF_MEMBER_CACHE(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\");\n-JNF_MEMBER_CACHE(sjf_X, sjc_Point, \"x\", \"I\");\n-JNF_MEMBER_CACHE(sjf_Y, sjc_Point, \"y\", \"I\");\n+static jclass sjc_CAccessibility = NULL;\n@@ -63,4 +55,5 @@\n-    static JNF_CLASS_CACHE(jc_Dimension, \"java\/awt\/Dimension\");\n-    static JNF_MEMBER_CACHE(jf_width, jc_Dimension, \"width\", \"I\");\n-    static JNF_MEMBER_CACHE(jf_height, jc_Dimension, \"height\", \"I\");\n-    static JNF_STATIC_MEMBER_CACHE(jm_getSize, sjc_CAccessibility, \"getSize\", \"(Ljavax\/accessibility\/AccessibleComponent;Ljava\/awt\/Component;)Ljava\/awt\/Dimension;\");\n+    DECLARE_CLASS_RETURN(jc_Dimension, \"java\/awt\/Dimension\", NSZeroSize);\n+    DECLARE_FIELD_RETURN(jf_width, jc_Dimension, \"width\", \"I\", NSZeroSize);\n+    DECLARE_FIELD_RETURN(jf_height, jc_Dimension, \"height\", \"I\", NSZeroSize);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getSize, sjc_CAccessibility, \"getSize\",\n+           \"(Ljavax\/accessibility\/AccessibleComponent;Ljava\/awt\/Component;)Ljava\/awt\/Dimension;\", NSZeroSize);\n@@ -68,1 +61,2 @@\n-    jobject dimension = JNFCallStaticObjectMethod(env, jm_getSize, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobject dimension = (*env)->CallStaticObjectMethod(env, jc_Dimension, jm_getSize, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -71,1 +65,1 @@\n-    return NSMakeSize(JNFGetIntField(env, dimension, jf_width), JNFGetIntField(env, dimension, jf_height));\n+    return NSMakeSize((*env)->GetIntField(env, dimension, jf_width), (*env)->GetIntField(env, dimension, jf_height));\n@@ -76,2 +70,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleRole, sjc_CAccessibility, \"getAccessibleRole\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n-    jobject axRole = JNFCallStaticObjectMethod(env, sjm_getAccessibleRole, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleRole, sjc_CAccessibility, \"getAccessibleRole\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject axRole = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleRole,\n+                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -87,2 +85,7 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleSelection, sjc_CAccessibility, \"getAccessibleSelection\", \"(Ljavax\/accessibility\/AccessibleContext;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleSelection;\");\n-    return JNFCallStaticObjectMethod(env, jm_getAccessibleSelection, axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getAccessibleSelection, sjc_CAccessibility, \"getAccessibleSelection\",\n+            \"(Ljavax\/accessibility\/AccessibleContext;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleSelection;\", nil);\n+    jobject o = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleSelection,\n+                      axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -93,2 +96,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_ax_getAccessibleSelection, sjc_CAccessibility, \"ax_getAccessibleSelection\", \"(Ljavax\/accessibility\/AccessibleContext;ILjava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\");\n-    return JNFCallStaticObjectMethod(env, jm_ax_getAccessibleSelection, axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_ax_getAccessibleSelection, sjc_CAccessibility, \"ax_getAccessibleSelection\",\n+                  \"(Ljavax\/accessibility\/AccessibleContext;ILjava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", nil);\n+    return (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_ax_getAccessibleSelection,\n+                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -99,2 +106,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_addAccessibleSelection, sjc_CAccessibility, \"addAccessibleSelection\", \"(Ljavax\/accessibility\/AccessibleContext;ILjava\/awt\/Component;)V\");\n-    JNFCallStaticVoidMethod(env, jm_addAccessibleSelection, axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_addAccessibleSelection, sjc_CAccessibility, \"addAccessibleSelection\",\n+                   \"(Ljavax\/accessibility\/AccessibleContext;ILjava\/awt\/Component;)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_addAccessibleSelection,\n+                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -105,2 +116,7 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleContext, sjc_CAccessibility, \"getAccessibleContext\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleContext;\");\n-    return JNFCallStaticObjectMethod(env, jm_getAccessibleContext, accessible, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getAccessibleContext, sjc_CAccessibility, \"getAccessibleContext\",\n+               \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleContext;\", nil);\n+    jobject o = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleContext,\n+                    accessible, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -111,2 +127,7 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_isAccessibleChildSelected, sjc_CAccessibility, \"isAccessibleChildSelected\", \"(Ljavax\/accessibility\/Accessible;ILjava\/awt\/Component;)Z\");\n-    return JNFCallStaticBooleanMethod(env, jm_isAccessibleChildSelected, accessible, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(NO);\n+    DECLARE_STATIC_METHOD_RETURN(jm_isAccessibleChildSelected, sjc_CAccessibility, \"isAccessibleChildSelected\",\n+                \"(Ljavax\/accessibility\/Accessible;ILjava\/awt\/Component;)Z\", NO);\n+    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isAccessibleChildSelected,\n+                    accessible, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return b;\n@@ -117,2 +138,7 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleStateSet, sjc_CAccessibility, \"getAccessibleStateSet\", \"(Ljavax\/accessibility\/AccessibleContext;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleStateSet;\");\n-    return JNFCallStaticObjectMethod(env, jm_getAccessibleStateSet, axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getAccessibleStateSet, sjc_CAccessibility, \"getAccessibleStateSet\",\n+               \"(Ljavax\/accessibility\/AccessibleContext;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleStateSet;\", nil);\n+    jobject o = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleStateSet,\n+                    axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -123,2 +149,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_contains, sjc_CAccessibility, \"contains\", \"(Ljavax\/accessibility\/AccessibleContext;Ljavax\/accessibility\/AccessibleState;Ljava\/awt\/Component;)Z\");\n-    return JNFCallStaticBooleanMethod(env, jm_contains, axContext, axState, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(NO);\n+    DECLARE_STATIC_METHOD_RETURN(jm_contains, sjc_CAccessibility, \"contains\",\n+               \"(Ljavax\/accessibility\/AccessibleContext;Ljavax\/accessibility\/AccessibleState;Ljava\/awt\/Component;)Z\", NO);\n+    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_contains, axContext, axState, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return b;\n@@ -129,2 +159,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_VERTICAL, sjc_AccessibleState, \"VERTICAL\", \"Ljavax\/accessibility\/AccessibleState;\");\n-    jobject axVertState = JNFGetStaticObjectField(env, jm_VERTICAL);\n+    GET_ACCESSIBLESTATE_CLASS_RETURN(NO);\n+    DECLARE_STATIC_FIELD_RETURN(jm_VERTICAL, sjc_AccessibleState, \"VERTICAL\", \"Ljavax\/accessibility\/AccessibleState;\", NO);\n+    jobject axVertState = (*env)->GetStaticObjectField(env, sjc_AccessibleState, jm_VERTICAL);\n+    CHECK_EXCEPTION_NULL_RETURN(axVertState, NO);\n@@ -138,2 +170,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_HORIZONTAL, sjc_AccessibleState, \"HORIZONTAL\", \"Ljavax\/accessibility\/AccessibleState;\");\n-    jobject axHorizState = JNFGetStaticObjectField(env, jm_HORIZONTAL);\n+    GET_ACCESSIBLESTATE_CLASS_RETURN(NO);\n+    DECLARE_STATIC_FIELD_RETURN(jm_HORIZONTAL, sjc_AccessibleState, \"HORIZONTAL\", \"Ljavax\/accessibility\/AccessibleState;\", NO);\n+    jobject axHorizState = (*env)->GetStaticObjectField(env, sjc_AccessibleState, jm_HORIZONTAL);\n+    CHECK_EXCEPTION_NULL_RETURN(axHorizState, NO);\n@@ -147,2 +181,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_SHOWING, sjc_AccessibleState, \"SHOWING\", \"Ljavax\/accessibility\/AccessibleState;\");\n-    jobject axVisibleState = JNFGetStaticObjectField(env, jm_SHOWING);\n+    GET_ACCESSIBLESTATE_CLASS_RETURN(NO);\n+    DECLARE_STATIC_FIELD_RETURN(jm_SHOWING, sjc_AccessibleState, \"SHOWING\", \"Ljavax\/accessibility\/AccessibleState;\", NO);\n+    jobject axVisibleState = (*env)->GetStaticObjectField(env, sjc_AccessibleState, jm_SHOWING);\n+    CHECK_EXCEPTION_NULL_RETURN(axVisibleState, NO);\n@@ -156,1 +192,2 @@\n-    static JNF_STATIC_MEMBER_CACHE( jm_SELECTABLE,\n+    GET_ACCESSIBLESTATE_CLASS_RETURN(NO);\n+    DECLARE_STATIC_FIELD_RETURN(jm_SELECTABLE,\n@@ -159,2 +196,3 @@\n-                                    \"Ljavax\/accessibility\/AccessibleState;\" );\n-    jobject axSelectableState = JNFGetStaticObjectField(env, jm_SELECTABLE);\n+                                    \"Ljavax\/accessibility\/AccessibleState;\", NO );\n+    jobject axSelectableState = (*env)->GetStaticObjectField(env, sjc_AccessibleState, jm_SELECTABLE);\n+    CHECK_EXCEPTION_NULL_RETURN(axSelectableState, NO);\n@@ -168,2 +206,9 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getLocationOnScreen, sjc_CAccessibility, \"getLocationOnScreen\", \"(Ljavax\/accessibility\/AccessibleComponent;Ljava\/awt\/Component;)Ljava\/awt\/Point;\");\n-    jobject jpoint = JNFCallStaticObjectMethod(env, jm_getLocationOnScreen, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(NSZeroPoint);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getLocationOnScreen, sjc_CAccessibility, \"getLocationOnScreen\",\n+                  \"(Ljavax\/accessibility\/AccessibleComponent;Ljava\/awt\/Component;)Ljava\/awt\/Point;\", NSZeroPoint);\n+    DECLARE_CLASS_RETURN(sjc_Point, \"java\/awt\/Point\", NSZeroPoint);\n+    DECLARE_FIELD_RETURN(sjf_X, sjc_Point, \"x\", \"I\", NSZeroPoint);\n+    DECLARE_FIELD_RETURN(sjf_Y, sjc_Point, \"y\", \"I\", NSZeroPoint);\n+    jobject jpoint = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getLocationOnScreen,\n+                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -171,1 +216,1 @@\n-    return NSMakePoint(JNFGetIntField(env, jpoint, sjf_X), JNFGetIntField(env, jpoint, sjf_Y));\n+    return NSMakePoint((*env)->GetIntField(env, jpoint, sjf_X), (*env)->GetIntField(env, jpoint, sjf_Y));\n@@ -176,2 +221,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getCharCount, sjc_CAccessibility, \"getCharCount\", \"(Ljavax\/accessibility\/AccessibleText;Ljava\/awt\/Component;)I\");\n-    return JNFCallStaticIntMethod(env, jm_getCharCount, axText, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_CACCESSIBILITY_CLASS_RETURN(0);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getCharCount, sjc_CAccessibility, \"getCharCount\",\n+                  \"(Ljavax\/accessibility\/AccessibleText;Ljava\/awt\/Component;)I\", 0);\n+    int i = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getCharCount, axText, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n+    return i;\n@@ -268,1 +317,3 @@\n-    return JNFGetObjectField(env, axRole, sjf_key);\n+    DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", NULL);\n+    DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", NULL);\n+    return (*env)->GetObjectField(env, axRole, sjf_key);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.m","additions":101,"deletions":50,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#import \"JNIUtilities.h\"\n@@ -56,8 +57,2 @@\n-static JNF_STATIC_MEMBER_CACHE(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\");\n-static JNF_STATIC_MEMBER_CACHE(jm_getTableInfo, sjc_CAccessibility, \"getTableInfo\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleComponent, sjc_CAccessibility, \"getAccessibleComponent\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleComponent;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleValue, sjc_CAccessibility, \"getAccessibleValue\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleValue;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleDescription, sjc_CAccessibility, \"getAccessibleDescription\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_isFocusTraversable, sjc_CAccessibility, \"isFocusTraversable\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleIndexInParent, sjc_CAccessibility, \"getAccessibleIndexInParent\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\");\n+\/\/ GET* macros defined in JavaAccessibilityUtilities.h, so they can be shared.\n+static jclass sjc_CAccessibility = NULL;\n@@ -65,1 +60,27 @@\n-static JNF_CLASS_CACHE(sjc_CAccessible, \"sun\/lwawt\/macosx\/CAccessible\");\n+static jmethodID sjm_getAccessibleName = NULL;\n+#define GET_ACCESSIBLENAME_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", ret);\n+\n+static jmethodID jm_getChildrenAndRoles = NULL;\n+#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n+\n+static jmethodID sjm_getAccessibleComponent = NULL;\n+#define GET_ACCESSIBLECOMPONENT_STATIC_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleComponent, sjc_CAccessibility, \"getAccessibleComponent\", \\\n+           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleComponent;\", ret);\n+\n+static jmethodID sjm_getAccessibleIndexInParent = NULL;\n+#define GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleIndexInParent, sjc_CAccessibility, \"getAccessibleIndexInParent\", \\\n+                             \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\", ret);\n+\n+static jclass sjc_CAccessible = NULL;\n+#define GET_CACCESSIBLE_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessible, \"sun\/lwawt\/macosx\/CAccessible\", ret);\n@@ -67,2 +88,0 @@\n-static JNF_MEMBER_CACHE(jf_ptr, sjc_CAccessible, \"ptr\", \"J\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getCAccessible, sjc_CAccessible, \"getCAccessible\", \"(Ljavax\/accessibility\/Accessible;)Lsun\/lwawt\/macosx\/CAccessible;\");\n@@ -291,1 +310,4 @@\n-        JNF_STATIC_MEMBER_CACHE(jm_getAccessibility, sjc_CAccessibility, \"getAccessibility\", \"([Ljava\/lang\/String;)Lsun\/lwawt\/macosx\/CAccessibility;\");\n+        JNIEnv *env = [ThreadUtilities getJNIEnv];\n+\n+        GET_CACCESSIBILITY_CLASS();\n+        DECLARE_STATIC_METHOD(jm_getAccessibility, sjc_CAccessibility, \"getAccessibility\", \"([Ljava\/lang\/String;)Lsun\/lwawt\/macosx\/CAccessibility;\");\n@@ -301,4 +323,3 @@\n-        JNIEnv *env = [ThreadUtilities getJNIEnv];\n-\n-        static JNF_CLASS_CACHE(jc_String, \"java\/lang\/String\");\n-        result = JNFNewObjectArray(env, &jc_String, count);\n+        DECLARE_CLASS(jc_String, \"java\/lang\/String\");\n+        result = (*env)->NewObjectArray(env, count, jc_String, NULL);\n+        CHECK_EXCEPTION();\n@@ -317,1 +338,1 @@\n-        sAccessibilityClass = JNFCallStaticObjectMethod(env, jm_getAccessibility, result); \/\/ AWT_THREADING Safe (known object)\n+        sAccessibilityClass = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibility, result); \/\/ AWT_THREADING Safe (known object)\n@@ -328,1 +349,5 @@\n-    if (JNFIsInstanceOf(env, jaccessible, &sjc_CAccessible)) {\n+    DECLARE_CLASS_RETURN(sjc_Accessible, \"javax\/accessibility\/Accessible\", NULL);\n+    GET_CACCESSIBLE_CLASS_RETURN(NULL);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getCAccessible, sjc_CAccessible, \"getCAccessible\",\n+                                \"(Ljavax\/accessibility\/Accessible;)Lsun\/lwawt\/macosx\/CAccessible;\", NULL);\n+    if ((*env)->IsInstanceOf(env, jaccessible, sjc_CAccessible)) {\n@@ -330,2 +355,4 @@\n-    } else if (JNFIsInstanceOf(env, jaccessible, &sjc_Accessible)) {\n-        return JNFCallStaticObjectMethod(env, sjm_getCAccessible, jaccessible);\n+    } else if ((*env)->IsInstanceOf(env, jaccessible, sjc_Accessible)) {\n+        jobject o = (*env)->CallStaticObjectMethod(env, sjc_CAccessible,  sjm_getCAccessible, jaccessible);\n+        CHECK_EXCEPTION();\n+        return o;\n@@ -339,1 +366,4 @@\n-    jobjectArray jchildrenAndRoles = (jobjectArray)JNFCallStaticObjectMethod(env, jm_getChildrenAndRoles, parent->fAccessible, parent->fComponent, whichChildren, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+    jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                  parent->fAccessible, parent->fComponent, whichChildren, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -354,1 +384,4 @@\n-            jobject jkey = JNFGetObjectField(env, jchildJavaRole, sjf_key);\n+            DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+            DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+            jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n+            CHECK_EXCEPTION();\n@@ -374,0 +407,1 @@\n+    GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(nil);\n@@ -376,1 +410,2 @@\n-    jint index = JNFCallStaticIntMethod(env, sjm_getAccessibleIndexInParent, jaccessible, jcomponent);\n+    jint index = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, sjm_getAccessibleIndexInParent, jaccessible, jcomponent);\n+    CHECK_EXCEPTION();\n@@ -392,0 +427,2 @@\n+    GET_CACCESSIBLE_CLASS_RETURN(NULL);\n+    DECLARE_FIELD_RETURN(jf_ptr, sjc_CAccessible, \"ptr\", \"J\", NULL);\n@@ -395,1 +432,1 @@\n-    JavaComponentAccessibility *value = (JavaComponentAccessibility *) jlong_to_ptr(JNFGetLongField(env, jCAX, jf_ptr));\n+    JavaComponentAccessibility *value = (JavaComponentAccessibility *) jlong_to_ptr((*env)->GetLongField(env, jCAX, jf_ptr));\n@@ -431,1 +468,1 @@\n-    JNFSetLongField(env, jCAX, jf_ptr, ptr_to_jlong(newChild));\n+    (*env)->SetLongField(env, jCAX, jf_ptr, ptr_to_jlong(newChild));\n@@ -440,1 +477,3 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getInitialAttributeStates, sjc_CAccessibility, \"getInitialAttributeStates\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[Z\");\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getInitialAttributeStates, sjc_CAccessibility, \"getInitialAttributeStates\",\n+                                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[Z\", nil);\n@@ -465,1 +504,3 @@\n-    jbooleanArray attributeStates = (jbooleanArray)JNFCallStaticObjectMethod(env, jm_getInitialAttributeStates, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jbooleanArray attributeStates = (jbooleanArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                     jm_getInitialAttributeStates, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -557,1 +598,3 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleAction, sjc_CAccessibility, \"getAccessibleAction\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleAction;\");\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_getAccessibleAction, sjc_CAccessibility, \"getAccessibleAction\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleAction;\");\n@@ -561,1 +604,2 @@\n-    jobject axAction = JNFCallStaticObjectMethod(env, jm_getAccessibleAction, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -580,4 +624,0 @@\n-    static JNF_CLASS_CACHE(sjc_Window, \"java\/awt\/Window\");\n-    static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleParent, sjc_CAccessibility, \"getAccessibleParent\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\");\n-    static JNF_STATIC_MEMBER_CACHE(sjm_getSwingAccessible, sjc_CAccessible, \"getSwingAccessible\", \"(Ljavax\/accessibility\/Accessible;)Ljavax\/accessibility\/Accessible;\");\n-\n@@ -586,0 +626,7 @@\n+        GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleParent, sjc_CAccessibility, \"getAccessibleParent\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", nil);\n+        GET_CACCESSIBLE_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(sjm_getSwingAccessible, sjc_CAccessible, \"getSwingAccessible\",\n+                                 \"(Ljavax\/accessibility\/Accessible;)Ljavax\/accessibility\/Accessible;\", nil);\n+        DECLARE_CLASS_RETURN(sjc_Window, \"java\/awt\/Window\", nil);\n@@ -587,1 +634,2 @@\n-        jobject jparent = JNFCallStaticObjectMethod(env, sjm_getAccessibleParent, fAccessible, fComponent);\n+        jobject jparent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,  sjm_getAccessibleParent, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n@@ -593,1 +641,1 @@\n-            jobject jax = JNFCallStaticObjectMethod(env, sjm_getSwingAccessible, fAccessible);\n+            jobject jax = (*env)->CallStaticObjectMethod(env, sjc_CAccessible, sjm_getSwingAccessible, fAccessible);\n@@ -595,1 +643,1 @@\n-            if (JNFIsInstanceOf(env, jax, &sjc_Window)) {\n+            if ((*env)->IsInstanceOf(env, jax, sjc_Window)) {\n@@ -801,0 +849,2 @@\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(0);\n@@ -802,1 +852,2 @@\n-        JNFCallStaticIntMethod( [ThreadUtilities getJNIEnv],\n+        (*env)->CallStaticIntMethod( env,\n+                                sjc_CAccessibility,\n@@ -806,0 +857,1 @@\n+    CHECK_EXCEPTION();\n@@ -824,2 +876,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_isEnabled, sjc_CAccessibility, \"isEnabled\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\");\n-\n@@ -827,1 +877,5 @@\n-    NSNumber *value = [NSNumber numberWithBool:JNFCallStaticBooleanMethod(env, jm_isEnabled, fAccessible, fComponent)]; \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_isEnabled, sjc_CAccessibility, \"isEnabled\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\", nil);\n+\n+    NSNumber *value = [NSNumber numberWithBool:(*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent)]; \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -851,0 +905,3 @@\n+    GET_CACCESSIBILITY_CLASS_RETURN(NO);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_isFocusTraversable, sjc_CAccessibility, \"isFocusTraversable\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\", NO);\n@@ -855,1 +912,1 @@\n-    if (JNFCallStaticBooleanMethod(env, sjm_isFocusTraversable, fAccessible, fComponent)) { \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) { \/\/ AWT_THREADING Safe (AWTRunLoop)\n@@ -858,0 +915,1 @@\n+    CHECK_EXCEPTION();\n@@ -864,1 +922,4 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_requestFocus, sjc_CAccessibility, \"requestFocus\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\");\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_requestFocus, sjc_CAccessibility, \"requestFocus\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\");\n@@ -868,2 +929,1 @@\n-        JNIEnv* env = [ThreadUtilities getJNIEnv];\n-        JNFCallStaticVoidMethod(env, jm_requestFocus, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n@@ -878,1 +938,6 @@\n-    jobject val = JNFCallStaticObjectMethod(env, sjm_getAccessibleDescription, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleDescription, sjc_CAccessibility, \"getAccessibleDescription\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                                   sjm_getAccessibleDescription, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -907,2 +972,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getMaximumAccessibleValue, sjc_CAccessibility, \"getMaximumAccessibleValue\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\");\n-\n@@ -910,0 +973,3 @@\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getMaximumAccessibleValue, sjc_CAccessibility, \"getMaximumAccessibleValue\",\n+                                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n@@ -911,1 +977,2 @@\n-    jobject axValue = JNFCallStaticObjectMethod(env, jm_getMaximumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -928,2 +995,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getMinimumAccessibleValue, sjc_CAccessibility, \"getMinimumAccessibleValue\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\");\n-\n@@ -931,0 +996,3 @@\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getMinimumAccessibleValue, sjc_CAccessibility, \"getMinimumAccessibleValue\",\n+                                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n@@ -932,1 +1000,2 @@\n-    jobject axValue = JNFCallStaticObjectMethod(env, jm_getMinimumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -986,1 +1055,4 @@\n-    jobject axComponent = JNFCallStaticObjectMethod(env, sjm_getAccessibleComponent, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLECOMPONENT_STATIC_METHOD_RETURN(nil);\n+    jobject axComponent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleComponent,\n+                           fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -1047,2 +1119,0 @@\n-        static JNF_STATIC_MEMBER_CACHE(jm_getAccessibleRoleDisplayString, sjc_CAccessibility, \"getAccessibleRoleDisplayString\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n-\n@@ -1050,0 +1120,3 @@\n+        GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(jm_getAccessibleRoleDisplayString, sjc_CAccessibility, \"getAccessibleRoleDisplayString\",\n+                                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n@@ -1051,1 +1124,3 @@\n-        jobject axRole = JNFCallStaticObjectMethod(env, jm_getAccessibleRoleDisplayString, fAccessible, fComponent);\n+\n+        jobject axRole = (*env)->CallStaticObjectMethod(env, jm_getAccessibleRoleDisplayString, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n@@ -1101,4 +1176,6 @@\n-    static JNF_STATIC_MEMBER_CACHE( jm_requestSelection,\n-                                    sjc_CAccessibility,\n-                                    \"requestSelection\",\n-                                    \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\" );\n+   JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_requestSelection,\n+                          sjc_CAccessibility,\n+                          \"requestSelection\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\");\n@@ -1107,2 +1184,2 @@\n-        JNIEnv* env = [ThreadUtilities getJNIEnv];\n-        JNFCallStaticVoidMethod(env, jm_requestSelection, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        CHECK_EXCEPTION();\n@@ -1115,1 +1192,4 @@\n-    jobject axComponent = JNFCallStaticObjectMethod(env, sjm_getAccessibleComponent, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLECOMPONENT_STATIC_METHOD_RETURN(nil);\n+    jobject axComponent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                           sjm_getAccessibleComponent, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -1175,1 +1255,3 @@\n-    jobject val = JNFCallStaticObjectMethod(env, sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLENAME_METHOD_RETURN(nil);\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -1205,2 +1287,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getCurrentAccessibleValue, sjc_CAccessibility, \"getCurrentAccessibleValue\", \"(Ljavax\/accessibility\/AccessibleValue;Ljava\/awt\/Component;)Ljava\/lang\/Number;\");\n-\n@@ -1231,0 +1311,2 @@\n+                GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+                GET_ACCESSIBLENAME_METHOD_RETURN(nil);\n@@ -1232,1 +1314,1 @@\n-                        JNFCallStaticObjectMethod( env,\n+                        (*env)->CallStaticObjectMethod( env,\n@@ -1236,0 +1318,1 @@\n+                CHECK_EXCEPTION();\n@@ -1253,1 +1336,5 @@\n-    jobject axValue = JNFCallStaticObjectMethod(env, sjm_getAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleValue, sjc_CAccessibility, \"getAccessibleValue\",\n+                \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleValue;\", nil);\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -1255,1 +1342,4 @@\n-        jobject str = JNFCallStaticObjectMethod(env, jm_getCurrentAccessibleValue, axValue, fComponent);\n+        DECLARE_STATIC_METHOD_RETURN(jm_getCurrentAccessibleValue, sjc_CAccessibility, \"getCurrentAccessibleValue\",\n+                                     \"(Ljavax\/accessibility\/AccessibleValue;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n+        jobject str = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getCurrentAccessibleValue, axValue, fComponent);\n+        CHECK_EXCEPTION();\n@@ -1353,2 +1443,3 @@\n-    static JNF_CLASS_CACHE(jc_Container, \"java\/awt\/Container\");\n-    static JNF_STATIC_MEMBER_CACHE(jm_accessibilityHitTest, sjc_CAccessibility, \"accessibilityHitTest\", \"(Ljava\/awt\/Container;FF)Ljavax\/accessibility\/Accessible;\");\n+    DECLARE_CLASS_RETURN(jc_Container, \"java\/awt\/Container\", nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_accessibilityHitTest, sjc_CAccessibility, \"accessibilityHitTest\",\n+                                 \"(Ljava\/awt\/Container;FF)Ljavax\/accessibility\/Accessible;\", nil);\n@@ -1363,1 +1454,3 @@\n-        jobject jaccessible = JNFCallStaticObjectMethod(env, jm_accessibilityHitTest, jparent, (jfloat)point.x, (jfloat)point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        jobject jaccessible = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_accessibilityHitTest,\n+                               jparent, (jfloat)point.x, (jfloat)point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        CHECK_EXCEPTION();\n@@ -1386,2 +1479,0 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getFocusOwner, sjc_CAccessibility, \"getFocusOwner\", \"(Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\");\n-\n@@ -1389,0 +1480,2 @@\n+    DECLARE_STATIC_METHOD_RETURN(jm_getFocusOwner, sjc_CAccessibility, \"getFocusOwner\",\n+                                  \"(Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", nil);\n@@ -1392,1 +1485,1 @@\n-    jobject focused = JNFCallStaticObjectMethod(env, jm_getFocusOwner, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n@@ -1394,0 +1487,1 @@\n+    CHECK_EXCEPTION();\n@@ -1396,1 +1490,2 @@\n-        if (JNFIsInstanceOf(env, focused, &sjc_Accessible)) {\n+        DECLARE_CLASS_RETURN(sjc_Accessible, \"javax\/accessibility\/Accessible\", nil);\n+        if ((*env)->IsInstanceOf(env, focused, sjc_Accessible)) {\n@@ -1399,0 +1494,1 @@\n+        CHECK_EXCEPTION();\n@@ -1589,1 +1685,4 @@\n-    jobjectArray jtabsAndRoles = (jobjectArray)JNFCallStaticObjectMethod(env, jm_getChildrenAndRoles, fAccessible, fComponent, whichTabs, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+    jobjectArray jtabsAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                                  fAccessible, fComponent, whichTabs, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -1605,1 +1704,4 @@\n-    jobject jkey = JNFGetObjectField(env, jtabJavaRole, sjf_key);\n+    DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+    DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+    jobject jkey = (*env)->GetObjectField(env, jtabJavaRole, sjf_key);\n+    CHECK_EXCEPTION();\n@@ -1921,1 +2023,4 @@\n-    jint count = JNFCallStaticIntMethod(env, jm_getTableInfo, fAccessible,\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTableInfo, sjc_CAccessibility, \"getTableInfo\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\", nil);\n+    jint count = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getTableInfo, fAccessible,\n@@ -1923,0 +2028,1 @@\n+    CHECK_EXCEPTION();\n@@ -1942,3 +2048,3 @@\n-    jobject axComponent = JNFCallStaticObjectMethod(env, sjm_getAccessibleComponent,\n-                                                    fAccessible, fComponent);\n-\n+    GET_ACCESSIBLECOMPONENT_STATIC_METHOD_RETURN(NSZeroRect);\n+    jobject axComponent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleComponent, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n@@ -1968,1 +2074,0 @@\n-static JNF_CLASS_CACHE(sjc_Object, \"java\/lang\/Object\");\n@@ -1971,1 +2076,2 @@\n-    static JNF_MEMBER_CACHE(jm_equals, sjc_Object, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    DECLARE_CLASS_RETURN(sjc_Object, \"java\/lang\/Object\", NO);\n+    DECLARE_METHOD_RETURN(jm_equals, sjc_Object, \"equals\", \"(Ljava\/lang\/Object;)Z\", NO);\n@@ -1978,3 +2084,5 @@\n-        static JNF_CLASS_CACHE(sjc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\");\n-        static JNF_STATIC_MEMBER_CACHE(jm_doEquals, sjc_LWCToolkit, \"doEquals\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/awt\/Component;)Z\");\n-        return JNFCallStaticBooleanMethod(env, jm_doEquals, a, b, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        DECLARE_CLASS_RETURN(sjc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\", NO);\n+        DECLARE_STATIC_METHOD_RETURN(jm_doEquals, sjc_LWCToolkit, \"doEquals\",\n+                                     \"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/awt\/Component;)Z\", NO);\n+        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        CHECK_EXCEPTION();\n@@ -1983,1 +2091,3 @@\n-    return JNFCallBooleanMethod(env, a, jm_equals, b); \/\/ AWT_THREADING Safe (!appKit)\n+    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b); \/\/ AWT_THREADING Safe (!appKit)\n+    CHECK_EXCEPTION();\n+    return jb;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":197,"deletions":87,"binary":false,"changes":284,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#import \"JNIUtilities.h\"\n@@ -31,0 +32,23 @@\n+static jclass sjc_CAccessibility = NULL;\n+#define GET_CACCESSIBLITY_CLASS() \\\n+     GET_CLASS(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\");\n+#define GET_CACCESSIBLITY_CLASS_RETURN(ret) \\\n+     GET_CLASS_RETURN(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\", ret);\n+\n+static jmethodID sjm_getAccessibleText = NULL;\n+#define GET_ACCESSIBLETEXT_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBLITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleText, sjc_CAccessibility, \"getAccessibleText\", \\\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleText;\", ret);\n+\n+static jclass sjc_CAccessibleText = NULL;\n+#define GET_CACCESSIBLETEXT_CLASS() \\\n+    GET_CLASS(sjc_CAccessibleText, \"sun\/lwawt\/macosx\/CAccessibleText\");\n+#define GET_CACCESSIBLETEXT_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessibleText, \"sun\/lwawt\/macosx\/CAccessibleText\", ret);\n+\n+static jmethodID sjm_getAccessibleEditableText = NULL;\n+#define GET_ACCESSIBLEEDITABLETEXT_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleEditableText, sjc_CAccessibleText, \"getAccessibleEditableText\", \\\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleEditableText;\", ret);\n@@ -32,4 +56,0 @@\n-static JNF_CLASS_CACHE(sjc_CAccessibleText, \"sun\/lwawt\/macosx\/CAccessibleText\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleText, sjc_CAccessibility, \"getAccessibleText\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleText;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleEditableText, sjc_CAccessibleText, \"getAccessibleEditableText\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleEditableText;\");\n-static JNF_STATIC_MEMBER_CACHE(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n@@ -111,0 +131,3 @@\n+    GET_CACCESSIBLITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n@@ -113,1 +136,3 @@\n-        jobject axName = JNFCallStaticObjectMethod(env, sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        jobject axName = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                           sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        CHECK_EXCEPTION();\n@@ -123,1 +148,4 @@\n-    jobject axText = JNFCallStaticObjectMethod(env, sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLETEXT_METHOD_RETURN(@\"\");\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                      sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -127,1 +155,4 @@\n-    jobject axEditableText = JNFCallStaticObjectMethod(env, sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLEEDITABLETEXT_METHOD_RETURN(nil);\n+    jobject axEditableText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                       sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -130,2 +161,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getTextRange, sjc_CAccessibleText, \"getTextRange\", \"(Ljavax\/accessibility\/AccessibleEditableText;IILjava\/awt\/Component;)Ljava\/lang\/String;\");\n-    jobject jrange = JNFCallStaticObjectMethod(env, jm_getTextRange, axEditableText, 0, getAxTextCharCount(env, axEditableText, fComponent), fComponent);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTextRange, sjc_CAccessibleText, \"getTextRange\",\n+                    \"(Ljavax\/accessibility\/AccessibleEditableText;IILjava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    CHECK_EXCEPTION();\n+    jobject jrange = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getTextRange,\n+                       axEditableText, 0, getAxTextCharCount(env, axEditableText, fComponent), fComponent);\n+    CHECK_EXCEPTION();\n@@ -148,1 +183,4 @@\n-    jobject axEditableText = JNFCallStaticObjectMethod(env, sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLEEDITABLETEXT_METHOD_RETURN(NO);\n+    jobject axEditableText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                     sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -166,2 +204,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getSelectedText, sjc_CAccessibleText, \"getSelectedText\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\");\n-    jobject axText = JNFCallStaticObjectMethod(env, jm_getSelectedText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getSelectedText, sjc_CAccessibleText, \"getSelectedText\",\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getSelectedText,\n+                        fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -190,2 +232,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_setSelectedText, sjc_CAccessibleText, \"setSelectedText\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;Ljava\/lang\/String;)V\");\n-    JNFCallStaticVoidMethod(env, jm_setSelectedText, fAccessible, fComponent, jstringValue); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS();\n+    DECLARE_STATIC_METHOD(jm_setSelectedText, sjc_CAccessibleText, \"setSelectedText\",\n+                   \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;Ljava\/lang\/String;)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibleText, jm_setSelectedText,\n+              fAccessible, fComponent, jstringValue); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -198,2 +244,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getSelectedTextRange, sjc_CAccessibleText, \"getSelectedTextRange\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[I\");\n-    jintArray axTextRange = JNFCallStaticObjectMethod(env, jm_getSelectedTextRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getSelectedTextRange, sjc_CAccessibleText, \"getSelectedTextRange\",\n+           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[I\", nil);\n+    jintArray axTextRange = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                jm_getSelectedTextRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -224,2 +274,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_setSelectedTextRange, sjc_CAccessibleText, \"setSelectedTextRange\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)V\");\n-    JNFCallStaticVoidMethod(env, jm_setSelectedTextRange, fAccessible, fComponent, startIndex, endIndex); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS();\n+    DECLARE_STATIC_METHOD(jm_setSelectedTextRange, sjc_CAccessibleText, \"setSelectedTextRange\",\n+                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibleText, jm_setSelectedTextRange,\n+                  fAccessible, fComponent, startIndex, endIndex); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -233,1 +287,4 @@\n-    jobject axText = JNFCallStaticObjectMethod(env, sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_ACCESSIBLETEXT_METHOD_RETURN(nil);\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                     sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -247,2 +304,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getVisibleCharacterRange, sjc_CAccessibleText, \"getVisibleCharacterRange\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[I\");\n-    jintArray axTextRange = JNFCallStaticObjectMethod(env, jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getVisibleCharacterRange, sjc_CAccessibleText, \"getVisibleCharacterRange\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[I\", nil);\n+    jintArray axTextRange = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                 jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -265,2 +326,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getLineNumberForInsertionPoint, sjc_CAccessibleText, \"getLineNumberForInsertionPoint\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\");\n-    jint row = JNFCallStaticIntMethod(env, jm_getLineNumberForInsertionPoint, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getLineNumberForInsertionPoint, sjc_CAccessibleText,\n+             \"getLineNumberForInsertionPoint\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\", nil);\n+    jint row = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText,\n+                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -300,2 +365,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getBoundsForRange, sjc_CAccessibleText, \"getBoundsForRange\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)[D\");\n-    jdoubleArray axBounds = (jdoubleArray)JNFCallStaticObjectMethod(env, jm_getBoundsForRange, fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getBoundsForRange, sjc_CAccessibleText, \"getBoundsForRange\",\n+                         \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)[D\", nil);\n+    jdoubleArray axBounds = (jdoubleArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getBoundsForRange,\n+                              fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -306,0 +375,1 @@\n+    CHECK_EXCEPTION();\n@@ -327,2 +397,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getLineNumberForIndex, sjc_CAccessibleText, \"getLineNumberForIndex\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\");\n-    jint row = JNFCallStaticIntMethod(env, jm_getLineNumberForIndex, fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getLineNumberForIndex, sjc_CAccessibleText, \"getLineNumberForIndex\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\", nil);\n+    jint row = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText, jm_getLineNumberForIndex,\n+                       fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -339,2 +413,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getRangeForLine, sjc_CAccessibleText, \"getRangeForLine\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\");\n-    jintArray axTextRange = (jintArray)JNFCallStaticObjectMethod(env, jm_getRangeForLine, fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getRangeForLine, sjc_CAccessibleText, \"getRangeForLine\",\n+                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", nil);\n+    jintArray axTextRange = (jintArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                jm_getRangeForLine, fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -365,3 +443,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getStringForRange, sjc_CAccessibleText, \"getStringForRange\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)Ljava\/lang\/String;\");\n-    jstring jstringForRange = (jstring)JNFCallStaticObjectMethod(env, jm_getStringForRange, fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n-\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getStringForRange, sjc_CAccessibleText, \"getStringForRange\",\n+                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)Ljava\/lang\/String;\", nil);\n+    jstring jstringForRange = (jstring)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getStringForRange,\n+                            fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -394,2 +475,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getCharacterIndexAtPosition, sjc_CAccessibleText, \"getCharacterIndexAtPosition\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)I\");\n-    jint charIndex = JNFCallStaticIntMethod(env, jm_getCharacterIndexAtPosition, fAccessible, fComponent, point.x, point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getCharacterIndexAtPosition, sjc_CAccessibleText, \"getCharacterIndexAtPosition\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)I\", nil);\n+    jint charIndex = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText, jm_getCharacterIndexAtPosition,\n+                            fAccessible, fComponent, point.x, point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -423,2 +508,6 @@\n-    static JNF_STATIC_MEMBER_CACHE(jm_getRangeForIndex, sjc_CAccessibleText, \"getRangeForIndex\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\");\n-    jintArray axTextRange = (jintArray)JNFCallStaticObjectMethod(env, jm_getRangeForIndex, fAccessible, fComponent, index); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getRangeForIndex, sjc_CAccessibleText, \"getRangeForIndex\",\n+                    \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", nil);\n+    jintArray axTextRange = (jintArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getRangeForIndex,\n+                              fAccessible, fComponent, index); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaTextAccessibility.m","additions":125,"deletions":36,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"jni_util.h\"\n+#import \"JNIUtilities.h\"\n@@ -187,3 +187,4 @@\n-    static JNF_CLASS_CACHE(sjc_Runnable, \"java\/lang\/Runnable\");\n-    static JNF_MEMBER_CACHE(jm_Runnable_run, sjc_Runnable, \"run\", \"()V\");\n-    JNFCallVoidMethod(env, self.runnable, jm_Runnable_run);\n+    DECLARE_CLASS(sjc_Runnable, \"java\/lang\/Runnable\");\n+    DECLARE_METHOD(jm_Runnable_run, sjc_Runnable, \"run\", \"()V\");\n+    (*env)->CallVoidMethod(env, self.runnable, jm_Runnable_run);\n+    CHECK_EXCEPTION();\n@@ -198,1 +199,1 @@\n-    static JNF_CLASS_CACHE(jc_AWTAutoShutdown, \"sun\/awt\/AWTAutoShutdown\");\n+    DECLARE_CLASS(jc_AWTAutoShutdown, \"sun\/awt\/AWTAutoShutdown\");\n@@ -201,2 +202,2 @@\n-        static JNF_STATIC_MEMBER_CACHE(jm_notifyBusyMethod, jc_AWTAutoShutdown, \"notifyToolkitThreadBusy\", \"()V\");\n-        JNFCallStaticVoidMethod(env, jm_notifyBusyMethod);\n+        DECLARE_STATIC_METHOD(jm_notifyBusyMethod, jc_AWTAutoShutdown, \"notifyToolkitThreadBusy\", \"()V\");\n+        (*env)->CallStaticVoidMethod(env, jc_AWTAutoShutdown, jm_notifyBusyMethod);\n@@ -204,2 +205,2 @@\n-        static JNF_STATIC_MEMBER_CACHE(jm_notifyFreeMethod, jc_AWTAutoShutdown, \"notifyToolkitThreadFree\", \"()V\");\n-        JNFCallStaticVoidMethod(env, jm_notifyFreeMethod);\n+        DECLARE_STATIC_METHOD(jm_notifyFreeMethod, jc_AWTAutoShutdown, \"notifyToolkitThreadFree\", \"()V\");\n+        (*env)->CallStaticVoidMethod(env, jc_AWTAutoShutdown, jm_notifyFreeMethod);\n@@ -207,0 +208,1 @@\n+     CHECK_EXCEPTION();\n@@ -246,3 +248,5 @@\n-    static JNF_CLASS_CACHE(jc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\");\n-    static JNF_STATIC_MEMBER_CACHE(jsm_installToolkitThreadInJava, jc_LWCToolkit, \"installToolkitThreadInJava\", \"()V\");\n-    JNFCallStaticVoidMethod(env, jsm_installToolkitThreadInJava);\n+    DECLARE_CLASS(jc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\");\n+    DECLARE_STATIC_METHOD(jsm_installToolkitThreadInJava, jc_LWCToolkit, \"installToolkitThreadInJava\", \"()V\");\n+    (*env)->CallStaticVoidMethod(env, jc_LWCToolkit, jsm_installToolkitThreadInJava);\n+    CHECK_EXCEPTION();\n+\n@@ -756,0 +760,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/LWCToolkit.m","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#import \"JNIUtilities.h\"\n@@ -91,3 +92,4 @@\n-        static JNF_CLASS_CACHE(jc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\");\n-        static JNF_STATIC_MEMBER_CACHE(jm_detachPrintLoop, jc_CPrinterJob, \"detachPrintLoop\", \"(JJ)V\");\n-        JNFCallStaticVoidMethod(env, jm_detachPrintLoop, ptr_to_jlong(self), ptr_to_jlong(printerView)); \/\/ AWT_THREADING Safe (known object)\n+        DECLARE_CLASS_RETURN(jc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\", NO);\n+        DECLARE_STATIC_METHOD_RETURN(jm_detachPrintLoop, jc_CPrinterJob, \"detachPrintLoop\", \"(JJ)V\", NO);\n+        (*env)->CallStaticVoidMethod(env, jc_CPrinterJob, jm_detachPrintLoop, ptr_to_jlong(self), ptr_to_jlong(printerView)); \/\/ AWT_THREADING Safe (known object)\n+        CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrintModel.m","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#import \"JNIUtilities.h\"\n@@ -36,3 +37,3 @@\n-\n-static JNF_CLASS_CACHE(sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\");\n-static JNF_CLASS_CACHE(sjc_PageFormat, \"java\/awt\/print\/PageFormat\");\n+static jclass sjc_CPrinterJob = NULL;\n+#define GET_CPRINTERJOB_CLASS() (sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\");\n+#define GET_CPRINTERJOB_CLASS_RETURN(ret) GET_CLASS_RETURN(sjc_CPrinterJob, \"sun\/lwawt\/macosx\/CPrinterJob\", ret);\n@@ -83,1 +84,5 @@\n-    static JNF_MEMBER_CACHE(jm_printToPathGraphics, sjc_CPrinterJob, \"printToPathGraphics\", \"(Lsun\/print\/PeekGraphics;Ljava\/awt\/print\/PrinterJob;Ljava\/awt\/print\/Printable;Ljava\/awt\/print\/PageFormat;IJ)V\");\n+    JNIEnv* env = [ThreadUtilities getJNIEnvUncached];\n+\n+    GET_CPRINTERJOB_CLASS();\n+    DECLARE_METHOD(jm_printToPathGraphics, sjc_CPrinterJob, \"printToPathGraphics\",\n+                   \"(Lsun\/print\/PeekGraphics;Ljava\/awt\/print\/PrinterJob;Ljava\/awt\/print\/Printable;Ljava\/awt\/print\/PageFormat;IJ)V\");\n@@ -90,2 +95,0 @@\n-    JNIEnv* env = [ThreadUtilities getJNIEnvUncached];\n-\n@@ -105,1 +108,3 @@\n-    JNFCallVoidMethod(env, fPrinterJob, jm_printToPathGraphics, fCurPeekGraphics, fPrinterJob, fCurPainter, fCurPageFormat, jPageIndex, context); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    (*env)->CallVoidMethod(env, fPrinterJob, jm_printToPathGraphics, fCurPeekGraphics, fPrinterJob,\n+                           fCurPainter, fCurPageFormat, jPageIndex, context); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    CHECK_EXCEPTION();\n@@ -116,2 +121,0 @@\n-    static JNF_MEMBER_CACHE(jm_getJobName, sjc_CPrinterJob, \"getJobName\", \"()Ljava\/lang\/String;\");\n-\n@@ -119,0 +122,2 @@\n+    GET_CPRINTERJOB_CLASS_RETURN(nil);\n+    DECLARE_METHOD_RETURN(jm_getJobName, sjc_CPrinterJob, \"getJobName\", \"()Ljava\/lang\/String;\", nil);\n@@ -120,1 +125,1 @@\n-    jobject o = JNFCallObjectMethod(env, fPrinterJob, jm_getJobName); \/\/ AWT_THREADING Safe (known object)\n+    jobject o = (*env)->CallObjectMethod(env, fPrinterJob, jm_getJobName); \/\/ AWT_THREADING Safe (known object)\n@@ -154,3 +159,8 @@\n-    static JNF_MEMBER_CACHE(jm_getPageformatPrintablePeekgraphics, sjc_CPrinterJob, \"getPageformatPrintablePeekgraphics\", \"(I)[Ljava\/lang\/Object;\");\n-    static JNF_MEMBER_CACHE(jm_printAndGetPageFormatArea, sjc_CPrinterJob, \"printAndGetPageFormatArea\", \"(Ljava\/awt\/print\/Printable;Ljava\/awt\/Graphics;Ljava\/awt\/print\/PageFormat;I)Ljava\/awt\/geom\/Rectangle2D;\");\n-    static JNF_MEMBER_CACHE(jm_getOrientation, sjc_PageFormat, \"getOrientation\", \"()I\");\n+    JNIEnv* env = [ThreadUtilities getJNIEnvUncached];\n+    GET_CPRINTERJOB_CLASS_RETURN(NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_getPageformatPrintablePeekgraphics, sjc_CPrinterJob,\n+                           \"getPageformatPrintablePeekgraphics\", \"(I)[Ljava\/lang\/Object;\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_printAndGetPageFormatArea, sjc_CPrinterJob, \"printAndGetPageFormatArea\",\n+                          \"(Ljava\/awt\/print\/Printable;Ljava\/awt\/Graphics;Ljava\/awt\/print\/PageFormat;I)Ljava\/awt\/geom\/Rectangle2D;\", NSZeroRect);\n+    DECLARE_CLASS_RETURN(sjc_PageFormat, \"java\/awt\/print\/PageFormat\", NSZeroRect);\n+    DECLARE_METHOD_RETURN(jm_getOrientation, sjc_PageFormat, \"getOrientation\", \"()I\", NSZeroRect);\n@@ -165,1 +175,0 @@\n-    JNIEnv* env = [ThreadUtilities getJNIEnvUncached];\n@@ -187,1 +196,2 @@\n-    jobjectArray objectArray = JNFCallObjectMethod(env, fPrinterJob, jm_getPageformatPrintablePeekgraphics, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobjectArray objectArray = (*env)->CallObjectMethod(env, fPrinterJob,\n+                                jm_getPageformatPrintablePeekgraphics, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n@@ -204,1 +214,2 @@\n-        jobject pageFormatArea = JNFCallObjectMethod(env, fPrinterJob, jm_printAndGetPageFormatArea, fCurPainter, fCurPeekGraphics, fCurPageFormat, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        jobject pageFormatArea = (*env)->CallObjectMethod(env, fPrinterJob, jm_printAndGetPageFormatArea, fCurPainter,\n+                                    fCurPeekGraphics, fCurPageFormat, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n@@ -209,1 +220,1 @@\n-            switch (JNFCallIntMethod(env, fCurPageFormat, jm_getOrientation)) {\n+            switch ((*env)->CallIntMethod(env, fCurPageFormat, jm_getOrientation)) {\n@@ -246,1 +257,2 @@\n-    static JNF_MEMBER_CACHE(jm_cancelCheck, sjc_CPrinterJob, \"cancelCheck\", \"()Z\");\n+    GET_CPRINTERJOB_CLASS_RETURN(NO);\n+    DECLARE_METHOD_RETURN(jm_cancelCheck, sjc_CPrinterJob, \"cancelCheck\", \"()Z\", NO);\n@@ -248,1 +260,3 @@\n-    return JNFCallBooleanMethod(env, fPrinterJob, jm_cancelCheck); \/\/ AWT_THREADING Safe (known object)\n+    BOOL b = (*env)->CallBooleanMethod(env, fPrinterJob, jm_cancelCheck); \/\/ AWT_THREADING Safe (known object)\n+    CHECK_EXCEPTION();\n+    return b;\n@@ -256,2 +270,3 @@\n-    static JNF_MEMBER_CACHE(jf_completePrintLoop, sjc_CPrinterJob, \"completePrintLoop\", \"()V\");\n-    JNFCallVoidMethod(env, fPrinterJob, jf_completePrintLoop);\n+    DECLARE_METHOD(jf_completePrintLoop, sjc_CPrinterJob, \"completePrintLoop\", \"()V\");\n+    (*env)->CallVoidMethod(env, fPrinterJob, jf_completePrintLoop);\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":36,"deletions":21,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import \"JNIUtilities.h\"\n@@ -30,1 +30,0 @@\n-#import \"jni_util.h\"\n@@ -40,3 +39,3 @@\n-    static JNF_CLASS_CACHE(jc_Component, \"java\/awt\/Component\");\n-    static JNF_MEMBER_CACHE(jf_peer, jc_Component, \"peer\", \"Ljava\/awt\/peer\/ComponentPeer;\");\n-    jobject peer = JNFGetObjectField(env, target, jf_peer);\n+    DECLARE_CLASS_RETURN(jc_Component, \"java\/awt\/Component\", NULL);\n+    DECLARE_FIELD_RETURN(jf_peer, jc_Component, \"peer\", \"Ljava\/awt\/peer\/ComponentPeer;\", NULL);\n+    jobject peer = (*env)->GetObjectField(env, target, jf_peer);\n@@ -44,4 +43,4 @@\n-    static JNF_CLASS_CACHE(jc_ComponentPeer, \"sun\/lwawt\/LWComponentPeer\");\n-    static JNF_MEMBER_CACHE(jf_platformComponent, jc_ComponentPeer,\n-                            \"platformComponent\", \"Lsun\/lwawt\/PlatformComponent;\");\n-    jobject platformComponent = JNFGetObjectField(env, peer, jf_platformComponent);\n+    DECLARE_CLASS_RETURN(jc_ComponentPeer, \"sun\/lwawt\/LWComponentPeer\", NULL);\n+    DECLARE_FIELD_RETURN(jf_platformComponent, jc_ComponentPeer,\n+                            \"platformComponent\", \"Lsun\/lwawt\/PlatformComponent;\", NULL);\n+    jobject platformComponent = (*env)->GetObjectField(env, peer, jf_platformComponent);\n@@ -49,3 +48,3 @@\n-    static JNF_CLASS_CACHE(jc_PlatformComponent, \"sun\/lwawt\/macosx\/CPlatformComponent\");\n-    static JNF_MEMBER_CACHE(jm_getPointer, jc_PlatformComponent, \"getPointer\", \"()J\");\n-    AWTSurfaceLayers *surfaceLayers = jlong_to_ptr(JNFCallLongMethod(env, platformComponent, jm_getPointer));\n+    DECLARE_CLASS_RETURN(jc_PlatformComponent, \"sun\/lwawt\/macosx\/CPlatformComponent\", NULL);\n+    DECLARE_METHOD_RETURN(jm_getPointer, jc_PlatformComponent, \"getPointer\", \"()J\", NULL);\n+    AWTSurfaceLayers *surfaceLayers = jlong_to_ptr((*env)->CallLongMethod(env, platformComponent, jm_getPointer));\n@@ -57,4 +56,4 @@\n-    static JNF_MEMBER_CACHE(jf_x, jc_Component, \"x\", \"I\");\n-    static JNF_MEMBER_CACHE(jf_y, jc_Component, \"y\", \"I\");\n-    static JNF_MEMBER_CACHE(jf_width, jc_Component, \"width\", \"I\");\n-    static JNF_MEMBER_CACHE(jf_height, jc_Component, \"height\", \"I\");\n+    DECLARE_FIELD_RETURN(jf_x, jc_Component, \"x\", \"I\", NULL);\n+    DECLARE_FIELD_RETURN(jf_y, jc_Component, \"y\", \"I\", NULL);\n+    DECLARE_FIELD_RETURN(jf_width, jc_Component, \"width\", \"I\", NULL);\n+    DECLARE_FIELD_RETURN(jf_height, jc_Component, \"height\", \"I\", NULL);\n@@ -62,4 +61,4 @@\n-    dsi->bounds.x = JNFGetIntField(env, target, jf_x);\n-    dsi->bounds.y = JNFGetIntField(env, target, jf_y);\n-    dsi->bounds.width = JNFGetIntField(env, target, jf_width);\n-    dsi->bounds.height = JNFGetIntField(env, target, jf_height);\n+    dsi->bounds.x = (*env)->GetIntField(env, target, jf_x);\n+    dsi->bounds.y = (*env)->GetIntField(env, target, jf_y);\n+    dsi->bounds.width = (*env)->GetIntField(env, target, jf_width);\n+    dsi->bounds.height = (*env)->GetIntField(env, target, jf_height);\n@@ -151,1 +150,3 @@\n-    return (*env)->NewObject(env, cls, mid, platformInfo);\n+    jobject o = (*env)->NewObject(env, cls, mid, platformInfo);\n+    CHECK_EXCEPTION();\n+    return o;\n@@ -165,0 +166,1 @@\n+    CHECK_EXCEPTION();\n@@ -178,0 +180,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/awt_DrawingSurface.m","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#import \"JNIUtilities.h\"\n@@ -125,1 +126,1 @@\n-    static JNF_CLASS_CACHE(jc_Font, \"java\/awt\/Font\");\n+    DECLARE_CLASS_RETURN(jc_Font, \"java\/awt\/Font\", nil);\n@@ -128,2 +129,3 @@\n-    static JNF_MEMBER_CACHE(jm_Font_getFont2D, jc_Font, \"getFont2D\", \"()Lsun\/font\/Font2D;\");\n-    jobject font2d = JNFCallObjectMethod(env, javaFont, jm_Font_getFont2D);\n+    DECLARE_METHOD_RETURN(jm_Font_getFont2D, jc_Font, \"getFont2D\", \"()Lsun\/font\/Font2D;\", nil);\n+    jobject font2d = (*env)->CallObjectMethod(env, javaFont, jm_Font_getFont2D);\n+    CHECK_EXCEPTION();\n@@ -139,2 +141,2 @@\n-    static JNF_CLASS_CACHE(jc_CFont, \"sun\/font\/CFont\");\n-    if (!JNFIsInstanceOf(env, font2d, &jc_CFont)) {\n+    DECLARE_CLASS_RETURN(jc_CFont, \"sun\/font\/CFont\", nil);\n+    if (!(*env)->IsInstanceOf(env, font2d, jc_CFont)) {\n@@ -147,5 +149,5 @@\n-    static JNF_MEMBER_CACHE(jm_CFont_getFontStrike, jc_CFont, \"getStrike\", \"(Ljava\/awt\/Font;)Lsun\/font\/FontStrike;\");\n-    jobject fontStrike = JNFCallObjectMethod(env, font2d, jm_CFont_getFontStrike, javaFont);\n-\n-    static JNF_CLASS_CACHE(jc_CStrike, \"sun\/font\/CStrike\");\n-    if (!JNFIsInstanceOf(env, fontStrike, &jc_CStrike)) {\n+    DECLARE_METHOD_RETURN(jm_CFont_getFontStrike, jc_CFont, \"getStrike\", \"(Ljava\/awt\/Font;)Lsun\/font\/FontStrike;\", nil);\n+    jobject fontStrike = (*env)->CallObjectMethod(env, font2d, jm_CFont_getFontStrike, javaFont);\n+    CHECK_EXCEPTION();\n+    DECLARE_CLASS_RETURN(jc_CStrike, \"sun\/font\/CStrike\", nil);\n+    if (!(*env)->IsInstanceOf(env, fontStrike, jc_CStrike)) {\n@@ -158,2 +160,3 @@\n-    static JNF_MEMBER_CACHE(jm_CStrike_nativeStrikePtr, jc_CStrike, \"getNativeStrikePtr\", \"()J\");\n-    jlong awtStrikePtr = JNFCallLongMethod(env, fontStrike, jm_CStrike_nativeStrikePtr);\n+    DECLARE_METHOD_RETURN(jm_CStrike_nativeStrikePtr, jc_CStrike, \"getNativeStrikePtr\", \"()J\", nil);\n+    jlong awtStrikePtr = (*env)->CallLongMethod(env, fontStrike, jm_CStrike_nativeStrikePtr);\n+    CHECK_EXCEPTION();\n@@ -288,65 +291,0 @@\n-\/\/ \/*\n-\/\/  * Class:     sun_font_CFontManager\n-\/\/  * Method:    loadFileFont\n-\/\/  * Signature: (Ljava\/lang\/String;)Lsun\/font\/Font2D;\n-\/\/  *\/\n-\/\/ JNIEXPORT \/* sun.font.CFont *\/ jobject JNICALL\n-\/\/ Java_sun_font_CFontManager_loadFileFont\n-\/\/     (JNIEnv *env, jclass obj, jstring fontpath)\n-\/\/ {\n-\/\/     jobject result = NULL;\n-\/\/\n-\/\/ JNF_COCOA_ENTER(env);\n-\/\/\n-\/\/     NSString *nsFilePath = JNFJavaToNSString(env, fontpath);\n-\/\/     jstring javaFontName = NULL;\n-\/\/\n-\/\/     \/\/\n-\/\/     \/\/ Note: This API uses ATS and can therefore return Carbon error codes.\n-\/\/     \/\/ These codes can be found at:\n-\/\/     \/\/ http:\/\/developer.apple.com\/techpubs\/macosx\/Carbon\/Files\/FileManager\/File_Manager\/ResultCodes\/ResultCodes.html\n-\/\/     \/\/\n-\/\/\n-\/\/     FSRef iFile;\n-\/\/     OSStatus status = CreateFSRef(&iFile, nsFilePath);\n-\/\/\n-\/\/     if (status == noErr) {\n-\/\/         ATSFontContainerRef oContainer;\n-\/\/         status = ATSFontActivateFromFileReference(&iFile, kATSFontContextLocal,\n-\/\/                                                   kATSFontFormatUnspecified,\n-\/\/                                                   NULL,\n-\/\/                                                   kATSOptionFlagsUseDataFork,\n-\/\/                                                   &oContainer);\n-\/\/         if (status == noErr) {\n-\/\/             ATSFontRef ioArray[1];\n-\/\/             ItemCount oCount;\n-\/\/             status = ATSFontFindFromContainer(oContainer,\n-\/\/                                               kATSOptionFlagsUseDataFork,\n-\/\/                                               1, ioArray, &oCount);\n-\/\/\n-\/\/             if (status == noErr) {\n-\/\/                 CFStringRef oName;\n-\/\/                 status = ATSFontGetPostScriptName(ioArray[0],\n-\/\/                                                   kATSOptionFlagsUseDataFork,\n-\/\/                                                   &oName);\n-\/\/                 if (status == noErr) {\n-\/\/                     javaFontName = JNFNSToJavaString(env, (NSString *)oName);\n-\/\/                     CFRelease(oName);\n-\/\/                 }\n-\/\/             }\n-\/\/         }\n-\/\/     }\n-\/\/\n-\/\/     if (javaFontName != NULL) {\n-\/\/         \/\/ create the CFont!\n-\/\/         static JNF_CLASS_CACHE(sjc_CFont, \"sun\/font\/CFont\");\n-\/\/         static JNF_CTOR_CACHE(sjf_CFont_ctor,\n-\/\/                               sjc_CFont, \"(Ljava\/lang\/String;)V\");\n-\/\/         result = JNFNewObject(env, sjf_CFont_ctor, javaFontName);\n-\/\/     }\n-\/\/\n-\/\/ JNF_COCOA_EXIT(env);\n-\/\/\n-\/\/     return result;\n-\/\/ }\n-\n@@ -362,5 +300,2 @@\n-    static JNF_CLASS_CACHE(jc_CFontManager,\n-                           \"sun\/font\/CFontManager\");\n-    static JNF_MEMBER_CACHE(jm_registerFont, jc_CFontManager,\n-                            \"registerFont\",\n-                            \"(Ljava\/lang\/String;Ljava\/lang\/String;)V\");\n+    DECLARE_CLASS(jc_CFontManager, \"sun\/font\/CFontManager\");\n+    DECLARE_METHOD(jm_registerFont, jc_CFontManager, \"registerFont\", \"(Ljava\/lang\/String;Ljava\/lang\/String;)V\");\n@@ -382,2 +317,2 @@\n-        JNFCallVoidMethod(env, jthis,\n-                          jm_registerFont, jFontName, jFontFamilyName);\n+        (*env)->CallVoidMethod(env, jthis, jm_registerFont, jFontName, jFontFamilyName);\n+        CHECK_EXCEPTION();\n@@ -640,0 +575,3 @@\n+        if ((*env)->ExceptionOccurred(env)) {\n+            return;\n+        }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTFont.m","additions":22,"deletions":84,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#import \"JNIUtilities.h\"\n@@ -199,3 +200,5 @@\n-    static JNF_CLASS_CACHE(sjc_Rectangle2D_Float, \"java\/awt\/geom\/Rectangle2D$Float\");    \/\/ cache class id for Rectangle\n-    static JNF_MEMBER_CACHE(sjr_Rectangle2DFloat_setRect, sjc_Rectangle2D_Float, \"setRect\", \"(FFFF)V\");\n-    JNFCallVoidMethod(env, result, sjr_Rectangle2DFloat_setRect, (jfloat)bbox.origin.x, (jfloat)bbox.origin.y, (jfloat)bbox.size.width, (jfloat)bbox.size.height);\n+    DECLARE_CLASS(sjc_Rectangle2D_Float, \"java\/awt\/geom\/Rectangle2D$Float\");    \/\/ cache class id for Rectangle\n+    DECLARE_METHOD(sjr_Rectangle2DFloat_setRect, sjc_Rectangle2D_Float, \"setRect\", \"(FFFF)V\");\n+    (*env)->CallVoidMethod(env, result, sjr_Rectangle2DFloat_setRect,\n+             (jfloat)bbox.origin.x, (jfloat)bbox.origin.y, (jfloat)bbox.size.width, (jfloat)bbox.size.height);\n+    CHECK_EXCEPTION();\n@@ -224,0 +227,3 @@\n+    DECLARE_CLASS_RETURN(jc_GeneralPath, \"java\/awt\/geom\/GeneralPath\", NULL);\n+    DECLARE_METHOD_RETURN(jc_GeneralPath_ctor, jc_GeneralPath, \"<init>\", \"(I[BI[FI)V\", NULL);\n+\n@@ -266,3 +272,2 @@\n-    static JNF_CLASS_CACHE(jc_GeneralPath, \"java\/awt\/geom\/GeneralPath\");\n-    static JNF_CTOR_CACHE(jc_GeneralPath_ctor, jc_GeneralPath, \"(I[BI[FI)V\");\n-    generalPath = JNFNewObject(env, jc_GeneralPath_ctor, java_awt_geom_PathIterator_WIND_NON_ZERO, pointTypes, path->fNumberOfSegments, pointCoords, path->fNumberOfDataElements); \/\/ AWT_THREADING Safe (known object)\n+    generalPath = (*env)->NewObject(env, jc_GeneralPath, jc_GeneralPath_ctor, java_awt_geom_PathIterator_WIND_NON_ZERO, pointTypes,\n+                    path->fNumberOfSegments, pointCoords, path->fNumberOfDataElements); \/\/ AWT_THREADING Safe (known object)\n@@ -426,3 +431,3 @@\n-    JNF_CLASS_CACHE(sjc_StrikeMetrics, \"sun\/font\/StrikeMetrics\");\n-    JNF_CTOR_CACHE(strikeMetricsCtr, sjc_StrikeMetrics, \"(FFFFFFFFFF)V\");\n-    metrics = JNFNewObject(env, strikeMetricsCtr,\n+    DECLARE_CLASS_RETURN(sjc_StrikeMetrics, \"sun\/font\/StrikeMetrics\", NULL);\n+    DECLARE_METHOD_RETURN(strikeMetricsCtr, sjc_StrikeMetrics, \"<init>\", \"(FFFFFFFFFF)V\", NULL);\n+    metrics = (*env)->NewObject(env, sjc_StrikeMetrics, strikeMetricsCtr,\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTStrike.m","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#import \"JNIUtilities.h\"\n@@ -132,2 +133,2 @@\n-    static JNF_CLASS_CACHE(jc_JavaLayer, \"sun\/java2d\/opengl\/CGLLayer\");\n-    static JNF_MEMBER_CACHE(jm_drawInCGLContext, jc_JavaLayer, \"drawInCGLContext\", \"()V\");\n+    DECLARE_CLASS(jc_JavaLayer, \"sun\/java2d\/opengl\/CGLLayer\");\n+    DECLARE_METHOD(jm_drawInCGLContext, jc_JavaLayer, \"drawInCGLContext\", \"()V\");\n@@ -149,1 +150,2 @@\n-    JNFCallVoidMethod(env, javaLayerLocalRef, jm_drawInCGLContext);\n+    (*env)->CallVoidMethod(env, javaLayerLocalRef, jm_drawInCGLContext);\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/opengl\/CGLLayer.m","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef __JNIUTILITIES_H\n+#define __JNIUTILITIES_H\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+\n+\/********        LOGGING SUPPORT    *********\/\n+\n+#define LOG_NULL(dst_var, name) \\\n+   if (dst_var == NULL) { \\\n+       NSLog(@\"Bad JNI lookup %s\\n\", name); \\\n+    }\n+\n+\/********        GET CLASS SUPPORT    *********\/\n+\n+#define GET_CLASS(dst_var, cls) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->FindClass(env, cls); \\\n+         if (dst_var != NULL) dst_var = (*env)->NewGlobalRef(env, dst_var); \\\n+     } \\\n+     LOG_NULL(dst_var, cls); \\\n+     CHECK_NULL(dst_var);\n+\n+#define DECLARE_CLASS(dst_var, cls) \\\n+    static jclass dst_var = NULL; \\\n+    GET_CLASS(dst_var, cls);\n+\n+#define GET_CLASS_RETURN(dst_var, cls, ret) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->FindClass(env, cls); \\\n+         if (dst_var != NULL) dst_var = (*env)->NewGlobalRef(env, dst_var); \\\n+     } \\\n+     LOG_NULL(dst_var, cls); \\\n+     CHECK_NULL_RETURN(dst_var, ret);\n+\n+#define DECLARE_CLASS_RETURN(dst_var, cls, ret) \\\n+    static jclass dst_var = NULL; \\\n+    GET_CLASS_RETURN(dst_var, cls, ret);\n+\n+\n+\/********        GET METHOD SUPPORT    *********\/\n+\n+#define GET_METHOD(dst_var, cls, name, signature) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetMethodID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL(dst_var);\n+\n+#define DECLARE_METHOD(dst_var, cls, name, signature) \\\n+     static jmethodID dst_var = NULL; \\\n+     GET_METHOD(dst_var, cls, name, signature);\n+\n+#define GET_METHOD_RETURN(dst_var, cls, name, signature, ret) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetMethodID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL_RETURN(dst_var, ret);\n+\n+#define DECLARE_METHOD_RETURN(dst_var, cls, name, signature, ret) \\\n+     static jmethodID dst_var = NULL; \\\n+     GET_METHOD_RETURN(dst_var, cls, name, signature, ret);\n+\n+#define GET_STATIC_METHOD(dst_var, cls, name, signature) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetStaticMethodID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL(dst_var);\n+\n+#define DECLARE_STATIC_METHOD(dst_var, cls, name, signature) \\\n+     static jmethodID dst_var = NULL; \\\n+     GET_STATIC_METHOD(dst_var, cls, name, signature);\n+\n+#define GET_STATIC_METHOD_RETURN(dst_var, cls, name, signature, ret) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetStaticMethodID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL_RETURN(dst_var, ret);\n+\n+#define DECLARE_STATIC_METHOD_RETURN(dst_var, cls, name, signature, ret) \\\n+     static jmethodID dst_var = NULL; \\\n+     GET_STATIC_METHOD_RETURN(dst_var, cls, name, signature, ret);\n+\n+\/********        GET FIELD SUPPORT    *********\/\n+\n+\n+#define GET_FIELD(dst_var, cls, name, signature) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetFieldID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL(dst_var);\n+\n+#define DECLARE_FIELD(dst_var, cls, name, signature) \\\n+     static jfieldID dst_var = NULL; \\\n+     GET_FIELD(dst_var, cls, name, signature);\n+\n+#define GET_FIELD_RETURN(dst_var, cls, name, signature, ret) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetFieldID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL_RETURN(dst_var, ret);\n+\n+#define DECLARE_FIELD_RETURN(dst_var, cls, name, signature, ret) \\\n+     static jfieldID dst_var = NULL; \\\n+     GET_FIELD_RETURN(dst_var, cls, name, signature, ret);\n+\n+#define GET_STATIC_FIELD_RETURN(dst_var, cls, name, signature, ret) \\\n+     if (dst_var == NULL) { \\\n+         dst_var = (*env)->GetStaticFieldID(env, cls, name, signature); \\\n+     } \\\n+     LOG_NULL(dst_var, name); \\\n+     CHECK_NULL_RETURN(dst_var, ret);\n+\n+#define DECLARE_STATIC_FIELD_RETURN(dst_var, cls, name, signature, ret) \\\n+     static jfieldID dst_var = NULL; \\\n+     GET_STATIC_FIELD_RETURN(dst_var, cls, name, signature, ret);\n+\n+\/*********       EXCEPTION_HANDLING    *********\/\n+\n+#define CHECK_EXCEPTION() \\\n+    if ((*env)->ExceptionOccurred(env) != NULL) { \\\n+        (*env)->ExceptionClear(env); \\\n+    };\n+\n+#define CHECK_EXCEPTION_NULL_RETURN(x, y) \\\n+    CHECK_EXCEPTION(); \\\n+    if ((x) == NULL) { \\\n+       return y; \\\n+    };\n+\n+#endif \/* __JNIUTILITIES_H *\/\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.h","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+#import \"JNIUtilities.h\"\n@@ -31,2 +32,3 @@\n-    static JNF_CLASS_CACHE(jc_System, \"java\/lang\/System\");\n-    static JNF_STATIC_MEMBER_CACHE(jm_getProperty, jc_System, \"getProperty\", \"(Ljava\/lang\/String;)Ljava\/lang\/String;\");\n+    DECLARE_CLASS_RETURN(jc_System, \"java\/lang\/System\", nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getProperty, jc_System,\n+                                 \"getProperty\", \"(Ljava\/lang\/String;)Ljava\/lang\/String;\", nil);\n@@ -35,1 +37,1 @@\n-    jstring jValue = JNFCallStaticObjectMethod(env, jm_getProperty, jKey);\n+    jstring jValue = (*env)->CallStaticObjectMethod(env, jc_System, jm_getProperty, jKey);\n@@ -37,0 +39,1 @@\n+    CHECK_EXCEPTION_NULL_RETURN(jValue, nil);\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/PropertiesUtilities.m","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#import \"JNIUtilities.h\"\n@@ -40,1 +41,3 @@\n-static JNF_CLASS_CACHE(sjc_ScreenMenu, \"com\/apple\/laf\/ScreenMenu\");\n+static jclass sjc_ScreenMenu = NULL;\n+#define GET_SCREENMENU_CLASS() \\\n+     GET_CLASS(sjc_ScreenMenu, \"com\/apple\/laf\/ScreenMenu\");\n@@ -107,2 +110,4 @@\n-    static JNF_MEMBER_CACHE(jm_ScreenMenu_invokeOpenLater, sjc_ScreenMenu, \"invokeOpenLater\", \"()V\");\n-    JNFCallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_invokeOpenLater); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_SCREENMENU_CLASS();\n+    DECLARE_METHOD(jm_ScreenMenu_invokeOpenLater, sjc_ScreenMenu, \"invokeOpenLater\", \"()V\");\n+    (*env)->CallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_invokeOpenLater); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -125,2 +130,4 @@\n-    static JNF_MEMBER_CACHE(jm_ScreenMenu_invokeMenuClosing, sjc_ScreenMenu, \"invokeMenuClosing\", \"()V\");\n-    JNFCallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_invokeMenuClosing); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_SCREENMENU_CLASS();\n+    DECLARE_METHOD(jm_ScreenMenu_invokeMenuClosing, sjc_ScreenMenu, \"invokeMenuClosing\", \"()V\");\n+    (*env)->CallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_invokeMenuClosing); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n@@ -143,2 +150,3 @@\n-    static JNF_MEMBER_CACHE(jm_ScreenMenu_updateSelectedItem, sjc_ScreenMenu, \"handleItemTargeted\", \"(IIIII)V\");\n-    JNFCallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_updateSelectedItem, menuIndex,\n+    GET_SCREENMENU_CLASS();\n+    DECLARE_METHOD(jm_ScreenMenu_updateSelectedItem, sjc_ScreenMenu, \"handleItemTargeted\", \"(IIIII)V\");\n+    (*env)->CallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_updateSelectedItem, menuIndex,\n@@ -186,2 +194,5 @@\n-    static JNF_MEMBER_CACHE(jm_ScreenMenu_handleMouseEvent, sjc_ScreenMenu, \"handleMouseEvent\", \"(IIIIJ)V\");\n-    JNFCallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_handleMouseEvent, javaKind, javaX, javaY, javaModifiers, javaWhen); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    GET_SCREENMENU_CLASS();\n+    DECLARE_METHOD(jm_ScreenMenu_handleMouseEvent, sjc_ScreenMenu, \"handleMouseEvent\", \"(IIIIJ)V\");\n+    (*env)->CallVoidMethod(env, [self.javaObjectWrapper jObject], jm_ScreenMenu_handleMouseEvent,\n+             javaKind, javaX, javaY, javaModifiers, javaWhen); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/ScreenMenu.m","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"}]}