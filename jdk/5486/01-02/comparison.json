{"files":[{"patch":"@@ -24,2 +24,2 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n@@ -47,1 +47,0 @@\n- * @library \/test\/lib\n@@ -49,1 +48,1 @@\n- * @run driver JarToolModuleDescriptorReproducibilityTest\n+ * @run testng JarToolModuleDescriptorReproducibilityTest\n@@ -68,2 +67,3 @@\n-    public static void main(final String[] args) throws Exception {\n-        \/\/ compile the module classes once\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n@@ -71,4 +71,0 @@\n-        \/\/ jar --create tests\n-        testJarCreate();\n-        \/\/ jar --update tests\n-        testJarUpdate();\n@@ -78,3 +74,3 @@\n-     * Launches a \"jar --create\" process multiple times to create a module-info.class module descriptor\n-     * from the same content and then expects that the modular jar created by each of these processes\n-     * has the exact same bytes.\n+     * Launches a \"jar --create\" command multiple times with a module-info.class. The module-info.class\n+     * is internally updated by the jar tool to add additional data. Expects that each such generated\n+     * jar has the exact same bytes.\n@@ -82,1 +78,2 @@\n-    private static void testJarCreate() throws Exception {\n+    @Test\n+    public void testJarCreate() throws Exception {\n@@ -85,5 +82,2 @@\n-            final Path tmpFile = Files.createTempFile(Path.of(\".\"), \"8258117-jar-create\", \".jar\");\n-            jarFiles.add(tmpFile);\n-            final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n-                    CreateJar.class.getName(),\n-                    tmpFile.toString());\n+            final Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-create\", \".jar\");\n+            jarFiles.add(targetJar);\n@@ -97,1 +91,9 @@\n-            executeJavaProcess(processBuilder);\n+            \/\/ create a modular jar\n+            runJarCommand(\"--create\",\n+                    \"--file=\" + targetJar,\n+                    \"--main-class=\" + MAIN_CLASS,\n+                    \"--module-version=\" + MODULE_VERSION,\n+                    \"--no-manifest\",\n+                    \"-C\", MODULE_CLASSES_DIR.toString(), \".\");\n+            \/\/ verify the module descriptor in the jar\n+            assertExpectedModuleInfo(targetJar, MODULE_VERSION);\n@@ -107,1 +109,2 @@\n-    private static void testJarUpdate() throws Exception {\n+    @Test\n+    public void testJarUpdate() throws Exception {\n@@ -110,5 +113,2 @@\n-            final Path tmpFile = Files.createTempFile(Path.of(\".\"), \"8258117-jar-update\", \".jar\");\n-            jarFiles.add(tmpFile);\n-            final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n-                    UpdateJar.class.getName(),\n-                    tmpFile.toString());\n+            final Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-update\", \".jar\");\n+            jarFiles.add(targetJar);\n@@ -122,1 +122,15 @@\n-            executeJavaProcess(processBuilder);\n+            \/\/ first create the modular jar\n+            runJarCommand(\"--create\",\n+                    \"--file=\" + targetJar,\n+                    \"--module-version=\" + MODULE_VERSION,\n+                    \"--no-manifest\",\n+                    \"-C\", MODULE_CLASSES_DIR.toString(), \".\");\n+            assertExpectedModuleInfo(targetJar, MODULE_VERSION);\n+            \/\/ now update the same modular jar\n+            runJarCommand(\"--update\",\n+                    \"--file=\" + targetJar,\n+                    \"--module-version=\" + UPDATED_MODULE_VERSION,\n+                    \"--no-manifest\",\n+                    \"-C\", MODULE_CLASSES_DIR.toString(), \"module-info.class\");\n+            \/\/ verify the module descriptor in the jar\n+            assertExpectedModuleInfo(targetJar, UPDATED_MODULE_VERSION);\n@@ -170,11 +184,0 @@\n-    \/\/ launches the java process and waits for it to exit. throws an exception if exit value is non-zero\n-    private static void executeJavaProcess(ProcessBuilder pb) throws Exception {\n-        final OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(pb);\n-        try {\n-            outputAnalyzer.shouldHaveExitValue(0);\n-        } finally {\n-            \/\/ print out any stdout\/err that was generated in the launched program\n-            outputAnalyzer.reportDiagnosticSummary();\n-        }\n-    }\n-\n@@ -223,36 +226,0 @@\n-\n-    static class CreateJar {\n-        public static void main(final String[] args) throws Exception {\n-            Path targetJar = Path.of(args[0]);\n-            \/\/ create a modular jar\n-            runJarCommand(\"--create\",\n-                    \"--file=\" + targetJar,\n-                    \"--main-class=\" + MAIN_CLASS,\n-                    \"--module-version=\" + MODULE_VERSION,\n-                    \"--no-manifest\",\n-                    \"-C\", MODULE_CLASSES_DIR.toString(), \".\");\n-            \/\/ verify the module descriptor in the jar\n-            assertExpectedModuleInfo(targetJar, MODULE_VERSION);\n-        }\n-    }\n-\n-    static class UpdateJar {\n-        public static void main(final String[] args) throws Exception {\n-            Path targetJar = Path.of(args[0]);\n-            \/\/ create the modular jar\n-            runJarCommand(\"--create\",\n-                    \"--file=\" + targetJar,\n-                    \"--module-version=\" + MODULE_VERSION,\n-                    \"--no-manifest\",\n-                    \"-C\", MODULE_CLASSES_DIR.toString(), \".\");\n-            assertExpectedModuleInfo(targetJar, MODULE_VERSION);\n-            \/\/ update the same modular jar\n-            runJarCommand(\"--update\",\n-                    \"--file=\" + targetJar,\n-                    \"--module-version=\" + UPDATED_MODULE_VERSION,\n-                    \"--no-manifest\",\n-                    \"-C\", MODULE_CLASSES_DIR.toString(), \"module-info.class\");\n-            \/\/ verify the module descriptor in the jar\n-            assertExpectedModuleInfo(targetJar, UPDATED_MODULE_VERSION);\n-        }\n-    }\n@@ -260,0 +227,1 @@\n+\n","filename":"test\/jdk\/tools\/jar\/modularJar\/JarToolModuleDescriptorReproducibilityTest.java","additions":42,"deletions":74,"binary":false,"changes":116,"status":"modified"}]}