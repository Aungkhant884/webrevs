{"files":[{"patch":"@@ -44,0 +44,4 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+\n@@ -80,1 +84,1 @@\n-        final List<Path> jarFiles = new ArrayList<>();\n+        List<Path> jarFiles = new ArrayList<>();\n@@ -82,1 +86,1 @@\n-            final Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-create\", \".jar\");\n+            Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-create\", \".jar\");\n@@ -111,1 +115,1 @@\n-        final List<Path> jarFiles = new ArrayList<>();\n+        List<Path> jarFiles = new ArrayList<>();\n@@ -113,1 +117,1 @@\n-            final Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-update\", \".jar\");\n+            Path targetJar = Files.createTempFile(Path.of(\".\"), \"8258117-jar-update\", \".jar\");\n@@ -148,1 +152,1 @@\n-            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n@@ -164,3 +168,1 @@\n-            if (exitCode != 0) {\n-                throw new RuntimeException(\"Module compilation failed: \" + sw.toString());\n-            }\n+            assertEquals(exitCode, 0, \"Module compilation failed: \" + sw.toString());\n@@ -173,1 +175,1 @@\n-    private static void runJarCommand(String... jarArgs) throws Exception {\n+    private static void runJarCommand(String... jarArgs) {\n@@ -178,3 +180,1 @@\n-            if (exitCode != 0) {\n-                throw new RuntimeException(\"jar command execution failed: \" + sw.toString());\n-            }\n+            assertEquals(exitCode, 0, \"jar command execution failed: \" + sw.toString());\n@@ -185,2 +185,2 @@\n-    private static void assertAllFileContentsAreSame(final List<Path> files) throws Exception {\n-        final byte[] file1Contents = Files.readAllBytes(files.get(0));\n+    private static void assertAllFileContentsAreSame(List<Path> files) throws Exception {\n+        Path firstFile = files.get(0);\n@@ -188,5 +188,2 @@\n-            final byte[] otherFileContents = Files.readAllBytes(files.get(i));\n-            if (!Arrays.equals(file1Contents, otherFileContents)) {\n-                throw new RuntimeException(\"Content in file \" + files.get(i)\n-                        + \" isn't the same as in file \" + files.get(0));\n-            }\n+            assertEquals(Files.mismatch(firstFile, files.get(i)), -1,\n+                    \"Content in file \" + files.get(i) + \" isn't the same as in file \" + firstFile);\n@@ -208,3 +205,2 @@\n-            if (moduleInfoEntry == null) {\n-                throw new RuntimeException(\"module-info.class is missing from jar \" + jar);\n-            }\n+            assertNotNull(moduleInfoEntry, \"module-info.class is missing from jar \" + jar);\n+\n@@ -212,6 +208,3 @@\n-            if (!md.name().equals(MODULE_NAME)) {\n-                throw new RuntimeException(\"Unexpected module name \" + md.name() + \", expected \" + MODULE_NAME);\n-            }\n-            if (md.rawVersion().isEmpty()) {\n-                throw new RuntimeException(\"Module version missing from descriptor\");\n-            }\n+            assertEquals(md.name(), MODULE_NAME, \"Unexpected module name\");\n+            assertFalse(md.rawVersion().isEmpty(), \"Module version missing from descriptor\");\n+\n@@ -219,3 +212,2 @@\n-            if (!actualVersion.equals(expectedModuleVersion)) {\n-                throw new RuntimeException(\"Unexpected module version \" + actualVersion + \", expected \" + expectedModuleVersion);\n-            }\n+            assertEquals(actualVersion, expectedModuleVersion, \"Unexpected module version\");\n+\n","filename":"test\/jdk\/tools\/jar\/modularJar\/JarToolModuleDescriptorReproducibilityTest.java","additions":23,"deletions":31,"binary":false,"changes":54,"status":"modified"}]}