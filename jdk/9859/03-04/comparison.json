{"files":[{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @bug 6205692\n+ * @summary Verify MacSpi\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.MacSpi;\n+import java.nio.ByteBuffer;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.Key;\n+import java.security.Provider;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class Test6205692 {\n+\n+    public boolean execute() throws Exception {\n+\n+        ByteBuffer byteBuffer = null;\n+\n+        MyMac mm = new MyMac(new MyMacSpi(), null, null);\n+\n+        Utils.runAndCheckException(() -> mm.updateSpi(byteBuffer),\n+                NullPointerException.class);\n+\n+        return true;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Test6205692 test = new Test6205692();\n+\n+        if (test.execute()) {\n+            System.out.println(test.getClass().getName() + \": passed!\");\n+        }\n+    }\n+\n+    private static class MyMacSpi extends MacSpi {\n+\n+        \/*\n+         * This is the important part; the rest is blank mandatory overrides\n+         *\/\n+        public void engineUpdate(ByteBuffer input) {\n+            super.engineUpdate(input);\n+        }\n+\n+        @Override\n+        protected int engineGetMacLength() {\n+            return 0;\n+        }\n+\n+        @Override\n+        protected void engineInit(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {\n+        }\n+\n+        @Override\n+        protected void engineUpdate(byte input) {\n+        }\n+\n+        @Override\n+        protected void engineUpdate(byte[] input, int offset, int len) {\n+        }\n+\n+        @Override\n+        protected byte[] engineDoFinal() {\n+            return new byte[0];\n+        }\n+\n+        @Override\n+        protected void engineReset() {\n+        }\n+    }\n+\n+    private static class MyMac extends Mac {\n+        private MyMacSpi spi;\n+\n+        public MyMac(MyMacSpi macSpi, Provider provider, String algorithm) {\n+            super(macSpi, provider, algorithm);\n+            spi = macSpi;\n+        }\n+\n+        public void updateSpi(ByteBuffer input) {\n+            spi.engineUpdate(input);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/Test6205692.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}