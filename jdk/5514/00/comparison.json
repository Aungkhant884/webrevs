{"files":[{"patch":"@@ -677,1 +677,1 @@\n-  if (VerifyArchivedFields) {\n+  if (VerifyArchivedFields > 0) {\n@@ -685,9 +685,14 @@\n-    if (!FLAG_IS_DEFAULT(VerifyArchivedFields)) {\n-      \/\/ If VerifyArchivedFields has a non-default value (e.g., specified on the command-line), do\n-      \/\/ more expensive checks.\n-      if (is_init_completed()) {\n-        FlagSetting fs1(VerifyBeforeGC, true);\n-        FlagSetting fs2(VerifyDuringGC, true);\n-        FlagSetting fs3(VerifyAfterGC,  true);\n-        Universe::heap()->collect(GCCause::_java_lang_system_gc);\n-      }\n+    if (VerifyArchivedFields > 1 && is_init_completed()) {\n+      \/\/ At this time, the oop->klass() of some archived objects in the heap may not\n+      \/\/ have been loaded into the system dictionary yet. Nevertheless, oop->klass() should\n+      \/\/ have enough information (object size, oop maps, etc) so that a GC can be safely\n+      \/\/ performed.\n+      \/\/\n+      \/\/ -XX:VerifyArchivedFields=2 force a GC to happen in such an early stage\n+      \/\/ to check for GC safety.\n+      log_info(cds, heap)(\"Trigger GC %s initializing static field(s) in %s\",\n+                          which, k->external_name());\n+      FlagSetting fs1(VerifyBeforeGC, true);\n+      FlagSetting fs2(VerifyDuringGC, true);\n+      FlagSetting fs3(VerifyAfterGC,  true);\n+      Universe::heap()->collect(GCCause::_java_lang_system_gc);\n@@ -1710,1 +1715,1 @@\n-  if (!VerifyArchivedFields || !is_loaded()) {\n+  if (VerifyArchivedFields <= 0 || !is_loaded()) {\n@@ -1714,0 +1719,2 @@\n+  log_info(cds, heap)(\"Verify all oops and pointers in loaded heap\");\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -526,2 +526,5 @@\n-  product(bool, VerifyArchivedFields, trueInDebug, DIAGNOSTIC,              \\\n-          \"Verify memory when archived oop fields are loaded from CDS)\")    \\\n+  product(int, VerifyArchivedFields, 0, DIAGNOSTIC,                         \\\n+          \"Verify memory when archived oop fields are loaded from CDS; \"    \\\n+          \"0: No check; \"                                                   \\\n+          \"1: Basic verification with VM_Verify (no side effects); \"        \\\n+          \"2: Detailed verification by forcing a GC (with side effects)\")   \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -412,0 +412,2 @@\n+        CDSTestUtils.addVerifyArchivedFields(cmd);\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestCommon.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary run with -XX:VerifyArchivedFields=2 for more expensive verification\n+ *          of the archived heap objects.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar Hello.jar Hello\n+ * @run driver VerifyArchivedFields\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class VerifyArchivedFields {\n+    \/\/ Note: -XX:VerifyArchivedFields=2 will force a GC every time when\n+    \/\/ HeapShared::initialize_from_archived_subgraph(Klass* k, ...) is called. This ensures\n+    \/\/ that it's safe to do a GC even when the oop->klass() of some archived heap objects\n+    \/\/ are not yet loaded into the system dictionary.\n+    public static void main(String[] args) throws Exception {\n+        TestCommon.test(ClassFileInstaller.getJarPath(\"Hello.jar\"),\n+                        TestCommon.list(\"Hello\"),\n+                        \"-XX:+UnlockDiagnosticVMOptions\",\n+                        \"-XX:VerifyArchivedFields=2\",\n+                        \"-Xlog:cds=debug\",\n+                        \"-Xlog:cds+heap=debug\",\n+                        \"-Xlog:gc*=debug\",\n+                        \"Hello\");\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/VerifyArchivedFields.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -402,0 +402,6 @@\n+    \/\/ Enable basic verification (VerifyArchivedFields=1, no side effects) for all CDS\n+    \/\/ tests to make sure the archived heap objects are mapped\/loaded properly.\n+    public static void addVerifyArchivedFields(ArrayList<String> cmd) {\n+        cmd.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        cmd.add(\"-XX:VerifyArchivedFields=1\");\n+    }\n@@ -416,0 +422,1 @@\n+        addVerifyArchivedFields(cmd);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}