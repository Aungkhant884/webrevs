{"files":[{"patch":"@@ -1,206 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.net.ssl.*;\n-import java.io.IOException;\n-import java.net.Socket;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Path;\n-import java.security.Security;\n-import java.util.List;\n-\n-\/*\n- * @test id=Server\n- * @bug 8301379\n- * @summary Verify that Java will not negotiate disabled cipher suites when the\n- * other side of the connection requests them.\n- *\n- * @library \/javax\/net\/ssl\/templates\n- * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server true\n- *\/\n-\n-\/*\n- * @test id=Client\n- * @bug 8301379\n- * @summary Verify that Java will not negotiate disabled cipher suites when the\n- * other side of the connection requests them.\n- *\n- * @library \/javax\/net\/ssl\/templates\n- * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server false\n- *\/\n-\n-\n-public class TLSWontNegotiateDisabledCipherAlgos {\n-    private static final String [] DISABLED_CIPHERS = {\n-            \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n-            \"SSL_RSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n-            \"SSL_RSA_WITH_RC4_128_MD5\",\n-            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-            \"SSL_RSA_WITH_NULL_MD5\",\n-            \"SSL_RSA_WITH_NULL_SHA\",\n-            \"TLS_RSA_WITH_NULL_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n-            \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n-            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-            \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n-            \"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n-            \"SSL_DH_anon_WITH_DES_CBC_SHA\",\n-            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n-            \"SSL_RSA_WITH_DES_CBC_SHA\",\n-            \"SSL_DHE_RSA_WITH_DES_CBC_SHA\",\n-            \"SSL_DHE_DSS_WITH_DES_CBC_SHA\",\n-            \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\",\n-            \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"SSL_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\"\n-    };\n-\n-    public static void main(String [] args) throws Exception {\n-        boolean useDisabledAlgo = Boolean.parseBoolean(args[1]);\n-        if (useDisabledAlgo) {\n-            Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n-        }\n-\n-        if (args[0].equals(\"server\")) {\n-            try (TLSServer server = new TLSServer(useDisabledAlgo)) {\n-                List<String> command = List.of(\n-                        Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n-                        \"TLSWontNegotiateDisabledCipherAlgos\",\n-                        \"client\",\n-                        Boolean.toString(!useDisabledAlgo),\n-                        Integer.toString(server.getListeningPort())\n-                );\n-                ProcessBuilder builder = new ProcessBuilder(command);\n-                Process p = builder.inheritIO().start();\n-                server.run();\n-                p.destroy();\n-            }\n-        } else if (args[0].equals(\"client\")) {\n-            try (TLSClient client = new TLSClient(Integer.parseInt(args[2]), useDisabledAlgo)) {\n-                client.run();\n-            }\n-        }\n-    }\n-\n-    private static class TLSClient extends SSLContextTemplate implements AutoCloseable {\n-        private final SSLSocket socket;\n-\n-        public TLSClient(int portNumber, boolean useDisableAlgo) throws Exception {\n-            SSLContext context = createClientSSLContext();\n-            socket = (SSLSocket)context.getSocketFactory().createSocket(\"localhost\", portNumber);\n-            if (useDisableAlgo) {\n-                socket.setEnabledCipherSuites(DISABLED_CIPHERS);\n-            }\n-        }\n-\n-        public void run() throws IOException {\n-            try {\n-                socket.getOutputStream().write(\"SECRET MESSAGE\".getBytes(StandardCharsets.UTF_8));\n-                throw new RuntimeException(\"SSL handshake completed successfully.\");\n-            } catch (SSLHandshakeException exc) {\n-                if (!exc.getMessage().equals(\"Received fatal alert: handshake_failure\")) {\n-                    throw new RuntimeException(\"Expected handshake_failure message. Got: \"\n-                            + \"\\\"\" + exc.getMessage() + \"\\\" message.\", exc);\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void close() throws Exception {\n-            socket.close();\n-        }\n-    }\n-\n-    private static class TLSServer extends SSLContextTemplate implements AutoCloseable {\n-        private SSLServerSocket serverSocket;\n-\n-        public TLSServer(boolean useDisableAlgo) throws Exception {\n-            SSLContext ctx = createServerSSLContext();\n-            serverSocket = (SSLServerSocket) ctx.getServerSocketFactory().createServerSocket(0);\n-            if (useDisableAlgo) {\n-                serverSocket.setEnabledCipherSuites(DISABLED_CIPHERS);\n-            }\n-        }\n-\n-        @Override\n-        public void close() throws Exception {\n-            serverSocket.close();\n-        }\n-\n-        public int getListeningPort() {\n-            return serverSocket.getLocalPort();\n-        }\n-\n-        public void run() throws IOException {\n-            try (Socket clientSocket = serverSocket.accept()) {\n-                try {\n-                    byte[] bytes = clientSocket.getInputStream().readAllBytes();\n-                    throw new RuntimeException(\"The expected SSLHandshakeException was not thrown.\");\n-                } catch (SSLHandshakeException exc) {\n-                    if (!exc.getMessage().contains(\"no cipher suites in common\")) {\n-                        throw exc;\n-                    } else {\n-                        System.out.println(\"Success: The connection could not be negotiated (as expected.)\");\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/net\/ssl\/TLS\/TLSWontNegotiateDisabledCipherAlgos.java","additions":0,"deletions":206,"binary":false,"changes":206,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -38,1 +39,0 @@\n-import java.security.NoSuchAlgorithmException;\n@@ -50,12 +50,7 @@\n-    private static final String pathToStores = \"..\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n-    private static final String passwd = \"passphrase\";\n-\n-    private static final String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-\n-    private static final String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    public static final SSLContextTemplate.Cert[] CERTIFICATES = {\n+            SSLContextTemplate.Cert.EE_DSA_SHA1_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA224_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA256_1024,\n+            SSLContextTemplate.Cert.CA_ECDSA_SECP256R1,\n+            SSLContextTemplate.Cert.CA_RSA_2048\n+    };\n@@ -64,60 +59,60 @@\n-    private static final String[] disabled_ciphersuites\n-        = new String[] {\n-        \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n-        \"SSL_RSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n-        \"SSL_RSA_WITH_RC4_128_MD5\",\n-        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-        \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-        \"SSL_RSA_WITH_NULL_MD5\",\n-        \"SSL_RSA_WITH_NULL_SHA\",\n-        \"TLS_RSA_WITH_NULL_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n-        \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n-        \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n-        \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n-        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-        \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n-        \"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n-        \"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n-        \"SSL_DH_anon_WITH_DES_CBC_SHA\",\n-        \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-        \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n-        \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n-        \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n-        \"SSL_RSA_WITH_DES_CBC_SHA\",\n-        \"SSL_DHE_RSA_WITH_DES_CBC_SHA\",\n-        \"SSL_DHE_DSS_WITH_DES_CBC_SHA\",\n-        \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-        \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-        \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n-        \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\",\n-        \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-        \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"SSL_RSA_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\"\n+    public static final String[] DISABLED_CIPHERSUITES\n+            = new String[]{\n+            \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n+            \"SSL_RSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n+            \"SSL_RSA_WITH_RC4_128_MD5\",\n+            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n+            \"SSL_RSA_WITH_NULL_MD5\",\n+            \"SSL_RSA_WITH_NULL_SHA\",\n+            \"TLS_RSA_WITH_NULL_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n+            \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n+            \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n+            \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n+            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+            \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n+            \"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n+            \"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n+            \"SSL_DH_anon_WITH_DES_CBC_SHA\",\n+            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n+            \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n+            \"SSL_RSA_WITH_DES_CBC_SHA\",\n+            \"SSL_DHE_RSA_WITH_DES_CBC_SHA\",\n+            \"SSL_DHE_DSS_WITH_DES_CBC_SHA\",\n+            \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+            \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+            \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+            \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\",\n+            \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+            \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"SSL_RSA_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\"\n@@ -131,5 +126,0 @@\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n@@ -143,1 +133,1 @@\n-                checkFailure(disabled_ciphersuites);\n+                checkFailure(DISABLED_CIPHERSUITES);\n@@ -155,1 +145,1 @@\n-                    + Security.getProperty(\"jdk.certpath.disabledAlgorithms\"));\n+                        + Security.getProperty(\"jdk.certpath.disabledAlgorithms\"));\n@@ -159,1 +149,1 @@\n-                checkSuccess(disabled_ciphersuites);\n+                checkSuccess(DISABLED_CIPHERSUITES);\n@@ -172,1 +162,1 @@\n-        try (SSLServer server = SSLServer.init(ciphersuites)) {\n+        try (SSLServer server = new SSLServer(ciphersuites)) {\n@@ -180,1 +170,1 @@\n-                try (SSLClient client = SSLClient.init(port, ciphersuite)) {\n+                try (SSLClient client = new SSLClient(port, ciphersuite)) {\n@@ -207,1 +197,1 @@\n-        try (SSLServer server = SSLServer.init(ciphersuites)) {\n+        try (SSLServer server = new SSLServer(ciphersuites)) {\n@@ -215,1 +205,1 @@\n-                try (SSLClient client = SSLClient.init(port, ciphersuite)) {\n+                try (SSLClient client = new SSLClient(port, ciphersuite)) {\n@@ -254,1 +244,2 @@\n-    static class SSLServer implements Runnable, AutoCloseable {\n+    static class SSLServer extends SSLContextTemplate implements Runnable, AutoCloseable {\n+\n@@ -262,1 +253,13 @@\n-        private SSLServer(SSLServerSocket ssocket) {\n+        private SSLServer(String[] ciphersuites) throws Exception {\n+            SSLContext context = createSSLContext(null,\n+                    DisabledAlgorithms.CERTIFICATES, getServerContextParameters());\n+            SSLServerSocketFactory ssf = context.getServerSocketFactory();\n+            SSLServerSocket ssocket = (SSLServerSocket)\n+                    ssf.createServerSocket(0);\n+\n+            if (ciphersuites != null) {\n+                System.out.println(\"Server: enable cipher suites: \"\n+                        + java.util.Arrays.toString(ciphersuites));\n+                ssocket.setEnabledCipherSuites(ciphersuites);\n+            }\n+\n@@ -296,2 +299,2 @@\n-                                    + \"because socket was closed, \"\n-                                    + \"please ignore it\");\n+                                + \"because socket was closed, \"\n+                                + \"please ignore it\");\n@@ -342,16 +345,0 @@\n-\n-        static SSLServer init(String[] ciphersuites)\n-                throws IOException {\n-            SSLServerSocketFactory ssf = (SSLServerSocketFactory)\n-                    SSLServerSocketFactory.getDefault();\n-            SSLServerSocket ssocket = (SSLServerSocket)\n-                    ssf.createServerSocket(0);\n-\n-            if (ciphersuites != null) {\n-                System.out.println(\"Server: enable cipher suites: \"\n-                        + java.util.Arrays.toString(ciphersuites));\n-                ssocket.setEnabledCipherSuites(ciphersuites);\n-            }\n-\n-            return new SSLServer(ssocket);\n-        }\n@@ -360,1 +347,1 @@\n-    static class SSLClient implements AutoCloseable {\n+    static class SSLClient extends SSLContextTemplate implements AutoCloseable {\n@@ -364,1 +351,11 @@\n-        private SSLClient(SSLSocket socket) {\n+        private SSLClient(int port, String ciphersuite) throws Exception {\n+            SSLContext context = createSSLContext(DisabledAlgorithms.CERTIFICATES,\n+                    null, getClientContextParameters());\n+            SSLSocketFactory ssf = context.getSocketFactory();\n+            SSLSocket socket = (SSLSocket) ssf.createSocket(\"localhost\", port);\n+\n+            if (ciphersuite != null) {\n+                System.out.println(\"Client: enable cipher suite: \"\n+                        + ciphersuite);\n+                socket.setEnabledCipherSuites(new String[]{ciphersuite});\n+            }\n@@ -404,22 +401,0 @@\n-\n-        static SSLClient init(int port)\n-                throws NoSuchAlgorithmException, IOException {\n-            return init(port, null);\n-        }\n-\n-        static SSLClient init(int port, String ciphersuite)\n-                throws NoSuchAlgorithmException, IOException {\n-            SSLContext context = SSLContext.getDefault();\n-            SSLSocketFactory ssf = (SSLSocketFactory)\n-                    context.getSocketFactory();\n-            SSLSocket socket = (SSLSocket) ssf.createSocket(\"localhost\", port);\n-\n-            if (ciphersuite != null) {\n-                System.out.println(\"Client: enable cipher suite: \"\n-                        + ciphersuite);\n-                socket.setEnabledCipherSuites(new String[] { ciphersuite });\n-            }\n-\n-            return new SSLClient(socket);\n-        }\n-\n@@ -427,2 +402,0 @@\n-\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/ciphersuites\/DisabledAlgorithms.java","additions":105,"deletions":132,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.security.Security;\n+import java.util.List;\n+\n+\/*\n+ * @test id=Server\n+ * @bug 8301379\n+ * @summary Verify that Java will not negotiate disabled cipher suites when the\n+ * other side of the connection requests them.\n+ *\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server true\n+ *\/\n+\n+\/*\n+ * @test id=Client\n+ * @bug 8301379\n+ * @summary Verify that Java will not negotiate disabled cipher suites when the\n+ * other side of the connection requests them.\n+ *\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server false\n+ *\/\n+\n+\n+public class TLSWontNegotiateDisabledCipherAlgos {\n+\n+    public static void main(String [] args) throws Exception {\n+        boolean useDisabledAlgo = Boolean.parseBoolean(args[1]);\n+        if (useDisabledAlgo) {\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+        }\n+\n+        if (args[0].equals(\"server\")) {\n+            try (TLSServer server = new TLSServer(useDisabledAlgo)) {\n+                List<String> command = List.of(\n+                        Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+                        \"TLSWontNegotiateDisabledCipherAlgos\",\n+                        \"client\",\n+                        Boolean.toString(!useDisabledAlgo),\n+                        Integer.toString(server.getListeningPort())\n+                );\n+                ProcessBuilder builder = new ProcessBuilder(command);\n+                Process p = builder.inheritIO().start();\n+                server.run();\n+                p.destroy();\n+            }\n+        } else if (args[0].equals(\"client\")) {\n+            try (TLSClient client = new TLSClient(Integer.parseInt(args[2]), useDisabledAlgo)) {\n+                client.run();\n+            }\n+        }\n+    }\n+\n+    private static class TLSClient extends SSLContextTemplate implements AutoCloseable {\n+        private final SSLSocket socket;\n+\n+        public TLSClient(int portNumber, boolean useDisableAlgo) throws Exception {\n+            SSLContext context = createClientSSLContext();\n+            socket = (SSLSocket)context.getSocketFactory().createSocket(\"localhost\", portNumber);\n+            if (useDisableAlgo) {\n+                socket.setEnabledCipherSuites(DisabledAlgorithms.DISABLED_CIPHERSUITES);\n+            }\n+        }\n+\n+        public void run() throws IOException {\n+            try {\n+                socket.getOutputStream().write(\"SECRET MESSAGE\".getBytes(StandardCharsets.UTF_8));\n+                throw new RuntimeException(\"SSL handshake completed successfully.\");\n+            } catch (SSLHandshakeException exc) {\n+                if (!exc.getMessage().equals(\"Received fatal alert: handshake_failure\")) {\n+                    throw new RuntimeException(\"Expected handshake_failure message. Got: \"\n+                            + \"\\\"\" + exc.getMessage() + \"\\\" message.\", exc);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            socket.close();\n+        }\n+    }\n+\n+    private static class TLSServer extends SSLContextTemplate implements AutoCloseable {\n+        private SSLServerSocket serverSocket;\n+\n+        public TLSServer(boolean useDisableAlgo) throws Exception {\n+            SSLContext ctx = createServerSSLContext();\n+            serverSocket = (SSLServerSocket) ctx.getServerSocketFactory().createServerSocket(0);\n+            if (useDisableAlgo) {\n+                serverSocket.setEnabledCipherSuites(DisabledAlgorithms.DISABLED_CIPHERSUITES);\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            serverSocket.close();\n+        }\n+\n+        public int getListeningPort() {\n+            return serverSocket.getLocalPort();\n+        }\n+\n+        public void run() throws IOException {\n+            try (Socket clientSocket = serverSocket.accept()) {\n+                try {\n+                    byte[] bytes = clientSocket.getInputStream().readAllBytes();\n+                    throw new RuntimeException(\"The expected SSLHandshakeException was not thrown.\");\n+                } catch (SSLHandshakeException exc) {\n+                    if (!exc.getMessage().contains(\"no cipher suites in common\")) {\n+                        throw exc;\n+                    } else {\n+                        System.out.println(\"Success: The connection could not be negotiated (as expected.)\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/ciphersuites\/TLSWontNegotiateDisabledCipherAlgos.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}