{"files":[{"patch":"@@ -38,0 +38,2 @@\n+REAL_HSDIS_NAME := hsdis-$(OPENJDK_TARGET_CPU_LEGACY_LIB)$(SHARED_LIBRARY_SUFFIX)\n+BUILT_HSDIS_LIB := $(HSDIS_OUTPUT_DIR)\/$(REAL_HSDIS_NAME)\n@@ -43,8 +45,0 @@\n-ifeq ($(call isTargetOs, windows), true)\n-  INSTALLED_HSDIS_DIR := $(JDK_OUTPUTDIR)\/bin\n-  IMAGE_HSDIS_DIR := $(JDK_IMAGE_DIR)\/bin\n-else\n-  INSTALLED_HSDIS_DIR := $(JDK_OUTPUTDIR)\/lib\n-  IMAGE_HSDIS_DIR := $(JDK_IMAGE_DIR)\/lib\n-endif\n-\n@@ -165,1 +159,4 @@\n-build: $(BUILD_HSDIS)\n+$(BUILT_HSDIS_LIB): $(BUILD_HSDIS_TARGET)\n+\t$(install-file)\n+\n+build: $(BUILD_HSDIS) $(BUILT_HSDIS_LIB)\n@@ -169,1 +166,1 @@\n-INSTALLED_HSDIS_NAME := hsdis-$(OPENJDK_TARGET_CPU_LEGACY_LIB)$(SHARED_LIBRARY_SUFFIX)\n+ifeq ($(ENABLE_HSDIS_BUNDLING), false)\n@@ -171,2 +168,7 @@\n-INSTALLED_HSDIS := $(INSTALLED_HSDIS_DIR)\/$(INSTALLED_HSDIS_NAME)\n-INSTALLED_HSDIS_IMAGE := $(IMAGE_HSDIS_DIR)\/$(INSTALLED_HSDIS_NAME)\n+  ifeq ($(call isTargetOs, windows), true)\n+    JDK_HSDIS_DIR := $(JDK_OUTPUTDIR)\/bin\n+    IMAGE_HSDIS_DIR := $(JDK_IMAGE_DIR)\/bin\n+  else\n+    JDK_HSDIS_DIR := $(JDK_OUTPUTDIR)\/lib\n+    IMAGE_HSDIS_DIR := $(JDK_IMAGE_DIR)\/lib\n+  endif\n@@ -174,4 +176,8 @@\n-$(INSTALLED_HSDIS): $(BUILD_HSDIS_TARGET)\n-        ifeq ($(HSDIS_BACKEND), binutils)\n-\t  $(call LogWarn, NOTE: The resulting build might not be redistributable. Seek legal advice before distributing.)\n-        endif\n+\n+  INSTALLED_HSDIS_JDK := $(JDK_HSDIS_DIR)\/$(REAL_HSDIS_NAME)\n+  INSTALLED_HSDIS_IMAGE := $(IMAGE_HSDIS_DIR)\/$(REAL_HSDIS_NAME)\n+\n+  $(INSTALLED_HSDIS_JDK): $(BUILT_HSDIS_LIB)\n+          ifeq ($(HSDIS_BACKEND), binutils)\n+\t    $(call LogWarn, NOTE: The resulting build might not be redistributable. Seek legal advice before distributing.)\n+          endif\n@@ -180,1 +186,1 @@\n-$(INSTALLED_HSDIS_IMAGE): $(INSTALLED_HSDIS)\n+  $(INSTALLED_HSDIS_IMAGE): $(BUILT_HSDIS_LIB)\n@@ -183,1 +189,8 @@\n-install: $(INSTALLED_HSDIS_IMAGE)\n+  install: $(INSTALLED_HSDIS_JDK) $(INSTALLED_HSDIS_IMAGE)\n+\n+else\n+\n+  install:\n+\t$(ECHO) NOTE: make install-hsdis is a no-op with --enable-hsdis-bundling\n+\n+endif\n","filename":"make\/Hsdis.gmk","additions":31,"deletions":18,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -864,0 +864,4 @@\n+  ifeq ($(ENABLE_HSDIS_BUNDLING), true)\n+    java.base-copy: build-hsdis\n+  endif\n+\n","filename":"make\/Main.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,0 @@\n-JDKOPT_SETUP_HSDIS\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -730,266 +730,0 @@\n-\n-################################################################################\n-#\n-# Helper function to build binutils from source.\n-#\n-AC_DEFUN([JDKOPT_BUILD_BINUTILS],\n-[\n-  BINUTILS_SRC=\"$with_binutils_src\"\n-  UTIL_FIXUP_PATH(BINUTILS_SRC)\n-\n-  if ! test -d $BINUTILS_SRC; then\n-    AC_MSG_ERROR([--with-binutils-src is not pointing to a directory])\n-  fi\n-  if ! test -x $BINUTILS_SRC\/configure; then\n-    AC_MSG_ERROR([--with-binutils-src does not look like a binutils source directory])\n-  fi\n-\n-  if test -e $BINUTILS_SRC\/bfd\/libbfd.a && \\\n-      test -e $BINUTILS_SRC\/opcodes\/libopcodes.a && \\\n-      test -e $BINUTILS_SRC\/libiberty\/libiberty.a && \\\n-      test -e $BINUTILS_SRC\/zlib\/libz.a; then\n-    AC_MSG_NOTICE([Found binutils binaries in binutils source directory -- not building])\n-  else\n-    # On Windows, we cannot build with the normal Microsoft CL, but must instead use\n-    # a separate mingw toolchain.\n-    if test \"x$OPENJDK_BUILD_OS\" = xwindows; then\n-      if test \"x$OPENJDK_TARGET_CPU\" = \"xx86\"; then\n-        target_base=\"i686-w64-mingw32\"\n-      else\n-        target_base=\"$OPENJDK_TARGET_CPU-w64-mingw32\"\n-      fi\n-      binutils_cc=\"$target_base-gcc\"\n-      binutils_target=\"--host=$target_base --target=$target_base\"\n-      # Somehow the uint typedef is not included when building with mingw\n-      binutils_cflags=\"-Duint=unsigned\"\n-      compiler_version=`$binutils_cc --version 2>&1`\n-      if ! [ [[ \"$compiler_version\" =~ GCC ]] ]; then\n-        AC_MSG_NOTICE([Could not find correct mingw compiler $binutils_cc.])\n-        HELP_MSG_MISSING_DEPENDENCY([$binutils_cc])\n-        AC_MSG_ERROR([Cannot continue. $HELP_MSG])\n-      else\n-        AC_MSG_NOTICE([Using compiler $binutils_cc with version $compiler_version])\n-      fi\n-    elif test \"x$OPENJDK_BUILD_OS\" = xmacosx; then\n-      if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n-        binutils_target=\"--enable-targets=aarch64-darwin\"\n-      else\n-        binutils_target=\"\"\n-      fi\n-    else\n-      binutils_cc=\"$CC $SYSROOT_CFLAGS\"\n-      binutils_target=\"\"\n-    fi\n-    binutils_cflags=\"$binutils_cflags $MACHINE_FLAG $JVM_PICFLAG $C_O_FLAG_NORM\"\n-\n-    AC_MSG_NOTICE([Running binutils configure])\n-    AC_MSG_NOTICE([configure command line: .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target])\n-    saved_dir=`pwd`\n-    cd \"$BINUTILS_SRC\"\n-    .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target\n-    if test $? -ne 0 || ! test -e $BINUTILS_SRC\/Makefile; then\n-      AC_MSG_NOTICE([Automatic building of binutils failed on configure. Try building it manually])\n-      AC_MSG_ERROR([Cannot continue])\n-    fi\n-    AC_MSG_NOTICE([Running binutils make])\n-    $MAKE all-opcodes\n-    if test $? -ne 0; then\n-      AC_MSG_NOTICE([Automatic building of binutils failed on make. Try building it manually])\n-      AC_MSG_ERROR([Cannot continue])\n-    fi\n-    cd $saved_dir\n-    AC_MSG_NOTICE([Building of binutils done])\n-  fi\n-\n-  BINUTILS_DIR=\"$BINUTILS_SRC\"\n-])\n-\n-################################################################################\n-#\n-# Determine if hsdis should be built, and if so, with which backend.\n-#\n-AC_DEFUN_ONCE([JDKOPT_SETUP_HSDIS],\n-[\n-  AC_ARG_WITH([hsdis], [AS_HELP_STRING([--with-hsdis],\n-      [what hsdis backend to use ('none', 'capstone', 'llvm', 'binutils') @<:@none@:>@])])\n-\n-  AC_ARG_WITH(capstone, [AS_HELP_STRING([--with-capstone],\n-      [where to find the Capstone files needed for hsdis\/capstone])])\n-\n-  AC_ARG_WITH([llvm], [AS_HELP_STRING([--with-llvm],\n-      [where to find the LLVM files needed for hsdis\/llvm])])\n-\n-  AC_ARG_WITH([binutils], [AS_HELP_STRING([--with-binutils],\n-      [where to find the binutils files needed for hsdis\/binutils])])\n-\n-  AC_ARG_WITH([binutils-src], [AS_HELP_STRING([--with-binutils-src],\n-      [where to find the binutils source for building])])\n-\n-  AC_MSG_CHECKING([what hsdis backend to use])\n-\n-  if test \"x$with_hsdis\" = xyes; then\n-    AC_MSG_ERROR([--with-hsdis must have a value])\n-  elif test \"x$with_hsdis\" = xnone || test \"x$with_hsdis\" = xno || test \"x$with_hsdis\" = x; then\n-    HSDIS_BACKEND=none\n-    AC_MSG_RESULT(['none', hsdis will not be built])\n-  elif test \"x$with_hsdis\" = xcapstone; then\n-    HSDIS_BACKEND=capstone\n-    AC_MSG_RESULT(['capstone'])\n-\n-    if test \"x$with_capstone\" != x; then\n-      AC_MSG_CHECKING([for capstone])\n-      CAPSTONE=\"$with_capstone\"\n-      AC_MSG_RESULT([$CAPSTONE])\n-\n-      HSDIS_CFLAGS=\"-I${CAPSTONE}\/include\/capstone\"\n-      if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n-        HSDIS_LDFLAGS=\"-L${CAPSTONE}\/lib\"\n-        HSDIS_LIBS=\"-lcapstone\"\n-      else\n-        HSDIS_LDFLAGS=\"-nodefaultlib:libcmt.lib\"\n-        HSDIS_LIBS=\"${CAPSTONE}\/capstone.lib\"\n-      fi\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # There is no way to auto-detect capstone on Windowos\n-        AC_MSG_NOTICE([You must specify capstone location using --with-capstone=<path>])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-\n-      PKG_CHECK_MODULES(CAPSTONE, capstone, [CAPSTONE_FOUND=yes], [CAPSTONE_FOUND=no])\n-      if test \"x$CAPSTONE_FOUND\" = xyes; then\n-        HSDIS_CFLAGS=\"$CAPSTONE_CFLAGS\"\n-        HSDIS_LDFLAGS=\"$CAPSTONE_LDFLAGS\"\n-        HSDIS_LIBS=\"$CAPSTONE_LIBS\"\n-      else\n-        HELP_MSG_MISSING_DEPENDENCY([capstone])\n-        AC_MSG_NOTICE([Cannot locate capstone which is needed for hsdis\/capstone. Try using --with-capstone=<path>. $HELP_MSG])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-    fi\n-  elif test \"x$with_hsdis\" = xllvm; then\n-    HSDIS_BACKEND=llvm\n-    AC_MSG_RESULT(['llvm'])\n-\n-    if test \"x$with_llvm\" != x; then\n-      LLVM_DIR=\"$with_llvm\"\n-    fi\n-\n-    if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n-      if test \"x$LLVM_DIR\" = x; then\n-        # Macs with homebrew can have llvm in different places\n-        UTIL_LOOKUP_PROGS(LLVM_CONFIG, llvm-config, [$PATH:\/usr\/local\/opt\/llvm\/bin:\/opt\/homebrew\/opt\/llvm\/bin])\n-        if test \"x$LLVM_CONFIG\" = x; then\n-          AC_MSG_NOTICE([Cannot locate llvm-config which is needed for hsdis\/llvm. Try using --with-llvm=<LLVM home>.])\n-          AC_MSG_ERROR([Cannot continue])\n-        fi\n-      else\n-        UTIL_LOOKUP_PROGS(LLVM_CONFIG, llvm-config, [$LLVM_DIR\/bin])\n-        if test \"x$LLVM_CONFIG\" = x; then\n-          AC_MSG_NOTICE([Cannot locate llvm-config in $LLVM_DIR. Check your --with-llvm argument.])\n-          AC_MSG_ERROR([Cannot continue])\n-        fi\n-      fi\n-\n-      # We need the LLVM flags and libs, and llvm-config provides them for us.\n-      HSDIS_CFLAGS=`$LLVM_CONFIG --cflags`\n-      HSDIS_LDFLAGS=`$LLVM_CONFIG --ldflags`\n-      HSDIS_LIBS=`$LLVM_CONFIG --libs $OPENJDK_TARGET_CPU_ARCH ${OPENJDK_TARGET_CPU_ARCH}disassembler`\n-    else\n-      if test \"x$LLVM_DIR\" = x; then\n-        AC_MSG_NOTICE([--with-llvm is needed on Windows to point out the LLVM home])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-\n-      # Official Windows installation of LLVM do not ship llvm-config, and self-built llvm-config\n-      # produced unusable output, so just ignore it on Windows.\n-      if ! test -e $LLVM_DIR\/include\/llvm-c\/lto.h; then\n-        AC_MSG_NOTICE([$LLVM_DIR does not seem like a valid LLVM home; include dir is missing])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-      if ! test -e $LLVM_DIR\/include\/llvm-c\/Disassembler.h; then\n-        AC_MSG_NOTICE([$LLVM_DIR does not point to a complete LLVM installation. ])\n-        AC_MSG_NOTICE([The official LLVM distribution is missing crucical files; you need to build LLVM yourself or get all include files elsewhere])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-      if ! test -e $LLVM_DIR\/lib\/llvm-c.lib; then\n-        AC_MSG_NOTICE([$LLVM_DIR does not seem like a valid LLVM home; lib dir is missing])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-      HSDIS_CFLAGS=\"-I$LLVM_DIR\/include\"\n-      HSDIS_LDFLAGS=\"-libpath:$LLVM_DIR\/lib\"\n-      HSDIS_LIBS=\"llvm-c.lib\"\n-    fi\n-  elif test \"x$with_hsdis\" = xbinutils; then\n-    HSDIS_BACKEND=binutils\n-    AC_MSG_RESULT(['binutils'])\n-\n-    # We need the binutils static libs and includes.\n-    if test \"x$with_binutils_src\" != x; then\n-      # Try building the source first. If it succeeds, it sets $BINUTILS_DIR.\n-      JDKOPT_BUILD_BINUTILS\n-    fi\n-\n-    if test \"x$with_binutils\" != x; then\n-      BINUTILS_DIR=\"$with_binutils\"\n-    fi\n-\n-    binutils_system_error=\"\"\n-    HSDIS_LIBS=\"\"\n-    if test \"x$BINUTILS_DIR\" = xsystem; then\n-      AC_CHECK_LIB(bfd, bfd_openr, [ HSDIS_LIBS=\"-lbfd\" ], [ binutils_system_error=\"libbfd not found\" ])\n-      AC_CHECK_LIB(opcodes, disassembler, [ HSDIS_LIBS=\"$HSDIS_LIBS -lopcodes\" ], [ binutils_system_error=\"libopcodes not found\" ])\n-      AC_CHECK_LIB(iberty, xmalloc, [ HSDIS_LIBS=\"$HSDIS_LIBS -liberty\" ], [ binutils_system_error=\"libiberty not found\" ])\n-      AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -lz\" ], [ binutils_system_error=\"libz not found\" ])\n-      HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n-    elif test \"x$BINUTILS_DIR\" != x; then\n-      if test -e $BINUTILS_DIR\/bfd\/libbfd.a && \\\n-          test -e $BINUTILS_DIR\/opcodes\/libopcodes.a && \\\n-          test -e $BINUTILS_DIR\/libiberty\/libiberty.a; then\n-        HSDIS_CFLAGS=\"-I$BINUTILS_DIR\/include -I$BINUTILS_DIR\/bfd -DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n-        HSDIS_LDFLAGS=\"\"\n-        HSDIS_LIBS=\"$BINUTILS_DIR\/bfd\/libbfd.a $BINUTILS_DIR\/opcodes\/libopcodes.a $BINUTILS_DIR\/libiberty\/libiberty.a $BINUTILS_DIR\/zlib\/libz.a\"\n-      fi\n-    fi\n-\n-    AC_MSG_CHECKING([for binutils to use with hsdis])\n-    case \"x$BINUTILS_DIR\" in\n-      xsystem)\n-        if test \"x$OPENJDK_TARGET_OS\" != xlinux; then\n-          AC_MSG_RESULT([invalid])\n-          AC_MSG_ERROR([binutils on system is supported for Linux only])\n-        elif test \"x$binutils_system_error\" = x; then\n-          AC_MSG_RESULT([system])\n-          HSDIS_CFLAGS=\"$HSDIS_CFLAGS -DSYSTEM_BINUTILS\"\n-        else\n-          AC_MSG_RESULT([invalid])\n-          AC_MSG_ERROR([$binutils_system_error])\n-        fi\n-        ;;\n-      x)\n-        AC_MSG_RESULT([missing])\n-        AC_MSG_NOTICE([--with-hsdis=binutils requires specifying a binutils installation.])\n-        AC_MSG_NOTICE([Download binutils from https:\/\/www.gnu.org\/software\/binutils and unpack it,])\n-        AC_MSG_NOTICE([and point --with-binutils-src to the resulting directory, or use])\n-        AC_MSG_NOTICE([--with-binutils to point to a pre-built binutils installation.])\n-        AC_MSG_ERROR([Cannot continue])\n-        ;;\n-      *)\n-        if test \"x$HSDIS_LIBS\" != x; then\n-          AC_MSG_RESULT([$BINUTILS_DIR])\n-        else\n-          AC_MSG_RESULT([invalid])\n-          AC_MSG_ERROR([$BINUTILS_DIR does not contain a proper binutils installation])\n-        fi\n-        ;;\n-    esac\n-  else\n-    AC_MSG_RESULT([invalid])\n-    AC_MSG_ERROR([Incorrect hsdis backend \"$with_hsdis\"])\n-  fi\n-\n-  AC_SUBST(HSDIS_BACKEND)\n-  AC_SUBST(HSDIS_CFLAGS)\n-  AC_SUBST(HSDIS_LDFLAGS)\n-  AC_SUBST(HSDIS_LIBS)\n-])\n","filename":"make\/autoconf\/jdk-options.m4","additions":0,"deletions":266,"binary":false,"changes":266,"status":"modified"},{"patch":"@@ -0,0 +1,336 @@\n+#\n+# Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+#\n+# Helper function to setup hsdis using Capstone\n+#\n+AC_DEFUN([LIB_SETUP_HSDIS_CAPSTONE],\n+[\n+  AC_ARG_WITH(capstone, [AS_HELP_STRING([--with-capstone],\n+      [where to find the Capstone files needed for hsdis\/capstone])])\n+\n+  if test \"x$with_capstone\" != x; then\n+    AC_MSG_CHECKING([for capstone])\n+    CAPSTONE=\"$with_capstone\"\n+    AC_MSG_RESULT([$CAPSTONE])\n+\n+    HSDIS_CFLAGS=\"-I${CAPSTONE}\/include\/capstone\"\n+    if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+      HSDIS_LDFLAGS=\"-L${CAPSTONE}\/lib\"\n+      HSDIS_LIBS=\"-lcapstone\"\n+    else\n+      HSDIS_LDFLAGS=\"-nodefaultlib:libcmt.lib\"\n+      HSDIS_LIBS=\"${CAPSTONE}\/capstone.lib\"\n+    fi\n+  else\n+    if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      # There is no way to auto-detect capstone on Windowos\n+      AC_MSG_NOTICE([You must specify capstone location using --with-capstone=<path>])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+\n+    PKG_CHECK_MODULES(CAPSTONE, capstone, [CAPSTONE_FOUND=yes], [CAPSTONE_FOUND=no])\n+    if test \"x$CAPSTONE_FOUND\" = xyes; then\n+      HSDIS_CFLAGS=\"$CAPSTONE_CFLAGS\"\n+      HSDIS_LDFLAGS=\"$CAPSTONE_LDFLAGS\"\n+      HSDIS_LIBS=\"$CAPSTONE_LIBS\"\n+    else\n+      HELP_MSG_MISSING_DEPENDENCY([capstone])\n+      AC_MSG_NOTICE([Cannot locate capstone which is needed for hsdis\/capstone. Try using --with-capstone=<path>. $HELP_MSG])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+  fi\n+])\n+\n+################################################################################\n+#\n+# Helper function to setup hsdis using LLVM\n+#\n+AC_DEFUN([LIB_SETUP_HSDIS_LLVM],\n+[\n+  AC_ARG_WITH([llvm], [AS_HELP_STRING([--with-llvm],\n+      [where to find the LLVM files needed for hsdis\/llvm])])\n+\n+  if test \"x$with_llvm\" != x; then\n+    LLVM_DIR=\"$with_llvm\"\n+  fi\n+\n+  if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+    if test \"x$LLVM_DIR\" = x; then\n+      # Macs with homebrew can have llvm in different places\n+      UTIL_LOOKUP_PROGS(LLVM_CONFIG, llvm-config, [$PATH:\/usr\/local\/opt\/llvm\/bin:\/opt\/homebrew\/opt\/llvm\/bin])\n+      if test \"x$LLVM_CONFIG\" = x; then\n+        AC_MSG_NOTICE([Cannot locate llvm-config which is needed for hsdis\/llvm. Try using --with-llvm=<LLVM home>.])\n+        AC_MSG_ERROR([Cannot continue])\n+      fi\n+    else\n+      UTIL_LOOKUP_PROGS(LLVM_CONFIG, llvm-config, [$LLVM_DIR\/bin])\n+      if test \"x$LLVM_CONFIG\" = x; then\n+        AC_MSG_NOTICE([Cannot locate llvm-config in $LLVM_DIR. Check your --with-llvm argument.])\n+        AC_MSG_ERROR([Cannot continue])\n+      fi\n+    fi\n+\n+    # We need the LLVM flags and libs, and llvm-config provides them for us.\n+    HSDIS_CFLAGS=`$LLVM_CONFIG --cflags`\n+    HSDIS_LDFLAGS=`$LLVM_CONFIG --ldflags`\n+    HSDIS_LIBS=`$LLVM_CONFIG --libs $OPENJDK_TARGET_CPU_ARCH ${OPENJDK_TARGET_CPU_ARCH}disassembler`\n+  else\n+    if test \"x$LLVM_DIR\" = x; then\n+      AC_MSG_NOTICE([--with-llvm is needed on Windows to point out the LLVM home])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+\n+    # Official Windows installation of LLVM do not ship llvm-config, and self-built llvm-config\n+    # produced unusable output, so just ignore it on Windows.\n+    if ! test -e $LLVM_DIR\/include\/llvm-c\/lto.h; then\n+      AC_MSG_NOTICE([$LLVM_DIR does not seem like a valid LLVM home; include dir is missing])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    if ! test -e $LLVM_DIR\/include\/llvm-c\/Disassembler.h; then\n+      AC_MSG_NOTICE([$LLVM_DIR does not point to a complete LLVM installation. ])\n+      AC_MSG_NOTICE([The official LLVM distribution is missing crucical files; you need to build LLVM yourself or get all include files elsewhere])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    if ! test -e $LLVM_DIR\/lib\/llvm-c.lib; then\n+      AC_MSG_NOTICE([$LLVM_DIR does not seem like a valid LLVM home; lib dir is missing])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    HSDIS_CFLAGS=\"-I$LLVM_DIR\/include\"\n+    HSDIS_LDFLAGS=\"-libpath:$LLVM_DIR\/lib\"\n+    HSDIS_LIBS=\"llvm-c.lib\"\n+  fi\n+])\n+\n+################################################################################\n+#\n+# Helper function to build binutils from source.\n+#\n+AC_DEFUN([LIB_BUILD_BINUTILS],\n+[\n+  BINUTILS_SRC=\"$with_binutils_src\"\n+  UTIL_FIXUP_PATH(BINUTILS_SRC)\n+\n+  if ! test -d $BINUTILS_SRC; then\n+    AC_MSG_ERROR([--with-binutils-src is not pointing to a directory])\n+  fi\n+  if ! test -x $BINUTILS_SRC\/configure; then\n+    AC_MSG_ERROR([--with-binutils-src does not look like a binutils source directory])\n+  fi\n+\n+  if test -e $BINUTILS_SRC\/bfd\/libbfd.a && \\\n+      test -e $BINUTILS_SRC\/opcodes\/libopcodes.a && \\\n+      test -e $BINUTILS_SRC\/libiberty\/libiberty.a && \\\n+      test -e $BINUTILS_SRC\/zlib\/libz.a; then\n+    AC_MSG_NOTICE([Found binutils binaries in binutils source directory -- not building])\n+  else\n+    # On Windows, we cannot build with the normal Microsoft CL, but must instead use\n+    # a separate mingw toolchain.\n+    if test \"x$OPENJDK_BUILD_OS\" = xwindows; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = \"xx86\"; then\n+        target_base=\"i686-w64-mingw32\"\n+      else\n+        target_base=\"$OPENJDK_TARGET_CPU-w64-mingw32\"\n+      fi\n+      binutils_cc=\"$target_base-gcc\"\n+      binutils_target=\"--host=$target_base --target=$target_base\"\n+      # Somehow the uint typedef is not included when building with mingw\n+      binutils_cflags=\"-Duint=unsigned\"\n+      compiler_version=`$binutils_cc --version 2>&1`\n+      if ! [ [[ \"$compiler_version\" =~ GCC ]] ]; then\n+        AC_MSG_NOTICE([Could not find correct mingw compiler $binutils_cc.])\n+        HELP_MSG_MISSING_DEPENDENCY([$binutils_cc])\n+        AC_MSG_ERROR([Cannot continue. $HELP_MSG])\n+      else\n+        AC_MSG_NOTICE([Using compiler $binutils_cc with version $compiler_version])\n+      fi\n+    elif test \"x$OPENJDK_BUILD_OS\" = xmacosx; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+        binutils_target=\"--enable-targets=aarch64-darwin\"\n+      else\n+        binutils_target=\"\"\n+      fi\n+    else\n+      binutils_cc=\"$CC $SYSROOT_CFLAGS\"\n+      binutils_target=\"\"\n+    fi\n+    binutils_cflags=\"$binutils_cflags $MACHINE_FLAG $JVM_PICFLAG $C_O_FLAG_NORM\"\n+\n+    AC_MSG_NOTICE([Running binutils configure])\n+    AC_MSG_NOTICE([configure command line: .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target])\n+    saved_dir=`pwd`\n+    cd \"$BINUTILS_SRC\"\n+    .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target\n+    if test $? -ne 0 || ! test -e $BINUTILS_SRC\/Makefile; then\n+      AC_MSG_NOTICE([Automatic building of binutils failed on configure. Try building it manually])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    AC_MSG_NOTICE([Running binutils make])\n+    $MAKE all-opcodes\n+    if test $? -ne 0; then\n+      AC_MSG_NOTICE([Automatic building of binutils failed on make. Try building it manually])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    cd $saved_dir\n+    AC_MSG_NOTICE([Building of binutils done])\n+  fi\n+\n+  BINUTILS_DIR=\"$BINUTILS_SRC\"\n+])\n+\n+################################################################################\n+#\n+# Helper function to setup hsdis using binutils\n+#\n+AC_DEFUN([LIB_SETUP_HSDIS_BINUTILS],\n+[\n+  AC_ARG_WITH([binutils], [AS_HELP_STRING([--with-binutils],\n+      [where to find the binutils files needed for hsdis\/binutils])])\n+\n+  AC_ARG_WITH([binutils-src], [AS_HELP_STRING([--with-binutils-src],\n+      [where to find the binutils source for building])])\n+\n+  # We need the binutils static libs and includes.\n+  if test \"x$with_binutils_src\" != x; then\n+    # Try building the source first. If it succeeds, it sets $BINUTILS_DIR.\n+    LIB_BUILD_BINUTILS\n+  fi\n+\n+  if test \"x$with_binutils\" != x; then\n+    BINUTILS_DIR=\"$with_binutils\"\n+  fi\n+\n+  binutils_system_error=\"\"\n+  HSDIS_LIBS=\"\"\n+  if test \"x$BINUTILS_DIR\" = xsystem; then\n+    AC_CHECK_LIB(bfd, bfd_openr, [ HSDIS_LIBS=\"-lbfd\" ], [ binutils_system_error=\"libbfd not found\" ])\n+    AC_CHECK_LIB(opcodes, disassembler, [ HSDIS_LIBS=\"$HSDIS_LIBS -lopcodes\" ], [ binutils_system_error=\"libopcodes not found\" ])\n+    AC_CHECK_LIB(iberty, xmalloc, [ HSDIS_LIBS=\"$HSDIS_LIBS -liberty\" ], [ binutils_system_error=\"libiberty not found\" ])\n+    AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -lz\" ], [ binutils_system_error=\"libz not found\" ])\n+    HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n+  elif test \"x$BINUTILS_DIR\" != x; then\n+    if test -e $BINUTILS_DIR\/bfd\/libbfd.a && \\\n+        test -e $BINUTILS_DIR\/opcodes\/libopcodes.a && \\\n+        test -e $BINUTILS_DIR\/libiberty\/libiberty.a; then\n+      HSDIS_CFLAGS=\"-I$BINUTILS_DIR\/include -I$BINUTILS_DIR\/bfd -DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n+      HSDIS_LDFLAGS=\"\"\n+      HSDIS_LIBS=\"$BINUTILS_DIR\/bfd\/libbfd.a $BINUTILS_DIR\/opcodes\/libopcodes.a $BINUTILS_DIR\/libiberty\/libiberty.a $BINUTILS_DIR\/zlib\/libz.a\"\n+    fi\n+  fi\n+\n+  AC_MSG_CHECKING([for binutils to use with hsdis])\n+  case \"x$BINUTILS_DIR\" in\n+    xsystem)\n+      if test \"x$OPENJDK_TARGET_OS\" != xlinux; then\n+        AC_MSG_RESULT([invalid])\n+        AC_MSG_ERROR([binutils on system is supported for Linux only])\n+      elif test \"x$binutils_system_error\" = x; then\n+        AC_MSG_RESULT([system])\n+        HSDIS_CFLAGS=\"$HSDIS_CFLAGS -DSYSTEM_BINUTILS\"\n+      else\n+        AC_MSG_RESULT([invalid])\n+        AC_MSG_ERROR([$binutils_system_error])\n+      fi\n+      ;;\n+    x)\n+      AC_MSG_RESULT([missing])\n+      AC_MSG_NOTICE([--with-hsdis=binutils requires specifying a binutils installation.])\n+      AC_MSG_NOTICE([Download binutils from https:\/\/www.gnu.org\/software\/binutils and unpack it,])\n+      AC_MSG_NOTICE([and point --with-binutils-src to the resulting directory, or use])\n+      AC_MSG_NOTICE([--with-binutils to point to a pre-built binutils installation.])\n+      AC_MSG_ERROR([Cannot continue])\n+      ;;\n+    *)\n+      if test \"x$HSDIS_LIBS\" != x; then\n+        AC_MSG_RESULT([$BINUTILS_DIR])\n+      else\n+        AC_MSG_RESULT([invalid])\n+        AC_MSG_ERROR([$BINUTILS_DIR does not contain a proper binutils installation])\n+      fi\n+      ;;\n+  esac\n+])\n+\n+################################################################################\n+#\n+# Determine if hsdis should be built, and if so, with which backend.\n+#\n+AC_DEFUN_ONCE([LIB_SETUP_HSDIS],\n+[\n+  AC_ARG_WITH([hsdis], [AS_HELP_STRING([--with-hsdis],\n+      [what hsdis backend to use ('none', 'capstone', 'llvm', 'binutils') @<:@none@:>@])])\n+\n+  UTIL_ARG_ENABLE(NAME: hsdis-bundling, DEFAULT: false,\n+    RESULT: ENABLE_HSDIS_BUNDLING,\n+    DESC: [enable bundling of hsdis to allow HotSpot disassembly out-of-the-box])\n+\n+  AC_MSG_CHECKING([what hsdis backend to use])\n+\n+  if test \"x$with_hsdis\" = xyes; then\n+    AC_MSG_ERROR([--with-hsdis must have a value])\n+  elif test \"x$with_hsdis\" = xnone || test \"x$with_hsdis\" = xno || test \"x$with_hsdis\" = x; then\n+    HSDIS_BACKEND=none\n+    AC_MSG_RESULT(['none', hsdis will not be built])\n+  elif test \"x$with_hsdis\" = xcapstone; then\n+    HSDIS_BACKEND=capstone\n+    AC_MSG_RESULT(['capstone'])\n+\n+    LIB_SETUP_HSDIS_CAPSTONE\n+  elif test \"x$with_hsdis\" = xllvm; then\n+    HSDIS_BACKEND=llvm\n+    AC_MSG_RESULT(['llvm'])\n+\n+    LIB_SETUP_HSDIS_LLVM\n+  elif test \"x$with_hsdis\" = xbinutils; then\n+    HSDIS_BACKEND=binutils\n+    AC_MSG_RESULT(['binutils'])\n+\n+    LIB_SETUP_HSDIS_BINUTILS\n+  else\n+    AC_MSG_RESULT([invalid])\n+    AC_MSG_ERROR([Incorrect hsdis backend \"$with_hsdis\"])\n+  fi\n+\n+  AC_SUBST(HSDIS_BACKEND)\n+  AC_SUBST(HSDIS_CFLAGS)\n+  AC_SUBST(HSDIS_LDFLAGS)\n+  AC_SUBST(HSDIS_LIBS)\n+\n+  AC_MSG_CHECKING([if hsdis should be bundled])\n+  if test \"x$ENABLE_HSDIS_BUNDLING\" = \"xtrue\"; then\n+    if test \"x$HSDIS_BACKEND\" = xnone; then\n+      AC_MSG_RESULT([no, backend missing])\n+      AC_MSG_ERROR([hsdis-bundling requires a hsdis backend. Please set --with-hsdis=<backend>]);\n+    fi\n+    AC_MSG_RESULT([yes])\n+    if test \"x$HSDIS_BACKEND\" = xbinutils; then\n+      AC_MSG_WARN([The resulting build might not be redistributable. Seek legal advice before distributing.])\n+    fi\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n+  AC_SUBST(ENABLE_HSDIS_BUNDLING)\n+])\n","filename":"make\/autoconf\/lib-hsdis.m4","additions":336,"deletions":0,"binary":false,"changes":336,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+m4_include([lib-fontconfig.m4])\n@@ -32,0 +33,1 @@\n+m4_include([lib-hsdis.m4])\n@@ -34,1 +36,1 @@\n-m4_include([lib-fontconfig.m4])\n+\n@@ -96,1 +98,3 @@\n-  LIB_SETUP_X11\n+\n+  LIB_SETUP_ALSA\n+  LIB_SETUP_BUNDLED_LIBS\n@@ -100,1 +104,1 @@\n-  LIB_SETUP_ALSA\n+  LIB_SETUP_HSDIS\n@@ -102,1 +106,0 @@\n-  LIB_SETUP_BUNDLED_LIBS\n@@ -104,0 +107,2 @@\n+  LIB_SETUP_X11\n+\n","filename":"make\/autoconf\/libraries.m4","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -363,0 +363,1 @@\n+ENABLE_HSDIS_BUNDLING := @ENABLE_HSDIS_BUNDLING@\n","filename":"make\/autoconf\/spec.gmk.in","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -249,0 +249,17 @@\n+################################################################################\n+# Optionally copy hsdis into the the image\n+\n+ifeq ($(ENABLE_HSDIS_BUNDLING), true)\n+  HSDIS_NAME := hsdis-$(OPENJDK_TARGET_CPU_LEGACY_LIB)$(SHARED_LIBRARY_SUFFIX)\n+  HSDIS_PATH := $(SUPPORT_OUTPUTDIR)\/hsdis\/$(HSDIS_NAME)\n+\n+  $(eval $(call SetupCopyFiles, COPY_HSDIS, \\\n+      FILES := $(HSDIS_PATH), \\\n+      DEST := $(call FindLibDirForModule, $(MODULE)), \\\n+      FLATTEN := true, \\\n+      MACRO := install-file-nolink, \\\n+  ))\n+\n+  TARGETS += $(COPY_HSDIS)\n+endif\n+\n","filename":"make\/modules\/java.base\/Copy.gmk","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}