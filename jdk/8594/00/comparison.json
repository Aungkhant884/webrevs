{"files":[{"patch":"@@ -198,16 +198,0 @@\n-\n-size_t FreeListAllocator::reduce_free_list(size_t remove_goal) {\n-  try_transfer_pending();\n-  size_t removed = 0;\n-  for ( ; removed < remove_goal; ++removed) {\n-    FreeNode* node = _free_list.pop();\n-    if (node == nullptr) break;\n-    node->~FreeNode();\n-    _config->deallocate(node);\n-  }\n-  size_t new_count = Atomic::sub(&_free_count, removed);\n-  log_debug(gc, freelist)\n-           (\"Reduced %s free list by \" SIZE_FORMAT \" to \" SIZE_FORMAT,\n-            name(), removed, new_count);\n-  return removed;\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -153,6 +153,0 @@\n-\n-  \/\/ Deallocate some of the available nodes in the free_list.\n-  \/\/ remove_goal is the target number to remove.  Returns the number\n-  \/\/ actually deallocated, which may be less than the goal if there\n-  \/\/ were fewer available.\n-  size_t reduce_free_list(size_t remove_goal);\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,4 +75,0 @@\n-size_t BufferNode::Allocator::reduce_free_list(size_t remove_goal) {\n-  return _free_list.reduce_free_list(remove_goal);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -201,5 +201,0 @@\n-\n-  \/\/ Deallocate some of the available buffers.  remove_goal is the target\n-  \/\/ number to remove.  Returns the number actually deallocated, which may\n-  \/\/ be less than the goal if there were fewer available.\n-  size_t reduce_free_list(size_t remove_goal);\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,7 +88,0 @@\n-\n-  \/\/ Destroy some nodes in the free list.\n-  \/\/ We don't have a way to verify destruction, but we can at\n-  \/\/ least verify we don't crash along the way.\n-  size_t count = allocator.free_count();\n-  ASSERT_EQ(count, allocator.reduce_free_list(count));\n-  \/\/ destroy allocator.\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_ptrQueueBufferAllocator.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}