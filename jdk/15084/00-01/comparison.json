{"files":[{"patch":"@@ -115,1 +115,1 @@\n-  return -1;\n+  return min_jint;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/eventEmitter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -743,1 +743,1 @@\n-    <Field type=\"int\" name=\"arrayElements\" label=\"Array Elements\" description=\"If the object is an array, the number of elements, or -1 if it is not an array\" \/>\n+    <Field type=\"int\" name=\"arrayElements\" label=\"Array Elements\" description=\"If the object is an array, the number of elements, or minimum value for the type int if it is not an array\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.event.oldobject;\n-\n-import java.util.List;\n-\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.RecordedClass;\n-import jdk.jfr.consumer.RecordedEvent;\n-import jdk.jfr.consumer.RecordedObject;\n-import jdk.jfr.internal.test.WhiteBox;\n-import jdk.test.lib.jfr.EventNames;\n-import jdk.test.lib.jfr.Events;\n-\n-\/**\n- * @test\n- * @bug 8313394\n- * @summary test Array Elements in OldObjectSample event\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/jdk\n- * @modules jdk.jfr\/jdk.jfr.internal.test\n- * @run main\/othervm -Xms128m -Xmx128m -XX:TLABSize=2k jdk.jfr.event.oldobject.TestArrayElements\n- *\/\n-public class TestArrayElements {\n-\n-    private static final int ARRAY_SIZE = 1024;\n-    private static final int MAX_RETRY = 3;\n-\n-    public static void main(String[] args) throws Exception {\n-        WhiteBox.setWriteAllObjectSamples(true);\n-\n-        for (int i = 0; i < MAX_RETRY; i++) {\n-            try (Recording recording = new Recording()) {\n-                recording.enable(EventNames.OldObjectSample).withoutStackTrace().with(\"cutoff\", \"infinity\");\n-                recording.start();\n-                for (int j = 0; j <1024 * 1000; j++) {\n-                  new String(\"aaaaaaaa\"); \/\/ not array object\n-                  long a[] = new long[ARRAY_SIZE]; \/\/ array object\n-                }\n-                recording.stop();\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Events.hasEvents(events);\n-                if (verifyArrayElements(events)) {\n-                    return;\n-                }\n-            }\n-            System.out.println(\"Retrying...\");\n-        }\n-        throw new Exception(\"Could not find OldObjectSample event with array object or other object\");\n-\n-    }\n-\n-    private static boolean verifyArrayElements(List<RecordedEvent> events) throws Exception {\n-        boolean hasLongArray = false;\n-        boolean hasString = false;\n-        for (RecordedEvent e : events) {\n-            System.out.println(e);\n-            RecordedObject object = e.getValue(\"object\");\n-            RecordedClass objectType = object.getValue(\"type\");\n-            if (objectType.getName().equals(long[].class.getName())) {\n-                int size = e.getValue(\"arrayElements\");\n-                if (size != ARRAY_SIZE) {\n-                    throw new Exception(\"Expected array size: \" + ARRAY_SIZE + \", but got \" + size);\n-                }\n-                hasLongArray = true;\n-            }\n-            if (objectType.getName().equals(String.class.getName())) {\n-                int size = e.getValue(\"arrayElements\");\n-                if (size != -1) {\n-                    throw new Exception(\"Expected array size: -1, but got \" + size);\n-                }\n-                hasString = true;\n-            }\n-        }\n-        if (!hasLongArray) {\n-            System.out.println(\"Could not find event with \" + long[].class + \" as object\");\n-        }\n-        if (!hasString) {\n-            System.out.println(\"Could not find event with \" + String.class + \" as object\");\n-        }\n-        return (hasLongArray && hasString);\n-    }\n-\n-}\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestArrayElements.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"}]}