{"files":[{"patch":"@@ -38,2 +38,3 @@\n-  static size_t size(size_t length);\n-  static void* alloc(void* placement, size_t length);\n+  template <typename Allocator>\n+  static void* alloc(Allocator* allocator, size_t length);\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zAttachedArray.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,3 +42,5 @@\n-inline size_t ZAttachedArray<ObjectT, ArrayT>::size(size_t length) {\n-  return object_size() + array_size(length);\n-}\n+template <typename Allocator>\n+inline void* ZAttachedArray<ObjectT, ArrayT>::alloc(Allocator* allocator, size_t length) {\n+  \/\/ Allocate memory for object and array\n+  const size_t size = object_size() + array_size(length);\n+  void* const addr = allocator->alloc(size);\n@@ -46,4 +48,6 @@\n-template <typename ObjectT, typename ArrayT>\n-inline void* ZAttachedArray<ObjectT, ArrayT>::alloc(void* placement, size_t length) {\n-  ::new (reinterpret_cast<char*>(placement) + object_size()) ArrayT[length];\n-  return placement;\n+  \/\/ Placement new array\n+  void* const array_addr = reinterpret_cast<char*>(addr) + object_size();\n+  ::new (array_addr) ArrayT[length];\n+\n+  \/\/ Return pointer to object\n+  return addr;\n@@ -54,2 +58,6 @@\n-  void* const placement = AllocateHeap(size(length), mtGC);\n-  return alloc(placement, length);\n+  struct Allocator {\n+    void* alloc(size_t size) const {\n+      return AllocateHeap(size, mtGC);\n+    }\n+  } allocator;\n+  return alloc(&allocator, length);\n","filename":"src\/hotspot\/share\/gc\/z\/zAttachedArray.inline.hpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+  static uint32_t nentries(const ZPage* page);\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,11 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n+\n+inline uint32_t ZForwarding::nentries(const ZPage* page) {\n+  \/\/ The number returned by the function is used to size the hash table of\n+  \/\/ forwarding entries for this page. This hash table uses linear probing.\n+  \/\/ The size of the table must be a power of two to allow for quick and\n+  \/\/ inexpensive indexing\/masking. The table is also sized to have a load\n+  \/\/ factor of 50%, i.e. sized to have double the number of entries actually\n+  \/\/ inserted, to allow for good lookup\/insert performance.\n+  return round_up_power_of_2(page->live_objects() * 2);\n+}\n@@ -38,3 +49,3 @@\n-  const size_t nentries = page->forwarding_entries();\n-  void* const placement = allocator->alloc(AttachedArray::size(nentries));\n-  return ::new (AttachedArray::alloc(placement, nentries)) ZForwarding(page, nentries);\n+  const size_t nentries = ZForwarding::nentries(page);\n+  void* const addr = AttachedArray::alloc(allocator, nentries);\n+  return ::new (addr) ZForwarding(page, nentries);\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.inline.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-  uint32_t forwarding_entries() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"utilities\/powerOfTwo.hpp\"\n@@ -216,12 +215,0 @@\n-inline uint32_t ZPage::forwarding_entries() const {\n-  assert(live_objects() > 0, \"Invalid value\");\n-\n-  \/\/ The number returned by the function is used to size the hash table of\n-  \/\/ forwarding entries for this page. This hash table uses linear probing.\n-  \/\/ The size of the table must be a power of two to allow for quick and\n-  \/\/ inexpensive indexing\/masking. The table is also sized to have a load\n-  \/\/ factor of 50%, i.e. sized to have double the number of entries actually\n-  \/\/ inserted, to allow for good lookup\/insert performance.\n-  return round_up_power_of_2(live_objects() * 2);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.inline.hpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zForwarding.inline.hpp\"\n@@ -55,0 +56,1 @@\n+    _nselected(0),\n@@ -156,1 +158,1 @@\n-    from_forwarding_entries += page->forwarding_entries();\n+    from_forwarding_entries += ZForwarding::nentries(page);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,1 +163,2 @@\n-    allocator.reset((sizeof(ZForwarding)) + (page.forwarding_entries() * sizeof(ZForwardingEntry)));\n+    const uint32_t nentries = ZForwarding::nentries(&page);\n+    allocator.reset((sizeof(ZForwarding)) + (nentries * sizeof(ZForwardingEntry)));\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}