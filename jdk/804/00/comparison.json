{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+  static size_t array_size(size_t length);\n@@ -37,0 +38,2 @@\n+  static size_t size(size_t length);\n+  static void* alloc(void* placement, size_t length);\n","filename":"src\/hotspot\/share\/gc\/z\/zAttachedArray.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,16 @@\n+template <typename ObjectT, typename ArrayT>\n+inline size_t ZAttachedArray<ObjectT, ArrayT>::array_size(size_t length) {\n+  return sizeof(ArrayT) * length;\n+}\n+\n+template <typename ObjectT, typename ArrayT>\n+inline size_t ZAttachedArray<ObjectT, ArrayT>::size(size_t length) {\n+  return object_size() + array_size(length);\n+}\n+\n+template <typename ObjectT, typename ArrayT>\n+inline void* ZAttachedArray<ObjectT, ArrayT>::alloc(void* placement, size_t length) {\n+  ::new (reinterpret_cast<char*>(placement) + object_size()) ArrayT[length];\n+  return placement;\n+}\n+\n@@ -38,4 +54,2 @@\n-  const size_t array_size = sizeof(ArrayT) * length;\n-  char* const addr = AllocateHeap(object_size() + array_size, mtGC);\n-  ::new (addr + object_size()) ArrayT[length];\n-  return addr;\n+  void* const placement = AllocateHeap(size(length), mtGC);\n+  return alloc(placement, length);\n","filename":"src\/hotspot\/share\/gc\/z\/zAttachedArray.inline.hpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/z\/zPage.inline.hpp\"\n@@ -28,23 +27,0 @@\n-#include \"utilities\/powerOfTwo.hpp\"\n-\n-ZForwarding* ZForwarding::create(ZPage* page) {\n-  \/\/ Allocate table for linear probing. The size of the table must be\n-  \/\/ a power of two to allow for quick and inexpensive indexing\/masking.\n-  \/\/ The table is sized to have a load factor of 50%, i.e. sized to have\n-  \/\/ double the number of entries actually inserted.\n-  assert(page->live_objects() > 0, \"Invalid value\");\n-  const size_t nentries = round_up_power_of_2(page->live_objects() * 2);\n-  return ::new (AttachedArray::alloc(nentries)) ZForwarding(page, nentries);\n-}\n-\n-void ZForwarding::destroy(ZForwarding* forwarding) {\n-  AttachedArray::free(forwarding);\n-}\n-\n-ZForwarding::ZForwarding(ZPage* page, size_t nentries) :\n-    _virtual(page->virtual_memory()),\n-    _object_alignment_shift(page->object_alignment_shift()),\n-    _entries(nentries),\n-    _page(page),\n-    _refcount(1),\n-    _pinned(false) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+class ZForwardingAllocator;\n@@ -60,2 +61,1 @@\n-  static ZForwarding* create(ZPage* page);\n-  static void destroy(ZForwarding* forwarding);\n+  static ZForwarding* alloc(ZForwardingAllocator* allocator, ZPage* page);\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/z\/zForwardingAllocator.inline.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"gc\/z\/zPage.inline.hpp\"\n@@ -35,0 +37,14 @@\n+inline ZForwarding* ZForwarding::alloc(ZForwardingAllocator* allocator, ZPage* page) {\n+  const size_t nentries = page->forwarding_entries();\n+  void* const placement = allocator->alloc(AttachedArray::size(nentries));\n+  return ::new (AttachedArray::alloc(placement, nentries)) ZForwarding(page, nentries);\n+}\n+\n+inline ZForwarding::ZForwarding(ZPage* page, size_t nentries) :\n+    _virtual(page->virtual_memory()),\n+    _object_alignment_shift(page->object_alignment_shift()),\n+    _entries(nentries),\n+    _page(page),\n+    _refcount(1),\n+    _pinned(false) {}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.inline.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/z\/zForwardingAllocator.hpp\"\n+#include \"memory\/allocation.inline.hpp\"\n+\n+ZForwardingAllocator::ZForwardingAllocator() :\n+    _start(NULL),\n+    _end(NULL),\n+    _top(NULL) {}\n+\n+ZForwardingAllocator::~ZForwardingAllocator() {\n+  FREE_C_HEAP_ARRAY(char, _start);\n+}\n+\n+void ZForwardingAllocator::reset(size_t size) {\n+  _start = _top = REALLOC_C_HEAP_ARRAY(char, _start, size, mtGC);\n+  _end = _start + size;\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZFORWARDINGALLOCATOR_HPP\n+#define SHARE_GC_Z_ZFORWARDINGALLOCATOR_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+class ZForwardingAllocator {\n+private:\n+  char* _start;\n+  char* _end;\n+  char* _top;\n+\n+public:\n+  ZForwardingAllocator();\n+  ~ZForwardingAllocator();\n+\n+  void reset(size_t size);\n+  size_t size() const;\n+\n+  void* alloc(size_t size);\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZFORWARDINGALLOCATOR_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.hpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZFORWARDINGALLOCATOR_INLINE_HPP\n+#define SHARE_GC_Z_ZFORWARDINGALLOCATOR_INLINE_HPP\n+\n+#include \"gc\/z\/zForwardingAllocator.hpp\"\n+\n+inline size_t ZForwardingAllocator::size() const {\n+  return _end - _start;\n+}\n+\n+inline void* ZForwardingAllocator::alloc(size_t size) {\n+  char* const new_top = _top + size;\n+  if (new_top > _end) {\n+    \/\/ Not enough space left\n+    return NULL;\n+  }\n+\n+  char* const old_top = _top;\n+  _top = new_top;\n+  return old_top;\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZFORWARDINGALLOCATOR_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.inline.hpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -101,0 +101,1 @@\n+  uint32_t forwarding_entries() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -215,0 +216,12 @@\n+inline uint32_t ZPage::forwarding_entries() const {\n+  assert(live_objects() > 0, \"Invalid value\");\n+\n+  \/\/ The number returned by the function is used to size the hash table of\n+  \/\/ forwarding entries for this page. This hash table uses linear probing.\n+  \/\/ The size of the table must be a power of two to allow for quick and\n+  \/\/ inexpensive indexing\/masking. The table is also sized to have a load\n+  \/\/ factor of 50%, i.e. sized to have double the number of entries actually\n+  \/\/ inserted, to allow for good lookup\/insert performance.\n+  return round_up_power_of_2(live_objects() * 2);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.inline.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n-#include \"gc\/z\/zForwarding.hpp\"\n+#include \"gc\/z\/zForwarding.inline.hpp\"\n+#include \"gc\/z\/zForwardingAllocator.inline.hpp\"\n@@ -27,0 +28,1 @@\n+#include \"gc\/z\/zStat.hpp\"\n@@ -30,0 +32,1 @@\n+    _allocator(),\n@@ -33,4 +36,5 @@\n-void ZRelocationSet::populate(ZPage* const* group0, size_t ngroup0,\n-                              ZPage* const* group1, size_t ngroup1) {\n-  _nforwardings = ngroup0 + ngroup1;\n-  _forwardings = REALLOC_C_HEAP_ARRAY(ZForwarding*, _forwardings, _nforwardings, mtGC);\n+void ZRelocationSet::populate(ZPage* const* small, size_t nsmall,\n+                              ZPage* const* medium, size_t nmedium,\n+                              size_t forwarding_entries) {\n+  \/\/ Set relocation set length\n+  _nforwardings = nsmall + nmedium;\n@@ -38,0 +42,11 @@\n+  \/\/ Initialize forwarding allocator to have room for the\n+  \/\/ relocation set, all forwardings, and all forwarding entries.\n+  const size_t relocation_set_size = _nforwardings * sizeof(ZForwarding*);\n+  const size_t forwardings_size = _nforwardings * sizeof(ZForwarding);\n+  const size_t forwarding_entries_size = forwarding_entries * sizeof(ZForwardingEntry);\n+  _allocator.reset(relocation_set_size + forwardings_size + forwarding_entries_size);\n+\n+  \/\/ Allocate relocation set\n+  _forwardings = new (_allocator.alloc(relocation_set_size)) ZForwarding*[_nforwardings];\n+\n+  \/\/ Populate relocation set array\n@@ -40,3 +55,3 @@\n-  \/\/ Populate group 0\n-  for (size_t i = 0; i < ngroup0; i++) {\n-    _forwardings[j++] = ZForwarding::create(group0[i]);\n+  \/\/ Populate medium pages\n+  for (size_t i = 0; i < nmedium; i++) {\n+    _forwardings[j++] = ZForwarding::alloc(&_allocator, medium[i]);\n@@ -45,3 +60,3 @@\n-  \/\/ Populate group 1\n-  for (size_t i = 0; i < ngroup1; i++) {\n-    _forwardings[j++] = ZForwarding::create(group1[i]);\n+  \/\/ Populate small pages\n+  for (size_t i = 0; i < nsmall; i++) {\n+    _forwardings[j++] = ZForwarding::alloc(&_allocator, small[i]);\n@@ -49,0 +64,3 @@\n+\n+  \/\/ Update statistics\n+  ZStatRelocation::set_at_populate_relocation_set(_allocator.size());\n@@ -52,4 +70,1 @@\n-  for (size_t i = 0; i < _nforwardings; i++) {\n-    ZForwarding::destroy(_forwardings[i]);\n-    _forwardings[i] = NULL;\n-  }\n+  _nforwardings = 0;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.cpp","additions":31,"deletions":16,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/z\/zForwardingAllocator.hpp\"\n@@ -37,2 +38,3 @@\n-  ZForwarding** _forwardings;\n-  size_t        _nforwardings;\n+  ZForwardingAllocator _allocator;\n+  ZForwarding**        _forwardings;\n+  size_t               _nforwardings;\n@@ -43,2 +45,3 @@\n-  void populate(ZPage* const* group0, size_t ngroup0,\n-                ZPage* const* group1, size_t ngroup1);\n+  void populate(ZPage* const* small, size_t nsmall,\n+                ZPage* const* medium, size_t nmedium,\n+                size_t forwarding_entries);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    _nselected(0),\n+    _forwarding_entries(0),\n@@ -146,1 +146,3 @@\n-  size_t from_size = 0;\n+  size_t selected_forwarding_entries = 0;\n+  size_t from_live_bytes = 0;\n+  size_t from_forwarding_entries = 0;\n@@ -152,1 +154,3 @@\n-    from_size += _sorted_pages[from - 1]->live_bytes();\n+    ZPage* const page = _sorted_pages[from - 1];\n+    from_live_bytes += page->live_bytes();\n+    from_forwarding_entries += page->forwarding_entries();\n@@ -158,1 +162,1 @@\n-    const size_t to = ceil((double)(from_size) \/ (double)(_page_size - _object_size_limit));\n+    const size_t to = ceil((double)(from_live_bytes) \/ (double)(_page_size - _object_size_limit));\n@@ -170,0 +174,1 @@\n+      selected_forwarding_entries = from_forwarding_entries;\n@@ -172,3 +177,4 @@\n-    log_trace(gc, reloc)(\"Candidate Relocation Set (%s Pages): \"\n-                         SIZE_FORMAT \"->\" SIZE_FORMAT \", %.1f%% relative defragmentation, %s\",\n-                         _name, from, to, diff_reclaimable, (selected_from == from) ? \"Selected\" : \"Rejected\");\n+    log_trace(gc, reloc)(\"Candidate Relocation Set (%s Pages): \" SIZE_FORMAT \"->\" SIZE_FORMAT \", \"\n+                         \"%.1f%% relative defragmentation, \" SIZE_FORMAT \" forwarding entries, %s\",\n+                         _name, from, to, diff_reclaimable, from_forwarding_entries,\n+                         (selected_from == from) ? \"Selected\" : \"Rejected\");\n@@ -179,0 +185,1 @@\n+  _forwarding_entries = selected_forwarding_entries;\n@@ -184,2 +191,4 @@\n-  log_trace(gc, reloc)(\"Relocation Set (%s Pages): \" SIZE_FORMAT \"->\" SIZE_FORMAT \", \" SIZE_FORMAT \" skipped\",\n-                       _name, selected_from, selected_to, npages - _nselected);\n+  log_trace(gc, reloc)(\"Relocation Set (%s Pages): \" SIZE_FORMAT \"->\" SIZE_FORMAT \", \"\n+                       SIZE_FORMAT \" skipped, \" SIZE_FORMAT \" forwarding entries\",\n+                       _name, selected_from, selected_to, npages - selected_from,\n+                       selected_forwarding_entries);\n@@ -248,2 +257,3 @@\n-  relocation_set->populate(_medium.selected(), _medium.nselected(),\n-                           _small.selected(), _small.nselected());\n+  relocation_set->populate(_small.selected(), _small.nselected(),\n+                           _medium.selected(), _medium.nselected(),\n+                           forwarding_entries());\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-\n@@ -82,0 +81,1 @@\n+  size_t                           _forwarding_entries;\n@@ -102,0 +102,1 @@\n+  size_t forwarding_entries() const;\n@@ -112,0 +113,1 @@\n+  size_t forwarding_entries() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,0 +77,4 @@\n+inline size_t ZRelocationSetSelectorGroup::forwarding_entries() const {\n+  return _forwarding_entries;\n+}\n+\n@@ -81,0 +85,4 @@\n+inline size_t ZRelocationSetSelector::forwarding_entries() const {\n+  return _small.forwarding_entries() + _medium.forwarding_entries();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.inline.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1143,0 +1143,1 @@\n+size_t                      ZStatRelocation::_forwarding_usage;\n@@ -1149,0 +1150,4 @@\n+void ZStatRelocation::set_at_populate_relocation_set(size_t forwarding_usage) {\n+  _forwarding_usage = forwarding_usage;\n+}\n+\n@@ -1172,0 +1177,1 @@\n+  log_info(gc, reloc)(\"Forwarding Usage: \" SIZE_FORMAT \"M\", _forwarding_usage \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -426,0 +426,1 @@\n+  static size_t                      _forwarding_usage;\n@@ -432,0 +433,1 @@\n+  static void set_at_populate_relocation_set(size_t forwarding_usage);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zForwardingAllocator.inline.hpp\"\n@@ -160,0 +161,4 @@\n+    \/\/ Setup allocator\n+    ZForwardingAllocator allocator;\n+    allocator.reset((sizeof(ZForwarding)) + (page.forwarding_entries() * sizeof(ZForwardingEntry)));\n+\n@@ -161,1 +166,1 @@\n-    ZForwarding* const forwarding = ZForwarding::create(&page);\n+    ZForwarding* const forwarding = ZForwarding::alloc(&allocator, &page);\n@@ -165,3 +170,0 @@\n-\n-    \/\/ Teardown forwarding\n-    ZForwarding::destroy(forwarding);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}