{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.vm.ci.services.Services;\n@@ -35,0 +36,3 @@\n+    public final boolean linuxOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Linux\");\n+    public final boolean macOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Mac\");\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/TargetDescription.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        boolean canUsePlatformRegister = config.linuxOs;\n+        boolean canUsePlatformRegister = target.linuxOs;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,0 +231,21 @@\n+    private int parseStackArg(ValueKind<?> valueKind, AllocatableValue[] locations, int index, int currentStackOffset, HotSpotCallingConventionType type) {\n+        int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n+        locations[index] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n+        currentStackOffset += Math.max(kindSize, target.wordSize);\n+        return currentStackOffset;\n+    }\n+\n+    private int parseDarwinNativeStackArg(ValueKind<?> valueKind, AllocatableValue[] locations, int index, int currentStackOffset, HotSpotCallingConventionType type) {\n+        int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n+        if (currentStackOffset % kindSize != 0) {\n+            \/\/ In MacOS natural alignment is used\n+            \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+            currentStackOffset += kindSize - currentStackOffset % kindSize;\n+        }\n+        locations[index] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n+        \/\/ In MacOS \"Function arguments may consume slots on the stack that are not multiples of 8 bytes\"\n+        \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+        currentStackOffset += kindSize;\n+        return currentStackOffset;\n+    }\n+\n@@ -267,3 +288,5 @@\n-                ValueKind<?> valueKind = valueKindFactory.getValueKind(kind);\n-                locations[i] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n-                currentStackOffset += Math.max(valueKind.getPlatformKind().getSizeInBytes(), target.wordSize);\n+                if (target.macOs && type == HotSpotCallingConventionType.NativeCall) {\n+                    currentStackOffset = parseDarwinNativeStackArg(valueKindFactory.getValueKind(kind), locations, i, currentStackOffset, type);\n+                } else {\n+                    currentStackOffset = parseStackArg(valueKindFactory.getValueKind(kind), locations, i, currentStackOffset, type);\n+                }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotRegisterConfig.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.vm.ci.services.Services;\n@@ -40,2 +39,0 @@\n-    final boolean linuxOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Linux\");\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotVMConfig.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/NativeCallTest.java 8262901 macosx-aarch64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -192,0 +192,33 @@\n+jint JNICALL I32I(jint i00, jint i01, jint i02, jint i03, jint i04, jint i05, jint i06, jint i07,\n+                  jint i08, jint i09, jint i0a, jint i0b, jint i0c, jint i0d, jint i0e, jint i0f,\n+                  jint i10, jint i11, jint i12, jint i13, jint i14, jint i15, jint i16, jint i17,\n+                  jint i18, jint i19, jint i1a, jint i1b, jint i1c, jint i1d, jint i1e, jint i1f,\n+                  jint a) {\n+  return i00 + i01 + i02 + i03 + i04 + i05 + i06 + i07 +\n+         i08 + i09 + i0a + i0b + i0c + i0d + i0e + i0f +\n+         i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +\n+         i18 + i19 + i1a + i1b + i1c + i1d + i1e + i1f +\n+         a;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_jdk_vm_ci_code_test_NativeCallTest_getI32I(JNIEnv *env, jclass clazz) {\n+  return (jlong) (intptr_t) I32I;\n+}\n+\n+JNIEXPORT jint JNICALL Java_jdk_vm_ci_code_test_NativeCallTest__1I32I(JNIEnv *env, jclass clazz,\n+                                                                      jint i00, jint i01, jint i02, jint i03,\n+                                                                      jint i04, jint i05, jint i06, jint i07,\n+                                                                      jint i08, jint i09, jint i0a, jint i0b,\n+                                                                      jint i0c, jint i0d, jint i0e, jint i0f,\n+                                                                      jint i10, jint i11, jint i12, jint i13,\n+                                                                      jint i14, jint i15, jint i16, jint i17,\n+                                                                      jint i18, jint i19, jint i1a, jint i1b,\n+                                                                      jint i1c, jint i1d, jint i1e, jint i1f,\n+                                                                      jint a) {\n+  return I32I(i00, i01, i02, i03, i04, i05, i06, i07,\n+              i08, i09, i0a, i0b, i0c, i0d, i0e, i0f,\n+              i10, i11, i12, i13, i14, i15, i16, i17,\n+              i18, i19, i1a, i1b, i1c, i1d, i1e, i1f,\n+              a);\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/libNativeCallTest.c","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -128,0 +128,20 @@\n+    @Test\n+    public void testI32I() {\n+        int sCount = 32;\n+        \/\/ Pairs of <Object>, <Class>\n+        Object[] remainingArgs = new Object[]{\n+                        12, int.class\n+        };\n+        Class<?>[] argClazz = new Class[sCount + remainingArgs.length \/ 2];\n+        Object[] argValues = new Object[sCount + remainingArgs.length \/ 2];\n+        for (int i = 0; i < sCount; i++) {\n+            argValues[i] = i;\n+            argClazz[i] = int.class;\n+        }\n+        for (int i = 0; i < remainingArgs.length; i += 2) {\n+            argValues[sCount + i \/ 2] = remainingArgs[i + 0];\n+            argClazz[sCount + i \/ 2] = (Class<?>) remainingArgs[i + 1];\n+        }\n+        test(\"I32I\", getI32I(), int.class, argClazz, argValues);\n+    }\n+\n@@ -247,0 +267,20 @@\n+\n+    public static native long getI32I();\n+\n+    public static native int _I32I(int i00, int i01, int i02, int i03, int i04, int i05, int i06, int i07,\n+                    int i08, int i09, int i0a, int i0b, int i0c, int i0d, int i0e, int i0f,\n+                    int i10, int i11, int i12, int i13, int i14, int i15, int i16, int i17,\n+                    int i18, int i19, int i1a, int i1b, int i1c, int i1d, int i1e, int i1f,\n+                    int a);\n+\n+    public static int I32I(int i00, int i01, int i02, int i03, int i04, int i05, int i06, int i07,\n+                    int i08, int i09, int i0a, int i0b, int i0c, int i0d, int i0e, int i0f,\n+                    int i10, int i11, int i12, int i13, int i14, int i15, int i16, int i17,\n+                    int i18, int i19, int i1a, int i1b, int i1c, int i1d, int i1e, int i1f,\n+                    int a) {\n+        return _I32I(i00, i01, i02, i03, i04, i05, i06, i07,\n+                    i08, i09, i0a, i0b, i0c, i0d, i0e, i0f,\n+                    i10, i11, i12, i13, i14, i15, i16, i17,\n+                    i18, i19, i1a, i1b, i1c, i1d, i1e, i1f,\n+                    a);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/NativeCallTest.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -275,2 +275,1 @@\n-        emitGrowStack(cc.getStackSize());\n-        frameSize += cc.getStackSize();\n+        growFrame(cc.getStackSize());\n@@ -285,2 +284,1 @@\n-        emitGrowStack(-cc.getStackSize());\n-        frameSize -= cc.getStackSize();\n+        growFrame(-cc.getStackSize());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}