{"files":[{"patch":"@@ -234,0 +234,21 @@\n+    private int parseStackArg(ValueKind<?> valueKind, AllocatableValue[] locations, int index, int currentStackOffset, HotSpotCallingConventionType type) {\n+        int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n+        locations[index] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n+        currentStackOffset += Math.max(kindSize, target.wordSize);\n+        return currentStackOffset;\n+    }\n+\n+    private int parseDarwinNativeStackArg(ValueKind<?> valueKind, AllocatableValue[] locations, int index, int currentStackOffset, HotSpotCallingConventionType type) {\n+        int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n+        if (currentStackOffset % kindSize != 0) {\n+            \/\/ In MacOS natural alignment is used\n+            \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+            currentStackOffset += kindSize - currentStackOffset % kindSize;\n+        }\n+        locations[index] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n+        \/\/ In MacOS \"Function arguments may consume slots on the stack that are not multiples of 8 bytes\"\n+        \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+        currentStackOffset += kindSize;\n+        return currentStackOffset;\n+    }\n+\n@@ -270,16 +291,2 @@\n-                if (type == HotSpotCallingConventionType.NativeCall) {\n-                    ValueKind<?> valueKind = valueKindFactory.getValueKind(kind);\n-                    int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n-                    if (macOS && currentStackOffset % kindSize != 0) {\n-                        \/\/ In MacOS natural alignment is used\n-                        \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n-                        currentStackOffset += kindSize - currentStackOffset % kindSize;\n-                    }\n-                    locations[i] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n-                    if (macOS) {\n-                        \/\/ In MacOS \"Function arguments may consume slots on the stack that are not multiples of 8 bytes\"\n-                        \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n-                        currentStackOffset += kindSize;\n-                    } else {\n-                        currentStackOffset += Math.max(kindSize, target.wordSize);\n-                    }\n+                if (macOS && type == HotSpotCallingConventionType.NativeCall) {\n+                    currentStackOffset = parseDarwinNativeStackArg(valueKindFactory.getValueKind(kind), locations, i, currentStackOffset, type);\n@@ -287,3 +294,1 @@\n-                    ValueKind<?> valueKind = valueKindFactory.getValueKind(kind);\n-                    locations[i] = StackSlot.get(valueKind, currentStackOffset, !type.out);\n-                    currentStackOffset += Math.max(valueKind.getPlatformKind().getSizeInBytes(), target.wordSize);\n+                    currentStackOffset = parseStackArg(valueKindFactory.getValueKind(kind), locations, i, currentStackOffset, type);\n@@ -293,0 +298,1 @@\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotRegisterConfig.java","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"}]}