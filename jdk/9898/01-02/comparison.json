{"files":[{"patch":"@@ -2366,3 +2366,2 @@\n-  Node* last_mem  = find_last_mem_state(pk, first_mem);\n-\n-  bool is_dependent = dependent_on_last_mem(last_mem, pk);\n+  bool is_dependent = false;\n+  Node* last_mem  = find_last_mem_state(pk, first_mem, is_dependent);\n@@ -2384,1 +2383,2 @@\n-          \/\/ last_mem, we still take the memory state of the last load.\n+          \/\/ some memory operations locating after first_mem, we still\n+          \/\/ take the memory state of the last load.\n@@ -2417,2 +2417,4 @@\n-\/\/ the load we started from is the last load.\n-Node* SuperWord::find_last_mem_state(Node_List* pk, Node* first_mem) {\n+\/\/ the load we started from is the last load. At the same time, the\n+\/\/ function also helps determine if some loads in the pack depend on\n+\/\/ early memory operations which locate after first_mem.\n+Node* SuperWord::find_last_mem_state(Node_List* pk, Node* first_mem, bool &is_dependent) {\n@@ -2424,0 +2426,2 @@\n+      \/\/ Determine if the load pack is dependent on some memory operations locating after first_mem.\n+      is_dependent |= !independent(current, ld);\n@@ -2432,16 +2436,0 @@\n-\/\/ Determine if the load pack is dependent on the last_mem.\n-bool SuperWord::dependent_on_last_mem(Node* last_mem, Node_List* pk) {\n-  if (!last_mem->is_Mem() || !in_bb(last_mem)) {\n-    return false;\n-  }\n-\n-  for (uint i = 0; i < pk->size(); i++) {\n-    Node* ld = pk->at(i);\n-    if (ld->in(MemNode::Memory) == last_mem && !independent(last_mem, ld)) {\n-      return true;\n-    }\n-  }\n-\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":10,"deletions":22,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -551,3 +551,1 @@\n-  Node* find_last_mem_state(Node_List* pk, Node* first_mem);\n-  \/\/ Determine if the load pack is dependent on the last_mem.\n-  bool dependent_on_last_mem(Node* last_mem, Node_List* pk);\n+  Node* find_last_mem_state(Node_List* pk, Node* first_mem, bool &is_dependent);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8290910\n+ * @bug 8290910 8293216\n@@ -31,2 +31,6 @@\n- * @run main\/othervm -Xcomp -Xbatch -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestPickLastMemoryState::*\n- *                   compiler.loopopts.superword.TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ *                   -Xbatch -XX:MaxVectorSize=16 compiler.loopopts.superword.TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ *                   -Xbatch -XX:MaxVectorSize=32 compiler.loopopts.superword.TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ *                   -Xbatch compiler.loopopts.superword.TestPickLastMemoryState\n@@ -39,0 +43,1 @@\n+    static final int M = 32;\n@@ -41,1 +46,1 @@\n-    static long[] golden_sum = {22154, 44050, 66167, 88359, 110684, 132686, 154755, 176703, 198872, 220874};\n+    static float a[] = new float[M];\n@@ -43,1 +48,19 @@\n-    static void iMeth() {\n+    static void f() {\n+        int b[] = new int[M];\n+        for (int h = 1; h < 32; h++) {\n+            a[h] = b[h - 1]--;\n+            b[h]--;\n+        }\n+        boolean c[] = new boolean[M];\n+    }\n+\n+    static void test0() throws Exception {\n+        f();\n+        double s = checkSum(a);\n+        System.out.println(s);\n+        if (s < -31 || s > -29) {\n+            throw new Exception(\"expected s: -30, actual s: \" + s);\n+        }\n+    }\n+\n+    static void test1() {\n@@ -58,0 +81,52 @@\n+    static void test2() {\n+        int i1 , i2 = -222, iArr[] = new int[N];\n+        init(iArr, 212);\n+        for (i1 = 6; i1 < 227; i1++) {\n+            iArr[i1] += lArrFld[i1]++;\n+            iArr[i1 + 2] -= (i2++);\n+        }\n+        iMeth_check_sum += checkSum(iArr);\n+    }\n+\n+    static void test3() {\n+        int i1 , i2 = -222, iArr[] = new int[N];\n+        init(iArr, 212);\n+        for (i1 = 6; i1 < 227; i1++) {\n+            iArr[i1-2] += lArrFld[i1]++;\n+            iArr[i1] -= (i2++);\n+        }\n+        iMeth_check_sum += checkSum(iArr);\n+    }\n+\n+    static void test4() {\n+        int i1 , i2 = -222, iArr[] = new int[N];\n+        init(iArr, 212);\n+        for (i1 = 6; i1 < 227; i1++) {\n+            iArr[i1-3] += lArrFld[i1]++;\n+            iArr[i1] -= (i2++);\n+        }\n+        iMeth_check_sum += checkSum(iArr);\n+    }\n+\n+    static void test5() {\n+        int i1 , i2 = -222, i3 = -100, iArr[] = new int[N];\n+        init(iArr, 212);\n+        for (i1 = 6; i1 < 227; i1++) {\n+            iArr[i1] += lArrFld[i1]++;\n+            iArr[i1+2] -= (i3++);\n+            iArr[i1+16] -= (i2++);\n+        }\n+        iMeth_check_sum += checkSum(iArr);\n+    }\n+\n+    static void test6() {\n+        int i1 , i2 = -222, i3 = -100, iArr[] = new int[N];\n+        init(iArr, 212);\n+        for (i1 = 6; i1 < 227; i1++) {\n+            iArr[i1] += lArrFld[i1]++;\n+            iArr[i1+1] -= (i3++);\n+            iArr[i1+32] -= (i2++);\n+        }\n+        iMeth_check_sum += checkSum(iArr);\n+    }\n+\n@@ -72,0 +147,8 @@\n+    static double checkSum(float[] a) {\n+        double sum = 0;\n+        for (int j = 0; j < a.length; j++) {\n+            sum += a[j];\n+        }\n+        return sum;\n+    }\n+\n@@ -79,10 +162,3 @@\n-    static void test() {\n-        for (int i = 0; i < 10; i++) {\n-            iMeth();\n-            if (iMeth_check_sum != golden_sum[i]) {\n-                throw new RuntimeException(\"iMeth wrong result at \" + i + \": \" + iMeth_check_sum);\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] strArr) {\n+    public static void main(String[] strArr)  throws Exception {\n+        test0();\n+        test0();\n@@ -91,1 +167,24 @@\n-            test();\n+            test1();\n+            if (iMeth_check_sum != 22154) {\n+                throw new RuntimeException(\"iMeth wrong result at test1: \" + iMeth_check_sum);\n+            }\n+            test2();\n+            if (iMeth_check_sum != 44246) {\n+                throw new RuntimeException(\"iMeth wrong result at test2: \" + iMeth_check_sum);\n+            }\n+            test3();\n+            if (iMeth_check_sum != 66171) {\n+                throw new RuntimeException(\"iMeth wrong result at test3: \" + iMeth_check_sum);\n+            }\n+            test4();\n+            if (iMeth_check_sum != 88309) {\n+                throw new RuntimeException(\"iMeth wrong result at test4: \" + iMeth_check_sum);\n+            }\n+            test5();\n+            if (iMeth_check_sum != 109251) {\n+                throw new RuntimeException(\"iMeth wrong result at test5: \" + iMeth_check_sum);\n+            }\n+            test6();\n+            if (iMeth_check_sum != 130073) {\n+                throw new RuntimeException(\"iMeth wrong result at test6: \" + iMeth_check_sum);\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPickLastMemoryState.java","additions":115,"deletions":16,"binary":false,"changes":131,"status":"modified"}]}