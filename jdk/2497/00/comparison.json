{"files":[{"patch":"@@ -85,2 +85,0 @@\n-  static inline const bm_word_t load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  bm_word_t old_val = load_word_ordered(addr, memory_order_conservative);\n+  bm_word_t old_val = Atomic::load(addr);\n@@ -57,1 +57,1 @@\n-    const bm_word_t cur_val = Atomic::cmpxchg(addr, old_val, new_val, memory_order_conservative);\n+    const bm_word_t cur_val = Atomic::cmpxchg(addr, old_val, new_val, memory_order_relaxed);\n@@ -74,1 +74,1 @@\n-  bm_word_t old_val = load_word_ordered(addr, memory_order_conservative);\n+  bm_word_t old_val = Atomic::load(addr);\n@@ -84,1 +84,1 @@\n-    const bm_word_t cur_val = Atomic::cmpxchg(addr, old_val, new_val, memory_order_conservative);\n+    const bm_word_t cur_val = Atomic::cmpxchg(addr, old_val, new_val, memory_order_relaxed);\n@@ -110,12 +110,0 @@\n-inline const ShenandoahMarkBitMap::bm_word_t ShenandoahMarkBitMap::load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order) {\n-  if (memory_order == memory_order_relaxed || memory_order == memory_order_release) {\n-    return Atomic::load(addr);\n-  } else {\n-    assert(memory_order == memory_order_acq_rel ||\n-           memory_order == memory_order_acquire ||\n-           memory_order == memory_order_conservative,\n-           \"unexpected memory ordering\");\n-    return Atomic::load_acquire(addr);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.inline.hpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"}]}