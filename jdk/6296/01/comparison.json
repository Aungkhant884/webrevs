{"files":[{"patch":"@@ -79,2 +79,3 @@\n-     * The key is the AlgorithmId of the algorithm, and the value is the name of\n-     * the field or attribute.\n+     * The key is the AlgorithmId of the algorithm, and the value is a record\n+     * containing the name of the field or attribute and whether the key\n+     * should also be checked (ex: if it is a signature algorithm).\n@@ -82,1 +83,2 @@\n-    private Map<AlgorithmId, String> algorithms = new HashMap<>();\n+    private record AlgorithmInfo(String field, boolean checkKey) {}\n+    private Map<AlgorithmId, AlgorithmInfo> algorithms = new HashMap<>();\n@@ -353,1 +355,2 @@\n-            algorithms.put(digestAlgorithmId, \"SignerInfo digestAlgorithm field\");\n+            algorithms.put(digestAlgorithmId,\n+                new AlgorithmInfo(\"SignerInfo digestAlgorithm field\", false));\n@@ -424,1 +427,2 @@\n-                    \"SignerInfo digestEncryptionAlgorithm field\");\n+                    new AlgorithmInfo(\n+                        \"SignerInfo digestEncryptionAlgorithm field\", true));\n@@ -680,1 +684,2 @@\n-        algorithms.put(digestAlgId, \"TimestampToken digestAlgorithm field\");\n+        algorithms.put(digestAlgId,\n+            new AlgorithmInfo(\"TimestampToken digestAlgorithm field\", false));\n@@ -737,1 +742,1 @@\n-        Map<AlgorithmId, String> algorithms = new HashMap<>();\n+        Map<AlgorithmId, AlgorithmInfo> algorithms = new HashMap<>();\n@@ -744,3 +749,4 @@\n-            for (Map.Entry<AlgorithmId, String> algorithm : algorithms.entrySet()) {\n-                params.setExtendedExceptionMsg(name, algorithm.getValue());\n-                AlgorithmId algId = algorithm.getKey();\n+            for (var algEntry : algorithms.entrySet()) {\n+                AlgorithmInfo info = algEntry.getValue();\n+                params.setExtendedExceptionMsg(name, info.field());\n+                AlgorithmId algId = algEntry.getKey();\n@@ -748,1 +754,1 @@\n-                    algId.getParameters(), params);\n+                    algId.getParameters(), params, info.checkKey());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.security.cert.X509CRL;\n@@ -60,1 +59,0 @@\n-import sun.security.x509.X509CRLImpl;\n@@ -229,1 +227,1 @@\n-                dac.permits(trustedPubKey.getAlgorithm(), cp);\n+                dac.permits(trustedPubKey.getAlgorithm(), cp, true);\n@@ -235,1 +233,1 @@\n-            dac.permits(currSigAlg, currSigAlgParams, cp);\n+            dac.permits(currSigAlg, currSigAlgParams, cp, true);\n@@ -365,23 +363,0 @@\n-    \/**\n-     * Check the signature algorithm with the specified public key.\n-     *\n-     * @param key the public key to verify the CRL signature\n-     * @param crl the target CRL\n-     * @param variant the Validator variant of the operation. A null value\n-     *                passed will set it to Validator.GENERIC.\n-     * @param anchor the trust anchor selected to validate the CRL issuer\n-     *\/\n-    static void check(PublicKey key, X509CRL crl, String variant,\n-                      TrustAnchor anchor) throws CertPathValidatorException {\n-\n-        X509CRLImpl x509CRLImpl = null;\n-        try {\n-            x509CRLImpl = X509CRLImpl.toImpl(crl);\n-        } catch (CRLException ce) {\n-            throw new CertPathValidatorException(ce);\n-        }\n-\n-        AlgorithmId algorithmId = x509CRLImpl.getSigAlgId();\n-        check(key, algorithmId, variant, anchor);\n-    }\n-\n@@ -402,1 +377,1 @@\n-            new CertPathConstraintsParameters(key, variant, anchor, null));\n+            new CertPathConstraintsParameters(key, variant, anchor, null), true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":3,"deletions":28,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -656,1 +656,2 @@\n-            AlgorithmChecker.check(prevKey, crl, variant, anchor);\n+            AlgorithmChecker.check(prevKey, crlImpl.getSigAlgId(),\n+                                   variant, anchor);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/DistributionPointFetcher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -195,3 +195,3 @@\n-        ConstraintsParameters cp) throws CertPathValidatorException {\n-\n-        permits(algorithm, cp);\n+            ConstraintsParameters cp, boolean checkKey)\n+            throws CertPathValidatorException {\n+        permits(algorithm, cp, checkKey);\n@@ -222,1 +222,1 @@\n-            permits(digestAlg, cp);\n+            permits(digestAlg, cp, false);\n@@ -228,1 +228,1 @@\n-                    permits(mgfDigestAlg, cp);\n+                    permits(mgfDigestAlg, cp, false);\n@@ -236,8 +236,8 @@\n-    public final void permits(String algorithm, ConstraintsParameters cp)\n-            throws CertPathValidatorException {\n-\n-        \/\/ Check if named curves in the key are disabled.\n-        for (Key key : cp.getKeys()) {\n-            for (String curve : getNamedCurveFromKey(key)) {\n-                if (!checkAlgorithm(disabledAlgorithms, curve, decomposer)) {\n-                    throw new CertPathValidatorException(\n+    public final void permits(String algorithm, ConstraintsParameters cp,\n+            boolean checkKey) throws CertPathValidatorException {\n+        if (checkKey) {\n+            \/\/ Check if named curves in the key are disabled.\n+            for (Key key : cp.getKeys()) {\n+                for (String curve : getNamedCurveFromKey(key)) {\n+                    if (!checkAlgorithm(disabledAlgorithms, curve, decomposer)) {\n+                        throw new CertPathValidatorException(\n@@ -247,0 +247,1 @@\n+                    }\n@@ -250,2 +251,1 @@\n-\n-        algorithmConstraints.permits(algorithm, cp);\n+        algorithmConstraints.permits(algorithm, cp, checkKey);\n@@ -484,2 +484,2 @@\n-        public void permits(String algorithm, ConstraintsParameters cp)\n-                throws CertPathValidatorException {\n+        public void permits(String algorithm, ConstraintsParameters cp,\n+                boolean checkKey) throws CertPathValidatorException {\n@@ -499,2 +499,4 @@\n-            for (Key key : cp.getKeys()) {\n-                algorithms.add(key.getAlgorithm());\n+            if (checkKey) {\n+                for (Key key : cp.getKeys()) {\n+                    algorithms.add(key.getAlgorithm());\n+                }\n@@ -510,0 +512,3 @@\n+                    if (!checkKey && constraint instanceof KeySizeConstraint) {\n+                        continue;\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    public JarConstraintsParameters(List<X509Certificate> chain, Timestamp timestamp) {\n+    public JarConstraintsParameters(List<X509Certificate> chain, Date timestamp) {\n@@ -105,6 +105,1 @@\n-        if (timestamp != null) {\n-            addToCertsAndKeys(timestamp.getSignerCertPath());\n-            this.timestamp = timestamp.getTimestamp();\n-        } else {\n-            this.timestamp = null;\n-        }\n+        this.timestamp = timestamp;\n@@ -181,1 +176,1 @@\n-        return message;\n+        return message == null ? \".\" : message;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/JarConstraintsParameters.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-                           .permits(digest.getAlgorithm(), params);\n+                           .permits(digest.getAlgorithm(), params, false);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ManifestEntryVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -386,1 +386,1 @@\n-                    .jarConstraints().permits(algorithm, params);\n+                    .jarConstraints().permits(algorithm, params, false);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1021,1 +1021,2 @@\n-                                c.setTime(tsTokenInfo.getDate());\n+                                Date tsDate = tsTokenInfo.getDate();\n+                                c.setTime(tsDate);\n@@ -1023,1 +1024,5 @@\n-                                    new JarConstraintsParameters(chain, si.getTimestamp());\n+                                    new JarConstraintsParameters(chain, tsDate);\n+                                JarConstraintsParameters jcpts =\n+                                    new JarConstraintsParameters(\n+                                        tsSi.getCertificateChain(tsToken),\n+                                        tsDate);\n@@ -1032,3 +1037,3 @@\n-                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcp),\n-                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcp),\n-                                        verifyWithWeak(tsKey, jcp));\n+                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcpts),\n+                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcpts),\n+                                        verifyWithWeak(tsKey, jcpts));\n@@ -1374,1 +1379,1 @@\n-            JAR_DISABLED_CHECK.permits(alg, jcp);\n+            JAR_DISABLED_CHECK.permits(alg, jcp, false);\n@@ -1380,1 +1385,1 @@\n-            LEGACY_CHECK.permits(alg, jcp);\n+            LEGACY_CHECK.permits(alg, jcp, false);\n@@ -1402,1 +1407,1 @@\n-            JAR_DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+            JAR_DISABLED_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1408,1 +1413,1 @@\n-            LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+            LEGACY_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1425,1 +1430,1 @@\n-            JAR_DISABLED_CHECK.permits(alg, jcp);\n+            JAR_DISABLED_CHECK.permits(alg, jcp, false);\n@@ -1427,1 +1432,1 @@\n-                LEGACY_CHECK.permits(alg, jcp);\n+                LEGACY_CHECK.permits(alg, jcp, false);\n@@ -1454,1 +1459,1 @@\n-            JAR_DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+            JAR_DISABLED_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1456,1 +1461,1 @@\n-                LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+                LEGACY_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1468,1 +1473,1 @@\n-            CERTPATH_DISABLED_CHECK.permits(key.getAlgorithm(), cpcp);\n+            CERTPATH_DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n@@ -1473,1 +1478,1 @@\n-            LEGACY_CHECK.permits(key.getAlgorithm(), cpcp);\n+            LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n@@ -1486,1 +1491,1 @@\n-            CERTPATH_DISABLED_CHECK.permits(alg, cpcp);\n+            CERTPATH_DISABLED_CHECK.permits(alg, cpcp, false);\n@@ -1491,1 +1496,1 @@\n-            LEGACY_CHECK.permits(alg, cpcp);\n+            LEGACY_CHECK.permits(alg, cpcp, false);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":22,"deletions":17,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- *      8247960 8242068 8269039\n+ *      8247960 8242068 8269039 8275887\n@@ -343,0 +343,1 @@\n+                        .shouldNotMatch(\"Signature.*(disabled)\")\n@@ -359,0 +360,2 @@\n+                        .shouldNotContain(\"option is considered a security \" +\n+                            \"risk and is disabled\")\n@@ -422,0 +425,11 @@\n+                        .shouldNotContain(\"The SHA-256 algorithm specified \" +\n+                            \"for the -digestalg option is considered a \" +\n+                            \"security risk\")\n+                        .shouldNotContain(\"The SHA256withRSA algorithm \" +\n+                            \"specified for the -sigalg option is considered \" +\n+                            \"a security risk\")\n+                        .shouldNotContain(\"The SHA-256 algorithm specified \" +\n+                            \"for the -tsadigestalg option is considered a \" +\n+                            \"security risk\")\n+                        .shouldContain(\"The RSA signing key has a keysize \" +\n+                            \"of 1024 which is considered a security risk\")\n@@ -676,1 +690,1 @@\n-                .shouldMatch(\"SignatureException:.*keysize\");\n+                .shouldMatch(\"SignatureException:.*MD5\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}