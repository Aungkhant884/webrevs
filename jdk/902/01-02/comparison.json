{"files":[{"patch":"@@ -1045,9 +1045,0 @@\n-void ShenandoahBarrierSetC2::maybe_step_over_cmpp_inputs(Node*& in1, Node*& in2) const {\n-  \/\/ If first input is NULL, then skip the LRB barriers (except native) on the second input\n-  if (in1->bottom_type() == TypePtr::NULL_PTR &&\n-      !((in2->Opcode() == Op_ShenandoahLoadReferenceBarrier) &&\n-        ((ShenandoahLoadReferenceBarrierNode*)in2)->is_native())) {\n-    in2 = step_over_gc_barrier(in2);\n-  }\n-}\n-\n@@ -1071,2 +1062,13 @@\n-    maybe_step_over_cmpp_inputs(in1, in2);\n-    maybe_step_over_cmpp_inputs(in2, in1);\n+\n+    \/\/ If one input is NULL, then step over the barriers (except LRB native) on the other input\n+    if (in1->bottom_type() == TypePtr::NULL_PTR &&\n+        !((in2->Opcode() == Op_ShenandoahLoadReferenceBarrier) &&\n+          ((ShenandoahLoadReferenceBarrierNode*)in2)->is_native())) {\n+      in2 = step_over_gc_barrier(in2);\n+    }\n+    if (in2->bottom_type() == TypePtr::NULL_PTR &&\n+        !((in1->Opcode() == Op_ShenandoahLoadReferenceBarrier) &&\n+          ((ShenandoahLoadReferenceBarrierNode*)in1)->is_native())) {\n+      in1 = step_over_gc_barrier(in1);\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -84,2 +84,0 @@\n-  void maybe_step_over_cmpp_inputs(Node*& in1, Node*& in2) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}