{"files":[{"patch":"@@ -109,11 +109,0 @@\n-JVMTI_BC_SRCDIR := $(TOPDIR)\/src\/hotspot\/share\/interpreter\/zero\n-\n-ifeq ($(call check-jvm-feature, zero), true)\n-  $(eval $(call SetupXslTransform, bytecodeInterpreterWithChecks.cpp, \\\n-      XML_FILE := $(JVMTI_BC_SRCDIR)\/bytecodeInterpreterWithChecks.xml, \\\n-      XSL_FILE := $(JVMTI_BC_SRCDIR)\/bytecodeInterpreterWithChecks.xsl, \\\n-      OUTPUT_DIR := $(JVMTI_OUTPUTDIR), \\\n-      DEPS := $(JVMTI_BC_SRCDIR)\/bytecodeInterpreter.cpp, \\\n-  ))\n-endif\n-\n","filename":"make\/hotspot\/gensrc\/GensrcJvmti.gmk","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -73,4 +73,5 @@\n-  if (JvmtiExport::can_post_interpreter_events())\n-    BytecodeInterpreter::runWithChecks(&start_msg);\n-  else\n-    BytecodeInterpreter::run(&start_msg);\n+  if (JvmtiExport::can_post_interpreter_events()) {\n+    BytecodeInterpreter::run<true>(&start_msg);\n+  } else {\n+    BytecodeInterpreter::run<false>(&start_msg);\n+  }\n@@ -172,4 +173,5 @@\n-    if (JvmtiExport::can_post_interpreter_events())\n-      BytecodeInterpreter::runWithChecks(istate);\n-    else\n-      BytecodeInterpreter::run(istate);\n+    if (JvmtiExport::can_post_interpreter_events()) {\n+      BytecodeInterpreter::run<true>(istate);\n+    } else {\n+      BytecodeInterpreter::run<false>(istate);\n+    }\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -156,1 +157,1 @@\n-#ifdef VM_JVMTI\n+#if INCLUDE_JVMTI\n@@ -166,23 +167,21 @@\n-#define DEBUGGER_SINGLE_STEP_NOTIFY()                                            \\\n-{                                                                                \\\n-      if (_jvmti_interp_events) {                                                \\\n-        if (JvmtiExport::should_post_single_step()) {                            \\\n-          DECACHE_STATE();                                                       \\\n-          SET_LAST_JAVA_FRAME();                                                 \\\n-          ThreadInVMfromJava trans(THREAD);                                      \\\n-          JvmtiExport::at_single_stepping_point(THREAD,                          \\\n-                                          istate->method(),                      \\\n-                                          pc);                                   \\\n-          RESET_LAST_JAVA_FRAME();                                               \\\n-          CACHE_STATE();                                                         \\\n-          if (THREAD->has_pending_popframe() &&                                  \\\n-              !THREAD->pop_frame_in_process()) {                                 \\\n-            goto handle_Pop_Frame;                                               \\\n-          }                                                                      \\\n-          if (THREAD->jvmti_thread_state() &&                                    \\\n-              THREAD->jvmti_thread_state()->is_earlyret_pending()) {             \\\n-            goto handle_Early_Return;                                            \\\n-          }                                                                      \\\n-          opcode = *pc;                                                          \\\n-        }                                                                        \\\n-      }                                                                          \\\n+#define DEBUGGER_SINGLE_STEP_NOTIFY()                                        \\\n+{                                                                            \\\n+    if (JVMTI_ENABLED && JvmtiExport::should_post_single_step()) {           \\\n+      DECACHE_STATE();                                                       \\\n+      SET_LAST_JAVA_FRAME();                                                 \\\n+      ThreadInVMfromJava trans(THREAD);                                      \\\n+      JvmtiExport::at_single_stepping_point(THREAD,                          \\\n+                                           istate->method(),                 \\\n+                                           pc);                              \\\n+      RESET_LAST_JAVA_FRAME();                                               \\\n+      CACHE_STATE();                                                         \\\n+      if (THREAD->has_pending_popframe() &&                                  \\\n+        !THREAD->pop_frame_in_process()) {                                   \\\n+        goto handle_Pop_Frame;                                               \\\n+      }                                                                      \\\n+      if (THREAD->jvmti_thread_state() &&                                    \\\n+          THREAD->jvmti_thread_state()->is_earlyret_pending()) {             \\\n+        goto handle_Early_Return;                                            \\\n+      }                                                                      \\\n+      opcode = *pc;                                                          \\\n+   }                                                                         \\\n@@ -192,1 +191,1 @@\n-#endif\n+#endif \/\/ INCLUDE_JVMTI\n@@ -390,1 +389,0 @@\n- * BytecodeInterpreter::runWithChecks(interpreterState istate)\n@@ -395,3 +393,0 @@\n- *\n- * The runWithChecks is used if JVMTI is enabled.\n- *\n@@ -399,7 +394,7 @@\n-#if defined(VM_JVMTI)\n-void\n-BytecodeInterpreter::runWithChecks(interpreterState istate) {\n-#else\n-void\n-BytecodeInterpreter::run(interpreterState istate) {\n-#endif\n+\n+\/\/ Instantiate two variants of the method for future linking.\n+template void BytecodeInterpreter::run<true>(interpreterState istate);\n+template void BytecodeInterpreter::run<false>(interpreterState istate);\n+\n+template<bool JVMTI_ENABLED>\n+void BytecodeInterpreter::run(interpreterState istate) {\n@@ -420,3 +415,0 @@\n-#ifdef VM_JVMTI\n-  static bool _jvmti_interp_events = 0;\n-#endif\n@@ -558,3 +550,0 @@\n-#ifdef VM_JVMTI\n-      _jvmti_interp_events = JvmtiExport::can_post_interpreter_events();\n-#endif\n@@ -670,9 +659,6 @@\n-      \/\/ Notify jvmti\n-#ifdef VM_JVMTI\n-      if (_jvmti_interp_events) {\n-        \/\/ Whenever JVMTI puts a thread in interp_only_mode, method\n-        \/\/ entry\/exit events are sent for that thread to track stack depth.\n-        if (THREAD->is_interp_only_mode()) {\n-          CALL_VM(InterpreterRuntime::post_method_entry(THREAD),\n-                  handle_exception);\n-        }\n+      \/\/ Notify jvmti.\n+      \/\/ Whenever JVMTI puts a thread in interp_only_mode, method\n+      \/\/ entry\/exit events are sent for that thread to track stack depth.\n+      if (JVMTI_ENABLED && THREAD->is_interp_only_mode()) {\n+        CALL_VM(InterpreterRuntime::post_method_entry(THREAD),\n+                handle_exception);\n@@ -680,1 +666,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -1803,2 +1788,1 @@\n-#ifdef VM_JVMTI\n-          if (_jvmti_interp_events) {\n+          if (JVMTI_ENABLED) {\n@@ -1823,1 +1807,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -1901,2 +1884,1 @@\n-#ifdef VM_JVMTI\n-          if (_jvmti_interp_events) {\n+          if (JVMTI_ENABLED) {\n@@ -1928,1 +1910,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -2407,2 +2388,1 @@\n-#ifdef VM_JVMTI\n-          if (JvmtiExport::can_post_interpreter_events() && THREAD->is_interp_only_mode()) {\n+          if (JVMTI_ENABLED && THREAD->is_interp_only_mode()) {\n@@ -2411,1 +2391,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -2469,2 +2448,1 @@\n-#ifdef VM_JVMTI\n-        if (JvmtiExport::can_post_interpreter_events() && THREAD->is_interp_only_mode()) {\n+        if (JVMTI_ENABLED && THREAD->is_interp_only_mode()) {\n@@ -2473,1 +2451,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -2539,2 +2516,1 @@\n-#ifdef VM_JVMTI\n-          if (JvmtiExport::can_post_interpreter_events() && THREAD->is_interp_only_mode()) {\n+          if (JVMTI_ENABLED && THREAD->is_interp_only_mode()) {\n@@ -2543,1 +2519,0 @@\n-#endif \/* VM_JVMTI *\/\n@@ -2966,2 +2941,0 @@\n-\n-    \/\/\n@@ -2970,0 +2943,2 @@\n+    \/\/ Whenever JVMTI puts a thread in interp_only_mode, method\n+    \/\/ entry\/exit events are sent for that thread to track stack depth.\n@@ -2971,14 +2946,5 @@\n-\n-#ifdef VM_JVMTI\n-      if (_jvmti_interp_events) {\n-        \/\/ Whenever JVMTI puts a thread in interp_only_mode, method\n-        \/\/ entry\/exit events are sent for that thread to track stack depth.\n-        if ( !suppress_exit_event && THREAD->is_interp_only_mode() ) {\n-          {\n-            \/\/ Prevent any HandleMarkCleaner from freeing our live handles\n-            HandleMark __hm(THREAD);\n-            CALL_VM_NOCHECK(InterpreterRuntime::post_method_exit(THREAD));\n-          }\n-        }\n-      }\n-#endif \/* VM_JVMTI *\/\n+    if (JVMTI_ENABLED && !suppress_exit_event && THREAD->is_interp_only_mode()) {\n+      \/\/ Prevent any HandleMarkCleaner from freeing our live handles\n+      HandleMark __hm(THREAD);\n+      CALL_VM_NOCHECK(InterpreterRuntime::post_method_exit(THREAD));\n+    }\n@@ -3035,7 +3001,0 @@\n-\/*\n- * All the code following this point is only produced once and is not present\n- * in the JVMTI version of the interpreter\n-*\/\n-\n-#ifndef VM_JVMTI\n-\n@@ -3172,2 +3131,0 @@\n-\n-#endif \/\/ JVMTI\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":49,"deletions":92,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -506,3 +506,1 @@\n-\/\/ umm don't like this method modifies its object\n-\n-\/\/ The Interpreter used when\n+template<bool JVMTI_ENABLED>\n@@ -510,2 +508,0 @@\n-\/\/ The interpreter used if JVMTI needs interpreter events\n-static void runWithChecks(interpreterState istate);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,28 +0,0 @@\n-<?xml version=\"1.0\"?> \n-<!-- \n-     Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n-     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-     This code is free software; you can redistribute it and\/or modify it\n-     under the terms of the GNU General Public License version 2 only, as\n-     published by the Free Software Foundation.\n-\n-     This code is distributed in the hope that it will be useful, but WITHOUT\n-     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-     version 2 for more details (a copy is included in the LICENSE file that\n-     accompanied this code).\n-\n-     You should have received a copy of the GNU General Public License version\n-     2 along with this work; if not, write to the Free Software Foundation,\n-     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-     or visit www.oracle.com if you need additional information or have any\n-     questions.\n--->\n-<!DOCTYPE processcode [\n-  <!ELEMENT processcode ANY>\n-]>\n-<processcode>\n-<\/processcode>\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreterWithChecks.xml","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-<?xml version=\"1.0\"?> \n-<!-- \n-     Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n-     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-     This code is free software; you can redistribute it and\/or modify it\n-     under the terms of the GNU General Public License version 2 only, as\n-     published by the Free Software Foundation.\n-\n-     This code is distributed in the hope that it will be useful, but WITHOUT\n-     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-     version 2 for more details (a copy is included in the LICENSE file that\n-     accompanied this code).\n-\n-     You should have received a copy of the GNU General Public License version\n-     2 along with this work; if not, write to the Free Software Foundation,\n-     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-     or visit www.oracle.com if you need additional information or have any\n-     questions.\n--->\n-\n-<xsl:stylesheet xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\" version=\"1.0\">\n-<xsl:output method=\"text\" indent=\"no\" omit-xml-declaration=\"yes\"\/>\n-\n-<xsl:template match=\"processcode\">\n-<xsl:text>\n-#define VM_JVMTI\n-#include \"interpreter\/zero\/bytecodeInterpreter.cpp\"\n-<\/xsl:text>\n-<xsl:text disable-output-escaping = \"yes\">\n-\n-<\/xsl:text>\n-\n-<\/xsl:template>\n-\n-<\/xsl:stylesheet>\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreterWithChecks.xsl","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}