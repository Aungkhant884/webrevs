{"files":[{"patch":"@@ -100,0 +100,1 @@\n+\n@@ -103,1 +104,1 @@\n-        \/\/ randomly chosen starting point within source\n+        \/\/ randomly chosen starting points within source and target\n@@ -107,1 +108,2 @@\n-            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n@@ -113,1 +115,1 @@\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0);\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n@@ -117,1 +119,1 @@\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn) throws Exception {\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n@@ -121,2 +123,3 @@\n-            in.readNBytes(posIn); \/\/ skip bytes till starting point\n-            long reported = in.transferTo(out);\n+            \/\/ skip bytes till starting point\n+            in.readNBytes(posIn);\n+            out.write(new byte[posOut]);\n@@ -124,0 +127,1 @@\n+            long reported = in.transferTo(out);\n@@ -131,2 +135,1 @@\n-\n-            if (!Arrays.equals(inBytes, posIn, posIn + count, outBytes, 0, count))\n+            if (!Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count))\n@@ -134,1 +137,1 @@\n-                        format(\"bytes.length=%s, outBytes.length=%s\", count, outBytes.length));\n+                        format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n","filename":"test\/jdk\/sun\/nio\/ch\/ChannelInputStream\/TransferTo.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}