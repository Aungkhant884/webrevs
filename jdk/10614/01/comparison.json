{"files":[{"patch":"@@ -249,2 +249,1 @@\n-            return BigInteger.valueOf(2).pow(power)\n-                    .multiply(BigInteger.valueOf(coefficient));\n+            return BigInteger.valueOf(coefficient).shiftLeft(power);\n@@ -666,1 +665,1 @@\n-            String powExpr = \"BigInteger.valueOf(2).pow(\" + t.getPower() + \")\";\n+            String powExpr = \".shiftLeft(\" + t.getPower() + \")\";\n@@ -670,2 +669,0 @@\n-            } else if (coefValue == 1) {\n-                termExpr = powExpr;\n@@ -673,1 +670,1 @@\n-                termExpr = powExpr + \".multiply(\" + coefExpr + \")\";\n+                termExpr = coefExpr + powExpr;\n","filename":"make\/jdk\/src\/classes\/build\/tools\/intpoly\/FieldGen.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -332,1 +332,2 @@\n-        BigInteger mod = BigInteger.valueOf(1 << bitsPerLimb);\n+        assert bitsPerLimb < 32;\n+        long limbMask = (1L << bitsPerLimb) - 1;\n@@ -334,1 +335,1 @@\n-            limbs[i] = v.mod(mod).longValue();\n+            limbs[i] = v.intValue() & limbMask;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -307,3 +307,1 @@\n-        p.getX().setValue(p.getY()).setProduct(two);\n-        p.getY().setSum(p.getX());\n-        p.getY().setReduced();\n+        p.getY().setProduct(three);\n@@ -316,2 +314,1 @@\n-        t3.setValue(t2).setProduct(two);\n-        t2.setSum(t3);\n+        t2.setProduct(three);\n@@ -320,1 +317,0 @@\n-        t2.setReduced();\n@@ -323,3 +319,1 @@\n-        t3.setValue(p.getZ()).setProduct(two);\n-        p.getZ().setReduced();\n-        p.getZ().setSum(t3);\n+        p.getZ().setProduct(three);\n@@ -385,3 +379,1 @@\n-        p.getX().setReduced();\n-        p.getZ().setValue(p.getX()).setProduct(two);\n-        p.getX().setSum(p.getZ());\n+        p.getX().setProduct(three);\n@@ -393,3 +385,1 @@\n-        t1.setValue(t2).setProduct(two);\n-        t2.setSum(t1);\n-        t2.setReduced();\n+        t2.setProduct(three);\n@@ -399,3 +389,1 @@\n-        p.getY().setReduced();\n-        t1.setValue(p.getY()).setProduct(two);\n-        p.getY().setSum(t1);\n+        p.getY().setProduct(three);\n@@ -403,2 +391,1 @@\n-        t1.setValue(t0).setProduct(two);\n-        t0.setSum(t1);\n+        t0.setProduct(three);\n@@ -416,2 +403,2 @@\n-        t1.setValue(t3).setProduct(t0);\n-        p.getZ().setSum(t1);\n+        t3.setProduct(t0);\n+        p.getZ().setSum(t3);\n@@ -456,1 +443,0 @@\n-        p.getZ().setValue(p.getX()).setProduct(two);\n@@ -458,2 +444,2 @@\n-        p.getX().setSum(p.getZ());\n-        p.getX().setReduced();\n+        p.getX().setProduct(three);\n+\n@@ -464,3 +450,1 @@\n-        t1.setValue(t2).setSum(t2);\n-        t2.setSum(t1);\n-        t2.setReduced();\n+        t2.setProduct(three);\n@@ -470,2 +454,1 @@\n-        p.getY().setReduced();\n-        t1.setValue(p.getY()).setSum(p.getY());\n+        p.getY().setProduct(three);\n@@ -473,3 +456,1 @@\n-        p.getY().setSum(t1);\n-        t1.setValue(t0).setProduct(two);\n-        t0.setSum(t1);\n+        t0.setProduct(three);\n@@ -487,1 +468,0 @@\n-        t1.setValue(t3).setProduct(t0);\n@@ -489,1 +469,2 @@\n-        p.getZ().setSum(t1);\n+        t3.setProduct(t0);\n+        p.getZ().setSum(t3);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECOperations.java","additions":16,"deletions":35,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,1 +140,1 @@\n-        if (xLSB != x.asBigInteger().mod(BigInteger.valueOf(2)).intValue()) {\n+        if (xLSB != (x.asBigInteger().intValue() & 1)) {\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed25519Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-        if (xLSB != x.asBigInteger().mod(TWO).intValue()) {\n+        if (xLSB != (x.asBigInteger().intValue() & 1)) {\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed448Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}