{"files":[{"patch":"@@ -31,1 +31,1 @@\n-    DEFAULT(LibFallback.DEFAULT_ABI);\n+    DEFAULT(LibFallback.defaultABI());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIABI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        VH_TYPE.set(ffiType, LibFallback.STRUCT_TAG);\n+        VH_TYPE.set(ffiType, LibFallback.structTag());\n@@ -93,9 +93,9 @@\n-        boolean.class, LibFallback.UINT8_TYPE,\n-        byte.class, LibFallback.SINT8_TYPE,\n-        short.class, LibFallback.SINT16_TYPE,\n-        char.class, LibFallback.UINT16_TYPE,\n-        int.class, LibFallback.SINT32_TYPE,\n-        long.class, LibFallback.SINT64_TYPE,\n-        float.class, LibFallback.FLOAT_TYPE,\n-        double.class, LibFallback.DOUBLE_TYPE,\n-        MemorySegment.class, LibFallback.POINTER_TYPE\n+        boolean.class, LibFallback.uint8Type(),\n+        byte.class, LibFallback.sint8Type(),\n+        short.class, LibFallback.sint16Type(),\n+        char.class, LibFallback.uint16Type(),\n+        int.class, LibFallback.sint32Type(),\n+        long.class, LibFallback.sint64Type(),\n+        float.class, LibFallback.floatType(),\n+        double.class, LibFallback.doubleType(),\n+        MemorySegment.class, LibFallback.pointerType()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIType.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                : LibFallback.VOID_TYPE;\n+                : LibFallback.voidType();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,15 +47,14 @@\n-    static final int DEFAULT_ABI = ffi_default_abi();\n-\n-    static final MemorySegment UINT8_TYPE = MemorySegment.ofAddress(ffi_type_uint8());\n-    static final MemorySegment SINT8_TYPE = MemorySegment.ofAddress(ffi_type_sint8());\n-    static final MemorySegment UINT16_TYPE = MemorySegment.ofAddress(ffi_type_uint16());\n-    static final MemorySegment SINT16_TYPE = MemorySegment.ofAddress(ffi_type_sint16());\n-    static final MemorySegment SINT32_TYPE = MemorySegment.ofAddress(ffi_type_sint32());\n-    static final MemorySegment SINT64_TYPE = MemorySegment.ofAddress(ffi_type_sint64());\n-    static final MemorySegment FLOAT_TYPE = MemorySegment.ofAddress(ffi_type_float());\n-    static final MemorySegment DOUBLE_TYPE = MemorySegment.ofAddress(ffi_type_double());\n-    static final MemorySegment POINTER_TYPE = MemorySegment.ofAddress(ffi_type_pointer());\n-\n-    static final MemorySegment VOID_TYPE = MemorySegment.ofAddress(ffi_type_void());\n-    static final short STRUCT_TAG = ffi_type_struct();\n-    private static final long SIZEOF_CIF = sizeofCif();\n+    static int defaultABI() { return NativeConstants.DEFAULT_ABI; }\n+\n+    static MemorySegment uint8Type() { return NativeConstants.UINT8_TYPE; }\n+    static MemorySegment sint8Type() { return NativeConstants.SINT8_TYPE; }\n+    static MemorySegment uint16Type() { return NativeConstants.UINT16_TYPE; }\n+    static MemorySegment sint16Type() { return NativeConstants.SINT16_TYPE; }\n+    static MemorySegment sint32Type() { return NativeConstants.SINT32_TYPE; }\n+    static MemorySegment sint64Type() { return NativeConstants.SINT64_TYPE; }\n+    static MemorySegment floatType() { return NativeConstants.FLOAT_TYPE; }\n+    static MemorySegment doubleType() { return NativeConstants.DOUBLE_TYPE; }\n+    static MemorySegment pointerType() { return NativeConstants.POINTER_TYPE; }\n+    static MemorySegment voidType() { return NativeConstants.VOID_TYPE; }\n+\n+    static short structTag() { return NativeConstants.STRUCT_TAG; }\n@@ -101,1 +100,1 @@\n-        MemorySegment cif = scope.allocate(SIZEOF_CIF);\n+        MemorySegment cif = scope.allocate(NativeConstants.SIZEOF_CIF);\n@@ -196,0 +195,20 @@\n+\n+    \/\/ put these in a separate class to avoid an UnsatisfiedLinkError\n+    \/\/ when LibFallback is initialized but the library is not present\n+    private static class NativeConstants {\n+        static final int DEFAULT_ABI = ffi_default_abi();\n+\n+        static final MemorySegment UINT8_TYPE = MemorySegment.ofAddress(ffi_type_uint8());\n+        static final MemorySegment SINT8_TYPE = MemorySegment.ofAddress(ffi_type_sint8());\n+        static final MemorySegment UINT16_TYPE = MemorySegment.ofAddress(ffi_type_uint16());\n+        static final MemorySegment SINT16_TYPE = MemorySegment.ofAddress(ffi_type_sint16());\n+        static final MemorySegment SINT32_TYPE = MemorySegment.ofAddress(ffi_type_sint32());\n+        static final MemorySegment SINT64_TYPE = MemorySegment.ofAddress(ffi_type_sint64());\n+        static final MemorySegment FLOAT_TYPE = MemorySegment.ofAddress(ffi_type_float());\n+        static final MemorySegment DOUBLE_TYPE = MemorySegment.ofAddress(ffi_type_double());\n+        static final MemorySegment POINTER_TYPE = MemorySegment.ofAddress(ffi_type_pointer());\n+\n+        static final MemorySegment VOID_TYPE = MemorySegment.ofAddress(ffi_type_void());\n+        static final short STRUCT_TAG = ffi_type_struct();\n+        static final long SIZEOF_CIF = sizeofCif();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"}]}