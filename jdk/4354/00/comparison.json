{"files":[{"patch":"@@ -590,1 +590,1 @@\n-                SSLLogger.warning(\"SSLSocket duplex close failed\", ioe);\n+                SSLLogger.warning(\"SSLSocket duplex close failed. Debug info only. Exception details:\", ioe);\n@@ -600,1 +600,1 @@\n-                        SSLLogger.warning(\"SSLSocket close failed\", ioe);\n+                        SSLLogger.warning(\"SSLSocket close failed. Debug info only. Exception details:\", ioe);\n@@ -1137,1 +1137,1 @@\n-                    SSLLogger.warning(\"input stream close failed\", ioe);\n+                    SSLLogger.warning(\"input stream close failed. Debug info only. Exception details:\", ioe);\n@@ -1332,1 +1332,1 @@\n-                    SSLLogger.warning(\"output stream close failed\", ioe);\n+                    SSLLogger.warning(\"output stream close failed. Debug info only. Exception details:\", ioe);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8255148\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates ..\/..\/\n+ * @summary Checks for clarified exception messages for non-fatal SSLSocketImpl exceptions which\n+ *          can be ignored by the user\n+ * @run main IgnorableExceptionMessages\n+ *\/\n+\n+\/*\n+ * This test runs in another process so we can monitor the debug\n+ * results. The OutputAnalyzer must see correct debug output to return a\n+ * success.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.ForceGC;\n+\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLSocket;\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.lang.ref.WeakReference;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class IgnorableExceptionMessages extends SSLSocketTemplate {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            \/\/ A non-empty set of arguments occurs when the \"runTest\" argument\n+            \/\/ is passed to the test via ProcessTools::executeTestJvm.\n+            \/\/\n+            \/\/ This is done because an OutputAnalyzer is unable to read\n+            \/\/ the output of the current running JVM, and must therefore create\n+            \/\/ a test JVM. When this case occurs, it will inherit all specified\n+            \/\/ properties passed to the test JVM - debug flags, tls version, etc.\n+            new IgnorableExceptionMessages().run();\n+        } else {\n+            String clientCipherSuites = \"-Djdk.tls.client.cipherSuites=TLS_RSA_WITH_AES_128_CBC_SHA\";\n+            String serverCipherSuites = \"-Djdk.tls.server.cipherSuites=TLS_RSA_WITH_AES_128_CBC_SHA\";\n+            String javaxDebugFlag = \"-Djavax.net.debug=all\";\n+            String className = \"IgnorableExceptionMessages\";\n+            String extraArgument = \"runTest\"; \/\/ Triggers the test JVM to execute when args.length > 0\n+            List<String> jvmArgs = List.of(clientCipherSuites,\n+                    serverCipherSuites,\n+                    javaxDebugFlag,\n+                    className,\n+                    extraArgument);\n+\n+            OutputAnalyzer output = ProcessTools.executeTestJvm(jvmArgs);\n+\n+            if (output.getExitValue() != 0) {\n+                output.asLines().forEach(System.out::println); \/\/ will\n+                throw new RuntimeException(\"Test JVM process failed\");\n+            }\n+            output.shouldContain(\"SSLSocket close failed. Debug info only. Exception details:\");\n+            output.shouldContain(\"SSLSocket duplex close failed. Debug info only. Exception details:\");\n+        }\n+    }\n+\n+    @Override\n+    protected void runClientApplication(int serverPort) throws Exception {\n+        String urlString = serverAddress.getHostAddress() + serverPort + \"\/\";\n+        URL url = new URL(urlString);\n+\n+        try {\n+            new BufferedReader(new InputStreamReader(url.openStream()));\n+            for(int i = 0; i < 10; i++) {\n+                Thread.sleep(1000);\n+                System.gc();\n+            }\n+        } catch (SSLHandshakeException sslEx) {\n+            System.out.println(sslEx.getCause());\n+            System.out.println(sslEx.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/IgnorableExceptionMessages.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}