{"files":[{"patch":"@@ -102,0 +102,2 @@\n+bool   Arguments::_non_default_modules_options_are_specified = false;\n+\n@@ -1260,0 +1262,1 @@\n+    Arguments::_non_default_modules_options_are_specified = true;\n@@ -1884,1 +1887,2 @@\n-    if (ClassLoader::is_module_observable(\"jdk.internal.vm.ci\")) {\n+    if (ClassLoader::is_module_observable(\"jdk.internal.vm.ci\")\n+         && Arguments::_non_default_modules_options_are_specified) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -267,0 +267,3 @@\n+  \/\/ Set if an internal module property is set. See is_internal_module_property()\n+  static bool _non_default_modules_options_are_specified;\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,4 +25,0 @@\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import jdk.test.whitebox.code.Compiler;\n-\n@@ -36,2 +32,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                          ReplaceCriticalClassesForSubgraphs\n+ * @run main\/othervm\/native ReplaceCriticalClassesForSubgraphs\n@@ -47,2 +42,1 @@\n-        ArrayList<String> tests = new ArrayList<>();\n-        tests.addAll(Arrays.asList(new String[] {\n+        String tests[] = {\n@@ -57,1 +51,0 @@\n-        }));\n@@ -59,13 +52,8 @@\n-        if (!Compiler.isJVMCIEnabled()) {\n-            \/\/ EnableJVMCI appends the jdk.internal.vm.ci module and disables full module graph.\n-            \/\/ Temporarily bypasses these tests with EnableJVMCI until JDK-8266329 is resolved.\n-            tests.addAll(Arrays.asList(new String[] {\n-                \/\/ Tests for archived full module graph. We cannot use whitebox, which requires appending to bootclasspath.\n-                \/\/ VM will disable full module graph if bootclasspath is appended.\n-                \"-nowhitebox -early -notshared -subgraph java\/lang\/Module jdk.internal.module.ArchivedBootLayer\",\n-                \"-nowhitebox -early -notshared -subgraph java\/lang\/ModuleLayer jdk.internal.module.ArchivedBootLayer\",\n-                \"-nowhitebox -subgraph java\/lang\/Module jdk.internal.module.ArchivedBootLayer\",\n-                \"-nowhitebox -subgraph java\/lang\/ModuleLayer jdk.internal.module.ArchivedBootLayer\",\n-            }));\n-        }\n-        return tests.toArray(new String[0]);\n+            \/\/ Tests for archived full module graph. We cannot use whitebox, which requires appending to bootclasspath.\n+            \/\/ VM will disable full module graph if bootclasspath is appended.\n+            \"-nowhitebox -early -notshared -subgraph java\/lang\/Module jdk.internal.module.ArchivedBootLayer\",\n+            \"-nowhitebox -early -notshared -subgraph java\/lang\/ModuleLayer jdk.internal.module.ArchivedBootLayer\",\n+            \"-nowhitebox -subgraph java\/lang\/Module jdk.internal.module.ArchivedBootLayer\",\n+            \"-nowhitebox -subgraph java\/lang\/ModuleLayer jdk.internal.module.ArchivedBootLayer\",\n+        };\n+        return tests;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClassesForSubgraphs.java","additions":10,"deletions":22,"binary":false,"changes":32,"status":"modified"}]}