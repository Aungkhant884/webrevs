{"files":[{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -24,22 +47,2 @@\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                @Override\n-                public void run() {\n-                    JSplitPane splitPane = new JSplitPane();\n-\n-                    frame = new JFrame();\n-                    frame.setDefaultCloseOperation(EXIT_ON_CLOSE);\n-                    frame.setSize(200, 200);\n-                    frame.setLocation(400, 400);\n-                    frame.add(splitPane);\n-                    frame.setExtendedState(MAXIMIZED_BOTH);\n-\n-                    frame.addComponentListener(new ComponentAdapter() {\n-                        @Override\n-                        public void componentResized(ComponentEvent e) {\n-                            System.out.println(\"Component size: \" + e.getComponent().getSize());\n-                            if (e.getComponent().getSize().equals(new Dimension(200, 200))) {\n-                                throw new RuntimeException(\"Test Failed! \" +\n-                                        \"Frame was visible at original size before maximizing\");\n-                            }\n-                        }\n-                    });\n+            SwingUtilities.invokeAndWait(() -> {\n+                JSplitPane splitPane = new JSplitPane();\n@@ -47,1 +50,6 @@\n-                    splitPane.setDividerLocation(1000);\n+                frame = new JFrame();\n+                frame.setDefaultCloseOperation(EXIT_ON_CLOSE);\n+                frame.setSize(ORIGINAL_SIZE);\n+                frame.setLocation(400, 400);\n+                frame.add(splitPane);\n+                frame.setExtendedState(MAXIMIZED_BOTH);\n@@ -49,1 +57,10 @@\n-                    frame.setVisible(true);\n+                frame.addComponentListener(new ComponentAdapter() {\n+                    @Override\n+                    public void componentResized(ComponentEvent e) {\n+                        System.out.println(\"Component size: \" + e.getComponent().getSize());\n+                        if (e.getComponent().getSize().equals(ORIGINAL_SIZE)) {\n+                            throw new RuntimeException(\"Test Failed! \" +\n+                                    \"Frame was visible at original size before maximizing\");\n+                        }\n+                    }\n+                });\n@@ -51,1 +68,2 @@\n-                }\n+                splitPane.setDividerLocation(1000);\n+                frame.setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/JFrame\/MaximizeWindowTest.java","additions":43,"deletions":25,"binary":false,"changes":68,"status":"modified"}]}