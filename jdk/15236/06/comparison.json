{"files":[{"patch":"@@ -670,0 +670,38 @@\n+        \/\/ Manage the extended state when showing\n+        if (visible) {\n+                \/* Frame or Dialog should be set property WINDOW_FULLSCREENABLE to true if the\n+                Frame or Dialog is resizable.\n+                *\/\n+            final boolean resizable = (target instanceof Frame) ? ((Frame)target).isResizable() :\n+                    ((target instanceof Dialog) ? ((Dialog)target).isResizable() : false);\n+            if (resizable) {\n+                setCanFullscreen(true);\n+            }\n+\n+            \/\/ Apply the extended state as expected in shared code\n+            if (target instanceof Frame) {\n+                if (!wasMaximized && isMaximized()) {\n+                    \/\/ setVisible could have changed the native maximized state\n+                    deliverZoom(true);\n+                } else {\n+                    int frameState = ((Frame)target).getExtendedState();\n+                    if ((frameState & Frame.ICONIFIED) != 0) {\n+                        \/\/ Treat all state bit masks with ICONIFIED bit as ICONIFIED state.\n+                        frameState = Frame.ICONIFIED;\n+                    }\n+\n+                    switch (frameState) {\n+                        case Frame.ICONIFIED:\n+                            execute(CWrapper.NSWindow::miniaturize);\n+                            break;\n+                        case Frame.MAXIMIZED_BOTH:\n+                            maximize();\n+                            break;\n+                        default: \/\/ NORMAL\n+                            unmaximize(); \/\/ in case it was maximized, otherwise this is a no-op\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -730,38 +768,0 @@\n-        \/\/ Manage the extended state when showing\n-        if (visible) {\n-            \/* Frame or Dialog should be set property WINDOW_FULLSCREENABLE to true if the\n-            Frame or Dialog is resizable.\n-            **\/\n-            final boolean resizable = (target instanceof Frame) ? ((Frame)target).isResizable() :\n-            ((target instanceof Dialog) ? ((Dialog)target).isResizable() : false);\n-            if (resizable) {\n-                setCanFullscreen(true);\n-            }\n-\n-            \/\/ Apply the extended state as expected in shared code\n-            if (target instanceof Frame) {\n-                if (!wasMaximized && isMaximized()) {\n-                    \/\/ setVisible could have changed the native maximized state\n-                    deliverZoom(true);\n-                } else {\n-                    int frameState = ((Frame)target).getExtendedState();\n-                    if ((frameState & Frame.ICONIFIED) != 0) {\n-                        \/\/ Treat all state bit masks with ICONIFIED bit as ICONIFIED state.\n-                        frameState = Frame.ICONIFIED;\n-                    }\n-\n-                    switch (frameState) {\n-                        case Frame.ICONIFIED:\n-                            execute(CWrapper.NSWindow::miniaturize);\n-                            break;\n-                        case Frame.MAXIMIZED_BOTH:\n-                            maximize();\n-                            break;\n-                        default: \/\/ NORMAL\n-                            unmaximize(); \/\/ in case it was maximized, otherwise this is a no-op\n-                            break;\n-                    }\n-                }\n-            }\n-        }\n-\n@@ -1026,1 +1026,0 @@\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformWindow.java","additions":38,"deletions":39,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @summary setExtendedFrame not executed immediately\n+ * @run main MaximizeWindowTest\n+ *\/\n+@SuppressWarnings(\"serial\")\n+public class MaximizeWindowTest extends JFrame {\n+    private static JFrame frame;\n+    private static final Dimension ORIGINAL_SIZE = new Dimension(200, 200);\n+\n+    public static void main(String[] arguments) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                JSplitPane splitPane = new JSplitPane();\n+\n+                frame = new JFrame();\n+                frame.setDefaultCloseOperation(EXIT_ON_CLOSE);\n+                frame.setSize(ORIGINAL_SIZE);\n+                frame.setLocation(400, 400);\n+                frame.add(splitPane);\n+                frame.setExtendedState(MAXIMIZED_BOTH);\n+\n+                frame.addComponentListener(new ComponentAdapter() {\n+                    @Override\n+                    public void componentResized(ComponentEvent e) {\n+                        System.out.println(\"Component size: \" + e.getComponent().getSize());\n+                        if (e.getComponent().getSize().equals(ORIGINAL_SIZE)) {\n+                            throw new RuntimeException(\"Test Failed! \" +\n+                                    \"Frame was visible at original size before maximizing\");\n+                        }\n+                    }\n+                });\n+\n+                splitPane.setDividerLocation(1000);\n+                frame.setVisible(true);\n+            });\n+\n+            robot.delay(1000);\n+\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/MaximizeWindowTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}