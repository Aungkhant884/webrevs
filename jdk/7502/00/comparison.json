{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.Optional;\n@@ -63,0 +64,9 @@\n+\n+        if (Optional.ofNullable(System.getProperty(\"jpackage.test.noexit\")).map(\n+                Boolean::parseBoolean).orElse(false)) {\n+            trace(\"noexit\");\n+            var lock = new Object();\n+            synchronized (lock) {\n+                lock.wait();\n+            }\n+        }\n@@ -90,1 +100,2 @@\n-        Path outputFilePath = Path.of(\"appOutput.txt\");\n+        Path outputFilePath = Path.of(Optional.ofNullable(System.getProperty(\n+                \"jpackage.test.appOutput\")).orElse(\"appOutput.txt\"));\n@@ -104,1 +115,1 @@\n-            return outputFilePath;\n+            return outputFilePath.toAbsolutePath();\n@@ -112,1 +123,1 @@\n-        return Path.of(System.getProperty(\"user.home\")).resolve(outputFilePath);\n+        return Path.of(System.getProperty(\"user.home\")).resolve(outputFilePath).toAbsolutePath();\n","filename":"test\/jdk\/tools\/jpackage\/apps\/Hello.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -34,0 +35,3 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n@@ -35,1 +39,0 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n@@ -37,0 +40,1 @@\n+import static jdk.jpackage.test.Functional.ThrowingFunction.toFunction;\n@@ -38,1 +42,1 @@\n-public final class AdditionalLauncher {\n+public class AdditionalLauncher {\n@@ -46,1 +50,1 @@\n-    public AdditionalLauncher setDefaultArguments(String... v) {\n+    final public AdditionalLauncher setDefaultArguments(String... v) {\n@@ -51,1 +55,1 @@\n-    public AdditionalLauncher addDefaultArguments(String... v) {\n+    final public AdditionalLauncher addDefaultArguments(String... v) {\n@@ -60,1 +64,1 @@\n-    public AdditionalLauncher setJavaOptions(String... v) {\n+    final public AdditionalLauncher setJavaOptions(String... v) {\n@@ -65,1 +69,1 @@\n-    public AdditionalLauncher addJavaOptions(String... v) {\n+    final public AdditionalLauncher addJavaOptions(String... v) {\n@@ -74,1 +78,2 @@\n-    public AdditionalLauncher addRawProperties(Map.Entry<String, String>... v) {\n+    final public AdditionalLauncher addRawProperties(\n+            Map.Entry<String, String>... v) {\n@@ -78,1 +83,1 @@\n-    public AdditionalLauncher addRawProperties(\n+    final public AdditionalLauncher addRawProperties(\n@@ -84,1 +89,1 @@\n-    public AdditionalLauncher setShortcuts(boolean menu, boolean shortcut) {\n+    final public AdditionalLauncher setShortcuts(boolean menu, boolean shortcut) {\n@@ -90,1 +95,1 @@\n-    public AdditionalLauncher setIcon(Path iconPath) {\n+    final public AdditionalLauncher setIcon(Path iconPath) {\n@@ -99,1 +104,1 @@\n-    public AdditionalLauncher setNoIcon() {\n+    final public AdditionalLauncher setNoIcon() {\n@@ -104,1 +109,1 @@\n-    public AdditionalLauncher setPersistenceHandler(\n+    final public AdditionalLauncher setPersistenceHandler(\n@@ -114,1 +119,1 @@\n-    public void applyTo(JPackageCommand cmd) {\n+    final public void applyTo(JPackageCommand cmd) {\n@@ -119,2 +124,1 @@\n-    public void applyTo(PackageTest test) {\n-        test.addLauncherName(name);\n+    final public void applyTo(PackageTest test) {\n@@ -125,0 +129,25 @@\n+    static void forEachAdditionalLauncher(JPackageCommand cmd,\n+            BiConsumer<String, Path> consumer) {\n+        var argIt = cmd.getAllArguments().iterator();\n+        while (argIt.hasNext()) {\n+            if (\"--add-launcher\".equals(argIt.next())) {\n+                \/\/ <launcherName>=<propFile>\n+                var arg = argIt.next();\n+                var items = arg.split(\"=\", 2);\n+                consumer.accept(items[0], Path.of(items[1]));\n+            }\n+        }\n+    }\n+\n+    static PropertyFile getAdditionalLauncherProperties(\n+            JPackageCommand cmd, String launcherName) {\n+        PropertyFile shell[] = new PropertyFile[1];\n+        forEachAdditionalLauncher(cmd, (name, propertiesFilePath) -> {\n+            if (name.equals(launcherName)) {\n+                shell[0] = toFunction(PropertyFile::new).apply(\n+                        propertiesFilePath);\n+            }\n+        });\n+        return Optional.of(shell[0]).get();\n+    }\n+\n@@ -126,1 +155,11 @@\n-        final Path propsFile = TKit.workDir().resolve(name + \".properties\");\n+        Path propsFile = TKit.workDir().resolve(name + \".properties\");\n+        if (Files.exists(propsFile)) {\n+            \/\/ File with the given name exists, pick another name that\n+            \/\/ will not reference existing file.\n+            try {\n+                propsFile = TKit.createTempFile(propsFile);\n+                TKit.deleteIfExists(propsFile);\n+            } catch (IOException ex) {\n+                Functional.rethrowUnchecked(ex);\n+            }\n+        }\n@@ -245,1 +284,1 @@\n-    private void verify(JPackageCommand cmd) throws IOException {\n+    protected void verify(JPackageCommand cmd) throws IOException {\n@@ -258,8 +297,54 @@\n-        HelloApp.assertApp(launcherPath)\n-        .addDefaultArguments(Optional\n-                .ofNullable(defaultArguments)\n-                .orElseGet(() -> List.of(cmd.getAllArgumentValues(\"--arguments\"))))\n-        .addJavaOptions(Optional\n-                .ofNullable(javaOptions)\n-                .orElseGet(() -> List.of(cmd.getAllArgumentValues(\"--java-options\"))))\n-        .executeAndVerifyOutput();\n+        var appVerifier = HelloApp.assertApp(launcherPath)\n+                .addDefaultArguments(Optional\n+                        .ofNullable(defaultArguments)\n+                        .orElseGet(() -> List.of(cmd.getAllArgumentValues(\"--arguments\"))))\n+                .addJavaOptions(Optional\n+                        .ofNullable(javaOptions)\n+                        .orElseGet(() -> List.of(cmd.getAllArgumentValues(\n+                        \"--java-options\"))).stream().map(\n+                        str -> resolveVariables(cmd, str)).toList());\n+\n+        appVerifier.executeAndVerifyOutput();\n+    }\n+\n+    public static final class PropertyFile {\n+\n+        PropertyFile(Path path) throws IOException {\n+            data = Files.readAllLines(path).stream().map(str -> {\n+                return str.split(\"=\", 2);\n+            }).collect(\n+                    Collectors.toMap(tokens -> tokens[0], tokens -> tokens[1],\n+                            (oldValue, newValue) -> {\n+                                return newValue;\n+                            }));\n+        }\n+\n+        public boolean isPropertySet(String name) {\n+            Objects.requireNonNull(name);\n+            return data.containsKey(name);\n+        }\n+\n+        public Optional<String> getPropertyValue(String name) {\n+            Objects.requireNonNull(name);\n+            return Optional.of(data.get(name));\n+        }\n+\n+        public Optional<Boolean> getPropertyBooleanValue(String name) {\n+            Objects.requireNonNull(name);\n+            return Optional.ofNullable(data.get(name)).map(Boolean::parseBoolean);\n+        }\n+\n+        private final Map<String, String> data;\n+    }\n+\n+    private static String resolveVariables(JPackageCommand cmd, String str) {\n+        var map = Map.of(\n+                \"$APPDIR\", cmd.appLayout().appDirectory(),\n+                \"$ROOTDIR\",\n+                cmd.isImagePackageType() ? cmd.outputBundle() : cmd.appInstallationDirectory(),\n+                \"$BINDIR\", cmd.appLayout().launchersDirectory());\n+        for (var e : map.entrySet()) {\n+            str = str.replaceAll(Pattern.quote(e.getKey()),\n+                    Matcher.quoteReplacement(e.getValue().toString()));\n+        }\n+        return str;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":111,"deletions":26,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Optional;\n@@ -88,1 +89,2 @@\n-            result.put(\"\", Collections.unmodifiableMap(currentSection));\n+            result.put(Optional.ofNullable(currentSectionName).orElse(\"\"),\n+                    Collections.unmodifiableMap(currentSection));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CfgFile.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,2 +93,4 @@\n-        TKit.assertTrue(TKit.isWindows(),\n-                \"setWindowsTmpDir is only valid on Windows platform\");\n+        if (!TKit.isWindows()) {\n+            throw new UnsupportedOperationException(\n+                    \"setWindowsTmpDir is only valid on Windows platform\");\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -354,0 +354,1 @@\n+            this.outputFilePath = TKit.workDir().resolve(OUTPUT_FILENAME);\n@@ -370,0 +371,2 @@\n+            } else if (\"jpackage.test.appOutput\".equals(name)) {\n+                outputFilePath = Path.of(value);\n@@ -400,0 +403,12 @@\n+        public void verifyOutput(String... args) {\n+            final List<String> launcherArgs = List.of(args);\n+            final List<String> appArgs;\n+            if (launcherArgs.isEmpty()) {\n+                appArgs = defaultLauncherArgs;\n+            } else {\n+                appArgs = launcherArgs;\n+            }\n+\n+            verifyOutputFile(outputFilePath, appArgs, params);\n+        }\n+\n@@ -411,2 +426,1 @@\n-            Path outputFile = TKit.workDir().resolve(OUTPUT_FILENAME);\n-            verifyOutputFile(outputFile, appArgs, params);\n+            verifyOutputFile(outputFilePath, appArgs, params);\n@@ -456,0 +470,1 @@\n+        private Path outputFilePath;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import static jdk.jpackage.test.AdditionalLauncher.forEachAdditionalLauncher;\n@@ -245,0 +246,11 @@\n+    public JPackageCommand setInputToEmptyDirectory() {\n+        if (Files.exists(inputDir())) {\n+            try {\n+                setArgumentValue(\"--input\", TKit.createTempDirectory(\"input\"));\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+        return this;\n+    }\n+\n@@ -417,0 +429,22 @@\n+    \/**\n+     * Returns path to package file from the path in unpacked package directory\n+     * or the given path if the package is not unpacked.\n+     *\/\n+    public Path pathToPackageFile(Path path) {\n+        Path unpackDir = unpackedPackageDirectory();\n+        if (unpackDir == null) {\n+            if (!path.isAbsolute()) {\n+                throw new IllegalArgumentException(String.format(\n+                        \"Path [%s] is not absolute\", path));\n+            }\n+            return path;\n+        }\n+\n+        if (!path.startsWith(unpackDir)) {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Path [%s] doesn't start with [%s] path\", path, unpackDir));\n+        }\n+\n+        return Path.of(\"\/\").resolve(unpackDir.relativize(path));\n+    }\n+\n@@ -500,0 +534,12 @@\n+    \/**\n+     * Returns names of all additional launchers or empty list if none\n+     * configured.\n+     *\/\n+    public List<String> addLauncherNames() {\n+        List<String> names = new ArrayList<>();\n+        forEachAdditionalLauncher(this, (launcherName, propFile) -> {\n+            names.add(launcherName);\n+        });\n+        return names;\n+    }\n+\n@@ -540,3 +586,3 @@\n-        if (criticalRuntimeFiles.stream().filter(\n-                v -> runtimeDir.resolve(v).toFile().exists()).findFirst().orElse(\n-                        null) == null) {\n+        if (!criticalRuntimeFiles.stream().anyMatch(v -> {\n+            return runtimeDir.resolve(v).toFile().exists();\n+        })) {\n@@ -741,1 +787,1 @@\n-        } else if (TKit.isOSX()) {\n+        } else if (TKit.isOSX() && !isRuntime()) {\n@@ -766,1 +812,5 @@\n-        setArgumentValue(UNPACKED_PATH_ARGNAME, path);\n+        if (path != null) {\n+            setArgumentValue(UNPACKED_PATH_ARGNAME, path);\n+        } else {\n+            removeArgumentWithValue(UNPACKED_PATH_ARGNAME);\n+        }\n@@ -791,0 +841,5 @@\n+    @Override\n+    public String toString() {\n+        return getPrintableCommandLine();\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":61,"deletions":6,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    Path getPath() {\n+    public Path getPath() {\n@@ -51,1 +51,1 @@\n-    Path relativePathInJavaHome() {\n+    private Path relativePathInJavaHome() {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JavaTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,1 @@\n-\n-public class LinuxHelper {\n+public final class LinuxHelper {\n@@ -203,1 +202,1 @@\n-            Executor.of(\"sudo\", \"rpm\", \"-i\")\n+            Executor.of(\"sudo\", \"rpm\", \"-U\")\n@@ -209,1 +208,4 @@\n-            Executor.of(\"sudo\", \"rpm\", \"-e\", getPackageName(cmd)).execute();\n+            var packageName = getPackageName(cmd);\n+            String script = String.format(\"! rpm -q %s || sudo rpm -e %s\",\n+                    packageName, packageName);\n+            Executor.of(\"sh\", \"-c\", script).execute();\n@@ -366,1 +368,1 @@\n-            try (var files = Files.walk(cmd.appLayout().destktopIntegrationDirectory(), 1)) {\n+            try (var files = Files.list(cmd.appLayout().destktopIntegrationDirectory())) {\n@@ -369,1 +371,1 @@\n-                        .collect(Collectors.toList());\n+                        .toList();\n@@ -473,1 +475,3 @@\n-                Path desktopFile = getSystemDesktopFilesFolder().resolve(\n+                Path systemDesktopFile = getSystemDesktopFilesFolder().resolve(\n+                        desktopFileName);\n+                Path appDesktopFile = cmd.appLayout().destktopIntegrationDirectory().resolve(\n@@ -476,13 +480,2 @@\n-                TKit.assertFileExists(desktopFile);\n-\n-                TKit.trace(String.format(\"Reading [%s] file...\", desktopFile));\n-                String mimeHandler = Files.readAllLines(desktopFile).stream().peek(\n-                        v -> TKit.trace(v)).filter(\n-                                v -> v.startsWith(\"Exec=\")).map(\n-                                v -> v.split(\"=\", 2)[1]).findFirst().orElseThrow();\n-\n-                TKit.trace(String.format(\"Done\"));\n-\n-                TKit.assertEquals(cmd.appLauncherPath().toString(),\n-                        mimeHandler, String.format(\n-                                \"Check mime type handler is the main application launcher\"));\n+                TKit.assertFileExists(systemDesktopFile);\n+                TKit.assertFileExists(appDesktopFile);\n@@ -490,0 +483,4 @@\n+                TKit.assertStringListEquals(Files.readAllLines(appDesktopFile),\n+                        Files.readAllLines(systemDesktopFile), String.format(\n+                        \"Check [%s] file is a copy of [%s] file\",\n+                        systemDesktopFile, appDesktopFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.jpackage.internal.IOUtils;\n@@ -49,1 +50,1 @@\n-public class MacHelper {\n+public final class MacHelper {\n@@ -175,3 +176,3 @@\n-            .addArgument(cmd.outputBundle())\n-            .addArguments(\"-target\", \"\/\")\n-            .execute();\n+                    .addArgument(cmd.outputBundle())\n+                    .addArguments(\"-target\", \"\/\")\n+                    .execute();\n@@ -181,0 +182,3 @@\n+\n+            var dataDir = destinationDir.resolve(\"data\");\n+\n@@ -182,3 +186,3 @@\n-            .addArgument(cmd.outputBundle())\n-            .addArgument(destinationDir.resolve(\"data\")) \/\/ We need non-existing folder\n-            .execute();\n+                    .addArgument(cmd.outputBundle())\n+                    .addArgument(dataDir) \/\/ We need non-existing folder\n+                    .execute();\n@@ -188,5 +192,27 @@\n-            Path installDir = TKit.removeRootFromAbsolutePath(\n-                    getInstallationDirectory(cmd)).getParent();\n-            final Path unpackDir = unpackRoot.resolve(installDir);\n-            try {\n-                Files.createDirectories(unpackDir);\n+            \/\/ Unpack all \".pkg\" files from $dataDir folder in $unpackDir folder\n+            try (var dataListing = Files.list(dataDir)) {\n+                dataListing.filter(file -> {\n+                    return \".pkg\".equals(IOUtils.getSuffix(file.getFileName()));\n+                }).forEach(ThrowingConsumer.toConsumer(pkgDir -> {\n+                    \/\/ Installation root of the package is stored in\n+                    \/\/ \/pkg-info@install-location attribute in $pkgDir\/PackageInfo xml file\n+                    var doc = createDocumentBuilder().parse(\n+                            new ByteArrayInputStream(Files.readAllBytes(\n+                                    pkgDir.resolve(\"PackageInfo\"))));\n+                    var xPath = XPathFactory.newInstance().newXPath();\n+\n+                    final String installRoot = (String) xPath.evaluate(\n+                            \"\/pkg-info\/@install-location\", doc,\n+                            XPathConstants.STRING);\n+\n+                    final Path unpackDir = unpackRoot.resolve(\n+                            TKit.removeRootFromAbsolutePath(Path.of(installRoot)));\n+\n+                    Files.createDirectories(unpackDir);\n+\n+                    Executor.of(\"tar\", \"-C\")\n+                            .addArgument(unpackDir)\n+                            .addArgument(\"-xvf\")\n+                            .addArgument(pkgDir.resolve(\"Payload\"))\n+                            .execute();\n+                }));\n@@ -197,6 +223,0 @@\n-            Executor.of(\"tar\", \"-C\")\n-            .addArgument(unpackDir)\n-            .addArgument(\"-xvf\")\n-            .addArgument(Path.of(destinationDir.toString(), \"data\",\n-                                 cmd.name() + \"-app.pkg\", \"Payload\"))\n-            .execute();\n@@ -207,0 +227,1 @@\n+\n@@ -208,2 +229,3 @@\n-            .addArgument(cmd.appInstallationDirectory())\n-            .execute();\n+                    .addArgument(cmd.appInstallationDirectory())\n+                    .execute();\n+\n@@ -223,2 +245,3 @@\n-        return Path.of(cmd.getArgumentValue(\"--install-dir\", () -> \"\/Applications\"))\n-                .resolve(cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n+        return Path.of(cmd.getArgumentValue(\"--install-dir\",\n+                () -> cmd.isRuntime() ? \"\/Library\/Java\/JavaVirtualMachines\" : \"\/Applications\")).resolve(\n+                        cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n@@ -228,2 +251,1 @@\n-        return cmd.getArgumentValue(\"--mac-package-name\",\n-                () -> cmd.installerName());\n+        return cmd.getArgumentValue(\"--mac-package-name\", cmd::installerName);\n@@ -277,1 +299,1 @@\n-        PListWrapper(String xml) throws ParserConfigurationException,\n+        private PListWrapper(String xml) throws ParserConfigurationException,\n@@ -283,9 +305,0 @@\n-        private static DocumentBuilder createDocumentBuilder() throws\n-                ParserConfigurationException {\n-            DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n-            dbf.setFeature(\n-                    \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\",\n-                    false);\n-            return dbf.newDocumentBuilder();\n-        }\n-\n@@ -295,0 +308,9 @@\n+    private static DocumentBuilder createDocumentBuilder() throws\n+                ParserConfigurationException {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+        dbf.setFeature(\n+                \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\",\n+                false);\n+        return dbf.newDocumentBuilder();\n+    }\n+\n@@ -297,1 +319,0 @@\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":57,"deletions":36,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -39,0 +40,1 @@\n+import java.util.Optional;\n@@ -44,0 +46,1 @@\n+import java.util.function.Supplier;\n@@ -46,1 +49,0 @@\n-import jdk.jpackage.internal.AppImageFile;\n@@ -49,0 +51,1 @@\n+import static jdk.jpackage.test.Functional.ThrowingBiConsumer.toBiConsumer;\n@@ -50,0 +53,1 @@\n+import static jdk.jpackage.test.Functional.ThrowingConsumer.toConsumer;\n@@ -51,1 +55,11 @@\n-\n+import static jdk.jpackage.test.Functional.ThrowingSupplier.toSupplier;\n+import static jdk.jpackage.test.Functional.rethrowUnchecked;\n+import static jdk.jpackage.test.PackageType.LINUX;\n+import static jdk.jpackage.test.PackageType.LINUX_DEB;\n+import static jdk.jpackage.test.PackageType.LINUX_RPM;\n+import static jdk.jpackage.test.PackageType.MAC_DMG;\n+import static jdk.jpackage.test.PackageType.MAC_PKG;\n+import static jdk.jpackage.test.PackageType.NATIVE;\n+import static jdk.jpackage.test.PackageType.WINDOWS;\n+import static jdk.jpackage.test.PackageType.WIN_EXE;\n+import static jdk.jpackage.test.PackageType.WIN_MSI;\n@@ -85,1 +99,1 @@\n-            newTypes = PackageType.NATIVE;\n+            newTypes = NATIVE;\n@@ -125,1 +139,1 @@\n-                ThrowingConsumer.toConsumer(v)));\n+                toConsumer(v)));\n@@ -154,1 +168,1 @@\n-                ThrowingBiConsumer.toBiConsumer(v)));\n+                toBiConsumer(v)));\n@@ -159,2 +173,1 @@\n-        return addBundleVerifier(\n-                (cmd, unused) -> ThrowingConsumer.toConsumer(v).accept(cmd));\n+        return addBundleVerifier((cmd, unused) -> toConsumer(v).accept(cmd));\n@@ -187,1 +200,1 @@\n-        forTypes(PackageType.LINUX, () -> {\n+        forTypes(LINUX, () -> {\n@@ -195,1 +208,1 @@\n-                ThrowingConsumer.toConsumer(v)));\n+                toConsumer(v)));\n@@ -201,1 +214,1 @@\n-                ThrowingConsumer.toConsumer(v)));\n+                toConsumer(v)));\n@@ -205,1 +218,1 @@\n-    public PackageTest setPackageInstaller(Consumer<JPackageCommand> v) {\n+    public PackageTest disablePackageInstaller() {\n@@ -207,7 +220,1 @@\n-                type -> packageHandlers.get(type).installHandler = v);\n-        return this;\n-    }\n-\n-    public PackageTest setPackageUnpacker(\n-            BiFunction<JPackageCommand, Path, Path> v) {\n-        currentTypes.forEach(type -> packageHandlers.get(type).unpackHandler = v);\n+                type -> packageHandlers.get(type).installHandler = cmd -> {});\n@@ -217,1 +224,1 @@\n-    public PackageTest setPackageUninstaller(Consumer<JPackageCommand> v) {\n+    public PackageTest disablePackageUninstaller() {\n@@ -219,1 +226,1 @@\n-                type -> packageHandlers.get(type).uninstallHandler = v);\n+                type -> packageHandlers.get(type).uninstallHandler = cmd -> {});\n@@ -241,1 +248,1 @@\n-        forTypes(PackageType.LINUX, () -> {\n+        forTypes(LINUX, () -> {\n@@ -320,5 +327,0 @@\n-    public PackageTest addLauncherName(String name) {\n-        launcherNames.add(name);\n-        return this;\n-    }\n-\n@@ -375,1 +377,1 @@\n-        return PackageType.NATIVE.stream()\n+        return NATIVE.stream()\n@@ -396,1 +398,1 @@\n-        return ThrowingConsumer.toConsumer(new ThrowingConsumer<Action>() {\n+        return toConsumer(new ThrowingConsumer<Action>() {\n@@ -399,0 +401,4 @@\n+                if (terminated) {\n+                    throw new IllegalStateException();\n+                }\n+\n@@ -400,3 +406,6 @@\n-                    if (unpackDir != null && Files.isDirectory(unpackDir)\n-                            && !unpackDir.startsWith(TKit.workDir())) {\n-                        TKit.deleteDirectoryRecursive(unpackDir);\n+                    if (unpackDir != null) {\n+                        if (Files.isDirectory(unpackDir)\n+                                && !unpackDir.startsWith(TKit.workDir())) {\n+                            TKit.deleteDirectoryRecursive(unpackDir);\n+                        }\n+                        unpackDir = null;\n@@ -404,0 +413,1 @@\n+                    terminated = true;\n@@ -410,6 +420,7 @@\n-                final JPackageCommand curCmd;\n-                if (Set.of(Action.INITIALIZE, Action.CREATE).contains(action)) {\n-                    curCmd = cmd;\n-                } else {\n-                    curCmd = cmd.createImmutableCopy();\n-                }\n+                final Supplier<JPackageCommand> curCmd = () -> {\n+                    if (Set.of(Action.INITIALIZE, Action.CREATE).contains(action)) {\n+                        return cmd;\n+                    } else {\n+                        return cmd.createImmutableCopy();\n+                    }\n+                };\n@@ -419,0 +430,1 @@\n+                        cmd.setUnpackedPackageLocation(null);\n@@ -431,0 +443,1 @@\n+                        cmd.setUnpackedPackageLocation(null);\n@@ -433,1 +446,1 @@\n-                            handler.accept(curCmd);\n+                            handler.accept(curCmd.get());\n@@ -441,1 +454,1 @@\n-                            handler.accept(curCmd);\n+                            handler.accept(curCmd.get());\n@@ -447,1 +460,2 @@\n-                        handler.accept(action, curCmd);\n+                        cmd.setUnpackedPackageLocation(null);\n+                        handler.accept(action, curCmd.get());\n@@ -452,1 +466,1 @@\n-                        handler.accept(action, curCmd);\n+                        handler.accept(action, curCmd.get());\n@@ -465,0 +479,1 @@\n+            private boolean terminated;\n@@ -538,0 +553,10 @@\n+\n+                case PURGE:\n+                    if (expectedJPackageExitCode == 0) {\n+                        var bundle = cmd.outputBundle();\n+                        if (toSupplier(() -> TKit.deleteIfExists(bundle)).get()) {\n+                            TKit.trace(String.format(\"Deleted [%s] package\",\n+                                    bundle));\n+                        }\n+                    }\n+                    break;\n@@ -544,1 +569,1 @@\n-                if (PackageType.LINUX.contains(cmd.packageType())) {\n+                if (LINUX.contains(cmd.packageType())) {\n@@ -560,0 +585,5 @@\n+            Optional.ofNullable(cmd.unpackedPackageDirectory()).ifPresent(\n+                    unpackedDir -> {\n+                        verifyRootCountInUnpackedPackage(cmd, unpackedDir);\n+                    });\n+\n@@ -561,1 +591,1 @@\n-                if (PackageType.WINDOWS.contains(cmd.packageType())\n+                if (WINDOWS.contains(cmd.packageType())\n@@ -565,1 +595,1 @@\n-                    new WindowsHelper.DesktopIntegrationVerifier(cmd, null);\n+                    WindowsHelper.verifyDesktopIntegration(cmd, null);\n@@ -567,2 +597,2 @@\n-                    launcherNames.forEach(name -> {\n-                        new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+                    cmd.addLauncherNames().forEach(name -> {\n+                        WindowsHelper.verifyDesktopIntegration(cmd, name);\n@@ -572,0 +602,1 @@\n+\n@@ -577,0 +608,44 @@\n+        private void verifyRootCountInUnpackedPackage(JPackageCommand cmd,\n+                Path unpackedDir) {\n+\n+            final long expectedRootCount;\n+            if (WINDOWS.contains(cmd.packageType())) {\n+                \/\/ On Windows it is always two entries:\n+                \/\/ installation home directory and MSI file\n+                expectedRootCount = 2;\n+            } else if (LINUX.contains(cmd.packageType())) {\n+                Set<Path> roots = new HashSet<>();\n+                roots.add(Path.of(\"\/\").resolve(Path.of(cmd.getArgumentValue(\n+                        \"--install-dir\", () -> \"\/opt\")).getName(0)));\n+                if (cmd.hasArgument(\"--license-file\")) {\n+                    switch (cmd.packageType()) {\n+                        case LINUX_RPM -> {\n+                            \/\/ License file is in \/usr\/share\/licenses subtree\n+                            roots.add(Path.of(\"\/usr\"));\n+                        }\n+\n+                        case LINUX_DEB -> {\n+                            Path installDir = cmd.appInstallationDirectory();\n+                            if (installDir.equals(Path.of(\"\/\"))\n+                                    || installDir.startsWith(\"\/usr\")) {\n+                                \/\/ License file is in \/usr\/share\/doc subtree\n+                                roots.add(Path.of(\"\/usr\"));\n+                            }\n+                        }\n+                    }\n+                }\n+                expectedRootCount = roots.size();\n+            } else {\n+                expectedRootCount = 1;\n+            }\n+\n+            try ( var files = Files.list(unpackedDir)) {\n+                TKit.assertEquals(expectedRootCount, files.count(),\n+                        String.format(\n+                                \"Check the package has %d top installation directories\",\n+                                expectedRootCount));\n+            } catch (IOException ex) {\n+                rethrowUnchecked(ex);\n+            }\n+        }\n+\n@@ -583,1 +658,1 @@\n-                if (PackageType.WINDOWS.contains(cmd.packageType())) {\n+                if (WINDOWS.contains(cmd.packageType())) {\n@@ -585,1 +660,1 @@\n-                    new WindowsHelper.DesktopIntegrationVerifier(cmd, null);\n+                    WindowsHelper.verifyDesktopIntegration(cmd, null);\n@@ -587,2 +662,2 @@\n-                    launcherNames.forEach(name -> {\n-                        new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+                    cmd.addLauncherNames().forEach(name -> {\n+                        WindowsHelper.verifyDesktopIntegration(cmd, name);\n@@ -613,2 +688,2 @@\n-            handlers.put(PackageType.LINUX_DEB, LinuxHelper.createDebPackageHandlers());\n-            handlers.put(PackageType.LINUX_RPM, LinuxHelper.createRpmPackageHandlers());\n+            handlers.put(LINUX_DEB, LinuxHelper.createDebPackageHandlers());\n+            handlers.put(LINUX_RPM, LinuxHelper.createRpmPackageHandlers());\n@@ -618,2 +693,2 @@\n-            handlers.put(PackageType.WIN_MSI, WindowsHelper.createMsiPackageHandlers());\n-            handlers.put(PackageType.WIN_EXE, WindowsHelper.createExePackageHandlers());\n+            handlers.put(WIN_MSI, WindowsHelper.createMsiPackageHandlers());\n+            handlers.put(WIN_EXE, WindowsHelper.createExePackageHandlers());\n@@ -623,2 +698,2 @@\n-            handlers.put(PackageType.MAC_DMG,  MacHelper.createDmgPackageHandlers());\n-            handlers.put(PackageType.MAC_PKG,  MacHelper.createPkgPackageHandlers());\n+            handlers.put(MAC_DMG,  MacHelper.createDmgPackageHandlers());\n+            handlers.put(MAC_PKG,  MacHelper.createPkgPackageHandlers());\n@@ -636,1 +711,0 @@\n-    private final List<String> launcherNames = new ArrayList();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":132,"deletions":58,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,6 @@\n+            if (hasAction(Action.PURGE) && !actionList.contains(Action.PURGE)) {\n+                \/\/ Default action list contains \"purge\" action meaning\n+                \/\/ packages are not needed for further processing.\n+                \/\/ Copy this behavior in custom action list.\n+                actionList.add(Action.PURGE);\n+            }\n@@ -54,0 +60,4 @@\n+    public static boolean hasAction(Action a) {\n+        return DEFAULT_ACTIONS.contains(a);\n+    }\n+\n@@ -92,0 +102,4 @@\n+        \/**\n+         * Purge package.\n+         *\/\n+        PURGE,\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/RunnablePackageTest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-        return Path.of(cmd.getArgumentValue(\"--install-dir\", () -> cmd.name()));\n+        return Path.of(cmd.getArgumentValue(\"--install-dir\", cmd::name));\n@@ -69,1 +69,7 @@\n-            \/\/ The given Executor may either be of an msiexe command or an\n+            if (result.exitCode == 1605) {\n+                \/\/ ERROR_UNKNOWN_PRODUCT, attempt to uninstall not installed\n+                \/\/ package\n+                return;\n+            }\n+\n+            \/\/ The given Executor may either be of an msiexec command or an\n@@ -94,1 +100,5 @@\n-        msi.uninstallHandler = cmd -> installMsi.accept(cmd, false);\n+        msi.uninstallHandler = cmd -> {\n+            if (Files.exists(cmd.outputBundle())) {\n+                installMsi.accept(cmd, false);\n+            }\n+        };\n@@ -101,0 +111,1 @@\n+\n@@ -103,1 +114,5 @@\n-            TKit.createTextFile(unpackBat, List.of(String.join(\" \", List.of(\n+            \/\/ Set folder permissions to allow msiexec unpack msi bundle.\n+            TKit.createTextFile(unpackBat, List.of(\n+                    String.format(\"icacls \\\"%s\\\" \/inheritance:e \/grant Users:M\",\n+                            destinationDir),\n+                    String.join(\" \", List.of(\n@@ -128,1 +143,5 @@\n-        exe.uninstallHandler = cmd -> installExe.accept(cmd, false);\n+        exe.uninstallHandler = cmd -> {\n+            if (Files.exists(cmd.outputBundle())) {\n+                installExe.accept(cmd, false);\n+            }\n+        };\n@@ -132,0 +151,5 @@\n+    static void verifyDesktopIntegration(JPackageCommand cmd,\n+            String launcherName) {\n+        new DesktopIntegrationVerifier(cmd, launcherName);\n+    }\n+\n@@ -146,1 +170,1 @@\n-    static class DesktopIntegrationVerifier {\n+    private static class DesktopIntegrationVerifier {\n@@ -148,1 +172,1 @@\n-        DesktopIntegrationVerifier(JPackageCommand cmd, String name) {\n+        DesktopIntegrationVerifier(JPackageCommand cmd, String launcherName) {\n@@ -150,2 +174,24 @@\n-            this.cmd = cmd;\n-            this.name = (name == null ? cmd.name() : name);\n+\n+            name = Optional.ofNullable(launcherName).orElseGet(cmd::name);\n+\n+            isUserLocalInstall = isUserLocalInstall(cmd);\n+\n+            appInstalled = cmd.appLauncherPath(launcherName).toFile().exists();\n+\n+            desktopShortcutPath = Path.of(name + \".lnk\");\n+\n+            startMenuShortcutPath = Path.of(cmd.getArgumentValue(\n+                    \"--win-menu-group\", () -> \"Unknown\"), name + \".lnk\");\n+\n+            if (name.equals(cmd.name())) {\n+                isWinMenu = cmd.hasArgument(\"--win-menu\");\n+                isDesktop = cmd.hasArgument(\"--win-shortcut\");\n+            } else {\n+                var props = AdditionalLauncher.getAdditionalLauncherProperties(cmd,\n+                        launcherName);\n+                isWinMenu = props.getPropertyBooleanValue(\"win-menu\").orElseGet(\n+                        () -> cmd.hasArgument(\"--win-menu\"));\n+                isDesktop = props.getPropertyBooleanValue(\"win-shortcut\").orElseGet(\n+                        () -> cmd.hasArgument(\"--win-shortcut\"));\n+            }\n+\n@@ -153,0 +199,1 @@\n+\n@@ -154,1 +201,3 @@\n-            verifyFileAssociationsRegistry();\n+\n+            Stream.of(cmd.getAllArgumentValues(\"--file-associations\")).map(\n+                    Path::of).forEach(this::verifyFileAssociationsRegistry);\n@@ -158,3 +207,2 @@\n-            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n-            if (cmd.hasArgument(\"--win-shortcut\")) {\n-                if (isUserLocalInstall(cmd)) {\n+            if (isDesktop) {\n+                if (isUserLocalInstall) {\n@@ -173,4 +221,0 @@\n-        private Path desktopShortcutPath() {\n-            return Path.of(name + \".lnk\");\n-        }\n-\n@@ -188,1 +232,1 @@\n-            verifyShortcut(dir.resolve(desktopShortcutPath()), exists);\n+            verifyShortcut(dir.resolve(desktopShortcutPath), exists);\n@@ -194,1 +238,1 @@\n-            verifyShortcut(dir.resolve(desktopShortcutPath()), exists);\n+            verifyShortcut(dir.resolve(desktopShortcutPath), exists);\n@@ -198,3 +242,2 @@\n-            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n-            if (cmd.hasArgument(\"--win-menu\")) {\n-                if (isUserLocalInstall(cmd)) {\n+            if (isWinMenu) {\n+                if (isUserLocalInstall) {\n@@ -213,5 +256,0 @@\n-        private Path startMenuShortcutPath() {\n-            return Path.of(cmd.getArgumentValue(\"--win-menu-group\",\n-                    () -> \"Unknown\"), name + \".lnk\");\n-        }\n-\n@@ -219,1 +257,1 @@\n-            Path shortcutPath = shortcutsRoot.resolve(startMenuShortcutPath());\n+            Path shortcutPath = shortcutsRoot.resolve(startMenuShortcutPath);\n@@ -237,5 +275,0 @@\n-        private void verifyFileAssociationsRegistry() {\n-            Stream.of(cmd.getAllArgumentValues(\"--file-associations\")).map(\n-                    Path::of).forEach(this::verifyFileAssociationsRegistry);\n-        }\n-\n@@ -243,1 +276,0 @@\n-            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n@@ -293,1 +325,6 @@\n-        private final JPackageCommand cmd;\n+        private final Path desktopShortcutPath;\n+        private final Path startMenuShortcutPath;\n+        private final boolean isUserLocalInstall;\n+        private final boolean appInstalled;\n+        private final boolean isWinMenu;\n+        private final boolean isDesktop;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":73,"deletions":36,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,3 +81,1 @@\n-  echo \"  -m <mode>       - mode to run jtreg tests.\"\n-  echo '                    Should be one of `create`, `update` or `print-default-tests`.'\n-  echo '                    Optional, default mode is `update`.'\n+  echo \"  -m <mode>       - mode to run jtreg tests. Supported values:\"\n@@ -90,0 +88,12 @@\n+  echo '                    - `create-small-runtime`'\n+  echo '                      Create small Java runtime using <jdk>\/bin\/jlink command in the output directory.'\n+  echo '                    - `create-packages`'\n+  echo '                      Create packages.'\n+  echo '                      The script will set `jpackage.test.action` property.'\n+  echo '                    - `test-packages`'\n+  echo '                      Create and fully test packages. Will create, unpack, install, and uninstall packages.'\n+  echo '                      The script will set `jpackage.test.action` property.'\n+  echo '                    - `do-packages`'\n+  echo \"                      Create, unpack and verify packages.\"\n+  echo '                      The script will not set `jpackage.test.action` property.'\n+  echo '                    Optional, defaults are `update` and `create-packages`.'\n@@ -136,2 +146,0 @@\n-# hg clone http:\/\/hg.openjdk.java.net\/jdk\/sandbox\n-# cd sandbox; hg update -r JDK-8200758-branch\n@@ -155,3 +163,0 @@\n-# Create packages only\n-jtreg_args+=(\"-Djpackage.test.action=create\")\n-\n@@ -161,0 +166,18 @@\n+test_actions=\n+\n+set_mode ()\n+{\n+  case \"$1\" in\n+    create-packages) test_actions='-Djpackage.test.action=create';;\n+    test-packages) test_actions='-Djpackage.test.action=uninstall,create,unpack,verify-install,install,verify-install,uninstall,verify-uninstall,purge';;\n+    do-packages) test_actions=;;\n+    create-small-runtime) mode=$1;;\n+    print-default-tests) mode=$1;;\n+    create) mode=$1;;\n+    update) mode=$1;;\n+    *) fatal_with_help_usage 'Invalid value of -m option:' [$1];;\n+  esac\n+}\n+\n+set_mode 'create-packages'\n+\n@@ -174,1 +197,1 @@\n-    m) mode=\"$OPTARG\";;\n+    m) set_mode \"$OPTARG\";;\n@@ -204,0 +227,5 @@\n+if [ \"$mode\" = \"create-small-runtime\" ]; then\n+  exec_command \"$test_jdk\/bin\/jlink\" --add-modules java.base,java.datatransfer,java.xml,java.prefs,java.desktop --compress=2 --no-header-files --no-man-pages --strip-debug --output \"$output_dir\"\n+  exit\n+fi\n+\n@@ -225,8 +253,0 @@\n-if [ \"$mode\" = create ]; then\n-  true\n-elif [ \"$mode\" = update ]; then\n-  true\n-else\n-  fatal_with_help_usage 'Invalid value of -m option:' [$mode]\n-fi\n-\n@@ -237,0 +257,2 @@\n+jtreg_args+=(\"$test_actions\")\n+\n@@ -252,1 +274,1 @@\n-        exec_command \"(\" cd \"$workdir\" \"&&\" wget \"$jtreg_bundle\" \"&&\" tar -xzf \"$(basename $jtreg_bundle)\" \";\" rm -f \"$(basename $jtreg_bundle)\" \")\"\n+        exec_command \"(\" cd \"$workdir\" \"&&\" wget --no-check-certificate \"$jtreg_bundle\" \"&&\" tar -xzf \"$(basename $jtreg_bundle)\" \";\" rm -f \"$(basename $jtreg_bundle)\" \")\"\n@@ -255,1 +277,1 @@\n-          exec_command \"(\" cd \"$workdir\" \"&&\" wget \"$jtreg_bundle\" \"&&\" unzip \"$(basename $jtreg_bundle)\" \";\" rm -f \"$(basename $jtreg_bundle)\" \")\"\n+          exec_command \"(\" cd \"$workdir\" \"&&\" wget --no-check-certificate \"$jtreg_bundle\" \"&&\" unzip \"$(basename $jtreg_bundle)\" \";\" rm -f \"$(basename $jtreg_bundle)\" \")\"\n","filename":"test\/jdk\/tools\/jpackage\/run_tests.sh","additions":42,"deletions":20,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,2 +72,0 @@\n-                .addLauncherName(\"bar\") \/\/ Add launchers name for verification\n-                .addLauncherName(\"foo\")\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultiLauncherTwoPhaseTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-#!\/bin\/bash\n-\n-# Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-\n-#\n-# Complete testing of jpackage platform-specific packaging.\n-#\n-# The script does the following:\n-# 1. Create packages.\n-# 2. Install created packages.\n-# 3. Verifies packages are installed.\n-# 4. Uninstall created packages.\n-# 5. Verifies packages are uninstalled.\n-#\n-# For the list of accepted command line arguments see `run_tests.sh` script.\n-#\n-\n-# Fail fast\n-set -e; set -o pipefail;\n-\n-# Script debug\n-dry_run=${JPACKAGE_TEST_DRY_RUN}\n-\n-# Default directory where jpackage should write bundle files\n-output_dir=~\/jpackage_bundles\n-\n-\n-set_args ()\n-{\n-  args=()\n-  local arg_is_output_dir=\n-  local arg_is_mode=\n-  local output_dir_set=\n-  local with_append_actions=yes\n-  for arg in \"$@\"; do\n-    if [ \"$arg\" == \"-o\" ]; then\n-      arg_is_output_dir=yes\n-      output_dir_set=yes\n-    elif [ \"$arg\" == \"-m\" ]; then\n-      arg_is_mode=yes\n-      continue\n-    elif [ \"$arg\" == '--' ]; then\n-      append_actions\n-      with_append_actions=\n-      continue\n-    elif ! case \"$arg\" in -Djpackage.test.action=*) false;; esac; then\n-      continue\n-    elif [ -n \"$arg_is_output_dir\" ]; then\n-      arg_is_output_dir=\n-      output_dir=\"$arg\"\n-    elif [ -n \"$arg_is_mode\" ]; then\n-      arg_is_mode=\n-      continue\n-    fi\n-\n-    args+=( \"$arg\" )\n-  done\n-  [ -n \"$output_dir_set\" ] || args=( -o \"$output_dir\" \"${args[@]}\" )\n-  [ -z \"$with_append_actions\" ] || append_actions\n-}\n-\n-\n-append_actions ()\n-{\n-  args+=( '--' '-Djpackage.test.action=create,install,verify-install,uninstall,verify-uninstall' )\n-}\n-\n-\n-exec_command ()\n-{\n-  if [ -n \"$dry_run\" ]; then\n-    echo \"$@\"\n-  else\n-    eval \"$@\"\n-  fi\n-}\n-\n-set_args \"$@\"\n-basedir=\"$(dirname $0)\"\n-exec_command ${SHELL} \"$basedir\/run_tests.sh\" -m create \"${args[@]}\"\n","filename":"test\/jdk\/tools\/jpackage\/test_jpackage.sh","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-        PackageTest test1 = init.get().setPackageUninstaller(cmd -> {});\n+        PackageTest test1 = init.get().disablePackageUninstaller();\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinUpgradeUUIDTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}