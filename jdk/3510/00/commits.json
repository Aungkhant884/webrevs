[{"commit":{"message":"Use glibc libm impl for dlog,dlog10,dexp iff 2.29 or greater on AArch64.\n\nGlibc 2.29 onwards provides optimised versions of log,log10,exp.\nThese functions have an accuracy of 0.9ulp or better in glibc\n2.29.\n\nTherefore this patch adds code to parse, store and check\nthe runtime glibcs version in os_linux.cpp\/hpp.\nThis is then used to select the glibcs implementation of\nlog, log10, exp at runtime for c1 and c2, iff we have\nglibc 2.29 or greater.\n\nThis will ensure OpenJDK can benefit from future improvements\nto glibc.\n\nGlibc adheres to the ieee754 standard, unless stated otherwise\nin its spec.\n\nAs there are no stated exceptions in the current glibc spec\nfor dlog, dlog10 and dexp, we can assume they currently follow\nieee754 (which testing confirms). As such, future version of\nglibc are unlikely to lose this compliance with ieee754 in\nfuture.\n\nW.r.t performance this patch sees ~15-30% performance improvements for\nlog and log10, with ~50-80% performance improvements for exp for the\ncommon input ranged (which output real numbers). However for the NaN\nand inf output ranges we see a slow down of up to a factor of 2 for\nsome functions and architectures.\n\nDue to this being the uncommon case we assert that this is a\nworthwhile tradeoff."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp"},{"filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp"},{"filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.hpp"}],"sha":"f469a9649fc3c74f30e1d5bb8d487ae7b3a7eacf"}]