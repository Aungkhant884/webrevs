{"files":[{"patch":"@@ -7012,5 +7012,0 @@\n-    \/\/ Disabled until JDK-8210858 is fixed\n-    \/\/ if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog)) {\n-    \/\/   StubRoutines::_dlog = generate_dlog();\n-    \/\/ }\n-\n@@ -7025,0 +7020,18 @@\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog)) {\n+      StubRoutines::_dlog = os::stub_use_cmath_impl(vmIntrinsics::as_int(vmIntrinsics::_dlog)) ?\n+        CAST_FROM_FN_PTR(address,\n+          static_cast < double( * )(double) > (log)) : NULL;\n+    }\n+\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog10)) {\n+      StubRoutines::_dlog10 = os::stub_use_cmath_impl(vmIntrinsics::as_int(vmIntrinsics::_dlog10)) ?\n+        CAST_FROM_FN_PTR(address,\n+          static_cast < double( * )(double) > (log10)) : NULL;\n+    }\n+\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dexp)) {\n+      StubRoutines::_dexp = os::stub_use_cmath_impl(vmIntrinsics::as_int(vmIntrinsics::_dexp)) ?\n+        CAST_FROM_FN_PTR(address,\n+          static_cast < double( * )(double) > (exp)) : NULL;\n+    }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -166,0 +166,2 @@\n+int os::Linux::_libc_major_version = 0;\n+int os::Linux::_libc_minor_version = 0;\n@@ -536,0 +538,1 @@\n+  os::Linux::set_libc_major_minor(str);\n@@ -545,0 +548,15 @@\n+void os::Linux::set_libc_major_minor(const char *libc_vers){\n+  \/\/ If using alternative to glibc, not implemented yet.\n+  if (!strstr(libc_vers, \"glibc\"))\n+    return;\n+\n+  if (libc_vers != NULL){\n+    const char *major = strchr(libc_vers, ' ');\n+    const char *minor = strchr(libc_vers, '.');\n+    if (major != NULL && minor != NULL) {\n+      os::Linux::set_libc_major_version(strtol(major + 1, nullptr, 10));\n+      os::Linux::set_libc_minor_version(strtol(minor + 1, nullptr, 10));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static int _libc_major_version;\n+  static int _libc_minor_version;\n@@ -72,0 +74,3 @@\n+  static void set_libc_major_minor(const char *s);\n+  static void set_libc_major_version(int n)   { _libc_major_version = n; }\n+  static void set_libc_minor_version(int n)   { _libc_minor_version = n; }\n@@ -142,0 +147,3 @@\n+  \/\/ Runtime GNU libc minor major verion integers\n+  static const int libc_major_version()       { return _libc_major_version; }\n+  static const int libc_minor_version()       { return _libc_minor_version; }\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -307,0 +307,28 @@\n+bool os::stub_use_cmath_impl(int intrinsicID){\n+  const int libc_vers_major = os::Linux::libc_major_version();\n+  const int libc_vers_minor = os::Linux::libc_minor_version();\n+\n+  \/\/ implies runtime-environment has alternative libc to glibc.\n+  if (libc_vers_major == 0)\n+    return false;\n+\n+  bool hasFastLogsExpPow = false;\n+\n+  \/\/ Glibc 2.29 is the version exp, log, log10 and pow had significant performace\n+  \/\/ improvements on AArch64.\n+  \/\/ Release Doc: https:\/\/sourceware.org\/legacy-ml\/libc-announce\/2019\/msg00000.html\n+  if ((libc_vers_major > 2) || ((libc_vers_major == 2) && (libc_vers_minor >= 29))){\n+    hasFastLogsExpPow = true;\n+  }\n+\n+  if (!hasFastLogsExpPow)\n+    return false;\n+\n+  if (intrinsicID == vmIntrinsics::as_int(vmIntrinsics::_dlog)   ||\n+      intrinsicID == vmIntrinsics::as_int(vmIntrinsics::_dlog10) ||\n+      intrinsicID == vmIntrinsics::as_int(vmIntrinsics::_dexp))\n+    return true;\n+\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+  static bool stub_use_cmath_impl(int intrinsicID);\n+\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -272,0 +272,4 @@\n+bool os::stub_use_cmath_impl(int intrinsicID){\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+  static bool stub_use_cmath_impl(int intrinsicID);\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}