{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -38,0 +39,2 @@\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n@@ -39,0 +42,1 @@\n+import jdk.internal.misc.TerminatingThreadLocal;\n@@ -236,0 +240,28 @@\n+    \/**\n+     * Creates a thread-local variable that notifies {@code onThreadTermination} when a thread\n+     * terminates and it has been initialized in the terminating thread (even if it was initialized\n+     * with a null value). A typical use is to release resources associated with a thread.\n+     *\n+     * @param initialValue a supplier to be used to determine the initial value\n+     * @param onThreadTermination a consumer invoked by a thread when terminating and the\n+     *            thread-local has an associated value for the terminating thread. The current\n+     *            thread's value of the thread-local variable is passed as a parameter to the\n+     *            consumer.\n+     *\/\n+    public static <T> ThreadLocal<T> createTerminatingThreadLocal(Supplier<T> initialValue, Consumer<T> onThreadTermination) {\n+        Objects.requireNonNull(initialValue, \"initialValue must be non null.\");\n+        Objects.requireNonNull(onThreadTermination, \"onThreadTermination must be non null.\");\n+        return new TerminatingThreadLocal<>() {\n+\n+            @Override\n+            protected T initialValue() {\n+                return initialValue.get();\n+            }\n+\n+            @Override\n+            protected void threadTerminated(T value) {\n+                onThreadTermination.accept(value);\n+            }\n+        };\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.services\/src\/jdk\/vm\/ci\/services\/Services.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"}]}