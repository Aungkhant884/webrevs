{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+  case vector:       st->print(\",vector\");     break;\n","filename":"src\/hotspot\/share\/code\/location.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -156,3 +156,1 @@\n-  if (payload->is_location() &&\n-      payload->as_LocationValue()->location().type() == Location::vector) {\n-    \/\/ Vector value in an aligned adjacent tuple (1, 2, 4, 8, or 16 slots).\n+  if (payload->is_location()) {\n@@ -160,5 +158,17 @@\n-    return allocate_vector_payload_helper(ik, fr, reg_map, location, THREAD); \/\/ safepoint\n-  } else {\n-    \/\/ Scalar-replaced boxed vector representation.\n-    StackValue* value = StackValue::create_stack_value(fr, reg_map, payload);\n-    return value->get_obj();\n+    if (location.type() == Location::vector) {\n+      \/\/ Vector value in an aligned adjacent tuple (1, 2, 4, 8, or 16 slots).\n+      return allocate_vector_payload_helper(ik, fr, reg_map, location, THREAD); \/\/ safepoint\n+    }\n+#ifdef ASSERT\n+    \/\/ Other payload values are: 'oop' type location and Scalar-replaced boxed vector representation.\n+    \/\/ They will be processed in Deoptimization::reassign_fields() after all objects are reallocated.\n+    else {\n+      Location::Type loc_type = location.type();\n+      assert(loc_type == Location::oop || loc_type == Location::narrowoop,\n+             \"expected 'oop'(%d) or 'narrowoop'(%d) types location but got: %d\", Location::oop, Location::narrowoop, loc_type);\n+    }\n+  } else if (!payload->is_object()) {\n+    stringStream ss;\n+    payload->print_on(&ss);\n+    assert(payload->is_object(), \"expected 'object' value for scalar-replaced boxed vector but got: %s\", ss.as_string());\n+#endif\n@@ -166,0 +176,1 @@\n+  return Handle(THREAD, (oop)nullptr);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-static bool eliminate_allocations(JavaThread* thread, int exec_mode, CompiledMethod* compiled_method,\n+static bool rematerialize_objects(JavaThread* thread, int exec_mode, CompiledMethod* compiled_method,\n@@ -245,2 +245,2 @@\n-static void eliminate_locks(JavaThread* thread, GrowableArray<compiledVFrame*>* chunk, bool realloc_failures,\n-                            frame& deoptee, int exec_mode, bool& deoptimized_objects) {\n+static void restore_eliminated_locks(JavaThread* thread, GrowableArray<compiledVFrame*>* chunk, bool realloc_failures,\n+                                     frame& deoptee, int exec_mode, bool& deoptimized_objects) {\n@@ -306,2 +306,3 @@\n-  if (jvmci_enabled COMPILER2_PRESENT(|| (DoEscapeAnalysis && EliminateAllocations))) {\n-    realloc_failures = eliminate_allocations(thread, Unpack_none, cm, deoptee, map, chunk, deoptimized_objects);\n+  if (jvmci_enabled COMPILER2_PRESENT(|| (DoEscapeAnalysis && EliminateAllocations)\n+                                      || EliminateAutoBox || EnableVectorAggressiveReboxing)) {\n+    realloc_failures = rematerialize_objects(thread, Unpack_none, cm, deoptee, map, chunk, deoptimized_objects);\n@@ -318,1 +319,1 @@\n-    eliminate_locks(thread, chunk, realloc_failures, deoptee, Unpack_none, deoptimized_objects);\n+    restore_eliminated_locks(thread, chunk, realloc_failures, deoptee, Unpack_none, deoptimized_objects);\n@@ -371,5 +372,1 @@\n-#if INCLUDE_JVMCI\n-  bool jvmci_enabled = true;\n-#else\n-  bool jvmci_enabled = false;\n-#endif\n+  bool const jvmci_enabled = JVMCI_ONLY(EnableJVMCI) NOT_JVMCI(false);\n@@ -379,1 +376,2 @@\n-  if (jvmci_enabled COMPILER2_PRESENT( || (DoEscapeAnalysis && EliminateAllocations) )) {\n+  if (jvmci_enabled COMPILER2_PRESENT( || (DoEscapeAnalysis && EliminateAllocations)\n+                                       || EliminateAutoBox || EnableVectorAggressiveReboxing )) {\n@@ -381,1 +379,1 @@\n-    realloc_failures = eliminate_allocations(thread, exec_mode, cm, deoptee, map, chunk, unused);\n+    realloc_failures = rematerialize_objects(thread, exec_mode, cm, deoptee, map, chunk, unused);\n@@ -399,1 +397,1 @@\n-    eliminate_locks(thread, chunk, realloc_failures, deoptee, exec_mode, unused);\n+    restore_eliminated_locks(thread, chunk, realloc_failures, deoptee, exec_mode, unused);\n@@ -1409,1 +1407,15 @@\n-      continue; \/\/ skip field reassignment for vectors\n+      assert(sv->field_size() == 1, \"%s not a vector\", k->name()->as_C_string());\n+      ScopeValue* payload = sv->field_at(0);\n+      if (payload->is_location() &&\n+          payload->as_LocationValue()->location().type() == Location::vector) {\n+        if (PrintDeoptimizationDetails) {\n+          tty->print_cr(\"skip field reassignment for this vector - it should be assigned already\");\n+          if (Verbose) {\n+            Handle obj = sv->value();\n+            k->oop_print_on(obj(), tty);\n+          }\n+        }\n+        continue; \/\/ Such vector's value was already restored in VectorSupport::allocate_vector().\n+      }\n+      \/\/ Else fall-through to do assignment for scalar-replaced boxed vector representation\n+      \/\/ which could be restored after vector object allocation.\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":27,"deletions":15,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,0 +144,1 @@\n+      loc.print_on(tty);\n@@ -157,1 +158,2 @@\n-      ShouldNotReachHere(); \/\/ should be handled by Deoptimization::realloc_objects()\n+      loc.print_on(tty);\n+      ShouldNotReachHere(); \/\/ should be handled by VectorSupport::allocate_vector()\n@@ -160,0 +162,1 @@\n+      loc.print_on(tty);\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng\/othervm  -XX:-TieredCompilation --add-opens jdk.incubator.vector\/jdk.incubator.vector=ALL-UNNAMED\n+ * @run testng\/othervm\/timeout=300  -XX:-TieredCompilation --add-opens jdk.incubator.vector\/jdk.incubator.vector=ALL-UNNAMED\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}