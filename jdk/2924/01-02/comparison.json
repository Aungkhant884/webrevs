{"files":[{"patch":"@@ -156,3 +156,1 @@\n-  if (payload->is_location() &&\n-      payload->as_LocationValue()->location().type() == Location::vector) {\n-    \/\/ Vector value in an aligned adjacent tuple (1, 2, 4, 8, or 16 slots).\n+  if (payload->is_location()) {\n@@ -160,5 +158,17 @@\n-    return allocate_vector_payload_helper(ik, fr, reg_map, location, THREAD); \/\/ safepoint\n-  } else {\n-    \/\/ Scalar-replaced boxed vector representation.\n-    StackValue* value = StackValue::create_stack_value(fr, reg_map, payload);\n-    return value->get_obj();\n+    if (location.type() == Location::vector) {\n+      \/\/ Vector value in an aligned adjacent tuple (1, 2, 4, 8, or 16 slots).\n+      return allocate_vector_payload_helper(ik, fr, reg_map, location, THREAD); \/\/ safepoint\n+    }\n+#ifdef ASSERT\n+    \/\/ Other payload values are: 'oop' type location and Scalar-replaced boxed vector representation.\n+    \/\/ They will be processed in Deoptimization::reassign_fields() after all objects are reallocated.\n+    else {\n+      Location::Type loc_type = location.type();\n+      assert(loc_type == Location::oop || loc_type == Location::narrowoop,\n+             \"expected 'oop'(%d) or 'narrowoop'(%d) types location but got: %d\", Location::oop, Location::narrowoop, loc_type);\n+    }\n+  } else if (!payload->is_object()) {\n+    stringStream ss;\n+    payload->print_on(&ss);\n+    assert(payload->is_object(), \"expected 'object' value for scalar-replaced boxed vector but got: %s\", ss.as_string());\n+#endif\n@@ -166,0 +176,1 @@\n+  return Handle(THREAD, (oop)nullptr);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -181,3 +181,3 @@\n-static bool restore_allocations(JavaThread* thread, int exec_mode, CompiledMethod* compiled_method,\n-                                frame& deoptee, RegisterMap& map, GrowableArray<compiledVFrame*>* chunk,\n-                                bool& deoptimized_objects) {\n+static bool rematerialize_objects(JavaThread* thread, int exec_mode, CompiledMethod* compiled_method,\n+                                  frame& deoptee, RegisterMap& map, GrowableArray<compiledVFrame*>* chunk,\n+                                  bool& deoptimized_objects) {\n@@ -245,2 +245,2 @@\n-static void restore_locks(JavaThread* thread, GrowableArray<compiledVFrame*>* chunk, bool realloc_failures,\n-                          frame& deoptee, int exec_mode, bool& deoptimized_objects) {\n+static void restore_eliminated_locks(JavaThread* thread, GrowableArray<compiledVFrame*>* chunk, bool realloc_failures,\n+                                     frame& deoptee, int exec_mode, bool& deoptimized_objects) {\n@@ -308,1 +308,1 @@\n-    realloc_failures = restore_allocations(thread, Unpack_none, cm, deoptee, map, chunk, deoptimized_objects);\n+    realloc_failures = rematerialize_objects(thread, Unpack_none, cm, deoptee, map, chunk, deoptimized_objects);\n@@ -319,1 +319,1 @@\n-    restore_locks(thread, chunk, realloc_failures, deoptee, Unpack_none, deoptimized_objects);\n+    restore_eliminated_locks(thread, chunk, realloc_failures, deoptee, Unpack_none, deoptimized_objects);\n@@ -379,1 +379,1 @@\n-    realloc_failures = restore_allocations(thread, exec_mode, cm, deoptee, map, chunk, unused);\n+    realloc_failures = rematerialize_objects(thread, exec_mode, cm, deoptee, map, chunk, unused);\n@@ -397,1 +397,1 @@\n-    restore_locks(thread, chunk, realloc_failures, deoptee, exec_mode, unused);\n+    restore_eliminated_locks(thread, chunk, realloc_failures, deoptee, exec_mode, unused);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run testng\/othervm  -XX:-TieredCompilation --add-opens jdk.incubator.vector\/jdk.incubator.vector=ALL-UNNAMED\n+ * @run testng\/othervm\/timeout=300  -XX:-TieredCompilation --add-opens jdk.incubator.vector\/jdk.incubator.vector=ALL-UNNAMED\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}