{"files":[{"patch":"@@ -158,1 +158,0 @@\n-vmTestbase\/gc\/gctests\/WeakReference\/weak006\/weak006.java 8286737 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.gctests.WeakReference.weak006.weak006 -t 1\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+IgnoreUnrecognizedVMOptions -XX:-ScavengeBeforeFullGC gc.gctests.WeakReference.weak006.weak006 -t 1\n@@ -57,0 +57,14 @@\n+\n+class MySoftReference<T> extends SoftReference<T> {\n+    public MySoftReference(T obj) {\n+        super(obj);\n+    }\n+}\n+\n+\n+class MyWeakReference<T> extends WeakReference<T> {\n+    public MyWeakReference(T obj) {\n+        super(obj);\n+    }\n+}\n+\n@@ -66,1 +80,1 @@\n-        private Object makeReference(int n, Object o) {\n+        private Reference<Object> makeReference(int n, Object o) {\n@@ -69,1 +83,1 @@\n-                    return new WeakReference(o);\n+                    return new MyWeakReference(o);\n@@ -71,26 +85,1 @@\n-                    return new SoftReference(o);\n-                case 2:\n-                    return new PhantomReference(o, null);\n-                case 4: {\n-                    \/\/ Array of strong references\n-                    int len = Memory.getArrayLength(objectSize, Memory.getReferenceSize());\n-                    Object[] arr = new Object[len];\n-                    for (int i = 0; i < len; ++i) {\n-                        arr[i] = o;\n-                    }\n-                    return arr;\n-                }\n-                case 5: {\n-                    \/\/ reference to array of strong references and strong reference to reference\n-                    int len = Memory.getArrayLength(objectSize, Memory.getReferenceSize());\n-                    Object[] arr = new Object[len];\n-                    for (int i = 1; i < len; ++i) {\n-                        arr[i] = o;\n-                    }\n-                    Reference ref = (Reference) makeReference(LocalRandom.nextInt(3), arr);\n-                    if (len > 0) {\n-                        arr[0] = ref;\n-                    }\n-                    return ref;\n-                }\n-                case 3:\n+                    return new MySoftReference(o);\n@@ -98,2 +87,1 @@\n-                    \/\/ Strong reference\n-                    return o;\n+                    throw new RuntimeException(\"Incorrect reference type\");\n@@ -111,1 +99,1 @@\n-            references[0] = new WeakReference(obj);\n+            references[0] = new MyWeakReference(obj);\n@@ -116,1 +104,1 @@\n-                    lastReference = (Reference) makeReference(n, references[i - 1]);\n+                    lastReference = makeReference(n, references[i - 1]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/WeakReference\/weak006\/weak006.java","additions":21,"deletions":33,"binary":false,"changes":54,"status":"modified"}]}