{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,43 +142,4 @@\n-     * Obtain a new instance of a\n-     * {@code DocumentBuilderFactory}. This static method creates\n-     * a new factory instance.\n-     * This method uses the following ordered lookup procedure to determine\n-     * the {@code DocumentBuilderFactory} implementation class to\n-     * load:\n-     * <ul>\n-     * <li>\n-     * Use the {@code javax.xml.parsers.DocumentBuilderFactory} system\n-     * property.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the configuration file \"jaxp.properties\". The file is in standard\n-     * {@link java.util.Properties} format and typically located in the\n-     * {@code conf} directory of the Java installation. It contains the fully qualified\n-     * name of the implementation class with the key being the system property\n-     * defined above.\n-     * <p>\n-     * The jaxp.properties file is read only once by the JAXP implementation\n-     * and its values are then cached for future use.  If the file does not exist\n-     * when the first attempt is made to read from it, no further attempts are\n-     * made to check for its existence.  It is not possible to change the value\n-     * of any property in jaxp.properties after it has been read for the first time.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the service-provider loading facility, defined by the\n-     * {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-     * implementation of the service using the {@linkplain\n-     * java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-     * the service-provider loading facility will use the {@linkplain\n-     * java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-     * to attempt to load the service. If the context class\n-     * loader is null, the {@linkplain\n-     * ClassLoader#getSystemClassLoader() system class loader} will be used.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Otherwise, the {@linkplain #newDefaultInstance() system-default}\n-     * implementation is returned.\n-     * <\/li>\n-     * <\/ul>\n+     * Obtains a new instance of a {@code DocumentBuilderFactory}.\n+     * This method uses the\n+     * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+     * to determine the {@code DocumentBuilderFactory} implementation class to load.\n@@ -188,1 +149,1 @@\n-     * {@code DocumentBuilderFactory} it can use the factory to\n+     * {@code DocumentBuilderFactory}, it can use the factory to\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/parsers\/DocumentBuilderFactory.java","additions":6,"deletions":45,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,42 +148,4 @@\n-     * Obtain a new instance of a {@code SAXParserFactory}. This\n-     * static method creates a new factory instance\n-     * This method uses the following ordered lookup procedure to determine\n-     * the {@code SAXParserFactory} implementation class to\n-     * load:\n-     * <ul>\n-     * <li>\n-     * Use the {@code javax.xml.parsers.SAXParserFactory} system\n-     * property.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the configuration file \"jaxp.properties\". The file is in standard\n-     * {@link java.util.Properties} format and typically located in the\n-     * {@code conf} directory of the Java installation. It contains the fully qualified\n-     * name of the implementation class with the key being the system property\n-     * defined above.\n-     * <p>\n-     * The jaxp.properties file is read only once by the JAXP implementation\n-     * and its values are then cached for future use.  If the file does not exist\n-     * when the first attempt is made to read from it, no further attempts are\n-     * made to check for its existence.  It is not possible to change the value\n-     * of any property in jaxp.properties after it has been read for the first time.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the service-provider loading facility, defined by the\n-     * {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-     * implementation of the service using the {@linkplain\n-     * java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-     * the service-provider loading facility will use the {@linkplain\n-     * java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-     * to attempt to load the service. If the context class\n-     * loader is null, the {@linkplain\n-     * ClassLoader#getSystemClassLoader() system class loader} will be used.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Otherwise, the {@linkplain #newDefaultInstance() system-default}\n-     * implementation is returned.\n-     * <\/li>\n-     * <\/ul>\n+     * Obtains a new instance of a {@code SAXParserFactory}.\n+     * This method uses the\n+     * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+     * to determine the {@code SAXParserFactory} implementation class to load.\n@@ -193,1 +155,1 @@\n-     * {@code SAXParserFactory} it can use the factory to\n+     * {@code SAXParserFactory}, it can use the factory to\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/parsers\/SAXParserFactory.java","additions":6,"deletions":44,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,3 @@\n-   * Create a new instance of the factory.\n+   * Creates a new instance of the factory. This method uses the\n+   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * to determine the {@code XMLEventFactory} implementation class to load.\n@@ -86,48 +88,2 @@\n-   * This static method creates a new factory instance.\n-   * This method uses the following ordered lookup procedure to determine\n-   * the XMLEventFactory implementation class to load:\n-   * <ul>\n-   * <li>\n-   *   Use the javax.xml.stream.XMLEventFactory system property.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Use the service-provider loading facility, defined by the\n-   *   {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-   *   implementation of the service using the {@linkplain\n-   *   java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-   *   the service-provider loading facility will use the {@linkplain\n-   *   java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-   *   to attempt to load the service. If the context class\n-   *   loader is null, the {@linkplain\n-   *   ClassLoader#getSystemClassLoader() system class loader} will be used.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Otherwise, the {@linkplain #newDefaultFactory() system-default}\n-   *   implementation is returned.\n-   * <\/li>\n-   * <\/ul>\n-   * <p>\n-   *   Once an application has obtained a reference to a XMLEventFactory it\n-   *   can use the factory to configure and obtain stream instances.\n+   * Once an application has obtained a reference to a {@code XMLEventFactory}, it\n+   * can use the factory to configure and obtain stream instances.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLEventFactory.java","additions":6,"deletions":50,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,3 @@\n-   * Create a new instance of the factory.\n+   * Creates a new instance of the factory. This method uses the\n+   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * to determine the {@code XMLEventFactory} implementation class to load.\n@@ -172,45 +174,2 @@\n-   * This static method creates a new factory instance.\n-   * This method uses the following ordered lookup procedure to determine\n-   * the XMLInputFactory implementation class to load:\n-   *\n-   * <ul>\n-   * <li>\n-   *   <p>Use the javax.xml.stream.XMLInputFactory system property.\n-   * <\/li>\n-   * <li>\n-   *   <p>Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n-   * <\/li>\n-   * <li>\n-   *   <p>Use the service-provider loading facility, defined by the\n-   *   {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-   *   implementation of the service using the {@linkplain\n-   *   java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-   *   the service-provider loading facility will use the {@linkplain\n-   *   java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-   *   to attempt to load the service. If the context class\n-   *   loader is null, the {@linkplain\n-   *   ClassLoader#getSystemClassLoader() system class loader} will be used.\n-   * <\/li>\n-   * <li>\n-   * <p>Otherwise, the {@linkplain #newDefaultFactory() system-default}\n-   *    implementation is returned.\n-   * <\/li>\n-   * <\/ul>\n-   * <p>\n-   *   Once an application has obtained a reference to a XMLInputFactory it\n-   *   can use the factory to configure and obtain stream instances.\n+   * Once an application has obtained a reference to a {@code XMLInputFactory}, it\n+   * can use the factory to configure and obtain stream instances.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLInputFactory.java","additions":6,"deletions":47,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,47 +147,3 @@\n-   * Create a new instance of the factory.\n-   * <p>\n-   * This static method creates a new factory instance. This method uses the\n-   * following ordered lookup procedure to determine the XMLOutputFactory\n-   * implementation class to load:\n-   * <ul>\n-   * <li>\n-   *   Use the javax.xml.stream.XMLOutputFactory system property.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Use the service-provider loading facility, defined by the\n-   *   {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-   *   implementation of the service using the {@linkplain\n-   *   java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-   *   the service-provider loading facility will use the {@linkplain\n-   *   java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-   *   to attempt to load the service. If the context class\n-   *   loader is null, the {@linkplain\n-   *   ClassLoader#getSystemClassLoader() system class loader} will be used.\n-   * <\/li>\n-   * <li>\n-   *   <p>\n-   *   Otherwise, the {@linkplain #newDefaultFactory() system-default}\n-   *   implementation is returned.\n-   * <\/li>\n-   * <\/ul>\n+   * Creates a new instance of the factory. This method uses the\n+   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * to determine the {@code XMLEventFactory} implementation class to load.\n@@ -195,1 +151,1 @@\n-   * Once an application has obtained a reference to a XMLOutputFactory it\n+   * Once an application has obtained a reference to a {@code XMLOutputFactory}, it\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLOutputFactory.java","additions":5,"deletions":49,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,43 +69,3 @@\n-     * Obtain a new instance of a {@code TransformerFactory}.\n-     * This static method creates a new factory instance.\n-     * <p>\n-     * This method uses the following ordered lookup procedure to determine\n-     * the {@code TransformerFactory} implementation class to load:\n-     * <ul>\n-     * <li>\n-     * Use the {@code javax.xml.transform.TransformerFactory} system\n-     * property.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the configuration file \"jaxp.properties\". The file is in standard\n-     * {@link java.util.Properties} format and typically located in the\n-     * {@code conf} directory of the Java installation. It contains the fully qualified\n-     * name of the implementation class with the key being the system property\n-     * defined above.\n-     * <p>\n-     * The jaxp.properties file is read only once by the JAXP implementation\n-     * and its values are then cached for future use.  If the file does not exist\n-     * when the first attempt is made to read from it, no further attempts are\n-     * made to check for its existence.  It is not possible to change the value\n-     * of any property in jaxp.properties after it has been read for the first time.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     * Use the service-provider loading facility, defined by the\n-     *   {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-     *   implementation of the service using the {@linkplain\n-     *   java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-     *   the service-provider loading facility will use the {@linkplain\n-     *   java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-     *   to attempt to load the service. If the context class\n-     *   loader is null, the {@linkplain\n-     *   ClassLoader#getSystemClassLoader() system class loader} will be used.\n-     * <\/li>\n-     * <li>\n-     * <p>\n-     *   Otherwise, the {@linkplain #newDefaultInstance() system-default}\n-     *   implementation is returned.\n-     * <\/li>\n-     * <\/ul>\n-     *\n+     * Obtains a new instance of a {@code TransformerFactory}. This method uses the\n+     * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+     * to determine the {@code TransformerFactory} implementation class to load.\n@@ -114,1 +74,1 @@\n-     * {@code TransformerFactory} it can use the factory to configure\n+     * {@code TransformerFactory}, it can use the factory to configure\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/transform\/TransformerFactory.java","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,62 +146,5 @@\n-     * Lookup an implementation of the {@code SchemaFactory} that supports the specified\n-     * schema language and return it.\n-     *\n-     * <p>To find a {@code SchemaFactory} object for a given schema language,\n-     * this method looks the following places in the following order\n-     * where \"the class loader\" refers to the context class loader:\n-     * <ol>\n-     *  <li>\n-     *     <p>\n-     *     If the system property\n-     *     {@code \"javax.xml.validation.SchemaFactory:<i>schemaLanguage<\/i>\"}\n-     *     is present (where <i>schemaLanguage<\/i> is the parameter\n-     *     to this method), then its value is read\n-     *     as a class name. The method will try to\n-     *     create a new instance of this class by using the class loader,\n-     *     and returns it if it is successfully created.\n-     *   <\/li>\n-     *   <li>\n-     *     <p>\n-     *     Use the configuration file \"jaxp.properties\". The file is in standard\n-     *     {@link java.util.Properties} format and typically located in the\n-     *     conf directory of the Java installation. It contains the fully qualified\n-     *     name of the implementation class with the key being the system property\n-     *     defined above.\n-     *     <p>\n-     *     The jaxp.properties file is read only once by the JAXP implementation\n-     *     and its values are then cached for future use.  If the file does not exist\n-     *     when the first attempt is made to read from it, no further attempts are\n-     *     made to check for its existence.  It is not possible to change the value\n-     *     of any property in jaxp.properties after it has been read for the first time.\n-     *   <\/li>\n-     *   <li>\n-     *   <p>\n-     *   Use the service-provider loading facility, defined by the\n-     *   {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-     *   implementation of the service using the {@linkplain\n-     *   java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-     *   the service-provider loading facility will use the {@linkplain\n-     *   java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-     *   to attempt to load the service. If the context class\n-     *   loader is null, the {@linkplain\n-     *   ClassLoader#getSystemClassLoader() system class loader} will be used.\n-     *   <br>\n-     *   Each potential service provider is required to implement the method\n-     *        {@link #isSchemaLanguageSupported(String schemaLanguage)}.\n-     *   <br>\n-     *   The first service provider found that supports the specified schema\n-     *   language is returned.\n-     *   <br>\n-     *   In case of {@link java.util.ServiceConfigurationError} a\n-     *   {@link SchemaFactoryConfigurationError} will be thrown.\n-     *   <\/li>\n-     *   <li>\n-     *     <p>\n-     *     Platform default {@code SchemaFactory} is located\n-     *     in an implementation specific way. There must be a\n-     *     {@linkplain #newDefaultInstance() platform default}\n-     *     {@code SchemaFactory} for W3C XML Schema.\n-     *   <\/li>\n-     * <\/ol>\n-     *\n-     * <p>If everything fails, {@link IllegalArgumentException} will be thrown.\n+     * Obtains a new instance of a {@code SchemaFactory} that supports\n+     * the specified schema language. This method uses the\n+     * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+     * to determine and load the {@code SchemaFactory} implementation that supports\n+     * the specified schema language.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/validation\/SchemaFactory.java","additions":6,"deletions":63,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,56 +125,5 @@\n-    * <p>Get a new {@code XPathFactory} instance using the specified object model.<\/p>\n-    *\n-    * <p>To find a {@code XPathFactory} object,\n-    * this method looks the following places in the following order where \"the class loader\" refers to the context class loader:<\/p>\n-    * <ol>\n-    *   <li>\n-    *     <p>\n-    *     If the system property {@link #DEFAULT_PROPERTY_NAME} + \":uri\" is present,\n-    *     where uri is the parameter to this method, then its value is read as a class name.\n-    *     The method will try to create a new instance of this class by using the class loader,\n-    *     and returns it if it is successfully created.\n-    *   <\/li>\n-    *   <li>\n-    *     <p>\n-    *     Use the configuration file \"jaxp.properties\". The file is in standard\n-    *     {@link java.util.Properties} format and typically located in the\n-    *     conf directory of the Java installation. It contains the fully qualified\n-    *     name of the implementation class with the key being the system property\n-    *     defined above.\n-    *     <p>\n-    *     The jaxp.properties file is read only once by the JAXP implementation\n-    *     and its values are then cached for future use.  If the file does not exist\n-    *     when the first attempt is made to read from it, no further attempts are\n-    *     made to check for its existence.  It is not possible to change the value\n-    *     of any property in jaxp.properties after it has been read for the first time.\n-    *   <\/li>\n-    *   <li>\n-    *     <p>\n-    *     Use the service-provider loading facility, defined by the\n-    *     {@link java.util.ServiceLoader} class, to attempt to locate and load an\n-    *     implementation of the service using the {@linkplain\n-    *     java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n-    *     the service-provider loading facility will use the {@linkplain\n-    *     java.lang.Thread#getContextClassLoader() current thread's context class loader}\n-    *     to attempt to load the service. If the context class\n-    *     loader is null, the {@linkplain\n-    *     ClassLoader#getSystemClassLoader() system class loader} will be used.\n-    *     <br>\n-    *     Each potential service provider is required to implement the method\n-    *     {@link #isObjectModelSupported(String objectModel)}.\n-    *     The first service provider found that supports the specified object\n-    *     model is returned.\n-    *     <br>\n-    *     In case of {@link java.util.ServiceConfigurationError} an\n-    *     {@link XPathFactoryConfigurationException} will be thrown.\n-    *   <\/li>\n-    *   <li>\n-    *     <p>\n-    *     Platform default {@code XPathFactory} is located in a platform\n-    *     specific way.\n-    *     There must be a {@linkplain #newDefaultInstance() platform default}\n-    *     {@code XPathFactory} for the W3C DOM, i.e.\n-    *     {@link #DEFAULT_OBJECT_MODEL_URI}.\n-    *   <\/li>\n-    * <\/ol>\n-    * <p>If everything fails, an {@code XPathFactoryConfigurationException} will be thrown.\n+    * Obtains a new {@code XPathFactory} instance using the specified object model.\n+    * This method uses the\n+    * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+    * to determine and load the {@code XPathFactory} implementation that supports\n+    * the specified object model.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/xpath\/XPathFactory.java","additions":6,"deletions":57,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -30,0 +30,193 @@\n+ * <h2 id=\"LookupMechanism\">JAXP Lookup Mechanism<\/h2>\n+ * JAXP defines an ordered lookup procedure to determine the implementation class\n+ * to load for the JAXP factories. Factories that support the mechanism are listed\n+ * in the table below along with the method, System Property name, Configuration\n+ * File, and System Default method to be used in the procedure.\n+ *\n+ * <table class=\"plain\" id=\"Factories\">\n+ * <caption>JAXP Factories<\/caption>\n+ * <thead>\n+ * <tr>\n+ * <th scope=\"col\">Factory<\/th>\n+ * <th scope=\"col\">Method<\/th>\n+ * <th scope=\"col\">System Property Name<\/th>\n+ * <th scope=\"col\">Configuration File<\/th>\n+ * <th scope=\"col\">System Default<\/th>\n+ * <\/tr>\n+ * <\/thead>\n+ *\n+ * <tbody>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"DOM\">\n+ *     {@link javax.xml.parsers.DocumentBuilderFactory DocumentBuilderFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.parsers.DocumentBuilderFactory#newInstance() newInstance()}<\/td>\n+ * <td>{@code javax.xml.parsers.DocumentBuilderFactory}<\/td>\n+ * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td>{@link javax.xml.parsers.DocumentBuilderFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"SAX\">\n+ *     {@link javax.xml.parsers.SAXParserFactory SAXParserFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.parsers.SAXParserFactory#newInstance() newInstance()}<\/td>\n+ * <td>{@code javax.xml.parsers.SAXParserFactory}<\/td>\n+ * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td>{@link javax.xml.parsers.SAXParserFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"StAXEvent\">\n+ *     {@link javax.xml.stream.XMLEventFactory XMLEventFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.stream.XMLEventFactory#newFactory() newFactory()}<\/td>\n+ * <td>{@code javax.xml.stream.XMLEventFactory}<\/td>\n+ * <td>\n+ *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n+ *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ * <\/td>\n+ * <td>{@link javax.xml.stream.XMLEventFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"StAXInput\">\n+ *     {@link javax.xml.stream.XMLInputFactory XMLInputFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.stream.XMLInputFactory#newFactory() newFactory()}<\/td>\n+ * <td>{@code javax.xml.stream.XMLInputFactory}<\/td>\n+ * <td>\n+ *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n+ *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ * <\/td>\n+ * <td>{@link javax.xml.stream.XMLInputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"StAXOutput\">\n+ *     {@link javax.xml.stream.XMLOutputFactory XMLOutputFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.stream.XMLOutputFactory#newFactory() newFactory()}<\/td>\n+ * <td>{@code javax.xml.stream.XMLOutputFactory}<\/td>\n+ * <td>\n+ *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n+ *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ * <\/td>\n+ * <td>{@link javax.xml.stream.XMLOutputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"XSLT\">\n+ *     {@link javax.xml.transform.TransformerFactory TransformerFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.transform.TransformerFactory#newInstance() newInstance()}<\/td>\n+ * <td>{@code javax.xml.transform.TransformerFactory}<\/td>\n+ * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td>{@link javax.xml.transform.TransformerFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"Validation\">\n+ *     {@link javax.xml.validation.SchemaFactory SchemaFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.validation.SchemaFactory#newInstance(java.lang.String) newInstance(schemaLanguage)}<\/td>\n+ * <td>{@code javax.xml.validation.SchemaFactory:}<i>schemaLanguage<\/i>[1]<\/td>\n+ * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td>{@link javax.xml.validation.SchemaFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"XPath\">\n+ *     {@link javax.xml.xpath.XPathFactory XPathFactory}\n+ * <\/th>\n+ * <td>{@link javax.xml.xpath.XPathFactory#newInstance(java.lang.String) newInstance(uri)}<\/td>\n+ * <td>{@link javax.xml.xpath.XPathFactory#DEFAULT_PROPERTY_NAME DEFAULT_PROPERTY_NAME} + \":uri\"[2]<\/td>\n+ * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td>{@link javax.xml.xpath.XPathFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <\/tbody>\n+ * <\/table>\n+ *\n+ * <b>[1]<\/b> where <i>schemaLanguage<\/i> is the parameter to the\n+ * {@link javax.xml.validation.SchemaFactory#newInstance(java.lang.String) newInstance(schemaLanguage)}\n+ * method.\n+ * <p>\n+ * <b>[2]<\/b> where <i>uri<\/i> is the parameter to the\n+ * {@link javax.xml.xpath.XPathFactory#newInstance(java.lang.String) newInstance(uri)}\n+ * method.\n+ *\n+ * <h3 id=\"JaxpProperties\">jaxp.properties<\/h3>\n+ * {@code jaxp.properties} is a configuration file in standard\n+ * {@link java.util.Properties} format and typically located in the {@code conf}\n+ * directory of the Java installation. It contains the fully qualified\n+ * name of the implementation class with the key being the system property name\n+ * defined in <a href=\"#Factories\">the table<\/a> above.\n+ * <p>\n+ * The {@code jaxp.properties} file is read only once by the implementation and\n+ * the values are then cached for future use.  If the file does not exist when\n+ * the first attempt is made to read from it, no further attempts\n+ * are made to check for its existence. It is not possible to change the value\n+ * of any property after it has been read for the first time.\n+ *\n+ * <h3 id=\"StAXProperties\">stax.properties<\/h3>\n+ * {@code stax.properties} is a configuration file that functions the same as\n+ * {@code jaxp.properties} except that it is only used by StAX factory lookup.\n+ *\n+ * <h3 id=\"LookupProcedure\">Lookup Procedure<\/h3>\n+ * The <a href=\"#Factories\">JAXP Factories<\/a> follow the procedure described\n+ * below in order to locate and load the implementation class:\n+ *\n+ * <ul>\n+ * <li>\n+ * Use the system property as described in column System Property of the table\n+ * <a href=\"#Factories\">JAXP Factories<\/a> above.\n+ * <\/li>\n+ * <li>\n+ * <p>\n+ * Use the configuration file <a href=\"#JaxpProperties\">jaxp.properties<\/a> as\n+ * indicated in the table <a href=\"#Factories\">JAXP Factories<\/a>. For StAX,\n+ * if <a href=\"#StAXProperties\">stax.properties<\/a> exists, the factories will\n+ * first attempt to read from it instead of <a href=\"#JaxpProperties\">jaxp.properties<\/a>.\n+ * <\/li>\n+ * <li>\n+ * <p>\n+ * Use the service-provider loading facility, defined by the\n+ * {@link java.util.ServiceLoader} class, to attempt to locate and load an\n+ * implementation of the service using the {@linkplain\n+ * java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n+ * the service-provider loading facility will use the {@linkplain\n+ * java.lang.Thread#getContextClassLoader() current thread's context class loader}\n+ * to attempt to load the service. If the context class\n+ * loader is null, the {@linkplain\n+ * ClassLoader#getSystemClassLoader() system class loader} will be used.\n+ *\n+ * <h3>{@link javax.xml.validation.SchemaFactory SchemaFactory}<\/h3>\n+ * In case of the {@link javax.xml.validation.SchemaFactory SchemaFactory},\n+ * each potential service provider is required to implement the method\n+ * {@link javax.xml.validation.SchemaFactory#isSchemaLanguageSupported(java.lang.String)\n+ * isSchemaLanguageSupported(String schemaLanguage)}.\n+ * The first service provider found that supports the specified schema language\n+ * is returned.\n+ *\n+ * <h3>{@link javax.xml.xpath.XPathFactory XPathFactory}<\/h3>\n+ * In case of the {@link javax.xml.xpath.XPathFactory XPathFactory},\n+ * each potential service provider is required to implement the method\n+ * {@link javax.xml.xpath.XPathFactory#isObjectModelSupported(String objectModel)\n+ * isObjectModelSupported(String objectModel)}.\n+ * The first service provider found that supports the specified object model is\n+ * returned.\n+ * <\/li>\n+ * <li>\n+ * <p>\n+ * Otherwise, the {@code system-default} implementation is returned, which is\n+ * equivalent to calling the {@code newDefaultInstance() or newDefaultFactory()}\n+ * method as shown in column System Default of the table\n+ * <a href=\"#Factories\">JAXP Factories<\/a> above.\n+ *\n+ * <h3>{@link javax.xml.validation.SchemaFactory SchemaFactory}<\/h3>\n+ * In case of the {@link javax.xml.validation.SchemaFactory SchemaFactory},\n+ * there must be a {@linkplain javax.xml.validation.SchemaFactory#newDefaultInstance()\n+ * platform default} {@code SchemaFactory} for W3C XML Schema.\n+ *\n+ * <h3>{@link javax.xml.xpath.XPathFactory XPathFactory}<\/h3>\n+ * In case of the {@link javax.xml.xpath.XPathFactory XPathFactory},\n+ * there must be a\n+ * {@linkplain javax.xml.xpath.XPathFactory#newDefaultInstance() platform default}\n+ * {@code XPathFactory} for the W3C DOM, i.e.\n+ * {@link javax.xml.xpath.XPathFactory#DEFAULT_OBJECT_MODEL_URI DEFAULT_OBJECT_MODEL_URI}.\n+ * <\/li>\n+ * <\/ul>\n+ *\n@@ -82,2 +275,2 @@\n- * A system property can be specified in the {@code jaxp.properties} file to\n- * set the behavior for all invocations of the JDK. The format is\n+ * A system property can be specified in the <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ * file to set the behavior for all invocations of the JDK. The format is\n@@ -88,3 +281,0 @@\n- * <p>\n- * For details about the JAXP configuration file {@code jaxp.properties}, refer to\n- * {@link javax.xml.parsers.SAXParserFactory#newInstance() SAXParserFactory#newInstance}.\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":195,"deletions":5,"binary":false,"changes":200,"status":"modified"}]}