{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler.pea;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 1, time = 1, timeUnit = TimeUnit.SECONDS)\n+@State(Scope.Benchmark)\n+@Fork(value = 3)\n+public class Blender {\n+    @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"})\n+    int iteration;\n+\n+    private static class Color {\n+        double r, g, b;\n+\n+        private Color(double r, double g, double b) {\n+            this.r = r;\n+            this.g = g;\n+            this.b = b;\n+        }\n+\n+        public static Color color() {\n+            return new Color(0, 0, 0);\n+        }\n+\n+        public void add(Color other) {\n+            r += other.r;\n+            g += other.g;\n+            b += other.b;\n+        }\n+\n+        public void add(double nr, double ng, double nb) {\n+            r += nr;\n+            g += ng;\n+            b += nb;\n+        }\n+\n+        public void multiply(double factor) {\n+            r *= factor;\n+            g *= factor;\n+            b *= factor;\n+        }\n+    }\n+\n+    private static final Color[][][] colors = new Color[100][100][100];\n+\n+    @Benchmark\n+    public void initialize() {\n+        Color id = new Color(iteration \/ 20, 0, 1);\n+        for (int x = 0; x < colors.length; x++) {\n+            Color[][] plane = colors[x];\n+            for (int y = 0; y < plane.length; y++) {\n+                Color[] row = plane[y];\n+                for (int z = 0; z < row.length; z++) {\n+                    Color color = new Color(x, y, z);\n+                    color.add(id);\n+                    if ((color.r + color.g + color.b) % 42 == 0) {\n+                         \/\/ PEA only allocates a color object here\n+                         row[z] = color;\n+                    } else {\n+                         \/\/ Here the color object is not allocated at all\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/pea\/Blender.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}