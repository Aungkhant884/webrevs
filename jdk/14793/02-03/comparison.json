{"files":[{"patch":"@@ -441,1 +441,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    private Content getInlineTagOutput(Element element, DocTree tree, TagletWriter.Context context) {\n+    private Content getInlineTagOutput(Element element, InlineTagTree tree, TagletWriter.Context context) {\n@@ -1391,2 +1391,2 @@\n-                    if (node instanceof InlineTagTree) {\n-                        var output = getInlineTagOutput(element, node, context);\n+                    if (node instanceof InlineTagTree itt) {\n+                        var output = getInlineTagOutput(element, itt, context);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialMethodWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.source.doctree.UnknownBlockTagTree;\n@@ -81,1 +80,0 @@\n-\n@@ -108,15 +106,0 @@\n-    \/**\n-     * Returns whether this taglet accepts a {@code DocTree} node.\n-     * The taglet accepts a tree node if it has the same kind, and\n-     * if the kind is {@code UNKNOWN_BLOCK_TAG} the same tag name.\n-     *\n-     * @param tree the tree node\n-     * @return {@code true} if this taglet accepts this tree node\n-     *\/\n-    public boolean accepts(DocTree tree) {\n-        return (tree.getKind() == DocTree.Kind.UNKNOWN_BLOCK_TAG\n-                    && tagKind == DocTree.Kind.UNKNOWN_BLOCK_TAG)\n-                ? ((UnknownBlockTagTree) tree).getTagName().equals(name)\n-                : tree.getKind() == tagKind;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/BaseTaglet.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/DeprecatedTaglet.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/IndexTaglet.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    public InheritDocTaglet(HtmlConfiguration config) {\n+    InheritDocTaglet(HtmlConfiguration config) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/InheritDocTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import com.sun.source.doctree.BlockTagTree;\n@@ -38,0 +39,1 @@\n+import com.sun.source.doctree.UnknownBlockTagTree;\n@@ -153,0 +155,14 @@\n+    \/**\n+     * Returns whether this taglet accepts a {@code BlockTagTree} node.\n+     * The taglet accepts a tree node if it has the same kind, and\n+     * if the kind is {@code UNKNOWN_BLOCK_TAG} the same tag name.\n+     *\n+     * @param tree the tree node\n+     * @return {@code true} if this taglet accepts this tree node\n+     *\/\n+    public boolean accepts(BlockTagTree tree) {\n+        return (tree.getKind() == DocTree.Kind.UNKNOWN_BLOCK_TAG && tagKind == DocTree.Kind.UNKNOWN_BLOCK_TAG)\n+                ? tree.getTagName().equals(name)\n+                : tree.getKind() == tagKind;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SimpleTaglet.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SpecTaglet.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    public SummaryTaglet(HtmlConfiguration config) {\n+    SummaryTaglet(HtmlConfiguration config) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SummaryTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SystemPropertyTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/Taglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -463,1 +463,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/UserTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/ValueTaglet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * correct to not generate any output to fill the between the parts of the\n+ * correct to not generate any output to place between the parts of the\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AbstractDoclet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/ClassWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -992,1 +992,1 @@\n-     * For example, a two dimensional array of String returns \"{@code [][]}\".\n+     * For example, a two-dimensional array of String returns \"{@code [][]}\".\n@@ -2088,0 +2088,9 @@\n+    \/**\n+     * Returns the \"raw\" list of block tags from the doc-comment tree for an element,\n+     * or an empty list if there is no such comment.\n+     *\n+     * Note: The list may include {@code ErroneousTree} nodes.\n+     *\n+     * @param element the element\n+     * @return the list\n+     *\/\n@@ -2092,0 +2101,9 @@\n+    \/**\n+     * Returns the \"raw\" list of block tags from a {@code DocCommentTree}, or an empty list\n+     * if the doc-=comment tree is {@code null}.\n+     *\n+     * Note: The list may include {@code ErroneousTree} nodes.\n+     *\n+     * @param dcTree the doc-comment tree\n+     * @return the list\n+     *\/\n@@ -2096,1 +2114,9 @@\n-    public List<? extends DocTree> getBlockTags(Element element, Predicate<DocTree> filter) {\n+    \/**\n+     * Returns the list of block tags for the doc-comment tree for an element that match\n+     * a given filter, or an empty list if there is no such doc-comment.\n+     *\n+     * @param element the element\n+     * @param filter  the filter\n+     * @return the list\n+     *\/\n+    public List<? extends BlockTagTree> getBlockTags(Element element, Predicate<BlockTagTree> filter) {\n@@ -2099,0 +2125,1 @@\n+                .map(t -> (BlockTagTree) t)\n@@ -2103,1 +2130,10 @@\n-    public <T extends DocTree> List<T> getBlockTags(Element element, Predicate<DocTree> filter, Class<T> tClass) {\n+    \/**\n+     * Returns the list of block tags for the doc-comment tree for an element that match\n+     * a given filter, or an empty list if there is no such doc-comment.\n+     *\n+     * @param <T> the type of the required block tags\n+     * @param element the element\n+     * @param filter  the filter\n+     * @return the list\n+     *\/\n+    public <T extends BlockTagTree> List<T> getBlockTags(Element element, Predicate<BlockTagTree> filter, Class<T> tClass) {\n@@ -2106,0 +2142,1 @@\n+                .map(t -> (BlockTagTree) t)\n@@ -2111,1 +2148,8 @@\n-    public List<? extends DocTree> getBlockTags(Element element, DocTree.Kind kind) {\n+    \/**\n+     * Returns the list of block tags for the doc-comment tree for an element,\n+     * or an empty list if there is no such doc-comment.\n+     *\n+     * @param element the element\n+     * @return the list\n+     *\/\n+    public List<? extends BlockTagTree> getBlockTags(Element element, DocTree.Kind kind) {\n@@ -2115,1 +2159,10 @@\n-    public <T extends DocTree> List<? extends T> getBlockTags(Element element, DocTree.Kind kind, Class<T> tClass) {\n+    \/**\n+     * Returns the list of block tags for the doc-comment tree for an element that match a given kind,\n+     * or an empty list if there is no such doc-comment.\n+     *\n+     * @param <T> the type of the required block tags\n+     * @param element the element\n+     * @param kind the kind for the required block tags\n+     * @return the list\n+     *\/\n+    public <T extends BlockTagTree> List<? extends T> getBlockTags(Element element, DocTree.Kind kind, Class<T> tClass) {\n@@ -2119,3 +2172,10 @@\n-    public List<? extends DocTree> getBlockTags(Element element, String tagName) {\n-        return getBlockTags(element,\n-                t -> (t instanceof BlockTagTree blockTagTree) && blockTagTree.getTagName().equals(tagName));\n+    \/**\n+     * Returns the list of block tags for the doc-comment tree for an element that match a given name,\n+     * or an empty list if there is no such doc-comment.\n+     *\n+     * @param element the element\n+     * @param tagName the name of the required block tags\n+     * @return the list\n+     *\/\n+    public List<? extends BlockTagTree> getBlockTags(Element element, String tagName) {\n+        return getBlockTags(element, t -> t.getTagName().equals(tagName));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":68,"deletions":8,"binary":false,"changes":76,"status":"modified"}]}