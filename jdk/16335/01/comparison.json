{"files":[{"patch":"@@ -637,1 +637,3 @@\n-static bool parseEnumValueAsUintx(enum CompileCommand option, const char* line, uintx& value, int& bytes_read, char* errorbuf, const int buf_size) {\n+enum parse_result_t { handled_ok, handled_err, not_handled };\n+\n+static parse_result_t parseEnumValueAsUintx(enum CompileCommand option, const char* line, uintx& value, int& bytes_read, char* errorbuf, const int buf_size) {\n@@ -641,0 +643,1 @@\n+      return handled_ok;\n@@ -644,0 +647,1 @@\n+      return handled_ok;\n@@ -646,0 +650,1 @@\n+      return handled_err;\n@@ -647,1 +652,1 @@\n-    return true; \/\/ handled\n+\n@@ -649,1 +654,1 @@\n-  return false;\n+  return not_handled;\n@@ -672,5 +677,9 @@\n-    \/\/ Is it a named enum?\n-    bool success = parseEnumValueAsUintx(option, line, value, bytes_read, errorbuf, buf_size);\n-    if (!success) {\n-      \/\/ Is it a raw number?\n-      success = (sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1);\n+    \/\/ Parse named enum value\n+    const parse_result_t res = parseEnumValueAsUintx(option, line, value, bytes_read, errorbuf, buf_size);\n+    if (res != not_handled) {\n+      total_bytes_read += bytes_read;\n+      line += bytes_read;\n+      if (res == handled_ok) {\n+        register_command(matcher, option, value);\n+      }\n+      return; \/\/ in case of an error, error string had been set.\n@@ -678,1 +687,2 @@\n-    if (success) {\n+    \/\/ Parse raw number\n+    if ((sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1)) {\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8318671\n+ * @summary Tests various ways to call memstat\n+ * @library \/test\/lib \/\n+ *\n+ * @run driver compiler.compilercontrol.commands.MemStatTest\n+ *\/\n+\n+package compiler.compilercontrol.commands;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class MemStatTest {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ default => collect\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 1\"); \/\/ should be registered\n+        \/\/ collect explicit\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,collect\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 1\"); \/\/ should be registered\n+        \/\/ print explicit\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,print\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 2\");\n+        \/\/ invalid suboption\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,invalid\", \"-version\")\n+                .shouldNotHaveExitValue(0)\n+                .shouldContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"MemStat: invalid value\")\n+                .shouldNotContain(\"CompileCommand: MemStat\"); \/\/ should *NOT* be registered\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemStatTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -42,12 +42,0 @@\n-\/*\n- * @test CompilerMemoryStatisticTest\n- * @summary Test Compiler.memory\n- * @requires vm.compiler1.enabled\n- * @requires vm.compiler2.enabled\n- *\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm -XX:CompileCommand=memstat,*.*,collect CompilerMemoryStatisticTest\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerMemoryStatisticTest.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}