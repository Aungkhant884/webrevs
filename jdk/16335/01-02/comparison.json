{"files":[{"patch":"@@ -637,1 +637,3 @@\n-enum parse_result_t { handled_ok, handled_err, not_handled };\n+\/\/ Parse an uintx-based option value. Also takes care of parsing enum values for options that are enums.\n+\/\/ Returns true if ok, false if the value could not be parsed.\n+static bool parseUintxValue(enum CompileCommand option, const char* line, uintx& value, int& bytes_read) {\n@@ -639,1 +641,7 @@\n-static parse_result_t parseEnumValueAsUintx(enum CompileCommand option, const char* line, uintx& value, int& bytes_read, char* errorbuf, const int buf_size) {\n+#define IF_ENUM_STRING(S, CMD)                \\\n+  if (strncasecmp(line, S, strlen(S)) == 0) { \\\n+    bytes_read += strlen(S);                  \\\n+    CMD                                       \\\n+    return true;                              \\\n+  }\n+  \/\/ Parse MemStat as enum\n@@ -641,11 +649,10 @@\n-    if (strncasecmp(line, \"collect\", 7) == 0) {\n-      value = (uintx)MemStatAction::collect;\n-      return handled_ok;\n-    } else if (strncasecmp(line, \"print\", 5) == 0) {\n-      value = (uintx)MemStatAction::print;\n-      print_final_memstat_report = true;\n-      return handled_ok;\n-    } else {\n-      jio_snprintf(errorbuf, buf_size, \"MemStat: invalid value expected 'collect' or 'print' (omitting value means 'collect')\");\n-      return handled_err;\n-    }\n+    IF_ENUM_STRING(\"collect\", {\n+        value = (uintx)MemStatAction::collect;\n+    });\n+    IF_ENUM_STRING(\"print\", {\n+        value = (uintx)MemStatAction::print;\n+        print_final_memstat_report = true;\n+    });\n+    return false;\n+  }\n+#undef IF_ENUM_STRING\n@@ -653,0 +660,3 @@\n+  \/\/ Option is not an enum. Parse as literal number.\n+  if ((sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1)) {\n+    return true;\n@@ -654,2 +664,2 @@\n-  return not_handled;\n-#undef HANDLE_VALUE\n+\n+  return false;\n@@ -677,12 +687,1 @@\n-    \/\/ Parse named enum value\n-    const parse_result_t res = parseEnumValueAsUintx(option, line, value, bytes_read, errorbuf, buf_size);\n-    if (res != not_handled) {\n-      total_bytes_read += bytes_read;\n-      line += bytes_read;\n-      if (res == handled_ok) {\n-        register_command(matcher, option, value);\n-      }\n-      return; \/\/ in case of an error, error string had been set.\n-    }\n-    \/\/ Parse raw number\n-    if ((sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1)) {\n+    if (parseUintxValue(option, line, value, bytes_read)) {\n@@ -692,1 +691,0 @@\n-      return;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                .shouldContain(\"MemStat: invalid value\")\n+                .shouldContain(\"Error: Value cannot be read for option 'MemStat'\")\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemStatTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}