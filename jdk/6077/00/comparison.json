{"files":[{"patch":"@@ -177,16 +177,1 @@\n-\/\/ Compile-time asserts.  Cond must be a compile-time constant expression that\n-\/\/ is convertible to bool.  STATIC_ASSERT() can be used anywhere a declaration\n-\/\/ may appear.\n-\/\/\n-\/\/ Implementation Note: STATIC_ASSERT_FAILURE<true> provides a value member\n-\/\/ rather than type member that could be used directly in the typedef, because\n-\/\/ a type member would require conditional use of \"typename\", depending on\n-\/\/ whether Cond is dependent or not.  The use of a value member leads to the\n-\/\/ use of an array type.\n-\n-template<bool x> struct STATIC_ASSERT_FAILURE;\n-template<> struct STATIC_ASSERT_FAILURE<true> { enum { value = 1 }; };\n-\n-#define STATIC_ASSERT(Cond) \\\n-  typedef char PASTE_TOKENS(STATIC_ASSERT_DUMMY_TYPE_, __LINE__)[ \\\n-    STATIC_ASSERT_FAILURE< (Cond) >::value ]\n+#define STATIC_ASSERT(Cond) static_assert((Cond), #Cond)\n","filename":"src\/hotspot\/share\/utilities\/debug.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"}]}