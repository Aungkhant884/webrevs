{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import static org.testng.Assert.*;\n@@ -35,1 +36,1 @@\n- * @build p.Foo p.Bar p.DefaultMethodInvoker\n+ * @build p.Foo p.Bar p.ProxyMaker\n@@ -44,3 +45,4 @@\n-    public static void hasPackageAccess() throws Exception {\n-        Class<?> fooClass = Class.forName(\"p.Foo\");\n-        Class<?> barClass = Class.forName(\"p.Bar\");\n+    public static void publicInterface() throws ReflectiveOperationException {\n+        \/\/ create a proxy instance of a public proxy interface should succeed\n+        Proxy proxy = (Proxy)Proxy.newProxyInstance(DefaultMethodProxy.class.getClassLoader(),\n+                new Class<?>[] { I.class }, IH);\n@@ -48,3 +50,1 @@\n-        \/\/ create a proxy instance of a non-public proxy interface\n-        makeProxy(IH, fooClass).testDefaultMethod(\"foo\");\n-        makeProxy(IH, barClass, fooClass).testDefaultMethod(\"bar\");\n+        testDefaultMethod(proxy, \"I\");\n@@ -52,2 +52,2 @@\n-        \/\/ create a proxy instance of a public proxy interface should succeed\n-        makeProxy(IH, I.class).testDefaultMethod(\"I\");\n+        \/\/ can get the invocation handler\n+        assertTrue(Proxy.getInvocationHandler(proxy) == IH);\n@@ -56,0 +56,1 @@\n+\n@@ -61,3 +62,3 @@\n-                new Object[]{new Class<?>[]{ fooClass }},\n-                new Object[]{new Class<?>[]{ barClass }},\n-                new Object[]{new Class<?>[]{ barClass, fooClass }},\n+                new Object[]{new Class<?>[]{ fooClass }, \"foo\"},\n+                new Object[]{new Class<?>[]{ barClass, fooClass }, \"bar\"},\n+                new Object[]{new Class<?>[]{ barClass }, \"bar\"},\n@@ -68,2 +69,6 @@\n-    public static void noPackageAccess(Class<?>[] intfs) throws Exception {\n-        makeProxy(IH_NO_ACCESS, intfs).testDefaultMethod(\"dummy\");\n+    public static void hasPackageAccess(Class<?>[] intfs, String expected) throws ReflectiveOperationException {\n+        Proxy proxy = (Proxy)Proxy.newProxyInstance(DefaultMethodProxy.class.getClassLoader(), intfs, IH);\n+        testDefaultMethod(proxy, expected);\n+\n+        \/\/ proxy instance is created successfully even invocation handler has no access\n+        Proxy.newProxyInstance(DefaultMethodProxy.class.getClassLoader(), intfs, IH_NO_ACCESS);\n@@ -72,3 +77,14 @@\n-    final Object proxy;\n-    DefaultMethodProxy(Object proxy) {\n-        this.proxy = proxy;\n+    \/\/ IAE thrown at invocation time\n+    @Test(dataProvider = \"nonPublicIntfs\", expectedExceptions = {IllegalAccessException.class})\n+    public static void noPackageAccess(Class<?>[] intfs, String ignored) throws Throwable {\n+        Proxy proxy = (Proxy)Proxy.newProxyInstance(DefaultMethodProxy.class.getClassLoader(), intfs, IH_NO_ACCESS);\n+        try {\n+            testDefaultMethod(proxy, \"dummy\");\n+        } catch (InvocationTargetException e) {\n+            \/\/ unwrap the exception\n+            if (e.getCause() instanceof UndeclaredThrowableException) {\n+                Throwable cause = e.getCause();\n+                throw cause.getCause();\n+            }\n+            throw e;\n+        }\n@@ -80,1 +96,1 @@\n-    void testDefaultMethod(String expected) throws ReflectiveOperationException {\n+    static void testDefaultMethod(Proxy proxy, String expected) throws ReflectiveOperationException {\n@@ -83,1 +99,1 @@\n-        String name = (String)m.invoke(proxy);\n+        String name = (String) m.invoke(proxy);\n@@ -96,1 +112,1 @@\n-            return p.DefaultMethodInvoker.invoke(proxy, method, params);\n+            return p.ProxyMaker.invoke(proxy, method, params);\n@@ -109,6 +125,1 @@\n-            try {\n-                InvocationHandler.invokeDefault(proxy, method, params);\n-                throw new RuntimeException(\"IAE not thrown in invoking: \" + method);\n-            } catch (IllegalAccessException e) {\n-                return \"dummy\";\n-            }\n+            InvocationHandler.invokeDefault(proxy, method, params);\n@@ -118,5 +129,0 @@\n-\n-    private static DefaultMethodProxy makeProxy(InvocationHandler ih, Class<?>... intfs) {\n-        Object proxy = Proxy.newProxyInstance(DefaultMethodProxy.class.getClassLoader(), intfs, ih);\n-        return new DefaultMethodProxy(proxy);\n-    }\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/DefaultMethodProxy.java","additions":37,"deletions":31,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/p\/Bar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-import java.lang.reflect.*;\n-\n-public class DefaultMethodInvoker {\n-     public static Object invoke(Object proxy, Method method, Object... args)\n-            throws Throwable {\n-         return InvocationHandler.invokeDefault(proxy, method, args);\n-     }\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/p\/DefaultMethodInvoker.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/p\/Foo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p;\n+import java.lang.reflect.*;\n+\n+public class ProxyMaker {\n+     public static Object invoke(Object proxy, Method method, Object... args)\n+            throws Throwable {\n+         return InvocationHandler.invokeDefault(proxy, method, args);\n+     }\n+\n+    \/\/ get the invocation handler associated with the proxy\n+    public static InvocationHandler getInvocationHandler(Object proxy) {\n+        return Proxy.getInvocationHandler(proxy);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/p\/ProxyMaker.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/m1\/p\/one\/I.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/m2\/p\/two\/internal\/C.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/m3\/p\/three\/internal\/Q.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/test\/jdk\/test\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/test\/jdk\/test\/NP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/test\/jdk\/test\/ProxyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/src\/test\/jdk\/test\/internal\/R.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/jdk\/jshell\/ExceptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}