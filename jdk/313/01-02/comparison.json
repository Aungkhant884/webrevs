{"files":[{"patch":"@@ -1235,1 +1235,2 @@\n-     * @param args    the parameters used for the method invocation\n+     * @param args    the parameters used for the method invocation; can be {@code null}\n+     *                if the number of formal parameters required by the method is zero.\n@@ -1248,7 +1249,7 @@\n-     *         <li>if length of given {@code args} array doesn't match the number of\n-     *             parameters of the method to be invoked or if {@code args} is null\n-     *             and the method to be invoked has parameters<\/li>\n-     *         <li>if any of the {@code args} elements can't be assigned to the\n-     *             boxed type of the corresponding method parameter or any of the\n-     *             {@code args} elements is null while the corresponding method\n-     *             parameter is of primitive type<\/li>\n+     *         <li>the length of the given {@code args} array does not match the\n+     *             number of parameters of the method to be invoked; or<\/li>\n+     *         <li>any of the {@code args} elements fails the unboxing\n+     *             conversion if the corresponding method parameter type is\n+     *             a primitive type; or if, after possible unboxing, any of the\n+     *             {@code args} elements cannot be assigned to the corresponding\n+     *             method parameter type.<\/li>\n@@ -1268,4 +1269,0 @@\n-        if (args == null) {\n-            \/\/ consistency with Method::invoke: null args array is equivalent to empty array\n-            args = EMPTY_ARGS;\n-        }\n@@ -1331,1 +1328,4 @@\n-            return superMH.invokeExact(proxy, args);\n+            \/\/ the args array can be null if the number of formal parameters required by\n+            \/\/ the method is zero (consistent with Method::invoke)\n+            Object[] params = args != null ? args : EMPTY_ARGS;\n+            return superMH.invokeExact(proxy, params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -304,2 +304,2 @@\n-            new Object[]{new Class<?>[]{I4.class}, I1.class, \"m\"},\n-            new Object[]{new Class<?>[]{I4.class}, I2.class, \"m\"},\n+            new Object[] { new Class<?>[]{I4.class}, I1.class, \"m\" },\n+            new Object[] { new Class<?>[]{I4.class}, I2.class, \"m\" },\n@@ -307,1 +307,1 @@\n-            new Object[]{new Class<?>[]{I12.class}, I12.class, \"m\"},\n+            new Object[] { new Class<?>[]{I12.class}, I12.class, \"m\" },\n@@ -309,1 +309,1 @@\n-            new Object[]{new Class<?>[]{I3.class}, I1.class, \"m\"},\n+            new Object[] { new Class<?>[]{I3.class}, I1.class, \"m\" },\n@@ -311,2 +311,2 @@\n-            new Object[]{new Class<?>[]{I12.class}, DefaultMethods.class, \"test\"},\n-            new Object[]{new Class<?>[]{I12.class}, Runnable.class, \"run\"},\n+            new Object[] { new Class<?>[]{I12.class}, DefaultMethods.class, \"test\" },\n+            new Object[] { new Class<?>[]{I12.class}, Runnable.class, \"run\" },\n@@ -314,1 +314,1 @@\n-            new Object[]{new Class<?>[]{I3.class}, I2.class, \"privateMethod\"}\n+            new Object[] { new Class<?>[]{I3.class}, I2.class, \"privateMethod\" }\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/DefaultMethods.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}