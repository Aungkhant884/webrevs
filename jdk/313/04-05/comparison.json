{"files":[{"patch":"@@ -108,4 +108,5 @@\n-     * This method behaves as if called from an {@code invokespecial} instruction\n-     * from the proxy class as the caller equivalent to the invocation of\n-     * {@code X.super.m(A* a)} where {@code X} is a proxy interface and\n-     * the call to {@code X.super::m(A*)} is resolved to the given {@code method}.\n+     * Invoking this method behaves as if {@code invokespecial} instruction executed\n+     * from the proxy class, targeting the default method in a proxy interface.\n+     * This is equivalent to the invocation:\n+     * {@code X.super.m(A* a)} where {@code X} is a proxy interface and the call to\n+     * {@code X.super::m(A*)} is resolved to the given {@code method}.\n@@ -266,2 +267,1 @@\n-        Class<?> proxyClass = proxy.getClass();\n-        if (!Proxy.isProxyClass(proxyClass)) {\n+        if (!Proxy.isProxyClass(proxy.getClass())) {\n@@ -273,0 +273,3 @@\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Proxy> proxyClass = (Class<? extends Proxy>)proxy.getClass();\n+\n@@ -274,9 +277,2 @@\n-        \/\/ access check if it is a non-public proxy interface or not unconditionally exported\n-        if (!Modifier.isPublic(intf.getModifiers()) ||\n-                !intf.getModule().isExported(intf.getPackageName())) {\n-            \/\/ throw IAE if the caller class has no access to the default method\n-            \/\/ same access check to Method::invoke on the default method\n-            int modifiers = method.getModifiers();\n-            Class<?> caller = Reflection.getCallerClass();\n-            method.checkAccess(caller, intf, proxyClass, modifiers);\n-        }\n+        \/\/ access check on the default method\n+        method.checkAccess(Reflection.getCallerClass(), intf, proxyClass, method.getModifiers());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/InvocationHandler.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -69,0 +70,1 @@\n+    @Stable\n@@ -77,0 +79,1 @@\n+    @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1165,1 +1165,1 @@\n-    static MethodHandle defaultMethodHandle(Class<?> proxyClass, Method method) {\n+    static MethodHandle defaultMethodHandle(Class<? extends Proxy> proxyClass, Method method) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-                visitField(Modifier.PRIVATE | Modifier.STATIC, pm.methodFieldName,\n+                visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL, pm.methodFieldName,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}