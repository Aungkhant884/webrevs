{"files":[{"patch":"@@ -481,0 +481,4 @@\n+                \/\/ long startTime = this.startTime\n+                methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);\n+                methodVisitor.visitFieldInsn(Opcodes.GETFIELD, getInternalClassName(), FIELD_START_TIME, \"J\");\n+                methodVisitor.visitVarInsn(Opcodes.LSTORE, 1);\n@@ -484,2 +488,1 @@\n-                methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);\n-                methodVisitor.visitFieldInsn(Opcodes.GETFIELD, getInternalClassName(), FIELD_START_TIME, \"J\");\n+                methodVisitor.visitVarInsn(Opcodes.LLOAD, 1);\n@@ -490,1 +493,0 @@\n-                methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);\n@@ -492,1 +494,1 @@\n-                methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, getInternalClassName(), FIELD_START_TIME, \"J\");\n+                methodVisitor.visitVarInsn(Opcodes.LSTORE, 1);\n@@ -508,2 +510,1 @@\n-                methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);\n-                methodVisitor.visitFieldInsn(Opcodes.GETFIELD, getInternalClassName(), FIELD_START_TIME, \"J\");\n+                methodVisitor.visitVarInsn(Opcodes.LLOAD, 1);\n@@ -534,3 +535,1 @@\n-                methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);\n-                \/\/ stack: [EW] [EW] [this]\n-                methodVisitor.visitFieldInsn(Opcodes.GETFIELD, getInternalClassName(), FIELD_START_TIME, \"J\");\n+                methodVisitor.visitVarInsn(Opcodes.LLOAD, 1);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jvm;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingFile;\n+import java.nio.file.Path;\n+\n+\/**\n+ * @test Tests that the event duration is zero after a chunk rotation\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main\/othervm jdk.jfr.jvm.TestEventDuration\n+ *\/\n+public class TestEventDuration {\n+\n+    static class InstantEvent extends Event {\n+        long id;\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        try (Recording r1 = new Recording()) {\n+            r1.start();\n+            long counter = 0;\n+            for (int i = 0; i < 10; i ++) {\n+                try (Recording r2 = new Recording()) {\n+                    r2.start();\n+                    InstantEvent e1 = new InstantEvent();\n+                    e1.id = counter++;\n+                    e1.commit();\n+                    InstantEvent e2 = new InstantEvent();\n+                    e2.id = counter++;\n+                    e2.commit();\n+                }\n+            }\n+            Path p = Path.of(\"dump.jfr\");\n+            r1.dump(p);\n+            var events = RecordingFile.readAllEvents(p);\n+            if (events.isEmpty()) {\n+                throw new AssertionError(\"Expected at least one event\");\n+            }\n+            events.forEach(System.out::println);\n+            for (var event : events) {\n+                if (event.getDuration().toNanos() != 0) {\n+                    throw new AssertionError(\"Expected all events to have zero duration\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestEventDuration.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}