{"files":[{"patch":"@@ -202,0 +202,6 @@\n+    @Override\n+    public GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc) {\n+        return gc;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CFileDialog.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3218,6 +3218,0 @@\n-        if (gc == null) {\n-            gc = GraphicsEnvironment.\n-                    getLocalGraphicsEnvironment().\n-                    getDefaultScreenDevice().\n-                    getDefaultConfiguration();\n-        }\n@@ -3225,0 +3219,4 @@\n+            WindowPeer peer = (WindowPeer) this.peer;\n+            if (peer != null) {\n+                gc = peer.getAppropriateGraphicsConfiguration(gc);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -121,0 +121,11 @@\n+\n+    \/**\n+     * Requests a GC that best suits this Window. The returned GC may differ\n+     * from the requested GC passed as the argument to this method. This method\n+     * must return a non-null value (given the argument is non-null as well).\n+     *\n+     * @param gc the requested graphics configuration\n+     * @return a graphics configuration that best suits this Window\n+     *\/\n+    GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/peer\/WindowPeer.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Point;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 8006421\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if Transparency of a frame when dragged is maintained\n+ * across multiple screens.\n+ * @run main\/manual MultiscreenTransparencyTest\n+ *\/\n+\n+public class MultiscreenTransparencyTest {\n+    static Point dragStart = new Point();\n+    static JFrame frame;\n+    static JPanel panel;\n+    static PassFailJFrame passFailJFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gds = ge.getScreenDevices();\n+\n+        if (gds.length < 2) {\n+            System.out.println(\"Returning without testing.\" +\n+                    \"Min 2 Display screens are required for the test!\");\n+            return;\n+        }\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                initialize();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } catch (InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void initialize() throws InterruptedException,\n+            InvocationTargetException {\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. This test requires multi screen display setup.\n+                2. Drag the red transparent frame with mouse to second monitor.\n+                3. If the set transparency is retained then test PASS\n+                else test is FAIL.\n+                \"\"\";\n+        panel = new Custom();\n+        panel.setOpaque(false);\n+        panel.setBackground(null);\n+        frame = new JFrame();\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 8, 40);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame.setUndecorated(true);\n+        frame.setBackground(new Color(0, 0, 0, 0));\n+        frame.setTitle(\"Transparency Test\");\n+        frame.getContentPane().add(panel);\n+        frame.setSize(320, 240);\n+        frame.setResizable(false);\n+        frame.setMinimumSize(new Dimension(1, 1));\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+        frame.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mousePressed(MouseEvent e) {\n+                dragStart = e.getPoint();\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                System.err.println(frame.getGraphicsConfiguration());\n+            }\n+        });\n+\n+        frame.addMouseMotionListener(new MouseMotionListener() {\n+            @Override\n+            public void mouseDragged(MouseEvent e) {\n+                frame.setLocation(\n+                        e.getXOnScreen() - dragStart.x,\n+                        e.getYOnScreen() - dragStart.y\n+                );\n+            }\n+\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+            }\n+        });\n+    }\n+\n+    private static class Custom extends JPanel {\n+        @Override\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            g.setColor(new Color(255, 0, 0, 127));\n+            g.fillOval(0, 0, getWidth(), getHeight());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/MultiscreenTransparencyTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}