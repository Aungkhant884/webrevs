{"files":[{"patch":"@@ -202,0 +202,7 @@\n+    @Override\n+    public GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc)\n+    {\n+        return gc;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CFileDialog.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3218,7 +3218,5 @@\n-        if (gc == null) {\n-            gc = GraphicsEnvironment.\n-                    getLocalGraphicsEnvironment().\n-                    getDefaultScreenDevice().\n-                    getDefaultConfiguration();\n-        }\n-        synchronized (getTreeLock()) {\n+        synchronized(getTreeLock()) {\n+            WindowPeer peer = (WindowPeer) this.peer;\n+            if (peer != null) {\n+                gc = peer.getAppropriateGraphicsConfiguration(gc);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -121,0 +121,11 @@\n+\n+    \/**\n+     * Requests a GC that best suits this Window. The returned GC may differ\n+     * from the requested GC passed as the argument to this method. This method\n+     * must return a non-null value (given the argument is non-null as well).\n+     *\n+     * @param gc the requested graphics configuration\n+     * @return a graphics configuration that best suits this Window\n+     *\/\n+    GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/peer\/WindowPeer.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import sun.awt.X11GraphicsConfig;\n@@ -209,0 +210,33 @@\n+    public GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc)\n+    {\n+        if (graphicsConfig == null || gc == null) {\n+            return gc;\n+        }\n+\n+        final X11GraphicsDevice newDev = getSameScreenDevice(gc);\n+        final int visualToLookFor = graphicsConfig.getVisual();\n+\n+        final GraphicsConfiguration[] configurations = newDev.getConfigurations();\n+        for (final GraphicsConfiguration config : configurations) {\n+            final X11GraphicsConfig x11gc = (X11GraphicsConfig) config;\n+            if (visualToLookFor == x11gc.getVisual()) {\n+                graphicsConfig = x11gc;\n+            }\n+        }\n+        return graphicsConfig;\n+    }\n+\n+    private X11GraphicsDevice getSameScreenDevice(GraphicsConfiguration gc) {\n+        XToolkit.awtLock();\n+        try {\n+            final int screenNum = ((X11GraphicsDevice) gc.getDevice()).getScreen();\n+            return (X11GraphicsDevice) GraphicsEnvironment.\n+                    getLocalGraphicsEnvironment().\n+                    getScreenDevices()[screenNum];\n+        } finally {\n+            XToolkit.awtUnlock();\n+        }\n+    }\n+\n+\n@@ -696,1 +730,1 @@\n-                        newGC = getAppropriateGraphicsConfiguration(gds[i].getDefaultConfiguration());\n+                        newGC = gds[i].getDefaultConfiguration();\n@@ -702,1 +736,1 @@\n-                        newGC = getAppropriateGraphicsConfiguration(gds[i].getDefaultConfiguration());\n+                        newGC = gds[i].getDefaultConfiguration();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -665,0 +665,7 @@\n+    @Override\n+    public GraphicsConfiguration getAppropriateGraphicsConfiguration(\n+            GraphicsConfiguration gc)\n+    {\n+        return gc;\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}