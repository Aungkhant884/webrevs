{"files":[{"patch":"@@ -353,1 +353,2 @@\n-            ks = new AbstractSet<K>() {\n+            ks = new AbstractSet<>() {\n+                @Override\n@@ -355,15 +356,1 @@\n-                    return new Iterator<K>() {\n-                        private Iterator<Entry<K,V>> i = entrySet().iterator();\n-\n-                        public boolean hasNext() {\n-                            return i.hasNext();\n-                        }\n-\n-                        public K next() {\n-                            return i.next().getKey();\n-                        }\n-\n-                        public void remove() {\n-                            i.remove();\n-                        }\n-                    };\n+                    return new KeyIterator();\n@@ -372,0 +359,1 @@\n+                @Override\n@@ -376,0 +364,1 @@\n+                @Override\n@@ -380,0 +369,1 @@\n+                @Override\n@@ -384,0 +374,1 @@\n+                @Override\n@@ -412,1 +403,2 @@\n-            vals = new AbstractCollection<V>() {\n+            vals = new AbstractCollection<>() {\n+                @Override\n@@ -414,15 +406,1 @@\n-                    return new Iterator<V>() {\n-                        private Iterator<Entry<K,V>> i = entrySet().iterator();\n-\n-                        public boolean hasNext() {\n-                            return i.hasNext();\n-                        }\n-\n-                        public V next() {\n-                            return i.next().getValue();\n-                        }\n-\n-                        public void remove() {\n-                            i.remove();\n-                        }\n-                    };\n+                    return new ValueIterator();\n@@ -431,0 +409,1 @@\n+                @Override\n@@ -435,0 +414,1 @@\n+                @Override\n@@ -439,0 +419,1 @@\n+                @Override\n@@ -443,0 +424,1 @@\n+                @Override\n@@ -927,0 +909,34 @@\n+\n+    abstract sealed class AbstractIterator<T> implements Iterator<T> {\n+\n+        protected final Iterator<Entry<K,V>> i = entrySet().iterator();\n+\n+        @Override\n+        public boolean hasNext() {\n+            return i.hasNext();\n+        }\n+\n+        @Override\n+        public void remove() {\n+            i.remove();\n+        }\n+\n+    }\n+\n+    final class KeyIterator extends AbstractIterator<K> {\n+\n+        @Override\n+        public K next() {\n+            return i.next().getKey();\n+        }\n+\n+    }\n+\n+    final class ValueIterator extends AbstractIterator<V> {\n+\n+        @Override\n+        public V next() {\n+            return i.next().getValue();\n+        }\n+\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/AbstractMap.java","additions":48,"deletions":32,"binary":false,"changes":80,"status":"modified"}]}