{"files":[{"patch":"@@ -932,1 +932,1 @@\n-  if (stack_size >= os::Linux::_default_large_page_size && is_aligned(stack_size, os::Linux::_default_large_page_size)) {\n+  if (stack_size >= os::Linux::default_large_page_size() && is_aligned(stack_size, os::Linux::default_large_page_size())) {\n@@ -3628,1 +3628,1 @@\n-size_t os::Linux::scan_default_large_page_size() {\n+static size_t scan_default_large_page_size() {\n@@ -3755,1 +3755,1 @@\n-  size_t default_large_page_size = os::Linux::scan_default_large_page_size();\n+  size_t default_large_page_size = scan_default_large_page_size();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,6 @@\n+\n+\/\/ set default stack sizes < 2MB so as to prevent stacks from getting\n+\/\/ large-page aligned and backed by THPs on systems where 2MB is the\n+\/\/ default huge page size. For non-JavaThreads, glibc adds an additional\n+\/\/ guard page to the total stack size, so to keep the default sizes same\n+\/\/ for all the following flags, we set them to 2 pages less than 2MB.\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/globals_linux_aarch64.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}