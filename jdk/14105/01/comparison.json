{"files":[{"patch":"@@ -930,0 +930,6 @@\n+  \/\/ Add an additional page to the stack size to reduce its chances of getting large page aligned\n+  \/\/ so that the stack does not get backed by a transparent huge page.\n+  if (stack_size >= os::Linux::_default_large_page_size && is_aligned(stack_size, os::Linux::_default_large_page_size)) {\n+    stack_size += os::vm_page_size();\n+  }\n+\n@@ -3622,1 +3628,1 @@\n-static size_t scan_default_large_page_size() {\n+size_t os::Linux::scan_default_large_page_size() {\n@@ -3748,0 +3754,4 @@\n+  \/\/ Scan default large page size\n+  size_t default_large_page_size = os::Linux::scan_default_large_page_size();\n+  os::Linux::_default_large_page_size = default_large_page_size;\n+\n@@ -3767,3 +3777,1 @@\n-  \/\/ 2) Scan OS info\n-  size_t default_large_page_size = scan_default_large_page_size();\n-  os::Linux::_default_large_page_size = default_large_page_size;\n+  \/\/ 2) check if large pages are configured\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-define_pd_global(intx, ThreadStackSize,          2048); \/\/ 0 => use system default\n-define_pd_global(intx, VMThreadStackSize,        2048);\n+define_pd_global(intx, ThreadStackSize,          2040); \/\/ 0 => use system default\n+define_pd_global(intx, VMThreadStackSize,        2040);\n@@ -36,1 +36,1 @@\n-define_pd_global(intx, CompilerThreadStackSize,  2048);\n+define_pd_global(intx, CompilerThreadStackSize,  2040);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/globals_linux_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}