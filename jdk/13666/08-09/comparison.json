{"files":[{"patch":"@@ -41,1 +41,1 @@\n-size_t G1CollectionCandidateList::remove(G1CollectionSetRegionList* other) {\n+void G1CollectionCandidateList::remove(G1CollectionSetRegionList* other) {\n@@ -46,1 +46,1 @@\n-    return 0;\n+    return;\n@@ -49,1 +49,0 @@\n-  size_t reclaimable_bytes_removed = 0;\n@@ -62,1 +61,0 @@\n-      reclaimable_bytes_removed += _candidates.at(candidate_idx)._r->reclaimable_bytes();\n@@ -69,2 +67,0 @@\n-\n-  return reclaimable_bytes_removed;\n@@ -92,15 +88,1 @@\n-void G1CollectionCandidateList::print(const char* prefix) {\n-  LogTarget(Debug, gc, ergo, cset) lt;\n-  if (!lt.is_enabled()) {\n-    return;\n-  }\n-  LogStream ls(lt);\n-  ls.print(\"%s (%u): \", prefix, (uint)_candidates.length());\n-  for (uint i = 0; i < (uint)_candidates.length(); i++) {\n-    CandidateInfo& ci = _candidates.at(i);\n-    HeapRegion* r = ci._r;\n-    ls.print(\"%u \", r->hrm_index());\n-  }\n-}\n-\n-int G1CollectionCandidateList::order_regions(CandidateInfo* ci1, CandidateInfo* ci2) {\n+int G1CollectionCandidateList::compare(CandidateInfo* ci1, CandidateInfo* ci2) {\n@@ -161,12 +143,0 @@\n-void G1CollectionSetRegionList::print(const char* prefix) {\n-  LogTarget(Debug, gc, ergo, cset) lt;\n-  if (lt.is_enabled()) {\n-    LogStream ls(lt);\n-    ls.print(\"%s: \", prefix);\n-    for (HeapRegion* r : _regions) {\n-      ls.print(\"%u \", r->hrm_index());\n-    }\n-    ls.cr();\n-  }\n-}\n-\n@@ -174,1 +144,5 @@\n-  _marking_regions(), _contains_map(nullptr), _max_regions(0), _last_marking_candidates_length(0), _reclaimable_bytes(0) { }\n+  _marking_regions(),\n+  _contains_map(nullptr),\n+  _max_regions(0),\n+  _last_marking_candidates_length(0)\n+{ }\n@@ -197,1 +171,0 @@\n-  _reclaimable_bytes = 0;\n@@ -202,2 +175,1 @@\n-                                                            uint num_infos,\n-                                                            size_t reclaimable_bytes) {\n+                                                            uint num_infos) {\n@@ -215,1 +187,0 @@\n-  _reclaimable_bytes += reclaimable_bytes;\n@@ -221,1 +192,1 @@\n-  size_t reclaimed_from_marked_list = _marking_regions.remove(other);\n+  _marking_regions.remove(other);\n@@ -228,3 +199,0 @@\n-  assert(_reclaimable_bytes >= reclaimed_from_marked_list, \"must be\");\n-  _reclaimable_bytes -= reclaimed_from_marked_list;\n-\n@@ -238,2 +206,2 @@\n-bool G1CollectionSetCandidates::has_no_more_marking_candidates() const {\n-  return _marking_regions.length() == 0;\n+bool G1CollectionSetCandidates::has_more_marking_candidates() const {\n+  return _marking_regions.length() != 0;\n@@ -243,1 +211,1 @@\n-void G1CollectionSetCandidates::verify_helper(G1CollectionCandidateList* list, uint& from_marking, size_t& reclaimable_bytes, CandidateOrigin* verify_map) {\n+void G1CollectionSetCandidates::verify_helper(G1CollectionCandidateList* list, uint& from_marking, CandidateOrigin* verify_map) {\n@@ -258,2 +226,0 @@\n-\n-    reclaimable_bytes += r->reclaimable_bytes();\n@@ -265,1 +231,0 @@\n-  size_t reclaimable_bytes = 0;\n@@ -272,1 +237,1 @@\n-  verify_helper(&_marking_regions, from_marking, reclaimable_bytes, verify_map);\n+  verify_helper(&_marking_regions, from_marking, verify_map);\n@@ -276,1 +241,0 @@\n-  assert(_reclaimable_bytes == reclaimable_bytes, \"Mismatch between calculated and stored reclaimable bytes\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":14,"deletions":50,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -64,4 +64,0 @@\n-\n-  void verify() PRODUCT_RETURN;\n-\n-  void print(const char* prefix);\n@@ -111,1 +107,1 @@\n-  size_t remove(G1CollectionSetRegionList* other);\n+  void remove(G1CollectionSetRegionList* other);\n@@ -124,3 +120,1 @@\n-  static int order_regions(CandidateInfo* ci1, CandidateInfo* ci2);\n-\n-  void print(const char* prefix);\n+  static int compare(CandidateInfo* ci1, CandidateInfo* ci2);\n@@ -181,2 +175,0 @@\n-  size_t _reclaimable_bytes;\n-\n@@ -198,2 +190,1 @@\n-                                   uint num_infos,\n-                                   size_t reclaimable_bytes);\n+                                   uint num_infos);\n@@ -214,1 +205,1 @@\n-  bool has_no_more_marking_candidates() const;\n+  bool has_more_marking_candidates() const;\n@@ -219,1 +210,1 @@\n-  void verify_helper(G1CollectionCandidateList* list, uint& from_marking, size_t& reclaimable_bytes, CandidateOrigin* verify_map) PRODUCT_RETURN;\n+  void verify_helper(G1CollectionCandidateList* list, uint& from_marking, CandidateOrigin* verify_map) PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)G1CollectionCandidateList::order_regions);\n+      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)G1CollectionCandidateList::compare);\n@@ -127,1 +127,0 @@\n-    size_t _reclaimable_bytes_added;\n@@ -140,1 +139,0 @@\n-      _reclaimable_bytes_added += hr->reclaimable_bytes();\n@@ -150,2 +148,1 @@\n-      _regions_added(0),\n-      _reclaimable_bytes_added(0) { }\n+      _regions_added(0) { }\n@@ -171,1 +168,0 @@\n-    size_t reclaimable_bytes_added() const { return _reclaimable_bytes_added; }\n@@ -178,1 +174,0 @@\n-  size_t volatile _reclaimable_bytes_added;\n@@ -182,1 +177,1 @@\n-  void update_totals(uint num_regions, size_t reclaimable_bytes) {\n+  void update_totals(uint num_regions) {\n@@ -184,1 +179,0 @@\n-      assert(reclaimable_bytes > 0, \"invariant\");\n@@ -186,3 +180,0 @@\n-      Atomic::add(&_reclaimable_bytes_added, reclaimable_bytes);\n-    } else {\n-      assert(reclaimable_bytes == 0, \"invariant\");\n@@ -234,1 +225,0 @@\n-    Atomic::sub(&_reclaimable_bytes_added, wasted_bytes, memory_order_relaxed);\n@@ -243,1 +233,0 @@\n-    _reclaimable_bytes_added(0),\n@@ -249,1 +238,1 @@\n-    update_totals(cl.regions_added(), cl.reclaimable_bytes_added());\n+    update_totals(cl.regions_added());\n@@ -256,2 +245,1 @@\n-                                            _num_regions_added,\n-                                            _reclaimable_bytes_added);\n+                                            _num_regions_added);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -803,1 +803,1 @@\n-      assert(candidates()->has_no_more_marking_candidates(),\n+      assert(!candidates()->has_more_marking_candidates(),\n@@ -1275,4 +1275,0 @@\n-double G1Policy::reclaimable_bytes_percent(size_t reclaimable_bytes) const {\n-  return percent_of(reclaimable_bytes, _g1h->capacity());\n-}\n-\n@@ -1368,1 +1364,1 @@\n-  if (candidates()->has_no_more_marking_candidates()) {\n+  if (!candidates()->has_more_marking_candidates()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -271,5 +271,0 @@\n-  \/\/ Returns the given amount of reclaimable bytes (that represents\n-  \/\/ the amount of reclaimable space still to be collected) as a\n-  \/\/ percentage of the current heap capacity.\n-  double reclaimable_bytes_percent(size_t reclaimable_bytes) const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}