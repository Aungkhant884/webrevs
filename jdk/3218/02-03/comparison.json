{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    private static final int MAX_SERVER_RETRIES = 3;\n@@ -229,0 +230,1 @@\n+     * Retry operation if needed, server may fail to bind a port\n@@ -232,4 +234,5 @@\n-        AbstractServer server = createServer(useCase, executor);\n-        if (!Utilities.waitFor(Server::isAlive, server)) {\n-            \/\/ Retry operation, server might have failed to bind a port\n-            server.signalStop();\n+        int maxRetries = getServerMaxRetries();\n+        boolean serverAlive;\n+        AbstractServer server;\n+\n+        do {\n@@ -237,2 +240,10 @@\n-            if (!Utilities.waitFor(Server::isAlive, server))\n-                throw new RuntimeException(\"Server failed to start\");\n+            serverAlive = Utilities.waitFor(Server::isAlive, server);\n+            if (!serverAlive) {\n+                server.signalStop();\n+            }\n+\n+            maxRetries--;\n+        } while (!serverAlive && maxRetries > 0);\n+\n+        if (!serverAlive) {\n+            throw new RuntimeException(\"Server failed to start\");\n@@ -300,0 +311,7 @@\n+    \/*\n+     * Returns the maximum number of attempts to start a server.\n+     *\/\n+    protected int getServerMaxRetries() {\n+        return MAX_SERVER_RETRIES;\n+    }\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/interop\/BaseInteropTest.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.IOException;\n@@ -26,0 +27,1 @@\n+import java.util.Arrays;\n@@ -43,1 +45,1 @@\n-        ProcessBuilder pb = createProcessBuilder(javaPath, clazz, props);\n+        ProcessBuilder pb = createJavaProcessBuilder(javaPath, clazz, props);\n@@ -51,1 +53,1 @@\n-    private static ProcessBuilder createProcessBuilder(Path javaPath,\n+    private static ProcessBuilder createJavaProcessBuilder(Path javaPath,\n@@ -69,0 +71,73 @@\n+\n+    \/*\n+     * Executes a shell command and return a OutputAnalyzer wrapping the process.\n+     *\/\n+    public static OutputAnalyzer shell(String command, Map<String, String> env)\n+            throws IOException {\n+        Process process = shellProc(command, null, env);\n+        return getProcessOutput(process);\n+    }\n+\n+    \/*\n+     * Executes win command and return a OutputAnalyzer wrapping the process.\n+     *\/\n+    public static OutputAnalyzer win(String command, Map<String, String> env)\n+            throws IOException {\n+        Process process = winProc(command, null, env);\n+        return getProcessOutput(process);\n+    }\n+\n+    \/*\n+     * Executes a shell command and return the process.\n+     *\/\n+    public static Process shellProc(String command, Path outputPath,\n+                                    Map<String, String> env) throws IOException {\n+        String[] cmds = new String[3];\n+        cmds[0] = \"sh\";\n+        cmds[1] = \"-c\";\n+        cmds[2] = command;\n+        return startAndGetProc(cmds, outputPath, env);\n+    }\n+\n+    \/*\n+     * Executes a win command and returns the process.\n+     *\/\n+    public static Process winProc(String command, Path outputPath,\n+                                  Map<String, String> env)\n+            throws IOException {\n+        String[] cmds = new String[3];\n+        cmds[0] = \"cmd.exe\";\n+        cmds[1] = \"\/C\";\n+        cmds[2] = command;\n+        return startAndGetProc(cmds, outputPath, env);\n+    }\n+\n+    \/*\n+     * Returns a OutputAnalyzer wrapping the process.\n+     *\/\n+    private static OutputAnalyzer getProcessOutput (Process process) throws IOException {\n+        OutputAnalyzer oa = new OutputAnalyzer(process);\n+        try {\n+            process.waitFor();\n+            return oa;\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process is interrupted!\", e);\n+        }\n+    }\n+\n+    \/*\n+     * Executes a command, redirects the output to a local file and returns the process.\n+     *\/\n+    private static Process startAndGetProc(String[] cmds, Path outputPath, Map<String,\n+            String> env) throws IOException {\n+        System.out.println(\"command to run: \" + Arrays.toString(cmds));\n+        ProcessBuilder pb = new ProcessBuilder(cmds);\n+        if (env != null) {\n+            pb.environment().putAll(env);\n+        }\n+        pb.redirectErrorStream(true);\n+        if (outputPath != null) {\n+            pb.redirectOutput(outputPath.toFile());\n+        }\n+        return pb.start();\n+    }\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/interop\/ProcUtils.java","additions":77,"deletions":2,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -282,42 +282,0 @@\n-    \/*\n-     * Executes shell command and return a OutputAnalyzer wrapping the process.\n-     *\/\n-    public static OutputAnalyzer shell(String command) throws IOException {\n-        Process process = shellProc(command);\n-        OutputAnalyzer oa = new OutputAnalyzer(process);\n-        try {\n-            process.waitFor();\n-            return oa;\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(\"Shell process is interruptted!\", e);\n-        }\n-    }\n-\n-    \/*\n-     * Executes shell command and redirect the output to a local file,\n-     * and return the process.\n-     *\/\n-    public static Process shellProc(String command, Path outputPath)\n-            throws IOException {\n-        String[] cmds = new String[3];\n-        cmds[0] = \"sh\";\n-        cmds[1] = \"-c\";\n-        cmds[2] = command;\n-        if (DEBUG) {\n-            System.out.println(\"[sh -c \" + command + \"]\");\n-        }\n-        ProcessBuilder pb = new ProcessBuilder(cmds);\n-        pb.redirectErrorStream(true);\n-        if (outputPath != null) {\n-            pb.redirectOutput(outputPath.toFile());\n-        }\n-        return pb.start();\n-    }\n-\n-    \/*\n-     * Executes shell command and return the process.\n-     *\/\n-    public static Process shellProc(String command) throws IOException {\n-        return shellProc(command, null);\n-    }\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/interop\/Utilities.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"}]}