{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -892,1 +892,1 @@\n-            \"Table.focusCellHighlightBorder\", focusCellHighlightBorder,\n+            \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(deriveContrastFocusRing(selectionBackground), 2),\n@@ -1125,0 +1125,69 @@\n+\n+    \/**\n+     * Returns a more visible JTable Cell Focus Ring color\n+     * by manipulating hue, saturation and brightness for a\n+     * given selection background color.\n+     *\n+     * If selectedBackgroundColor is equal to white or\n+     * black, the returned focus ring color is Gray. If the\n+     * selectedBackgroundColor is any shade of Gray then, the\n+     * returned focus ring color is White\/Black depending on\n+     * the rgb values. For all other values of rgb, a more\n+     * prominent and visible color is returned.\n+     *\n+     * @param selectedBackgroundColor - the {@code Color} object\n+     * @return the {@code Color} object corresponding to new HSB values\n+     *\/\n+    private Color deriveContrastFocusRing(Color selectedBackgroundColor) {\n+\n+        \/\/define constants\n+        float hueFactor = 0.0278f; \/\/approx. 10 degree offset to the original hue\n+        float hueMaxValue = 1; \/\/corresponds to 360 deg.\n+        float saturationThreshold = 0.5f;\n+        float satLowerValue = 0.30f;\n+        float satUpperValue = 1.0f;\n+        float brightnessValue = 1.0f;\n+\n+        float[] hsbValues = new float[3];\n+\n+        int redValue = selectedBackgroundColor.getRed();\n+        int greenValue = selectedBackgroundColor.getGreen();\n+        int blueValue = selectedBackgroundColor.getBlue();\n+\n+        if (selectedBackgroundColor.equals(Color.WHITE) ||\n+                selectedBackgroundColor.equals(Color.BLACK)) {\n+            return Color.GRAY;\n+        }\n+\n+        \/\/if background is any shade of grey (red == green == blue)\n+        if (redValue == greenValue && redValue == blueValue) {\n+\n+            \/\/towards white\n+            if (redValue >= 128) {\n+                return Color.BLACK;\n+            }\n+            \/\/towards black\n+            else {\n+                return Color.WHITE;\n+            }\n+        }\n+\n+        \/\/if background color other than white, black or grey compute a\n+        \/\/ brighter color using HSB components\n+        Color.RGBtoHSB(redValue, greenValue, blueValue, hsbValues);\n+\n+        \/\/hue adjustment - present value increased by hueFactor\n+        hsbValues[0] = (hsbValues[0] + hueFactor) >= hueMaxValue ?\n+                (hsbValues[0] + hueFactor) - hueMaxValue : hsbValues[0] + hueFactor;\n+\n+        \/\/saturation adjustment - saturation set to either lower or\n+        \/\/ upper saturation value based on current saturation level\n+        hsbValues[1] = hsbValues[1] >= saturationThreshold ?\n+                satLowerValue : satUpperValue;\n+\n+        \/\/brightness adjustment - brightness set to 100%\n+        hsbValues[2] = brightnessValue;\n+\n+        \/\/create and return Color corresponding to new hsbValues\n+        return Color.getHSBColor(hsbValues[0], hsbValues[1], hsbValues[2]);\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":71,"deletions":2,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 7124282\n+ * @requires (os.family == \"mac\")\n+ * @summary Tests whether the JTable's cell focus ring is visible against the table's selection background color\n+ * @run main JTableFocusRingTest\n+ *\/\n+\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.BorderUIResource.LineBorderUIResource;\n+import javax.swing.UIManager;\n+import java.awt.*;\n+import java.lang.Exception;\n+\n+public class JTableFocusRingTest {\n+\n+    public static void main(String[] args) throws Exception{\n+\n+        try {\n+                UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |\n+                UnsupportedLookAndFeelException e) {\n+                throw new RuntimeException(\"Unsupported Look&Feel Class\");\n+        }\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+\n+            float[] bckRGB = new float[3];\n+            float[] originalFocusRingRGB = new float[3];\n+            float[] brighterFocusRingRGB = new float[3];\n+\n+            Color selectionBackground = null;\n+            Color originalFocusRingColor = null;\n+            Color brighterFocusRingColor = null;\n+\n+            if (UIManager.getDefaults().get(\"Table.selectionBackground\") != null &&\n+                    UIManager.getDefaults().get(\"Table.selectionBackground\") instanceof Color) {\n+                selectionBackground = (Color) UIManager.getDefaults().get(\"Table.selectionBackground\");\n+            }\n+            if (UIManager.getDefaults().get(\"Focus.color\") != null &&\n+                    UIManager.getDefaults().get(\"Focus.color\") instanceof Color) {\n+               originalFocusRingColor = (Color) UIManager.getDefaults().get(\"Focus.color\");\n+            }\n+\n+            if (UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\") != null &&\n+                    UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\") instanceof LineBorderUIResource) {\n+                LineBorderUIResource cellFocusBorderObj = (LineBorderUIResource) UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\");\n+                brighterFocusRingColor = cellFocusBorderObj.getLineColor();\n+            }\n+\n+            if (selectionBackground == null || originalFocusRingColor == null || brighterFocusRingColor == null) {\n+                throw new RuntimeException(\"One or more color values are null\");\n+            }\n+            System.out.println(UIManager.getLookAndFeel().toString());\n+            System.out.println(\"Selection Background Color: \"+ selectionBackground.toString());\n+            System.out.println(\"Original FocusRing Color: \"+ originalFocusRingColor.toString());\n+            System.out.println(\"Brighter FocusRing Color: \"+ brighterFocusRingColor.toString());\n+\n+            int redValue = selectionBackground.getRed();\n+            int greenValue = selectionBackground.getGreen();\n+            int blueValue = selectionBackground.getBlue();\n+\n+            if ((selectionBackground.equals(Color.BLACK) || selectionBackground.equals(Color.WHITE)) && brighterFocusRingColor.equals(Color.GRAY)) {\n+                System.out.println(\"Condition- Background Color: WHITE\/BLACK, Focus Ring Color: GRAY\");\n+                System.out.println(\"Test case passed\");\n+                return;\n+            }\n+            if (redValue == greenValue && redValue == blueValue) {\n+                \/\/towards white\n+                if (redValue >= 128 && brighterFocusRingColor.equals(Color.BLACK)) {\n+                    System.out.println(\"Condition- Background Color: Shade of GRAY (Red==Green==Blue) and towards white, Focus Ring Color: BLACK\");\n+                    System.out.println(\"Test case passed\");\n+                    return;\n+                }\n+                \/\/towards black\n+                if (redValue < 128 && brighterFocusRingColor.equals(Color.WHITE)) {\n+                    System.out.println(\"Condition- Background Color: Shade of GRAY (Red==Green==Blue) and towards black, Focus Ring Color: WHITE\");\n+                    System.out.println(\"Test case passed\");\n+                    return;\n+                }\n+            }\n+            selectionBackground.getRGBColorComponents(bckRGB);\n+            originalFocusRingColor.getRGBColorComponents(originalFocusRingRGB);\n+            brighterFocusRingColor.getRGBColorComponents(brighterFocusRingRGB);\n+\n+            float originalRGBDiff = calculateRGBDiff(originalFocusRingRGB, bckRGB);\n+            float brighterRGBDiff = calculateRGBDiff(brighterFocusRingRGB, bckRGB);\n+\n+            System.out.println(\"Original RGB Diff: \"+ originalRGBDiff);\n+            System.out.println(\"Brighter RGB Diff: \"+ brighterRGBDiff);\n+\n+            if (brighterRGBDiff <= originalRGBDiff) {\n+                throw new RuntimeException(\"Cell Focus Ring Not Visible\");\n+            }\n+        });\n+    }\n+\n+    \/* calculates the difference between individual RGB components of 2 colors and\n+       returns the total difference *\/\n+    private static float calculateRGBDiff(float[] focusRingRGB, float[] bckRGB) {\n+\n+        float totalRGBDiff = 0;\n+        for (int i=0; i< focusRingRGB.length; i++) {\n+            totalRGBDiff += Math.abs(focusRingRGB[i] - bckRGB[i]);\n+        }\n+        return totalRGBDiff;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JTable\/7124282\/JTableFocusRingTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}