{"files":[{"patch":"@@ -892,1 +892,2 @@\n-            \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(deriveContrastFocusRing(selectionBackground), 2),\n+            \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(\n+                    deriveContrastFocusRing(selectionBackground), 2),\n@@ -1127,3 +1128,3 @@\n-     * Returns a prominent and visible Cell Focus Ring color by\n-     * manipulating hue, saturation and setting the brightness\n-     * to 100% for a given selection background color.\n+     * Returns a lighter Cell Focus Ring color by changing saturation\n+     * and setting the brightness to 100% for a given selection\n+     * background color.\n@@ -1131,10 +1132,6 @@\n-     * If selectedBackgroundColor is equal to white or black, the\n-     * returned focus ring color is Gray. If the selectedBackgroundColor\n-     * is any shade of Gray then, the returned focus ring color is\n-     * White\/Black depending on the rgb values. For all other values\n-     * of rgb, a more prominent and visible color is returned. Hue\n-     * and saturation are obtained depending on the current hue and\n-     * saturation values of selectionBackgroundColor. The brightness\n-     * of new color (for focus ring) is always set to 100% to ensure\n-     * that the brightest shade for the obtained hue and saturation\n-     * offset values is returned.\n+     * If selectedBackgroundColor is equal to white\/black\/grey, the\n+     * returned focus ring color is Light Gray. For all other colors,\n+     * a lighter color of selectionBackgroundColor is returned. A new\n+     * Focus Ring color (in the latter case) is obtained by adjusting\n+     * the saturation levels and setting the brightness to 100% of the\n+     * corresponding selectedBackgroundColor.\n@@ -1147,4 +1144,1 @@\n-        \/\/define constants\n-        float hueFactor = 0.0278f; \/\/approx. 10 degree offset to the original hue\n-        float hueMaxValue = 1; \/\/corresponds to 360 deg.\n-        float saturationThreshold = 0.5f;\n+        \/\/ define constants\n@@ -1153,0 +1147,6 @@\n+\n+        \/\/ used to compare with saturation value of selectedBackgroundColor and\n+        \/\/ set it to either lower or upper saturation value\n+        float saturationThreshold = 0.5f;\n+\n+        \/\/ brightness always set to 100%\n@@ -1161,16 +1161,3 @@\n-        if (selectedBackgroundColor.equals(Color.WHITE) ||\n-                selectedBackgroundColor.equals(Color.BLACK)) {\n-            return Color.GRAY;\n-        }\n-\n-        \/\/if background is any shade of grey (red == green == blue)\n-        if (redValue == greenValue && redValue == blueValue) {\n-\n-            \/\/towards white\n-            if (redValue >= 128) {\n-                return Color.BLACK;\n-            }\n-            \/\/towards black\n-            else {\n-                return Color.WHITE;\n-            }\n+        \/\/ if selectionBackground color white\/black\/gray\n+        if ((redValue == greenValue && redValue == blueValue)) {\n+            return Color.LIGHT_GRAY;\n@@ -1179,2 +1166,1 @@\n-        \/\/if background color other than white, black or grey compute a\n-        \/\/ brighter color using HSB components\n+        \/\/ if selectionBackground color NOT white\/black\/gray\n@@ -1183,4 +1169,0 @@\n-        \/\/hue adjustment - present value increased by hueFactor\n-        hsbValues[0] = (hsbValues[0] + hueFactor) >= hueMaxValue ?\n-                (hsbValues[0] + hueFactor) - hueMaxValue : hsbValues[0] + hueFactor;\n-\n@@ -1190,1 +1172,1 @@\n-                satLowerValue : satUpperValue;\n+                    satLowerValue : satUpperValue;\n@@ -1193,1 +1175,1 @@\n-        \/\/brightest color for the obtained hue and saturation values\n+        \/\/brightest color for the new color\n@@ -1196,1 +1178,1 @@\n-        \/\/create and return Color corresponding to new hsbValues\n+        \/\/create and return color corresponding to new hsbValues\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":25,"deletions":43,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -89,4 +89,4 @@\n-            if ((selectionBackground.equals(Color.BLACK) || selectionBackground.equals(Color.WHITE))\n-                    && brighterFocusRingColor.equals(Color.GRAY)) {\n-                System.out.println(\"Condition-Background Color: WHITE\/BLACK, \" +\n-                        \"Focus Ring Color: GRAY\");\n+            \/\/ Selected Background color: WHITE\/BLACK\/GRAY\n+            if (redValue == greenValue && redValue == blueValue && brighterFocusRingColor.equals(Color.LIGHT_GRAY)) {\n+                System.out.println(\"Condition-Background Color: WHITE\/BLACK\/GRAY, \" +\n+                        \"Focus Ring Color: LIGHT GRAY\");\n@@ -96,16 +96,0 @@\n-            if (redValue == greenValue && redValue == blueValue) {\n-                \/\/towards white\n-                if (redValue >= 128 && brighterFocusRingColor.equals(Color.BLACK)) {\n-                    System.out.println(\"Condition-Background Color: Shade of GRAY \" +\n-                            \"(Red==Green==Blue) and towards white, Focus Ring Color: BLACK\");\n-                    System.out.println(\"Test case passed\");\n-                    return;\n-                }\n-                \/\/towards black\n-                if (redValue < 128 && brighterFocusRingColor.equals(Color.WHITE)) {\n-                    System.out.println(\"Condition-Background Color: Shade of GRAY \" +\n-                            \"(Red==Green==Blue) and towards black, Focus Ring Color: WHITE\");\n-                    System.out.println(\"Test case passed\");\n-                    return;\n-                }\n-            }\n","filename":"test\/jdk\/javax\/swing\/JTable\/7124282\/JTableFocusRingTest.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"}]}