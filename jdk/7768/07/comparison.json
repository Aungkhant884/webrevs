{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,15 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.beans.*;\n-\n-import javax.swing.*;\n+import java.awt.Color;\n+import java.awt.Window;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JTree;\n+import javax.swing.JTable;\n+import javax.swing.JList;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+import javax.swing.plaf.BorderUIResource;\n@@ -116,0 +126,1 @@\n+\n@@ -119,1 +130,2 @@\n-            setSelectionColors(c, \"Table.selectionInactiveForeground\", \"Table.selectionInactiveBackground\");\n+            setSelectionColors(c, \"Table.selectionInactiveForeground\",\n+                    \"Table.selectionInactiveBackground\");\n@@ -124,1 +136,2 @@\n-            setSelectionColors(c, \"Table.selectionForeground\", \"Table.selectionBackground\");\n+            setSelectionColors(c, \"Table.selectionForeground\",\n+                    \"Table.selectionBackground\");\n@@ -130,0 +143,1 @@\n+\n@@ -132,0 +146,9 @@\n+\n+        \/\/ focus ring changes for on-the-fly accent color changes\n+        Color lighterFocusRing = AquaLookAndFeel.deriveLighterFocusRing(\n+                UIManager.getColor(\"Focus.color\"));\n+        BorderUIResource.LineBorderUIResource focusCellHighlightBorder =\n+                new BorderUIResource.LineBorderUIResource(lighterFocusRing, 2);\n+        UIManager.getDefaults().put(\"Table.focusCellHighlightBorder\",\n+                focusCellHighlightBorder);\n+\n@@ -142,1 +165,2 @@\n-            setSelectionColors(c, \"List.selectionInactiveForeground\", \"List.selectionInactiveBackground\");\n+            setSelectionColors(c, \"List.selectionInactiveForeground\",\n+                    \"List.selectionInactiveBackground\");\n@@ -147,1 +171,2 @@\n-            setSelectionColors(c, \"List.selectionForeground\", \"List.selectionBackground\");\n+            setSelectionColors(c, \"List.selectionForeground\",\n+                    \"List.selectionBackground\");\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaFocusHandler.java","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -892,1 +892,2 @@\n-            \"Table.focusCellHighlightBorder\", focusCellHighlightBorder,\n+            \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(\n+                    deriveLighterFocusRing(focusRingColor), 2),\n@@ -1125,0 +1126,57 @@\n+\n+    \/**\n+     * Returns a new Focus Ring color by changing saturation\n+     * and setting the brightness to 100% for incoming focusRingColor.\n+     *\n+     * If the incoming focusRingColor is equal to white\/black\/grayish,\n+     * the returned focusRingColor is Light Gray. For all other colors,\n+     * new focusRingColor (in the latter case), is obtained by adjusting\n+     * the saturation levels and setting the brightness to 100% of the\n+     * incoming focusRingColor.\n+     *\n+     * @param focusRingColor - the {@code Color} object\n+     * @return the {@code Color} object corresponding to new HSB values\n+     *\/\n+    static Color deriveLighterFocusRing(Color focusRingColor) {\n+\n+        \/\/ define constants\n+        float satLowerValue = 0.30f;\n+        float satUpperValue = 1.0f;\n+\n+        \/\/ saturation threshold for grayish colors\n+        float satGrayScale = 0.10f;\n+\n+        \/\/ used to compare with saturation value of original focus ring and\n+        \/\/ set it to either lower or upper saturation value\n+        float saturationThreshold = 0.5f;\n+\n+        \/\/ brightness always set to 100%\n+        float brightnessValue = 1.0f;\n+\n+        float[] hsbValues = new float[3];\n+\n+        int redValue = focusRingColor.getRed();\n+        int greenValue = focusRingColor.getGreen();\n+        int blueValue = focusRingColor.getBlue();\n+\n+        Color.RGBtoHSB(redValue, greenValue, blueValue, hsbValues);\n+\n+        \/\/ if focusRingColor is White\/Black\/Grayish\n+        if ((hsbValues[0] == 0 && hsbValues[1] == 0)\n+                || hsbValues[1] <= satGrayScale) {\n+            return Color.LIGHT_GRAY;\n+        }\n+\n+        \/\/ if focusRingColor color NOT White\/Black\/Grayish\n+        \/\/ saturation adjustment - saturation set to either lower or\n+        \/\/ upper saturation value based on current saturation level\n+        hsbValues[1] = hsbValues[1] >= saturationThreshold ?\n+                    satLowerValue : satUpperValue;\n+\n+        \/\/ brightness adjustment - brightness set to 100%, always return the\n+        \/\/ brightest color for the new color\n+        hsbValues[2] = brightnessValue;\n+\n+        \/\/create and return color corresponding to new hsbValues\n+        return Color.getHSBColor(hsbValues[0], hsbValues[1], hsbValues[2]);\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":60,"deletions":2,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 7124282\n+ * @requires (os.family == \"mac\")\n+ * @summary Checks whether the JTable's focus ring color's RGB color\n+ * diff with selectionBackground is greater in comparison to original\n+ * focus ring (represented by 'Focus.color' property in Aqua LAF\n+ * UIDefaults)\n+ * @run main JTableFocusRingTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.util.Arrays;\n+import javax.swing.plaf.BorderUIResource.LineBorderUIResource;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class JTableFocusRingTest {\n+\n+    public static void main(String[] args) throws Exception{\n+\n+        try {\n+                UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException | UnsupportedLookAndFeelException e) {\n+                throw new RuntimeException(\"Unsupported Look&Feel Class\");\n+        }\n+        SwingUtilities.invokeAndWait(() -> {\n+\n+            float[] bckRGB = new float[3];\n+            float[] oldCellRingRGB = new float[3];\n+            float[] newCellRingRGB = new float[3];\n+\n+            Color selectionBck = null;\n+            Color oldRingColor = null;\n+            Color newRingColor = null;\n+\n+            \/\/ saturation threshold for grayish colors\n+            float satGrayScale = 0.10f;\n+\n+            if (UIManager.getDefaults().get(\"Table.selectionBackground\") != null\n+                    && UIManager.getDefaults().get(\"Table.selectionBackground\")\n+                    instanceof Color) {\n+                selectionBck = (Color) UIManager.getDefaults()\n+                        .get(\"Table.selectionBackground\");\n+            }\n+            if (UIManager.getDefaults().get(\"Focus.color\") != null\n+                    && UIManager.getDefaults().get(\"Focus.color\")\n+                    instanceof Color) {\n+               oldRingColor = (Color) UIManager.getDefaults().get(\"Focus.color\");\n+            }\n+\n+            if (UIManager.getDefaults()\n+                    .get(\"Table.focusCellHighlightBorder\") != null &&\n+                    UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\")\n+                            instanceof LineBorderUIResource) {\n+                LineBorderUIResource cellFocusBorderObj = (LineBorderUIResource)\n+                        UIManager.getDefaults().get(\"Table.focusCellHighlightBorder\");\n+                newRingColor = cellFocusBorderObj.getLineColor();\n+            }\n+\n+            if (selectionBck == null || oldRingColor == null ||\n+                    newRingColor == null) {\n+                throw new RuntimeException(\"One or more color values are null\");\n+            }\n+            System.out.println(UIManager.getLookAndFeel().toString());\n+            System.out.println(\"Selection Background Color: \"\n+                    + selectionBck.toString());\n+\n+            System.out.println(\"Original FocusRing Color: \"\n+                    + oldRingColor.toString());\n+\n+            System.out.println(\"Brighter FocusRing Color: \"\n+                    + newRingColor.toString());\n+\n+            int redValue = oldRingColor.getRed();\n+            int greenValue = oldRingColor.getGreen();\n+            int blueValue = oldRingColor.getBlue();\n+\n+            float[] hsbValues = new float[3];\n+            Color.RGBtoHSB(redValue, greenValue, blueValue, hsbValues);\n+\n+            System.out.println(\"Original Focus Ring Hue, Saturation and\" +\n+                    \" Brightness: \"+ Arrays.toString(hsbValues));\n+\n+            \/\/ Edge case - Original Focus ring color: WHITE\/BLACK\/GRAY\n+            if (((hsbValues[0] == 0 && hsbValues[1] == 0)\n+                    || hsbValues[1] <= satGrayScale) &&\n+                    newRingColor.equals(Color.LIGHT_GRAY)) {\n+                System.out.println(\"Original Focus ring color:\" +\n+                        \"WHITE\/BLACK\/GRAYISH, Focus Ring Color: LIGHT GRAY\");\n+                System.out.println(\"Test case passed\");\n+                return;\n+            }\n+            selectionBck.getRGBColorComponents(bckRGB);\n+            oldRingColor.getRGBColorComponents(oldCellRingRGB);\n+            newRingColor.getRGBColorComponents(newCellRingRGB);\n+\n+            float originalRGBDiff = calculateRGBDiff(oldCellRingRGB, bckRGB);\n+            float brighterRGBDiff = calculateRGBDiff(newCellRingRGB, bckRGB);\n+\n+            System.out.println(\"Original RGB Diff: \"+ originalRGBDiff);\n+            System.out.println(\"Brighter RGB Diff: \"+ brighterRGBDiff);\n+\n+            if (brighterRGBDiff <= originalRGBDiff) {\n+                throw new RuntimeException(\"Cell Focus Ring Not Visible\");\n+            }\n+        });\n+    }\n+\n+    \/* calculates the difference between individual RGB components of 2 colors and\n+       returns the total difference *\/\n+    private static float calculateRGBDiff(float[] focusRingRGB, float[] bckRGB) {\n+\n+        float totalRGBDiff = 0;\n+        for (int i=0; i< focusRingRGB.length; i++) {\n+            totalRGBDiff += Math.abs(focusRingRGB[i] - bckRGB[i]);\n+        }\n+        return totalRGBDiff;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JTable\/7124282\/JTableFocusRingTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}