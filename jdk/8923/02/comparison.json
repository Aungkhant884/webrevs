{"files":[{"patch":"@@ -976,1 +976,1 @@\n-            mh = MethodHandles.dropArguments(mh, 1, Arrays.copyOfRange(type.parameterArray(), 1, arity));\n+            mh = MethodHandles.dropArgumentsTrusted(mh, 1, Arrays.copyOfRange(type.ptypes(), 1, arity));\n@@ -1944,1 +1944,1 @@\n-    static MethodHandle makeTryFinally(MethodHandle target, MethodHandle cleanup, Class<?> rtype, List<Class<?>> argTypes) {\n+    static MethodHandle makeTryFinally(MethodHandle target, MethodHandle cleanup, Class<?> rtype, Class<?>[] argTypes) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5107,1 +5107,1 @@\n-        return dropArguments(zero(type.returnType()), 0, type.parameterList());\n+        return dropArgumentsTrusted(zero(type.returnType()), 0, type.ptypes());\n@@ -5266,1 +5266,1 @@\n-        return dropArguments0(target, pos, copyTypes(valueTypes.toArray()));\n+        return dropArgumentsTrusted(target, pos, valueTypes.toArray(new Class<?>[0]).clone());\n@@ -5269,5 +5269,1 @@\n-    private static List<Class<?>> copyTypes(Object[] array) {\n-        return Arrays.asList(Arrays.copyOf(array, array.length, Class[].class));\n-    }\n-\n-    private static MethodHandle dropArguments0(MethodHandle target, int pos, List<Class<?>> valueTypes) {\n+    static MethodHandle dropArgumentsTrusted(MethodHandle target, int pos, Class<?>[] valueTypes) {\n@@ -5288,2 +5284,2 @@\n-    private static int dropArgumentChecks(MethodType oldType, int pos, List<Class<?>> valueTypes) {\n-        int dropped = valueTypes.size();\n+    private static int dropArgumentChecks(MethodType oldType, int pos, Class<?>[] valueTypes) {\n+        int dropped = valueTypes.length;\n@@ -5347,1 +5343,9 @@\n-        return dropArguments0(target, pos, copyTypes(valueTypes));\n+        return dropArgumentsTrusted(target, pos, valueTypes.clone());\n+    }\n+\n+    \/* Convenience overloads for trusting internal low-arity call-sites *\/\n+    static MethodHandle dropArguments(MethodHandle target, int pos, Class<?> valueType1) {\n+        return dropArgumentsTrusted(target, pos, new Class<?>[] { valueType1 });\n+    }\n+    static MethodHandle dropArguments(MethodHandle target, int pos, Class<?> valueType1, Class<?> valueType2) {\n+        return dropArgumentsTrusted(target, pos, new Class<?>[] { valueType1, valueType2 });\n@@ -5351,1 +5355,1 @@\n-    private static MethodHandle dropArgumentsToMatch(MethodHandle target, int skip, List<Class<?>> newTypes, int pos,\n+    private static MethodHandle dropArgumentsToMatch(MethodHandle target, int skip, Class<?>[] newTypes, int pos,\n@@ -5353,3 +5357,2 @@\n-        newTypes = copyTypes(newTypes.toArray());\n-        List<Class<?>> oldTypes = target.type().parameterList();\n-        int match = oldTypes.size();\n+        Class<?>[] oldTypes = target.type().ptypes();\n+        int match = oldTypes.length;\n@@ -5360,1 +5363,1 @@\n-            oldTypes = oldTypes.subList(skip, match);\n+            oldTypes = Arrays.copyOfRange(oldTypes, skip, match);\n@@ -5363,2 +5366,2 @@\n-        List<Class<?>> addTypes = newTypes;\n-        int add = addTypes.size();\n+        Class<?>[] addTypes = newTypes;\n+        int add = addTypes.length;\n@@ -5367,1 +5370,1 @@\n-                throw newIllegalArgumentException(\"illegal pos\", pos, newTypes);\n+                throw newIllegalArgumentException(\"illegal pos\", pos, Arrays.toString(newTypes));\n@@ -5369,1 +5372,1 @@\n-            addTypes = addTypes.subList(pos, add);\n+            addTypes = Arrays.copyOfRange(addTypes, pos, add);\n@@ -5371,1 +5374,1 @@\n-            assert(addTypes.size() == add);\n+            assert(addTypes.length == add);\n@@ -5374,1 +5377,1 @@\n-        if (match > add || !oldTypes.equals(addTypes.subList(0, match))) {\n+        if (match > add || !Arrays.equals(oldTypes, 0, oldTypes.length, addTypes, 0, match)) {\n@@ -5378,1 +5381,2 @@\n-            throw newIllegalArgumentException(\"argument lists do not match\", oldTypes, newTypes);\n+            throw newIllegalArgumentException(\"argument lists do not match\",\n+                Arrays.toString(oldTypes), Arrays.toString(newTypes));\n@@ -5380,1 +5384,1 @@\n-        addTypes = addTypes.subList(match, add);\n+        addTypes = Arrays.copyOfRange(addTypes, match, add);\n@@ -5382,1 +5386,1 @@\n-        assert(addTypes.size() == add);\n+        assert(addTypes.length == add);\n@@ -5387,1 +5391,1 @@\n-            adapter = dropArguments0(adapter, skip+ match, addTypes);\n+            adapter = dropArgumentsTrusted(adapter, skip+ match, addTypes);\n@@ -5391,1 +5395,1 @@\n-            adapter = dropArguments0(adapter, skip, newTypes.subList(0, pos));\n+            adapter = dropArgumentsTrusted(adapter, skip, Arrays.copyOfRange(newTypes, 0, pos));\n@@ -5455,1 +5459,1 @@\n-        return dropArgumentsToMatch(target, skip, newTypes, pos, false);\n+        return dropArgumentsToMatch(target, skip, newTypes.toArray(new Class<?>[0]).clone(), pos, false);\n@@ -5774,1 +5778,1 @@\n-        List<Class<?>> filterArgs = filterType.parameterList();\n+        Class<?>[] filterArgs = filterType.ptypes();\n@@ -5785,1 +5789,1 @@\n-        return targetType.dropParameterTypes(pos, pos+1).insertParameterTypes(pos, filterArgs);\n+        return targetType.dropParameterTypes(pos, pos + 1).insertParameterTypes(pos, filterArgs);\n@@ -6243,2 +6247,2 @@\n-        List<Class<?>> targs = ttype.parameterList();\n-        test = dropArgumentsToMatch(test, 0, targs, 0, true);\n+\n+        test = dropArgumentsToMatch(test, 0, ttype.ptypes(), 0, true);\n@@ -6317,1 +6321,1 @@\n-        handler = dropArgumentsToMatch(handler, 1, ttype.parameterList(), 0, true);\n+        handler = dropArgumentsToMatch(handler, 1, ttype.ptypes(), 0, true);\n@@ -6692,1 +6696,0 @@\n-\n@@ -6703,1 +6706,1 @@\n-                pred.set(i, dropArguments0(constant(boolean.class, true), 0, commonParameterSequence));\n+                pred.set(i, dropArguments(constant(boolean.class, true), 0, commonParameterSequence));\n@@ -6802,1 +6805,1 @@\n-            return pc < tpsize ? dropArguments0(h, pc, targetParams.subList(pc, tpsize)) : h;\n+            return pc < tpsize ? dropArguments(h, pc, targetParams.subList(pc, tpsize)) : h;\n@@ -7746,1 +7749,1 @@\n-        List<Class<?>> targetParamTypes = target.type().parameterList();\n+        Class<?>[] targetParamTypes = target.type().ptypes();\n@@ -7754,1 +7757,1 @@\n-        cleanup = dropArgumentsToMatch(cleanup, (rtype == void.class ? 1 : 2), targetParamTypes, 0);\n+        cleanup = dropArgumentsToMatch(cleanup, (rtype == void.class ? 1 : 2), targetParamTypes, 0, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":40,"deletions":37,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-        MethodHandle mh = MethodHandles.dropArguments(newString(), 2, ptypes);\n+        MethodHandle mh = MethodHandles.dropArgumentsTrusted(newString(), 2, ptypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}