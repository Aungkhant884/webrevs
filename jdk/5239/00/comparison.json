{"files":[{"patch":"@@ -30,1 +30,1 @@\n- *      8067796 8224905 8263729 8265173\n+ *      8067796 8224905 8263729 8265173 8272600 8231297\n@@ -55,0 +55,1 @@\n+import java.nio.file.Path;\n@@ -85,0 +86,3 @@\n+    \/* Path to native executables;  sleepmillis *\/\n+    static final Path TEST_NATIVEPATH = Path.of(System.getProperty(\"test.nativepath\", \".\"));\n+\n@@ -88,1 +92,1 @@\n-     * call to {@link System.nanoTime()}.\n+     * call to {@link System#nanoTime()}.\n@@ -2140,1 +2144,1 @@\n-                List<String> childArgs = new ArrayList<>(javaChildArgs);\n+                List<String> childArgs = getSleepArgs();\n@@ -2142,26 +2146,0 @@\n-                {\n-                    \/\/ Redirect any child VM error output away from the stream being tested\n-                    \/\/ and to the log file. For background see:\n-                    \/\/ 8231297: java\/lang\/ProcessBuilder\/Basic.java test fails intermittently\n-                    \/\/ Destroying the process may, depending on the timing, cause some output\n-                    \/\/ from the child VM.\n-                    \/\/ This test requires the thread reading from the subprocess be blocked\n-                    \/\/ in the read from the subprocess; there should be no bytes to read.\n-                    \/\/ Modify the argument list shared with ProcessBuilder to redirect VM output.\n-                    assert (childArgs.get(1).equals(\"-XX:+DisplayVMOutputToStderr\")) : \"Expected arg 1 to be \\\"-XX:+DisplayVMOutputToStderr\\\"\";\n-                    switch (action & 0x1) {\n-                        case 0:\n-                            childArgs.set(1, \"-XX:+DisplayVMOutputToStderr\");\n-                            childArgs.add(2, \"-Xlog:all=warning:stderr\");\n-                            pb.redirectError(INHERIT);\n-                            break;\n-                        case 1:\n-                            childArgs.set(1, \"-XX:+DisplayVMOutputToStdout\");\n-                            childArgs.add(2, \"-Xlog:all=warning:stdout\");\n-                            pb.redirectOutput(INHERIT);\n-                            break;\n-                        default:\n-                            throw new Error();\n-                    }\n-                }\n-                childArgs.add(\"sleep\");\n@@ -2444,2 +2422,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2474,2 +2451,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2493,2 +2469,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2525,2 +2500,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2557,2 +2531,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2589,2 +2562,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2613,2 +2585,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2640,2 +2611,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2650,1 +2620,1 @@\n-                fail(\"Test failed: waitFor didn't take long enough\");\n+                fail(\"Test failed: waitFor didn't take long enough (\" + (end - start) + \"ns)\");\n@@ -2658,0 +2628,17 @@\n+    \/**\n+     * Return the list of process arguments for a child to sleep 10 minutes (600000 milliseconds).\n+     * @return A list of process arguments to sleep 10 minutes.\n+     *\/\n+    private static List<String> getSleepArgs() {\n+        List<String> childArgs = null;\n+        Path sleepExe = TEST_NATIVEPATH.resolve(\"sleepmillis\");\n+        if (sleepExe.toFile().canExecute()) {\n+            childArgs = List.of(sleepExe.toString(), \"600000\");\n+        } else {\n+            \/\/ Fallback to the JavaChild sleep does a sleep for 10 minutes.\n+            childArgs = new ArrayList<>(javaChildArgs);\n+            childArgs.add(\"sleep\");\n+        }\n+        return childArgs;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":33,"deletions":46,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <time.h>\n+\n+\/**\n+ * Command line program to sleep at least given number of seconds.\n+ *\n+ * Note: the file name prefix \"exe\" identifies the source should be built into SleepMillis(.exe).\n+ *\/\n+int main(int argc, char** argv) {\n+    \/\/ Use higher resolution nanosleep to be able to retry accurately if interrupted\n+    struct timespec sleeptime;\n+    int millis;\n+\n+    if (argc < 2 || (millis = atoi(argv[1])) < 0) {\n+        fprintf(stderr, \"usage: sleepmillis <non-negative milli-seconds>\\n\");\n+        exit(1);\n+    }\n+\n+    sleeptime.tv_sec = millis \/ 1000;\n+    sleeptime.tv_nsec = (millis % 1000) * 1000 * 1000;\n+    int rc;\n+    while ((rc = nanosleep(&sleeptime, &sleeptime)) > 0) {\n+        \/\/ Repeat until == 0 or negative (error)\n+    }\n+    exit(rc == 0 ? 0 : 1);\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/exeSleepMillis.c","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}