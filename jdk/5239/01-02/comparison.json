{"files":[{"patch":"@@ -35,2 +35,2 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow Basic\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=fork Basic\n+ * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow Basic\n+ * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=fork Basic\n@@ -53,1 +53,0 @@\n-import java.lang.reflect.Field;\n@@ -86,3 +85,0 @@\n-    \/* Path to native executables;  basicsleep *\/\n-    static final Path TEST_NATIVEPATH = Path.of(System.getProperty(\"test.nativepath\", \".\"));\n-\n@@ -2628,0 +2624,26 @@\n+    \/\/ Path to native executables, if any\n+    private static final String TEST_NATIVEPATH = System.getProperty(\"test.nativepath\");\n+\n+    \/\/ Path where \"sleep\" program may be found\" or null\n+    private static final Path SLEEP_PATH = initSleepPath();\n+\n+    \/**\n+     * Compute the Path to a sleep executable.\n+     * @return a Path to sleep or BasicSleep(.exe) or null if none\n+     *\/\n+    private static Path initSleepPath() {\n+        if (Windows.is() && TEST_NATIVEPATH != null) {\n+            \/\/ exeBasicSleep is equivalent to sleep on Unix\n+            Path exePath = Path.of(TEST_NATIVEPATH).resolve(\"BasicSleep.exe\");\n+            if (exePath.toFile().canExecute()) {\n+                return exePath;\n+            }\n+        }\n+\n+        Path exePath = Path.of(\"\/bin\").resolve(\"sleep\");\n+        if (exePath.toFile().canExecute()) {\n+            return exePath;\n+        }\n+        return null;\n+    }\n+\n@@ -2629,1 +2651,1 @@\n-     * Return the list of process arguments for a child to sleep 10 minutes (600000 milliseconds).\n+     * Return the list of process arguments for a child to sleep 10 minutes (600 seconds).\n@@ -2635,4 +2657,2 @@\n-        String exeName = \"BasicSleep\" + (Windows.is() ? \".exe\" : \"\");\n-        Path exePath = TEST_NATIVEPATH.resolve(exeName);\n-        if (exePath.toFile().canExecute()) {\n-            childArgs = List.of(exePath.toString(), \"600\");\n+        if (SLEEP_PATH != null) {\n+            childArgs = List.of(SLEEP_PATH.toString(), \"600\");\n@@ -2641,2 +2661,5 @@\n-            \/\/ The fallback the Java child is used if the test is run without building\n-            \/\/ the basicsleep native executable.\n+            \/\/ The fallback the Java$Child is used if the test is run without building\n+            \/\/ the BasicSleep native executable (for Windows).\n+\n+            Path exePath = Path.of(TEST_NATIVEPATH).resolve(\"BasicSleep.exe\");\n+            System.out.println(\"exePath: \" + exePath + \", canExec: \" + exePath.toFile().canExecute());\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":36,"deletions":13,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * The behavior should equivalent to the Unix sleep command.\n@@ -42,1 +43,1 @@\n-        fprintf(stderr, \"usage: basicsleep <non-negative seconds>\\n\");\n+        fprintf(stderr, \"usage: BasicSleep <non-negative seconds>\\n\");\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/exeBasicSleep.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}