{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,24 @@\n+    \/**\n+     * The MGF1ParameterSpec which uses SHA3-224 message digest\n+     *\/\n+    public static final MGF1ParameterSpec SHA3_224 =\n+        new MGF1ParameterSpec(\"SHA3-224\");\n+\n+    \/**\n+     * The MGF1ParameterSpec which uses SHA3-256 message digest\n+     *\/\n+    public static final MGF1ParameterSpec SHA3_256 =\n+        new MGF1ParameterSpec(\"SHA3-256\");\n+\n+    \/**\n+     * The MGF1ParameterSpec which uses SHA3-384 message digest\n+     *\/\n+    public static final MGF1ParameterSpec SHA3_384 =\n+        new MGF1ParameterSpec(\"SHA3-384\");\n+\n+    \/**\n+     * The MGF1ParameterSpec which uses SHA3-512 message digest\n+     *\/\n+    public static final MGF1ParameterSpec SHA3_512 =\n+        new MGF1ParameterSpec(\"SHA3-512\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/MGF1ParameterSpec.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,5 +50,6 @@\n- * This file contains both the signature implementation for the\n- * commonly used SHA1withDSA (DSS), SHA224withDSA, SHA256withDSA,\n- * as well as RawDSA, used by TLS among others. RawDSA expects\n- * the 20 byte SHA-1 digest as input via update rather than the\n- * original data like other signature implementations.\n+ * This file contains the signature implementation for the\n+ * SHA1withDSA (DSS), SHA224withDSA, SHA256withDSA, SHA384withDSA,\n+ * SHA512withDSA, SHA3-224withDSA, SHA3-256withDSA, SHA3-384withDSA,\n+ * SHA3-512withDSA, as well as RawDSA, used by TLS among others.\n+ * RawDSA expects the 20 byte SHA-1 digest as input via update rather\n+ * than the original data like other signature implementations.\n@@ -56,0 +57,4 @@\n+ * In addition, IEEE P1363 signature format is supported. The\n+ * corresponding implementation is registered under <sig>inP1363Format,\n+ * e.g. SHA256withDSAinP1363Format.\n+ * \n@@ -507,0 +512,72 @@\n+    \/**\n+     * SHA3-224withDSA implementation.\n+     *\/\n+    public static final class SHA3_224withDSA extends DSA {\n+        public SHA3_224withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-224\"));\n+        }\n+    }\n+    \n+    \/**\n+     * SHA3-224withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA3_224withDSAinP1363Format extends DSA {\n+        public SHA3_224withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-224\"), true);\n+        }\n+    }\n+\n+    \/**\n+     * Standard SHA3-256withDSA implementation.\n+     *\/\n+    public static final class SHA3_256withDSA extends DSA {\n+        public SHA3_256withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-256\"));\n+        }\n+    }\n+    \n+    \/**\n+     * Standard SHA3-256withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA3_256withDSAinP1363Format extends DSA {\n+        public SHA3_256withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-256\"), true);\n+        }\n+    }\n+\n+    \/**\n+     * Standard SHA3-384withDSA implementation.\n+     *\/\n+    public static final class SHA3_384withDSA extends DSA {\n+        public SHA3_384withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-384\"));\n+        }\n+    }\n+    \n+    \/**\n+     * Standard SHA3-384withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA3_384withDSAinP1363Format extends DSA {\n+        public SHA3_384withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-384\"), true);\n+        }\n+    }\n+\n+    \/**\n+     * Standard SHA3-512withDSA implementation.\n+     *\/\n+    public static final class SHA3_512withDSA extends DSA {\n+        public SHA3_512withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-512\"));\n+        }\n+    }\n+    \n+    \/**\n+     * Standard SHA3-512withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA3_512withDSAinP1363Format extends DSA {\n+        public SHA3_512withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA3-512\"), true);\n+        }\n+    }\n+\n@@ -543,0 +620,36 @@\n+    \/**\n+     * Standard SHA384withDSA implementation as defined in FIPS186-3.\n+     *\/\n+    public static final class SHA384withDSA extends DSA {\n+        public SHA384withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA-384\"));\n+        }\n+    }\n+\n+    \/**\n+     * SHA384withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA384withDSAinP1363Format extends DSA {\n+        public SHA384withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA-384\"), true);\n+        }\n+    }\n+\n+    \/**\n+     * Standard SHA512withDSA implementation as defined in FIPS186-3.\n+     *\/\n+    public static final class SHA512withDSA extends DSA {\n+        public SHA512withDSA() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA-512\"));\n+        }\n+    }\n+\n+    \/**\n+     * SHA512withDSA implementation that uses the IEEE P1363 format.\n+     *\/\n+    public static final class SHA512withDSAinP1363Format extends DSA {\n+        public SHA512withDSAinP1363Format() throws NoSuchAlgorithmException {\n+            super(MessageDigest.getInstance(\"SHA-512\"), true);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSA.java","additions":119,"deletions":6,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * - SHA-224withDSA\/SHA-256withDSA are the signature schemes\n+ * - [SHA-224|SHA-256|SHA-384|SHA-512]withDSA are the signature schemes\n@@ -59,1 +59,5 @@\n- *   \"OID.2.16.840.1.101.3.4.3.1\", and \"OID.2.16.840.1.101.3.4.3.2\".\n+ *   \"OID.2.16.840.1.101.3.4.3.[1|2|3|4]\" respectively.\n+ *\n+ * - [SHA3-224|SHA3-256|SHA3-384|SHA3-512]withDSA are the signature schemes\n+ *   using SHA-3 family of digests with DSA. The associated object identifiers\n+ *   are \"OID.2.16.840.1.101.3.4.3.[5|6|7|8]\" respectively.\n@@ -130,1 +134,2 @@\n-        attrs.put(\"KeySize\", \"2048\"); \/\/ for SHA224 and SHA256 DSA signatures\n+        \/\/ for DSA signatures with 224\/256-bit digests\n+        attrs.put(\"KeySize\", \"2048\");\n@@ -137,0 +142,16 @@\n+        addWithAlias(p, \"Signature\", \"SHA3-224withDSA\",\n+                \"sun.security.provider.DSA$SHA3_224withDSA\", attrs);\n+        addWithAlias(p, \"Signature\", \"SHA3-256withDSA\",\n+                \"sun.security.provider.DSA$SHA3_256withDSA\", attrs);\n+\n+        attrs.put(\"KeySize\", \"3072\"); \/\/ for DSA sig using 384\/512-bit digests\n+\n+        addWithAlias(p, \"Signature\", \"SHA384withDSA\",\n+                \"sun.security.provider.DSA$SHA384withDSA\", attrs);\n+        addWithAlias(p, \"Signature\", \"SHA512withDSA\",\n+                \"sun.security.provider.DSA$SHA512withDSA\", attrs);\n+        addWithAlias(p, \"Signature\", \"SHA3-384withDSA\",\n+                \"sun.security.provider.DSA$SHA3_384withDSA\", attrs);\n+        addWithAlias(p, \"Signature\", \"SHA3-512withDSA\",\n+                \"sun.security.provider.DSA$SHA3_512withDSA\", attrs);\n+\n@@ -147,1 +168,12 @@\n-\n+        add(p, \"Signature\", \"SHA384withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA384withDSAinP1363Format\");\n+        add(p, \"Signature\", \"SHA512withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA512withDSAinP1363Format\");\n+        add(p, \"Signature\", \"SHA3-224withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA3_224withDSAinP1363Format\");\n+        add(p, \"Signature\", \"SHA3-256withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA3_256withDSAinP1363Format\");\n+        add(p, \"Signature\", \"SHA3-384withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA3_384withDSAinP1363Format\");\n+        add(p, \"Signature\", \"SHA3-512withDSAinP1363Format\",\n+                \"sun.security.provider.DSA$SHA3_512withDSAinP1363Format\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-                    new DerValue(val.getEncodedParams()));\n+                        new DerValue(val.getEncodedParams()));\n@@ -130,0 +130,12 @@\n+                case \"SHA3-224\":\n+                    mgfSpec = MGF1ParameterSpec.SHA3_224;\n+                    break;\n+                case \"SHA3-256\":\n+                    mgfSpec = MGF1ParameterSpec.SHA3_256;\n+                    break;\n+                case \"SHA3-384\":\n+                    mgfSpec = MGF1ParameterSpec.SHA3_384;\n+                    break;\n+                case \"SHA3-512\":\n+                    mgfSpec = MGF1ParameterSpec.SHA3_512;\n+                    break;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/PSSParameters.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n- * We support SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512\/224, and\n- * SHA-512\/256 message digest algorithms and MGF1 mask generation function.\n+ * We support SHA-1, SHA-2 family and SHA3 family of message digest algorithms,\n+ * and MGF1 mask generation function.\n@@ -84,2 +84,2 @@\n-    private static final Hashtable<String, Integer> DIGEST_LENGTHS =\n-        new Hashtable<String, Integer>();\n+    private static final Hashtable<KnownOIDs, Integer> DIGEST_LENGTHS =\n+        new Hashtable<KnownOIDs, Integer>();\n@@ -87,15 +87,11 @@\n-        DIGEST_LENGTHS.put(\"SHA-1\", 20);\n-        DIGEST_LENGTHS.put(\"SHA\", 20);\n-        DIGEST_LENGTHS.put(\"SHA1\", 20);\n-        DIGEST_LENGTHS.put(\"SHA-224\", 28);\n-        DIGEST_LENGTHS.put(\"SHA224\", 28);\n-        DIGEST_LENGTHS.put(\"SHA-256\", 32);\n-        DIGEST_LENGTHS.put(\"SHA256\", 32);\n-        DIGEST_LENGTHS.put(\"SHA-384\", 48);\n-        DIGEST_LENGTHS.put(\"SHA384\", 48);\n-        DIGEST_LENGTHS.put(\"SHA-512\", 64);\n-        DIGEST_LENGTHS.put(\"SHA512\", 64);\n-        DIGEST_LENGTHS.put(\"SHA-512\/224\", 28);\n-        DIGEST_LENGTHS.put(\"SHA512\/224\", 28);\n-        DIGEST_LENGTHS.put(\"SHA-512\/256\", 32);\n-        DIGEST_LENGTHS.put(\"SHA512\/256\", 32);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_1, 20);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_224, 28);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_256, 32);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_384, 48);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_512, 64);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_512$224, 28);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA_512$256, 32);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA3_224, 28);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA3_256, 32);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA3_384, 48);\n+        DIGEST_LENGTHS.put(KnownOIDs.SHA3_512, 64);\n@@ -222,5 +218,14 @@\n-                Integer hLen =\n-                    DIGEST_LENGTHS.get(this.sigParams.getDigestAlgorithm());\n-                if (hLen == null) {\n-                    throw new ProviderException(\"Unsupported digest algo: \" +\n-                        this.sigParams.getDigestAlgorithm());\n+                String digestAlgo = this.sigParams.getDigestAlgorithm();\n+                KnownOIDs ko = KnownOIDs.findMatch(digestAlgo);\n+                if (ko != null) {\n+                    Integer hLen = DIGEST_LENGTHS.get(ko);\n+                    if (hLen != null) {\n+                        checkKeyLength(rsaKey, hLen,\n+                                this.sigParams.getSaltLength());\n+                    } else {\n+                        throw new ProviderException\n+                                (\"Unsupported digest algo: \" + digestAlgo);\n+                    }\n+                } else {\n+                    throw new ProviderException\n+                            (\"Unrecognized digest algo: \" + digestAlgo);\n@@ -228,1 +233,0 @@\n-                checkKeyLength(rsaKey, hLen, this.sigParams.getSaltLength());\n@@ -275,1 +279,1 @@\n-                int hLen = DIGEST_LENGTHS.get(digestAlgo);\n+                int hLen = DIGEST_LENGTHS.get(KnownOIDs.findMatch(digestAlgo));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPSSSignature.java","additions":30,"deletions":26,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,3 @@\n- * (see end of the file). We support MD2, MD5, SHA-1, SHA-224, SHA-256,\n- * SHA-384, SHA-512, SHA-512\/224, and SHA-512\/256.\n+ * (see end of the file). We support MD2, MD5, SHA-1, SHA2 family (\n+ * SHA-224, SHA-256, SHA-384, SHA-512, SHA-512\/224, and SHA-512\/256),\n+ * and SHA3 family (SHA3-224, SHA3-256, SHA3-384, SHA3-512) of digests.\n@@ -363,0 +364,28 @@\n+\n+    \/\/ Nested class for SHA3-224withRSA signatures\n+    public static final class SHA3_224withRSA extends RSASignature {\n+        public SHA3_224withRSA() {\n+            super(\"SHA3-224\", AlgorithmId.SHA3_224_oid, 11);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3-256withRSA signatures\n+    public static final class SHA3_256withRSA extends RSASignature {\n+        public SHA3_256withRSA() {\n+            super(\"SHA3-256\", AlgorithmId.SHA3_256_oid, 11);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3-384withRSA signatures\n+    public static final class SHA3_384withRSA extends RSASignature {\n+        public SHA3_384withRSA() {\n+            super(\"SHA3-384\", AlgorithmId.SHA3_384_oid, 11);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3-512withRSA signatures\n+    public static final class SHA3_512withRSA extends RSASignature {\n+        public SHA3_512withRSA() {\n+            super(\"SHA3-512\", AlgorithmId.SHA3_512_oid, 11);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSASignature.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -87,0 +87,8 @@\n+        addA(p, \"Signature\", \"SHA3-224withRSA\",\n+                \"sun.security.rsa.RSASignature$SHA3_224withRSA\", attrs);\n+        addA(p, \"Signature\", \"SHA3-256withRSA\",\n+                \"sun.security.rsa.RSASignature$SHA3_256withRSA\", attrs);\n+        addA(p, \"Signature\", \"SHA3-384withRSA\",\n+               \"sun.security.rsa.RSASignature$SHA3_384withRSA\", attrs);\n+        addA(p, \"Signature\", \"SHA3-512withRSA\",\n+                \"sun.security.rsa.RSASignature$SHA3_512withRSA\", attrs);\n@@ -95,1 +103,1 @@\n-                \"sun.security.rsa.PSSParameters\", attrs);\n+                \"sun.security.rsa.PSSParameters\", null);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/SunRsaSignEntries.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -157,0 +157,8 @@\n+    SHA3_224withDSA(\"2.16.840.1.101.3.4.3.5\", \"SHA3-224withDSA\"),\n+    SHA3_256withDSA(\"2.16.840.1.101.3.4.3.6\", \"SHA3-256withDSA\"),\n+    SHA3_384withDSA(\"2.16.840.1.101.3.4.3.7\", \"SHA3-384withDSA\"),\n+    SHA3_512withDSA(\"2.16.840.1.101.3.4.3.8\", \"SHA3-512withDSA\"),\n+    SHA3_224withECDSA(\"2.16.840.1.101.3.4.3.9\", \"SHA3-224withECDSA\"),\n+    SHA3_256withECDSA(\"2.16.840.1.101.3.4.3.10\", \"SHA3-256withECDSA\"),\n+    SHA3_384withECDSA(\"2.16.840.1.101.3.4.3.11\", \"SHA3-384withECDSA\"),\n+    SHA3_512withECDSA(\"2.16.840.1.101.3.4.3.12\", \"SHA3-512withECDSA\"),\n@@ -432,1 +440,1 @@\n-        List.of(KnownOIDs.values()).forEach(o -> {\n+        for (KnownOIDs o : KnownOIDs.values()) {\n@@ -434,1 +442,1 @@\n-        });\n+        };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -199,0 +199,4 @@\n+                algid.equals((Object)SHA3_224_oid) ||\n+                algid.equals((Object)SHA3_256_oid) ||\n+                algid.equals((Object)SHA3_384_oid) ||\n+                algid.equals((Object)SHA3_512_oid) ||\n@@ -611,0 +615,12 @@\n+    public static final ObjectIdentifier SHA3_224_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_224);\n+\n+    public static final ObjectIdentifier SHA3_256_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_256);\n+\n+    public static final ObjectIdentifier SHA3_384_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_384);\n+\n+    public static final ObjectIdentifier SHA3_512_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_512);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+ *   . \"SHA3-224withECDSA\"\n+ *   . \"SHA3-256withECDSA\"\n+ *   . \"SHA3-384withECDSA\"\n+ *   . \"SHA3-512withECDSA\"\n@@ -55,0 +59,4 @@\n+ *   . \"SHA3-224withECDSAinP1363Format\"\n+ *   . \"SHA3-256withECDSAinP1363Format\"\n+ *   . \"SHA3-384withECDSAinP1363Format\"\n+ *   . \"SHA3-512withECDSAinP1363Format\"\n@@ -281,0 +289,56 @@\n+    \/\/ Nested class for SHA3_224withECDSA signatures\n+    public static final class SHA3_224 extends ECDSASignature {\n+        public SHA3_224() {\n+           super(\"SHA3-224\");\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_224withECDSAinP1363Format signatures\n+    public static final class SHA3_224inP1363Format extends ECDSASignature {\n+        public SHA3_224inP1363Format() {\n+            super(\"SHA3-224\", true);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_256withECDSA signatures\n+    public static final class SHA3_256 extends ECDSASignature {\n+        public SHA3_256() {\n+            super(\"SHA3-256\");\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_256withECDSAinP1363Format signatures\n+    public static final class SHA3_256inP1363Format extends ECDSASignature {\n+        public SHA3_256inP1363Format() {\n+            super(\"SHA3-256\", true);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_384withECDSA signatures\n+    public static final class SHA3_384 extends ECDSASignature {\n+        public SHA3_384() {\n+            super(\"SHA3-384\");\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_384withECDSAinP1363Format signatures\n+    public static final class SHA3_384inP1363Format extends ECDSASignature {\n+        public SHA3_384inP1363Format() {\n+            super(\"SHA3-384\", true);\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_512withECDSA signatures\n+    public static final class SHA3_512 extends ECDSASignature {\n+        public SHA3_512() {\n+            super(\"SHA3-512\");\n+        }\n+    }\n+\n+    \/\/ Nested class for SHA3_512withECDSAinP1363Format signatures\n+    public static final class SHA3_512inP1363Format extends ECDSASignature {\n+        public SHA3_512inP1363Format() {\n+            super(\"SHA3-512\", true);\n+        }\n+    }\n+\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECDSASignature.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -160,2 +160,14 @@\n-                    }\n-                } else  if (type.equals(\"KeyFactory\")) {\n+                    } else if (algo.equals(\"SHA3-224withECDSA\")) {\n+                        return (inP1363? new ECDSASignature.SHA3_224inP1363Format() :\n+                            new ECDSASignature.SHA3_224());\n+                    } else if (algo.equals(\"SHA3-256withECDSA\")) {\n+                        return (inP1363? new ECDSASignature.SHA3_256inP1363Format() :\n+                            new ECDSASignature.SHA3_256());\n+                    } else if (algo.equals(\"SHA3-384withECDSA\")) {\n+                        return (inP1363? new ECDSASignature.SHA3_384inP1363Format() :\n+                            new ECDSASignature.SHA3_384());\n+                    } else if (algo.equals(\"SHA3-512withECDSA\")) {\n+                        return (inP1363? new ECDSASignature.SHA3_512inP1363Format() :\n+                            new ECDSASignature.SHA3_512());\n+                     }\n+                } else if (type.equals(\"KeyFactory\")) {\n@@ -307,0 +319,12 @@\n+        putService(new ProviderServiceA(this, \"Signature\",\n+            \"SHA3-224withECDSA\", \"sun.security.ec.ECDSASignature$SHA3_224\",\n+            ATTRS));\n+        putService(new ProviderServiceA(this, \"Signature\",\n+            \"SHA3-256withECDSA\", \"sun.security.ec.ECDSASignature$SHA3_256\",\n+            ATTRS));\n+        putService(new ProviderServiceA(this, \"Signature\",\n+            \"SHA3-384withECDSA\", \"sun.security.ec.ECDSASignature$SHA3_384\",\n+            ATTRS));\n+        putService(new ProviderServiceA(this, \"Signature\",\n+            \"SHA3-512withECDSA\", \"sun.security.ec.ECDSASignature$SHA3_512\",\n+            ATTRS));\n@@ -327,0 +351,13 @@\n+        putService(new ProviderService(this, \"Signature\",\n+             \"SHA3-224withECDSAinP1363Format\",\n+             \"sun.security.ec.ECDSASignature$SHA3_224inP1363Format\"));\n+        putService(new ProviderService(this, \"Signature\",\n+             \"SHA3-256withECDSAinP1363Format\",\n+             \"sun.security.ec.ECDSASignature$SHA3_256inP1363Format\"));\n+        putService(new ProviderService(this, \"Signature\",\n+            \"SHA3-384withECDSAinP1363Format\",\n+            \"sun.security.ec.ECDSASignature$SHA3_384inP1363Format\"));\n+        putService(new ProviderService(this, \"Signature\",\n+            \"SHA3-512withECDSAinP1363Format\",\n+            \"sun.security.ec.ECDSASignature$SHA3_512inP1363Format\"));\n+\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/SunEC.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/**\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+\/*\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,7 @@\n+        SHA384withDSA(\"SHA384withDSA\"),\n+        SHA512withDSA(\"SHA512withDSA\"),\n+\n+        SHA3_224withDSA(\"SHA3-224withDSA\"),\n+        SHA3_256withDSA(\"SHA3-256withDSA\"),\n+        SHA3_384withDSA(\"SHA3-384withDSA\"),\n+        SHA3_512withDSA(\"SHA3-512withDSA\"),\n@@ -82,0 +89,4 @@\n+        SHA3_224withRSA(\"SHA3-224withRSA\"),\n+        SHA3_256withRSA(\"SHA3-256withRSA\"),\n+        SHA3_384withRSA(\"SHA3-384withRSA\"),\n+        SHA3_512withRSA(\"SHA3-512withRSA\"),\n@@ -84,1 +95,0 @@\n-        SHA256withECDSA(\"SHA256withECDSA\"),\n@@ -86,0 +96,1 @@\n+        SHA256withECDSA(\"SHA256withECDSA\"),\n@@ -88,0 +99,4 @@\n+        SHA3_224withECDSA(\"SHA3-224withECDSA\"),\n+        SHA3_256withECDSA(\"SHA3-256withECDSA\"),\n+        SHA3_384withECDSA(\"SHA3-384withECDSA\"),\n+        SHA3_512withECDSA(\"SHA3-512withECDSA\"),\n@@ -150,1 +165,4 @@\n-        new Test(SigAlg.SHA1withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA3_224withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA3_256withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA3_384withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA3_512withRSA, KeyAlg.RSA, Provider.Default),\n","filename":"test\/jdk\/java\/security\/SignedObject\/Chain.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Convert;\n+\n+import java.security.*;\n+import java.security.spec.*;\n+import java.math.*;\n+import java.util.*;\n+\n+\/*\n+ * @test\n+ * @bug 8172366\n+ * @summary Known Answer Test for ECDSA signature\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Convert\n+ * @run main\/othervm SignatureKAT\n+ *\/\n+public class SignatureKAT {\n+\n+    private static String checkHex(String hex) {\n+        \/\/ if hex length is odd, need to prepend 0\n+        if (hex.length() % 2 != 0) {\n+            hex = \"0\" + hex;\n+        }\n+        return hex;\n+    }\n+\n+    private static class CurveData {\n+        private String name;\n+        private byte[] msgBytes;\n+        private BigInteger priv;\n+        private BigInteger pubX;\n+        private BigInteger pubY;\n+\n+        private static BigInteger toBigInteger(String hex) {\n+            byte[] bytes = Convert.hexStringToByteArray(checkHex(hex));\n+            return new BigInteger(1, bytes);\n+        }\n+        CurveData(String name, String msg, String priv, String pubX,\n+                String pubY) {\n+            this.name = name;\n+            this.msgBytes = msg.getBytes();\n+            this.priv = toBigInteger(priv);\n+            this.pubX = toBigInteger(pubX);\n+            this.pubY = toBigInteger(pubY);\n+        }\n+    }\n+\n+    private static class TestData {\n+        private String sigName;\n+        private CurveData cd;\n+        private byte[] expSig;\n+\n+        TestData(String sigName, CurveData cd, String r, String s) {\n+            this.sigName = sigName;\n+            this.cd = cd;\n+            if (r.length() != s.length() || r != checkHex(r) ||\n+                s != checkHex(s)) {\n+                throw new RuntimeException(\"Error: invalid r, s\");\n+            }\n+            this.expSig = Convert.hexStringToByteArray(r + s);\n+        }\n+    }\n+\n+    \/\/ These test values are from the examples shown in the page below:\n+    \/\/ https:\/\/csrc.nist.gov\/projects\/cryptographic-standards-and-guidelines\/example-values\n+    private static final CurveData P_256 = new CurveData(\n+        \"secp256r1\", \"Example of ECDSA with P-256\",\n+        \"C477F9F65C22CCE20657FAA5B2D1D8122336F851A508A1ED04E479C34985BF96\",\n+        \"B7E08AFDFE94BAD3F1DC8C734798BA1C62B3A0AD1E9EA2A38201CD0889BC7A19\",\n+        \"3603F747959DBF7A4BB226E41928729063ADC7AE43529E61B563BBC606CC5E09\"\n+    );\n+\n+    private static final CurveData P_384 = new CurveData(\n+        \"secp384r1\", \"Example of ECDSA with P-384\",\n+        \"F92C02ED629E4B48C0584B1C6CE3A3E3B4FAAE4AFC6ACB0455E73DFC392E6A0AE393A8565E6B9714D1224B57D83F8A08\",\n+        \"3BF701BC9E9D36B4D5F1455343F09126F2564390F2B487365071243C61E6471FB9D2AB74657B82F9086489D9EF0F5CB5\",\n+        \"D1A358EAFBF952E68D533855CCBDAA6FF75B137A5101443199325583552A6295FFE5382D00CFCDA30344A9B5B68DB855\"\n+    );\n+\n+    private static final CurveData P_521 = new CurveData(\n+        \"secp521r1\", \"Example of ECDSA with P-521\",\n+        \"100085F47B8E1B8B11B7EB33028C0B2888E304BFC98501955B45BBA1478DC184EEEDF09B86A5F7C21994406072787205E69A63709FE35AA93BA333514B24F961722\",\n+        \"98E91EEF9A68452822309C52FAB453F5F117C1DA8ED796B255E9AB8F6410CCA16E59DF403A6BDC6CA467A37056B1E54B3005D8AC030DECFEB68DF18B171885D5C4\",\n+        \"164350C321AECFC1CCA1BA4364C9B15656150B4B78D6A48D7D28E7F31985EF17BE8554376B72900712C4B83AD668327231526E313F5F092999A4632FD50D946BC2E\"\n+    );\n+\n+    private static TestData[] TEST_DATUM = {\n+        \/\/ secp256r1, secp384r1, and secp521r1 remain enabled\n+        new TestData(\"SHA256withECDSAinP1363Format\", P_256,\n+            \"2B42F576D07F4165FF65D1F3B1500F81E44C316F1F0B3EF57325B69ACA46104F\",\n+            \"DC42C2122D6392CD3E3A993A89502A8198C1886FE69D262C4B329BDB6B63FAF1\"),\n+        new TestData(\"SHA3-256withECDSAinP1363Format\", P_256,\n+            \"2B42F576D07F4165FF65D1F3B1500F81E44C316F1F0B3EF57325B69ACA46104F\",\n+            \"0A861C2526900245C73BACB9ADAEC1A5ACB3BA1F7114A3C334FDCD5B7690DADD\"),\n+        new TestData(\"SHA384withECDSAinP1363Format\", P_384,\n+            \"30EA514FC0D38D8208756F068113C7CADA9F66A3B40EA3B313D040D9B57DD41A332795D02CC7D507FCEF9FAF01A27088\",\n+            \"CC808E504BE414F46C9027BCBF78ADF067A43922D6FCAA66C4476875FBB7B94EFD1F7D5DBE620BFB821C46D549683AD8\"),\n+        new TestData(\"SHA3-384withECDSAinP1363Format\", P_384,\n+            \"30EA514FC0D38D8208756F068113C7CADA9F66A3B40EA3B313D040D9B57DD41A332795D02CC7D507FCEF9FAF01A27088\",\n+            \"691B9D4969451A98036D53AA725458602125DE74881BBC333012CA4FA55BDE39D1BF16A6AAE3FE4992C567C6E7892337\"),\n+        new TestData(\"SHA512withECDSAinP1363Format\", P_521,\n+            \"0140C8EDCA57108CE3F7E7A240DDD3AD74D81E2DE62451FC1D558FDC79269ADACD1C2526EEEEF32F8C0432A9D56E2B4A8A732891C37C9B96641A9254CCFE5DC3E2BA\",\n+            \"00D72F15229D0096376DA6651D9985BFD7C07F8D49583B545DB3EAB20E0A2C1E8615BD9E298455BDEB6B61378E77AF1C54EEE2CE37B2C61F5C9A8232951CB988B5B1\"),\n+        new TestData(\"SHA3-512withECDSAinP1363Format\", P_521,\n+            \"0140C8EDCA57108CE3F7E7A240DDD3AD74D81E2DE62451FC1D558FDC79269ADACD1C2526EEEEF32F8C0432A9D56E2B4A8A732891C37C9B96641A9254CCFE5DC3E2BA\",\n+            \"00B25188492D58E808EDEBD7BF440ED20DB771CA7C618595D5398E1B1C0098E300D8C803EC69EC5F46C84FC61967A302D366C627FCFA56F87F241EF921B6E627ADBF\"),\n+    };\n+\n+    private static void runTest(TestData td) throws Exception {\n+        System.out.println(\"Testing \" + td.sigName + \" with \" + td.cd.name);\n+\n+        AlgorithmParameters params =\n+            AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+        params.init(new ECGenParameterSpec(td.cd.name));\n+        ECParameterSpec ecParams =\n+            params.getParameterSpec(ECParameterSpec.class);\n+\n+        KeyFactory kf = KeyFactory.getInstance(\"EC\", \"SunEC\");\n+        PrivateKey privKey = kf.generatePrivate\n+                (new ECPrivateKeySpec(td.cd.priv, ecParams));\n+\n+        Signature sig = Signature.getInstance(td.sigName, \"SunEC\");\n+        sig.initSign(privKey);\n+        sig.update(td.cd.msgBytes);\n+        \/\/ NOTE: there is no way to set the nonce value into current SunEC\n+        \/\/ ECDSA signature, thus the output signature bytes likely won't\n+        \/\/ match the expected signature bytes\n+        byte[] ov = sig.sign();\n+\n+        ECPublicKeySpec pubKeySpec = new ECPublicKeySpec\n+                (new ECPoint(td.cd.pubX, td.cd.pubY), ecParams);\n+        PublicKey pubKey = kf.generatePublic(pubKeySpec);\n+\n+        sig.initVerify(pubKey);\n+        sig.update(td.cd.msgBytes);\n+        if (!sig.verify(ov)) {\n+            throw new RuntimeException(\"Error verifying actual sig bytes\");\n+        }\n+\n+        sig.update(td.cd.msgBytes);\n+        if (!sig.verify(td.expSig)) {\n+            throw new RuntimeException(\"Error verifying expected sig bytes\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (TestData td : TEST_DATUM) {\n+            runTest(td);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ec\/SignatureKAT.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -46,0 +46,4 @@\n+ * @run main SignatureOffsets SunEC SHA3-256withECDSA\n+ * @run main SignatureOffsets SunEC SHA3-224withECDSA\n+ * @run main SignatureOffsets SunEC SHA3-384withECDSA\n+ * @run main SignatureOffsets SunEC SHA3-512withECDSA\n","filename":"test\/jdk\/sun\/security\/ec\/SignatureOffsets.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8050374 8146293\n+ * @bug 8050374 8146293 8172366\n@@ -44,1 +44,0 @@\n-        new Test(Chain.SigAlg.SHA256withECDSA),\n@@ -46,0 +45,1 @@\n+        new Test(Chain.SigAlg.SHA256withECDSA),\n@@ -48,0 +48,4 @@\n+        new Test(Chain.SigAlg.SHA3_224withECDSA),\n+        new Test(Chain.SigAlg.SHA3_256withECDSA),\n+        new Test(Chain.SigAlg.SHA3_384withECDSA),\n+        new Test(Chain.SigAlg.SHA3_512withECDSA),\n","filename":"test\/jdk\/sun\/security\/ec\/SignedObjectChain.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @bug 8050374 8146293\n+ * @bug 8050374 8146293 8172366\n@@ -49,0 +49,4 @@\n+ * @run main SignatureOffsets SunRsaSign SHA3-224withRSA\n+ * @run main SignatureOffsets SunRsaSign SHA3-256withRSA\n+ * @run main SignatureOffsets SunRsaSign SHA3-384withRSA\n+ * @run main SignatureOffsets SunRsaSign SHA3-512withRSA\n","filename":"test\/jdk\/sun\/security\/rsa\/SignatureOffsets.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8146293 8242556\n+ * @bug 8146293 8242556 8172366\n@@ -53,0 +53,2 @@\n+        test(new PSSParameterSpec(\"SHA3-256\", \"MGF1\",\n+            new MGF1ParameterSpec(\"SHA3-256\"), 256>>3, 1));\n@@ -60,0 +62,1 @@\n+        System.out.println(\"Testing PSS spec: \" + spec);\n@@ -70,1 +73,1 @@\n-                (PSSParameterSpec.class);\n+                    (PSSParameterSpec.class);\n@@ -72,1 +75,1 @@\n-                throw new RuntimeException(\"Spec check Failed for \" +  alg);\n+                throw new RuntimeException(\"Spec check Failed for \" + alg);\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/PSSParametersTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8146293 8238448\n+ * @bug 8146293 8238448 8172366\n@@ -71,1 +71,2 @@\n-        \"SHA-512\", \"SHA-512\/224\", \"SHA-512\/256\"\n+        \"SHA-512\", \"SHA-512\/224\", \"SHA-512\/256\",\n+        \"SHA3-224\", \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/SignatureTest2.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8146293 8242556\n+ * @bug 8146293 8242556 8172366\n@@ -148,0 +148,6 @@\n+        params = new PSSParameterSpec(\"SHA3-256\", \"MGF1\",\n+            new MGF1ParameterSpec(\"SHA3-256\"), 32, 1);\n+        kpg.initialize(new RSAKeyGenParameterSpec(2048, pubExp, params));\n+        KeyPair kp3 = kpg.generateKeyPair();\n+        checkKeyPair(kp3);\n+\n@@ -153,1 +159,2 @@\n-\n+        test(kf, kp3.getPublic());\n+        test(kf, kp3.getPrivate());\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/TestPSSKeySupport.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+        \"SHA3-512\",\n@@ -58,0 +59,1 @@\n+        \"SHA3-384\",\n@@ -59,0 +61,1 @@\n+        \"SHA3-256\",\n@@ -61,0 +64,1 @@\n+        \"SHA3-224\",\n@@ -69,2 +73,2 @@\n-    private static final int PKCS1_5_INDEX_768 = 0;\n-    private static final int PKCS1_5_INDEX_512 = 2;\n+    private static final int PKCS1_5_INDEX_768 = 0; \/\/ 512, 384-bit digests\n+    private static final int PKCS1_5_INDEX_512 = 4; \/\/ 256-bit digests\n@@ -72,5 +76,5 @@\n-    private static final int PSS_INDEX_2048 = 0;\n-    private static final int PSS_INDEX_1024 = 1;\n-    private static final int PSS_INDEX_768 = 2;\n-    private static final int PSS_INDEX_512 = 4;\n-    private static final int PSS_INDEX_END = 7;\n+    private static final int PSS_INDEX_2048 = 0; \/\/ 512-bit digests\n+    private static final int PSS_INDEX_1024 = 2; \/\/ 384-bit digests\n+    private static final int PSS_INDEX_768 = 4; \/\/ 256-bit digests\n+    private static final int PSS_INDEX_512 = 7; \/\/ 224-bit digests\n+    private static final int PSS_INDEX_END = DIGEST_ALGS.length - 2;\n@@ -138,3 +142,2 @@\n-            int idx = mdAlg.indexOf(\"-\");\n-            if (idx != -1) {\n-                mdAlg = mdAlg.substring(0, idx) + mdAlg.substring(idx+1);\n+            if (mdAlg.startsWith(\"SHA-\")) {\n+                mdAlg = mdAlg.substring(0, 3) + mdAlg.substring(4);\n","filename":"test\/lib\/jdk\/test\/lib\/SigTestUtil.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}