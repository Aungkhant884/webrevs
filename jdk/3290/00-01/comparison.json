{"files":[{"patch":"@@ -28,1 +28,3 @@\n- * @library ..\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.RandomFactory\n@@ -47,0 +49,2 @@\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.RandomFactory;\n@@ -49,0 +53,4 @@\n+    \/\/ on macOS and other platforms, watch services might be based on polling\n+    \/\/ requiring a longer timeout to detect events before returning\n+    static final long POLL_TIMEOUT_SECONDS =\n+        Platform.isLinux() || Platform.isWindows() ? 1 : 2;\n@@ -50,1 +58,1 @@\n-    static final Random rand = new Random();\n+    static final Random RAND = RandomFactory.getRandom();\n@@ -60,1 +68,1 @@\n-                sensitivities[rand.nextInt(sensitivities.length)];\n+                sensitivities[RAND.nextInt(sensitivities.length)];\n@@ -74,2 +82,2 @@\n-            int nDirs = 5 + rand.nextInt(20);\n-            int nFiles = 50 + rand.nextInt(50);\n+            int nDirs = 5 + RAND.nextInt(20);\n+            int nFiles = 50 + RAND.nextInt(50);\n@@ -82,1 +90,1 @@\n-                Path dir = dirs[rand.nextInt(nDirs)];\n+                Path dir = dirs[RAND.nextInt(nDirs)];\n@@ -96,1 +104,1 @@\n-                Path file = files[rand.nextInt(nFiles)];\n+                Path file = files[RAND.nextInt(nFiles)];\n@@ -116,1 +124,1 @@\n-                    key = watcher.poll(1, TimeUnit.SECONDS);\n+                    key = watcher.poll(POLL_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"}]}