{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n- * @library ..\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.RandomFactory\n@@ -33,1 +35,6 @@\n-import java.nio.file.*;\n+import java.nio.file.Files;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Path;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n@@ -37,0 +44,2 @@\n+import java.util.HashMap;\n+import java.util.Map;\n@@ -40,0 +49,2 @@\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.RandomFactory;\n@@ -42,0 +53,4 @@\n+    \/\/ on macOS and other platforms, watch services might be based on polling\n+    \/\/ requiring a longer timeout to detect events before returning\n+    static final long POLL_TIMEOUT_SECONDS =\n+        Platform.isLinux() || Platform.isWindows() ? 1 : 2;\n@@ -43,1 +58,3 @@\n-    static final Random rand = new Random();\n+    static final Random RAND = RandomFactory.getRandom();\n+\n+    static final Map<Path,Integer> pathToTime = new HashMap<>();\n@@ -46,1 +63,2 @@\n-        SensitivityWatchEventModifier[] sensitivtives =\n+        pathToTime.clear();\n+        SensitivityWatchEventModifier[] sensitivities =\n@@ -49,2 +67,2 @@\n-            SensitivityWatchEventModifier sensivity =\n-                sensitivtives[ rand.nextInt(sensitivtives.length) ];\n+            SensitivityWatchEventModifier sensitivity =\n+                sensitivities[RAND.nextInt(sensitivities.length)];\n@@ -52,1 +70,3 @@\n-            dir.register(watcher, new WatchEvent.Kind<?>[]{ ENTRY_MODIFY }, sensivity);\n+            dir.register(watcher, new WatchEvent.Kind<?>[]{ ENTRY_MODIFY },\n+                sensitivity);\n+            pathToTime.put(dir, sensitivity.sensitivityValueInSeconds());\n@@ -62,2 +82,2 @@\n-            int nDirs = 5 + rand.nextInt(20);\n-            int nFiles = 50 + rand.nextInt(50);\n+            int nDirs = 5 + RAND.nextInt(20);\n+            int nFiles = 50 + RAND.nextInt(50);\n@@ -70,1 +90,1 @@\n-                Path dir = dirs[rand.nextInt(nDirs)];\n+                Path dir = dirs[RAND.nextInt(nDirs)];\n@@ -84,1 +104,1 @@\n-                Path file = files[rand.nextInt(nFiles)];\n+                Path file = files[RAND.nextInt(nFiles)];\n@@ -104,1 +124,1 @@\n-                    key = watcher.poll(1, TimeUnit.SECONDS);\n+                    key = watcher.poll(POLL_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n@@ -111,1 +131,4 @@\n-                    throw new RuntimeException(\"No ENTRY_MODIFY event received for \" + file);\n+                    Path parent = file.getParent();\n+                    String msg = String.format(\"No ENTRY_MODIFY event received for %s (dir: %s, sensitivity: %d)\",\n+                            file, parent, pathToTime.get(parent));\n+                    throw new RuntimeException(msg);\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":37,"deletions":14,"binary":false,"changes":51,"status":"modified"}]}