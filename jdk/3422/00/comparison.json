{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -55,0 +56,42 @@\n+\/\/ On macos\/aarch64 we need to ensure WXExec mode when running generated\n+\/\/ FastGetXXXField, as these functions can be called from WXWrite context\n+\/\/ (8262896).  So each FastGetXXXField is wrapped into a C++ statically\n+\/\/ compiled template function that optionally switches to WXExec if necessary.\n+\n+#ifdef __APPLE__\n+\n+static address generated_fast_get_field[T_LONG + 1 - T_BOOLEAN];\n+\n+template<int BType> struct BasicTypeToJni {};\n+template<> struct BasicTypeToJni<T_BOOLEAN> { static const jboolean jni_type; };\n+template<> struct BasicTypeToJni<T_BYTE>    { static const jbyte    jni_type; };\n+template<> struct BasicTypeToJni<T_CHAR>    { static const jchar    jni_type; };\n+template<> struct BasicTypeToJni<T_SHORT>   { static const jshort   jni_type; };\n+template<> struct BasicTypeToJni<T_INT>     { static const jint     jni_type; };\n+template<> struct BasicTypeToJni<T_LONG>    { static const jlong    jni_type; };\n+template<> struct BasicTypeToJni<T_FLOAT>   { static const jfloat   jni_type; };\n+template<> struct BasicTypeToJni<T_DOUBLE>  { static const jdouble  jni_type; };\n+\n+template<int BType, typename JniType = decltype(BasicTypeToJni<BType>::jni_type)>\n+JniType static_fast_get_field_wrapper(JNIEnv *env, jobject obj, jfieldID fieldID) {\n+  JavaThread* thread = JavaThread::thread_from_jni_environment(env);\n+  ThreadWXEnable wx(WXExec, thread);\n+  address get_field_addr = generated_fast_get_field[BType - T_BOOLEAN];\n+  return ((JniType(*)(JNIEnv *env, jobject obj, jfieldID fieldID))get_field_addr)(env, obj, fieldID);\n+}\n+\n+template<int BType>\n+address JNI_FastGetField::generate_fast_get_int_field1() {\n+  generated_fast_get_field[BType - T_BOOLEAN] = generate_fast_get_int_field0((BasicType)BType);\n+  return (address)static_fast_get_field_wrapper<BType>;\n+}\n+\n+#else \/\/ __APPLE__\n+\n+template<int BType>\n+address JNI_FastGetField::generate_fast_get_int_field1() {\n+  return generate_fast_get_int_field0((BasicType)BType);\n+}\n+\n+#endif \/\/ __APPLE__\n+\n@@ -171,1 +214,1 @@\n-  return generate_fast_get_int_field0(T_BOOLEAN);\n+  return generate_fast_get_int_field1<T_BOOLEAN>();\n@@ -175,1 +218,1 @@\n-  return generate_fast_get_int_field0(T_BYTE);\n+  return generate_fast_get_int_field1<T_BYTE>();\n@@ -179,1 +222,1 @@\n-  return generate_fast_get_int_field0(T_CHAR);\n+  return generate_fast_get_int_field1<T_CHAR>();\n@@ -183,1 +226,1 @@\n-  return generate_fast_get_int_field0(T_SHORT);\n+  return generate_fast_get_int_field1<T_SHORT>();\n@@ -187,1 +230,1 @@\n-  return generate_fast_get_int_field0(T_INT);\n+  return generate_fast_get_int_field1<T_INT>();\n@@ -191,1 +234,1 @@\n-  return generate_fast_get_int_field0(T_LONG);\n+  return generate_fast_get_int_field1<T_LONG>();\n@@ -195,1 +238,1 @@\n-  return generate_fast_get_int_field0(T_FLOAT);\n+  return generate_fast_get_int_field1<T_FLOAT>();\n@@ -199,1 +242,1 @@\n-  return generate_fast_get_int_field0(T_DOUBLE);\n+  return generate_fast_get_int_field1<T_DOUBLE>();\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -68,0 +68,5 @@\n+#ifdef AARCH64\n+  template<int BType>\n+  static address generate_fast_get_int_field1();\n+#endif \/\/ AARCH64\n+\n","filename":"src\/hotspot\/share\/prims\/jniFastGetField.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -179,0 +179,13 @@\n+\n+TEST_VM(ThreadsTest, fast_jni_in_vm) {\n+  JavaThread* current = JavaThread::current();\n+  JNIEnv* env = current->jni_environment();\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));\n+\n+  \/\/ DirectByteBuffer is an easy way to trigger GetIntField,\n+  \/\/ see JDK-8262896\n+  jlong capacity = 0x10000;\n+  jobject buffer = env->NewDirectByteBuffer(NULL, (jlong)capacity);\n+  ASSERT_NE((void*)NULL, buffer);\n+  ASSERT_EQ(capacity, env->GetDirectBufferCapacity(buffer));\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_threads.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}