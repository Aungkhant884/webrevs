{"files":[{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8261137\n- * @requires vm.flagless\n- * @requires vm.debug == true & vm.compiler2.enabled\n- * @summary Verify that box object is scalarized in case it is directly referenced by debug info.\n- * @library \/test\/lib\n- *\n- * @run driver compiler.eliminateAutobox.TestEliminateBoxInDebugInfo\n- *\/\n-package compiler.eliminateAutobox;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestEliminateBoxInDebugInfo {\n-    public static void runTest() throws Exception {\n-        String[] arguments = {\n-            \"-XX:CompileCommand=compileonly,compiler\/eliminateAutobox\/TestEliminateBoxInDebugInfo$Test.foo\",\n-            \"-XX:CompileCommand=dontinline,compiler\/eliminateAutobox\/TestEliminateBoxInDebugInfo$Test.black\",\n-            \"-Xbatch\",\n-            \"-XX:+PrintEliminateAllocations\",\n-            Test.class.getName()\n-        };\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0)\n-              .stdoutShouldContain(\"++++ Eliminated: \");\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        runTest();\n-    }\n-\n-    static class Test {\n-        public static void main(String[] args) throws Exception {\n-            \/\/ warmup\n-            for (int i = 0; i < 100000; i++) {\n-               foo(1000 + (i % 1000));\n-            }\n-        }\n-\n-        public static int foo(int value) {\n-            Integer ii = Integer.valueOf(value);\n-            int sum = 0;\n-            if (value > 999) {\n-                sum += ii.intValue();\n-            }\n-            black();\n-            return sum;\n-        }\n-\n-        public static void black() {}\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestEliminateBoxInDebugInfo.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8261137\n- * @requires vm.flavor == \"server\"\n- * @summary Verify that box object identity matches after deoptimization when it is eliminated.\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xbatch compiler.eliminateAutobox.TestIdentityWithEliminateBoxInDebugInfo\n- *\/\n-\n-package compiler.eliminateAutobox;\n-\n-import jdk.test.lib.Asserts;\n-\n-public class TestIdentityWithEliminateBoxInDebugInfo {\n-    interface TestF {\n-        void apply(boolean condition);\n-    }\n-\n-    public static void helper(TestF f) {\n-        \/\/ warmup\n-        for (int i = 0; i < 100000; i++) {\n-            f.apply(true);\n-        }\n-        \/\/ deoptimize\n-        f.apply(false);\n-    }\n-\n-    public static void runTest() throws Exception {\n-        helper((c) -> {\n-            Integer a = Integer.valueOf(42);\n-            Integer b = Integer.valueOf(-42);\n-            if (!c) {\n-                Asserts.assertTrue(a == Integer.valueOf(42));\n-                Asserts.assertTrue(b == Integer.valueOf(-42));\n-            }\n-        });\n-\n-        helper((c) -> {\n-            long highBitsOnly = 2L << 40;\n-            Long a = Long.valueOf(42L);\n-            Long b = Long.valueOf(-42L);\n-            Long h = Long.valueOf(highBitsOnly);\n-            if (!c) {\n-                Asserts.assertTrue(a == Long.valueOf(42L));\n-                Asserts.assertTrue(b == Long.valueOf(-42L));\n-                Asserts.assertFalse(h == Long.valueOf(highBitsOnly));\n-            }\n-        });\n-\n-        helper((c) -> {\n-            Character a = Character.valueOf('a');\n-            Character b = Character.valueOf('Z');\n-            if (!c) {\n-                Asserts.assertTrue(a == Character.valueOf('a'));\n-                Asserts.assertTrue(b == Character.valueOf('Z'));\n-            }\n-        });\n-\n-        helper((c) -> {\n-            Short a = Short.valueOf((short)42);\n-            Short b = Short.valueOf((short)-42);\n-            if (!c) {\n-                Asserts.assertTrue(a == Short.valueOf((short)42));\n-                Asserts.assertTrue(b == Short.valueOf((short)-42));\n-            }\n-        });\n-\n-        helper((c) -> {\n-            Byte a = Byte.valueOf((byte)42);\n-            Byte b = Byte.valueOf((byte)-42);\n-            if (!c) {\n-                Asserts.assertTrue(a == Byte.valueOf((byte)42));\n-                Asserts.assertTrue(b == Byte.valueOf((byte)-42));\n-            }\n-        });\n-\n-        helper((c) -> {\n-            Boolean a = Boolean.valueOf(true);\n-            Boolean b = Boolean.valueOf(false);\n-            if (!c) {\n-                Asserts.assertTrue(a == Boolean.valueOf(true));\n-                Asserts.assertTrue(b == Boolean.valueOf(false));\n-            }\n-        });\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        runTest();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"}]}