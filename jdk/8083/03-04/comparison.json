{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261137\n+ * @requires vm.flavor == \"server\"\n+ * @summary Verify that box object identity matches after deoptimization when it is eliminated.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xbatch compiler.eliminateAutobox.TestIdentityWithEliminateBoxInDebugInfo\n+ *\/\n+\n+package compiler.eliminateAutobox;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestIdentityWithEliminateBoxInDebugInfo {\n+    interface TestF {\n+        void apply(boolean condition);\n+    }\n+\n+    public static void helper(TestF f) {\n+        \/\/ warmup\n+        for (int i = 0; i < 100000; i++) {\n+            f.apply(true);\n+        }\n+        \/\/ deoptimize\n+        f.apply(false);\n+    }\n+\n+    public static void runTest() throws Exception {\n+        helper((c) -> {\n+            Integer a = Integer.valueOf(42);\n+            Integer b = Integer.valueOf(-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Integer.valueOf(42));\n+                Asserts.assertTrue(b == Integer.valueOf(-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            long highBitsOnly = 2L << 40;\n+            Long a = Long.valueOf(42L);\n+            Long b = Long.valueOf(-42L);\n+            Long h = Long.valueOf(highBitsOnly);\n+            if (!c) {\n+                Asserts.assertTrue(a == Long.valueOf(42L));\n+                Asserts.assertTrue(b == Long.valueOf(-42L));\n+                Asserts.assertFalse(h == Long.valueOf(highBitsOnly));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Character a = Character.valueOf('a');\n+            Character b = Character.valueOf('Z');\n+            if (!c) {\n+                Asserts.assertTrue(a == Character.valueOf('a'));\n+                Asserts.assertTrue(b == Character.valueOf('Z'));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Short a = Short.valueOf((short)42);\n+            Short b = Short.valueOf((short)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Short.valueOf((short)42));\n+                Asserts.assertTrue(b == Short.valueOf((short)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Byte a = Byte.valueOf((byte)42);\n+            Byte b = Byte.valueOf((byte)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Byte.valueOf((byte)42));\n+                Asserts.assertTrue(b == Byte.valueOf((byte)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Boolean a = Boolean.valueOf(true);\n+            Boolean b = Boolean.valueOf(false);\n+            if (!c) {\n+                Asserts.assertTrue(a == Boolean.valueOf(true));\n+                Asserts.assertTrue(b == Boolean.valueOf(false));\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}