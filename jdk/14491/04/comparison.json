{"files":[{"patch":"@@ -52,0 +52,1 @@\n+ * IPV6_MULTICAST_ALL supported since 4.20\n@@ -57,0 +58,3 @@\n+  #ifndef IPV6_MULTICAST_ALL\n+    #define IPV6_MULTICAST_ALL    29\n+  #endif\n@@ -300,1 +304,0 @@\n-    \/* By default, Linux uses the route default *\/\n@@ -302,0 +305,1 @@\n+        \/* By default, Linux uses the route default *\/\n@@ -311,0 +315,11 @@\n+\n+        \/* Disable IPV6_MULTICAST_ALL if option supported *\/\n+        arg = 0;\n+        if ((setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_ALL, (char*)&arg, sizeof(arg)) < 0) &&\n+            (errno != ENOPROTOOPT)) {\n+            JNU_ThrowByNameWithLastError(env,\n+                                     JNU_JAVANETPKG \"SocketException\",\n+                                     \"Unable to set IPV6_MULTICAST_ALL\");\n+            close(fd);\n+            return -1;\n+        }\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/Net.c","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import jdk.test.lib.Platform;\n@@ -198,15 +199,0 @@\n-        String os = System.getProperty(\"os.name\");\n-\n-        \/\/ Requires IP_MULTICAST_ALL on Linux (new since 2.6.31) so skip\n-        \/\/ on older kernels. Note that we skip on <= version 3 to keep the\n-        \/\/ parsing simple\n-        if (os.equals(\"Linux\")) {\n-            String osversion = System.getProperty(\"os.version\");\n-            String[] vers = osversion.split(\"\\\\.\", 0);\n-            int major = Integer.parseInt(vers[0]);\n-            if (major < 3) {\n-                System.out.format(\"Kernel version is %s, test skipped%n\", osversion);\n-                return;\n-            }\n-        }\n-\n@@ -225,3 +211,2 @@\n-            \/\/ Solaris and Linux allow IPv6 sockets join IPv4 multicast groups\n-            if (os.equals(\"Linux\"))\n-                test(UNSPEC, nif, ip4Group1, ip4Group2);\n+            \/\/ test IPv6 sockets joining IPv4 multicast groups\n+            test(UNSPEC, nif, ip4Group1, ip4Group2);\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Promiscuous.java","additions":4,"deletions":19,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n- * @bug 8215294\n- * @requires os.family == \"linux\"\n+ * @bug 8215294 8241800\n@@ -30,0 +29,1 @@\n+ *        jdk.test.lib.Platform\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.Platform;\n@@ -148,0 +149,1 @@\n+                     boolean bindToWildcard,\n@@ -157,2 +159,7 @@\n-        InetAddress bindAddr1 = Inet6Address.getByAddress(null, group1.getAddress(), nif);\n-        InetAddress bindAddr2 = Inet6Address.getByAddress(null, group2.getAddress(), nif);\n+        InetAddress bindAddr1 = bindToWildcard \n+                ? InetAddress.getByName(\"::0\")\n+                : Inet6Address.getByAddress(null, group1.getAddress(), nif);\n+\n+        InetAddress bindAddr2 = bindToWildcard\n+                ? InetAddress.getByName(\"::0\")\n+                : Inet6Address.getByAddress(null, group2.getAddress(), nif);\n@@ -199,1 +206,1 @@\n-        String os = System.getProperty(\"os.name\");\n+        boolean hasIPV6MulticastAll;\n@@ -201,2 +208,2 @@\n-        if (!os.equals(\"Linux\")) {\n-            throw new SkippedException(\"This test should be run only on Linux\");\n+        if (Platform.isWindows()) {\n+            throw new SkippedException(\"This test should not be run on Windows\");\n@@ -204,6 +211,3 @@\n-            String osVersion = System.getProperty(\"os.version\");\n-            String prefix = \"3.10.0\";\n-            if (osVersion.startsWith(prefix)) {\n-                throw new SkippedException(\n-                        String.format(\"The behavior under test is known NOT to work on '%s' kernels\", prefix));\n-            }\n+            int major = Platform.getOsVersionMajor();\n+            int minor = Platform.getOsVersionMinor();\n+            hasIPV6MulticastAll = Platform.isOSX() || (major > 4) || ((major == 4 && minor >= 20));\n@@ -229,2 +233,6 @@\n-            test(INET6, nif, interfaceLocal1, interfaceLocal2);\n-            test(INET6, nif, linkLocal1, linkLocal2);\n+            test(INET6, nif, false, interfaceLocal1, interfaceLocal2);\n+            test(INET6, nif, false, linkLocal1, linkLocal2);\n+            if (hasIPV6MulticastAll) {\n+                test(INET6, nif, true, interfaceLocal1, interfaceLocal2);\n+                test(INET6, nif, true, linkLocal1, linkLocal2);\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/PromiscuousIPv6.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"}]}