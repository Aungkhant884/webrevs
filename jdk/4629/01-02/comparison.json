{"files":[{"patch":"@@ -907,1 +907,1 @@\n-  \/\/ JavaThread due to lack of memory. We will handle that failure below.\n+  \/\/ JavaThread due to lack of resources. We will handle that failure below.\n@@ -909,1 +909,1 @@\n-  if (new_thread != NULL && new_thread->osthread() != NULL) {\n+  if (new_thread->osthread() != NULL) {\n@@ -935,1 +935,1 @@\n-  } else { \/\/ Allocation failure\n+  } else { \/\/ osthread initialization failure\n@@ -938,1 +938,1 @@\n-      \/\/ the new thread is not known to Thread-SMR yet so we can just delete\n+      \/\/ The new thread is not known to Thread-SMR yet so we can just delete.\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-  \/\/ osthread was created for the JavaThread due to lack of memory.\n-  if (new_thread == NULL || new_thread->osthread() == NULL) {\n+  \/\/ osthread was created for the JavaThread due to lack of resources.\n+  if (new_thread->osthread() == NULL) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1333,3 +1333,3 @@\n-  \/\/ JavaThread due to lack of memory.\n-  if (new_thread == NULL || new_thread->osthread() == NULL) {\n-    \/\/ the new thread is not known to Thread-SMR yet so we can just delete\n+  \/\/ JavaThread due to lack of resources.\n+  if (new_thread->osthread() == NULL) {\n+    \/\/ The new thread is not known to Thread-SMR yet so we can just delete.\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-  MonitorDeflationThread* thread =  new MonitorDeflationThread(&monitor_deflation_thread_entry);\n-  JavaThread::vm_exit_on_thread_allocation_failure(thread);\n+  MonitorDeflationThread* thread = new MonitorDeflationThread(&monitor_deflation_thread_entry);\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-   NotificationThread* thread =  new NotificationThread(&notification_thread_entry);\n-   JavaThread::vm_exit_on_thread_allocation_failure(thread);\n+   NotificationThread* thread = new NotificationThread(&notification_thread_entry);\n+   JavaThread::vm_exit_on_osthread_failure(thread);\n","filename":"src\/hotspot\/share\/runtime\/notificationThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-    JavaThread::vm_exit_on_thread_allocation_failure(thread);\n+    JavaThread::vm_exit_on_osthread_failure(thread);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-  ServiceThread* thread =  new ServiceThread(&service_thread_entry);\n-  JavaThread::vm_exit_on_thread_allocation_failure(thread);\n+  ServiceThread* thread = new ServiceThread(&service_thread_entry);\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3911,1 +3911,1 @@\n-  \/\/ Initialize the fields of the thread_oop first\n+  \/\/ Initialize the fields of the thread_oop first.\n@@ -3923,1 +3923,1 @@\n-  \/\/ Now bind the thread_oop to the target JavaThread\n+  \/\/ Now bind the thread_oop to the target JavaThread.\n@@ -3930,1 +3930,1 @@\n-void JavaThread::vm_exit_on_thread_allocation_failure(JavaThread* thread) {\n+void JavaThread::vm_exit_on_osthread_failure(JavaThread* thread) {\n@@ -3932,4 +3932,5 @@\n-  \/\/ JavaThread due to lack of memory. We would have to throw an exception\n-  \/\/ in that case. However, since this must work and we do not allow\n-  \/\/ exceptions anyway, check and abort if this fails.\n-  if (thread == nullptr || thread->osthread() == nullptr) {\n+  \/\/ JavaThread due to lack of resources. However, since this must work\n+  \/\/ for critical system threads just check and abort if this fails.\n+  if (thread->osthread() == nullptr) {\n+    \/\/ This isn't really an OOM condition, but historically this is what\n+    \/\/ we report.\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1602,3 +1602,3 @@\n-  \/\/ Helper function to do vm_exit_on_initialization for thread allocation\n-  \/\/ failure.\n-  static void vm_exit_on_thread_allocation_failure(JavaThread* thread);\n+  \/\/ Helper function to do vm_exit_on_initialization for osthread\n+  \/\/ resource allocation failure.\n+  static void vm_exit_on_osthread_failure(JavaThread* thread);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  JavaThread::vm_exit_on_thread_allocation_failure(thread);\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}