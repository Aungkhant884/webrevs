{"files":[{"patch":"@@ -1,156 +1,156 @@\n-\/****************************************************************************\r\n- *\r\n- * ftcolor.c\r\n- *\r\n- *   FreeType's glyph color management (body).\r\n- *\r\n- * Copyright (C) 2018-2022 by\r\n- * David Turner, Robert Wilhelm, and Werner Lemberg.\r\n- *\r\n- * This file is part of the FreeType project, and may only be used,\r\n- * modified, and distributed under the terms of the FreeType project\r\n- * license, LICENSE.TXT.  By continuing to use, modify, or distribute\r\n- * this file you indicate that you have read the license and\r\n- * understand and accept it fully.\r\n- *\r\n- *\/\r\n-\r\n-\r\n-#include <freetype\/internal\/ftdebug.h>\r\n-#include <freetype\/internal\/sfnt.h>\r\n-#include <freetype\/internal\/tttypes.h>\r\n-#include <freetype\/ftcolor.h>\r\n-\r\n-\r\n-#ifdef TT_CONFIG_OPTION_COLOR_LAYERS\r\n-\r\n-  static\r\n-  const FT_Palette_Data  null_palette_data = { 0, NULL, NULL, 0, NULL };\r\n-\r\n-\r\n-  \/* documentation is in ftcolor.h *\/\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Data_Get( FT_Face           face,\r\n-                       FT_Palette_Data  *apalette_data )\r\n-  {\r\n-    if ( !face )\r\n-      return FT_THROW( Invalid_Face_Handle );\r\n-    if ( !apalette_data)\r\n-      return FT_THROW( Invalid_Argument );\r\n-\r\n-    if ( FT_IS_SFNT( face ) )\r\n-      *apalette_data = ( (TT_Face)face )->palette_data;\r\n-    else\r\n-      *apalette_data = null_palette_data;\r\n-\r\n-    return FT_Err_Ok;\r\n-  }\r\n-\r\n-\r\n-  \/* documentation is in ftcolor.h *\/\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Select( FT_Face     face,\r\n-                     FT_UShort   palette_index,\r\n-                     FT_Color*  *apalette )\r\n-  {\r\n-    FT_Error  error;\r\n-\r\n-    TT_Face       ttface;\r\n-    SFNT_Service  sfnt;\r\n-\r\n-\r\n-    if ( !face )\r\n-      return FT_THROW( Invalid_Face_Handle );\r\n-\r\n-    if ( !FT_IS_SFNT( face ) )\r\n-    {\r\n-      if ( apalette )\r\n-        *apalette = NULL;\r\n-\r\n-      return FT_Err_Ok;\r\n-    }\r\n-\r\n-    ttface = (TT_Face)face;\r\n-    sfnt   = (SFNT_Service)ttface->sfnt;\r\n-\r\n-    error = sfnt->set_palette( ttface, palette_index );\r\n-    if ( error )\r\n-      return error;\r\n-\r\n-    ttface->palette_index = palette_index;\r\n-\r\n-    if ( apalette )\r\n-      *apalette = ttface->palette;\r\n-\r\n-    return FT_Err_Ok;\r\n-  }\r\n-\r\n-\r\n-  \/* documentation is in ftcolor.h *\/\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Set_Foreground_Color( FT_Face   face,\r\n-                                   FT_Color  foreground_color )\r\n-  {\r\n-    TT_Face  ttface;\r\n-\r\n-\r\n-    if ( !face )\r\n-      return FT_THROW( Invalid_Face_Handle );\r\n-\r\n-    if ( !FT_IS_SFNT( face ) )\r\n-      return FT_Err_Ok;\r\n-\r\n-    ttface = (TT_Face)face;\r\n-\r\n-    ttface->foreground_color      = foreground_color;\r\n-    ttface->have_foreground_color = 1;\r\n-\r\n-    return FT_Err_Ok;\r\n-  }\r\n-\r\n-#else \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Data_Get( FT_Face           face,\r\n-                       FT_Palette_Data  *apalette_data )\r\n-  {\r\n-    FT_UNUSED( face );\r\n-    FT_UNUSED( apalette_data );\r\n-\r\n-\r\n-    return FT_THROW( Unimplemented_Feature );\r\n-  }\r\n-\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Select( FT_Face     face,\r\n-                     FT_UShort   palette_index,\r\n-                     FT_Color*  *apalette )\r\n-  {\r\n-    FT_UNUSED( face );\r\n-    FT_UNUSED( palette_index );\r\n-    FT_UNUSED( apalette );\r\n-\r\n-\r\n-    return FT_THROW( Unimplemented_Feature );\r\n-  }\r\n-\r\n-\r\n-  FT_EXPORT_DEF( FT_Error )\r\n-  FT_Palette_Set_Foreground_Color( FT_Face   face,\r\n-                                   FT_Color  foreground_color )\r\n-  {\r\n-    FT_UNUSED( face );\r\n-    FT_UNUSED( foreground_color );\r\n-\r\n-\r\n-    return FT_THROW( Unimplemented_Feature );\r\n-  }\r\n-\r\n-#endif \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\r\n-\r\n-\r\n-\/* END *\/\r\n+\/****************************************************************************\n+ *\n+ * ftcolor.c\n+ *\n+ *   FreeType's glyph color management (body).\n+ *\n+ * Copyright (C) 2018-2022 by\n+ * David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+\n+#include <freetype\/internal\/ftdebug.h>\n+#include <freetype\/internal\/sfnt.h>\n+#include <freetype\/internal\/tttypes.h>\n+#include <freetype\/ftcolor.h>\n+\n+\n+#ifdef TT_CONFIG_OPTION_COLOR_LAYERS\n+\n+  static\n+  const FT_Palette_Data  null_palette_data = { 0, NULL, NULL, 0, NULL };\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Data_Get( FT_Face           face,\n+                       FT_Palette_Data  *apalette_data )\n+  {\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+    if ( !apalette_data)\n+      return FT_THROW( Invalid_Argument );\n+\n+    if ( FT_IS_SFNT( face ) )\n+      *apalette_data = ( (TT_Face)face )->palette_data;\n+    else\n+      *apalette_data = null_palette_data;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Select( FT_Face     face,\n+                     FT_UShort   palette_index,\n+                     FT_Color*  *apalette )\n+  {\n+    FT_Error  error;\n+\n+    TT_Face       ttface;\n+    SFNT_Service  sfnt;\n+\n+\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+\n+    if ( !FT_IS_SFNT( face ) )\n+    {\n+      if ( apalette )\n+        *apalette = NULL;\n+\n+      return FT_Err_Ok;\n+    }\n+\n+    ttface = (TT_Face)face;\n+    sfnt   = (SFNT_Service)ttface->sfnt;\n+\n+    error = sfnt->set_palette( ttface, palette_index );\n+    if ( error )\n+      return error;\n+\n+    ttface->palette_index = palette_index;\n+\n+    if ( apalette )\n+      *apalette = ttface->palette;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Set_Foreground_Color( FT_Face   face,\n+                                   FT_Color  foreground_color )\n+  {\n+    TT_Face  ttface;\n+\n+\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+\n+    if ( !FT_IS_SFNT( face ) )\n+      return FT_Err_Ok;\n+\n+    ttface = (TT_Face)face;\n+\n+    ttface->foreground_color      = foreground_color;\n+    ttface->have_foreground_color = 1;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+#else \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Data_Get( FT_Face           face,\n+                       FT_Palette_Data  *apalette_data )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( apalette_data );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Select( FT_Face     face,\n+                     FT_UShort   palette_index,\n+                     FT_Color*  *apalette )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( palette_index );\n+    FT_UNUSED( apalette );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Set_Foreground_Color( FT_Face   face,\n+                                   FT_Color  foreground_color )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( foreground_color );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+#endif \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftcolor.c","additions":156,"deletions":156,"binary":false,"changes":312,"status":"modified"},{"patch":"@@ -1,109 +1,109 @@\n-\/*\r\n- * Copyright 2021 JetBrains s.r.o.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-\/*\r\n- * @test\r\n- * @summary Checks that complex emoji are rendered with proper shaping.\r\n- *\/\r\n-\r\n-import javax.imageio.ImageIO;\r\n-import java.awt.*;\r\n-import java.awt.image.BufferedImage;\r\n-import java.io.File;\r\n-import java.io.IOException;\r\n-\r\n-public class ComplexEmoji {\r\n-    private static final int IMG_WIDTH = 60;\r\n-    private static final int IMG_HEIGHT = 20;\r\n-\r\n-    private static final String[] EMOJI = {\r\n-            \"\\ud83d\\udd25\", \/\/ Fire\r\n-            \"\\u2764\\ufe0f\", \/\/ Heart + color variation selector\r\n-            \"\\ud83e\\udd18\\ud83c\\udffb\", \/\/ Horns sign - white hand\r\n-            \"\\ud83d\\udc41\\ufe0f\\u200d\\ud83d\\udde8\\ufe0f\", \/\/ Eye in speech bubble - ZWJ sequence\r\n-            \"\\uD83C\\uDDE6\\uD83C\\uDDF6\", \/\/ Antarctica flag\r\n-            \"\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f\", \/\/ England flag - tag sequence\r\n-    };\r\n-\r\n-    public static void main(String[] args) {\r\n-        \/\/ Platform-specific tricks\r\n-        if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\r\n-            EMOJI[4] = EMOJI[5] = null; \/\/ Flags and tags are not supported on Windows\r\n-        }\r\n-\r\n-        BufferedImage img = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\r\n-        String errors = \"\";\r\n-        for (int i = 0; i < EMOJI.length; i++) {\r\n-            String emoji = EMOJI[i];\r\n-            if (emoji == null) continue;\r\n-            drawEmoji(img, emoji);\r\n-            String error = checkEmoji(img);\r\n-            if (error != null) {\r\n-                errors += \"\\n#\" + i + \": \" + error;\r\n-                try {\r\n-                    ImageIO.write(img, \"PNG\", new File(\"ComplexEmoji\" + i + \".png\"));\r\n-                } catch (IOException e) {\r\n-                    e.printStackTrace();\r\n-                }\r\n-            }\r\n-        }\r\n-        if (!errors.isEmpty()) throw new RuntimeException(errors);\r\n-    }\r\n-\r\n-    private static void drawEmoji(Image img, String emoji) {\r\n-        Graphics g = img.getGraphics();\r\n-        g.setColor(Color.white);\r\n-        g.fillRect(0, 0, IMG_WIDTH, IMG_HEIGHT);\r\n-        g.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));\r\n-        \/\/ Try to trick shaper by prepending \"A\" letter\r\n-        \/\/ White on white will not be visible anyway\r\n-        g.drawString(\"A\" + emoji, 2, 15);\r\n-        g.dispose();\r\n-    }\r\n-\r\n-    private static String checkEmoji(BufferedImage img) {\r\n-        Point min = new Point(Integer.MAX_VALUE, Integer.MAX_VALUE);\r\n-        Point max = new Point(Integer.MIN_VALUE, Integer.MIN_VALUE);\r\n-        for (int x = 0; x < IMG_WIDTH; x++) {\r\n-            for (int y = 0; y < IMG_HEIGHT; y++) {\r\n-                int rgb = img.getRGB(x, y);\r\n-                if (rgb != -1) {\r\n-                    if (x < min.x) min.x = x;\r\n-                    if (y < min.y) min.y = y;\r\n-                    if (x > max.x) max.x = x;\r\n-                    if (y > max.y) max.y = y;\r\n-                }\r\n-            }\r\n-        }\r\n-        if (min.x >= max.x || min.y >= max.y) {\r\n-            return \"Empty image\";\r\n-        }\r\n-        int width = max.x - min.x + 1;\r\n-        int height = max.y - min.y + 1;\r\n-        double ratio = (double) width \/ (double) height;\r\n-        if (ratio > 1.5) {\r\n-            return \"Too wide image, is there few glyphs instead of one?\";\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright 2021 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Checks that complex emoji are rendered with proper shaping.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class ComplexEmoji {\n+    private static final int IMG_WIDTH = 60;\n+    private static final int IMG_HEIGHT = 20;\n+\n+    private static final String[] EMOJI = {\n+            \"\\ud83d\\udd25\", \/\/ Fire\n+            \"\\u2764\\ufe0f\", \/\/ Heart + color variation selector\n+            \"\\ud83e\\udd18\\ud83c\\udffb\", \/\/ Horns sign - white hand\n+            \"\\ud83d\\udc41\\ufe0f\\u200d\\ud83d\\udde8\\ufe0f\", \/\/ Eye in speech bubble - ZWJ sequence\n+            \"\\uD83C\\uDDE6\\uD83C\\uDDF6\", \/\/ Antarctica flag\n+            \"\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f\", \/\/ England flag - tag sequence\n+    };\n+\n+    public static void main(String[] args) {\n+        \/\/ Platform-specific tricks\n+        if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n+            EMOJI[4] = EMOJI[5] = null; \/\/ Flags and tags are not supported on Windows\n+        }\n+\n+        BufferedImage img = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\n+        String errors = \"\";\n+        for (int i = 0; i < EMOJI.length; i++) {\n+            String emoji = EMOJI[i];\n+            if (emoji == null) continue;\n+            drawEmoji(img, emoji);\n+            String error = checkEmoji(img);\n+            if (error != null) {\n+                errors += \"\\n#\" + i + \": \" + error;\n+                try {\n+                    ImageIO.write(img, \"PNG\", new File(\"ComplexEmoji\" + i + \".png\"));\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        if (!errors.isEmpty()) throw new RuntimeException(errors);\n+    }\n+\n+    private static void drawEmoji(Image img, String emoji) {\n+        Graphics g = img.getGraphics();\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, IMG_WIDTH, IMG_HEIGHT);\n+        g.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));\n+        \/\/ Try to trick shaper by prepending \"A\" letter\n+        \/\/ White on white will not be visible anyway\n+        g.drawString(\"A\" + emoji, 2, 15);\n+        g.dispose();\n+    }\n+\n+    private static String checkEmoji(BufferedImage img) {\n+        Point min = new Point(Integer.MAX_VALUE, Integer.MAX_VALUE);\n+        Point max = new Point(Integer.MIN_VALUE, Integer.MIN_VALUE);\n+        for (int x = 0; x < IMG_WIDTH; x++) {\n+            for (int y = 0; y < IMG_HEIGHT; y++) {\n+                int rgb = img.getRGB(x, y);\n+                if (rgb != -1) {\n+                    if (x < min.x) min.x = x;\n+                    if (y < min.y) min.y = y;\n+                    if (x > max.x) max.x = x;\n+                    if (y > max.y) max.y = y;\n+                }\n+            }\n+        }\n+        if (min.x >= max.x || min.y >= max.y) {\n+            return \"Empty image\";\n+        }\n+        int width = max.x - min.x + 1;\n+        int height = max.y - min.y + 1;\n+        double ratio = (double) width \/ (double) height;\n+        if (ratio > 1.5) {\n+            return \"Too wide image, is there few glyphs instead of one?\";\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/ComplexEmoji.java","additions":109,"deletions":109,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -1,174 +1,174 @@\n-\/*\r\n- * Copyright 2021 JetBrains s.r.o.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-\/*\r\n- * @test\r\n- * @summary Checks that variation selectors work.\r\n- *\/\r\n-\r\n-import javax.imageio.ImageIO;\r\n-import java.awt.*;\r\n-import java.awt.image.BufferedImage;\r\n-import java.io.File;\r\n-import java.io.IOException;\r\n-import java.util.Arrays;\r\n-import java.util.stream.Collectors;\r\n-\r\n-import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\r\n-import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_OFF;\r\n-\r\n-public class EmojiVariation {\r\n-    private static final int IMG_WIDTH = 100;\r\n-    private static final int IMG_HEIGHT = 50;\r\n-\r\n-    private static final Color SYMBOL_COLOR = Color.MAGENTA;\r\n-\r\n-    \/\/ These emoji must be monochrome by default\r\n-    private static final String[] SYMBOLS = {\r\n-            \"\\u0023\",\"\\u002a\",\"\\u0030\",\"\\u0031\",\"\\u0032\",\"\\u0033\",\"\\u0034\",\"\\u0035\",\"\\u0036\",\"\\u0037\",\"\\u0038\",\"\\u0039\",\r\n-            \"\\u00a9\",\"\\u00ae\",\"\\u203c\",\"\\u2049\",\"\\u2122\",\"\\u2139\",\"\\u2194\",\"\\u2195\",\"\\u2196\",\"\\u2197\",\"\\u2198\",\"\\u2199\",\r\n-            \"\\u21a9\",\"\\u21aa\",\"\\u2328\",\"\\u23cf\",\"\\u23ed\",\"\\u23ee\",\"\\u23ef\",\"\\u23f1\",\"\\u23f2\",\"\\u23f8\",\"\\u23f9\",\"\\u23fa\",\r\n-            \"\\u24c2\",\"\\u25aa\",\"\\u25ab\",\"\\u25b6\",\"\\u25c0\",\"\\u25fb\",\"\\u25fc\",\"\\u2600\",\"\\u2601\",\"\\u2602\",\"\\u2603\",\"\\u2604\",\r\n-            \"\\u260e\",\"\\u2611\",\"\\u2618\",\"\\u261d\",\"\\u2620\",\"\\u2622\",\"\\u2623\",\"\\u2626\",\"\\u262a\",\"\\u262e\",\"\\u262f\",\"\\u2638\",\r\n-            \"\\u2639\",\"\\u263a\",\"\\u2640\",\"\\u2642\",\"\\u265f\",\"\\u2660\",\"\\u2663\",\"\\u2665\",\"\\u2666\",\"\\u2668\",\"\\u267b\",\"\\u267e\",\r\n-            \"\\u2692\",\"\\u2694\",\"\\u2695\",\"\\u2696\",\"\\u2697\",\"\\u2699\",\"\\u269b\",\"\\u269c\",\"\\u26a0\",\"\\u26b0\",\"\\u26b1\",\"\\u26c8\",\r\n-            \"\\u26cf\",\"\\u26d1\",\"\\u26d3\",\"\\u26e9\",\"\\u26f0\",\"\\u26f1\",\"\\u26f4\",\"\\u26f7\",\"\\u26f8\",\"\\u26f9\",\"\\u2702\",\"\\u2708\",\r\n-            \"\\u2709\",\"\\u270c\",\"\\u270d\",\"\\u270f\",\"\\u2712\",\"\\u2714\",\"\\u2716\",\"\\u271d\",\"\\u2721\",\"\\u2733\",\"\\u2734\",\"\\u2744\",\r\n-            \"\\u2747\",\"\\u2763\",\"\\u2764\",\"\\u27a1\",\"\\u2934\",\"\\u2935\",\"\\u2b05\",\"\\u2b06\",\"\\u2b07\",\"\\u3030\",\"\\u303d\",\"\\u3297\",\r\n-            \"\\u3299\",\"\\ud83c\\udd70\",\"\\ud83c\\udd71\",\"\\ud83c\\udd7e\",\"\\ud83c\\udd7f\",\"\\ud83c\\ude02\",\"\\ud83c\\ude37\",\r\n-            \"\\ud83c\\udf21\",\"\\ud83c\\udf24\",\"\\ud83c\\udf25\",\"\\ud83c\\udf26\",\"\\ud83c\\udf27\",\"\\ud83c\\udf28\",\"\\ud83c\\udf29\",\r\n-            \"\\ud83c\\udf2a\",\"\\ud83c\\udf2b\",\"\\ud83c\\udf2c\",\"\\ud83c\\udf36\",\"\\ud83c\\udf7d\",\"\\ud83c\\udf96\",\"\\ud83c\\udf97\",\r\n-            \"\\ud83c\\udf99\",\"\\ud83c\\udf9a\",\"\\ud83c\\udf9b\",\"\\ud83c\\udf9e\",\"\\ud83c\\udf9f\",\"\\ud83c\\udfcb\",\"\\ud83c\\udfcc\",\r\n-            \"\\ud83c\\udfcd\",\"\\ud83c\\udfce\",\"\\ud83c\\udfd4\",\"\\ud83c\\udfd5\",\"\\ud83c\\udfd6\",\"\\ud83c\\udfd7\",\"\\ud83c\\udfd8\",\r\n-            \"\\ud83c\\udfd9\",\"\\ud83c\\udfda\",\"\\ud83c\\udfdb\",\"\\ud83c\\udfdc\",\"\\ud83c\\udfdd\",\"\\ud83c\\udfde\",\"\\ud83c\\udfdf\",\r\n-            \"\\ud83c\\udff3\",\"\\ud83c\\udff5\",\"\\ud83c\\udff7\",\"\\ud83d\\udc3f\",\"\\ud83d\\udc41\",\"\\ud83d\\udcfd\",\"\\ud83d\\udd49\",\r\n-            \"\\ud83d\\udd4a\",\"\\ud83d\\udd6f\",\"\\ud83d\\udd70\",\"\\ud83d\\udd73\",\"\\ud83d\\udd74\",\"\\ud83d\\udd75\",\"\\ud83d\\udd76\",\r\n-            \"\\ud83d\\udd77\",\"\\ud83d\\udd78\",\"\\ud83d\\udd79\",\"\\ud83d\\udd87\",\"\\ud83d\\udd8a\",\"\\ud83d\\udd8b\",\"\\ud83d\\udd8c\",\r\n-            \"\\ud83d\\udd8d\",\"\\ud83d\\udd90\",\"\\ud83d\\udda5\",\"\\ud83d\\udda8\",\"\\ud83d\\uddb1\",\"\\ud83d\\uddb2\",\"\\ud83d\\uddbc\",\r\n-            \"\\ud83d\\uddc2\",\"\\ud83d\\uddc3\",\"\\ud83d\\uddc4\",\"\\ud83d\\uddd1\",\"\\ud83d\\uddd2\",\"\\ud83d\\uddd3\",\"\\ud83d\\udddc\",\r\n-            \"\\ud83d\\udddd\",\"\\ud83d\\uddde\",\"\\ud83d\\udde1\",\"\\ud83d\\udde3\",\"\\ud83d\\udde8\",\"\\ud83d\\uddef\",\"\\ud83d\\uddf3\",\r\n-            \"\\ud83d\\uddfa\",\"\\ud83d\\udecb\",\"\\ud83d\\udecd\",\"\\ud83d\\udece\",\"\\ud83d\\udecf\",\"\\ud83d\\udee0\",\"\\ud83d\\udee1\",\r\n-            \"\\ud83d\\udee2\",\"\\ud83d\\udee3\",\"\\ud83d\\udee4\",\"\\ud83d\\udee5\",\"\\ud83d\\udee9\",\"\\ud83d\\udef0\",\"\\ud83d\\udef3\",\r\n-    };\r\n-\r\n-    private enum Variation {\r\n-        DEFAULT(\"\"),\r\n-        MONO(\"\\ufe0e\"),\r\n-        COLOR(\"\\ufe0f\");\r\n-\r\n-        final String suffix;\r\n-\r\n-        Variation(String suffix) {\r\n-            this.suffix = suffix;\r\n-        }\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        \/\/ Platform-specific tricks\r\n-       if (System.getProperty(\"os.name\").toLowerCase().contains(\"linux\")) {\r\n-           \/\/ Many emoji on Linux don't have monochrome variants\r\n-           Arrays.fill(SYMBOLS, 28, 37, null);\r\n-            Arrays.fill(SYMBOLS, 83, 94, null);\r\n-            Arrays.fill(SYMBOLS, 117, SYMBOLS.length, null);\r\n-        } else if (System.getProperty(\"os.name\").toLowerCase().contains(\"mac\")) {\r\n-           \/\/ Many emoji on macOS don't have monochrome variants\r\n-           Arrays.fill(SYMBOLS, 28, 36, null);\r\n-            Arrays.fill(SYMBOLS, 83, 94, null);\r\n-            Arrays.fill(SYMBOLS, 127, SYMBOLS.length, null);\r\n-        }\r\n-\r\n-        BufferedImage img = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\r\n-        String errors = \"\";\r\n-        for (String s : SYMBOLS) {\r\n-            if (s == null) continue;\r\n-            errors += test(img, s, Variation.DEFAULT, false);\r\n-            errors += test(img, s, Variation.MONO, false);\r\n-            errors += test(img, s, Variation.COLOR, true);\r\n-        }\r\n-\r\n-        if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\r\n-            \/\/ Bonus points: check that variation selectors work other way too\r\n-            String s = \"\\ud83d\\udd25\";\r\n-            errors += test(img, s, Variation.DEFAULT, true);\r\n-            errors += test(img, s, Variation.MONO, false);\r\n-            errors += test(img, s, Variation.COLOR, true);\r\n-        }\r\n-\r\n-        if (!errors.isEmpty()) throw new RuntimeException(errors);\r\n-    }\r\n-\r\n-    private static String test(BufferedImage img, String symbol, Variation variation, boolean expectColor) {\r\n-        draw(img, symbol + variation.suffix);\r\n-        String error = check(img, expectColor);\r\n-        if (error != null) {\r\n-            String name = symbol.chars().mapToObj(c -> {\r\n-                String s = Integer.toHexString(c);\r\n-                return \"0\".repeat(4 - s.length()) + s;\r\n-            }).collect(Collectors.joining(\"-\")) + \"-\" + variation;\r\n-            try {\r\n-                ImageIO.write(img, \"PNG\", new File(\"EmojiVariation-\" + name + \".png\"));\r\n-            } catch (IOException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-            return \"\\n\" + name + \": \" + error;\r\n-        }\r\n-        return \"\";\r\n-    }\r\n-\r\n-    private static void draw(Image img, String symbol) {\r\n-        Graphics2D g = (Graphics2D) img.getGraphics();\r\n-        g.setColor(Color.white);\r\n-        g.fillRect(0, 0, IMG_WIDTH, IMG_HEIGHT);\r\n-        g.setFont(new Font(Font.DIALOG, Font.PLAIN, 50));\r\n-        g.setRenderingHint(KEY_TEXT_ANTIALIASING, VALUE_TEXT_ANTIALIAS_OFF);\r\n-        g.setColor(SYMBOL_COLOR);\r\n-        g.drawString(symbol, 2, 42);\r\n-        g.dispose();\r\n-    }\r\n-\r\n-    private static String check(BufferedImage img, boolean expectColor) {\r\n-        boolean rendered = false;\r\n-        boolean color = false;\r\n-        for (int x = 0; x < IMG_WIDTH; x++) {\r\n-            for (int y = 0; y < IMG_HEIGHT; y++) {\r\n-                int rgb = img.getRGB(x, y);\r\n-                if (rgb != Color.white.getRGB()) {\r\n-                    rendered = true;\r\n-                    if ((rgb & 0xff00ff) != 0xff00ff) {\r\n-                        \/\/ When monochrome symbol is rendered with AA=ON,\r\n-                        \/\/ pixel color may be anywhere between magenta (SYMBOL_COLOR) and white,\r\n-                        \/\/ which is 0xff00ff - 0xffffff. This means only green component may vary,\r\n-                        \/\/ red and green must always be 0xff\r\n-                        color = true;\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        if (!rendered) {\r\n-            return \"Empty image\";\r\n-        } else if (color != expectColor) {\r\n-            return expectColor ? \"Expected color but rendered mono\" : \"Expected mono but rendered color\";\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright 2021 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Checks that variation selectors work.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_OFF;\n+\n+public class EmojiVariation {\n+    private static final int IMG_WIDTH = 100;\n+    private static final int IMG_HEIGHT = 50;\n+\n+    private static final Color SYMBOL_COLOR = Color.MAGENTA;\n+\n+    \/\/ These emoji must be monochrome by default\n+    private static final String[] SYMBOLS = {\n+            \"\\u0023\",\"\\u002a\",\"\\u0030\",\"\\u0031\",\"\\u0032\",\"\\u0033\",\"\\u0034\",\"\\u0035\",\"\\u0036\",\"\\u0037\",\"\\u0038\",\"\\u0039\",\n+            \"\\u00a9\",\"\\u00ae\",\"\\u203c\",\"\\u2049\",\"\\u2122\",\"\\u2139\",\"\\u2194\",\"\\u2195\",\"\\u2196\",\"\\u2197\",\"\\u2198\",\"\\u2199\",\n+            \"\\u21a9\",\"\\u21aa\",\"\\u2328\",\"\\u23cf\",\"\\u23ed\",\"\\u23ee\",\"\\u23ef\",\"\\u23f1\",\"\\u23f2\",\"\\u23f8\",\"\\u23f9\",\"\\u23fa\",\n+            \"\\u24c2\",\"\\u25aa\",\"\\u25ab\",\"\\u25b6\",\"\\u25c0\",\"\\u25fb\",\"\\u25fc\",\"\\u2600\",\"\\u2601\",\"\\u2602\",\"\\u2603\",\"\\u2604\",\n+            \"\\u260e\",\"\\u2611\",\"\\u2618\",\"\\u261d\",\"\\u2620\",\"\\u2622\",\"\\u2623\",\"\\u2626\",\"\\u262a\",\"\\u262e\",\"\\u262f\",\"\\u2638\",\n+            \"\\u2639\",\"\\u263a\",\"\\u2640\",\"\\u2642\",\"\\u265f\",\"\\u2660\",\"\\u2663\",\"\\u2665\",\"\\u2666\",\"\\u2668\",\"\\u267b\",\"\\u267e\",\n+            \"\\u2692\",\"\\u2694\",\"\\u2695\",\"\\u2696\",\"\\u2697\",\"\\u2699\",\"\\u269b\",\"\\u269c\",\"\\u26a0\",\"\\u26b0\",\"\\u26b1\",\"\\u26c8\",\n+            \"\\u26cf\",\"\\u26d1\",\"\\u26d3\",\"\\u26e9\",\"\\u26f0\",\"\\u26f1\",\"\\u26f4\",\"\\u26f7\",\"\\u26f8\",\"\\u26f9\",\"\\u2702\",\"\\u2708\",\n+            \"\\u2709\",\"\\u270c\",\"\\u270d\",\"\\u270f\",\"\\u2712\",\"\\u2714\",\"\\u2716\",\"\\u271d\",\"\\u2721\",\"\\u2733\",\"\\u2734\",\"\\u2744\",\n+            \"\\u2747\",\"\\u2763\",\"\\u2764\",\"\\u27a1\",\"\\u2934\",\"\\u2935\",\"\\u2b05\",\"\\u2b06\",\"\\u2b07\",\"\\u3030\",\"\\u303d\",\"\\u3297\",\n+            \"\\u3299\",\"\\ud83c\\udd70\",\"\\ud83c\\udd71\",\"\\ud83c\\udd7e\",\"\\ud83c\\udd7f\",\"\\ud83c\\ude02\",\"\\ud83c\\ude37\",\n+            \"\\ud83c\\udf21\",\"\\ud83c\\udf24\",\"\\ud83c\\udf25\",\"\\ud83c\\udf26\",\"\\ud83c\\udf27\",\"\\ud83c\\udf28\",\"\\ud83c\\udf29\",\n+            \"\\ud83c\\udf2a\",\"\\ud83c\\udf2b\",\"\\ud83c\\udf2c\",\"\\ud83c\\udf36\",\"\\ud83c\\udf7d\",\"\\ud83c\\udf96\",\"\\ud83c\\udf97\",\n+            \"\\ud83c\\udf99\",\"\\ud83c\\udf9a\",\"\\ud83c\\udf9b\",\"\\ud83c\\udf9e\",\"\\ud83c\\udf9f\",\"\\ud83c\\udfcb\",\"\\ud83c\\udfcc\",\n+            \"\\ud83c\\udfcd\",\"\\ud83c\\udfce\",\"\\ud83c\\udfd4\",\"\\ud83c\\udfd5\",\"\\ud83c\\udfd6\",\"\\ud83c\\udfd7\",\"\\ud83c\\udfd8\",\n+            \"\\ud83c\\udfd9\",\"\\ud83c\\udfda\",\"\\ud83c\\udfdb\",\"\\ud83c\\udfdc\",\"\\ud83c\\udfdd\",\"\\ud83c\\udfde\",\"\\ud83c\\udfdf\",\n+            \"\\ud83c\\udff3\",\"\\ud83c\\udff5\",\"\\ud83c\\udff7\",\"\\ud83d\\udc3f\",\"\\ud83d\\udc41\",\"\\ud83d\\udcfd\",\"\\ud83d\\udd49\",\n+            \"\\ud83d\\udd4a\",\"\\ud83d\\udd6f\",\"\\ud83d\\udd70\",\"\\ud83d\\udd73\",\"\\ud83d\\udd74\",\"\\ud83d\\udd75\",\"\\ud83d\\udd76\",\n+            \"\\ud83d\\udd77\",\"\\ud83d\\udd78\",\"\\ud83d\\udd79\",\"\\ud83d\\udd87\",\"\\ud83d\\udd8a\",\"\\ud83d\\udd8b\",\"\\ud83d\\udd8c\",\n+            \"\\ud83d\\udd8d\",\"\\ud83d\\udd90\",\"\\ud83d\\udda5\",\"\\ud83d\\udda8\",\"\\ud83d\\uddb1\",\"\\ud83d\\uddb2\",\"\\ud83d\\uddbc\",\n+            \"\\ud83d\\uddc2\",\"\\ud83d\\uddc3\",\"\\ud83d\\uddc4\",\"\\ud83d\\uddd1\",\"\\ud83d\\uddd2\",\"\\ud83d\\uddd3\",\"\\ud83d\\udddc\",\n+            \"\\ud83d\\udddd\",\"\\ud83d\\uddde\",\"\\ud83d\\udde1\",\"\\ud83d\\udde3\",\"\\ud83d\\udde8\",\"\\ud83d\\uddef\",\"\\ud83d\\uddf3\",\n+            \"\\ud83d\\uddfa\",\"\\ud83d\\udecb\",\"\\ud83d\\udecd\",\"\\ud83d\\udece\",\"\\ud83d\\udecf\",\"\\ud83d\\udee0\",\"\\ud83d\\udee1\",\n+            \"\\ud83d\\udee2\",\"\\ud83d\\udee3\",\"\\ud83d\\udee4\",\"\\ud83d\\udee5\",\"\\ud83d\\udee9\",\"\\ud83d\\udef0\",\"\\ud83d\\udef3\",\n+    };\n+\n+    private enum Variation {\n+        DEFAULT(\"\"),\n+        MONO(\"\\ufe0e\"),\n+        COLOR(\"\\ufe0f\");\n+\n+        final String suffix;\n+\n+        Variation(String suffix) {\n+            this.suffix = suffix;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Platform-specific tricks\n+       if (System.getProperty(\"os.name\").toLowerCase().contains(\"linux\")) {\n+           \/\/ Many emoji on Linux don't have monochrome variants\n+           Arrays.fill(SYMBOLS, 28, 37, null);\n+            Arrays.fill(SYMBOLS, 83, 94, null);\n+            Arrays.fill(SYMBOLS, 117, SYMBOLS.length, null);\n+        } else if (System.getProperty(\"os.name\").toLowerCase().contains(\"mac\")) {\n+           \/\/ Many emoji on macOS don't have monochrome variants\n+           Arrays.fill(SYMBOLS, 28, 36, null);\n+            Arrays.fill(SYMBOLS, 83, 94, null);\n+            Arrays.fill(SYMBOLS, 127, SYMBOLS.length, null);\n+        }\n+\n+        BufferedImage img = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\n+        String errors = \"\";\n+        for (String s : SYMBOLS) {\n+            if (s == null) continue;\n+            errors += test(img, s, Variation.DEFAULT, false);\n+            errors += test(img, s, Variation.MONO, false);\n+            errors += test(img, s, Variation.COLOR, true);\n+        }\n+\n+        if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n+            \/\/ Bonus points: check that variation selectors work other way too\n+            String s = \"\\ud83d\\udd25\";\n+            errors += test(img, s, Variation.DEFAULT, true);\n+            errors += test(img, s, Variation.MONO, false);\n+            errors += test(img, s, Variation.COLOR, true);\n+        }\n+\n+        if (!errors.isEmpty()) throw new RuntimeException(errors);\n+    }\n+\n+    private static String test(BufferedImage img, String symbol, Variation variation, boolean expectColor) {\n+        draw(img, symbol + variation.suffix);\n+        String error = check(img, expectColor);\n+        if (error != null) {\n+            String name = symbol.chars().mapToObj(c -> {\n+                String s = Integer.toHexString(c);\n+                return \"0\".repeat(4 - s.length()) + s;\n+            }).collect(Collectors.joining(\"-\")) + \"-\" + variation;\n+            try {\n+                ImageIO.write(img, \"PNG\", new File(\"EmojiVariation-\" + name + \".png\"));\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+            return \"\\n\" + name + \": \" + error;\n+        }\n+        return \"\";\n+    }\n+\n+    private static void draw(Image img, String symbol) {\n+        Graphics2D g = (Graphics2D) img.getGraphics();\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, IMG_WIDTH, IMG_HEIGHT);\n+        g.setFont(new Font(Font.DIALOG, Font.PLAIN, 50));\n+        g.setRenderingHint(KEY_TEXT_ANTIALIASING, VALUE_TEXT_ANTIALIAS_OFF);\n+        g.setColor(SYMBOL_COLOR);\n+        g.drawString(symbol, 2, 42);\n+        g.dispose();\n+    }\n+\n+    private static String check(BufferedImage img, boolean expectColor) {\n+        boolean rendered = false;\n+        boolean color = false;\n+        for (int x = 0; x < IMG_WIDTH; x++) {\n+            for (int y = 0; y < IMG_HEIGHT; y++) {\n+                int rgb = img.getRGB(x, y);\n+                if (rgb != Color.white.getRGB()) {\n+                    rendered = true;\n+                    if ((rgb & 0xff00ff) != 0xff00ff) {\n+                        \/\/ When monochrome symbol is rendered with AA=ON,\n+                        \/\/ pixel color may be anywhere between magenta (SYMBOL_COLOR) and white,\n+                        \/\/ which is 0xff00ff - 0xffffff. This means only green component may vary,\n+                        \/\/ red and green must always be 0xff\n+                        color = true;\n+                    }\n+                }\n+            }\n+        }\n+        if (!rendered) {\n+            return \"Empty image\";\n+        } else if (color != expectColor) {\n+            return expectColor ? \"Expected color but rendered mono\" : \"Expected mono but rendered color\";\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/EmojiVariation.java","additions":174,"deletions":174,"binary":false,"changes":348,"status":"modified"},{"patch":"@@ -1,115 +1,115 @@\n-\/*\r\n- * Copyright 2021 JetBrains s.r.o.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-\/*\r\n- * @test\r\n- * @summary Checks that emoji rendered via glyph cache and bypassing it look similar.\r\n- *\/\r\n-\r\n-import javax.imageio.ImageIO;\r\n-import java.awt.*;\r\n-import java.awt.image.BufferedImage;\r\n-import java.io.File;\r\n-\r\n-public class OutlineTextRendererEmoji {\r\n-    private static final int IMG_WIDTH = 84;\r\n-    private static final int IMG_HEIGHT = 84;\r\n-    private static final int EMOJI_X = 7;\r\n-    private static final int EMOJI_Y = 70;\r\n-    private static final int FONT_SIZE = 70;\r\n-    private static final String EMOJI = \"\\ud83d\\udd25\"; \/\/ Fire\r\n-\r\n-    private static final int CHECK_RADIUS = 10; \/\/ In pixels\r\n-    private static final double CHECK_TOLERANCE = 15; \/\/ Euclidean distance between colors\r\n-\r\n-    public static void main(String[] args) throws Exception {\r\n-        BufferedImage small = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\r\n-        BufferedImage big = new BufferedImage(IMG_WIDTH*2, IMG_HEIGHT*2, BufferedImage.TYPE_INT_RGB);\r\n-        drawEmoji(small, EMOJI_X, EMOJI_Y, FONT_SIZE);\r\n-        drawEmoji(big, EMOJI_X*2, EMOJI_Y*2, FONT_SIZE*2);\r\n-        checkEmoji(small, big);\r\n-    }\r\n-\r\n-    private static void drawEmoji(Image img, int x, int y, int size) {\r\n-        Graphics g = img.getGraphics();\r\n-        g.setColor(Color.white);\r\n-        g.fillRect(0, 0, img.getWidth(null), img.getHeight(null));\r\n-        g.setFont(new Font(Font.DIALOG, Font.PLAIN, size));\r\n-        g.drawString(EMOJI, x, y);\r\n-        g.dispose();\r\n-    }\r\n-\r\n-    private static double distance(int rgb1, int rgb2) {\r\n-        double b = (rgb1 & 0xff) - (rgb2 & 0xff);\r\n-        double g = ((rgb1 >>> 8) & 0xff) - ((rgb2 >>> 8) & 0xff);\r\n-        double r = ((rgb1 >>> 16) & 0xff) - ((rgb2 >>> 16) & 0xff);\r\n-        double a = ((rgb1 >>> 24) & 0xff) - ((rgb2 >>> 24) & 0xff);\r\n-        return Math.sqrt(b*b + g*g + r*r + a*a);\r\n-    }\r\n-\r\n-    private static int sampleRectAvg(BufferedImage img, int x, int y, int width, int height) {\r\n-        int xTo = x + width, yTo = y + height;\r\n-        if (x < 0) x = 0;\r\n-        if (y < 0) y = 0;\r\n-        if (xTo > img.getWidth()) xTo = img.getWidth();\r\n-        if (yTo > img.getHeight()) yTo = img.getHeight();\r\n-\r\n-        int b = 0, g = 0, r = 0, a = 0;\r\n-        for (int i = x; i < xTo; i++) {\r\n-            for (int j = y; j < yTo; j++) {\r\n-                int c = img.getRGB(i, j);\r\n-                b += c & 0xff;\r\n-                g += (c >>> 8) & 0xff;\r\n-                r += (c >>> 16) & 0xff;\r\n-                a += (c >>> 24) & 0xff;\r\n-            }\r\n-        }\r\n-        int count = (xTo - x) * (yTo - y);\r\n-        b \/= count;\r\n-        g \/= count;\r\n-        r \/= count;\r\n-        a \/= count;\r\n-        return b | (g << 8) | (r << 16) | (a << 24);\r\n-    }\r\n-\r\n-    private static void checkEmoji(BufferedImage small, BufferedImage big) throws Exception {\r\n-        boolean empty = true, match = true;\r\n-        for (int x = 0; x < small.getWidth(); x++) {\r\n-            for (int y = 0; y < small.getHeight(); y++) {\r\n-                int s = sampleRectAvg(small, x-CHECK_RADIUS, y-CHECK_RADIUS, 1+2*CHECK_RADIUS, 1+2*CHECK_RADIUS);\r\n-                int b = sampleRectAvg(big, (x-CHECK_RADIUS)*2, (y-CHECK_RADIUS)*2, 1+4*CHECK_RADIUS, 1+4*CHECK_RADIUS);\r\n-                if (s != -1 || b != -1) {\r\n-                    empty = false;\r\n-                    if (distance(s, b) > CHECK_TOLERANCE) match = false;\r\n-                }\r\n-            }\r\n-        }\r\n-        if (empty) {\r\n-            throw new Exception(\"Empty image\");\r\n-        } if (!match) {\r\n-            ImageIO.write(small, \"PNG\", new File(\"OutlineTextRendererEmoji-small.png\"));\r\n-            ImageIO.write(big, \"PNG\", new File(\"OutlineTextRendererEmoji-big.png\"));\r\n-            throw new Exception(\"Images mismatch\");\r\n-        }\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright 2021 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Checks that emoji rendered via glyph cache and bypassing it look similar.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+\n+public class OutlineTextRendererEmoji {\n+    private static final int IMG_WIDTH = 84;\n+    private static final int IMG_HEIGHT = 84;\n+    private static final int EMOJI_X = 7;\n+    private static final int EMOJI_Y = 70;\n+    private static final int FONT_SIZE = 70;\n+    private static final String EMOJI = \"\\ud83d\\udd25\"; \/\/ Fire\n+\n+    private static final int CHECK_RADIUS = 10; \/\/ In pixels\n+    private static final double CHECK_TOLERANCE = 15; \/\/ Euclidean distance between colors\n+\n+    public static void main(String[] args) throws Exception {\n+        BufferedImage small = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);\n+        BufferedImage big = new BufferedImage(IMG_WIDTH*2, IMG_HEIGHT*2, BufferedImage.TYPE_INT_RGB);\n+        drawEmoji(small, EMOJI_X, EMOJI_Y, FONT_SIZE);\n+        drawEmoji(big, EMOJI_X*2, EMOJI_Y*2, FONT_SIZE*2);\n+        checkEmoji(small, big);\n+    }\n+\n+    private static void drawEmoji(Image img, int x, int y, int size) {\n+        Graphics g = img.getGraphics();\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, img.getWidth(null), img.getHeight(null));\n+        g.setFont(new Font(Font.DIALOG, Font.PLAIN, size));\n+        g.drawString(EMOJI, x, y);\n+        g.dispose();\n+    }\n+\n+    private static double distance(int rgb1, int rgb2) {\n+        double b = (rgb1 & 0xff) - (rgb2 & 0xff);\n+        double g = ((rgb1 >>> 8) & 0xff) - ((rgb2 >>> 8) & 0xff);\n+        double r = ((rgb1 >>> 16) & 0xff) - ((rgb2 >>> 16) & 0xff);\n+        double a = ((rgb1 >>> 24) & 0xff) - ((rgb2 >>> 24) & 0xff);\n+        return Math.sqrt(b*b + g*g + r*r + a*a);\n+    }\n+\n+    private static int sampleRectAvg(BufferedImage img, int x, int y, int width, int height) {\n+        int xTo = x + width, yTo = y + height;\n+        if (x < 0) x = 0;\n+        if (y < 0) y = 0;\n+        if (xTo > img.getWidth()) xTo = img.getWidth();\n+        if (yTo > img.getHeight()) yTo = img.getHeight();\n+\n+        int b = 0, g = 0, r = 0, a = 0;\n+        for (int i = x; i < xTo; i++) {\n+            for (int j = y; j < yTo; j++) {\n+                int c = img.getRGB(i, j);\n+                b += c & 0xff;\n+                g += (c >>> 8) & 0xff;\n+                r += (c >>> 16) & 0xff;\n+                a += (c >>> 24) & 0xff;\n+            }\n+        }\n+        int count = (xTo - x) * (yTo - y);\n+        b \/= count;\n+        g \/= count;\n+        r \/= count;\n+        a \/= count;\n+        return b | (g << 8) | (r << 16) | (a << 24);\n+    }\n+\n+    private static void checkEmoji(BufferedImage small, BufferedImage big) throws Exception {\n+        boolean empty = true, match = true;\n+        for (int x = 0; x < small.getWidth(); x++) {\n+            for (int y = 0; y < small.getHeight(); y++) {\n+                int s = sampleRectAvg(small, x-CHECK_RADIUS, y-CHECK_RADIUS, 1+2*CHECK_RADIUS, 1+2*CHECK_RADIUS);\n+                int b = sampleRectAvg(big, (x-CHECK_RADIUS)*2, (y-CHECK_RADIUS)*2, 1+4*CHECK_RADIUS, 1+4*CHECK_RADIUS);\n+                if (s != -1 || b != -1) {\n+                    empty = false;\n+                    if (distance(s, b) > CHECK_TOLERANCE) match = false;\n+                }\n+            }\n+        }\n+        if (empty) {\n+            throw new Exception(\"Empty image\");\n+        } if (!match) {\n+            ImageIO.write(small, \"PNG\", new File(\"OutlineTextRendererEmoji-small.png\"));\n+            ImageIO.write(big, \"PNG\", new File(\"OutlineTextRendererEmoji-big.png\"));\n+            throw new Exception(\"Images mismatch\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/OutlineTextRendererEmoji.java","additions":115,"deletions":115,"binary":false,"changes":230,"status":"modified"}]}