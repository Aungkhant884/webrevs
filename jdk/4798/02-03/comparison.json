{"files":[{"patch":"@@ -172,5 +172,1 @@\n-        if (path == null) {\n-            return new GeneralPath();\n-        } else {\n-            return path;\n-        }\n+        return path;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CompositeStrike.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -907,0 +907,1 @@\n+    private static final GeneralPath NULL_OUTLINE = new GeneralPath();\n@@ -922,0 +923,1 @@\n+            if (gp == null) gp = NULL_OUTLINE;\n@@ -930,3 +932,6 @@\n-        gp = (GeneralPath)gp.clone(); \/\/ mutable!\n-        if (x != 0f || y != 0f) {\n-            gp.transform(AffineTransform.getTranslateInstance(x, y));\n+        if (gp == NULL_OUTLINE) gp = null;\n+        else {\n+            gp = (GeneralPath)gp.clone(); \/\/ mutable!\n+            if (x != 0f || y != 0f) {\n+                gp.transform(AffineTransform.getTranslateInstance(x, y));\n+            }\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFontStrike.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -147,2 +147,1 @@\n-        return FontScaler.getNullScaler().\n-            getGlyphOutline(0L, glyphCode, x,y);\n+        return null;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FreetypeFontScaler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.awt.*;\n@@ -29,0 +30,2 @@\n+import java.awt.geom.AffineTransform;\n+import java.util.ArrayList;\n@@ -34,0 +37,2 @@\n+import static sun.font.CharToGlyphMapper.INVISIBLE_GLYPH_ID;\n+\n@@ -280,0 +285,43 @@\n+    public Shape extractOutlineAndSetAsFallback(FontInfo info, GlyphVector gv,\n+                                                float x, float y) {\n+        this.x = x;\n+        this.y = y;\n+        this.lcdRGBOrder = info.lcdRGBOrder;\n+        this.lcdSubPixPos = info.lcdSubPixPos;\n+        StandardGlyphVector sgv = StandardGlyphVector.getStandardGV(gv, info);\n+        usePositions = true;\n+        len = 0;\n+        strikelist = null;\n+        glyphindex = -1;\n+        Shape shape = sgv.getGlyphsOutline(0, sgv.getNumGlyphs(), x, y, this);\n+        if (len > 0) {\n+            AffineTransform dtx = new AffineTransform(info.devTx);\n+            dtx.transform(positions, 0, positions, 0, len);\n+        }\n+        info.fontStrike.getGlyphImagePtrs(glyphData, images, len);\n+        return shape;\n+    }\n+\n+    public void setPosition(float x, float y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    void addFallbackGlyph(StandardGlyphVector.GlyphStrike strike, int glyph, float x, float y) {\n+        if (glyph == INVISIBLE_GLYPH_ID) return;\n+\n+        if (strikelist == null) strikelist = new ArrayList<StandardGlyphVector.GlyphStrike>();\n+        ((ArrayList<StandardGlyphVector.GlyphStrike>) strikelist).add(strike);\n+\n+        int[] gd = glyphData;\n+        float[] pos = positions;\n+        ensureCapacity(len + 1);\n+        if (gd != glyphData && gd != null) System.arraycopy(gd, 0, glyphData, 0, len);\n+        if (pos != positions && pos != null) System.arraycopy(pos, 0, positions, 0, len * 2);\n+        glyphData[len] = glyph;\n+        positions[len*2] = x;\n+        positions[len*2+1] = y;\n+        len++;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/GlyphList.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-        return getGlyphsOutline(0, glyphs.length, 0, 0);\n+        return getGlyphsOutline(0, glyphs.length, 0, 0, null);\n@@ -427,1 +427,1 @@\n-        return getGlyphsOutline(0, glyphs.length, x, y);\n+        return getGlyphsOutline(0, glyphs.length, x, y, null);\n@@ -432,1 +432,1 @@\n-        return getGlyphsOutline(ix, 1, 0, 0);\n+        return getGlyphsOutline(ix, 1, 0, 0, null);\n@@ -437,1 +437,1 @@\n-        return getGlyphsOutline(ix, 1, x, y);\n+        return getGlyphsOutline(ix, 1, x, y, null);\n@@ -1164,1 +1164,1 @@\n-     * Used by getOutline, getGlyphsOutline\n+     * Used by getOutline, getGlyphsOutline and GlyphList#extractOutlineAndSetAsFallback\n@@ -1166,1 +1166,1 @@\n-    private Shape getGlyphsOutline(int start, int count, float x, float y) {\n+    Shape getGlyphsOutline(int start, int count, float x, float y, GlyphList fallbackList) {\n@@ -1175,1 +1175,5 @@\n-            getGlyphStrike(i).appendGlyphOutline(glyphs[i], result, px, py);\n+            GlyphStrike strike = getGlyphStrike(i);\n+            boolean hasOutline = strike.appendGlyphOutline(glyphs[i], result, px, py);\n+            if (!hasOutline && fallbackList != null) {\n+                fallbackList.addFallbackGlyph(strike, glyphs[i], positions[n], positions[n+1]);\n+            }\n@@ -1786,0 +1790,1 @@\n+                if (gp == null) gp = new GeneralPath();\n@@ -1805,1 +1810,1 @@\n-        void appendGlyphOutline(int glyphID, GeneralPath result, float x, float y) {\n+        boolean appendGlyphOutline(int glyphID, GeneralPath result, float x, float y) {\n@@ -1810,0 +1815,1 @@\n+                if (gp == null) return false;\n@@ -1812,0 +1818,1 @@\n+                if (gp == null) return false;\n@@ -1817,0 +1824,1 @@\n+            return true;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/StandardGlyphVector.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-    public static final TextPipe outlineTextRenderer;\n+    public static final OutlineTextRenderer outlineTextRenderer;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.font.StandardGlyphVector;\n@@ -50,19 +51,0 @@\n-        if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n-            SurfaceData.outlineTextRenderer.drawString(sg2d, s, x, y);\n-            return;\n-        }\n-\n-        float devx, devy;\n-        if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n-            double[] origin = {x + info.originX, y + info.originY};\n-            sg2d.transform.transform(origin, 0, origin, 0, 1);\n-            devx = (float)origin[0];\n-            devy = (float)origin[1];\n-        } else {\n-            devx = (float)(x + info.originX + sg2d.transX);\n-            devy = (float)(y + info.originY + sg2d.transY);\n-        }\n-        \/* setFromString returns false if shaping is needed, and we then back\n-         * off to a TextLayout. Such text may benefit slightly from a lower\n-         * overhead in this approach over the approach in previous releases.\n-         *\/\n@@ -70,2 +52,31 @@\n-        if (gl.setFromString(info, s, devx, devy)) {\n-            drawGlyphList(sg2d, gl);\n+        boolean renderFallback = false;\n+        try {\n+            if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n+                SurfaceData.outlineTextRenderer.drawGlyphVector(sg2d,\n+                        new StandardGlyphVector(sg2d.getFont(), s, sg2d.getFontRenderContext()), (float) x, (float) y, gl);\n+                if (gl.getNumGlyphs() > 0) renderFallback = true;\n+            }\n+\n+            float devx, devy;\n+            if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n+                double[] origin = {x + info.originX, y + info.originY};\n+                sg2d.transform.transform(origin, 0, origin, 0, 1);\n+                devx = (float)origin[0];\n+                devy = (float)origin[1];\n+            } else {\n+                devx = (float)(x + info.originX + sg2d.transX);\n+                devy = (float)(y + info.originY + sg2d.transY);\n+            }\n+            \/* setFromString returns false if shaping is needed, and we then back\n+             * off to a TextLayout. Such text may benefit slightly from a lower\n+             * overhead in this approach over the approach in previous releases.\n+             *\/\n+            if (renderFallback) {\n+                gl.setPosition(devx, devy);\n+                drawGlyphList(sg2d, gl);\n+                return;\n+            } else if (gl.setFromString(info, s, devx, devy)) {\n+                drawGlyphList(sg2d, gl);\n+                return;\n+            }\n+        } finally {\n@@ -73,5 +84,0 @@\n-        } else {\n-            gl.dispose(); \/\/ release this asap.\n-            TextLayout tl = new TextLayout(s, sg2d.getFont(),\n-                                           sg2d.getFontRenderContext());\n-            tl.draw(sg2d, (float)x, (float)y);\n@@ -79,0 +85,3 @@\n+        TextLayout tl = new TextLayout(s, sg2d.getFont(),\n+                sg2d.getFontRenderContext());\n+        tl.draw(sg2d, (float)x, (float)y);\n@@ -89,15 +98,0 @@\n-        float x, y;\n-        if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n-            SurfaceData.outlineTextRenderer.drawChars(\n-                                        sg2d, data, offset, length, ix, iy);\n-            return;\n-        }\n-        if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n-            double[] origin = {ix + info.originX, iy + info.originY};\n-            sg2d.transform.transform(origin, 0, origin, 0, 1);\n-            x = (float) origin[0];\n-            y = (float) origin[1];\n-        } else {\n-            x = ix + info.originX + sg2d.transX;\n-            y = iy + info.originY + sg2d.transY;\n-        }\n@@ -105,2 +99,26 @@\n-        if (gl.setFromChars(info, data, offset, length, x, y)) {\n-            drawGlyphList(sg2d, gl);\n+        boolean renderFallback = false;\n+        try {\n+            float x, y;\n+            if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n+                SurfaceData.outlineTextRenderer.drawGlyphVector(sg2d,\n+                        new StandardGlyphVector(sg2d.getFont(), data, offset, length, sg2d.getFontRenderContext()), ix, iy, gl);\n+                if (gl.getNumGlyphs() > 0) renderFallback = true;\n+            }\n+            if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n+                double[] origin = {ix + info.originX, iy + info.originY};\n+                sg2d.transform.transform(origin, 0, origin, 0, 1);\n+                x = (float) origin[0];\n+                y = (float) origin[1];\n+            } else {\n+                x = ix + info.originX + sg2d.transX;\n+                y = iy + info.originY + sg2d.transY;\n+            }\n+            if (renderFallback) {\n+                gl.setPosition(x, y);\n+                drawGlyphList(sg2d, gl);\n+                return;\n+            } else if (gl.setFromChars(info, data, offset, length, x, y)) {\n+                drawGlyphList(sg2d, gl);\n+                return;\n+            }\n+        } finally {\n@@ -108,7 +126,0 @@\n-        } else {\n-            gl.dispose(); \/\/ release this asap.\n-            TextLayout tl = new TextLayout(new String(data, offset, length),\n-                                           sg2d.getFont(),\n-                                           sg2d.getFontRenderContext());\n-            tl.draw(sg2d, ix, iy);\n-\n@@ -116,0 +127,4 @@\n+        TextLayout tl = new TextLayout(new String(data, offset, length),\n+                sg2d.getFont(),\n+                sg2d.getFontRenderContext());\n+        tl.draw(sg2d, ix, iy);\n@@ -126,14 +141,0 @@\n-        if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n-            SurfaceData.outlineTextRenderer.drawGlyphVector(sg2d, gv, x, y);\n-            return;\n-        }\n-        if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n-            double[] origin = {x, y};\n-            sg2d.transform.transform(origin, 0, origin, 0, 1);\n-            x = (float) origin[0];\n-            y = (float) origin[1];\n-        } else {\n-            x += sg2d.transX; \/\/ don't use the glyph info origin, already in gv.\n-            y += sg2d.transY;\n-        }\n-\n@@ -141,3 +142,22 @@\n-        gl.setFromGlyphVector(info, gv, x, y);\n-        drawGlyphList(sg2d, gl, info.aaHint);\n-        gl.dispose();\n+        boolean renderFallback = false;\n+        try {\n+            if (info.pixelHeight > OutlineTextRenderer.THRESHHOLD) {\n+                SurfaceData.outlineTextRenderer.drawGlyphVector(sg2d, gv, x, y, gl);\n+                if (gl.getNumGlyphs() > 0) renderFallback = true;\n+            }\n+            if (sg2d.transformState >= SunGraphics2D.TRANSFORM_TRANSLATESCALE) {\n+                double[] origin = {x, y};\n+                sg2d.transform.transform(origin, 0, origin, 0, 1);\n+                x = (float) origin[0];\n+                y = (float) origin[1];\n+            } else {\n+                x += sg2d.transX; \/\/ don't use the glyph info origin, already in gv.\n+                y += sg2d.transY;\n+            }\n+\n+            if (renderFallback) gl.setPosition(x, y);\n+            else gl.setFromGlyphVector(info, gv, x, y);\n+            drawGlyphList(sg2d, gl, info.aaHint);\n+        } finally {\n+            gl.dispose();\n+        }\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/GlyphListPipe.java","additions":87,"deletions":67,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.awt.font.FontRenderContext;\n-import java.awt.font.GlyphVector;\n-import java.awt.font.TextLayout;\n-import sun.java2d.SunGraphics2D;\n@@ -33,0 +29,3 @@\n+import sun.font.GlyphList;\n+import sun.font.StandardGlyphVector;\n+import sun.java2d.SunGraphics2D;\n@@ -34,3 +33,3 @@\n-import java.awt.Shape;\n-import java.awt.geom.AffineTransform;\n-import java.awt.font.TextLayout;\n+import java.awt.*;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n@@ -70,2 +69,2 @@\n-        String s = new String(data, offset, length);\n-        drawString(g2d, s, x, y);\n+        StandardGlyphVector sgv = new StandardGlyphVector(g2d.getFont(), data, offset, length, g2d.getFontRenderContext());\n+        drawGlyphVector(g2d, sgv, (float) x, (float) y);\n@@ -76,28 +75,2 @@\n-        if (\"\".equals(str)) {\n-            return; \/\/ TextLayout constructor throws IAE on \"\".\n-        }\n-        TextLayout tl = new TextLayout(str, g2d.getFont(),\n-                                       g2d.getFontRenderContext());\n-        Shape s = tl.getOutline(AffineTransform.getTranslateInstance(x, y));\n-\n-        int textAAHint = g2d.getFontInfo().aaHint;\n-\n-        int prevaaHint = - 1;\n-        if (textAAHint != SunHints.INTVAL_TEXT_ANTIALIAS_OFF &&\n-            g2d.antialiasHint != SunHints.INTVAL_ANTIALIAS_ON) {\n-            prevaaHint = g2d.antialiasHint;\n-            g2d.antialiasHint =  SunHints.INTVAL_ANTIALIAS_ON;\n-            g2d.validatePipe();\n-        } else if (textAAHint == SunHints.INTVAL_TEXT_ANTIALIAS_OFF\n-            && g2d.antialiasHint != SunHints.INTVAL_ANTIALIAS_OFF) {\n-            prevaaHint = g2d.antialiasHint;\n-            g2d.antialiasHint =  SunHints.INTVAL_ANTIALIAS_OFF;\n-            g2d.validatePipe();\n-        }\n-\n-        g2d.fill(s);\n-\n-        if (prevaaHint != -1) {\n-             g2d.antialiasHint = prevaaHint;\n-             g2d.validatePipe();\n-        }\n+        StandardGlyphVector sgv = new StandardGlyphVector(g2d.getFont(), str, g2d.getFontRenderContext());\n+        drawGlyphVector(g2d, sgv, (float) x, (float) y);\n@@ -108,0 +81,2 @@\n+        drawGlyphVector(g2d, gv, x, y, null);\n+    }\n@@ -109,0 +84,2 @@\n+    void drawGlyphVector(SunGraphics2D g2d, GlyphVector gv,\n+                                float x, float y, GlyphList fallbackList) {\n@@ -110,1 +87,2 @@\n-        Shape s = gv.getOutline(x, y);\n+        Shape s = fallbackList == null ? gv.getOutline(x, y) :\n+                fallbackList.extractOutlineAndSetAsFallback(g2d.getFontInfo(), gv, x, y);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/OutlineTextRenderer.java","additions":16,"deletions":38,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#define  FT26Dot6ToIntRound(x) (((int)(x + (1 << 5))) >> 6)\n@@ -1315,1 +1316,1 @@\n-            glyphInfo->advanceX = FT26Dot6ToFloat(\n+            glyphInfo->advanceX = FT26Dot6ToIntRound(\n@@ -1320,1 +1321,1 @@\n-            glyphInfo->advanceY = FT26Dot6ToFloat(\n+            glyphInfo->advanceY = FT26Dot6ToIntRound(\n@@ -1323,1 +1324,1 @@\n-            glyphInfo->advanceX = FT26Dot6ToFloat(\n+            glyphInfo->advanceX = FT26Dot6ToIntRound(\n@@ -1325,1 +1326,1 @@\n-            glyphInfo->advanceY = FT26Dot6ToFloat(\n+            glyphInfo->advanceY = FT26Dot6ToIntRound(\n@@ -1695,1 +1696,1 @@\n-    if (outline == NULL || outline->n_points == 0) {\n+    if (outline == NULL) {\n@@ -1697,0 +1698,4 @@\n+    } else if (outline->n_points == 0) {\n+        return (*env)->NewObject(env,\n+                                 sunFontIDs.gpClass,\n+                                 sunFontIDs.gpCtrEmpty);\n@@ -1753,5 +1758,0 @@\n-    if (gp == NULL) { \/* can be legal *\/\n-        gp = (*env)->NewObject(env,\n-                               sunFontIDs.gpClass,\n-                               sunFontIDs.gpCtrEmpty);\n-    }\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/freetypeScaler.c","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}