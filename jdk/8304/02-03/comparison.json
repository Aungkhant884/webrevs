{"files":[{"patch":"@@ -9012,3 +9012,22 @@\n-\/\/ Implementation of UDivI and UModI didn't improve performance.\n-\/\/ C2 can handle them better without intrinsification.\n-\/\/ However, UDivL and UModL are beneficial.\n+instruct udivI_reg_reg(iRegIdst dst, iRegIsrc src1, iRegIsrc src2) %{\n+  match(Set dst (UDivI src1 src2));\n+  format %{ \"DIVWU   $dst, $src1, $src2\" %}\n+  size(4);\n+  ins_encode %{\n+    __ divwu($dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct umodI_reg_reg(iRegIdst dst, iRegIsrc src1, iRegIsrc src2) %{\n+  match(Set dst (UModI src1 src2));\n+  expand %{\n+    iRegIdst tmp1;\n+    iRegIdst tmp2;\n+    udivI_reg_reg(tmp1, src1, src2);\n+    \/\/ Compute lower 32 bit result using signed instructions as suggested by ISA.\n+    \/\/ Upper 32 bit will contain garbage.\n+    mulI_reg_reg(tmp2, src2, tmp1);\n+    subI_reg_reg(dst, src1, tmp2);\n+  %}\n+%}\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}