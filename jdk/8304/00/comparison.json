{"files":[{"patch":"@@ -448,0 +448,1 @@\n+    DIVDU_OPCODE  = (31u << OPCODE_SHIFT | 457u << 1),              \/\/ XO-FORM\n@@ -1425,0 +1426,2 @@\n+  inline void divdu(  Register d, Register a, Register b);\n+  inline void divdu_( Register d, Register a, Register b);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -131,0 +131,2 @@\n+inline void Assembler::divdu(  Register d, Register a, Register b) { emit_int32(DIVDU_OPCODE  | rt(d) | ra(a) | rb(b) | oe(0) | rc(0)); }\n+inline void Assembler::divdu_( Register d, Register a, Register b) { emit_int32(DIVDU_OPCODE  | rt(d) | ra(a) | rb(b) | oe(0) | rc(1)); }\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9012,0 +9012,44 @@\n+instruct udivI_reg_reg(iRegIdst dst, iRegIsrc src1, iRegIsrc src2) %{\n+  match(Set dst (UDivI src1 src2));\n+  format %{ \"DIVWU   $dst, $src1, $src2\" %}\n+  size(4);\n+  ins_encode %{\n+    __ divwu($dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct umodI_reg_reg(iRegIdst dst, iRegIsrc src1, iRegIsrc src2) %{\n+  match(Set dst (UModI src1 src2));\n+  expand %{\n+    iRegIdst tmp1;\n+    iRegIdst tmp2;\n+    udivI_reg_reg(tmp1, src1, src2);\n+    \/\/ Compute lower 32 bit result using signed instructions as suggested by ISA.\n+    \/\/ Upper 32 bit will contain garbage.\n+    mulI_reg_reg(tmp2, src2, tmp1);\n+    subI_reg_reg(dst, src1, tmp2);\n+  %}\n+%}\n+\n+instruct udivL_reg_reg(iRegLdst dst, iRegLsrc src1, iRegLsrc src2) %{\n+  match(Set dst (UDivL src1 src2));\n+  format %{ \"DIVDU   $dst, $src1, $src2\" %}\n+  size(4);\n+  ins_encode %{\n+    __ divdu($dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct umodL_reg_reg(iRegLdst dst, iRegLsrc src1, iRegLsrc src2) %{\n+  match(Set dst (UModL src1 src2));\n+  expand %{\n+    iRegLdst tmp1;\n+    iRegLdst tmp2;\n+    udivL_reg_reg(tmp1, src1, src2);\n+    mulL_reg_reg(tmp2, src2, tmp1);\n+    subL_reg_reg(dst, src1, tmp2);\n+  %}\n+%}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}