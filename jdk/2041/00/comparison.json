{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+import com.sun.org.apache.xml.internal.serializer.dom3.DOMConstants;\n@@ -54,1 +55,1 @@\n- * @LastModified: June 2020\n+ * @LastModified: Jan 2021\n@@ -495,2 +496,8 @@\n-                    boolean b = val.endsWith(\"yes\") ? true : false;\n-                    m_doIndent = b;\n+                    m_doIndent = val.endsWith(\"yes\");\n+                }\n+\n+                break;\n+            case 'j':\n+                if ((DOMConstants.S_JDK_PROPERTIES_NS + DOMConstants.S_IS_STANDALONE)\n+                        .equals(name)) {\n+                    m_isStandalone = val.endsWith(\"yes\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +28,1 @@\n+ * @LastModified: Jan 2021\n@@ -30,1 +30,1 @@\n-final class DOMConstants {\n+public final class DOMConstants {\n@@ -38,0 +38,2 @@\n+    public static final String ORACLE_URL = \"http:\/\/www.oracle.com\/xml\";\n+\n@@ -45,0 +47,3 @@\n+    \/\/ The namespace used for the JDK-only parameters\n+    public static final String S_JDK_PROPERTIES_NS = \"{\" + ORACLE_URL + \"}\";\n+\n@@ -116,0 +121,12 @@\n+    \/**\n+     * Indicates that the serializer should treat the output as a standalone document.\n+     * The JDK specific standalone property controls whether a newline should be\n+     * added after the XML header.\n+     *\n+     * @see similar property ORACLE_IS_STANDALONE in OutputPropertiesFactory.\n+     *\/\n+    public static final String S_IS_STANDALONE = \"jdk-is-standalone\";\n+\n+    \/\/ Corresponding System property\n+    public static final String SP_IS_STANDALONE = \"jdk.xml.isStandalone\";\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/dom3\/DOMConstants.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-\n+import jdk.xml.internal.SecuritySupport;\n@@ -70,1 +70,1 @@\n- * @LastModified: Aug 2019\n+ * @LastModified: Jan 2021\n@@ -162,0 +162,4 @@\n+\n+    \/\/ Parameter is-standalone, jdk specific, not required\n+    private final static int IS_STANDALONE = 0x1 << 19;\n+\n@@ -185,0 +189,1 @@\n+            DOMConstants.S_IS_STANDALONE,\n@@ -354,0 +359,11 @@\n+        \/\/ JDK specific property jdk-is-standalone\n+        String p = SecuritySupport.getSystemProperty(DOMConstants.SP_IS_STANDALONE, \"false\");\n+        \/\/ the system property is true only if it is \"true\" and false otherwise\n+        if (p != null && p.equals(\"true\")) {\n+            fFeatures |= IS_STANDALONE;\n+            fDOMConfigProperties.setProperty(DOMConstants.S_JDK_PROPERTIES_NS\n+                    + DOMConstants.S_IS_STANDALONE, DOMConstants.DOM3_EXPLICIT_TRUE);\n+        } else {\n+            fDOMConfigProperties.setProperty(DOMConstants.S_JDK_PROPERTIES_NS\n+                    + DOMConstants.S_IS_STANDALONE, DOMConstants.DOM3_DEFAULT_FALSE);\n+        }\n@@ -381,1 +397,2 @@\n-                    || name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)){\n+                    || name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)\n+                    || name.equalsIgnoreCase(DOMConstants.S_IS_STANDALONE)){\n@@ -393,1 +410,1 @@\n-                return !((Boolean)value).booleanValue();\n+                return !((Boolean)value);\n@@ -397,1 +414,1 @@\n-                return ((Boolean)value).booleanValue();\n+                return ((Boolean)value);\n@@ -439,0 +456,2 @@\n+        } else if (name.equalsIgnoreCase(DOMConstants.S_IS_STANDALONE)) {\n+            return ((fFeatures & IS_STANDALONE) != 0) ? Boolean.TRUE : Boolean.FALSE;\n@@ -609,0 +628,9 @@\n+            } else if (name.equalsIgnoreCase(DOMConstants.S_IS_STANDALONE)) {\n+                fFeatures = state ? fFeatures | IS_STANDALONE : fFeatures & ~IS_STANDALONE;\n+                if (state) {\n+                    fDOMConfigProperties.setProperty(DOMConstants.S_JDK_PROPERTIES_NS\n+                            + DOMConstants.S_IS_STANDALONE, \"yes\");\n+                } else {\n+                    fDOMConfigProperties.setProperty(DOMConstants.S_JDK_PROPERTIES_NS\n+                            + DOMConstants.S_IS_STANDALONE, \"no\");\n+                }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/dom3\/LSSerializerImpl.java","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n+import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n+\n@@ -33,0 +36,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n@@ -51,0 +56,1 @@\n+import org.w3c.dom.Element;\n@@ -63,1 +69,1 @@\n- * @bug 6439439 8087303 8174025 8223291\n+ * @bug 6439439 8087303 8174025 8223291 8249867\n@@ -71,0 +77,8 @@\n+    private static final String DOM_FORMAT_PRETTY_PRINT = \"format-pretty-print\";\n+    private static final String JDK_IS_STANDALONE = \"jdk-is-standalone\";\n+    private static final String SP_JDK_IS_STANDALONE = \"jdk.xml.isStandalone\";\n+    private static final String XML_LB\n+            = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<sometag\/>\\n\";\n+    private static final String XML_NOLB\n+            = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><sometag\/>\\n\";\n+\n@@ -86,0 +100,76 @@\n+    \/*\n+     * Bug: 8249867\n+     * DataProvider: for testing the jdk-is-standalone property\n+     * Data columns: property, system property, value, expected result\n+     *\/\n+    @DataProvider(name = \"setting\")\n+    Object[][] getData() throws Exception {\n+        return new Object[][]{\n+            {false, true, true, XML_LB},   \/\/set System property\n+            {false, true, false, XML_NOLB},\/\/set System property\n+            {true, false, true, XML_LB},   \/\/set property\n+            {true, false, false, XML_NOLB},\/\/set property\n+            {false, false, false, XML_NOLB} \/\/default\n+        };\n+    }\n+\n+    \/*\n+     * Bug: 8249867\n+     * DataProvider: for verifying the System property\n+     * Data columns: value for system property, expected result\n+     *\/\n+    @DataProvider(name = \"SP\")\n+    Object[][] getSystemProperty() throws Exception {\n+        return new Object[][]{\n+            \/\/ the system property is true only if it is \"true\" and false otherwise\n+            {\"true\", true},\n+            {\"false\", false},\n+            {\"yes\", false},\n+            {\"\", false},\n+        };\n+    }\n+\n+    \/*\n+     * Bug: 8249867\n+     * Verifies the use of the new property \"jdk-is-standalone\" and the\n+     * corresponding System property \"jdk.xml.isStandalone\".\n+     *\/\n+    @Test(dataProvider = \"setting\")\n+    public void test(boolean p, boolean sp, boolean val, String expected)\n+            throws Exception {\n+        if (sp) {\n+            setSystemProperty(SP_JDK_IS_STANDALONE, Boolean.toString(val));\n+        }\n+        Document document = getDocument();\n+        DOMImplementationLS impl = (DOMImplementationLS)document.getImplementation();\n+        LSSerializer ser = impl.createLSSerializer();\n+        ser.getDomConfig().setParameter(\"format-pretty-print\", true);\n+        if (p && !sp) {\n+            ser.getDomConfig().setParameter(JDK_IS_STANDALONE, val);\n+        }\n+        if (sp) {\n+            clearSystemProperty(SP_JDK_IS_STANDALONE);\n+        }\n+        final StringWriter writer = new StringWriter();\n+        final LSOutput output = impl.createLSOutput();\n+        output.setCharacterStream(writer);\n+        ser.write(document, output);\n+        String result = writer.toString();\n+\n+        Assert.assertEquals(result, expected);\n+    }\n+\n+    \/*\n+     * Bug: 8249867\n+     * Verifies the definition of the System property \"jdk.xml.isStandalone\".\n+     * The system property is true only if it is \"true\" and false otherwise.\n+     *\/\n+    @Test(dataProvider = \"SP\")\n+    public void testSP(String value, boolean expected) throws Exception {\n+        setSystemProperty(SP_JDK_IS_STANDALONE, value);\n+        DOMConfiguration c = getConfig();\n+        clearSystemProperty(SP_JDK_IS_STANDALONE);\n+\n+        Assert.assertEquals(c.getParameter(JDK_IS_STANDALONE), expected);\n+    }\n+\n@@ -93,1 +183,2 @@\n-    public void testXMLPrettyPrint(String sourceFile, String expectedFile) throws Exception {\n+    public void testXMLPrettyPrint(String sourceFile, String expectedFile)\n+            throws Exception {\n@@ -98,1 +189,2 @@\n-        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)), \"The actual is: \" + result);\n+        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)),\n+                \"The actual is: \" + result);\n@@ -103,1 +195,2 @@\n-        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)), \"The actual is: \" + result);\n+        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)),\n+                \"The actual is: \" + result);\n@@ -105,1 +198,2 @@\n-        assertEquals(transform(toXmlDocument(source), true).replaceAll(\"\\r\\n\", \"\\n\"), expected);\n+        assertEquals(transform(toXmlDocument(source), true).replaceAll(\"\\r\\n\", \"\\n\"),\n+                expected);\n@@ -167,1 +261,2 @@\n-    public void testWhitespaceWithLSSerializer(String sourceFile, String expectedFile) throws Exception {\n+    public void testWhitespaceWithLSSerializer(String sourceFile, String expectedFile)\n+            throws Exception {\n@@ -172,1 +267,2 @@\n-        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)), \"The actual is: \" + result);\n+        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)),\n+                \"The actual is: \" + result);\n@@ -194,1 +290,2 @@\n-    public void testWhitespaceWithTransformer(String sourceFile, String expectedFile) throws Exception {\n+    public void testWhitespaceWithTransformer(String sourceFile, String expectedFile)\n+            throws Exception {\n@@ -199,1 +296,2 @@\n-        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)), \"The actual is: \" + result);\n+        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(result)),\n+                \"The actual is: \" + result);\n@@ -201,1 +299,2 @@\n-        assertEquals(transform(toXmlDocument(source), true).replaceAll(\"\\r\\n\", \"\\n\"), expected);\n+        assertEquals(transform(toXmlDocument(source), true).replaceAll(\"\\r\\n\", \"\\n\"),\n+                expected);\n@@ -226,1 +325,2 @@\n-    public void testTransformToHTML(String sourceFile, String expectedFile) throws Exception {\n+    public void testTransformToHTML(String sourceFile, String expectedFile)\n+            throws Exception {\n@@ -231,2 +331,4 @@\n-        getTransformer(true, false).transform(new StreamSource(new StringReader(source)), new StreamResult(writer));\n-        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(writer.toString())), \"The actual is: \" + writer.toString());\n+        getTransformer(true, false).transform(\n+                new StreamSource(new StringReader(source)), new StreamResult(writer));\n+        assertTrue(toXmlDocument(source).isEqualNode(toXmlDocument(writer.toString())),\n+                \"The actual is: \" + writer.toString());\n@@ -236,1 +338,2 @@\n-        getTransformer(true, true).transform(new StreamSource(new StringReader(source)), new StreamResult(writer));\n+        getTransformer(true, true).transform(\n+                new StreamSource(new StringReader(source)), new StreamResult(writer));\n@@ -251,1 +354,2 @@\n-        Transformer transformer = factory.newTemplates(new StreamSource(new StringReader(read(xsl)))).newTransformer();\n+        Transformer transformer = factory.newTemplates(\n+                new StreamSource(new StringReader(read(xsl)))).newTransformer();\n@@ -257,1 +361,2 @@\n-        transformer.transform(new StreamSource(new StringReader(read(xml))), new StreamResult(writer));\n+        transformer.transform(new StreamSource(new StringReader(read(xml))),\n+                new StreamResult(writer));\n@@ -265,1 +370,2 @@\n-                + \"<hello>before child element<child><children\/><children\/><\/child>after child element<\/hello>\";\n+                + \"<hello>before child element<child><children\/><children\/><\/child>\"\n+                + \"after child element<\/hello>\";\n@@ -276,1 +382,2 @@\n-        final String XML_DOCUMENT_PRETTY_PRINT = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-16\\\"?><hello>\\n\" +\n+        final String XML_DOCUMENT_PRETTY_PRINT =\n+                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-16\\\"?><hello>\\n\" +\n@@ -313,1 +420,2 @@\n-        System.out.println(\"Serializer is: \" + lsSerializer.getClass().getName() + \" \" + lsSerializer);\n+        System.out.println(\"Serializer is: \" + lsSerializer.getClass().getName()\n+                + \" \" + lsSerializer);\n@@ -319,5 +427,9 @@\n-        Boolean defaultFormatPrettyPrint = (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT);\n-        Boolean canSetFormatPrettyPrintFalse = (Boolean) domConfiguration.canSetParameter(DOM_FORMAT_PRETTY_PRINT, Boolean.FALSE);\n-        Boolean canSetFormatPrettyPrintTrue = (Boolean) domConfiguration.canSetParameter(DOM_FORMAT_PRETTY_PRINT, Boolean.TRUE);\n-\n-        System.out.println(DOM_FORMAT_PRETTY_PRINT + \" default\/can set false\/can set true = \" + defaultFormatPrettyPrint + \"\/\"\n+        Boolean defaultFormatPrettyPrint =\n+                (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT);\n+        Boolean canSetFormatPrettyPrintFalse =\n+                (Boolean) domConfiguration.canSetParameter(DOM_FORMAT_PRETTY_PRINT, Boolean.FALSE);\n+        Boolean canSetFormatPrettyPrintTrue =\n+                (Boolean) domConfiguration.canSetParameter(DOM_FORMAT_PRETTY_PRINT, Boolean.TRUE);\n+\n+        System.out.println(DOM_FORMAT_PRETTY_PRINT + \" default\/can set false\/can set true = \"\n+                + defaultFormatPrettyPrint + \"\/\"\n@@ -327,1 +439,2 @@\n-        assertEquals(defaultFormatPrettyPrint, Boolean.FALSE, \"Default value of \" + DOM_FORMAT_PRETTY_PRINT + \" should be \" + Boolean.FALSE);\n+        assertEquals(defaultFormatPrettyPrint, Boolean.FALSE,\n+                \"Default value of \" + DOM_FORMAT_PRETTY_PRINT + \" should be \" + Boolean.FALSE);\n@@ -329,1 +442,2 @@\n-        assertEquals(canSetFormatPrettyPrintFalse, Boolean.TRUE, \"Can set \" + DOM_FORMAT_PRETTY_PRINT + \" to \" + Boolean.FALSE + \" should be \"\n+        assertEquals(canSetFormatPrettyPrintFalse, Boolean.TRUE,\n+                \"Can set \" + DOM_FORMAT_PRETTY_PRINT + \" to \" + Boolean.FALSE + \" should be \"\n@@ -332,1 +446,2 @@\n-        assertEquals(canSetFormatPrettyPrintTrue, Boolean.TRUE, \"Can set \" + DOM_FORMAT_PRETTY_PRINT + \" to \" + Boolean.TRUE + \" should be \"\n+        assertEquals(canSetFormatPrettyPrintTrue, Boolean.TRUE,\n+                \"Can set \" + DOM_FORMAT_PRETTY_PRINT + \" to \" + Boolean.TRUE + \" should be \"\n@@ -337,1 +452,2 @@\n-        System.out.println(\"(default) \" + DOM_FORMAT_PRETTY_PRINT + \"==\" + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n+        System.out.println(\"(default) \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+                + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n@@ -340,1 +456,2 @@\n-        assertEquals(prettyPrintDefault, XML_DOCUMENT_DEFAULT_PRINT, \"Invalid serialization with default value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+        assertEquals(prettyPrintDefault, XML_DOCUMENT_DEFAULT_PRINT,\n+                \"Invalid serialization with default value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n@@ -346,1 +463,2 @@\n-        System.out.println(\"(FALSE) \" + DOM_FORMAT_PRETTY_PRINT + \"==\" + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n+        System.out.println(\"(FALSE) \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+                + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n@@ -349,1 +467,2 @@\n-        assertEquals(prettyPrintFalse, XML_DOCUMENT_DEFAULT_PRINT, \"Invalid serialization with FALSE value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+        assertEquals(prettyPrintFalse, XML_DOCUMENT_DEFAULT_PRINT,\n+                \"Invalid serialization with FALSE value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n@@ -355,1 +474,2 @@\n-        System.out.println(\"(TRUE) \" + DOM_FORMAT_PRETTY_PRINT + \"==\" + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n+        System.out.println(\"(TRUE) \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+                + (Boolean) domConfiguration.getParameter(DOM_FORMAT_PRETTY_PRINT)\n@@ -358,1 +478,2 @@\n-        assertEquals(prettyPrintTrue, XML_DOCUMENT_PRETTY_PRINT, \"Invalid serialization with TRUE value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n+        assertEquals(prettyPrintTrue, XML_DOCUMENT_PRETTY_PRINT,\n+                \"Invalid serialization with TRUE value, \" + DOM_FORMAT_PRETTY_PRINT + \"==\"\n@@ -364,1 +485,2 @@\n-        DOMImplementationLS domImplementation = (DOMImplementationLS) registry.getDOMImplementation(\"LS\");\n+        DOMImplementationLS domImplementation =\n+                (DOMImplementationLS) registry.getDOMImplementation(\"LS\");\n@@ -467,1 +589,19 @@\n-    private static final String DOM_FORMAT_PRETTY_PRINT = \"format-pretty-print\";\n+    private Document getDocument() throws Exception {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = factory.newDocumentBuilder();\n+        Document document = builder.newDocument();\n+\n+        Element child = document.createElement(\"sometag\");\n+        document.appendChild(child);\n+        return document;\n+    }\n+\n+    private DOMImplementationLS getImpl() throws Exception {\n+        Document document = getDocument();\n+        return (DOMImplementationLS)document.getImplementation();\n+    }\n+\n+    private DOMConfiguration getConfig() throws Exception {\n+        LSSerializer ser = getImpl().createLSSerializer();\n+        return ser.getDomConfig();\n+    }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/PrettyPrintTest.java","additions":176,"deletions":36,"binary":false,"changes":212,"status":"modified"}]}