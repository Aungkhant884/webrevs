{"files":[{"patch":"@@ -2474,2 +2474,4 @@\n-  VMError::report_and_die(t, exception_code, addr, siginfo, context);\n-\n+  using ARA = VMError::AfterReportAction;\n+  VMError::report_and_maybe_die((UseOSErrorReporting ? ARA::Return : ARA::Die),\n+                                t, exception_code, addr, siginfo, context,\n+                                \"%s\", \"\");\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,2 +34,6 @@\n-  VMError::report_and_die(nullptr, exception_code, nullptr, exceptionInfo->ExceptionRecord,\n-                          exceptionInfo->ContextRecord);\n+  using ARA = VMError::AfterReportAction;\n+  VMError::report_and_maybe_die((UseOSErrorReporting ? ARA::Return : ARA::Die),\n+                                nullptr, exception_code, nullptr,\n+                                exceptionInfo->ExceptionRecord,\n+                                exceptionInfo->ContextRecord,\n+                                \"%s\", \"\");\n","filename":"src\/hotspot\/os\/windows\/vmError_windows.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -219,4 +219,0 @@\n-\n-  \/\/ The UseOSErrorReporting option in report_and_die() may allow a return\n-  \/\/ to here. If so then we'll have to figure out how to handle it.\n-  guarantee(false, \"report_and_die() should not return here\");\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+#include \"utilities\/breakpoint.hpp\"\n@@ -1361,1 +1362,28 @@\n-                             int lineno, size_t size)\n+                             int lineno, size_t size) {\n+  report_and_maybe_die_impl(AfterReportAction::Die,\n+                            id, message, detail_fmt, detail_args,\n+                            thread, pc, siginfo, context,\n+                            filename, lineno, size);\n+  \/\/ Shouldn't be able to get here.  Die immediately if we do.\n+  os::die();\n+}\n+\n+void VMError::report_and_maybe_die(AfterReportAction after_report_action,\n+                                   Thread* thread, unsigned int sig, address pc,\n+                                   void* siginfo, void* context,\n+                                   const char* detail_fmt, ...) {\n+  va_list detail_args;\n+  va_start(detail_args, detail_fmt);\n+  report_and_maybe_die_impl(after_report_action,\n+                            sig, nullptr, detail_fmt, detail_args, thread, pc,\n+                            siginfo, context, nullptr, 0, 0);\n+  va_end(detail_args);\n+}\n+\n+void VMError::report_and_maybe_die_impl(AfterReportAction after_report_action,\n+                                        int id, const char* message,\n+                                        const char* detail_fmt, va_list detail_args,\n+                                        Thread* thread, address pc,\n+                                        void* siginfo, void* context,\n+                                        const char* filename, int lineno,\n+                                        size_t size)\n@@ -1363,0 +1391,6 @@\n+  \/\/ Non-termination is only permitted when Windows-only UseOSErrorReporting\n+  \/\/ is enabled.\n+  assert(after_report_action == AfterReportAction::Die\n+         WINDOWS_ONLY( || UseOSErrorReporting),\n+         \"must terminate\");\n+\n@@ -1444,0 +1478,5 @@\n+  } else if ((after_report_action == AfterReportAction::Return) && log_done) {\n+    \/\/ Support for UseOSErrorReporting. We call this for each level of the\n+    \/\/ call stack while searching for the exception handler.  Only the first\n+    \/\/ level needs to be reported.\n+    return;\n@@ -1445,7 +1484,0 @@\n-#if defined(_WINDOWS)\n-    \/\/ If UseOSErrorReporting we call this for each level of the call stack\n-    \/\/ while searching for the exception handler.  Only the first level needs\n-    \/\/ to be reported.\n-    if (UseOSErrorReporting && log_done) return;\n-#endif\n-\n@@ -1681,1 +1713,11 @@\n-  if (WINDOWS_ONLY(!UseOSErrorReporting) NOT_WINDOWS(true)) {\n+  if (after_report_action == AfterReportAction::Return) {\n+    \/\/ Caller requested reporting without termination.\n+    return;\n+  } else if (after_report_action == AfterReportAction::Die) {\n+#ifdef _WINDOWS\n+    if (UseOSErrorReporting) {\n+      \/\/ Before terminating, first signal a breakpoint exception to give a\n+      \/\/ debugger or other OS tool a shot.\n+      BREAKPOINT;\n+    }\n+#endif\n@@ -1693,0 +1735,2 @@\n+  \/\/ We REALLY better not reach here.\n+  ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":53,"deletions":9,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -174,0 +174,24 @@\n+  \/\/ AfterReportAction and report_and_maybe_die support Windows-only\n+  \/\/ UseOSErrorReporting.\n+  enum class AfterReportAction { Return, Die };\n+\n+  \/\/ Error reporting function that is allowed to return to the caller\n+  \/\/ if so requested by the after_report_action.  Otherwise, die after\n+  \/\/ reporting the error.\n+  static void report_and_maybe_die(AfterReportAction after_report_action,\n+                                   Thread* thread, unsigned int sig, address pc,\n+                                   void* siginfo, void* context,\n+                                   const char* detail_fmt, ...) ATTRIBUTE_PRINTF(7, 8);\n+\n+private:\n+  \/\/ Shared implementation of report_and_die and report_and_maybe_die.\n+  static void report_and_maybe_die_impl(AfterReportAction after_report_action,\n+                                        int id, const char* message,\n+                                        const char* detail_fmt, va_list detail_args,\n+                                        Thread* thread, address pc, void* siginfo,\n+                                        void* context,\n+                                        const char* filename, int lineno,\n+                                        size_t size) ATTRIBUTE_PRINTF(4, 0);\n+\n+public:\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}