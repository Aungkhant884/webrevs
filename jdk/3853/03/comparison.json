{"files":[{"patch":"@@ -1230,2 +1230,6 @@\n-        synchronized(ch) {\n-            return ch.position(pos).read(bb);\n+        if (ch instanceof FileChannel fch) {\n+            return fch.read(bb, pos);\n+        } else {\n+            synchronized(ch) {\n+                return ch.position(pos).read(bb);\n+            }\n@@ -2119,1 +2123,1 @@\n-            eis = new EntryInputStream(e, ch);\n+            eis = new EntryInputStream(e);\n@@ -2176,2 +2180,0 @@\n-        private final SeekableByteChannel zfch; \/\/ local ref to zipfs's \"ch\". zipfs.ch might\n-                                                \/\/ point to a new channel after sync()\n@@ -2181,1 +2183,1 @@\n-        EntryInputStream(Entry e, SeekableByteChannel zfch)\n+        EntryInputStream(Entry e)\n@@ -2184,1 +2186,0 @@\n-            this.zfch = zfch;\n@@ -2209,2 +2210,0 @@\n-            \/\/ readFullyAt()\n-            long n;\n@@ -2214,3 +2213,1 @@\n-            synchronized(zfch) {\n-                n = zfch.position(pos).read(bb);\n-            }\n+            long n = readFullyAt(bb, pos);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.nio.zipfs;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Threads(Threads.MAX)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 3)\n+public class ZipFileSystemBenchmark {\n+    private static final String FILE_NAME = \"filename\";\n+    private FileSystemProvider jarFsProvider;\n+    private Path readPath;\n+    private FileSystem fileSystem;\n+    private Path zip;\n+\n+    @Setup(Level.Trial) public void setup() throws IOException {\n+        jarFsProvider = FileSystemProvider.installedProviders().stream().filter(x -> x.getScheme().equals(\"jar\")).findFirst().get();\n+        zip = Files.createTempFile(\"zipfs-benchmark\", \".jar\");\n+        createTestZip();\n+        fileSystem = jarFsProvider.newFileSystem(zip, Map.of());\n+        Path rootRead = fileSystem.getRootDirectories().iterator().next();\n+        readPath = rootRead.resolve(FILE_NAME);\n+    }\n+\n+    private void createTestZip() throws IOException {\n+        Files.delete(zip);\n+        FileSystem writableFileSystem = jarFsProvider.newFileSystem(zip, Map.of(\"create\", \"true\"));\n+        byte[] data = new byte[16 * 1024 * 1024];\n+        new Random(31).nextBytes(data);\n+        Path root = writableFileSystem.getRootDirectories().iterator().next();\n+        Files.write(root.resolve(FILE_NAME), data);\n+        writableFileSystem.close();\n+    }\n+\n+    @TearDown public void tearDown() throws IOException {\n+        if (fileSystem != null) {\n+            fileSystem.close();\n+        }\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/\/ Performance should remain constant when varying the number of threads up to the\n+    \/\/ number of physical cores if the NIO implementation on the platform supports\n+    \/\/ concurrent reads to a single FileChannel instance. At the time of writing, NIO on Windows\n+    \/\/ serializes access.\n+    @Benchmark public void read(Blackhole bh) throws IOException {\n+        InputStream inputStream = Files.newInputStream(readPath);\n+        byte[] buffer = new byte[8192];\n+        while (inputStream.read(buffer) != -1) {\n+            bh.consume(buffer);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/nio\/zipfs\/ZipFileSystemBenchmark.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}