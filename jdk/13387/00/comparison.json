{"files":[{"patch":"@@ -49,1 +49,1 @@\n-    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+    private static final int DEFAULT_BUFFER_SIZE = 16384;\n@@ -268,0 +268,32 @@\n+        \/\/ ReableByteChannel -> WritableByteChannel\n+        if (out instanceof ChannelOutputStream cos) {\n+            ReadableByteChannel rbc = ch;\n+            WritableByteChannel wbc = cos.channel();\n+\n+            if (rbc instanceof SelectableChannel rsc) {\n+                synchronized (rsc.blockingLock()) {\n+                    if (!rsc.isBlocking())\n+                        throw new IllegalBlockingModeException();\n+                    if (wbc instanceof SelectableChannel wsc) {\n+                        synchronized (wsc.blockingLock()) {\n+                            if (!wsc.isBlocking())\n+                                throw new IllegalBlockingModeException();\n+                            return transfer(rbc, wbc);\n+                        }\n+                    }\n+\n+                    return transfer(rbc, wbc);\n+                }\n+            }\n+\n+            if (wbc instanceof SelectableChannel wsc) {\n+                synchronized (wsc.blockingLock()) {\n+                    if (!wsc.isBlocking())\n+                        throw new IllegalBlockingModeException();\n+                    return transfer(rbc, wbc);\n+                }\n+            }\n+\n+            return transfer(rbc, wbc);\n+        }\n+\n@@ -272,1 +304,1 @@\n-     * Transfers all bytes from a channel's file to a target writeable byte channel.\n+     * Transfers all bytes from a channel's file to a target writable byte channel.\n@@ -310,0 +342,22 @@\n+    \/**\n+     * Transfers all bytes from a readable byte channel to a writable byte channel.\n+     * If the readable or writable byte channel is a selectable channel then it must be in\n+     * blocking mode.\n+     *\/\n+    private static long transfer(ReadableByteChannel src, WritableByteChannel dst) throws IOException {\n+        long bytesWritten = 0L;\n+        ByteBuffer bb = Util.getTemporaryDirectBuffer(DEFAULT_BUFFER_SIZE);\n+        try {\n+            for (int bytesRead = src.read(bb); bytesRead > -1; bytesRead = src.read(bb)) {\n+                bb.flip();\n+                while (bb.hasRemaining())\n+                    dst.write(bb);\n+                bb.clear();\n+                bytesWritten += bytesRead;\n+            }\n+            return bytesWritten;\n+        } finally {\n+            Util.releaseTemporaryDirectBuffer(bb);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -76,0 +76,4 @@\n+            \/\/ tests ReadableFileChannel transfer to WritableByteChannelOutput\n+            \/\/ optimized case\n+            {readableByteChannelInput(), writableByteChannelOutput()},\n+\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}