{"files":[{"patch":"@@ -230,0 +230,3 @@\n+                if (!URIPathSegment.isSupported(segment)) {\n+                    return null;  \/\/ stop resolution, null results in 404 response\n+                }\n@@ -232,1 +235,1 @@\n-                    return null;  \/\/ stop resolution, null results in 404 response\n+                    return null;  \/\/ stop resolution\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.net.httpserver.simpleserver;\n+\n+\/**\n+ * A class that represents a URI path segment.\n+ *\/\n+final class URIPathSegment {\n+\n+    private URIPathSegment() { throw new AssertionError(); }\n+\n+    \/**\n+     * Checks if the segment of a URI path is supported.\n+     *\n+     * @param segment the segment string\n+     * @return true\n+     *\/\n+    static boolean isSupported(String segment) {\n+        return true;\n+    }\n+}\n","filename":"src\/jdk.httpserver\/unix\/classes\/sun\/net\/httpserver\/simpleserver\/URIPathSegment.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.net.httpserver.simpleserver;\n+\n+\/**\n+ * A class that represents a URI path segment.\n+ *\/\n+final class URIPathSegment {\n+\n+    private URIPathSegment() { throw new AssertionError(); }\n+\n+    \/**\n+     * Checks if the segment of a URI path is supported. For example,\n+     * \"C:\" is supported as a drive on Windows only.\n+     *\n+     * @param segment the segment string\n+     * @return true if the segment is supported\n+     *\/\n+    static boolean isSupported(String segment) {\n+        \/\/ apply same logic as WindowsPathParser\n+        if (segment.length() >= 2 && isLetter(segment.charAt(0)) && segment.charAt(1) == ':') {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isLetter(char c) {\n+        return ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'));\n+    }\n+}\n","filename":"src\/jdk.httpserver\/windows\/classes\/sun\/net\/httpserver\/simpleserver\/URIPathSegment.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -140,1 +140,1 @@\n-                var req4 = HttpRequest.newBuilder(uri(server, \"\/foo\/file:\" + TEST_DIR.getParent())).build();\n+                var req4 = HttpRequest.newBuilder(uri(server, \"\/foo\/bar\/baz\/c:.\/\/\")).build();\n@@ -144,1 +144,1 @@\n-                var req5 = HttpRequest.newBuilder(uri(server, \"\/foo\/bar\/\\\\..\\\\..\/\")).build();\n+                var req5 = HttpRequest.newBuilder(uri(server, \"\/foo\/bar\/baz\/c:..\/\/\")).build();\n@@ -148,1 +148,1 @@\n-                var req6 = HttpRequest.newBuilder(uri(server, \"\/foo\")).build();\n+                var req6 = HttpRequest.newBuilder(uri(server, \"\/foo\/file:\" + TEST_DIR.getParent())).build();\n@@ -150,3 +150,11 @@\n-                assertEquals(res6.statusCode(), 301);  \/\/ redirect\n-                assertEquals(res6.headers().firstValue(\"content-length\").get(), \"0\");\n-                assertEquals(res6.headers().firstValue(\"location\").get(), \"\/foo\/\");\n+                assertEquals(res6.statusCode(), 404);  \/\/ not found\n+\n+                var req7 = HttpRequest.newBuilder(uri(server, \"\/foo\/bar\/\\\\..\\\\..\/\")).build();\n+                var res7 = client.send(req7, BodyHandlers.ofString());\n+                assertEquals(res7.statusCode(), 404);  \/\/ not found\n+\n+                var req8 = HttpRequest.newBuilder(uri(server, \"\/foo\")).build();\n+                var res8 = client.send(req8, BodyHandlers.ofString());\n+                assertEquals(res8.statusCode(), 301);  \/\/ redirect\n+                assertEquals(res8.headers().firstValue(\"content-length\").get(), \"0\");\n+                assertEquals(res8.headers().firstValue(\"location\").get(), \"\/foo\/\");\n@@ -253,0 +261,23 @@\n+        {\n+            \/\/ Test that a request path segment that is a Windows root drive\n+            \/\/ does not circumvent access restrictions.\n+            \/\/\n+            \/\/ For example, given the test directory tree:\n+            \/\/\n+            \/\/      |-- TEST_DIR\n+            \/\/          |-- foo\n+            \/\/              |-- bar  ----->>> if hidden, itself and any of its subdirectories are not accessible\n+            \/\/                  |-- baz\n+            \/\/                      |-- file.txt\n+            \/\/      ...\n+            var handler = SimpleFileServer.createFileHandler(TEST_DIR);\n+            var server = HttpServer.create(LOOPBACK_ADDR, 10, \"\/\", handler, OUTPUT_FILTER);\n+            server.start();\n+            try {\n+                var req1 = HttpRequest.newBuilder(uri(server, \"\/foo\/bar\/c:\/baz\/\")).build();\n+                var res1 = client.send(req1, BodyHandlers.ofString());\n+                assertEquals(res1.statusCode(), 404);  \/\/ not found\n+            } finally {\n+                server.stop(0);\n+            }\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/MapToPathTest.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"}]}