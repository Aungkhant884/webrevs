{"files":[{"patch":"@@ -232,0 +232,1 @@\n+        java.management,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.management.internal.mBeans;\n+\n+\/**\n+ * This is a special bean , only available on Linux systems\n+ *\/\n+public interface ContainerInfoMXBean {\n+    \/**\n+     * Returns the interface responsible for providing the\n+     * platform metrics.\n+     *\n+     * @implNote\n+     * Metrics are currently only supported Linux.\n+     * The provider for Linux is cgroups (version 1 or 2).\n+     *\n+     * @return The name of the provider.\n+     *\n+     *\/\n+    String getProvider();\n+\n+    \/**\n+     * Returns the length of the scheduling period, in\n+     * microseconds, for processes within the Isolation Group.\n+     *\n+     * @return time in microseconds, -1 if the metric is not available or\n+     *         -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getCpuPeriod();\n+\n+    \/**\n+     * Returns the total available run-time allowed, in microseconds,\n+     * during each scheduling period for all tasks in the Isolation\n+     * Group.\n+     *\n+     * @return time in microseconds, -1 if the quota is unlimited or\n+     *         -2 if not supported.\n+     *\n+     *\/\n+    long getCpuQuota();\n+\n+    \/**\n+     * Returns the relative weighting of processes with the Isolation\n+     * Group used for prioritizing the scheduling of processes across\n+     * all Isolation Groups running on a host.\n+     *\n+     * @implNote\n+     * Popular container orchestration systems have standardized shares\n+     * to be multiples of 1024, where 1024 is interpreted as 1 CPU share\n+     * of execution.  Users can distribute CPU resources to multiple\n+     * Isolation Groups by specifying the CPU share weighting needed by\n+     * each process.  To request 2 CPUS worth of execution time, CPU shares\n+     * would be set to 2048.\n+     *\n+     * @return shares value, -1 if the metric is not available or\n+     *         -2 if cpu shares are not supported.\n+     *\n+     *\/\n+    long getCpuShares();\n+\n+    \/**\n+     * Returns the number of effective processors that this Isolation\n+     * group has available to it.  This effective processor count is\n+     * computed based on the number of dedicated CPUs, CPU shares and\n+     * CPU quotas in effect for this isolation group.\n+     *\n+     * This method returns the same value as\n+     * {@link java.lang.Runtime#availableProcessors()}.\n+     *\n+     * @return The number of effective CPUs.\n+     *\n+     *\/\n+    long getEffectiveCpuCount();\n+\n+    \/**\n+     * Returns the hint to the operating system that allows groups\n+     * to specify the minimum amount of physical memory that they need to\n+     * achieve reasonable performance in low memory systems.  This allows\n+     * host systems to provide greater sharing of memory.\n+     *\n+     * @return The minimum amount of physical memory, in bytes, that the\n+     *         operating system will try to maintain under low memory\n+     *         conditions.  If this metric is not available, -1 will be\n+     *         returned. Returns -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getMemorySoftLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory, in bytes, that\n+     * can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory and swap space,\n+     * in bytes, that can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit set or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryAndSwapLimit();\n+}\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/internal\/mBeans\/ContainerInfoMXBean.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -52,0 +52,1 @@\n+    exports java.lang.management.internal.mBeans;\n","filename":"src\/java.management\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.management;\n+\n+import jdk.internal.platform.Metrics;\n+\n+import java.lang.management.internal.mBeans.ContainerInfoMXBean;\n+\n+public class ContainerInfo implements ContainerInfoMXBean {\n+    final Metrics containerMetrics ;\n+\n+    public ContainerInfo(Metrics containerMetrics) {\n+        this.containerMetrics = containerMetrics;\n+    }\n+\n+\n+    @Override\n+    public String getProvider() {\n+        return containerMetrics.getProvider();\n+    }\n+\n+    @Override\n+    public long getCpuPeriod() {\n+        return containerMetrics.getCpuPeriod();\n+    }\n+\n+    @Override\n+    public long getCpuQuota() {\n+        return containerMetrics.getCpuQuota();\n+    }\n+\n+    @Override\n+    public long getCpuShares() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getEffectiveCpuCount() {\n+        return containerMetrics.getEffectiveCpuCount();\n+    }\n+\n+    @Override\n+    public long getMemorySoftLimit() {\n+        return containerMetrics.getMemorySoftLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryLimit() {\n+        return containerMetrics.getMemoryLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryAndSwapLimit() {\n+        return containerMetrics.getMemoryAndSwapLimit();\n+    }\n+\n+}\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ContainerInfo.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -45,0 +45,2 @@\n+import jdk.internal.platform.Metrics;\n+import jdk.internal.platform.SystemMetrics;\n@@ -63,0 +65,4 @@\n+\n+    private static final String CONTAINER_MBEAN_NAME =\n+            \"java.lang:type=Container\";\n+\n@@ -69,0 +75,5 @@\n+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n+        ContainerInfo containerInfoMBean = getContainerInfoMBean();\n+        if (containerInfoMBean != null) {\n+            addMBean(mbs, containerInfoMBean, CONTAINER_MBEAN_NAME);\n+        }\n@@ -408,0 +419,11 @@\n+    private static ContainerInfo containerInfoMBean = null;\n+\n+    private static synchronized ContainerInfo getContainerInfoMBean() {\n+        if (containerInfoMBean == null) {\n+            Metrics containerMetrics = SystemMetrics.instance();\n+            if (containerMetrics != null) {\n+                containerInfoMBean = new ContainerInfo(containerMetrics);\n+            }\n+        }\n+        return containerInfoMBean;\n+    }\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}