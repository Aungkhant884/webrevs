{"files":[{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.management;\n+\n+\/**\n+ * This is a special bean , only available on Linux systems\n+ *\/\n+public interface ContainerInfoMXBean {\n+    \/**\n+     * Returns the interface responsible for providing the\n+     * platform metrics.\n+     *\n+     * @implNote\n+     * Metrics are currently only supported Linux.\n+     * The provider for Linux is cgroups (version 1 or 2).\n+     *\n+     * @return The name of the provider.\n+     *\n+     *\/\n+    String getProvider();\n+\n+    \/**\n+     * Returns the length of the scheduling period, in\n+     * microseconds, for processes within the Isolation Group.\n+     *\n+     * @return time in microseconds, -1 if the metric is not available or\n+     *         -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getCpuPeriod();\n+\n+    \/**\n+     * Returns the total available run-time allowed, in microseconds,\n+     * during each scheduling period for all tasks in the Isolation\n+     * Group.\n+     *\n+     * @return time in microseconds, -1 if the quota is unlimited or\n+     *         -2 if not supported.\n+     *\n+     *\/\n+    long getCpuQuota();\n+\n+    \/**\n+     * Returns the relative weighting of processes with the Isolation\n+     * Group used for prioritizing the scheduling of processes across\n+     * all Isolation Groups running on a host.\n+     *\n+     * @implNote\n+     * Popular container orchestration systems have standardized shares\n+     * to be multiples of 1024, where 1024 is interpreted as 1 CPU share\n+     * of execution.  Users can distribute CPU resources to multiple\n+     * Isolation Groups by specifying the CPU share weighting needed by\n+     * each process.  To request 2 CPUS worth of execution time, CPU shares\n+     * would be set to 2048.\n+     *\n+     * @return shares value, -1 if the metric is not available or\n+     *         -2 if cpu shares are not supported.\n+     *\n+     *\/\n+    long getCpuShares();\n+\n+    \/**\n+     * Returns the number of effective processors that this Isolation\n+     * group has available to it.  This effective processor count is\n+     * computed based on the number of dedicated CPUs, CPU shares and\n+     * CPU quotas in effect for this isolation group.\n+     *\n+     * This method returns the same value as\n+     * {@link java.lang.Runtime#availableProcessors()}.\n+     *\n+     * @return The number of effective CPUs.\n+     *\n+     *\/\n+    long getEffectiveCpuCount();\n+\n+    \/**\n+     * Returns the hint to the operating system that allows groups\n+     * to specify the minimum amount of physical memory that they need to\n+     * achieve reasonable performance in low memory systems.  This allows\n+     * host systems to provide greater sharing of memory.\n+     *\n+     * @return The minimum amount of physical memory, in bytes, that the\n+     *         operating system will try to maintain under low memory\n+     *         conditions.  If this metric is not available, -1 will be\n+     *         returned. Returns -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getMemorySoftLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory, in bytes, that\n+     * can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory and swap space,\n+     * in bytes, that can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit set or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryAndSwapLimit();\n+}\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ContainerInfoMXBean.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.management;\n-\n-\/**\n- * The management interface for the container system of\n- * the Java virtual machine.\n- *\n- * <p> A Java virtual machine has a single instance of the implementation\n- * class of this interface.  This instance implementing this interface is\n- * an <a href=\"ManagementFactory.html#MXBean\">MXBean<\/a>\n- * that can be obtained by calling\n- * the {@link ManagementFactory#getRuntimeMXBean} method or\n- * from the {@link ManagementFactory#getPlatformMBeanServer\n- * platform MBeanServer} method.\n- *\n- * <p>The {@code ObjectName} for uniquely identifying the MXBean for\n- * the runtime system within an MBeanServer is:\n- * <blockquote>\n- *    {@link ManagementFactory#CONTAINER_MXBEAN_NAME\n- *           java.lang:type=Container}\n- * <\/blockquote>\n- *\n- * It can be obtained by calling the\n- * {@link PlatformManagedObject#getObjectName} method.\n- *\n- * <p> This interface defines several convenient methods for accessing\n- * system properties about the Java virtual machine.\n- *\n- * @see ManagementFactory#getPlatformMXBeans(Class)\n- * @see <a href=\"..\/..\/..\/javax\/management\/package-summary.html\">\n- *      JMX Specification.<\/a>\n- * @see <a href=\"package-summary.html#examples\">\n- *      Ways to Access MXBeans<\/a>\n- *\n- * @author  pxie\n- * @since   20\n- *\/\n-public interface ContainerMXBean extends PlatformManagedObject {\n-    \/**\n-     * Returns the interface responsible for providing the\n-     * platform metrics.\n-     *\n-     * @implNote\n-     * Metrics are currently only supported Linux.\n-     * The provider for Linux is cgroups (version 1 or 2).\n-     *\n-     * @return The name of the provider.\n-     *\n-     *\/\n-    String getProvider();\n-\n-    \/**\n-     * Returns the length of the scheduling period, in\n-     * microseconds, for processes within the Isolation Group.\n-     *\n-     * @return time in microseconds, -1 if the metric is not available or\n-     *         -2 if the metric is not supported.\n-     *\n-     *\/\n-    long getCpuPeriod();\n-\n-    \/**\n-     * Returns the total available run-time allowed, in microseconds,\n-     * during each scheduling period for all tasks in the Isolation\n-     * Group.\n-     *\n-     * @return time in microseconds, -1 if the quota is unlimited or\n-     *         -2 if not supported.\n-     *\n-     *\/\n-    long getCpuQuota();\n-\n-    \/**\n-     * Returns the relative weighting of processes with the Isolation\n-     * Group used for prioritizing the scheduling of processes across\n-     * all Isolation Groups running on a host.\n-     *\n-     * @implNote\n-     * Popular container orchestration systems have standardized shares\n-     * to be multiples of 1024, where 1024 is interpreted as 1 CPU share\n-     * of execution.  Users can distribute CPU resources to multiple\n-     * Isolation Groups by specifying the CPU share weighting needed by\n-     * each process.  To request 2 CPUS worth of execution time, CPU shares\n-     * would be set to 2048.\n-     *\n-     * @return shares value, -1 if the metric is not available or\n-     *         -2 if cpu shares are not supported.\n-     *\n-     *\/\n-    long getCpuShares();\n-\n-    \/**\n-     * Returns the number of effective processors that this Isolation\n-     * group has available to it.  This effective processor count is\n-     * computed based on the number of dedicated CPUs, CPU shares and\n-     * CPU quotas in effect for this isolation group.\n-     *\n-     * This method returns the same value as\n-     * {@link java.lang.Runtime#availableProcessors()}.\n-     *\n-     * @return The number of effective CPUs.\n-     *\n-     *\/\n-    long getEffectiveCpuCount();\n-\n-    \/**\n-     * Returns the hint to the operating system that allows groups\n-     * to specify the minimum amount of physical memory that they need to\n-     * achieve reasonable performance in low memory systems.  This allows\n-     * host systems to provide greater sharing of memory.\n-     *\n-     * @return The minimum amount of physical memory, in bytes, that the\n-     *         operating system will try to maintain under low memory\n-     *         conditions.  If this metric is not available, -1 will be\n-     *         returned. Returns -2 if the metric is not supported.\n-     *\n-     *\/\n-    long getMemorySoftLimit();\n-\n-    \/**\n-     * Returns the maximum amount of physical memory, in bytes, that\n-     * can be allocated in the Isolation Group.\n-     *\n-     * @return The maximum amount of memory in bytes or -1 if\n-     *         there is no limit or -2 if this metric is not supported.\n-     *\n-     *\/\n-    long getMemoryLimit();\n-\n-    \/**\n-     * Returns the maximum amount of physical memory and swap space,\n-     * in bytes, that can be allocated in the Isolation Group.\n-     *\n-     * @return The maximum amount of memory in bytes or -1 if\n-     *         there is no limit set or -2 if this metric is not supported.\n-     *\n-     *\/\n-    long getMemoryAndSwapLimit();\n-}\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ContainerMXBean.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -455,30 +455,0 @@\n-\n-\n-        if (ManagementFactoryHelper.isContainerAvailable()) {\n-            initMBeanList.add(new PlatformComponent<ContainerMXBean>() {\n-                private final Set<String> containerMXBeanInterfaceNames\n-                        = Collections.singleton(\"java.lang.management.ContainerMXBean\");\n-\n-                @Override\n-                public Set<Class<? extends ContainerMXBean>> mbeanInterfaces() {\n-                    return Collections.singleton(ContainerMXBean.class);\n-                }\n-\n-                @Override\n-                public Set<String> mbeanInterfaceNames() {\n-                    return containerMXBeanInterfaceNames;\n-                }\n-\n-                @Override\n-                public String getObjectNamePattern() {\n-                    return ManagementFactory.CONTAINER_MXBEAN_NAME;\n-                }\n-\n-                @Override\n-                public Map<String, ContainerMXBean> nameToMBeanMap() {\n-                    return Collections.singletonMap(\n-                            ManagementFactory.CONTAINER_MXBEAN_NAME,\n-                            ManagementFactoryHelper.getContainerMXBean());\n-                }\n-            });\n-        }\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/DefaultPlatformMBeanProvider.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -58,0 +58,4 @@\n+\n+import jdk.internal.platform.Metrics;\n+import jdk.internal.platform.SystemMetrics;\n+import sun.management.ContainerInfo;\n@@ -327,6 +331,0 @@\n-    \/**\n-     * String representation of the\n-     * {@code ObjectName} for the {@link ContainerMXBean}.\n-     *\/\n-    public static final String CONTAINER_MXBEAN_NAME =\n-            \"java.lang:type=Container\";\n@@ -1025,0 +1023,16 @@\n+    private static class ReadOnlyExtensionMBeanInit {\n+       public static void init() {\n+            Metrics containerMetrics = SystemMetrics.instance();\n+            if (containerMetrics != null) {\n+                MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n+                ContainerInfoMXBean mbean = new ContainerInfo(containerMetrics);\n+                try {\n+                    ObjectName name = new ObjectName(\"java.lang:type=Container\");\n+                    mbs.registerMBean(mbean, name);\n+                } catch (Exception e) {\n+                }\n+            }\n+\n+        }\n+    }\n+\n@@ -1027,0 +1041,1 @@\n+        ReadOnlyExtensionMBeanInit.init();\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.management;\n-\n-import jdk.internal.platform.Container;\n-import jdk.internal.platform.Metrics;\n-\n-import javax.management.ObjectName;\n-import java.lang.management.ContainerMXBean;\n-import java.lang.management.ManagementFactory;\n-\n-public class ContainerImpl implements ContainerMXBean {\n-    final Metrics containerMetrics = Container.metrics();\n-\n-    @Override\n-    public String getProvider() {\n-        return containerMetrics.getProvider();\n-    }\n-\n-    @Override\n-    public long getCpuPeriod() {\n-        return containerMetrics.getCpuPeriod();\n-    }\n-\n-    @Override\n-    public long getCpuQuota() {\n-        return containerMetrics.getCpuQuota();\n-    }\n-\n-    @Override\n-    public long getCpuShares() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public long getEffectiveCpuCount() {\n-        return containerMetrics.getEffectiveCpuCount();\n-    }\n-\n-    @Override\n-    public long getMemorySoftLimit() {\n-        return containerMetrics.getMemorySoftLimit();\n-    }\n-\n-    @Override\n-    public long getMemoryLimit() {\n-        return containerMetrics.getMemoryLimit();\n-    }\n-\n-    @Override\n-    public long getMemoryAndSwapLimit() {\n-        return containerMetrics.getMemoryAndSwapLimit();\n-    }\n-\n-    @Override\n-    public ObjectName getObjectName() {\n-        return Util.newObjectName(ManagementFactory.CONTAINER_MXBEAN_NAME);\n-    }\n-}\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ContainerImpl.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.management;\n+\n+import jdk.internal.platform.Metrics;\n+\n+import java.lang.management.ContainerInfoMXBean;\n+\n+public class ContainerInfo implements ContainerInfoMXBean {\n+    final Metrics containerMetrics ;\n+\n+    public ContainerInfo(Metrics containerMetrics) {\n+        this.containerMetrics = containerMetrics;\n+    }\n+\n+\n+    @Override\n+    public String getProvider() {\n+        return containerMetrics.getProvider();\n+    }\n+\n+    @Override\n+    public long getCpuPeriod() {\n+        return containerMetrics.getCpuPeriod();\n+    }\n+\n+    @Override\n+    public long getCpuQuota() {\n+        return containerMetrics.getCpuQuota();\n+    }\n+\n+    @Override\n+    public long getCpuShares() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getEffectiveCpuCount() {\n+        return containerMetrics.getEffectiveCpuCount();\n+    }\n+\n+    @Override\n+    public long getMemorySoftLimit() {\n+        return containerMetrics.getMemorySoftLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryLimit() {\n+        return containerMetrics.getMemoryLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryAndSwapLimit() {\n+        return containerMetrics.getMemoryAndSwapLimit();\n+    }\n+\n+}\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ContainerInfo.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -45,1 +45,0 @@\n-import jdk.internal.platform.Container;\n@@ -87,1 +86,0 @@\n-    private static ContainerImpl containerMBean = null;\n@@ -168,6 +166,0 @@\n-    public static synchronized ContainerMXBean getContainerMXBean() {\n-        if (containerMBean == null) {\n-            containerMBean = new ContainerImpl();\n-        }\n-        return containerMBean;\n-    }\n@@ -179,3 +171,0 @@\n-    public static boolean isContainerAvailable() {\n-        return Container.metrics() != null;\n-    }\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}