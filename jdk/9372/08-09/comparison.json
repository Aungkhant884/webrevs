{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import java.lang.management.PlatformManagedObject;\n+\n@@ -29,1 +31,1 @@\n-public interface ContainerInfoMXBean {\n+public interface ContainerInfoMXBean  extends PlatformManagedObject {\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/ContainerInfoMXBean.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.management.internal;\n-\n-import jdk.internal.platform.Metrics;\n-\n-import com.sun.management.ContainerInfoMXBean;\n-\n-public class ContainerInfo implements ContainerInfoMXBean {\n-    final Metrics containerMetrics ;\n-\n-    public ContainerInfo(Metrics containerMetrics) {\n-        this.containerMetrics = containerMetrics;\n-    }\n-\n-\n-    @Override\n-    public String getProvider() {\n-        return containerMetrics.getProvider();\n-    }\n-\n-    @Override\n-    public long getCpuPeriod() {\n-        return containerMetrics.getCpuPeriod();\n-    }\n-\n-    @Override\n-    public long getCpuQuota() {\n-        return containerMetrics.getCpuQuota();\n-    }\n-\n-    @Override\n-    public long getCpuShares() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public long getEffectiveCpuCount() {\n-        return containerMetrics.getEffectiveCpuCount();\n-    }\n-\n-    @Override\n-    public long getMemorySoftLimit() {\n-        return containerMetrics.getMemorySoftLimit();\n-    }\n-\n-    @Override\n-    public long getMemoryLimit() {\n-        return containerMetrics.getMemoryLimit();\n-    }\n-\n-    @Override\n-    public long getMemoryAndSwapLimit() {\n-        return containerMetrics.getMemoryAndSwapLimit();\n-    }\n-\n-}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/ContainerInfo.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.management.internal;\n+\n+import jdk.internal.platform.Metrics;\n+\n+import com.sun.management.ContainerInfoMXBean;\n+\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+public class ContainerInfoImpl implements ContainerInfoMXBean {\n+    final Metrics containerMetrics ;\n+\n+    public ContainerInfoImpl(Metrics containerMetrics) {\n+        this.containerMetrics = containerMetrics;\n+    }\n+\n+\n+    @Override\n+    public String getProvider() {\n+        return containerMetrics.getProvider();\n+    }\n+\n+    @Override\n+    public long getCpuPeriod() {\n+        return containerMetrics.getCpuPeriod();\n+    }\n+\n+    @Override\n+    public long getCpuQuota() {\n+        return containerMetrics.getCpuQuota();\n+    }\n+\n+    @Override\n+    public long getCpuShares() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getEffectiveCpuCount() {\n+        return containerMetrics.getEffectiveCpuCount();\n+    }\n+\n+    @Override\n+    public long getMemorySoftLimit() {\n+        return containerMetrics.getMemorySoftLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryLimit() {\n+        return containerMetrics.getMemoryLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryAndSwapLimit() {\n+        return containerMetrics.getMemoryAndSwapLimit();\n+    }\n+\n+    @Override\n+    public ObjectName getObjectName() {\n+        try {\n+            return new ObjectName(\"java.lang:type=Container\");\n+        } catch (MalformedObjectNameException mne) {\n+            throw new Error(\"Can't happen\", mne);\n+        }\n+    }\n+}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/ContainerInfoImpl.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.management.ContainerInfoMXBean;\n@@ -30,0 +31,1 @@\n+\n@@ -48,1 +50,0 @@\n-import sun.management.Util;\n@@ -61,1 +62,1 @@\n-    private static ContainerInfo containerInfoMBean = null;\n+    private static ContainerInfoMXBean containerInfoMBean = null;\n@@ -68,7 +69,0 @@\n-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-        ContainerInfo containerInfoMBean = getContainerInfoMBean();\n-        if (containerInfoMBean != null) {\n-            try {\n-                mbs.registerMBean(containerInfoMBean, new ObjectName(CONTAINER_MBEAN_NAME));\n-            } catch (InstanceAlreadyExistsException|MBeanRegistrationException|NotCompliantMBeanException|MalformedObjectNameException e) {}\n-        }\n@@ -281,0 +275,27 @@\n+        initMBeanList.add(new PlatformComponent<com.sun.management.ContainerInfoMXBean>() {\n+            private final Set<String> containerMXBeanInterfaceNames =\n+                    Collections.singleton(\"com.sun.management.ContainerInfoMXBean\");\n+\n+            @Override\n+            public Set<Class<? extends com.sun.management.ContainerInfoMXBean>> mbeanInterfaces() {\n+                return Collections.singleton(com.sun.management.ContainerInfoMXBean.class);\n+            }\n+\n+            @Override\n+            public Set<String> mbeanInterfaceNames() {\n+                return containerMXBeanInterfaceNames;\n+            }\n+\n+            @Override\n+            public String getObjectNamePattern() {\n+                return \"java.lang:type=Container\";\n+            }\n+\n+            @Override\n+            public Map<String, com.sun.management.ContainerInfoMXBean> nameToMBeanMap() {\n+                return Collections.<String, com.sun.management.ContainerInfoMXBean>singletonMap(\n+                        \"java.lang:type=Container\",\n+                        getContainerInfoMBean());\n+            }\n+        });\n+\n@@ -299,1 +320,1 @@\n-    private static synchronized com.sun.management.internal.ContainerInfo getContainerInfoMBean() {\n+    private static synchronized ContainerInfoMXBean getContainerInfoMBean() {\n@@ -303,1 +324,1 @@\n-                containerInfoMBean = new ContainerInfo(containerMetrics);\n+                containerInfoMBean = new ContainerInfoImpl(containerMetrics);\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"}]}