{"files":[{"patch":"@@ -233,0 +233,1 @@\n+        java.management,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+package java.lang.management;\n+\n+\/**\n+ * The management interface for the container system of\n+ * the Java virtual machine.\n+ *\n+ * <p> A Java virtual machine has a single instance of the implementation\n+ * class of this interface.  This instance implementing this interface is\n+ * an <a href=\"ManagementFactory.html#MXBean\">MXBean<\/a>\n+ * that can be obtained by calling\n+ * the {@link ManagementFactory#getRuntimeMXBean} method or\n+ * from the {@link ManagementFactory#getPlatformMBeanServer\n+ * platform MBeanServer} method.\n+ *\n+ * <p>The {@code ObjectName} for uniquely identifying the MXBean for\n+ * the runtime system within an MBeanServer is:\n+ * <blockquote>\n+ *    {@link ManagementFactory#CONTAINER_MXBEAN_NAME\n+ *           java.lang:type=Container}\n+ * <\/blockquote>\n+ *\n+ * It can be obtained by calling the\n+ * {@link PlatformManagedObject#getObjectName} method.\n+ *\n+ * <p> This interface defines several convenient methods for accessing\n+ * system properties about the Java virtual machine.\n+ *\n+ * @see ManagementFactory#getPlatformMXBeans(Class)\n+ * @see <a href=\"..\/..\/..\/javax\/management\/package-summary.html\">\n+ *      JMX Specification.<\/a>\n+ * @see <a href=\"package-summary.html#examples\">\n+ *      Ways to Access MXBeans<\/a>\n+ *\n+ * @author  pxie\n+ * @since   20\n+ *\/\n+public interface ContainerMXBean extends PlatformManagedObject {\n+    \/**\n+     * Returns the interface responsible for providing the\n+     * platform metrics.\n+     *\n+     * @implNote\n+     * Metrics are currently only supported Linux.\n+     * The provider for Linux is cgroups (version 1 or 2).\n+     *\n+     * @return The name of the provider.\n+     *\n+     *\/\n+    String getProvider();\n+\n+    \/**\n+     * Returns the length of the scheduling period, in\n+     * microseconds, for processes within the Isolation Group.\n+     *\n+     * @return time in microseconds, -1 if the metric is not available or\n+     *         -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getCpuPeriod();\n+\n+    \/**\n+     * Returns the total available run-time allowed, in microseconds,\n+     * during each scheduling period for all tasks in the Isolation\n+     * Group.\n+     *\n+     * @return time in microseconds, -1 if the quota is unlimited or\n+     *         -2 if not supported.\n+     *\n+     *\/\n+    long getCpuQuota();\n+\n+    \/**\n+     * Returns the relative weighting of processes with the Isolation\n+     * Group used for prioritizing the scheduling of processes across\n+     * all Isolation Groups running on a host.\n+     *\n+     * @implNote\n+     * Popular container orchestration systems have standardized shares\n+     * to be multiples of 1024, where 1024 is interpreted as 1 CPU share\n+     * of execution.  Users can distribute CPU resources to multiple\n+     * Isolation Groups by specifying the CPU share weighting needed by\n+     * each process.  To request 2 CPUS worth of execution time, CPU shares\n+     * would be set to 2048.\n+     *\n+     * @return shares value, -1 if the metric is not available or\n+     *         -2 if cpu shares are not supported.\n+     *\n+     *\/\n+    long getCpuShares();\n+\n+    \/**\n+     * Returns the number of effective processors that this Isolation\n+     * group has available to it.  This effective processor count is\n+     * computed based on the number of dedicated CPUs, CPU shares and\n+     * CPU quotas in effect for this isolation group.\n+     *\n+     * This method returns the same value as\n+     * {@link java.lang.Runtime#availableProcessors()}.\n+     *\n+     * @return The number of effective CPUs.\n+     *\n+     *\/\n+    long getEffectiveCpuCount();\n+\n+    \/**\n+     * Returns the hint to the operating system that allows groups\n+     * to specify the minimum amount of physical memory that they need to\n+     * achieve reasonable performance in low memory systems.  This allows\n+     * host systems to provide greater sharing of memory.\n+     *\n+     * @return The minimum amount of physical memory, in bytes, that the\n+     *         operating system will try to maintain under low memory\n+     *         conditions.  If this metric is not available, -1 will be\n+     *         returned. Returns -2 if the metric is not supported.\n+     *\n+     *\/\n+    long getMemorySoftLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory, in bytes, that\n+     * can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryLimit();\n+\n+    \/**\n+     * Returns the maximum amount of physical memory and swap space,\n+     * in bytes, that can be allocated in the Isolation Group.\n+     *\n+     * @return The maximum amount of memory in bytes or -1 if\n+     *         there is no limit set or -2 if this metric is not supported.\n+     *\n+     *\/\n+    long getMemoryAndSwapLimit();\n+}\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ContainerMXBean.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -37,0 +37,3 @@\n+\n+import jdk.internal.platform.Container;\n+import jdk.internal.platform.Metrics;\n@@ -456,0 +459,29 @@\n+\n+        if (ManagementFactoryHelper.isContainerAvailable()) {\n+            initMBeanList.add(new PlatformComponent<ContainerMXBean>() {\n+                private final Set<String> containerMXBeanInterfaceNames\n+                        = Collections.singleton(\"java.lang.management.ContainerMXBean\");\n+\n+                @Override\n+                public Set<Class<? extends ContainerMXBean>> mbeanInterfaces() {\n+                    return Collections.singleton(ContainerMXBean.class);\n+                }\n+\n+                @Override\n+                public Set<String> mbeanInterfaceNames() {\n+                    return containerMXBeanInterfaceNames;\n+                }\n+\n+                @Override\n+                public String getObjectNamePattern() {\n+                    return ManagementFactory.CONTAINER_MXBEAN_NAME;\n+                }\n+\n+                @Override\n+                public Map<String, ContainerMXBean> nameToMBeanMap() {\n+                    return Collections.singletonMap(\n+                            ManagementFactory.CONTAINER_MXBEAN_NAME,\n+                            ManagementFactoryHelper.getContainerMXBean());\n+                }\n+            });\n+        }\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/DefaultPlatformMBeanProvider.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -327,0 +327,7 @@\n+    \/**\n+     * String representation of the\n+     * {@code ObjectName} for the {@link ContainerMXBean}.\n+     *\/\n+    public static final String CONTAINER_MXBEAN_NAME =\n+            \"java.lang:type=Container\";\n+\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+package sun.management;\n+\n+import jdk.internal.platform.Container;\n+import jdk.internal.platform.Metrics;\n+\n+import javax.management.ObjectName;\n+import java.lang.management.ContainerMXBean;\n+import java.lang.management.ManagementFactory;\n+\n+public class ContainerImpl implements ContainerMXBean {\n+    final Metrics containerMetrics = Container.metrics();\n+\n+    @Override\n+    public String getProvider() {\n+        return containerMetrics.getProvider();\n+    }\n+\n+    @Override\n+    public long getCpuPeriod() {\n+        return containerMetrics.getCpuPeriod();\n+    }\n+\n+    @Override\n+    public long getCpuQuota() {\n+        return containerMetrics.getCpuQuota();\n+    }\n+\n+    @Override\n+    public long getCpuShares() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getEffectiveCpuCount() {\n+        return containerMetrics.getEffectiveCpuCount();\n+    }\n+\n+    @Override\n+    public long getMemorySoftLimit() {\n+        return containerMetrics.getMemorySoftLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryLimit() {\n+        return containerMetrics.getMemoryLimit();\n+    }\n+\n+    @Override\n+    public long getMemoryAndSwapLimit() {\n+        return containerMetrics.getMemoryAndSwapLimit();\n+    }\n+\n+    @Override\n+    public ObjectName getObjectName() {\n+        return Util.newObjectName(ManagementFactory.CONTAINER_MXBEAN_NAME);\n+    }\n+}\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ContainerImpl.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.platform.Container;\n@@ -86,0 +87,1 @@\n+    private static ContainerImpl containerMBean = null;\n@@ -166,0 +168,7 @@\n+    public static synchronized ContainerMXBean getContainerMXBean() {\n+        if (containerMBean == null) {\n+            containerMBean = new ContainerImpl();\n+        }\n+        return containerMBean;\n+    }\n+\n@@ -170,0 +179,4 @@\n+    public static boolean isContainerAvailable() {\n+        return Container.metrics() != null;\n+    }\n+\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}