{"files":[{"patch":"@@ -73,4 +73,3 @@\n-ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear) : GrowableBitMap<ArenaBitMap>(), _arena(arena) {\n-  \/\/ Reuse reallocate to ensure that the new memory is cleared.\n-  bm_word_t* map = reallocate(nullptr, 0, size_in_bits, clear);\n-  update(map, size_in_bits);\n+ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear)\n+  : GrowableBitMap<ArenaBitMap>(), _arena(arena) {\n+  initialize(size_in_bits, clear);\n@@ -84,1 +83,6 @@\n-  : GrowableBitMap<ResourceBitMap>(size_in_bits, clear) {\n+  : GrowableBitMap<ResourceBitMap>() {\n+  initialize(size_in_bits, clear);\n+}\n+\n+bm_word_t* ResourceBitMap::allocate(idx_t size_in_words) const {\n+  return (bm_word_t*)NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n@@ -89,3 +93,1 @@\n-  \/\/ Reuse reallocate to ensure that the new memory is cleared.\n-  bm_word_t* map = reallocate(nullptr, 0, size_in_bits, clear);\n-  update(map, size_in_bits);\n+  initialize(size_in_bits, clear);\n@@ -98,0 +100,8 @@\n+bm_word_t* CHeapBitMap::allocate(idx_t size_in_words) const {\n+  return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n+}\n+\n+void CHeapBitMap::free(bm_word_t* map, idx_t size_in_words) const {\n+  ArrayAllocator<bm_word_t>::free(map, size_in_words);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- protected:\n+ private:\n@@ -67,0 +67,1 @@\n+ protected:\n@@ -170,1 +171,3 @@\n-  BitMap(bm_word_t* map, idx_t size_in_bits) : _map(map), _size(size_in_bits) {}\n+  BitMap(bm_word_t* map, idx_t size_in_bits) : _map(map), _size(size_in_bits) {\n+    verify_size(size_in_bits);\n+  }\n@@ -318,1 +321,1 @@\n-\/\/ CRTP: BitmapWithAllocator exposes to the following Allocator interfaces upward to GrowableBitMap.\n+\/\/ CRTP: BitmapWithAllocator exposes the following Allocator interfaces upward to GrowableBitMap.\n@@ -326,1 +329,1 @@\n-  bm_word_t* reallocate(bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear = true);\n+  bm_word_t* reallocate(bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear);\n@@ -328,3 +331,2 @@\n-  GrowableBitMap(idx_t size_in_bits, bool clear) : BitMap(reallocate(nullptr, 0, size_in_bits, clear), size_in_bits) {\n-  }\n-  GrowableBitMap() : BitMap(nullptr, 0) {}\n+  GrowableBitMap() : GrowableBitMap(nullptr, 0) {}\n+  GrowableBitMap(bm_word_t* map, idx_t size_in_bits) : BitMap(map, size_in_bits) {}\n@@ -378,0 +380,1 @@\n+\n@@ -385,1 +388,0 @@\n-\n@@ -391,0 +393,1 @@\n+\/\/ A BitMap with storage in the current threads resource area.\n@@ -392,1 +395,0 @@\n-\n@@ -397,4 +399,1 @@\n-  bm_word_t* allocate(idx_t size_in_words) const {\n-    return (bm_word_t*)NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n-  }\n-\n+  bm_word_t* allocate(idx_t size_in_words) const;\n@@ -408,1 +407,3 @@\n-  MEMFLAGS _flags;\n+  \/\/ NMT memory type\n+  const MEMFLAGS _flags;\n+\n@@ -420,7 +421,2 @@\n-  bm_word_t* allocate(idx_t size_in_words) const {\n-    return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n-  }\n-\n-  void free(bm_word_t* map, idx_t size_in_words) const {\n-    ArrayAllocator<bm_word_t>::free(map, size_in_words);\n-  }\n+  bm_word_t* allocate(idx_t size_in_words) const;\n+  void free(bm_word_t* map, idx_t size_in_words) const;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"}]}