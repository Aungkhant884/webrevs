{"files":[{"patch":"@@ -39,17 +39,2 @@\n-bm_word_t* CHeapBitMapAllocator::allocate(size_t size_in_words) const {\n-  return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n-}\n-void CHeapBitMapAllocator::free(bm_word_t* map, idx_t size_in_words) const {\n-  ArrayAllocator<bm_word_t>::free(map, size_in_words);\n-}\n-\n-bm_word_t* ArenaBitMapAllocator::allocate(idx_t size_in_words) const {\n-  if (_arena == nullptr) {\n-    return NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n-  } else {\n-    return (bm_word_t*)_arena->Amalloc(size_in_words * BytesPerWord);\n-  }\n-}\n-\n-template <class Allocator>\n-bm_word_t* GrowableBitMap<Allocator>::reallocate(const Allocator& allocator, bm_word_t* old_map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear) {\n+template <class BitMapWithAllocator>\n+bm_word_t* GrowableBitMap<BitMapWithAllocator>::reallocate(bm_word_t* old_map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear) {\n@@ -60,0 +45,1 @@\n+  BitMapWithAllocator* derived = static_cast<BitMapWithAllocator*>(this);\n@@ -62,1 +48,1 @@\n-    map = allocator.allocate(new_size_in_words);\n+    map = derived->allocate(new_size_in_words);\n@@ -81,1 +67,1 @@\n-    allocator.free(old_map, old_size_in_words);\n+    derived->free(old_map, old_size_in_words);\n@@ -87,2 +73,1 @@\n-template <class Allocator>\n-bm_word_t* GrowableBitMap<Allocator>::allocate(const Allocator& allocator, idx_t size_in_bits, bool clear) {\n+ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear) : GrowableBitMap<ArenaBitMap>(), _arena(arena) {\n@@ -90,1 +75,2 @@\n-  return reallocate(allocator, NULL, 0, size_in_bits, clear);\n+  bm_word_t* map = reallocate(nullptr, 0, size_in_bits, clear);\n+  update(map, size_in_bits);\n@@ -93,9 +79,2 @@\n-template <class Allocator>\n-void GrowableBitMap<Allocator>::free(const Allocator& allocator, bm_word_t* map, idx_t  size_in_bits) {\n-  bm_word_t* ret = reallocate(allocator, map, size_in_bits, 0);\n-  assert(ret == NULL, \"Reallocate shouldn't have allocated\");\n-}\n-\n-\n-ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear)\n-  : GrowableBitMap<ArenaBitMapAllocator>(ArenaBitMapAllocator(arena), size_in_bits, clear) {\n+bm_word_t* ArenaBitMap::allocate(idx_t size_in_words) const {\n+  return (bm_word_t*)_arena->Amalloc(size_in_words * BytesPerWord);\n@@ -105,1 +84,1 @@\n-  : ArenaBitMap(nullptr, size_in_bits, clear) {\n+  : GrowableBitMap<ResourceBitMap>(size_in_bits, clear) {\n@@ -109,1 +88,4 @@\n-  : GrowableBitMap<CHeapBitMapAllocator>(CHeapBitMapAllocator(flags), size_in_bits, clear) {\n+  : GrowableBitMap<CHeapBitMap>(), _flags(flags) {\n+  \/\/ Reuse reallocate to ensure that the new memory is cleared.\n+  bm_word_t* map = reallocate(nullptr, 0, size_in_bits, clear);\n+  update(map, size_in_bits);\n@@ -113,1 +95,1 @@\n-  free(_allocator, map(), size());\n+  free(map(), size());\n@@ -643,2 +625,3 @@\n-template class GrowableBitMap<CHeapBitMapAllocator>;\n-template class GrowableBitMap<ArenaBitMapAllocator>;\n+template class GrowableBitMap<ArenaBitMap>;\n+template class GrowableBitMap<ResourceBitMap>;\n+template class GrowableBitMap<CHeapBitMap>;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":19,"deletions":36,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -318,1 +318,6 @@\n-template <class Allocator>\n+\/\/ CRTP: BitmapWithAllocator exposes to the following Allocator interfaces upward to GrowableBitMap.\n+\/\/\n+\/\/  bm_word_t* allocate(idx_t size_in_words) const;\n+\/\/  void free(bm_word_t* map, idx_t size_in_words) const\n+\/\/\n+template <class BitMapWithAllocator>\n@@ -321,7 +326,1 @@\n-  const Allocator _allocator;\n-\n-  \/\/ Allocates and clears the bitmap memory.\n-  static bm_word_t* allocate(const Allocator&, idx_t size_in_bits, bool clear = true);\n-\n-  \/\/ Reallocates and clears the new bitmap memory.\n-  static bm_word_t* reallocate(const Allocator&, bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear = true);\n+  bm_word_t* reallocate(bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear = true);\n@@ -329,5 +328,1 @@\n-  \/\/ Free the bitmap memory.\n-  static void free(const Allocator&, bm_word_t* map, idx_t size_in_bits);\n-\n-  GrowableBitMap(const Allocator& allocator, idx_t size_in_bits, bool clear) : BitMap(nullptr, 0), _allocator(allocator) {\n-    update(allocate(_allocator, size_in_bits, clear), size_in_bits);\n+  GrowableBitMap(idx_t size_in_bits, bool clear) : BitMap(reallocate(nullptr, 0, size_in_bits, clear), size_in_bits) {\n@@ -335,0 +330,1 @@\n+  GrowableBitMap() : BitMap(nullptr, 0) {}\n@@ -365,1 +361,1 @@\n-    bm_word_t* new_map = reallocate(_allocator, map(), size(), new_size_in_bits, clear);\n+    bm_word_t* new_map = reallocate(map(), size(), new_size_in_bits, clear);\n@@ -379,2 +375,4 @@\n-class CHeapBitMapAllocator : StackObj {\n-  MEMFLAGS _flags;\n+\/\/ A BitMap with storage in a specific Arena.\n+class ArenaBitMap : public GrowableBitMap<ArenaBitMap> {\n+  Arena* const _arena;\n+  NONCOPYABLE(ArenaBitMap);\n@@ -383,5 +381,2 @@\n-  CHeapBitMapAllocator(MEMFLAGS flags) : _flags(flags) {}\n-  BitMap::bm_word_t* allocate(size_t size_in_words) const;\n-\n-  void free(BitMap::bm_word_t* map, BitMap::idx_t size_in_words) const;\n-};\n+  \/\/ Clears the bitmap memory.\n+  ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear = true);\n@@ -389,2 +384,1 @@\n-class ArenaBitMapAllocator : StackObj {\n-  Arena* const _arena;\n+  bm_word_t* allocate(idx_t size_in_words) const;\n@@ -392,4 +386,1 @@\n- public:\n-  ArenaBitMapAllocator(Arena* arena) : _arena(arena) {}\n-  BitMap::bm_word_t* allocate(BitMap::idx_t size_in_words) const;\n-  void free(BitMap::bm_word_t* map, BitMap::idx_t size_in_words) const {\n+  void free(bm_word_t* map, idx_t size_in_words) const {\n@@ -400,10 +391,1 @@\n-\/\/ A BitMap with storage in a specific Arena.\n-class ArenaBitMap : public GrowableBitMap<ArenaBitMapAllocator> {\n- public:\n-  \/\/ Clears the bitmap memory.\n-  ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clean = true);\n-\n- protected:\n-  ArenaBitMap(const ArenaBitMap& rhs) = default;\n-  ArenaBitMap& operator=(const ArenaBitMap& rhs) = delete;\n-};\n+class ResourceBitMap : public GrowableBitMap<ResourceBitMap> {\n@@ -411,2 +393,0 @@\n-\/\/ A BitMap with storage in a ResourceArea. It is an ArenaBitMap but _arena is nullptr;\n-class ResourceBitMap : public ArenaBitMap {\n@@ -415,2 +395,0 @@\n-\n-  \/\/ Conditionally clears the bitmap memory.\n@@ -418,4 +396,7 @@\n-  ResourceBitMap(const ResourceBitMap& rhs) = default;\n-  ResourceBitMap& operator=(const ResourceBitMap& rhs) {\n-    update(rhs._map, rhs._size);\n-    return *this;\n+\n+  bm_word_t* allocate(idx_t size_in_words) const {\n+    return (bm_word_t*)NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n+  }\n+\n+  void free(bm_word_t* map, idx_t size_in_words) const {\n+    \/\/ ArenaBitMaps currently don't free memory.\n@@ -426,1 +407,2 @@\n-class CHeapBitMap : public GrowableBitMap<CHeapBitMapAllocator> {\n+class CHeapBitMap : public GrowableBitMap<CHeapBitMap> {\n+  MEMFLAGS _flags;\n@@ -432,2 +414,2 @@\n-  CHeapBitMap() : CHeapBitMap(0, mtInternal, true) {}\n-  explicit CHeapBitMap(MEMFLAGS flags) : CHeapBitMap(0, flags, true) {}\n+  CHeapBitMap() : CHeapBitMap(mtInternal) {}\n+  explicit CHeapBitMap(MEMFLAGS flags) : GrowableBitMap(0, false), _flags(flags) {}\n@@ -437,0 +419,8 @@\n+\n+  bm_word_t* allocate(idx_t size_in_words) const {\n+    return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n+  }\n+\n+  void free(bm_word_t* map, idx_t size_in_words) const {\n+    ArrayAllocator<bm_word_t>::free(map, size_in_words);\n+  }\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":38,"deletions":48,"binary":false,"changes":86,"status":"modified"}]}