{"files":[{"patch":"@@ -34,1 +34,2 @@\n-STATIC_ASSERT(sizeof(BitMap::bm_word_t) == BytesPerWord); \/\/ \"Implementation assumption.\"\n+using bm_word_t = BitMap::bm_word_t;\n+using idx_t = BitMap::idx_t;\n@@ -36,2 +37,1 @@\n-typedef BitMap::bm_word_t bm_word_t;\n-typedef BitMap::idx_t     idx_t;\n+STATIC_ASSERT(sizeof(bm_word_t) == BytesPerWord); \/\/ \"Implementation assumption.\"\n@@ -39,25 +39,6 @@\n-class ResourceBitMapAllocator : StackObj {\n- public:\n-  bm_word_t* allocate(idx_t size_in_words) const {\n-    return NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n-  }\n-  void free(bm_word_t* map, idx_t size_in_words) const {\n-    \/\/ Don't free resource allocated arrays.\n-  }\n-};\n-\n-class CHeapBitMapAllocator : StackObj {\n-  MEMFLAGS _flags;\n-\n- public:\n-  CHeapBitMapAllocator(MEMFLAGS flags) : _flags(flags) {}\n-  bm_word_t* allocate(size_t size_in_words) const {\n-    return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n-  }\n-  void free(bm_word_t* map, idx_t size_in_words) const {\n-    ArrayAllocator<bm_word_t>::free(map, size_in_words);\n-  }\n-};\n-\n-class ArenaBitMapAllocator : StackObj {\n-  Arena* _arena;\n+bm_word_t* CHeapBitMapAllocator::allocate(size_t size_in_words) const {\n+  return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n+}\n+void CHeapBitMapAllocator::free(bm_word_t* map, idx_t size_in_words) const {\n+  ArrayAllocator<bm_word_t>::free(map, size_in_words);\n+}\n@@ -65,3 +46,4 @@\n- public:\n-  ArenaBitMapAllocator(Arena* arena) : _arena(arena) {}\n-  bm_word_t* allocate(idx_t size_in_words) const {\n+bm_word_t* ArenaBitMapAllocator::allocate(idx_t size_in_words) const {\n+  if (_arena == nullptr) {\n+    return NEW_RESOURCE_ARRAY(bm_word_t, size_in_words);\n+  } else {\n@@ -70,4 +52,1 @@\n-  void free(bm_word_t* map, idx_t size_in_words) const {\n-    \/\/ ArenaBitMaps currently don't free memory.\n-  }\n-};\n+}\n@@ -76,1 +55,1 @@\n-BitMap::bm_word_t* BitMap::reallocate(const Allocator& allocator, bm_word_t* old_map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear) {\n+bm_word_t* GrowableBitMap<Allocator>::reallocate(const Allocator& allocator, bm_word_t* old_map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear) {\n@@ -109,1 +88,1 @@\n-bm_word_t* BitMap::allocate(const Allocator& allocator, idx_t size_in_bits, bool clear) {\n+bm_word_t* GrowableBitMap<Allocator>::allocate(const Allocator& allocator, idx_t size_in_bits, bool clear) {\n@@ -115,1 +94,1 @@\n-void BitMap::free(const Allocator& allocator, bm_word_t* map, idx_t  size_in_bits) {\n+void GrowableBitMap<Allocator>::free(const Allocator& allocator, bm_word_t* map, idx_t  size_in_bits) {\n@@ -120,19 +99,0 @@\n-template <class Allocator>\n-void BitMap::resize(const Allocator& allocator, idx_t new_size_in_bits, bool clear) {\n-  bm_word_t* new_map = reallocate(allocator, map(), size(), new_size_in_bits, clear);\n-\n-  update(new_map, new_size_in_bits);\n-}\n-\n-template <class Allocator>\n-void BitMap::initialize(const Allocator& allocator, idx_t size_in_bits, bool clear) {\n-  assert(map() == NULL, \"precondition\");\n-  assert(size() == 0,   \"precondition\");\n-\n-  resize(allocator, size_in_bits, clear);\n-}\n-\n-template <class Allocator>\n-void BitMap::reinitialize(const Allocator& allocator, idx_t new_size_in_bits, bool clear) {\n-  \/\/ Remove previous bits - no need to clear\n-  resize(allocator, 0, false \/* clear *\/);\n@@ -140,1 +100,2 @@\n-  initialize(allocator, new_size_in_bits, clear);\n+ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clear)\n+  : GrowableBitMap<ArenaBitMapAllocator>(ArenaBitMapAllocator(arena), size_in_bits, clear) {\n@@ -144,17 +105,1 @@\n-    : BitMap(allocate(ResourceBitMapAllocator(), size_in_bits, clear), size_in_bits) {\n-}\n-\n-void ResourceBitMap::resize(idx_t new_size_in_bits) {\n-  BitMap::resize(ResourceBitMapAllocator(), new_size_in_bits, true \/* clear *\/);\n-}\n-\n-void ResourceBitMap::initialize(idx_t size_in_bits) {\n-  BitMap::initialize(ResourceBitMapAllocator(), size_in_bits, true \/* clear *\/);\n-}\n-\n-void ResourceBitMap::reinitialize(idx_t size_in_bits) {\n-  BitMap::reinitialize(ResourceBitMapAllocator(), size_in_bits, true \/* clear *\/);\n-}\n-\n-ArenaBitMap::ArenaBitMap(Arena* arena, idx_t size_in_bits)\n-    : BitMap(allocate(ArenaBitMapAllocator(arena), size_in_bits), size_in_bits) {\n+  : ArenaBitMap(nullptr, size_in_bits, clear) {\n@@ -164,1 +109,1 @@\n-    : BitMap(allocate(CHeapBitMapAllocator(flags), size_in_bits, clear), size_in_bits), _flags(flags) {\n+  : GrowableBitMap<CHeapBitMapAllocator>(CHeapBitMapAllocator(flags), size_in_bits, clear) {\n@@ -168,13 +113,1 @@\n-  free(CHeapBitMapAllocator(_flags), map(), size());\n-}\n-\n-void CHeapBitMap::resize(idx_t new_size_in_bits, bool clear) {\n-  BitMap::resize(CHeapBitMapAllocator(_flags), new_size_in_bits, clear);\n-}\n-\n-void CHeapBitMap::initialize(idx_t size_in_bits, bool clear) {\n-  BitMap::initialize(CHeapBitMapAllocator(_flags), size_in_bits, clear);\n-}\n-\n-void CHeapBitMap::reinitialize(idx_t size_in_bits, bool clear) {\n-  BitMap::reinitialize(CHeapBitMapAllocator(_flags), size_in_bits, clear);\n+  free(_allocator, map(), size());\n@@ -709,0 +642,3 @@\n+\n+template class GrowableBitMap<CHeapBitMapAllocator>;\n+template class GrowableBitMap<ArenaBitMapAllocator>;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":25,"deletions":89,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- private:\n+ protected:\n@@ -113,1 +113,0 @@\n- protected:\n@@ -164,36 +163,0 @@\n-  \/\/ Allocation Helpers.\n-\n-  \/\/ Allocates and clears the bitmap memory.\n-  template <class Allocator>\n-  static bm_word_t* allocate(const Allocator&, idx_t size_in_bits, bool clear = true);\n-\n-  \/\/ Reallocates and clears the new bitmap memory.\n-  template <class Allocator>\n-  static bm_word_t* reallocate(const Allocator&, bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear = true);\n-\n-  \/\/ Free the bitmap memory.\n-  template <class Allocator>\n-  static void free(const Allocator&, bm_word_t* map, idx_t size_in_bits);\n-\n-  \/\/ Protected functions, that are used by BitMap sub-classes that support them.\n-\n-  \/\/ Resize the backing bitmap memory.\n-  \/\/\n-  \/\/ Old bits are transferred to the new memory\n-  \/\/ and the extended memory is cleared.\n-  template <class Allocator>\n-  void resize(const Allocator& allocator, idx_t new_size_in_bits, bool clear);\n-\n-  \/\/ Set up and clear the bitmap memory.\n-  \/\/\n-  \/\/ Precondition: The bitmap was default constructed and has\n-  \/\/ not yet had memory allocated via resize or (re)initialize.\n-  template <class Allocator>\n-  void initialize(const Allocator& allocator, idx_t size_in_bits, bool clear);\n-\n-  \/\/ Set up and clear the bitmap memory.\n-  \/\/\n-  \/\/ Can be called on previously initialized bitmaps.\n-  template <class Allocator>\n-  void reinitialize(const Allocator& allocator, idx_t new_size_in_bits, bool clear);\n-\n@@ -207,3 +170,1 @@\n-  BitMap(bm_word_t* map, idx_t size_in_bits) : _map(map), _size(size_in_bits) {\n-    verify_size(size_in_bits);\n-  }\n+  BitMap(bm_word_t* map, idx_t size_in_bits) : _map(map), _size(size_in_bits) {}\n@@ -357,0 +318,52 @@\n+template <class Allocator>\n+class GrowableBitMap : public BitMap {\n+ protected:\n+  const Allocator _allocator;\n+\n+  \/\/ Allocates and clears the bitmap memory.\n+  static bm_word_t* allocate(const Allocator&, idx_t size_in_bits, bool clear = true);\n+\n+  \/\/ Reallocates and clears the new bitmap memory.\n+  static bm_word_t* reallocate(const Allocator&, bm_word_t* map, idx_t old_size_in_bits, idx_t new_size_in_bits, bool clear = true);\n+\n+  \/\/ Free the bitmap memory.\n+  static void free(const Allocator&, bm_word_t* map, idx_t size_in_bits);\n+\n+  GrowableBitMap(const Allocator& allocator, idx_t size_in_bits, bool clear) : BitMap(nullptr, 0), _allocator(allocator) {\n+    update(allocate(_allocator, size_in_bits, clear), size_in_bits);\n+  }\n+\n+ public:\n+  \/\/ Set up and clear the bitmap memory.\n+  \/\/\n+  \/\/ Precondition: The bitmap was default constructed and has\n+  \/\/ not yet had memory allocated via resize or (re)initialize.\n+  void initialize(idx_t size_in_bits, bool clear = true) {\n+    assert(map() == NULL, \"precondition\");\n+    assert(size() == 0,   \"precondition\");\n+\n+    resize(size_in_bits, clear);\n+  }\n+\n+  \/\/ Set up and clear the bitmap memory.\n+  \/\/\n+  \/\/ Can be called on previously initialized bitmaps.\n+  void reinitialize(idx_t new_size_in_bits, bool clear = true) {\n+    \/\/ Remove previous bits - no need to clear\n+    resize(0, false \/* clear *\/);\n+\n+    initialize(new_size_in_bits, clear);\n+  }\n+\n+  \/\/ Protected functions, that are used by BitMap sub-classes that support them.\n+\n+  \/\/ Resize the backing bitmap memory.\n+  \/\/\n+  \/\/ Old bits are transferred to the new memory\n+  \/\/ and the extended memory is cleared.\n+  void resize(idx_t new_size_in_bits, bool clear = true) {\n+    bm_word_t* new_map = reallocate(_allocator, map(), size(), new_size_in_bits, clear);\n+    update(new_map, new_size_in_bits);\n+  }\n+};\n+\n@@ -362,1 +375,1 @@\n-  BitMapView() : BitMap(NULL, 0) {}\n+  BitMapView() : BitMapView(nullptr, 0) {}\n@@ -366,2 +379,2 @@\n-\/\/ A BitMap with storage in a ResourceArea.\n-class ResourceBitMap : public BitMap {\n+class CHeapBitMapAllocator : StackObj {\n+  MEMFLAGS _flags;\n@@ -370,3 +383,2 @@\n-  ResourceBitMap() : BitMap(NULL, 0) {}\n-  \/\/ Conditionally clears the bitmap memory.\n-  ResourceBitMap(idx_t size_in_bits, bool clear = true);\n+  CHeapBitMapAllocator(MEMFLAGS flags) : _flags(flags) {}\n+  BitMap::bm_word_t* allocate(size_t size_in_words) const;\n@@ -374,5 +386,2 @@\n-  \/\/ Resize the backing bitmap memory.\n-  \/\/\n-  \/\/ Old bits are transferred to the new memory\n-  \/\/ and the extended memory is cleared.\n-  void resize(idx_t new_size_in_bits);\n+  void free(BitMap::bm_word_t* map, BitMap::idx_t size_in_words) const;\n+};\n@@ -380,5 +389,2 @@\n-  \/\/ Set up and clear the bitmap memory.\n-  \/\/\n-  \/\/ Precondition: The bitmap was default constructed and has\n-  \/\/ not yet had memory allocated via resize or initialize.\n-  void initialize(idx_t size_in_bits);\n+class ArenaBitMapAllocator : StackObj {\n+  Arena* const _arena;\n@@ -386,4 +392,6 @@\n-  \/\/ Set up and clear the bitmap memory.\n-  \/\/\n-  \/\/ Can be called on previously initialized bitmaps.\n-  void reinitialize(idx_t size_in_bits);\n+ public:\n+  ArenaBitMapAllocator(Arena* arena) : _arena(arena) {}\n+  BitMap::bm_word_t* allocate(BitMap::idx_t size_in_words) const;\n+  void free(BitMap::bm_word_t* map, BitMap::idx_t size_in_words) const {\n+    \/\/ ArenaBitMaps currently don't free memory.\n+  }\n@@ -393,1 +401,1 @@\n-class ArenaBitMap : public BitMap {\n+class ArenaBitMap : public GrowableBitMap<ArenaBitMapAllocator> {\n@@ -396,1 +404,1 @@\n-  ArenaBitMap(Arena* arena, idx_t size_in_bits);\n+  ArenaBitMap(Arena* arena, idx_t size_in_bits, bool clean = true);\n@@ -398,2 +406,3 @@\n- private:\n-  NONCOPYABLE(ArenaBitMap);\n+ protected:\n+  ArenaBitMap(const ArenaBitMap& rhs) = default;\n+  ArenaBitMap& operator=(const ArenaBitMap& rhs) = delete;\n@@ -402,2 +411,4 @@\n-\/\/ A BitMap with storage in the CHeap.\n-class CHeapBitMap : public BitMap {\n+\/\/ A BitMap with storage in a ResourceArea. It is an ArenaBitMap but _arena is nullptr;\n+class ResourceBitMap : public ArenaBitMap {\n+ public:\n+  ResourceBitMap() : ResourceBitMap(0) {}\n@@ -405,1 +416,11 @@\n- private:\n+  \/\/ Conditionally clears the bitmap memory.\n+  ResourceBitMap(idx_t size_in_bits, bool clear = true);\n+  ResourceBitMap(const ResourceBitMap& rhs) = default;\n+  ResourceBitMap& operator=(const ResourceBitMap& rhs) {\n+    update(rhs._map, rhs._size);\n+    return *this;\n+  }\n+};\n+\n+\/\/ A BitMap with storage in the CHeap.\n+class CHeapBitMap : public GrowableBitMap<CHeapBitMapAllocator> {\n@@ -410,3 +431,0 @@\n-  \/\/ NMT memory type\n-  MEMFLAGS _flags;\n-\n@@ -414,1 +432,2 @@\n-  CHeapBitMap(MEMFLAGS flags = mtInternal) : BitMap(NULL, 0), _flags(flags) {}\n+  CHeapBitMap() : CHeapBitMap(0, mtInternal, true) {}\n+  explicit CHeapBitMap(MEMFLAGS flags) : CHeapBitMap(0, flags, true) {}\n@@ -418,17 +437,0 @@\n-\n-  \/\/ Resize the backing bitmap memory.\n-  \/\/\n-  \/\/ Old bits are transferred to the new memory\n-  \/\/ and the extended memory is (optionally) cleared.\n-  void resize(idx_t new_size_in_bits, bool clear = true);\n-\n-  \/\/ Set up and (optionally) clear the bitmap memory.\n-  \/\/\n-  \/\/ Precondition: The bitmap was default constructed and has\n-  \/\/ not yet had memory allocated via resize or initialize.\n-  void initialize(idx_t size_in_bits, bool clear = true);\n-\n-  \/\/ Set up and (optionally) clear the bitmap memory.\n-  \/\/\n-  \/\/ Can be called on previously initialized bitmaps.\n-  void reinitialize(idx_t size_in_bits, bool clear = true);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":91,"deletions":89,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"memory\/arena.hpp\"\n@@ -86,1 +87,1 @@\n-\n+  template <class ReinitializableBitMapClass>\n@@ -90,1 +91,1 @@\n-    ResourceBitMap map(init_size);\n+    ReinitializableBitMapClass  map(init_size);\n@@ -94,1 +95,1 @@\n-    ResourceBitMap map2(BITMAP_SIZE);\n+    ReinitializableBitMapClass map2(BITMAP_SIZE);\n@@ -100,1 +101,1 @@\n-\n+  template <class PrintableBitMapClass>\n@@ -104,1 +105,1 @@\n-    ResourceBitMap map(size);\n+    PrintableBitMapClass map(size);\n@@ -116,0 +117,9 @@\n+\/\/ FixedArenaBitMap is the shorthand combination of Arena and ArenaBitMap.\n+\/\/ Multiple inheritance guarantees to construct Arena first.\n+class FixedArenaBitMap : private Arena, public ArenaBitMap {\n+ public:\n+  FixedArenaBitMap() : FixedArenaBitMap(0) {}\n+  FixedArenaBitMap(idx_t size_in_bits, bool clear = true) : Arena(mtTest),\n+                                                            ArenaBitMap(static_cast<Arena*>(this), size_in_bits, clear) {}\n+};\n+\n@@ -121,0 +131,2 @@\n+  BitMapTest::testResizeGrow<FixedArenaBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ArenaBitMap\";\n@@ -128,0 +140,2 @@\n+  BitMapTest::testResizeShrink<FixedArenaBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ArenaBitMap\";\n@@ -135,0 +149,2 @@\n+  BitMapTest::testResizeSame<FixedArenaBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ArenaBitMap\";\n@@ -160,0 +176,2 @@\n+  BitMapTest::testInitialize<FixedArenaBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ArenaBitMap\";\n@@ -163,3 +181,6 @@\n-  BitMapTest::testReinitialize(0);\n-  BitMapTest::testReinitialize(BitMapTest::BITMAP_SIZE >> 3);\n-  BitMapTest::testReinitialize(BitMapTest::BITMAP_SIZE);\n+  constexpr BitMap::idx_t sizes[] = {0, BitMapTest::BITMAP_SIZE >> 3, BitMapTest::BITMAP_SIZE};\n+\n+  for (auto size : sizes) {\n+    BitMapTest::testReinitialize<ResourceBitMap>(size);\n+    BitMapTest::testReinitialize<FixedArenaBitMap>(size);\n+  }\n@@ -171,3 +192,6 @@\n-  BitMapTest::testPrintOn(0);\n-  BitMapTest::testPrintOn(BitMapTest::BITMAP_SIZE >> 3);\n-  BitMapTest::testPrintOn(BitMapTest::BITMAP_SIZE);\n+  constexpr BitMap::idx_t sizes[] = {0, BitMapTest::BITMAP_SIZE >> 3, BitMapTest::BITMAP_SIZE};\n+\n+  for (auto size : sizes) {\n+    BitMapTest::testPrintOn<ResourceBitMap>(size);\n+    BitMapTest::testPrintOn<FixedArenaBitMap>(size);\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap.cpp","additions":35,"deletions":11,"binary":false,"changes":46,"status":"modified"}]}