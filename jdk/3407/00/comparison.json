{"files":[{"patch":"@@ -291,0 +291,3 @@\n+    if (@available(macOS 10.12, *)) {\n+        [NSWindow setAllowsAutomaticWindowTabbing:NO];\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTWindow.m","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.event.ActionEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ *  @test\n+ *  @bug 8256465\n+ *  @requires (os.family == \"Mac\")\n+ *  @summary Application should not freeze when opening dialog\n+ *  @key headful\n+ *  @run main\/manual TestAppFreeze\n+ *\/\n+\n+public class TestAppFreeze {\n+    private static volatile CountDownLatch countDownLatch;\n+    private static JFrame instructionFrame;\n+    private static JFrame testFrame;\n+    private static volatile boolean testPassed = false;\n+\n+    private static boolean validatePlatform() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName == null) {\n+            throw new RuntimeException(\"Name of the current OS could not be\" +\n+                    \" retrieved.\");\n+        }\n+        return osName.startsWith(\"Mac\");\n+    }\n+\n+    private static void createInstructionUI() {\n+        SwingUtilities.invokeLater(() -> {\n+            String instruction = \"1. This test is only for Mac OS Version 11 \" +\n+                    \"or later, on other Mac OS just press PASS\\n\" +\n+                    \"2. Go to System Preference -> General\\n\"+\n+                    \"3. Set prefer tab while opening document to Always.\\n\" +\n+                    \"4. Then click on the click button of the test frame\\n\" +\n+                    \"5. The dialog should open in new window and Application \" +\n+                    \"should not freeze\\n\" +\n+                    \"6. IF the conditions are met then press PASS else \" +\n+                    \"press FAIL\";\n+            instructionFrame = new JFrame(\"Instruction Frame\");\n+            JTextArea  textArea = new JTextArea(instruction);\n+            textArea.setEditable(false);\n+            final JButton passButton = new JButton(\"PASS\");\n+            passButton.addActionListener((e -> {\n+                testPassed = true;\n+                instructionFrame.dispose();\n+                testFrame.dispose();\n+                countDownLatch.countDown();\n+            }));\n+            final JButton failButton = new JButton(\"FAIL\");\n+            failButton.addActionListener((e) -> {\n+                instructionFrame.dispose();\n+                testFrame.dispose();\n+                countDownLatch.countDown();\n+            });\n+\n+            JPanel mainPanel = new JPanel(new BorderLayout());\n+            mainPanel.add(textArea, BorderLayout.CENTER);\n+\n+            JPanel buttonPanel =  new JPanel(new FlowLayout());\n+            buttonPanel.add(passButton);\n+            buttonPanel.add(failButton);\n+            mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+            instructionFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+            instructionFrame.setBounds(0, 0, 500, 500);\n+            instructionFrame.add(mainPanel);\n+            instructionFrame.pack();\n+            instructionFrame.setVisible(true);\n+        });\n+    }\n+\n+    private static void testApp() {\n+        testFrame = new JFrame(\"TestFrame\");\n+        testFrame.setBounds(600,0,1000,200);\n+        testFrame.getContentPane().add(new JButton(new AbstractAction(\"Click\") {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                JDialog dlg = new JDialog(testFrame, false);\n+                dlg.setSize(500, 500);\n+                dlg.getContentPane().add(new JTextArea());\n+                dlg.setVisible(true);\n+            }\n+        }));\n+        testFrame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception{\n+        if (!validatePlatform()) {\n+            System.out.println(\"This test is only for Mac OS\");\n+            return;\n+        }\n+        countDownLatch = new CountDownLatch(1);\n+        TestAppFreeze testAppFreeze = new TestAppFreeze();\n+        testAppFreeze.createInstructionUI();\n+        testAppFreeze.testApp();\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+\n+        if(!testPassed) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/TestAppFreeze.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}