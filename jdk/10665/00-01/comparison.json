{"files":[{"patch":"@@ -1131,0 +1131,2 @@\n+  vmTestbase\/nsk\/jvmti\/RunAgentThread\/agentthr001\/TestDescription.java \\\n+  vmTestbase\/nsk\/jvmti\/RunAgentThread\/agentthr002\/TestDescription.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.quick-groups","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jvmti.ThreadEnd;\n-\n-import java.io.PrintStream;\n-\n-public class threadend001 {\n-\n-    final static int JCK_STATUS_BASE = 95;\n-    final static int THREADS_LIMIT = 100;\n-    final static String NAME_PREFIX = \"threadend001-\";\n-\n-    static {\n-        try {\n-            System.loadLibrary(\"threadend001\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            System.err.println(\"Could not load threadend001 library\");\n-            System.err.println(\"java.library.path:\"\n-                + System.getProperty(\"java.library.path\"));\n-            throw ule;\n-        }\n-    }\n-\n-    native static void getReady(int i, String name);\n-    native static int check();\n-\n-    static volatile int thrCount = THREADS_LIMIT;\n-\n-    public static void main(String args[]) {\n-        args = nsk.share.jvmti.JVMTITest.commonInit(args);\n-\n-        \/\/ produce JCK-like exit status.\n-        System.exit(run(args, System.out) + JCK_STATUS_BASE);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        TestThread t = new TestThread(NAME_PREFIX + thrCount);\n-        getReady(THREADS_LIMIT, NAME_PREFIX);\n-        t.start();\n-        try {\n-            t.join();\n-        } catch (InterruptedException e) {\n-            throw new Error(\"Unexpected: \" + e);\n-        }\n-        return check();\n-    }\n-\n-    static class TestThread extends Thread {\n-        public TestThread(String name) {\n-            super(name);\n-        }\n-        public void run() {\n-            thrCount--;\n-            if (thrCount > 0) {\n-                TestThread t = new TestThread(NAME_PREFIX + thrCount);\n-                t.start();\n-                try {\n-                    t.join();\n-                } catch (InterruptedException e) {\n-                    throw new Error(\"Unexpected: \" + e);\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend001.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase nsk\/jvmti\/ThreadEnd\/threadend001.\n- * VM Testbase keywords: [quick, jpda, jvmti, noras]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     The test exercises JVMTI event callback function ThreadEnd.\n- *     The test checks if the event is ganerated by a terminating\n- *     thread after its initial method has finished execution.\n- * COMMENTS\n- *     Ported from JVMDI.\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run main\/othervm\/native -agentlib:threadend001 nsk.jvmti.ThreadEnd.threadend001\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend001\/TestDescription.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"native_thread.cpp\"\n-#include \"nsk_tools.cpp\"\n-#include \"jni_tools.cpp\"\n-#include \"jvmti_tools.cpp\"\n-#include \"agent_tools.cpp\"\n-#include \"jvmti_FollowRefObjects.cpp\"\n-#include \"Injector.cpp\"\n-#include \"JVMTITools.cpp\"\n-#include \"agent_common.cpp\"\n-#include \"threadend001.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend001\/libthreadend001.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"jvmti.h\"\n-#include \"agent_common.h\"\n-#include \"JVMTITools.h\"\n-\n-extern \"C\" {\n-\n-\n-#define PASSED 0\n-#define STATUS_FAILED 2\n-\n-static jvmtiEnv *jvmti = NULL;\n-static jvmtiEventCallbacks callbacks;\n-static jint result = PASSED;\n-static jboolean printdump = JNI_FALSE;\n-static int eventsCount = 0;\n-static int eventsExpected = 0;\n-static const char *prefix = NULL;\n-\n-void JNICALL ThreadEnd(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n-    jvmtiError err;\n-    jvmtiThreadInfo inf;\n-    char name[32];\n-\n-    err = jvmti_env->GetThreadInfo(thread, &inf);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(GetThreadInfo#%d) unexpected error: %s (%d)\\n\",\n-               eventsCount, TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-    if (printdump == JNI_TRUE) {\n-        printf(\">>> %s\\n\", inf.name);\n-    }\n-    if (inf.name != NULL && strstr(inf.name, prefix) == inf.name) {\n-        eventsCount++;\n-        sprintf(name, \"%s%d\", prefix, eventsCount);\n-        if (inf.name == NULL || strcmp(name, inf.name) != 0) {\n-            printf(\"(#%d) wrong thread name: \\\"%s\\\"\",\n-                   eventsCount, inf.name);\n-            printf(\", expected: \\\"%s\\\"\\n\", name);\n-            result = STATUS_FAILED;\n-        }\n-    }\n-}\n-\n-#ifdef STATIC_BUILD\n-JNIEXPORT jint JNICALL Agent_OnLoad_threadend001(JavaVM *jvm, char *options, void *reserved) {\n-    return Agent_Initialize(jvm, options, reserved);\n-}\n-JNIEXPORT jint JNICALL Agent_OnAttach_threadend001(JavaVM *jvm, char *options, void *reserved) {\n-    return Agent_Initialize(jvm, options, reserved);\n-}\n-JNIEXPORT jint JNI_OnLoad_threadend001(JavaVM *jvm, char *options, void *reserved) {\n-    return JNI_VERSION_1_8;\n-}\n-#endif\n-jint Agent_Initialize(JavaVM *jvm, char *options, void *reserved) {\n-    jvmtiError err;\n-    jint res;\n-\n-    if (options != NULL && strcmp(options, \"printdump\") == 0) {\n-        printdump = JNI_TRUE;\n-    }\n-\n-    res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n-    if (res != JNI_OK || jvmti == NULL) {\n-        printf(\"Wrong result of a valid call to GetEnv!\\n\");\n-        return JNI_ERR;\n-    }\n-\n-    callbacks.ThreadEnd = &ThreadEnd;\n-    err = jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks));\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(SetEventCallbacks) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        return JNI_ERR;\n-    }\n-\n-    return JNI_OK;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_nsk_jvmti_ThreadEnd_threadend001_getReady(JNIEnv *env,\n-        jclass cls, jint i, jstring name) {\n-    jvmtiError err;\n-\n-    if (jvmti == NULL) {\n-        printf(\"JVMTI client was not properly loaded!\\n\");\n-        return;\n-    }\n-\n-    prefix = env->GetStringUTFChars(name, NULL);\n-    if (prefix == NULL) {\n-        printf(\"Failed to copy UTF-8 string!\\n\");\n-        result = STATUS_FAILED;\n-        return;\n-    }\n-\n-    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE,\n-            JVMTI_EVENT_THREAD_END, NULL);\n-    if (err == JVMTI_ERROR_NONE) {\n-        eventsExpected = i;\n-    } else {\n-        printf(\"Failed to enable JVMTI_EVENT_THREAD_END: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_nsk_jvmti_ThreadEnd_threadend001_check(JNIEnv *env, jclass cls) {\n-    jvmtiError err;\n-\n-    if (jvmti == NULL) {\n-        printf(\"JVMTI client was not properly loaded!\\n\");\n-        return STATUS_FAILED;\n-    }\n-\n-    err = jvmti->SetEventNotificationMode(JVMTI_DISABLE,\n-            JVMTI_EVENT_THREAD_END, NULL);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to disable JVMTI_EVENT_THREAD_END: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-\n-    if (eventsCount != eventsExpected) {\n-        printf(\"Wrong number of thread end events: %d, expected: %d\\n\",\n-            eventsCount, eventsExpected);\n-        result = STATUS_FAILED;\n-    }\n-    return result;\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend001\/threadend001.cpp","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jvmti.ThreadEnd;\n-\n-import java.io.PrintStream;\n-\n-import nsk.share.jvmti.*;\n-import nsk.share.*;\n-\n-public class threadend002 extends DebugeeClass {\n-\n-    \/\/ run test from command line\n-    public static void main(String argv[]) {\n-        argv = nsk.share.jvmti.JVMTITest.commonInit(argv);\n-\n-        \/\/ JCK-compatible exit\n-        System.exit(run(argv, System.out) + Consts.JCK_STATUS_BASE);\n-    }\n-\n-    \/\/ run test from JCK-compatible environment\n-    public static int run(String argv[], PrintStream out) {\n-        return new threadend002().runIt(argv, out);\n-    }\n-\n-    Log.Logger logger;\n-\n-\n-    \/\/ run debuggee\n-    public int runIt(String argv[], PrintStream out) {\n-\n-        ArgumentHandler argHandler = new ArgumentHandler(argv);\n-        logger = new Log.Logger(new Log(out, argHandler), \"debuggee> \");\n-\n-        int status = threadend002.checkStatus(Consts.TEST_PASSED);\n-\n-        threadend002Thread thrd = new threadend002Thread();\n-        thrd.start();\n-\n-        try {\n-            thrd.join();\n-        } catch(InterruptedException e) {\n-            logger.complain(\"Unexpected exception \" + e);\n-            e.printStackTrace();\n-            return Consts.TEST_FAILED;\n-        }\n-\n-        int currStatus = threadend002.checkStatus(Consts.TEST_PASSED);\n-        if (currStatus != Consts.TEST_PASSED)\n-            status = currStatus;\n-\n-        return status;\n-    }\n-\n-    class threadend002Thread extends Thread {\n-\n-        public void run() {\n-            logger.display(\"thread finished\");\n-        }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend002.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase nsk\/jvmti\/ThreadEnd\/threadend002.\n- * VM Testbase keywords: [quick, jpda, jvmti, noras]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     The test exercises JVMTI event callback function THREAD_END.\n- *     The test enables this event during OnLoad phase. The test fails\n- *     if no THREAD_END event is received\n- * COMMENTS\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run main\/othervm\/native -agentlib:threadend002=-waittime=5 nsk.jvmti.ThreadEnd.threadend002\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend002\/TestDescription.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"native_thread.cpp\"\n-#include \"nsk_tools.cpp\"\n-#include \"jni_tools.cpp\"\n-#include \"jvmti_tools.cpp\"\n-#include \"agent_tools.cpp\"\n-#include \"jvmti_FollowRefObjects.cpp\"\n-#include \"Injector.cpp\"\n-#include \"JVMTITools.cpp\"\n-#include \"agent_common.cpp\"\n-#include \"threadend002.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend002\/libthreadend002.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,167 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <string.h>\n-#include \"jvmti.h\"\n-#include \"agent_common.h\"\n-#include \"jni_tools.h\"\n-#include \"jvmti_tools.h\"\n-#include \"JVMTITools.h\"\n-\n-extern \"C\" {\n-\n-\/* ============================================================================= *\/\n-\n-\/* scaffold objects *\/\n-static jvmtiEnv *jvmti = NULL;\n-static jlong timeout = 0;\n-\n-static int eventCount = 0;\n-\n-\/* ============================================================================= *\/\n-\n-JNIEXPORT void JNICALL\n-cbThreadEnd(jvmtiEnv* jvmti, JNIEnv* jni_env, jthread thread) {\n-\n-    eventCount++;\n-}\n-\n-\/* ============================================================================= *\/\n-\n-static int\n-enableEvent(jvmtiEventMode enable, jvmtiEvent event) {\n-\n-    if (enable == JVMTI_ENABLE) {\n-        NSK_DISPLAY1(\"enabling %s\\n\", TranslateEvent(event));\n-    } else {\n-        NSK_DISPLAY1(\"disabling %s\\n\", TranslateEvent(event));\n-    }\n-\n-    if (!NSK_JVMTI_VERIFY(jvmti->SetEventNotificationMode(enable, event, NULL))) {\n-        nsk_jvmti_setFailStatus();\n-        return NSK_FALSE;\n-    }\n-\n-    return NSK_TRUE;\n-}\n-\n-\/* ============================================================================= *\/\n-\n-int checkEvents() {\n-\n-    int result = NSK_TRUE;\n-\n-    if (eventCount == 0) {\n-        nsk_jvmti_setFailStatus();\n-        NSK_COMPLAIN0(\"Number of THREAD_END events must be greater than 0\\n\");\n-        nsk_jvmti_setFailStatus();\n-        result = NSK_FALSE;\n-    }\n-\n-    return result;\n-}\n-\n-\/* ============================================================================= *\/\n-\n-static int\n-setCallBacks() {\n-    jvmtiEventCallbacks eventCallbacks;\n-    memset(&eventCallbacks, 0, sizeof(eventCallbacks));\n-\n-    eventCallbacks.ThreadEnd = cbThreadEnd;\n-\n-    if (!NSK_JVMTI_VERIFY(jvmti->SetEventCallbacks(&eventCallbacks, sizeof(eventCallbacks))))\n-        return NSK_FALSE;\n-\n-    return NSK_TRUE;\n-}\n-\n-\/* ============================================================================= *\/\n-\n-\/** Agent algorithm. *\/\n-static void JNICALL\n-agentProc(jvmtiEnv* jvmti, JNIEnv* agentJNI, void* arg) {\n-\n-    NSK_DISPLAY0(\"Wait for debuggee to become ready\\n\");\n-    if (!nsk_jvmti_waitForSync(timeout))\n-        return;\n-\n-    NSK_DISPLAY0(\"Let debuggee to continue\\n\");\n-    if (!nsk_jvmti_resumeSync())\n-        return;\n-\n-    if (!nsk_jvmti_waitForSync(timeout))\n-        return;\n-\n-    if (!checkEvents()) {\n-        nsk_jvmti_setFailStatus();\n-    }\n-\n-    NSK_DISPLAY0(\"Let debuggee to finish\\n\");\n-    if (!nsk_jvmti_resumeSync())\n-        return;\n-\n-}\n-\n-\/* ============================================================================= *\/\n-\n-\/** Agent library initialization. *\/\n-#ifdef STATIC_BUILD\n-JNIEXPORT jint JNICALL Agent_OnLoad_threadend002(JavaVM *jvm, char *options, void *reserved) {\n-    return Agent_Initialize(jvm, options, reserved);\n-}\n-JNIEXPORT jint JNICALL Agent_OnAttach_threadend002(JavaVM *jvm, char *options, void *reserved) {\n-    return Agent_Initialize(jvm, options, reserved);\n-}\n-JNIEXPORT jint JNI_OnLoad_threadend002(JavaVM *jvm, char *options, void *reserved) {\n-    return JNI_VERSION_1_8;\n-}\n-#endif\n-jint Agent_Initialize(JavaVM *jvm, char *options, void *reserved) {\n-\n-    if (!NSK_VERIFY(nsk_jvmti_parseOptions(options)))\n-        return JNI_ERR;\n-\n-    timeout = nsk_jvmti_getWaitTime() * 60 * 1000;\n-\n-    jvmti = nsk_jvmti_createJVMTIEnv(jvm, reserved);\n-    if (!NSK_VERIFY(jvmti != NULL))\n-        return JNI_ERR;\n-\n-    if (!setCallBacks()) {\n-        return JNI_ERR;\n-    }\n-\n-    if (!enableEvent(JVMTI_ENABLE, JVMTI_EVENT_THREAD_END)) {\n-        NSK_COMPLAIN0(\"Events could not be enabled\");\n-        nsk_jvmti_setFailStatus();\n-        return JNI_ERR;\n-    }\n-\n-    if (!NSK_VERIFY(nsk_jvmti_setAgentProc(agentProc, NULL)))\n-        return JNI_ERR;\n-\n-    return JNI_OK;\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ThreadEnd\/threadend002\/threadend002.cpp","additions":0,"deletions":167,"binary":false,"changes":167,"status":"deleted"}]}