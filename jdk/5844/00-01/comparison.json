{"files":[{"patch":"@@ -145,19 +145,0 @@\n-    \/**\n-     * If the type is not accessible from current context, try to figure out the\n-     * sharpest accessible supertype.\n-     *\n-     * @param originalType type to sharpen\n-     * @return sharped type\n-     *\/\n-    Type sharpestAccessible(Type originalType) {\n-        if (originalType.hasTag(ARRAY)) {\n-            return types.makeArrayType(sharpestAccessible(types.elemtype(originalType)));\n-        }\n-\n-        Type type = originalType;\n-        while (!rs.isAccessible(gen.getAttrEnv(), type.asElement())) {\n-            type = types.supertype(type);\n-        }\n-        return type;\n-    }\n-\n@@ -344,2 +325,2 @@\n-                    Type argType;\n-                    if (arg.type == syms.botType) {\n+                    Type argType = arg.type;\n+                    if (argType == syms.botType) {\n@@ -347,2 +328,0 @@\n-                    } else {\n-                        argType = sharpestAccessible(arg.type);\n@@ -456,1 +435,1 @@\n-                        Type argType = sharpestAccessible(arg.type);\n+                        Type argType = arg.type;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/StringConcat.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+ *\n+ * @clean *\n+ * @compile -XDstringConcat=inline            StringAppendEvaluatesInOrder.java\n+ * @run main StringAppendEvaluatesInOrder\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/StringAppendEvaluatesInOrder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}