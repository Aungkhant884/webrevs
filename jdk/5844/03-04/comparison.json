{"files":[{"patch":"@@ -38,2 +38,2 @@\n- * @compile -XDstringConcat=indy              WellKnownTypes.java\n- * @run main WellKnownTypes\n+ * @compile -XDstringConcat=indy              WellKnownTypeSignatures.java\n+ * @run main WellKnownTypeSignatures\n@@ -42,2 +42,2 @@\n- * @compile -XDstringConcat=indyWithConstants WellKnownTypes.java\n- * @run main WellKnownTypes\n+ * @compile -XDstringConcat=indyWithConstants WellKnownTypeSignatures.java\n+ * @run main WellKnownTypeSignatures\n@@ -46,1 +46,1 @@\n-public class WellKnownTypes {\n+public class WellKnownTypeSignatures {\n@@ -63,1 +63,1 @@\n-        test(\"\" + WellKnownTypes.class, idx++, \"(Ljava\/lang\/String;)Ljava\/lang\/String;\");\n+        test(\"\" + WellKnownTypeSignatures.class, idx++, \"(Ljava\/lang\/String;)Ljava\/lang\/String;\");\n@@ -101,1 +101,1 @@\n-                                WellKnownTypes.class.getName() + \".class\"));\n+                                WellKnownTypeSignatures.class.getName() + \".class\"));\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypeSignatures.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypes.java","status":"copied"},{"patch":"@@ -27,4 +27,0 @@\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n@@ -37,1 +33,0 @@\n- * @clean *\n@@ -41,1 +36,0 @@\n- * @clean *\n@@ -44,0 +38,3 @@\n+ *\n+ * @compile -XDstringConcat=inline            WellKnownTypes.java\n+ * @run main WellKnownTypes\n@@ -47,2 +44,0 @@\n-    static List<String> actualTypes;\n-\n@@ -53,6 +48,6 @@\n-    static short s = (short) 42;\n-    static byte b = (byte) 42;\n-    static int i = 42;\n-    static long l = 42L;\n-    static float f = 42.0f;\n-    static double d = 42.0;\n+    static byte b = (byte) 43;\n+    static short s = (short) 44;\n+    static int i = 45;\n+    static long l = 46L;\n+    static float f = 47.0f;\n+    static double d = 48.0;\n@@ -61,19 +56,17 @@\n-        readIndyTypes();\n-\n-        test(\"\" + WellKnownTypes.class, idx++, \"(Ljava\/lang\/String;)Ljava\/lang\/String;\");\n-        test(\"\" + Boolean.valueOf(z), idx++, \"(Ljava\/lang\/Boolean;)Ljava\/lang\/String;\");\n-        test(\"\" + Character.valueOf(c), idx++, \"(Ljava\/lang\/Character;)Ljava\/lang\/String;\");\n-        test(\"\" + Byte.valueOf(b), idx++, \"(Ljava\/lang\/Byte;)Ljava\/lang\/String;\");\n-        test(\"\" + Short.valueOf(s), idx++, \"(Ljava\/lang\/Short;)Ljava\/lang\/String;\");\n-        test(\"\" + Integer.valueOf(i), idx++, \"(Ljava\/lang\/Integer;)Ljava\/lang\/String;\");\n-        test(\"\" + Long.valueOf(l), idx++, \"(Ljava\/lang\/Long;)Ljava\/lang\/String;\");\n-        test(\"\" + Double.valueOf(d), idx++, \"(Ljava\/lang\/Double;)Ljava\/lang\/String;\");\n-        test(\"\" + Float.valueOf(f), idx++, \"(Ljava\/lang\/Float;)Ljava\/lang\/String;\");\n-        test(\"\" + z, idx++, \"(Z)Ljava\/lang\/String;\");\n-        test(\"\" + c, idx++, \"(C)Ljava\/lang\/String;\");\n-        test(\"\" + b, idx++, \"(B)Ljava\/lang\/String;\");\n-        test(\"\" + s, idx++, \"(S)Ljava\/lang\/String;\");\n-        test(\"\" + i, idx++, \"(I)Ljava\/lang\/String;\");\n-        test(\"\" + l, idx++, \"(J)Ljava\/lang\/String;\");\n-        test(\"\" + d, idx++, \"(D)Ljava\/lang\/String;\");\n-        test(\"\" + f, idx++, \"(F)Ljava\/lang\/String;\");\n+        test(\"\" + WellKnownTypes.class, idx++, \"class WellKnownTypes\");\n+        test(\"\" + Boolean.valueOf(z), idx++, \"true\");\n+        test(\"\" + Character.valueOf(c), idx++, \"*\");\n+        test(\"\" + Byte.valueOf(b), idx++, \"43\");\n+        test(\"\" + Short.valueOf(s), idx++, \"44\");\n+        test(\"\" + Integer.valueOf(i), idx++, \"45\");\n+        test(\"\" + Long.valueOf(l), idx++, \"46\");\n+        test(\"\" + Float.valueOf(f), idx++, \"47.0\");\n+        test(\"\" + Double.valueOf(d), idx++, \"48.0\");\n+        test(\"\" + z, idx++, \"true\");\n+        test(\"\" + c, idx++, \"*\");\n+        test(\"\" + b, idx++, \"43\");\n+        test(\"\" + s, idx++, \"44\");\n+        test(\"\" + i, idx++, \"45\");\n+        test(\"\" + l, idx++, \"46\");\n+        test(\"\" + f, idx++, \"47.0\");\n+        test(\"\" + d, idx++, \"48.0\");\n@@ -82,35 +75,4 @@\n-    public static void test(String actual, int index, String expectedType) {\n-        String actualType = actualTypes.get(index);\n-        if (!actualType.equals(expectedType)) {\n-            throw new IllegalStateException(\n-                    index\n-                            + \" Unexpected type: expected = \"\n-                            + expectedType\n-                            + \", actual = \"\n-                            + actualType);\n-        }\n-    }\n-\n-    public static void readIndyTypes() throws Exception {\n-        actualTypes = new ArrayList<String>();\n-\n-        ClassFile classFile =\n-                ClassFile.read(\n-                        new File(\n-                                System.getProperty(\"test.classes\", \".\"),\n-                                WellKnownTypes.class.getName() + \".class\"));\n-        ConstantPool constantPool = classFile.constant_pool;\n-\n-        for (Method method : classFile.methods) {\n-            if (method.getName(constantPool).equals(\"main\")) {\n-                Code_attribute code = (Code_attribute) method.attributes.get(Attribute.Code);\n-                for (Instruction i : code.getInstructions()) {\n-                    if (i.getOpcode() == Opcode.INVOKEDYNAMIC) {\n-                        CONSTANT_InvokeDynamic_info indyInfo =\n-                                (CONSTANT_InvokeDynamic_info)\n-                                        constantPool.get(i.getUnsignedShort(1));\n-                        CONSTANT_NameAndType_info natInfo = indyInfo.getNameAndTypeInfo();\n-                        actualTypes.add(natInfo.getType());\n-                    }\n-                }\n-            }\n+    public static void test(String actual, int index, String expected) {\n+        if (!actual.equals(expected)) {\n+      throw new IllegalStateException(\n+          index + \" Unexpected: expected = \" + expected + \", actual = \" + actual);\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypes.java","additions":30,"deletions":68,"binary":false,"changes":98,"status":"modified"}]}