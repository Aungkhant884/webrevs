{"files":[{"patch":"@@ -24,0 +24,16 @@\n+\/*\n+ * Test input for the fix for JDK-8174954, which checks for an expected\n+ * IllegalAccessError when the parameter type of an invokedynamic is\n+ * inaccessible.\n+ *\n+ * The test assumes that given the string concatenation expression \"\" + param,\n+ * javac generates an invokedynamic that uses the specific type of param. The\n+ * fix for JDK-8273914 make javac eagerly convert param to a String before\n+ * passing it to the invokedynamic call, which avoids the accessibility issue\n+ * the test is trying to exercise.\n+ *\n+ * This jasm file contains the bytecode javac generated before the fix for\n+ * JDK-8273914, to continue to exercise the invokedynamic behaviour that\n+ * JDK-8174954 is testing.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/p5\/c5.jasm","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,0 +24,16 @@\n+\/*\n+ * Test input for the fix for JDK-8174954, which checks for an expected\n+ * IllegalAccessError when the parameter type of an invokedynamic is\n+ * inaccessible.\n+ *\n+ * The test assumes that given the string concatenation expression \"\" + param,\n+ * javac generates an invokedynamic that uses the specific type of param. The\n+ * fix for JDK-8273914 make javac eagerly convert param to a String before\n+ * passing it to the invokedynamic call, which avoids the accessibility issue\n+ * the test is trying to exercise.\n+ *\n+ * This jasm file contains the bytecode javac generated before the fix for\n+ * JDK-8273914, to continue to exercise the invokedynamic behaviour that\n+ * JDK-8174954 is testing.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/p7\/c7.jasm","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}