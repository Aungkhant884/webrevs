{"files":[{"patch":"@@ -2716,2 +2716,3 @@\n-bool can_combine_with_imm(Node* binary_node, Node* replicate_node) {\n-  if (UseSVE == 0 || !VectorNode::is_invariant_vector(replicate_node)){\n+\/\/ Binary src (Replicate con)\n+bool is_valid_sve_arith_imm_pattern(Node* n, Node* m) {\n+  if (n == NULL || m == NULL) {\n@@ -2720,1 +2721,6 @@\n-  Node* imm_node = replicate_node->in(1);\n+\n+  if (UseSVE == 0 || !VectorNode::is_invariant_vector(m)) {\n+    return false;\n+  }\n+\n+  Node* imm_node = m->in(1);\n@@ -2730,1 +2736,1 @@\n-  switch (binary_node->Opcode()) {\n+  switch (n->Opcode()) {\n@@ -2734,1 +2740,1 @@\n-    Assembler::SIMD_RegVariant T = Assembler::elemType_to_regVariant(Matcher::vector_element_basic_type(binary_node));\n+    Assembler::SIMD_RegVariant T = Assembler::elemType_to_regVariant(Matcher::vector_element_basic_type(n));\n@@ -2750,1 +2756,3 @@\n-bool is_vector_arith_imm_pattern(Node* n, Node* m) {\n+\/\/ (XorV src (Replicate m1))\n+\/\/ (XorVMask src (MaskAll m1))\n+bool is_vector_bitwise_not_pattern(Node* n, Node* m) {\n@@ -2752,1 +2760,2 @@\n-    return can_combine_with_imm(n, m);\n+    return (n->Opcode() == Op_XorV || n->Opcode() == Op_XorVMask) &&\n+           VectorNode::is_all_ones_vector(m);\n@@ -2759,3 +2768,3 @@\n-  \/\/ ShiftV src (ShiftCntV con)\n-  \/\/ Binary src (Replicate con)\n-  if (is_vshift_con_pattern(n, m) || is_vector_arith_imm_pattern(n, m)) {\n+  if (is_vshift_con_pattern(n, m) ||\n+      is_vector_bitwise_not_pattern(n, m) ||\n+      is_valid_sve_arith_imm_pattern(n, m)) {\n@@ -2765,1 +2774,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -850,0 +850,1 @@\n+  case Op_MaskAll:\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * @test\n+ * @bug 8287984\n+ * @key randomness\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*simd.*\" | vm.cpu.features ~= \".*sve.*\"\n+ * @summary AArch64: [vector] Make all bits set vector sharable for match rules\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.AllBitsSetVectorMatchRuleTest\n+ *\/\n+\n+public class AllBitsSetVectorMatchRuleTest {\n+    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n+    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n+\n+    private static int LENGTH = 128;\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    private static int[] ia;\n+    private static int[] ib;\n+    private static int[] ir;\n+    private static boolean[] ma;\n+    private static boolean[] mb;\n+    private static boolean[] mc;\n+    private static boolean[] mr;\n+\n+    static {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        ir = new int[LENGTH];\n+        ma = new boolean[LENGTH];\n+        mb = new boolean[LENGTH];\n+        mc = new boolean[LENGTH];\n+        mr = new boolean[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = RD.nextInt(25);\n+            ib[i] = RD.nextInt(25);\n+            ma[i] = RD.nextBoolean();\n+            mb[i] = RD.nextBoolean();\n+            mc[i] = RD.nextBoolean();\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { \"bic\", \" >= 1\" })\n+    public static void testAllBitsSetVector() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.not().lanewise(VectorOperators.AND_NOT, bv).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals((~ia[i]) & (~ib[i]), ir[i]);\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { \"bic\", \" >= 1\" })\n+    public static void testAllBitsSetMask() {\n+        VectorMask<Long> avm = VectorMask.fromArray(L_SPECIES, ma, 0);\n+        VectorMask<Long> bvm = VectorMask.fromArray(L_SPECIES, mb, 0);\n+        VectorMask<Long> cvm = VectorMask.fromArray(L_SPECIES, mc, 0);\n+        avm.andNot(bvm).andNot(cvm).intoArray(mr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals((ma[i] & (!mb[i])) & (!mc[i]), mr[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}