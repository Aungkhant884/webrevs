{"files":[{"patch":"@@ -697,6 +697,11 @@\n-  \/\/ Clear all the JNI handles for methods\n-  \/\/ These aren't deallocated and are going to look like a leak, but that's\n-  \/\/ needed because we can't really get rid of jmethodIDs because we don't\n-  \/\/ know when native code is going to stop using them.  The spec says that\n-  \/\/ they're \"invalid\" but existing programs likely rely on their being\n-  \/\/ NULL after class unloading.\n+  \/\/ Method::clear_jmethod_ids only sets the jmethod_ids to NULL without\n+  \/\/ releasing the memory for related JNIMethodBlocks and JNIMethodBlockNodes.\n+  \/\/ This is done intentionally because native code (e.g. JVMTI agent) obtains\n+  \/\/ jmethod_ids may access them after the associated classes and class loader\n+  \/\/ are unloaded. The Java native Interface Specification says \"method ID\n+  \/\/ does not prevent the VM from unloading the class from which the ID has\n+  \/\/ been derived. After the class is unloaded, the method or field ID becomes\n+  \/\/ invalid\". In real world usages, the native code may rely on jmethod_ids\n+  \/\/ being NULL after class unloading. Hence, it is unsafe to free the memory\n+  \/\/ from the VM side without knowing when native code is going to stop using\n+  \/\/ them.\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}