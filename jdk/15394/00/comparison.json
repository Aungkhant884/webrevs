{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n@@ -71,1 +71,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -210,42 +210,0 @@\n-    public static String findKey(String keyPrefix, String teamName, String keychainName) {\n-\n-        boolean useAsIs = teamName.startsWith(keyPrefix)\n-                || teamName.startsWith(\"Developer ID\")\n-                || teamName.startsWith(\"3rd Party Mac\");\n-\n-        String key = (useAsIs) ? teamName : (keyPrefix + teamName);\n-\n-        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                PrintStream ps = new PrintStream(baos)) {\n-            List<String> searchOptions = new ArrayList<>();\n-            searchOptions.add(\"\/usr\/bin\/security\");\n-            searchOptions.add(\"find-certificate\");\n-            searchOptions.add(\"-c\");\n-            searchOptions.add(key);\n-            searchOptions.add(\"-a\");\n-            if (keychainName != null && !keychainName.isEmpty()) {\n-                searchOptions.add(keychainName);\n-            }\n-\n-            ProcessBuilder pb = new ProcessBuilder(searchOptions);\n-\n-            IOUtils.exec(pb, false, ps);\n-            Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n-            Matcher m = p.matcher(baos.toString());\n-            if (!m.find()) {\n-                Log.error(MessageFormat.format(I18N.getString(\n-                        \"error.cert.not.found\"), key, keychainName));\n-                return null;\n-            }\n-            String matchedKey = m.group(1);\n-            if (m.find()) {\n-                Log.error(MessageFormat.format(I18N.getString(\n-                        \"error.multiple.certs.found\"), key, keychainName));\n-            }\n-            return matchedKey;\n-        } catch (IOException ioe) {\n-            Log.verbose(ioe);\n-            return null;\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.text.MessageFormat;\n@@ -43,0 +44,3 @@\n+import java.util.HexFormat;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -55,2 +59,2 @@\n-    private static Path findCertificate(String certificate) {\n-        Path result = null;\n+    public static String findCertificateKey(String keyPrefix, String teamName,\n+                                            String keychainName) {\n@@ -58,0 +62,108 @@\n+        String matchedKey = null;\n+        boolean useAsIs = (keyPrefix == null)\n+                || teamName.startsWith(keyPrefix)\n+                || teamName.startsWith(\"Developer ID\")\n+                || teamName.startsWith(\"3rd Party Mac\");\n+\n+        String name = (useAsIs) ? teamName : (keyPrefix + teamName);\n+\n+        String output = getFindCertificateOutput(name, keychainName);\n+        if (output == null) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                        \"error.cert.not.found\"), name, keychainName));\n+            return null;\n+        }\n+\n+        \/\/ Check and warn user if multiple certificates found\n+        \/\/ We will use different regex to count certificates.\n+        \/\/ ASCII case: \"alis\"<blob>=\"NAME\"\n+        \/\/ UNICODE case: \"alis\"<blob>=0xSOMEHEXDIGITS  \"NAME (\\SOMEDIGITS)\"\n+        \/\/ In UNICODE case name will contain octal sequence representing UTF-8\n+        \/\/ characters.\n+        \/\/ Just look for at least two '\"alis\"<blob>'.\n+        Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>\");\n+        Matcher m = p.matcher(output);\n+        if (m.find() && m.find()) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                        \"error.multiple.certs.found\"), name, keychainName));\n+        }\n+\n+        \/\/ Try to get ASCII only certificate first. This aproach only works\n+        \/\/ if certificate name has ASCII only characters in name. For certificates\n+        \/\/ with UNICODE characters in name we will use combination of \"security\"\n+        \/\/ and \"openssl\". We keeping ASCII only aproach to avoid regressions and\n+        \/\/ it works for many use cases.\n+        p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n+        m = p.matcher(output);\n+        if (m.find()) {\n+            matchedKey = m.group(1);;\n+        }\n+\n+        \/\/ Maybe it has UNICODE characters in name. In this case use \"security\"\n+        \/\/ and \"openssl\" to exctract name. We cannot use just \"security\", since\n+        \/\/ name can be truncated.\n+        if (matchedKey == null) {\n+            Path  file = null;\n+            try {\n+                file = getFindCertificateOutputPEM(name, keychainName);\n+                if (file != null) {\n+                    matchedKey = findCertificateSubject(\n+                                    file.toFile().getCanonicalPath());\n+                }\n+            } catch (IOException ioe) {\n+                Log.verbose(ioe);\n+            } finally {\n+                try {\n+                    Files.deleteIfExists(file);\n+                } catch (IOException ignored) {}\n+            }\n+        }\n+\n+        if (matchedKey == null) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                \"error.cert.not.found\"), name, keychainName));\n+        }\n+\n+        return matchedKey;\n+    }\n+\n+    private static String getFindCertificateOutput(String name,\n+                                                   String keychainName) {\n+        try (ByteArrayOutputStream baos = getFindCertificateOutput(name,\n+                                                                   keychainName,\n+                                                                   false)) {\n+            if (baos != null) {\n+                return baos.toString();\n+            }\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+        }\n+\n+        return null;\n+    }\n+\n+    private static Path getFindCertificateOutputPEM(String name,\n+                                                    String keychainName) {\n+        Path output = null;\n+        try (ByteArrayOutputStream baos = getFindCertificateOutput(name,\n+                                                                   keychainName,\n+                                                                   true)) {\n+            if (baos != null) {\n+                output = Files.createTempFile(\"tempfile\", \".tmp\");\n+                Files.copy(new ByteArrayInputStream(baos.toByteArray()),\n+                        output, StandardCopyOption.REPLACE_EXISTING);\n+                return output;\n+            }\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+            try {\n+                Files.deleteIfExists(output);\n+            } catch (IOException ignored) {}\n+        }\n+\n+        return null;\n+    }\n+\n+    private static ByteArrayOutputStream getFindCertificateOutput(String name,\n+                                                                  String keychainName,\n+                                                                  boolean isPEMFormat) {\n@@ -62,1 +174,1 @@\n-        args.add(certificate);\n+        args.add(name);\n@@ -64,1 +176,28 @@\n-        args.add(\"-p\");\n+        if (isPEMFormat) {\n+            args.add(\"-p\");\n+        }\n+        if (keychainName != null && !keychainName.isEmpty()) {\n+            args.add(keychainName);\n+        }\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (PrintStream ps = new PrintStream(baos)) {\n+            ProcessBuilder pb = new ProcessBuilder(args);\n+            IOUtils.exec(pb, false, ps);\n+            return baos;\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+            return null;\n+        }\n+    }\n+\n+    private static String findCertificateSubject(String filename) {\n+        String result = null;\n+\n+        List<String> args = new ArrayList<>();\n+        args.add(\"\/usr\/bin\/openssl\");\n+        args.add(\"x509\");\n+        args.add(\"-noout\");\n+        args.add(\"-subject\");\n+        args.add(\"-in\");\n+        args.add(filename);\n@@ -70,0 +209,16 @@\n+            String output = baos.toString().strip();\n+            \/\/ Example output:\n+            \/\/ subject= \/UID=ABCDABCD\/CN=jpackage.openjdk.java.net (\\xC3\\xB6) (ABCDABCD)\/C=US\n+            \/\/ We need 'CN' value\n+            String [] pairs = output.split(\"\/\");\n+            for (String pair : pairs) {\n+                if (pair.startsWith(\"CN=\")) {\n+                    result = pair.substring(3);\n+                    \/\/ Convert escaped UTF-8 code points to characters\n+                    result = convertHexToChar(result);\n+                    break;\n+                }\n+            }\n+        } catch (IOException ex) {\n+            Log.verbose(ex);\n+        }\n@@ -71,1 +226,2 @@\n-            Path output = Files.createTempFile(\"tempfile\", \".tmp\");\n+        return result;\n+    }\n@@ -73,2 +229,7 @@\n-            Files.copy(new ByteArrayInputStream(baos.toByteArray()),\n-                    output, StandardCopyOption.REPLACE_EXISTING);\n+    \/\/ Certificate name with Unicode will be:\n+    \/\/ Developer ID Application: jpackage.openjdk.java.net (\\xHH\\xHH)\n+    \/\/ Convert UTF-8 code points '\\xHH\\xHH' to character.\n+    private static String convertHexToChar(String input) {\n+        if (input == null || input.isEmpty()) {\n+            return input;\n+        }\n@@ -76,1 +237,2 @@\n-            result = output;\n+        if (!input.contains(\"\\\\x\")) {\n+            return input;\n@@ -78,1 +240,0 @@\n-        catch (IOException ignored) {}\n@@ -80,1 +241,28 @@\n-        return result;\n+        StringBuilder output = new StringBuilder();\n+        try {\n+            int len = input.length();\n+            for (int i = 0; i < len; i++) {\n+                if (input.codePointAt(i) == '\\\\' &&\n+                    (i + 8) <= len &&\n+                    input.codePointAt(i + 1) == 'x' &&\n+                    input.codePointAt(i + 4) == '\\\\' &&\n+                    input.codePointAt(i + 5) == 'x') {\n+                        \/\/ We found '\\xHH\\xHH'\n+                        \/\/ HEX code points to byte array\n+                        byte [] bytes = HexFormat.of().parseHex(\n+                            input.substring(i + 2, i + 4) + input.substring(i + 6, i + 8));\n+                        \/\/ Byte array with UTF-8 code points to character\n+                        output.append(new String(bytes, \"UTF-8\"));\n+                        i += 7; \/\/ Skip '\\xHH\\xHH'\n+                } else {\n+                    output.appendCodePoint(input.codePointAt(i));\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Log.verbose(ex);\n+            \/\/ We will consider any excpetions during conversion as\n+            \/\/ certificate not found.\n+            return null;\n+        }\n+\n+        return output.toString();\n@@ -83,1 +271,1 @@\n-    private static Date findCertificateDate(String filename) {\n+    private Date findCertificateDate(String filename) {\n@@ -110,1 +298,1 @@\n-    private static boolean verifyCertificate(String certificate) {\n+    private boolean verifyCertificate(String certificate) {\n@@ -118,1 +306,1 @@\n-                file = findCertificate(certificate);\n+                file = getFindCertificateOutputPEM(certificate, null);\n@@ -124,2 +312,1 @@\n-            }\n-            finally {\n+            } finally {\n@@ -127,1 +314,1 @@\n-                    Files.delete(file);\n+                    Files.deleteIfExists(file);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacCertificate.java","additions":204,"deletions":17,"binary":false,"changes":221,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n@@ -119,1 +119,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,8 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public void test(boolean doSign) throws Exception {\n-        SigningCheck.checkCertificates();\n+    @Parameter({\"true\", \"0\"}) \/\/ ({\"sign or not\", \"certificate index\"})\n+    @Parameter({\"true\", \"1\"})\n+    @Parameter({\"false\", \"-1\"})\n+    public void test(String... testArgs) throws Exception {\n+        boolean doSign = Boolean.parseBoolean(testArgs[0]);\n+        int certIndex = Integer.parseInt(testArgs[1]);\n+\n+        SigningCheck.checkCertificates(certIndex);\n@@ -71,3 +75,5 @@\n-            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+            cmd.addArguments(\"--mac-sign\",\n+                    \"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(certIndex),\n+                    \"--mac-signing-keychain\",\n+                    SigningBase.getKeyChain());\n@@ -80,1 +86,1 @@\n-        SigningBase.verifyCodesign(launcherPath, doSign);\n+        SigningBase.verifyCodesign(launcherPath, doSign, certIndex);\n@@ -83,1 +89,1 @@\n-        SigningBase.verifyCodesign(testALPath, doSign);\n+        SigningBase.verifyCodesign(testALPath, doSign, certIndex);\n@@ -86,1 +92,1 @@\n-        SigningBase.verifyCodesign(appImage, doSign);\n+        SigningBase.verifyCodesign(appImage, doSign, certIndex);\n@@ -88,1 +94,1 @@\n-            SigningBase.verifySpctl(appImage, \"exec\");\n+            SigningBase.verifySpctl(appImage, \"exec\", certIndex);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n@@ -78,3 +78,5 @@\n-            appImageCmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+            appImageCmd.addArguments(\"--mac-sign\",\n+                    \"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n+                    \"--mac-signing-keychain\",\n+                    SigningBase.getKeyChain());\n@@ -98,2 +100,3 @@\n-            .addArguments(\"--mac-signing-key-user-name\", SigningBase.DEV_NAME)\n-            .addArguments(\"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+            .addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n+            .addArguments(\"--mac-signing-keychain\", SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTwoStepsTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifySpctl(outputBundle, \"install\", SigningBase.DEFAULT_INDEX);\n@@ -92,3 +92,3 @@\n-                SigningBase.verifyCodesign(launcherPath, true);\n-                SigningBase.verifyCodesign(dmgImage, true);\n-                SigningBase.verifySpctl(dmgImage, \"exec\");\n+                SigningBase.verifyCodesign(launcherPath, true, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifyCodesign(dmgImage, true, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifySpctl(dmgImage, \"exec\", SigningBase.DEFAULT_INDEX);\n@@ -103,1 +103,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n@@ -114,2 +114,2 @@\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n+                    \"--mac-signing-keychain\", SigningBase.getKeyChain());\n@@ -129,2 +129,3 @@\n-            .addArguments(\"--mac-signing-key-user-name\", SigningBase.DEV_NAME)\n-            .addArguments(\"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+            .addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n+            .addArguments(\"--mac-signing-keychain\", SigningBase.getKeyChain());\n@@ -144,1 +145,1 @@\n-                                SigningBase.DEV_NAME,\n+                                SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n@@ -146,1 +147,1 @@\n-                                SigningBase.KEYCHAIN);\n+                                SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -68,2 +69,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, getCertIndex(cmd));\n+        SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n@@ -84,3 +85,3 @@\n-                SigningBase.verifyCodesign(launcherPath, true);\n-                SigningBase.verifyCodesign(dmgImage, true);\n-                SigningBase.verifySpctl(dmgImage, \"exec\");\n+                SigningBase.verifyCodesign(launcherPath, true, getCertIndex(cmd));\n+                SigningBase.verifyCodesign(dmgImage, true, getCertIndex(cmd));\n+                SigningBase.verifySpctl(dmgImage, \"exec\", getCertIndex(cmd));\n@@ -91,0 +92,5 @@\n+    private static int getCertIndex(JPackageCommand cmd) {\n+        String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n+        return SigningBase.getDevNameIndex(devName);\n+    }\n+\n@@ -92,2 +98,4 @@\n-    public static void test() throws Exception {\n-        SigningCheck.checkCertificates();\n+    @Parameter(\"0\")\n+    @Parameter(\"1\")\n+    public static void test(int certIndex) throws Exception {\n+        SigningCheck.checkCertificates(certIndex);\n@@ -100,2 +108,2 @@\n-                            \"--mac-signing-key-user-name\", SigningBase.DEV_NAME,\n-                            \"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+                            \"--mac-signing-key-user-name\", SigningBase.getDevName(certIndex),\n+                            \"--mac-signing-keychain\", SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifySpctl(outputBundle, \"install\", SigningBase.DEFAULT_INDEX);\n@@ -94,2 +94,2 @@\n-                SigningBase.verifyCodesign(launcherPath, isSigned);\n-                SigningBase.verifyCodesign(dmgImage, isSigned);\n+                SigningBase.verifyCodesign(launcherPath, isSigned, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifyCodesign(dmgImage, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -97,1 +97,1 @@\n-                    SigningBase.verifySpctl(dmgImage, \"exec\");\n+                    SigningBase.verifySpctl(dmgImage, \"exec\", SigningBase.DEFAULT_INDEX);\n@@ -107,1 +107,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(0);\n@@ -116,1 +116,1 @@\n-                            SigningBase.DEV_NAME)\n+                            SigningBase.getDevName(0))\n@@ -118,1 +118,1 @@\n-                            SigningBase.KEYCHAIN);\n+                            SigningBase.getKeyChain());\n@@ -130,1 +130,1 @@\n-                                SigningBase.DEV_NAME,\n+                                SigningBase.getDevName(0),\n@@ -132,1 +132,1 @@\n-                                SigningBase.KEYCHAIN);\n+                                SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Arrays;\n@@ -34,5 +35,23 @@\n-    public static String DEV_NAME;\n-    public static String APP_CERT;\n-    public static String INSTALLER_CERT;\n-    public static String KEYCHAIN;\n-    static {\n+    public static int DEFAULT_INDEX = 0;\n+    private static String [] DEV_NAMES = {\n+        \"jpackage.openjdk.java.net\",\n+        \"jpackage.openjdk.java.net (ö)\",\n+    };\n+    private static String DEFAULT_KEYCHAIN = \"jpackagerTest.keychain\";\n+\n+    public static String getDevName(int certIndex) {\n+        \/\/ Always use values from system properties if set\n+        String value = System.getProperty(\"jpackage.mac.signing.key.user.name\");\n+        if (value != null) {\n+            return value;\n+        }\n+\n+        return DEV_NAMES[certIndex];\n+    }\n+\n+    public static int getDevNameIndex(String devName) {\n+        return Arrays.binarySearch(DEV_NAMES, devName);\n+    }\n+\n+    \/\/ Returns 'true' if dev name from DEV_NAMES\n+    public static boolean isDevNameDefault() {\n@@ -40,5 +59,23 @@\n-        DEV_NAME = (value == null) ?  \"jpackage.openjdk.java.net\" : value;\n-        APP_CERT = \"Developer ID Application: \" + DEV_NAME;\n-        INSTALLER_CERT = \"Developer ID Installer: \" + DEV_NAME;\n-        value = System.getProperty(\"jpackage.mac.signing.keychain\");\n-        KEYCHAIN = (value == null) ? \"jpackagerTest.keychain\" : value;\n+        if (value != null) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static String getAppCert(int certIndex) {\n+        return \"Developer ID Application: \" + getDevName(certIndex);\n+    }\n+\n+    public static String getInstallerCert(int certIndex) {\n+        return \"Developer ID Installer: \" + getDevName(certIndex);\n+    }\n+\n+    public static String getKeyChain() {\n+        \/\/ Always use values from system properties if set\n+        String value = System.getProperty(\"jpackage.mac.signing.keychain\");\n+        if (value != null) {\n+            return value;\n+        }\n+\n+        return DEFAULT_KEYCHAIN;\n@@ -66,1 +103,1 @@\n-            case CodesignCheckType.VERIFY_UNSIGNED:\n+            case VERIFY_UNSIGNED:\n@@ -68,1 +105,1 @@\n-            case CodesignCheckType.VERIFY:\n+            case VERIFY:\n@@ -72,1 +109,1 @@\n-            case CodesignCheckType.DISPLAY:\n+            case DISPLAY:\n@@ -83,1 +120,1 @@\n-            boolean signed, CodesignCheckType type) {\n+            boolean signed, CodesignCheckType type, int certIndex) {\n@@ -87,1 +124,1 @@\n-            case CodesignCheckType.VERIFY:\n+            case VERIFY:\n@@ -93,1 +130,1 @@\n-            case CodesignCheckType.VERIFY_UNSIGNED:\n+            case VERIFY_UNSIGNED:\n@@ -97,1 +134,1 @@\n-            case CodesignCheckType.DISPLAY:\n+            case DISPLAY:\n@@ -99,1 +136,1 @@\n-                    lookupString = \"Authority=\" + APP_CERT;\n+                    lookupString = \"Authority=\" + getAppCert(certIndex);\n@@ -127,1 +164,1 @@\n-            String type, int exitCode) {\n+            String type, int exitCode, int certIndex) {\n@@ -141,1 +178,1 @@\n-            lookupString = \"origin=\" + INSTALLER_CERT;\n+            lookupString = \"origin=\" + getInstallerCert(certIndex);\n@@ -143,1 +180,1 @@\n-            lookupString = \"origin=\" + APP_CERT;\n+            lookupString = \"origin=\" + getAppCert(certIndex);\n@@ -158,1 +195,1 @@\n-    private static void verifyPkgutilResult(List<String> result) {\n+    private static void verifyPkgutilResult(List<String> result, int certIndex) {\n@@ -162,1 +199,1 @@\n-        lookupString = \"1. \" + INSTALLER_CERT;\n+        lookupString = \"1. \" + getInstallerCert(certIndex);\n@@ -166,1 +203,1 @@\n-    public static void verifyCodesign(Path target, boolean signed) {\n+    public static void verifyCodesign(Path target, boolean signed, int certIndex) {\n@@ -168,1 +205,1 @@\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.VERIFY);\n+        verifyCodesignResult(result, target, signed, CodesignCheckType.VERIFY, certIndex);\n@@ -171,1 +208,1 @@\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.DISPLAY);\n+        verifyCodesignResult(result, target, signed, CodesignCheckType.DISPLAY, certIndex);\n@@ -184,1 +221,1 @@\n-        verifyCodesignResult(result, target, false, CodesignCheckType.VERIFY_UNSIGNED);\n+        verifyCodesignResult(result, target, false, CodesignCheckType.VERIFY_UNSIGNED, -1);\n@@ -187,1 +224,1 @@\n-    public static void verifySpctl(Path target, String type) {\n+    public static void verifySpctl(Path target, String type, int certIndex) {\n@@ -191,1 +228,1 @@\n-        verifySpctlResult(output, target, type, result.getExitCode());\n+        verifySpctlResult(output, target, type, result.getExitCode(), certIndex);\n@@ -194,1 +231,1 @@\n-    public static void verifyPkgutil(Path target) {\n+    public static void verifyPkgutil(Path target, int certIndex) {\n@@ -196,1 +233,1 @@\n-        verifyPkgutilResult(result);\n+        verifyPkgutilResult(result, certIndex);\n@@ -202,1 +239,1 @@\n-        SigningBase.verifyCodesign(launcherPath, isSigned);\n+        SigningBase.verifyCodesign(launcherPath, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -207,1 +244,1 @@\n-            SigningBase.verifyCodesign(testALPath, isSigned);\n+            SigningBase.verifyCodesign(testALPath, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -211,1 +248,1 @@\n-        SigningBase.verifyCodesign(appImage, isSigned);\n+        SigningBase.verifyCodesign(appImage, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -213,1 +250,1 @@\n-            SigningBase.verifySpctl(appImage, \"exec\");\n+            SigningBase.verifySpctl(appImage, \"exec\", 0);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":72,"deletions":35,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,11 +36,8 @@\n-    public static void checkCertificates() {\n-        List<String> result = findCertificate(SigningBase.APP_CERT, SigningBase.KEYCHAIN);\n-        String key = findKey(SigningBase.APP_CERT, result);\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.APP_CERT);\n-\n-        result = findCertificate(SigningBase.INSTALLER_CERT, SigningBase.KEYCHAIN);\n-        key = findKey(SigningBase.INSTALLER_CERT, result);\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.INSTALLER_CERT);\n-    }\n+    public static void checkCertificates(int certIndex) {\n+        if (!SigningBase.isDevNameDefault()) {\n+            \/\/ Do not validate user supplied certificates.\n+            \/\/ User supplied certs whose trust is set to \"Use System Defaults\"\n+            \/\/ will not be listed as trusted by dump-trust-settings, so we\n+            \/\/ cannot verify them completely.\n+            return;\n+        }\n@@ -48,5 +45,6 @@\n-    private static List<String> findCertificate(String name, String keyChain) {\n-        List<String> result = new Executor()\n-                .setExecutable(\"\/usr\/bin\/security\")\n-                .addArguments(\"find-certificate\", \"-c\", name, \"-a\", keyChain)\n-                .executeAndGetOutput();\n+        \/\/ Index can be -1 for unsigned tests, but we still skipping test\n+        \/\/ if machine is not configured for signing testing, so default it to\n+        \/\/ SigningBase.DEFAULT_INDEX\n+        if (certIndex <= -1) {\n+            certIndex = SigningBase.DEFAULT_INDEX;\n+        }\n@@ -54,2 +52,5 @@\n-        return result;\n-    }\n+        String key = MacCertificate.findCertificateKey(null,\n+                        SigningBase.getAppCert(certIndex),\n+                        SigningBase.getKeyChain());\n+        validateCertificate(key);\n+        validateCertificateTrust(SigningBase.getAppCert(certIndex));\n@@ -57,14 +58,5 @@\n-    private static String findKey(String name, List<String> result) {\n-        Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n-        Matcher m = p.matcher(result.stream().collect(Collectors.joining()));\n-        if (!m.find()) {\n-            TKit.trace(\"Did not found a key for '\" + name + \"'\");\n-            return null;\n-        }\n-        String matchedKey = m.group(1);\n-        if (m.find()) {\n-            TKit.trace(\"Found more than one key for '\" + name + \"'\");\n-            return null;\n-        }\n-        TKit.trace(\"Using key '\" + matchedKey);\n-        return matchedKey;\n+        key = MacCertificate.findCertificateKey(null,\n+                SigningBase.getInstallerCert(certIndex),\n+                SigningBase.getKeyChain());\n+        validateCertificate(key);\n+        validateCertificateTrust(SigningBase.getInstallerCert(certIndex));\n@@ -88,14 +80,10 @@\n-        \/\/ User supplied certs whose trust is set to \"Use System Defaults\"\n-        \/\/ will not be listed as trusted by dump-trust-settings\n-        if (SigningBase.DEV_NAME.equals(\"jpackage.openjdk.java.net\")) {\n-            List<String> result = new Executor()\n-                    .setExecutable(\"\/usr\/bin\/security\")\n-                    .addArguments(\"dump-trust-settings\")\n-                    .executeWithoutExitCodeCheckAndGetOutput();\n-            result.stream().forEachOrdered(TKit::trace);\n-            TKit.assertTextStream(name)\n-                    .predicate((line, what) -> line.trim().endsWith(what))\n-                    .orElseThrow(() -> TKit.throwSkippedException(\n-                            \"Certifcate not trusted by current user: \" + name))\n-                    .apply(result.stream());\n-        }\n+        List<String> result = new Executor()\n+                .setExecutable(\"\/usr\/bin\/security\")\n+                .addArguments(\"dump-trust-settings\")\n+                .executeWithoutExitCodeCheckAndGetOutput();\n+        result.stream().forEachOrdered(TKit::trace);\n+        TKit.assertTextStream(name)\n+                .predicate((line, what) -> line.trim().endsWith(what))\n+                .orElseThrow(() -> TKit.throwSkippedException(\n+                        \"Certifcate not trusted by current user: \" + name))\n+                .apply(result.stream());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningCheck.java","additions":35,"deletions":47,"binary":false,"changes":82,"status":"modified"}]}