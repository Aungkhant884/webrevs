{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.reflect.Constructor;\n@@ -62,0 +63,2 @@\n+    static final Constructor<?> constructorConst;\n+    static final Object[] constructorArgs;\n@@ -67,0 +70,1 @@\n+    static Constructor<?> constructorVar;\n@@ -72,0 +76,2 @@\n+    static Constructor<?>[] constructorsPoly;\n+    static Object[][] constructorsArgsPoly;\n@@ -75,4 +81,2 @@\n-            staticMethodConst = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumStatic\", int.class, int.class);\n-            staticMethodVar = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumStatic\", int.class, int.class);\n-            instanceMethodConst = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumInstance\", int.class, int.class);\n-            instanceMethodVar = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumInstance\", int.class, int.class);\n+            staticMethodConst = staticMethodVar = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumStatic\", int.class, int.class);\n+            instanceMethodConst = instanceMethodVar = ReflectionSpeedBenchmark.class.getDeclaredMethod(\"sumInstance\", int.class, int.class);\n@@ -80,4 +84,5 @@\n-            staticFieldConst = ReflectionSpeedBenchmark.class.getDeclaredField(\"staticField\");\n-            staticFieldVar = ReflectionSpeedBenchmark.class.getDeclaredField(\"staticField\");\n-            instanceFieldConst = ReflectionSpeedBenchmark.class.getDeclaredField(\"instanceField\");\n-            instanceFieldVar = ReflectionSpeedBenchmark.class.getDeclaredField(\"instanceField\");\n+            staticFieldConst = staticFieldVar = ReflectionSpeedBenchmark.class.getDeclaredField(\"staticField\");\n+            instanceFieldConst = instanceFieldVar = ReflectionSpeedBenchmark.class.getDeclaredField(\"instanceField\");\n+\n+            constructorConst = constructorVar = NestedConstruction.class.getDeclaredConstructor();\n+            constructorArgs = new Object[0];\n@@ -89,0 +94,6 @@\n+\n+            constructorsPoly = NestedConstruction.class.getDeclaredConstructors();\n+            constructorsArgsPoly = new Object[constructorsPoly.length][];\n+            for (int i = 0; i < constructorsPoly.length; i++) {\n+                constructorsArgsPoly[i] = new Object[constructorsPoly[i].getParameterCount()];\n+            }\n@@ -240,0 +251,19 @@\n+    public static class NestedConstruction {\n+        \/\/ # of constructors must be 2^N\n+        public NestedConstruction() {}\n+\n+        public NestedConstruction(Void p1) {}\n+\n+        public NestedConstruction(Void p1, Void p2) {}\n+\n+        public NestedConstruction(Void p1, Void p2, Void p3) {}\n+\n+        public NestedConstruction(Void p1, Void p2, Void p3, Void p4) {}\n+\n+        public NestedConstruction(Void p1, Void p2, Void p3, Void p4, Void p5) {}\n+\n+        public NestedConstruction(Void p1, Void p2, Void p3, Void p4, Void p5, Void p6) {}\n+\n+        public NestedConstruction(Void p1, Void p2, Void p3, Void p4, Void p5, Void p6, Void p7) {}\n+    }\n+\n@@ -379,0 +409,30 @@\n+\n+    \/\/ constructors\n+\n+    @Benchmark\n+    public Object constructorConst() {\n+        try {\n+            return constructorConst.newInstance(constructorArgs);\n+        } catch (ReflectiveOperationException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    @Benchmark\n+    public Object constructorVar() {\n+        try {\n+            return constructorVar.newInstance(constructorArgs);\n+        } catch (ReflectiveOperationException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    @Benchmark\n+    public Object constructorPoly() {\n+        try {\n+            int i = nextRnd() & (constructorsPoly.length - 1);\n+            return constructorsPoly[i].newInstance(constructorsArgsPoly[i]);\n+        } catch (ReflectiveOperationException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/ReflectionSpeedBenchmark.java","additions":68,"deletions":8,"binary":false,"changes":76,"status":"modified"}]}