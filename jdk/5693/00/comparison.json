{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 6907760 6929532\n+ * @bug 6907760 6929532 8174819\n@@ -40,0 +40,2 @@\n+import java.util.stream.Collectors;\n+\n@@ -109,0 +111,1 @@\n+            System.out.println(\"Polling retrieved \" + events.size() + \" events\");\n@@ -126,1 +129,1 @@\n-            key = watcher.poll(2, TimeUnit.SECONDS);\n+            key = watcher.poll(15, TimeUnit.SECONDS);\n@@ -134,0 +137,2 @@\n+            \/\/ the additional polling here is just for diagnostics and doesn't\n+            \/\/ change the test result (which is a failed test)\n@@ -143,0 +148,6 @@\n+                \/\/ count for each kind of event\n+                Map<WatchEvent.Kind, Long> countPerEventType = events.stream()\n+                        .collect(Collectors.groupingBy(WatchEvent::kind, Collectors.counting()));\n+                System.err.println(\"After extra polling, found:\");\n+                countPerEventType.forEach((kind, num)\n+                        -> System.err.println(num + \" events of type \" + kind));\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/LotsOfEvents.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}