{"files":[{"patch":"@@ -57,0 +57,1 @@\n+        CATEGORIES_ORDER.add(Category.IMAGE_TRANSFORMER);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImagePluginConfiguration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,0 +105,7 @@\n+                    if (level.length() == 5 && level.startsWith(\"zip-\")) {\n+                        try {\n+                            int zipLevel = Integer.parseInt(level.substring(4));\n+                            zip = new ZipPlugin(resFilter, zipLevel);\n+                            break;\n+                        } catch (NumberFormatException ignored) {}\n+                    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+    private static final int DEFAULT_COMPRESSION = 6;\n+    private final int compressionLevel;\n+\n@@ -57,0 +60,4 @@\n+        this(predicate, DEFAULT_COMPRESSION);\n+    }\n+\n+    ZipPlugin(Predicate<String> predicate, int compressionLevel) {\n@@ -59,0 +66,1 @@\n+        this.compressionLevel = compressionLevel;\n@@ -76,2 +84,2 @@\n-    static byte[] compress(byte[] bytesIn) {\n-        Deflater deflater = new Deflater();\n+    static byte[] compress(byte[] bytesIn, int compressionLevel) {\n+        Deflater deflater = new Deflater(compressionLevel);\n@@ -107,1 +115,1 @@\n-                compressed = compress(resource.contentBytes());\n+                compressed = compress(resource.contentBytes(), this.compressionLevel);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -64,1 +64,3 @@\n-        PACKAGER(\"PACKAGER\");\n+        PACKAGER(\"PACKAGER\"),\n+\n+        IMAGE_TRANSFORMER(\"IMAGE_TRANSFORMER\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/plugin\/Plugin.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-compress.argument=<0|1|2>[:filter=<pattern-list>]\n+compress.argument=<0|1|2|zip-[0-9]>[:filter=<pattern-list>]\n@@ -65,6 +65,9 @@\n-Compress all resources in the output image.\\n\\\n-Level 0: No compression\\n\\\n-Level 1: Constant string sharing\\n\\\n-Level 2: ZIP.\\n\\\n-An optional <pattern-list> filter can be specified to list the pattern of\\n\\\n-files to be included.\n+Compression to use in compressing resources:\\n\\\n+Accepted values are:\\n\\\n+zip-[0-9], where zip-0 provides no\\n\\\n+compression, and zip-9 provides the\\n\\\n+best compression. Default is zip-6.\\n\\\n+Deprecated values to be removed in a future release:\\n\\\n+0:  No compression. Equivalent to zip-0.\\n\\\n+1:  Constant string sharing\\n\\\n+2:  Equivalent to zip-6.\n@@ -73,21 +76,10 @@\n-\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n-\\                            Compress all resources in the output image.\\n\\\n-\\                            Level 0: No compression\\n\\\n-\\                            Level 1: Constant string sharing\\n\\\n-\\                            Level 2: ZIP.\\n\\\n-\\                            An optional <pattern-list> filter can be\\n\\\n-\\                            specified to list the pattern of \\n\\\n-\\                            files to be included.\n-\n-compact-cp.argument=<resource paths>\n-\n-compact-cp.description=Constant Pool strings sharing.\\n\\\n-By default, all resources are compressed. You can express the set \\n\\\n-of resources to compress or not compress (use ^ for negation).\n-\n-compact-cp.usage=\\\n-\\ --compact-cp <resource paths>\\n\\\n-\\                             Constant Pool strings sharing.\\n\\\n-\\                             By default, all resources are compressed.\\n\\\n-\\                             You can express the set of resources to\\n\\\n-\\                             compress or not compress (use ^ for negation).\n+\\  --compress <compress>     Compression to use in compressing resources:\\n\\\n+\\                            Accepted values are:\\n\\\n+\\                            zip-[0-9], where zip-0 provides no\\n\\\n+\\                            compression, and zip-9 provides the\\n\\\n+\\                            best compression. Default is zip-6.\\n\\\n+\\                            Deprecated values to be removed in a future release:\\n\\\n+\\                            0:  No compression. Equivalent to zip-0.\\n\\\n+\\                            1:  Constant string sharing\\n\\\n+\\                            2:  Equivalent to zip-6.\n+\n@@ -326,4 +318,9 @@\n-\\  -c, --compress=<0|1|2>                Enable compression of resources:\\n\\\n-\\                                          Level 0: No compression\\n\\\n-\\                                          Level 1: Constant string sharing\\n\\\n-\\                                          Level 2: ZIP\n+\\      --compress <compress>             Compression to use in compressing resources:\\n\\\n+\\                                        Accepted values are:\\n\\\n+\\                                        zip-[0-9], where zip-0 provides no\\n\\\n+\\                                        compression, and zip-9 provides the\\n\\\n+\\                                        best compression. Default is zip-6.\\n\\\n+\\                                        Deprecated values to be removed in a future release:\\n\\\n+\\                                        0:  No compression. Equivalent to zip-0.\\n\\\n+\\                                        1:  Constant String Sharing\\n\\\n+\\                                        2:  Equivalent to zip-6.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":29,"deletions":32,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -149,0 +149,59 @@\n+\n+        \/\/ compress level zip-0 == no compression\n+        Properties optionsZip0 = new Properties();\n+        DefaultCompressPlugin compressPluginZip0 = new DefaultCompressPlugin();\n+        options0.setProperty(compressPluginZip0.getName(), \"zip-0\");\n+        checkCompress(classes, compressPlugin,\n+                optionsZip0,\n+                new ResourceDecompressorFactory[]{\n+                });\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        }\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels + filter\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(DefaultCompressPlugin.FILTER, \"**Exception.class\");\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    }, Collections.singletonList(\".*Exception.class\"));\n+        }\n+\n+        testBadCompressProps(classes, \"zip-10\");\n+        testBadCompressProps(classes, \"zip-badarg\");\n+        testBadCompressProps(classes, \"zip-10000000\");\n+\n+    }\n+\n+    private void testBadCompressProps(ResourcePool classes, String compressArg) throws Exception {\n+        Properties badProps = new Properties();\n+        DefaultCompressPlugin compressPlugin = new DefaultCompressPlugin();\n+        badProps.setProperty(compressPlugin.getName(), compressArg);\n+        try {\n+            checkCompress(classes, compressPlugin,\n+                    badProps,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage().contains(\"Invalid compression level\")) {\n+                return;\n+            }\n+        }\n+\n+        throw new Exception(\"Expected compression IAE with \" + compressArg + \" but didn't get one.\");\n+\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CompressorPluginTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}