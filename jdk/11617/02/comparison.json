{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.tools.jlink.internal.plugins;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import jdk.tools.jlink.internal.ResourcePoolManager.ResourcePoolImpl;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+import jdk.tools.jlink.internal.ImagePluginStack;\n+import jdk.tools.jlink.internal.ResourcePoolManager;\n+import jdk.tools.jlink.internal.ResourcePrevisitor;\n+import jdk.tools.jlink.internal.StringTable;\n+\n+\/**\n+ *\n+ * ZIP and String Sharing compression plugin\n+ *\/\n+public final class CompactConstantPoolsPlugin extends AbstractPlugin implements ResourcePrevisitor {\n+\n+    private static final String FILTER = \"filter\";\n+    private StringSharingPlugin ss;\n+\n+    public CompactConstantPoolsPlugin() {\n+        super(\"compact-constant-pools\");\n+    }\n+\n+    @Override\n+    public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+        return ss.transform(in, out);\n+    }\n+\n+    @Override\n+    public void previsit(ResourcePool resources, StringTable strings) {\n+        if (ss != null) {\n+            ss.previsit(resources, strings);\n+        }\n+    }\n+\n+    @Override\n+    public Category getType() {\n+        return Category.COMPRESSOR;\n+    }\n+\n+    @Override\n+    public boolean hasArguments() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, String> config) {\n+        ResourceFilter resFilter = ResourceFilter.includeFilter(config.get(FILTER));\n+        ss = new StringSharingPlugin(resFilter);\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/CompactConstantPoolsPlugin.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -105,0 +105,7 @@\n+                    if (level.length() == 5 && level.startsWith(\"zip-\")) {\n+                        try {\n+                            int zipLevel = Integer.parseInt(level.substring(4));\n+                            zip = new ZipPlugin(resFilter, zipLevel);\n+                            break;\n+                        } catch (NumberFormatException ignored) {}\n+                    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+    private static final int DEFAULT_COMPRESSION = 6;\n+    private final int compressionLevel;\n+\n@@ -57,0 +60,4 @@\n+        this(predicate, DEFAULT_COMPRESSION);\n+    }\n+\n+    ZipPlugin(Predicate<String> predicate, int compressionLevel) {\n@@ -59,0 +66,1 @@\n+        this.compressionLevel = compressionLevel;\n@@ -76,2 +84,2 @@\n-    static byte[] compress(byte[] bytesIn) {\n-        Deflater deflater = new Deflater();\n+    static byte[] compress(byte[] bytesIn, int compressionLevel) {\n+        Deflater deflater = new Deflater(compressionLevel);\n@@ -107,1 +115,1 @@\n-                compressed = compress(resource.contentBytes());\n+                compressed = compress(resource.contentBytes(), this.compressionLevel);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-compress.argument=<0|1|2>[:filter=<pattern-list>]\n+compress.argument=<0|1|2|zip-[0-9]>[:filter=<pattern-list>]\n@@ -65,6 +65,9 @@\n-Compress all resources in the output image.\\n\\\n-Level 0: No compression\\n\\\n-Level 1: Constant string sharing\\n\\\n-Level 2: ZIP.\\n\\\n-An optional <pattern-list> filter can be specified to list the pattern of\\n\\\n-files to be included.\n+Compression to use in compressing resources:\\n\\\n+Accepted values are:\\n\\\n+zip-[0-9], where zip-0 provides no\\n\\\n+compression, and zip-9 provides the\\n\\\n+best compression. Default is zip-6.\\n\\\n+Deprecated values:\\n\\\n+0:  No compression. Equivalent to zip-0.\\n\\\n+1:  Equivalent to --compact-constant-pools\\n\\\n+2:  Equivalent to zip-6.\n@@ -73,8 +76,9 @@\n-\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n-\\                            Compress all resources in the output image.\\n\\\n-\\                            Level 0: No compression\\n\\\n-\\                            Level 1: Constant string sharing\\n\\\n-\\                            Level 2: ZIP.\\n\\\n-\\                            An optional <pattern-list> filter can be\\n\\\n-\\                            specified to list the pattern of \\n\\\n-\\                            files to be included.\n+\\  --compress <compress>     Compression to use in compressing resources:\\n\\\n+\\                            Accepted values are:\\n\\\n+\\                            zip-[0-9], where zip-0 provides no\\n\\\n+\\                            compression, and zip-9 provides the\\n\\\n+\\                            best compression. Default is zip-6.\\n\\\n+\\                            Deprecated values:\\n\\\n+\\                            0:  No compression. Equivalent to zip-0.\\n\\\n+\\                            1:  Equivalent to --compact-constant-pools\\n\\\n+\\                            2:  Equivalent to zip-6.\n@@ -326,4 +330,9 @@\n-\\  -c, --compress=<0|1|2>                Enable compression of resources:\\n\\\n-\\                                          Level 0: No compression\\n\\\n-\\                                          Level 1: Constant string sharing\\n\\\n-\\                                          Level 2: ZIP\n+\\      --compress <compress>             Compression to use in compressing resources:\\n\\\n+\\                                        Accepted values are:\\n\\\n+\\                                        zip-[0-9], where zip-0 provides no\\n\\\n+\\                                        compression, and zip-9 provides the\\n\\\n+\\                                        best compression. Default is zip-6.\\n\\\n+\\                                        Deprecated values:\\n\\\n+\\                                        0:  No compression. Equivalent to zip-0.\\n\\\n+\\                                        1:  Equivalent to --compact-constant-pools\\n\\\n+\\                                        2:  Equivalent to zip-6.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -84,1 +84,2 @@\n-        jdk.tools.jlink.internal.plugins.SaveJlinkArgfilesPlugin;\n+        jdk.tools.jlink.internal.plugins.SaveJlinkArgfilesPlugin,\n+        jdk.tools.jlink.internal.plugins.CompactConstantPoolsPlugin;\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -149,0 +149,59 @@\n+\n+        \/\/ compress level zip-0 == no compression\n+        Properties optionsZip0 = new Properties();\n+        DefaultCompressPlugin compressPluginZip0 = new DefaultCompressPlugin();\n+        options0.setProperty(compressPluginZip0.getName(), \"zip-0\");\n+        checkCompress(classes, compressPlugin,\n+                optionsZip0,\n+                new ResourceDecompressorFactory[]{\n+                });\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        }\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels + filter\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(DefaultCompressPlugin.FILTER, \"**Exception.class\");\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    }, Collections.singletonList(\".*Exception.class\"));\n+        }\n+\n+        testBadCompressProps(classes, \"zip-10\");\n+        testBadCompressProps(classes, \"zip-badarg\");\n+        testBadCompressProps(classes, \"zip-10000000\");\n+\n+    }\n+\n+    private void testBadCompressProps(ResourcePool classes, String compressArg) throws Exception {\n+        Properties badProps = new Properties();\n+        DefaultCompressPlugin compressPlugin = new DefaultCompressPlugin();\n+        badProps.setProperty(compressPlugin.getName(), compressArg);\n+        try {\n+            checkCompress(classes, compressPlugin,\n+                    badProps,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage().contains(\"Invalid compression level\")) {\n+                return;\n+            }\n+        }\n+\n+        throw new Exception(\"Expected compression IAE with \" + compressArg + \" but didn't get one.\");\n+\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CompressorPluginTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}