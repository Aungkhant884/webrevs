{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"jvm_io.h\"\n@@ -237,2 +238,1 @@\n-  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n-    vmIntrinsicID id = *it;\n+  for (auto id : EnumRange<vmIntrinsicID>{}) {\n@@ -507,1 +507,1 @@\n-  if (C->directive()->BreakAtCompileOption) {\n+  if (env()->break_at_compile()) {\n@@ -771,3 +771,3 @@\n-  \/\/ If LCM, GCM, or IGVN are randomized for stress testing, seed\n-  \/\/ random number generation and log the seed for repeatability.\n-  if (StressLCM || StressGCM || StressIGVN) {\n+  \/\/ If any phase is randomized for stress testing, seed random number\n+  \/\/ generation and log the seed for repeatability.\n+  if (StressLCM || StressGCM || StressIGVN || StressCCP) {\n@@ -778,2 +778,0 @@\n-    } else if (FLAG_IS_DEFAULT(StressSeed)) {\n-      tty->print_cr(\"Warning:  set +LogCompilation to log the seed.\");\n@@ -2112,1 +2110,1 @@\n-  if (_directive->BreakAtCompileOption) {\n+  if (env()->break_at_compile()) {\n@@ -2760,1 +2758,1 @@\n-    debug_only( cfg.verify(); )\n+    cfg.verify();\n@@ -4197,6 +4195,1 @@\n-    \/\/ Watch out: The memory initialized by the constructor call PrintInliningBuffer()\n-    \/\/ will be copied into the only initial element. The default destructor of\n-    \/\/ PrintInliningBuffer will be called when leaving the scope here. If it\n-    \/\/ would destuct the  enclosed stringStream _print_inlining_list[0]->_ss\n-    \/\/ would be destructed, too!\n-    _print_inlining_list = new (comp_arena())GrowableArray<PrintInliningBuffer>(comp_arena(), 1, 1, PrintInliningBuffer());\n+    _print_inlining_list = new (comp_arena())GrowableArray<PrintInliningBuffer*>(comp_arena(), 1, 1, new PrintInliningBuffer());\n@@ -4222,1 +4215,1 @@\n-  _print_inlining_list->at(_print_inlining_idx).ss()->write(_print_inlining_stream->base(), _print_inlining_stream->size());\n+  _print_inlining_list->at(_print_inlining_idx)->ss()->write(_print_inlining_stream->base(), _print_inlining_stream->size());\n@@ -4229,1 +4222,1 @@\n-  _print_inlining_list->insert_before(_print_inlining_idx, PrintInliningBuffer());\n+  _print_inlining_list->insert_before(_print_inlining_idx, new PrintInliningBuffer());\n@@ -4232,1 +4225,1 @@\n-Compile::PrintInliningBuffer& Compile::print_inlining_current() {\n+Compile::PrintInliningBuffer* Compile::print_inlining_current() {\n@@ -4239,3 +4232,3 @@\n-      if (print_inlining_current().cg() != cg &&\n-          (print_inlining_current().cg() != NULL ||\n-           print_inlining_current().ss()->size() != 0)) {\n+      if (print_inlining_current()->cg() != cg &&\n+          (print_inlining_current()->cg() != NULL ||\n+           print_inlining_current()->ss()->size() != 0)) {\n@@ -4245,1 +4238,1 @@\n-      print_inlining_current().set_cg(cg);\n+      print_inlining_current()->set_cg(cg);\n@@ -4247,1 +4240,1 @@\n-      if (print_inlining_current().cg() != NULL) {\n+      if (print_inlining_current()->cg() != NULL) {\n@@ -4260,1 +4253,1 @@\n-      if (_print_inlining_list->adr_at(i)->cg() == cg) {\n+      if (_print_inlining_list->at(i)->cg() == cg) {\n@@ -4272,1 +4265,1 @@\n-    assert(print_inlining_current().cg() == cg, \"wrong entry\");\n+    assert(print_inlining_current()->cg() == cg, \"wrong entry\");\n@@ -4274,1 +4267,1 @@\n-    _print_inlining_list->at_put(_print_inlining_idx, PrintInliningBuffer());\n+    _print_inlining_list->at_put(_print_inlining_idx, new PrintInliningBuffer());\n@@ -4276,1 +4269,1 @@\n-    print_inlining_current().set_cg(cg);\n+    print_inlining_current()->set_cg(cg);\n@@ -4291,2 +4284,4 @@\n-      ss.print(\"%s\", _print_inlining_list->adr_at(i)->ss()->as_string());\n-      _print_inlining_list->at(i).freeStream();\n+      PrintInliningBuffer* pib = _print_inlining_list->at(i);\n+      ss.print(\"%s\", pib->ss()->as_string());\n+      delete pib;\n+      DEBUG_ONLY(_print_inlining_list->at_put(i, NULL));\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":26,"deletions":31,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -571,1 +571,1 @@\n-                                           jvms->bci(), no_memory_effects);\n+                                           no_memory_effects);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}