{"files":[{"patch":"@@ -941,0 +941,3 @@\n+          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n+          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n+          $env:GTEST = cygpath \"$env:GITHUB_WORKSPACE\/gtest\" ;\n@@ -947,3 +950,3 @@\n-          --with-boot-jdk=\"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          --with-jtreg=\"$HOME\/jtreg\"\n-          --with-gtest=\"$env:GITHUB_WORKSPACE\/gtest\"\n+          --with-boot-jdk=\"$env:BOOT_JDK\"\n+          --with-jtreg=\"$env:JT_HOME\"\n+          --with-gtest=\"$env:GTEST\"\n","filename":".github\/workflows\/submit.yml","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-$(CLASSLIST_FILE): $(INTERIM_IMAGE_DIR)\/bin\/java$(EXE_SUFFIX) $(CLASSLIST_JAR)\n+$(CLASSLIST_FILE): $(INTERIM_IMAGE_DIR)\/bin\/java$(EXECUTABLE_SUFFIX) $(CLASSLIST_JAR)\n@@ -97,1 +97,1 @@\n-$(JLI_TRACE_FILE): $(INTERIM_IMAGE_DIR)\/bin\/java$(EXE_SUFFIX) $(CLASSLIST_JAR)\n+$(JLI_TRACE_FILE): $(INTERIM_IMAGE_DIR)\/bin\/java$(EXECUTABLE_SUFFIX) $(CLASSLIST_JAR)\n","filename":"make\/GenerateLinkOptData.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-JIMAGE_TARGET_FILE := bin\/java$(EXE_SUFFIX)\n+JIMAGE_TARGET_FILE := bin\/java$(EXECUTABLE_SUFFIX)\n","filename":"make\/InterimImage.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-# Setup _NT_SYMBOL_PATH on Windows\n+# Setup _NT_SYMBOL_PATH on Windows, which points to our pdb files.\n@@ -66,10 +66,5 @@\n-    # Can't use PathList here as it adds quotes around the value.\n-    _NT_SYMBOL_PATH := \\\n-        $(subst $(SPACE),;,$(strip \\\n-            $(foreach p, $(sort $(dir $(wildcard \\\n-                $(addprefix $(SYMBOLS_IMAGE_DIR)\/bin\/, *.pdb *\/*.pdb)))), \\\n-              $(call FixPath, $p) \\\n-            ) \\\n-        ))\n-    export _NT_SYMBOL_PATH\n-    $(call LogDebug, Rewriting _NT_SYMBOL_PATH to $(_NT_SYMBOL_PATH))\n+    SYMBOL_PATH := $(call PathList, $(sort $(patsubst %\/, %, $(dir $(wildcard \\\n+        $(addprefix $(SYMBOLS_IMAGE_DIR)\/bin\/, *.pdb *\/*.pdb))))))\n+    export _NT_SYMBOL_PATH := $(subst \\\\,\\, $(call FixPath, \\\n+        $(subst $(DQUOTE),, $(SYMBOL_PATH))))\n+    $(call LogDebug, Setting _NT_SYMBOL_PATH to $(_NT_SYMBOL_PATH))\n","filename":"make\/RunTests.gmk","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -192,6 +192,1 @@\n-  ifeq ($(wildcard $(TEST_IMAGE_DIR)\/bin\/fixpath.exe), )\n-    $(info Error: fixpath is missing from test image '$(TEST_IMAGE_DIR)')\n-    $(error Cannot continue.)\n-  endif\n-  FIXPATH := $(TEST_IMAGE_DIR)\/bin\/fixpath.exe -c\n-  PATH_SEP:=;\n+  FIXPATH := $(BASH) $(TOPDIR)\/make\/scripts\/fixpath.sh exec\n@@ -200,1 +195,0 @@\n-  PATH_SEP:=:\n@@ -283,1 +277,0 @@\n-    PATH_SEP := $(PATH_SEP), \\\n","filename":"make\/RunTestsPrebuilt.gmk","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -119,1 +119,0 @@\n-JARSIGNER_CMD := $(BOOT_JDK)\/bin\/jarsigner\n@@ -123,1 +122,0 @@\n-JAVA_DETACH := $(FIXPATH) $(FIXPATH_DETACH_FLAG) $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n@@ -128,1 +126,0 @@\n-JARSIGNER := $(FIXPATH) $(JARSIGNER_CMD)\n@@ -169,1 +166,0 @@\n-UNIQ := uniq\n@@ -180,1 +176,1 @@\n-  CYGPATH := cygpath\n+  PATHTOOL := cygpath\n","filename":"make\/RunTestsPrebuiltSpec.gmk","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,14 +33,0 @@\n-ifeq ($(call isTargetOs, windows), true)\n-  FIXPATH_COPY := $(TEST_IMAGE_DIR)\/bin\/fixpath.exe\n-\n-  $(FIXPATH_COPY): $(firstword $(FIXPATH))\n-\t$(call install-file)\n-\n-  FIXPATH_WORKSPACE_ROOT := $(call FixPath, $(WORKSPACE_ROOT))\n-  FIXPATH_OUTPUTDIR := $(call FixPath, $(OUTPUTDIR))\n-else\n-  FIXPATH_WORKSPACE_ROOT := $(WORKSPACE_ROOT)\n-  FIXPATH_OUTPUTDIR := $(OUTPUTDIR)\n-endif\n-\n-\n@@ -52,2 +38,2 @@\n-\t$(ECHO) \"build.workspace.root=$(FIXPATH_WORKSPACE_ROOT)\" >> $@\n-\t$(ECHO) \"build.output.root=$(FIXPATH_OUTPUTDIR)\" >> $@\n+\t$(ECHO) \"build.workspace.root=$(call FixPath, $(WORKSPACE_ROOT))\" >> $@\n+\t$(ECHO) \"build.output.root=$(call FixPath, $(OUTPUTDIR))\" >> $@\n@@ -55,1 +41,1 @@\n-prepare-test-image: $(FIXPATH_COPY) $(BUILD_INFO_PROPERTIES)\n+prepare-test-image: $(BUILD_INFO_PROPERTIES)\n","filename":"make\/TestImage.gmk","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -73,6 +73,1 @@\n-    PATH_SEP=\";\"\n-    EXE_SUFFIX=\".exe\"\n-    BASIC_CHECK_PATHS_WINDOWS\n-  else\n-    PATH_SEP=\":\"\n-    EXE_SUFFIX=\"\"\n+    BASIC_SETUP_PATHS_WINDOWS\n@@ -80,2 +75,0 @@\n-  AC_SUBST(PATH_SEP)\n-  AC_SUBST(EXE_SUFFIX)\n@@ -84,0 +77,2 @@\n+  BASIC_WINDOWS_VERIFY_DIR($TOPDIR, source)\n+  UTIL_FIXUP_PATH(TOPDIR)\n@@ -87,5 +82,0 @@\n-  AC_SUBST(CONFIGURE_START_DIR)\n-\n-  # We can only call UTIL_FIXUP_PATH after BASIC_CHECK_PATHS_WINDOWS.\n-  UTIL_FIXUP_PATH(TOPDIR)\n-  UTIL_FIXUP_PATH(CONFIGURE_START_DIR)\n@@ -94,0 +84,1 @@\n+    BASIC_WINDOWS_VERIFY_DIR($CUSTOM_ROOT, custom root)\n@@ -101,0 +92,3 @@\n+  UTIL_FIXUP_PATH(CONFIGURE_START_DIR)\n+  AC_SUBST(CONFIGURE_START_DIR)\n+\n@@ -237,3 +231,6 @@\n-      # We need to use xcodebuild in the toolchain dir provided by the user, this will\n-      # fall back on the stub binary in \/usr\/bin\/xcodebuild\n-      AC_PATH_PROG([XCODEBUILD], [xcodebuild], [\/usr\/bin\/xcodebuild], [$TOOLCHAIN_PATH])\n+      # We need to use xcodebuild in the toolchain dir provided by the user\n+      UTIL_LOOKUP_PROGS(XCODEBUILD, xcodebuild, $TOOLCHAIN_PATH)\n+      if test x$XCODEBUILD = x; then\n+        # fall back on the stub binary in \/usr\/bin\/xcodebuild\n+        XCODEBUILD=\/usr\/bin\/xcodebuild\n+      fi\n@@ -309,0 +306,1 @@\n+  AC_SUBST(TOOLCHAIN_PATH)\n@@ -383,0 +381,1 @@\n+  BASIC_WINDOWS_VERIFY_DIR($OUTPUTDIR, output)\n@@ -419,12 +418,2 @@\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-      # msys does not have df; use Windows \"net use\" instead.\n-      IS_NETWORK_DISK=`net use | grep \\`pwd -W | cut -d \":\" -f 1 | tr a-z A-Z\\`:`\n-      if test \"x$IS_NETWORK_DISK\" = x; then\n-        $2\n-      else\n-        $3\n-      fi\n-    else\n-      # No df here, say it's local\n-      $2\n-    fi\n+    # No df here, say it's local\n+    $2\n@@ -437,2 +426,2 @@\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      # In WSL, we can only build on a drvfs file system (that is, a mounted real Windows drive)\n+    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl1\"; then\n+      # In WSL1, we can only build on a drvfs file system (that is, a mounted real Windows drive)\n","filename":"make\/autoconf\/basic.m4","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,6 +31,10 @@\n-  # Start with tools that do not need have cross compilation support\n-  # and can be expected to be found in the default PATH. These tools are\n-  # used by configure.\n-\n-  # First are all the simple required tools.\n-  UTIL_REQUIRE_PROGS(BASENAME, basename)\n+  # Bootstrapping: These tools are needed by UTIL_LOOKUP_PROGS\n+  AC_PATH_PROGS(BASENAME, basename)\n+  UTIL_CHECK_NONEMPTY(BASENAME)\n+  AC_PATH_PROGS(DIRNAME, dirname)\n+  UTIL_CHECK_NONEMPTY(DIRNAME)\n+  AC_PATH_PROGS(FILE, file)\n+  UTIL_CHECK_NONEMPTY(FILE)\n+  AC_PATH_PROGS(LDD, ldd)\n+\n+  # First are all the fundamental required tools.\n@@ -40,2 +44,0 @@\n-  UTIL_REQUIRE_PROGS(CMP, cmp)\n-  UTIL_REQUIRE_PROGS(COMM, comm)\n@@ -45,2 +47,1 @@\n-  UTIL_REQUIRE_PROGS(DIFF, [gdiff diff])\n-  UTIL_REQUIRE_PROGS(DIRNAME, dirname)\n+  UTIL_REQUIRE_PROGS(DIFF, gdiff diff)\n@@ -49,1 +50,0 @@\n-  UTIL_REQUIRE_PROGS(FILE, file)\n@@ -51,1 +51,0 @@\n-  UTIL_REQUIRE_PROGS(HEAD, head)\n@@ -54,0 +53,1 @@\n+  UTIL_REQUIRE_PROGS(HEAD, head)\n@@ -57,1 +57,1 @@\n-  UTIL_REQUIRE_PROGS(MKDIR, [gmkdir mkdir])\n+  UTIL_REQUIRE_PROGS(MKDIR, gmkdir mkdir)\n@@ -60,1 +60,1 @@\n-  UTIL_REQUIRE_PROGS(AWK, [gawk nawk awk])\n+  UTIL_REQUIRE_PROGS(AWK, gawk nawk awk)\n@@ -62,1 +62,0 @@\n-  UTIL_REQUIRE_PROGS(READLINK, [greadlink readlink])\n@@ -73,1 +72,0 @@\n-  UTIL_REQUIRE_PROGS(UNIQ, uniq)\n@@ -83,2 +81,4 @@\n-  # Always force rm.\n-  RM=\"$RM -f\"\n+  # Optional tools, we can do without them\n+  UTIL_LOOKUP_PROGS(DF, df)\n+  UTIL_LOOKUP_PROGS(NICE, nice)\n+  UTIL_LOOKUP_PROGS(READLINK, greadlink readlink)\n@@ -86,3 +86,4 @@\n-  # pwd behaves differently on various platforms and some don't support the -L flag.\n-  # Always use the bash builtin pwd to get uniform behavior.\n-  THEPWDCMD=pwd\n+  # These are only needed on some platforms\n+  UTIL_LOOKUP_PROGS(PATHTOOL, cygpath wslpath)\n+  UTIL_LOOKUP_PROGS(LSB_RELEASE, lsb_release)\n+  UTIL_LOOKUP_PROGS(CMD, cmd.exe, $PATH:\/cygdrive\/c\/windows\/system32:\/mnt\/c\/windows\/system32:\/c\/windows\/system32)\n@@ -90,6 +91,3 @@\n-  # These are not required on all platforms\n-  UTIL_PATH_PROGS(CYGPATH, cygpath)\n-  UTIL_PATH_PROGS(WSLPATH, wslpath)\n-  UTIL_PATH_PROGS(DF, df)\n-  UTIL_PATH_PROGS(CPIO, [cpio bsdcpio])\n-  UTIL_PATH_PROGS(NICE, nice)\n+  # For compare.sh only\n+  UTIL_LOOKUP_PROGS(CMP, cmp)\n+  UTIL_LOOKUP_PROGS(UNIQ, uniq)\n@@ -97,2 +95,2 @@\n-  UTIL_PATH_PROGS(LSB_RELEASE, lsb_release)\n-  UTIL_PATH_PROGS(CMD, cmd.exe, $PATH \/cygdrive\/c\/Windows\/System32 \/mnt\/c\/Windows\/System32)\n+  # Always force rm.\n+  RM=\"$RM -f\"\n@@ -133,1 +131,1 @@\n-          elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+          elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys2\"; then\n@@ -135,2 +133,6 @@\n-          elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-            MAKE_EXPECTED_ENV='x86_64-.*-linux-gnu'\n+          elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl1\" || test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl2\"; then\n+            if test \"x$OPENJDK_BUILD_CPU\" = \"xaarch64\"; then\n+              MAKE_EXPECTED_ENV='aarch64-.*-linux-gnu'\n+            else\n+              MAKE_EXPECTED_ENV='x86_64-.*-linux-gnu'\n+            fi\n@@ -188,1 +190,1 @@\n-  UTIL_SETUP_TOOL([MAKE],\n+  UTIL_SETUP_TOOL(MAKE,\n@@ -191,1 +193,1 @@\n-    AC_PATH_PROGS(CHECK_GMAKE, gmake)\n+    UTIL_LOOKUP_PROGS(CHECK_GMAKE, gmake)\n@@ -195,1 +197,1 @@\n-      AC_PATH_PROGS(CHECK_MAKE, make)\n+      UTIL_LOOKUP_PROGS(CHECK_MAKE, make)\n@@ -204,1 +206,1 @@\n-        AC_PATH_PROGS(CHECK_TOOLSDIR_GMAKE, gmake)\n+        UTIL_LOOKUP_PROGS(CHECK_TOOLSDIR_GMAKE, gmake)\n@@ -207,1 +209,1 @@\n-          AC_PATH_PROGS(CHECK_TOOLSDIR_MAKE, make)\n+          UTIL_LOOKUP_PROGS(CHECK_TOOLSDIR_MAKE, make)\n@@ -337,14 +339,7 @@\n-  UTIL_PATH_PROGS(LDD, ldd)\n-  if test \"x$LDD\" = \"x\"; then\n-    # List shared lib dependencies is used for\n-    # debug output and checking for forbidden dependencies.\n-    # We can build without it.\n-    LDD=\"true\"\n-  fi\n-  UTIL_PATH_PROGS(READELF, [greadelf readelf])\n-  UTIL_PATH_PROGS(DOT, dot)\n-  UTIL_PATH_PROGS(HG, hg)\n-  UTIL_PATH_PROGS(GIT, git)\n-  UTIL_PATH_PROGS(STAT, stat)\n-  UTIL_PATH_PROGS(TIME, time)\n-  UTIL_PATH_PROGS(FLOCK, flock)\n+  UTIL_LOOKUP_PROGS(READELF, greadelf readelf)\n+  UTIL_LOOKUP_PROGS(DOT, dot)\n+  UTIL_LOOKUP_PROGS(HG, hg)\n+  UTIL_LOOKUP_PROGS(GIT, git)\n+  UTIL_LOOKUP_PROGS(STAT, stat)\n+  UTIL_LOOKUP_PROGS(TIME, time)\n+  UTIL_LOOKUP_PROGS(FLOCK, flock)\n@@ -353,2 +348,2 @@\n-  UTIL_PATH_PROGS(DTRACE, dtrace, $PATH:\/usr\/sbin)\n-  UTIL_PATH_PROGS(PATCH, [gpatch patch])\n+  UTIL_LOOKUP_PROGS(DTRACE, dtrace, $PATH:\/usr\/sbin)\n+  UTIL_LOOKUP_PROGS(PATCH, gpatch patch)\n@@ -368,1 +363,1 @@\n-    UTIL_PATH_PROGS(CODESIGN, codesign)\n+    UTIL_LOOKUP_PROGS(CODESIGN, codesign)\n@@ -409,1 +404,1 @@\n-    UTIL_REQUIRE_BUILTIN_PROGS(ULIMIT, ulimit)\n+    UTIL_REQUIRE_PROGS(ULIMIT, ulimit)\n@@ -455,1 +450,1 @@\n-  UTIL_PATH_PROGS(PANDOC, pandoc)\n+  UTIL_LOOKUP_PROGS(PANDOC, pandoc)\n","filename":"make\/autoconf\/basic_tools.m4","additions":51,"deletions":56,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-AC_DEFUN([BASIC_CHECK_PATHS_WINDOWS],\n+AC_DEFUN([BASIC_SETUP_PATHS_WINDOWS],\n@@ -29,3 +29,19 @@\n-  SRC_ROOT_LENGTH=`$THEPWDCMD -L|$WC -m`\n-  if test $SRC_ROOT_LENGTH -gt 100; then\n-    AC_MSG_ERROR([Your base path is too long. It is $SRC_ROOT_LENGTH characters long, but only 100 is supported])\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n+    # Clarify if it is wsl1 or wsl2, and use that as OS_ENV from this point forward\n+    $PATHTOOL -w \/ > \/dev\/null 2>&1\n+    if test $? -ne 0; then\n+      # Without Windows access to our root, it's definitely WSL1\n+      OPENJDK_BUILD_OS_ENV=windows.wsl1\n+    else\n+      # This test is not guaranteed, but there is no documented way of\n+      # distinguishing between WSL1 and WSL2. Assume only WSL2 has WSL_INTEROP\n+      # in \/run\/WSL\n+      if test -d \"\/run\/WSL\" ; then\n+        OPENJDK_BUILD_OS_ENV=windows.wsl2\n+      else\n+        OPENJDK_BUILD_OS_ENV=windows.wsl1\n+      fi\n+    fi\n+    # This is a bit silly since we really don't have a target env as such,\n+    # but do it to keep consistency.\n+    OPENJDK_TARGET_OS_ENV=$OPENJDK_BUILD_OS_ENV\n@@ -34,0 +50,58 @@\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys2\"; then\n+    # Must be done prior to calling any commands to avoid mangling of command line\n+    export MSYS2_ARG_CONV_EXCL=\"*\"\n+  fi\n+\n+  AC_MSG_CHECKING([Windows environment type])\n+  WINENV_VENDOR=${OPENJDK_BUILD_OS_ENV#windows.}\n+  AC_MSG_RESULT([$WINENV_VENDOR])\n+\n+  if test \"x$WINENV_VENDOR\" = x; then\n+    AC_MSG_ERROR([Unknown Windows environment. Neither cygwin, msys2, wsl1 nor wsl2 was detected.])\n+  fi\n+\n+  if test \"x$PATHTOOL\" = x; then\n+    AC_MSG_ERROR([Incorrect $WINENV_VENDOR installation. Neither cygpath nor wslpath was found])\n+  fi\n+\n+  if test \"x$CMD\" = x; then\n+    AC_MSG_ERROR([Incorrect Windows\/$WINENV_VENDOR setup. Could not locate cmd.exe])\n+  fi\n+\n+  AC_MSG_CHECKING([$WINENV_VENDOR drive prefix])\n+  WINENV_PREFIX=`$PATHTOOL -u c:\/ | $SED -e 's!\/c\/!!'`\n+  AC_MSG_RESULT(['$WINENV_PREFIX'])\n+  AC_SUBST(WINENV_PREFIX)\n+\n+  AC_MSG_CHECKING([$WINENV_VENDOR root directory as Windows path])\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" != \"xwindows.wsl1\"; then\n+    WINENV_ROOT=`$PATHTOOL -w \/ 2> \/dev\/null`\n+    # msys2 has a trailing backslash; strip it\n+    WINENV_ROOT=${WINENV_ROOT%\\\\}\n+  else\n+    WINENV_ROOT='[[unavailable]]'\n+  fi\n+  AC_MSG_RESULT(['$WINENV_ROOT'])\n+  AC_SUBST(WINENV_ROOT)\n+\n+  AC_MSG_CHECKING([$WINENV_VENDOR temp directory])\n+  WINENV_TEMP_DIR=$($PATHTOOL -u $($CMD \/q \/c echo %TEMP% 2> \/dev\/null) | $TR -d '\\r\\n')\n+  AC_MSG_RESULT([$WINENV_TEMP_DIR])\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl2\"; then\n+    # Don't trust the current directory for WSL2, but change to an OK temp dir\n+    cd \"$WINENV_TEMP_DIR\"\n+    # Bring along confdefs.h or autoconf gets all confused\n+    cp \"$CONFIGURE_START_DIR\/confdefs.h\" \"$WINENV_TEMP_DIR\"\n+  fi\n+\n+  AC_MSG_CHECKING([$WINENV_VENDOR release])\n+  WINENV_UNAME_RELEASE=`$UNAME -r`\n+  AC_MSG_RESULT([$WINENV_UNAME_RELEASE])\n+\n+  AC_MSG_CHECKING([$WINENV_VENDOR version])\n+  WINENV_UNAME_VERSION=`$UNAME -v`\n+  AC_MSG_RESULT([$WINENV_UNAME_VERSION])\n+\n+  WINENV_VERSION=\"$WINENV_UNAME_RELEASE, $WINENV_UNAME_VERSION\"\n+\n@@ -35,0 +109,4 @@\n+\n+  # We must change directory to one guaranteed to work, otherwise WSL1\n+  # can complain (since it does not have a WINENV_ROOT so it can't access\n+  # unix-style paths from Windows.\n@@ -36,1 +114,1 @@\n-  [ WINDOWS_VERSION=`$CMD \/c ver.exe | $EGREP -o '([0-9]+\\.)+[0-9]+'` ]\n+  [ WINDOWS_VERSION=`cd $WINENV_TEMP_DIR && $CMD \/c ver | $EGREP -o '([0-9]+\\.)+[0-9]+'` ]\n@@ -39,0 +117,1 @@\n+  # Additional handling per specific env\n@@ -40,8 +119,0 @@\n-    AC_MSG_CHECKING([cygwin release])\n-    CYGWIN_RELEASE=`$UNAME -r`\n-    AC_MSG_RESULT([$CYGWIN_RELEASE])\n-\n-    AC_MSG_CHECKING([cygwin version])\n-    CYGWIN_VERSION=`$UNAME -v`\n-    AC_MSG_RESULT([$CYGWIN_VERSION])\n-\n@@ -49,1 +120,1 @@\n-    [ CYGWIN_VERSION_OLD=`$ECHO $CYGWIN_RELEASE | $GREP -e '^1\\.[0-6]'` ]\n+    [ CYGWIN_VERSION_OLD=`$ECHO $WINENV_UNAME_RELEASE | $GREP -e '^1\\.[0-6]'` ]\n@@ -54,6 +125,2 @@\n-\n-    WINDOWS_ENV_VENDOR='cygwin'\n-    WINDOWS_ENV_VERSION=\"$CYGWIN_RELEASE, $CYGWIN_VERSION\"\n-\n-    if test \"x$CYGPATH\" = x; then\n-      AC_MSG_ERROR([Something is wrong with your cygwin installation since I cannot find cygpath.exe in your path])\n+    if test \"x$LDD\" = x; then\n+      AC_MSG_ERROR([ldd is missing, which is needed on cygwin])\n@@ -61,10 +128,4 @@\n-    AC_MSG_CHECKING([cygwin root directory as unix-style path])\n-    # The cmd output ends with Windows line endings (CR\/LF)\n-    cygwin_winpath_root=`cd \/ ; cmd \/c cd | $TR -d '\\r\\n'`\n-    # Force cygpath to report the proper root by including a trailing space, and then stripping it off again.\n-    CYGWIN_ROOT_PATH=`$CYGPATH -u \"$cygwin_winpath_root \" | $CUT -f 1 -d \" \"`\n-    AC_MSG_RESULT([$CYGWIN_ROOT_PATH])\n-    WINDOWS_ENV_ROOT_PATH=\"$CYGWIN_ROOT_PATH\"\n-    test_cygdrive_prefix=`$ECHO $CYGWIN_ROOT_PATH | $GREP ^\/cygdrive\/`\n-    if test \"x$test_cygdrive_prefix\" = x; then\n-      AC_MSG_ERROR([Your cygdrive prefix is not \/cygdrive. This is currently not supported. Change with mount -c.])\n+    WINENV_MARKER_DLL=cygwin1.dll\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys2\"; then\n+    if test \"x$LDD\" = x; then\n+      AC_MSG_ERROR([ldd is missing, which is needed on msys2])\n@@ -72,29 +133,3 @@\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    AC_MSG_CHECKING([msys release])\n-    MSYS_RELEASE=`$UNAME -r`\n-    AC_MSG_RESULT([$MSYS_RELEASE])\n-\n-    AC_MSG_CHECKING([msys version])\n-    MSYS_VERSION=`$UNAME -v`\n-    AC_MSG_RESULT([$MSYS_VERSION])\n-\n-    WINDOWS_ENV_VENDOR='msys'\n-    WINDOWS_ENV_VERSION=\"$MSYS_RELEASE, $MSYS_VERSION\"\n-\n-    AC_MSG_CHECKING([msys root directory as unix-style path])\n-    # The cmd output ends with Windows line endings (CR\/LF), the grep command will strip that away\n-    MSYS_ROOT_PATH=`cd \/ ; cmd \/c cd | $GREP \".*\"`\n-    UTIL_REWRITE_AS_UNIX_PATH(MSYS_ROOT_PATH)\n-    AC_MSG_RESULT([$MSYS_ROOT_PATH])\n-    WINDOWS_ENV_ROOT_PATH=\"$MSYS_ROOT_PATH\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-\n-    AC_MSG_CHECKING([WSL kernel version])\n-    WSL_KERNEL_VERSION=`$UNAME -v`\n-    AC_MSG_RESULT([$WSL_KERNEL_VERSION])\n-\n-    AC_MSG_CHECKING([WSL kernel release])\n-    WSL_KERNEL_RELEASE=`$UNAME -r`\n-    AC_MSG_RESULT([$WSL_KERNEL_RELEASE])\n-\n-    AC_MSG_CHECKING([WSL distribution])\n+    WINENV_MARKER_DLL=msys-2.0.dll\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl1\" || test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl2\"; then\n+    AC_MSG_CHECKING([wsl distribution])\n@@ -104,2 +139,19 @@\n-    WINDOWS_ENV_VENDOR='wsl'\n-    WINDOWS_ENV_VERSION=\"$WSL_KERNEL_RELEASE, $WSL_KERNEL_VERSION ($WSL_DISTRIBUTION)\"\n+    WINENV_VERSION=\"$WINENV_VERSION ($WSL_DISTRIBUTION)\"\n+\n+    # Tell WSL to automatically translate the PATH variable\n+    export WSLENV=PATH\/l\n+  fi\n+\n+  # Chicken and egg: FIXPATH is needed for UTIL_FIXUP_PATH to work. So for the\n+  # first run we use the auto-detect abilities of fixpath.sh.\n+  FIXPATH_DIR=\"$TOPDIR\/make\/scripts\"\n+  FIXPATH=\"$BASH $FIXPATH_DIR\/fixpath.sh exec\"\n+  FIXPATH_BASE=\"$BASH $FIXPATH_DIR\/fixpath.sh\"\n+  FIXPATH_SAVED_PATH=\"$PATH\"\n+  UTIL_FIXUP_PATH(FIXPATH_DIR)\n+\n+  # Now we can use FIXPATH_DIR to rewrite path to fixpath.sh properly.\n+  if test \"x$WINENV_PREFIX\" = x; then\n+    # On msys the prefix is empty, but we need to pass something to have the\n+    # fixpath.sh options parser happy.\n+    WINENV_PREFIX_ARG=\"NONE\"\n@@ -107,1 +159,1 @@\n-    AC_MSG_ERROR([Unknown Windows environment. Neither cygwin, msys, nor wsl was detected.])\n+    WINENV_PREFIX_ARG=\"$WINENV_PREFIX\"\n@@ -109,0 +161,3 @@\n+  FIXPATH_ARGS=\"-e $PATHTOOL -p $WINENV_PREFIX_ARG -r ${WINENV_ROOT\/\\\\\/\\\\\\\\}  -t $WINENV_TEMP_DIR -c $CMD -q\"\n+  FIXPATH_BASE=\"$BASH $FIXPATH_DIR\/fixpath.sh $FIXPATH_ARGS\"\n+  FIXPATH=\"$FIXPATH_BASE exec\"\n@@ -110,1 +165,9 @@\n-  # Test if windows or unix (cygwin\/msys) find is first in path.\n+  AC_SUBST(FIXPATH_BASE)\n+  AC_SUBST(FIXPATH)\n+\n+  SRC_ROOT_LENGTH=`$ECHO \"$TOPDIR\" | $WC -m`\n+  if test $SRC_ROOT_LENGTH -gt 100; then\n+    AC_MSG_ERROR([Your base path is too long. It is $SRC_ROOT_LENGTH characters long, but only 100 is supported])\n+  fi\n+\n+  # Test if windows or unix \"find\" is first in path.\n@@ -117,1 +180,1 @@\n-    AC_MSG_NOTICE([Your path contains Windows tools (C:\\Windows\\system32) before your unix (cygwin or msys) tools.])\n+    AC_MSG_NOTICE([Your path contains Windows tools (C:\\Windows\\system32) before your unix tools.])\n@@ -126,1 +189,2 @@\n-AC_DEFUN_ONCE([BASIC_COMPILE_FIXPATH],\n+# Verify that the directory is usable on Windows\n+AC_DEFUN([BASIC_WINDOWS_VERIFY_DIR],\n@@ -128,22 +192,5 @@\n-  # When using cygwin or msys, we need a wrapper binary that renames\n-  # \/cygdrive\/c\/ arguments into c:\/ arguments and peeks into\n-  # @files and rewrites these too! This wrapper binary is\n-  # called fixpath.\n-  FIXPATH=\n-  if test \"x$OPENJDK_BUILD_OS\" = xwindows; then\n-    AC_MSG_CHECKING([if fixpath can be created])\n-    FIXPATH_SRC=\"$TOPDIR\/make\/src\/native\/fixpath.c\"\n-    FIXPATH_BIN=\"$CONFIGURESUPPORT_OUTPUTDIR\/bin\/fixpath.exe\"\n-    FIXPATH_DIR=\"$CONFIGURESUPPORT_OUTPUTDIR\/fixpath\"\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = xwindows.cygwin; then\n-      # Important to keep the .exe suffix on Cygwin for Hotspot makefiles\n-      FIXPATH=\"$FIXPATH_BIN -c\"\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = xwindows.msys; then\n-      # Take all collected prefixes and turn them into a -m\/c\/foo@\/c\/bar@... command line\n-      # @ was chosen as separator to minimize risk of other tools messing around with it\n-      all_unique_prefixes=`echo \"${all_fixpath_prefixes@<:@@@:>@}\" \\\n-          | tr ' ' '\\n' | $GREP '^\/.\/' | $SORT | $UNIQ`\n-      fixpath_argument_list=`echo $all_unique_prefixes  | tr ' ' '@'`\n-      FIXPATH=\"$FIXPATH_BIN -m$fixpath_argument_list\"\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = xwindows.wsl; then\n-      FIXPATH=\"$FIXPATH_BIN -w\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl1\"; then\n+    OUTPUTDIR_WIN=`$FIXPATH_BASE print $1`\n+    if test \"x$OUTPUTDIR_WIN\" = x; then\n+      AC_MSG_NOTICE([For wsl1, the $2 dir must be located on a Windows drive. Please see doc\/building.md for details.])\n+      AC_MSG_ERROR([Cannot continue])\n@@ -151,9 +198,2 @@\n-    FIXPATH_SRC_W=\"$FIXPATH_SRC\"\n-    FIXPATH_BIN_W=\"$FIXPATH_BIN\"\n-    $RM -rf $FIXPATH_BIN $FIXPATH_DIR\n-    $MKDIR -p $FIXPATH_DIR $CONFIGURESUPPORT_OUTPUTDIR\/bin\n-    UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([FIXPATH_SRC_W])\n-    UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([FIXPATH_BIN_W])\n-    cd $FIXPATH_DIR\n-    $CC $FIXPATH_SRC_W -Fe$FIXPATH_BIN_W > $FIXPATH_DIR\/fixpath1.log 2>&1\n-    cd $CONFIGURE_START_DIR\n+  fi\n+])\n@@ -161,16 +201,15 @@\n-    if test ! -x $FIXPATH_BIN; then\n-      AC_MSG_RESULT([no])\n-      cat $FIXPATH_DIR\/fixpath1.log\n-      AC_MSG_ERROR([Could not create $FIXPATH_BIN])\n-    fi\n-    AC_MSG_RESULT([yes])\n-\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      OLD_WSLENV=\"$WSLENV\"\n-      WSLENV=`$ECHO $WSLENV | $SED 's\/PATH\\\/l:\/\/'`\n-      UTIL_APPEND_TO_PATH(WSLENV, \"FIXPATH_PATH\")\n-      export WSLENV\n-      export FIXPATH_PATH=$VS_PATH_WINDOWS\n-      AC_MSG_NOTICE([FIXPATH_PATH is $FIXPATH_PATH])\n-      AC_MSG_NOTICE([Rewriting WSLENV from $OLD_WSLENV to $WSLENV])\n-    fi\n+# Create fixpath wrapper\n+AC_DEFUN([BASIC_WINDOWS_FINALIZE_FIXPATH],\n+[\n+  if test \"x$OPENJDK_BUILD_OS\" = xwindows; then\n+    FIXPATH_CMDLINE=\". $TOPDIR\/make\/scripts\/fixpath.sh -e $PATHTOOL \\\n+        -p $WINENV_PREFIX_ARG -r ${WINENV_ROOT\/\\\\\/\\\\\\\\}  -t $WINENV_TEMP_DIR \\\n+        -c $CMD -q\"\n+    $ECHO >  $OUTPUTDIR\/fixpath '#!\/bin\/bash'\n+    $ECHO >> $OUTPUTDIR\/fixpath export PATH='\"[$]PATH:'$PATH'\"'\n+    $ECHO >> $OUTPUTDIR\/fixpath $FIXPATH_CMDLINE '\"[$]@\"'\n+    $CHMOD +x $OUTPUTDIR\/fixpath\n+    FIXPATH_BASE=\"$OUTPUTDIR\/fixpath\"\n+    FIXPATH=\"$FIXPATH_BASE exec\"\n+  fi\n+])\n@@ -178,4 +217,5 @@\n-    AC_MSG_CHECKING([if fixpath.exe works])\n-    cd $FIXPATH_DIR\n-    $FIXPATH $CC $FIXPATH_SRC -Fe$FIXPATH_DIR\/fixpath2.exe \\\n-        > $FIXPATH_DIR\/fixpath2.log 2>&1\n+# Platform-specific finalization\n+AC_DEFUN([BASIC_WINDOWS_FINALIZE],\n+[\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl2\"; then\n+    # Change back from temp dir\n@@ -183,8 +223,0 @@\n-    if test ! -x $FIXPATH_DIR\/fixpath2.exe; then\n-      AC_MSG_RESULT([no])\n-      cat $FIXPATH_DIR\/fixpath2.log\n-      AC_MSG_ERROR([fixpath did not work!])\n-    fi\n-    AC_MSG_RESULT([yes])\n-\n-    FIXPATH_DETACH_FLAG=\"--detach\"\n@@ -192,3 +224,0 @@\n-\n-  AC_SUBST(FIXPATH)\n-  AC_SUBST(FIXPATH_DETACH_FLAG)\n","filename":"make\/autoconf\/basic_windows.m4","additions":156,"deletions":127,"binary":false,"changes":283,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-      if test ! -x \"$BOOT_JDK\/bin\/java$EXE_SUFFIX\"; then\n+      if test ! -x \"$BOOT_JDK\/bin\/java\" && test ! -x \"$BOOT_JDK\/bin\/java.exe\"; then\n@@ -71,1 +71,1 @@\n-        if test ! -x \"$BOOT_JDK\/bin\/javac$EXE_SUFFIX\"; then\n+        if test ! -x \"$BOOT_JDK\/bin\/javac\" && test ! -x \"$BOOT_JDK\/bin\/javac.exe\"; then\n@@ -77,0 +77,3 @@\n+          java_to_test=\"$BOOT_JDK\/bin\/java\"\n+          UTIL_FIXUP_EXECUTABLE(java_to_test)\n+          BOOT_JDK_VERSION_OUTPUT=`$java_to_test $USER_BOOT_JDK_OPTIONS -version 2>&1`\n@@ -78,1 +81,2 @@\n-          [ BOOT_JDK_VERSION=`\"$BOOT_JDK\/bin\/java$EXE_SUFFIX\" $USER_BOOT_JDK_OPTIONS -version 2>&1 | $AWK '\/version \"[0-9a-zA-Z\\._\\-]+\"\/ {print $ 0; exit;}'` ]\n+          [ BOOT_JDK_VERSION=`echo $BOOT_JDK_VERSION_OUTPUT | $AWK '\/version \"[0-9a-zA-Z\\._\\-]+\"\/ {print $ 0; exit;}'` ]\n+\n@@ -94,1 +98,6 @@\n-          if test \"x$FOUND_CORRECT_VERSION\" = x; then\n+\n+          if test \"x$BOOT_JDK_VERSION\" = x; then\n+            AC_MSG_NOTICE([Potential Boot JDK found at $BOOT_JDK is not a working JDK; ignoring])\n+            AC_MSG_NOTICE([Output from java -version was: $BOOT_JDK_VERSION_OUTPUT])\n+            BOOT_JDK_FOUND=no\n+          elif test \"x$FOUND_CORRECT_VERSION\" = x; then\n@@ -105,1 +114,3 @@\n-            BOOT_JDK_VERSION=`\"$BOOT_JDK\/bin\/java$EXE_SUFFIX\" $USER_BOOT_JDK_OPTIONS -version 2>&1 | $TR '\\n\\r' '  '`\n+            BOOT_JDK_VERSION=`$java_to_test $USER_BOOT_JDK_OPTIONS -version 2>&1 | $TR -d '\\r'`\n+            # This is not a no-op; it will portably convert newline to space\n+            BOOT_JDK_VERSION=`$ECHO $BOOT_JDK_VERSION`\n@@ -154,2 +165,2 @@\n-    UTIL_FIXUP_PATH(JAVA_HOME_PROCESSED)\n-    if test ! -d \"$JAVA_HOME_PROCESSED\"; then\n+    UTIL_FIXUP_PATH(JAVA_HOME_PROCESSED, NOFAIL)\n+    if test \"x$JAVA_HOME_PROCESSED\" = x || test ! -d \"$JAVA_HOME_PROCESSED\"; then\n@@ -170,2 +181,2 @@\n-  AC_PATH_PROG(JAVAC_CHECK, javac)\n-  AC_PATH_PROG(JAVA_CHECK, java)\n+  UTIL_LOOKUP_PROGS(JAVAC_CHECK, javac, , NOFIXPATH)\n+  UTIL_LOOKUP_PROGS(JAVA_CHECK, java, , NOFIXPATH)\n@@ -210,3 +221,3 @@\n-    BOOTJDK_DO_CHECK([BOOTJDK_CHECK_LIBEXEC_JAVA_HOME([-v 1.9])])\n-    BOOTJDK_DO_CHECK([BOOTJDK_CHECK_LIBEXEC_JAVA_HOME([-v 1.8])])\n-    BOOTJDK_DO_CHECK([BOOTJDK_CHECK_LIBEXEC_JAVA_HOME([-v 1.7])])\n+    for ver in $DEFAULT_ACCEPTABLE_BOOT_VERSIONS ; do\n+      BOOTJDK_DO_CHECK([BOOTJDK_CHECK_LIBEXEC_JAVA_HOME([-v $ver])])\n+    done\n@@ -245,2 +256,4 @@\n-    UTIL_REWRITE_AS_UNIX_PATH(VIRTUAL_DIR)\n-    BOOTJDK_FIND_BEST_JDK_IN_DIRECTORY($VIRTUAL_DIR)\n+    UTIL_FIXUP_PATH(VIRTUAL_DIR, NOFAIL)\n+    if test \"x$VIRTUAL_DIR\" != x; then\n+      BOOTJDK_FIND_BEST_JDK_IN_DIRECTORY($VIRTUAL_DIR)\n+    fi\n@@ -273,1 +286,1 @@\n-  UTIL_SETUP_TOOL($1,\n+  UTIL_REQUIRE_SPECIAL($1,\n@@ -275,1 +288,1 @@\n-      AC_MSG_CHECKING([for $2 in Boot JDK])\n+      AC_MSG_CHECKING([for $2 [[Boot JDK]]])\n@@ -277,1 +290,1 @@\n-      if test ! -x [$]$1; then\n+      if test ! -x [$]$1 && test ! -x [$]$1.exe; then\n@@ -282,1 +295,2 @@\n-      AC_MSG_RESULT(ok)\n+      AC_MSG_RESULT(\\[$]BOOT_JDK\/bin\/$2)\n+      UTIL_FIXUP_EXECUTABLE($1)\n@@ -316,3 +330,0 @@\n-  # Test: On MacOS X, can we find a boot jdk using \/usr\/libexec\/java_home?\n-  BOOTJDK_DO_CHECK([BOOTJDK_CHECK_MACOSX_JAVA_LOCATOR])\n-\n@@ -322,0 +333,3 @@\n+  # Test: On MacOS X, can we find a boot jdk using \/usr\/libexec\/java_home?\n+  BOOTJDK_DO_CHECK([BOOTJDK_CHECK_MACOSX_JAVA_LOCATOR])\n+\n@@ -339,5 +353,4 @@\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVA, java$EXE_SUFFIX)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVAC, javac$EXE_SUFFIX)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVADOC, javadoc$EXE_SUFFIX)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAR, jar$EXE_SUFFIX)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JARSIGNER, jarsigner$EXE_SUFFIX)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVA, java)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVAC, javac)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVADOC, javadoc)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAR, jar)\n@@ -356,1 +369,1 @@\n-  if \"$JAVA\" -version 2>&1 | $GREP -q \"64-Bit\"; then\n+  if $JAVA -version 2>&1 | $GREP -q \"64-Bit\"; then\n@@ -371,1 +384,1 @@\n-    \"$JAVA\" $boot_jdk_cds_args -Xshare:dump > \/dev\/null 2>&1\n+    $JAVA $boot_jdk_cds_args -Xshare:dump > \/dev\/null 2>&1\n@@ -577,0 +590,2 @@\n+  # Since these tools do not yet exist, we cannot use UTIL_FIXUP_EXECUTABLE to\n+  # detect the need of fixpath\n@@ -578,0 +593,1 @@\n+  UTIL_ADD_FIXPATH(JMOD)\n@@ -579,0 +595,1 @@\n+  UTIL_ADD_FIXPATH(JLINK)\n","filename":"make\/autoconf\/boot-jdk.m4","additions":45,"deletions":28,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -31,8 +31,0 @@\n-# Check that the user did not try to specify a different java to use for compiling.\n-# On windows we need to account for fixpath being first word.\n-ifeq ($(firstword $(JAVA)),$(FIXPATH))\n-  JAVA_EXEC_POS=2\n-else\n-  JAVA_EXEC_POS=1\n-endif\n-\n@@ -50,4 +42,3 @@\n-JAVA_CMD:=$(BOOT_JDK)\/bin\/java\n-JAVAC_CMD:=$(BOOT_JDK)\/bin\/javac\n-JAR_CMD:=$(BOOT_JDK)\/bin\/jar\n-JARSIGNER_CMD:=$(BOOT_JDK)\/bin\/jarsigner\n+JAVA_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/java\n+JAVAC_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/javac\n+JAR_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/jar\n@@ -61,2 +52,0 @@\n-# Pandoc cannot be used without the jjs plugin, which was removed with Nashorn.\n-ENABLE_PANDOC := false\n","filename":"make\/autoconf\/bootcycle-spec.gmk.in","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-echo $OUT | grep x86_64-unknown-linux-gnu > \/dev\/null 2> \/dev\/null\n+echo $OUT | grep unknown-linux-gnu > \/dev\/null 2> \/dev\/null\n@@ -63,1 +63,1 @@\n-    OUT=\"x86_64-pc-wsl\"\n+    OUT=`echo $OUT | sed -e 's\/unknown-linux-gnu\/pc-wsl\/'`\n","filename":"make\/autoconf\/build-aux\/config.guess","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,7 @@\n-if echo $* | grep x86_64-pc-wsl >\/dev\/null ; then\n+if echo $* | grep pc-wsl >\/dev\/null ; then\n+    echo $*\n+    exit\n+fi\n+\n+# Allow msys2\n+if echo $* | grep pc-msys >\/dev\/null ; then\n@@ -52,1 +58,1 @@\n-    case $1 in \n+    case $1 in\n","filename":"make\/autoconf\/build-aux\/config.sub","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  UTIL_PATH_PROGS(CCACHE, ccache)\n+  UTIL_LOOKUP_PROGS(CCACHE, ccache)\n","filename":"make\/autoconf\/build-performance.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-export DUMPBIN=\"@FIXPATH@ @DUMPBIN@\"\n+export DUMPBIN=\"@DUMPBIN@\"\n@@ -89,5 +89,2 @@\n-  if [ \"$OPENJDK_BUILD_OS_ENV\" = \"windows.wsl\" ]; then\n-    export FIXPATH_PATH=\"@VS_PATH_WINDOWS@\"\n-    export WSLENV=\"$WSLENV:FIXPATH_PATH:DEBUG_FIXPATH\"\n-  else\n-    export PATH=\"@VS_PATH@\"\n+  if [[ $OPENJDK_BUILD_OS_ENV =~ ^windows.wsl ]]; then\n+    export WSLENV=PATH\/l\n@@ -95,0 +92,1 @@\n+  export PATH=\"$PATH:@TOOLCHAIN_PATH@\"\n","filename":"make\/autoconf\/compare.sh.in","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+# After we have the output dir we can finalize the fixpath wrapper\n+BASIC_WINDOWS_FINALIZE_FIXPATH\n@@ -223,3 +225,0 @@\n-# After we have toolchain, we can compile fixpath. It's needed by the lib checks.\n-BASIC_COMPILE_FIXPATH\n-\n@@ -297,0 +296,1 @@\n+BASIC_WINDOWS_FINALIZE\n","filename":"make\/autoconf\/configure.ac","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+      BUILD_CC_DISABLE_WARNING_PREFIX=\"-wd\"\n@@ -145,0 +146,1 @@\n+      BUILD_CC_DISABLE_WARNING_PREFIX=\"-Wno-\"\n@@ -156,1 +158,0 @@\n-      BUILD_CC_DISABLE_WARNING_PREFIX=\"-Wno-\"\n@@ -787,2 +788,1 @@\n-      workspace_root_win=\"${WORKSPACE_ROOT%\/}\"\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([workspace_root_win])\n+      workspace_root_win=`$FIXPATH_BASE print \"${WORKSPACE_ROOT%\/}\"`\n","filename":"make\/autoconf\/flags-cflags.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-    $1_LDFLAGS_JDK_LIBPATH=\"-libpath:${OUTPUTDIR}\/support\/modules_libs\/java.base\"\n+    $1_LDFLAGS_JDK_LIBPATH=\"-libpath:\\$(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,0 +229,8 @@\n+  # For the microsoft toolchain, we need to get the SYSROOT flags from the\n+  # Visual Studio environment. Currently we cannot handle this as a separate\n+  # build toolchain.\n+  if test \"x$1\" = x && test \"x$OPENJDK_BUILD_OS\" = \"xwindows\" \\\n+      && test \"x$TOOLCHAIN_TYPE\" = \"xmicrosoft\"; then\n+    TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV\n+  fi\n+\n@@ -237,0 +245,1 @@\n+\n@@ -261,4 +270,0 @@\n-  AC_SUBST(GLOBAL_CFLAGS)\n-  AC_SUBST(GLOBAL_CXXFLAGS)\n-  AC_SUBST(GLOBAL_LDFLAGS)\n-  AC_SUBST(GLOBAL_CPPFLAGS)\n@@ -283,0 +288,8 @@\n+\n+  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+    # When autoconf sends both compiler and linker flags to cl.exe at the same\n+    # time, linker flags must be last at the command line. Achieve this by\n+    # moving them to LIBS.\n+    LIBS=\"$LIBS -link $LDFLAGS\"\n+    LDFLAGS=\"\"\n+  fi\n@@ -373,3 +386,0 @@\n-  AC_SUBST(BUILD_SYSROOT_CFLAGS)\n-  AC_SUBST(BUILD_SYSROOT_LDFLAGS)\n-\n","filename":"make\/autoconf\/flags.m4","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-  AC_CHECK_PROGS(PKGHANDLER, zypper apt-get yum brew port pkgutil pkgadd)\n+  UTIL_LOOKUP_PROGS(PKGHANDLER, zypper apt-get yum brew port pkgutil pkgadd pacman)\n@@ -41,2 +41,0 @@\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    msys_help $MISSING_DEPENDENCY\n@@ -61,0 +59,2 @@\n+      pacman)\n+        pacman_help  $MISSING_DEPENDENCY ;;\n@@ -86,4 +86,0 @@\n-msys_help() {\n-  PKGHANDLER_COMMAND=\"\"\n-}\n-\n@@ -168,0 +164,11 @@\n+pacman_help() {\n+  case $1 in\n+    unzip)\n+      PKGHANDLER_COMMAND=\"sudo pacman -S unzip\" ;;\n+    zip)\n+      PKGHANDLER_COMMAND=\"sudo pacman -S zip\" ;;\n+    make)\n+      PKGHANDLER_COMMAND=\"sudo pacman -S make\" ;;\n+  esac\n+}\n+\n@@ -260,5 +267,2 @@\n-    printf \"* Environment:    $WINDOWS_ENV_VENDOR version $WINDOWS_ENV_VERSION. Windows version $WINDOWS_VERSION\"\n-    if test \"x$WINDOWS_ENV_ROOT_PATH\" != \"x\"; then\n-      printf \". Root at $WINDOWS_ENV_ROOT_PATH\"\n-    fi\n-    printf \"\\n\"\n+    printf \"* Environment:    %s version %s; windows version %s; prefix \\\"%s\\\"; root \\\"%s\\\"\\n\" \\\n+        \"$WINENV_VENDOR\" \"$WINENV_VERSION\" \"$WINDOWS_VERSION\" \"$WINENV_PREFIX\" \"$WINENV_ROOT\"\n@@ -268,2 +272,2 @@\n-  printf \"* C Compiler:     Version $CC_VERSION_NUMBER (at $CC)\\n\"\n-  printf \"* C++ Compiler:   Version $CXX_VERSION_NUMBER (at $CXX)\\n\"\n+  printf \"* C Compiler:     Version $CC_VERSION_NUMBER (at ${CC#\"$FIXPATH \"})\\n\"\n+  printf \"* C++ Compiler:   Version $CXX_VERSION_NUMBER (at ${CXX#\"$FIXPATH \"})\\n\"\n","filename":"make\/autoconf\/help.m4","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -391,1 +391,1 @@\n-      if test ! -f \"$JCOV_INPUT_JDK\/bin\/java$EXE_SUFFIX\"; then\n+      if test ! -f \"$JCOV_INPUT_JDK\/bin\/java\" && test ! -f \"$JCOV_INPUT_JDK\/bin\/java.exe\"; then\n@@ -393,1 +393,1 @@\n-        AC_MSG_ERROR([Invalid JDK bundle: \"$JCOV_INPUT_JDK\/bin\/java$EXE_SUFFIX\" does not exist])\n+        AC_MSG_ERROR([Invalid JDK bundle: \"$JCOV_INPUT_JDK\/bin\/java\" does not exist])\n@@ -667,1 +667,10 @@\n-  UTIL_ARG_ENABLE(NAME: reproducible-build, DEFAULT: $with_source_date_present,\n+  REPRODUCIBLE_BUILD_DEFAULT=$with_source_date_present\n+\n+  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n+      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse; then\n+    # To support banning absolute paths on Windows, we must use the -pathmap\n+    # method, which requires reproducible builds.\n+    REPRODUCIBLE_BUILD_DEFAULT=true\n+  fi\n+\n+  UTIL_ARG_ENABLE(NAME: reproducible-build, DEFAULT: $REPRODUCIBLE_BUILD_DEFAULT,\n@@ -670,1 +679,9 @@\n-      DEFAULT_DESC: [enabled if --with-source-date is given])\n+      DEFAULT_DESC: [enabled if --with-source-date is given or on Windows without absolute paths])\n+\n+  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n+      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse && \\\n+      test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xfalse; then\n+    AC_MSG_NOTICE([On Windows it is not possible to combine  --disable-reproducible-builds])\n+    AC_MSG_NOTICE([with --disable-absolute-paths-in-output.])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n","filename":"make\/autoconf\/jdk-options.m4","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-    *mingw*)\n+    *msys*)\n@@ -211,1 +211,1 @@\n-      VAR_OS_ENV=windows.msys\n+      VAR_OS_ENV=windows.msys2\n","filename":"make\/autoconf\/platform.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-\n-  # Where are the sources.\n-  AC_SUBST(TOPDIR)\n","filename":"make\/autoconf\/source-dirs.m4","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,2 +134,10 @@\n-# colon or semicolon\n-PATH_SEP:=@PATH_SEP@\n+WINENV_ROOT := @WINENV_ROOT@\n+WINENV_PREFIX := @WINENV_PREFIX@\n+\n+ifneq ($(findstring windows.wsl, @OPENJDK_BUILD_OS_ENV@), )\n+  # Tell WSL to convert PATH between linux and windows\n+  export WSLENV := PATH\/l\n+else ifeq (@OPENJDK_BUILD_OS_ENV@, windows.msys2)\n+  # Prohibit msys2 from attemping any path wrangling\n+  export MSYS2_ARG_CONV_EXCL := \"*\"\n+endif\n@@ -138,10 +146,6 @@\n-ORIGINAL_PATH:=@ORIGINAL_PATH@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  # On Windows, the Visual Studio toolchain needs the PATH to be adjusted\n-  # to include Visual Studio tools (this needs to be in cygwin\/msys style).\n-  ifeq ($(OPENJDK_TARGET_OS_ENV), windows.wsl)\n-    export FIXPATH_PATH:=@VS_PATH_WINDOWS@\n-    export WSLENV:=$(WSLENV):FIXPATH_PATH:DEBUG_FIXPATH\n-  else\n-    export PATH:=@VS_PATH@\n-  endif\n+ORIGINAL_PATH := @ORIGINAL_PATH@\n+\n+ifeq (@TOOLCHAIN_TYPE@, microsoft)\n+  # The Visual Studio toolchain needs the PATH to be adjusted to include\n+  # Visual Studio tools.\n+  export PATH := @TOOLCHAIN_PATH@:$(PATH)\n@@ -491,1 +495,1 @@\n-CC:=@FIXPATH@ @CCACHE@ @ICECC@ @CC@\n+CC := @CCACHE@ @ICECC@ @CC@\n@@ -513,1 +517,1 @@\n-CXX:=@FIXPATH@ @CCACHE@ @ICECC@ @CXX@\n+CXX := @CCACHE@ @ICECC@ @CXX@\n@@ -515,1 +519,1 @@\n-CPP:=@FIXPATH@ @CPP@\n+CPP := @CPP@\n@@ -518,1 +522,1 @@\n-LD:=@FIXPATH@ @LD@\n+LD := @LD@\n@@ -538,1 +542,1 @@\n-LDCXX:=@FIXPATH@ @LDCXX@\n+LDCXX := @LDCXX@\n@@ -547,7 +551,7 @@\n-BUILD_CC:=@FIXPATH@ @BUILD_ICECC@ @BUILD_CC@\n-BUILD_CXX:=@FIXPATH@ @BUILD_ICECC@ @BUILD_CXX@\n-BUILD_LD:=@FIXPATH@ @BUILD_LD@\n-BUILD_LDCXX:=@FIXPATH@ @BUILD_LDCXX@\n-BUILD_AS:=@FIXPATH@ @BUILD_AS@\n-BUILD_AR:=@FIXPATH@ @BUILD_AR@\n-BUILD_NM:=@FIXPATH@ @BUILD_NM@\n+BUILD_CC := @BUILD_ICECC@ @BUILD_CC@\n+BUILD_CXX := @BUILD_ICECC@ @BUILD_CXX@\n+BUILD_LD := @BUILD_LD@\n+BUILD_LDCXX := @BUILD_LDCXX@\n+BUILD_AS := @BUILD_AS@\n+BUILD_AR := @BUILD_AR@\n+BUILD_NM := @BUILD_NM@\n@@ -559,1 +563,1 @@\n-AS:=@FIXPATH@ @AS@\n+AS := @AS@\n@@ -562,1 +566,1 @@\n-AR:=@FIXPATH@ @AR@\n+AR := @AR@\n@@ -611,1 +615,1 @@\n-EXE_SUFFIX:=@EXE_SUFFIX@\n+EXECUTABLE_SUFFIX:=@EXECUTABLE_SUFFIX@\n@@ -632,1 +636,0 @@\n-JARSIGNER_CMD:=@JARSIGNER@\n@@ -635,9 +638,7 @@\n-JAVA=@FIXPATH@ $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n-JAVA_SMALL=@FIXPATH@ $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)\n-JAVA_DETACH =@FIXPATH@ @FIXPATH_DETACH_FLAG@ $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n-JAVAC=@FIXPATH@ $(JAVAC_CMD)\n-JAVADOC=@FIXPATH@ $(JAVADOC_CMD)\n-JAR=@FIXPATH@ $(JAR_CMD)\n-JLINK = @FIXPATH@ $(JLINK_CMD)\n-JMOD = @FIXPATH@ $(JMOD_CMD) $(JAVA_TOOL_FLAGS_SMALL)\n-JARSIGNER=@FIXPATH@ $(JARSIGNER_CMD)\n+JAVA = $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n+JAVA_SMALL = $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)\n+JAVAC = $(JAVAC_CMD)\n+JAVADOC = $(JAVADOC_CMD)\n+JAR = $(JAR_CMD)\n+JLINK = $(JLINK_CMD)\n+JMOD = $(JMOD_CMD) $(JAVA_TOOL_FLAGS_SMALL)\n@@ -688,1 +689,0 @@\n-COMM:=@COMM@\n@@ -690,1 +690,0 @@\n-CPIO:=@CPIO@\n@@ -711,1 +710,1 @@\n-PANDOC:=@FIXPATH@ @PANDOC@\n+PANDOC:=@PANDOC@\n@@ -727,1 +726,0 @@\n-UNIQ:=@UNIQ@\n@@ -732,4 +730,4 @@\n-MT:=@FIXPATH@ @MT@\n-RC:=@FIXPATH@ @RC@\n-DUMPBIN:=@FIXPATH@ @DUMPBIN@\n-CYGPATH:=@CYGPATH@\n+MT:=@MT@\n+RC:=@RC@\n+DUMPBIN:=@DUMPBIN@\n+PATHTOOL:=@PATHTOOL@\n@@ -752,1 +750,2 @@\n-FIXPATH:=@FIXPATH@\n+FIXPATH := @FIXPATH@\n+FIXPATH_BASE := @FIXPATH_BASE@\n","filename":"make\/autoconf\/spec.gmk.in","additions":45,"deletions":46,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-m4_include([toolchain_windows.m4])\n+m4_include([toolchain_microsoft.m4])\n@@ -182,0 +182,1 @@\n+    EXECUTABLE_SUFFIX='.exe'\n@@ -189,0 +190,1 @@\n+    EXECUTABLE_SUFFIX=''\n@@ -212,0 +214,1 @@\n+  AC_SUBST(EXECUTABLE_SUFFIX)\n@@ -295,1 +298,1 @@\n-  TOOLCHAIN_CC_BINARY_microsoft=\"cl$EXE_SUFFIX\"\n+  TOOLCHAIN_CC_BINARY_microsoft=\"cl\"\n@@ -300,1 +303,1 @@\n-  TOOLCHAIN_CXX_BINARY_microsoft=\"cl$EXE_SUFFIX\"\n+  TOOLCHAIN_CXX_BINARY_microsoft=\"cl\"\n@@ -328,3 +331,0 @@\n-  # FIXME: Is this needed?\n-  AC_LANG(C++)\n-\n@@ -338,30 +338,4 @@\n-  # On Windows, we need to detect the visual studio installation first.\n-  # This will change the PATH, but we need to keep that new PATH even\n-  # after toolchain detection is done, since the compiler (on x86) uses\n-  # it for DLL resolution in runtime.\n-  if test \"x$OPENJDK_BUILD_OS\" = \"xwindows\" \\\n-      && test \"x$TOOLCHAIN_TYPE\" = \"xmicrosoft\"; then\n-    TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      # Append VS_PATH. In WSL, VS_PATH will not contain the WSL env path needed\n-      # for using basic Unix tools, so need to keep the original PATH.\n-      UTIL_APPEND_TO_PATH(PATH, $VS_PATH)\n-      UTIL_APPEND_TO_PATH(WSLENV, \"PATH\/l:LIB:INCLUDE\")\n-      export WSLENV\n-    else\n-      # Reset path to VS_PATH. It will include everything that was on PATH at the time we\n-      # ran TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV.\n-      PATH=\"$VS_PATH\"\n-    fi\n-    # The microsoft toolchain also requires INCLUDE and LIB to be set.\n-    export INCLUDE=\"$VS_INCLUDE\"\n-    export LIB=\"$VS_LIB\"\n-  else\n-    if test \"x$XCODE_VERSION_OUTPUT\" != x; then\n-      # For Xcode, we set the Xcode version as TOOLCHAIN_VERSION\n-      TOOLCHAIN_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | $CUT -f 2 -d ' '`\n-      TOOLCHAIN_DESCRIPTION=\"$TOOLCHAIN_DESCRIPTION from Xcode $TOOLCHAIN_VERSION\"\n-    else\n-      # Currently we do not define this for other toolchains. This might change as the need arise.\n-      TOOLCHAIN_VERSION=\n-    fi\n+  if test \"x$XCODE_VERSION_OUTPUT\" != x; then\n+    # For Xcode, we set the Xcode version as TOOLCHAIN_VERSION\n+    TOOLCHAIN_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | $CUT -f 2 -d ' '`\n+    TOOLCHAIN_DESCRIPTION=\"$TOOLCHAIN_DESCRIPTION from Xcode $TOOLCHAIN_VERSION\"\n@@ -371,1 +345,1 @@\n-  # Finally add TOOLCHAIN_PATH at the beginning, to allow --with-tools-dir to\n+  # Finally prepend TOOLCHAIN_PATH to the PATH, to allow --with-tools-dir to\n@@ -374,1 +348,1 @@\n-    PATH=$TOOLCHAIN_PATH:$PATH\n+    export PATH=$TOOLCHAIN_PATH:$PATH\n@@ -381,3 +355,3 @@\n-  # Restore old path, except for the microsoft toolchain, which requires VS_PATH\n-  # to remain in place. Otherwise the compiler will not work in some siutations\n-  # in later configure checks.\n+  # Restore old path, except for the microsoft toolchain, which requires the\n+  # toolchain path to remain in place. Otherwise the compiler will not work in\n+  # some siutations in later configure checks.\n@@ -430,1 +404,1 @@\n-    COMPILER_VERSION_OUTPUT=`\"$COMPILER\" 2>&1 | $GREP -v 'ERROR.*UtilTranslatePathList' | $HEAD -n 1 | $TR -d '\\r'`\n+    COMPILER_VERSION_OUTPUT=`$COMPILER 2>&1 1>\/dev\/null | $HEAD -n 1 | $TR -d '\\r'`\n@@ -509,1 +483,1 @@\n-      AC_PATH_PROGS(POTENTIAL_$1, [$]$1)\n+      UTIL_LOOKUP_PROGS(POTENTIAL_$1, [$]$1)\n@@ -531,17 +505,2 @@\n-    $1=\n-    # If TOOLCHAIN_PATH is set, check for all compiler names in there first\n-    # before checking the rest of the PATH.\n-    # FIXME: Now that we prefix the TOOLS_DIR to the PATH in the PRE_DETECTION\n-    # step, this should not be necessary.\n-    if test -n \"$TOOLCHAIN_PATH\"; then\n-      PATH_save=\"$PATH\"\n-      PATH=\"$TOOLCHAIN_PATH\"\n-      AC_PATH_TOOL(TOOLCHAIN_PATH_$1, $SEARCH_LIST)\n-      $1=$TOOLCHAIN_PATH_$1\n-      PATH=\"$PATH_save\"\n-    fi\n-\n-    # AC_PATH_TOOL can't be run multiple times with the same variable,\n-    # so create a new name for this run.\n-    if test \"x[$]$1\" = x; then\n-      AC_PATH_TOOL(POTENTIAL_$1, $SEARCH_LIST)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(POTENTIAL_$1, $SEARCH_LIST)\n+    if test \"x$POTENTIAL_$1\" != x; then\n@@ -549,3 +508,1 @@\n-    fi\n-\n-    if test \"x[$]$1\" = x; then\n+    else\n@@ -558,1 +515,0 @@\n-  UTIL_FIXUP_EXECUTABLE($1)\n@@ -599,6 +555,1 @@\n-    # Reset PATH since it can contain a mix of WSL\/linux paths and Windows paths from VS,\n-    # which, in combination with WSLENV, will make the WSL layer complain\n-    old_path=\"$PATH\"\n-    PATH=\n-    LINKER_VERSION_STRING=`$LD 2>&1 | $HEAD -n 1 | $TR -d '\\r'`\n-    PATH=\"$old_path\"\n+    LINKER_VERSION_STRING=`$LINKER 2>&1 | $HEAD -n 1 | $TR -d '\\r'`\n@@ -615,1 +566,1 @@\n-    LINKER_VERSION_STRING=`$LD -Wl,--version 2> \/dev\/null | $HEAD -n 1`\n+    LINKER_VERSION_STRING=`$LINKER -Wl,--version 2> \/dev\/null | $HEAD -n 1`\n@@ -632,1 +583,1 @@\n-    LINKER_VERSION_STRING=`$LD -Wl,-v 2>&1 | $HEAD -n 1`\n+    LINKER_VERSION_STRING=`$LINKER -Wl,-v 2>&1 | $HEAD -n 1`\n@@ -652,0 +603,17 @@\n+# Make sure we did not pick up \/usr\/bin\/link, which is the unix-style link\n+# executable.\n+#\n+# $1 = linker to test (LD or BUILD_LD)\n+AC_DEFUN(TOOLCHAIN_VERIFY_LINK_BINARY,\n+[\n+  LINKER=[$]$1\n+\n+  AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])\n+  $LINKER --version > \/dev\/null\n+  if test $? -eq 0 ; then\n+    AC_MSG_RESULT([no])\n+    AC_MSG_ERROR([$LINKER is the winenv link tool. Please check your PATH and rerun configure.])\n+  else\n+    AC_MSG_RESULT([yes])\n+  fi\n+])\n@@ -696,23 +664,2 @@\n-    # Make sure we reject \/usr\/bin\/link (as determined in CYGWIN_LINK), which is\n-    # a cygwin program for something completely different.\n-    AC_CHECK_PROG([LD], [link$EXE_SUFFIX],[link$EXE_SUFFIX],,, [$CYGWIN_LINK])\n-    UTIL_FIXUP_EXECUTABLE(LD)\n-    # Verify that we indeed succeeded with this trick.\n-    AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])\n-\n-    # Reset PATH since it can contain a mix of WSL\/linux paths and Windows paths from VS,\n-    # which, in combination with WSLENV, will make the WSL layer complain\n-    old_path=\"$PATH\"\n-    PATH=\n-\n-    \"$LD\" --version > \/dev\/null\n-\n-    if test $? -eq 0 ; then\n-      AC_MSG_RESULT([no])\n-      AC_MSG_ERROR([This is the Cygwin link tool. Please check your PATH and rerun configure.])\n-    else\n-      AC_MSG_RESULT([yes])\n-    fi\n-\n-    PATH=\"$old_path\"\n-\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(LD, link)\n+    TOOLCHAIN_VERIFY_LINK_BINARY(LD)\n@@ -720,2 +667,3 @@\n-    # jaotc being a windows program expects the linker to be supplied with exe suffix.\n-    LD_JAOTC=\"$LD$EXE_SUFFIX\"\n+    # jaotc being a windows program expects the linker to be supplied with exe suffix.but without\n+    # fixpath\n+    LD_JAOTC=\"${LD##$FIXPATH }\"\n@@ -727,2 +675,1 @@\n-    UTIL_CHECK_TOOLS([LD_JAOTC], ld)\n-    UTIL_FIXUP_EXECUTABLE(LD_JAOTC)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(LD_JAOTC, ld)\n@@ -749,2 +696,6 @@\n-  # FIXME: is this correct for microsoft?\n-  AS=\"$CC -c\"\n+  if test \"x$TOOLCHAIN_TYPE\" != xmicrosoft; then\n+    AS=\"$CC -c\"\n+  else\n+    # On windows, the assember is \"ml.exe\"\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(AS, ml)\n+  fi\n@@ -758,1 +709,1 @@\n-    AC_CHECK_PROG([AR], [lib$EXE_SUFFIX],[lib$EXE_SUFFIX],,,)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(AR, lib)\n@@ -760,1 +711,1 @@\n-    UTIL_CHECK_TOOLS(AR, ar gcc-ar)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(AR, ar gcc-ar)\n@@ -762,1 +713,1 @@\n-    UTIL_CHECK_TOOLS(AR, ar)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(AR, ar)\n@@ -764,1 +715,0 @@\n-  UTIL_FIXUP_EXECUTABLE(AR)\n@@ -773,2 +723,1 @@\n-    UTIL_PATH_PROGS(LIPO, lipo)\n-    UTIL_FIXUP_EXECUTABLE(LIPO)\n+    UTIL_LOOKUP_PROGS(LIPO, lipo)\n@@ -776,1 +725,0 @@\n-    UTIL_FIXUP_EXECUTABLE(OTOOL)\n@@ -778,1 +726,0 @@\n-    UTIL_FIXUP_EXECUTABLE(INSTALL_NAME_TOOL)\n@@ -782,2 +729,2 @@\n-    AC_CHECK_PROG([MT], [mt$EXE_SUFFIX], [mt$EXE_SUFFIX],,, [\/usr\/bin\/mt])\n-    UTIL_FIXUP_EXECUTABLE(MT)\n+    # Setup the manifest tool (MT)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(MT, mt)\n@@ -785,12 +732,2 @@\n-    AC_CHECK_PROG([RC], [rc$EXE_SUFFIX], [rc$EXE_SUFFIX],,, [\/usr\/bin\/rc])\n-    UTIL_FIXUP_EXECUTABLE(RC)\n-    AC_CHECK_PROG([DUMPBIN], [dumpbin$EXE_SUFFIX], [dumpbin$EXE_SUFFIX],,,)\n-    UTIL_FIXUP_EXECUTABLE(DUMPBIN)\n-    # We need to check for 'msbuild.exe' because at the place where we expect to\n-    # find 'msbuild.exe' there's also a directory called 'msbuild' and configure\n-    # won't find the 'msbuild.exe' executable in that case (and the\n-    # 'ac_executable_extensions' is unusable due to performance reasons).\n-    # Notice that we intentionally don't fix up the path to MSBUILD because we\n-    # will call it in a DOS shell during freetype detection on Windows (see\n-    # 'LIB_SETUP_FREETYPE' in \"libraries.m4\"\n-    AC_CHECK_PROG([MSBUILD], [msbuild$EXE_SUFFIX], [msbuild$EXE_SUFFIX],,,)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(RC, rc)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(DUMPBIN, dumpbin)\n@@ -800,2 +737,1 @@\n-    UTIL_CHECK_TOOLS(STRIP, strip)\n-    UTIL_FIXUP_EXECUTABLE(STRIP)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(STRIP, strip)\n@@ -803,1 +739,1 @@\n-      UTIL_CHECK_TOOLS(NM, nm gcc-nm)\n+      UTIL_LOOKUP_TOOLCHAIN_PROGS(NM, nm gcc-nm)\n@@ -805,1 +741,1 @@\n-      UTIL_CHECK_TOOLS(NM, nm)\n+      UTIL_LOOKUP_TOOLCHAIN_PROGS(NM, nm)\n@@ -807,1 +743,0 @@\n-    UTIL_FIXUP_EXECUTABLE(NM)\n@@ -815,5 +750,1 @@\n-    UTIL_CHECK_TOOLS(OBJCOPY, [gobjcopy objcopy])\n-    # Only call fixup if objcopy was found.\n-    if test -n \"$OBJCOPY\"; then\n-      UTIL_FIXUP_EXECUTABLE(OBJCOPY)\n-    fi\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(OBJCOPY, gobjcopy objcopy)\n@@ -822,6 +753,1 @@\n-  UTIL_CHECK_TOOLS(OBJDUMP, [gobjdump objdump])\n-  if test \"x$OBJDUMP\" != x; then\n-    # Only used for compare.sh; we can live without it. UTIL_FIXUP_EXECUTABLE\n-    # bails if argument is missing.\n-    UTIL_FIXUP_EXECUTABLE(OBJDUMP)\n-  fi\n+  UTIL_LOOKUP_TOOLCHAIN_PROGS(OBJDUMP, gobjdump objdump)\n@@ -831,3 +757,1 @@\n-      UTIL_CHECK_TOOLS(CXXFILT, [c++filt])\n-      UTIL_CHECK_NONEMPTY(CXXFILT)\n-      UTIL_FIXUP_EXECUTABLE(CXXFILT)\n+      UTIL_REQUIRE_TOOLCHAIN_PROGS(CXXFILT, c++filt)\n@@ -905,2 +829,3 @@\n-          BUILD_VS_INCLUDE=\"$BUILD_DEVKIT_VS_INCLUDE\"\n-          BUILD_VS_LIB=\"$BUILD_DEVKIT_VS_LIB\"\n+          # For historical reasons, paths are separated by ; in devkit.info\n+          BUILD_VS_INCLUDE=\"${BUILD_DEVKIT_VS_INCLUDE\/\/;\/:}\"\n+          BUILD_VS_LIB=\"${BUILD_DEVKIT_VS_LIB\/\/;\/:}\"\n@@ -908,1 +833,1 @@\n-          TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS([BUILD_])\n+          TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS(BUILD_, BUILD_)\n@@ -911,8 +836,0 @@\n-    fi\n-\n-    # FIXME: we should list the discovered compilers as an exclude pattern!\n-    # If we do that, we can do this detection before POST_DETECTION, and still\n-    # find the build compilers in the tools dir, if needed.\n-    if test \"x$OPENJDK_BUILD_OS\" = xmacosx; then\n-      UTIL_REQUIRE_PROGS(BUILD_CC, [clang cl cc gcc])\n-      UTIL_REQUIRE_PROGS(BUILD_CXX, [clang++ cl CC g++])\n@@ -920,2 +837,11 @@\n-      UTIL_REQUIRE_PROGS(BUILD_CC, [cl cc gcc])\n-      UTIL_REQUIRE_PROGS(BUILD_CXX, [cl CC g++])\n+      if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+        # If we got no devkit, we need to go hunting for the proper env\n+        TOOLCHAIN_FIND_VISUAL_STUDIO_BAT_FILE($OPENJDK_BUILD_CPU, [$TOOLCHAIN_VERSION])\n+        TOOLCHAIN_EXTRACT_VISUAL_STUDIO_ENV($OPENJDK_BUILD_CPU, BUILD_)\n+\n+        # We cannot currently export the VS_PATH to spec.gmk. This is probably\n+        # strictly not correct, but seems to work anyway.\n+\n+        # Convert VS_INCLUDE and VS_LIB into sysroot flags\n+        TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS(BUILD_)\n+      fi\n@@ -923,12 +849,1 @@\n-    UTIL_FIXUP_EXECUTABLE(BUILD_CC)\n-    UTIL_FIXUP_EXECUTABLE(BUILD_CXX)\n-    UTIL_PATH_PROGS(BUILD_NM, nm gcc-nm)\n-    UTIL_FIXUP_EXECUTABLE(BUILD_NM)\n-    UTIL_PATH_PROGS(BUILD_AR, ar gcc-ar)\n-    UTIL_FIXUP_EXECUTABLE(BUILD_AR)\n-    UTIL_PATH_PROGS(BUILD_OBJCOPY, objcopy)\n-    UTIL_FIXUP_EXECUTABLE(BUILD_OBJCOPY)\n-    UTIL_PATH_PROGS(BUILD_STRIP, strip)\n-    UTIL_FIXUP_EXECUTABLE(BUILD_STRIP)\n-    # Assume the C compiler is the assembler\n-    BUILD_AS=\"$BUILD_CC -c\"\n+\n@@ -936,21 +851,6 @@\n-      # In the Microsoft toolchain we have a separate LD command \"link\".\n-      # Make sure we reject \/usr\/bin\/link (as determined in CYGWIN_LINK), which is\n-      # a cygwin program for something completely different.\n-      AC_CHECK_PROG([BUILD_LD], [link$EXE_SUFFIX],[link$EXE_SUFFIX],,, [$CYGWIN_LINK])\n-      UTIL_FIXUP_EXECUTABLE(BUILD_LD)\n-      # Verify that we indeed succeeded with this trick.\n-      AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])\n-\n-      # Reset PATH since it can contain a mix of WSL\/linux paths and Windows paths from VS,\n-      # which, in combination with WSLENV, will make the WSL layer complain\n-      old_path=\"$PATH\"\n-      PATH=\n-\n-      \"$BUILD_LD\" --version > \/dev\/null\n-\n-      if test $? -eq 0 ; then\n-        AC_MSG_RESULT([no])\n-        AC_MSG_ERROR([This is the Cygwin link tool. Please check your PATH and rerun configure.])\n-      else\n-        AC_MSG_RESULT([yes])\n-      fi\n+      UTIL_REQUIRE_PROGS(BUILD_CC, cl, [$VS_PATH])\n+      UTIL_REQUIRE_PROGS(BUILD_CXX, cl, [$VS_PATH])\n+\n+      # On windows, the assember is \"ml.exe\". We currently don't need this so\n+      # do not require.\n+      UTIL_LOOKUP_PROGS(BUILD_AS, ml, [$VS_PATH])\n@@ -958,1 +858,3 @@\n-      PATH=\"$old_path\"\n+      # On windows, the ar tool is lib.exe (used to create static libraries).\n+      # We currently don't need this so do not require.\n+      UTIL_LOOKUP_PROGS(BUILD_AR, lib, [$VS_PATH])\n@@ -960,0 +862,3 @@\n+      # In the Microsoft toolchain we have a separate LD command \"link\".\n+      UTIL_REQUIRE_PROGS(BUILD_LD, link, [$VS_PATH])\n+      TOOLCHAIN_VERIFY_LINK_BINARY(BUILD_LD)\n@@ -962,0 +867,13 @@\n+      if test \"x$OPENJDK_BUILD_OS\" = xmacosx; then\n+        UTIL_REQUIRE_PROGS(BUILD_CC, clang cc gcc)\n+        UTIL_REQUIRE_PROGS(BUILD_CXX, clang++ CC g++)\n+      else\n+        UTIL_REQUIRE_PROGS(BUILD_CC, cc gcc)\n+        UTIL_REQUIRE_PROGS(BUILD_CXX, CC g++)\n+      fi\n+      UTIL_LOOKUP_PROGS(BUILD_NM, nm gcc-nm)\n+      UTIL_LOOKUP_PROGS(BUILD_AR, ar gcc-ar lib)\n+      UTIL_LOOKUP_PROGS(BUILD_OBJCOPY, objcopy)\n+      UTIL_LOOKUP_PROGS(BUILD_STRIP, strip)\n+      # Assume the C compiler is the assembler\n+      BUILD_AS=\"$BUILD_CC -c\"\n@@ -1006,1 +924,1 @@\n-    CC_VERSION_OUTPUT=`$CC 2>&1 | $GREP -v 'ERROR.*UtilTranslatePathList' | $HEAD -n 1 | $TR -d '\\r'`\n+    CC_VERSION_OUTPUT=`$CC 2>&1 1>\/dev\/null | $HEAD -n 1 | $TR -d '\\r'`\n@@ -1102,1 +1020,1 @@\n-      UTIL_PATH_PROGS(JTREGEXE, jtreg)\n+      UTIL_LOOKUP_PROGS(JTREGEXE, jtreg)\n","filename":"make\/autoconf\/toolchain.m4","additions":109,"deletions":191,"binary":false,"changes":300,"status":"modified"},{"patch":"@@ -0,0 +1,695 @@\n+#\n+# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# The order of these defines the priority by which we try to find them.\n+VALID_VS_VERSIONS=\"2019 2017\"\n+\n+VS_DESCRIPTION_2017=\"Microsoft Visual Studio 2017\"\n+VS_VERSION_INTERNAL_2017=141\n+VS_MSVCR_2017=vcruntime140.dll\n+VS_MSVCP_2017=msvcp140.dll\n+VS_ENVVAR_2017=\"VS150COMNTOOLS\"\n+VS_USE_UCRT_2017=\"true\"\n+VS_VS_INSTALLDIR_2017=\"Microsoft Visual Studio\/2017\"\n+VS_EDITIONS_2017=\"BuildTools Community Professional Enterprise\"\n+VS_SDK_INSTALLDIR_2017=\n+VS_VS_PLATFORM_NAME_2017=\"v141\"\n+VS_SDK_PLATFORM_NAME_2017=\n+VS_SUPPORTED_2017=true\n+VS_TOOLSET_SUPPORTED_2017=true\n+\n+VS_DESCRIPTION_2019=\"Microsoft Visual Studio 2019\"\n+VS_VERSION_INTERNAL_2019=142\n+VS_MSVCR_2019=vcruntime140.dll\n+VS_VCRUNTIME_1_2019=vcruntime140_1.dll\n+VS_MSVCP_2019=msvcp140.dll\n+VS_ENVVAR_2019=\"VS160COMNTOOLS\"\n+VS_USE_UCRT_2019=\"true\"\n+VS_VS_INSTALLDIR_2019=\"Microsoft Visual Studio\/2019\"\n+VS_EDITIONS_2019=\"BuildTools Community Professional Enterprise\"\n+VS_SDK_INSTALLDIR_2019=\n+VS_VS_PLATFORM_NAME_2019=\"v142\"\n+VS_SDK_PLATFORM_NAME_2019=\n+VS_SUPPORTED_2019=true\n+VS_TOOLSET_SUPPORTED_2019=true\n+\n+################################################################################\n+\n+AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT],\n+[\n+  if test \"x$VS_ENV_CMD\" = x; then\n+    TARGET_CPU=\"$1\"\n+    VS_VERSION=\"$2\"\n+    VS_BASE=\"$3\"\n+    METHOD=\"$4\"\n+\n+    UTIL_FIXUP_PATH(VS_BASE, NOFAIL)\n+\n+    if test \"x$VS_BASE\" != x && test -d \"$VS_BASE\"; then\n+      # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n+      # Find the first one present and use that.\n+      if test \"x$VS_EDITIONS\" != x; then\n+        for edition in $VS_EDITIONS; do\n+          if test -d \"$VS_BASE\/$edition\"; then\n+            VS_BASE=\"$VS_BASE\/$edition\"\n+            break\n+          fi\n+        done\n+      fi\n+\n+      AC_MSG_NOTICE([Found Visual Studio installation at $VS_BASE using $METHOD])\n+      if test \"x$TARGET_CPU\" = xx86; then\n+        VCVARSFILES=\"vc\/bin\/vcvars32.bat vc\/auxiliary\/build\/vcvars32.bat\"\n+      elif test \"x$TARGET_CPU\" = xx86_64; then\n+        VCVARSFILES=\"vc\/bin\/amd64\/vcvars64.bat vc\/bin\/x86_amd64\/vcvarsx86_amd64.bat \\\n+            vc\/auxiliary\/build\/vcvarsx86_amd64.bat vc\/auxiliary\/build\/vcvars64.bat\"\n+      elif test \"x$TARGET_CPU\" = xaarch64; then\n+        # for host x86-64, target aarch64\n+        VCVARSFILES=\"vc\/auxiliary\/build\/vcvarsamd64_arm64.bat \\\n+            vc\/auxiliary\/build\/vcvarsx86_arm64.bat\"\n+      fi\n+\n+      for VCVARSFILE in $VCVARSFILES; do\n+        if test -f \"$VS_BASE\/$VCVARSFILE\"; then\n+          VS_ENV_CMD=\"$VS_BASE\/$VCVARSFILE\"\n+          break\n+        fi\n+      done\n+\n+      if test \"x$VS_ENV_CMD\" = x; then\n+        AC_MSG_NOTICE([Warning: None of $VCVARSFILES were found, Visual Studio installation not recognized. Ignoring])\n+      else\n+        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n+        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n+        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n+        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n+      fi\n+    fi\n+  fi\n+])\n+\n+################################################################################\n+\n+AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT],\n+[\n+  if test \"x$VS_ENV_CMD\" = x; then\n+    TARGET_CPU=\"$1\"\n+    VS_VERSION=\"$2\"\n+    WIN_SDK_BASE=\"$3\"\n+    METHOD=\"$4\"\n+\n+    UTIL_FIXUP_PATH(WIN_SDK_BASE, NOFAIL)\n+\n+    if test \"x$WIN_SDK_BASE\" != x && test -d \"$WIN_SDK_BASE\"; then\n+      # There have been cases of partial or broken SDK installations. A missing\n+      # lib dir is not going to work.\n+      if test ! -d \"$WIN_SDK_BASE\/lib\"; then\n+        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n+        AC_MSG_NOTICE([Warning: Installation is broken, lib dir is missing. Ignoring])\n+      elif test -f \"$WIN_SDK_BASE\/bin\/setenv.cmd\"; then\n+        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n+        VS_ENV_CMD=\"$WIN_SDK_BASE\/bin\/setenv.cmd\"\n+        if test \"x$TARGET_CPU\" = xx86; then\n+          VS_ENV_ARGS=\"\/x86\"\n+        elif test \"x$TARGET_CPU\" = xx86_64; then\n+          VS_ENV_ARGS=\"\/x64\"\n+        elif test \"x$TARGET_CPU\" = xaarch64; then\n+          VS_ENV_ARGS=\"\/arm64\"\n+        fi\n+        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n+        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n+        # TODO: improve detection for other versions of SDK\n+        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n+      else\n+        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n+        AC_MSG_NOTICE([Warning: Installation is broken, SetEnv.Cmd is missing. Ignoring])\n+      fi\n+    fi\n+  fi\n+])\n+\n+################################################################################\n+# Finds the bat or cmd file in Visual Studio or the SDK that sets up a proper\n+# build environment and assigns it to VS_ENV_CMD\n+AC_DEFUN([TOOLCHAIN_FIND_VISUAL_STUDIO_BAT_FILE],\n+[\n+  # VS2017 provides the option to install previous minor versions of the MSVC\n+  # toolsets. It is not possible to directly download earlier minor versions of\n+  # VS2017 and in order to build with a previous minor compiler toolset version,\n+  # it is now possible to compile with earlier minor versions by passing\n+  # -vcvars_ver=<toolset_version> argument to vcvarsall.bat.\n+  AC_ARG_WITH(msvc-toolset-version, [AS_HELP_STRING([--with-msvc-toolset-version],\n+      [specific MSVC toolset version to use, passed as -vcvars_ver argument to\n+       pass to vcvarsall.bat (Windows only)])])\n+\n+  TARGET_CPU=\"$1\"\n+  VS_VERSION=\"$2\"\n+  eval VS_COMNTOOLS_VAR=\"\\${VS_ENVVAR_${VS_VERSION}}\"\n+  eval VS_COMNTOOLS=\"\\$${VS_COMNTOOLS_VAR}\"\n+  eval VS_INSTALL_DIR=\"\\${VS_VS_INSTALLDIR_${VS_VERSION}}\"\n+  eval VS_EDITIONS=\"\\${VS_EDITIONS_${VS_VERSION}}\"\n+  eval SDK_INSTALL_DIR=\"\\${VS_SDK_INSTALLDIR_${VS_VERSION}}\"\n+  eval VS_ENV_ARGS=\"\\${VS_ENV_ARGS_${VS_VERSION}}\"\n+  eval VS_TOOLSET_SUPPORTED=\"\\${VS_TOOLSET_SUPPORTED_${VS_VERSION}}\"\n+\n+  VS_ENV_CMD=\"\"\n+\n+  # When using --with-tools-dir, assume it points to the correct and default\n+  # version of Visual Studio or that --with-toolchain-version was also set.\n+  if test \"x$with_tools_dir\" != x; then\n+    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [$with_tools_dir\/..\/..], [--with-tools-dir])\n+    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [$with_tools_dir\/..\/..\/..], [--with-tools-dir])\n+    if test \"x$VS_ENV_CMD\" = x; then\n+      # Having specified an argument which is incorrect will produce an instant failure;\n+      # we should not go on looking\n+      AC_MSG_NOTICE([The path given by --with-tools-dir does not contain a valid])\n+      AC_MSG_NOTICE([Visual Studio installation. Please point to the VC\/bin or VC\/bin\/amd64])\n+      AC_MSG_NOTICE([directory within the Visual Studio installation])\n+      AC_MSG_ERROR([Cannot locate a valid Visual Studio installation])\n+    fi\n+  fi\n+\n+  if test \"x$VS_COMNTOOLS\" != x; then\n+    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [$VS_COMNTOOLS\/..\/..], [$VS_COMNTOOLS_VAR variable])\n+  fi\n+  if test \"x$PROGRAMFILES\" != x; then\n+    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [$PROGRAMFILES\/$VS_INSTALL_DIR], [well-known name])\n+  fi\n+  # Work around the insanely named ProgramFiles(x86) env variable\n+  PROGRAMFILES_X86=\"`env | $SED -n 's\/^ProgramFiles(x86)=\/\/p'`\"\n+  if test \"x$PROGRAMFILES_X86\" != x; then\n+    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [$PROGRAMFILES_X86\/$VS_INSTALL_DIR], [well-known name])\n+  fi\n+  TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+      [c:\/program files\/$VS_INSTALL_DIR], [well-known name])\n+  TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([$TARGET_CPU], [$VS_VERSION],\n+      [c:\/program files (x86)\/$VS_INSTALL_DIR], [well-known name])\n+  if test \"x$SDK_INSTALL_DIR\" != x; then\n+    if test \"x$ProgramW6432\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([$TARGET_CPU], [$VS_VERSION],\n+          [$ProgramW6432\/$SDK_INSTALL_DIR], [well-known name])\n+    fi\n+    if test \"x$PROGRAMW6432\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([$TARGET_CPU], [$VS_VERSION],\n+          [$PROGRAMW6432\/$SDK_INSTALL_DIR], [well-known name])\n+    fi\n+    if test \"x$PROGRAMFILES\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([$TARGET_CPU], [$VS_VERSION],\n+          [$PROGRAMFILES\/$SDK_INSTALL_DIR], [well-known name])\n+    fi\n+    TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [c:\/program files\/$SDK_INSTALL_DIR], [well-known name])\n+    TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([$TARGET_CPU], [$VS_VERSION],\n+        [c:\/program files (x86)\/$SDK_INSTALL_DIR], [well-known name])\n+  fi\n+\n+  VCVARS_VER=auto\n+  if test \"x$VS_TOOLSET_SUPPORTED\" != x; then\n+    if test \"x$with_msvc_toolset_version\" != x; then\n+      VCVARS_VER=\"$with_msvc_toolset_version\"\n+    fi\n+  fi\n+])\n+\n+################################################################################\n+\n+AC_DEFUN([TOOLCHAIN_FIND_VISUAL_STUDIO],\n+[\n+  AC_ARG_WITH(toolchain-version, [AS_HELP_STRING([--with-toolchain-version],\n+      [the version of the toolchain to look for, use '--help' to show possible values @<:@platform dependent@:>@])])\n+\n+  if test \"x$with_toolchain_version\" = xlist; then\n+    # List all toolchains\n+    AC_MSG_NOTICE([The following toolchain versions are valid on this platform:])\n+    for version in $VALID_VS_VERSIONS; do\n+      eval VS_DESCRIPTION=\\${VS_DESCRIPTION_$version}\n+      $PRINTF \"  %-10s  %s\\n\" $version \"$VS_DESCRIPTION\"\n+    done\n+\n+    exit 0\n+  elif test \"x$DEVKIT_VS_VERSION\" != x; then\n+    VS_VERSION=$DEVKIT_VS_VERSION\n+    TOOLCHAIN_VERSION=$VS_VERSION\n+    # If the devkit has a name, use that as description\n+    VS_DESCRIPTION=\"$DEVKIT_NAME\"\n+    if test \"x$VS_DESCRIPTION\" = x; then\n+      eval VS_DESCRIPTION=\"\\${VS_DESCRIPTION_${VS_VERSION}}\"\n+    fi\n+    eval VS_VERSION_INTERNAL=\"\\${VS_VERSION_INTERNAL_${VS_VERSION}}\"\n+    eval MSVCR_NAME=\"\\${VS_MSVCR_${VS_VERSION}}\"\n+    eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n+    eval MSVCP_NAME=\"\\${VS_MSVCP_${VS_VERSION}}\"\n+    eval USE_UCRT=\"\\${VS_USE_UCRT_${VS_VERSION}}\"\n+    eval VS_SUPPORTED=\"\\${VS_SUPPORTED_${VS_VERSION}}\"\n+    eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n+\n+    # For historical reasons, paths are separated by ; in devkit.info\n+    VS_INCLUDE=${DEVKIT_VS_INCLUDE\/\/;\/:}\n+    VS_LIB=${DEVKIT_VS_LIB\/\/;\/:}\n+\n+    AC_MSG_NOTICE([Found devkit $VS_DESCRIPTION])\n+\n+  elif test \"x$with_toolchain_version\" != x; then\n+    # User override; check that it is valid\n+    if test \"x${VALID_VS_VERSIONS\/$with_toolchain_version\/}\" = \"x${VALID_VS_VERSIONS}\"; then\n+      AC_MSG_NOTICE([Visual Studio version $with_toolchain_version is not valid.])\n+      AC_MSG_NOTICE([Valid Visual Studio versions: $VALID_VS_VERSIONS.])\n+      AC_MSG_ERROR([Cannot continue.])\n+    fi\n+    VS_VERSIONS_PROBE_LIST=\"$with_toolchain_version\"\n+  else\n+    # No flag given, use default\n+    VS_VERSIONS_PROBE_LIST=\"$VALID_VS_VERSIONS\"\n+  fi\n+\n+  for VS_VERSION in $VS_VERSIONS_PROBE_LIST; do\n+    TOOLCHAIN_FIND_VISUAL_STUDIO_BAT_FILE($OPENJDK_TARGET_CPU, [$VS_VERSION])\n+    if test \"x$VS_ENV_CMD\" != x; then\n+      TOOLCHAIN_VERSION=$VS_VERSION\n+      eval VS_DESCRIPTION=\"\\${VS_DESCRIPTION_${VS_VERSION}}\"\n+      eval VS_VERSION_INTERNAL=\"\\${VS_VERSION_INTERNAL_${VS_VERSION}}\"\n+      eval MSVCR_NAME=\"\\${VS_MSVCR_${VS_VERSION}}\"\n+      eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n+      eval MSVCP_NAME=\"\\${VS_MSVCP_${VS_VERSION}}\"\n+      eval USE_UCRT=\"\\${VS_USE_UCRT_${VS_VERSION}}\"\n+      eval VS_SUPPORTED=\"\\${VS_SUPPORTED_${VS_VERSION}}\"\n+      # The rest of the variables are already evaled while probing\n+      AC_MSG_NOTICE([Found $VS_DESCRIPTION])\n+      break\n+    fi\n+  done\n+\n+  TOOLCHAIN_DESCRIPTION=\"$VS_DESCRIPTION\"\n+  if test \"x$VS_SUPPORTED\" = \"xfalse\"; then\n+    UNSUPPORTED_TOOLCHAIN_VERSION=yes\n+  fi\n+])\n+\n+AC_DEFUN([TOOLCHAIN_EXTRACT_VISUAL_STUDIO_ENV],\n+[\n+  TARGET_CPU=$1\n+\n+  AC_MSG_NOTICE([Trying to extract Visual Studio environment variables for $TARGET_CPU])\n+  AC_MSG_NOTICE([using $VS_ENV_CMD $VS_ENV_ARGS])\n+\n+  VS_ENV_TMP_DIR=\"$CONFIGURESUPPORT_OUTPUTDIR\/vs-env-$TARGET_CPU\"\n+  $MKDIR -p $VS_ENV_TMP_DIR\n+\n+  # Cannot use the VS10 setup script directly (since it only updates the DOS subshell environment).\n+  # Instead create a shell script which will set the relevant variables when run.\n+\n+  OLDPATH=\"$PATH\"\n+  # Make sure we only capture additions to PATH needed by VS.\n+  # Clear out path, but need system dir present for vsvars cmd file to be able to run\n+  export PATH=$WINENV_PREFIX\/c\/windows\/system32\n+  # The \"| cat\" is to stop SetEnv.Cmd to mess with system colors on some systems\n+  # We can't pass -vcvars_ver=$VCVARS_VER here because cmd.exe eats all '='\n+  # in bat file arguments. :-(\n+  $FIXPATH $CMD \/c \"$TOPDIR\/make\/scripts\/extract-vs-env.cmd\" \"$VS_ENV_CMD\" \\\n+      \"$VS_ENV_TMP_DIR\/set-vs-env.sh\" $VCVARS_VER $VS_ENV_ARGS \\\n+      > $VS_ENV_TMP_DIR\/extract-vs-env.log | $CAT 2>&1\n+  PATH=\"$OLDPATH\"\n+\n+  if test ! -s $VS_ENV_TMP_DIR\/set-vs-env.sh; then\n+    AC_MSG_NOTICE([Could not succesfully extract the environment variables needed for the VS setup.])\n+    AC_MSG_NOTICE([Try setting --with-tools-dir to the VC\/bin directory within the VS installation.])\n+    AC_MSG_NOTICE([To analyze the problem, see extract-vs-env.log and extract-vs-env.bat in])\n+    AC_MSG_NOTICE([$VS_ENV_TMP_DIR.])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n+\n+  # Remove windows line endings\n+  $SED -i -e 's|\\r||g' $VS_ENV_TMP_DIR\/set-vs-env.sh\n+\n+  # Now set all paths and other env variables by executing the generated\n+  # shell script. This will allow the rest of the configure script to find\n+  # and run the compiler in the proper way.\n+  AC_MSG_NOTICE([Setting extracted environment variables for $TARGET_CPU])\n+  . $VS_ENV_TMP_DIR\/set-vs-env.sh\n+\n+  # Remove any paths containing # (typically F#) as that messes up make. This\n+  # is needed if visual studio was installed with F# support.\n+  [ VS_PATH=`$ECHO \"$VS_PATH\" | $SED 's\/[^:#]*#[^:]*:\/\/g'` ]\n+\n+  # Sometimes case is off\n+  if test -z \"$WINDOWSSDKDIR\"; then\n+    WINDOWSSDKDIR=\"$WindowsSdkDir\"\n+  fi\n+  # Now we have VS_PATH, VS_INCLUDE, VS_LIB. For further checking, we\n+  # also define VCINSTALLDIR and WINDOWSSDKDIR. All are in\n+  # unix style.\n+])\n+\n+################################################################################\n+# Check if the VS env variables were setup prior to running configure.\n+# If not, then find vcvarsall.bat and run it automatically, and integrate\n+# the set env variables into the spec file.\n+AC_DEFUN([TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV],\n+[\n+  # Locate the vsvars bat file and save it as VS_ENV_CMD\n+  TOOLCHAIN_FIND_VISUAL_STUDIO\n+\n+  # If we have a devkit, we don't need to run VS_ENV_CMD\n+  if test \"x$DEVKIT_VS_VERSION\" = x; then\n+    if test \"x$VS_ENV_CMD\" != x; then\n+      # We have found a Visual Studio environment on disk, let's extract variables\n+      # from the vsvars bat file into shell variables in the configure script.\n+      TOOLCHAIN_EXTRACT_VISUAL_STUDIO_ENV($OPENJDK_TARGET_CPU)\n+\n+      # Now we have VS_PATH, VS_INCLUDE, VS_LIB. For further checking, we\n+      # also define VCINSTALLDIR and WINDOWSSDKDIR. All are in\n+      # unix style.\n+    else\n+      # We did not find a vsvars bat file.\n+      AC_MSG_ERROR([Cannot locate a valid Visual Studio installation])\n+    fi\n+  fi\n+\n+  # At this point, we should have correct variables in the environment\n+  AC_MSG_CHECKING([that Visual Studio variables have been correctly extracted])\n+\n+  if test \"x$VCINSTALLDIR\" != x || test \"x$WINDOWSSDKDIR\" != x \\\n+      || test \"x$DEVKIT_NAME\" != x; then\n+    if test \"x$VS_INCLUDE\" = x || test \"x$VS_LIB\" = x; then\n+      AC_MSG_RESULT([no; Visual Studio present but broken])\n+      AC_MSG_ERROR([Your VC command prompt seems broken, INCLUDE and\/or LIB is missing.])\n+    else\n+      AC_MSG_RESULT([ok])\n+\n+      # Turn VS_PATH into TOOLCHAIN_PATH\n+      TOOLCHAIN_PATH=\"$TOOLCHAIN_PATH:$VS_PATH\"\n+\n+      # Convert VS_INCLUDE and VS_LIB into sysroot flags\n+      TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS\n+    fi\n+  else\n+    AC_MSG_RESULT([not found])\n+\n+    if test \"x$VS_ENV_CMD\" = x; then\n+      AC_MSG_NOTICE([Cannot locate a valid Visual Studio or Windows SDK installation on disk])\n+    else\n+      AC_MSG_NOTICE([Running the extraction script failed])\n+    fi\n+    AC_MSG_NOTICE([Try setting --with-tools-dir to the VC\/bin directory within the VS installation.])\n+    AC_MSG_NOTICE([To analyze the problem, see extract-vs-env.log and extract-vs-env.bat in])\n+    AC_MSG_NOTICE([$VS_ENV_TMP_DIR.])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n+])\n+\n+AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL],\n+[\n+  DLL_NAME=\"$1\"\n+  POSSIBLE_MSVC_DLL=\"$2\"\n+  METHOD=\"$3\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    AC_MSG_NOTICE([Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD])\n+\n+    # Need to check if the found msvcr is correct architecture\n+    AC_MSG_CHECKING([found $DLL_NAME architecture])\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n+      CORRECT_MSVCR_ARCH=386\n+    elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+      CORRECT_MSVCR_ARCH=x86-64\n+    elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+      # The cygwin 'file' command only returns \"PE32+ executable (DLL) (console), for MS Windows\",\n+      # without specifying which architecture it is for specifically. This has been fixed upstream.\n+      # https:\/\/github.com\/file\/file\/commit\/b849b1af098ddd530094bf779b58431395db2e10#diff-ff2eced09e6860de75057dd731d092aeR142\n+      CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      AC_MSG_RESULT([ok])\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+      AC_MSG_CHECKING([for $DLL_NAME])\n+      AC_MSG_RESULT([$MSVC_DLL])\n+    else\n+      AC_MSG_RESULT([incorrect, ignoring])\n+      AC_MSG_NOTICE([The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE])\n+    fi\n+  fi\n+])\n+\n+AC_DEFUN([TOOLCHAIN_SETUP_MSVC_DLL],\n+[\n+  DLL_NAME=\"$1\"\n+  MSVC_DLL=\n+\n+  if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n+    vs_target_cpu=x86\n+  elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+    vs_target_cpu=x64\n+  elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+    vs_target_cpu=arm64\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    if test \"x$VCINSTALLDIR\" != x; then\n+      if test \"$VS_VERSION\" -lt 2017; then\n+        # Probe: Using well-known location from Visual Studio 12.0 and older\n+        POSSIBLE_MSVC_DLL=\"$VCINSTALLDIR\/redist\/$vs_target_cpu\/microsoft.vc${VS_VERSION_INTERNAL}.crt\/$DLL_NAME\"\n+      else\n+        # Probe: Using well-known location from VS 2017 and VS 2019\n+        POSSIBLE_MSVC_DLL=\"`ls $VCToolsRedistDir\/$vs_target_cpu\/microsoft.vc${VS_VERSION_INTERNAL}.crt\/$DLL_NAME 2> \/dev\/null`\"\n+      fi\n+      # In case any of the above finds more than one file, loop over them.\n+      for possible_msvc_dll in $POSSIBLE_MSVC_DLL; do\n+        TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$possible_msvc_dll],\n+            [well-known location in VCINSTALLDIR])\n+      done\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Check in the Boot JDK directory.\n+    POSSIBLE_MSVC_DLL=\"$BOOT_JDK\/bin\/$DLL_NAME\"\n+    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n+        [well-known location in Boot JDK])\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Look in the Windows system32 directory\n+    WIN_SYSTEMROOT=\"$SYSTEMROOT\"\n+    UTIL_FIXUP_PATH(WIN_SYSTEMROOT, NOFAIL)\n+    if test \"x$WIN_SYSTEMROOT\" != x; then\n+      POSSIBLE_MSVC_DLL=\"$WIN_SYSTEMROOT\/system32\/$DLL_NAME\"\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n+          [well-known location in SYSTEMROOT])\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: If Visual Studio Express is installed, there is usually one with the debugger\n+    if test \"x$VS100COMNTOOLS\" != x; then\n+      WIN_VS_TOOLS_DIR=\"$VS100COMNTOOLS\/..\"\n+      UTIL_FIXUP_PATH(WIN_VS_TOOLS_DIR, NOFAIL)\n+      if test \"x$WIN_VS_TOOLS_DIR\" != x; then\n+        POSSIBLE_MSVC_DLL=`$FIND \"$WIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n+        | $GREP -i \/$vs_target_cpu\/ | $HEAD --lines 1`\n+        TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n+            [search of VS100COMNTOOLS])\n+      fi\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Search wildly in the VCINSTALLDIR. We've probably lost by now.\n+    # (This was the original behaviour; kept since it might turn something up)\n+    if test \"x$VCINSTALLDIR\" != x; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n+        POSSIBLE_MSVC_DLL=`$FIND \"$VCINSTALLDIR\" -name $DLL_NAME \\\n+        | $GREP x86 | $GREP -v ia64 | $GREP -v x64 | $GREP -v arm64 | $HEAD --lines 1`\n+        if test \"x$POSSIBLE_MSVC_DLL\" = x; then\n+          # We're grasping at straws now...\n+          POSSIBLE_MSVC_DLL=`$FIND \"$VCINSTALLDIR\" -name $DLL_NAME \\\n+          | $HEAD --lines 1`\n+        fi\n+      else\n+        POSSIBLE_MSVC_DLL=`$FIND \"$VCINSTALLDIR\" -name $DLL_NAME \\\n+        | $GREP x64 | $HEAD --lines 1`\n+      fi\n+\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n+          [search of VCINSTALLDIR])\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    AC_MSG_CHECKING([for $DLL_NAME])\n+    AC_MSG_RESULT([no])\n+    AC_MSG_ERROR([Could not find $DLL_NAME. Please specify using --with-msvcr-dll.])\n+  fi\n+])\n+\n+AC_DEFUN([TOOLCHAIN_SETUP_VS_RUNTIME_DLLS],\n+[\n+  AC_ARG_WITH(msvcr-dll, [AS_HELP_STRING([--with-msvcr-dll],\n+      [path to microsoft C runtime dll (msvcr*.dll) (Windows only) @<:@probed@:>@])])\n+\n+  if test \"x$with_msvcr_dll\" != x; then\n+    # If given explicitly by user, do not probe. If not present, fail directly.\n+    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCR_NAME, [$with_msvcr_dll], [--with-msvcr-dll])\n+    if test \"x$MSVC_DLL\" = x; then\n+      AC_MSG_ERROR([Could not find a proper $MSVCR_NAME as specified by --with-msvcr-dll])\n+    fi\n+    MSVCR_DLL=\"$MSVC_DLL\"\n+  elif test \"x$DEVKIT_MSVCR_DLL\" != x; then\n+    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCR_NAME, [$DEVKIT_MSVCR_DLL], [devkit])\n+    if test \"x$MSVC_DLL\" = x; then\n+      AC_MSG_ERROR([Could not find a proper $MSVCR_NAME as specified by devkit])\n+    fi\n+    MSVCR_DLL=\"$MSVC_DLL\"\n+  else\n+    TOOLCHAIN_SETUP_MSVC_DLL([${MSVCR_NAME}])\n+    MSVCR_DLL=\"$MSVC_DLL\"\n+  fi\n+  AC_SUBST(MSVCR_DLL)\n+\n+  AC_ARG_WITH(msvcp-dll, [AS_HELP_STRING([--with-msvcp-dll],\n+      [path to microsoft C++ runtime dll (msvcp*.dll) (Windows only) @<:@probed@:>@])])\n+\n+  if test \"x$MSVCP_NAME\" != \"x\"; then\n+    if test \"x$with_msvcp_dll\" != x; then\n+      # If given explicitly by user, do not probe. If not present, fail directly.\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCP_NAME, [$with_msvcp_dll], [--with-msvcp-dll])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $MSVCP_NAME as specified by --with-msvcp-dll])\n+      fi\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    elif test \"x$DEVKIT_MSVCP_DLL\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCP_NAME, [$DEVKIT_MSVCP_DLL], [devkit])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $MSVCP_NAME as specified by devkit])\n+      fi\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    else\n+      TOOLCHAIN_SETUP_MSVC_DLL([${MSVCP_NAME}])\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    fi\n+    AC_SUBST(MSVCP_DLL)\n+  fi\n+\n+  AC_ARG_WITH(vcruntime-1-dll, [AS_HELP_STRING([--with-vcruntime-1-dll],\n+      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows x64 only) @<:@probed@:>@])])\n+\n+  if test \"x$VCRUNTIME_1_NAME\" != \"x\" && test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+    if test \"x$with_vcruntime_1_dll\" != x; then\n+      # If given explicitly by user, do not probe. If not present, fail directly.\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$with_vcruntime_1_dll],\n+          [--with-vcruntime-1-dll])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by --with-vcruntime-1-dll])\n+      fi\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    elif test \"x$DEVKIT_VCRUNTIME_1_DLL\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$DEVKIT_VCRUNTIME_1_DLL], [devkit])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by devkit])\n+      fi\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    else\n+      TOOLCHAIN_SETUP_MSVC_DLL([${VCRUNTIME_1_NAME}])\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    fi\n+  fi\n+  AC_SUBST(VCRUNTIME_1_DLL)\n+\n+  AC_ARG_WITH(ucrt-dll-dir, [AS_HELP_STRING([--with-ucrt-dll-dir],\n+      [path to Microsoft Windows Kit UCRT DLL dir (Windows only) @<:@probed@:>@])])\n+\n+  if test \"x$USE_UCRT\" = \"xtrue\" && test \"x$OPENJDK_TARGET_CPU\" != xaarch64; then\n+    AC_MSG_CHECKING([for UCRT DLL dir])\n+    if test \"x$with_ucrt_dll_dir\" != x; then\n+      if test -z \"$(ls -d \"$with_ucrt_dll_dir\/\"*.dll 2> \/dev\/null)\"; then\n+        AC_MSG_RESULT([no])\n+        AC_MSG_ERROR([Could not find any dlls in $with_ucrt_dll_dir])\n+      else\n+        AC_MSG_RESULT([$with_ucrt_dll_dir])\n+        UCRT_DLL_DIR=\"$with_ucrt_dll_dir\"\n+        UTIL_FIXUP_PATH([UCRT_DLL_DIR])\n+      fi\n+    elif test \"x$DEVKIT_UCRT_DLL_DIR\" != \"x\"; then\n+      UCRT_DLL_DIR=\"$DEVKIT_UCRT_DLL_DIR\"\n+      AC_MSG_RESULT($UCRT_DLL_DIR)\n+    else\n+      dll_subdir=$OPENJDK_TARGET_CPU\n+      if test \"x$dll_subdir\" = \"xaarch64\"; then\n+        dll_subdir=\"arm64\"\n+      elif test \"x$dll_subdir\" = \"xx86_64\"; then\n+        dll_subdir=\"x64\"\n+      fi\n+      UCRT_DLL_DIR=\"$WINDOWSSDKDIR\/redist\/ucrt\/dlls\/$dll_subdir\"\n+      if test -z \"$(ls -d \"$UCRT_DLL_DIR\/\"*.dll 2> \/dev\/null)\"; then\n+        # Try with version subdir\n+        UCRT_DLL_DIR=\"`ls -d $WINDOWSSDKDIR\/redist\/*\/ucrt\/dlls\/$dll_subdir \\\n+            2> \/dev\/null | $SORT -d | $HEAD -n1`\"\n+        if test -z \"$UCRT_DLL_DIR\" \\\n+            || test -z \"$(ls -d \"$UCRT_DLL_DIR\/\"*.dll 2> \/dev\/null)\"; then\n+          AC_MSG_RESULT([no])\n+          AC_MSG_ERROR([Could not find any dlls in $UCRT_DLL_DIR])\n+        else\n+          AC_MSG_RESULT($UCRT_DLL_DIR)\n+        fi\n+      else\n+        AC_MSG_RESULT($UCRT_DLL_DIR)\n+      fi\n+    fi\n+  else\n+    UCRT_DLL_DIR=\n+  fi\n+  AC_SUBST(UCRT_DLL_DIR)\n+])\n+\n+# Setup the sysroot flags and add them to global CFLAGS and LDFLAGS so\n+# that configure can use them while detecting compilers.\n+# TOOLCHAIN_TYPE is available here.\n+# Param 1 - Optional prefix to SYSROOT variables. (e.g BUILD_)\n+# Param 2 - Optional prefix to VS variables. (e.g BUILD_)\n+AC_DEFUN([TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS],\n+[\n+  OLDIFS=\"$IFS\"\n+  IFS=\":\"\n+\n+  # Convert VS_INCLUDE into SYSROOT_CFLAGS\n+  for ipath in [$]$2VS_INCLUDE; do\n+    $1SYSROOT_CFLAGS=\"[$]$1SYSROOT_CFLAGS -I$ipath\"\n+  done\n+\n+  # Convert VS_LIB into SYSROOT_LDFLAGS\n+  for libpath in [$]$2VS_LIB; do\n+    $1SYSROOT_LDFLAGS=\"[$]$1SYSROOT_LDFLAGS -libpath:$libpath\"\n+  done\n+\n+  IFS=\"$OLDIFS\"\n+\n+  AC_SUBST($1SYSROOT_CFLAGS)\n+  AC_SUBST($1SYSROOT_LDFLAGS)\n+])\n","filename":"make\/autoconf\/toolchain_microsoft.m4","additions":695,"deletions":0,"binary":false,"changes":695,"status":"added"},{"patch":"@@ -1,849 +0,0 @@\n-#\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-################################################################################\n-# The order of these defines the priority by which we try to find them.\n-VALID_VS_VERSIONS=\"2019 2017\"\n-\n-VS_DESCRIPTION_2017=\"Microsoft Visual Studio 2017\"\n-VS_VERSION_INTERNAL_2017=141\n-VS_MSVCR_2017=vcruntime140.dll\n-VS_MSVCP_2017=msvcp140.dll\n-VS_ENVVAR_2017=\"VS150COMNTOOLS\"\n-VS_USE_UCRT_2017=\"true\"\n-VS_VS_INSTALLDIR_2017=\"Microsoft Visual Studio\/2017\"\n-VS_EDITIONS_2017=\"BuildTools Community Professional Enterprise\"\n-VS_SDK_INSTALLDIR_2017=\n-VS_VS_PLATFORM_NAME_2017=\"v141\"\n-VS_SDK_PLATFORM_NAME_2017=\n-VS_SUPPORTED_2017=true\n-VS_TOOLSET_SUPPORTED_2017=true\n-\n-VS_DESCRIPTION_2019=\"Microsoft Visual Studio 2019\"\n-VS_VERSION_INTERNAL_2019=142\n-VS_MSVCR_2019=vcruntime140.dll\n-VS_VCRUNTIME_1_2019=vcruntime140_1.dll\n-VS_MSVCP_2019=msvcp140.dll\n-VS_ENVVAR_2019=\"VS160COMNTOOLS\"\n-VS_USE_UCRT_2019=\"true\"\n-VS_VS_INSTALLDIR_2019=\"Microsoft Visual Studio\/2019\"\n-VS_EDITIONS_2019=\"BuildTools Community Professional Enterprise\"\n-VS_SDK_INSTALLDIR_2019=\n-VS_VS_PLATFORM_NAME_2019=\"v142\"\n-VS_SDK_PLATFORM_NAME_2019=\n-VS_SUPPORTED_2019=true\n-VS_TOOLSET_SUPPORTED_2019=true\n-\n-################################################################################\n-\n-AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT],\n-[\n-  if test \"x$VS_ENV_CMD\" = x; then\n-    VS_VERSION=\"$1\"\n-    VS_BASE=\"$2\"\n-    METHOD=\"$3\"\n-\n-    UTIL_REWRITE_AS_UNIX_PATH(VS_BASE)\n-    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n-    # Find the first one present and use that.\n-    if test \"x$VS_EDITIONS\" != x; then\n-      for edition in $VS_EDITIONS; do\n-        if test -d \"$VS_BASE\/$edition\"; then\n-          VS_BASE=\"$VS_BASE\/$edition\"\n-          break\n-        fi\n-      done\n-    fi\n-\n-    if test -d \"$VS_BASE\"; then\n-      AC_MSG_NOTICE([Found Visual Studio installation at $VS_BASE using $METHOD])\n-      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n-        VCVARSFILES=\"vc\/bin\/vcvars32.bat vc\/auxiliary\/build\/vcvars32.bat\"\n-      elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-        VCVARSFILES=\"vc\/bin\/amd64\/vcvars64.bat vc\/bin\/x86_amd64\/vcvarsx86_amd64.bat \\\n-            VC\/Auxiliary\/Build\/vcvarsx86_amd64.bat VC\/Auxiliary\/Build\/vcvars64.bat\"\n-      elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n-        # for host x86-64, target aarch64\n-        VCVARSFILES=\"vc\/auxiliary\/build\/vcvarsamd64_arm64.bat \\\n-            vc\/auxiliary\/build\/vcvarsx86_arm64.bat\"\n-      fi\n-\n-      for VCVARSFILE in $VCVARSFILES; do\n-        if test -f \"$VS_BASE\/$VCVARSFILE\"; then\n-          VS_ENV_CMD=\"$VS_BASE\/$VCVARSFILE\"\n-          break\n-        fi\n-      done\n-\n-      if test \"x$VS_ENV_CMD\" = x; then\n-        AC_MSG_NOTICE([Warning: None of $VCVARSFILES were found, Visual Studio installation not recognized. Ignoring])\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-      fi\n-    fi\n-  fi\n-])\n-\n-################################################################################\n-\n-AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT],\n-[\n-  if test \"x$VS_ENV_CMD\" = x; then\n-    VS_VERSION=\"$1\"\n-    WIN_SDK_BASE=\"$2\"\n-    METHOD=\"$3\"\n-    UTIL_REWRITE_AS_UNIX_PATH(WIN_SDK_BASE)\n-    if test -d \"$WIN_SDK_BASE\"; then\n-      # There have been cases of partial or broken SDK installations. A missing\n-      # lib dir is not going to work.\n-      if test ! -d \"$WIN_SDK_BASE\/lib\"; then\n-        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n-        AC_MSG_NOTICE([Warning: Installation is broken, lib dir is missing. Ignoring])\n-      elif test -f \"$WIN_SDK_BASE\/Bin\/SetEnv.Cmd\"; then\n-        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n-        VS_ENV_CMD=\"$WIN_SDK_BASE\/Bin\/SetEnv.Cmd\"\n-        if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n-          VS_ENV_ARGS=\"\/x86\"\n-        elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-          VS_ENV_ARGS=\"\/x64\"\n-        elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n-          VS_ENV_ARGS=\"\/arm64\"\n-        fi\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n-      else\n-        AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])\n-        AC_MSG_NOTICE([Warning: Installation is broken, SetEnv.Cmd is missing. Ignoring])\n-      fi\n-    fi\n-  fi\n-])\n-\n-################################################################################\n-# Finds the bat or cmd file in Visual Studio or the SDK that sets up a proper\n-# build environment and assigns it to VS_ENV_CMD\n-AC_DEFUN([TOOLCHAIN_FIND_VISUAL_STUDIO_BAT_FILE],\n-[\n-  # VS2017 provides the option to install previous minor versions of the MSVC\n-  # toolsets. It is not possible to directly download earlier minor versions of\n-  # VS2017 and in order to build with a previous minor compiler toolset version,\n-  # it is now possible to compile with earlier minor versions by passing\n-  # -vcvars_ver=<toolset_version> argument to vcvarsall.bat.\n-  AC_ARG_WITH(msvc-toolset-version, [AS_HELP_STRING([--with-msvc-toolset-version],\n-      [specific MSVC toolset version to use, passed as -vcvars_ver argument to\n-       pass to vcvarsall.bat (Windows only)])])\n-\n-  VS_VERSION=\"$1\"\n-  eval VS_COMNTOOLS_VAR=\"\\${VS_ENVVAR_${VS_VERSION}}\"\n-  eval VS_COMNTOOLS=\"\\$${VS_COMNTOOLS_VAR}\"\n-  eval VS_INSTALL_DIR=\"\\${VS_VS_INSTALLDIR_${VS_VERSION}}\"\n-  eval VS_EDITIONS=\"\\${VS_EDITIONS_${VS_VERSION}}\"\n-  eval SDK_INSTALL_DIR=\"\\${VS_SDK_INSTALLDIR_${VS_VERSION}}\"\n-  eval VS_ENV_ARGS=\"\\${VS_ENV_ARGS_${VS_VERSION}}\"\n-  eval VS_TOOLSET_SUPPORTED=\"\\${VS_TOOLSET_SUPPORTED_${VS_VERSION}}\"\n-\n-  VS_ENV_CMD=\"\"\n-\n-  # When using --with-tools-dir, assume it points to the correct and default\n-  # version of Visual Studio or that --with-toolchain-version was also set.\n-  if test \"x$with_tools_dir\" != x; then\n-    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-        [$with_tools_dir\/..\/..], [--with-tools-dir])\n-    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-        [$with_tools_dir\/..\/..\/..], [--with-tools-dir])\n-    if test \"x$VS_ENV_CMD\" = x; then\n-      # Having specified an argument which is incorrect will produce an instant failure;\n-      # we should not go on looking\n-      AC_MSG_NOTICE([The path given by --with-tools-dir does not contain a valid])\n-      AC_MSG_NOTICE([Visual Studio installation. Please point to the VC\/bin or VC\/bin\/amd64])\n-      AC_MSG_NOTICE([directory within the Visual Studio installation])\n-      AC_MSG_ERROR([Cannot locate a valid Visual Studio installation])\n-    fi\n-  fi\n-\n-  if test \"x$VS_COMNTOOLS\" != x; then\n-    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-        [$VS_COMNTOOLS\/..\/..], [$VS_COMNTOOLS_VAR variable])\n-  fi\n-  if test \"x$PROGRAMFILES\" != x; then\n-    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-        [$PROGRAMFILES\/$VS_INSTALL_DIR], [well-known name])\n-  fi\n-  # Work around the insanely named ProgramFiles(x86) env variable\n-  PROGRAMFILES_X86=\"`env | $SED -n 's\/^ProgramFiles(x86)=\/\/p'`\"\n-  if test \"x$PROGRAMFILES_X86\" != x; then\n-    TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-        [$PROGRAMFILES_X86\/$VS_INSTALL_DIR], [well-known name])\n-  fi\n-  TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-      [C:\/Program Files\/$VS_INSTALL_DIR], [well-known name])\n-  TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT([${VS_VERSION}],\n-      [C:\/Program Files (x86)\/$VS_INSTALL_DIR], [well-known name])\n-  if test \"x$SDK_INSTALL_DIR\" != x; then\n-    if test \"x$ProgramW6432\" != x; then\n-      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([${VS_VERSION}],\n-          [$ProgramW6432\/$SDK_INSTALL_DIR], [well-known name])\n-    fi\n-    if test \"x$PROGRAMW6432\" != x; then\n-      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([${VS_VERSION}],\n-          [$PROGRAMW6432\/$SDK_INSTALL_DIR], [well-known name])\n-    fi\n-    if test \"x$PROGRAMFILES\" != x; then\n-      TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([${VS_VERSION}],\n-          [$PROGRAMFILES\/$SDK_INSTALL_DIR], [well-known name])\n-    fi\n-    TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([${VS_VERSION}],\n-        [C:\/Program Files\/$SDK_INSTALL_DIR], [well-known name])\n-    TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT([${VS_VERSION}],\n-        [C:\/Program Files (x86)\/$SDK_INSTALL_DIR], [well-known name])\n-  fi\n-\n-  if test \"x$VS_TOOLSET_SUPPORTED\" != x; then\n-    if test \"x$with_msvc_toolset_version\" != x; then\n-      VS_ENV_ARGS=\"$VS_ENV_ARGS -vcvars_ver=$with_msvc_toolset_version\"\n-    fi\n-  fi\n-])\n-\n-################################################################################\n-\n-AC_DEFUN([TOOLCHAIN_FIND_VISUAL_STUDIO],\n-[\n-  AC_ARG_WITH(toolchain-version, [AS_HELP_STRING([--with-toolchain-version],\n-      [the version of the toolchain to look for, use '--help' to show possible values @<:@platform dependent@:>@])])\n-\n-  if test \"x$with_toolchain_version\" = xlist; then\n-    # List all toolchains\n-    AC_MSG_NOTICE([The following toolchain versions are valid on this platform:])\n-    for version in $VALID_VS_VERSIONS; do\n-      eval VS_DESCRIPTION=\\${VS_DESCRIPTION_$version}\n-      $PRINTF \"  %-10s  %s\\n\" $version \"$VS_DESCRIPTION\"\n-    done\n-\n-    exit 0\n-  elif test \"x$DEVKIT_VS_VERSION\" != x; then\n-    VS_VERSION=$DEVKIT_VS_VERSION\n-    TOOLCHAIN_VERSION=$VS_VERSION\n-    # If the devkit has a name, use that as description\n-    VS_DESCRIPTION=\"$DEVKIT_NAME\"\n-    if test \"x$VS_DESCRIPTION\" = x; then\n-      eval VS_DESCRIPTION=\"\\${VS_DESCRIPTION_${VS_VERSION}}\"\n-    fi\n-    eval VS_VERSION_INTERNAL=\"\\${VS_VERSION_INTERNAL_${VS_VERSION}}\"\n-    eval MSVCR_NAME=\"\\${VS_MSVCR_${VS_VERSION}}\"\n-    eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n-    eval MSVCP_NAME=\"\\${VS_MSVCP_${VS_VERSION}}\"\n-    eval USE_UCRT=\"\\${VS_USE_UCRT_${VS_VERSION}}\"\n-    eval VS_SUPPORTED=\"\\${VS_SUPPORTED_${VS_VERSION}}\"\n-    eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n-    # The TOOLCHAIN_PATH from a devkit is in Unix format. In WSL we need a\n-    # windows version of the complete VS_PATH as VS_PATH_WINDOWS\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      # Convert the toolchain path\n-      OLDIFS=\"$IFS\"\n-      IFS=\":\"\n-      VS_PATH_WINDOWS=\"\"\n-      for i in $TOOLCHAIN_PATH; do\n-        path=$i\n-        UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([path])\n-        VS_PATH_WINDOWS=\"$VS_PATH_WINDOWS;$path\"\n-      done\n-      IFS=\"$OLDIFS\"\n-      # Append the current path from Windows env\n-      WINDOWS_PATH=\"`$CMD \/c echo %PATH%`\"\n-      VS_PATH_WINDOWS=\"$VS_PATH_WINDOWS;$WINDOWS_PATH\"\n-    else\n-      VS_PATH=\"$TOOLCHAIN_PATH:$PATH\"\n-    fi\n-\n-    # Convert DEVKIT_VS_INCLUDE into windows style VS_INCLUDE so that it\n-    # can still be exported as INCLUDE for compiler invocations without\n-    # SYSROOT_CFLAGS\n-    OLDIFS=\"$IFS\"\n-    IFS=\";\"\n-    for i in $DEVKIT_VS_INCLUDE; do\n-      ipath=$i\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([ipath])\n-      VS_INCLUDE=\"$VS_INCLUDE;$ipath\"\n-    done\n-    # Convert DEVKIT_VS_LIB into VS_LIB so that it can still be exported\n-    # as LIB for compiler invocations without SYSROOT_LDFLAGS\n-    for i in $DEVKIT_VS_LIB; do\n-      libpath=$i\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([libpath])\n-      VS_LIB=\"$VS_LIB;$libpath\"\n-    done\n-    IFS=\"$OLDIFS\"\n-\n-    AC_MSG_NOTICE([Found devkit $VS_DESCRIPTION])\n-\n-  elif test \"x$with_toolchain_version\" != x; then\n-    # User override; check that it is valid\n-    if test \"x${VALID_VS_VERSIONS\/$with_toolchain_version\/}\" = \"x${VALID_VS_VERSIONS}\"; then\n-      AC_MSG_NOTICE([Visual Studio version $with_toolchain_version is not valid.])\n-      AC_MSG_NOTICE([Valid Visual Studio versions: $VALID_VS_VERSIONS.])\n-      AC_MSG_ERROR([Cannot continue.])\n-    fi\n-    VS_VERSIONS_PROBE_LIST=\"$with_toolchain_version\"\n-  else\n-    # No flag given, use default\n-    VS_VERSIONS_PROBE_LIST=\"$VALID_VS_VERSIONS\"\n-  fi\n-\n-  for VS_VERSION in $VS_VERSIONS_PROBE_LIST; do\n-    TOOLCHAIN_FIND_VISUAL_STUDIO_BAT_FILE([$VS_VERSION])\n-    if test \"x$VS_ENV_CMD\" != x; then\n-      TOOLCHAIN_VERSION=$VS_VERSION\n-      eval VS_DESCRIPTION=\"\\${VS_DESCRIPTION_${VS_VERSION}}\"\n-      eval VS_VERSION_INTERNAL=\"\\${VS_VERSION_INTERNAL_${VS_VERSION}}\"\n-      eval MSVCR_NAME=\"\\${VS_MSVCR_${VS_VERSION}}\"\n-      eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n-      eval MSVCP_NAME=\"\\${VS_MSVCP_${VS_VERSION}}\"\n-      eval USE_UCRT=\"\\${VS_USE_UCRT_${VS_VERSION}}\"\n-      eval VS_SUPPORTED=\"\\${VS_SUPPORTED_${VS_VERSION}}\"\n-      # The rest of the variables are already evaled while probing\n-      AC_MSG_NOTICE([Found $VS_DESCRIPTION])\n-      break\n-    fi\n-  done\n-\n-  TOOLCHAIN_DESCRIPTION=\"$VS_DESCRIPTION\"\n-  if test \"x$VS_SUPPORTED\" = \"xfalse\"; then\n-    UNSUPPORTED_TOOLCHAIN_VERSION=yes\n-  fi\n-])\n-\n-################################################################################\n-# Check if the VS env variables were setup prior to running configure.\n-# If not, then find vcvarsall.bat and run it automatically, and integrate\n-# the set env variables into the spec file.\n-AC_DEFUN([TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV],\n-[\n-  # Store path to cygwin link.exe to help excluding it when searching for\n-  # VS linker. This must be done before changing the PATH when looking for VS.\n-  AC_PATH_PROG(CYGWIN_LINK, link.exe)\n-  if test \"x$CYGWIN_LINK\" != x; then\n-    AC_MSG_CHECKING([if the first found link.exe is actually the Cygwin link tool])\n-    \"$CYGWIN_LINK\" --version > \/dev\/null\n-    if test $? -eq 0 ; then\n-      AC_MSG_RESULT([yes])\n-    else\n-      AC_MSG_RESULT([no])\n-      # This might be the VS linker. Don't exclude it later on.\n-      CYGWIN_LINK=\"\"\n-    fi\n-  fi\n-\n-  # First-hand choice is to locate and run the vsvars bat file.\n-  TOOLCHAIN_FIND_VISUAL_STUDIO\n-\n-  # If we have a devkit, skip all of the below.\n-  if test \"x$DEVKIT_VS_VERSION\" = x; then\n-    if test \"x$VS_ENV_CMD\" != x; then\n-      # We have found a Visual Studio environment on disk, let's extract variables from the vsvars bat file.\n-      UTIL_FIXUP_EXECUTABLE(VS_ENV_CMD)\n-\n-      # Lets extract the variables that are set by vcvarsall.bat\/vsvars32.bat\/vsvars64.bat\n-      AC_MSG_NOTICE([Trying to extract Visual Studio environment variables])\n-\n-      # We need to create a couple of temporary files.\n-      VS_ENV_TMP_DIR=\"$CONFIGURESUPPORT_OUTPUTDIR\/vs-env\"\n-      $MKDIR -p $VS_ENV_TMP_DIR\n-\n-      # Cannot use the VS10 setup script directly (since it only updates the DOS subshell environment).\n-      # Instead create a shell script which will set the relevant variables when run.\n-      WINPATH_VS_ENV_CMD=\"$VS_ENV_CMD\"\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_VS_ENV_CMD])\n-\n-      if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-        WINPATH_BASH=\"bash\"\n-      else\n-        WINPATH_BASH=\"$BASH\"\n-        UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_BASH])\n-      fi\n-\n-      # Generate a DOS batch file which runs $VS_ENV_CMD, and then creates a shell\n-      # script (executable by bash) that will setup the important variables.\n-      EXTRACT_VC_ENV_BAT_FILE=\"$VS_ENV_TMP_DIR\/extract-vs-env.bat\"\n-      $ECHO \"@echo off\" >  $EXTRACT_VC_ENV_BAT_FILE\n-      # This will end up something like:\n-      # call C:\/progra~2\/micros~2.0\/vc\/bin\/amd64\/vcvars64.bat\n-      $ECHO \"call \\\"$WINPATH_VS_ENV_CMD\\\" $VS_ENV_ARGS\" >> $EXTRACT_VC_ENV_BAT_FILE\n-      # In some cases, the VS_ENV_CMD will change directory, change back so\n-      # the set-vs-env.sh ends up in the right place.\n-      $ECHO 'cd %~dp0' >> $EXTRACT_VC_ENV_BAT_FILE\n-      if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-        # These will end up something like:\n-        # echo VS_PATH=\\\"$PATH\\\" > set-vs-env.sh\n-        # The trailing space for everyone except PATH is no typo, but is needed due\n-        # to trailing \\ in the Windows paths. These will be stripped later.\n-        # Trying pure CMD extract. This results in windows paths that need to\n-        # be converted post extraction, but a simpler script.\n-        $ECHO 'echo VS_PATH=\"%PATH%\" > set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo VS_INCLUDE=\"%INCLUDE% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo VS_LIB=\"%LIB% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo VCINSTALLDIR=\"%VCINSTALLDIR% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo VCToolsRedistDir=\"%VCToolsRedistDir% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo WindowsSdkDir=\"%WindowsSdkDir% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO 'echo WINDOWSSDKDIR=\"%WINDOWSSDKDIR% \" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-      else\n-        # These will end up something like:\n-        # C:\/CygWin\/bin\/bash -c 'echo VS_PATH=\\\"$PATH\\\" > localdevenv.sh\n-        # The trailing space for everyone except PATH is no typo, but is needed due\n-        # to trailing \\ in the Windows paths. These will be stripped later.\n-        $ECHO \"$WINPATH_BASH -c 'echo VS_PATH=\"'\\\"$PATH\\\" > set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo VS_INCLUDE=\"'\\\"$INCLUDE\\;$include \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo VS_LIB=\"'\\\"$LIB\\;$lib \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo VCINSTALLDIR=\"'\\\"$VCINSTALLDIR \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo VCToolsRedistDir=\"'\\\"$VCToolsRedistDir \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo WindowsSdkDir=\"'\\\"$WindowsSdkDir \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-        $ECHO \"$WINPATH_BASH -c 'echo WINDOWSSDKDIR=\"'\\\"$WINDOWSSDKDIR \\\" >> set-vs-env.sh' \\\n-            >> $EXTRACT_VC_ENV_BAT_FILE\n-      fi\n-\n-      # Now execute the newly created bat file.\n-      # Change directory so we don't need to mess with Windows paths in redirects.\n-      cd $VS_ENV_TMP_DIR\n-      $CMD \/c extract-vs-env.bat > extract-vs-env.log 2>&1\n-      cd $CONFIGURE_START_DIR\n-\n-      if test ! -s $VS_ENV_TMP_DIR\/set-vs-env.sh; then\n-        AC_MSG_NOTICE([Could not succesfully extract the environment variables needed for the VS setup.])\n-        AC_MSG_NOTICE([Try setting --with-tools-dir to the VC\/bin directory within the VS installation])\n-        AC_MSG_NOTICE([or run \"bash.exe -l\" from a VS command prompt and then run configure from there.])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-\n-      # Remove windows line endings\n-      $SED -i -e 's|\\r||g' $VS_ENV_TMP_DIR\/set-vs-env.sh\n-\n-      # Now set all paths and other env variables. This will allow the rest of\n-      # the configure script to find and run the compiler in the proper way.\n-      AC_MSG_NOTICE([Setting extracted environment variables])\n-      . $VS_ENV_TMP_DIR\/set-vs-env.sh\n-      # Now we have VS_PATH, VS_INCLUDE, VS_LIB. For further checking, we\n-      # also define VCINSTALLDIR, WindowsSdkDir and WINDOWSSDKDIR.\n-\n-      # In WSL, the extracted VS_PATH is Windows style. This needs to be\n-      # rewritten as Unix style and the Windows style version is saved\n-      # in VS_PATH_WINDOWS.\n-      if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-        OLDIFS=\"$IFS\"\n-        IFS=\";\"\n-        # Convert VS_PATH to unix style\n-        VS_PATH_WINDOWS=\"$VS_PATH\"\n-        VS_PATH=\"\"\n-        for i in $VS_PATH_WINDOWS; do\n-          path=$i\n-          # Only process non-empty elements\n-          if test \"x$path\" != x; then\n-            IFS=\"$OLDIFS\"\n-            # Check that directory exists before calling fixup_path\n-            testpath=$path\n-            UTIL_REWRITE_AS_UNIX_PATH([testpath])\n-            if test -d \"$testpath\"; then\n-              UTIL_FIXUP_PATH([path])\n-              UTIL_APPEND_TO_PATH(VS_PATH, $path)\n-            fi\n-            IFS=\";\"\n-          fi\n-        done\n-        IFS=\"$OLDIFS\"\n-      fi\n-\n-    else\n-      # We did not find a vsvars bat file, let's hope we are run from a VS command prompt.\n-      AC_MSG_NOTICE([Cannot locate a valid Visual Studio installation, checking current environment])\n-    fi\n-  fi\n-\n-  # At this point, we should have correct variables in the environment, or we can't continue.\n-  AC_MSG_CHECKING([for Visual Studio variables])\n-\n-  if test \"x$VCINSTALLDIR\" != x || test \"x$WindowsSDKDir\" != x \\\n-      || test \"x$WINDOWSSDKDIR\" != x || test \"x$DEVKIT_NAME\" != x; then\n-    if test \"x$VS_INCLUDE\" = x || test \"x$VS_LIB\" = x; then\n-      AC_MSG_RESULT([present but broken])\n-      AC_MSG_ERROR([Your VC command prompt seems broken, INCLUDE and\/or LIB is missing.])\n-    else\n-      AC_MSG_RESULT([ok])\n-      # Remove any trailing \"\\\" \";\" and \" \" from the variables.\n-      VS_INCLUDE=`$ECHO \"$VS_INCLUDE\" | $SED -e 's\/\\\\\\\\*;* *$\/\/'`\n-      VS_LIB=`$ECHO \"$VS_LIB\" | $SED 's\/\\\\\\\\*;* *$\/\/'`\n-      VCINSTALLDIR=`$ECHO \"$VCINSTALLDIR\" | $SED 's\/\\\\\\\\* *$\/\/'`\n-      VCToolsRedistDir=`$ECHO \"$VCToolsRedistDir\" | $SED 's\/\\\\\\\\* *$\/\/'`\n-      WindowsSdkDir=`$ECHO \"$WindowsSdkDir\" | $SED 's\/\\\\\\\\* *$\/\/'`\n-      WINDOWSSDKDIR=`$ECHO \"$WINDOWSSDKDIR\" | $SED 's\/\\\\\\\\* *$\/\/'`\n-      if test -z \"$WINDOWSSDKDIR\"; then\n-        WINDOWSSDKDIR=\"$WindowsSdkDir\"\n-      fi\n-      # Remove any paths containing # (typically F#) as that messes up make. This\n-      # is needed if visual studio was installed with F# support.\n-      VS_PATH=`$ECHO \"$VS_PATH\" | $SED 's\/[[^:#]]*#[^:]*:\/\/g'`\n-\n-      AC_SUBST(VS_PATH)\n-      AC_SUBST(VS_INCLUDE)\n-      AC_SUBST(VS_LIB)\n-\n-      TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS\n-\n-      AC_SUBST(VS_PATH_WINDOWS)\n-    fi\n-  else\n-    AC_MSG_RESULT([not found])\n-\n-    if test \"x$VS_ENV_CMD\" = x; then\n-      AC_MSG_NOTICE([Cannot locate a valid Visual Studio or Windows SDK installation on disk,])\n-      AC_MSG_NOTICE([nor is this script run from a Visual Studio command prompt.])\n-    else\n-      AC_MSG_NOTICE([Running the extraction script failed.])\n-    fi\n-    AC_MSG_NOTICE([Try setting --with-tools-dir to the VC\/bin directory within the VS installation])\n-    AC_MSG_NOTICE([or run \"bash.exe -l\" from a VS command prompt and then run configure from there.])\n-    AC_MSG_ERROR([Cannot continue])\n-  fi\n-])\n-\n-AC_DEFUN([TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL],\n-[\n-  DLL_NAME=\"$1\"\n-  POSSIBLE_MSVC_DLL=\"$2\"\n-  METHOD=\"$3\"\n-  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n-    AC_MSG_NOTICE([Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD])\n-\n-    # Need to check if the found msvcr is correct architecture\n-    AC_MSG_CHECKING([found $DLL_NAME architecture])\n-    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n-      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n-      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n-        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n-      else\n-        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n-      fi\n-    else\n-      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n-        CORRECT_MSVCR_ARCH=386\n-      elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-        CORRECT_MSVCR_ARCH=x86-64\n-      elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n-        # The cygwin 'file' command only returns \"PE32+ executable (DLL) (console), for MS Windows\",\n-        # without specifying which architecture it is for specifically. This has been fixed upstream.\n-        # https:\/\/github.com\/file\/file\/commit\/b849b1af098ddd530094bf779b58431395db2e10#diff-ff2eced09e6860de75057dd731d092aeR142\n-        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n-      fi\n-    fi\n-    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n-      AC_MSG_RESULT([ok])\n-      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n-      AC_MSG_CHECKING([for $DLL_NAME])\n-      AC_MSG_RESULT([$MSVC_DLL])\n-    else\n-      AC_MSG_RESULT([incorrect, ignoring])\n-      AC_MSG_NOTICE([The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE])\n-    fi\n-  fi\n-])\n-\n-AC_DEFUN([TOOLCHAIN_SETUP_MSVC_DLL],\n-[\n-  DLL_NAME=\"$1\"\n-  MSVC_DLL=\n-\n-  if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n-    vs_target_cpu=x86\n-  elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-    vs_target_cpu=x64\n-  elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n-    vs_target_cpu=arm64\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    if test \"x$VCINSTALLDIR\" != x; then\n-      CYGWIN_VC_INSTALL_DIR=\"$VCINSTALLDIR\"\n-      UTIL_FIXUP_PATH(CYGWIN_VC_INSTALL_DIR)\n-      if test \"$VS_VERSION\" -lt 2017; then\n-        # Probe: Using well-known location from Visual Studio 12.0 and older\n-        POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/$vs_target_cpu\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n-      else\n-        CYGWIN_VC_TOOLS_REDIST_DIR=\"$VCToolsRedistDir\"\n-        UTIL_FIXUP_PATH(CYGWIN_VC_TOOLS_REDIST_DIR)\n-        # Probe: Using well-known location from VS 2017 and VS 2019\n-        POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_TOOLS_REDIST_DIR\/$vs_target_cpu\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n-      fi\n-      # In case any of the above finds more than one file, loop over them.\n-      for possible_msvc_dll in $POSSIBLE_MSVC_DLL; do\n-        $ECHO \"POSSIBLE_MSVC_DLL $possible_msvc_dll\"\n-        TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$possible_msvc_dll],\n-            [well-known location in VCINSTALLDIR])\n-      done\n-    fi\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    # Probe: Check in the Boot JDK directory.\n-    POSSIBLE_MSVC_DLL=\"$BOOT_JDK\/bin\/$DLL_NAME\"\n-    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n-        [well-known location in Boot JDK])\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    # Probe: Look in the Windows system32 directory\n-    CYGWIN_SYSTEMROOT=\"$SYSTEMROOT\"\n-    UTIL_REWRITE_AS_UNIX_PATH(CYGWIN_SYSTEMROOT)\n-    POSSIBLE_MSVC_DLL=\"$CYGWIN_SYSTEMROOT\/system32\/$DLL_NAME\"\n-    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n-        [well-known location in SYSTEMROOT])\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    # Probe: If Visual Studio Express is installed, there is usually one with the debugger\n-    if test \"x$VS100COMNTOOLS\" != x; then\n-      CYGWIN_VS_TOOLS_DIR=\"$VS100COMNTOOLS\/..\"\n-      UTIL_REWRITE_AS_UNIX_PATH(CYGWIN_VS_TOOLS_DIR)\n-      POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n-        | $GREP -i \/$vs_target_cpu\/ | $HEAD --lines 1`\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n-          [search of VS100COMNTOOLS])\n-    fi\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    # Probe: Search wildly in the VCINSTALLDIR. We've probably lost by now.\n-    # (This was the original behaviour; kept since it might turn something up)\n-    if test \"x$CYGWIN_VC_INSTALL_DIR\" != x; then\n-      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n-        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n-        | $GREP x86 | $GREP -v ia64 | $GREP -v x64 | $GREP -v arm64 | $HEAD --lines 1`\n-        if test \"x$POSSIBLE_MSVC_DLL\" = x; then\n-          # We're grasping at straws now...\n-          POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n-          | $HEAD --lines 1`\n-        fi\n-      else\n-        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n-          | $GREP $vs_target_cpu | $HEAD --lines 1`\n-      fi\n-\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],\n-          [search of VCINSTALLDIR])\n-    fi\n-  fi\n-\n-  if test \"x$MSVC_DLL\" = x; then\n-    AC_MSG_CHECKING([for $DLL_NAME])\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([Could not find $DLL_NAME. Please specify using --with-msvcr-dll.])\n-  fi\n-])\n-\n-AC_DEFUN([TOOLCHAIN_SETUP_VS_RUNTIME_DLLS],\n-[\n-  AC_ARG_WITH(msvcr-dll, [AS_HELP_STRING([--with-msvcr-dll],\n-      [path to microsoft C runtime dll (msvcr*.dll) (Windows only) @<:@probed@:>@])])\n-\n-  if test \"x$with_msvcr_dll\" != x; then\n-    # If given explicitly by user, do not probe. If not present, fail directly.\n-    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCR_NAME, [$with_msvcr_dll], [--with-msvcr-dll])\n-    if test \"x$MSVC_DLL\" = x; then\n-      AC_MSG_ERROR([Could not find a proper $MSVCR_NAME as specified by --with-msvcr-dll])\n-    fi\n-    MSVCR_DLL=\"$MSVC_DLL\"\n-  elif test \"x$DEVKIT_MSVCR_DLL\" != x; then\n-    TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCR_NAME, [$DEVKIT_MSVCR_DLL], [devkit])\n-    if test \"x$MSVC_DLL\" = x; then\n-      AC_MSG_ERROR([Could not find a proper $MSVCR_NAME as specified by devkit])\n-    fi\n-    MSVCR_DLL=\"$MSVC_DLL\"\n-  else\n-    TOOLCHAIN_SETUP_MSVC_DLL([${MSVCR_NAME}])\n-    MSVCR_DLL=\"$MSVC_DLL\"\n-  fi\n-  AC_SUBST(MSVCR_DLL)\n-\n-  AC_ARG_WITH(msvcp-dll, [AS_HELP_STRING([--with-msvcp-dll],\n-      [path to microsoft C++ runtime dll (msvcp*.dll) (Windows only) @<:@probed@:>@])])\n-\n-  if test \"x$MSVCP_NAME\" != \"x\"; then\n-    if test \"x$with_msvcp_dll\" != x; then\n-      # If given explicitly by user, do not probe. If not present, fail directly.\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCP_NAME, [$with_msvcp_dll], [--with-msvcp-dll])\n-      if test \"x$MSVC_DLL\" = x; then\n-        AC_MSG_ERROR([Could not find a proper $MSVCP_NAME as specified by --with-msvcp-dll])\n-      fi\n-      MSVCP_DLL=\"$MSVC_DLL\"\n-    elif test \"x$DEVKIT_MSVCP_DLL\" != x; then\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($MSVCP_NAME, [$DEVKIT_MSVCP_DLL], [devkit])\n-      if test \"x$MSVC_DLL\" = x; then\n-        AC_MSG_ERROR([Could not find a proper $MSVCP_NAME as specified by devkit])\n-      fi\n-      MSVCP_DLL=\"$MSVC_DLL\"\n-    else\n-      TOOLCHAIN_SETUP_MSVC_DLL([${MSVCP_NAME}])\n-      MSVCP_DLL=\"$MSVC_DLL\"\n-    fi\n-    AC_SUBST(MSVCP_DLL)\n-  fi\n-\n-  AC_ARG_WITH(vcruntime-1-dll, [AS_HELP_STRING([--with-vcruntime-1-dll],\n-      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows 64-bits only) @<:@probed@:>@])])\n-\n-  if test \"x$VCRUNTIME_1_NAME\" != \"x\" -a \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-    if test \"x$with_vcruntime_1_dll\" != x; then\n-      # If given explicitly by user, do not probe. If not present, fail directly.\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$with_vcruntime_1_dll],\n-          [--with-vcruntime-1-dll])\n-      if test \"x$MSVC_DLL\" = x; then\n-        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by --with-vcruntime-1-dll])\n-      fi\n-      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n-    elif test \"x$DEVKIT_VCRUNTIME_1_DLL\" != x; then\n-      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$DEVKIT_VCRUNTIME_1_DLL], [devkit])\n-      if test \"x$MSVC_DLL\" = x; then\n-        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by devkit])\n-      fi\n-      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n-    else\n-      TOOLCHAIN_SETUP_MSVC_DLL([${VCRUNTIME_1_NAME}])\n-      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n-    fi\n-    AC_SUBST(VCRUNTIME_1_DLL)\n-  fi\n-\n-  AC_ARG_WITH(ucrt-dll-dir, [AS_HELP_STRING([--with-ucrt-dll-dir],\n-      [path to Microsoft Windows Kit UCRT DLL dir (Windows only) @<:@probed@:>@])])\n-\n-  if test \"x$USE_UCRT\" = \"xtrue\"; then\n-    AC_MSG_CHECKING([for UCRT DLL dir])\n-    if test \"x$with_ucrt_dll_dir\" != x; then\n-      if test -z \"$(ls -d \"$with_ucrt_dll_dir\/\"*.dll 2> \/dev\/null)\"; then\n-        AC_MSG_RESULT([no])\n-        AC_MSG_ERROR([Could not find any dlls in $with_ucrt_dll_dir])\n-      else\n-        AC_MSG_RESULT([$with_ucrt_dll_dir])\n-        UCRT_DLL_DIR=\"$with_ucrt_dll_dir\"\n-        UTIL_FIXUP_PATH([UCRT_DLL_DIR])\n-      fi\n-    elif test \"x$DEVKIT_UCRT_DLL_DIR\" != \"x\"; then\n-      UCRT_DLL_DIR=\"$DEVKIT_UCRT_DLL_DIR\"\n-      AC_MSG_RESULT($UCRT_DLL_DIR)\n-    else\n-      CYGWIN_WINDOWSSDKDIR=\"${WINDOWSSDKDIR}\"\n-      UTIL_FIXUP_PATH([CYGWIN_WINDOWSSDKDIR])\n-      if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n-        dll_subdir=\"arm64\"\n-      elif test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\"; then\n-        dll_subdir=\"x64\"\n-      elif test \"x$OPENJDK_TARGET_CPU\" = \"xx86\"; then\n-        dll_subdir=\"x86\"\n-      fi\n-      UCRT_DLL_DIR=\"$CYGWIN_WINDOWSSDKDIR\/Redist\/ucrt\/DLLs\/$dll_subdir\"\n-      if test -z \"$(ls -d \"$UCRT_DLL_DIR\/\"*.dll 2> \/dev\/null)\"; then\n-        # Try with version subdir\n-        UCRT_DLL_DIR=\"`ls -d $CYGWIN_WINDOWSSDKDIR\/Redist\/*\/ucrt\/DLLs\/$dll_subdir \\\n-            2> \/dev\/null | $SORT -d | $HEAD -n1`\"\n-        if test -z \"$UCRT_DLL_DIR\" \\\n-            || test -z \"$(ls -d \"$UCRT_DLL_DIR\/\"*.dll 2> \/dev\/null)\"; then\n-          AC_MSG_RESULT([no])\n-          AC_MSG_ERROR([Could not find any dlls in $UCRT_DLL_DIR])\n-        else\n-          AC_MSG_RESULT($UCRT_DLL_DIR)\n-        fi\n-      else\n-        AC_MSG_RESULT($UCRT_DLL_DIR)\n-      fi\n-    fi\n-  else\n-    UCRT_DLL_DIR=\n-  fi\n-  AC_SUBST(UCRT_DLL_DIR)\n-])\n-\n-# Setup the sysroot flags and add them to global CFLAGS and LDFLAGS so\n-# that configure can use them while detecting compilers.\n-# TOOLCHAIN_TYPE is available here.\n-# Param 1 - Optional prefix to all variables. (e.g BUILD_)\n-AC_DEFUN([TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS],\n-[\n-  OLDIFS=\"$IFS\"\n-  IFS=\";\"\n-  # Convert $1VS_INCLUDE into $1SYSROOT_CFLAGS\n-  for i in [$]$1VS_INCLUDE; do\n-    ipath=$i\n-    # Only process non-empty elements\n-    if test \"x$ipath\" != x; then\n-      IFS=\"$OLDIFS\"\n-      # Check that directory exists before calling fixup_path\n-      testpath=$ipath\n-      UTIL_REWRITE_AS_UNIX_PATH([testpath])\n-      if test -d \"$testpath\"; then\n-        UTIL_FIXUP_PATH([ipath])\n-        $1SYSROOT_CFLAGS=\"[$]$1SYSROOT_CFLAGS -I$ipath\"\n-      fi\n-      IFS=\";\"\n-    fi\n-  done\n-  # Convert $1VS_LIB into $1SYSROOT_LDFLAGS\n-  for i in [$]$1VS_LIB; do\n-    libpath=$i\n-    # Only process non-empty elements\n-    if test \"x$libpath\" != x; then\n-      IFS=\"$OLDIFS\"\n-      # Check that directory exists before calling fixup_path\n-      testpath=$libpath\n-      UTIL_REWRITE_AS_UNIX_PATH([testpath])\n-      if test -d \"$testpath\"; then\n-        UTIL_FIXUP_PATH([libpath])\n-        $1SYSROOT_LDFLAGS=\"[$]$1SYSROOT_LDFLAGS -libpath:$libpath\"\n-      fi\n-      IFS=\";\"\n-    fi\n-  done\n-  IFS=\"$OLDIFS\"\n-\n-  AC_SUBST($1SYSROOT_CFLAGS)\n-  AC_SUBST($1SYSROOT_LDFLAGS)\n-])\n","filename":"make\/autoconf\/toolchain_windows.m4","additions":0,"deletions":849,"binary":false,"changes":849,"status":"deleted"},{"patch":"@@ -27,1 +27,0 @@\n-m4_include([util_windows.m4])\n@@ -465,148 +464,0 @@\n-###############################################################################\n-# Test that variable $1 denoting a program is not empty. If empty, exit with an error.\n-# $1: variable to check\n-AC_DEFUN([UTIL_CHECK_NONEMPTY],\n-[\n-  if test \"x[$]$1\" = x; then\n-    AC_MSG_ERROR([Could not find required tool for $1])\n-  fi\n-])\n-\n-###############################################################################\n-# Setup a tool for the given variable. If correctly specified by the user,\n-# use that value, otherwise search for the tool using the supplied code snippet.\n-# $1: variable to set\n-# $2: code snippet to call to look for the tool\n-# $3: code snippet to call if variable was used to find tool\n-AC_DEFUN([UTIL_SETUP_TOOL],\n-[\n-  # Publish this variable in the help.\n-  AC_ARG_VAR($1, [Override default value for $1])\n-\n-  if [[ -z \"${$1+x}\" ]]; then\n-    # The variable is not set by user, try to locate tool using the code snippet\n-    $2\n-  else\n-    # The variable is set, but is it from the command line or the environment?\n-\n-    # Try to remove the string !$1! from our list.\n-    try_remove_var=${CONFIGURE_OVERRIDDEN_VARIABLES\/\/!$1!\/}\n-    if test \"x$try_remove_var\" = \"x$CONFIGURE_OVERRIDDEN_VARIABLES\"; then\n-      # If it failed, the variable was not from the command line. Ignore it,\n-      # but warn the user (except for BASH, which is always set by the calling BASH).\n-      if test \"x$1\" != xBASH; then\n-        AC_MSG_WARN([Ignoring value of $1 from the environment. Use command line variables instead.])\n-      fi\n-      # Try to locate tool using the code snippet\n-      $2\n-    else\n-      # If it succeeded, then it was overridden by the user. We will use it\n-      # for the tool.\n-\n-      # First remove it from the list of overridden variables, so we can test\n-      # for unknown variables in the end.\n-      CONFIGURE_OVERRIDDEN_VARIABLES=\"$try_remove_var\"\n-\n-      tool_override=[$]$1\n-      AC_MSG_NOTICE([User supplied override $1=\"$tool_override\"])\n-\n-      # Check if we try to supply an empty value\n-      if test \"x$tool_override\" = x; then\n-        AC_MSG_CHECKING([for $1])\n-        AC_MSG_RESULT([disabled])\n-      else\n-        # Split up override in command part and argument part\n-        tool_and_args=($tool_override)\n-        [ tool_command=${tool_and_args[0]} ]\n-        [ unset 'tool_and_args[0]' ]\n-        [ tool_args=${tool_and_args[@]} ]\n-\n-        # Check if the provided tool contains a complete path.\n-        tool_basename=\"${tool_command##*\/}\"\n-        if test \"x$tool_basename\" = \"x$tool_command\"; then\n-          # A command without a complete path is provided, search $PATH.\n-          AC_MSG_NOTICE([Will search for user supplied tool \"$tool_basename\"])\n-          AC_PATH_PROG($1, $tool_basename)\n-          if test \"x[$]$1\" = x; then\n-            AC_MSG_ERROR([User supplied tool $1=\"$tool_basename\" could not be found])\n-          fi\n-        else\n-          # Otherwise we believe it is a complete path. Use it as it is.\n-          AC_MSG_NOTICE([Will use user supplied tool \"$tool_command\"])\n-          AC_MSG_CHECKING([for $tool_command])\n-          if test ! -x \"$tool_command\" && test ! -x \"$tool_command.exe\"; then\n-            AC_MSG_RESULT([not found])\n-            AC_MSG_ERROR([User supplied tool $1=\"$tool_command\" does not exist or is not executable])\n-          fi\n-           $1=\"$tool_command\"\n-          AC_MSG_RESULT([found])\n-        fi\n-        if test \"x$tool_args\" != x; then\n-          # If we got arguments, re-append them to the command after the fixup.\n-          $1=\"[$]$1 $tool_args\"\n-        fi\n-      fi\n-    fi\n-    $3\n-  fi\n-])\n-\n-###############################################################################\n-# Call UTIL_SETUP_TOOL with AC_PATH_PROGS to locate the tool\n-# $1: variable to set\n-# $2: executable name (or list of names) to look for\n-# $3: [path]\n-AC_DEFUN([UTIL_PATH_PROGS],\n-[\n-  UTIL_SETUP_TOOL($1, [AC_PATH_PROGS($1, $2, , $3)])\n-])\n-\n-###############################################################################\n-# Call UTIL_SETUP_TOOL with AC_CHECK_TOOLS to locate the tool\n-# $1: variable to set\n-# $2: executable name (or list of names) to look for\n-AC_DEFUN([UTIL_CHECK_TOOLS],\n-[\n-  UTIL_SETUP_TOOL($1, [AC_CHECK_TOOLS($1, $2)])\n-])\n-\n-###############################################################################\n-# Like UTIL_PATH_PROGS but fails if no tool was found.\n-# $1: variable to set\n-# $2: executable name (or list of names) to look for\n-# $3: [path]\n-AC_DEFUN([UTIL_REQUIRE_PROGS],\n-[\n-  UTIL_PATH_PROGS($1, $2, , $3)\n-  UTIL_CHECK_NONEMPTY($1)\n-])\n-\n-###############################################################################\n-# Like UTIL_SETUP_TOOL but fails if no tool was found.\n-# $1: variable to set\n-# $2: autoconf macro to call to look for the special tool\n-AC_DEFUN([UTIL_REQUIRE_SPECIAL],\n-[\n-  UTIL_SETUP_TOOL($1, [$2])\n-  UTIL_CHECK_NONEMPTY($1)\n-])\n-\n-###############################################################################\n-# Like UTIL_REQUIRE_PROGS but also allows for bash built-ins\n-# $1: variable to set\n-# $2: executable name (or list of names) to look for\n-# $3: [path]\n-AC_DEFUN([UTIL_REQUIRE_BUILTIN_PROGS],\n-[\n-  UTIL_SETUP_TOOL($1, [AC_PATH_PROGS($1, $2, , $3)])\n-  if test \"x[$]$1\" = x; then\n-    AC_MSG_NOTICE([Required tool $2 not found in PATH, checking built-in])\n-    if type -p $2 > \/dev\/null 2>&1; then\n-      AC_MSG_NOTICE([Found $2 as shell built-in. Using it])\n-      $1=\"$2\"\n-    else\n-      AC_MSG_ERROR([Required tool $2 also not found as built-in.])\n-    fi\n-  fi\n-  UTIL_CHECK_NONEMPTY($1)\n-])\n","filename":"make\/autoconf\/util.m4","additions":0,"deletions":149,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+###############################################################################\n@@ -38,0 +39,1 @@\n+###############################################################################\n@@ -50,28 +52,0 @@\n-################################################################################\n-# This will make a path absolute. Assumes it's already a unix path. Also\n-# resolves ~ to homedir.\n-AC_DEFUN([UTIL_ABSOLUTE_PATH],\n-[\n-  if test \"x[$]$1\" != x; then\n-    new_path=\"[$]$1\"\n-\n-    # Use eval to expand a potential ~. This technique does not work if there\n-    # are spaces in the path (which is valid at this point on Windows), so only\n-    # try to apply it if there is an actual ~ first in the path.\n-    if [ [[ \"$new_path\" = \"~\"* ]] ]; then\n-      eval new_path=\"$new_path\"\n-      if test ! -f \"$new_path\" && test ! -d \"$new_path\"; then\n-        AC_MSG_ERROR([The new_path of $1, which resolves as \"$new_path\", is not found.])\n-      fi\n-    fi\n-\n-    if test -d \"$new_path\"; then\n-      $1=\"`cd \"$new_path\"; $THEPWDCMD -L`\"\n-    else\n-      dir=\"`$DIRNAME \"$new_path\"`\"\n-      base=\"`$BASENAME \"$new_path\"`\"\n-      $1=\"`cd \"$dir\"; $THEPWDCMD -L`\/$base\"\n-    fi\n-  fi\n-])\n-\n@@ -87,0 +61,1 @@\n+# $2: if NOFAIL, errors will be silently ignored\n@@ -90,7 +65,18 @@\n-  if test \"x[$]$1\" != x; then\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-      UTIL_FIXUP_PATH_CYGWIN($1)\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-      UTIL_FIXUP_PATH_MSYS($1)\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      UTIL_FIXUP_PATH_WSL($1)\n+  path=\"[$]$1\"\n+  if test \"x$path\" != x; then\n+    if test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+      if test \"x$2\" = \"xNOFAIL\"; then\n+        quiet_option=\"-q\"\n+      fi\n+      imported_path=`$FIXPATH_BASE $quiet_option import \"$path\"`\n+      $FIXPATH_BASE verify \"$imported_path\"\n+      if test $? -ne 0; then\n+        if test \"x$2\" != \"xNOFAIL\"; then\n+          AC_MSG_ERROR([The path of $1, which resolves as \"$path\", could not be imported.])\n+        else\n+          imported_path=\"\"\n+        fi\n+      fi\n+      if test \"x$imported_path\" != \"x$path\"; then\n+        $1=\"$imported_path\"\n+      fi\n@@ -98,6 +84,30 @@\n-      # We're on a unix platform. Hooray! :)\n-      path=\"[$]$1\"\n-      has_space=`$ECHO \"$path\" | $GREP \" \"`\n-      if test \"x$has_space\" != x; then\n-        AC_MSG_NOTICE([The path of $1, which resolves as \"$path\", is invalid.])\n-        AC_MSG_ERROR([Spaces are not allowed in this path.])\n+      [ if [[ \"$path\" =~ \" \" ]]; then ]\n+        if test \"x$2\" != \"xNOFAIL\"; then\n+          AC_MSG_NOTICE([The path of $1, which resolves as \"$path\", is invalid.])\n+          AC_MSG_ERROR([Spaces are not allowed in this path.])\n+        else\n+          path=\"\"\n+        fi\n+      fi\n+\n+      # Use eval to expand a potential ~.\n+      eval new_path=\"$path\"\n+      if test ! -e \"$new_path\"; then\n+        if test \"x$2\" != \"xNOFAIL\"; then\n+          AC_MSG_ERROR([The path of $1, which resolves as \"$new_path\", is not found.])\n+        else\n+          new_path=\"\"\n+        fi\n+      fi\n+\n+      # Make the path absolute\n+      if test \"x$new_path\" != x; then\n+        if test -d \"$new_path\"; then\n+          path=\"`cd \"$new_path\"; pwd -L`\"\n+        else\n+          dir=\"`$DIRNAME \"$new_path\"`\"\n+          base=\"`$BASENAME \"$new_path\"`\"\n+          path=\"`cd \"$dir\"; pwd -L`\/$base\"\n+        fi\n+      else\n+        path=\"\"\n@@ -106,1 +116,0 @@\n-      UTIL_ABSOLUTE_PATH(path)\n@@ -112,0 +121,34 @@\n+###############################################################################\n+# Check if the given file is a unix-style or windows-style executable, that is,\n+# if it expects paths in unix-style or windows-style.\n+# Returns \"windows\" or \"unix\" in $RESULT.\n+AC_DEFUN([UTIL_CHECK_WINENV_EXEC_TYPE],\n+[\n+  # For cygwin and msys2, if it's linked with the correct helper lib, it\n+  # accept unix paths\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\" || \\\n+      test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys2\"; then\n+    linked_libs=`$LDD $1 2>&1`\n+    if test $? -ne 0; then\n+      # Non-binary files (e.g. shell scripts) are unix files\n+      RESULT=unix\n+    else\n+      [ if [[ \"$linked_libs\" =~ $WINENV_MARKER_DLL ]]; then ]\n+        RESULT=unix\n+      else\n+        RESULT=windows\n+      fi\n+    fi\n+  elif test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+    # On WSL, we can check if it is a PE file\n+    file_type=`$FILE -b $1 2>&1`\n+    [ if [[ $file_type =~ PE.*Windows ]]; then ]\n+      RESULT=windows\n+    else\n+      RESULT=unix\n+    fi\n+  else\n+    RESULT=unix\n+  fi\n+])\n+\n@@ -124,0 +167,2 @@\n+# $2: Where to look for the command (replaces $PATH)\n+# $3: set to NOFIXPATH to skip prefixing FIXPATH, even if needed on platform\n@@ -126,1 +171,1 @@\n-  # Only process if variable expands to non-empty\n+  input=\"[$]$1\"\n@@ -128,7 +173,7 @@\n-  if test \"x[$]$1\" != x; then\n-    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-      UTIL_FIXUP_EXECUTABLE_CYGWIN($1)\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-      UTIL_FIXUP_EXECUTABLE_MSYS($1)\n-    elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-      UTIL_FIXUP_EXECUTABLE_WSL($1)\n+  # Only process if variable expands to non-empty\n+  if test \"x$input\" != x; then\n+    # First separate the path from the arguments. This will split at the first\n+    # space.\n+    [ if [[ \"$OPENJDK_BUILD_OS\" = \"windows\" && input =~ ^$FIXPATH ]]; then\n+      line=\"${input#$FIXPATH }\"\n+      prefix=\"$FIXPATH \"\n@@ -136,23 +181,11 @@\n-      # We're on a unix platform. Hooray! :)\n-      # First separate the path from the arguments. This will split at the first\n-      # space.\n-      complete=\"[$]$1\"\n-      path=\"${complete%% *}\"\n-      tmp=\"$complete EOL\"\n-      arguments=\"${tmp#* }\"\n-\n-      # Cannot rely on the command \"which\" here since it doesn't always work.\n-      is_absolute_path=`$ECHO \"$path\" | $GREP ^\/`\n-      if test -z \"$is_absolute_path\"; then\n-        # Path to executable is not absolute. Find it.\n-        IFS_save=\"$IFS\"\n-        IFS=:\n-        for p in $PATH; do\n-          if test -f \"$p\/$path\" && test -x \"$p\/$path\"; then\n-            new_path=\"$p\/$path\"\n-            break\n-          fi\n-        done\n-        IFS=\"$IFS_save\"\n-      else\n-        # This is an absolute path, we can use it without further modifications.\n+      line=\"$input\"\n+      prefix=\"\"\n+    fi ]\n+    path=\"${line%% *}\"\n+    arguments=\"${line#\"$path\"}\"\n+\n+    [ if ! [[ \"$path\" =~ \/|\\\\ ]]; then ]\n+      # This is a command without path (e.g. \"gcc\" or \"echo\")\n+      command_type=`type -t \"$path\"`\n+      if test \"x$command_type\" = xbuiltin || test \"x$command_type\" = xkeyword; then\n+        # Shell builtin or keyword; we're done here\n@@ -160,0 +193,17 @@\n+      else\n+        # Search in $PATH using bash built-in 'type -p'.\n+        saved_path=\"$PATH\"\n+        if test \"x$2\" != x; then\n+          PATH=\"$2\"\n+        fi\n+        new_path=`type -p \"$path\"`\n+        if test \"x$new_path\" = x && test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+          # Try again with .exe\n+          new_path=\"`type -p \"$path.exe\"`\"\n+        fi\n+        PATH=\"$saved_path\"\n+\n+        if test \"x$new_path\" = x; then\n+          AC_MSG_NOTICE([The command for $1, which resolves as \"$input\", is not found in the PATH.])\n+          AC_MSG_ERROR([Cannot locate $path])\n+        fi\n@@ -161,0 +211,36 @@\n+    else\n+      # This is a path with slashes, don't look at $PATH\n+      if test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+        # fixpath.sh import will do all heavy lifting for us\n+        new_path=`$FIXPATH_BASE import \"$path\"`\n+\n+        if test ! -e $new_path; then\n+          # It failed, but maybe spaces were part of the path and not separating\n+          # the command and argument. Retry using that assumption.\n+          new_path=`$FIXPATH_BASE import \"$input\"`\n+          if test ! -e $new_path; then\n+            AC_MSG_NOTICE([The command for $1, which resolves as \"$input\", can not be found.])\n+            AC_MSG_ERROR([Cannot locate $input])\n+          fi\n+          # It worked, clear all \"arguments\"\n+          arguments=\"\"\n+        fi\n+      else # on unix\n+        # Make absolute\n+        $1=\"$path\"\n+        UTIL_FIXUP_PATH($1, NOFAIL)\n+        new_path=\"[$]$1\"\n+\n+        if test ! -e $new_path; then\n+          AC_MSG_NOTICE([The command for $1, which resolves as \"$input\", is not found])\n+          [ if [[ \"$path\" =~ \" \" ]]; then ]\n+            AC_MSG_NOTICE([This might be caused by spaces in the path, which is not allowed.])\n+          fi\n+          AC_MSG_ERROR([Cannot locate $path])\n+        fi\n+        if test ! -x $new_path; then\n+          AC_MSG_NOTICE([The command for $1, which resolves as \"$input\", is not executable.])\n+          AC_MSG_ERROR([Cannot execute command at $path])\n+        fi\n+      fi # end on unix\n+    fi # end with or without slashes\n@@ -162,5 +248,12 @@\n-      if test \"x$new_path\" = x; then\n-        AC_MSG_NOTICE([The path of $1, which resolves as \"$complete\", is not found.])\n-        has_space=`$ECHO \"$complete\" | $GREP \" \"`\n-        if test \"x$has_space\" != x; then\n-          AC_MSG_NOTICE([This might be caused by spaces in the path, which is not allowed.])\n+    # Now we have a usable command as new_path, with arguments in arguments\n+    if test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+      if test \"x$prefix\" = x; then\n+        # Only mess around if prefix was not given\n+        UTIL_CHECK_WINENV_EXEC_TYPE(\"$new_path\")\n+        if test \"x$RESULT\" = xwindows; then\n+          prefix=\"$FIXPATH \"\n+          # make sure we have an .exe suffix (but not two)\n+          new_path=\"${new_path%.exe}.exe\"\n+        else\n+          # If we have gotten a .exe suffix, remove it\n+          new_path=\"${new_path%.exe}\"\n@@ -168,1 +261,0 @@\n-        AC_MSG_ERROR([Cannot locate the the path of $1])\n@@ -172,0 +264,4 @@\n+    if test \"x$3\" = xNOFIXPATH; then\n+      prefix=\"\"\n+    fi\n+\n@@ -173,2 +269,32 @@\n-    if test \"x$arguments\" != xEOL; then\n-      new_complete=\"$new_path ${arguments% *}\"\n+    new_complete=\"$prefix$new_path$arguments\"\n+    $1=\"$new_complete\"\n+  fi\n+])\n+\n+###############################################################################\n+# Setup a tool for the given variable. If correctly specified by the user,\n+# use that value, otherwise search for the tool using the supplied code snippet.\n+# $1: variable to set\n+# $2: code snippet to call to look for the tool\n+# $3: code snippet to call if variable was used to find tool\n+AC_DEFUN([UTIL_SETUP_TOOL],\n+[\n+  # Publish this variable in the help.\n+  AC_ARG_VAR($1, [Override default value for $1])\n+\n+  if [[ -z \"${$1+x}\" ]]; then\n+    # The variable is not set by user, try to locate tool using the code snippet\n+    $2\n+  else\n+    # The variable is set, but is it from the command line or the environment?\n+\n+    # Try to remove the string !$1! from our list.\n+    try_remove_var=${CONFIGURE_OVERRIDDEN_VARIABLES\/\/!$1!\/}\n+    if test \"x$try_remove_var\" = \"x$CONFIGURE_OVERRIDDEN_VARIABLES\"; then\n+      # If it failed, the variable was not from the command line. Ignore it,\n+      # but warn the user (except for BASH, which is always set by the calling BASH).\n+      if test \"x$1\" != xBASH; then\n+        AC_MSG_WARN([Ignoring value of $1 from the environment. Use command line variables instead.])\n+      fi\n+      # Try to locate tool using the code snippet\n+      $2\n@@ -176,1 +302,66 @@\n-      new_complete=\"$new_path\"\n+      # If it succeeded, then it was overridden by the user. We will use it\n+      # for the tool.\n+\n+      # First remove it from the list of overridden variables, so we can test\n+      # for unknown variables in the end.\n+      CONFIGURE_OVERRIDDEN_VARIABLES=\"$try_remove_var\"\n+\n+      tool_override=[$]$1\n+\n+      # Check if we try to supply an empty value\n+      if test \"x$tool_override\" = x; then\n+        AC_MSG_CHECKING([for $1])\n+        AC_MSG_RESULT([[[disabled by user]]])\n+      else\n+        # Split up override in command part and argument part\n+        tool_and_args=($tool_override)\n+        [ tool_command=${tool_and_args[0]} ]\n+        [ unset 'tool_and_args[0]' ]\n+        [ tool_args=${tool_and_args[@]} ]\n+\n+        # Check if the provided tool contains a complete path.\n+        tool_basename=\"${tool_command##*\/}\"\n+        if test \"x$tool_basename\" = \"x$tool_command\"; then\n+          # A command without a complete path is provided, search $PATH.\n+          AC_MSG_NOTICE([Will search for user supplied tool \"$tool_basename\"])\n+          AC_PATH_PROGS($1, $tool_basename ${tool_basename}.exe)\n+          tool_command=\"[$]$1\"\n+          if test \"x$tool_command\" = x; then\n+            AC_MSG_ERROR([User supplied tool $1=\"$tool_basename\" could not be found in PATH])\n+          fi\n+        else\n+          # Otherwise we believe it is a complete path. Use it as it is.\n+          if test ! -x \"$tool_command\" && test ! -x \"${tool_command}.exe\"; then\n+            AC_MSG_ERROR([User supplied tool $1=\"$tool_command\" does not exist or is not executable])\n+          fi\n+          if test ! -x \"$tool_command\"; then\n+            tool_command=\"${tool_command}.exe\"\n+          fi\n+          $1=\"$tool_command\"\n+        fi\n+        if test \"x$tool_args\" != x; then\n+          # If we got arguments, re-append them to the command after the fixup.\n+          $1=\"[$]$1 $tool_args\"\n+        fi\n+        AC_MSG_CHECKING([for $1])\n+        AC_MSG_RESULT([[$]$1 [[user supplied]]])\n+      fi\n+    fi\n+    $3\n+  fi\n+])\n+\n+###############################################################################\n+# Locate a tool using proper methods.\n+# $1: variable to set\n+# $2: executable name (or list of names) to look for\n+# $3: [path]\n+# $4: set to NOFIXPATH to skip prefixing FIXPATH, even if needed on platform\n+AC_DEFUN([UTIL_LOOKUP_PROGS],\n+[\n+  UTIL_SETUP_TOOL($1, [\n+    $1=\"\"\n+\n+    if test \"x$3\" != x; then\n+      old_path=\"$PATH\"\n+      PATH=\"$3\"\n@@ -179,3 +370,47 @@\n-    if test \"x$complete\" != \"x$new_complete\"; then\n-      $1=\"$new_complete\"\n-      AC_MSG_NOTICE([Rewriting $1 to \"$new_complete\"])\n+    for name in $2; do\n+      AC_MSG_CHECKING(for $name)\n+\n+      command_type=`type -t \"$name\"`\n+      if test \"x$command_type\" = xbuiltin || test \"x$command_type\" = xkeyword; then\n+        # Shell builtin or keyword; we're done here\n+        full_path=\"$name\"\n+        $1=\"$full_path\"\n+        AC_MSG_RESULT([[$full_path [builtin]]])\n+        break\n+      else\n+        # Search in $PATH\n+        old_ifs=\"$IFS\"\n+        IFS=\":\"\n+        for elem in $PATH; do\n+          IFS=\"$old_ifs\"\n+          if test \"x$elem\" = x; then\n+            continue\n+          fi\n+          full_path=\"$elem\/$name\"\n+          if test ! -e \"$full_path\" && test \"x$OPENJDK_BUILD_OS\" = \"xwindows\"; then\n+            # Try again with .exe\n+            full_path=\"$elem\/$name.exe\"\n+          fi\n+          if test -e \"$full_path\"; then\n+            $1=\"$full_path\"\n+            UTIL_FIXUP_EXECUTABLE($1, $3, $4)\n+            result=\"[$]$1\"\n+\n+            # If we have FIXPATH enabled, strip all instances of it and prepend\n+            # a single one, to avoid double fixpath prefixing.\n+            if test \"x$4\" != xNOFIXPATH; then\n+              [ if [[ $FIXPATH != \"\" && $result =~ ^\"$FIXPATH \" ]]; then ]\n+                result=\"\\$FIXPATH ${result#\"$FIXPATH \"}\"\n+              fi\n+            fi\n+            AC_MSG_RESULT([$result])\n+            break 2;\n+          fi\n+        done\n+        IFS=\"$old_ifs\"\n+      fi\n+      AC_MSG_RESULT([[[not found]]])\n+    done\n+\n+    if test \"x$3\" != x; then\n+      PATH=\"$old_path\"\n@@ -183,0 +418,74 @@\n+  ])\n+])\n+\n+###############################################################################\n+# Call UTIL_SETUP_TOOL with AC_CHECK_TOOLS to locate the tool. This will look\n+# first for cross-compilation tools.\n+# $1: variable to set\n+# $2: executable name (or list of names) to look for\n+# $3: [path]\n+AC_DEFUN([UTIL_LOOKUP_TOOLCHAIN_PROGS],\n+[\n+  if test \"x$ac_tool_prefix\" = x; then\n+    UTIL_LOOKUP_PROGS($1, $2, $3)\n+  else\n+    prefixed_names=$(for name in $2; do echo ${ac_tool_prefix}${name} $name; done)\n+    UTIL_LOOKUP_PROGS($1, $prefixed_names, $3)\n+  fi\n+])\n+\n+###############################################################################\n+# Test that variable $1 denoting a program is not empty. If empty, exit with an error.\n+# $1: variable to check\n+AC_DEFUN([UTIL_CHECK_NONEMPTY],\n+[\n+  if test \"x[$]$1\" = x; then\n+    AC_MSG_ERROR([Could not find required tool for $1])\n+  fi\n+])\n+\n+###############################################################################\n+# Like UTIL_LOOKUP_PROGS but fails if no tool was found.\n+# $1: variable to set\n+# $2: executable name (or list of names) to look for\n+# $3: [path]\n+AC_DEFUN([UTIL_REQUIRE_PROGS],\n+[\n+  UTIL_LOOKUP_PROGS($1, $2, $3)\n+  UTIL_CHECK_NONEMPTY($1)\n+])\n+\n+###############################################################################\n+# Like UTIL_LOOKUP_PROGS but fails if no tool was found.\n+# $1: variable to set\n+# $2: executable name (or list of names) to look for\n+# $3: [path]\n+AC_DEFUN([UTIL_REQUIRE_TOOLCHAIN_PROGS],\n+[\n+  UTIL_LOOKUP_TOOLCHAIN_PROGS($1, $2, $3)\n+  UTIL_CHECK_NONEMPTY($1)\n+])\n+\n+\n+###############################################################################\n+# Like UTIL_SETUP_TOOL but fails if no tool was found.\n+# $1: variable to set\n+# $2: autoconf macro to call to look for the special tool\n+AC_DEFUN([UTIL_REQUIRE_SPECIAL],\n+[\n+  UTIL_SETUP_TOOL($1, [$2])\n+  UTIL_CHECK_NONEMPTY($1)\n+  # The special macro will return an absolute path, and is only used for\n+  # unix tools. No further processing needed.\n+])\n+\n+###############################################################################\n+# Add FIXPATH prefix to variable. Normally this is done by UTIL_LOOKUP_PROGS\n+# or UTIL_FIXUP_EXECUTABLE, but in some circumstances this has to be done\n+# explicitly, such as when the command in question does not exist yet.\n+#\n+# $1: variable to add fixpath to\n+AC_DEFUN([UTIL_ADD_FIXPATH],\n+[\n+  if test \"x$FIXPATH\" != x; then\n+    $1=\"$FIXPATH [$]$1\"\n@@ -211,2 +520,2 @@\n-      cd `$THEPWDCMD -P`\n-      sym_link_dir=`$THEPWDCMD -P`\n+      cd `pwd -P`\n+      sym_link_dir=`pwd -P`\n@@ -223,1 +532,1 @@\n-        sym_link_dir=`$THEPWDCMD -P`\n+        sym_link_dir=`pwd -P`\n@@ -232,1 +541,0 @@\n-\n","filename":"make\/autoconf\/util_paths.m4","additions":397,"deletions":89,"binary":false,"changes":486,"status":"modified"},{"patch":"@@ -1,451 +0,0 @@\n-#\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-AC_DEFUN([UTIL_REWRITE_AS_UNIX_PATH],\n-[\n-  windows_path=\"[$]$1\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    $1=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    $1=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-    # wslpath does not check the input, only call if an actual windows path was\n-    # given.\n-    if $ECHO \"$windows_path\" | $GREP -q [\"^[a-zA-Z]:[\\\\\\\\\/]\"]; then\n-      unix_path=`$WSLPATH -u \"$windows_path\"`\n-      $1=\"$unix_path\"\n-    fi\n-  fi\n-])\n-\n-AC_DEFUN([UTIL_REWRITE_AS_WINDOWS_MIXED_PATH],\n-[\n-  unix_path=\"[$]$1\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    windows_path=`$CYGPATH -m \"$unix_path\"`\n-    $1=\"$windows_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    windows_path=`cmd \/\/c echo $unix_path`\n-    $1=\"$windows_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-    windows_path=`$WSLPATH -m \"$unix_path\" 2>\/dev\/null`\n-    if test $? -ne 0; then\n-      dir=`dirname \"$unix_path\"`\n-      base=`basename \"$unix_path\"`\n-      windows_path=`$WSLPATH -m \"$dir\"`\/\"$base\"\n-      if test $? -ne 0; then\n-        AC_MSG_ERROR([Cannot convert \"$unix_path\" to Windows path])\n-      fi\n-    fi\n-    $1=\"$windows_path\"\n-  fi\n-])\n-\n-# Helper function which possibly converts a path using DOS-style short mode.\n-# If so, the updated path is stored in $new_path.\n-# $1: The path to check\n-AC_DEFUN([UTIL_MAKE_WINDOWS_SPACE_SAFE_CYGWIN],\n-[\n-  input_path=\"$1\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use @<:@ and @:>@ instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP @<:@^-._\/a-zA-Z0-9@:>@`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $1 | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-])\n-\n-# Helper function which possibly converts a path using DOS-style short mode.\n-# If so, the updated path is stored in $new_path.\n-# $1: The path to check\n-AC_DEFUN([UTIL_MAKE_WINDOWS_SPACE_SAFE_MSYS],\n-[\n-  input_path=\"$1\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use @<:@ and @:>@ instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP @<:@^-_\/:a-zA-Z0-9@:>@`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-])\n-\n-# Helper function which possibly converts a path using DOS-style short mode.\n-# If so, the updated path is stored in $new_path.\n-# $1: The path to check\n-AC_DEFUN([UTIL_MAKE_WINDOWS_SPACE_SAFE_WSL],\n-[\n-  input_path=\"$1\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use @<:@ and @:>@ instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [[^-_\/:a-zA-Z0-9\\\\.]]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    TOPDIR_windows=\"$TOPDIR\"\n-    UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([TOPDIR_windows])\n-    # First convert to Windows path to make input valid for cmd\n-    UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([input_path])\n-    # Reset PATH since it can contain a mix of WSL\/linux paths and Windows paths from VS,\n-    # which, in combination with WSLENV, will make the WSL layer complain\n-    old_path=\"$PATH\"\n-    PATH=\n-    new_path=`$CMD \/c $TOPDIR_windows\/make\/scripts\/windowsShortName.bat \"$input_path\" \\\n-        | $SED -e 's|\\r||g' \\\n-        | $TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-    # Rewrite back to unix style\n-    PATH=\"$old_path\"\n-    UTIL_REWRITE_AS_UNIX_PATH([new_path])\n-  fi\n-])\n-\n-# FIXME: The UTIL_FIXUP_*_CYGWIN\/MSYS is most likely too convoluted\n-# and could probably be heavily simplified. However, all changes in this\n-# area tend to need lot of testing in different scenarios, and in lack of\n-# proper unit testing, cleaning this up has not been deemed worth the effort\n-# at the moment.\n-\n-AC_DEFUN([UTIL_FIXUP_PATH_CYGWIN],\n-[\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"[$]$1\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  UTIL_ABSOLUTE_PATH(new_path)\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    AC_MSG_NOTICE([The path of $1, which resolves as \"$path\", is invalid.])\n-    AC_MSG_ERROR([Cannot locate the the path of $1])\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-  UTIL_MAKE_WINDOWS_SPACE_SAFE_CYGWIN([$new_path])\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    $1=\"$new_path\"\n-    AC_MSG_NOTICE([Rewriting $1 to \"$new_path\"])\n-  fi\n-])\n-\n-AC_DEFUN([UTIL_FIXUP_PATH_MSYS],\n-[\n-  path=\"[$]$1\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-  UTIL_ABSOLUTE_PATH(new_path)\n-\n-  UTIL_MAKE_WINDOWS_SPACE_SAFE_MSYS([$new_path])\n-  UTIL_REWRITE_AS_UNIX_PATH(new_path)\n-  if test \"x$path\" != \"x$new_path\"; then\n-    $1=\"$new_path\"\n-    AC_MSG_NOTICE([Rewriting $1 to \"$new_path\"])\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes@<:@@@:>@}\" \"${new_path:0:10}\")\n-])\n-\n-AC_DEFUN([UTIL_FIXUP_PATH_WSL],\n-[\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  new_path=\"[$]$1\"\n-  UTIL_REWRITE_AS_UNIX_PATH([new_path])\n-\n-  UTIL_ABSOLUTE_PATH(new_path)\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-  UTIL_MAKE_WINDOWS_SPACE_SAFE_WSL([$new_path])\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    $1=\"$new_path\"\n-    AC_MSG_NOTICE([Rewriting $1 to \"$new_path\"])\n-  fi\n-])\n-\n-AC_DEFUN([UTIL_FIXUP_EXECUTABLE_CYGWIN],\n-[\n-  # First separate the path from the arguments. This will split at the first\n-  # space.\n-  complete=\"[$]$1\"\n-  path=\"${complete%% *}\"\n-  tmp=\"$complete EOL\"\n-  arguments=\"${tmp#* }\"\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # Now try to locate executable using which\n-  new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-  # bat and cmd files are not always considered executable in cygwin causing which\n-  # to not find them\n-  if test \"x$new_path\" = x \\\n-      && test \"x`$ECHO \\\"$path\\\" | $GREP -i -e \\\"\\\\.bat$\\\" -e \\\"\\\\.cmd$\\\"`\" != x \\\n-      && test \"x`$LS \\\"$path\\\" 2>\/dev\/null`\" != x; then\n-    new_path=`$CYGPATH -u \"$path\"`\n-  fi\n-  if test \"x$new_path\" = x; then\n-    # Oops. Which didn't find the executable.\n-    # The splitting of arguments from the executable at a space might have been incorrect,\n-    # since paths with space are more likely in Windows. Give it another try with the whole\n-    # argument.\n-    path=\"$complete\"\n-    arguments=\"EOL\"\n-    new_path=`$CYGPATH -u \"$path\"`\n-    new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-    # bat and cmd files are not always considered executable in cygwin causing which\n-    # to not find them\n-    if test \"x$new_path\" = x \\\n-        && test \"x`$ECHO \\\"$path\\\" | $GREP -i -e \\\"\\\\.bat$\\\" -e \\\"\\\\.cmd$\\\"`\" != x \\\n-        && test \"x`$LS \\\"$path\\\" 2>\/dev\/null`\" != x; then\n-      new_path=`$CYGPATH -u \"$path\"`\n-    fi\n-    if test \"x$new_path\" = x; then\n-      # It's still not found. Now this is an unrecoverable error.\n-      AC_MSG_NOTICE([The path of $1, which resolves as \"$complete\", is not found.])\n-      has_space=`$ECHO \"$complete\" | $GREP \" \"`\n-      if test \"x$has_space\" != x; then\n-        AC_MSG_NOTICE([You might be mixing spaces in the path and extra arguments, which is not allowed.])\n-      fi\n-      AC_MSG_ERROR([Cannot locate the the path of $1])\n-    fi\n-  fi\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file presence.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    # Short path failed, file does not exist as specified.\n-    # Try adding .exe or .cmd\n-    if test -f \"${new_path}.exe\"; then\n-      input_to_shortpath=\"${new_path}.exe\"\n-    elif test -f \"${new_path}.cmd\"; then\n-      input_to_shortpath=\"${new_path}.cmd\"\n-    else\n-      AC_MSG_NOTICE([The path of $1, which resolves as \"$new_path\", is invalid.])\n-      AC_MSG_NOTICE([Neither \"$new_path\" nor \"$new_path.exe\/cmd\" can be found])\n-      AC_MSG_ERROR([Cannot locate the the path of $1])\n-    fi\n-  else\n-    input_to_shortpath=\"$new_path\"\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-  new_path=\"$input_to_shortpath\"\n-  UTIL_MAKE_WINDOWS_SPACE_SAFE_CYGWIN([$input_to_shortpath])\n-  # remove trailing .exe if any\n-  new_path=\"${new_path\/%.exe\/}\"\n-])\n-\n-AC_DEFUN([UTIL_FIXUP_EXECUTABLE_MSYS],\n-[\n-  # First separate the path from the arguments. This will split at the first\n-  # space.\n-  complete=\"[$]$1\"\n-  path=\"${complete%% *}\"\n-  tmp=\"$complete EOL\"\n-  arguments=\"${tmp#* }\"\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  new_path=\"$path\"\n-  UTIL_REWRITE_AS_UNIX_PATH(new_path)\n-\n-  # Now try to locate executable using which\n-  new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-\n-  if test \"x$new_path\" = x; then\n-    # Oops. Which didn't find the executable.\n-    # The splitting of arguments from the executable at a space might have been incorrect,\n-    # since paths with space are more likely in Windows. Give it another try with the whole\n-    # argument.\n-    path=\"$complete\"\n-    arguments=\"EOL\"\n-    new_path=\"$path\"\n-    UTIL_REWRITE_AS_UNIX_PATH(new_path)\n-\n-    new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-    # bat and cmd files are not always considered executable in MSYS causing which\n-    # to not find them\n-    if test \"x$new_path\" = x \\\n-        && test \"x`$ECHO \\\"$path\\\" | $GREP -i -e \\\"\\\\.bat$\\\" -e \\\"\\\\.cmd$\\\"`\" != x \\\n-        && test \"x`$LS \\\"$path\\\" 2>\/dev\/null`\" != x; then\n-      new_path=\"$path\"\n-      UTIL_REWRITE_AS_UNIX_PATH(new_path)\n-    fi\n-\n-    if test \"x$new_path\" = x; then\n-      # It's still not found. Now this is an unrecoverable error.\n-      AC_MSG_NOTICE([The path of $1, which resolves as \"$complete\", is not found.])\n-      has_space=`$ECHO \"$complete\" | $GREP \" \"`\n-      if test \"x$has_space\" != x; then\n-        AC_MSG_NOTICE([You might be mixing spaces in the path and extra arguments, which is not allowed.])\n-      fi\n-      AC_MSG_ERROR([Cannot locate the the path of $1])\n-    fi\n-  fi\n-\n-  # Now new_path has a complete unix path to the binary\n-  if test \"x`$ECHO $new_path | $GREP ^\/bin\/`\" != x; then\n-    # Keep paths in \/bin as-is, but remove trailing .exe if any\n-    new_path=\"${new_path\/%.exe\/}\"\n-    # Do not save \/bin paths to all_fixpath_prefixes!\n-  else\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $new_path`\n-    UTIL_MAKE_WINDOWS_SPACE_SAFE_MSYS([$new_path])\n-    # Output is in $new_path\n-    UTIL_REWRITE_AS_UNIX_PATH(new_path)\n-    # remove trailing .exe if any\n-    new_path=\"${new_path\/%.exe\/}\"\n-\n-    # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-    all_fixpath_prefixes=(\"${all_fixpath_prefixes@<:@@@:>@}\" \"${new_path:0:10}\")\n-  fi\n-])\n-\n-AC_DEFUN([UTIL_FIXUP_EXECUTABLE_WSL],\n-[\n-  # First separate the path from the arguments. This will split at the first\n-  # space.\n-  complete=\"[$]$1\"\n-  path=\"${complete%% *}\"\n-  tmp=\"$complete EOL\"\n-  arguments=\"${tmp#* }\"\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  new_path=\"$path\"\n-  UTIL_REWRITE_AS_UNIX_PATH([new_path])\n-\n-  # Now try to locate executable using which\n-  new_path_bak=\"$new_path\"\n-  new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-  # bat and cmd files are not considered executable in WSL\n-  if test \"x$new_path\" = x \\\n-      && test \"x`$ECHO \\\"$path\\\" | $GREP -i -e \\\"\\\\.bat$\\\" -e \\\"\\\\.cmd$\\\"`\" != x \\\n-      && test \"x`$LS \\\"$path\\\" 2>\/dev\/null`\" != x; then\n-    new_path=\"$new_path_back\"\n-  fi\n-  if test \"x$new_path\" = x; then\n-    # Oops. Which didn't find the executable.\n-    # The splitting of arguments from the executable at a space might have been incorrect,\n-    # since paths with space are more likely in Windows. Give it another try with the whole\n-    # argument.\n-    path=\"$complete\"\n-    arguments=\"EOL\"\n-    new_path=\"$path\"\n-    UTIL_REWRITE_AS_UNIX_PATH([new_path])\n-    new_path_bak=\"$new_path\"\n-    new_path=`type -p \"$new_path\" 2> \/dev\/null`\n-    # bat and cmd files are not considered executable in WSL\n-    if test \"x$new_path\" = x \\\n-        && test \"x`$ECHO \\\"$path\\\" | $GREP -i -e \\\"\\\\.bat$\\\" -e \\\"\\\\.cmd$\\\"`\" != x \\\n-        && test \"x`$LS \\\"$path\\\" 2>\/dev\/null`\" != x; then\n-      new_path=\"$new_path_bak\"\n-    fi\n-    if test \"x$new_path\" = x; then\n-      # It's still not found. Now this is an unrecoverable error.\n-      AC_MSG_NOTICE([The path of $1, which resolves as \"$complete\", is not found.])\n-      has_space=`$ECHO \"$complete\" | $GREP \" \"`\n-      if test \"x$has_space\" != x; then\n-        AC_MSG_NOTICE([You might be mixing spaces in the path and extra arguments, which is not allowed.])\n-      fi\n-      AC_MSG_ERROR([Cannot locate the the path of $1])\n-    fi\n-  fi\n-\n-  # In WSL, suffixes must be present for Windows executables\n-  if test ! -f \"$new_path\"; then\n-    # Try adding .exe or .cmd\n-    if test -f \"${new_path}.exe\"; then\n-      input_to_shortpath=\"${new_path}.exe\"\n-    elif test -f \"${new_path}.cmd\"; then\n-      input_to_shortpath=\"${new_path}.cmd\"\n-    else\n-      AC_MSG_NOTICE([The path of $1, which resolves as \"$new_path\", is invalid.])\n-      AC_MSG_NOTICE([Neither \"$new_path\" nor \"$new_path.exe\/cmd\" can be found])\n-      AC_MSG_ERROR([Cannot locate the the path of $1])\n-    fi\n-  else\n-    input_to_shortpath=\"$new_path\"\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-  new_path=\"$input_to_shortpath\"\n-  UTIL_MAKE_WINDOWS_SPACE_SAFE_WSL([$input_to_shortpath])\n-])\n-\n","filename":"make\/autoconf\/util_windows.m4","additions":0,"deletions":451,"binary":false,"changes":451,"status":"deleted"},{"patch":"@@ -230,1 +230,1 @@\n-      $1_JAVAC_PORT_FILE := $$(JAVAC_SERVER_DIR)\/server.port\n+      $1_JAVAC_PORT_FILE := $$(call FixPath, $$(JAVAC_SERVER_DIR)\/server.port)\n@@ -232,4 +232,3 @@\n-      # The servercmd specified how to launch the server. This must use\n-      # JAVA_DETACH, which is the \"big\" java with an ability to detach from\n-      # fixpath (on Windows) This will be executed by the client, if needed.\n-      $1_JAVAC_SERVER_CMD := $$(JAVA_DETACH) $$($1_JAVA_FLAGS) $$($1_JAVAC)\n+      # The servercmd specifies how to launch the server. This will be executed\n+      # by the client, if needed.\n+      $1_JAVAC_SERVER_CMD := $$(call FixPath, $$(JAVA) $$($1_JAVA_FLAGS) $$($1_JAVAC))\n@@ -241,5 +240,0 @@\n-      ifeq ($(call isBuildOs, windows), true)\n-        $1_ECHO_COMMAND := $(FIXPATH) cmd \/c echo\n-      else\n-        $1_ECHO_COMMAND := $(ECHO)\n-      endif\n@@ -247,2 +241,2 @@\n-\t$$($1_ECHO_COMMAND) portfile=$$($1_JAVAC_PORT_FILE) > $$@\n-\t$$($1_ECHO_COMMAND) servercmd=$$($1_JAVAC_SERVER_CMD) >> $$@\n+\t$(ECHO) portfile=$$($1_JAVAC_PORT_FILE) > $$@\n+\t$(ECHO) servercmd=$$($1_JAVAC_SERVER_CMD) >> $$@\n","filename":"make\/common\/JavaCompilation.gmk","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+# Make sure we have a value (could be overridden on command line by caller)\n+CREATING_BUILDJDK ?= false\n+\n@@ -439,0 +442,2 @@\n+# This also converts a colon-separated list of paths to a semicolon-separated\n+# list.\n@@ -442,12 +447,0 @@\n-  FixPathArgs = \\\n-       $(shell $(FIXPATH) cmd \/c echo $1)\n-  ifeq ($(call isBuildOsEnv, windows.wsl), true)\n-    FixPath = \\\n-      $(shell $(WSLPATH) -m $1)\n-  else\n-    FixPath = \\\n-      $(shell $(CYGPATH) -m $1)\n-  endif\n-else\n-  FixPathArgs = \\\n-      $1\n@@ -455,14 +448,1 @@\n-      $1\n-endif\n-\n-################################################################################\n-# FixPathList\n-#\n-# On Windows, converts a cygwin\/unix style path list (colon-separated) into\n-# the native format (mixed mode, semicolon-separated). On other platforms,\n-# return the path list unchanged.\n-################################################################################\n-ifeq ($(call isTargetOs, windows), true)\n-  FixPathList = \\\n-      $(subst @,$(SPACE),$(subst $(SPACE),;,$(foreach entry,$(subst :,$(SPACE),\\\n-      $(subst $(SPACE),@,$(strip $1))),$(call FixPath, $(entry)))))\n+    $(strip $(subst \\,\\\\, $(shell $(FIXPATH_BASE) print $(patsubst $(FIXPATH), , $1))))\n@@ -470,1 +450,1 @@\n-  FixPathList = \\\n+  FixPath = \\\n","filename":"make\/common\/MakeBase.gmk","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-      \"directory\": \"$(strip $(call FixPathArgs, $2))\"$(COMMA) \\\n-      \"file\": \"$(strip $(call FixPathArgs, $3))\"$(COMMA) \\\n+      \"directory\": \"$(strip $(call FixPath, $2))\"$(COMMA) \\\n+      \"file\": \"$(strip $(call FixPath, $3))\"$(COMMA) \\\n@@ -78,1 +78,1 @@\n-        $(subst $(FIXPATH),,$(call FixPathArgs, $4)))))\" \\\n+        $(subst $(FIXPATH),,$(call FixPath, $4)))))\" \\\n@@ -178,6 +178,0 @@\n-ifeq ($(call isBuildOsEnv, windows.cygwin), true)\n-  UNIX_PATH_PREFIX := \/cygdrive\n-else ifeq ($(call isBuildOsEnv, windows.msys), true)\n-  UNIX_PATH_PREFIX :=\n-endif\n-\n@@ -191,1 +185,1 @@\n-    -e 's|^\\([a-zA-Z]\\):|$(UNIX_PATH_PREFIX)\/\\1|g' \\\n+    -e 's|^\\([a-zA-Z]\\):|$(WINENV_PREFIX)\/\\1|g' \\\n@@ -535,1 +529,1 @@\n-      $1_SUFFIX := $(EXE_SUFFIX)\n+      $1_SUFFIX := $(EXECUTABLE_SUFFIX)\n@@ -1156,0 +1150,3 @@\n+                 ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n+\t\t    $$(CHMOD) +x $$($1_TARGET)\n+                 endif\n","filename":"make\/common\/NativeCompilation.gmk","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  \"$(subst $(SPACE),$(PATH_SEP),$(strip $(subst $(DQUOTE),,$1)))\"\n+  \"$(subst $(SPACE),:,$(strip $(subst $(DQUOTE),,$1)))\"\n","filename":"make\/common\/Utils.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,2 @@\n-  $(SUPPORT_OUTPUTDIR)\/gensrc\/$(MODULE)\/_the_props: $$(PROPSOURCES)\n+  PROPS_BASE := $(SUPPORT_OUTPUTDIR)\/gensrc\/$(MODULE)\/_the_props\n+  $$(PROPS_BASE): $$(PROPSOURCES)\n@@ -92,1 +93,2 @@\n-\t$(TOOL_COMPILEPROPS_CMD) $$(PROPCMDLINE)\n+\t$$(call ExecuteWithLog, $$(PROPS_BASE)_exec, \\\n+\t    $(TOOL_COMPILEPROPS_CMD) $$(PROPCMDLINE))\n@@ -95,1 +97,1 @@\n-  $$(strip $1) += $(SUPPORT_OUTPUTDIR)\/gensrc\/$(MODULE)\/_the_props\n+  $$(strip $1) += $$(PROPS_BASE)\n","filename":"make\/common\/modules\/GensrcCommonLangtools.gmk","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-        \"windows-x64\", \"windows-x86\",\n+        \"windows-x64\", \"windows-x86\", \"windows-aarch64\",\n@@ -464,0 +464,9 @@\n+        \"windows-aarch64\": {\n+            target_os: \"windows\",\n+            target_cpu: \"aarch64\",\n+            dependencies: [\"devkit\", \"gtest\", \"build_devkit\"],\n+            configure_args: [\n+                \"--openjdk-target=aarch64-unknown-cygwin\",\n+            ],\n+        },\n+\n@@ -676,0 +685,4 @@\n+        \"windows-aarch64\": {\n+            platform: \"windows-aarch64\",\n+            jdk_suffix: \"zip\",\n+        },\n@@ -1017,1 +1030,1 @@\n-        windows_x64: \"VS2019-16.7.2+1.0\",\n+        windows_x64: \"VS2019-16.7.2+1.1\",\n@@ -1027,1 +1040,3 @@\n-\n+    if (input.target_platform == \"windows_aarch64\") {\n+        devkit_platform = \"windows_x64\";\n+    }\n@@ -1029,1 +1044,1 @@\n-    if (!(input.target_os == \"windows\" && isWsl(input))) {\n+    if (!(input.target_os == \"windows\")) {\n","filename":"make\/conf\/jib-profiles.js","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-      FILES := $(call SHARED_LIBRARY,jvm) gtestLauncher$(EXE_SUFFIX), \\\n+      FILES := $(call SHARED_LIBRARY,jvm) gtestLauncher$(EXECUTABLE_SUFFIX), \\\n","filename":"make\/hotspot\/test\/GtestImage.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-\t$(ECHO) \"CYGPATH=\\\"$(CYGPATH)\\\"\" >> $(OUT)\n+\t$(ECHO) \"CYGPATH=\\\"$(PATHTOOL)\\\"\" >> $(OUT)\n","filename":"make\/ide\/idea\/jdk\/idea.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,12 +47,4 @@\n-  # Helper macro to convert a unix path to a Windows path, suitable for\n-  # inclusion in a command line.\n-  ifeq ($(call isBuildOsEnv, windows.cygwin), true)\n-    FixPath = \\\n-        $(strip $(subst \\,\\\\,$(shell $(CYGPATH) -w $1)))\n-    FixLinuxExecutable = \\\n-        $(call FixPath, $1)\n-  else ifeq ($(call isBuildOsEnv, windows.wsl), true)\n-    FixPath = \\\n-        $(strip $(subst \\,\\\\,$(shell $(WSLPATH) -w $1)))\n-    FixLinuxExecutable = \\\n-        \"%windir%\\Sysnative\\wsl.exe $1\"\n+  ifeq ($(call isBuildOsEnv, windows.cygwin windows.msys2), true)\n+    FixLinuxExecutable = $(call FixPath, $1)\n+  else ifeq ($(call isBuildOsEnv, windows.wsl1 windows.wsl2), true)\n+    FixLinuxExecutable = \"%windir%\\Sysnative\\wsl.exe $1\"\n","filename":"make\/ide\/visualstudio\/hotspot\/CreateVSProject.gmk","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-\t    -e 's!{{PATH}}!$(call FixPathList,$(PATH))!g' \\\n+\t    -e 's!{{PATH}}!$(call FixPath,$(PATH))!g' \\\n","filename":"make\/ide\/vscode\/hotspot\/CreateVSCodeProject.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1844,1 +1844,1 @@\n-        commandLineDescription = desc.toString();\n+        commandLineDescription = desc.toString().replace(\"\\\\\", \"\\\\\\\\\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecharacter\/GenerateCharacter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,2 +47,5 @@\n-# Copy the microsoft runtime libraries on windows\n-ifeq ($(call isTargetOs, windows), true)\n+# Copy the microsoft runtime libraries on windows, but only if we are not\n+# creating a buildjdk. If we are, the provided runtime librareis are made for\n+# the target platform, not the build platform (and we should not need to bundle\n+# anything with the minimalistic, locally-only buildjdk.)\n+ifeq ($(call isTargetOs, windows)+$(CREATING_BUILDJDK), true+false)\n","filename":"make\/modules\/java.base\/Copy.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,6 @@\n+ifneq ($(DEBUG_LEVEL), release)\n+  ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT), true)\n+    DEBUG_OPTION := -d\n+  endif\n+endif\n+\n@@ -40,2 +46,1 @@\n-\t$(TOOL_GENERATECHARACTER) $2 \\\n-\t    $(if $(call equals, $(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT), true), -d) \\\n+\t$(TOOL_GENERATECHARACTER) $2 $(DEBUG_OPTION) \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcCharacterData.gmk","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-\t$(TOOL_SPP) -i$< -o$@.tmp \\\n+\t$(call ExecuteWithLog, $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/_charset_decoder, \\\n+\t    $(TOOL_SPP) -i$< -o$@.tmp \\\n@@ -64,1 +65,1 @@\n-\t    -DoutSequence='Unicode character'\n+\t    -DoutSequence='Unicode character')\n@@ -74,1 +75,2 @@\n-\t$(TOOL_SPP) -i$< -o$@.tmp \\\n+\t$(call ExecuteWithLog, $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/_charset_encoder, \\\n+\t    $(TOOL_SPP) -i$< -o$@.tmp \\\n@@ -99,1 +101,1 @@\n-\t    -DoutSequence='byte sequence in the given charset'\n+\t    -DoutSequence='byte sequence in the given charset')\n","filename":"make\/modules\/java.base\/gensrc\/GensrcCharsetCoder.gmk","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+@echo off\n+REM\n+REM Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+REM DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+REM\n+REM This code is free software; you can redistribute it and\/or modify it\n+REM under the terms of the GNU General Public License version 2 only, as\n+REM published by the Free Software Foundation.\n+REM\n+REM This code is distributed in the hope that it will be useful, but WITHOUT\n+REM ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+REM FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+REM version 2 for more details (a copy is included in the LICENSE file that\n+REM accompanied this code).\n+REM\n+REM You should have received a copy of the GNU General Public License version\n+REM 2 along with this work; if not, write to the Free Software Foundation,\n+REM Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+REM\n+REM Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+REM or visit www.oracle.com if you need additional information or have any\n+REM questions.\n+REM\n+\n+set vcvarscmd=%1\n+set output=%2\n+if not \"%3\" == \"auto\" set version=-vcvars_ver=%3\n+\n+call %vcvarscmd% %version% %4 %5 %6 %7 %8 %9\n+if exist %output% del %output%\n+\n+call :extract \"%PATH%\", VS_PATH\n+call :extract \"%INCLUDE%\", VS_INCLUDE\n+call :extract \"%LIB%\", VS_LIB\n+call :extract \"%VCINSTALLDIR%\", VCINSTALLDIR\n+call :extract \"%VCToolsRedistDir%\", VCToolsRedistDir\n+call :extract \"%WindowsSdkDir%\", WindowsSdkDir\n+call :extract \"%WINDOWSSDKDIR%\", WINDOWSSDKDIR\n+\n+exit \/b 0\n+\n+:extract\n+echo %~2=$($BASH $TOPDIR\/make\/scripts\/fixpath.sh -i import '%~1 ') >> %output%\n+exit \/b 0\n","filename":"make\/scripts\/extract-vs-env.cmd","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,495 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# Setup the environment fixpath assumes. Read from command line options if\n+# available, or extract values automatically from the environment if missing.\n+# This is robust, but slower.\n+function setup() {\n+  while getopts \"e:p:r:t:c:qmi\" opt; do\n+    case \"$opt\" in\n+    e) PATHTOOL=\"$OPTARG\" ;;\n+    p) DRIVEPREFIX=\"$OPTARG\" ;;\n+    r) ENVROOT=\"$OPTARG\" ;;\n+    t) WINTEMP=\"$OPTARG\" ;;\n+    c) CMD=\"$OPTARG\" ;;\n+    q) QUIET=true ;;\n+    m) MIXEDMODE=true ;;\n+    i) IGNOREFAILURES=true ;;\n+    ?)\n+      # optargs found argument error\n+      exit 2\n+      ;;\n+    esac\n+  done\n+\n+  shift $((OPTIND-1))\n+  ACTION=\"$1\"\n+\n+  # Locate variables ourself if not giving from caller\n+  if [[ -z ${PATHTOOL+x} ]]; then\n+    PATHTOOL=\"$(type -p cygpath)\"\n+    if [[ $PATHTOOL == \"\" ]]; then\n+      PATHTOOL=\"$(type -p wslpath)\"\n+      if [[ $PATHTOOL == \"\" ]]; then\n+        if [[ $QUIET != true ]]; then\n+          echo fixpath: failure: Cannot locate cygpath or wslpath >&2\n+        fi\n+        exit 2\n+      fi\n+    fi\n+  fi\n+\n+  if [[ -z ${DRIVEPREFIX+x} ]]; then\n+    winroot=\"$($PATHTOOL -u c:\/)\"\n+    DRIVEPREFIX=\"${winroot%\/c\/}\"\n+  else\n+    if [[ $DRIVEPREFIX == \"NONE\" ]]; then\n+      DRIVEPREFIX=\"\"\n+    fi\n+  fi\n+\n+  if [[ -z ${ENVROOT+x} ]]; then\n+    unixroot=\"$($PATHTOOL -w \/ 2> \/dev\/null)\"\n+    # Remove trailing backslash\n+    ENVROOT=\"${unixroot%\\\\}\"\n+  elif [[ \"$ENVROOT\" == \"[unavailable]\" ]]; then\n+    ENVROOT=\"\"\n+  fi\n+\n+  if [[ -z ${CMD+x} ]]; then\n+    CMD=\"$DRIVEPREFIX\/c\/windows\/system32\/cmd.exe\"\n+  fi\n+\n+  if [[ -z ${WINTEMP+x} ]]; then\n+    wintemp_win=\"$($CMD \/q \/c echo %TEMP% 2>\/dev\/null | tr -d \\\\n\\\\r)\"\n+    WINTEMP=\"$($PATHTOOL -u \"$wintemp_win\")\"\n+  fi\n+\n+  # Make regexp tests case insensitive\n+  shopt -s nocasematch\n+  # Prohibit msys2 from meddling with paths\n+  export MSYS2_ARG_CONV_EXCL=\"*\"\n+  #  Make sure WSL gets a copy of the path\n+  export WSLENV=PATH\/l\n+}\n+\n+# Cleanup handling\n+TEMPDIRS=\"\"\n+trap \"cleanup\" EXIT\n+function cleanup() {\n+  if [[ \"$TEMPDIRS\" != \"\" ]]; then\n+    rm -rf $TEMPDIRS\n+  fi\n+}\n+\n+# Import a single path\n+# Result: imported path returned in $result\n+function import_path() {\n+  path=\"$1\"\n+  # Strip trailing and leading space\n+  path=\"${path#\"${path%%[![:space:]]*}\"}\"\n+  path=\"${path%\"${path##*[![:space:]]}\"}\"\n+\n+  if [[ $path =~ ^.:[\/\\\\].*$ ]] || [[ \"$path\" =~ ^\"$ENVROOT\"\\\\.*$ ]] ; then\n+    # We got a Windows path as input; use pathtool to convert to unix path\n+    path=\"$($PATHTOOL -u \"$path\")\"\n+    # Path will now be absolute\n+  else\n+    # Make path absolute, and resolve embedded '..' in path\n+    dirpart=\"$(dirname \"$path\")\"\n+    dirpart=\"$(cd \"$dirpart\" 2>&1 > \/dev\/null && pwd)\"\n+    if [[ $? -ne 0 ]]; then\n+      if [[ $QUIET != true ]]; then\n+        echo fixpath: failure: Directory containing path \"'\"$path\"'\" does not exist >&2\n+      fi\n+      if [[ $IGNOREFAILURES != true ]]; then\n+        exit 1\n+      else\n+        path=\"\"\n+      fi\n+    else\n+      basepart=\"$(basename \"$path\")\"\n+      if [[ $dirpart == \/ ]]; then\n+        # Avoid double leading \/\n+        dirpart=\"\"\n+      fi\n+      if [[ $basepart == \/ ]]; then\n+        # Avoid trailing \/\n+        basepart=\"\"\n+      fi\n+      path=\"$dirpart\/$basepart\"\n+    fi\n+  fi\n+\n+  if [[ \"$path\" != \"\" ]]; then\n+    # Now turn it into a windows path\n+    winpath=\"$($PATHTOOL -w \"$path\" 2>\/dev\/null)\"\n+\n+    if [[ $? -eq 0 ]]; then\n+      if [[ ! \"$winpath\" =~ ^\"$ENVROOT\"\\\\.*$ ]] ; then\n+        # If it is not in envroot, it's a generic windows path\n+        if [[ ! $winpath =~ ^[-_.:\\\\a-zA-Z0-9]*$ ]] ; then\n+          # Path has forbidden characters, rewrite as short name\n+          # This monster of a command uses the %~s support from cmd.exe to\n+          # reliably convert to short paths on all winenvs.\n+          shortpath=\"$($CMD \/q \/c for %I in \\( \"$winpath\" \\) do echo %~sI 2>\/dev\/null | tr -d \\\\n\\\\r)\"\n+          path=\"$($PATHTOOL -u \"$shortpath\")\"\n+          # Path is now unix style, based on short name\n+        fi\n+        # Make it lower case\n+        path=\"$(echo \"$path\" | tr [:upper:] [:lower:])\"\n+      fi\n+    else\n+      # On WSL1, PATHTOOL will fail for files in envroot. If the unix path\n+      # exists, we assume that $path is a valid unix path.\n+\n+      if [[ ! -e $path ]]; then\n+        if [[ -e $path.exe ]]; then\n+          path=\"$path.exe\"\n+        else\n+          if [[ $QUIET != true ]]; then\n+            echo fixpath: warning: Path \"'\"$path\"'\" does not exist >&2\n+          fi\n+          # This is not a fatal error, maybe the path will be created later on\n+        fi\n+      fi\n+    fi\n+  fi\n+\n+  if [[ \"$path\" =~ \" \" ]]; then\n+    # Our conversion attempts failed. Perhaps the path did not exists, and thus\n+    # we could not convert it to short name.\n+    if [[ $QUIET != true ]]; then\n+      echo fixpath: failure: Path \"'\"$path\"'\" contains space >&2\n+    fi\n+    if [[ $IGNOREFAILURES != true ]]; then\n+      exit 1\n+    else\n+      path=\"\"\n+    fi\n+  fi\n+\n+  result=\"$path\"\n+}\n+\n+# Import a single path, or a pathlist in Windows style (i.e. ; separated)\n+# Incoming paths can be in Windows or unix style.\n+# Returns in $result a converted path or path list\n+function import_command_line() {\n+  imported=\"\"\n+\n+  old_ifs=\"$IFS\"\n+  IFS=\";\"\n+  for arg in $1; do\n+    if ! [[ $arg =~ ^\" \"+$ ]]; then\n+      import_path \"$arg\"\n+\n+      if [[ \"$result\" != \"\" && \"$imported\" = \"\" ]]; then\n+        imported=\"$result\"\n+      else\n+        imported=\"$imported:$result\"\n+      fi\n+    fi\n+  done\n+  IFS=\"$old_ifs\"\n+\n+  result=\"$imported\"\n+}\n+\n+# If argument seems to be colon separated path list, and all elements\n+# are possible to convert to paths, make a windows path list\n+# Return 0 if successful with converted path list in $result, or\n+# 1 if it was not a path list.\n+function convert_pathlist() {\n+  converted_list=\"\"\n+  pathlist_args=\"$1\"\n+\n+  IFS=':' read -r -a arg_array <<< \"$pathlist_args\"\n+  for arg in \"${arg_array[@]}\"; do\n+    winpath=\"\"\n+    # Start looking for drive prefix\n+    if [[ $arg =~ ^($DRIVEPREFIX\/)([a-z])(\/[^\/]+.*$) ]] ; then\n+      winpath=\"${BASH_REMATCH[2]}:${BASH_REMATCH[3]}\"\n+      # Change slash to backslash (or vice versa if mixed mode)\n+      if [[ $MIXEDMODE != true ]]; then\n+        winpath=\"${winpath\/\/'\/'\/'\\'}\"\n+      else\n+        winpath=\"${winpath\/\/'\\'\/'\/'}\"\n+      fi\n+    elif [[ $arg =~ ^(\/[-_.*a-zA-Z0-9]+(\/[-_.*a-zA-Z0-9]+)+.*$) ]] ; then\n+      # This looks like a unix path, like \/foo\/bar\n+      pathmatch=\"${BASH_REMATCH[1]}\"\n+      if [[ $ENVROOT == \"\" ]]; then\n+        if [[ $QUIET != true ]]; then\n+          echo fixpath: failure: Path \"'\"$pathmatch\"'\" cannot be converted to Windows path >&2\n+        fi\n+        exit 1\n+      fi\n+      winpath=\"$ENVROOT$pathmatch\"\n+      # Change slash to backslash (or vice versa if mixed mode)\n+      if [[ $MIXEDMODE != true ]]; then\n+        winpath=\"${winpath\/\/'\/'\/'\\'}\"\n+      else\n+        winpath=\"${winpath\/\/'\\'\/'\/'}\"\n+      fi\n+    else\n+      # This does not look like a path, so assume this is not a proper pathlist.\n+      # Flag this to caller.\n+      result=\"\"\n+      return 1\n+    fi\n+\n+    if [[ \"$converted_list\" = \"\" ]]; then\n+      converted_list=\"$winpath\"\n+    else\n+      converted_list=\"$converted_list;$winpath\"\n+    fi\n+  done\n+\n+  result=\"$converted_list\"\n+  return 0\n+}\n+\n+# The central conversion function. Convert a single argument, so that any\n+# contained paths are converted to Windows style paths. Result is returned\n+# in $result. If it is a path list, convert it as one.\n+function convert_path() {\n+  if [[ $1 =~ : ]]; then\n+    convert_pathlist \"$1\"\n+    if [[ $? -eq 0 ]]; then\n+      return 0\n+    fi\n+    # Not all elements was possible to convert to Windows paths, so we\n+    # presume it is not a pathlist. Continue using normal conversion.\n+  fi\n+\n+  arg=\"$1\"\n+  winpath=\"\"\n+  # Start looking for drive prefix. Also allow \/xxxx prefixes (typically options\n+  # for Visual Studio tools), and embedded file:\/\/ URIs.\n+  if [[ $arg =~ ^([^\/]*|.*file:\/\/|\/[a-zA-Z:]{1,3}:?)($DRIVEPREFIX\/)([a-z])(\/[^\/]+.*$) ]] ; then\n+    prefix=\"${BASH_REMATCH[1]}\"\n+    winpath=\"${BASH_REMATCH[3]}:${BASH_REMATCH[4]}\"\n+    # Change slash to backslash (or vice versa if mixed mode)\n+    if [[ $MIXEDMODE != true ]]; then\n+      winpath=\"${winpath\/\/'\/'\/'\\'}\"\n+    else\n+      winpath=\"${winpath\/\/'\\'\/'\/'}\"\n+    fi\n+  elif [[ $arg =~ ^([^\/]*|(.*file:\/\/))(\/([-_.a-zA-Z0-9]+)(\/[-_.a-zA-Z0-9]+)+)(.*)?$ ]] ; then\n+    # This looks like a unix path, like \/foo\/bar. Also embedded file:\/\/ URIs.\n+    prefix=\"${BASH_REMATCH[1]}\"\n+    pathmatch=\"${BASH_REMATCH[3]}\"\n+    firstdir=\"${BASH_REMATCH[4]}\"\n+    suffix=\"${BASH_REMATCH[6]}\"\n+\n+    # We only believe this is a path if the first part is an existing directory\n+    if [[ -d \"\/$firstdir\" ]];  then\n+      if [[ $ENVROOT == \"\" ]]; then\n+        if [[ $QUIET != true ]]; then\n+          echo fixpath: failure: Path \"'\"$pathmatch\"'\" cannot be converted to Windows path >&2\n+        fi\n+        exit 1\n+      fi\n+      winpath=\"$ENVROOT$pathmatch\"\n+      # Change slash to backslash (or vice versa if mixed mode)\n+      if [[ $MIXEDMODE != true ]]; then\n+        winpath=\"${winpath\/\/'\/'\/'\\'}\"\n+      else\n+        winpath=\"${winpath\/\/'\\'\/'\/'}\"\n+      fi\n+      winpath=\"$winpath$suffix\"\n+    fi\n+  fi\n+\n+  if [[ $winpath != \"\" ]]; then\n+    result=\"$prefix$winpath\"\n+  else\n+    # Return the arg unchanged\n+    result=\"$arg\"\n+  fi\n+}\n+\n+# Treat $1 as name of a file containg paths. Convert those paths to Windows style,\n+# in a new temporary file, and return a string \"@<temp file>\" pointing to that\n+# new file.\n+function convert_at_file() {\n+  infile=\"$1\"\n+  if [[ -e $infile ]] ; then\n+    tempdir=$(mktemp -dt fixpath.XXXXXX -p \"$WINTEMP\")\n+    TEMPDIRS=\"$TEMPDIRS $tempdir\"\n+\n+    while read line; do\n+      convert_path \"$line\"\n+      echo \"$result\" >> $tempdir\/atfile\n+    done < $infile\n+    convert_path \"$tempdir\/atfile\"\n+    result=\"@$result\"\n+  else\n+    result=\"@$infile\"\n+  fi\n+}\n+\n+# Convert an entire command line, replacing all unix paths with Windows paths,\n+# and all unix-style path lists (colon separated) with Windows-style (semicolon\n+# separated).\n+function print_command_line() {\n+  converted_args=\"\"\n+  for arg in \"$@\" ; do\n+    if [[ $arg =~ ^@(.*$) ]] ; then\n+      # This is an @-file with paths that need converting\n+      convert_at_file \"${BASH_REMATCH[1]}\"\n+    else\n+      convert_path \"$arg\"\n+    fi\n+    converted_args=\"$converted_args$result \"\n+  done\n+  result=\"${converted_args% }\"\n+}\n+\n+# Check if the winenv will allow us to start a Windows program when we are\n+# standing in the current directory\n+function verify_current_dir() {\n+  arg=\"$PWD\"\n+  if [[ $arg =~ ^($DRIVEPREFIX\/)([a-z])(\/[^\/]+.*$) ]] ; then\n+    return 0\n+  elif [[ $arg =~ ^(\/[^\/]+.*$) ]] ; then\n+    if [[ $ENVROOT == \"\" || $ENVROOT =~ ^\\\\\\\\.* ]]; then\n+      # This is a WSL1 or WSL2 environment\n+      return 1\n+    fi\n+    return 0\n+  fi\n+  # This should not happen\n+  return 1\n+}\n+\n+# The core functionality of fixpath. Take the given command line, and convert\n+# it and execute it, so that all paths are converted to Windows style.\n+# The return code is the return code of the executed command.\n+function exec_command_line() {\n+  # Check that Windows can handle our current directory (only an issue for WSL)\n+  verify_current_dir\n+\n+  if [[ $? -ne 0 ]]; then\n+    # WSL1 will just forcefully put us in C:\\Windows\\System32 if we execute this from\n+    # a unix directory. WSL2 will do the same, and print a warning. In both cases,\n+    # we prefer to take control.\n+    cd \"$WINTEMP\"\n+    if [[ $QUIET != true ]]; then\n+      echo fixpath: warning: Changing directory to $WINTEMP >&2\n+    fi\n+  fi\n+\n+  collected_args=()\n+  command=\"\"\n+  for arg in \"$@\" ; do\n+    if [[ $command == \"\" ]]; then\n+      # We have not yet located the command to run\n+      if [[ $arg =~ ^(.*)=(.*)$ ]]; then\n+        # It's a leading env variable assignment (FOO=bar)\n+        key=\"${BASH_REMATCH[1]}\"\n+        arg=\"${BASH_REMATCH[2]}\"\n+        convert_path \"$arg\"\n+        # Set the variable to the converted result\n+        export $key=\"$result\"\n+        # While this is only needed on WSL, it does not hurt to do everywhere\n+        export WSLENV=$WSLENV:$key\/w\n+      else\n+        # The actual command will be executed by bash, so don't convert it\n+        command=\"$arg\"\n+      fi\n+    else\n+      # Now we are collecting arguments; they all need converting\n+      if [[ $arg =~ ^@(.*$) ]] ; then\n+        # This is an @-file with paths that need converting\n+        convert_at_file \"${BASH_REMATCH[1]}\"\n+      else\n+        convert_path \"$arg\"\n+      fi\n+      collected_args=(\"${collected_args[@]}\" \"$result\")\n+    fi\n+  done\n+\n+  # Now execute it\n+  if [[ -v DEBUG_FIXPATH ]]; then\n+    echo fixpath: debug: input: \"$@\" >&2\n+    echo fixpath: debug: output: \"$command\" \"${collected_args[@]}\" >&2\n+  fi\n+\n+  if [[ ! -e \"$command\" ]]; then\n+    if [[ -e \"$command.exe\" ]]; then\n+      command=\"$command.exe\"\n+    fi\n+  fi\n+\n+  if [[ $ENVROOT != \"\" || ! -x \/bin\/grep ]]; then\n+    \"$command\" \"${collected_args[@]}\"\n+  else\n+    # For WSL1, automatically strip away warnings from WSLENV=PATH\/l\n+    \"$command\" \"${collected_args[@]}\" 2> >(\/bin\/grep -v \"ERROR: UtilTranslatePathList\" 1>&2)\n+  fi\n+}\n+\n+# Check that the input represents a path that is reachable from Windows\n+function verify_command_line() {\n+  arg=\"$1\"\n+  if [[ $arg =~ ^($DRIVEPREFIX\/)([a-z])(\/[^\/]+.*$) ]] ; then\n+    return 0\n+  elif [[ $arg =~ ^(\/[^\/]+\/[^\/]+.*$) ]] ; then\n+    if [[ $ENVROOT != \"\" ]]; then\n+      return 0\n+    fi\n+  fi\n+  return 1\n+}\n+\n+#### MAIN FUNCTION\n+\n+setup \"$@\"\n+# Shift away the options processed in setup\n+shift $((OPTIND))\n+\n+if [[ \"$ACTION\" == \"import\" ]] ; then\n+  import_command_line \"$@\"\n+  echo \"$result\"\n+elif [[ \"$ACTION\" == \"print\" ]] ; then\n+  print_command_line \"$@\"\n+  echo \"$result\"\n+elif [[ \"$ACTION\" == \"exec\" ]] ; then\n+  exec_command_line \"$@\"\n+  # Propagate exit code\n+  exit $?\n+elif [[ \"$ACTION\" == \"verify\" ]] ; then\n+  verify_command_line \"$@\"\n+  exit $?\n+else\n+  if [[ $QUIET != true ]]; then\n+    echo Unknown operation: \"$ACTION\" >&2\n+    echo Supported operations: import print exec verify >&2\n+  fi\n+  exit 2\n+fi\n","filename":"make\/scripts\/fixpath.sh","additions":495,"deletions":0,"binary":false,"changes":495,"status":"added"},{"patch":"@@ -1,24 +0,0 @@\n-@echo off\n-REM\n-REM Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-REM DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-REM\n-REM This code is free software; you can redistribute it and\/or modify it\n-REM under the terms of the GNU General Public License version 2 only, as\n-REM published by the Free Software Foundation.\n-REM\n-REM This code is distributed in the hope that it will be useful, but WITHOUT\n-REM ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-REM FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-REM version 2 for more details (a copy is included in the LICENSE file that\n-REM accompanied this code).\n-REM\n-REM You should have received a copy of the GNU General Public License version\n-REM 2 along with this work; if not, write to the Free Software Foundation,\n-REM Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-REM\n-REM Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-REM or visit www.oracle.com if you need additional information or have any\n-REM questions.\n-REM\n-if '%1' NEQ '' echo %~s1\n","filename":"make\/scripts\/windowsShortName.bat","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,594 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <Windows.h>\n-#include <stdbool.h>\n-#include <io.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <malloc.h>\n-\n-void report_error(char const * msg)\n-{\n-  LPTSTR lpMsgBuf;\n-  DWORD dw = GetLastError();\n-\n-  FormatMessage(\n-      FORMAT_MESSAGE_ALLOCATE_BUFFER |\n-      FORMAT_MESSAGE_FROM_SYSTEM |\n-      FORMAT_MESSAGE_IGNORE_INSERTS,\n-      NULL,\n-      dw,\n-      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n-      (LPTSTR) &lpMsgBuf,\n-      0,\n-      NULL);\n-\n-  fprintf(stderr,\n-          \"%s  Failed with error %d: %s\\n\",\n-          msg, dw, lpMsgBuf);\n-\n-  LocalFree(lpMsgBuf);\n-}\n-\n-\/*\n- * Test if pos points to \/prefix\/_\/ where _ can\n- * be any character.\n- *\/\n-int is_prefix_here(int pos, char const *in, int len, const char* prefix)\n-{\n-  \/\/ Length of c\/ is 2\n-  int prefix_size = strlen(prefix);\n-  if (pos+prefix_size+2 > len) return 0;\n-  if (in[pos+prefix_size+1]=='\/') {\n-    return strncmp(in + pos, prefix, prefix_size) == 0;\n-  }\n-  return 0;\n-}\n-\n-\/*\n- * Replace \/cygdrive\/_\/ with _:\/\n- * Works in place since drive letter is always\n- * shorter than \/cygdrive\/\n- *\/\n-char *replace_cygdrive_cygwin(char const *in)\n-{\n-  size_t len = strlen(in);\n-  char *out = (char*) malloc(len+1);\n-  int i,j;\n-\n-  if (len < 12) {\n-    memmove(out, in, len + 1);\n-    return out;\n-  }\n-\n-  for (i = 0, j = 0; i<len;) {\n-    if (is_prefix_here(i, in, len, \"\/cygdrive\/\")) {\n-      out[j++] = in[i+10];\n-      out[j++] = ':';\n-      i+=11;\n-    } else {\n-      out[j] = in[i];\n-      i++;\n-      j++;\n-    }\n-  }\n-  out[j] = '\\0';\n-  return out;\n-}\n-\n-void append(char **b, size_t *bl, size_t *u, char *add, size_t addlen)\n-{\n-  while ((addlen+*u+1) > *bl) {\n-    *bl *= 2;\n-    *b = (char*) realloc(*b, *bl);\n-  }\n-  memcpy(*b+*u, add, addlen);\n-  *u += addlen;\n-}\n-\n-\/*\n- * Creates a new string from in where the first occurrence of sub is\n- * replaced by rep.\n- *\/\n-char *replace_substring(char *in, char *sub, char *rep)\n-{\n-  int in_len = strlen(in);\n-  int sub_len = strlen(sub);\n-  int rep_len = strlen(rep);\n-  char *out = (char *) malloc(in_len - sub_len + rep_len + 1);\n-  char *p;\n-\n-  if (!(p = strstr(in, sub))) {\n-    \/\/ If sub isn't a substring of in, just return in.\n-    return in;\n-  }\n-\n-  \/\/ Copy characters from beginning of in to start of sub.\n-  strncpy(out, in, p - in);\n-  out[p - in] = '\\0';\n-\n-  sprintf(out + (p - in), \"%s%s\", rep, p + sub_len);\n-\n-  return out;\n-}\n-\n-char* msys_path_list; \/\/ @-separated list of paths prefix to look for\n-char* msys_path_list_end; \/\/ Points to last \\0 in msys_path_list.\n-\n-void setup_msys_path_list(char const * argument)\n-{\n-  char* p;\n-  char* drive_letter_pos;\n-\n-  msys_path_list = strdup(&argument[2]);\n-  msys_path_list_end = &msys_path_list[strlen(msys_path_list)];\n-\n-  \/\/ Convert all at-sign (@) in path list to \\0.\n-  \/\/ @ was chosen as separator to minimize risk of other tools messing around with it\n-  p = msys_path_list;\n-  do {\n-    if (p[1] == ':') {\n-      \/\/ msys has mangled our path list, restore it from c:\/... to \/c\/...\n-      drive_letter_pos = p+1;\n-      *drive_letter_pos = *p;\n-      *p = '\/';\n-    }\n-\n-    \/\/ Look for an @ in the list\n-    p = strchr(p, '@');\n-    if (p != NULL) {\n-      *p = '\\0';\n-      p++;\n-    }\n-  } while (p != NULL);\n-}\n-\n-char *replace_cygdrive_msys(char const *in)\n-{\n-  char* str;\n-  char* prefix;\n-  char* p;\n-\n-  str = strdup(in);\n-\n-  \/\/ For each prefix in the path list, search for it and replace \/c\/... with c:\/...\n-  for (prefix = msys_path_list; prefix < msys_path_list_end && prefix != NULL; prefix += strlen(prefix)+1) {\n-    p=str;\n-    while ((p = strstr(p, prefix))) {\n-      char* drive_letter = p+1;\n-      *p = *drive_letter;\n-      *drive_letter = ':';\n-      p++;\n-    }\n-  }\n-\n-  return str;\n-}\n-\n-\/*\n- * Replace \/mnt\/_\/ with _:\/\n- * Works in place since drive letter is always\n- * shorter than \/mnt\/\n- *\/\n-char *replace_cygdrive_wsl(char const *in)\n-{\n-  size_t len = strlen(in);\n-  char *out = (char*) malloc(len+1);\n-  int i,j;\n-\n-  if (len < 7) {\n-    memmove(out, in, len + 1);\n-    return out;\n-  }\n-\n-  for (i = 0, j = 0; i<len;) {\n-    if (is_prefix_here(i, in, len, \"\/mnt\/\")) {\n-      out[j++] = in[i+5];\n-      out[j++] = ':';\n-      i+=6;\n-    } else {\n-      out[j] = in[i];\n-      i++;\n-      j++;\n-    }\n-  }\n-  out[j] = '\\0';\n-  return out;\n-}\n-\n-char*(*replace_cygdrive)(char const *in) = NULL;\n-bool debug_fixpath = false;\n-\n-char *files_to_delete[1024];\n-int num_files_to_delete = 0;\n-\n-char *fix_at_file(char const *in)\n-{\n-  char *tmpdir;\n-  char name[2048];\n-  char *atname;\n-  char *buffer;\n-  size_t buflen=65536;\n-  size_t used=0;\n-  size_t len;\n-  int rc;\n-  FILE *atout;\n-  FILE *atin;\n-  char block[2048];\n-  size_t blocklen;\n-  char *fixed;\n-\n-  atin = fopen(in+1, \"r\");\n-  if (atin == NULL) {\n-    fprintf(stderr, \"Could not read at file %s\\n\", in+1);\n-    exit(-1);\n-  }\n-\n-  tmpdir = getenv(\"TEMP\");\n-  if (tmpdir == NULL) {\n-#if _WIN64\n-    tmpdir = \"c:\/cygwin64\/tmp\";\n-#else\n-    tmpdir = \"c:\/cygwin\/tmp\";\n-#endif\n-  }\n-  _snprintf(name, sizeof(name), \"%s\\\\atfile_XXXXXX\", tmpdir);\n-\n-  rc = _mktemp_s(name, strlen(name)+1);\n-  if (rc) {\n-    fprintf(stderr, \"Could not create temporary file name for at file!\\n\");\n-    exit(-1);\n-  }\n-\n-  atout = fopen(name, \"w\");\n-  if (atout == NULL) {\n-    fprintf(stderr, \"Could not open temporary file for writing! %s\\n\", name);\n-    exit(-1);\n-  }\n-\n-  buffer = (char*) malloc(buflen);\n-  while ((blocklen = fread(block, 1, sizeof(block), atin)) > 0) {\n-    append(&buffer, &buflen, &used, block, blocklen);\n-  }\n-  buffer[used] = 0;\n-  if (debug_fixpath) {\n-    fprintf(stderr, \"fixpath input from @-file %s: %s\\n\", &in[1], buffer);\n-  }\n-  fixed = replace_cygdrive(buffer);\n-  if (debug_fixpath) {\n-    fprintf(stderr, \"fixpath converted to @-file %s is: %s\\n\", name, fixed);\n-  }\n-  fwrite(fixed, strlen(fixed), 1, atout);\n-  fclose(atin);\n-  fclose(atout);\n-  free(fixed);\n-  free(buffer);\n-  files_to_delete[num_files_to_delete] = (char*) malloc(strlen(name)+1);\n-  strcpy(files_to_delete[num_files_to_delete], name);\n-  num_files_to_delete++;\n-  atname = (char*) malloc(strlen(name)+2);\n-  atname[0] = '@';\n-  strcpy(atname+1, name);\n-  return atname;\n-}\n-\n-\/\/ given an argument, convert it to the windows command line safe quoted version\n-\/\/ using rules from:\n-\/\/ http:\/\/blogs.msdn.com\/b\/twistylittlepassagesallalike\/archive\/2011\/04\/23\/everyone-quotes-arguments-the-wrong-way.aspx\n-\/\/ caller is responsible for freeing both input and output.\n-char * quote_arg(char const * in_arg) {\n-  char *quoted = NULL;\n-  char *current = quoted;\n-  int pass;\n-\n-  if (strlen(in_arg) == 0) {\n-     \/\/ empty string? explicitly quote it.\n-     return _strdup(\"\\\"\\\"\");\n-  }\n-\n-  if (strpbrk(in_arg, \" \\t\\n\\v\\r\\\\\\\"\") == NULL) {\n-     return _strdup(in_arg);\n-  }\n-\n-  \/\/ process the arg twice. Once to calculate the size and then to copy it.\n-  for (pass=1; pass<=2; pass++) {\n-    char const *arg = in_arg;\n-\n-    \/\/ initial \"\n-    if (pass == 2) {\n-      *current = '\\\"';\n-    }\n-    current++;\n-\n-    \/\/ process string to be quoted until NUL\n-    do {\n-      int escapes = 0;\n-\n-      while (*arg == '\\\\') {\n-        \/\/ count escapes.\n-        escapes++;\n-        arg++;\n-      }\n-\n-      if (*arg == '\\0') {\n-         \/\/ escape the escapes before final \"\n-         escapes *= 2;\n-      } else if (*arg == '\"') {\n-        \/\/ escape the escapes and the \"\n-        escapes = escapes * 2 + 1;\n-      } else {\n-         \/\/ escapes aren't special, just echo them.\n-      }\n-\n-      \/\/ emit some escapes\n-      while (escapes > 0) {\n-        if (pass == 2) {\n-          *current = '\\\\';\n-        }\n-        current++;\n-        escapes--;\n-      }\n-\n-      \/\/ and the current char\n-      if (pass == 2) {\n-        *current = *arg;\n-      }\n-      current++;\n-    } while (*arg++ != '\\0');\n-\n-    \/\/ allocate the buffer\n-    if (pass == 1) {\n-      size_t alloc = (size_t) (current - quoted + (ptrdiff_t) 2);\n-      current = quoted = (char*) calloc(alloc, sizeof(char));\n-    }\n-  }\n-\n-  \/\/ final \" and \\0\n-  *(current - 1) = '\"';\n-  *current = '\\0';\n-\n-  return quoted;\n-}\n-\n-int main(int argc, char const ** argv)\n-{\n-    STARTUPINFO si;\n-    PROCESS_INFORMATION pi;\n-    unsigned short rc;\n-\n-    char *line;\n-    char *current;\n-    int i, cmd;\n-    DWORD exitCode = 0;\n-    DWORD processFlags = 0;\n-    BOOL processInheritHandles = TRUE;\n-    BOOL waitForChild = TRUE;\n-    char* fixpathPath;\n-\n-    debug_fixpath = (getenv(\"DEBUG_FIXPATH\") != NULL);\n-\n-    if (argc<2 || argv[1][0] != '-' || (argv[1][1] != 'c' && argv[1][1] != 'm' && argv[1][1] != 'w')) {\n-        fprintf(stderr, \"Usage: fixpath -c|m|w<path@path@...> [--detach] \/cygdrive\/c\/WINDOWS\/notepad.exe [\/cygdrive\/c\/x\/test.txt|@\/cygdrive\/c\/x\/atfile]\\n\");\n-        exit(0);\n-    }\n-\n-    if (debug_fixpath) {\n-      char const * cmdline = GetCommandLine();\n-      fprintf(stderr, \"fixpath input line >%s<\\n\", strstr(cmdline, argv[1]));\n-    }\n-\n-    if (argv[1][1] == 'c' && argv[1][2] == '\\0') {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"fixpath using cygwin mode\\n\");\n-      }\n-      replace_cygdrive = replace_cygdrive_cygwin;\n-    } else if (argv[1][1] == 'm') {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"fixpath using msys mode, with path list: %s\\n\", &argv[1][2]);\n-      }\n-      setup_msys_path_list(argv[1]);\n-      replace_cygdrive = replace_cygdrive_msys;\n-    } else if (argv[1][1] == 'w') {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"fixpath using wsl mode, with path list: %s\\n\", &argv[1][2]);\n-      }\n-      replace_cygdrive = replace_cygdrive_wsl;\n-    } else {\n-      fprintf(stderr, \"fixpath Unknown mode: %s\\n\", argv[1]);\n-      exit(-1);\n-    }\n-\n-    if (argv[2][0] == '-') {\n-      if (strcmp(argv[2], \"--detach\") == 0) {\n-        if (debug_fixpath) {\n-          fprintf(stderr, \"fixpath in detached mode\\n\");\n-        }\n-        processFlags |= DETACHED_PROCESS;\n-        processInheritHandles = FALSE;\n-        waitForChild = FALSE;\n-      } else {\n-        fprintf(stderr, \"fixpath Unknown argument: %s\\n\", argv[2]);\n-        exit(-1);\n-      }\n-      i = 3;\n-    } else {\n-      i = 2;\n-    }\n-\n-    \/\/ handle assignments\n-    while (i < argc) {\n-      char const * assignment = strchr(argv[i], '=');\n-      if (assignment != NULL && assignment != argv[i]) {\n-        size_t var_len = (size_t) (assignment - argv[i] + (ptrdiff_t) 1);\n-        char *var = (char *) calloc(var_len, sizeof(char));\n-        char *val = replace_cygdrive(assignment + 1);\n-        memmove(var, argv[i], var_len);\n-        var[var_len - 1] = '\\0';\n-        strupr(var);\n-\n-        if (debug_fixpath) {\n-          fprintf(stderr, \"fixpath setting var >%s< to >%s<\\n\", var, val);\n-        }\n-\n-        rc = SetEnvironmentVariable(var, val);\n-        if (!rc) {\n-          \/\/ Could not set var for some reason.  Try to report why.\n-          const int msg_len = 80 + var_len + strlen(val);\n-          char * msg = (char *) alloca(msg_len);\n-          _snprintf_s(msg, msg_len, _TRUNCATE, \"Could not set environment variable [%s=%s]\", var, val);\n-          report_error(msg);\n-          exit(1);\n-        }\n-        free(var);\n-        free(val);\n-      } else {\n-        \/\/ no more assignments;\n-        break;\n-      }\n-      i++;\n-    }\n-\n-    \/\/ remember index of the command\n-    cmd = i;\n-\n-    \/\/ handle command and it's args.\n-    while (i < argc) {\n-      char const *replaced = replace_cygdrive(argv[i]);\n-      if (replaced[0] == '@') {\n-        if (waitForChild == FALSE) {\n-          fprintf(stderr, \"fixpath Cannot use @-files in detached mode: %s\\n\", replaced);\n-          exit(1);\n-        }\n-        \/\/ Found at-file! Fix it!\n-        replaced = fix_at_file(replaced);\n-      }\n-      argv[i] = quote_arg(replaced);\n-      i++;\n-    }\n-\n-    \/\/ determine the length of the line\n-    line = NULL;\n-    \/\/ args\n-    for (i = cmd; i < argc; i++) {\n-      line += (ptrdiff_t) strlen(argv[i]);\n-    }\n-    \/\/ spaces and null\n-    line += (ptrdiff_t) (argc - cmd + 1);\n-    \/\/ allocate\n-    line = (char*) calloc(line - (char*) NULL, sizeof(char));\n-\n-    \/\/ copy in args.\n-    current = line;\n-    for (i = cmd; i < argc; i++) {\n-      ptrdiff_t len = strlen(argv[i]);\n-      if (i != cmd) {\n-        *current++ = ' ';\n-      }\n-      memmove(current, argv[i], len);\n-      current += len;\n-    }\n-    *current = '\\0';\n-\n-    if (debug_fixpath) {\n-      fprintf(stderr, \"fixpath converted line >%s<\\n\", line);\n-    }\n-\n-    if (cmd == argc) {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"fixpath no command provided!\\n\");\n-      }\n-      exit(0);\n-    }\n-\n-    ZeroMemory(&si, sizeof(si));\n-    si.cb=sizeof(si);\n-    ZeroMemory(&pi, sizeof(pi));\n-\n-    fflush(stderr);\n-    fflush(stdout);\n-\n-    fixpathPath = calloc(32767, sizeof(char));\n-    rc = GetEnvironmentVariable(\"FIXPATH_PATH\", fixpathPath, 32767);\n-    if (rc) {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"Setting Path to FIXPATH_PATH: %s\\n\", fixpathPath);\n-      }\n-      rc = SetEnvironmentVariable(\"Path\", fixpathPath);\n-      if (!rc) {\n-        \/\/ Could not set Path for some reason.  Try to report why.\n-        const int msg_len = 80 + strlen(fixpathPath);\n-        char * msg = (char *)alloca(msg_len);\n-        _snprintf_s(msg, msg_len, _TRUNCATE, \"Could not set environment variable [Path=%s]\", fixpathPath);\n-        report_error(msg);\n-        exit(1);\n-      }\n-    }\n-\n-    rc = CreateProcess(NULL,\n-                       line,\n-                       0,\n-                       0,\n-                       processInheritHandles,\n-                       processFlags,\n-                       NULL,\n-                       NULL,\n-                       &si,\n-                       &pi);\n-    if (!rc) {\n-      \/\/ Could not start process for some reason.  Try to report why:\n-      report_error(\"Could not start process!\");\n-      exit(126);\n-    }\n-\n-    if (waitForChild == TRUE) {\n-      WaitForSingleObject(pi.hProcess, INFINITE);\n-      GetExitCodeProcess(pi.hProcess, &exitCode);\n-\n-      if (debug_fixpath) {\n-        for (i=0; i<num_files_to_delete; ++i) {\n-          fprintf(stderr, \"fixpath Not deleting temporary file %s\\n\",\n-                  files_to_delete[i]);\n-        }\n-      } else {\n-        for (i=0; i<num_files_to_delete; ++i) {\n-          remove(files_to_delete[i]);\n-        }\n-      }\n-\n-      if (exitCode != 0) {\n-        if (debug_fixpath) {\n-          fprintf(stderr, \"fixpath exit code %d\\n\",\n-                  exitCode);\n-        }\n-      }\n-    } else {\n-      if (debug_fixpath) {\n-        fprintf(stderr, \"fixpath Not waiting for child process\");\n-      }\n-    }\n-\n-    exit(exitCode);\n-}\n","filename":"make\/src\/native\/fixpath.c","additions":0,"deletions":594,"binary":false,"changes":594,"status":"deleted"},{"patch":"@@ -40,1 +40,1 @@\n-    if (*cp == '\/') {\n+    if (*cp == '\/' || *cp == '\\\\') {\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}