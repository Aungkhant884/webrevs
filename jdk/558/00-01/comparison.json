{"files":[{"patch":"@@ -297,1 +297,1 @@\n-    private boolean isRequestline(String line) {\n+    private static boolean isRequestline(String line) {\n@@ -330,1 +330,1 @@\n-    private  void print(int nkeys, String[] keys, String[] values, PrintStream p) {\n+    private  static void print(int nkeys, String[] keys, String[] values, PrintStream p) {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MessageHeader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-        if (closed) return -1;\n@@ -138,1 +137,0 @@\n-        if (closed) return -1;\n@@ -152,2 +150,0 @@\n-\n-        if (closed) return 0;\n@@ -174,1 +170,0 @@\n-        if (closed) return;\n@@ -189,1 +184,0 @@\n-        if (closed) return 0;\n@@ -199,1 +193,0 @@\n-        if (closed) return;\n@@ -216,2 +209,0 @@\n-        if (closed) return;\n-\n@@ -233,1 +224,0 @@\n-        if (closed) return false;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MeteredStream.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-\/\/ Using synchronized should be safe here.\n@@ -58,0 +57,3 @@\n+    \/\/ Although accessing files could result in blocking operations,\n+    \/\/ HttpCapture is a corner case; there seem no urgent need to convert\n+    \/\/ this class to using java.util.concurrent.locks at this time.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpCapture.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,3 +68,2 @@\n-        \/\/ If the inputstream is closed already, or if this stream\n-        \/\/ has already been queued for cleanup.just return.\n-        if (closed || queuedForCleanup) return;\n+        \/\/ If the inputstream is queued for cleanup, just return.\n+        if (queuedForCleanup) return;\n@@ -83,0 +82,2 @@\n+            \/\/ If the inputstream is closed already, or if this stream\n+            \/\/ has already been queued for cleanup, just return.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveStream.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-\/\/ Using synchronized in this class should be safe\n@@ -37,0 +36,3 @@\n+    \/\/ No blocking IO is performed within the synchronized code blocks\n+    \/\/ in this class, so there is no need to convert this class to using\n+    \/\/ java.util.concurrent.locks\n@@ -49,1 +51,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -144,0 +144,2 @@\n+        \/\/ no need to synchronize here:\n+        \/\/   already locked by s.n.w.p.h.HttpURLConnection\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/BasicAuthentication.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,3 @@\n-    \/\/ synchronized should be safe here\n+    \/\/ There don't appear to be any blocking IO calls performed from\n+    \/\/ within the synchronized code blocks in the Parameters class, so there don't\n+    \/\/ seem to be any need to migrate it to using java.util.concurrent.locks\n@@ -302,0 +304,2 @@\n+        \/\/ no need to synchronize here:\n+        \/\/   already locked by s.n.w.p.h.HttpURLConnection\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,1 +190,2 @@\n-\n+        \/\/ no need to synchronize here:\n+        \/\/   already locked by s.n.w.p.h.HttpURLConnection\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/NegotiateAuthentication.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}