{"files":[{"patch":"@@ -278,4 +278,4 @@\n-            String message =\n-                \"Actual result of '\" + m.getName() + \"' is not equal to expected value.\" + nl +\n-                \"Expected: \" + Format.asLiteral(expectedResult) + nl +\n-                \"Actual: \" + Format.asLiteral(actualResult);\n+            StringBuilder msgBuilder = new StringBuilder();\n+            msgBuilder.append(\"Actual result of '\" + m.getName() + \"' is not equal to expected value.\" + nl);\n+            msgBuilder.append(\"Expected: \" + Format.asLiteral(expectedResult) + nl);\n+            msgBuilder.append(\"Actual: \" + Format.asLiteral(actualResult));\n@@ -284,1 +284,1 @@\n-                message += nl + \"    Arg\" + i + \": \" + Format.asLiteral(args[i]);\n+                msgBuilder.append(nl + \"    Arg\" + i + \": \" + Format.asLiteral(args[i]));\n@@ -287,0 +287,1 @@\n+            final String message = msgBuilder.toString();\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringIntrinsics.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -127,34 +127,4 @@\n-        var type = first.getClass().getComponentType();\n-        if (type == byte.class) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((byte[])first),\n-                    ArrayCodec.of((byte[])second),\n-                    width, contextBefore);\n-        } else if (type == int.class) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((int[])first),\n-                    ArrayCodec.of((int[])second),\n-                    width, contextBefore);\n-        } else if (type == long.class) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((long[])first),\n-                    ArrayCodec.of((long[])second),\n-                    width, contextBefore);\n-        } else if (type == char.class) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((char[])first),\n-                    ArrayCodec.of((char[])second),\n-                    width, contextBefore);\n-        } else if (type == String.class) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((String[])first),\n-                    ArrayCodec.of((String[])second),\n-                    width, contextBefore);\n-        } else if (!type.isPrimitive() && !type.isArray()) {\n-            return new ArrayDiff<>(\n-                    ArrayCodec.of((Object[])first),\n-                    ArrayCodec.of((Object[])second),\n-                    width, contextBefore);\n-        }\n-\n-        throw new IllegalArgumentException(\"Unsupported array component type: \" + type);\n+        return new ArrayDiff(\n+                ArrayCodec.of(first),\n+                ArrayCodec.of(second),\n+                width, contextBefore);\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayDiff.java","additions":4,"deletions":34,"binary":false,"changes":38,"status":"modified"}]}