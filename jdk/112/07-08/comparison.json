{"files":[{"patch":"@@ -50,12 +50,12 @@\n-        byte[] first = new byte[]  {7, 8, 9, 10,  11, 12, 13};\n-        byte[] second = new byte[] {7, 8, 9, 10, 125, 12, 13};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 4]:%n\" +\n-                \"[7, 8, 9, 10,  11, 12, 13]%n\" +\n-                \"[7, 8, 9, 10, 125, 12, 13]%n\" +\n-                \"             ^^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new byte[] {7, 8, 9, 10,  11, 12, 13},\n+                new byte[] {7, 8, 9, 10, 125, 12, 13})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                4,\n+                \"[7, 8, 9, 10,  11, 12, 13]\",\n+                \"[7, 8, 9, 10, 125, 12, 13]\",\n+                \"             ^^^^\")\n+            .assertTwoWay();\n@@ -66,12 +66,12 @@\n-        int[] first = new int[]  {7, 8, 10, 11, 12};\n-        int[] second = new int[] {7, 8, 9, 10, 11, 12, 13};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 2]:%n\" +\n-                \"[7, 8, 10, 11, 12]%n\" +\n-                \"[7, 8,  9, 10, 11, 12, 13]%n\" +\n-                \"      ^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new int[] {7, 8, 10, 11, 12},\n+                new int[] {7, 8, 9, 10, 11, 12, 13})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                2,\n+                \"[7, 8, 10, 11, 12]\",\n+                \"[7, 8,  9, 10, 11, 12, 13]\",\n+                \"      ^^^\")\n+            .assertTwoWay();\n@@ -82,12 +82,12 @@\n-        long[] first = new long[]  {1, 2, 3, 4};\n-        long[] second = new long[] {1, 2, 3, 10};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 3]:%n\" +\n-                \"[1, 2, 3,  4]%n\" +\n-                \"[1, 2, 3, 10]%n\" +\n-                \"         ^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new long[] {1, 2, 3, 4},\n+                new long[] {1, 2, 3, 10})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                3,\n+                \"[1, 2, 3,  4]\",\n+                \"[1, 2, 3, 10]\",\n+                \"         ^^^\")\n+            .assertTwoWay();\n@@ -98,12 +98,12 @@\n-        byte[] first = new byte[]  {122};\n-        byte[] second = new byte[] {7, 8, 9, 10, 125, 12, 13};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 0]:%n\" +\n-                \"[122]%n\" +\n-                \"[  7, 8, 9, 10, 125, 12, 13]%n\" +\n-                \" ^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new byte[] {122},\n+                new byte[] {7, 8, 9, 10, 125, 12, 13})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                0,\n+                \"[122]\",\n+                \"[  7, 8, 9, 10, 125, 12, 13]\",\n+                \" ^^^\")\n+            .assertTwoWay();\n@@ -114,12 +114,12 @@\n-        byte[] first = new byte[]  {7, 8, 9, 10, 125, 12, 13};\n-        byte[] second = new byte[] {};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 0]:%n\" +\n-                \"[7, 8, 9, 10, 125, 12, 13]%n\" +\n-                \"[]%n\" +\n-                \" ^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new byte[] {7, 8, 9, 10, 125, 12, 13},\n+                new byte[] {})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                0,\n+                \"[7, 8, 9, 10, 125, 12, 13]\",\n+                \"[]\",\n+                \" ^\")\n+            .assertTwoWay();\n@@ -130,12 +130,12 @@\n-        char[] first = new char[]  {'1', '2', '3', '4', '5', '6', '7'};\n-        char[] second = new char[] {'1', 'F', '3', '4', '5', '6', '7'};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 20, Integer.MAX_VALUE);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 1]:%n\" +\n-                \"[1, 2, 3, 4, 5, ...%n\" +\n-                \"[1, F, 3, 4, 5, ...%n\" +\n-                \"   ^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(20, Integer.MAX_VALUE)\n+            .withArrays(\n+                new char[] {'1', '2', '3', '4', '5', '6', '7'},\n+                new char[] {'1', 'F', '3', '4', '5', '6', '7'})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                1,\n+                \"[1, 2, 3, 4, 5, ...\",\n+                \"[1, F, 3, 4, 5, ...\",\n+                \"   ^^\")\n+            .assertTwoWay();\n@@ -146,12 +146,12 @@\n-        byte[] first = new byte[]  {1,   2, 3, 4, 5, 6, 7};\n-        byte[] second = new byte[] {1, 112, 3, 4, 5, 6, 7};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 20, Integer.MAX_VALUE);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 1]:%n\" +\n-                \"[1,   2, 3, 4, 5, ...%n\" +\n-                \"[1, 112, 3, 4, 5, ...%n\" +\n-                \"   ^^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(20, Integer.MAX_VALUE)\n+            .withArrays(\n+                new byte[] {1,   2, 3, 4, 5, 6, 7},\n+                new byte[] {1, 112, 3, 4, 5, 6, 7})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                1,\n+                \"[1,   2, 3, 4, 5, ...\",\n+                \"[1, 112, 3, 4, 5, ...\",\n+                \"   ^^^^\")\n+            .assertTwoWay();\n@@ -162,12 +162,12 @@\n-        char[] first = new char[]  {'1', '2', '3', '4', '5', '6', '7'};\n-        char[] second = new char[] {'1', '2', '3', '4', 'F', '6', '7'};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 20, 2);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 4]:%n\" +\n-                \"... 3, 4, 5, 6, 7]%n\" +\n-                \"... 3, 4, F, 6, 7]%n\" +\n-                \"         ^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(20, 2)\n+            .withArrays(\n+                new char[] {'1', '2', '3', '4', '5', '6', '7'},\n+                new char[] {'1', '2', '3', '4', 'F', '6', '7'})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                4,\n+                \"... 3, 4, 5, 6, 7]\",\n+                \"... 3, 4, F, 6, 7]\",\n+                \"         ^^\")\n+            .assertTwoWay();\n@@ -178,12 +178,12 @@\n-        byte[] first = new byte[]  {0, 1, 2, 3, 125, 5, 6, 7};\n-        byte[] second = new byte[] {0, 1, 2, 3,   4, 5, 6, 7};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 24, 2);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 4]:%n\" +\n-                \"... 2, 3, 125, 5, 6, 7]%n\" +\n-                \"... 2, 3,   4, 5, 6, 7]%n\" +\n-                \"         ^^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(24, 2)\n+            .withArrays(\n+                new byte[] {0, 1, 2, 3, 125, 5, 6, 7},\n+                new byte[] {0, 1, 2, 3,   4, 5, 6, 7})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                4,\n+                \"... 2, 3, 125, 5, 6, 7]\",\n+                \"... 2, 3,   4, 5, 6, 7]\",\n+                \"         ^^^^\")\n+            .assertTwoWay();\n@@ -194,12 +194,12 @@\n-        byte[] first = new byte[] {101, 102, 103, 104, 105, 110};\n-        byte[] second = new byte[] {2};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 25, 2);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 0]:%n\" +\n-                \"[101, 102, 103, 104, ...%n\" +\n-                \"[  2]%n\" +\n-                \" ^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(25, 2)\n+            .withArrays(\n+                new byte[] {101, 102, 103, 104, 105, 110},\n+                new byte[] {2})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                0,\n+                \"[101, 102, 103, 104, ...\",\n+                \"[  2]\",\n+                \" ^^^\")\n+            .assertTwoWay();\n@@ -210,12 +210,12 @@\n-        char[] first = new char[] {'a', 'b', 'c', 'd', 'e'};\n-        char[] second = new char[] {};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second, 10, 2);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 0]:%n\" +\n-                \"[a, b, ...%n\" +\n-                \"[]%n\" +\n-                \" ^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withParams(10, 2)\n+            .withArrays(\n+                new char[] {'a', 'b', 'c', 'd', 'e'},\n+                new char[] {})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                0,\n+                \"[a, b, ...\",\n+                \"[]\",\n+                \" ^\")\n+            .assertTwoWay();\n@@ -226,12 +226,12 @@\n-        char[] first = new char[] {'a', 'b', 'c', 'd', 'e'};\n-        char[] second = new char[] {};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 0]:%n\" +\n-                \"[a, b, c, d, e]%n\" +\n-                \"[]%n\" +\n-                \" ^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new char[] {'a', 'b', 'c', 'd', 'e'},\n+                new char[] {})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                0,\n+                \"[a, b, c, d, e]\",\n+                \"[]\",\n+                \" ^\")\n+            .assertTwoWay();\n@@ -242,13 +242,12 @@\n-        char[] first = new char[]  {0, 1, 2, 3, 4, 5, 6,   7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-        char[] second = new char[] {0, 1, 2, 3, 4, 5, 6, 125, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-\n-        \/\/ Lines in the code look like aren't aligned due to slashes taking more space than spaces.\n-        var nl = System.lineSeparator();\n-        String expected = \"Arrays differ starting from [index: 7]:\" + nl +\n-                \"... \\\\u0005, \\\\u0006, \\\\u0007, \\\\u0008, \\\\u0009, \\\\n, \\\\u000B, \\\\u000C, \\\\r, \\\\u000E, ...\" + nl +\n-                \"... \\\\u0005, \\\\u0006,      }, \\\\u0008, \\\\u0009, \\\\n, \\\\u000B, \\\\u000C, \\\\r, \\\\u000E, ...\" + nl +\n-                \"                   ^^^^^^^\";\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new char[] {0, 1, 2, 3, 4, 5, 6,   7, 8, 9, 10, 11, 12, 13, 14, 15, 16},\n+                new char[] {0, 1, 2, 3, 4, 5, 6, 125, 8, 9, 10, 11, 12, 13, 14, 15, 16})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                7,\n+                \"... \\\\u0005, \\\\u0006, \\\\u0007, \\\\u0008, \\\\u0009, \\\\n, \\\\u000B, \\\\u000C, \\\\r, \\\\u000E, ...\",\n+                \"... \\\\u0005, \\\\u0006,      }, \\\\u0008, \\\\u0009, \\\\n, \\\\u000B, \\\\u000C, \\\\r, \\\\u000E, ...\",\n+                \"                   ^^^^^^^\")\n+            .assertTwoWay();\n@@ -259,12 +258,12 @@\n-        String[] first = new String[]  {\"first\", \"second\", \"third\", \"u\\nprintable\"};\n-        String[] second = new String[] {\"first\", \"second\", \"incorrect\", \"u\\nprintable\"};\n-\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 2]:%n\" +\n-                \"[\\\"first\\\", \\\"second\\\",     \\\"third\\\", \\\"u\\\\nprintable\\\"]%n\" +\n-                \"[\\\"first\\\", \\\"second\\\", \\\"incorrect\\\", \\\"u\\\\nprintable\\\"]%n\" +\n-                \"                   ^^^^^^^^^^^^\");\n-\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new String[]  {\"first\", \"second\", \"third\", \"u\\nprintable\"},\n+                new String[] {\"first\", \"second\", \"incorrect\", \"u\\nprintable\"})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                2,\n+                \"[\\\"first\\\", \\\"second\\\",     \\\"third\\\", \\\"u\\\\nprintable\\\"]\",\n+                \"[\\\"first\\\", \\\"second\\\", \\\"incorrect\\\", \\\"u\\\\nprintable\\\"]\",\n+                \"                   ^^^^^^^^^^^^\")\n+            .assertTwoWay();\n@@ -282,2 +281,56 @@\n-        StrObj[] first = new StrObj[]  {new StrObj(\"1\"), new StrObj(\"Unp\\rintable\"), new StrObj(\"5\")};\n-        StrObj[] second = new StrObj[]  {new StrObj(\"1\"), new StrObj(\"2\"), new StrObj(\"5\")};\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new StrObj[] {new StrObj(\"1\"), new StrObj(\"Unp\\rintable\"), new StrObj(\"5\")},\n+                new StrObj[] {new StrObj(\"1\"), new StrObj(\"2\"),            new StrObj(\"5\")})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                1,\n+                \"[1, Unp\\\\rintable, 5]\",\n+                \"[1,            2, 5]\",\n+                \"   ^^^^^^^^^^^^^\")\n+            .assertTwoWay();\n+    }\n+\n+    @Test\n+    public void testNullElements() {\n+        new AssertBuilder()\n+            .withDefaultParams()\n+            .withArrays(\n+                new String[] {\"Anna\", null,   \"Bill\",    \"Julia\"},\n+                new String[] {\"Anna\", \"null\", \"William\", \"Julia\"})\n+            .thatResultIs(false)\n+            .thatFormattedValuesAre(\n+                1,\n+                \"[\\\"Anna\\\",   null,    \\\"Bill\\\", \\\"Julia\\\"]\",\n+                \"[\\\"Anna\\\", \\\"null\\\", \\\"William\\\", \\\"Julia\\\"]\",\n+                \"        ^^^^^^^\")\n+            .assertTwoWay();\n+    }\n+\n+    @Test (expectedExceptions = IllegalArgumentException.class)\n+    public void testFirstArrayIsNull() {\n+        var diff = ArrayDiff.of(null, new String[] {\"a\", \"b\"});\n+    }\n+\n+    @Test (expectedExceptions = IllegalArgumentException.class)\n+    public void testSecondArrayIsNull() {\n+        var diff = ArrayDiff.of(null, new String[] {\"a\", \"b\"});\n+    }\n+\n+    class AssertBuilder {\n+        private boolean defaultParameters;\n+        private int width;\n+        private int contextBefore;\n+        private Object firstArray;\n+        private Object secondArray;\n+        private boolean expectedResult;\n+        private int expectedIndex;\n+        private String firstFormattedArray;\n+        private String secondFormattedArray;\n+        private String failureMark;\n+\n+        public AssertBuilder withDefaultParams() {\n+            defaultParameters = true;\n+            return this;\n+        }\n@@ -285,6 +338,68 @@\n-        ArrayDiff diff = ArrayDiff.of(first, second);\n-        String expected = String.format(\n-                \"Arrays differ starting from [index: 1]:%n\" +\n-                \"[1, Unp\\\\rintable, 5]%n\" +\n-                \"[1,            2, 5]%n\" +\n-                \"   ^^^^^^^^^^^^^\");\n+        public AssertBuilder withParams(int width, int contextBefore) {\n+            defaultParameters = false;\n+            this.width = width;\n+            this.contextBefore = contextBefore;\n+            return this;\n+        }\n+\n+        public AssertBuilder withArrays(Object first, Object second) {\n+            firstArray = first;\n+            secondArray = second;\n+            return this;\n+        }\n+\n+        public AssertBuilder thatResultIs(boolean result) {\n+            expectedResult = result;\n+            return this;\n+        }\n+\n+        public AssertBuilder thatFormattedValuesAre(\n+                int idx, String first, String second, String mark) {\n+            expectedIndex = idx;\n+            firstFormattedArray = first;\n+            secondFormattedArray = second;\n+            failureMark = mark;\n+            return this;\n+        }\n+\n+        public void assertTwoWay() {\n+            ArrayDiff diff;\n+\n+            \/\/ Direct\n+            if (defaultParameters) {\n+                diff = ArrayDiff.of(firstArray, secondArray);\n+            } else {\n+                diff = ArrayDiff.of(firstArray, secondArray, width, contextBefore);\n+            }\n+\n+            if (expectedResult == true) {\n+                assertTrue(diff.areEqual());\n+            } else {\n+                String expected = String.format(\n+                    \"Arrays differ starting from [index: %d]:%n\" +\n+                    \"%s%n\" + \"%s%n\" + \"%s\",\n+                    expectedIndex, firstFormattedArray, secondFormattedArray, failureMark);\n+\n+                assertFalse(diff.areEqual());\n+                assertEquals(diff.format(), expected);\n+            }\n+\n+            \/\/ Reversed\n+            if (defaultParameters) {\n+                diff = ArrayDiff.of(secondArray, firstArray);\n+            } else {\n+                diff = ArrayDiff.of(secondArray, firstArray, width, contextBefore);\n+            }\n+\n+            if (expectedResult == true) {\n+                assertTrue(diff.areEqual());\n+            } else {\n+                String expected = String.format(\n+                    \"Arrays differ starting from [index: %d]:%n\" +\n+                    \"%s%n\" + \"%s%n\" + \"%s\",\n+                    expectedIndex, secondFormattedArray, firstFormattedArray, failureMark);\n+\n+                assertFalse(diff.areEqual());\n+                assertEquals(diff.format(), expected);\n+            }\n+        }\n@@ -292,2 +407,0 @@\n-        assertFalse(diff.areEqual());\n-        assertEquals(diff.format(), expected);\n","filename":"test\/lib-test\/jdk\/test\/lib\/format\/ArrayDiffTest.java","additions":292,"deletions":179,"binary":false,"changes":471,"status":"modified"},{"patch":"@@ -307,5 +307,16 @@\n-        int result = 0;\n-        while ((source.size() > result) &&\n-                (another.source.size() > result) &&\n-                (source.get(result).equals(another.source.get(result)))) {\n-            result += 1;\n+        for (int result = 0; (source.size() > result) && (another.source.size() > result); result++) {\n+            Object first = source.get(result);\n+            Object second = another.source.get(result);\n+\n+            if (first == null || second == null) {\n+                if (first == null && second == null) {\n+                    continue;   \/\/ Both elements are null (i.e. equal)\n+                } else {\n+                    return result;  \/\/ Only one element is null, here's the failure index\n+                }\n+            }\n+\n+            if (!first.equals(second)) {\n+                return result;\n+            }\n+\n@@ -313,1 +324,2 @@\n-        return result;\n+\n+        return 0;\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayCodec.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -111,0 +111,8 @@\n+        if (first == null) {\n+            throw new IllegalArgumentException(\"First array argument for ArrayDiff is null\");\n+        }\n+\n+        if (second == null) {\n+            throw new IllegalArgumentException(\"Second array argument for ArrayDiff is null\");\n+        }\n+\n@@ -180,1 +188,2 @@\n-                    failureMark.append(failureMarkForWidth(first.getElementLength()-1));\n+                    int markLength = Math.max(first.getElementLength(), second.getElementLength()) - 1;\n+                    failureMark.append(failureMarkForWidth(markLength));\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayDiff.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}