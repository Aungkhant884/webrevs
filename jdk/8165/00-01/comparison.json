{"files":[{"patch":"@@ -53,1 +53,1 @@\n-public abstract sealed class Builder permits ForwardBuilder {\n+abstract class Builder {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Builder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public final class Vertex {\n+final class Vertex {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Vertex.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-public abstract sealed class RSAKeyPairGenerator extends KeyPairGeneratorSpi {\n+abstract class RSAKeyPairGenerator extends KeyPairGeneratorSpi {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-public abstract sealed class RSASignature extends SignatureSpi {\n+abstract class RSASignature extends SignatureSpi {\n@@ -191,1 +191,1 @@\n-            byte[] encoded = encodeSignature(digestOID, digest);\n+            byte[] encoded = RSAUtil.encodeSignature(digestOID, digest);\n@@ -218,1 +218,1 @@\n-            byte[] decodedDigest = decodeSignature(digestOID, unpadded);\n+            byte[] decodedDigest = RSAUtil.decodeSignature(digestOID, unpadded);\n@@ -233,38 +233,0 @@\n-    \/**\n-     * Encode the digest, return the to-be-signed data.\n-     * Also used by the PKCS#11 provider.\n-     *\/\n-    public static byte[] encodeSignature(ObjectIdentifier oid, byte[] digest)\n-            throws IOException {\n-        DerOutputStream out = new DerOutputStream();\n-        new AlgorithmId(oid).encode(out);\n-        out.putOctetString(digest);\n-        DerValue result =\n-            new DerValue(DerValue.tag_Sequence, out.toByteArray());\n-        return result.toByteArray();\n-    }\n-\n-    \/**\n-     * Decode the signature data. Verify that the object identifier matches\n-     * and return the message digest.\n-     *\/\n-    public static byte[] decodeSignature(ObjectIdentifier oid, byte[] sig)\n-            throws IOException {\n-        \/\/ Enforce strict DER checking for signatures\n-        DerInputStream in = new DerInputStream(sig, 0, sig.length, false);\n-        DerValue[] values = in.getSequence(2);\n-        if ((values.length != 2) || (in.available() != 0)) {\n-            throw new IOException(\"SEQUENCE length error\");\n-        }\n-        AlgorithmId algId = AlgorithmId.parse(values[0]);\n-        if (algId.getOID().equals(oid) == false) {\n-            throw new IOException(\"ObjectIdentifier mismatch: \"\n-                + algId.getOID());\n-        }\n-        if (algId.getEncodedParams() != null) {\n-            throw new IOException(\"Unexpected AlgorithmId parameters\");\n-        }\n-        byte[] digest = values[1].getOctetString();\n-        return digest;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSASignature.java","additions":3,"deletions":41,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -30,0 +31,3 @@\n+import sun.security.util.DerInputStream;\n+import sun.security.util.DerOutputStream;\n+import sun.security.util.DerValue;\n@@ -164,0 +168,38 @@\n+\n+    \/**\n+     * Encode the digest, return the to-be-signed data.\n+     * Also used by the PKCS#11 provider.\n+     *\/\n+    public static byte[] encodeSignature(ObjectIdentifier oid, byte[] digest)\n+            throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        new AlgorithmId(oid).encode(out);\n+        out.putOctetString(digest);\n+        DerValue result =\n+            new DerValue(DerValue.tag_Sequence, out.toByteArray());\n+        return result.toByteArray();\n+    }\n+\n+    \/**\n+     * Decode the signature data. Verify that the object identifier matches\n+     * and return the message digest.\n+     *\/\n+    public static byte[] decodeSignature(ObjectIdentifier oid, byte[] sig)\n+            throws IOException {\n+        \/\/ Enforce strict DER checking for signatures\n+        DerInputStream in = new DerInputStream(sig, 0, sig.length, false);\n+        DerValue[] values = in.getSequence(2);\n+        if ((values.length != 2) || (in.available() != 0)) {\n+            throw new IOException(\"SEQUENCE length error\");\n+        }\n+        AlgorithmId algId = AlgorithmId.parse(values[0]);\n+        if (algId.getOID().equals(oid) == false) {\n+            throw new IOException(\"ObjectIdentifier mismatch: \"\n+                + algId.getOID());\n+        }\n+        if (algId.getEncodedParams() != null) {\n+            throw new IOException(\"Unexpected AlgorithmId parameters\");\n+        }\n+        byte[] digest = values[1].getOctetString();\n+        return digest;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAUtil.java","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public final class Krb5ProxyCredential\n+final class Krb5ProxyCredential\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5ProxyCredential.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public final class KrbTgsRep extends KrbKdcRep {\n+final class KrbTgsRep extends KrbKdcRep {\n@@ -124,1 +124,1 @@\n-    public Credentials getCreds() {\n+    Credentials getCreds() {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbTgsRep.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import sun.security.rsa.RSASignature;\n+import sun.security.rsa.RSAUtil;\n@@ -769,1 +769,1 @@\n-            return RSASignature.encodeSignature(digestOID, digest);\n+            return RSAUtil.encodeSignature(digestOID, digest);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}