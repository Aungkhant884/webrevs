{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Arrays;\n@@ -48,1 +47,1 @@\n- * This  class is used to create objects that have number and types of\n+ * This  class is used to create anonymous objects that have number and types of\n@@ -51,0 +50,4 @@\n+ * @implNote The strategy for storing components is deliberately left ambiguous\n+ * so that future improvements will not be hampered by issues of backward\n+ * compatability.\n+ *\n@@ -53,1 +56,1 @@\n-public final class Carrier {\n+final class Carrier {\n@@ -57,1 +60,1 @@\n-    static final int CLASSFILE_VERSION = VM.classFileVersion();\n+    private static final int CLASSFILE_VERSION = VM.classFileVersion();\n@@ -111,1 +114,1 @@\n-     * Object signature descriptor.\n+     * long signature descriptor.\n@@ -113,2 +116,2 @@\n-    private static final String OBJECT_DESCRIPTOR =\n-            Type.getDescriptor(Object.class);\n+    private static final String LONG_DESCRIPTOR =\n+            Type.getDescriptor(long.class);\n@@ -123,1 +126,1 @@\n-     * long signature descriptor.\n+     * Object signature descriptor.\n@@ -125,2 +128,2 @@\n-    private static final String LONG_DESCRIPTOR =\n-            Type.getDescriptor(long.class);\n+    private static final String OBJECT_DESCRIPTOR =\n+            Type.getDescriptor(Object.class);\n@@ -129,2 +132,7 @@\n-     * Factory for array based carrier. Array wrapped in object to provide\n-     * immutability.\n+     * Factory for carriers that are backed by an Object[]. This strategy is used when\n+     * the number of components exceeds {@link Carrier#MAX_OBJECT_COMPONENTS}. The\n+     * object returned by the carrier constructor is the backing Object[].\n+     * <p>\n+     * Each element of the Object[] corresponds directly, via index, to each component.\n+     * If the component is a primitive value then the constructor boxes the value before\n+     * inserting into the array, and the carrier component getter unboxes.\n@@ -189,1 +197,14 @@\n-     * Factory for object based carrier.\n+     * Factory for object based carrier. This strategy is used when the number of\n+     * components is less than equal {@link Carrier#MAX_OBJECT_COMPONENTS}. The factory\n+     * constructs an anonymous class that provides a shape that  matches the\n+     * number of longs, ints and objects required by the {@link CarrierShape}. The\n+     * factory caches and reuses anonymous classes when looking for a match.\n+     * <p>\n+     * The anonymous class that is constructed contains the number of long fields then\n+     * int fields then object fields required by the {@link CarrierShape}. The order\n+     * of fields is reordered by the component getter {@link MethodHandles}. So a\n+     * carrier requiring an int and then object will use the same anonymous class as\n+     * a carrier requiring an object then int.\n+     * <p>\n+     * The carrier constructor recasts\/translates values that are not long, int or\n+     * object. The component getters reverse the effect of the recasts\/translates.\n@@ -208,1 +229,1 @@\n-         * Generate the name of an object component.\n+         * Generate the name of a long component.\n@@ -212,1 +233,1 @@\n-         * @return name of object component\n+         * @return name of long component\n@@ -214,2 +235,2 @@\n-        private static String objectFieldName(int index) {\n-            return \"o\" + index;\n+        private static String longFieldName(int index) {\n+            return \"l\" + index;\n@@ -230,1 +251,1 @@\n-         * Generate the name of a long component.\n+         * Generate the name of an object component.\n@@ -234,1 +255,1 @@\n-         * @return name of long component\n+         * @return name of object component\n@@ -236,2 +257,2 @@\n-        private static String longFieldName(int index) {\n-            return \"l\" + index;\n+        private static String objectFieldName(int index) {\n+            return \"o\" + index;\n@@ -250,1 +271,1 @@\n-                    objectFieldName(carrierShape.objectCount()) +\n+                    longFieldName(carrierShape.longCount()) +\n@@ -252,1 +273,1 @@\n-                    longFieldName(carrierShape.longCount());\n+                    objectFieldName(carrierShape.objectCount());\n@@ -277,3 +298,3 @@\n-            for (int i = 0; i < carrierShape.objectCount(); i++) {\n-                FieldVisitor fw = cw.visitField(fieldFlags, objectFieldName(i),\n-                        OBJECT_DESCRIPTOR, null, null);\n+            for (int i = 0; i < carrierShape.longCount(); i++) {\n+                FieldVisitor fw = cw.visitField(fieldFlags, longFieldName(i),\n+                        LONG_DESCRIPTOR, null, null);\n@@ -282,1 +303,1 @@\n-                initDescriptor.append(OBJECT_DESCRIPTOR);\n+                initDescriptor.append(LONG_DESCRIPTOR);\n@@ -293,3 +314,3 @@\n-            for (int i = 0; i < carrierShape.longCount(); i++) {\n-                FieldVisitor fw = cw.visitField(fieldFlags, longFieldName(i),\n-                        LONG_DESCRIPTOR, null, null);\n+            for (int i = 0; i < carrierShape.objectCount(); i++) {\n+                FieldVisitor fw = cw.visitField(fieldFlags, objectFieldName(i),\n+                        OBJECT_DESCRIPTOR, null, null);\n@@ -298,1 +319,1 @@\n-                initDescriptor.append(LONG_DESCRIPTOR);\n+                initDescriptor.append(OBJECT_DESCRIPTOR);\n@@ -311,1 +332,1 @@\n-            for (int i = 0; i < carrierShape.objectCount(); i++) {\n+            for (int i = 0; i < carrierShape.longCount(); i++) {\n@@ -313,1 +334,2 @@\n-                init.visitVarInsn(ALOAD, arg++);\n+                init.visitVarInsn(LLOAD, arg);\n+                arg += 2;\n@@ -315,1 +337,1 @@\n-                        objectFieldName(i), OBJECT_DESCRIPTOR);\n+                        longFieldName(i), LONG_DESCRIPTOR);\n@@ -325,1 +347,1 @@\n-            for (int i = 0; i < carrierShape.longCount(); i++) {\n+            for (int i = 0; i < carrierShape.objectCount(); i++) {\n@@ -327,2 +349,1 @@\n-                init.visitVarInsn(LLOAD, arg);\n-                arg += 2;\n+                init.visitVarInsn(ALOAD, arg++);\n@@ -330,1 +351,1 @@\n-                        longFieldName(i), LONG_DESCRIPTOR);\n+                        objectFieldName(i), OBJECT_DESCRIPTOR);\n@@ -355,2 +376,2 @@\n-            for(int i = 0; i < carrierShape.objectCount(); i++) {\n-                ptypes[arg++] = Object.class;\n+            for(int i = 0; i < carrierShape.longCount(); i++) {\n+                ptypes[arg++] = long.class;\n@@ -363,2 +384,2 @@\n-            for(int i = 0; i < carrierShape.longCount(); i++) {\n-                ptypes[arg++] = long.class;\n+            for(int i = 0; i < carrierShape.objectCount(); i++) {\n+                ptypes[arg++] = Object.class;\n@@ -411,1 +432,1 @@\n-            for(int i = 0; i < carrierShape.objectCount(); i++) {\n+            for(int i = 0; i < carrierShape.longCount(); i++) {\n@@ -413,1 +434,1 @@\n-                        CarrierObjectFactory.objectFieldName(i), Object.class);\n+                        CarrierObjectFactory.longFieldName(i), long.class);\n@@ -421,1 +442,1 @@\n-            for(int i = 0; i < carrierShape.longCount(); i++) {\n+            for(int i = 0; i < carrierShape.objectCount(); i++) {\n@@ -423,1 +444,1 @@\n-                        CarrierObjectFactory.longFieldName(i), long.class);\n+                        CarrierObjectFactory.objectFieldName(i), Object.class);\n@@ -656,1 +677,1 @@\n-     * Find or create carrier class for a carrioer shape.\n+     * Find or create carrier class for a carrier shape.\n@@ -670,1 +691,1 @@\n-    private record CarrierCounts(int objectCount, int intCount, int longCount) {\n+    private record CarrierCounts(int longCount, int intCount, int objectCount) {\n@@ -679,1 +700,1 @@\n-             return count(ptypes, ptypes.length);\n+            return count(ptypes, ptypes.length);\n@@ -692,2 +713,0 @@\n-            int objectCount = 0;\n-            int intCount = 0;\n@@ -695,0 +714,2 @@\n+            int intCount = 0;\n+            int objectCount = 0;\n@@ -708,1 +729,1 @@\n-            return new CarrierCounts(objectCount, intCount, longCount);\n+            return new CarrierCounts(longCount, intCount, objectCount);\n@@ -717,1 +738,1 @@\n-            return objectCount + intCount + longCount * 2;\n+            return longCount * 2 + intCount + objectCount;\n@@ -758,1 +779,1 @@\n-         * Return the number of object fields needed.\n+         * Return the number of long fields needed.\n@@ -760,1 +781,1 @@\n-         * @return number of object fields needed\n+         * @return number of long fields needed\n@@ -762,2 +783,2 @@\n-        private int objectCount() {\n-            return counts.objectCount();\n+        private int longCount() {\n+            return counts.longCount();\n@@ -776,1 +797,1 @@\n-         * Return the number of long fields needed.\n+         * Return the number of object fields needed.\n@@ -778,1 +799,1 @@\n-         * @return number of long fields needed\n+         * @return number of object fields needed\n@@ -780,2 +801,2 @@\n-        private int longCount() {\n-            return counts.longCount();\n+        private int objectCount() {\n+            return counts.objectCount();\n@@ -812,1 +833,1 @@\n-         * Returns index of first object component.\n+         * Returns index of first long component.\n@@ -814,1 +835,1 @@\n-         * @return index of first object component\n+         * @return index of first long component\n@@ -816,1 +837,1 @@\n-        private int objectOffset() {\n+        private int longOffset() {\n@@ -826,1 +847,1 @@\n-            return objectCount();\n+            return longCount();\n@@ -830,1 +851,1 @@\n-         * Returns index of first long component.\n+         * Returns index of first object component.\n@@ -832,1 +853,1 @@\n-         * @return index of first long component\n+         * @return index of first object component\n@@ -834,2 +855,2 @@\n-        private int longOffset() {\n-            return objectCount() + intCount();\n+        private int objectOffset() {\n+            return longCount() + intCount();\n@@ -837,0 +858,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/Carrier.java","additions":91,"deletions":69,"binary":false,"changes":160,"status":"modified"}]}