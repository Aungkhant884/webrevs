{"files":[{"patch":"@@ -48,2 +48,5 @@\n- * This  class is used to create anonymous objects that have number and types of\n- * components determined at runtime.\n+ * A <em>carrier<\/em> is an opaque object that can be used to store component values\n+ * while avoiding primitive boxing associated with collection objects. Component values\n+ * can be primitive or Object. Clients can create new carrier instances by describing a\n+ * carrier <em>shape<\/em>, that is, a MethodType whose parameter types describe the\n+ * types of the carrier component values.\n@@ -57,0 +60,1 @@\n+\n@@ -344,1 +348,1 @@\n-             * Carrier for longs and integers.\n+             * Carrier for primitive values.\n@@ -346,1 +350,1 @@\n-            private final int[] integers;\n+            private final long[] primitives;\n@@ -356,2 +360,2 @@\n-             * @param intCount     slot count required for longs and integers\n-             * @param objectCount  slot count required for objects\n+             * @param primitiveCount  slot count required for primitives\n+             * @param objectCount     slot count required for objects\n@@ -359,2 +363,2 @@\n-            CarrierArray(int intCount, int objectCount) {\n-                this.integers = new int[intCount];\n+            CarrierArray(int primitiveCount, int objectCount) {\n+                this.primitives = new long[primitiveCount];\n@@ -365,1 +369,1 @@\n-             * Check index and compute offset for unsafe long access.\n+             * Check index and compute offset for unsafe access.\n@@ -367,1 +371,1 @@\n-             * @param i  index in int[]\n+             * @param i  index in primitive[]\n@@ -369,1 +373,1 @@\n-             * @return offset for unsafe long access\n+             * @return offset for unsafe access\n@@ -371,3 +375,3 @@\n-            private long longOffset(int i) {\n-                if (i < 0 || integers.length <= i) {\n-                    throw new RuntimeException(\"long index out of range: \" + i);\n+            private long offset(int i) {\n+                if (i < 0 || primitives.length <= i) {\n+                    throw new RuntimeException(\"primitive index out of range: \" + i);\n@@ -376,1 +380,1 @@\n-                return Unsafe.ARRAY_INT_BASE_OFFSET +\n+                return Unsafe.ARRAY_LONG_BASE_OFFSET +\n@@ -381,1 +385,1 @@\n-             * Get a long value from the int[].\n+             * Return long value at index.\n@@ -385,1 +389,1 @@\n-             * @return long value at that index.\n+             * @return long value at index\n@@ -388,1 +392,1 @@\n-                return UNSAFE.getLong(integers, longOffset(i));\n+                return primitives[i];\n@@ -392,1 +396,1 @@\n-             * Put a long value into the int[].\n+             * Put a long value into the primitive[].\n@@ -400,1 +404,1 @@\n-                UNSAFE.putLong(integers, longOffset(i), value);\n+                primitives[i] = value;\n@@ -406,2 +410,0 @@\n-             * Get a int value from the int[].\n-             *\n@@ -410,1 +412,1 @@\n-             * @return int value at that index.\n+             * {}@return int value at index}\n@@ -413,1 +415,1 @@\n-                return integers[i];\n+                return UNSAFE.getInt(primitives, offset(i));\n@@ -425,1 +427,1 @@\n-                integers[i] = value;\n+                UNSAFE.putInt(primitives, offset(i), value);\n@@ -431,1 +433,1 @@\n-             * Get an object value from the objects[].\n+             * Return object value at index.\n@@ -435,1 +437,1 @@\n-             * @return object value at that index.\n+             * @return object value at index\n@@ -467,1 +469,1 @@\n-            int intSlots = longCount * LONG_SLOTS + intCount;\n+            int primitiveSlots = longCount * LONG_SLOTS + intCount;\n@@ -470,1 +472,1 @@\n-                    0, intSlots, objectCount);\n+                    0, primitiveSlots, objectCount);\n@@ -472,0 +474,1 @@\n+            \/\/ long array index\n@@ -474,2 +477,1 @@\n-                MethodHandle put = MethodHandles.insertArguments(PUT_LONG, 1, index);\n-                index += LONG_SLOTS;\n+                MethodHandle put = MethodHandles.insertArguments(PUT_LONG, 1, index++);\n@@ -479,0 +481,2 @@\n+            \/\/ int array index (double number of longs)\n+            index *= LONG_SLOTS;\n@@ -506,1 +510,4 @@\n-            int index = 0, j = 0;\n+            \/\/ long array index\n+            int index = 0;\n+            \/\/ component index\n+            int comIndex = 0;\n@@ -508,2 +515,1 @@\n-                components[j++] = MethodHandles.insertArguments(GET_LONG, 1, index);\n-                index += LONG_SLOTS;\n+                components[comIndex++] = MethodHandles.insertArguments(GET_LONG, 1, index++);\n@@ -512,0 +518,2 @@\n+            \/\/ int array index (double number of longs)\n+            index *= LONG_SLOTS;\n@@ -513,1 +521,1 @@\n-                components[j++] = MethodHandles.insertArguments(GET_INTEGER, 1, index++);\n+                components[comIndex++] = MethodHandles.insertArguments(GET_INTEGER, 1, index++);\n@@ -517,1 +525,1 @@\n-                components[j++] = MethodHandles.insertArguments(GET_OBJECT, 1, i);\n+                components[comIndex++] = MethodHandles.insertArguments(GET_OBJECT, 1, i);\n@@ -719,1 +727,3 @@\n-         * Returns the constructor method type.\n+         * Build up a {@link MethodType} based in a carrier shape.\n+         *\n+         * @param carrierShape  shape of carrier\n@@ -721,1 +731,1 @@\n-         * @return the constructor method type.\n+         * @return the constructor method type\n@@ -971,3 +981,1 @@\n-         * Returns total number of components.\n-         *\n-         * @return total number of components\n+         * {@return total number of components}\n@@ -980,3 +988,1 @@\n-         * Returns total number of slots.\n-         *\n-         * @return total number of slots\n+         * {@return total number of slots}\n@@ -1017,3 +1023,1 @@\n-         * Return supplied methodType.\n-         *\n-         * @return supplied methodType\n+         * {@return supplied methodType}\n@@ -1026,3 +1030,1 @@\n-         * Return the number of long fields needed.\n-         *\n-         * @return number of long fields needed\n+         * {@return number of long fields needed}\n@@ -1035,3 +1037,1 @@\n-         * Return the number of int fields needed.\n-         *\n-         * @return number of int fields needed\n+         * {@return number of int fields needed}\n@@ -1044,3 +1044,1 @@\n-         * Return the number of object fields needed.\n-         *\n-         * @return number of object fields needed\n+         * {@return number of object fields needed}\n@@ -1053,3 +1051,1 @@\n-         * Return parameter types.\n-         *\n-         * @return array of parameter types\n+         * {@return array of parameter types}\n@@ -1069,3 +1065,1 @@\n-         * Total number of slots used in a {@link CarrierClass} instance.\n-         *\n-         * @return number of slots used\n+         * {@return number of slots used}\n@@ -1078,3 +1072,1 @@\n-         * Returns index of first long component.\n-         *\n-         * @return index of first long component\n+         * {@return index of first long component}\n@@ -1087,3 +1079,1 @@\n-         * Returns index of first int component.\n-         *\n-         * @return index of first int component\n+         * {@return index of first int component}\n@@ -1096,3 +1086,1 @@\n-         * Returns index of first object component.\n-         *\n-         * @return index of first object component\n+         * {@return index of first object component}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/Carrier.java","additions":59,"deletions":71,"binary":false,"changes":130,"status":"modified"}]}