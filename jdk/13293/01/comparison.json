{"files":[{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8305427\n+ * @summary Verify that focus changes when requestFocus is used to traverse randomly.\n+ * @run main RequestFocusOwnerTest\n+ *\/\n+public class RequestFocusOwnerTest {\n+\n+    private static Frame frame;\n+    private volatile static Button button;\n+    private volatile static Choice choice;\n+    private volatile static TextField textField;\n+    private volatile static Checkbox checkbox;\n+    private volatile static List list;\n+    private volatile static Point buttonAt;\n+    private volatile static Dimension buttonSize;\n+    private volatile static boolean focusGained = false;\n+    private volatile static boolean requestStatus;\n+\n+    private volatile static FocusListener listener = new FocusListener() {\n+\n+        @Override\n+        public void focusLost(FocusEvent e) {\n+            System.out.println(e.getSource() + \": lost focus.\");\n+        }\n+\n+        @Override\n+        public void focusGained(FocusEvent e) {\n+            System.out.println(e.getSource() + \": gained focus.\");\n+            focusGained = true;\n+        }\n+    };\n+\n+    private static void initializeGUI() {\n+        frame = new Frame(\"Test Frame\");\n+        frame.setLayout(new FlowLayout());\n+        button = new Button(\"Button\");\n+        button.addFocusListener(listener);\n+        frame.add(button);\n+        textField = new TextField(15);\n+        textField.addFocusListener(listener);\n+        frame.add(textField);\n+        choice = new Choice();\n+        choice.addItem(\"One\");\n+        choice.addItem(\"Two\");\n+        choice.addFocusListener(listener);\n+        choice.setEnabled(false);\n+        frame.add(choice);\n+        checkbox = new Checkbox(\"Checkbox\");\n+        checkbox.addFocusListener(listener);\n+        frame.add(checkbox);\n+        list = new List();\n+        list.add(\"One\");\n+        list.add(\"Two\");\n+        list.add(\"Three\");\n+        list.add(\"Four\");\n+        list.add(\"Five\");\n+        list.addFocusListener(listener);\n+        list.setFocusable(false);\n+        frame.add(list);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args)\n+        throws InvocationTargetException, InterruptedException, AWTException {\n+        try {\n+\n+            EventQueue.invokeAndWait(RequestFocusOwnerTest::initializeGUI);\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(500);\n+            robot.setAutoWaitForIdle(true);\n+            EventQueue.invokeAndWait(() -> {\n+                buttonAt = button.getLocationOnScreen();\n+                buttonSize = button.getSize();\n+            });\n+\n+            if (!button.hasFocus()) {\n+                focusGained = false;\n+\n+                robot.mouseMove(buttonAt.x + buttonSize.width \/ 2,\n+                    buttonAt.y + buttonSize.height \/ 2);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                robot.waitForIdle();\n+\n+                if (!focusGained) {\n+                    throw new RuntimeException(\n+                        \"FAIL: Button did not gain focus when clicked. Test cannot proceed!\");\n+                }\n+            }\n+\n+            focusGained = false;\n+            EventQueue.invokeAndWait(() -> {\n+                requestStatus = checkbox.requestFocusInWindow();\n+            });\n+\n+            robot.waitForIdle();\n+\n+            if (!requestStatus) {\n+                throw new RuntimeException(\n+                    \"FAIL: Checkbox.requestFocusInWindow returned false\");\n+            }\n+\n+            if (!focusGained) {\n+                throw new RuntimeException(\n+                    \"FAIL: Checkbox.requestFocusInWindow did not transfer the focus to Checkbox\");\n+            }\n+\n+            if (!checkbox.hasFocus()) {\n+                throw new RuntimeException(\n+                    \"FAIL: CheckBox.hasFocus for Checkbox returns false after calling\"\n+                        + \" Checkbox.requestFocusInWindow\");\n+            }\n+            focusGained = false;\n+            EventQueue.invokeAndWait(() -> {\n+                requestStatus = choice.requestFocusInWindow();\n+            });\n+\n+            robot.waitForIdle();\n+\n+            if (!requestStatus) {\n+                throw new RuntimeException(\n+                    \"FAIL: Choice.requestFocusInWindow for a disabled Choice returned false\");\n+            }\n+\n+            if (!focusGained) {\n+                throw new RuntimeException(\n+                    \"FAIL: Choice.requestFocusInWindow did not transfer the focus to disabled Choice\");\n+            }\n+\n+            if (!choice.hasFocus()) {\n+                throw new RuntimeException(\n+                    \"FAIL: Choice.hasFocus for disabled Choice returns false after\"\n+                        + \" calling Choice.requestFocusInWindow\");\n+            }\n+            focusGained = false;\n+            EventQueue.invokeAndWait(() -> {\n+                textField.setVisible(false);\n+                requestStatus = textField.requestFocusInWindow();\n+            });\n+\n+            if (requestStatus) {\n+                throw new RuntimeException(\n+                    \"FAIL: TextField.requestFocusInWindow returned true for hidden TextField\");\n+            }\n+\n+            if (focusGained) {\n+                throw new RuntimeException(\n+                    \"FAIL: Wrong component gained focus: textField.requestFocusInWindow()\");\n+            }\n+            if (textField.hasFocus()) {\n+                throw new RuntimeException(\n+                    \"FAIL: TextField.hasFocus for hidden TextField returns true after calling\"\n+                        + \" TextField.requestFocusInWindow\");\n+            }\n+\n+            focusGained = false;\n+            EventQueue.invokeAndWait(() -> {\n+                requestStatus = list.requestFocusInWindow();\n+            });\n+\n+            robot.waitForIdle();\n+\n+            if (requestStatus) {\n+                throw new RuntimeException(\n+                    \"FAIL: List.requestFocusInWindow returned true for non-focusable List\");\n+            }\n+\n+            if (focusGained) {\n+                throw new RuntimeException(\n+                    \"FAIL: Wrong component gained focus: list.requestFocusInWindow()\");\n+            }\n+            if (list.hasFocus()) {\n+                throw new RuntimeException(\n+                    \"FAIL: List.hasFocus for non-focusable List returns true after calling\"\n+                        + \" List.requestFocusInWindow\");\n+            }\n+\n+            System.out.println(\"Test passed!\");\n+\n+        } finally {\n+            EventQueue.invokeAndWait(RequestFocusOwnerTest::disposeFrame);\n+        }\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/RequestFocusOwnerTest\/RequestFocusOwnerTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"}]}