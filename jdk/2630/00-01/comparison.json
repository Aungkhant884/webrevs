{"files":[{"patch":"@@ -4287,0 +4287,21 @@\n+\n+\/\/ Make a step iterating over the class hierarchy under the root class.\n+\/\/ Skips subclasses if requested.\n+void ClassHierarchyIterator::next() {\n+  assert(_current != NULL, \"required\");\n+  if (_visit_subclasses && _current->subklass() != NULL) {\n+    _current = _current->subklass();\n+    return; \/\/ visit next subclass\n+  }\n+  _visit_subclasses = true; \/\/ reset\n+  while (_current->next_sibling() == NULL && _current != _root) {\n+    _current = _current->superklass(); \/\/ backtrack; no more sibling subclasses left\n+  }\n+  if (_current == _root) {\n+    \/\/ Iteration is over (back at root after backtracking). Invalidate the iterator.\n+    _current = NULL;\n+    return;\n+  }\n+  _current = _current->next_sibling();\n+  return; \/\/ visit next sibling subclass\n+}\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1457,18 +1457,1 @@\n-  void next() {\n-    assert(_current != NULL, \"required\");\n-    if (_visit_subclasses && _current->subklass() != NULL) {\n-      _current = _current->subklass();\n-      return; \/\/ visit next subclass\n-    }\n-    _visit_subclasses = true; \/\/ reset\n-    while (_current->next_sibling() == NULL && _current != _root) {\n-      _current = _current->superklass(); \/\/ backtrack; no more sibling subclasses left\n-    }\n-    if (_current == _root) {\n-      \/\/ Iteration is over (back at root after backtracking). Invalidate the iterator.\n-      _current = NULL;\n-      return;\n-    }\n-    _current = _current->next_sibling();\n-    return; \/\/ visit next sibling subclass\n-  }\n+  void next();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"}]}