{"files":[{"patch":"@@ -160,2 +160,2 @@\n-        byte val1[] = value;\n-        byte val2[] = another.value;\n+        byte[] val1 = value;\n+        byte[] val2 = another.value;\n@@ -737,1 +737,1 @@\n-    public AbstractStringBuilder append(char str[], int offset, int len) {\n+    public AbstractStringBuilder append(char[] str, int offset, int len) {\n@@ -1241,3 +1241,0 @@\n-        if (s instanceof String) {\n-            return this.insert(dstOffset, (String)s);\n-        }\n@@ -1303,1 +1300,5 @@\n-        putCharsAt(dstOffset, s, start, end);\n+        if (s instanceof String) {\n+            putStringAt(dstOffset, (String) s, start, end);\n+        } else {\n+            putCharsAt(dstOffset, s, start, end);\n+        }\n@@ -1561,1 +1562,0 @@\n-        int coder = this.coder;\n@@ -1563,1 +1563,1 @@\n-        if (COMPACT_STRINGS && coder == LATIN1) {\n+        if (isLatin1()) {\n@@ -1651,1 +1651,1 @@\n-    void getBytes(byte dst[], int dstBegin, byte coder) {\n+    void getBytes(byte[] dst, int dstBegin, byte coder) {\n@@ -1716,1 +1716,1 @@\n-    private final void putStringAt(int index, String str) {\n+    private void putStringAt(int index, String str, int off, int end) {\n@@ -1720,1 +1720,5 @@\n-        str.getBytes(value, index, coder);\n+        str.getBytes(value, off, index, coder, end);\n+    }\n+\n+    private void putStringAt(int index, String str) {\n+        putStringAt(index, str, 0, str.length() << str.coder());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3602,1 +3602,17 @@\n-    void getBytes(byte dst[], int dstBegin, byte coder) {\n+    void getBytes(byte[] dst, int dstBegin, byte coder) {\n+        getBytes(dst, 0, dstBegin, coder, value.length);\n+    }\n+\n+    \/**\n+     * Copy character bytes from this string into dst starting at dstBegin.\n+     * This method doesn't perform any range checking.\n+     *\n+     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n+     * coders are different, and dst is big enough (range check)\n+     *\n+     * @param srcPos    the char index, not offset of byte[]\n+     * @param dstBegin  the char index to start from\n+     * @param coder     the coder of dst[]\n+     * @param length    the amount of copied bytes\n+     *\/\n+    void getBytes(byte[] dst, int srcPos, int dstBegin, byte coder, int length) {\n@@ -3604,1 +3620,1 @@\n-            System.arraycopy(value, 0, dst, dstBegin << coder, value.length);\n+            System.arraycopy(value, srcPos, dst, dstBegin << coder, length);\n@@ -3606,1 +3622,1 @@\n-            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n+            StringLatin1.inflate(value, srcPos, dst, dstBegin, length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}