{"files":[{"patch":"@@ -543,0 +543,9 @@\n+\/\/ Message details for OOME objects\n+const char* MSG_JAVA_HEAP         = \"Java heap space\";\n+const char* MSG_C_HEAP            = \"C heap space\";\n+const char* MSG_METASPACE         = \"Metaspace\";\n+const char* MSG_CLASS_METASPACE   = \"Compressed class space\";\n+const char* MSG_ARRAY_SIZE        = \"Requested array size exceeds VM limit\";\n+const char* MSG_GC_OVERHEAD_LIMIT = \"GC overhead limit exceeded\";\n+const char* MSG_REALLOC_OBJECTS   = \"Java heap space: failed reallocation of scalar replaced objects\";\n+const char* MSG_RETRY             = \"Java heap space: failed retryable allocation\";\n@@ -583,0 +592,15 @@\n+bool Universe::is_out_of_memory_error(oop obj, const char* msg) {\n+  assert(msg != NULL, \"sanity check\");\n+  oop msg_oop = java_lang_Throwable::message(obj);\n+  const char * msg_str = java_lang_String::as_utf8_string(msg_oop);\n+  return strcmp(msg, msg_str) == 0;\n+}\n+\n+bool Universe::is_out_of_memory_error_metaspace(oop obj) {\n+  return is_out_of_memory_error(obj, MSG_METASPACE);\n+}\n+\n+bool Universe::is_out_of_memory_error_class_metaspace(oop obj) {\n+  return is_out_of_memory_error(obj, MSG_CLASS_METASPACE);\n+}\n+\n@@ -655,1 +679,1 @@\n-  Handle msg = java_lang_String::create_from_str(\"Java heap space\", CHECK);\n+  Handle msg = java_lang_String::create_from_str(MSG_JAVA_HEAP, CHECK);\n@@ -658,1 +682,1 @@\n-  msg = java_lang_String::create_from_str(\"C heap space\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_C_HEAP, CHECK);\n@@ -661,1 +685,1 @@\n-  msg = java_lang_String::create_from_str(\"Metaspace\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_METASPACE, CHECK);\n@@ -664,1 +688,1 @@\n-  msg = java_lang_String::create_from_str(\"Compressed class space\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_CLASS_METASPACE, CHECK);\n@@ -667,1 +691,1 @@\n-  msg = java_lang_String::create_from_str(\"Requested array size exceeds VM limit\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_ARRAY_SIZE, CHECK);\n@@ -670,1 +694,1 @@\n-  msg = java_lang_String::create_from_str(\"GC overhead limit exceeded\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_GC_OVERHEAD_LIMIT, CHECK);\n@@ -673,1 +697,1 @@\n-  msg = java_lang_String::create_from_str(\"Java heap space: failed reallocation of scalar replaced objects\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_REALLOC_OBJECTS, CHECK);\n@@ -676,1 +700,1 @@\n-  msg = java_lang_String::create_from_str(\"Java heap space: failed retryable allocation\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_RETRY, CHECK);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -165,1 +165,2 @@\n-  static oop        gen_out_of_memory_error(oop default_err);\n+  static oop gen_out_of_memory_error(oop default_err);\n+  static bool is_out_of_memory_error(oop obj, const char* msg);\n@@ -292,0 +293,2 @@\n+  static bool is_out_of_memory_error_metaspace(oop obj);\n+  static bool is_out_of_memory_error_class_metaspace(oop obj);\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -464,3 +464,1 @@\n-  oop msg_oop = java_lang_Throwable::message(exception());\n-  const char * msg_str = java_lang_String::as_utf8_string(msg_oop);\n-  if (strcmp(\"Metaspace\", msg_str) == 0) {\n+  if (Universe::is_out_of_memory_error_metaspace(exception())) {\n@@ -468,1 +466,1 @@\n-  } else if (strcmp(\"Compressed class space\", msg_str) == 0) {\n+  } else if (Universe::is_out_of_memory_error_class_metaspace(exception())) {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}