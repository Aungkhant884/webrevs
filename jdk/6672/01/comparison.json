{"files":[{"patch":"@@ -543,0 +543,9 @@\n+\/\/ Message details for OOME objects\n+const char* MSG_JAVA_HEAP         = \"Java heap space\";\n+const char* MSG_C_HEAP            = \"C heap space\";\n+const char* MSG_METASPACE         = \"Metaspace\";\n+const char* MSG_CLASS_METASPACE   = \"Compressed class space\";\n+const char* MSG_ARRAY_SIZE        = \"Requested array size exceeds VM limit\";\n+const char* MSG_GC_OVERHEAD_LIMIT = \"GC overhead limit exceeded\";\n+const char* MSG_REALLOC_OBJECTS   = \"Java heap space: failed reallocation of scalar replaced objects\";\n+const char* MSG_RETRY             = \"Java heap space: failed retryable allocation\";\n@@ -583,0 +592,15 @@\n+bool Universe::is_out_of_memory_error(oop obj, const char* msg) {\n+  assert(msg != NULL, \"sanity check\");\n+  oop msg_oop = java_lang_Throwable::message(obj);\n+  const char * msg_str = java_lang_String::as_utf8_string(msg_oop);\n+  return strcmp(msg, msg_str) == 0;\n+}\n+\n+bool Universe::is_out_of_memory_error_metaspace(oop obj) {\n+  return is_out_of_memory_error(obj, MSG_METASPACE);\n+}\n+\n+bool Universe::is_out_of_memory_error_class_metaspace(oop obj) {\n+  return is_out_of_memory_error(obj, MSG_CLASS_METASPACE);\n+}\n+\n@@ -655,1 +679,1 @@\n-  Handle msg = java_lang_String::create_from_str(\"Java heap space\", CHECK);\n+  Handle msg = java_lang_String::create_from_str(MSG_JAVA_HEAP, CHECK);\n@@ -658,1 +682,1 @@\n-  msg = java_lang_String::create_from_str(\"C heap space\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_C_HEAP, CHECK);\n@@ -661,1 +685,1 @@\n-  msg = java_lang_String::create_from_str(\"Metaspace\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_METASPACE, CHECK);\n@@ -664,1 +688,1 @@\n-  msg = java_lang_String::create_from_str(\"Compressed class space\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_CLASS_METASPACE, CHECK);\n@@ -667,1 +691,1 @@\n-  msg = java_lang_String::create_from_str(\"Requested array size exceeds VM limit\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_ARRAY_SIZE, CHECK);\n@@ -670,1 +694,1 @@\n-  msg = java_lang_String::create_from_str(\"GC overhead limit exceeded\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_GC_OVERHEAD_LIMIT, CHECK);\n@@ -673,1 +697,1 @@\n-  msg = java_lang_String::create_from_str(\"Java heap space: failed reallocation of scalar replaced objects\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_REALLOC_OBJECTS, CHECK);\n@@ -676,1 +700,1 @@\n-  msg = java_lang_String::create_from_str(\"Java heap space: failed retryable allocation\", CHECK);\n+  msg = java_lang_String::create_from_str(MSG_RETRY, CHECK);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -165,1 +165,2 @@\n-  static oop        gen_out_of_memory_error(oop default_err);\n+  static oop gen_out_of_memory_error(oop default_err);\n+  static bool is_out_of_memory_error(oop obj, const char* msg);\n@@ -292,0 +293,2 @@\n+  static bool is_out_of_memory_error_metaspace(oop obj);\n+  static bool is_out_of_memory_error_class_metaspace(oop obj);\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-  if (exception() == Universe::out_of_memory_error_metaspace()) {\n+  if (Universe::is_out_of_memory_error_metaspace(exception())) {\n@@ -466,1 +466,1 @@\n-  } else if (exception() == Universe::out_of_memory_error_class_metaspace()) {\n+  } else if (Universe::is_out_of_memory_error_class_metaspace(exception())) {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8278125\n+ * @summary Test if OOME has proper stacktrace\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx100m -Xms100m GenOutOfMemoryError\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+public class GenOutOfMemoryError {\n+    private static int OOME_HAS_STACK_CNT = 0;\n+\n+    private void badMethod(int n){\n+        try {\n+            System.out.format(\"bad method was invoked %n\", n);\n+            Integer[] array = new Integer[1000 * 1000 * 100];\n+            array.hashCode();\n+        } catch (Throwable t){\n+            StackTraceElement[] traces  = t.getStackTrace();\n+            if (traces.length != 0) {\n+                OOME_HAS_STACK_CNT++;\n+            }\n+            t.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        GenOutOfMemoryError genOutOfMemoryError = new GenOutOfMemoryError();\n+\n+        for (int i = 0; i < 7; i++) {\n+            genOutOfMemoryError.badMethod(i + 1);\n+        }\n+        Asserts.assertTrue(4\/*PreallocatedOutOfMemoryErrorCount is default to 4*\/ == OOME_HAS_STACK_CNT, \"Some OOMEs do not have stacktraces\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/GenOutOfMemoryError.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}