{"files":[{"patch":"@@ -113,0 +113,5 @@\n+\/\/ Message details for OOME objects, preallocate these objects since they could be\n+\/\/ used when throwing OOME, we should try to avoid further allocation in such case\n+OopHandle Universe::_msg_metaspace;\n+OopHandle Universe::_msg_class_metaspace;\n+\n@@ -543,10 +548,0 @@\n-\/\/ Message details for OOME objects\n-const char* MSG_JAVA_HEAP         = \"Java heap space\";\n-const char* MSG_C_HEAP            = \"C heap space\";\n-const char* MSG_METASPACE         = \"Metaspace\";\n-const char* MSG_CLASS_METASPACE   = \"Compressed class space\";\n-const char* MSG_ARRAY_SIZE        = \"Requested array size exceeds VM limit\";\n-const char* MSG_GC_OVERHEAD_LIMIT = \"GC overhead limit exceeded\";\n-const char* MSG_REALLOC_OBJECTS   = \"Java heap space: failed reallocation of scalar replaced objects\";\n-const char* MSG_RETRY             = \"Java heap space: failed retryable allocation\";\n-\n@@ -599,8 +594,0 @@\n-bool Universe::is_out_of_memory_error_metaspace(oop obj) {\n-  return is_out_of_memory_error(obj, MSG_METASPACE);\n-}\n-\n-bool Universe::is_out_of_memory_error_class_metaspace(oop obj) {\n-  return is_out_of_memory_error(obj, MSG_CLASS_METASPACE);\n-}\n-\n@@ -667,0 +654,8 @@\n+bool Universe::is_out_of_memory_error_metaspace(oop ex_obj) {\n+  return java_lang_Throwable::message(ex_obj) == _msg_metaspace.resolve();\n+}\n+\n+bool Universe::is_out_of_memory_error_class_metaspace(oop ex_obj) {\n+  return java_lang_Throwable::message(ex_obj) == _msg_class_metaspace.resolve();\n+}\n+\n@@ -679,1 +674,1 @@\n-  Handle msg = java_lang_String::create_from_str(MSG_JAVA_HEAP, CHECK);\n+  Handle msg = java_lang_String::create_from_str(\"Java heap space\", CHECK);\n@@ -681,2 +676,1 @@\n-\n-  msg = java_lang_String::create_from_str(MSG_C_HEAP, CHECK);\n+  msg = java_lang_String::create_from_str(\"C heap space\", CHECK);\n@@ -685,1 +679,2 @@\n-  msg = java_lang_String::create_from_str(MSG_METASPACE, CHECK);\n+  msg = java_lang_String::create_from_str(\"Metaspace\", CHECK);\n+  _msg_metaspace = OopHandle(vm_global(), msg());\n@@ -688,1 +683,2 @@\n-  msg = java_lang_String::create_from_str(MSG_CLASS_METASPACE, CHECK);\n+  msg = java_lang_String::create_from_str(\"Compressed class space\", CHECK);\n+  _msg_class_metaspace = OopHandle(vm_global(), msg());\n@@ -691,1 +687,1 @@\n-  msg = java_lang_String::create_from_str(MSG_ARRAY_SIZE, CHECK);\n+  msg = java_lang_String::create_from_str(\"Requested array size exceeds VM limit\", CHECK);\n@@ -693,2 +689,1 @@\n-\n-  msg = java_lang_String::create_from_str(MSG_GC_OVERHEAD_LIMIT, CHECK);\n+  msg = java_lang_String::create_from_str(\"GC overhead limit exceeded\", CHECK);\n@@ -696,2 +691,1 @@\n-\n-  msg = java_lang_String::create_from_str(MSG_REALLOC_OBJECTS, CHECK);\n+  msg = java_lang_String::create_from_str(\"Java heap space: failed reallocation of scalar replaced objects\", CHECK);\n@@ -699,2 +693,1 @@\n-\n-  msg = java_lang_String::create_from_str(MSG_RETRY, CHECK);\n+  msg = java_lang_String::create_from_str(\"Java heap space: failed retryable allocation\", CHECK);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -135,0 +135,4 @@\n+  \/\/ preallocated message detail strings for error objects\n+  static OopHandle _msg_metaspace;\n+  static OopHandle _msg_class_metaspace;\n+\n@@ -293,2 +297,0 @@\n-  static bool is_out_of_memory_error_metaspace(oop obj);\n-  static bool is_out_of_memory_error_class_metaspace(oop obj);\n@@ -300,0 +302,4 @@\n+  \/\/ If it's a certain type of OOME\n+  static bool is_out_of_memory_error_metaspace(oop ex_obj);\n+  static bool is_out_of_memory_error_class_metaspace(oop ex_obj);\n+\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -466,1 +466,1 @@\n-  } else if (Universe::is_out_of_memory_error_class_metaspace(exception())) {\n+   } else if (Universe::is_out_of_memory_error_metaspace(exception())) {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}