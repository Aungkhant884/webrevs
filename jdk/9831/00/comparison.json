{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.regex.MatchResult;\n@@ -35,0 +36,1 @@\n+import java.util.stream.Collectors;\n@@ -56,1 +58,1 @@\n-            Comparison<Long> comparison = parseComparison(irRule, node, countConstraint);\n+            Comparison<Integer> comparison = parseComparison(irRule, node, countConstraint);\n@@ -66,1 +68,1 @@\n-    private static Comparison<Long> parseComparison(IRRule irRule, String node, String constraint) {\n+    private static Comparison<Integer> parseComparison(IRRule irRule, String node, String constraint) {\n@@ -68,1 +70,1 @@\n-        return ComparisonConstraintParser.parse(constraint, Long::parseLong, postfixErrorMsg);\n+        return ComparisonConstraintParser.parse(constraint, Integer::parseInt, postfixErrorMsg);\n@@ -85,4 +87,4 @@\n-        long foundCount = getFoundCount(compilation, constraint);\n-        Comparison<Long> comparison = constraint.comparison;\n-        if (!comparison.compare(foundCount)) {\n-            result.addFailure(createRegexFailure(compilation, constraint, foundCount));\n+        List<String> countsMatches = getCountsMatches(compilation, constraint);\n+        Comparison<Integer> comparison = constraint.comparison;\n+        if (!comparison.compare(countsMatches.size())) {\n+            result.addFailure(createRegexFailure(countsMatches, constraint));\n@@ -92,1 +94,1 @@\n-    private long getFoundCount(String compilation, Constraint constraint) {\n+    private List<String> getCountsMatches(String compilation, Constraint constraint) {\n@@ -95,1 +97,1 @@\n-        return matcher.results().count();\n+        return matcher.results().map(MatchResult::group).collect(Collectors.toList());\n@@ -98,10 +100,3 @@\n-    private CountsRegexFailure createRegexFailure(String compilation, Constraint constraint, long foundCount) {\n-        Pattern p = Pattern.compile(constraint.nodeRegex);\n-        Matcher m = p.matcher(compilation);\n-        List<String> matches;\n-        if (m.find()) {\n-            matches = getMatchedNodes(m);\n-        } else {\n-            matches = new ArrayList<>();\n-        }\n-        return new CountsRegexFailure(constraint.nodeRegex, constraint.nodeId, foundCount, constraint.comparison, matches);\n+    private CountsRegexFailure createRegexFailure(List<String> countsMatches, Constraint constraint) {\n+        return new CountsRegexFailure(constraint.nodeRegex, constraint.nodeId, countsMatches.size(), constraint.comparison,\n+                                      countsMatches);\n@@ -112,1 +107,1 @@\n-        final Comparison<Long> comparison;\n+        final Comparison<Integer> comparison;\n@@ -115,1 +110,1 @@\n-        Constraint(String nodeRegex, Comparison<Long> comparison, int nodeId) {\n+        Constraint(String nodeRegex, Comparison<Integer> comparison, int nodeId) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/Counts.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-    public CountsRegexFailure(String nodeRegex, int nodeId, long foundValue, Comparison<Long> comparison, List<String> matches) {\n+    public CountsRegexFailure(String nodeRegex, int nodeId, int foundValue, Comparison<Integer> comparison,\n+                              List<String> matches) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/CountsRegexFailure.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}