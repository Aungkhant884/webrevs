{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -758,2 +758,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -763,2 +762,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n","filename":"make\/data\/characterdata\/CharacterData00.java.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -496,2 +496,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -501,2 +500,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n","filename":"make\/data\/characterdata\/CharacterData01.java.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,2 +215,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -220,2 +219,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n@@ -224,1 +222,0 @@\n-\n","filename":"make\/data\/characterdata\/CharacterData02.java.template","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,2 +215,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -220,2 +219,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n","filename":"make\/data\/characterdata\/CharacterData03.java.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,2 +215,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -220,2 +219,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n","filename":"make\/data\/characterdata\/CharacterData0E.java.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,2 +90,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.LOWERCASE_LETTER\n-            || (getPropertiesEx(ch) & $$maskOtherLowercase) != 0; \/\/ 0xaa, 0xba\n+        return (getPropertiesEx(ch) & $$maskOtherLowercase) != 0;\n@@ -96,1 +95,1 @@\n-        return (getProperties(ch) & $$maskType) == Character.UPPERCASE_LETTER;\n+        return (getPropertiesEx(ch) & $$maskOtherUppercase) != 0;\n","filename":"make\/data\/characterdata\/CharacterDataLatin1.java.template","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-    \/* The character properties are currently encoded into A (32 bits)and B (16 bits)\n+    \/* The character properties are currently encoded into A (32 bits) and B (8 bits)\n@@ -160,1 +160,0 @@\n-    1 bit Other_Math property\n@@ -162,1 +161,0 @@\n-    1 bit Noncharacter codepoint property\n@@ -178,1 +176,0 @@\n-        shiftCaseInfo       = 15,       maskCaseInfo        =      0x38000,\n@@ -189,3 +186,1 @@\n-        shiftBidi           = 27,       maskBidi              = 0x78000000,\n-        shiftMirrored       = 31,       \/\/maskMirrored          = 0x80000000,\n-        shiftPlane          = 16,       maskPlane = 0xFF0000;\n+        shiftBidi           = 27,       maskBidi              = 0x78000000;\n@@ -196,1 +191,1 @@\n-    \/\/ bit masks identify the 16-bit property field described above, in B\n+    \/\/ bit masks identify the 8-bit property field described above, in B\n@@ -199,8 +194,6 @@\n-        maskOtherLowercase  = 0x100000000L,\n-        maskOtherUppercase  = 0x200000000L,\n-        maskOtherAlphabetic = 0x400000000L,\n-        maskOtherMath       = 0x800000000L,\n-        maskIdeographic     = 0x1000000000L,\n-        maskNoncharacterCP  = 0x2000000000L,\n-        maskIDStart         = 0x4000000000L,\n-        maskIDContinue      = 0x8000000000L;\n+        maskOtherLowercase  = 0x0100000000L,\n+        maskOtherUppercase  = 0x0200000000L,\n+        maskOtherAlphabetic = 0x0400000000L,\n+        maskIdeographic     = 0x0800000000L,\n+        maskIDStart         = 0x1000000000L,\n+        maskIDContinue      = 0x2000000000L;\n@@ -316,8 +309,3 @@\n-        long[] result;\n-        if (bLatin1 == true) {\n-            result = new long[256];\n-        } else {\n-            result = new long[1<<16];\n-        }\n-        int k=0;\n-        int codePoint = plane<<16;\n+        long[] result = new long[bLatin1 ? 256 : 1 << 16];\n+        int k = 0;\n+        int codePoint = plane << 16;\n@@ -373,2 +361,0 @@\n-        \/\/addExProp(result, propList, \"Other_Math\", maskOtherMath);\n-        \/\/addExProp(result, propList, \"Noncharacter_CodePoint\", maskNoncharacterCP);\n@@ -393,2 +379,2 @@\n-        for(int x=0;x<exceptions.length;x++) {\n-            if(c == exceptions[x]) {\n+        for (int exception : exceptions) {\n+            if (c == exception) {\n@@ -424,0 +410,9 @@\n+        \/\/ extract and record the uppercase letter \/ lowercase letter property into the\n+        \/\/ maskOtherUppercase\/-Lowercase bit so that Character.isLower|UpperCase\n+        \/\/ can use a one-step lookup (this property includes\n+        if (resultA == Character.UPPERCASE_LETTER) {\n+            resultA |= maskOtherUppercase;\n+        } else if (resultA == Character.LOWERCASE_LETTER) {\n+            resultA |= maskOtherLowercase;\n+        }\n+\n@@ -640,1 +635,1 @@\n-            \/\/ Find out whether there is already a block just like it in the buffer.\n+                \/\/ Find out whether there is already a block just like it in the buffer.\n@@ -652,3 +647,1 @@\n-            for (int k = 0; k < m; k++) {\n-                buffer[ptr+k] = map[i+k];\n-            }\n+            if (m > 0) System.arraycopy(map, i, buffer, ptr, m);\n@@ -661,3 +654,1 @@\n-        for (int j = 0; j < ptr; j++) {\n-            newdata[j] = buffer[j];\n-        }\n+        if (ptr > 0) System.arraycopy(buffer, 0, newdata, 0, ptr);\n@@ -665,2 +656,1 @@\n-        long[][] result = { newmap, newdata };\n-        return result;\n+        return new long[][]{ newmap, newdata };\n@@ -698,1 +688,1 @@\n-        throws FileNotFoundException, IOException {\n+        throws IOException {\n@@ -713,1 +703,1 @@\n-                    char ch = 'x';\n+                    char ch;\n@@ -768,2 +758,1 @@\n-        if (x.length() >= 9 && x.substring(0, 7).equals(\"Lookup(\") &&\n-                x.substring(x.length()-1).equals(\")\") )\n+        if (x.length() >= 9 && x.startsWith(\"Lookup(\") && x.endsWith(\")\") )\n@@ -771,2 +760,1 @@\n-        if (x.length() >= 11 && x.substring(0, 9).equals(\"LookupEx(\") &&\n-                x.substring(x.length()-1).equals(\")\") )\n+        if (x.length() >= 11 && x.startsWith(\"LookupEx(\") && x.endsWith(\")\") )\n@@ -779,1 +767,0 @@\n-        if (x.equals(\"shiftCaseInfo\")) return Long.toString(shiftCaseInfo);\n@@ -814,2 +801,0 @@\n-        if (x.equals(\"valueDigit\")) return \"0x\" + hex8(valueDigit);\n-        if (x.equals(\"valueStrangeNumeric\")) return \"0x\" + hex8(valueStrangeNumeric);\n@@ -946,3 +931,4 @@\n-            result.append(commentStart + \" The following tables and code generated using:\" +\n-                    commentEnd + \"\\n  \");\n-            result.append(commentStart + ' ' + commandLineDescription + commentEnd + \"\\n  \");\n+            result.append(commentStart).append(\" The following tables and code generated using:\")\n+                    .append(commentEnd).append(\"\\n  \")\n+                    .append(commentStart).append(' ')\n+                    .append(commandLineDescription).append(commentEnd).append(\"\\n  \");\n@@ -950,1 +936,1 @@\n-        if (plane == 0 && bLatin1 == false) {\n+        if (plane == 0 && !bLatin1) {\n@@ -969,1 +955,1 @@\n-        genTable(result, \"B\", tables[n - 1], 32, 16, sizes[n - 1], false, 0, true, true, false);\n+        genTable(result, \"B\", tables[n - 1], 32, 8, sizes[n - 1], false, 0, true, true, false);\n@@ -1006,14 +992,0 @@\n-    static void appendEscapedStringFragment(StringBuffer result,\n-                                            char[] line,\n-                                            int length,\n-                                            boolean lastFragment) {\n-        result.append(\"    \\\"\");\n-        for (int k=0; k<length; ++k) {\n-            result.append(\"\\\\u\");\n-            result.append(hex4(line[k]));\n-        }\n-        result.append(\"\\\"\");\n-        result.append(lastFragment ? \";\" : \"+\");\n-        result.append(\"\\n\");\n-    }\n-\n@@ -1022,1 +994,0 @@\n-        \/\/ \"            $$name = new $$type[$$size];\\n\"+\n@@ -1038,1 +1009,0 @@\n-        \/\/ \"            $$name = new $$type[$$size];\\n\"+\n@@ -1045,1 +1015,0 @@\n-        \/\/ \"            $$name = new $$type[$$size];\\n\"+\n@@ -1087,1 +1056,1 @@\n-            char ch = 'x';\n+            char ch;\n@@ -1093,9 +1062,12 @@\n-            String replacement = \"ERROR\";\n-\n-            if (token.equals(\"name\")) replacement = name;\n-            else if (token.equals(\"type\")) replacement = type;\n-            else if (token.equals(\"bits\")) replacement = \"\"+bits;\n-            else if (token.equals(\"size\")) replacement = \"\"+size;\n-            else if (token.equals(\"entriesPerChar\")) replacement = \"\"+entriesPerChar;\n-            else if (token.equals(\"charsPerEntry\")) replacement = \"\"+(-entriesPerChar);\n-            else FAIL(\"Unrecognized token: \" + token);\n+            String replacement = switch (token) {\n+                case \"name\" -> name;\n+                case \"type\" -> type;\n+                case \"bits\" -> \"\" + bits;\n+                case \"size\" -> \"\" + size;\n+                case \"entriesPerChar\" -> \"\" + entriesPerChar;\n+                case \"charsPerEntry\" -> \"\" + (-entriesPerChar);\n+                default -> {\n+                    FAIL(\"Unrecognized token: \" + token);\n+                    yield \"ERROR\";\n+                }\n+            };\n@@ -1181,1 +1153,1 @@\n-        if (bits == 8 && useCharForByte) {\n+        if (bits == 8 && tableAsString && useCharForByte) {\n@@ -1198,1 +1170,1 @@\n-                result.append(\"] = new \").append(atype).append(\"[\"+table.length+\"];\\n  \");\n+                result.append(\"] = new \").append(atype).append(\"[\").append(table.length).append(\"];\\n  \");\n@@ -1201,2 +1173,1 @@\n-            int CHARS_PER_LINE = 8;\n-            StringBuffer theString = new StringBuffer();\n+            StringBuilder theString = new StringBuilder();\n@@ -1206,2 +1177,1 @@\n-            for (int j=0; j<table.length; ++j) {\n-                \/\/long entry = table[j] >> extract;\n+            for (long l : table) {\n@@ -1210,1 +1180,1 @@\n-                    entry = (table[j] & 0xffffffffL) >> extract;\n+                    entry = (l & 0xffffffffL) >> extract;\n@@ -1212,1 +1182,1 @@\n-                    entry = (table[j] >> extract);\n+                    entry = (l >> extract);\n@@ -1219,1 +1189,1 @@\n-                    ch = (char)(((int)ch >> bits) | (entry << (entriesPerChar-1)*bits));\n+                    ch = (char) (((int) ch >> bits) | (entry << (entriesPerChar - 1) * bits));\n@@ -1227,2 +1197,1 @@\n-                }\n-                else {\n+                } else {\n@@ -1230,2 +1199,2 @@\n-                    for (int k=0; k<charsPerEntry; ++k) {\n-                        ch = (char)(entry >> ((charsPerEntry-1)*16));\n+                    for (int k = 0; k < charsPerEntry; ++k) {\n+                        ch = (char) (entry >> ((charsPerEntry - 1) * 16));\n@@ -1243,1 +1212,0 @@\n-                entriesInCharSoFar = 0;\n@@ -1340,1 +1308,1 @@\n-                    if (properties) propertiesComments(result, val);\n+                    if (properties) propertiesComments(result, val << extract);\n@@ -1350,2 +1318,1 @@\n-        String myTab = \"    \";\n-        result.append(myTab + \"static final char[][][] charMap;\\n\");\n+        result.append(\"    static final char[][][] charMap;\\n\");\n@@ -1358,9 +1325,8 @@\n-        result.append(myTab + \"charMap = new char[][][] {\\n\");\n-        for (int x = 0; x < specialCaseMaps.length; x++) {\n-            ch = specialCaseMaps[x].getCharSource();\n-            map = specialCaseMaps[x].getUpperCaseMap();\n-            result.append(myTab + myTab);\n-            result.append(\"{ \");\n-            result.append(\"{\\'\\\\u\"+hex4(ch)+\"\\'}, {\");\n-            for (int y = 0; y < map.length; y++) {\n-                result.append(\"\\'\\\\u\"+hex4(map[y])+\"\\', \");\n+        result.append(myTab).append(\"charMap = new char[][][] {\\n\");\n+        for (SpecialCaseMap specialCaseMap : specialCaseMaps) {\n+            ch = specialCaseMap.getCharSource();\n+            map = specialCaseMap.getUpperCaseMap();\n+            result.append(myTab).append(myTab).append(\"{ \");\n+            result.append(\"{'\\\\u\").append(hex4(ch)).append(\"'}, {\");\n+            for (char c : map) {\n+                result.append(\"'\\\\u\").append(hex4(c)).append(\"', \");\n@@ -1370,1 +1336,1 @@\n-        result.append(myTab + \"};\\n\");\n+        result.append(myTab).append(\"};\\n\");\n@@ -1387,120 +1353,43 @@\n-        switch ((int)(val & maskType)) {\n-            case UnicodeSpec.CONTROL:\n-                result.append(\"Cc\");\n-                break;\n-            case UnicodeSpec.FORMAT:\n-                result.append(\"Cf\");\n-                break;\n-            case UnicodeSpec.PRIVATE_USE:\n-                result.append(\"Co\");\n-                break;\n-            case UnicodeSpec.SURROGATE:\n-                result.append(\"Cs\");\n-                break;\n-            case UnicodeSpec.LOWERCASE_LETTER:\n-                result.append(\"Ll\");\n-                break;\n-            case UnicodeSpec.MODIFIER_LETTER:\n-                result.append(\"Lm\");\n-                break;\n-            case UnicodeSpec.OTHER_LETTER:\n-                result.append(\"Lo\");\n-                break;\n-            case UnicodeSpec.TITLECASE_LETTER:\n-                result.append(\"Lt\");\n-                break;\n-            case UnicodeSpec.UPPERCASE_LETTER:\n-                result.append(\"Lu\");\n-                break;\n-            case UnicodeSpec.COMBINING_SPACING_MARK:\n-                result.append(\"Mc\");\n-                break;\n-            case UnicodeSpec.ENCLOSING_MARK:\n-                result.append(\"Me\");\n-                break;\n-            case UnicodeSpec.NON_SPACING_MARK:\n-                result.append(\"Mn\");\n-                break;\n-            case UnicodeSpec.DECIMAL_DIGIT_NUMBER:\n-                result.append(\"Nd\");\n-                break;\n-            case UnicodeSpec.LETTER_NUMBER:\n-                result.append(\"Nl\");\n-                break;\n-            case UnicodeSpec.OTHER_NUMBER:\n-                result.append(\"No\");\n-                break;\n-            case UnicodeSpec.CONNECTOR_PUNCTUATION:\n-                result.append(\"Pc\");\n-                break;\n-            case UnicodeSpec.DASH_PUNCTUATION:\n-                result.append(\"Pd\");\n-                break;\n-            case UnicodeSpec.END_PUNCTUATION:\n-                result.append(\"Pe\");\n-                break;\n-            case UnicodeSpec.OTHER_PUNCTUATION:\n-                result.append(\"Po\");\n-                break;\n-            case UnicodeSpec.START_PUNCTUATION:\n-                result.append(\"Ps\");\n-                break;\n-            case UnicodeSpec.CURRENCY_SYMBOL:\n-                result.append(\"Sc\");\n-                break;\n-            case UnicodeSpec.MODIFIER_SYMBOL:\n-                result.append(\"Sk\");\n-                break;\n-            case UnicodeSpec.MATH_SYMBOL:\n-                result.append(\"Sm\");\n-                break;\n-            case UnicodeSpec.OTHER_SYMBOL:\n-                result.append(\"So\");\n-                break;\n-            case UnicodeSpec.LINE_SEPARATOR:\n-                result.append(\"Zl\"); break;\n-            case UnicodeSpec.PARAGRAPH_SEPARATOR:\n-                result.append(\"Zp\");\n-                break;\n-            case UnicodeSpec.SPACE_SEPARATOR:\n-                result.append(\"Zs\");\n-                break;\n-            case UnicodeSpec.UNASSIGNED:\n-                result.append(\"unassigned\");\n-                break;\n-        }\n-\n-        switch ((int)((val & maskBidi) >> shiftBidi)) {\n-            case UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT:\n-                result.append(\", L\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT:\n-                result.append(\", R\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER:\n-                result.append(\", EN\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR:\n-                result.append(\", ES\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR:\n-                result.append(\", ET\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_ARABIC_NUMBER:\n-                result.append(\", AN\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR:\n-                result.append(\", CS\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_PARAGRAPH_SEPARATOR:\n-                result.append(\", B\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_SEGMENT_SEPARATOR:\n-                result.append(\", S\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_WHITESPACE:\n-                result.append(\", WS\");\n-                break;\n-            case UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS:\n-                result.append(\", ON\");\n-                break;\n+        switch ((int) (val & maskType)) {\n+            case UnicodeSpec.CONTROL -> result.append(\"Cc\");\n+            case UnicodeSpec.FORMAT -> result.append(\"Cf\");\n+            case UnicodeSpec.PRIVATE_USE -> result.append(\"Co\");\n+            case UnicodeSpec.SURROGATE -> result.append(\"Cs\");\n+            case UnicodeSpec.LOWERCASE_LETTER -> result.append(\"Ll\");\n+            case UnicodeSpec.MODIFIER_LETTER -> result.append(\"Lm\");\n+            case UnicodeSpec.OTHER_LETTER -> result.append(\"Lo\");\n+            case UnicodeSpec.TITLECASE_LETTER -> result.append(\"Lt\");\n+            case UnicodeSpec.UPPERCASE_LETTER -> result.append(\"Lu\");\n+            case UnicodeSpec.COMBINING_SPACING_MARK -> result.append(\"Mc\");\n+            case UnicodeSpec.ENCLOSING_MARK -> result.append(\"Me\");\n+            case UnicodeSpec.NON_SPACING_MARK -> result.append(\"Mn\");\n+            case UnicodeSpec.DECIMAL_DIGIT_NUMBER -> result.append(\"Nd\");\n+            case UnicodeSpec.LETTER_NUMBER -> result.append(\"Nl\");\n+            case UnicodeSpec.OTHER_NUMBER -> result.append(\"No\");\n+            case UnicodeSpec.CONNECTOR_PUNCTUATION -> result.append(\"Pc\");\n+            case UnicodeSpec.DASH_PUNCTUATION -> result.append(\"Pd\");\n+            case UnicodeSpec.END_PUNCTUATION -> result.append(\"Pe\");\n+            case UnicodeSpec.OTHER_PUNCTUATION -> result.append(\"Po\");\n+            case UnicodeSpec.START_PUNCTUATION -> result.append(\"Ps\");\n+            case UnicodeSpec.CURRENCY_SYMBOL -> result.append(\"Sc\");\n+            case UnicodeSpec.MODIFIER_SYMBOL -> result.append(\"Sk\");\n+            case UnicodeSpec.MATH_SYMBOL -> result.append(\"Sm\");\n+            case UnicodeSpec.OTHER_SYMBOL -> result.append(\"So\");\n+            case UnicodeSpec.LINE_SEPARATOR -> result.append(\"Zl\");\n+            case UnicodeSpec.PARAGRAPH_SEPARATOR -> result.append(\"Zp\");\n+            case UnicodeSpec.SPACE_SEPARATOR -> result.append(\"Zs\");\n+            case UnicodeSpec.UNASSIGNED -> result.append(\"unassigned\");\n+        }\n+\n+        switch ((int) ((val & maskBidi) >> shiftBidi)) {\n+            case UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT -> result.append(\", L\");\n+            case UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT -> result.append(\", R\");\n+            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER -> result.append(\", EN\");\n+            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR -> result.append(\", ES\");\n+            case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR -> result.append(\", ET\");\n+            case UnicodeSpec.DIRECTIONALITY_ARABIC_NUMBER -> result.append(\", AN\");\n+            case UnicodeSpec.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR -> result.append(\", CS\");\n+            case UnicodeSpec.DIRECTIONALITY_PARAGRAPH_SEPARATOR -> result.append(\", B\");\n+            case UnicodeSpec.DIRECTIONALITY_SEGMENT_SEPARATOR -> result.append(\", S\");\n+            case UnicodeSpec.DIRECTIONALITY_WHITESPACE -> result.append(\", WS\");\n+            case UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS -> result.append(\", ON\");\n@@ -1603,1 +1492,1 @@\n-            String extracted = ((k < sizes.length - 1) || (bits >= 8)) ? adjusted :\n+            access = ((k < sizes.length - 1) || (bits >= 8)) ? adjusted :\n@@ -1606,1 +1495,0 @@\n-            access = extracted;\n@@ -1690,3 +1578,3 @@\n-        StringBuffer desc = new StringBuffer(\"java GenerateCharacter\");\n-        for (int j=0; j<args.length; ++j) {\n-            desc.append(\" \" + args[j]);\n+        StringBuilder desc = new StringBuilder(\"java GenerateCharacter\");\n+        for (String arg : args) {\n+            desc.append(\" \").append(arg);\n@@ -1849,1 +1737,1 @@\n-        for (int i=0; i<binsOccupied; ++i) bitsFree -= sizes[i];\n+        for (int i = 0; i < binsOccupied; ++i) bitsFree -= sizes[i];\n@@ -1855,1 +1743,1 @@\n-            for (int i=1; i<bitsFree; ++i) { \/\/ Don't allow bins of 0 except for last one\n+            for (int i = 1; i < bitsFree; ++i) { \/\/ Don't allow bins of 0 except for last one\n@@ -1881,1 +1769,1 @@\n-            tables[j-1] = temp[0];\n+            tables[j - 1] = temp[0];\n@@ -1888,2 +1776,2 @@\n-            int len = tables[j+1].length;\n-            int size = sizes[j+1];\n+            int len = tables[j + 1].length;\n+            int size = sizes[j + 1];\n@@ -1925,1 +1813,3 @@\n-            for (int j=0; j<sizes.length; ++j) System.out.print(\" \" + sizes[j]);\n+            for (int size : sizes) {\n+                System.out.print(\" \" + size);\n+            }\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecharacter\/GenerateCharacter.java","additions":127,"deletions":237,"binary":false,"changes":364,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    @Param({\"9\", \"48\", \"65\", \"97\", \"128\", \"170\", \"192\", \"223\"})\n+    @Param({\"9\", \"65\", \"97\", \"128\", \"170\", \"223\", \"410\", \"430\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Characters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}