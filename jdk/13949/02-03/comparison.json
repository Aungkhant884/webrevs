{"files":[{"patch":"@@ -1,121 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8307365\n- * @summary Exercise JVMTI state creation concurrently with terminating vthreads\n- * @requires vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @run main\/othervm\/native -agentlib:JVMTIStateSanityTest JVMTIStateSanityTest\n- *\/\n-\n-import java.util.concurrent.*;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-\n-public class JVMTIStateSanityTest {\n-    private static final String agentLib = \"JVMTIStateSanityTest\";\n-    static final int VTHREAD_COUNT = 64;\n-\n-    private static native void SetSingleSteppingMode(boolean enable);\n-    private static native void SetMonitorContendedMode(boolean enable);\n-\n-    final Runnable FOO = () -> {\n-        Thread.yield();\n-    };\n-\n-    private void runTest() throws Exception {\n-        int tryCount = 150;\n-\n-        \/\/ Force creation of JVMTI state on vthread start.\n-        SetMonitorContendedMode(true);\n-\n-        while (tryCount-- > 0) {\n-            ExecutorService scheduler = Executors.newFixedThreadPool(8);\n-            ThreadFactory factory = virtualThreadBuilder(scheduler).factory();\n-\n-            List<Thread> virtualThreads = new ArrayList<>();\n-            for (int i = 0; i < VTHREAD_COUNT; i++) {\n-                virtualThreads.add(factory.newThread(FOO));\n-            }\n-\n-            for (Thread t : virtualThreads) {\n-                t.start();\n-            }\n-\n-            \/\/ Give some time for vthreads to finish.\n-            Thread.sleep(10);\n-\n-            \/\/ Trigger race of JVMTI state creation with terminating vthreads.\n-            SetMonitorContendedMode(false);\n-            SetMonitorContendedMode(true);\n-\n-            for (Thread t : virtualThreads) {\n-                t.join();\n-            }\n-            \/\/ Let all carriers go away.\n-            scheduler.shutdown();\n-            Thread.sleep(20);\n-\n-            \/\/ Check that looping over all JVMTI states works fine.\n-            SetSingleSteppingMode(true);\n-\n-            \/\/ Reset for next iteration\n-            SetSingleSteppingMode(false);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            System.loadLibrary(agentLib);\n-        } catch (UnsatisfiedLinkError ex) {\n-            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n-            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n-            throw ex;\n-        }\n-        JVMTIStateSanityTest obj = new JVMTIStateSanityTest();\n-        obj.runTest();\n-    }\n-\n-    private static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n-        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n-        try {\n-            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-            ctor.setAccessible(true);\n-            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n-        } catch (InvocationTargetException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException re) {\n-                throw re;\n-            }\n-            throw new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/JVMTIStateSanityTest\/JVMTIStateSanityTest.java","additions":0,"deletions":121,"binary":false,"changes":121,"status":"deleted"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8307365\n+ * @summary Exercise JvmtiThreadState creation concurrently with terminating vthreads\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @run main\/othervm\/native -agentlib:ThreadStateTest ThreadStateTest\n+ *\/\n+\n+import java.util.concurrent.*;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ThreadStateTest {\n+    private static final String agentLib = \"ThreadStateTest\";\n+    static final int VTHREAD_COUNT = 64;\n+\n+    private static native void SetSingleSteppingMode(boolean enable);\n+    private static native void SetMonitorContendedMode(boolean enable);\n+\n+    final Runnable FOO = () -> {\n+        Thread.yield();\n+    };\n+\n+    private void runTest() throws Exception {\n+        int tryCount = 150;\n+\n+        \/\/ Force creation of JvmtiThreadState on vthread start.\n+        SetMonitorContendedMode(true);\n+\n+        while (tryCount-- > 0) {\n+            ExecutorService scheduler = Executors.newFixedThreadPool(8);\n+            ThreadFactory factory = virtualThreadBuilder(scheduler).factory();\n+\n+            List<Thread> virtualThreads = new ArrayList<>();\n+            for (int i = 0; i < VTHREAD_COUNT; i++) {\n+                virtualThreads.add(factory.newThread(FOO));\n+            }\n+\n+            for (Thread t : virtualThreads) {\n+                t.start();\n+            }\n+\n+            \/\/ Give some time for vthreads to finish.\n+            Thread.sleep(10);\n+\n+            \/\/ Trigger race of JvmtiThreadState creation with terminating vthreads.\n+            SetMonitorContendedMode(false);\n+            SetMonitorContendedMode(true);\n+\n+            for (Thread t : virtualThreads) {\n+                t.join();\n+            }\n+            \/\/ Let all carriers go away.\n+            scheduler.shutdown();\n+            Thread.sleep(20);\n+\n+            \/\/ Check that looping over all JvmtiThreadStates works fine.\n+            SetSingleSteppingMode(true);\n+\n+            \/\/ Reset for next iteration\n+            SetSingleSteppingMode(false);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+        ThreadStateTest obj = new ThreadStateTest();\n+        obj.runTest();\n+    }\n+\n+    private static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n+        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n+        try {\n+            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n+            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n+            ctor.setAccessible(true);\n+            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            }\n+            throw new RuntimeException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/ThreadStateTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -46,1 +46,1 @@\n-Java_JVMTIStateSanityTest_SetSingleSteppingMode(JNIEnv* jni, jclass klass, jboolean enable) {\n+Java_ThreadStateTest_SetSingleSteppingMode(JNIEnv* jni, jclass klass, jboolean enable) {\n@@ -52,1 +52,1 @@\n-Java_JVMTIStateSanityTest_SetMonitorContendedMode(JNIEnv* jni, jclass klass, jboolean enable) {\n+Java_ThreadStateTest_SetMonitorContendedMode(JNIEnv* jni, jclass klass, jboolean enable) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/libThreadStateTest.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/JVMTIStateSanityTest\/libJVMTIStateSanityTest.cpp","status":"renamed"}]}