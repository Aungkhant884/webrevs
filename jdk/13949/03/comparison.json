{"files":[{"patch":"@@ -557,0 +557,1 @@\n+  VTMS_unmount_begin(vthread, \/* last_unmount *\/ true);\n@@ -559,3 +560,2 @@\n-    thread->set_jvmti_thread_state(nullptr);\n-    oop vt = JNIHandles::resolve(vthread);\n-    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n+    assert(thread->jvmti_thread_state() == nullptr, \"should be null\");\n+    assert(java_lang_Thread::jvmti_thread_state(JNIHandles::resolve(vthread)) == nullptr, \"should be null\");\n@@ -563,1 +563,1 @@\n-  VTMS_unmount_begin(vthread);\n+  thread->rebind_to_jvmti_thread_state_of(thread->threadObj());\n@@ -584,1 +584,1 @@\n-    VTMS_unmount_begin(vthread);\n+    VTMS_unmount_begin(vthread, \/* last_unmount *\/ false);\n@@ -618,1 +618,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread) {\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread, bool last_unmount) {\n@@ -625,1 +625,3 @@\n-  thread->rebind_to_jvmti_thread_state_of(thread->threadObj());\n+  if (!last_unmount) {\n+    thread->rebind_to_jvmti_thread_state_of(thread->threadObj());\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  static void VTMS_unmount_begin(jobject vthread);\n+  static void VTMS_unmount_begin(jobject vthread, bool last_unmount);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8307365\n+ * @summary Exercise JvmtiThreadState creation concurrently with terminating vthreads\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @run main\/othervm\/native -agentlib:ThreadStateTest ThreadStateTest\n+ *\/\n+\n+import java.util.concurrent.*;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ThreadStateTest {\n+    private static final String agentLib = \"ThreadStateTest\";\n+    static final int VTHREAD_COUNT = 64;\n+\n+    private static native void SetSingleSteppingMode(boolean enable);\n+    private static native void SetMonitorContendedMode(boolean enable);\n+\n+    final Runnable FOO = () -> {\n+        Thread.yield();\n+    };\n+\n+    private void runTest() throws Exception {\n+        int tryCount = 150;\n+\n+        \/\/ Force creation of JvmtiThreadState on vthread start.\n+        SetMonitorContendedMode(true);\n+\n+        while (tryCount-- > 0) {\n+            ExecutorService scheduler = Executors.newFixedThreadPool(8);\n+            ThreadFactory factory = virtualThreadBuilder(scheduler).factory();\n+\n+            List<Thread> virtualThreads = new ArrayList<>();\n+            for (int i = 0; i < VTHREAD_COUNT; i++) {\n+                virtualThreads.add(factory.newThread(FOO));\n+            }\n+\n+            for (Thread t : virtualThreads) {\n+                t.start();\n+            }\n+\n+            \/\/ Give some time for vthreads to finish.\n+            Thread.sleep(10);\n+\n+            \/\/ Trigger race of JvmtiThreadState creation with terminating vthreads.\n+            SetMonitorContendedMode(false);\n+            SetMonitorContendedMode(true);\n+\n+            for (Thread t : virtualThreads) {\n+                t.join();\n+            }\n+            \/\/ Let all carriers go away.\n+            scheduler.shutdown();\n+            Thread.sleep(20);\n+\n+            \/\/ Check that looping over all JvmtiThreadStates works fine.\n+            SetSingleSteppingMode(true);\n+\n+            \/\/ Reset for next iteration\n+            SetSingleSteppingMode(false);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+        ThreadStateTest obj = new ThreadStateTest();\n+        obj.runTest();\n+    }\n+\n+    private static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n+        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n+        try {\n+            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n+            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n+            ctor.setAccessible(true);\n+            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            }\n+            throw new RuntimeException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/ThreadStateTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <jvmti.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti_common.h\"\n+\n+\/\/ set by Agent_OnLoad\n+static jvmtiEnv* jvmti = nullptr;\n+\n+extern \"C\" {\n+\n+static void JNICALL\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n+           jmethodID method, jlocation location) {\n+}\n+\n+static void JNICALL\n+MonitorContended(jvmtiEnv* jvmti, JNIEnv* jni_env, jthread thread,\n+                 jobject object) {\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_SetSingleSteppingMode(JNIEnv* jni, jclass klass, jboolean enable) {\n+  jvmtiError err = jvmti->SetEventNotificationMode(enable ? JVMTI_ENABLE : JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, nullptr);\n+  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_SINGLE_STEP\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_SetMonitorContendedMode(JNIEnv* jni, jclass klass, jboolean enable) {\n+  jvmtiError err = jvmti->SetEventNotificationMode(enable ? JVMTI_ENABLE : JVMTI_DISABLE, JVMTI_EVENT_MONITOR_CONTENDED_ENTER, nullptr);\n+  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n+}\n+\n+JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM* jvm, char* options, void* reserved) {\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiCapabilities caps;\n+  jvmtiError err;\n+\n+  printf(\"Agent_OnLoad started\\n\");\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    LOG(\"error in GetEnv\");\n+    return JNI_ERR;\n+  }\n+\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_generate_single_step_events = 1;\n+  caps.can_support_virtual_threads = 1;\n+  caps.can_generate_monitor_events = 1;\n+\n+  err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n+  }\n+\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.SingleStep  = &SingleStep;\n+  callbacks.MonitorContendedEnter  = &MonitorContended;\n+  err = jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks));\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"Agent_OnLoad: Error in JVMTI SetEventCallbacks: %d\\n\", err);\n+  }\n+\n+  return 0;\n+}\n+\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/libThreadStateTest.cpp","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}