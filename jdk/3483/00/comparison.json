{"files":[{"patch":"@@ -230,1 +230,4 @@\n-  return GrowableArray<GCMemoryManager*>(1, 1, _heap.serviceability_memory_manager());\n+  GrowableArray<GCMemoryManager*> memory_managers(2);\n+  memory_managers.append(_heap.serviceability_cycle_memory_manager());\n+  memory_managers.append(_heap.serviceability_pause_memory_manager());\n+  return memory_managers;\n@@ -234,1 +237,3 @@\n-  return GrowableArray<MemoryPool*>(1, 1, _heap.serviceability_memory_pool());\n+  GrowableArray<MemoryPool*> memory_pools(1);\n+  memory_pools.append(_heap.serviceability_memory_pool());\n+  return memory_pools;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -458,2 +458,6 @@\n-GCMemoryManager* ZHeap::serviceability_memory_manager() {\n-  return _serviceability.memory_manager();\n+GCMemoryManager* ZHeap::serviceability_cycle_memory_manager() {\n+  return _serviceability.cycle_memory_manager();\n+}\n+\n+GCMemoryManager* ZHeap::serviceability_pause_memory_manager() {\n+  return _serviceability.pause_memory_manager();\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,1 +149,2 @@\n-  GCMemoryManager* serviceability_memory_manager();\n+  GCMemoryManager* serviceability_cycle_memory_manager();\n+  GCMemoryManager* serviceability_pause_memory_manager();\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,2 +113,4 @@\n-ZServiceabilityMemoryManager::ZServiceabilityMemoryManager(ZServiceabilityMemoryPool* pool)\n-    : GCMemoryManager(\"ZGC\", \"end of major GC\") {\n+ZServiceabilityMemoryManager::ZServiceabilityMemoryManager(const char* name,\n+                                                           const char* end_message,\n+                                                           ZServiceabilityMemoryPool* pool) :\n+    GCMemoryManager(name, end_message) {\n@@ -122,1 +124,2 @@\n-    _memory_manager(&_memory_pool),\n+    _cycle_memory_manager(\"ZGC Cycles\", \"end of GC cycle\", &_memory_pool),\n+    _pause_memory_manager(\"ZGC Pauses\", \"end of GC pause\", &_memory_pool),\n@@ -133,2 +136,6 @@\n-GCMemoryManager* ZServiceability::memory_manager() {\n-  return &_memory_manager;\n+GCMemoryManager* ZServiceability::cycle_memory_manager() {\n+  return &_cycle_memory_manager;\n+}\n+\n+GCMemoryManager* ZServiceability::pause_memory_manager() {\n+  return &_pause_memory_manager;\n@@ -142,1 +149,1 @@\n-    _memory_manager_stats(ZHeap::heap()->serviceability_memory_manager(),\n+    _memory_manager_stats(ZHeap::heap()->serviceability_cycle_memory_manager(),\n@@ -144,8 +151,8 @@\n-                          true \/* allMemoryPoolsAffected *\/,\n-                          true \/* recordGCBeginTime *\/,\n-                          true \/* recordPreGCUsage *\/,\n-                          true \/* recordPeakUsage *\/,\n-                          true \/* recordPostGCUsage *\/,\n-                          true \/* recordAccumulatedGCTime *\/,\n-                          true \/* recordGCEndTime *\/,\n-                          true \/* countCollection *\/) {}\n+                          true  \/* allMemoryPoolsAffected *\/,\n+                          true  \/* recordGCBeginTime *\/,\n+                          true  \/* recordPreGCUsage *\/,\n+                          true  \/* recordPeakUsage *\/,\n+                          true  \/* recordPostGCUsage *\/,\n+                          true  \/* recordAccumulatedGCTime *\/,\n+                          true  \/* recordGCEndTime *\/,\n+                          true  \/* countCollection *\/) {}\n@@ -155,1 +162,11 @@\n-    _counters_stats(ZHeap::heap()->serviceability_counters()->collector_counters()) {}\n+    _counters_stats(ZHeap::heap()->serviceability_counters()->collector_counters()),\n+    _memory_manager_stats(ZHeap::heap()->serviceability_pause_memory_manager(),\n+                          ZCollectedHeap::heap()->gc_cause(),\n+                          true  \/* allMemoryPoolsAffected *\/,\n+                          true  \/* recordGCBeginTime *\/,\n+                          false \/* recordPreGCUsage *\/,\n+                          false \/* recordPeakUsage *\/,\n+                          false \/* recordPostGCUsage *\/,\n+                          true  \/* recordAccumulatedGCTime *\/,\n+                          true  \/* recordGCEndTime *\/,\n+                          true  \/* countCollection *\/) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.cpp","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,3 @@\n-  ZServiceabilityMemoryManager(ZServiceabilityMemoryPool* pool);\n+  ZServiceabilityMemoryManager(const char* name,\n+                               const char* end_message,\n+                               ZServiceabilityMemoryPool* pool);\n@@ -54,1 +56,2 @@\n-  ZServiceabilityMemoryManager _memory_manager;\n+  ZServiceabilityMemoryManager _cycle_memory_manager;\n+  ZServiceabilityMemoryManager _pause_memory_manager;\n@@ -63,1 +66,2 @@\n-  GCMemoryManager* memory_manager();\n+  GCMemoryManager* cycle_memory_manager();\n+  GCMemoryManager* pause_memory_manager();\n@@ -77,2 +81,3 @@\n-  SvcGCMarker         _svc_gc_marker;\n-  TraceCollectorStats _counters_stats;\n+  SvcGCMarker             _svc_gc_marker;\n+  TraceCollectorStats     _counters_stats;\n+  TraceMemoryManagerStats _memory_manager_stats;\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.hpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n- * @requires !(vm.gc == \"Shenandoah\"    & vm.opt.ExplicitGCInvokesConcurrent != false)\n+ * @requires !(vm.gc == \"Shenandoah\" & vm.opt.ExplicitGCInvokesConcurrent != false)\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/gc\/TestFullGCCount.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+        final AtomicInteger pauses = new AtomicInteger();\n@@ -88,1 +89,1 @@\n-            if (name.equals(\"ZGC\")) {\n+            if (name.equals(\"ZGC Cycles\")) {\n@@ -90,0 +91,52 @@\n+\n+                if (!action.equals(\"end of GC cycle\")) {\n+                    log(\"ERROR: Action\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getInit() != initialCapacity) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.init\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getUsed() > initialCapacity) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.used\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getCommitted() != initialCapacity) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.committed\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getMax() != maxCapacity) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.max\");\n+                    errors.incrementAndGet();\n+                }\n+            } else if (name.equals(\"ZGC Pauses\")) {\n+                pauses.incrementAndGet();\n+\n+                if (!action.equals(\"end of GC pause\")) {\n+                    log(\"ERROR: Action\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getInit() != 0) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.init\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getUsed() != 0) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.used\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getCommitted() != 0) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.committed\");\n+                    errors.incrementAndGet();\n+                }\n+\n+                if (memoryUsageBeforeGC.getMax() != 0) {\n+                    log(\"ERROR: MemoryUsageBeforeGC.max\");\n+                    errors.incrementAndGet();\n+                }\n@@ -95,25 +148,0 @@\n-            if (!action.equals(\"end of major GC\")) {\n-                log(\"ERROR: Action\");\n-                errors.incrementAndGet();\n-            }\n-\n-            if (memoryUsageBeforeGC.getInit() != initialCapacity) {\n-                log(\"ERROR: MemoryUsageBeforeGC.init\");\n-                errors.incrementAndGet();\n-            }\n-\n-            if (memoryUsageBeforeGC.getUsed() > initialCapacity) {\n-                log(\"ERROR: MemoryUsageBeforeGC.used\");\n-                errors.incrementAndGet();\n-            }\n-\n-            if (memoryUsageBeforeGC.getCommitted() != initialCapacity) {\n-                log(\"ERROR: MemoryUsageBeforeGC.committed\");\n-                errors.incrementAndGet();\n-            }\n-\n-            if (memoryUsageBeforeGC.getMax() != maxCapacity) {\n-                log(\"ERROR: MemoryUsageBeforeGC.max\");\n-                errors.incrementAndGet();\n-            }\n-\n@@ -146,0 +174,1 @@\n+        final int minPauses = minCycles * 3;\n@@ -165,0 +194,1 @@\n+        final int actualPauses = pauses.get();\n@@ -168,0 +198,1 @@\n+        log(\"   minPauses: \" + minPauses);\n@@ -169,0 +200,1 @@\n+        log(\"actualPauses: \" + actualPauses);\n@@ -176,0 +208,5 @@\n+        \/\/ Verify number of pause events\n+        if (actualPauses < minPauses) {\n+            throw new Exception(\"Unexpected pauses\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestGarbageCollectorMXBean.java","additions":64,"deletions":27,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,4 @@\n-        int zgcMemoryManagers = 0;\n-        int zgcMemoryPools = 0;\n+        int zgcCyclesMemoryManagers = 0;\n+        int zgcPausesMemoryManagers = 0;\n+        int zgcCyclesMemoryPools = 0;\n+        int zgcPausesMemoryPools = 0;\n@@ -51,2 +53,4 @@\n-            if (memoryManagerName.equals(\"ZGC\")) {\n-                zgcMemoryManagers++;\n+            if (memoryManagerName.equals(\"ZGC Cycles\")) {\n+                zgcCyclesMemoryManagers++;\n+            } else if (memoryManagerName.equals(\"ZGC Pauses\")) {\n+                zgcPausesMemoryManagers++;\n@@ -61,1 +65,5 @@\n-                    zgcMemoryPools++;\n+                    if (memoryManagerName.equals(\"ZGC Cycles\")) {\n+                        zgcCyclesMemoryPools++;\n+                    } else if (memoryManagerName.equals(\"ZGC Pauses\")) {\n+                        zgcPausesMemoryPools++;\n+                    }\n@@ -64,0 +72,1 @@\n+        }\n@@ -65,3 +74,6 @@\n-            if (zgcMemoryManagers != zgcMemoryPools) {\n-                throw new Exception(\"MemoryManagers\/MemoryPools mismatch\");\n-            }\n+        if (zgcCyclesMemoryManagers != 1) {\n+            throw new Exception(\"Unexpected number of cycle MemoryManagers\");\n+        }\n+\n+        if (zgcPausesMemoryManagers != 1) {\n+            throw new Exception(\"Unexpected number of pause MemoryManagers\");\n@@ -70,2 +82,2 @@\n-        if (zgcMemoryManagers != 1) {\n-            throw new Exception(\"All MemoryManagers not found\");\n+        if (zgcCyclesMemoryPools != 1) {\n+            throw new Exception(\"Unexpected number of cycle MemoryPools\");\n@@ -74,2 +86,2 @@\n-        if (zgcMemoryPools != 1) {\n-            throw new Exception(\"All MemoryPools not found\");\n+        if (zgcPausesMemoryPools != 1) {\n+            throw new Exception(\"Unexpected number of pause MemoryPools\");\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestMemoryManagerMXBean.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * @run main MemoryTest 1 1\n+ * @run main MemoryTest 2 1\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/MemoryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}