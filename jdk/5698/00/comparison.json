{"files":[{"patch":"@@ -63,0 +63,1 @@\n+#include <spawn.h>\n@@ -1939,5 +1940,3 @@\n-int os::fork_and_exec(const char* cmd, bool prefer_vfork) {\n-  const char * argv[4] = {\"sh\", \"-c\", cmd, NULL};\n-\n-  pid_t pid ;\n-\n+int os::fork_and_exec(const char* cmd) {\n+  const char* argv[4] = {\"sh\", \"-c\", cmd, NULL};\n+  pid_t pid = -1;\n@@ -1945,26 +1944,5 @@\n-\n-  \/\/ Use always vfork on AIX, since its safe and helps with analyzing OOM situations.\n-  \/\/ Otherwise leave it up to the caller.\n-  AIX_ONLY(prefer_vfork = true;)\n-  #ifdef __APPLE__\n-  pid = ::fork();\n-  #else\n-  pid = prefer_vfork ? ::vfork() : ::fork();\n-  #endif\n-\n-  if (pid < 0) {\n-    \/\/ fork failed\n-    return -1;\n-\n-  } else if (pid == 0) {\n-    \/\/ child process\n-\n-    ::execve(\"\/bin\/sh\", (char* const*)argv, env);\n-\n-    \/\/ execve failed\n-    ::_exit(-1);\n-\n-  } else  {\n-    \/\/ copied from J2SE ..._waitForProcessExit() in UNIXProcess_md.c; we don't\n-    \/\/ care about the actual exit code, for now.\n-\n+  \/\/ Note: cast is needed because posix_spawn() requires - for compatibility with ancient\n+  \/\/ C-code - a non-const argv\/envp pointer array. But it is fine to hand in literal\n+  \/\/ strings and just cast the constness away. See also ProcessImpl_md.c.\n+  int rc = ::posix_spawn(&pid, \"\/bin\/sh\", NULL, NULL, (char**) argv, env);\n+  if (rc == 0) {\n@@ -1972,1 +1950,0 @@\n-\n@@ -1982,1 +1959,0 @@\n-\n@@ -1997,0 +1973,3 @@\n+  } else {\n+    \/\/ Don't log, we are inside error handling\n+    return -1;\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":12,"deletions":33,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -5619,1 +5619,1 @@\n-int os::fork_and_exec(const char* cmd, bool dummy \/* ignored *\/) {\n+int os::fork_and_exec(const char* cmd) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -518,4 +518,1 @@\n-  \/\/ The \"prefer_vfork\" argument is only used on POSIX platforms to\n-  \/\/ indicate whether vfork should be used instead of fork to spawn the\n-  \/\/ child process (ignored on AIX, which always uses vfork).\n-  static int fork_and_exec(const char *cmd, bool prefer_vfork = false);\n+  static int fork_and_exec(const char *cmd);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1687,1 +1687,1 @@\n-    if (os::fork_and_exec(cmd, true) < 0) {\n+    if (os::fork_and_exec(cmd) < 0) {\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}