{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Map;\n@@ -36,0 +35,1 @@\n+import java.util.Set;\n@@ -48,1 +48,1 @@\n-    final Map<String, RawNativeLibraryImpl> libraries = new ConcurrentHashMap<>();\n+    final Set<RawNativeLibraryImpl> libraries = ConcurrentHashMap.newKeySet();\n@@ -73,0 +73,6 @@\n+     * The library is opened with the platform-specific library loading\n+     * mechanism. If this method is called with the same path multiple times,\n+     * the library is opened the same number of times. To close the library\n+     * of the given path, {@code #unload} must be called on all the\n+     * {@code NativeLibrary} instances that load it.\n+     *\n@@ -109,0 +115,6 @@\n+     * The library is opened with the platform-specific library loading\n+     * mechanism. If this method is called with the same pathname multiple times,\n+     * the library is opened the same number of times. To close the library\n+     * of the given path, {@code #unload} must be called on all the\n+     * {@code NativeLibrary} instances that load it.\n+     *\n@@ -113,5 +125,1 @@\n-         return libraries.computeIfAbsent(pathname, this::get);\n-    }\n-\n-    private RawNativeLibraryImpl get(String pathname) {\n-        RawNativeLibraryImpl lib = new RawNativeLibraryImpl(caller, pathname);\n+        RawNativeLibraryImpl lib = new RawNativeLibraryImpl(pathname);\n@@ -121,0 +129,1 @@\n+        libraries.add(lib);\n@@ -125,1 +134,9 @@\n-     * Unloads the given native library.\n+     * Unloads the given native library.  Each {@code NativeLibrary}\n+     * instance can be unloaded only once.\n+     *\n+     * The native library may remain opened after this method is called.\n+     * Refer to the platform-specific library loading mechanism, for example,\n+     * dlopen\/dlclose on Unix or LoadLibrary\/FreeLibrary on Windows.\n+     *\n+     * @throws IllegalArgumentException if the given library is not\n+     * loaded by this RawNativeLibraries or has already been unloaded\n@@ -129,2 +146,2 @@\n-        if (!libraries.remove(lib.name(), lib)) {\n-            throw new IllegalArgumentException(lib.name() + \" not loaded by this RawNativeLibraries instance\");\n+        if (!libraries.remove(lib)) {\n+            throw new IllegalArgumentException(\"can't unload \" + lib.name() + \" loaded from \" + lib);\n@@ -142,1 +159,1 @@\n-        RawNativeLibraryImpl(Class<?> fromClass, String name) {\n+        RawNativeLibraryImpl(String name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/RawNativeLibraries.java","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -48,6 +48,1 @@\n-        try {\n-            System.loadLibrary(NativeLibrariesTest.LIB_NAME);\n-        } catch (UnsatisfiedLinkError e) { e.printStackTrace(); }\n-\n-        \/\/ unload the native library and then System::loadLibrary should succeed\n-        test.unload();\n+        \/\/ System::loadLibrary succeeds even the library is loaded as raw library\n@@ -59,0 +54,3 @@\n+        \/\/ unload all NativeLibrary instances\n+        test.unload();\n+\n","filename":"test\/jdk\/jdk\/internal\/loader\/NativeLibraries\/Main.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -55,0 +57,1 @@\n+    private final Set<NativeLibrary> loadedLibraries = new HashSet<>();\n@@ -77,1 +80,1 @@\n-        assertTrue(nl1 == nl2, nl1 + \" != \" + nl2);\n+        assertTrue(nl1 != nl2, \"Expected different NativeLibrary instances\");\n@@ -88,1 +91,6 @@\n-        \/\/ reload the native library and expect new NativeLibrary instance\n+        try {\n+            nativeLibraries.unload(nl1);\n+            throw new RuntimeException(\"Expect to fail as the library has already been unloaded\");\n+        } catch (IllegalArgumentException e) { }\n+\n+        \/\/ load the native library and expect new NativeLibrary instance\n@@ -95,0 +103,4 @@\n+\n+        \/\/ keep the loaded NativeLibrary instances\n+        loadedLibraries.add(nl2);\n+        loadedLibraries.add(nl3);\n@@ -97,0 +109,3 @@\n+    \/*\n+     * Unloads all loaded NativeLibrary instance\n+     *\/\n@@ -98,4 +113,6 @@\n-        NativeLibrary nl = nativeLibraries.load(libraryPath());\n-        \/\/ unload the native library\n-        nativeLibraries.unload(nl);\n-        assertTrue(unloadedCount == 0, \"Native library unloaded.  Expected: JNI_OnUnload not invoked\");\n+        System.out.println(\"Unloading \" + loadedLibraries.size() + \" NativeLibrary instances\");\n+        for (NativeLibrary nl : loadedLibraries) {\n+            nativeLibraries.unload(nl);\n+            assertTrue(unloadedCount == 0, \"Native library unloaded.  Expected: JNI_OnUnload not invoked\");\n+        }\n+        loadedLibraries.clear();\n@@ -107,0 +124,1 @@\n+        loadedLibraries.add(nl);\n","filename":"test\/jdk\/jdk\/internal\/loader\/NativeLibraries\/java.base\/jdk\/internal\/loader\/NativeLibrariesTest.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"}]}