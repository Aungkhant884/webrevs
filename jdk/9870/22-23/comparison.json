{"files":[{"patch":"@@ -339,14 +339,0 @@\n-\/\/ RUNTIME - Errors that were passed through the runtime\n-\/\/ SYSTEM - Errors that occurred on the system without going through the C runtime\n-\/\/  This can happen in the case of the Windows API, for instance\n-typedef enum {\n-    RUNTIME,\n-    SYSTEM\n-} ErrorOrigin;\n-\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len, ErrorOrigin origin);\n-\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len, ErrorOrigin origin);\n-\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1496,1 +1496,0 @@\n-    char tmpbuf[1024];\n@@ -1521,2 +1520,1 @@\n-                    getErrorString(errno, tmpbuf, sizeof(tmpbuf), RUNTIME);\n-                    msg = tmpbuf;\n+                    msg = strerror(errno);\n@@ -1538,2 +1536,1 @@\n-                getErrorString(errno, tmpbuf, sizeof(tmpbuf), RUNTIME);\n-                msg = tmpbuf;\n+                msg = strerror(errno);\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -325,1 +325,0 @@\n-    char tmpbuf[1024];\n@@ -328,4 +327,2 @@\n-    if (errnum != 0) {\n-        int ret = getErrorString(errnum, tmpbuf, sizeof(tmpbuf), RUNTIME);\n-        if (ret != EINVAL)\n-            detail = tmpbuf;\n+    if (errnum != 0 && errnum != EINVAL) {\n+        detail = strerror(errnum);\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -62,17 +62,0 @@\n-\n-\/* libc is part of the OS on Unix, so ErrorOrigin is ignored *\/\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len, ErrorOrigin origin)\n-{\n-    if (errno == 0 || len < 1) return 0;\n-    getErrorString(errno, buf, len, origin);\n-    return strlen(buf);\n-}\n-\n-\/* libc is part of the OS on Unix, so ErrorOrigin is ignored *\/\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len, ErrorOrigin origin)\n-{\n-    if (err == 0 || len < 1) return 0;\n-    return strerror_r(err, buf, len);\n-}\n","filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-    char tmpbuf[1024];\n+    char* buf = NULL;\n@@ -353,2 +353,2 @@\n-    getErrorString(error, tmpbuf, sizeof(tmpbuf), SYSTEM);\n-    len = strlen(tmpbuf);\n+    buf = strerror(error);\n+    len = buf == NULL ? 0 : strlen(buf);\n@@ -357,1 +357,1 @@\n-        (*env)->SetByteArrayRegion(env, bytes, 0, len, (jbyte*)tmpbuf);\n+        (*env)->SetByteArrayRegion(env, bytes, 0, len, (jbyte*) buf);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,46 +65,0 @@\n-\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len, ErrorOrigin origin) {\n-\n-    int errval;\n-\n-    if (origin == SYSTEM) {\n-        errval = (int) GetLastError();\n-    } else if (origin == RUNTIME) {\n-        errval = errno;\n-    }\n-    if (errval == 0 || len < 1) return 0;\n-    getErrorString(errval, buf, len, origin);\n-    return strlen(buf);\n-}\n-\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len, ErrorOrigin origin)\n-{\n-    if (origin == SYSTEM) {\n-        DWORD errval = (DWORD) err;\n-        if (errval != 0) {\n-            \/\/ DOS error\n-            size_t n = (size_t)FormatMessage(\n-                    FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n-                    NULL,\n-                    errval,\n-                    0,\n-                    buf,\n-                    (DWORD)len,\n-                    NULL);\n-            if (n > 3) {\n-                \/\/ Drop final '.', CR, LF\n-                if (buf[n - 1] == '\\n') n--;\n-                if (buf[n - 1] == '\\r') n--;\n-                if (buf[n - 1] == '.') n--;\n-                buf[n] = '\\0';\n-            }\n-            return n == 0 ? (int) GetLastError() : 0;\n-        }\n-    } else if (origin == RUNTIME) {\n-        if (errno == 0 || len < 1) return 0;\n-        return strerror_s(buf, len, errno);\n-    }\n-    return 0;\n-}\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -542,17 +542,0 @@\n-void writeWindowMessage(const char* format, ...) {\n-    va_list list;\n-    va_start(list, format);\n-    char *message;\n-\n-    \/* get the length of the string we need *\/\n-    int n = _vscprintf(format, list);\n-\n-    message = (char *) JLI_MemAlloc(n + 1);\n-    _vsnprintf(message, n, format, list);\n-    message[n]='\\0';\n-    MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n-        (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n-    JLI_MemFree(message);\n-    va_end(list);\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-void writeWindowMessage(const char* message, ...);\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}