{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            JLI_ReportErrorMessageSys(\"error locating main entrypoint\\n\");\n+            JLI_ReportErrorMessageSys(\"error locating main entrypoint\");\n@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(\"Could not create main thread: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(\"pthread_detach() failed: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,1 +139,4 @@\n-\/* Reports a system error message to stderr or a window *\/\n+\/*\n+ * Just like JLI_ReportErrorMessage, except that it concatenates the system\n+ * error message if any, similarly to std::perror.\n+ *\/\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -203,10 +203,0 @@\n-    char *emsg;\n-\n-    \/*\n-     * TODO: its safer to use strerror_r but is not available on\n-     * Solaris 8. Until then....\n-     *\/\n-    emsg = strerror(errno);\n-    if (emsg != NULL) {\n-        fprintf(stderr, \"%s\\n\", emsg);\n-    }\n@@ -216,0 +206,14 @@\n+\n+    if (errno != 0) {\n+        \/*\n+         * Buffer size of 1024 copied from typical POSIX size used\n+         * in strerror_r\n+         *\/\n+        char error[1024];\n+        if(strerror_r(errno, error, sizeof error) == 0) {\n+            fprintf(stderr, \": %s\", error);\n+        } else {\n+            fprintf(stderr, \": Java could not determine the underlying error\");\n+        }\n+        errno = 0;\n+    }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -609,3 +609,3 @@\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n+ * Because Windows API errors and regular errno errors can exist at the same time,\n+ * compromise and error out when both are present. Windows code should ideally clear\n+ * the last error before a call that sets either of these!\n@@ -617,2 +617,0 @@\n-\n-    int save_errno = errno;\n@@ -623,0 +621,3 @@\n+    char* const conflict = \"Java detected conflicting Windows and C Runtime errors and is unable to provide an accurate report\";\n+    char* const unknown = \"Java could not determine the underlying error\";\n+\n@@ -625,1 +626,2 @@\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n+    \/* Platform SDK \/ DOS Error *\/\n+    if((errval = GetLastError()) != 0) {\n@@ -630,1 +632,1 @@\n-            errtext = \"\";\n+            errtext = unknown;\n@@ -634,1 +636,1 @@\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n+            if (n > 3) {                                \/* Drop final CR, LF *\/\n@@ -637,0 +639,1 @@\n+                if (errtext[n - 1] == '.') n--;         \/* Drop '.' to match getLastErrorString *\/\n@@ -640,2 +643,11 @@\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n+    }\n+\n+    \/* C runtime error that has no corresponding DOS error code *\/\n+    if(errno != 0) {\n+        errtext = strerror(errno);\n+        if(errtext == NULL) errtext = unknown;\n+    }\n+\n+    \/* Final safety check to catch conflicting errors *\/\n+    if(GetLastError() != 0 && errno != 0) {\n+        errtext = conflict;\n@@ -649,2 +661,2 @@\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n+        if (errtext != NULL) {\n+           mlen += 1 + (int)JLI_StrLen(errtext);\n@@ -655,1 +667,0 @@\n-        message[len]='\\0';\n@@ -657,2 +668,6 @@\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n+        if (errtext != NULL) {\n+            message[len] = ':';\n+            message[len + 1] = ' ';\n+            JLI_StrCat(message, errtext);\n+        } else {\n+            message[len]='\\0';\n@@ -667,2 +682,2 @@\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n+        if (errtext != NULL) {\n+           fprintf(stderr, \": %s\", errtext);\n@@ -670,0 +685,1 @@\n+        fprintf(stderr, \"\\n\");\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":33,"deletions":17,"binary":false,"changes":50,"status":"modified"}]}