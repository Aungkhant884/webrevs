{"files":[{"patch":"@@ -84,1 +84,19 @@\n-#define JLI_Perror              perror\n+\/*\n+ * Beginning with the UCRT in Visual Studio 2015 and Windows 10, snprintf is\n+ * no longer identical to _snprintf. snprintf is now the one from C99, so we\n+ * can remove the compatibility hack.\n+ * https:\/\/learn.microsoft.com\/en-us\/cpp\/c-runtime-library\/reference\/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l?view=msvc-170\n+ *\/\n+#define JLI_Snprintf            snprintf\n+\n+\/* Support for using perror with printf arguments *\/\n+#define JLI_Perror(...) \\\n+    { \\\n+        const int len = snprintf(NULL, 0, __VA_ARGS__); \\\n+        if (len > -1) { \\\n+            char buffer[len + 1]; \\\n+            if (snprintf(buffer, len + 1, __VA_ARGS__) > -1) perror(buffer); \\\n+        } else { \\\n+            fprintf(stderr, \"JLI_Perror failed\\n\"); \\\n+        } \\\n+    } ((void*) 0)\n@@ -93,1 +111,0 @@\n-int JLI_Snprintf(char *buffer, size_t size, const char *format, ...);\n@@ -103,1 +120,0 @@\n-#define JLI_Snprintf                    snprintf\n","filename":"src\/java.base\/share\/native\/libjli\/jli_util.h","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -478,32 +478,0 @@\n-\/*\n- * windows snprintf does not guarantee a null terminator in the buffer,\n- * if the computed size is equal to or greater than the buffer size,\n- * as well as error conditions. This function guarantees a null terminator\n- * under all these conditions. An unreasonable buffer or size will return\n- * an error value. Under all other conditions this function will return the\n- * size of the bytes actually written minus the null terminator, similar\n- * to ansi snprintf api. Thus when calling this function the caller must\n- * ensure storage for the null terminator.\n- *\/\n-int\n-JLI_Snprintf(char* buffer, size_t size, const char* format, ...) {\n-    int rc;\n-    va_list vl;\n-    if (size == 0 || buffer == NULL)\n-        return -1;\n-    buffer[0] = '\\0';\n-    va_start(vl, format);\n-    rc = vsnprintf(buffer, size, format, vl);\n-    va_end(vl);\n-    \/* force a null terminator, if something is amiss *\/\n-    if (rc < 0) {\n-        \/* apply ansi semantics *\/\n-        buffer[size - 1] = '\\0';\n-        return (int)size;\n-    } else if (rc == size) {\n-        \/* force a null terminator *\/\n-        buffer[size - 1] = '\\0';\n-    }\n-    return rc;\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"}]}