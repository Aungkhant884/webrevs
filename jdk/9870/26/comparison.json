{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            JLI_ReportErrorMessageSys(\"error locating main entrypoint\\n\");\n+            JLI_Perror(\"error locating main entrypoint\");\n@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(\"Could not create main thread: %s\\n\", strerror(errno));\n+        JLI_Perror(\"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(\"pthread_detach() failed: %s\\n\", strerror(errno));\n+        JLI_Perror(\"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -207,2 +207,0 @@\n-    char buf[256];\n-    size_t n;\n@@ -212,1 +210,4 @@\n-    n = getLastErrorString(buf, sizeof(buf));\n+#ifdef _WIN32\n+    \/* The implementation on Windows uses the Windows API *\/\n+    char buf[256];\n+    size_t n = getLastWinErrorString(buf, sizeof(buf));\n@@ -214,0 +215,6 @@\n+#else\n+    char* buf = NULL;\n+    int error = errno;\n+    if (error != 0) buf = strerror(error);\n+    if (buf != NULL) {\n+#endif\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n+    size_t n = getLastErrorString(buf, sizeof(buf), SYSTEM);\n@@ -125,2 +125,2 @@\n- * Throw an exception by name, using a given message and the string\n- * returned by getLastErrorString to construct the detail string.\n+ * Throw an exception by name, using a given message and a string\n+ * identical to one generated by perror() to construct the detail string.\n@@ -129,1 +129,1 @@\n-JNU_ThrowByNameWithMessageAndLastError\n+JNU_PerrorThrowByNameWithMessage\n@@ -132,2 +132,1 @@\n-    char buf[256];\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n+    char* buf = NULL;\n@@ -136,1 +135,4 @@\n-    if (n > 0) {\n+    int error = errno;\n+    if (error != 0) buf = strerror(error);\n+\n+    if (buf != NULL) {\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.c","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-\/* Throw an exception by name, using a given message and the string\n- * returned by getLastErrorString to construct the detail string.\n+\/* Throw an exception by name, using a given message and a string\n+ * identical to one generated by perror() to construct the detail string.\n@@ -85,1 +85,1 @@\n-JNU_ThrowByNameWithMessageAndLastError\n+JNU_PerrorThrowByNameWithMessage\n@@ -339,5 +339,5 @@\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len);\n-\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len);\n+#ifdef _WIN32\n+JNIEXPORT size_t JNICALL getLastWinErrorString(char*, size_t);\n+JNIEXPORT void JNICALL\n+throwByNameWithMessageAndWinError(JNIEnv *env, const char *name, const char *message);\n+#endif\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -139,4 +139,0 @@\n-\/* Reports a system error message to stderr or a window *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char * message, ...);\n-\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,0 +84,2 @@\n+#define JLI_Perror              perror\n+\n","filename":"src\/java.base\/share\/native\/libjli\/jli_util.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -851,0 +851,1 @@\n+#ifdef _WIN32\n@@ -852,0 +853,4 @@\n+#else\n+    int error;\n+    char* errbuf = NULL;\n+#endif\n@@ -866,1 +871,8 @@\n-        if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n+#ifdef _WIN32\n+        \/* ZFILE_Open *\/\n+        if (pmsg && getLastWinErrorString(errbuf, sizeof(errbuf)) > 0) {\n+#else\n+        error = errno;\n+        if (error != 0) errbuf = strerror(error);\n+        if (errbuf != NULL) {\n+#endif\n@@ -868,0 +880,1 @@\n+        }\n@@ -884,1 +897,7 @@\n-            if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n+#ifdef _WIN32\n+            if (pmsg && getLastWinErrorString(errbuf, sizeof(errbuf)) > 0) {\n+#else\n+            error = errno;\n+            if (error != 0) errbuf = strerror(error);\n+            if (errbuf != NULL) {\n+#endif\n@@ -886,0 +905,1 @@\n+            }\n@@ -1496,1 +1516,1 @@\n-    char tmpbuf[1024];\n+    char* buffer = NULL;\n@@ -1521,2 +1541,3 @@\n-                    getErrorString(errno, tmpbuf, sizeof(tmpbuf));\n-                    msg = tmpbuf;\n+                    int error = errno;\n+                    if (error != 0) buffer = strerror(error);\n+                    if (buffer != NULL) msg = buffer;\n@@ -1538,2 +1559,3 @@\n-                getErrorString(errno, tmpbuf, sizeof(tmpbuf));\n-                msg = tmpbuf;\n+                int error = errno;\n+                if (error != 0) buffer = strerror(error);\n+                if (buffer != NULL) msg = buffer;\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-    char tmpbuf[1024];\n+    char* buf = NULL;\n@@ -328,5 +328,2 @@\n-    if (errnum != 0) {\n-        int ret = getErrorString(errnum, tmpbuf, sizeof(tmpbuf));\n-        if (ret != EINVAL)\n-            detail = tmpbuf;\n-    }\n+    if (errnum != 0) buf = strerror(errnum);\n+    if (buf != NULL) detail = buf;\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -62,15 +62,0 @@\n-\n-JNIEXPORT size_t JNICALL\n-getLastErrorString(char *buf, size_t len)\n-{\n-    if (errno == 0 || len < 1) return 0;\n-    getErrorString(errno, buf, len);\n-    return strlen(buf);\n-}\n-\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len)\n-{\n-    if (err == 0 || len < 1) return 0;\n-    return strerror_r(err, buf, len);\n-}\n","filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-                JLI_ReportErrorMessageSys(JRE_ERROR11);\n+                JLI_Perror(JRE_ERROR11);\n@@ -460,1 +460,1 @@\n-        JLI_ReportErrorMessageSys(JRE_ERROR4, newexec);\n+        JLI_Perror(JRE_ERROR4, newexec);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,20 +200,0 @@\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char* fmt, ...) {\n-    va_list vl;\n-    char *emsg;\n-\n-    \/*\n-     * TODO: its safer to use strerror_r but is not available on\n-     * Solaris 8. Until then....\n-     *\/\n-    emsg = strerror(errno);\n-    if (emsg != NULL) {\n-        fprintf(stderr, \"%s\\n\", emsg);\n-    }\n-\n-    va_start(vl, fmt);\n-    vfprintf(stderr, fmt, vl);\n-    fprintf(stderr, \"\\n\");\n-    va_end(vl);\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1135,1 +1135,1 @@\n-            JNU_ThrowByNameWithMessageAndLastError\n+            JNU_PerrorThrowByNameWithMessage\n@@ -1157,1 +1157,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError\n+                JNU_PerrorThrowByNameWithMessage\n@@ -1162,1 +1162,1 @@\n-            JNU_ThrowByNameWithMessageAndLastError\n+            JNU_PerrorThrowByNameWithMessage\n@@ -1186,1 +1186,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1195,1 +1195,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1331,1 +1331,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1355,1 +1355,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1400,1 +1400,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError\n+                JNU_PerrorThrowByNameWithMessage\n@@ -1405,1 +1405,1 @@\n-            JNU_ThrowByNameWithMessageAndLastError\n+            JNU_PerrorThrowByNameWithMessage\n@@ -1425,1 +1425,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1436,1 +1436,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1506,1 +1506,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1515,1 +1515,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1637,1 +1637,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1677,1 +1677,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError\n+                JNU_PerrorThrowByNameWithMessage\n@@ -1682,1 +1682,1 @@\n-            JNU_ThrowByNameWithMessageAndLastError\n+            JNU_PerrorThrowByNameWithMessage\n@@ -1698,1 +1698,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1742,1 +1742,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n@@ -1838,1 +1838,1 @@\n-        JNU_ThrowByNameWithMessageAndLastError\n+        JNU_PerrorThrowByNameWithMessage\n","filename":"src\/java.base\/unix\/native\/libnet\/NetworkInterface.c","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    JNU_ThrowByNameWithMessageAndLastError(env, name, defaultDetail);\n+    JNU_PerrorThrowByNameWithMessage(env, name, defaultDetail);\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-    char tmpbuf[1024];\n+    char* buf = NULL;\n@@ -353,2 +353,2 @@\n-    getErrorString((int)errno, tmpbuf, sizeof(tmpbuf));\n-    len = strlen(tmpbuf);\n+    buf = strerror(error);\n+    len = buf == NULL ? 0 : strlen(buf);\n@@ -357,1 +357,1 @@\n-        (*env)->SetByteArrayRegion(env, bytes, 0, len, (jbyte*)tmpbuf);\n+        (*env)->SetByteArrayRegion(env, bytes, 0, len, (jbyte*) buf);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-getLastErrorString(char *buf, size_t len) {\n+getLastWinErrorString(char *buffer, size_t size) {\n@@ -69,1 +69,1 @@\n-    DWORD errval;\n+    DWORD error;\n@@ -71,4 +71,4 @@\n-    if ((errval = GetLastError()) != 0) {\n-        \/\/ DOS error\n-        size_t n = (size_t)FormatMessage(\n-                FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n+    if ((error = GetLastError()) != 0) {\n+        \/* DOS error *\/\n+        size_t n = (size_t) FormatMessage(\n+                FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n@@ -76,1 +76,1 @@\n-                errval,\n+                error,\n@@ -78,2 +78,2 @@\n-                buf,\n-                (DWORD)len,\n+                buffer,\n+                (DWORD) size,\n@@ -82,5 +82,5 @@\n-            \/\/ Drop final '.', CR, LF\n-            if (buf[n - 1] == '\\n') n--;\n-            if (buf[n - 1] == '\\r') n--;\n-            if (buf[n - 1] == '.') n--;\n-            buf[n] = '\\0';\n+            \/* Drop final '.', CR, LF *\/\n+            if (buffer[n - 1] == '\\n') n--;\n+            if (buffer[n - 1] == '\\r') n--;\n+            if (buffer[n - 1] == '.') n--;\n+            buffer[n] = '\\0';\n@@ -89,0 +89,2 @@\n+    } else {\n+        return 0;\n@@ -90,4 +92,0 @@\n-\n-    \/\/ C runtime error that has no corresponding DOS error code\n-    if (errno == 0 || len < 1) return 0;\n-    return strerror_s(buf, len, errno);\n@@ -96,7 +94,51 @@\n-JNIEXPORT int JNICALL\n-getErrorString(int err, char *buf, size_t len)\n-{\n-    int ret = 0;\n-    if (err == 0 || len < 1) return 0;\n-    ret = strerror_s(buf, len, err);\n-    return ret;\n+JNIEXPORT void JNICALL\n+throwByNameWithMessageAndWinError\n+  (JNIEnv *env, const char *name, const char *message) {\n+\n+    char buf[256];\n+    size_t n = getLastWinErrorString(buf, sizeof(buf));\n+    size_t messagelen = message == NULL ? 0 : strlen(message);\n+\n+    if (n > 0) {\n+        jstring s = JNU_NewStringPlatform(env, buf);\n+        if (s != NULL) {\n+            jobject x = NULL;\n+            if (messagelen) {\n+                jstring s2 = NULL;\n+                size_t messageextlen = messagelen + 4;\n+                char *str1 = (char *)malloc((messageextlen) * sizeof(char));\n+                if (str1 == 0) {\n+                    JNU_ThrowOutOfMemoryError(env, 0);\n+                    return;\n+                }\n+                jio_snprintf(str1, messageextlen, \" (%s)\", message);\n+                s2 = (*env)->NewStringUTF(env, str1);\n+                free(str1);\n+                JNU_CHECK_EXCEPTION(env);\n+                if (s2 != NULL) {\n+                    jstring s3 = JNU_CallMethodByName(\n+                                     env, NULL, s, \"concat\",\n+                                     \"(Ljava\/lang\/String;)Ljava\/lang\/String;\",\n+                                     s2).l;\n+                    (*env)->DeleteLocalRef(env, s2);\n+                    JNU_CHECK_EXCEPTION(env);\n+                    if (s3 != NULL) {\n+                        (*env)->DeleteLocalRef(env, s);\n+                        s = s3;\n+                    }\n+                }\n+            }\n+            x = JNU_NewObjectByName(env, name, \"(Ljava\/lang\/String;)V\", s);\n+            if (x != NULL) {\n+                (*env)->Throw(env, x);\n+            }\n+        }\n+    }\n+\n+    if (!(*env)->ExceptionOccurred(env)) {\n+        if (messagelen) {\n+            JNU_ThrowByName(env, name, message);\n+        } else {\n+            JNU_ThrowByName(env, name, \"no further information\");\n+        }\n+    }\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":67,"deletions":25,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -608,69 +608,0 @@\n-\/*\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n- *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char *fmt, ...)\n-{\n-    va_list vl;\n-\n-    int save_errno = errno;\n-    DWORD       errval;\n-    jboolean freeit = JNI_FALSE;\n-    char  *errtext = NULL;\n-\n-    va_start(vl, fmt);\n-\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n-        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"\";\n-            n = 0;\n-        } else {\n-            freeit = JNI_TRUE;\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n-            }\n-        }\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n-    }\n-\n-    if (IsJavaw()) {\n-        char *message;\n-        int mlen;\n-        \/* get the length of the string we need *\/\n-        int len = mlen =  _vscprintf(fmt, vl) + 1;\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n-        }\n-\n-        message = (char *)JLI_MemAlloc(mlen);\n-        _vsnprintf(message, len, fmt, vl);\n-        message[len]='\\0';\n-\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n-        }\n-\n-        MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n-            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n-\n-        JLI_MemFree(message);\n-    } else {\n-        vfprintf(stderr, fmt, vl);\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n-        }\n-    }\n-    if (freeit) {\n-        (void)LocalFree((HLOCAL)errtext);\n-    }\n-    va_end(vl);\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":0,"deletions":69,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * Function prototypes.\n+ * Utility declarations.\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError(env,\n+                throwByNameWithMessageAndWinError(env,\n@@ -413,1 +413,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError(env,\n+                throwByNameWithMessageAndWinError(env,\n","filename":"src\/java.base\/windows\/native\/libnet\/NetworkInterface.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError(env,\n+                throwByNameWithMessageAndWinError(env,\n@@ -202,1 +202,1 @@\n-                JNU_ThrowByNameWithMessageAndLastError(env,\n+                throwByNameWithMessageAndWinError(env,\n","filename":"src\/java.base\/windows\/native\/libnet\/NetworkInterface_winXP.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-    JNU_ThrowByNameWithMessageAndLastError(env, name, defaultDetail);\n+\tthrowByNameWithMessageAndWinError(env, name, defaultDetail);\n","filename":"src\/java.base\/windows\/native\/libnet\/net_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    getLastErrorString(buffer, sizeof(buffer));\n+    getLastWinErrorString(buffer, sizeof(buffer));\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/sadis.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}