{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            JLI_ReportErrorMessageSys(\"error locating main entrypoint\\n\");\n+            JLI_ReportErrorMessageSys(\"error locating main entrypoint\");\n@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(\"Could not create main thread: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(\"pthread_detach() failed: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,1 +139,4 @@\n-\/* Reports a system error message to stderr or a window *\/\n+\/*\n+ * Just like JLI_ReportErrorMessage, except that it concatenates the system\n+ * error message if any, similarly to std::perror.\n+ *\/\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -203,10 +203,0 @@\n-    char *emsg;\n-\n-    \/*\n-     * TODO: its safer to use strerror_r but is not available on\n-     * Solaris 8. Until then....\n-     *\/\n-    emsg = strerror(errno);\n-    if (emsg != NULL) {\n-        fprintf(stderr, \"%s\\n\", emsg);\n-    }\n@@ -216,0 +206,9 @@\n+\n+    if (errno != 0) {\n+        char error[strerrorlen_s(errno) + 1];\n+        if (strerror_s(error, sizeof(error), errno) == 0) {\n+            fprintf(stderr, \": %s\", error);\n+        } else {\n+            fprintf(stderr, \": Java could not determine the underlying error\");\n+        }\n+    }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -609,3 +609,3 @@\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n+ * Detects the last C Runtime error by default, similarly to the variant for Unix.\n+ * To force detection of Windows API errors instead, add the custom format specifier\n+ * %w32 at the start of the message.\n@@ -617,2 +617,0 @@\n-\n-    int save_errno = errno;\n@@ -625,13 +623,28 @@\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n-        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"\";\n-            n = 0;\n-        } else {\n-            freeit = JNI_TRUE;\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n+    if(strncmp(\"%w32\", fmt, 4) == 0) {                      \/* Format specifier requesting WINAPI errors *\/\n+        fmt += 4;\n+        if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n+            int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n+                FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n+                NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n+            if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n+                char* unknown = \"Java could not determine the underlying error\";\n+                errtext = (char*) JLI_MemAlloc(JLI_StrLen(unknown) + 1);\n+                JLI_StrCpy(errtext, unknown);\n+                n = 0;\n+            } else {\n+                freeit = JNI_TRUE;\n+                if (n > 3) {                                \/* Drop final CR, LF *\/\n+                    if (errtext[n - 1] == '\\n') n--;\n+                    if (errtext[n - 1] == '\\r') n--;\n+                    if (errtext[n - 1] == '.') n--;         \/* Drop '.' to match getLastErrorString *\/\n+                    errtext[n] = '\\0';\n+                }\n+            }\n+        }\n+    } else {\n+        if (errno != 0) {                                   \/* C runtime error that has no corresponding DOS error code *\/\n+            errtext = (char*) JLI_MemAlloc(strerrorlen_s(errno) + 1);\n+            if (strerror_s(errtext, sizeof(strerrorlen_s(errno) + 1), errno) != 0) {\n+                char* unknown = \"Java could not determine the underlying error\";\n+                errtext = (char*) JLI_MemRealloc(errtext, JLI_StrLen(unknown) + 1);\n+                JLI_StrCpy(errtext, unknown);\n@@ -640,2 +653,0 @@\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n@@ -649,2 +660,2 @@\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n+        if (errtext != NULL) {\n+           mlen += 2 + (int)JLI_StrLen(errtext);\n@@ -655,1 +666,0 @@\n-        message[len]='\\0';\n@@ -657,2 +667,6 @@\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n+        if (errtext != NULL) {\n+            message[len] = ':';\n+            message[len + 1] = ' ';\n+            JLI_StrCat(message, errtext);\n+        } else {\n+            message[len]='\\0';\n@@ -667,2 +681,2 @@\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n+        if (errtext != NULL) {\n+           fprintf(stderr, \": %s\", errtext);\n@@ -670,0 +684,1 @@\n+        fprintf(stderr, \"\\n\");\n@@ -671,2 +686,6 @@\n-    if (freeit) {\n-        (void)LocalFree((HLOCAL)errtext);\n+    if (errtext != NULL) {\n+        if (freeit) {\n+            (void)LocalFree((HLOCAL)errtext);\n+        } else {\n+            free(errtext);\n+        }\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":48,"deletions":29,"binary":false,"changes":77,"status":"modified"}]}