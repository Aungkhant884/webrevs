{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            JLI_ReportErrorMessageSys(\"error locating main entrypoint\\n\");\n+            JLI_ReportErrorMessageSys(SYSTEM, \"error locating main entrypoint\");\n@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(\"Could not create main thread: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(SYSTEM, \"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(\"pthread_detach() failed: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(SYSTEM, \"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-    n = getLastErrorString(buf, sizeof(buf));\n+    n = getLastErrorString(buf, sizeof(buf), SYSTEM);\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n+    size_t n = getLastErrorString(buf, sizeof(buf), SYSTEM);\n@@ -133,1 +133,1 @@\n-    size_t n = getLastErrorString(buf, sizeof(buf));\n+    size_t n = getLastErrorString(buf, sizeof(buf), SYSTEM);\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -339,0 +339,8 @@\n+\/\/ RUNTIME - Errors that were passed through the runtime\n+\/\/ SYSTEM - Errors that occurred on the system without going through the C runtime\n+\/\/  This can happen in the case of the Windows API, for instance\n+typedef enum {\n+    RUNTIME,\n+    SYSTEM\n+} ErrorOrigin;\n+\n@@ -340,1 +348,1 @@\n-getLastErrorString(char *buf, size_t len);\n+getLastErrorString(char *buf, size_t len, ErrorOrigin origin);\n@@ -343,1 +351,1 @@\n-getErrorString(int err, char *buf, size_t len);\n+getErrorString(int err, char *buf, size_t len, ErrorOrigin origin);\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"jni_util.h\"\n@@ -139,1 +140,4 @@\n-\/* Reports a system error message to stderr or a window *\/\n+\/*\n+ * Just like JLI_ReportErrorMessage, except that it concatenates the system\n+ * error message, if any. See jni_util.h on usage of ErrorOrigin.\n+ *\/\n@@ -141,1 +145,1 @@\n-JLI_ReportErrorMessageSys(const char * message, ...);\n+JLI_ReportErrorMessageSys(ErrorOrigin origin, const char * message, ...);\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -866,1 +866,1 @@\n-        if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n+        if (pmsg && getLastErrorString(errbuf, sizeof(errbuf), SYSTEM) > 0)\n@@ -884,1 +884,1 @@\n-            if (pmsg && getLastErrorString(errbuf, sizeof(errbuf)) > 0)\n+            if (pmsg && getLastErrorString(errbuf, sizeof(errbuf), SYSTEM) > 0)\n@@ -1521,1 +1521,1 @@\n-                    getErrorString(errno, tmpbuf, sizeof(tmpbuf));\n+                    getErrorString(errno, tmpbuf, sizeof(tmpbuf), RUNTIME);\n@@ -1538,1 +1538,1 @@\n-                getErrorString(errno, tmpbuf, sizeof(tmpbuf));\n+                getErrorString(errno, tmpbuf, sizeof(tmpbuf), RUNTIME);\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-        int ret = getErrorString(errnum, tmpbuf, sizeof(tmpbuf));\n+        int ret = getErrorString(errnum, tmpbuf, sizeof(tmpbuf), RUNTIME);\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+\/* libc is part of the OS on Unix, so ErrorOrigin is ignored *\/\n@@ -64,1 +65,1 @@\n-getLastErrorString(char *buf, size_t len)\n+getLastErrorString(char *buf, size_t len, ErrorOrigin origin)\n@@ -67,1 +68,1 @@\n-    getErrorString(errno, buf, len);\n+    getErrorString(errno, buf, len, origin);\n@@ -71,0 +72,1 @@\n+\/* libc is part of the OS on Unix, so ErrorOrigin is ignored *\/\n@@ -72,1 +74,1 @@\n-getErrorString(int err, char *buf, size_t len)\n+getErrorString(int err, char *buf, size_t len, ErrorOrigin origin)\n","filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-                JLI_ReportErrorMessageSys(JRE_ERROR11);\n+                JLI_ReportErrorMessageSys(SYSTEM, JRE_ERROR11);\n@@ -460,1 +460,1 @@\n-        JLI_ReportErrorMessageSys(JRE_ERROR4, newexec);\n+        JLI_ReportErrorMessageSys(SYSTEM, JRE_ERROR4, newexec);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,0 +200,1 @@\n+\/* Ignore ErrorOrigin on Unix, libc is part of the OS *\/\n@@ -201,1 +202,1 @@\n-JLI_ReportErrorMessageSys(const char* fmt, ...) {\n+JLI_ReportErrorMessageSys(ErrorOrigin origin, const char* fmt, ...) {\n@@ -203,10 +204,0 @@\n-    char *emsg;\n-\n-    \/*\n-     * TODO: its safer to use strerror_r but is not available on\n-     * Solaris 8. Until then....\n-     *\/\n-    emsg = strerror(errno);\n-    if (emsg != NULL) {\n-        fprintf(stderr, \"%s\\n\", emsg);\n-    }\n@@ -216,0 +207,9 @@\n+    if (errno != 0) {\n+        char msg[1024];\n+\n+        if (strerror_r(errno, msg, 1024) == 0) {\n+            fprintf(stderr, \": %s\", msg);\n+        } else {\n+            fprintf(stderr, \": Java detected but could not determine the underlying error\");\n+        }\n+    }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-    getErrorString((int)errno, tmpbuf, sizeof(tmpbuf));\n+    getErrorString(error, tmpbuf, sizeof(tmpbuf), SYSTEM);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-getLastErrorString(char *buf, size_t len) {\n+getLastErrorString(char *buf, size_t len, ErrorOrigin origin) {\n@@ -69,1 +69,1 @@\n-    DWORD errval;\n+    int errval;\n@@ -71,18 +71,4 @@\n-    if ((errval = GetLastError()) != 0) {\n-        \/\/ DOS error\n-        size_t n = (size_t)FormatMessage(\n-                FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n-                NULL,\n-                errval,\n-                0,\n-                buf,\n-                (DWORD)len,\n-                NULL);\n-        if (n > 3) {\n-            \/\/ Drop final '.', CR, LF\n-            if (buf[n - 1] == '\\n') n--;\n-            if (buf[n - 1] == '\\r') n--;\n-            if (buf[n - 1] == '.') n--;\n-            buf[n] = '\\0';\n-        }\n-        return n;\n+    if (origin == SYSTEM) {\n+        errval = (int) GetLastError();\n+    } else if (origin == RUNTIME) {\n+        errval = errno;\n@@ -90,4 +76,3 @@\n-\n-    \/\/ C runtime error that has no corresponding DOS error code\n-    if (errno == 0 || len < 1) return 0;\n-    return strerror_s(buf, len, errno);\n+    if (errval == 0 || len < 1) return 0;\n+    getErrorString(errval, buf, len, origin);\n+    return strlen(buf);\n@@ -97,1 +82,1 @@\n-getErrorString(int err, char *buf, size_t len)\n+getErrorString(int err, char *buf, size_t len, ErrorOrigin origin)\n@@ -99,4 +84,26 @@\n-    int ret = 0;\n-    if (err == 0 || len < 1) return 0;\n-    ret = strerror_s(buf, len, err);\n-    return ret;\n+    if (origin == SYSTEM) {\n+        DWORD errval = (DWORD) err;\n+        if (errval != 0) {\n+            \/\/ DOS error\n+            size_t n = (size_t)FormatMessage(\n+                    FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n+                    NULL,\n+                    errval,\n+                    0,\n+                    buf,\n+                    (DWORD)len,\n+                    NULL);\n+            if (n > 3) {\n+                \/\/ Drop final '.', CR, LF\n+                if (buf[n - 1] == '\\n') n--;\n+                if (buf[n - 1] == '\\r') n--;\n+                if (buf[n - 1] == '.') n--;\n+                buf[n] = '\\0';\n+            }\n+            return n == 0 ? (int) GetLastError() : 0;\n+        }\n+    } else if (origin == RUNTIME) {\n+        if (errno == 0 || len < 1) return 0;\n+        return strerror_s(buf, len, errno);\n+    }\n+    return 0;\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":36,"deletions":29,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -608,5 +608,1 @@\n-\/*\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n- *\/\n+\n@@ -614,1 +610,1 @@\n-JLI_ReportErrorMessageSys(const char *fmt, ...)\n+JLI_ReportErrorMessageSys(ErrorOrigin origin, const char *fmt, ...)\n@@ -618,1 +614,0 @@\n-    int save_errno = errno;\n@@ -625,13 +620,19 @@\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n-        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"\";\n-            n = 0;\n-        } else {\n-            freeit = JNI_TRUE;\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n+    if (origin == SYSTEM) {\n+        if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n+                int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n+                    FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n+                    NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n+                if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n+                    char* buffer = \"Java detected but could not determine the underlying error\";\n+                    errtext = (char*) JLI_MemAlloc(strlen(buffer) + 1);\n+                    JLI_StrCpy(errtext, buffer);\n+                    n = 0;\n+                } else {\n+                    freeit = JNI_TRUE;\n+                    if (n > 3) {                                \/* Drop final CR, LF *\/\n+                        if (errtext[n - 1] == '\\n') n--;\n+                        if (errtext[n - 1] == '\\r') n--;\n+                        if (errtext[n - 1] == '.') n--;         \/* Drop '.' to match getErrorString *\/\n+                        errtext[n] = '\\0';\n+                    }\n+                }\n@@ -639,0 +640,6 @@\n+    } else if (origin == RUNTIME) {\n+        errtext = (char*) JLI_MemAlloc(1024);                   \/* Matches Unix buffer size *\/\n+        if(strerror_s(errtext, 1024, errno) != 0) {             \/* strerror_s isn't actually part of C11, neither is strerrlen_s... *\/\n+            char* buffer = \"Java detected but could not determine the underlying error\";\n+            errtext = (char*) JLI_MemRealloc(errtext, strlen(buffer) + 1);\n+            JLI_StrCpy(errtext, buffer);\n@@ -640,2 +647,0 @@\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n@@ -649,2 +654,2 @@\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n+        if (errtext != NULL) {\n+           mlen += 2 + (int)JLI_StrLen(errtext);\n@@ -655,1 +660,0 @@\n-        message[len]='\\0';\n@@ -657,2 +661,6 @@\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n+        if (errtext != NULL) {\n+            message[len] = ':';\n+            message[len + 1] = ' ';\n+            JLI_StrCat(message, errtext);\n+        } {\n+            message[len] = '\\0';\n@@ -667,2 +675,2 @@\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n+        if (errtext != NULL) {\n+           fprintf(stderr, \": %s\", errtext);\n@@ -670,0 +678,1 @@\n+        fprintf(stderr, \"\\n\");\n@@ -671,2 +680,6 @@\n-    if (freeit) {\n-        (void)LocalFree((HLOCAL)errtext);\n+    if (errtext != NULL) {\n+        if (freeit) {\n+            (void)LocalFree((HLOCAL)errtext);\n+        } else {\n+            free(errtext);\n+        }\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":44,"deletions":31,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    getLastErrorString(buffer, sizeof(buffer));\n+    getLastErrorString(buffer, sizeof(buffer), SYSTEM);\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/sadis.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}