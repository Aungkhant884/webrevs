{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            JLI_ReportErrorMessageSys(SYSTEM, \"error locating main entrypoint\");\n+            JLI_Perror(\"error locating main entrypoint\");\n@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(SYSTEM, \"Could not create main thread\");\n+        JLI_Perror(\"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(SYSTEM, \"pthread_detach() failed\");\n+        JLI_Perror(\"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"jni_util.h\"\n@@ -140,7 +139,0 @@\n-\/*\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message, if any. See jni_util.h on usage of ErrorOrigin.\n- *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(ErrorOrigin origin, const char * message, ...);\n-\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -84,0 +84,2 @@\n+#define JLI_Perror              perror\n+\n","filename":"src\/java.base\/share\/native\/libjli\/jli_util.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-                JLI_ReportErrorMessageSys(SYSTEM, JRE_ERROR11);\n+                JLI_Perror(JRE_ERROR11);\n@@ -460,1 +460,1 @@\n-        JLI_ReportErrorMessageSys(SYSTEM, JRE_ERROR4, newexec);\n+        JLI_Perror(JRE_ERROR4, newexec);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,20 +200,0 @@\n-\/* Ignore ErrorOrigin on Unix, libc is part of the OS *\/\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(ErrorOrigin origin, const char* fmt, ...) {\n-    va_list vl;\n-\n-    va_start(vl, fmt);\n-    vfprintf(stderr, fmt, vl);\n-    if (errno != 0) {\n-        char msg[1024];\n-\n-        if (strerror_r(errno, msg, 1024) == 0) {\n-            fprintf(stderr, \": %s\", msg);\n-        } else {\n-            fprintf(stderr, \": Java detected but could not determine the underlying error\");\n-        }\n-    }\n-    fprintf(stderr, \"\\n\");\n-    va_end(vl);\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -542,0 +542,17 @@\n+void writeWindowMessage(const char* format, ...) {\n+    va_list list;\n+    va_start(list, format);\n+    char *message;\n+\n+    \/* get the length of the string we need *\/\n+    int n = _vscprintf(format, list);\n+\n+    message = (char *) JLI_MemAlloc(n + 1);\n+    _vsnprintf(message, n, format, list);\n+    message[n]='\\0';\n+    MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n+        (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n+    JLI_MemFree(message);\n+    va_end(list);\n+}\n+\n@@ -608,82 +625,0 @@\n-\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(ErrorOrigin origin, const char *fmt, ...)\n-{\n-    va_list vl;\n-\n-    DWORD       errval;\n-    jboolean freeit = JNI_FALSE;\n-    char  *errtext = NULL;\n-\n-    va_start(vl, fmt);\n-\n-    if (origin == SYSTEM) {\n-        if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n-                int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-                    FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-                    NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-                if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-                    char* buffer = \"Java detected but could not determine the underlying error\";\n-                    errtext = (char*) JLI_MemAlloc(strlen(buffer) + 1);\n-                    JLI_StrCpy(errtext, buffer);\n-                    n = 0;\n-                } else {\n-                    freeit = JNI_TRUE;\n-                    if (n > 3) {                                \/* Drop final CR, LF *\/\n-                        if (errtext[n - 1] == '\\n') n--;\n-                        if (errtext[n - 1] == '\\r') n--;\n-                        if (errtext[n - 1] == '.') n--;         \/* Drop '.' to match getErrorString *\/\n-                        errtext[n] = '\\0';\n-                    }\n-                }\n-            }\n-    } else if (origin == RUNTIME) {\n-        errtext = (char*) JLI_MemAlloc(1024);                   \/* Matches Unix buffer size *\/\n-        if(strerror_s(errtext, 1024, errno) != 0) {             \/* strerror_s isn't actually part of C11, neither is strerrlen_s... *\/\n-            char* buffer = \"Java detected but could not determine the underlying error\";\n-            errtext = (char*) JLI_MemRealloc(errtext, strlen(buffer) + 1);\n-            JLI_StrCpy(errtext, buffer);\n-        }\n-    }\n-\n-    if (IsJavaw()) {\n-        char *message;\n-        int mlen;\n-        \/* get the length of the string we need *\/\n-        int len = mlen =  _vscprintf(fmt, vl) + 1;\n-        if (errtext != NULL) {\n-           mlen += 2 + (int)JLI_StrLen(errtext);\n-        }\n-\n-        message = (char *)JLI_MemAlloc(mlen);\n-        _vsnprintf(message, len, fmt, vl);\n-\n-        if (errtext != NULL) {\n-            message[len] = ':';\n-            message[len + 1] = ' ';\n-            JLI_StrCat(message, errtext);\n-        } {\n-            message[len] = '\\0';\n-        }\n-\n-        MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n-            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n-\n-        JLI_MemFree(message);\n-    } else {\n-        vfprintf(stderr, fmt, vl);\n-        if (errtext != NULL) {\n-           fprintf(stderr, \": %s\", errtext);\n-        }\n-        fprintf(stderr, \"\\n\");\n-    }\n-    if (errtext != NULL) {\n-        if (freeit) {\n-            (void)LocalFree((HLOCAL)errtext);\n-        } else {\n-            free(errtext);\n-        }\n-    }\n-    va_end(vl);\n-}\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":17,"deletions":82,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * Function prototypes.\n+ * Utility declarations.\n@@ -48,0 +48,2 @@\n+void writeWindowMessage(const char* message, ...);\n+\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}