{"files":[{"patch":"@@ -608,0 +608,5 @@\n+\/*\n+ * Because Windows API errors and regular errno errors can exist at the same time,\n+ * compromise and error out when both are present. Windows code should ideally clear\n+ * the last error before a call that sets either of these!\n+ *\/\n@@ -609,1 +614,1 @@\n-JLI_ReportErrorMessageWin32(const char *fmt, ...)\n+JLI_ReportErrorMessageSys(const char *fmt, ...)\n@@ -612,1 +617,0 @@\n-\n@@ -616,0 +620,6 @@\n+    const char* const errconflict = \"Java detected conflicting Windows and C Runtime errors and is unable to provide an accurate report\";\n+    const char* const winerrcannotresolve = \"Java could not determine the native Windows error\";\n+\n+    \/* C runtime error that has no corresponding DOS error code *\/\n+    errtext = strerror(errno);\n+\n@@ -617,0 +627,1 @@\n+\n@@ -619,6 +630,2 @@\n-        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n-            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"Java could not determine the native Windows error\";\n-            n = 0;\n+        if(errtext != NULL) {\n+        \terrtext = errconflict;\n@@ -626,4 +633,12 @@\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n+            int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|\n+                FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n+                NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n+            if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n+                errtext = winerrcannotresolve;\n+                n = 0;\n+            } else {\n+                if (n > 2) {                                \/* Drop final CR, LF *\/\n+                    if (errtext[n - 1] == '\\n') n--;\n+                    if (errtext[n - 1] == '\\r') n--;\n+                    errtext[n] = '\\0';\n+                }\n@@ -659,47 +674,0 @@\n-        vfprintf(stderr, fmt, vl);\n-        if (errtext != NULL) {\n-           fprintf(stderr, \": %s\", errtext);\n-        }\n-        fprintf(stderr, \"\\n\");\n-    }\n-    if (errtext != NULL) {\n-        (void)LocalFree((HLOCAL)errtext);\n-    }\n-    va_end(vl);\n-}\n-\n-JNIEXPORT void JNICALL\n-JLI_ReportErrorMessageSys(const char *fmt, ...)\n-{\n-    va_list vl;\n-\n-    \/* C runtime error that has no corresponding DOS error code *\/\n-    char  *errtext = strerror(errno);\n-\n-    va_start(vl, fmt);\n-\n-    if (IsJavaw()) {\n-        char *message;\n-        int mlen;\n-        \/* get the length of the string we need *\/\n-        int len = mlen =  _vscprintf(fmt, vl) + 1;\n-        if (errtext != NULL) {\n-           mlen += 1 + (int)JLI_StrLen(errtext);\n-        }\n-\n-        message = (char *)JLI_MemAlloc(mlen);\n-        _vsnprintf(message, len, fmt, vl);\n-\n-        if (errtext != NULL) {\n-            message[len] = ':';\n-            message[len + 1] = ' ';\n-            JLI_StrCat(message, errtext);\n-        } else {\n-            message[len]='\\0';\n-        }\n-\n-        MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n-            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n-\n-        JLI_MemFree(message);\n-    } else {\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":27,"deletions":59,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -50,6 +50,0 @@\n-\/*\n- * Windows API calls are entirely separate from the regular errors that errno can\n- * record\n- *\/\n-JNIEXPORT void JNICALL JLI_ReportErrorMessageWin32(const char *fmt, ...);\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}