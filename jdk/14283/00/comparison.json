{"files":[{"patch":"@@ -165,1 +165,1 @@\n-#if defined(_ALLBSD_SOURCE) || defined(_GNU_SOURCE)\n+#if (defined(_ALLBSD_SOURCE) || defined(_GNU_SOURCE)) && !defined(AIX)\n@@ -881,2 +881,2 @@\n-    if (have_function_name = is_function_descriptor =\n-        dll_address_to_function_name(addr2, p, buflen, &offset, demangle)) {\n+    if ((have_function_name = is_function_descriptor =\n+        dll_address_to_function_name(addr2, p, buflen, &offset, demangle))) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include <alloca.h>\n@@ -41,0 +42,9 @@\n+\/\/ In stdlib.h on AIX malloc is defined as a macro causing\n+\/\/ compiler errors when resolving them in different depths as it\n+\/\/ happens in the log tags. This avoids the macro.\n+#if (defined(__VEC__) || defined(__AIXVEC)) && defined(AIX) \\\n+    && defined(__open_xl_version__) && __open_xl_version__ >= 17\n+  #undef malloc\n+  extern void *malloc(size_t) asm(\"vec_malloc\");\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_xlc.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}