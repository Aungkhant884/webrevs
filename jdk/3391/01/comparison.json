{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,0 +224,3 @@\n+        if ((tag & 0x1f) == 0x1f) {\n+            throw new IllegalArgumentException(\"Tag number cannot be 31\");\n+        }\n@@ -318,0 +321,3 @@\n+        if ((tag & 0x1f) == 0x1f) {\n+            throw new IOException(\"Tag number cannot exceed 30\");\n+        }\n@@ -391,0 +397,3 @@\n+        if ((tag & 0x1f) == 0x1f) {\n+            throw new IOException(\"Tag number cannot exceed 30\");\n+        }\n@@ -1143,0 +1152,3 @@\n+        if (val < 0 || val > 30) {\n+            throw new IllegalArgumentException(\"Tag number cannot exceed 30\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerValue.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264864\n+ * @summary Multiple byte tag not supported by ASN.1 encoding\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import sun.security.util.DerInputStream;\n+import sun.security.util.DerValue;\n+\n+import java.io.IOException;\n+\n+public class WideTag {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Small ones\n+        DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)30);\n+        DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0);\n+\n+        \/\/ Big ones\n+        Utils.runAndCheckException(\n+                () -> DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)31),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)222),\n+                IllegalArgumentException.class);\n+\n+        \/\/ We don't accept number 31\n+        Utils.runAndCheckException(() -> new DerValue((byte)0xbf, new byte[10]),\n+                IllegalArgumentException.class);\n+\n+        \/\/ CONTEXT [98] size 97. Not supported. Should fail.\n+        \/\/ Before this fix, it was interpreted as CONTEXT [31] size 98.\n+        byte[] wideDER = new byte[100];\n+        wideDER[0] = (byte)0xBF;\n+        wideDER[1] = (byte)98;\n+        wideDER[2] = (byte)97;\n+\n+        Utils.runAndCheckException(() -> new DerValue(wideDER),\n+                IOException.class);\n+        Utils.runAndCheckException(() -> new DerInputStream(wideDER).getDerValue(),\n+                IOException.class);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/DerValue\/WideTag.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}