{"files":[{"patch":"@@ -102,1 +102,1 @@\n-  _elems(ArrayAllocator<E>::allocate(N, F)),\n+  _elems(MallocArrayAllocator<E>::allocate(N, F)),\n@@ -108,1 +108,1 @@\n-  ArrayAllocator<E>::free(_elems, N);\n+  MallocArrayAllocator<E>::free(_elems);\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -619,26 +619,0 @@\n-\/\/ Helper class to allocate arrays that may become large.\n-\/\/ Uses the OS malloc for allocations smaller than ArrayAllocatorMallocLimit\n-\/\/ and uses mapped memory for larger allocations.\n-\/\/ Most OS mallocs do something similar but Solaris malloc does not revert\n-\/\/ to mapped memory for large allocations. By default ArrayAllocatorMallocLimit\n-\/\/ is set so that we always use malloc except for Solaris where we set the\n-\/\/ limit to get mapped memory.\n-template <class E>\n-class ArrayAllocator : public AllStatic {\n- private:\n-  static bool should_use_malloc(size_t length);\n-\n-  static E* allocate_malloc(size_t length, MEMFLAGS flags);\n-  static E* allocate_mmap(size_t length, MEMFLAGS flags);\n-\n-  static E* reallocate_malloc(E* addr, size_t new_length, MEMFLAGS flags);\n-\n-  static void free_malloc(E* addr, size_t length);\n-  static void free_mmap(E* addr, size_t length);\n-\n- public:\n-  static E* allocate(size_t length, MEMFLAGS flags);\n-  static E* reallocate(E* old_addr, size_t old_length, size_t new_length, MEMFLAGS flags);\n-  static void free(E* addr, size_t length);\n-};\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -114,71 +114,0 @@\n-template <class E>\n-bool ArrayAllocator<E>::should_use_malloc(size_t length) {\n-  return MallocArrayAllocator<E>::size_for(length) < ArrayAllocatorMallocLimit;\n-}\n-\n-template <class E>\n-E* ArrayAllocator<E>::allocate_malloc(size_t length, MEMFLAGS flags) {\n-  return MallocArrayAllocator<E>::allocate(length, flags);\n-}\n-\n-template <class E>\n-E* ArrayAllocator<E>::allocate_mmap(size_t length, MEMFLAGS flags) {\n-  return MmapArrayAllocator<E>::allocate(length, flags);\n-}\n-\n-template <class E>\n-E* ArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n-  if (should_use_malloc(length)) {\n-    return allocate_malloc(length, flags);\n-  }\n-\n-  return allocate_mmap(length, flags);\n-}\n-\n-template <class E>\n-E* ArrayAllocator<E>::reallocate_malloc(E* addr, size_t new_length, MEMFLAGS flags) {\n-  return MallocArrayAllocator<E>::reallocate(addr, new_length, flags);\n-}\n-\n-template <class E>\n-E* ArrayAllocator<E>::reallocate(E* old_addr, size_t old_length, size_t new_length, MEMFLAGS flags) {\n-  if (should_use_malloc(old_length) && should_use_malloc(new_length)) {\n-    return reallocate_malloc(old_addr, new_length, flags);\n-  }\n-\n-  E* new_addr = (new_length > 0)\n-      ? allocate(new_length, flags)\n-      : nullptr;\n-\n-  if (new_addr != nullptr && old_addr != nullptr) {\n-    memcpy(new_addr, old_addr, MIN2(old_length, new_length) * sizeof(E));\n-  }\n-\n-  if (old_addr != nullptr) {\n-    free(old_addr, old_length);\n-  }\n-\n-  return new_addr;\n-}\n-\n-template <class E>\n-void ArrayAllocator<E>::free_malloc(E* addr, size_t length) {\n-  MallocArrayAllocator<E>::free(addr);\n-}\n-\n-template <class E>\n-void ArrayAllocator<E>::free_mmap(E* addr, size_t length) {\n-  MmapArrayAllocator<E>::free(addr, length);\n-}\n-\n-template <class E>\n-void ArrayAllocator<E>::free(E* addr, size_t length) {\n-  if (addr != nullptr) {\n-    if (should_use_malloc(length)) {\n-      free_malloc(addr, length);\n-    } else {\n-      free_mmap(addr, length);\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":0,"deletions":71,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1895,4 +1895,0 @@\n-  product(size_t, ArrayAllocatorMallocLimit, SIZE_MAX, EXPERIMENTAL,        \\\n-          \"Allocation less than this value will be allocated \"              \\\n-          \"using malloc. Larger allocations will use mmap.\")                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  return ArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n+  return MallocArrayAllocator<bm_word_t>::allocate(size_in_words, _flags);\n@@ -141,0 +141,2 @@\n+\/\/ GrowableBitMap<T>::resize uses free(ptr, size) for T as CHeapBitMap, ArenaBitMap and ResourceBitMap allocators.\n+\/\/ The free(ptr, size) signature is kept but the size parameter is ignored.\n@@ -142,1 +144,1 @@\n-  ArrayAllocator<bm_word_t>::free(map, size_in_words);\n+  MallocArrayAllocator<bm_word_t>::free(map);\n@@ -146,1 +148,1 @@\n-  return ArrayAllocator<bm_word_t>::reallocate(map, old_size_in_words, new_size_in_words, _flags);\n+  return MallocArrayAllocator<bm_word_t>::reallocate(map, new_size_in_words, _flags);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc.arguments;\n-\n-\/*\n- * @test TestArrayAllocatorMallocLimit\n- * @summary Sanity check that the ArrayAllocatorMallocLimit flag can be set.\n- * The test helps verifying that size_t flags can be set\/read.\n- * @bug 8054823\n- * @library \/test\/lib\n- * @library \/\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver gc.arguments.TestArrayAllocatorMallocLimit\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import java.math.BigInteger;\n-\n-public class TestArrayAllocatorMallocLimit {\n-  public static void main(String [] args) throws Exception {\n-    testDefaultValue();\n-    testSetValue();\n-  }\n-\n-  private static final String flagName = \"ArrayAllocatorMallocLimit\";\n-\n-  \/\/     size_t ArrayAllocatorMallocLimit                 = 18446744073709551615{experimental}\n-  private static final String printFlagsFinalPattern = \" *size_t *\" + flagName + \" *:?= *(\\\\d+) *\\\\{experimental\\\\} *\";\n-\n-  public static void testDefaultValue()  throws Exception {\n-    ProcessBuilder pb = GCArguments.createTestJvm(\n-      \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+PrintFlagsFinal\", \"-version\");\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-    String value = output.firstMatch(printFlagsFinalPattern, 1);\n-\n-    try {\n-      Asserts.assertNotNull(value, \"Couldn't find size_t flag \" + flagName);\n-\n-      \/\/ A size_t is not always parseable with Long.parseValue,\n-      \/\/ use BigInteger instead.\n-      BigInteger biValue = new BigInteger(value);\n-\n-      \/\/ Sanity check that we got a non-zero value.\n-      Asserts.assertNotEquals(biValue, \"0\");\n-\n-      output.shouldHaveExitValue(0);\n-    } catch (Exception e) {\n-      System.err.println(output.getOutput());\n-      throw e;\n-    }\n-  }\n-\n-  public static void testSetValue() throws Exception {\n-    long flagValue = 2048;\n-\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n-      \"-XX:+UnlockExperimentalVMOptions\", \"-XX:\" + flagName + \"=\" + flagValue, \"-XX:+PrintFlagsFinal\", \"-version\");\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-    String value = output.firstMatch(printFlagsFinalPattern, 1);\n-\n-    try {\n-      Asserts.assertNotNull(\"Couldn't find size_t flag \" + flagName);\n-\n-      long longValue = Long.parseLong(value);\n-\n-      Asserts.assertEquals(longValue, flagValue);\n-\n-      output.shouldHaveExitValue(0);\n-    } catch (Exception e) {\n-      System.err.println(output.getOutput());\n-      throw e;\n-    }\n-  }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestArrayAllocatorMallocLimit.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,1 @@\n-    testGetFlag(\"ArrayAllocatorMallocLimit\", \"128\");\n-    \/\/ testSetFlag(\"ArrayAllocatorMallocLimit\", \"64\", \"128\");\n+    testGetFlag(\"StringDeduplicationCleanupDeadMinimum\", \"128\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/AttachSetGetFlag.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    private static final String FLAG_NAME = \"ArrayAllocatorMallocLimit\";\n+    private static final String FLAG_NAME = \"StringDeduplicationCleanupDeadMinimum\";\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/SizeTTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}