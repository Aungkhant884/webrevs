{"files":[{"patch":"@@ -76,0 +76,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -293,1 +294,1 @@\n-            pending.abort(new IOException(\"selector manager closed\"));\n+            pending.abort(client.selmgr.selectorClosedException());\n@@ -517,1 +518,1 @@\n-        IOException io = new IOException(\"selector manager closed\");\n+        IOException io = selmgr.selectorClosedException();\n@@ -534,1 +535,1 @@\n-        subscriber.onError(new IOException(\"selector manager closed\"));\n+        subscriber.onError(selmgr.selectorClosedException());\n@@ -872,1 +873,1 @@\n-            return MinimalFuture.failedFuture(new IOException(\"selector manager closed\"));\n+            return MinimalFuture.failedFuture(selmgr.selectorClosedException());\n@@ -969,2 +970,3 @@\n-        HttpClientImpl owner;\n-        ConnectionPool pool;\n+        private final HttpClientImpl owner;\n+        private final ConnectionPool pool;\n+        private final AtomicReference<Throwable> errorRef = new AtomicReference<>();\n@@ -985,0 +987,9 @@\n+        IOException selectorClosedException() {\n+            var io = new IOException(\"selector manager closed\");\n+            var cause = errorRef.get();\n+            if (cause != null) {\n+                io.initCause(cause);\n+            }\n+            return io;\n+        }\n+\n@@ -1008,1 +1019,1 @@\n-            if (closed) e.abort(new IOException(\"selector closed\"));\n+            if (closed) e.abort(selectorClosedException());\n@@ -1026,1 +1037,11 @@\n-            abortPendingRequests(owner, t);\n+            boolean closed = this.closed;\n+            errorRef.compareAndSet(null, t);\n+            if (debug.on()) {\n+                debug.log(\"aborting selector manager(closed=%s): \" + t, closed);\n+            }\n+            t = errorRef.get();\n+            boolean inSelectorThread = owner.isSelectorThread();\n+            if (!inSelectorThread) {\n+                \/\/ abort anything pending, then close\n+                abortPendingRequests(owner, t);\n+            }\n@@ -1030,2 +1051,2 @@\n-                if (closed) return;\n-                closed = true;\n+                if (closed = this.closed) return;\n+                this.closed = true;\n@@ -1042,0 +1063,1 @@\n+            \/\/ double check after closing\n@@ -1045,1 +1067,1 @@\n-                    ? null : new IOException(\"selector closed\", t);\n+                    ? null : selectorClosedException();\n@@ -1053,5 +1075,1 @@\n-            try {\n-                selector.close();\n-            } catch (IOException x) {\n-                debug.log(\"Failed to close selector: \" + x);\n-            }\n+            if (!inSelectorThread) selector.wakeup();\n@@ -1117,1 +1135,1 @@\n-                                    throw new IOException(\"Channel closed\");\n+                                    throw new ClosedChannelException();\n@@ -1236,1 +1254,2 @@\n-                    readyList.forEach((e) -> handleEvent(e, null));\n+                    IOException ioe = closed ? selectorClosedException() : null;\n+                    readyList.forEach((e) -> handleEvent(e, ioe));\n@@ -1249,0 +1268,1 @@\n+                errorRef.compareAndSet(null, e);\n@@ -1256,1 +1276,1 @@\n-                abortPendingRequests(owner, e);\n+                abortPendingRequests(owner, selectorClosedException());\n@@ -1284,2 +1304,4 @@\n-            if (closed || ioe != null) {\n-                if (ioe == null) ioe = new IOException(\"selector manager closed\");\n+            if (ioe == null && closed) {\n+                ioe = selectorClosedException();\n+            }\n+            if (ioe != null) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":43,"deletions":21,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -581,2 +581,6 @@\n-            closedExceptionally = t;\n-            onComplete.accept(t);\n+            if (contentLength != 0) {\n+                closedExceptionally = t;\n+                onComplete.accept(t);\n+            } else {\n+                onComplete.accept(null);\n+            }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseContent.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import java.nio.channels.ClosedChannelException;\n@@ -139,0 +140,23 @@\n+    static void checkCause(String what, Throwable cause) {\n+        Throwable t = cause;\n+        Throwable accepted = null;\n+        while (t != null) {\n+            out.println(what + \": checking \" + t);\n+            if (t instanceof  RejectedExecutionException) {\n+                out.println(what + \": Got expected RejectedExecutionException in cause: \" + t);\n+                return;\n+            } else if (t instanceof ClosedChannelException) {\n+                out.println(what + \": Accepting ClosedChannelException as a valid cause: \" + t);\n+                accepted = t;\n+            }\n+            t = t.getCause();\n+        }\n+        if (accepted != null) {\n+            out.println(what + \": Didn't find expected RejectedExecutionException, \" +\n+                    \"but accepting \" + t.getClass().getSimpleName()\n+                    + \" as a valid cause: \" + t);\n+            return;\n+        }\n+        throw new AssertionError(what + \": Unexpected exception: \" + cause, cause);\n+    }\n+\n@@ -197,25 +221,1 @@\n-                    if (!RejectedExecutionException.class.isAssignableFrom(cause.getClass())) {\n-                        if (SSLHandshakeException.class.isAssignableFrom(cause.getClass())) {\n-                            if (!(cause.getCause() instanceof RejectedExecutionException)) {\n-                                out.println(si + \": Unexpected exception: \" + cause);\n-                                cause.printStackTrace(out);\n-                                cause = cause.getCause() == null ? cause : cause.getCause();\n-                                assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                            } else {\n-                                out.println(si + \": Got expected cause: \" + cause.getCause());\n-                            }\n-                        } else if (!IOException.class.isAssignableFrom(cause.getClass())) {\n-                            out.println(si + \": Unexpected exception: \" + cause);\n-                            cause.printStackTrace(out);\n-                            assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                        } else if (!cause.getMessage().contains(\"closed\")) {\n-                            if (cause.getCause() instanceof RejectedExecutionException) {\n-                                out.println(si + \": Got expected cause: \" + cause.getCause());\n-                            } else {\n-                                out.println(si + \": Unexpected exception: \" + cause);\n-                                cause.printStackTrace(out);\n-                                throw new AssertionError(\n-                                        si + \": Unexpected exception message in: \" + cause);\n-                            }\n-                        }\n-                    }\n+                    checkCause(String.valueOf(si), cause);\n@@ -296,25 +296,1 @@\n-                            if (!RejectedExecutionException.class.isAssignableFrom(cause.getClass())) {\n-                                if (SSLHandshakeException.class.isAssignableFrom(cause.getClass())) {\n-                                    if (!(cause.getCause() instanceof RejectedExecutionException)) {\n-                                        out.println(si + \": Unexpected exception: \" + cause);\n-                                        cause.printStackTrace(out);\n-                                        cause = cause.getCause() == null ? cause : cause.getCause();\n-                                        assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                                    } else {\n-                                        out.println(si + \": Got expected cause: \" + cause.getCause());\n-                                    }\n-                                } else if (!IOException.class.isAssignableFrom(cause.getClass())) {\n-                                    out.println(si + \": Unexpected exception: \" + cause);\n-                                    cause.printStackTrace(out);\n-                                    assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                                } else if (!cause.getMessage().contains(\"closed\")) {\n-                                    if (cause.getCause() instanceof RejectedExecutionException) {\n-                                        out.println(si + \": Got expected cause: \" + cause.getCause());\n-                                    } else {\n-                                        out.println(si + \": Unexpected exception: \" + cause);\n-                                        cause.printStackTrace(out);\n-                                        throw new AssertionError(\n-                                                si + \": Unexpected exception message in: \" + cause);\n-                                    }\n-                                }\n-                            }\n+                            checkCause(String.valueOf(si), cause);\n","filename":"test\/jdk\/java\/net\/httpclient\/AsyncExecutorShutdown.java","additions":26,"deletions":50,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import java.nio.channels.ClosedChannelException;\n@@ -127,0 +128,23 @@\n+    static void checkCause(String what, Throwable cause) {\n+        Throwable t = cause;\n+        Throwable accepted = null;\n+        while (t != null) {\n+            out.println(what + \": checking \" + t);\n+            if (t instanceof  RejectedExecutionException) {\n+                out.println(what + \": Got expected RejectedExecutionException in cause: \" + t);\n+                return;\n+            } else if (t instanceof ClosedChannelException) {\n+                out.println(what + \": Accepting ClosedChannelException as a valid cause: \" + t);\n+                accepted = t;\n+            }\n+            t = t.getCause();\n+        }\n+        if (accepted != null) {\n+            out.println(what + \": Didn't find expected RejectedExecutionException, \" +\n+                    \"but accepting \" + t.getClass().getSimpleName()\n+                    + \" as a valid cause: \" + t);\n+            return;\n+        }\n+        throw new AssertionError(what + \": Unexpected exception: \" + cause, cause);\n+    }\n+\n@@ -175,20 +199,1 @@\n-                    if (!RejectedExecutionException.class.isAssignableFrom(cause.getClass())) {\n-                        if (SSLHandshakeException.class.isAssignableFrom(cause.getClass())) {\n-                            if (!(cause.getCause() instanceof RejectedExecutionException)) {\n-                                out.println(si + \": Unexpected exception: \" + cause);\n-                                cause.printStackTrace(out);\n-                                cause = cause.getCause() == null ? cause : cause.getCause();\n-                                assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                            } else {\n-                                out.println(si + \": Got expected cause: \" + cause.getCause());\n-                            }\n-                        } else if (!IOException.class.isAssignableFrom(cause.getClass())) {\n-                            out.println(si + \": Unexpected exception: \" + cause);\n-                            cause.printStackTrace(out);\n-                            assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                        } else if (!cause.getMessage().contains(\"selector manager closed\")) {\n-                            out.println(si + \": Unexpected exception: \" + cause);\n-                            cause.printStackTrace(out);\n-                            throw new AssertionError(si + \": Unexpected exception message in: \" + cause);\n-                        }\n-                    }\n+                    checkCause(String.valueOf(si), cause);\n@@ -256,21 +261,2 @@\n-                            if (!RejectedExecutionException.class.isAssignableFrom(cause.getClass())) {\n-                                if (SSLHandshakeException.class.isAssignableFrom(cause.getClass())) {\n-                                    if (!(cause.getCause() instanceof RejectedExecutionException)) {\n-                                        out.println(si + \": Unexpected exception: \" + cause);\n-                                        cause.printStackTrace(out);\n-                                        cause = cause.getCause() == null ? cause : cause.getCause();\n-                                        assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                                    } else {\n-                                        out.println(si + \": Got expected cause: \" + cause.getCause());\n-                                    }\n-                                } else if (!IOException.class.isAssignableFrom(cause.getClass())) {\n-                                    out.println(si + \": Unexpected exception: \" + cause);\n-                                    cause.printStackTrace(out);\n-                                    assertEquals(cause.getClass(), RejectedExecutionException.class);\n-                                } else if (!cause.getMessage().contains(\"selector manager closed\")) {\n-                                    out.println(si + \": Unexpected exception: \" + cause);\n-                                    cause.printStackTrace(out);\n-                                    throw new AssertionError(si + \": Unexpected exception message in: \" + cause);\n-                                }\n-                            }\n-                        } catch (Throwable ase) {\n+                            checkCause(String.valueOf(si), cause);\n+                         } catch (Throwable ase) {\n","filename":"test\/jdk\/java\/net\/httpclient\/ExecutorShutdown.java","additions":27,"deletions":41,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.management.ManagementFactory;\n@@ -28,0 +29,1 @@\n+import java.util.Arrays;\n@@ -178,1 +180,3 @@\n-            Thread.dumpStack();\n+            Arrays.stream(ManagementFactory.getThreadMXBean()\n+                    .dumpAllThreads(true, true))\n+                    .forEach(System.err::println);\n","filename":"test\/jdk\/java\/net\/httpclient\/ReferenceTracker.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    final Map<InetSocketAddress,Http2TestServerConnection> connections;\n+    final Set<Http2TestServerConnection> connections;\n@@ -194,1 +194,1 @@\n-        this.connections = new ConcurrentHashMap<>();\n+        this.connections = ConcurrentHashMap.newKeySet();\n@@ -248,1 +248,1 @@\n-        for (Http2TestServerConnection connection : connections.values()) {\n+        for (Http2TestServerConnection connection : connections) {\n@@ -285,1 +285,1 @@\n-            connections.put(addr, c);\n+            connections.add(c);\n@@ -289,1 +289,1 @@\n-        connections.remove(addr, c);\n+        connections.remove(c);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}