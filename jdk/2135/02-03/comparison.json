{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import java.nio.file.Files;\n@@ -35,1 +34,1 @@\n- * Tests the overheads of I\/O API.\n+ * Tests the overheads of creating File objects, and converting such objects to Paths.\n@@ -95,42 +94,26 @@\n-    \/**\n-     * Examine overheads of converting Files to Paths\n-     *\/\n-    @BenchmarkMode(Mode.AverageTime)\n-    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n-    @State(Scope.Thread)\n-    @Warmup(time=2, iterations=5)\n-    @Measurement(time=3, iterations=5)\n-    @Fork(value=2, jvmArgs=\"-Xmx1g\")\n-    public static class ToPath {\n-        private String normalFile = \"\/test\/dir\/file\/name.txt\";\n-        private String root = \"\/\";\n-        private String trailingSlash = \"\/test\/dir\/file\/name.txt\/\";\n-        private String notNormalizedFile = \"\/test\/dir\/file\/\/name.txt\";\n-\n-        @Benchmark\n-        public void mix(Blackhole bh)  {\n-            bh.consume(new File(normalFile).toPath());\n-            bh.consume(new File(root).toPath());\n-            bh.consume(new File(trailingSlash).toPath());\n-            bh.consume(new File(notNormalizedFile).toPath());\n-        }\n-\n-        @Benchmark\n-        public Path normalized() {\n-            return new File(normalFile).toPath();\n-        }\n-\n-        @Benchmark\n-        public File root() {\n-            return new File(root);\n-        }\n-\n-        @Benchmark\n-        public Path trailingSlash() {\n-            return new File(trailingSlash).toPath();\n-        }\n-\n-        @Benchmark\n-        public Path notNormalized() {\n-            return new File(notNormalizedFile).toPath();\n-        }\n+    @Benchmark\n+    public void mixToPath(Blackhole bh)  {\n+        bh.consume(new File(normalFile).toPath());\n+        bh.consume(new File(root).toPath());\n+        bh.consume(new File(trailingSlash).toPath());\n+        bh.consume(new File(notNormalizedFile).toPath());\n+    }\n+\n+    @Benchmark\n+    public Path normalizedToPath() {\n+        return new File(normalFile).toPath();\n+    }\n+\n+    @Benchmark\n+    public Path rootToPath() {\n+        return new File(root).toPath();\n+    }\n+\n+    @Benchmark\n+    public Path trailingSlashToPath() {\n+        return new File(trailingSlash).toPath();\n+    }\n+\n+    @Benchmark\n+    public Path notNormalizedToPath() {\n+        return new File(notNormalizedFile).toPath();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/FileOpen.java","additions":27,"deletions":44,"binary":false,"changes":71,"status":"modified"}]}