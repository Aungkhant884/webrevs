{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.nio.file.Path;\n@@ -37,1 +38,1 @@\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -44,4 +45,4 @@\n-    public String normalFile = \"\/test\/dir\/file\/name.txt\";\n-    public String root = \"\/\";\n-    public String trailingSlash = \"\/test\/dir\/file\/name.txt\/\";\n-    public String notNormalizedFile = \"\/test\/dir\/file\/\/name.txt\";\n+    private String normalFile = \"\/test\/dir\/file\/name.txt\";\n+    private String root = \"\/\";\n+    private String trailingSlash = \"\/test\/dir\/file\/name.txt\/\";\n+    private String notNormalizedFile = \"\/test\/dir\/file\/\/name.txt\";\n@@ -71,0 +72,5 @@\n+    @Benchmark\n+    public File root() {\n+        return new File(root);\n+    }\n+\n@@ -88,0 +94,44 @@\n+\n+    \/**\n+     * Examine overheads of converting Files to Paths\n+     *\/\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    @State(Scope.Thread)\n+    @Warmup(time=2, iterations=5)\n+    @Measurement(time=3, iterations=5)\n+    @Fork(value=2, jvmArgs=\"-Xmx1g\")\n+    public static class ToPath {\n+        private String normalFile = \"\/test\/dir\/file\/name.txt\";\n+        private String root = \"\/\";\n+        private String trailingSlash = \"\/test\/dir\/file\/name.txt\/\";\n+        private String notNormalizedFile = \"\/test\/dir\/file\/\/name.txt\";\n+\n+        @Benchmark\n+        public void mix(Blackhole bh)  {\n+            bh.consume(new File(normalFile).toPath());\n+            bh.consume(new File(root).toPath());\n+            bh.consume(new File(trailingSlash).toPath());\n+            bh.consume(new File(notNormalizedFile).toPath());\n+        }\n+\n+        @Benchmark\n+        public Path normalized() {\n+            return new File(normalFile).toPath();\n+        }\n+\n+        @Benchmark\n+        public File root() {\n+            return new File(root);\n+        }\n+\n+        @Benchmark\n+        public Path trailingSlash() {\n+            return new File(trailingSlash).toPath();\n+        }\n+\n+        @Benchmark\n+        public Path notNormalized() {\n+            return new File(notNormalizedFile).toPath();\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/FileOpen.java","additions":56,"deletions":6,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.io;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Tests the overheads of creating Paths from a File.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(time=2, iterations=5)\n-@Measurement(time=3, iterations=5)\n-@Fork(value=3, jvmArgs=\"-Xmx1g\")\n-public class FileToPath {\n-\n-    public String normalFile = \"\/test\/dir\/file\/name.txt\";\n-    public String root = \"\/\";\n-    public String trailingSlash = \"\/test\/dir\/file\/name.txt\/\";\n-    public String notNormalizedFile = \"\/test\/dir\/file\/\/name.txt\";\n-\n-\n-    @Benchmark\n-    public void mix(Blackhole bh)  {\n-        bh.consume(new File(normalFile).toPath());\n-        bh.consume(new File(trailingSlash).toPath());\n-        bh.consume(new File(root).toPath());\n-        bh.consume(new File(notNormalizedFile).toPath());\n-    }\n-\n-    @Benchmark\n-    public Path normalized() {\n-        return new File(normalFile).toPath();\n-    }\n-\n-    @Benchmark\n-    public Path trailingSlash() {\n-        return new File(trailingSlash).toPath();\n-    }\n-\n-    @Benchmark\n-    public Path notNormalized() {\n-        return new File(notNormalizedFile).toPath();\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/FileToPath.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}