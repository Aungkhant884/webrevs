{"files":[{"patch":"@@ -38,0 +38,1 @@\n+\/\/ ENABLE_IF_PARAM(Condition...)\n@@ -39,2 +40,7 @@\n-\/\/ This macro can be used in a function template parameter list to control\n-\/\/ the presence of that overload via SFINAE.\n+\/\/ The ENABLE_IF macro can be used in a function template parameter list to\n+\/\/ control the presence of that overload via SFINAE.\n+\/\/\n+\/\/ When the declaration and definition of a function template are separate,\n+\/\/ only the declaration can use ENABLE_IF in the template parameter list.\n+\/\/ The definition should instead use ENABLE_IF_PARAM with the same Condition\n+\/\/ for the corresponding template parameter.\n@@ -104,0 +110,3 @@\n+\/\/\n+\/\/ The expansion of ENABLE_IF doesn't use ENABLE_IF_PARAM because of issues\n+\/\/ with the Visual Studio preprocessor's handling of variadic macros.\n@@ -108,0 +117,3 @@\n+#define ENABLE_IF_PARAM(...) \\\n+  std::enable_if_t<bool(__VA_ARGS__), int>\n+\n","filename":"src\/hotspot\/share\/metaprogramming\/enableIf.hpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -29,0 +29,2 @@\n+#include <type_traits>\n+#include \"unittest.hpp\"\n@@ -30,1 +32,1 @@\n-class EnableIfTest {\n+class EnableIfTest: AllStatic {\n@@ -45,0 +47,17 @@\n+\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+static T sub1(T x) { return x - 1; }\n+\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+static T sub2(T x);\n+\n+template<typename T, ENABLE_IF_PARAM(std::is_integral<T>::value)>\n+T sub2(T x) { return x - 2; }\n+\n+TEST(TestEnableIfParam, one_decl_and_def) {\n+  EXPECT_EQ(15, sub1(16));\n+}\n+\n+TEST(TestEnableIfParam, separate_decl_and_def) {\n+  EXPECT_EQ(14, sub2(16));\n+}\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_enableIf.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}