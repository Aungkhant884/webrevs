{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -313,4 +313,2 @@\n-        if ((refEx != null) &&\n-            (refEx.hasMoreReferrals() ||\n-             refEx.hasMoreReferralExceptions()\n-                && !(errEx instanceof LimitExceededException))) {\n+        if ((refEx != null) && !(errEx instanceof LimitExceededException) &&\n+            (refEx.hasMoreReferrals() || refEx.hasMoreReferralExceptions())) {\n@@ -336,3 +334,7 @@\n-                    \/\/ record a previous exception\n-                    if (errEx == null) {\n-                        errEx = re.getNamingException();\n+                    \/\/ record a previous exception and quit if any limit is reached\n+                    var namingException = re.getNamingException();\n+                    if (namingException instanceof LimitExceededException) {\n+                        errEx = namingException;\n+                        break;\n+                    } else if (errEx == null) {\n+                        errEx = namingException;\n@@ -384,0 +386,4 @@\n+        \/\/ record a previous exception and quit if any limit is reached\n+        if (errEx == null || ne.errEx instanceof LimitExceededException) {\n+            errEx = ne.errEx;\n+        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/AbstractLdapNamingEnumeration.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8288895\n+ * @summary LdapContext doesn't honor set referrals limit\n+ * @library lib \/test\/lib\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.SearchControls;\n+import java.nio.charset.StandardCharsets;\n+import java.net.InetAddress;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.naming.Context;\n+import javax.naming.LimitExceededException;\n+import javax.naming.directory.InitialDirContext;\n+import javax.naming.directory.SearchResult;\n+import jdk.test.lib.net.URIBuilder;\n+\n+\/**\n+ * <p>Little test for referral limit. The ldap server is configured to\n+ * always return a referral so LimitExceededException is expected when\n+ * <em>java.naming.ldap.referral.limit<\/em> is reached.<\/p>\n+ *\n+ * @author rmartinc\n+ *\/\n+public class ReferralLimitSearchTest {\n+\n+    \/\/ number of refarral hops to test\n+    private static final int MAX_REFERRAL_LIMIT = 4;\n+\n+    \/\/ position of the message-id inside the responses\n+    private static final int MESSAGE_ID_IDX = 4;\n+\n+    \/\/ success bind response\n+    private static final byte[] BIND_RESPONSE = {\n+            0x30, 0x0C, 0x02, 0x01, 0x00, 0x61, 0x07, 0x0A,\n+            0x01, 0x00, 0x04, 0x00, 0x04, 0x00\n+    };\n+\n+    \/\/ search res done\n+    private static final byte[] SEARCH_RESPONSE = {\n+            0x30, 0x0C, 0x02, 0x01, 0x00, 0x65, 0x07, 0x0A,\n+            0x01, 0x00, 0x04, 0x00, 0x04, 0x00\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        \/\/ Start the LDAP server\n+        BaseLdapServer ldapServer = new BaseLdapServer() {\n+            AtomicInteger hops = new AtomicInteger(0);\n+\n+            @Override\n+            protected void handleRequest(Socket socket, LdapMessage request,\n+                    OutputStream out) throws IOException {\n+                switch (request.getOperation()) {\n+                    case BIND_REQUEST:\n+                        byte[] bindResponse = BIND_RESPONSE.clone();\n+                        bindResponse[MESSAGE_ID_IDX] = (byte) request.getMessageID();\n+                        out.write(bindResponse);\n+                        break;\n+                    case SEARCH_REQUEST:\n+                        if (hops.incrementAndGet() > MAX_REFERRAL_LIMIT + 1) {\n+                            throw new IOException(\"Referral limit not enforced. Number of hops=\" + hops);\n+                        }\n+                        byte[] referral = new StringBuilder(\"ldap:\/\/\")\n+                                .append(InetAddress.getLoopbackAddress().getHostAddress())\n+                                .append(\":\")\n+                                .append(getPort())\n+                                .append(\"\/ou=People??sub\")\n+                                .toString()\n+                                .getBytes(StandardCharsets.UTF_8);\n+                        out.write(0x30);\n+                        out.write(referral.length + 7);\n+                        out.write(new byte[] {0x02, 0x01});\n+                        out.write(request.getMessageID());\n+                        out.write(0x73);\n+                        out.write(referral.length + 2);\n+                        out.write(0x04);\n+                        out.write(referral.length);\n+                        out.write(referral);\n+\n+                        byte[] searchResponse = SEARCH_RESPONSE.clone();\n+                        searchResponse[MESSAGE_ID_IDX] = (byte) request.getMessageID();\n+                        out.write(searchResponse);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+\n+            protected void beforeAcceptingConnections() {\n+                latch.countDown();\n+            }\n+        }.start();\n+\n+        try (ldapServer) {\n+\n+            if (!latch.await(5, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"LdapServer not started in time\");\n+            }\n+\n+            \/\/ Setup JNDI parameters\n+            Properties env = new Properties();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            env.put(Context.REFERRAL, \"follow\");\n+            env.put(\"java.naming.ldap.referral.limit\", Integer.toString(MAX_REFERRAL_LIMIT));\n+            env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n+                    .scheme(\"ldap\")\n+                    .loopback()\n+                    .port(ldapServer.getPort())\n+                    .build().toString());\n+\n+            System.out.println(\"Client: connecting...\");\n+            DirContext ctx = new InitialDirContext(env);\n+            SearchControls sc = new SearchControls();\n+            sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+            sc.setReturningAttributes(new String[]{\"uid\"});\n+            System.out.println(\"Client: performing search...\");\n+            NamingEnumeration<SearchResult> ne = ctx.search(\"ou=People\", \"(uid=*)\", sc);\n+            while (ne.hasMore()) {\n+                SearchResult sr = ne.next();\n+                System.out.println(\"Client: Search result \" + sr);\n+            }\n+            System.out.println(\"Client: search done...\");\n+            ctx.close();\n+\n+            \/\/ LimitExceededException expected throw error if this point is reached\n+            throw new RuntimeException(\"LimitExceededException expected\");\n+\n+        } catch (LimitExceededException e) {\n+            System.out.println(\"Passed: caught the expected Exception - \" + e);\n+        } catch (Exception e) {\n+            System.err.println(\"Failed: caught an unexpected Exception - \" + e);\n+            throw e;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/ReferralLimitSearchTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}