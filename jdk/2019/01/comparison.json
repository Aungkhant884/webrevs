{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1092,0 +1092,9 @@\n+    @Override\n+    public String toString() {\n+        return \"SSLEngine[\" +\n+                \"hostname=\" + getPeerHost() +\n+                \", port=\" + getPeerPort() +\n+                \", \" + conContext.conSession +  \/\/ SSLSessionImpl.toString()\n+                \"]\";\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineImpl.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.net.UnknownHostException;\n@@ -138,1 +137,1 @@\n-            int peerPort) throws IOException, UnknownHostException {\n+            int peerPort) throws IOException {\n@@ -182,1 +181,1 @@\n-            int localPort) throws IOException, UnknownHostException {\n+            int localPort) throws IOException {\n@@ -1409,3 +1408,1 @@\n-            } catch (SSLException ssle) {\n-                throw ssle;\n-            } catch (InterruptedIOException iioe) {\n+            } catch (SSLException | InterruptedIOException ssle) {\n@@ -1413,1 +1410,1 @@\n-                throw iioe;\n+                throw ssle;\n@@ -1474,3 +1471,1 @@\n-            } catch (SSLException ssle) {\n-                throw ssle;\n-            } catch (InterruptedIOException iioe) {\n+            } catch (SSLException | InterruptedIOException ssle) {\n@@ -1478,1 +1473,1 @@\n-                throw iioe;\n+                throw ssle;\n@@ -1480,5 +1475,1 @@\n-                if (!(ioe instanceof SSLException)) {\n-                    throw new SSLException(\"readApplicationRecord\", ioe);\n-                } else {\n-                    throw ioe;\n-                }\n+                throw new SSLException(\"readApplicationRecord\", ioe);\n@@ -1741,7 +1732,4 @@\n-                if (conContext.isInputCloseNotified) {\n-                    \/\/ Close the connection, no wait for more peer response.\n-                    closeSocket(false);\n-                } else {\n-                    \/\/ Close the connection, may wait for peer close_notify.\n-                    closeSocket(true);\n-                }\n+                \/\/ If conContext.isInputCloseNotified is false, close the\n+                \/\/ connection, no wait for more peer response.  Otherwise,\n+                \/\/ may wait for peer close_notify.\n+                closeSocket(!conContext.isInputCloseNotified);\n@@ -1754,0 +1742,9 @@\n+    @Override\n+    public String toString() {\n+        return \"SSLSocket[\" +\n+                \"hostname=\" + getPeerHost() +\n+                \", port=\" + getPeerPort() +\n+                \", \" + conContext.conSession +  \/\/ SSLSessionImpl.toString()\n+                \"]\";\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"}]}