{"files":[{"patch":"@@ -86,0 +86,5 @@\n+    private void checkLineStart(CompileCodeTestCase testCase, String line, String match) {\n+        Asserts.assertTrue(line.startsWith(match),\n+                testCase + \" : line \\\"\" + line + \"\\\" does not start with: \\\"\" + match +\"\\\"\");\n+    }\n+\n@@ -101,1 +106,1 @@\n-        \/\/ Therefore compare strings 2 and 3.\n+        \/\/ so discard it and try again.\n@@ -103,11 +108,23 @@\n-        String str3 = CompilerToVMHelper.disassembleCodeBlob(installedCode);\n-        String[] str2Lines = str2.split(System.lineSeparator());\n-        String[] str3Lines = str3.split(System.lineSeparator());\n-        \/\/ skip the first two lines since it contains a timestamp that may vary from different invocations\n-        \/\/ <empty-line>\n-        \/\/ Compiled method (c2)     309  463       4       compiler.jvmci.compilerToVM.CompileCodeTestCase$Dummy::staticMethod (1 bytes)\n-        \/\/ <empty-line>\n-        \/\/ Compiled method (c2)     310  463       4       compiler.jvmci.compilerToVM.CompileCodeTestCase$Dummy::staticMethod (1 bytes)\n-        for (int i = 2; i < str2Lines.length; i++) {\n-            Asserts.assertEQ(str2Lines[i], str3Lines[i],\n-                testCase + \" : 3nd invocation returned different value from 2nd\");\n+        String[] strLines = str2.split(System.lineSeparator());\n+        \/\/ Check some basic layout\n+        int MIN_LINES = 5;\n+        Asserts.assertTrue(strLines.length > 2,\n+            testCase + \" : read \" + strLines.length + \" lines, \" + MIN_LINES + \" expected\");\n+        int l = 1;\n+        checkLineStart(testCase, strLines[l++], \"Compiled method \"); \/\/ 2\n+        checkLineStart(testCase, strLines[l++], \" total in heap  \"); \/\/ 3\n+        int foundDisassemblyLine = -1;\n+        int foundEntryPointLine = -1;\n+        for (; l < strLines.length; ++l) {\n+            String line = strLines[l];\n+            if (line.equals(\"[Disassembly]\")) {\n+                Asserts.assertTrue(foundDisassemblyLine == -1,\n+                    testCase + \" : [Disassembly] found at lines \" + foundDisassemblyLine + \" and \" + l);\n+                foundDisassemblyLine = l;\n+            }\n+            if (line.equals(\"[Entry Point]\") || line.equals(\"[Verified Entry Point]\")) {\n+                Asserts.assertTrue(foundDisassemblyLine != -1,\n+                    testCase + \" : entry point found but [Disassembly] section missing \");\n+                foundEntryPointLine = l;\n+                break;\n+            }\n@@ -115,0 +132,2 @@\n+        Asserts.assertTrue(foundDisassemblyLine != -1, testCase + \" : Disassembly section found\");\n+        Asserts.assertTrue(foundEntryPointLine != -1, testCase + \" : no entry point found\");\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/DisassembleCodeBlobTest.java","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"}]}