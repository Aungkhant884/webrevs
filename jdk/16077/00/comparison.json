{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+        System.out.println(\"Terminating all processes\");\n@@ -141,1 +142,1 @@\n-            System.out.println(\"realeaseStarted(\" + ids + \")\");\n+            System.out.println(\"releaseStarted(\" + ids + \")\");\n@@ -152,1 +153,1 @@\n-                    System.out.println(\"RELEASED (id=\" + jp.getId() + \", args=\" + jp.getMainArgsIdentifier() + \")\");\n+                    System.out.println(\"RELEASED started (id=\" + jp.getId() + \", args=\" + jp.getMainArgsIdentifier() + \")\");\n@@ -157,0 +158,1 @@\n+            System.out.println(\"releaseStarted: not a test pid: \" + id);\n@@ -169,1 +171,1 @@\n-                    System.out.println(\"RELEASED (id=\" + jp.getId() + \", args=\" + jp.getMainArgsIdentifier() + \")\");\n+                    System.out.println(\"RELEASED terminated (id=\" + jp.getId() + \", args=\" + jp.getMainArgsIdentifier() + \")\");\n@@ -176,0 +178,2 @@\n+        private static final int ARGS_ATTEMPTS = 5;\n+\n@@ -177,6 +181,17 @@\n-            try {\n-                VmIdentifier vmid = new VmIdentifier(\"\/\/\" + id.intValue());\n-                MonitoredVm target = host.getMonitoredVm(vmid);\n-                String monitoredArgs = MonitoredVmUtil.mainArgs(target);\n-                if (monitoredArgs != null && monitoredArgs.contains(args)) {\n-                    return true;\n+            \/\/ As we have seen test timeouts due to missing a notification,\n+            \/\/ we should retry this attempt to check arguments for a match.\n+            for (int i=0; i<ARGS_ATTEMPTS; i++) {\n+                try {\n+                    VmIdentifier vmid = new VmIdentifier(\"\/\/\" + id.intValue());\n+                    MonitoredVm target = host.getMonitoredVm(vmid);\n+                        String monitoredArgs = MonitoredVmUtil.mainArgs(target);\n+                    if (monitoredArgs != null && monitoredArgs.contains(args)) {\n+                        System.out.println(\"hasMainArgs(\" + id + \"): yes\");\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n+                } catch (URISyntaxException | MonitorException e) {\n+                    \/\/ Pocess probably not running or not ours, e.g.\n+                    \/\/ sun.jvmstat.monitor.MonitorException: Could not attach to PID\n+                    System.out.println(\"hasMainArgs(\" + id + \"): \" + e);\n@@ -184,2 +199,1 @@\n-            } catch (URISyntaxException | MonitorException e) {\n-                \/\/ ok. process probably not running\n+                takeNap();\n@@ -250,8 +264,0 @@\n-        private static void takeNap() {\n-            try {\n-                Thread.sleep(100);\n-            } catch (InterruptedException e) {\n-                \/\/ ignore\n-            }\n-        }\n-\n@@ -326,0 +332,8 @@\n+\n+    public static void takeNap() {\n+        try {\n+            Thread.sleep(100);\n+        } catch (InterruptedException e) {\n+            \/\/ ignore\n+        }\n+    }\n","filename":"test\/jdk\/sun\/jvmstat\/monitor\/MonitoredVm\/MonitorVmStartTerminate.java","additions":34,"deletions":20,"binary":false,"changes":54,"status":"modified"}]}