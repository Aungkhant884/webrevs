{"files":[{"patch":"@@ -5991,1 +5991,0 @@\n-  array = must_be_not_null(array, true);\n@@ -6000,0 +5999,3 @@\n+\n+  array = must_be_not_null(array, true);\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8301093\n+ * @summary Verify failure to intrinsify does not pollute control flow\n+ * @modules java.base\/jdk.internal.util\n+ *\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation compiler.intrinsics.TestArraysHashCode\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+import jdk.internal.util.ArraysSupport;\n+\n+public class TestArraysHashCode {\n+\n+    static int type;\n+    static byte[] bytes;\n+\n+    public static void main(String[] args) {\n+        \/\/ read\n+        bytes = new byte[256];\n+        type = ArraysSupport.T_BOOLEAN;\n+        testIntrinsicWithConstantType();\n+        testIntrinsicWithNonConstantType();\n+    }\n+\n+    private static void testIntrinsicWithConstantType() {\n+        for (int i = 0; i < 20_000; i++) {\n+            testIntrinsic(bytes, ArraysSupport.T_BOOLEAN);\n+        }\n+    }\n+\n+    \/\/ ok, but shouldn't be intrinsified due the non-constant type\n+    private static void testIntrinsicWithNonConstantType() {\n+        type = ArraysSupport.T_BOOLEAN;\n+        for (int i = 0; i < 20_000; i++) {\n+            testIntrinsic(bytes, type);\n+        }\n+    }\n+\n+    private static int testIntrinsic(byte[] bytes, int type) {\n+        return ArraysSupport.vectorizedHashCode(bytes, 0, 256, 1, type);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestArraysHashCode.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}