{"files":[{"patch":"@@ -318,3 +318,1 @@\n-  \/\/ JDK-8304948 shows an example that there may be a cycle in the graph\n-  \/\/ after the transformation of Phi:\n-  \/\/ Phi (VectorBox VectorBox) => VectorBox (Phi Phi)\n+  \/\/ JDK-8304948 shows an example that there may be a cycle in the graph.\n@@ -322,1 +320,1 @@\n-    assert(vbox->is_Phi(), \"not a phi\");\n+    assert(vbox->is_Phi(), \"should be phi\");\n@@ -326,0 +324,15 @@\n+  \/\/ Handle the case when the allocation input to VectorBoxNode is a Proj.\n+  \/\/ This is the normal case before expanding.\n+  if (vbox->is_Proj() && vbox->in(0)->Opcode() == Op_VectorBoxAllocate) {\n+    VectorBoxAllocateNode* vbox_alloc = static_cast<VectorBoxAllocateNode*>(vbox->in(0));\n+    return expand_vbox_alloc_node(vbox_alloc, vect, box_type, vect_type);\n+  }\n+\n+  \/\/ Handle the case when both the allocation input and vector input to\n+  \/\/ VectorBoxNode are Phi. This case is generated after the transformation of\n+  \/\/ Phi: Phi (VectorBox1 VectorBox2) => VectorBox (Phi1 Phi2).\n+  \/\/ With this optimization, the relative two allocation inputs of VectorBox1 and\n+  \/\/ VectorBox2 are gathered into Phi1 now. Similarly, the original vector\n+  \/\/ inputs of two VectorBox nodes are in Phi2.\n+  \/\/\n+  \/\/ See PhiNode::merge_through_phi in cfg.cpp for more details.\n@@ -328,1 +341,0 @@\n-    Node* new_phi = new PhiNode(vbox->as_Phi()->region(), box_type);\n@@ -332,1 +344,4 @@\n-      new_phi->set_req(i, new_box);\n+      if (!new_box->is_Phi()) {\n+        C->initial_gvn()->hash_delete(vbox);\n+        vbox->set_req(i, new_box);\n+      }\n@@ -334,11 +349,11 @@\n-    new_phi = C->initial_gvn()->transform(new_phi);\n-    return new_phi;\n-  } else if (vbox->is_Phi() && (vect->is_Vector() || vect->is_LoadVector())) {\n-    \/\/ Handle the case when the allocation input to VectorBoxNode is a phi\n-    \/\/ but the vector input is not, which can definitely be the case if the\n-    \/\/ vector input has been value-numbered. It seems to be safe to do by\n-    \/\/ construction because VectorBoxNode and VectorBoxAllocate come in a\n-    \/\/ specific order as a result of expanding an intrinsic call. After that, if\n-    \/\/ any of the inputs to VectorBoxNode are value-numbered they can only\n-    \/\/ move up and are guaranteed to dominate.\n-    Node* new_phi = new PhiNode(vbox->as_Phi()->region(), box_type);\n+    return C->initial_gvn()->transform(vbox);\n+  }\n+\n+  \/\/ Handle the case when the allocation input to VectorBoxNode is a phi\n+  \/\/ but the vector input is not, which can definitely be the case if the\n+  \/\/ vector input has been value-numbered. It seems to be safe to do by\n+  \/\/ construction because VectorBoxNode and VectorBoxAllocate come in a\n+  \/\/ specific order as a result of expanding an intrinsic call. After that, if\n+  \/\/ any of the inputs to VectorBoxNode are value-numbered they can only\n+  \/\/ move up and are guaranteed to dominate.\n+  if (vbox->is_Phi() && (vect->is_Vector() || vect->is_LoadVector())) {\n@@ -348,1 +363,4 @@\n-      new_phi->set_req(i, new_box);\n+      if (!new_box->is_Phi()) {\n+        C->initial_gvn()->hash_delete(vbox);\n+        vbox->set_req(i, new_box);\n+      }\n@@ -350,9 +368,1 @@\n-    new_phi = C->initial_gvn()->transform(new_phi);\n-    return new_phi;\n-  } else if (vbox->is_Proj() && vbox->in(0)->Opcode() == Op_VectorBoxAllocate) {\n-    VectorBoxAllocateNode* vbox_alloc = static_cast<VectorBoxAllocateNode*>(vbox->in(0));\n-    return expand_vbox_alloc_node(vbox_alloc, vect, box_type, vect_type);\n-  } else {\n-    assert(!vbox->is_Phi(), \"\");\n-    \/\/ TODO: assert that expanded vbox is initialized with the same value (vect).\n-    return vbox; \/\/ already expanded\n+    return C->initial_gvn()->transform(vbox);\n@@ -360,0 +370,4 @@\n+\n+  assert(!vbox->is_Phi(), \"should be expanded\");\n+  \/\/ TODO: assert that expanded vbox is initialized with the same value (vect).\n+  return vbox; \/\/ already expanded\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"}]}