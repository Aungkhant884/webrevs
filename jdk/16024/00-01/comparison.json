{"files":[{"patch":"@@ -64,1 +64,1 @@\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.01;\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n@@ -1114,1 +1096,5 @@\n-            withToString(\"double[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1116,1 +1102,1 @@\n-                            i -> (double)(i \/ (double) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.01;\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n@@ -1114,1 +1096,5 @@\n-            withToString(\"double[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1116,1 +1102,1 @@\n-                            i -> (double)(i \/ (double) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.01;\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n@@ -1114,1 +1096,5 @@\n-            withToString(\"double[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1116,1 +1102,1 @@\n-                            i -> (double)(i \/ (double) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.01;\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n@@ -1114,1 +1096,5 @@\n-            withToString(\"double[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1116,1 +1102,1 @@\n-                            i -> (double)(i \/ (double) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    private static final double RELATIVE_ROUNDING_ERROR = (double)0.01;\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -129,10 +129,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n@@ -166,10 +157,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n@@ -1119,1 +1101,5 @@\n-            withToString(\"double[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1121,1 +1107,1 @@\n-                            i -> (double)(i \/ (double) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.01;\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n@@ -1125,1 +1107,5 @@\n-            withToString(\"float[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1127,1 +1113,1 @@\n-                            i -> (float)(i \/ (float) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.01;\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n@@ -1125,1 +1107,5 @@\n-            withToString(\"float[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1127,1 +1113,1 @@\n-                            i -> (float)(i \/ (float) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.01;\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n@@ -1125,1 +1107,5 @@\n-            withToString(\"float[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1127,1 +1113,1 @@\n-                            i -> (float)(i \/ (float) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.01;\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -124,10 +124,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n@@ -161,10 +152,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n@@ -1125,1 +1107,5 @@\n-            withToString(\"float[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1127,1 +1113,1 @@\n-                            i -> (float)(i \/ (float) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    private static final float RELATIVE_ROUNDING_ERROR = (float)0.01;\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -129,10 +129,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n-        }\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n@@ -166,10 +157,1 @@\n-        int i = 0;\n-        try {\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n-            for (; i < a.length; i += SPECIES.length()) {\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n-            }\n-        } catch (AssertionError e) {\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n-        }\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n@@ -1130,1 +1112,5 @@\n-            withToString(\"float[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1132,1 +1118,1 @@\n-                            i -> (float)(i \/ (float) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    private static final $type$ RELATIVE_ROUNDING_ERROR = ($type$)0.01;\n+    private static final $type$ RELATIVE_ROUNDING_ERROR = ($type$)0.000001;\n@@ -158,0 +158,3 @@\n+#if[FP]\n+        assertReductionArraysEquals(r, rc, a, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -168,0 +171,1 @@\n+#end[FP]\n@@ -197,0 +201,3 @@\n+#if[FP]\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -207,0 +214,1 @@\n+#end[FP]\n@@ -1190,1 +1198,5 @@\n-            withToString(\"$type$[i \/ 10.0 + 0.1]\", (int s) -> {\n+            withToString(\"$type$[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> ($type$)0.01 + (($type$)i \/ (i + 1)));\n+            }),\n+            withToString(\"$type$[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1192,1 +1204,1 @@\n-                            i -> ($type$)(i \/ ($type$) 10.0 + 0.1));\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : ($type$)0.01 + (($type$)i \/ (i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}