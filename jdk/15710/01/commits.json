[{"commit":{"message":"Removing IDs to reduce test name length and duplicities in testcase details"},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressIHOPMultiThread.java"}],"sha":"f58243d0fb9fe826db4f6183a66912b418a189b0"},{"commit":{"message":"8315766: Parallelize gc\/stress\/TestStressIHOPMultiThread.java test\n\nTestStressIHOPMultiThread takes about 10 minutes to run. This limits effective parallelism of tier4 testing on large machines. We can parallelize its `@run` configs to improve effective parallelism for tier4. With both fastdebug and release configuration runs, it has been found that the final testcase in the sequential run configuration takes the most amount of time. Because of that to parallel configurations were tried out, one with all 5 test cases parallelized and second with 3 sections of parallel runs: 1st with first 2 tests, 2nd with the next 2 tests and 3rd with the last test case. Below are the results in fast debug:\n* before                       : **974.87s user 108.92s system 172% cpu 10:27.46 total**\n* after_full-parallelization   : **796.79s user 88.73s system 343% cpu 4:17.51 total**\n* after_partial-parallelization: **904.82s user 102.00s system 391% cpu 4:17.01 total**\n\nFrom the reults we can see that even though partial and full parallelization has similar total running time, the user and system times and considerably better with full parallelization with repeated runs.\n\nBelow are the results with release mode:\n* before                    : **1111.11s user 196.52s system 210% cpu 10:20.80 total**\n* after_full-parallelization: **837.07s user 151.57s system 378% cpu 4:20.89 total**"},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressIHOPMultiThread.java"}],"sha":"61d2c25b730705754f8af8801a972bbf6a4fdb46"}]