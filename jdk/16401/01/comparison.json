{"files":[{"patch":"@@ -85,1 +85,1 @@\n-bool Exceptions::special_exception(JavaThread* thread, const char* file, int line, Handle h_exception) {\n+bool Exceptions::special_exception(JavaThread* thread, const char* file, int line, Handle h_exception, Symbol* h_name, const char* message) {\n@@ -88,1 +88,8 @@\n-   vm_exit_during_initialization(h_exception);\n+    if (h_exception.not_null()) {\n+      vm_exit_during_initialization(h_exception);\n+    } else if (h_name == nullptr) {\n+      \/\/ at least an informative message.\n+      vm_exit_during_initialization(\"Exception\", message);\n+    } else {\n+      vm_exit_during_initialization(h_name, message);\n+    }\n@@ -97,1 +104,1 @@\n-  if (h_exception()->klass() == vmClasses::StackOverflowError_klass()) {\n+  if (h_exception.not_null() && h_exception()->klass() == vmClasses::StackOverflowError_klass()) {\n@@ -105,0 +112,10 @@\n+    ResourceMark rm(thread);\n+    const char* exc_value = h_exception.not_null() ? h_exception->print_value_string() :\n+                      h_name != nullptr ? h_name->as_C_string() :\n+                      \"null\";\n+    log_info(exceptions)(\"Exception <%s%s%s> (\" PTR_FORMAT \") \\n\"\n+                        \"thrown [%s, line %d]\\nfor thread \" PTR_FORMAT \"\\n\"\n+                        \"thread cannot call Java, throwing pre-allocated exception: %s\",\n+                        exc_value, message ? \": \" : \"\", message ? message : \"\",\n+                        p2i(h_exception()), file, line, p2i(thread),\n+                        Universe::vm_exception()->print_value_string());\n@@ -114,21 +131,0 @@\n-bool Exceptions::special_exception(JavaThread* thread, const char* file, int line, Symbol* h_name, const char* message) {\n-  \/\/ bootstrapping check\n-  if (!Universe::is_fully_initialized()) {\n-    if (h_name == nullptr) {\n-      \/\/ at least an informative message.\n-      vm_exit_during_initialization(\"Exception\", message);\n-    } else {\n-      vm_exit_during_initialization(h_name, message);\n-    }\n-    ShouldNotReachHere();\n-  }\n-\n-  if (!thread->can_call_java()) {\n-    \/\/ We do not care what kind of exception we get for a thread which\n-    \/\/ is compiling.  We just install a dummy exception object\n-    thread->set_pending_exception(Universe::vm_exception(), file, line);\n-    return true;\n-  }\n-  return false;\n-}\n-\n@@ -190,1 +186,1 @@\n-  if (special_exception(thread, file, line, name, message)) return;\n+  if (special_exception(thread, file, line, Handle(), name, message)) return;\n@@ -200,1 +196,1 @@\n-  if (special_exception(thread, file, line, name, message)) return;\n+  if (special_exception(thread, file, line, Handle(), name, message)) return;\n@@ -217,1 +213,1 @@\n-  if (special_exception(thread, file, line, name, nullptr)) return;\n+  if (special_exception(thread, file, line, Handle(), name, nullptr)) return;\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -108,2 +108,1 @@\n-  static bool special_exception(JavaThread* thread, const char* file, int line, Handle exception);\n-  static bool special_exception(JavaThread* thread, const char* file, int line, Symbol* name, const char* message);\n+  static bool special_exception(JavaThread* thread, const char* file, int line, Handle exception, Symbol* name = nullptr, const char* message = nullptr);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}