{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -337,2 +337,2 @@\n-     * Sets the seed of this random number generator using a single\n-     * {@code long} seed (optional operation).\n+     * Sets or updates the seed of this random number generator using the\n+     * provided {@code long} seed value (optional operation).\n@@ -340,7 +340,4 @@\n-     * @implSpec The general contract of {@code setSeed} is\n-     * that it alters the state of this random number generator object\n-     * so as to be in exactly the same state as if it had just been\n-     * created with the argument {@code seed} as a seed.\n-     *\n-     * <p>The method {@code setSeed} is implemented by class\n-     * {@code Random} by atomically updating the seed to\n+     * @implSpec\n+     * The implementation in this class alters the state of this random number\n+     * generator so that it is in the same state as if it had just been created with\n+     * {@link #Random(long) new Random(seed)}. It atomically updates the seed to\n@@ -348,7 +345,2 @@\n-     * and clearing the {@code haveNextNextGaussian} flag used by {@link\n-     * #nextGaussian}.\n-     *\n-     * <p>The implementation of {@code setSeed} by class {@code Random}\n-     * happens to use only 48 bits of the given seed. In general, however,\n-     * an overriding method may use all 64 bits of the {@code long}\n-     * argument as a seed value.\n+     * and clears the {@code haveNextNextGaussian} flag used by {@link #nextGaussian}.\n+     * Note that this uses only 48 bits of the given seed value.\n@@ -356,1 +348,1 @@\n-     * @param seed the initial seed\n+     * @param seed the seed value\n@@ -366,5 +358,2 @@\n-     * Generates the next pseudorandom number. Subclasses should\n-     * override this, as this is used by all other methods.\n-     *\n-     * <p>The general contract of {@code next} is that it returns an\n-     * {@code int} value and if the argument {@code bits} is between\n+     * Generates the next pseudorandom number. This method returns an\n+     * {@code int} value such that, if the argument {@code bits} is between\n@@ -374,2 +363,10 @@\n-     * likely to be {@code 0} or {@code 1}. The method {@code next} is\n-     * implemented by class {@code Random} by atomically updating the seed to\n+     * likely to be {@code 0} or {@code 1}.\n+     *\n+     * @apiNote\n+     * The other random-producing methods in this class are implemented\n+     * in terms of this method, so subclasses can override just this\n+     * method to provide a different source of pseudorandom numbers for\n+     * the entire class.\n+     *\n+     * @implSpec\n+     * The implementation in this class atomically updates the seed to\n@@ -377,1 +374,1 @@\n-     * and returning\n+     * and returns\n@@ -380,1 +377,1 @@\n-     * This is a linear congruential pseudorandom number generator, as\n+     * <p>This is a linear congruential pseudorandom number generator, as\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":24,"deletions":27,"binary":false,"changes":51,"status":"modified"}]}