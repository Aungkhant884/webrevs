{"files":[{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -83,1 +84,1 @@\n-)\n+        )\n@@ -85,0 +86,135 @@\n+\n+    \/**\n+     * Class used to wrap a {@link java.util.random.RandomGenerator} to\n+     * {@link java.util.Random}.\n+     *\/\n+\n+    @SuppressWarnings(\"serial\")\n+    private static class RandomWrapper extends Random implements RandomGenerator {\n+        private final RandomGenerator generator;\n+        private final boolean initialized;\n+\n+        private RandomWrapper(RandomGenerator randomToWrap) {\n+            this.generator = randomToWrap;\n+            this.initialized = true;\n+        }\n+\n+        public static Random wrap(RandomGenerator random) {\n+            \/\/ Check to see if its not wrapping another Random instance\n+            if (random instanceof Random rand)\n+                return rand;\n+\n+            return (Random) new Random.RandomWrapper(random);\n+        }\n+\n+        \/**\n+         * setSeed does not exist in {@link java.util.random.RandomGenerator} so can't\n+         * use it.\n+         *\/\n+        @Override\n+        public void setSeed(long seed) {\n+            if(initialized)\n+                throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void nextBytes(byte[] bytes) {\n+            this.generator.nextBytes(bytes);\n+        }\n+\n+        @Override\n+        public int nextInt() {\n+            return this.generator.nextInt();\n+        }\n+\n+        @Override\n+        public int nextInt(int bound) {\n+            return this.generator.nextInt(bound);\n+        }\n+\n+        @Override\n+        public long nextLong() {\n+            return this.generator.nextLong();\n+        }\n+\n+        @Override\n+        public boolean nextBoolean() {\n+            return this.generator.nextBoolean();\n+        }\n+\n+        @Override\n+        public float nextFloat() {\n+            return this.generator.nextFloat();\n+        }\n+\n+        @Override\n+        public double nextDouble() {\n+            return this.generator.nextDouble();\n+        }\n+\n+        @Override\n+        public double nextGaussian() {\n+            return this.generator.nextGaussian();\n+        }\n+\n+        @Override\n+        public IntStream ints(long streamSize) {\n+            return this.generator.ints(streamSize);\n+        }\n+\n+        @Override\n+        public IntStream ints() {\n+            return this.generator.ints();\n+        }\n+\n+        @Override\n+        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+            return this.generator.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+            return this.generator.ints(randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public LongStream longs(long streamSize) {\n+            return this.generator.longs(streamSize);\n+        }\n+\n+        @Override\n+        public LongStream longs() {\n+            return this.generator.longs();\n+        }\n+\n+        @Override\n+        public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {\n+            return this.generator.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+            return this.generator.longs(randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(long streamSize) {\n+            return this.generator.doubles(streamSize);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles() {\n+            return this.generator.doubles();\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+            return this.generator.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+            return this.generator.doubles(randomNumberOrigin, randomNumberBound);\n+        }\n+    }\n+\n@@ -152,0 +288,12 @@\n+    \/**\n+     * Returns an instance of {@link Random} based on this\n+     * {@link java.util.random.RandomGenerator}. If this generator is already an instance of\n+     * {@link Random}, it is returned. Otherwise, this method returns an instance of\n+     * {@link Random} that delegates all methods except setSeed to this generator.\n+     * Its setSeed method always throws {@link UnsupportedOperationException}.\n+     * @param random the {@link java.util.random.RandomGenerator} to use\n+     * @return {@link Random}\n+     *\/\n+    public static Random from(RandomGenerator random) {\n+        return RandomWrapper.wrap(random);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":149,"deletions":1,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.util.random.RandomGenerator;\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -413,0 +416,32 @@\n+    \/**\n+     * Test shuffling a list with Random.from()\n+     *\/\n+    public void testShufflingList() {\n+        final var listTest = new ArrayList<Integer>();\n+        final RandomGenerator randomGenerator = RandomGenerator.getDefault();\n+        final Random random = Random.from(randomGenerator);\n+\n+        for (int i = 0; i < 100; i++) {\n+            listTest.add(i * 2);\n+        }\n+        final var listCopy = new ArrayList<Integer>(listTest);\n+\n+        Collections.shuffle(listCopy, random);\n+\n+        assertFalse(listCopy.equals(listTest));\n+    }\n+\n+    \/**\n+     * Test if Random.from returns this\n+     *\/\n+    public void testRandomFromInstance() {\n+        final RandomGenerator randomGenerator = RandomGenerator.getDefault();\n+\n+        final Random randomInstance = Random.from(randomGenerator);\n+\n+        \/\/ we wrap the same instance again\n+        final Random randomInstanceCopy = Random.from(randomInstance);\n+\n+        assertSame(randomInstance, randomInstanceCopy);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Random\/RandomTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}