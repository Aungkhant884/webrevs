{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Random;\n@@ -34,0 +35,1 @@\n+import jdk.internal.util.random.RandomWrapper;\n@@ -108,1 +110,1 @@\n-     \/**\n+    \/**\n@@ -141,0 +143,13 @@\n+    \/**\n+     * Returns an instance of {@link java.util.Random} based on this\n+     * {@code RandomGenerator}. If this generator is already an instance of\n+     * {@code Random}, it is returned. Otherwise, this method returns an instance of\n+     * {@code Random} that delegates all methods except setSeed to this generator.\n+     * Its setSeed method always throws {@link UnsupportedOperationException}.\n+     *\n+     * @return {@link java.util.Random}\n+     *\/\n+    default Random asRandom() {\n+        return RandomWrapper.wrap(this);\n+    }\n+\n@@ -156,1 +171,1 @@\n-     default boolean isDeprecated() {\n+    default boolean isDeprecated() {\n@@ -158,1 +173,1 @@\n-     }\n+    }\n@@ -247,1 +262,1 @@\n-                double randomNumberBound) {\n+            double randomNumberBound) {\n@@ -338,1 +353,1 @@\n-              int randomNumberBound) {\n+            int randomNumberBound) {\n@@ -429,1 +444,1 @@\n-                long randomNumberBound) {\n+            long randomNumberBound) {\n@@ -1046,0 +1061,1 @@\n+        @Override\n@@ -1065,0 +1081,1 @@\n+        @Override\n@@ -1201,0 +1218,1 @@\n+        @Override\n@@ -1219,0 +1237,1 @@\n+        @Override\n@@ -1309,0 +1328,1 @@\n+        @Override\n@@ -1448,0 +1468,1 @@\n+        @Override\n@@ -1484,0 +1505,1 @@\n+        @Override\n@@ -1540,0 +1562,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util.random;\n+\n+import java.util.Random;\n+import java.util.random.RandomGenerator;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+\n+\/**\n+ * Class used to wrap a {@link java.util.random.RandomGenerator} to\n+ * {@link java.util.Random}\n+ *\/\n+\n+@SuppressWarnings(\"serial\")\n+public class RandomWrapper extends Random implements RandomGenerator {\n+    private final RandomGenerator generator;\n+    private boolean initialized;\n+\n+    private RandomWrapper(RandomGenerator randomToWrap) {\n+        this.generator = randomToWrap;\n+        this.initialized = true;\n+    }\n+\n+    public static Random wrap(RandomGenerator random) {\n+        \/\/ Check to see if its not wrapping another Random instance\n+        if (random instanceof Random rand)\n+            return rand;\n+\n+        return new RandomWrapper(random);\n+    }\n+\n+    \/**\n+     * setSeed does not exist in {@link java.util.random.RandomGenerator} so can't\n+     * use it\n+     *\/\n+    @Override\n+    public void setSeed(long seed) {\n+        if(initialized)\n+            throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void nextBytes(byte[] bytes) {\n+        this.generator.nextBytes(bytes);\n+    }\n+\n+    @Override\n+    public int nextInt() {\n+        return this.generator.nextInt();\n+    }\n+\n+    @Override\n+    public int nextInt(int bound) {\n+        return this.generator.nextInt(bound);\n+    }\n+\n+    @Override\n+    public long nextLong() {\n+        return this.generator.nextLong();\n+    }\n+\n+    @Override\n+    public boolean nextBoolean() {\n+        return this.generator.nextBoolean();\n+    }\n+\n+    @Override\n+    public float nextFloat() {\n+        return this.generator.nextFloat();\n+    }\n+\n+    @Override\n+    public double nextDouble() {\n+        return this.generator.nextDouble();\n+    }\n+\n+    @Override\n+    public double nextGaussian() {\n+        return this.generator.nextGaussian();\n+    }\n+\n+    @Override\n+    public IntStream ints(long streamSize) {\n+        return this.generator.ints(streamSize);\n+    }\n+\n+    @Override\n+    public IntStream ints() {\n+        return this.generator.ints();\n+    }\n+\n+    @Override\n+    public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+        return this.generator.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+        return this.generator.ints(randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public LongStream longs(long streamSize) {\n+        return this.generator.longs(streamSize);\n+    }\n+\n+    @Override\n+    public LongStream longs() {\n+        return this.generator.longs();\n+    }\n+\n+    @Override\n+    public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {\n+        return this.generator.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+        return this.generator.longs(randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(long streamSize) {\n+        return this.generator.doubles(streamSize);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles() {\n+        return this.generator.doubles();\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+        return this.generator.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+        return this.generator.doubles(randomNumberOrigin, randomNumberBound);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomWrapper.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}