{"files":[{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -83,1 +84,1 @@\n-)\n+        )\n@@ -85,0 +86,135 @@\n+\n+    \/**\n+     * Class used to wrap a {@link java.util.random.RandomGenerator} to\n+     * {@link java.util.Random}.\n+     *\/\n+\n+    @SuppressWarnings(\"serial\")\n+    private static class RandomWrapper extends Random implements RandomGenerator {\n+        private final RandomGenerator generator;\n+        private final boolean initialized;\n+\n+        private RandomWrapper(RandomGenerator randomToWrap) {\n+            this.generator = randomToWrap;\n+            this.initialized = true;\n+        }\n+\n+        public static Random wrap(RandomGenerator random) {\n+            \/\/ Check to see if its not wrapping another Random instance\n+            if (random instanceof Random rand)\n+                return rand;\n+\n+            return (Random) new Random.RandomWrapper(random);\n+        }\n+\n+        \/**\n+         * setSeed does not exist in {@link java.util.random.RandomGenerator} so can't\n+         * use it.\n+         *\/\n+        @Override\n+        public void setSeed(long seed) {\n+            if(initialized)\n+                throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void nextBytes(byte[] bytes) {\n+            this.generator.nextBytes(bytes);\n+        }\n+\n+        @Override\n+        public int nextInt() {\n+            return this.generator.nextInt();\n+        }\n+\n+        @Override\n+        public int nextInt(int bound) {\n+            return this.generator.nextInt(bound);\n+        }\n+\n+        @Override\n+        public long nextLong() {\n+            return this.generator.nextLong();\n+        }\n+\n+        @Override\n+        public boolean nextBoolean() {\n+            return this.generator.nextBoolean();\n+        }\n+\n+        @Override\n+        public float nextFloat() {\n+            return this.generator.nextFloat();\n+        }\n+\n+        @Override\n+        public double nextDouble() {\n+            return this.generator.nextDouble();\n+        }\n+\n+        @Override\n+        public double nextGaussian() {\n+            return this.generator.nextGaussian();\n+        }\n+\n+        @Override\n+        public IntStream ints(long streamSize) {\n+            return this.generator.ints(streamSize);\n+        }\n+\n+        @Override\n+        public IntStream ints() {\n+            return this.generator.ints();\n+        }\n+\n+        @Override\n+        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+            return this.generator.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+            return this.generator.ints(randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public LongStream longs(long streamSize) {\n+            return this.generator.longs(streamSize);\n+        }\n+\n+        @Override\n+        public LongStream longs() {\n+            return this.generator.longs();\n+        }\n+\n+        @Override\n+        public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {\n+            return this.generator.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+            return this.generator.longs(randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(long streamSize) {\n+            return this.generator.doubles(streamSize);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles() {\n+            return this.generator.doubles();\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+            return this.generator.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        @Override\n+        public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+            return this.generator.doubles(randomNumberOrigin, randomNumberBound);\n+        }\n+    }\n+\n@@ -123,1 +259,1 @@\n-            = new AtomicLong(8682522807148012L);\n+    = new AtomicLong(8682522807148012L);\n@@ -152,0 +288,12 @@\n+    \/**\n+     * Returns an instance of {@link Random} based on this\n+     * {@code java.util.random.RandomGenerator}. If this generator is already an instance of\n+     * {@code Random}, it is returned. Otherwise, this method returns an instance of\n+     * {@code Random} that delegates all methods except setSeed to this generator.\n+     * Its setSeed method always throws {@link UnsupportedOperationException}.\n+     * @param random the {@link java.util.random.RandomGenerator} to use\n+     * @return {@link Random}\n+     *\/\n+    public static Random from(RandomGenerator random) {\n+        return RandomWrapper.wrap(random);\n+    }\n@@ -235,2 +383,2 @@\n-                 n = Math.min(len - i, Integer.SIZE\/Byte.SIZE);\n-                 n-- > 0; rnd >>= Byte.SIZE)\n+            n = Math.min(len - i, Integer.SIZE\/Byte.SIZE);\n+                    n-- > 0; rnd >>= Byte.SIZE)\n@@ -328,2 +476,2 @@\n-                 u - (r = u % bound) + m < 0;\n-                 u = next(31))\n+                    u - (r = u % bound) + m < 0;\n+                    u = next(31))\n@@ -883,1 +1031,1 @@\n-   \/**\n+    \/**\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":155,"deletions":7,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Random;\n@@ -34,2 +33,0 @@\n-import jdk.internal.util.random.RandomSupport.*;\n-import jdk.internal.util.random.RandomWrapper;\n@@ -143,13 +140,0 @@\n-    \/**\n-     * Returns an instance of {@link java.util.Random} based on this\n-     * {@code RandomGenerator}. If this generator is already an instance of\n-     * {@code Random}, it is returned. Otherwise, this method returns an instance of\n-     * {@code Random} that delegates all methods except setSeed to this generator.\n-     * Its setSeed method always throws {@link UnsupportedOperationException}.\n-     *\n-     * @return {@link java.util.Random}\n-     *\/\n-    default Random asRandom() {\n-        return RandomWrapper.wrap(this);\n-    }\n-\n@@ -1061,1 +1045,0 @@\n-        @Override\n@@ -1081,1 +1064,0 @@\n-        @Override\n@@ -1218,1 +1200,0 @@\n-        @Override\n@@ -1237,1 +1218,0 @@\n-        @Override\n@@ -1328,1 +1308,0 @@\n-        @Override\n@@ -1468,1 +1447,0 @@\n-        @Override\n@@ -1505,1 +1483,0 @@\n-        @Override\n@@ -1562,1 +1539,0 @@\n-        @Override\n@@ -1588,1 +1564,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.util.random;\n-\n-import java.util.Random;\n-import java.util.random.RandomGenerator;\n-import java.util.stream.DoubleStream;\n-import java.util.stream.IntStream;\n-import java.util.stream.LongStream;\n-\n-\/**\n- * Class used to wrap a {@link java.util.random.RandomGenerator} to\n- * {@link java.util.Random}.\n- *\/\n-\n-@SuppressWarnings(\"serial\")\n-public class RandomWrapper extends Random implements RandomGenerator {\n-    private final RandomGenerator generator;\n-    private final boolean initialized;\n-\n-    private RandomWrapper(RandomGenerator randomToWrap) {\n-        this.generator = randomToWrap;\n-        this.initialized = true;\n-    }\n-\n-    public static Random wrap(RandomGenerator random) {\n-        \/\/ Check to see if its not wrapping another Random instance\n-        if (random instanceof Random rand)\n-            return rand;\n-\n-        return new RandomWrapper(random);\n-    }\n-\n-    \/**\n-     * setSeed does not exist in {@link java.util.random.RandomGenerator} so can't\n-     * use it.\n-     *\/\n-    @Override\n-    public void setSeed(long seed) {\n-        if(initialized)\n-            throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void nextBytes(byte[] bytes) {\n-        this.generator.nextBytes(bytes);\n-    }\n-\n-    @Override\n-    public int nextInt() {\n-        return this.generator.nextInt();\n-    }\n-\n-    @Override\n-    public int nextInt(int bound) {\n-        return this.generator.nextInt(bound);\n-    }\n-\n-    @Override\n-    public long nextLong() {\n-        return this.generator.nextLong();\n-    }\n-\n-    @Override\n-    public boolean nextBoolean() {\n-        return this.generator.nextBoolean();\n-    }\n-\n-    @Override\n-    public float nextFloat() {\n-        return this.generator.nextFloat();\n-    }\n-\n-    @Override\n-    public double nextDouble() {\n-        return this.generator.nextDouble();\n-    }\n-\n-    @Override\n-    public double nextGaussian() {\n-        return this.generator.nextGaussian();\n-    }\n-\n-    @Override\n-    public IntStream ints(long streamSize) {\n-        return this.generator.ints(streamSize);\n-    }\n-\n-    @Override\n-    public IntStream ints() {\n-        return this.generator.ints();\n-    }\n-\n-    @Override\n-    public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n-        return this.generator.ints(streamSize, randomNumberOrigin, randomNumberBound);\n-    }\n-\n-    @Override\n-    public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n-        return this.generator.ints(randomNumberOrigin, randomNumberBound);\n-    }\n-\n-    @Override\n-    public LongStream longs(long streamSize) {\n-        return this.generator.longs(streamSize);\n-    }\n-\n-    @Override\n-    public LongStream longs() {\n-        return this.generator.longs();\n-    }\n-\n-    @Override\n-    public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {\n-        return this.generator.longs(streamSize, randomNumberOrigin, randomNumberBound);\n-    }\n-\n-    @Override\n-    public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n-        return this.generator.longs(randomNumberOrigin, randomNumberBound);\n-    }\n-\n-    @Override\n-    public DoubleStream doubles(long streamSize) {\n-        return this.generator.doubles(streamSize);\n-    }\n-\n-    @Override\n-    public DoubleStream doubles() {\n-        return this.generator.doubles();\n-    }\n-\n-    @Override\n-    public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n-        return this.generator.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n-    }\n-\n-    @Override\n-    public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n-        return this.generator.doubles(randomNumberOrigin, randomNumberBound);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomWrapper.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -28,0 +28,3 @@\n+import java.util.random.RandomGenerator;\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -412,0 +415,32 @@\n+    \n+    \/**\n+     * Test shuffling a list with Random.from()\n+     *\/\n+    public void testShufflingList() {\n+\tfinal ArrayList listTest = new ArrayList<Integer>();\n+\tfinal RandomGenerator randomGenerator = RandomGenerator.getDefault();\n+\tfinal Random random = Random.from(randomGenerator);\n+\t\n+\tfor (int i = 0; i < 100; i++) {\n+\t    listTest.add(i * 2);\n+\t}\n+\tfinal var listCopy = new ArrayList<Integer>(listTest);\n+\t\n+\tCollections.shuffle(listCopy, random);\n+\t\n+\tassertFalse(listCopy.equals(listTest));\n+    }\n+    \/**\n+     * Test if Random.from returns this\n+     *\/\n+    public void testRandomFromInstance() {\n+\tfinal RandomGenerator randomGenerator = RandomGenerator.getDefault();\n+\t\n+\tfinal Random randomInstance = Random.from(randomGenerator);\n+\t\n+\t\/\/we wrap the same instance again\n+\tfinal Random randomInstanceCopy = Random.from(randomInstance);\n+\t\n+\t\n+\tassertSame(randomInstance,randomInstanceCopy);\n+    }\n","filename":"test\/jdk\/java\/util\/Random\/RandomTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}