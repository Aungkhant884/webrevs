{"files":[{"patch":"@@ -93,1 +93,1 @@\n-    private static class RandomWrapper extends Random implements RandomGenerator {\n+    private static final class RandomWrapper extends Random implements RandomGenerator {\n@@ -95,1 +95,0 @@\n-        private final boolean initialized;\n@@ -98,2 +97,2 @@\n-            this.generator = randomToWrap;\n-            this.initialized = true;\n+            super(null);\n+            this.generator = Objects.requireNonNull(randomToWrap);\n@@ -102,4 +101,10 @@\n-        public static Random wrap(RandomGenerator random) {\n-            \/\/ Check to see if its not wrapping another Random instance\n-            if (random instanceof Random rand)\n-                return rand;\n+        \/**\n+         * Throws {@code NotSerializableException}.\n+         * \n+         * @param s the object input stream\n+         * @throws NotSerializableException always\n+         *\/\n+        @Serial\n+        private void readObject(ObjectInputStream s) throws NotSerializableException {\n+            throw new NotSerializableException(\"not serializable\");\n+        }\n@@ -107,1 +112,9 @@\n-            return (Random) new Random.RandomWrapper(random);\n+        \/**\n+         * Throws {@code NotSerializableException}.\n+         * \n+         * @param s the object output stream\n+         * @throws NotSerializableException always\n+         *\/\n+        @Serial\n+        private void writeObject(ObjectOutputStream s) throws NotSerializableException {\n+            throw new NotSerializableException(\"not serializable\");\n@@ -116,2 +129,1 @@\n-            if(initialized)\n-                throw new UnsupportedOperationException();\n+            throw new UnsupportedOperationException();\n@@ -246,0 +258,4 @@\n+    \n+    private Random(Void unused) {\n+        this.seed = new AtomicLong();\n+    }\n@@ -288,0 +304,1 @@\n+\n@@ -289,7 +306,8 @@\n-     * Returns an instance of {@link Random} based on this\n-     * {@link java.util.random.RandomGenerator}. If this generator is already an instance of\n-     * {@link Random}, it is returned. Otherwise, this method returns an instance of\n-     * {@link Random} that delegates all methods except setSeed to this generator.\n-     * Its setSeed method always throws {@link UnsupportedOperationException}.\n-     * @param random the {@link java.util.random.RandomGenerator} to use\n-     * @return {@link Random}\n+     * Returns an instance of {@code Random} that delegates method calls to the{@link RandomGenerator}\n+     * argument. If the generator is an instance of {@code Random}, it is returned. Otherwise, this method\n+     * returns an instance of {@code Random} that delegates all methods except {@code setSeed} to the generator.\n+     * The returned instance's {@code setSeed} method always throws {@link UnsupportedOperationException}.\n+     * The returned instance is not serializable.\n+     *\n+     * @param generator the {@code RandomGenerator} calls are delegated to\n+     * @return the delegating {@code Random} instance\n@@ -297,2 +315,5 @@\n-    public static Random from(RandomGenerator random) {\n-        return RandomWrapper.wrap(random);\n+    public static Random from(RandomGenerator generator) {\n+        if (generator instanceof Random rand)\n+            return rand;\n+\n+        return new RandomWrapper(generator);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":41,"deletions":20,"binary":false,"changes":61,"status":"modified"}]}