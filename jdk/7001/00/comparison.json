{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Random;\n@@ -34,0 +35,1 @@\n+import jdk.internal.util.random.RandomWrapper;\n@@ -140,0 +142,7 @@\n+    \/**\n+     * Returns a wrapper to use {@link java.util.Random}\n+     * @return {@link java.util.Random}\n+     *\/\n+    default Random asRandom() {\n+        return RandomWrapper.wrapRandom(this);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util.random;\n+\n+import java.util.Random;\n+import java.util.random.RandomGenerator;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+\n+\/**\n+ * Class used to wrap a {@link java.util.random.RandomGenerator} to\n+ * {@link java.util.Random}\n+ *\/\n+\n+@SuppressWarnings(\"serial\")\n+public class RandomWrapper extends Random implements RandomGenerator {\n+    private final RandomGenerator randomToWrap;\n+\n+    private RandomWrapper(RandomGenerator randomToWrap) {\n+        this.randomToWrap = randomToWrap;\n+    }\n+\n+    public static Random wrapRandom(RandomGenerator random) {\n+        \/\/ Check to see if its not wrapping another Random instance\n+        if (random instanceof Random)\n+            return (Random) random;\n+\n+        return new RandomWrapper(random);\n+    }\n+\n+    \/**\n+     * setSeed does not exist in {@link java.util.random.RandomGenerator} so can't\n+     * use it\n+     *\/\n+    @Override\n+    public void setSeed(long seed) {\n+    }\n+\n+    @Override\n+    public void nextBytes(byte[] bytes) {\n+        this.randomToWrap.nextBytes(bytes);\n+    }\n+\n+    @Override\n+    public int nextInt() {\n+        return this.randomToWrap.nextInt();\n+    }\n+\n+    @Override\n+    public int nextInt(int bound) {\n+        return this.randomToWrap.nextInt(bound);\n+    }\n+\n+    @Override\n+    public long nextLong() {\n+        return this.randomToWrap.nextLong();\n+    }\n+\n+    @Override\n+    public boolean nextBoolean() {\n+        return this.randomToWrap.nextBoolean();\n+    }\n+\n+    @Override\n+    public float nextFloat() {\n+        return this.randomToWrap.nextFloat();\n+    }\n+\n+    @Override\n+    public double nextDouble() {\n+        return this.randomToWrap.nextDouble();\n+    }\n+\n+    @Override\n+    public double nextGaussian() {\n+        return this.randomToWrap.nextGaussian();\n+    }\n+\n+    @Override\n+    public IntStream ints(long streamSize) {\n+        return this.randomToWrap.ints(streamSize);\n+    }\n+\n+    @Override\n+    public IntStream ints() {\n+        return this.randomToWrap.ints();\n+    }\n+\n+    @Override\n+    public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+        return this.randomToWrap.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+        return this.randomToWrap.ints(randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public LongStream longs(long streamSize) {\n+        return this.randomToWrap.longs(streamSize);\n+    }\n+\n+    @Override\n+    public LongStream longs() {\n+        return this.randomToWrap.longs();\n+    }\n+\n+    @Override\n+    public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {\n+        return this.randomToWrap.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+        return this.randomToWrap.longs(randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(long streamSize) {\n+        return this.randomToWrap.doubles(streamSize);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles() {\n+        return this.randomToWrap.doubles();\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+        return this.randomToWrap.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+    }\n+\n+    @Override\n+    public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+        return this.randomToWrap.doubles(randomNumberOrigin, randomNumberBound);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomWrapper.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}