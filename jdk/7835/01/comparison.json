{"files":[{"patch":"@@ -49,0 +49,2 @@\n+import static java.awt.peer.ComponentPeer.SET_BOUNDS;\n+\n@@ -444,0 +446,12 @@\n+    \/**\n+     * Reapplies the size of this device to the full-screen window.\n+     *\/\n+    private static void resizeFSWindow(final Window w, final Rectangle b) {\n+        if (w != null) {\n+            WindowPeer peer = AWTAccessor.getComponentAccessor().getPeer(w);\n+            if (peer != null) {\n+                peer.setBounds(b.x, b.y, b.width, b.height, SET_BOUNDS);\n+            }\n+        }\n+    }\n+\n@@ -466,7 +480,3 @@\n-            \/\/ resize the fullscreen window to the dimensions of the new\n-            \/\/ display mode\n-            Rectangle screenBounds = getDefaultConfiguration().getBounds();\n-            w.setBounds(screenBounds.x, screenBounds.y,\n-                        screenBounds.width, screenBounds.height);\n-            \/\/ Note: no call to replaceSurfaceData is required here since\n-            \/\/ replacement will be caused by an upcoming display change event\n+            \/\/ Note: window will get resized to actual full-screen dimensions\n+            \/\/ in the upcoming display change event, when the DPI scales\n+            \/\/ would already be correctly set etc. (see JDK-8282863)\n@@ -532,0 +542,4 @@\n+\n+        Rectangle screenBounds = getDefaultConfiguration().getBounds();\n+        resizeFSWindow(getFullScreenWindow(), screenBounds);\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsDevice.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @bug 8211999\n+ * @bug 8211999 8282863\n","filename":"test\/jdk\/java\/awt\/FullScreen\/FullscreenWindowProps\/FullscreenWindowProps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}