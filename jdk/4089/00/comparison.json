{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import static java.util.stream.Collectors.toList;\n-\n@@ -53,1 +51,0 @@\n-import java.util.TreeMap;\n@@ -91,0 +88,5 @@\n+        FACTORY_METHOD_CONVERT_DIAG(\"factory.decl.convert.diag.method\"),\n+        FACTORY_METHOD_CONVERT_THROWS(\"factory.decl.convert.throws\"),\n+        FACTORY_METHOD_CONVERT_IDENTITY(\"factory.decl.convert.identity\"),\n+        FACTORY_METHOD_CONVERT_ACCESS_METHOD(\"factory.decl.convert.access.method\"),\n+        FACTORY_METHOD_CONVERT_ACCESS_FIELD(\"factory.decl.convert.access.field\"),\n@@ -117,1 +119,0 @@\n-        NOTE(\"note\", \"Note\", \"Notes\"),\n@@ -119,0 +120,1 @@\n+        NOTE(\"note\", \"Note\", \"Notes\"),\n@@ -154,7 +156,1 @@\n-        Map<FactoryKind, List<Map.Entry<String, Message>>> groupedEntries =\n-                messageFile.messages.entrySet().stream()\n-                        .collect(\n-                                Collectors.groupingBy(\n-                                        e -> FactoryKind.parseFrom(e.getKey().split(\"\\\\.\")[1]),\n-                                        TreeMap::new,\n-                                        toList()));\n+        MessageIndex messageIndex = new MessageIndex(messageFile);\n@@ -164,6 +160,9 @@\n-        for (Map.Entry<FactoryKind, List<Map.Entry<String, Message>>> entry : groupedEntries.entrySet()) {\n-            if (entry.getKey() == FactoryKind.OTHER) continue;\n-            \/\/emit members\n-            String members = entry.getValue().stream()\n-                    .flatMap(e -> generateFactoryMethodsAndFields(e.getKey(), e.getValue()).stream())\n-                    .collect(Collectors.joining(\"\\n\\n\"));\n+        for (FactoryKind kind : FactoryKind.values()) {\n+            if (kind == FactoryKind.OTHER) continue;\n+            String members = \"\";\n+            for (MessageIndex.Entry entry : messageIndex.getEntries(kind)) {\n+                \/\/emit members\n+                members += String.join(\"\\n\\n\", generateFactoryMethodsAndFields(messageIndex, entry));\n+                \/\/add imports\n+                importedTypes.addAll(importedTypes(entry.message().getMessageInfo().getTypes()));\n+            }\n@@ -172,5 +171,2 @@\n-                    StubKind.FACTORY_CLASS.format(entry.getKey().factoryClazz, indent(members, 1));\n-            nestedDecls.add(indent(factoryDecl, 1));\n-            \/\/add imports\n-            entry.getValue().stream().forEach(e ->\n-                    importedTypes.addAll(importedTypes(e.getValue().getMessageInfo().getTypes())));\n+                    StubKind.FACTORY_CLASS.format(kind.factoryClazz, indent(members));\n+            nestedDecls.add(indent(factoryDecl));\n@@ -191,1 +187,8 @@\n-     * Indent a string to a given level.\n+     * Indent a string one level deeper.\n+     *\/\n+    String indent(String s) {\n+        return indent(s, 1);\n+    }\n+\n+    \/**\n+     * Indent a string to a given depth level.\n@@ -233,3 +236,3 @@\n-    List<String> generateFactoryMethodsAndFields(String key, Message msg) {\n-        MessageInfo msgInfo = msg.getMessageInfo();\n-        List<MessageLine> lines = msg.getLines(false);\n+    List<String> generateFactoryMethodsAndFields(MessageIndex index, MessageIndex.Entry entry) {\n+        MessageInfo msgInfo = entry.message().getMessageInfo();\n+        List<MessageLine> lines = entry.message().getLines(false);\n@@ -240,3 +243,1 @@\n-        String[] keyParts = key.split(\"\\\\.\");\n-        FactoryKind k = FactoryKind.parseFrom(keyParts[1]);\n-        String factoryName = factoryName(key);\n+        String factoryName = factoryName(entry.key());\n@@ -245,4 +246,5 @@\n-            String factoryField = StubKind.FACTORY_FIELD.format(k.keyClazz, factoryName,\n-                    \"\\\"\" + keyParts[0] + \"\\\"\",\n-                    \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n-                    javadoc);\n+            String body = generateDiagnosticConversionMethodIfNeeded(index, entry.kind, entry, factoryName, null);\n+            String factoryField = StubKind.FACTORY_FIELD.format(entry.kind.keyClazz, factoryName,\n+                    \"\\\"\" + entry.prefix + \"\\\"\",\n+                    \"\\\"\" + entry.key + \"\\\"\",\n+                    javadoc, body);\n@@ -256,0 +258,1 @@\n+                String body = generateDiagnosticConversionMethodIfNeeded(index, entry.kind, entry, factoryName, argNames);\n@@ -258,1 +261,1 @@\n-                String factoryMethod = StubKind.FACTORY_METHOD_DECL.format(suppressionString, k.keyClazz,\n+                String factoryMethod = StubKind.FACTORY_METHOD_DECL.format(suppressionString, entry.kind.keyClazz,\n@@ -260,4 +263,4 @@\n-                        indent(StubKind.FACTORY_METHOD_BODY.format(k.keyClazz,\n-                                \"\\\"\" + keyParts[0] + \"\\\"\",\n-                                \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n-                                argNames.stream().collect(Collectors.joining(\", \"))), 1),\n+                        indent(StubKind.FACTORY_METHOD_BODY.format(entry.kind.keyClazz,\n+                                \"\\\"\" + entry.prefix + \"\\\"\",\n+                                \"\\\"\" + entry.key + \"\\\"\",\n+                                argNames.stream().collect(Collectors.joining(\", \")), body)),\n@@ -271,0 +274,29 @@\n+    String generateDiagnosticConversionMethodIfNeeded(MessageIndex index, FactoryKind thisKind, MessageIndex.Entry entry,\n+                                                      String factoryName, List<String> argNames) {\n+        List<MessageIndex.Entry> duplicates = index.findOverloadedDiags(entry);\n+        if (duplicates.isEmpty()) {\n+            return \"\";\n+        }\n+        List<String> clauses = new ArrayList<>(FactoryKind.values().length);\n+        for (FactoryKind kind : FactoryKind.values()) {\n+            if (kind == thisKind) {\n+                clauses.add(StubKind.FACTORY_METHOD_CONVERT_IDENTITY.format());\n+            } else if (duplicates.stream().anyMatch(e -> e.kind == kind)) {\n+                if (argNames == null) {\n+                    \/\/ field\n+                    clauses.add(StubKind.FACTORY_METHOD_CONVERT_ACCESS_FIELD.format(\n+                            kind.factoryClazz, factoryName));\n+                } else {\n+                    \/\/ method\n+                    clauses.add(StubKind.FACTORY_METHOD_CONVERT_ACCESS_METHOD.format(\n+                            kind.factoryClazz, factoryName,\n+                            argNames.stream().collect(Collectors.joining(\", \"))));\n+                }\n+            } else {\n+                clauses.add(StubKind.FACTORY_METHOD_CONVERT_THROWS.format());\n+            }\n+        }\n+        return \" {\\n\" + indent(StubKind.FACTORY_METHOD_CONVERT_DIAG.format(\n+                clauses.get(0), clauses.get(1), clauses.get(2), clauses.get(3))) + \"\\n}\";\n+    }\n+\n@@ -276,1 +308,0 @@\n-                .skip(2)\n@@ -451,0 +482,33 @@\n+\n+    static class MessageIndex {\n+        private final Map<String, List<Entry>> groupedEntries;\n+\n+        MessageIndex(MessageFile messageFile) {\n+            groupedEntries = messageFile.messages.entrySet().stream()\n+                    .map(e -> Entry.fromKey(e.getKey(), e.getValue()))\n+                    .collect(Collectors.groupingBy(Entry::key));\n+        }\n+\n+        record Entry(FactoryKind kind, String prefix, String key, Message message) {\n+            static Entry fromKey(String key, Message message) {\n+                String[] keyParts = key.split(\"\\\\.\");\n+                String prefix = keyParts[0];\n+                FactoryKind kind = FactoryKind.parseFrom(keyParts[1]);\n+                String rest = Stream.of(keyParts).skip(2)\n+                        .collect(Collectors.joining(\".\"));\n+                return new Entry(kind, prefix, rest, message);\n+            }\n+        }\n+\n+        List<Entry> getEntries(FactoryKind kind) {\n+            return groupedEntries.values().stream()\n+                    .flatMap(e -> e.stream())\n+                    .filter(entry -> entry.kind() == kind).toList();\n+        }\n+\n+        List<Entry> findOverloadedDiags(Entry entry) {\n+            return groupedEntries.get(entry.key).stream()\n+                    .filter(e -> e.kind != entry.kind &&\n+                            e.message.getMessageInfo().toString().equals(entry.message.getMessageInfo().toString())).toList();\n+        }\n+    }\n","filename":"make\/langtools\/tools\/propertiesparser\/gen\/ClassGenerator.java","additions":103,"deletions":39,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-    List<MessageType> types = new ArrayList<>();\n+    final List<MessageType> types = new ArrayList<>();\n+    final String text;\n@@ -52,1 +53,0 @@\n-            types = new ArrayList<>();\n@@ -57,0 +57,1 @@\n+        this.text = text == null ? \"\" : text;\n@@ -69,1 +70,1 @@\n-        return types.toString();\n+        return text;\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageInfo.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    '}'\n+    '}\\n'\n@@ -59,1 +59,23 @@\n-    return new {0}({1}, {2}, {3});\n+    return new {0}({1}, {2}, {3}){4};\n+\n+factory.decl.convert.diag.method=\\\n+    public JCDiagnostic.DiagnosticInfo toType(JCDiagnostic.DiagnosticType kind) '{'\\n\\\n+    '    'return switch (kind) '{'\\n\\\n+    '        'case ERROR -> {0}\\n\\\n+    '        'case WARNING -> {1}\\n\\\n+    '        'case FRAGMENT -> {2}\\n\\\n+    '        'case NOTE -> {3}\\n\\\n+    '    }';\\n\\\n+    '}\\n'\n+\n+factory.decl.convert.throws=\\\n+    throw new AssertionError(\"Unsupported kind: \" + kind);\n+\n+factory.decl.convert.identity=\\\n+    this;\n+\n+factory.decl.convert.access.method=\\\n+    {0}.{1}({2});\n+\n+factory.decl.convert.access.field=\\\n+    {0}.{1};\n@@ -65,1 +87,1 @@\n-    public static final {0} {1} = new {0}({2}, {3});\n+    public static final {0} {1} = new {0}({2}, {3}){5};\\n\n","filename":"make\/langtools\/tools\/propertiesparser\/resources\/templates.properties","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -4009,1 +4009,2 @@\n-            return diags.create(dkind, log.currentSource(), pos, \"illegal.ref.to.restricted.type\", typeName);\n+            return diags.create(log.currentSource(), pos,\n+                    Errors.IllegalRefToRestrictedType(typeName));\n@@ -4046,2 +4047,2 @@\n-                    return diags.create(dkind, log.currentSource(), pos,\n-                        \"doesnt.exist\", location);\n+                    return diags.create(log.currentSource(), pos,\n+                        Errors.DoesntExist(location));\n@@ -4146,9 +4147,8 @@\n-            return diags.create(dkind, log.currentSource(), pos,\n-                      \"cant.apply.symbol\",\n-                      kindName(ws),\n-                      ws.name == names.init ? ws.owner.name : ws.name,\n-                      methodArguments(ws.type.getParameterTypes()),\n-                      methodArguments(argtypes),\n-                      kindName(ws.owner),\n-                      ws.owner.type,\n-                      c.snd);\n+            return diags.create(log.currentSource(), pos,\n+                    Errors.CantApplySymbol(kindName(ws),\n+                            ws.name == names.init ? ws.owner.name : ws.name,\n+                            methodArguments(ws.type.getParameterTypes()),\n+                            methodArguments(argtypes),\n+                            kindName(ws.owner),\n+                            ws.owner.type,\n+                            c.snd).toType(dkind));\n@@ -4205,1 +4205,1 @@\n-                JCDiagnostic err = diags.create(dkind,\n+                JCDiagnostic err = diags.create(\n@@ -4210,6 +4210,5 @@\n-                        log.currentSource(),\n-                        pos,\n-                        \"cant.apply.symbols\",\n-                        name == names.init ? KindName.CONSTRUCTOR : kind.absentKind(),\n-                        name == names.init ? site.tsym.name : name,\n-                        methodArguments(argtypes));\n+                        log.currentSource(), pos,\n+                        Errors.CantApplySymbols(\n+                                name == names.init ? KindName.CONSTRUCTOR : kind.absentKind(),\n+                                name == names.init ? site.tsym.name : name,\n+                                methodArguments(argtypes)).toType(dkind));\n@@ -4338,5 +4337,4 @@\n-            String key = details == null ?\n-                \"cant.apply.diamond\" :\n-                \"cant.apply.diamond.1\";\n-            return diags.create(dkind, log.currentSource(), pos, key,\n-                    Fragments.Diamond(site.tsym), details);\n+            JCDiagnostic.DiagnosticInfo info = (details == null) ?\n+                    Errors.CantApplyDiamond(Fragments.Diamond(site.tsym), null) :\n+                    Errors.CantApplyDiamond1(Fragments.Diamond(site.tsym), details).toType(dkind);\n+            return diags.create(log.currentSource(), pos, info);\n@@ -4382,4 +4380,4 @@\n-                    return diags.create(dkind, log.currentSource(),\n-                            pos, \"not.def.access.package.cant.access\",\n-                        sym, sym.location(), inaccessiblePackageReason(env, sym.packge()));\n-                } else if (   sym.packge() != syms.rootPackage\n+                    return diags.create(log.currentSource(),\n+                            pos, Errors.NotDefAccessPackageCantAccess(sym, sym.location(),\n+                                    inaccessiblePackageReason(env, sym.packge())).toType(dkind));\n+                } else if (sym.packge() != syms.rootPackage\n@@ -4387,2 +4385,2 @@\n-                    return diags.create(dkind, log.currentSource(),\n-                            pos, \"not.def.access.class.intf.cant.access.reason\",\n+                    return diags.create(log.currentSource(),\n+                            pos, Errors.NotDefAccessClassIntfCantAccessReason(\n@@ -4390,1 +4388,1 @@\n-                            inaccessiblePackageReason(env, sym.packge()));\n+                            inaccessiblePackageReason(env, sym.packge())).toType(dkind));\n@@ -4392,3 +4390,3 @@\n-                    return diags.create(dkind, log.currentSource(),\n-                            pos, \"not.def.access.class.intf.cant.access\",\n-                        sym, sym.location());\n+                    return diags.create(log.currentSource(),\n+                            pos, Errors.NotDefAccessClassIntfCantAccess(\n+                        sym, sym.location()).toType(dkind));\n@@ -4398,2 +4396,2 @@\n-                return diags.create(dkind, log.currentSource(),\n-                        pos, \"report.access\", sym,\n+                return diags.create(log.currentSource(),\n+                        pos, Errors.ReportAccess(sym,\n@@ -4401,1 +4399,1 @@\n-                        sym.location());\n+                        sym.location()).toType(dkind));\n@@ -4404,2 +4402,2 @@\n-                return diags.create(dkind, log.currentSource(),\n-                        pos, \"not.def.public.cant.access\", sym, sym.location());\n+                return diags.create(log.currentSource(),\n+                        pos, Errors.NotDefPublicCantAccess(sym, sym.location()).toType(dkind));\n@@ -4408,12 +4406,0 @@\n-\n-        private String toString(Type type) {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(type);\n-            if (type != null) {\n-                sb.append(\"[tsym:\").append(type.tsym);\n-                if (type.tsym != null)\n-                    sb.append(\"packge:\").append(type.tsym.packge());\n-                sb.append(\"]\");\n-            }\n-            return sb.toString();\n-        }\n@@ -4470,2 +4456,2 @@\n-            return diags.create(dkind, log.currentSource(),\n-                    pos, \"not.def.access.package.cant.access\", sym, sym.packge(), details);\n+            return diags.create(log.currentSource(),\n+                    pos, Errors.NotDefAccessPackageCantAccess(sym, sym.packge(), details));\n@@ -4537,2 +4523,1 @@\n-            return diags.create(dkind, log.currentSource(), pos,\n-                    \"non-static.cant.be.ref\", kindName(sym), errSym);\n+            return diags.create(log.currentSource(), pos, Errors.NonStaticCantBeRef(kindName(sym), errSym));\n@@ -4588,8 +4573,8 @@\n-            return diags.create(dkind, log.currentSource(),\n-                    pos, \"ref.ambiguous\", sname,\n-                    kindName(s1),\n-                    s1,\n-                    s1.location(site, types),\n-                    kindName(s2),\n-                    s2,\n-                    s2.location(site, types));\n+            return diags.create(log.currentSource(), pos,\n+                    Errors.RefAmbiguous(sname,\n+                            kindName(s1),\n+                            s1,\n+                            s1.location(site, types),\n+                            kindName(s2),\n+                            s2,\n+                            s2.location(site, types)).toType(dkind));\n@@ -4661,1 +4646,4 @@\n-            final String key;\n+            if (sym.kind.isResolutionError()) {\n+                return ((ResolveError) sym).getDiagnostic(dkind, pos, location, site, name, argtypes, typeargtypes);\n+            }\n+            JCDiagnostic.DiagnosticInfo info;\n@@ -4663,1 +4651,1 @@\n-                key = \"bad.static.method.in.bound.lookup\";\n+                info = Fragments.BadStaticMethodInBoundLookup(Kinds.kindName(sym), sym);\n@@ -4665,1 +4653,1 @@\n-                key = \"bad.static.method.in.unbound.lookup\";\n+                info = Fragments.BadStaticMethodInUnboundLookup(Kinds.kindName(sym), sym);\n@@ -4667,1 +4655,1 @@\n-                key = \"bad.instance.method.in.unbound.lookup\";\n+                info = Fragments.BadInstanceMethodInUnboundLookup(Kinds.kindName(sym), sym);\n@@ -4669,3 +4657,1 @@\n-            return sym.kind.isResolutionError() ?\n-                    ((ResolveError)sym).getDiagnostic(dkind, pos, location, site, name, argtypes, typeargtypes) :\n-                    diags.create(dkind, log.currentSource(), pos, key, Kinds.kindName(sym), sym);\n+            return diags.create(log.currentSource(), pos, info);\n@@ -4687,2 +4673,2 @@\n-           return diags.create(dkind, log.currentSource(), pos,\n-                \"cant.access.inner.cls.constr\", site.tsym.name, argtypes, site.getEnclosingType());\n+           return diags.create(log.currentSource(), pos,\n+                   Fragments.CantAccessInnerClsConstr(site.tsym.name, argtypes, site.getEnclosingType()));\n@@ -4704,3 +4690,1 @@\n-            JCDiagnostic d = diags.create(dkind, log.currentSource(), pos,\n-                \"cant.access\", ex.sym, ex.getDetailValue());\n-\n+            JCDiagnostic d = diags.create(log.currentSource(), pos, Errors.CantAccess(ex.sym, ex.getDetailValue()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":59,"deletions":75,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-# 0: symbol kind, 1: name, 2: list of type or message segment, 3: list of type or message segment, 4: symbol kind, 5: type, 6: message segment\n+# 0: kind name, 1: name, 2: list of type or message segment or object, 3: list of type or message segment or object, 4: kind name, 5: type, 6: message segment\n@@ -240,1 +240,1 @@\n-# 0: symbol kind, 1: name, 2: list of type\n+# 0: kind name, 1: name, 2: list of type or message segment or object\n@@ -244,1 +244,1 @@\n-# 0: symbol kind, 1: name, 2: list of type or message segment, 3: list of type or message segment, 4: symbol kind, 5: type, 6: message segment\n+# 0: kind name, 1: name, 2: list of type or message segment or object, 3: list of type or message segment or object, 4: kind name, 5: type, 6: message segment\n@@ -251,1 +251,1 @@\n-# 0: symbol kind, 1: name, 2: list of type\n+# 0: kind name, 1: name, 2: list of type or message segment or object\n@@ -991,1 +991,1 @@\n-# 0: symbol, 1: list of type, 2: type\n+# 0: name, 1: list of type, 2: type\n@@ -1116,1 +1116,1 @@\n-# 0: name, 1: symbol kind, 2: symbol, 3: symbol, 4: symbol kind, 5: symbol, 6: symbol\n+# 0: name, 1: kind name, 2: symbol, 3: symbol, 4: kind name, 5: symbol, 6: symbol\n@@ -1121,1 +1121,1 @@\n-# 0: name, 1: symbol kind, 2: symbol, 3: symbol, 4: symbol kind, 5: symbol, 6: symbol\n+# 0: name, 1: kind name, 2: symbol, 3: symbol, 4: kind name, 5: symbol, 6: symbol\n@@ -1135,1 +1135,1 @@\n-# 0: symbol, 1: set of modifier, 2: symbol\n+# 0: symbol, 1: set of flag, 2: symbol\n@@ -1139,1 +1139,1 @@\n-# 0: symbol, 1: set of modifier, 2: symbol\n+# 0: symbol, 1: set of flag, 2: symbol\n@@ -2588,1 +2588,1 @@\n-# 0: symbol kind, 1: symbol\n+# 0: kind name, 1: symbol\n@@ -2592,1 +2592,1 @@\n-# 0: symbol kind, 1: symbol\n+# 0: kind name, 1: symbol\n@@ -2596,1 +2596,1 @@\n-# 0: symbol kind, 1: symbol\n+# 0: kind name, 1: symbol\n@@ -2600,1 +2600,1 @@\n-# 0: symbol kind, 1: symbol\n+# 0: kind name, 1: symbol\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -544,2 +544,3 @@\n-        public void setArgs(Object[] args) {\n-            this.args = args;\n+        public DiagnosticInfo toType(DiagnosticType type) {\n+            if (type == this.type) return this;\n+            throw new AssertionError(\"Unsupported kind: \" + type);\n@@ -552,1 +553,1 @@\n-    public static final class Error extends DiagnosticInfo {\n+    public static class Error extends DiagnosticInfo {\n@@ -561,1 +562,1 @@\n-    public static final class Warning extends DiagnosticInfo {\n+    public static class Warning extends DiagnosticInfo {\n@@ -570,1 +571,1 @@\n-    public static final class Note extends DiagnosticInfo {\n+    public static class Note extends DiagnosticInfo {\n@@ -579,1 +580,1 @@\n-    public static final class Fragment extends DiagnosticInfo {\n+    public static class Fragment extends DiagnosticInfo {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}