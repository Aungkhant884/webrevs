{"files":[{"patch":"@@ -0,0 +1,237 @@\n+\/*\n+ * Copyright (c) 20xx, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/* @test\n+   @bug 4380543\n+   @requires (os.family == \"windows\")\n+   @summary setMargin() does not work for AbstractButton\n+   @modules java.desktop\/com.sun.java.swing.plaf.motif\n+            java.desktop\/com.sun.java.swing.plaf.windows\n+   @author Andrey Pikalev\n+   @key headful\n+   @run main\/manual bug4380543\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.FlowLayout;\n+import java.awt.Insets;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class bug4380543 {\n+    static testFrame testObj;\n+    static JFrame frame;\n+    static final CountDownLatch latch = new CountDownLatch(1);\n+    private static AtomicReference<Boolean> testResult = new AtomicReference<>(false);\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                try {\n+                    testObj = new testFrame();\n+                    createUI();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        boolean status = latch.await(5, TimeUnit.MINUTES);\n+\n+        if (!status) {\n+            System.out.println(\"Test timed out.\");\n+        }\n+\n+        onCompletion(testResult);\n+\n+    }\n+\n+    public static void createUI() throws Exception {\n+        frame = new JFrame();\n+        JPanel mainControlPanel = new JPanel(new BorderLayout());\n+        JPanel resultButtonPanel = new JPanel(new FlowLayout());\n+\n+        JTextArea instructionTextArea = new JTextArea();\n+\n+        String instructions\n+                = \"INSTRUCTIONS:\" +\n+                \"\\n 1. This is a Windows specific test. If you are not on \" +\n+                \"Windows, press Pass.\" +\n+                \"\\n 2. Check if the Left insets(margins) is set visually \" +\n+                \"similar to other three sides around Radio Button and CheckBox\" +\n+                \"(insets set to 20 on all 4 sides).\" +\n+                \"\\n 3. If Left insets(margins) appear Empty, press Fail, \" +\n+                \"else press Pass.\";\n+\n+        instructionTextArea.setText(instructions);\n+        instructionTextArea.setEnabled(false);\n+        instructionTextArea.setDisabledTextColor(Color.black);\n+        instructionTextArea.setBackground(Color.white);\n+\n+        mainControlPanel.add(instructionTextArea,BorderLayout.NORTH);\n+        JButton passButton = new JButton(\"Pass\");\n+        passButton.setActionCommand(\"Pass\");\n+\n+        passButton.addActionListener((ActionEvent e) -> {\n+            testResult.set(true);\n+            latch.countDown();\n+        });\n+\n+        JButton failButton = new JButton(\"Fail\");\n+        failButton.setActionCommand(\"Fail\");\n+        failButton.addActionListener((ActionEvent e) -> {\n+            testResult.set(false);\n+            latch.countDown();\n+        });\n+\n+        resultButtonPanel.add(passButton);\n+        resultButtonPanel.add(failButton);\n+        mainControlPanel.add(resultButtonPanel);\n+        frame.getContentPane().add(mainControlPanel,BorderLayout.SOUTH);\n+\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocation(500,50);\n+        frame.setSize(400, 150);\n+        frame.pack();\n+        frame.setVisible(true);\n+\n+        Thread.sleep(1000);\n+    }\n+\n+    private static void disposeUI()\n+    {\n+        testObj.dispose();\n+        frame.dispose();\n+    }\n+    private static void onCompletion(AtomicReference<Boolean> res)\n+    {\n+        disposeUI();\n+        if (res.toString() == \"false\")\n+        {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+}\n+\n+class testFrame extends JFrame implements ActionListener {\n+    JPanel buttonsPanel;\n+\n+    Map<String, String> lookAndFeelMaps = new HashMap<String, String>();\n+    public testFrame() throws InterruptedException {\n+        initMap();\n+        initComponents();\n+\n+    }\n+\n+\n+    public void initMap()\n+    {\n+        String sLnF;\n+        String sMapKey;\n+        UIManager.LookAndFeelInfo[] lookAndFeel = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo look : lookAndFeel) {\n+\n+            sLnF = look.getClassName();\n+            sMapKey = sLnF.substring(sLnF.lastIndexOf(\".\")+1);\n+            sMapKey = sMapKey.replaceAll(\"LookAndFeel\",\"\");\n+            sMapKey = sMapKey.trim();\n+\n+            lookAndFeelMaps.put(sMapKey, sLnF);\n+\n+        }\n+    }\n+\n+\n+    public void initComponents() throws InterruptedException {\n+        JPanel p = new JPanel();\n+        buttonsPanel = new JPanel();\n+        buttonsPanel.setLayout(new BoxLayout(buttonsPanel, BoxLayout.Y_AXIS));\n+\n+        JRadioButton rb  = new JRadioButton(\"JRadioButton\");\n+        rb.setMargin(new Insets(20, 20, 20, 20));\n+        rb.setBackground(Color.green);\n+        rb.setAlignmentX(0.5f);\n+        buttonsPanel.add(rb);\n+\n+        JCheckBox cb  = new JCheckBox(\"JCheckBox\");\n+        cb.setMargin(new Insets(20, 20, 20, 20));\n+        cb.setBackground(Color.yellow);\n+        cb.setAlignmentX(0.5f);\n+        buttonsPanel.add(cb);\n+\n+        getContentPane().add(buttonsPanel);\n+\n+        for (Map.Entry mapElement : lookAndFeelMaps.entrySet()) {\n+            String btnName = mapElement.getKey().toString();\n+            JButton btn = new JButton(btnName);\n+            btn.setActionCommand(btnName);\n+            btn.addActionListener(this);\n+            p.add(btn);\n+        }\n+\n+        getContentPane().add(p,BorderLayout.SOUTH);\n+\n+        setDefaultCloseOperation(EXIT_ON_CLOSE);\n+        setSize(500, 300);\n+        setVisible(true);\n+        Thread.sleep(1000);\n+    }\n+\n+    private static void setLookAndFeel(String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf);\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String key = e.getActionCommand();\n+        String val = lookAndFeelMaps.get(key);\n+\n+        setLookAndFeel(val);\n+        SwingUtilities.updateComponentTreeUI(this);\n+\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/4380543\/bug4380543.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"}]}