{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n@@ -51,1 +51,2 @@\n-  ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm->masm(), addr, cmpval, newval, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, result);\n+  ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm->masm(), addr, cmpval, newval, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, result);\n+  __ membar(__ AnyAny);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -462,4 +462,8 @@\n-\/\/ By default, this operation implements sequential consistency and the\n-\/\/ value held in the result register following execution of the\n-\/\/ generated code sequence is 0 to indicate failure of CAS, non-zero\n-\/\/ to indicate success.  Arguments support variations on this theme:\n+\/\/ By default, this operation has relaxed memory ordering and the value\n+\/\/ held in the result register following execution of the generated code\n+\/\/ sequence is 0 to indicate failure of CAS, non-zero to indicate\n+\/\/ success.  Arguments support variations on this theme:\n+\/\/\n+\/\/  acquire: Load from addr has acquire semantics.\n+\/\/\n+\/\/  release: Store to addr has release semantics.\n@@ -467,21 +471,0 @@\n-\/\/  acquire: Allow relaxation of the memory ordering on CAS from\n-\/\/           sequential consistency.  This can be useful when\n-\/\/           sequential consistency is not required, such as when\n-\/\/           another sequentially consistent operation is already\n-\/\/           present in the execution stream.  If acquire, successful\n-\/\/           execution has the side effect of assuring that memory\n-\/\/           values updated by other threads and \"released\" will be\n-\/\/           visible to any read operations perfomed by this thread\n-\/\/           which follow this operation in program order.  This is a\n-\/\/           special optimization that should not be enabled by default.\n-\/\/  release: Allow relaxation of the memory ordering on CAS from\n-\/\/           sequential consistency.  This can be useful when\n-\/\/           sequential consistency is not required, such as when\n-\/\/           another sequentially consistent operation is already\n-\/\/           present in the execution stream.  If release, successful\n-\/\/           completion of this operation has the side effect of\n-\/\/           assuring that all writes to memory performed by this\n-\/\/           thread that precede this operation in program order are\n-\/\/           visible to all other threads that subsequently \"acquire\"\n-\/\/           before reading the respective memory values.  This is a\n-\/\/           special optimization that should not be enabled by default.\n@@ -529,5 +512,4 @@\n-  \/\/ from addr (which is now held in tmp1) is no longer the from-space\n-  \/\/ pointer held in tmp2.  If a different thread replaced the\n-  \/\/ in-memory value with its equivalent to-space pointer, then CAS\n-  \/\/ may still be able to succeed.  The value held in the expected\n-  \/\/ register has not changed.\n+  \/\/ from addr is no longer the from-space pointer held in tmp2.  If a\n+  \/\/ different thread replaced the in-memory value with its equivalent\n+  \/\/ to-space pointer, then CAS may still be able to succeed.  The\n+  \/\/ value held in the expected register has not changed.\n@@ -606,2 +588,2 @@\n-  __ cmpxchg(addr, tmp2, new_val, size, acquire, release, false, tmp1);\n-  \/\/ EQ flag set iff success.  tmp2 holds value fetched.\n+  __ cmpxchg(addr, tmp2, new_val, size, acquire, release, false, noreg);\n+  \/\/ EQ flag set iff success.  tmp2 holds value fetched, tmp1 (rscratch1) clobbered.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"}]}