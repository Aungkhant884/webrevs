[{"commit":{"message":"8258010: Debug build failure with clang-10 due to -Wdeprecated-copy and -Wimplicit-int-float-conversion\n\n1. '-Wdeprecated-copy'\nAs specified in C++11 [1], \"the generation of the implicitly-defined\ncopy constructor is deprecated if T has a user-defined destructor or\nuser-defined copy assignment operator\". The rationale behind is the\nwell-known Rule of Three [2].\n\nIntroduced since gcc-9 [3] and clang-10 [4], flag '-Wdeprecated-copy'\nwarns about the C++11 deprecation of implicitly declared copy\nconstructor and assignment operator if one of them is user-provided.\nDefining an explicit copy constructor would suppress this warning.\n\nThe main reason why debug build with gcc-9 or higher succeeds lies in\nthe inconsistent warning behaviors between gcc and clang. See the\nreduced code example [5]. We suspect it might be return value\noptimization\/copy elision [6] that drives gcc not to declare implicit\ncopy constructor for this case.\n\nNote that flag '-Wdeprecated' in clang-8 and clang-9 would also raise\nwarnings for deprecated defintions of copy constructors. However,\n'-Wdeprecated' is not enabled by '-Wall' or '-Wextra'. Hence, clang-8\nand clang-9 are not affected.\n\n2. '-Wimplicit-int-float-conversion'\nMaking the conversion explicit would fix it.\n\nFlag '-Wimplicit-int-float-conversion' is first introduced in clang-10.\nTherefore clang-8 and clang-9 are not affected. The flag with similar\nfunctionality in gcc is '-Wfloat-conversion', but it is not enabled by\n'-Wall' or '-Wextra'. That's why this warning does not apprear when\nbuilding with gcc.\n\n[1] https:\/\/en.cppreference.com\/w\/cpp\/language\/copy_constructor\n[2] https:\/\/en.cppreference.com\/w\/cpp\/language\/rule_of_three\n[3] https:\/\/www.gnu.org\/software\/gcc\/gcc-9\/changes.html\n[4] https:\/\/releases.llvm.org\/10.0.0\/tools\/clang\/docs\/ReleaseNotes.html\n[5] https:\/\/godbolt.org\/z\/err4jM\n[6] https:\/\/en.wikipedia.org\/wiki\/Copy_elision#Return_value_optimization"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp"}],"sha":"124033f22f65fe6c828c146782d533c10af05bc1"}]