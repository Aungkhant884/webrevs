[{"commit":{"message":"Split the PR, addressing -Wdeprecated-copy only\n\nAs suggested by kimbarrett, we should focus on warnings produced by\n'-Wdeprecated-copy' in this PR. Because JDK-8259288 is a very different\nproblem and might be reviewed by folks from different teams.\n\nWill create a new PR to address JDK-8259288.\n\nChange-Id: I1b9f434ab6fcdf2763a46870eaed91641984fd76\nCustomizedGitHooks: yes"},"files":[],"sha":"4cc18217eed69d4c81f6d136c876c559fbfeccfb"},{"commit":{"message":"Update the copy constructors for class DUIterator, DUIterator_Fast and DUIterator_Last\n\n1. Update copyright year to 2021.\n2. Add the definition of copy constructor for class DUIterator.\nOtherwise, gcc with '-fno-elide-constructors' would raise a warning.\n3. For the copy constructor of class DUIterator_Fast, we initialize\n'_vdui' as false, otherwise UB is introduced.\n4. It's better to define the copy constructor of class DUIterator_Last\nas explicitly-defaulted, instead of leaving it for compilers to\nimplicitly define.\n\nChange-Id: I3d2f5b396aa116d1832f52da361ff3172459a87e\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"d0f5d7d537f98de9097af46e3279272f624f592d"},{"commit":{"message":"Remove the unused assignment operator for DUIterator_Last\n\nInstead of adding the copy constructor, remove the assignment operator\nof DUIterator_Last since it's never used.\n\nChange-Id: Idf5658e38861eb2b0e724b064d17e9ab4e93905f\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"68679966d8df8729602d5fc9ca6421ec5abdc75c"},{"commit":{"message":"8258010: Debug build failure with clang-10 due to -Wdeprecated-copy and -Wimplicit-int-float-conversion\n\n1. '-Wdeprecated-copy'\nAs specified in C++11 [1], \"the generation of the implicitly-defined\ncopy constructor is deprecated if T has a user-defined destructor or\nuser-defined copy assignment operator\". The rationale behind is the\nwell-known Rule of Three [2].\n\nIntroduced since gcc-9 [3] and clang-10 [4], flag '-Wdeprecated-copy'\nwarns about the C++11 deprecation of implicitly declared copy\nconstructor and assignment operator if one of them is user-provided.\nDefining an explicit copy constructor would suppress this warning.\n\nThe main reason why debug build with gcc-9 or higher succeeds lies in\nthe inconsistent warning behaviors between gcc and clang. See the\nreduced code example [5]. We suspect it might be return value\noptimization\/copy elision [6] that drives gcc not to declare implicit\ncopy constructor for this case.\n\nNote that flag '-Wdeprecated' in clang-8 and clang-9 would also raise\nwarnings for deprecated defintions of copy constructors. However,\n'-Wdeprecated' is not enabled by '-Wall' or '-Wextra'. Hence, clang-8\nand clang-9 are not affected.\n\n2. '-Wimplicit-int-float-conversion'\nMaking the conversion explicit would fix it.\n\nFlag '-Wimplicit-int-float-conversion' is first introduced in clang-10.\nTherefore clang-8 and clang-9 are not affected. The flag with similar\nfunctionality in gcc is '-Wfloat-conversion', but it is not enabled by\n'-Wall' or '-Wextra'. That's why this warning does not apprear when\nbuilding with gcc.\n\n[1] https:\/\/en.cppreference.com\/w\/cpp\/language\/copy_constructor\n[2] https:\/\/en.cppreference.com\/w\/cpp\/language\/rule_of_three\n[3] https:\/\/www.gnu.org\/software\/gcc\/gcc-9\/changes.html\n[4] https:\/\/releases.llvm.org\/10.0.0\/tools\/clang\/docs\/ReleaseNotes.html\n[5] https:\/\/godbolt.org\/z\/err4jM\n[6] https:\/\/en.wikipedia.org\/wiki\/Copy_elision#Return_value_optimization"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"124033f22f65fe6c828c146782d533c10af05bc1"}]