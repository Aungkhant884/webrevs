{"files":[{"patch":"@@ -796,1 +796,1 @@\n-         * NOTE: It is used by SWT, and JavaFX.\n+         * NOTE: It is used by SWT\n@@ -831,0 +831,9 @@\n+    jclass strClass = NULL;\n+    NULL_CHECK(strClass = (*env)->FindClass(env, \"java\/lang\/String\"));\n+\n+    jmethodID lastIndexMID = NULL;\n+    NULL_CHECK(lastIndexMID = (*env)->GetMethodID(env, strClass, \"lastIndexOf\", \"(I)I\"));\n+\n+    jmethodID subStringMID = NULL;\n+    NULL_CHECK(subStringMID = (*env)->GetMethodID(env, strClass, \"substring\", \"(I)Ljava\/lang\/String;\"));\n+\n@@ -833,4 +842,0 @@\n-        \/*\n-         * Clears all errors caused by getCanonicalName() on the mainclass and\n-         * leaves the JAVA_MAIN_CLASS__<pid> empty.\n-         *\/\n@@ -841,2 +846,5 @@\n-    const char *mainClassName = NULL;\n-    NULL_CHECK(mainClassName = (*env)->GetStringUTFChars(env, mainClassString, NULL));\n+    jint lastPeriod = (*env)->CallIntMethod(env, mainClassString, lastIndexMID, (jint)'.');\n+    if ((*env)->ExceptionCheck(env)) {\n+        (*env)->ExceptionClear(env);\n+        return;\n+    }\n@@ -844,14 +852,12 @@\n-    char envVar[80];\n-    \/*\n-     * The JAVA_MAIN_CLASS_<pid> environment variable is used to pass\n-     * the name of a Java class whose main() method is invoked by\n-     * the Java launcher code to start the application, to the AWT code\n-     * in order to assign the name to the Apple menu bar when the app\n-     * is active on the Mac.\n-     * The _<pid> part is added to avoid collisions with child processes.\n-     *\n-     * WARNING: This environment variable is an implementation detail and\n-     * isn't meant for use outside of the core platform. The mechanism for\n-     * passing this information from Java launcher to other modules may\n-     * change drastically between update release, and it may even be\n-     * removed or replaced with another mechanism.\n+    if (lastPeriod != -1) {\n+        mainClassString = (*env)->CallObjectMethod(env, mainClassString, subStringMID, lastPeriod+1);\n+        if ((*env)->ExceptionCheck(env)) {\n+            (*env)->ExceptionClear(env);\n+            return;\n+        }\n+    }\n+\n+    \/* There are multiple apple.awt.*\" system properties that AWT(the desktop module)\n+     * references that are inherited from Apple JDK.\n+     * This inherited AWT code looks for this property and uses it for the name\n+     * of the app as it appears in the system menu bar.\n@@ -859,1 +865,2 @@\n-     * NOTE: It is used by SWT, and JavaFX.\n+     * No idea if how much external code ever sets it, but use it if set, else\n+     * if not set (the high probability event) set it to the application class name.\n@@ -861,2 +868,33 @@\n-    snprintf(envVar, sizeof(envVar), \"JAVA_MAIN_CLASS_%d\", getpid());\n-    setenv(envVar, mainClassName, 1);\n+    const char* propName = \"apple.awt.application.name\";\n+    jstring jKey = NULL;\n+    NULL_CHECK(jKey = (*env)->NewStringUTF(env, propName));\n+\n+    jclass sysClass = NULL;\n+    NULL_CHECK(sysClass = (*env)->FindClass(env, \"java\/lang\/System\"));\n+\n+    jmethodID getPropertyMID = NULL;\n+    NULL_CHECK(getPropertyMID = (*env)->GetStaticMethodID(env, sysClass,\n+               \"getProperty\", \"(Ljava\/lang\/String;)Ljava\/lang\/String;\"));\n+\n+    jmethodID setPropertyMID = NULL;\n+    NULL_CHECK(setPropertyMID = (*env)->GetStaticMethodID(env, sysClass,\n+               \"setProperty\",\n+               \"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;\"));\n+\n+    jstring jValue = (*env)->CallStaticObjectMethod(env, sysClass, getPropertyMID, jKey);\n+    if ((*env)->ExceptionCheck(env)) {\n+        (*env)->ExceptionClear(env);\n+        (*env)->DeleteLocalRef(env, jKey);\n+        return;\n+    }\n+    if (jValue == NULL) {\n+        (*env)->CallStaticObjectMethod(env, sysClass, setPropertyMID,\n+                                       jKey, mainClassString);\n+        if ((*env)->ExceptionCheck(env)) {\n+            (*env)->ExceptionClear(env);\n+            (*env)->DeleteLocalRef(env, jKey);\n+            return;\n+        }\n+    } else {\n+        (*env)->DeleteLocalRef(env, jValue);\n+    }\n@@ -864,1 +902,1 @@\n-    (*env)->ReleaseStringUTFChars(env, mainClassString, mainClassName);\n+    (*env)->DeleteLocalRef(env, jKey);\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":63,"deletions":25,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -183,0 +183,1 @@\n+    \/\/ The launcher code sets this if it is not already set on the command line.\n@@ -187,16 +188,0 @@\n-    \/\/ If we STILL don't have it, the app name is retrieved from an environment variable (set in java.c) It should be UTF8.\n-    if (fApplicationName == nil) {\n-        char mainClassEnvVar[80];\n-        snprintf(mainClassEnvVar, sizeof(mainClassEnvVar), \"JAVA_MAIN_CLASS_%d\", getpid());\n-        char *mainClass = getenv(mainClassEnvVar);\n-        if (mainClass != NULL) {\n-            fApplicationName = [NSString stringWithUTF8String:mainClass];\n-            unsetenv(mainClassEnvVar);\n-\n-            NSRange lastPeriod = [fApplicationName rangeOfString:@\".\" options:NSBackwardsSearch];\n-            if (lastPeriod.location != NSNotFound) {\n-                fApplicationName = [fApplicationName substringFromIndex:lastPeriod.location + 1];\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/NSApplicationAWT.m","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8274397\n+ * @summary Ensure the app name system property is set on macOS\n+ * @requires os.family == \"mac\"\n+ * @compile MacOSAppNamePropertyTest.java SystemPropertyTest.java\n+ * @run main MacOSAppNamePropertyTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\/*\n+ * If the system property apple.awt.application.name is unset, it should default\n+ * to the name of this test class.\n+ * If it is set, then it should be used instead of the class.\n+ * The arg. to the test indicates the *expected* name.\n+ * The test will fail if the property is not set or does not match\n+ *\/\n+public class MacOSAppNamePropertyTest extends TestHelper {\n+\n+    static final String APPNAME = \"SystemPropertyTest\";\n+\n+    public static void main(String[]args) {\n+        if (!isMacOSX) {\n+            return;\n+        }\n+        execTest(null, APPNAME);\n+        execTest(\"-Dapple.awt.application.name=Foo\", \"Foo\");\n+    }\n+\n+    static void execTest(String propSetting, String expect) {\n+        List<String> cmdList = new ArrayList<>();\n+        cmdList.add(javaCmd);\n+        cmdList.add(\"-cp\");\n+        cmdList.add(TEST_CLASSES_DIR.getAbsolutePath());\n+        if (propSetting != null) {\n+            cmdList.add(propSetting);\n+        }\n+        cmdList.add(APPNAME);\n+        cmdList.add(expect);\n+        TestResult tr = doExec(cmdList.toArray(new String[cmdList.size()]));\n+        if (!tr.isOK()) {\n+            System.err.println(tr.toString());\n+            throw new RuntimeException(\"Test Fails\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/MacOSAppNamePropertyTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * Child launched by MacOSAppNamePropertyTest.java\n+ * If the system property apple.awt.application.name is unset, it should default\n+ * to the name of this main program class, less any package name.\n+ * If it is set, then it should be used instead of the class name.\n+ * The arg. to the test indicates the *expected* name.\n+ * The test will fail if the property is not set or does not match\n+ *\/\n+public class SystemPropertyTest {\n+\n+    public static void main(String[]args) {\n+        String prop = System.getProperty(\"apple.awt.application.name\");\n+        if (prop == null) {\n+            throw new RuntimeException(\"Property not set\");\n+        }\n+        if (!prop.equals(args[0])) {\n+            throw new RuntimeException(\"Got \" + prop + \" expected \" + args[0]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/SystemPropertyTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -86,2 +86,1 @@\n-            if (s.startsWith(\"JAVA_MAIN_CLASS_\")\n-                    || s.startsWith(\"APP_NAME_\")\n+            if (s.startsWith(\"APP_NAME_\")\n@@ -92,3 +91,0 @@\n-        runTest(envToRemove, javaCmd, \"-cp\", TEST_CLASSES_DIR.getAbsolutePath(),\n-                \"EnvironmentVariables\", \"JAVA_MAIN_CLASS_*\",\n-                \"EnvironmentVariables\");\n","filename":"test\/jdk\/tools\/launcher\/TestSpecialArgs.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}