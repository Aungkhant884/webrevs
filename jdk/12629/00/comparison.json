{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2022 SAP SE. All rights reserved.\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-  GtestUtils::check_range(p, first_size);\n+  EXPECT_RANGE_IS_MARKED(p, first_size);\n@@ -105,1 +105,1 @@\n-    GtestUtils::check_range((char*)p2, old_size, old_content);\n+    EXPECT_RANGE_IS_MARKED_WITH(p2, old_size, old_content);\n@@ -107,1 +107,1 @@\n-    GtestUtils::check_range((char*)p2 + old_size, new_size - old_size, uninitBlockPad);\n+    EXPECT_RANGE_IS_MARKED_WITH((char*)p2 + old_size, new_size - old_size, uninitBlockPad);\n@@ -110,1 +110,1 @@\n-    GtestUtils::check_range((char*)p2, new_size, old_content);\n+    EXPECT_RANGE_IS_MARKED_WITH(p2, new_size, old_content);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-bool GtestUtils::check_range(const void* p, size_t s, uint8_t expected) {\n+bool GtestUtils::is_range_marked(const void* p, size_t s, uint8_t expected) {\n","filename":"test\/hotspot\/gtest\/testutils.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  static bool check_range(const void* p, size_t s, uint8_t expected);\n+  static bool is_range_marked(const void* p, size_t s, uint8_t expected);\n@@ -45,2 +45,2 @@\n-  static void mark_range(void* p, size_t s)           { mark_range_with(p, s, 32); }\n-  static bool check_range(const void* p, size_t s)    { return check_range(p, s, 32); }\n+  static void mark_range(void* p, size_t s)               { mark_range_with(p, s, 32); }\n+  static bool is_range_marked(const void* p, size_t s)    { return is_range_marked(p, s, 32); }\n@@ -50,2 +50,4 @@\n-#define ASSERT_RANGE_IS_MARKED_WITH(p, size, mark)  ASSERT_TRUE(GtestUtils::check_range(p, size, mark))\n-#define ASSERT_RANGE_IS_MARKED(p, size)             ASSERT_TRUE(GtestUtils::check_range(p, size))\n+#define ASSERT_RANGE_IS_MARKED_WITH(p, size, mark)  ASSERT_TRUE(GtestUtils::is_range_marked(p, size, mark))\n+#define ASSERT_RANGE_IS_MARKED(p, size)             ASSERT_TRUE(GtestUtils::is_range_marked(p, size))\n+#define EXPECT_RANGE_IS_MARKED_WITH(p, size, mark)  EXPECT_TRUE(GtestUtils::is_range_marked(p, size, mark))\n+#define EXPECT_RANGE_IS_MARKED(p, size)             EXPECT_TRUE(GtestUtils::is_range_marked(p, size))\n","filename":"test\/hotspot\/gtest\/testutils.hpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}