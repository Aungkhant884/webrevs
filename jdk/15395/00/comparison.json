{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+    vTableTypeMap = null; \/\/ force vTableTypeMap to get re-initialized later\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+serviceability\/sa\/ClhsdbAttachDifferentJVMs.java              8307393   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-generational-zgc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8314679\n+ * @summary Test clhsdb attach, detach, and then attach to different JVM\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbAttachDifferentJVMs\n+ *\/\n+\n+public class ClhsdbAttachDifferentJVMs {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting ClhsdbAttach test\");\n+\n+        LingeredApp theApp1 = null;\n+        LingeredApp theApp2 = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            theApp1 = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp1.getPid());\n+            theApp2 = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp2.getPid());\n+            String attach1 = \"attach \" + theApp1.getPid();\n+            String attach2 = \"attach \" + theApp2.getPid();\n+\n+            List<String> cmds = List.of(\n+                    \"where\",\n+                    attach1,\n+                    \"threads\",\n+                    \"detach\",\n+                    attach2,\n+                    \"jstack\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            expStrMap.put(\"where\", List.of(\n+                    \"Command not valid until attached to a VM\"));\n+            expStrMap.put(attach1, List.of(\n+                    \"Attaching to process \" + theApp1.getPid()));\n+            expStrMap.put(\"threads\", List.of(\n+                    \"Reference Handler\"));\n+            expStrMap.put(attach2, List.of(\n+                    \"Attaching to process \" + theApp2.getPid()));\n+            expStrMap.put(\"jstack\", List.of(\n+                    \"Reference Handler\"));\n+\n+            Map<String, List<String>> unexpStrMap = new HashMap<>();\n+            unexpStrMap.put(\"jstack\", List.of(\n+                    \"WARNING\"));\n+\n+            test.run(-1, cmds, expStrMap, unexpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp1);\n+            LingeredApp.stopApp(theApp2);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbAttachDifferentJVMs.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}