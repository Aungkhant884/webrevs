{"files":[{"patch":"@@ -1197,1 +1197,1 @@\n-    FLAG_SET_ERGO(NonNMethodCodeHeapSize, 0);\n+    FLAG_SET_ERGO(NonNMethodCodeHeapSize, (uintx)os::vm_page_size());\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,0 +126,10 @@\n+\/\/ For XXXThreshold flags, which all have a valid range of [0 .. max_jint]\n+intx CompilerConfig::jvmflag_scaled_compile_threshold(intx threshold) {\n+  return MAX2((intx)0, MIN2(scaled_compile_threshold(threshold), (intx)max_jint));\n+}\n+\n+\/\/ For XXXNotifyFreqLog flags, which all have a valid range of [0 .. 30]\n+intx CompilerConfig::jvmflag_scaled_freq_log(intx freq_log) {\n+  return MAX2((intx)0, MIN2(scaled_freq_log(freq_log), (intx)30));\n+}\n+\n@@ -367,2 +377,2 @@\n-    FLAG_SET_ERGO(Tier0InvokeNotifyFreqLog, scaled_freq_log(Tier0InvokeNotifyFreqLog));\n-    FLAG_SET_ERGO(Tier0BackedgeNotifyFreqLog, scaled_freq_log(Tier0BackedgeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier0InvokeNotifyFreqLog, jvmflag_scaled_freq_log(Tier0InvokeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier0BackedgeNotifyFreqLog, jvmflag_scaled_freq_log(Tier0BackedgeNotifyFreqLog));\n@@ -370,4 +380,4 @@\n-    FLAG_SET_ERGO(Tier3InvocationThreshold, scaled_compile_threshold(Tier3InvocationThreshold));\n-    FLAG_SET_ERGO(Tier3MinInvocationThreshold, scaled_compile_threshold(Tier3MinInvocationThreshold));\n-    FLAG_SET_ERGO(Tier3CompileThreshold, scaled_compile_threshold(Tier3CompileThreshold));\n-    FLAG_SET_ERGO(Tier3BackEdgeThreshold, scaled_compile_threshold(Tier3BackEdgeThreshold));\n+    FLAG_SET_ERGO(Tier3InvocationThreshold, jvmflag_scaled_compile_threshold(Tier3InvocationThreshold));\n+    FLAG_SET_ERGO(Tier3MinInvocationThreshold, jvmflag_scaled_compile_threshold(Tier3MinInvocationThreshold));\n+    FLAG_SET_ERGO(Tier3CompileThreshold, jvmflag_scaled_compile_threshold(Tier3CompileThreshold));\n+    FLAG_SET_ERGO(Tier3BackEdgeThreshold, jvmflag_scaled_compile_threshold(Tier3BackEdgeThreshold));\n@@ -378,2 +388,2 @@\n-    FLAG_SET_ERGO(Tier2InvokeNotifyFreqLog, scaled_freq_log(Tier2InvokeNotifyFreqLog));\n-    FLAG_SET_ERGO(Tier2BackedgeNotifyFreqLog, scaled_freq_log(Tier2BackedgeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier2InvokeNotifyFreqLog, jvmflag_scaled_freq_log(Tier2InvokeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier2BackedgeNotifyFreqLog, jvmflag_scaled_freq_log(Tier2BackedgeNotifyFreqLog));\n@@ -381,2 +391,2 @@\n-    FLAG_SET_ERGO(Tier3InvokeNotifyFreqLog, scaled_freq_log(Tier3InvokeNotifyFreqLog));\n-    FLAG_SET_ERGO(Tier3BackedgeNotifyFreqLog, scaled_freq_log(Tier3BackedgeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier3InvokeNotifyFreqLog, jvmflag_scaled_freq_log(Tier3InvokeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier3BackedgeNotifyFreqLog, jvmflag_scaled_freq_log(Tier3BackedgeNotifyFreqLog));\n@@ -384,1 +394,1 @@\n-    FLAG_SET_ERGO(Tier23InlineeNotifyFreqLog, scaled_freq_log(Tier23InlineeNotifyFreqLog));\n+    FLAG_SET_ERGO(Tier23InlineeNotifyFreqLog, jvmflag_scaled_freq_log(Tier23InlineeNotifyFreqLog));\n@@ -386,4 +396,4 @@\n-    FLAG_SET_ERGO(Tier4InvocationThreshold, scaled_compile_threshold(Tier4InvocationThreshold));\n-    FLAG_SET_ERGO(Tier4MinInvocationThreshold, scaled_compile_threshold(Tier4MinInvocationThreshold));\n-    FLAG_SET_ERGO(Tier4CompileThreshold, scaled_compile_threshold(Tier4CompileThreshold));\n-    FLAG_SET_ERGO(Tier4BackEdgeThreshold, scaled_compile_threshold(Tier4BackEdgeThreshold));\n+    FLAG_SET_ERGO(Tier4InvocationThreshold, jvmflag_scaled_compile_threshold(Tier4InvocationThreshold));\n+    FLAG_SET_ERGO(Tier4MinInvocationThreshold, jvmflag_scaled_compile_threshold(Tier4MinInvocationThreshold));\n+    FLAG_SET_ERGO(Tier4CompileThreshold, jvmflag_scaled_compile_threshold(Tier4CompileThreshold));\n+    FLAG_SET_ERGO(Tier4BackEdgeThreshold, jvmflag_scaled_compile_threshold(Tier4BackEdgeThreshold));\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+  static intx jvmflag_scaled_compile_threshold(intx threshold);\n@@ -128,0 +129,1 @@\n+  static intx jvmflag_scaled_freq_log(intx freq_log);\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    verbose |= (origin == JVMFlagOrigin::ERGONOMIC);\n@@ -69,0 +70,3 @@\n+        if (origin == JVMFlagOrigin::ERGONOMIC) {\n+          fatal(\"FLAG_SET_ERGO cannot be used to set an invalid value for %s\", flag->name());\n+        }\n@@ -107,1 +111,1 @@\n-    bool verbose = JVMFlagLimit::verbose_checks_needed();\n+    bool verbose = JVMFlagLimit::verbose_checks_needed() | (origin == JVMFlagOrigin::ERGONOMIC);\n@@ -113,0 +117,3 @@\n+        if (origin == JVMFlagOrigin::ERGONOMIC) {\n+          fatal(\"FLAG_SET_ERGO cannot be used to set an invalid value for %s\", flag->name());\n+        }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,0 @@\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n@@ -92,0 +91,4 @@\n+\/\/ FLAG_SET_ERGO must be always be called with a valid value. If an invalid value\n+\/\/ is detected then the VM will exit.\n+#define FLAG_SET_ERGO(name, value)     (void)(FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n+\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}