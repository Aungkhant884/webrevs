{"files":[{"patch":"@@ -82,2 +82,2 @@\n-     * Exhaustively check that all latin1 code point pairs are equalsIgnoreCased\n-     * in a manner consistent with Character.toUpperCase, Character.toLowerCase\n+     * Exhaustively check that all 256x256 latin1 code point pairs are equalsIgnoreCased\n+     * in a manner consistent with Character.toLowerCase(Character.toUpperCase(c));\n@@ -90,2 +90,0 @@\n-                String as = Character.toString(a);\n-                String bs = Character.toString(b);\n@@ -93,5 +91,10 @@\n-                int na = Character.toLowerCase(Character.toUpperCase(a));\n-                int nb = Character.toLowerCase(Character.toUpperCase(b));\n-                if (na == nb) {\n-                    assertTrue(as.equalsIgnoreCase(bs),\n-                            \"Expected %s to equalsIgnoreCase %s\".formatted(as, bs));\n+                int caseFoldA = Character.toLowerCase(Character.toUpperCase(a));\n+                int caseFoldB = Character.toLowerCase(Character.toUpperCase(b));\n+\n+                String astr = Character.toString(a);\n+                String bstr = Character.toString(b);\n+\n+                \/\/ If characters fold to the same lowercase, their strings should equalsIgnoreCase:\n+                if (caseFoldA == caseFoldB) {\n+                    assertTrue(astr.equalsIgnoreCase(bstr),\n+                            \"Expected %s to equalsIgnoreCase %s\".formatted(astr, bstr));\n@@ -99,2 +102,2 @@\n-                    assertFalse(as.equalsIgnoreCase(bs),\n-                            \"Expected %s to not equalsIgnoreCase %s\".formatted(as, bs));\n+                    assertFalse(astr.equalsIgnoreCase(bstr),\n+                            \"Expected %s to not equalsIgnoreCase %s\".formatted(astr, bstr));\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/EqualsIgnoreCase.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}