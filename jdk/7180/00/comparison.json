{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,0 +290,25 @@\n+\/\/ Write MethodParameters attribute\n+\/\/ JVMSpec|   MethodParameters_attribute {\n+\/\/ JVMSpec|     u2 attribute_name_index;\n+\/\/ JVMSpec|     u4 attribute_length;\n+\/\/ JVMSpec|     u1 parameters_count;\n+\/\/ JVMSpec|     {   u2 name_index;\n+\/\/ JVMSpec|         u2 access_flags;\n+\/\/ JVMSpec|     } parameters[parameters_count];\n+\/\/ JVMSpec|   }\n+void JvmtiClassFileReconstituter::write_method_parameter_attribute(const ConstMethod* const_method) {\n+  const MethodParametersElement *parameters = const_method->method_parameters_start();\n+  int length = const_method->method_parameters_length();\n+  assert(length <= max_jubyte, \"must fit u1\");\n+  int size = 1                  \/\/ parameters_count\n+           + (2 + 2) * length;  \/\/ parameters\n+\n+  write_attribute_name_index(\"MethodParameters\");\n+  write_u4(size);\n+  write_u1(length);\n+  for (int index = 0; index < length; index++) {\n+    write_u2(parameters[index].name_cp_index);\n+    write_u2(parameters[index].flags);\n+  }\n+}\n+\n@@ -692,0 +717,3 @@\n+  if (const_method->has_method_parameters()) {\n+    ++attr_count;     \/\/ has MethodParameters attribute\n+  }\n@@ -719,0 +747,3 @@\n+  if (const_method->has_method_parameters()) {\n+    write_method_parameter_attribute(const_method);\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,1 @@\n+  void write_method_parameter_attribute(const ConstMethod* const_method);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2269,15 +2269,0 @@\n-\n-  \/\/ We also need to rewrite the parameter name indexes, if there is\n-  \/\/ method parameter data present\n-  if(method->has_method_parameters()) {\n-    const int len = method->method_parameters_length();\n-    MethodParametersElement* elem = method->method_parameters_start();\n-\n-    for (int i = 0; i < len; i++) {\n-      const u2 cp_index = elem[i].name_cp_index;\n-      const u2 new_cp_index = find_new_index(cp_index);\n-      if (new_cp_index != 0) {\n-        elem[i].name_cp_index = new_cp_index;\n-      }\n-    }\n-  }\n@@ -3697,0 +3682,13 @@\n+    \/\/ Update constant pool indices in the method's method_parameters.\n+    int mp_length = method->method_parameters_length();\n+    if (mp_length >= 0) {\n+        MethodParametersElement* elem = method->method_parameters_start();\n+        for (int j = 0; j < mp_length; j++) {\n+            const int cp_index = elem[j].name_cp_index;\n+            const int new_cp_index = find_new_index(cp_index);\n+            if (new_cp_index != 0) {\n+                elem[j].name_cp_index = new_cp_index;\n+            }\n+        }\n+    }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,366 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8240908\n+ *\n+ * @library \/test\/lib\n+ * @run compile -g -parameters RetransformWithMethodParametersTest.java\n+ * @run shell MakeJAR.sh retransformAgent\n+ *\n+ * @run main\/othervm -javaagent:retransformAgent.jar RetransformWithMethodParametersTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.ClassTransformer;\n+\n+class MethodParametersTarget {\n+    public void method1(\n+            int intParam1, String stringParam1 \/\/ @1 commentout\n+            \/\/ @1 uncomment   int intParam2, String stringParam2\n+            )\n+    {\n+        \/\/ @1 uncomment System.out.println(stringParam2);   \/\/ change CP\n+    }\n+}\n+\n+public class RetransformWithMethodParametersTest extends ATransformerManagementTestCase {\n+\n+    public static void main (String[] args) throws Throwable {\n+        ATestCaseScaffold test = new RetransformWithMethodParametersTest();\n+        test.runTest();\n+    }\n+\n+    private String targetClassName = \"MethodParametersTarget\";\n+    private String classFileName = targetClassName + \".class\";\n+    private String sourceFileName = \"RetransformWithMethodParametersTest.java\";\n+    private Class targetClass;\n+    private byte[] originalClassBytes;\n+\n+    private byte[] seenClassBytes;\n+    private byte[] newClassBytes;\n+\n+    public RetransformWithMethodParametersTest() throws Throwable {\n+        super(\"RetransformWithMethodParametersTest\");\n+\n+        File origClassFile = new File(System.getProperty(\"test.classes\", \".\"), classFileName);\n+        log(\"Reading test class from \" + origClassFile);\n+        originalClassBytes = Files.readAllBytes(origClassFile.toPath());\n+        log(\"Read \" + originalClassBytes.length + \" bytes.\");\n+\n+        DisassembledClassbytes disasm = new DisassembledClassbytes(originalClassBytes);\n+        log(\"original:\");\n+        disasm.print();\n+        assertTrue(\"MethodParameters not found\", !disasm.methodParameters().lines.isEmpty());\n+    }\n+\n+    private void log(Object o) {\n+        System.out.println(String.valueOf(o));\n+    }\n+\n+    \/\/\n+    private void verifyMethodParams(boolean expectedPresent, String... expectedNames) throws Throwable {\n+        Class cls = Class.forName(targetClassName);\n+        \/\/ the class contains 1 method (method1)\n+        Method method = cls.getDeclaredMethods()[0];\n+        Parameter[] params = method.getParameters();\n+        log(\"Params of \" + method.getName() + \" method (\" + params.length + \"):\");\n+        if (expectedPresent) {\n+            assertEquals(expectedNames.length, params.length);\n+        }\n+        for (int i = 0; i < params.length; i++) {\n+            log(\"  \" + i + \": \" + params[i].getName());\n+            assertEquals(expectedPresent, params[i].isNamePresent());\n+            if (expectedPresent) {\n+                assertEquals(expectedNames[i], params[i].getName());\n+            }\n+        }\n+    }\n+\n+    private void reset() {\n+        seenClassBytes = null;\n+        newClassBytes = null;\n+    }\n+\n+    private byte[] getClassBytes() throws Throwable {\n+        reset();\n+        fInst.retransformClasses(targetClass);\n+        assertTrue(targetClassName + \" was not seen by transform()\", seenClassBytes != null);\n+        return seenClassBytes;\n+    }\n+\n+    private void setClassBytes(byte[] classBytes) throws Throwable {\n+        reset();\n+        newClassBytes = classBytes;\n+        fInst.retransformClasses(targetClass);\n+        assertTrue(targetClassName + \" was not seen by transform()\", seenClassBytes != null);\n+    }\n+\n+    private static final String[] expectedDifferentStrings = {\n+            \"^Classfile .+$\",\n+            \"^[\\\\s]+SHA-256 checksum .[^\\\\s]+$\"\n+    };\n+\n+    private boolean expectedDifferent(String line) {\n+        for (String s: expectedDifferentStrings) {\n+            Pattern p = Pattern.compile(s);\n+            if (p.matcher(line).find()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void compareClassBytes(byte[] bytes1, byte[] bytes2) throws Throwable {\n+        if (bytes1.length != bytes2.length) {\n+            log(\"Class bytes have different length: \" + bytes1.length + \" != \" + bytes2.length);\n+        } else {\n+            int pos = Arrays.mismatch(bytes1, bytes2);\n+            if (pos < 0) {\n+                log(\"Class bytes are identical.\");\n+                return;\n+            }\n+            log(\"Class bytes are different (starting from \" + pos + \"): \" + bytes1.length + \" != \" + bytes2.length);\n+        }\n+\n+        log(\"Disassembly difference:\");\n+        \/\/ compare 'javap -v' output for the class files\n+        List<String> out1 = new DisassembledClassbytes(bytes1).lines;\n+        DisassembledClassbytes disasm2 = new DisassembledClassbytes(bytes2);\n+        List<String> out2 = disasm2.lines;\n+        boolean different = false;\n+        boolean orderChanged = false;\n+        int lineNum = 0;\n+        for (String line: out1) {\n+            if (!expectedDifferent(line)) {\n+                if (!out2.contains(line)) {\n+                    different = true;\n+                    System.out.println(\"< (\" + (lineNum + 1) + \") \" + line);\n+                } else {\n+                    if (lineNum < out2.size() && !out1.get(lineNum).equals(out2.get(lineNum))) {\n+                        \/\/ out2 contains line, but at different position\n+                        System.out.println(\"orig (\" + lineNum + \"): \" + line);\n+                        orderChanged = true;\n+                    }\n+                }\n+            }\n+            lineNum++;\n+        }\n+        lineNum = 0;\n+        for (String line: out2) {\n+            if (!expectedDifferent(line)) {\n+                if (!out1.contains(line)) {\n+                    different = true;\n+                    System.out.println(\"> (\" + (lineNum + 1) + \") \" + line);\n+                }\n+            }\n+            lineNum++;\n+        }\n+\n+        if (different) {\n+            log(\"from transformer:\");\n+            disasm2.print();\n+\n+            fail(targetClassName + \" did not match .class file\");\n+        }\n+        log(\"Disassembled files are equals\" + (orderChanged ? \" (order changed)\" : \"\"));\n+    }\n+\n+    private class DisassembledClassbytes {\n+        public final List<String> lines;\n+\n+        public DisassembledClassbytes(List<String> lines) {\n+            this.lines = lines;\n+        }\n+        public DisassembledClassbytes(byte[] classBytes) throws Throwable {\n+            this(disassembleClassBytes(classBytes));\n+        }\n+\n+        public void print() {\n+            log(\"DisassembledClassbytes -------------------\");\n+            lines.forEach(s -> log(s));\n+            log(\"==========================================\");\n+        }\n+\n+        public boolean contains(String s) {\n+            for (String line: lines) {\n+                if (line.contains(s)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        public DisassembledClassbytes getSection(String name) {\n+            List<String> result = new ArrayList<>();\n+            boolean inSection = false;\n+            String sectionPrefix = \"\";\n+            Pattern p = Pattern.compile(\"^( *)\" + name + \"\\\\b.*$\");\n+\n+            for (String line: lines) {\n+                if (inSection) {\n+                    if (line.startsWith(sectionPrefix)) {\n+                        result.add(line);\n+                    } else {\n+                        inSection = false; \/\/ and check if new section is started here\n+                    }\n+                }\n+                if (!inSection) {\n+                    Matcher m = p.matcher(line);\n+                    if (m.find()) {\n+                        inSection = true;\n+                        sectionPrefix = m.group(1) + \" \";\n+                        \/\/ add section header as well\n+                        result.add(line);\n+                    }\n+                }\n+            }\n+            return new DisassembledClassbytes(result);\n+        }\n+\n+        public DisassembledClassbytes methodParameters() {\n+            return getSection(\"MethodParameters\");\n+        }\n+    }\n+\n+    private List<String> disassembleClassBytes(byte[] bytes) throws Throwable {\n+        File f = new File(classFileName);\n+        try (FileOutputStream fos = new FileOutputStream(f)) {\n+            fos.write(bytes);\n+        }\n+\n+        JDKToolLauncher javap = JDKToolLauncher.create(\"javap\")\n+                .addToolArg(\"-verbose\")\n+                .addToolArg(\"-p\")       \/\/ Shows all classes and members.\n+                \/\/.addToolArg(\"-c\")       \/\/ Prints out disassembled code\n+                \/\/.addToolArg(\"-s\")       \/\/ Prints internal type signatures.\n+                .addToolArg(f.toString());\n+        ProcessBuilder pb = new ProcessBuilder(javap.getCommand());\n+        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n+        out.shouldHaveExitValue(0);\n+        try {\n+            Files.delete(f.toPath());\n+        } catch (Exception ex) {\n+            \/\/ ignore\n+        }\n+        return out.asLines();\n+    }\n+\n+\n+    protected final void doRunTest() throws Throwable {\n+        beVerbose();\n+\n+        ClassLoader loader = getClass().getClassLoader();\n+        targetClass = loader.loadClass(targetClassName);\n+        assertEquals(targetClassName, targetClass.getName());\n+        verifyMethodParams(true, \"intParam1\", \"stringParam1\");\n+\n+        log(\"(-1)1st arg name = \" + targetClass.getMethods()[0].getParameters()[0].getName());\n+\n+        addTransformerToManager(fInst, new Transformer(), true);\n+\n+        {\n+            log(\"Testcase 1: ensure ClassFileReconstiruter restores MethodParameters attribute\");\n+            byte[] classBytes = getClassBytes();\n+\n+            compareClassBytes(originalClassBytes, classBytes);\n+            log(\"\");\n+        }\n+\n+        {\n+            log(\"Testcase 2: redefine class with changed parameter names\");\n+            byte[] classBytes = Files.readAllBytes(Paths.get(\n+                    ClassTransformer.fromTestSource(sourceFileName)\n+                            .transform(1, targetClassName, \"-g\", \"-parameters\")));\n+            DisassembledClassbytes disasm = new DisassembledClassbytes(classBytes);\n+            log(\"transformed class:\");\n+            disasm.print();\n+            assertTrue(\"MethodParameters not found\", !disasm.methodParameters().lines.isEmpty());\n+\n+            setClassBytes(classBytes);\n+\n+            verifyMethodParams(true, \"intParam2\", \"stringParam2\");\n+        }\n+\n+        {\n+            log(\"Testcase 3: redefine class with no parameter names\");\n+            byte[] classBytes = Files.readAllBytes(Paths.get(\n+                    ClassTransformer.fromTestSource(sourceFileName)\n+                            .transform(1, targetClassName, \"-g\")));\n+            DisassembledClassbytes disasm = new DisassembledClassbytes(classBytes);\n+            log(\"transformed class:\");\n+            disasm.print();\n+            \/\/ ensure there is no MethodParameters attr.\n+            assertTrue(\"MethodParameters found\", disasm.methodParameters().lines.isEmpty());\n+\n+            setClassBytes(classBytes);\n+\n+            \/\/ MethodParameters attribute should be deleted.\n+            verifyMethodParams(false);\n+        }\n+    }\n+\n+\n+    public class Transformer implements ClassFileTransformer {\n+        public Transformer() {\n+        }\n+\n+        public String toString() {\n+            return Transformer.this.getClass().getName();\n+        }\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+            Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n+\n+            if (className.equals(targetClassName)) {\n+                log(this + \".transform() sees '\" + className\n+                        + \"' of \" + classfileBuffer.length + \" bytes.\");\n+                seenClassBytes = classfileBuffer;\n+                if (newClassBytes != null) {\n+                    log(this + \".transform() sets new classbytes for '\" + className\n+                            + \"' of \" + newClassBytes.length + \" bytes.\");\n+                }\n+                return newClassBytes;\n+            }\n+\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformWithMethodParametersTest.java","additions":366,"deletions":0,"binary":false,"changes":366,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package lib.jdb;\n+package jdk.test.lib.util;\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ClassTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/ClassTransformer.java","status":"copied"}]}