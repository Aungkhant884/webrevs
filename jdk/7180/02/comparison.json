{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,0 +290,25 @@\n+\/\/ Write MethodParameters attribute\n+\/\/ JVMSpec|   MethodParameters_attribute {\n+\/\/ JVMSpec|     u2 attribute_name_index;\n+\/\/ JVMSpec|     u4 attribute_length;\n+\/\/ JVMSpec|     u1 parameters_count;\n+\/\/ JVMSpec|     {   u2 name_index;\n+\/\/ JVMSpec|         u2 access_flags;\n+\/\/ JVMSpec|     } parameters[parameters_count];\n+\/\/ JVMSpec|   }\n+void JvmtiClassFileReconstituter::write_method_parameter_attribute(const ConstMethod* const_method) {\n+  const MethodParametersElement *parameters = const_method->method_parameters_start();\n+  int length = const_method->method_parameters_length();\n+  assert(length <= max_jubyte, \"must fit u1\");\n+  int size = 1                  \/\/ parameters_count\n+           + (2 + 2) * length;  \/\/ parameters\n+\n+  write_attribute_name_index(\"MethodParameters\");\n+  write_u4(size);\n+  write_u1(length);\n+  for (int index = 0; index < length; index++) {\n+    write_u2(parameters[index].name_cp_index);\n+    write_u2(parameters[index].flags);\n+  }\n+}\n+\n@@ -692,0 +717,3 @@\n+  if (const_method->has_method_parameters()) {\n+    ++attr_count;     \/\/ has MethodParameters attribute\n+  }\n@@ -719,0 +747,3 @@\n+  if (const_method->has_method_parameters()) {\n+    write_method_parameter_attribute(const_method);\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,1 @@\n+  void write_method_parameter_attribute(const ConstMethod* const_method);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2269,15 +2269,0 @@\n-\n-  \/\/ We also need to rewrite the parameter name indexes, if there is\n-  \/\/ method parameter data present\n-  if(method->has_method_parameters()) {\n-    const int len = method->method_parameters_length();\n-    MethodParametersElement* elem = method->method_parameters_start();\n-\n-    for (int i = 0; i < len; i++) {\n-      const u2 cp_index = elem[i].name_cp_index;\n-      const u2 new_cp_index = find_new_index(cp_index);\n-      if (new_cp_index != 0) {\n-        elem[i].name_cp_index = new_cp_index;\n-      }\n-    }\n-  }\n@@ -3697,0 +3682,13 @@\n+    \/\/ Update constant pool indices in the method's method_parameters.\n+    int mp_length = method->method_parameters_length();\n+    if (mp_length > 0) {\n+        MethodParametersElement* elem = method->method_parameters_start();\n+        for (int j = 0; j < mp_length; j++) {\n+            const int cp_index = elem[j].name_cp_index;\n+            const int new_cp_index = find_new_index(cp_index);\n+            if (new_cp_index != 0) {\n+                elem[j].name_cp_index = new_cp_index;\n+            }\n+        }\n+    }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8240908\n+ *\n+ * @library \/test\/lib\n+ * @run compile -g -parameters RetransformWithMethodParametersTest.java\n+ * @run shell MakeJAR.sh retransformAgent\n+ *\n+ * @run main\/othervm -javaagent:retransformAgent.jar RetransformWithMethodParametersTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.ClassTransformer;\n+\n+\/*\n+ * The test verifies Instrumentation.retransformClasses() (and JVMTI function RetransformClasses)\n+ * correctly handles MethodParameter attribute:\n+ * - classfile bytes passed to transformers (and JVMTI ClassFileLoadHook event callback) contain the attribute;\n+ * - the attribute is updated.\n+ *\/\n+\n+\/\/ See ClassTransformer.transform(int) comment for @1 tag explanations.\n+class MethodParametersTarget {\n+    \/\/ The class contains the only method, so we don't have issue with method sorting\n+    \/\/ and ClassFileReconstituter should restore the same bytes as original classbytes.\n+    public void method1(\n+            int intParam1, String stringParam1 \/\/ @1 commentout\n+            \/\/ @1 uncomment   int intParam2, String stringParam2\n+            )\n+    {\n+        \/\/ @1 uncomment System.out.println(stringParam2);   \/\/ change CP\n+    }\n+}\n+\n+public class RetransformWithMethodParametersTest extends ATransformerManagementTestCase {\n+\n+    public static void main (String[] args) throws Throwable {\n+        ATestCaseScaffold test = new RetransformWithMethodParametersTest();\n+        test.runTest();\n+    }\n+\n+    private String targetClassName = \"MethodParametersTarget\";\n+    private String classFileName = targetClassName + \".class\";\n+    private String sourceFileName = \"RetransformWithMethodParametersTest.java\";\n+    private Class targetClass;\n+    private byte[] originalClassBytes;\n+\n+    private byte[] seenClassBytes;\n+    private byte[] newClassBytes;\n+\n+    public RetransformWithMethodParametersTest() throws Throwable {\n+        super(\"RetransformWithMethodParametersTest\");\n+\n+        File origClassFile = new File(System.getProperty(\"test.classes\", \".\"), classFileName);\n+        log(\"Reading test class from \" + origClassFile);\n+        originalClassBytes = Files.readAllBytes(origClassFile.toPath());\n+        log(\"Read \" + originalClassBytes.length + \" bytes.\");\n+    }\n+\n+    private void log(Object o) {\n+        System.out.println(String.valueOf(o));\n+    }\n+\n+    \/\/ Prints and verifies MethodParameters attribute using reflection.\n+    private void verifyMethodParams(boolean expectedPresent, String... expectedNames) throws Throwable {\n+        Class cls = Class.forName(targetClassName);\n+        \/\/ the class contains 1 method (method1)\n+        Method method = cls.getDeclaredMethods()[0];\n+        Parameter[] params = method.getParameters();\n+        log(\"Params of \" + method.getName() + \" method (\" + params.length + \"):\");\n+        if (expectedPresent) {\n+            assertEquals(expectedNames.length, params.length);\n+        }\n+        for (int i = 0; i < params.length; i++) {\n+            log(\"  \" + i + \": \" + params[i].getName());\n+            assertEquals(expectedPresent, params[i].isNamePresent());\n+            if (expectedPresent) {\n+                assertEquals(expectedNames[i], params[i].getName());\n+            }\n+        }\n+    }\n+\n+    \/\/ Retransforms target class using provided class bytes;\n+    \/\/ Returns class bytes passed to the transformer.\n+    private byte[] retransform(byte[] classBytes) throws Throwable {\n+        seenClassBytes = null;\n+        newClassBytes = classBytes;\n+        fInst.retransformClasses(targetClass);\n+        assertTrue(targetClassName + \" was not seen by transform()\", seenClassBytes != null);\n+        return seenClassBytes;\n+    }\n+\n+    \/\/ Prints dissassembled class bytes.\n+    private void printDisassembled(String description, byte[] bytes) throws Exception {\n+        log(description + \" -------------------\");\n+\n+        File f = new File(classFileName);\n+        try (FileOutputStream fos = new FileOutputStream(f)) {\n+            fos.write(bytes);\n+        }\n+        JDKToolLauncher javap = JDKToolLauncher.create(\"javap\")\n+                .addToolArg(\"-verbose\")\n+                .addToolArg(\"-p\")       \/\/ Shows all classes and members.\n+                \/\/.addToolArg(\"-c\")       \/\/ Prints out disassembled code\n+                \/\/.addToolArg(\"-s\")       \/\/ Prints internal type signatures.\n+                .addToolArg(f.toString());\n+        ProcessBuilder pb = new ProcessBuilder(javap.getCommand());\n+        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n+        out.shouldHaveExitValue(0);\n+        try {\n+            Files.delete(f.toPath());\n+        } catch (Exception ex) {\n+            \/\/ ignore\n+        }\n+        out.asLines().forEach(s -> log(s));\n+        log(\"==========================================\");\n+    }\n+\n+    \/\/ Verifies class bytes are equal.\n+    private void compareClassBytes(byte[] expected, byte[] actual) throws Exception {\n+\n+        int pos = Arrays.mismatch(expected, actual);\n+        if (pos < 0) {\n+            log(\"Class bytes are identical.\");\n+            return;\n+        }\n+        log(\"Class bytes are different.\");\n+        printDisassembled(\"expected\", expected);\n+        printDisassembled(\"expected\", actual);\n+        fail(targetClassName + \" did not match .class file\");\n+    }\n+\n+    protected final void doRunTest() throws Throwable {\n+        beVerbose();\n+\n+        ClassLoader loader = getClass().getClassLoader();\n+        targetClass = loader.loadClass(targetClassName);\n+        \/\/ sanity check\n+        assertEquals(targetClassName, targetClass.getName());\n+        \/\/ sanity check\n+        verifyMethodParams(true, \"intParam1\", \"stringParam1\");\n+\n+        addTransformerToManager(fInst, new Transformer(), true);\n+\n+        {\n+            log(\"Testcase 1: ensure ClassFileReconstituter restores MethodParameters attribute\");\n+\n+            byte[] classBytes = retransform(null);\n+            compareClassBytes(originalClassBytes, classBytes);\n+\n+            log(\"\");\n+        }\n+\n+        {\n+            log(\"Testcase 2: redefine class with changed parameter names\");\n+\n+            byte[] classBytes = Files.readAllBytes(Paths.get(\n+                    ClassTransformer.fromTestSource(sourceFileName)\n+                            .transform(1, targetClassName, \"-g\", \"-parameters\")));\n+            retransform(classBytes);\n+            \/\/ MethodParameters attribute should be updated.\n+            verifyMethodParams(true, \"intParam2\", \"stringParam2\");\n+\n+            log(\"\");\n+        }\n+\n+        {\n+            log(\"Testcase 3: redefine class with no parameter names\");\n+            \/\/ compile without \"-parameters\"\n+            byte[] classBytes = Files.readAllBytes(Paths.get(\n+                    ClassTransformer.fromTestSource(sourceFileName)\n+                            .transform(1, targetClassName, \"-g\")));\n+            retransform(classBytes);\n+            \/\/ MethodParameters attribute should be dropped.\n+            verifyMethodParams(false);\n+\n+            log(\"\");\n+        }\n+    }\n+\n+\n+    public class Transformer implements ClassFileTransformer {\n+        public Transformer() {\n+        }\n+\n+        public String toString() {\n+            return Transformer.this.getClass().getName();\n+        }\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+            Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n+\n+            if (className.equals(targetClassName)) {\n+                log(this + \".transform() sees '\" + className\n+                        + \"' of \" + classfileBuffer.length + \" bytes.\");\n+                seenClassBytes = classfileBuffer;\n+                if (newClassBytes != null) {\n+                    log(this + \".transform() sets new classbytes for '\" + className\n+                            + \"' of \" + newClassBytes.length + \" bytes.\");\n+                }\n+                return newClassBytes;\n+            }\n+\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformWithMethodParametersTest.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package lib.jdb;\n+package jdk.test.lib.util;\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ClassTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/ClassTransformer.java","status":"copied"}]}