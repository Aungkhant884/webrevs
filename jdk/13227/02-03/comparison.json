{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/vm_version.hpp\"\n@@ -123,1 +122,1 @@\n-    if (((intptr_t(p) & 1) == 0) || UseUnalignedAccesses) {\n+    if ((intptr_t(p) & 1) == 0) {\n@@ -132,1 +131,1 @@\n-    switch (UseUnalignedAccesses ? 0 : intptr_t(p) & 3) {\n+    switch (intptr_t(p) & 3) {\n@@ -147,1 +146,1 @@\n-    switch (UseUnalignedAccesses ? 0 : intptr_t(p) & 7) {\n+    switch (intptr_t(p) & 7) {\n","filename":"src\/hotspot\/cpu\/arm\/bytes_arm.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/vm_version.hpp\"\n@@ -89,1 +88,1 @@\n-    if ( ((intptr_t(p) & 1) == 0) || UseUnalignedAccesses )  *(u2*)p = x;\n+    if ( (intptr_t(p) & 1) == 0 )  *(u2*)p = x;\n@@ -97,1 +96,1 @@\n-    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 3 ) {\n+    switch ( intptr_t(p) & 3 ) {\n@@ -114,1 +113,1 @@\n-    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 7 ) {\n+    switch ( intptr_t(p) & 7 ) {\n@@ -198,1 +197,1 @@\n-    if ( ((intptr_t(p) & 1) == 0) || UseUnalignedAccesses ) { *(u2*)p = x; }\n+    if ( (intptr_t(p) & 1) == 0 ) { *(u2*)p = x; }\n@@ -206,1 +205,1 @@\n-    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 3 ) {\n+    switch ( intptr_t(p) & 3 ) {\n@@ -223,1 +222,1 @@\n-    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 7 ) {\n+    switch ( intptr_t(p) & 7 ) {\n","filename":"src\/hotspot\/cpu\/ppc\/bytes_ppc.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/vm_version.hpp\"\n@@ -94,1 +93,1 @@\n-    if ((intptr_t(p) & 1) == 0 || !AvoidUnalignedAccesses) {\n+    if ((intptr_t(p) & 1) == 0) {\n@@ -103,1 +102,1 @@\n-    switch (AvoidUnalignedAccesses ? intptr_t(p) & 3 : 0) {\n+    switch (intptr_t(p) & 3) {\n@@ -123,1 +122,1 @@\n-    switch (AvoidUnalignedAccesses ? intptr_t(p) & 7 : 0) {\n+    switch (intptr_t(p) & 7) {\n","filename":"src\/hotspot\/cpu\/riscv\/bytes_riscv.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/vm_version.hpp\"\n@@ -56,1 +55,1 @@\n-    if (is_aligned(p, sizeof(T)) || UseUnalignedAccesses) {\n+    if (is_aligned(p, sizeof(T))) {\n","filename":"src\/hotspot\/cpu\/x86\/bytes_x86.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,7 @@\n+template <typename T>\n+static inline void put_native(address p, T x) {\n+    assert(p != nullptr, \"null pointer\");\n+\n+    memcpy((void*)p, &x, sizeof(T));\n+}\n+\n@@ -221,1 +228,1 @@\n-  void emit_int16(uint16_t x) { Bytes::put_native_u2(end(), x); set_end(end() + sizeof(uint16_t)); }\n+  void emit_int16(uint16_t x) { put_native(end(), x); set_end(end() + sizeof(uint16_t)); }\n@@ -239,1 +246,1 @@\n-    Bytes::put_native_u4(curr, x);\n+    put_native(curr, x);\n@@ -251,12 +258,5 @@\n-  void emit_int64( uint64_t x)  { Bytes::put_native_u8(end(), x); set_end(end() + sizeof(uint64_t)); }\n-\n-  void emit_float( jfloat  x)  { Bytes::put_native_u4(end(), jint_cast(x)); set_end(end() + sizeof(jfloat)); }\n-  void emit_double(jdouble x)  { Bytes::put_native_u8(end(), julong_cast(x)); set_end(end() + sizeof(jdouble)); }\n-  void emit_address(address x) {\n-    if (sizeof(address) == sizeof(uint64_t)) {\n-      Bytes::put_native_u8(end(), p2i(x));\n-    } else {\n-      Bytes::put_native_u4(end(), p2i(x));\n-    }\n-    set_end(end() + sizeof(address));\n-  }\n+  void emit_int64( uint64_t x)  { put_native(end(), x); set_end(end() + sizeof(uint64_t)); }\n+\n+  void emit_float( jfloat  x)  { put_native(end(), jint_cast(x)); set_end(end() + sizeof(jfloat)); }\n+  void emit_double(jdouble x)  { put_native(end(), julong_cast(x)); set_end(end() + sizeof(jdouble)); }\n+  void emit_address(address x) { put_native(end(), p2i(x)); set_end(end() + sizeof(address)); }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}