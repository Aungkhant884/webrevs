{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/vm_version.hpp\"\n@@ -122,1 +123,1 @@\n-    if ((intptr_t(p) & 1) == 0) {\n+    if (((intptr_t(p) & 1) == 0) || UseUnalignedAccesses) {\n@@ -131,1 +132,1 @@\n-    switch (intptr_t(p) & 3) {\n+    switch (UseUnalignedAccesses ? 0 : intptr_t(p) & 3) {\n@@ -146,1 +147,1 @@\n-    switch (intptr_t(p) & 7) {\n+    switch (UseUnalignedAccesses ? 0 : intptr_t(p) & 7) {\n","filename":"src\/hotspot\/cpu\/arm\/bytes_arm.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/vm_version.hpp\"\n@@ -88,1 +89,1 @@\n-    if ( (intptr_t(p) & 1) == 0 )  *(u2*)p = x;\n+    if ( ((intptr_t(p) & 1) == 0) || UseUnalignedAccesses )  *(u2*)p = x;\n@@ -96,1 +97,1 @@\n-    switch ( intptr_t(p) & 3 ) {\n+    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 3 ) {\n@@ -113,1 +114,1 @@\n-    switch ( intptr_t(p) & 7 ) {\n+    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 7 ) {\n@@ -197,1 +198,1 @@\n-    if ( (intptr_t(p) & 1) == 0 ) { *(u2*)p = x; }\n+    if ( ((intptr_t(p) & 1) == 0) || UseUnalignedAccesses ) { *(u2*)p = x; }\n@@ -205,1 +206,1 @@\n-    switch ( intptr_t(p) & 3 ) {\n+    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 3 ) {\n@@ -222,1 +223,1 @@\n-    switch ( intptr_t(p) & 7 ) {\n+    switch ( UseUnalignedAccesses ? 0 : intptr_t(p) & 7 ) {\n","filename":"src\/hotspot\/cpu\/ppc\/bytes_ppc.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/vm_version.hpp\"\n@@ -93,1 +94,1 @@\n-    if ((intptr_t(p) & 1) == 0) {\n+    if ((intptr_t(p) & 1) == 0 || !AvoidUnalignedAccesses) {\n@@ -102,1 +103,1 @@\n-    switch (intptr_t(p) & 3) {\n+    switch (AvoidUnalignedAccesses ? intptr_t(p) & 3 : 0) {\n@@ -122,1 +123,1 @@\n-    switch (intptr_t(p) & 7) {\n+    switch (AvoidUnalignedAccesses ? intptr_t(p) & 7 : 0) {\n","filename":"src\/hotspot\/cpu\/riscv\/bytes_riscv.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/vm_version.hpp\"\n@@ -55,1 +56,1 @@\n-    if (is_aligned(p, sizeof(T))) {\n+    if (is_aligned(p, sizeof(T)) || UseUnalignedAccesses) {\n","filename":"src\/hotspot\/cpu\/x86\/bytes_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  void emit_int16(uint16_t x) { *((uint16_t*) end()) = x; set_end(end() + sizeof(uint16_t)); }\n+  void emit_int16(uint16_t x) { Bytes::put_native_u2(end(), x); set_end(end() + sizeof(uint16_t)); }\n@@ -239,1 +239,1 @@\n-    *((uint32_t*) curr) = x;\n+    Bytes::put_native_u4(curr, x);\n@@ -251,5 +251,12 @@\n-  void emit_int64( uint64_t x)  { *((uint64_t*) end()) = x; set_end(end() + sizeof(uint64_t)); }\n-\n-  void emit_float( jfloat  x)  { *((jfloat*)  end()) = x; set_end(end() + sizeof(jfloat)); }\n-  void emit_double(jdouble x)  { *((jdouble*) end()) = x; set_end(end() + sizeof(jdouble)); }\n-  void emit_address(address x) { *((address*) end()) = x; set_end(end() + sizeof(address)); }\n+  void emit_int64( uint64_t x)  { Bytes::put_native_u8(end(), x); set_end(end() + sizeof(uint64_t)); }\n+\n+  void emit_float( jfloat  x)  { Bytes::put_native_u4(end(), jint_cast(x)); set_end(end() + sizeof(jfloat)); }\n+  void emit_double(jdouble x)  { Bytes::put_native_u8(end(), julong_cast(x)); set_end(end() + sizeof(jdouble)); }\n+  void emit_address(address x) {\n+    if (sizeof(address) == sizeof(uint64_t)) {\n+      Bytes::put_native_u8(end(), p2i(x));\n+    } else {\n+      Bytes::put_native_u4(end(), p2i(x));\n+    }\n+    set_end(end() + sizeof(address));\n+  }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"}]}