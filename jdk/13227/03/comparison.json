{"files":[{"patch":"@@ -38,0 +38,7 @@\n+template <typename T>\n+static inline void put_native(address p, T x) {\n+    assert(p != nullptr, \"null pointer\");\n+\n+    memcpy((void*)p, &x, sizeof(T));\n+}\n+\n@@ -221,1 +228,1 @@\n-  void emit_int16(uint16_t x) { *((uint16_t*) end()) = x; set_end(end() + sizeof(uint16_t)); }\n+  void emit_int16(uint16_t x) { put_native(end(), x); set_end(end() + sizeof(uint16_t)); }\n@@ -239,1 +246,1 @@\n-    *((uint32_t*) curr) = x;\n+    put_native(curr, x);\n@@ -251,1 +258,1 @@\n-  void emit_int64( uint64_t x)  { *((uint64_t*) end()) = x; set_end(end() + sizeof(uint64_t)); }\n+  void emit_int64( uint64_t x)  { put_native(end(), x); set_end(end() + sizeof(uint64_t)); }\n@@ -253,3 +260,3 @@\n-  void emit_float( jfloat  x)  { *((jfloat*)  end()) = x; set_end(end() + sizeof(jfloat)); }\n-  void emit_double(jdouble x)  { *((jdouble*) end()) = x; set_end(end() + sizeof(jdouble)); }\n-  void emit_address(address x) { *((address*) end()) = x; set_end(end() + sizeof(address)); }\n+  void emit_float( jfloat  x)  { put_native(end(), jint_cast(x)); set_end(end() + sizeof(jfloat)); }\n+  void emit_double(jdouble x)  { put_native(end(), julong_cast(x)); set_end(end() + sizeof(jdouble)); }\n+  void emit_address(address x) { put_native(end(), p2i(x)); set_end(end() + sizeof(address)); }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"}]}