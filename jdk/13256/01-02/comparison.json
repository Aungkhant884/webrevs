{"files":[{"patch":"@@ -72,3 +72,0 @@\n-            if (encapsulation.length != params.Npk) {\n-                throw new DecapsulateException(\"Incorrect encapsulation length\");\n-            }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * {@code newDecapsulator} method may return encapsulators or decapsulators\n+ * {@code newDecapsulator} methods may return encapsulators or decapsulators\n@@ -51,1 +51,1 @@\n- * passed to the the {@code newEncapsulator} or {@code newDecapsulator} methods:\n+ * passed to the {@code newEncapsulator} or {@code newDecapsulator} methods:\n@@ -54,1 +54,1 @@\n- * return the selected provider.\"\n+ * return the selected provider.\n@@ -56,1 +56,0 @@\n- * {@code Encapsulator} and {@code Decapsulator} objects are immutable.\n@@ -58,3 +57,3 @@\n- * methods on the same object at the same time. Each invocation of\n- * {@code encapsulate} will generate a new shared secret and key encapsulation\n- * message.\n+ * methods on the same {@code Encapsulator} or {@code Decapsulator} object\n+ * at the same time. Each invocation of {@code encapsulate} will generate a\n+ * new shared secret and key encapsulation message.\n@@ -82,1 +81,3 @@\n-     * Type for the return value of the {@link Encapsulator#encapsulate} method.\n+     * The encapsulated data generated by a Key Encapsulation Mechanism (KEM),\n+     * which includes the shared secret (as a {@code SecretKey}),\n+     * the key encapsulation message, and additional optional parameters.\n@@ -86,9 +87,0 @@\n-     * @param key the shared secret as a key, must not be {@code null}\n-     * @param encapsulation the key encapsulation message to be sent to the\n-     *                      receiver, must not be {@code null}\n-     * @param params additional parameters to be sent to the receiver,\n-     *               can be {@code null}. The parameters can be used to\n-     *               initialize an {@code AlgorithmParameters} so that the\n-     *               receiver may recover the {@code AlgorithmParameterSpec}\n-     *               used by the encapsulator.\n-     *\n@@ -97,1 +89,5 @@\n-    public record Encapsulated(SecretKey key, byte[] encapsulation, byte[] params) {\n+    public static final class Encapsulated {\n+        private final SecretKey key;\n+        private final byte[] encapsulation;\n+        private final byte[] params;\n+\n@@ -101,1 +97,1 @@\n-         * @param key the shared secret as a key, must not be {@code null}.\n+         * @param key           the shared secret as a key, must not be {@code null}.\n@@ -103,1 +99,7 @@\n-         * @param params additional parameters, can be {@code null}.\n+         *                      The contents of the array are copied to protect\n+         *                      against subsequent modification.\n+         * @param params        additional parameters, can be {@code null}\n+         *                      The contents of the array are copied to protect\n+         *                      against subsequent modification.\n+         * @throws NullPointerException if {@code key} or {@code encapsulation}\n+         *                      is {@code null}\n@@ -105,1 +107,1 @@\n-        public Encapsulated {\n+        public Encapsulated(SecretKey key, byte[] encapsulation, byte[] params) {\n@@ -108,0 +110,31 @@\n+            this.key = key;\n+            this.encapsulation = encapsulation.clone();\n+            this.params = params == null ? null : params.clone();\n+        }\n+\n+        \/**\n+         * Returns the {@code SecretKey}.\n+         * @return the secret key\n+         *\/\n+        public SecretKey key() {\n+            return key;\n+        }\n+\n+        \/**\n+         * Returns the key encapsulation message.\n+         *\n+         * @return the key encapsulation message. A new copy of the byte array\n+         *      is returned.\n+         *\/\n+        public byte[] encapsulation() {\n+            return encapsulation.clone();\n+        }\n+\n+        \/**\n+         * Returns the optional parameters in a byte array.\n+         *\n+         * @return the optional parameters in a byte array. A new copy of the\n+         *      byte array is returned.\n+         *\/\n+        public byte[] params() {\n+            return params == null ? null : params.clone();\n@@ -113,0 +146,4 @@\n+     * <p>\n+     * This class represents the key decapsulation function of a KEM.\n+     * An invocation of the {@code decapsulate} method recovers the\n+     * secret key from the key encapsulation message.\n@@ -128,1 +165,1 @@\n-         * @return thr provider\n+         * @return the provider\n@@ -135,1 +172,2 @@\n-         * The key decapsulation function.\n+         * The key decapsulation function. An invocation of this method\n+         * recovers the secret key from the key encapsulation message.\n@@ -141,1 +179,4 @@\n-         * @param encapsulation the key encapsulation message from the sender\n+         * @param encapsulation the key encapsulation message from the sender.\n+         *          The size must be equal to the value returned by\n+         *          {@link #encapsulationSize()}, or a {@code DecapsulateException}\n+         *          will be thrown.\n@@ -143,1 +184,1 @@\n-         *          algorithm being \"Generic\", not {@code null}\n+         *          an algorithm name of \"Generic\"\n@@ -153,1 +194,2 @@\n-         * The key decapsulation function.\n+         * The key decapsulation function. An invocation of this method\n+         * recovers the secret key from the key encapsulation message.\n@@ -155,4 +197,9 @@\n-         * @param encapsulation the key encapsulation message from the sender\n-         * @param from the initial index of the shared secret to be returned, inclusive\n-         * @param to the final index of the shared secret to be returned, exclusive.\n-         * @param algorithm the algorithm for the secret key returned\n+         * @param encapsulation the key encapsulation message from the sender.\n+         *          The size must be equal to the value returned by\n+         *          {@link #encapsulationSize()}, or a {@code DecapsulateException}\n+         *          will be thrown.\n+         * @param from the initial index of the shared secret byte array\n+         *          to be returned, inclusive\n+         * @param to the final index of the shared secret byte array\n+         *          to be returned, exclusive\n+         * @param algorithm the algorithm name for the secret key that is returned\n@@ -160,1 +207,1 @@\n-         *          the specified algorithm, not {@code null}\n+         *          the specified algorithm\n@@ -175,0 +222,4 @@\n+            Objects.requireNonNull(encapsulation, \"null encapsulation\");\n+            if (encapsulation.length != encapsulationSize()) {\n+                throw new DecapsulateException(\"Invalid encapsulation size\");\n+            }\n@@ -176,1 +227,1 @@\n-                    Objects.requireNonNull(encapsulation, \"null encapsulation\"),\n+                    encapsulation,\n@@ -185,0 +236,4 @@\n+         * <p>\n+         * This method can be called to find out the length of the share secret\n+         * before {@code decapsulate} is called or if the obtained\n+         * {@code SecretKey} is not extractable.\n@@ -197,0 +252,4 @@\n+         * <p>\n+         * This method can be used to extract the encapsulation message\n+         * from a longer byte array if no length information is provided\n+         * by a higher level protocol.\n@@ -210,0 +269,5 @@\n+     * <p>\n+     * This class represents the key encapsulation function of a KEM.\n+     * Each invocation of the {@code encapsulate} method generates a\n+     * new secret key and key encapsulation message that is returned\n+     * in an {@link Encapsulated} object.\n@@ -226,1 +290,1 @@\n-         * @return thr provider\n+         * @return the provider\n@@ -233,1 +297,3 @@\n-         * The key encapsulation function.\n+         * The key encapsulation function. Each invocation of this method\n+         * generates a new secret key and key encapsulation message that is\n+         * returned in an {@link Encapsulated} object.\n@@ -239,4 +305,4 @@\n-         * @return an {@link KEM.Encapsulated} object containing the full\n-         *          shared secret as a key with algorithm being \"Generic\",\n-         *          the key encapsulation message, and optional parameters.\n-         *          The return value should not be {@code null}.\n+         * @return a {@link KEM.Encapsulated} object containing the shared\n+         *          secret, key encapsulation message, and optional parameters.\n+         *          The shared secret is a {@code SecretKey} containing all of\n+         *          the bytes of the secret, and an algorithm name of \"Generic\".\n@@ -249,1 +315,3 @@\n-         * The key encapsulation function.\n+         * The key encapsulation function. Each invocation of this method\n+         * generates a new secret key and key encapsulation message that is\n+         * returned in an {@link Encapsulated} object.\n@@ -251,7 +319,11 @@\n-         * @param from the initial index of the shared secret to be returned, inclusive\n-         * @param to the final index of the shared secret to be returned, exclusive.\n-         * @param algorithm the algorithm for the secret key returned\n-         * @return an {@link KEM.Encapsulated} object containing a portion of\n-         *          the shared secret as a key with the specified algorithm,\n-         *          the key encapsulation message, and optional parameters.\n-         *          The return value should not be {@code null}.\n+         * @param from the initial index of the shared secret byte array\n+         *          to be returned, inclusive\n+         * @param to the final index of the shared secret byte array\n+         *          to be returned, exclusive\n+         * @param algorithm the algorithm name for the secret key that is returned\n+         * @return a {@link KEM.Encapsulated} object containing a portion of\n+         *          the shared secret, key encapsulation message, and optional\n+         *          parameters. The portion of the shared secret is a\n+         *          {@code SecretKey} containing the bytes of the secret\n+         *          ranging from {@code from} to {@code to}, exclusive,\n+         *          and an algorithm name as specified.\n@@ -275,0 +347,4 @@\n+         * <p>\n+         * This method can be called to find out the length of the share secret\n+         * before {@code encapsulate} is called or if the obtained\n+         * {@code SecretKey} is not extractable.\n@@ -287,0 +363,3 @@\n+         * <p>\n+         * This method can be called to find out the length of the encapsulation\n+         * message before {@code encapsulate} is called.\n@@ -530,1 +609,1 @@\n-     * @return the encapsulator for this key, not {@code null}\n+     * @return the encapsulator for this key\n@@ -568,1 +647,1 @@\n-     * @return the encapsulator for this key, not {@code null}\n+     * @return the encapsulator for this key\n@@ -589,1 +668,1 @@\n-     * @return the decapsulator for this key, not {@code null}\n+     * @return the decapsulator for this key\n@@ -609,1 +688,1 @@\n-     * @return the decapsulator for this key, not {@code null}\n+     * @return the decapsulator for this key\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":129,"deletions":50,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -126,1 +126,0 @@\n-         *          The return value must not be {@code null}.\n@@ -137,0 +136,4 @@\n+         * <p>\n+         * This method can be called to find out the length of the share secret\n+         * before {@code engineEncapsulate} is called or if the obtained\n+         * {@code SecretKey} is not extractable.\n@@ -145,0 +148,3 @@\n+         * <p>\n+         * This method can be called to find out the length of the encapsulation\n+         * message before {@code engineEncapsulate} is called.\n@@ -168,1 +174,3 @@\n-         * {@code null}, and the values of {@code from} and {@code to} are\n+         * {@code null}, the size of {@code encapsulation} is equal to the\n+         * value returned by {@link #engineEncapsulationSize()}, and\n+         * the values of {@code from} and {@code to} are\n@@ -177,1 +185,1 @@\n-         *          the specified algorithm, must not be {@code null}\n+         *          the specified algorithm\n@@ -190,0 +198,4 @@\n+         * <p>\n+         * This method can be called to find out the length of the share secret\n+         * before {@code engineDecapsulate} is called or if the obtained\n+         * {@code SecretKey} is not extractable.\n@@ -198,0 +210,4 @@\n+         * <p>\n+         * This method can be used to extract the encapsulation message\n+         * from a longer byte array if no length information is provided\n+         * by a higher level protocol.\n@@ -217,1 +233,1 @@\n-     * @return the encapsulator for this key, must not be {@code null}\n+     * @return the encapsulator for this key\n@@ -236,1 +252,1 @@\n-     * @return the decapsulator for this key, must not be {@code null}\n+     * @return the decapsulator for this key\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEMSpi.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -377,5 +377,0 @@\n-                int nLen = rsk.getModulus().bitLength();\n-                int nSize = (nLen + 7) \/ 8;\n-                if (encapsulation.length != nSize) {\n-                    throw new DecapsulateException(\"wrong length\");\n-                }\n","filename":"test\/jdk\/javax\/crypto\/KEM\/RSA_KEM.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}