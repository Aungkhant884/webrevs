{"files":[{"patch":"@@ -38,1 +38,4 @@\n- * cryptography.\n+ * cryptography between two parties. The sender calls the encapsulate method\n+ * to generate a secret key and a key encapsulation message, and the receiver\n+ * calls the decapsulate method to recover the same secret key from\n+ * the key encapsulation message.\n@@ -87,3 +90,4 @@\n-     * The encapsulated data generated by a Key Encapsulation Mechanism (KEM),\n-     * which includes the shared secret (as a {@code SecretKey}),\n-     * the key encapsulation message, and additional optional parameters.\n+     * The encapsulated data generated by the encapsulate method of a Key\n+     * Encapsulation Mechanism (KEM), which includes the shared secret\n+     * (as a {@code SecretKey}), the key encapsulation message,\n+     * and optional parameters.\n@@ -93,1 +97,2 @@\n-     * @see KEM#newEncapsulator(PublicKey, AlgorithmParameterSpec, SecureRandom)\n+     * @see #newEncapsulator(PublicKey, AlgorithmParameterSpec, SecureRandom)\n+     * @see Encapsulator#encapsulate()\n@@ -103,7 +108,7 @@\n-         * @param key           the shared secret as a key, must not be {@code null}.\n-         * @param encapsulation the key encapsulation message, must not be {@code null}.\n-         *                      The contents of the array are copied to protect\n-         *                      against subsequent modification.\n-         * @param params        additional parameters, can be {@code null}\n-         *                      The contents of the array are copied to protect\n-         *                      against subsequent modification.\n+         * @param key the shared secret as a key, must not be {@code null}.\n+         * @param encapsulation the key encapsulation message, must not\n+         *          be {@code null}. The contents of the array are copied\n+         *          to protect against subsequent modification.\n+         * @param params optional parameters, can be {@code null}.\n+         *          The contents of the array are copied to protect\n+         *          against subsequent modification.\n@@ -111,1 +116,1 @@\n-         *                      is {@code null}\n+         *          is {@code null}\n@@ -123,0 +128,1 @@\n+         *\n@@ -151,1 +157,2 @@\n-     * An encapsulator, generated by {@link #newEncapsulator}.\n+     * An encapsulator, generated by {@link #newEncapsulator} on the KEM\n+     * sender side.\n@@ -180,3 +187,1 @@\n-         * The key encapsulation function. Each invocation of this method\n-         * generates a new secret key and key encapsulation message that is\n-         * returned in an {@link Encapsulated} object.\n+         * The key encapsulation function.\n@@ -186,1 +191,4 @@\n-         * of arguments should be supported by every implementation.\n+         * of arguments must be supported by every implementation.\n+         * <p>\n+         * The generated secret key is usually passed to a key derivation\n+         * function (KDF) as the input keying material.\n@@ -188,1 +196,1 @@\n-         * @return a {@link KEM.Encapsulated} object containing the shared\n+         * @return a {@link Encapsulated} object containing the shared\n@@ -193,1 +201,1 @@\n-        public KEM.Encapsulated encapsulate() {\n+        public Encapsulated encapsulate() {\n@@ -198,3 +206,7 @@\n-         * The key encapsulation function. Each invocation of this method\n-         * generates a new secret key and key encapsulation message that is\n-         * returned in an {@link Encapsulated} object.\n+         * The key encapsulation function.\n+         * <p>\n+         * Each invocation of this method generates a new secret key and key\n+         * encapsulation message that is returned in an {@link Encapsulated} object.\n+         * <p>\n+         * An implementation may choose to not support arbitrary combinations\n+         * of {@code from}, {@code to}, and {@code algorithm}.\n@@ -207,1 +219,1 @@\n-         * @return a {@link KEM.Encapsulated} object containing a portion of\n+         * @return a {@link Encapsulated} object containing a portion of\n@@ -257,1 +269,2 @@\n-     * A decapsulator, generated by {@link #newDecapsulator}.\n+     * A decapsulator, generated by {@link #newDecapsulator} on the KEM\n+     * receiver side.\n@@ -284,2 +297,1 @@\n-         * The key decapsulation function. An invocation of this method\n-         * recovers the secret key from the key encapsulation message.\n+         * The key decapsulation function.\n@@ -289,1 +301,4 @@\n-         * combination of arguments should be supported by every implementation.\n+         * combination of arguments must be supported by every implementation.\n+         * <p>\n+         * The generated secret key is usually passed to a key derivation\n+         * function (KDF) as the input keying material.\n@@ -306,2 +321,7 @@\n-         * The key decapsulation function. An invocation of this method\n-         * recovers the secret key from the key encapsulation message.\n+         * The key decapsulation function.\n+         * <p>\n+         * An invocation of this method recovers the secret key from the key\n+         * encapsulation message.\n+         * <p>\n+         * An implementation may choose to not support arbitrary combinations\n+         * of {@code from}, {@code to}, and {@code algorithm}.\n@@ -380,1 +400,1 @@\n-        private KEM.Encapsulator newEncapsulator(PublicKey pk,\n+        private Encapsulator newEncapsulator(PublicKey pk,\n@@ -427,1 +447,1 @@\n-        private KEM.Decapsulator newDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n+        private Decapsulator newDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n@@ -580,1 +600,1 @@\n-     * Creates a KEM encapsulator.\n+     * Creates a KEM encapsulator on the KEM sender side.\n@@ -601,1 +621,1 @@\n-     * Creates a KEM encapsulator.\n+     * Creates a KEM encapsulator on the KEM sender side.\n@@ -625,1 +645,1 @@\n-     * Creates a KEM encapsulator.\n+     * Creates a KEM encapsulator on the KEM sender side.\n@@ -660,1 +680,1 @@\n-     * Creates a KEM decapsulator.\n+     * Creates a KEM decapsulator on the KEM receiver side.\n@@ -680,1 +700,1 @@\n-     * Creates a KEM decapsulator.\n+     * Creates a KEM decapsulator on the KEM receiver side.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":57,"deletions":37,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-     * {@link #engineNewEncapsulator}.\n+     * {@link #engineNewEncapsulator} on the KEM sender side.\n@@ -112,0 +112,3 @@\n+         * Each invocation of this method must generates a new secret key and key\n+         * encapsulation message that is returned in an {@link KEM.Encapsulated} object.\n+         * <p>\n@@ -137,4 +140,0 @@\n-         * <p>\n-         * This method can be called to find out the length of the share secret\n-         * before {@code engineEncapsulate} is called or if the obtained\n-         * {@code SecretKey} is not extractable.\n@@ -149,3 +148,0 @@\n-         * <p>\n-         * This method can be called to find out the length of the encapsulation\n-         * message before {@code engineEncapsulate} is called.\n@@ -161,1 +157,1 @@\n-     * {@link #engineNewDecapsulator}.\n+     * {@link #engineNewDecapsulator} on the KEM receiver side.\n@@ -169,0 +165,3 @@\n+         * An invocation of this method recovers the secret key from the key\n+         * encapsulation message.\n+         * <p>\n@@ -200,4 +199,0 @@\n-         * <p>\n-         * This method can be called to find out the length of the share secret\n-         * before {@code engineDecapsulate} is called or if the obtained\n-         * {@code SecretKey} is not extractable.\n@@ -212,4 +207,0 @@\n-         * <p>\n-         * This method can be used to extract the encapsulation message\n-         * from a longer byte array if no length information is provided\n-         * by a higher level protocol.\n@@ -224,1 +215,1 @@\n-     * Creates a KEM encapsulator.\n+     * Creates a KEM encapsulator on the KEM sender side.\n@@ -242,1 +233,1 @@\n-     * Creates a KEM decapsulator.\n+     * Creates a KEM decapsulator on the KEM receiver side.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEMSpi.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"}]}