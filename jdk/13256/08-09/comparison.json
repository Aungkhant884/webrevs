{"files":[{"patch":"@@ -225,1 +225,1 @@\n-         * @throws ArrayIndexOutOfBoundsException if {@code from < 0},\n+         * @throws IndexOutOfBoundsException if {@code from < 0},\n@@ -342,1 +342,1 @@\n-         * @throws ArrayIndexOutOfBoundsException if {@code from < 0},\n+         * @throws IndexOutOfBoundsException if {@code from < 0},\n@@ -400,1 +400,1 @@\n-        private Encapsulator newEncapsulator(PublicKey pk,\n+        private Encapsulator newEncapsulator(PublicKey publicKey,\n@@ -403,1 +403,1 @@\n-            if (pk == null) {\n+            if (publicKey == null) {\n@@ -411,1 +411,1 @@\n-                if (!service.supportsParameter(pk)) {\n+                if (!service.supportsParameter(publicKey)) {\n@@ -417,1 +417,1 @@\n-                            spi.engineNewEncapsulator(pk, spec, secureRandom),\n+                            spi.engineNewEncapsulator(publicKey, spec, secureRandom),\n@@ -435,1 +435,1 @@\n-                            + pk.getClass().getName(), re);\n+                            + publicKey.getClass().getName(), re);\n@@ -447,1 +447,1 @@\n-        private Decapsulator newDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n+        private Decapsulator newDecapsulator(PrivateKey privateKey, AlgorithmParameterSpec spec)\n@@ -449,1 +449,1 @@\n-            if (sk == null) {\n+            if (privateKey == null) {\n@@ -457,1 +457,1 @@\n-                if (!service.supportsParameter(sk)) {\n+                if (!service.supportsParameter(privateKey)) {\n@@ -463,1 +463,1 @@\n-                            spi.engineNewDecapsulator(sk, spec),\n+                            spi.engineNewDecapsulator(privateKey, spec),\n@@ -481,1 +481,1 @@\n-                    + sk.getClass().getName(), re);\n+                    + privateKey.getClass().getName(), re);\n@@ -602,1 +602,1 @@\n-     * This method is equivalent to {@code newEncapsulator(pk, null, null)}.\n+     * This method is equivalent to {@code newEncapsulator(publicKey, null, null)}.\n@@ -604,1 +604,1 @@\n-     * @param pk the receiver's public key, must not be {@code null}\n+     * @param publicKey the receiver's public key, must not be {@code null}\n@@ -606,1 +606,1 @@\n-     * @throws InvalidKeyException if {@code pk} is invalid\n+     * @throws InvalidKeyException if {@code publicKey} is invalid\n@@ -610,1 +610,1 @@\n-    public Encapsulator newEncapsulator(PublicKey pk)\n+    public Encapsulator newEncapsulator(PublicKey publicKey)\n@@ -613,1 +613,1 @@\n-            return newEncapsulator(pk, null, null);\n+            return newEncapsulator(publicKey, null, null);\n@@ -623,1 +623,1 @@\n-     * This method is equivalent to {@code newEncapsulator(pk, null, secureRandom)}.\n+     * This method is equivalent to {@code newEncapsulator(publicKey, null, secureRandom)}.\n@@ -625,1 +625,1 @@\n-     * @param pk the receiver's public key, must not be {@code null}\n+     * @param publicKey the receiver's public key, must not be {@code null}\n@@ -630,1 +630,1 @@\n-     * @throws InvalidKeyException if {@code pk} is invalid\n+     * @throws InvalidKeyException if {@code publicKey} is invalid\n@@ -634,1 +634,1 @@\n-    public Encapsulator newEncapsulator(PublicKey pk, SecureRandom secureRandom)\n+    public Encapsulator newEncapsulator(PublicKey publicKey, SecureRandom secureRandom)\n@@ -637,1 +637,1 @@\n-            return newEncapsulator(pk, null, secureRandom);\n+            return newEncapsulator(publicKey, null, secureRandom);\n@@ -661,1 +661,1 @@\n-     * @param pk the receiver's public key, must not be {@code null}\n+     * @param publicKey the receiver's public key, must not be {@code null}\n@@ -669,1 +669,1 @@\n-     * @throws InvalidKeyException if {@code pk} is invalid\n+     * @throws InvalidKeyException if {@code publicKey} is invalid\n@@ -671,1 +671,1 @@\n-    public Encapsulator newEncapsulator(PublicKey pk,\n+    public Encapsulator newEncapsulator(PublicKey publicKey,\n@@ -675,2 +675,2 @@\n-                ? delayed.newEncapsulator(pk, spec, secureRandom)\n-                : new Encapsulator(spi.engineNewEncapsulator(pk, spec, secureRandom), provider);\n+                ? delayed.newEncapsulator(publicKey, spec, secureRandom)\n+                : new Encapsulator(spi.engineNewEncapsulator(publicKey, spec, secureRandom), provider);\n@@ -682,1 +682,1 @@\n-     * This method is equivalent to {@code newDecapsulator(sk, null)}.\n+     * This method is equivalent to {@code newDecapsulator(privateKey, null)}.\n@@ -684,1 +684,1 @@\n-     * @param sk the receiver's private key, must not be {@code null}\n+     * @param privateKey the receiver's private key, must not be {@code null}\n@@ -686,1 +686,1 @@\n-     * @throws InvalidKeyException if {@code sk} is invalid\n+     * @throws InvalidKeyException if {@code privateKey} is invalid\n@@ -690,1 +690,1 @@\n-    public Decapsulator newDecapsulator(PrivateKey sk)\n+    public Decapsulator newDecapsulator(PrivateKey privateKey)\n@@ -693,1 +693,1 @@\n-            return newDecapsulator(sk, null);\n+            return newDecapsulator(privateKey, null);\n@@ -702,1 +702,1 @@\n-     * @param sk the receiver's private key, must not be {@code null}\n+     * @param privateKey the receiver's private key, must not be {@code null}\n@@ -707,1 +707,1 @@\n-     * @throws InvalidKeyException if {@code sk} is invalid\n+     * @throws InvalidKeyException if {@code privateKey} is invalid\n@@ -709,1 +709,1 @@\n-    public Decapsulator newDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n+    public Decapsulator newDecapsulator(PrivateKey privateKey, AlgorithmParameterSpec spec)\n@@ -712,2 +712,2 @@\n-                ? delayed.newDecapsulator(sk, spec)\n-                : new Decapsulator(spi.engineNewDecapsulator(sk, spec), provider);\n+                ? delayed.newDecapsulator(privateKey, spec)\n+                : new Decapsulator(spi.engineNewDecapsulator(privateKey, spec), provider);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n- *     public KEMSpi.EncapsulatorSpi engineNewEncapsulator(PublicKey pk,\n+ *     public KEMSpi.EncapsulatorSpi engineNewEncapsulator(PublicKey publicKey,\n@@ -68,1 +68,1 @@\n- *         if (!checkPublicKey(pk)) {\n+ *         if (!checkPublicKey(publicKey)) {\n@@ -74,1 +74,1 @@\n- *         return new MyEncapsulator(pk, spec, secureRandom);\n+ *         return new MyEncapsulator(publicKey, spec, secureRandom);\n@@ -78,1 +78,2 @@\n- *         MyEncapsulator(PublicKey pk, AlgorithmParameterSpec spec, SecureRandom secureRandom){\n+ *         MyEncapsulator(PublicKey publicKey, AlgorithmParameterSpec spec,\n+ *                 SecureRandom secureRandom){\n@@ -80,2 +81,4 @@\n- *             this.secureRandom = secureRandom != null ? secureRandom : getDefaultSecureRandom();\n- *             this.pk = pk;\n+ *             this.secureRandom = secureRandom != null\n+ *                     ? secureRandom\n+ *                     : getDefaultSecureRandom();\n+ *             this.publicKey = publicKey;\n@@ -111,1 +114,1 @@\n-         * Each invocation of this method must generates a new secret key and key\n+         * Each invocation of this method must generate a new secret key and key\n@@ -115,1 +118,1 @@\n-         * {@code from} is the same as the output of {@code secretSize()},\n+         * {@code to} is the same as the return value of {@code secretSize()},\n@@ -125,2 +128,2 @@\n-         *          the key encapsulation message, and optional parameters.\n-         * @throws ArrayIndexOutOfBoundsException if {@code from < 0},\n+         *          key encapsulation message, and optional parameters.\n+         * @throws IndexOutOfBoundsException if {@code from < 0},\n@@ -168,1 +171,1 @@\n-         * {@code from} is the same as the output of {@code secretSize()},\n+         * {@code to} is the same as the return value of {@code secretSize()},\n@@ -184,1 +187,1 @@\n-         * @throws ArrayIndexOutOfBoundsException if {@code from < 0},\n+         * @throws IndexOutOfBoundsException if {@code from < 0},\n@@ -216,1 +219,1 @@\n-     * @param pk the receiver's public key, must not be {@code null}\n+     * @param publicKey the receiver's public key, must not be {@code null}\n@@ -224,1 +227,1 @@\n-     * @throws InvalidKeyException if {@code pk} is invalid\n+     * @throws InvalidKeyException if {@code publicKey} is invalid\n@@ -227,1 +230,1 @@\n-    EncapsulatorSpi engineNewEncapsulator(PublicKey pk,\n+    EncapsulatorSpi engineNewEncapsulator(PublicKey publicKey,\n@@ -234,2 +237,2 @@\n-     * @param sk the receiver's private key, must not be {@code null}\n-     * @param spec the parameter, can be {@code null}\n+     * @param privateKey the receiver's private key, must not be {@code null}\n+     * @param spec the optional parameter, can be {@code null}\n@@ -239,1 +242,1 @@\n-     * @throws InvalidKeyException if {@code sk} is invalid\n+     * @throws InvalidKeyException if {@code privateKey} is invalid\n@@ -242,1 +245,1 @@\n-    DecapsulatorSpi engineNewDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n+    DecapsulatorSpi engineNewDecapsulator(PrivateKey privateKey, AlgorithmParameterSpec spec)\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEMSpi.java","additions":22,"deletions":19,"binary":false,"changes":41,"status":"modified"}]}