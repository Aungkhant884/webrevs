{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * An {@link Exception} child class that is thrown by the\n+ * An exception that is thrown by the\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/DecapsulateException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,3 @@\n- * The Key Encapsulation Mechanism.\n+ * This class provides the functionality of a Key Encapsulation Mechanism (KEM).\n+ * A KEM can be used to secure symmetric keys using asymmetric or public key\n+ * cryptography.\n@@ -45,7 +47,8 @@\n- * If no provider is specified in the {@code getInstance} method when\n- * instantiating a {@code KEM} object, depending on the type of private key\n- * or public key, and the optional {@code AlgorithmParameterSpec} object,\n- * the {@code newEncapsulator} or {@code newDecapsulator} method\n- * may return encapsulators or decapsulators from different providers. The user\n- * can call the {@link Encapsulator#provider} or {@link Decapsulator#provider}\n- * method to get the provider.\n+ * If a provider is not specified in the {@code getInstance} method when\n+ * instantiating a {@code KEM} object, the {@code newEncapsulator} and\n+ * {@code newDecapsulator} method may return encapsulators or decapsulators\n+ * from different providers. The provider selected is based on the parameters\n+ * passed to the the {@code newEncapsulator} or {@code newDecapsulator} methods:\n+ * the private or public key and the optional {@code AlgorithmParameterSpec}.\n+ * The {@link Encapsulator#provider} and {@link Decapsulator#provider} methods\n+ * return the selected provider.\"\n@@ -389,1 +392,3 @@\n-    private KEM(KEMSpi spi, Provider provider) {\n+    private final String algorithm;\n+\n+    private KEM(String algorithm, KEMSpi spi, Provider provider) {\n@@ -395,0 +400,1 @@\n+        this.algorithm = algorithm;\n@@ -397,1 +403,1 @@\n-    private KEM(DelayedKEM delayed) {\n+    private KEM(String algorithm, DelayedKEM delayed) {\n@@ -402,0 +408,1 @@\n+        this.algorithm = algorithm;\n@@ -425,1 +432,1 @@\n-        return new KEM(new DelayedKEM(list.toArray(new Provider.Service[0])));\n+        return new KEM(algorithm, new DelayedKEM(list.toArray(new Provider.Service[0])));\n@@ -430,1 +437,0 @@\n-     * and supports the specified {@code KEMParameterSpec} parameters\n@@ -441,2 +447,4 @@\n-     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n-     *         {@code KEM} implementation for the specified algorithm\n+     * @throws NoSuchAlgorithmException if a {@code provider} is specified and\n+     *          it does not support the specified KEM algorithm,\n+     *          or if {@code provider} is {@code null} and there is no provider\n+     *          that supports a KEM implementation of the specified algorithm\n@@ -455,1 +463,1 @@\n-        return new KEM((KEMSpi) instance.impl, instance.provider);\n+        return new KEM(algorithm, (KEMSpi) instance.impl, instance.provider);\n@@ -460,1 +468,0 @@\n-     * and supports the specified {@code KEMParameterSpec} parameters\n@@ -471,2 +478,4 @@\n-     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n-     *         {@code KEM} implementation for the specified algorithm\n+     * @throws NoSuchAlgorithmException if a {@code provider} is specified and\n+     *          it does not support the specified KEM algorithm,\n+     *          or if {@code provider} is {@code null} and there is no provider\n+     *          that supports a KEM implementation of the specified algorithm\n@@ -487,1 +496,1 @@\n-        return new KEM((KEMSpi) instance.impl, instance.provider);\n+        return new KEM(algorithm, (KEMSpi) instance.impl, instance.provider);\n@@ -493,1 +502,1 @@\n-     * The method is equivalent to {@code newEncapsulator(pk, null, null)}.\n+     * This method is equivalent to {@code newEncapsulator(pk, null, null)}.\n@@ -500,1 +509,1 @@\n-     *          and a {@code AlgorithmParameterSpec} must be provided\n+     *          because an {@code AlgorithmParameterSpec} must be provided\n@@ -515,1 +524,1 @@\n-     * The method is equivalent to {@code newEncapsulator(pk, null, secureRandom)}.\n+     * This method is equivalent to {@code newEncapsulator(pk, null, secureRandom)}.\n@@ -518,3 +527,3 @@\n-     * @param secureRandom the source of randomness for encapsulation,\n-     *                     If {@code null}, the implementation should provide\n-     *                     a default one.\n+     * @param secureRandom the source of randomness for encapsulation.\n+     *                     If {@code} null, a default one from the\n+     *                     implementation will be used.\n@@ -525,1 +534,1 @@\n-     *          and a {@code AlgorithmParameterSpec} must be provided\n+     *          because an {@code AlgorithmParameterSpec} must be provided\n@@ -556,3 +565,3 @@\n-     * @param secureRandom the source of randomness for encapsulation,\n-     *                     If {@code null}, the implementation should provide\n-     *                     a default one.\n+     * @param secureRandom the source of randomness for encapsulation.\n+     *                     If {@code} null, a default one from the\n+     *                     implementation will be used.\n@@ -577,1 +586,1 @@\n-     * The method is equivalent to {@code newDecapsulator(sk, null)}.\n+     * This method is equivalent to {@code newDecapsulator(sk, null)}.\n@@ -584,1 +593,1 @@\n-     *          and a {@code AlgorithmParameterSpec} must be provided\n+     *          because an {@code AlgorithmParameterSpec} must be provided\n@@ -613,0 +622,9 @@\n+\n+    \/**\n+     * Returns the name of the algorithm for this {@code KEM} object.\n+     *\n+     * @return the name of the algorithm for this {@code KEM} object.\n+     *\/\n+    public String getAlgorithm() {\n+        return this.algorithm;\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":49,"deletions":31,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n- * This class defines the Service Provider Interface (SPI)\n- * for the {@link KEM} class. A security provider implements this interface\n- * to implement a KEM algorithm.\n+ * This class defines the Service Provider Interface (SPI) for the {@link KEM}\n+ * class. A security provider implements this interface to provide an\n+ * implementation of a Key Encapsulation Mechanism (KEM) algorithm.\n@@ -39,4 +39,3 @@\n- * A KEM algorithm may contain a family of configurations.\n- * Different configurations accept different types of keys, uses different\n- * underlying cryptographic primitives, and supports different sizes of shared\n- * secrets and key encapsulation messages. A configuration must be decided\n+ * A KEM algorithm may support a family of configurations. Each configuration\n+ * may accept different types of keys, cryptographic primitives, and sizes of\n+ * shared secrets and key encapsulation messages. A configuration is defined\n@@ -44,5 +43,5 @@\n- * {@code AlgorithmParameterSpec} argument when creating an encapsulator or\n- * decapsulator. The result of either {@link #engineNewDecapsulator} or\n- * {@link #engineNewDecapsulator} must be of a single configuration,\n- * where its {@link EncapsulatorSpi#engineSecretSize()} and\n- * {@link EncapsulatorSpi#engineEncapsulationSize()} are constants.\n+ * {@code AlgorithmParameterSpec} argument that is specified when creating\n+ * an encapsulator or decapsulator. The result of calling\n+ * {@link #engineNewDecapsulator} or {@link #engineNewDecapsulator} must be of\n+ * a single configuration, where its {@link EncapsulatorSpi#engineSecretSize()}\n+ * and {@link EncapsulatorSpi#engineEncapsulationSize()} are constants.\n@@ -50,1 +49,1 @@\n- * A {@code KEMSpi} implementation should be immutable. It should be safe to\n+ * A {@code KEMSpi} implementation must be immutable. It must be safe to\n@@ -54,2 +53,2 @@\n- * {@code EncapsulatorSpi} and {@code DecapsulatorSpi} implementations should\n- * be immutable. It should be safe to invoke multiple {@code encapsulate} and\n+ * {@code EncapsulatorSpi} and {@code DecapsulatorSpi} implementations must\n+ * be immutable. It must be safe to invoke multiple {@code encapsulate} and\n@@ -211,1 +210,1 @@\n-     * of this method does not to validate it.\n+     * of this method does not need to validate it.\n@@ -215,2 +214,2 @@\n-     * @param secureRandom the source of randomness for encapsulation,\n-     *                     If {@code null}, the implementation should provide\n+     * @param secureRandom the source of randomness for encapsulation.\n+     *                     If {@code null}, the implementation must provide\n@@ -233,1 +232,1 @@\n-     * of this method does not to validate it.\n+     * of this method does not need to validate it.\n@@ -236,1 +235,1 @@\n-     * @param spec the parameter, can be {@code null}\n+     * @param spec the optional parameter, can be {@code null}\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEMSpi.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"}]}