{"files":[{"patch":"@@ -932,1 +932,2 @@\n-  MutexLocker locker(Zip_lock, Monitor::_no_safepoint_check_flag);\n+  \/\/ Temporary workaround for JDK-8313210: Zip_lock can be null on some paths\n+  ConditionalMutexLocker locker(Zip_lock, Zip_lock != nullptr, Monitor::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1548,1 +1548,1 @@\n-      MutexLocker ml2(is_concurrent ? Module_lock : nullptr);\n+      ConditionalMutexLocker ml2(Module_lock, is_concurrent);\n@@ -1551,1 +1551,1 @@\n-      MutexLocker ml1(is_concurrent ? SystemDictionary_lock : nullptr);\n+      ConditionalMutexLocker ml1(SystemDictionary_lock, is_concurrent);\n@@ -1574,1 +1574,1 @@\n-    MutexLocker ml(is_concurrent ? ClassInitError_lock : nullptr);\n+    ConditionalMutexLocker ml(ClassInitError_lock, is_concurrent);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1342,1 +1342,1 @@\n-    MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+    ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2798,4 +2798,7 @@\n-  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock   : nullptr) : nullptr;\n-  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock : nullptr) : nullptr;\n-  Mutex*   function_lock_1 = allFun ? nullptr : (should_take_Compile_lock   ? Compile_lock    : nullptr);\n-  Monitor* function_lock_2 = allFun ? nullptr : (should_take_CodeCache_lock ? CodeCache_lock  : nullptr);\n+  bool take_global_lock_1   =  allFun && should_take_Compile_lock;\n+  bool take_global_lock_2   =  allFun && should_take_CodeCache_lock;\n+  bool take_function_lock_1 = !allFun && should_take_Compile_lock;\n+  bool take_function_lock_2 = !allFun && should_take_CodeCache_lock;\n+  bool take_global_locks    = take_global_lock_1 || take_global_lock_2;\n+  bool take_function_locks  = take_function_lock_1 || take_function_lock_2;\n+\n@@ -2803,3 +2806,4 @@\n-  MutexLocker mu1(global_lock_1, Mutex::_safepoint_check_flag);\n-  MutexLocker mu2(global_lock_2, Mutex::_no_safepoint_check_flag);\n-  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n+\n+  ConditionalMutexLocker mu1(Compile_lock, take_global_lock_1, Mutex::_safepoint_check_flag);\n+  ConditionalMutexLocker mu2(CodeCache_lock, take_global_lock_2, Mutex::_no_safepoint_check_flag);\n+  if (take_global_locks) {\n@@ -2812,3 +2816,3 @@\n-    MutexLocker mu11(function_lock_1, Mutex::_safepoint_check_flag);\n-    MutexLocker mu22(function_lock_2, Mutex::_no_safepoint_check_flag);\n-    if ((function_lock_1 != nullptr) || (function_lock_2 != nullptr)) {\n+    ConditionalMutexLocker mu11(Compile_lock, take_function_lock_1,  Mutex::_safepoint_check_flag);\n+    ConditionalMutexLocker mu22(CodeCache_lock, take_function_lock_2, Mutex::_no_safepoint_check_flag);\n+    if (take_function_locks) {\n@@ -2820,1 +2824,1 @@\n-    if ((function_lock_1 != nullptr) || (function_lock_2 != nullptr)) {\n+    if (take_function_locks) {\n@@ -2841,1 +2845,1 @@\n-  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n+  if (take_global_locks) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  MutexLocker ml(CodeCache_lock->owned_by_self() ? nullptr : &_m, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(&_m, !CodeCache_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2476,1 +2476,1 @@\n-      MutexLocker ml(SafepointSynchronize::is_at_safepoint() ? nullptr : mdo->extra_data_lock());\n+      ConditionalMutexLocker ml(mdo->extra_data_lock(), !SafepointSynchronize::is_at_safepoint());\n@@ -3409,2 +3409,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock\n-                 , Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n@@ -3451,2 +3450,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n@@ -3467,2 +3465,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1151,1 +1151,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n@@ -1162,1 +1162,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,2 +119,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n@@ -141,2 +140,2 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+\n@@ -172,2 +171,2 @@\n-      MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+      ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+\n@@ -200,2 +199,2 @@\n-        MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                       Mutex::_no_safepoint_check_flag);\n+        ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-  MutexLocker ml(_lock.owned_by_self() ? nullptr :  &_lock, Mutex::_no_safepoint_check_flag);\n+  ReentrantMutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-void MutexLocker::post_initialize() {\n+void MutexLockerImpl::post_initialize() {\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-class MutexLocker: public StackObj {\n+class MutexLockerImpl: public StackObj {\n@@ -193,2 +193,2 @@\n- public:\n-  MutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+\n+  MutexLockerImpl(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n@@ -206,1 +206,1 @@\n-  MutexLocker(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+  MutexLockerImpl(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n@@ -218,1 +218,1 @@\n-  ~MutexLocker() {\n+  ~MutexLockerImpl() {\n@@ -225,0 +225,1 @@\n+ public:\n@@ -228,0 +229,38 @@\n+\/\/ Simplest locker, does not allow reentrancy\n+class MutexLocker: public MutexLockerImpl {\n+ public:\n+   MutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(mutex, flag) {\n+     assert(mutex != nullptr, \"null mutex is not allowed\");\n+   }\n+\n+   MutexLocker(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(thread, mutex, flag) {\n+     assert(mutex != nullptr, \"null mutex is not allowed\");\n+   }\n+};\n+\n+\/\/ Conditional locker: only lock when condition is true\n+class ConditionalMutexLocker: public MutexLockerImpl {\n+ public:\n+   ConditionalMutexLocker(Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(condition ? mutex : nullptr, flag) {\n+     assert(!condition || mutex != nullptr, \"null mutex is not allowed when locking\");\n+   }\n+\n+   ConditionalMutexLocker(Thread* thread, Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(thread, condition ? mutex : nullptr, flag) {\n+     assert(!condition || mutex != nullptr, \"null mutex is not allowed when locking\");\n+   }\n+ };\n+\n+\/\/ Reentrant locker: only lock when mutex is not owned already\n+class ReentrantMutexLocker: public ConditionalMutexLocker {\n+ public:\n+   ReentrantMutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     ConditionalMutexLocker(mutex, !mutex->owned_by_self(), flag) {}\n+\n+   ReentrantMutexLocker(Thread* thread, Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     ConditionalMutexLocker(thread, mutex, !mutex->owned_by_self(), flag) {}\n+ };\n+\n@@ -230,1 +269,0 @@\n-\/\/ It also disallows null.\n@@ -242,4 +280,1 @@\n-    MutexLocker(monitor, flag), _flag(flag) {\n-    \/\/ Superclass constructor did locking\n-    assert(monitor != nullptr, \"null monitor not allowed\");\n-  }\n+    MutexLocker(monitor, flag), _flag(flag) {}\n@@ -248,4 +283,1 @@\n-    MutexLocker(thread, monitor, flag), _flag(flag) {\n-    \/\/ Superclass constructor did locking\n-    assert(monitor != nullptr, \"null monitor not allowed\");\n-  }\n+    MutexLocker(thread, monitor, flag), _flag(flag) {}\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":46,"deletions":14,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-  \/\/ not already own the PeriodicTask_lock. Otherwise, we don't try to\n-  \/\/ enter it again because VM internal Mutexes do not support recursion.\n+  \/\/ not already own the PeriodicTask_lock.\n@@ -90,1 +89,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  ReentrantMutexLocker ml(PeriodicTask_lock);\n@@ -108,2 +107,1 @@\n-  \/\/ not already own the PeriodicTask_lock. Otherwise, we don't try to\n-  \/\/ enter it again because VM internal Mutexes do not support recursion.\n+  \/\/ not already own the PeriodicTask_lock.\n@@ -111,1 +109,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  ReentrantMutexLocker ml(PeriodicTask_lock);\n","filename":"src\/hotspot\/share\/runtime\/task.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  MutexLocker ml(Threads_lock->owned_by_self() ? nullptr : Threads_lock);\n+  ReentrantMutexLocker ml(Threads_lock);\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-  MutexLocker::post_initialize();\n+  MutexLockerImpl::post_initialize();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}