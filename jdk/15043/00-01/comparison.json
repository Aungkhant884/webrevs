{"files":[{"patch":"@@ -932,1 +932,0 @@\n-  \/\/ Temporary workaround for JDK-8313210: Zip_lock can be null on some paths\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1342,1 +1342,1 @@\n-    ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+    ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3409,1 +3409,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -3450,1 +3450,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -3465,1 +3465,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1151,1 +1151,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -1162,1 +1162,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -140,1 +140,1 @@\n-  ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -171,1 +171,1 @@\n-      ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+      ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -199,1 +199,1 @@\n-        ReentrantMutexLocker ml(CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+        ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-  ReentrantMutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(&_lock, !_lock.owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,0 +190,2 @@\n+\/\/ Internal implementation. Skips on null Mutex.\n+\/\/ Subclasses enforce stronger invariants.\n@@ -229,1 +231,2 @@\n-\/\/ Simplest locker, does not allow reentrancy\n+\/\/ Simplest mutex locker.\n+\/\/ Does not allow null mutexes.\n@@ -243,1 +246,2 @@\n-\/\/ Conditional locker: only lock when condition is true\n+\/\/ Conditional mutex locker.\n+\/\/ Like MutexLocker above, but only locks when condition is true.\n@@ -257,10 +261,0 @@\n-\/\/ Reentrant locker: only lock when mutex is not owned already\n-class ReentrantMutexLocker: public ConditionalMutexLocker {\n- public:\n-   ReentrantMutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n-     ConditionalMutexLocker(mutex, !mutex->owned_by_self(), flag) {}\n-\n-   ReentrantMutexLocker(Thread* thread, Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n-     ConditionalMutexLocker(thread, mutex, !mutex->owned_by_self(), flag) {}\n- };\n-\n@@ -269,1 +263,1 @@\n-\n+\/\/ It also disallows null.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-  \/\/ not already own the PeriodicTask_lock.\n+  \/\/ not already own the PeriodicTask_lock. Otherwise, we don't try to\n+  \/\/ enter it again because VM internal Mutexes do not support recursion.\n@@ -89,1 +90,1 @@\n-  ReentrantMutexLocker ml(PeriodicTask_lock);\n+  ConditionalMutexLocker ml(PeriodicTask_lock, !PeriodicTask_lock->owned_by_self());\n@@ -107,1 +108,2 @@\n-  \/\/ not already own the PeriodicTask_lock.\n+  \/\/ not already own the PeriodicTask_lock. Otherwise, we don't try to\n+  \/\/ enter it again because VM internal Mutexes do not support recursion.\n@@ -109,1 +111,1 @@\n-  ReentrantMutexLocker ml(PeriodicTask_lock);\n+  ConditionalMutexLocker ml(PeriodicTask_lock, !PeriodicTask_lock->owned_by_self());\n","filename":"src\/hotspot\/share\/runtime\/task.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  ReentrantMutexLocker ml(Threads_lock);\n+  ConditionalMutexLocker ml(Threads_lock, !Threads_lock->owned_by_self());\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}