{"files":[{"patch":"@@ -2644,1 +2644,3 @@\n-  size_t num_symbol_entries = ARRAY_SIZE(on_attach_symbols);\n+  size_t num_onattach_symbol_entries = ARRAY_SIZE(on_attach_symbols);\n+  const char *on_unload_symbols[] = AGENT_ONUNLOAD_SYMBOLS;\n+  size_t num_onunload_symbol_entries = ARRAY_SIZE(on_unload_symbols);\n@@ -2656,1 +2658,1 @@\n-  if (!os::find_builtin_agent(agent_lib, on_attach_symbols, num_symbol_entries)) {\n+  if (!os::find_builtin_agent(agent_lib, on_attach_symbols, num_onattach_symbol_entries)) {\n@@ -2680,0 +2682,3 @@\n+    JavaThread* THREAD = JavaThread::current();\n+    extern struct JavaVM_ main_vm;\n+\n@@ -2683,1 +2688,1 @@\n-       os::find_agent_function(agent_lib, false, on_attach_symbols, num_symbol_entries));\n+       os::find_agent_function(agent_lib, false, on_attach_symbols, num_onattach_symbol_entries));\n@@ -2694,1 +2699,0 @@\n-      JavaThread* THREAD = JavaThread::current();\n@@ -2696,1 +2700,0 @@\n-        extern struct JavaVM_ main_vm;\n@@ -2713,0 +2716,17 @@\n+        \/\/ Find the Agent_OnUnload function.\n+        Agent_OnUnload_t unload_entry = CAST_TO_FN_PTR(Agent_OnUnload_t,\n+                                                       os::find_agent_function(agent_lib,\n+                                                       false,\n+                                                       on_unload_symbols,\n+                                                       num_onunload_symbol_entries));\n+        \/\/ Invoke the Agent_OnUnload function\n+        if (unload_entry != NULL) {\n+          JvmtiThreadEventMark jem(THREAD);\n+          JvmtiJavaThreadEventTransition jet(THREAD);\n+\n+          (*unload_entry)(&main_vm);\n+        }\n+\n+        if (!agent_lib->is_static_lib()) {\n+          os::dll_unload(library);\n+        }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,5 @@\n+\/\/ type for the Agent_OnUnload entry point\n+extern \"C\" {\n+  typedef void (JNICALL *Agent_OnUnload_t)(JavaVM *);\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4328,4 +4328,0 @@\n-extern \"C\" {\n-  typedef void (JNICALL *Agent_OnUnload_t)(JavaVM *);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8165736\n+ * @bug 8165736 8252657\n@@ -39,0 +39,1 @@\n+            \/\/ Check return code\n@@ -41,0 +42,4 @@\n+\n+            \/\/ Check agent unloading\n+            output = executor.execute(\"VM.dynlibs\");\n+            output.shouldNotContain(libpath);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/AttachFailed\/AttachReturnError.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}