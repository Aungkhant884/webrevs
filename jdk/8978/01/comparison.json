{"files":[{"patch":"@@ -233,1 +233,4 @@\n-                    k.interestOps(ops);\n+                    try {\n+                        k.interestOps(ops);\n+                    } catch (CancelledKeyException ignored) {\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectableChannel.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.channels.CancelledKeyException;\n@@ -228,0 +229,1 @@\n+        } catch (CancelledKeyException ignored) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8287580\n+ * @summary Check CancelledKeyException not thrown during channel registration\n+ * @run main KeyCancelled\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.nio.channels.SocketChannel;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class KeyCancelled {\n+    private static final int ITERATIONS = 4;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int iteration = 1; iteration <= 4; iteration++) {\n+            System.out.printf(\"Iteration %d%n\", iteration);\n+            test();\n+        }\n+    }\n+\n+    private static void test() throws IOException {\n+        Thread t;\n+        try (Selector s = Selector.open()) {\n+            \/\/ Use latch to avoid a ClosedSelectorException\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            t = new Thread(() -> {\n+                for (int i = 0; i < 100_000; i++) {\n+                    s.keys().forEach(SelectionKey::cancel);\n+                }\n+                latch.countDown();\n+            });\n+            t.start();\n+\n+            try (SocketChannel c = s.provider().openSocketChannel()) {\n+                for (int i = 0; i < 10_000; i++) {\n+                    c.configureBlocking(false);\n+                    \/\/ Sometimes this throws CancelledKeyException, because\n+                    \/\/ the key is cancelled by the other thread part-way through\n+                    \/\/ the register call.\n+                    c.register(s, SelectionKey.OP_READ);\n+                    \/\/ c.isRegistered() is false here after the exceptional case\n+                }\n+            }\n+\n+            try {\n+                latch.await();\n+            } catch (InterruptedException ignored) {\n+            }\n+        }\n+        try {\n+            t.join();\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/KeyCancelled.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}