{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.channels.CancelledKeyException;\n@@ -228,0 +229,1 @@\n+        } catch (CancelledKeyException ignored) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8287580\n+ * @summary Check CancelledKeyException not thrown during channel registration\n+ * @run main CancelDuringRegister\n+ *\/\n+\n+import java.nio.channels.*;\n+\n+public class CancelDuringRegister {\n+\n+    private static volatile boolean done;\n+\n+    public static void main(String[] args) throws Exception {\n+        try (Selector sel = Selector.open()) {\n+\n+            \/\/ create thread to cancel all keys in the selector's key set\n+            var thread = new Thread(() -> {\n+                while (!done) {\n+                    sel.keys().forEach(SelectionKey::cancel);\n+                }\n+            });\n+            thread.start();\n+\n+            try (SocketChannel sc = SocketChannel.open()) {\n+                sc.configureBlocking(false);\n+\n+                for (int i = 0; i <100_000; i++) {\n+                    \/\/ register\n+                    var key = sc.register(sel, SelectionKey.OP_READ);\n+                    sel.selectNow();\n+\n+                    \/\/ cancel and flush\n+                    key.cancel();\n+                    do {\n+                        sel.selectNow();\n+                    } while (sel.keys().contains(key));\n+                }\n+            } finally {\n+                done = true;\n+            }\n+\n+            thread.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/CancelDuringRegister.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}