{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,24 +78,30 @@\n-        HashMap<String,List<String>> map;\n-\n-       \/**\n-        * Creates an empty instance of {@code Headers}.\n-        *\/\n-        public Headers () {map = new HashMap<String,List<String>>(32);}\n-\n-        \/**\n-         * Normalize the key by converting to following form.\n-         * First {@code char} upper case, rest lower case.\n-         * key is presumed to be {@code ASCII}.\n-         *\/\n-        private String normalize (String key) {\n-            if (key == null) {\n-                return null;\n-            }\n-            int len = key.length();\n-            if (len == 0) {\n-                return key;\n-            }\n-            char[] b = key.toCharArray();\n-            if (b[0] >= 'a' && b[0] <= 'z') {\n-                b[0] = (char)(b[0] - ('a' - 'A'));\n-            } else if (b[0] == '\\r' || b[0] == '\\n')\n+    HashMap<String,List<String>> map;\n+\n+    \/**\n+     * Creates an empty instance of {@code Headers}.\n+     *\/\n+    public Headers() {map = new HashMap<>(32);}\n+\n+    \/**\n+     * Normalize the key by converting to following form.\n+     * First {@code char} upper case, rest lower case.\n+     * key is presumed to be {@code ASCII}.\n+     *\/\n+    private String normalize(String key) {\n+        if (key == null) {\n+            return null;\n+        }\n+        int len = key.length();\n+        if (len == 0) {\n+            return key;\n+        }\n+        char[] b = key.toCharArray();\n+        if (b[0] >= 'a' && b[0] <= 'z') {\n+            b[0] = (char)(b[0] - ('a' - 'A'));\n+        } else if (b[0] == '\\r' || b[0] == '\\n')\n+            throw new IllegalArgumentException(\"illegal character in key\");\n+\n+        for (int i=1; i<len; i++) {\n+            if (b[i] >= 'A' && b[i] <= 'Z') {\n+                b[i] = (char) (b[i] + ('a' - 'A'));\n+            } else if (b[i] == '\\r' || b[i] == '\\n')\n@@ -103,8 +109,0 @@\n-\n-            for (int i=1; i<len; i++) {\n-                if (b[i] >= 'A' && b[i] <= 'Z') {\n-                    b[i] = (char) (b[i] + ('a' - 'A'));\n-                } else if (b[i] == '\\r' || b[i] == '\\n')\n-                    throw new IllegalArgumentException(\"illegal character in key\");\n-            }\n-            return new String(b);\n@@ -112,0 +110,2 @@\n+        return new String(b);\n+    }\n@@ -113,1 +113,1 @@\n-        public int size() {return map.size();}\n+    public int size() {return map.size();}\n@@ -115,1 +115,1 @@\n-        public boolean isEmpty() {return map.isEmpty();}\n+    public boolean isEmpty() {return map.isEmpty();}\n@@ -117,8 +117,3 @@\n-        public boolean containsKey(Object key) {\n-            if (key == null) {\n-                return false;\n-            }\n-            if (!(key instanceof String)) {\n-                return false;\n-            }\n-            return map.containsKey (normalize((String)key));\n+    public boolean containsKey(Object key) {\n+        if (key == null) {\n+            return false;\n@@ -126,3 +121,2 @@\n-\n-        public boolean containsValue(Object value) {\n-            return map.containsValue(value);\n+        if (!(key instanceof String)) {\n+            return false;\n@@ -130,0 +124,2 @@\n+        return map.containsKey(normalize((String)key));\n+    }\n@@ -131,3 +127,3 @@\n-        public List<String> get(Object key) {\n-            return map.get(normalize((String)key));\n-        }\n+    public boolean containsValue(Object value) {\n+        return map.containsValue(value);\n+    }\n@@ -135,14 +131,3 @@\n-        \/**\n-         * Returns the first value from the {@link List} of {@code String}\n-         * values for the given key (if at least one exists).\n-         *\n-         * @param key the key to search for\n-         * @return the first {@code String} value associated with the key\n-         *\/\n-        public String getFirst (String key) {\n-            List<String> l = map.get(normalize(key));\n-            if (l == null) {\n-                return null;\n-            }\n-            return l.get(0);\n-        }\n+    public List<String> get(Object key) {\n+        return map.get(normalize((String)key));\n+    }\n@@ -150,4 +135,11 @@\n-        public List<String> put(String key, List<String> value) {\n-            for (String v : value)\n-                checkValue(v);\n-            return map.put (normalize(key), value);\n+    \/**\n+     * Returns the first value from the {@link List} of {@code String}\n+     * values for the given key (if at least one exists).\n+     *\n+     * @param key the key to search for\n+     * @return the first {@code String} value associated with the key\n+     *\/\n+    public String getFirst(String key) {\n+        List<String> l = map.get(normalize(key));\n+        if (l == null) {\n+            return null;\n@@ -155,0 +147,2 @@\n+        return l.get(0);\n+    }\n@@ -156,16 +150,20 @@\n-        \/**\n-         * Adds the given value to the list of headers for the given key. If\n-         * the mapping does not already exist, then it is created.\n-         *\n-         * @param key the header name\n-         * @param value the value to add to the header\n-         *\/\n-        public void add (String key, String value) {\n-            checkValue(value);\n-            String k = normalize(key);\n-            List<String> l = map.get(k);\n-            if (l == null) {\n-                l = new LinkedList<String>();\n-                map.put(k,l);\n-            }\n-            l.add (value);\n+    public List<String> put(String key, List<String> value) {\n+        for (String v : value)\n+            checkValue(v);\n+        return map.put(normalize(key), value);\n+    }\n+\n+    \/**\n+     * Adds the given value to the list of headers for the given key. If\n+     * the mapping does not already exist, then it is created.\n+     *\n+     * @param key the header name\n+     * @param value the value to add to the header\n+     *\/\n+    public void add(String key, String value) {\n+        checkValue(value);\n+        String k = normalize(key);\n+        List<String> l = map.get(k);\n+        if (l == null) {\n+            l = new LinkedList<>();\n+            map.put(k,l);\n@@ -173,0 +171,2 @@\n+        l.add(value);\n+    }\n@@ -174,20 +174,13 @@\n-        private static void checkValue(String value) {\n-            int len = value.length();\n-            for (int i=0; i<len; i++) {\n-                char c = value.charAt(i);\n-                if (c == '\\r') {\n-                    \/\/ is allowed if it is followed by \\n and a whitespace char\n-                    if (i >= len - 2) {\n-                        throw new IllegalArgumentException(\"Illegal CR found in header\");\n-                    }\n-                    char c1 = value.charAt(i+1);\n-                    char c2 = value.charAt(i+2);\n-                    if (c1 != '\\n') {\n-                        throw new IllegalArgumentException(\"Illegal char found after CR in header\");\n-                    }\n-                    if (c2 != ' ' && c2 != '\\t') {\n-                        throw new IllegalArgumentException(\"No whitespace found after CRLF in header\");\n-                    }\n-                    i+=2;\n-                } else if (c == '\\n') {\n-                    throw new IllegalArgumentException(\"Illegal LF found in header\");\n+    private static void checkValue(String value) {\n+        int len = value.length();\n+        for (int i=0; i<len; i++) {\n+            char c = value.charAt(i);\n+            if (c == '\\r') {\n+                \/\/ is allowed if it is followed by \\n and a whitespace char\n+                if (i >= len - 2) {\n+                    throw new IllegalArgumentException(\"Illegal CR found in header\");\n+                }\n+                char c1 = value.charAt(i+1);\n+                char c2 = value.charAt(i+2);\n+                if (c1 != '\\n') {\n+                    throw new IllegalArgumentException(\"Illegal char found after CR in header\");\n@@ -195,0 +188,6 @@\n+                if (c2 != ' ' && c2 != '\\t') {\n+                    throw new IllegalArgumentException(\"No whitespace found after CRLF in header\");\n+                }\n+                i+=2;\n+            } else if (c == '\\n') {\n+                throw new IllegalArgumentException(\"Illegal LF found in header\");\n@@ -197,0 +196,1 @@\n+    }\n@@ -198,13 +198,12 @@\n-        \/**\n-         * Sets the given value as the sole header value for the given\n-         * key. If the mapping does not already exist, then it is created.\n-         *\n-         * @param key the header name\n-         * @param value the header value to set\n-         *\/\n-        public void set (String key, String value) {\n-            LinkedList<String> l = new LinkedList<String>();\n-            l.add (value);\n-            put (key, l);\n-        }\n-\n+    \/**\n+     * Sets the given value as the sole header value for the given\n+     * key. If the mapping does not already exist, then it is created.\n+     *\n+     * @param key the header name\n+     * @param value the header value to set\n+     *\/\n+    public void set(String key, String value) {\n+        LinkedList<String> l = new LinkedList<>();\n+        l.add(value);\n+        put(key, l);\n+    }\n@@ -212,3 +211,3 @@\n-        public List<String> remove(Object key) {\n-            return map.remove(normalize((String)key));\n-        }\n+    public List<String> remove(Object key) {\n+        return map.remove(normalize((String)key));\n+    }\n@@ -216,3 +215,3 @@\n-        public void putAll(Map<? extends String,? extends List<String>> t)  {\n-            map.putAll (t);\n-        }\n+    public void putAll(Map<? extends String,? extends List<String>> t)  {\n+        map.putAll(t);\n+    }\n@@ -220,1 +219,1 @@\n-        public void clear() {map.clear();}\n+    public void clear() {map.clear();}\n@@ -222,1 +221,1 @@\n-        public Set<String> keySet() {return map.keySet();}\n+    public Set<String> keySet() {return map.keySet();}\n@@ -224,1 +223,1 @@\n-        public Collection<List<String>> values() {return map.values();}\n+    public Collection<List<String>> values() {return map.values();}\n@@ -226,3 +225,3 @@\n-        public Set<Map.Entry<String, List<String>>> entrySet() {\n-            return map.entrySet();\n-        }\n+    public Set<Map.Entry<String, List<String>>> entrySet() {\n+        return map.entrySet();\n+    }\n@@ -230,1 +229,1 @@\n-        public boolean equals(Object o) {return map.equals(o);}\n+    public boolean equals(Object o) {return map.equals(o);}\n@@ -232,2 +231,2 @@\n-        public int hashCode() {return map.hashCode();}\n-    }\n+    public int hashCode() {return map.hashCode();}\n+}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Headers.java","additions":130,"deletions":131,"binary":false,"changes":261,"status":"modified"}]}