{"files":[{"patch":"@@ -177,11 +177,13 @@\n- * For {@code SSLSocket} objects, for example, an application can call\n- * {@link Socket#shutdownOutput()} or {@link java.io.OutputStream#close()}\n- * for output stream close and call {@link Socket#shutdownInput()} or\n- * {@link java.io.InputStream#close()} for input stream close.  Note that\n- * in some cases, closing the input stream may depend on the peer's output\n- * stream being closed first.  If the connection is not closed in an orderly\n- * manner (for example {@link Socket#shutdownInput()} is called before the\n- * peer's write closure notification has been received), exceptions may\n- * be raised to indicate that an error has occurred.  Once an\n- * {@code SSLSocket} is closed, it is not reusable: a new {@code SSLSocket}\n- * must be created.\n+ * This can be done either in one shot by calling {@link Socket#close()}},\n+ * or by closing each side individually using\n+ * {@link Socket#shutdownOutput()} \/ {@link Socket#shutdownInput()} which is\n+ * useful for protocol versions that can support half-closed connections.\n+ *\n+ * <P> Note that in some cases, closing the input stream may depend on the\n+ * peer's output stream being closed first.  If the connection is not closed\n+ * in an orderly manner (for example {@link Socket#shutdownInput()} is called\n+ * before the peer's write closure notification has been received), exceptions\n+ * may be raised to indicate that an error has occurred.\n+ *\n+ * <P>Once an {@code SSLSocket} is closed, it is not reusable: a new\n+ * {@code SSLSocket} must be created.\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocket.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}