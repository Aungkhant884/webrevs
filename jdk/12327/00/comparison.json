{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-                                               NULL,\n+                                               nullptr,\n@@ -112,1 +112,1 @@\n-                                               NULL,\n+                                               nullptr,\n","filename":"src\/hotspot\/cpu\/zero\/abstractInterpreter_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -80,1 +80,1 @@\n-  istate->set_prev_link(NULL);\n+  istate->set_prev_link(nullptr);\n@@ -86,1 +86,1 @@\n-  istate->set_oop_temp(NULL);\n+  istate->set_oop_temp(nullptr);\n@@ -95,1 +95,1 @@\n-  istate->set_callee(NULL);\n+  istate->set_callee(nullptr);\n","filename":"src\/hotspot\/cpu\/zero\/bytecodeInterpreter_zero.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/continuationFreezeThaw_zero.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -43,1 +43,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -76,1 +76,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -82,1 +82,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -87,1 +87,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -96,1 +96,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -101,1 +101,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -110,1 +110,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -115,1 +115,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -120,1 +120,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -125,1 +125,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  static address decode_instruction0(address here, outputStream* st, address virtual_begin = NULL) {\n+  static address decode_instruction0(address here, outputStream* st, address virtual_begin = nullptr) {\n","filename":"src\/hotspot\/cpu\/zero\/disassembler_zero.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  assert(map != NULL, \"map must be set\");\n+  assert(map != nullptr, \"map must be set\");\n@@ -91,1 +91,1 @@\n-  if (pc != NULL) {\n+  if (pc != nullptr) {\n@@ -98,1 +98,1 @@\n-    assert(pc == NULL, \"should be\");\n+    assert(pc == nullptr, \"should be\");\n@@ -210,1 +210,1 @@\n-      obj = (obj_p == NULL) ? (oop) NULL : *obj_p;\n+      obj = (obj_p == nullptr) ? (oop) nullptr : *obj_p;\n@@ -212,1 +212,1 @@\n-    assert(obj == NULL || Universe::heap()->is_in(obj), \"sanity check\");\n+    assert(obj == nullptr || Universe::heap()->is_in(obj), \"sanity check\");\n@@ -341,1 +341,1 @@\n-    if (hA != NULL) {\n+    if (hA != nullptr) {\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,4 +34,4 @@\n-  _zeroframe = NULL;\n-  _sp = NULL;\n-  _pc = NULL;\n-  _cb = NULL;\n+  _zeroframe = nullptr;\n+  _sp = nullptr;\n+  _pc = nullptr;\n+  _cb = nullptr;\n@@ -43,1 +43,1 @@\n-inline address  frame::sender_pc()           const { ShouldNotCallThis(); return NULL; }\n+inline address  frame::sender_pc()           const { ShouldNotCallThis(); return nullptr; }\n@@ -57,1 +57,1 @@\n-    _cb = NULL;\n+    _cb = nullptr;\n@@ -62,2 +62,2 @@\n-    _pc = NULL;\n-    _cb = NULL;\n+    _pc = nullptr;\n+    _cb = nullptr;\n@@ -68,2 +68,2 @@\n-    _pc = NULL;\n-    _cb = NULL;\n+    _pc = nullptr;\n+    _cb = nullptr;\n@@ -90,1 +90,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -95,1 +95,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -124,1 +124,1 @@\n-  return NULL; \/\/ silence compiler warnings\n+  return nullptr; \/\/ silence compiler warnings\n@@ -146,1 +146,1 @@\n-\/\/ we can distinguish identity and younger\/older relationship. NULL\n+\/\/ we can distinguish identity and younger\/older relationship. null\n@@ -162,1 +162,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -172,1 +172,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -181,1 +181,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -220,1 +220,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -55,1 +55,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/icBuffer_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  ffi_type *ftype = NULL;\n+  ffi_type *ftype = nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/interpreterRT_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  \/\/ Note that whenever _last_Java_sp != NULL other anchor fields\n+  \/\/ Note that whenever _last_Java_sp != null other anchor fields\n@@ -43,1 +43,1 @@\n-    _last_Java_sp = NULL;\n+    _last_Java_sp = nullptr;\n@@ -45,2 +45,2 @@\n-    _last_Java_fp = NULL;\n-    _last_Java_pc = NULL;\n+    _last_Java_fp = nullptr;\n+    _last_Java_pc = nullptr;\n@@ -59,1 +59,1 @@\n-    \/\/ previous version (pd_cache_state) don't NULL _last_Java_sp\n+    \/\/ previous version (pd_cache_state) don't null _last_Java_sp\n@@ -63,1 +63,1 @@\n-      _last_Java_sp = NULL;\n+      _last_Java_sp = nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/javaFrameAnchor_zero.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-  assert(frame != NULL, \"must be\");\n+  assert(frame != nullptr, \"must be\");\n@@ -130,1 +130,1 @@\n-  if (recv == NULL) {\n+  if (recv == nullptr) {\n@@ -175,1 +175,1 @@\n-  if (recv == NULL) {\n+  if (recv == nullptr) {\n@@ -193,1 +193,1 @@\n-  if (vmtarget != NULL) {\n+  if (vmtarget != nullptr) {\n@@ -219,1 +219,1 @@\n-  if (recv == NULL) {\n+  if (recv == nullptr) {\n@@ -261,1 +261,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -75,1 +75,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -80,1 +80,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -85,1 +85,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -90,1 +90,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -113,1 +113,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -118,1 +118,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -125,1 +125,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -140,1 +140,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -161,1 +161,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -172,1 +172,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -190,1 +190,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -197,1 +197,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -211,1 +211,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -224,1 +224,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -229,2 +229,2 @@\n-  address instruction_address() const       { Unimplemented(); return NULL; }\n-  address next_instruction_address() const  { Unimplemented(); return NULL; }\n+  address instruction_address() const       { Unimplemented(); return nullptr; }\n+  address next_instruction_address() const  { Unimplemented(); return nullptr; }\n","filename":"src\/hotspot\/cpu\/zero\/nativeInst_zero.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-  \/\/ Since there is none, we just return NULL.\n-  address pd_location(VMReg reg) const { return NULL; }\n+  \/\/ Since there is none, we just return null.\n+  address pd_location(VMReg reg) const { return nullptr; }\n","filename":"src\/hotspot\/cpu\/zero\/registerMap_zero.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -40,1 +40,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/register_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -48,1 +48,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/relocInfo_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -80,1 +80,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/smallRegisterMap_zero.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -55,1 +55,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -61,1 +61,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -67,1 +67,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/stackChunkFrameStream_zero.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    : _base(NULL), _top(NULL), _sp(NULL) {\n+    : _base(nullptr), _top(nullptr), _sp(nullptr) {\n@@ -67,1 +67,1 @@\n-    if (frame == NULL)\n+    if (frame == nullptr)\n","filename":"src\/hotspot\/cpu\/zero\/stack_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    return _base == NULL;\n+    return _base == nullptr;\n@@ -62,3 +62,3 @@\n-    _base = NULL;\n-    _top  = NULL;\n-    _sp   = NULL;\n+    _base = nullptr;\n+    _top  = nullptr;\n+    _sp   = nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/stack_zero.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,2 +148,2 @@\n-    \/\/ Shared code tests for \"NULL\" to discover the stub is not generated.\n-    StubRoutines::_unsafe_arraycopy          = NULL;\n+    \/\/ Shared code tests for \"null\" to discover the stub is not generated.\n+    StubRoutines::_unsafe_arraycopy          = nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/stubGenerator_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -37,1 +37,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/vtableStubs_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-  if (_code != NULL) return;\n+  if (_code != nullptr) return;\n@@ -58,1 +58,1 @@\n-  _code = new StubQueue(new InterpreterCodeletInterface, code_size, NULL,\n+  _code = new StubQueue(new InterpreterCodeletInterface, code_size, nullptr,\n@@ -123,2 +123,2 @@\n-  \/\/ Shortcut if reference is known NULL\n-  if (ref == NULL) {\n+  \/\/ Shortcut if reference is known null\n+  if (ref == nullptr) {\n@@ -177,1 +177,1 @@\n-  intptr_t *result = NULL;\n+  intptr_t *result = nullptr;\n@@ -257,1 +257,1 @@\n-      ((BasicObjectLock *) istate->stack_base())->set_obj(NULL);\n+      ((BasicObjectLock *) istate->stack_base())->set_obj(nullptr);\n@@ -330,1 +330,1 @@\n-  monitor = NULL;\n+  monitor = nullptr;\n@@ -341,1 +341,1 @@\n-        monitor->lock()->set_displaced_header(markWord::from_pointer(NULL));\n+        monitor->lock()->set_displaced_header(markWord::from_pointer(nullptr));\n@@ -357,1 +357,1 @@\n-    if (handlerAddr == NULL) {\n+    if (handlerAddr == nullptr) {\n@@ -363,1 +363,1 @@\n-      assert(handlerAddr != NULL, \"eh?\");\n+      assert(handlerAddr != nullptr, \"eh?\");\n@@ -367,1 +367,1 @@\n-        InterpreterRuntime::slow_signature_handler(thread, method, NULL,NULL));\n+        InterpreterRuntime::slow_signature_handler(thread, method, nullptr,nullptr));\n@@ -378,1 +378,1 @@\n-  assert(function != NULL, \"should be set if signature handler is\");\n+  assert(function != nullptr, \"should be set if signature handler is\");\n@@ -468,1 +468,1 @@\n-      istate->set_oop_temp(NULL);\n+      istate->set_oop_temp(nullptr);\n@@ -485,1 +485,1 @@\n-    monitor->set_obj(NULL);\n+    monitor->set_obj(nullptr);\n@@ -488,1 +488,1 @@\n-    if (header.to_pointer() != NULL) {\n+    if (header.to_pointer() != nullptr) {\n@@ -619,1 +619,1 @@\n-  if (object == NULL) {\n+  if (object == nullptr) {\n@@ -709,1 +709,1 @@\n-  oop object = NULL;\n+  oop object = nullptr;\n@@ -722,1 +722,1 @@\n-  if (object == NULL) {\n+  if (object == nullptr) {\n@@ -828,1 +828,1 @@\n-  istate->set_prev_link(NULL);\n+  istate->set_prev_link(nullptr);\n@@ -830,1 +830,1 @@\n-  istate->set_bcp(method->is_native() ? NULL : method->code_base());\n+  istate->set_bcp(method->is_native() ? nullptr : method->code_base());\n@@ -833,2 +833,2 @@\n-  istate->set_oop_temp(NULL);\n-  istate->set_callee(NULL);\n+  istate->set_oop_temp(nullptr);\n+  istate->set_callee(nullptr);\n@@ -875,1 +875,1 @@\n-  istate->set_self_link(NULL); \/\/ mark invalid\n+  istate->set_self_link(nullptr); \/\/ mark invalid\n@@ -884,1 +884,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -888,1 +888,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -898,1 +898,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"}]}