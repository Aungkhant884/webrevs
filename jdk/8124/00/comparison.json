{"files":[{"patch":"@@ -98,0 +98,4 @@\n+\n+  # Debug prefix mapping if supported by compiler\n+  DEBUG_PREFIX_CFLAGS=\n+\n@@ -100,0 +104,12 @@\n+    if test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = \"xfalse\"; then\n+      # Check if compiler supports -fdebug-prefix-map. If so, use that to make\n+      # the debug symbol paths resolve to paths relative to the workspace root.\n+      workspace_root_trailing_slash=\"${WORKSPACE_ROOT%\/}\/\"\n+      DEBUG_PREFIX_CFLAGS=\"-fdebug-prefix-map=${workspace_root_trailing_slash}=\"\n+      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${DEBUG_PREFIX_CFLAGS}],\n+        IF_FALSE: [\n+            DEBUG_PREFIX_CFLAGS=\n+        ]\n+      )\n+    fi\n+\n@@ -111,0 +127,5 @@\n+  if test \"x$DEBUG_PREFIX_CFLAGS\" != x; then\n+    CFLAGS_DEBUG_SYMBOLS=\"$CFLAGS_DEBUG_SYMBOLS $DEBUG_PREFIX_CFLAGS\"\n+    ASFLAGS_DEBUG_SYMBOLS=\"$ASFLAGS_DEBUG_SYMBOLS $DEBUG_PREFIX_CFLAGS\"\n+  fi\n+\n","filename":"make\/autoconf\/flags-cflags.m4","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -392,0 +392,6 @@\n+    # For reproducible builds with gcc ensure random symbol generation is seeded deterministically\n+    ifeq ($(TOOLCHAIN_TYPE), gcc)\n+       ifeq ($$(ENABLE_REPRODUCIBLE_BUILD), true)\n+         $1_COMPILE_OPTIONS += -frandom-seed=\"$$($1_FILENAME)\"\n+       endif\n+    endif\n@@ -1146,0 +1152,13 @@\n+    # Debuginfo of ASM objects always embeds the absolute object path,\n+    # as ASM debuginfo paths do not get prefix mapped.\n+    # So for reproducible builds use relative paths to ensure a reproducible\n+    # debuginfo and libs, when creating debug symbols.\n+    ifeq ($$(ENABLE_REPRODUCIBLE_BUILD), true)\n+      ifeq ($(call isTargetOs, linux), true)\n+        ifeq ($$($1_COMPILE_WITH_DEBUG_SYMBOLS), true)\n+          $1_LINK_OBJS_RELATIVE := true\n+          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+        endif\n+      endif\n+    endif\n+\n","filename":"make\/common\/NativeCompilation.gmk","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -61,0 +61,3 @@\n+  # Add file macro mappings\n+  ADLC_CFLAGS += $(FILE_MACRO_CFLAGS)\n+\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,0 +207,4 @@\n+        \/\/ Ensure \"extra\" field is not set from original ZipEntry info that may be not deterministic\n+        \/\/ eg.may contain specific UID\/GID\n+        entry.setExtra(null);\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/makezipreproducible\/MakeZipReproducible.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}