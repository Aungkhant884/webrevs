{"files":[{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8294858\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng\/othervm common.ProcessingLimits\n+ * @summary Verifies the support of processing limits. Use this test to cover\n+ * tests related to processing limits.\n+ *\/\n+public class ProcessingLimits {\n+    private static final String XML_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n+\n+    \/*\n+     * Data for tests:\n+     * xml, name limit\n+     *\/\n+    @DataProvider(name = \"xml-data\")\n+    public Object[][] xmlData() throws Exception {\n+        return new Object[][]{\n+            {\"<foo xmlns='bar'\/>\", null},\n+            {\"<foo xmlns='bar'\/>\", \"0\"},\n+            {\"<?xml version=\\\"1.1\\\"?><foo xmlns='bar'\/>\", null},\n+            {\"<?xml version=\\\"1.1\\\"?><foo xmlns='bar'\/>\", \"0\"},\n+        };\n+    }\n+    \/**\n+     * bug 8294858\n+     * Verifies that 0 (no limit) is honored by the parser. According to the bug\n+     * report, the parser treated 0 literally for namespace names.\n+     *\n+     * @param xml the XML content\n+     * @param limit the limit to be set. \"null\" means not set.\n+     *\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"xml-data\")\n+    public void testNameLimit(String xml, String limit)throws Exception\n+    {\n+        boolean success = true;\n+        try {\n+            if (limit != null) {\n+                System.setProperty(XML_NAME_LIMIT, limit);\n+            }\n+            parse(xml);\n+        } catch (Exception e) {\n+            \/\/ catch instead of throw so that we can clear the System Property\n+            success = false;\n+            System.err.println(\"Limit is set to \" + limit + \" failed: \" + e.getMessage());\n+        }\n+        if (limit != null) {\n+            System.clearProperty(XML_NAME_LIMIT);\n+        }\n+        Assert.assertTrue(success);\n+    }\n+\n+    private static void parse(String xml)\n+        throws Exception\n+    {\n+        InputStream is = new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8));\n+        XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(is);\n+        while (reader.hasNext())\n+            reader.next();\n+        System.err.println(\"Parsed successfully\");\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/ProcessingLimits.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}