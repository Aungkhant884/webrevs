{"files":[{"patch":"@@ -86,1 +86,1 @@\n-                    fs.getRootDirectories().iterator().next(),\n+                    fs.getPath(\"\/\"),\n@@ -90,11 +90,11 @@\n-                final Set<String> expectedDirs = new HashSet<>(Set.of(\n-                        walkStartPath.toString(),\n-                        walkStartPath.resolve(\"META-INF\").toString(),\n-                        walkStartPath.resolve(\"d1\").toString(),\n-                        walkStartPath.resolve(\"d2\").toString(),\n-                        walkStartPath.resolve(\"d3.\").toString()));\n-                final Set<String> expectedFiles = new HashSet<>(Set.of(\n-                        walkStartPath.resolve(\"META-INF\/MANIFEST.MF\").toString(),\n-                        walkStartPath.resolve(\"d1\/file.txt\").toString(),\n-                        walkStartPath.resolve(\"file.txt\").toString(),\n-                        walkStartPath.resolve(\"d3.\/..file.txt\").toString()));\n+                final Set<String> expectedDirs = toString(Set.of(\n+                        walkStartPath,\n+                        walkStartPath.resolve(\"META-INF\"),\n+                        walkStartPath.resolve(\"d1\"),\n+                        walkStartPath.resolve(\"d2\"),\n+                        walkStartPath.resolve(\"d3.\")));\n+                final Set<String> expectedFiles = toString(Set.of(\n+                        walkStartPath.resolve(\"META-INF\/MANIFEST.MF\"),\n+                        walkStartPath.resolve(\"d1\/file.txt\"),\n+                        walkStartPath.resolve(\"file.txt\"),\n+                        walkStartPath.resolve(\"d3.\/..file.txt\")));\n@@ -110,0 +110,6 @@\n+    private static Set<String> toString(final Set<Path> paths) {\n+        final Set<String> converted = new HashSet<>();\n+        paths.forEach(p -> converted.add(p.toString()));\n+        return converted;\n+    }\n+\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSFileWalkTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"}]}