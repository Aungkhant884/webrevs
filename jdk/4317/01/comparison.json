{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/..\/sun\/net\/www\/httptest\/ \/test\/lib\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n+ * @library \/test\/lib\n@@ -35,2 +33,15 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.ProxySelector;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -39,1 +50,1 @@\n-public class B4678055 implements HttpCallback {\n+public class B4678055 implements HttpHandler {\n@@ -44,5 +55,4 @@\n-    void errorReply (HttpTransaction req, String reply) throws IOException {\n-        req.addResponseHeader (\"Connection\", \"close\");\n-        req.addResponseHeader (\"WWW-Authenticate\", reply);\n-        req.sendResponse (401, \"Unauthorized\");\n-        req.orderlyClose();\n+    private void errorReply(HttpExchange req, String reply) throws IOException {\n+        req.getResponseHeaders().set(\"Connection\", \"close\");\n+        req.getResponseHeaders().set(\"WWW-Authenticate\", reply);\n+        req.sendResponseHeaders(401, -1);\n@@ -51,4 +61,5 @@\n-    void okReply (HttpTransaction req) throws IOException {\n-        req.setResponseEntityBody (\"Hello .\");\n-        req.sendResponse (200, \"Ok\");\n-        req.orderlyClose();\n+    private void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders(200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n@@ -57,1 +68,1 @@\n-    public void request (HttpTransaction req) {\n+    public void handle (HttpExchange req) {\n@@ -60,2 +71,4 @@\n-            authstring = req.getRequestHeader (\"Authorization\");\n-            System.out.println (authstring);\n+            if(req.getRequestHeaders().get(\"Authorization\") != null) {\n+                authstring = req.getRequestHeaders().get(\"Authorization\").get(0);\n+                System.out.println(authstring);\n+            }\n@@ -127,1 +140,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -130,0 +143,1 @@\n+        B4678055 b4678055 = new B4678055();\n@@ -135,1 +149,4 @@\n-            server = new TestHttpServer(new B4678055(), 1, 10, loopback, 0);\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", b4678055);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n@@ -139,1 +156,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -151,1 +168,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -164,1 +181,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -170,1 +187,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4678055.java","additions":42,"deletions":25,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/..\/sun\/net\/www\/httptest\/\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n+ * @library \/test\/lib\n@@ -34,2 +32,10 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.Executors;\n@@ -37,1 +43,6 @@\n-public class B4722333 implements HttpCallback {\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+\n+public class B4722333 implements HttpHandler {\n@@ -50,1 +61,1 @@\n-    public void request(HttpTransaction req) {\n+    public void handle(HttpExchange req) {\n@@ -53,3 +64,4 @@\n-                req.setResponseEntityBody(\"Hello .\");\n-                req.sendResponse(200, \"Ok\");\n-                req.orderlyClose();\n+                req.sendResponseHeaders(200, 0);\n+                try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+                    pw.print(\"Hello .\");\n+                }\n@@ -58,32 +70,28 @@\n-                  case 0:\n-                    req.addResponseHeader(\"Connection\", \"close\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Foo realm=\\\"bar\\\"\");\n-                    req.sendResponse(401, \"Unauthorized\");\n-                    req.orderlyClose();\n-                    break;\n-                  case 2:\n-                    req.addResponseHeader(\"Connection\", \"close\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Basic realm=\\\"foobar\\\" Foo realm=\\\"bar\\\"\");\n-                    req.sendResponse(401, \"Unauthorized\");\n-                    break;\n-                  case 4:\n-                    req.addResponseHeader(\"Connection\", \"close\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Digest realm=biz domain=\/foo nonce=thisisanonce \");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Basic realm=bizbar\");\n-                    req.sendResponse(401, \"Unauthorized\");\n-                    req.orderlyClose();\n-                    break;\n-                  case 6:\n-                    req.addResponseHeader(\"Connection\", \"close\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Digest realm=\\\"bizbar\\\" domain=\/biz nonce=\\\"hereisanonce\\\" Basic realm=\\\"foobar\\\" Foo realm=\\\"bar\\\"\");\n-                    req.sendResponse(401, \"Unauthorized\");\n-                    req.orderlyClose();\n-                    break;\n-                  case 8:\n-                    req.addResponseHeader(\"Connection\", \"close\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Foo p1=1 p2=2 p3=3 p4=4 p5=5 p6=6 p7=7 p8=8 p9=10 Digest realm=foobiz domain=\/foobiz nonce=newnonce\");\n-                    req.addResponseHeader(\"WWW-Authenticate\", \"Basic realm=bizbar\");\n-                    req.sendResponse(401, \"Unauthorized\");\n-                    req.orderlyClose();\n-                    break;\n+                    case 0:\n+                        req.getResponseHeaders().set(\"Connection\", \"close\");\n+                        req.getResponseHeaders().set(\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n+                        req.getResponseHeaders().add(\"WWW-Authenticate\", \"Foo realm=\\\"bar\\\"\");\n+                        req.sendResponseHeaders(401, -1);\n+                        break;\n+                    case 2:\n+                        req.getResponseHeaders().set(\"Connection\", \"close\");\n+                        req.getResponseHeaders().set(\"WWW-Authenticate\", \"Basic realm=\\\"foobar\\\" Foo realm=\\\"bar\\\"\");\n+                        req.sendResponseHeaders(401, -1);\n+                        break;\n+                    case 4:\n+                        req.getResponseHeaders().set(\"Connection\", \"close\");\n+                        req.getResponseHeaders().set(\"WWW-Authenticate\", \"Digest realm=biz domain=\/foo nonce=thisisanonce \");\n+                        req.getResponseHeaders().add(\"WWW-Authenticate\", \"Basic realm=bizbar\");\n+                        req.sendResponseHeaders(401, -1);\n+                        break;\n+                    case 6:\n+                        req.getResponseHeaders().set(\"Connection\", \"close\");\n+                        req.getResponseHeaders().set(\"WWW-Authenticate\", \"Digest realm=\\\"bizbar\\\" domain=\/biz nonce=\\\"hereisanonce\\\" Basic realm=\\\"foobar\\\" Foo realm=\\\"bar\\\"\");\n+                        req.sendResponseHeaders(401, -1);\n+                        break;\n+                    case 8:\n+                        req.getResponseHeaders().set(\"Connection\", \"close\");\n+                        req.getResponseHeaders().set(\"WWW-Authenticate\", \"Foo p1=1 p2=2 p3=3 p4=4 p5=5 p6=6 p7=7 p8=8 p9=10 Digest realm=foobiz domain=\/foobiz nonce=newnonce\");\n+                        req.getResponseHeaders().add(\"WWW-Authenticate\", \"Basic realm=bizbar\");\n+                        req.sendResponseHeaders(401, -1);\n+                        break;\n@@ -118,1 +126,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -121,0 +129,1 @@\n+        B4722333 b4722333 = new B4722333();\n@@ -125,7 +134,17 @@\n-            server = new TestHttpServer(new B4722333(), 1, 10, loopback, 0);\n-            System.out.println(\"Server started: listening on port: \" + server.getLocalPort());\n-            client(\"http:\/\/\" + server.getAuthority() + \"\/d1\/d2\/d3\/foo.html\");\n-            client(\"http:\/\/\" + server.getAuthority() + \"\/ASD\/d3\/x.html\");\n-            client(\"http:\/\/\" + server.getAuthority() + \"\/biz\/d3\/x.html\");\n-            client(\"http:\/\/\" + server.getAuthority() + \"\/bar\/d3\/x.html\");\n-            client(\"http:\/\/\" + server.getAuthority() + \"\/fuzz\/d3\/x.html\");\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", b4722333);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            System.out.println(\"Server started: listening on port: \" + server.getAddress().getPort());\n+            String serverURL = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(server.getAddress().getPort())\n+                    .path(\"\/\")\n+                    .build()\n+                    .toString();\n+            client(serverURL + \"d1\/d2\/d3\/foo.html\");\n+            client(serverURL + \"ASD\/d3\/x.html\");\n+            client(serverURL + \"biz\/d3\/x.html\");\n+            client(serverURL + \"bar\/d3\/x.html\");\n+            client(serverURL + \"fuzz\/d3\/x.html\");\n@@ -134,1 +153,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -142,1 +161,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -146,1 +165,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4722333.java","additions":73,"deletions":54,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/..\/sun\/net\/www\/httptest\/ \/test\/lib\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n+ * @library \/test\/lib\n@@ -35,2 +33,15 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.ProxySelector;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -39,1 +50,1 @@\n-public class B4759514 implements HttpCallback {\n+public class B4759514 implements HttpHandler {\n@@ -44,5 +55,4 @@\n-    void errorReply (HttpTransaction req, String reply) throws IOException {\n-        req.addResponseHeader (\"Connection\", \"close\");\n-        req.addResponseHeader (\"WWW-Authenticate\", reply);\n-        req.sendResponse (401, \"Unauthorized\");\n-        req.orderlyClose();\n+    void errorReply (HttpExchange req, String reply) throws IOException {\n+        req.getResponseHeaders().set(\"Connection\", \"close\");\n+        req.getResponseHeaders().set(\"WWW-Authenticate\", reply);\n+        req.sendResponseHeaders(401, -1);\n@@ -51,4 +61,5 @@\n-    void okReply (HttpTransaction req) throws IOException {\n-        req.setResponseEntityBody (\"Hello .\");\n-        req.sendResponse (200, \"Ok\");\n-        req.orderlyClose();\n+    void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders(200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n@@ -57,1 +68,1 @@\n-    public void request (HttpTransaction req) {\n+    public void handle (HttpExchange req) {\n@@ -59,1 +70,4 @@\n-            authstring = req.getRequestHeader (\"Authorization\");\n+            if(req.getRequestHeaders().get(\"Authorization\") != null) {\n+                authstring = req.getRequestHeaders().get(\"Authorization\").get(0);\n+                System.out.println(authstring);\n+            }\n@@ -68,1 +82,1 @@\n-                        req.sendResponse (400, \"Bad Request\");\n+                        req.sendResponseHeaders(400, -1);\n@@ -97,1 +111,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -100,0 +114,1 @@\n+        B4759514 b4759514 = new B4759514();\n@@ -105,1 +120,4 @@\n-            server = new TestHttpServer (new B4759514(), 1, 10, loopback, 0);\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", b4759514);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n@@ -107,6 +125,6 @@\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(server.getLocalPort())\n-                .path(\"\/\")\n-                .build()\n-                .toString();\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(server.getAddress().getPort())\n+                    .path(\"\/\")\n+                    .build()\n+                    .toString();\n@@ -117,1 +135,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -125,1 +143,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -129,1 +147,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4759514.java","additions":48,"deletions":30,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/..\/sun\/net\/www\/httptest\/ \/test\/lib\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n+ * @library \/test\/lib\n@@ -36,2 +34,15 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.ProxySelector;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -40,1 +51,1 @@\n-public class B4921848 implements HttpCallback {\n+public class B4921848 implements HttpHandler {\n@@ -44,1 +55,1 @@\n-    public void request (HttpTransaction req) {\n+    public void handle (HttpExchange req) {\n@@ -47,5 +58,4 @@\n-                req.addResponseHeader (\"Connection\", \"close\");\n-                req.addResponseHeader (\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n-                req.addResponseHeader (\"WWW-Authenticate\", \"Digest realm=\\\"bar\\\" domain=\/biz nonce=\\\"hereisanonce\\\"\");\n-                req.sendResponse (401, \"Unauthorized\");\n-                req.orderlyClose();\n+                req.getResponseHeaders().set(\"Connection\", \"close\");\n+                req.getResponseHeaders().add(\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n+                req.getResponseHeaders().add(\"WWW-Authenticate\", \"Digest realm=\\\"bar\\\" domain=\/biz nonce=\\\"hereisanonce\\\"\");\n+                req.sendResponseHeaders(401, -1);\n@@ -53,1 +63,1 @@\n-                String authheader = req.getRequestHeader (\"Authorization\");\n+                String authheader = req.getRequestHeaders().get(\"Authorization\").get(0);\n@@ -55,3 +65,4 @@\n-                    req.setResponseEntityBody (\"Hello .\");\n-                    req.sendResponse (200, \"Ok\");\n-                    req.orderlyClose();\n+                    req.sendResponseHeaders(200, 0);\n+                    try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+                        pw.print(\"Hello .\");\n+                    }\n@@ -59,2 +70,1 @@\n-                    req.sendResponse (400, \"Bad Request\");\n-                    req.orderlyClose();\n+                    req.sendResponseHeaders(400, -1);\n@@ -89,1 +99,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -92,0 +102,1 @@\n+        B4921848 b4921848 = new B4921848();\n@@ -97,1 +108,4 @@\n-            server = new TestHttpServer (new B4921848(), 1, 10, loopback, 0);\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", b4921848);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n@@ -101,1 +115,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -109,1 +123,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -113,1 +127,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -117,1 +131,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4921848.java","additions":39,"deletions":25,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library ..\/..\/..\/sun\/net\/www\/httptest \/test\/lib\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n- * @build HttpCallback HttpTransaction TestHttpServer B4933582\n+ *\n@@ -38,4 +38,24 @@\n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n-import sun.net.www.protocol.http.*;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.BindException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.ProxySelector;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -43,0 +63,2 @@\n+import sun.net.www.protocol.http.AuthCacheImpl;\n+import sun.net.www.protocol.http.AuthCacheValue;\n@@ -44,1 +66,1 @@\n-public class B4933582 implements HttpCallback {\n+public class B4933582 implements HttpHandler {\n@@ -49,5 +71,4 @@\n-    void errorReply (HttpTransaction req, String reply) throws IOException {\n-        req.addResponseHeader (\"Connection\", \"close\");\n-        req.addResponseHeader (\"WWW-Authenticate\", reply);\n-        req.sendResponse (401, \"Unauthorized\");\n-        req.orderlyClose();\n+    void errorReply (HttpExchange req, String reply) throws IOException {\n+        req.getResponseHeaders().set(\"Connection\", \"close\");\n+        req.getResponseHeaders().set(\"WWW-Authenticate\", reply);\n+        req.sendResponseHeaders(401, -1);\n@@ -56,4 +77,5 @@\n-    void okReply (HttpTransaction req) throws IOException {\n-        req.setResponseEntityBody (\"Hello .\");\n-        req.sendResponse (200, \"Ok\");\n-        req.orderlyClose();\n+    void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders(200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n@@ -64,1 +86,1 @@\n-    public void request (HttpTransaction req) {\n+    public void handle (HttpExchange req) {\n@@ -66,1 +88,4 @@\n-            authstring = req.getRequestHeader (\"Authorization\");\n+            if(req.getRequestHeaders().get(\"Authorization\") != null) {\n+                authstring = req.getRequestHeaders().get(\"Authorization\").get(0);\n+                System.out.println(authstring);\n+            }\n@@ -137,1 +162,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -140,0 +165,1 @@\n+        B4933582 b4933582 = new B4933582();\n@@ -146,2 +172,5 @@\n-            server = new TestHttpServer(new B4933582(), 1, 10, loopback, 0);\n-            cache = new CacheImpl (server.getLocalPort());\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", b4933582);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            cache = new CacheImpl (server.getAddress().getPort());\n@@ -152,1 +181,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -159,1 +188,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -174,2 +203,4 @@\n-                server = new TestHttpServer(new B4933582(), 1, 10,\n-                                            loopback, cache.getPort());\n+                server = HttpServer.create(new InetSocketAddress(loopback, cache.getPort()), 10);\n+                server.createContext(\"\/\", b4933582);\n+                server.setExecutor(Executors.newSingleThreadExecutor());\n+                server.start();\n@@ -194,1 +225,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -201,1 +232,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -212,1 +243,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4933582.java","additions":60,"deletions":29,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/..\/sun\/net\/www\/httptest\/\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n@@ -35,2 +32,10 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.Executors;\n@@ -38,1 +43,5 @@\n-public class B4962064 implements HttpCallback {\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+public class B4962064 implements HttpHandler {\n@@ -42,1 +51,1 @@\n-    public void request (HttpTransaction req) {\n+    public void handle (HttpExchange req) {\n@@ -46,4 +55,3 @@\n-                req.addResponseHeader (\"Connection\", \"close\");\n-                req.addResponseHeader (\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n-                req.sendResponse (401, \"Unauthorized\");\n-                req.orderlyClose();\n+                req.getResponseHeaders().set(\"Connection\", \"close\");\n+                req.getResponseHeaders().add(\"WWW-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n+                req.sendResponseHeaders(401, -1);\n@@ -53,3 +61,4 @@\n-                req.setResponseEntityBody (\"Hello .\");\n-                req.sendResponse (200, \"Ok\");\n-                req.orderlyClose();\n+                req.sendResponseHeaders(200, 0);\n+                try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+                    pw.print(\"Hello .\");\n+                }\n@@ -58,4 +67,3 @@\n-                req.addResponseHeader (\"Connection\", \"close\");\n-                req.addResponseHeader (\"Proxy-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n-                req.sendResponse (407, \"Proxy Authentication Required\");\n-                req.orderlyClose();\n+                req.getResponseHeaders().set(\"Connection\", \"close\");\n+                req.getResponseHeaders().add(\"Proxy-Authenticate\", \"Basic realm=\\\"foo\\\"\");\n+                req.sendResponseHeaders(407, -1);\n@@ -90,1 +98,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -94,0 +102,1 @@\n+        B4962064 b4962064 = new B4962064();\n@@ -100,2 +109,5 @@\n-            server = new TestHttpServer (new B4962064(), 1, 10, address, 0);\n-            int port = server.getLocalPort();\n+            server = HttpServer.create(new InetSocketAddress(address, 0), 10);\n+            server.createContext(\"\/\", b4962064);\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            int port = server.getAddress().getPort();\n@@ -118,1 +130,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -122,1 +134,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -126,1 +138,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4962064.java","additions":37,"deletions":25,"binary":false,"changes":62,"status":"modified"}]}