{"files":[{"patch":"@@ -2318,0 +2318,28 @@\n+  int latency = _current_latency[n->_idx];\n+\n+  \/\/ Insert in latency order (insertion sort)\n+  uint i;\n+  for ( i=0; i < _available.size(); i++ )\n+    if (_current_latency[_available[i]->_idx] > latency)\n+      break;\n+\n+  \/\/ Special Check for compares following branches\n+  if( n->is_Mach() && _scheduled.size() > 0 ) {\n+    int op = n->as_Mach()->ideal_Opcode();\n+    Node *last = _scheduled[0];\n+    if( last->is_MachIf() && last->in(1) == n &&\n+        ( op == Op_CmpI ||\n+          op == Op_CmpU ||\n+          op == Op_CmpUL ||\n+          op == Op_CmpP ||\n+          op == Op_CmpF ||\n+          op == Op_CmpD ||\n+          op == Op_CmpL ) ) {\n+\n+      \/\/ Recalculate position, moving to front of same latency\n+      for ( i=0 ; i < _available.size(); i++ )\n+        if (_current_latency[_available[i]->_idx] >= latency)\n+          break;\n+    }\n+  }\n+\n@@ -2319,1 +2347,1 @@\n-  _available.insert(_available.size(), n);\n+  _available.insert(i, n);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*                                                                              \n+ * Copyright (c) 2022, Loongson Technology. All rights reserved.                \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.                \n+ *                                                                              \n+ * This code is free software; you can redistribute it and\/or modify it         \n+ * under the terms of the GNU General Public License version 2 only, as         \n+ * published by the Free Software Foundation.                                   \n+ *                                                                              \n+ * This code is distributed in the hope that it will be useful, but WITHOUT     \n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        \n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License        \n+ * version 2 for more details (a copy is included in the LICENSE file that      \n+ * accompanied this code).                                                      \n+ *                                                                              \n+ * You should have received a copy of the GNU General Public License version    \n+ * 2 along with this work; if not, write to the Free Software Foundation,       \n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.                \n+ *                                                                              \n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA      \n+ * or visit www.oracle.com if you need additional information or have any       \n+ * questions.                                                                   \n+ *\/ \n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class InstructionScheduling {\n+    public static final int N = 20000;\n+    public static final double fval = 2.00;\n+    public static double[] D = new double[N];\n+    public static int[] I = new int[N];\n+\n+    @Benchmark\n+    public void testMethod(){\n+\tfor (int i=0; i<N; i++) {\n+\t   D[i] += D[i] * fval;\n+\t   D[i] += D[i] \/ fval;\n+\t   I[i] += I[i]*2;\n+\t   I[i] += I[i]\/2;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/InstructionScheduling.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}