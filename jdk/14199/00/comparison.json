{"files":[{"patch":"@@ -128,1 +128,1 @@\n-                MemorySessionImpl.toMemorySession(arena), null);\n+                MemorySessionImpl.toMemorySession(arena), cleanup);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -355,0 +356,14 @@\n+    @Test\n+    void testReinterpret() {\n+        AtomicInteger counter = new AtomicInteger();\n+        try (Arena arena = Arena.ofConfined()){\n+            \/\/ check size\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(100).byteSize(), 100);\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(100, Arena.ofAuto(), null).byteSize(), 100);\n+            \/\/ check scope and cleanup\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(100, arena, s -> counter.incrementAndGet()).scope(), arena.scope());\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(arena, s -> counter.incrementAndGet()).scope(), arena.scope());\n+        }\n+        assertEquals(counter.get(), 2);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}