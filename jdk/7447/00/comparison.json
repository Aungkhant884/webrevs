{"files":[{"patch":"@@ -65,0 +65,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerMethodHandlesLookupTest := jvm.lib\n@@ -83,0 +84,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerMethodHandlesLookupTest := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,5 @@\n-        return new Lookup(Reflection.getCallerClass());\n+        Class<?> c = Reflection.getCallerClass();\n+        if (c == null) {\n+            throw new IllegalCallerException();\n+        }\n+        return new Lookup(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8221530 8221642\n+ * @bug 8281003\n@@ -29,1 +29,1 @@\n- *          reflection API with null caller class\n+ *          MethodHandles::lookup with null caller class throws an IllegalCallerException.\n@@ -32,1 +32,1 @@\n- * @run main\/native CallerAccessTest\n+ * @run main\/native NullCallerMethodHandlesLookupTest\n@@ -46,1 +46,1 @@\n-public class CallerAccessTest {\n+public class NullCallerMethodHandlesLookupTest {\n@@ -48,1 +48,1 @@\n-        Path launcher = Paths.get(System.getProperty(\"test.nativepath\"), \"CallerAccessTest\");\n+        Path launcher = Paths.get(System.getProperty(\"test.nativepath\"), \"NullCallerMethodHandlesLookupTest\");\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerMethodHandlesLookup\/NullCallerMethodHandlesLookupTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"test\/jdk\/java\/lang\/reflect\/exeCallerAccessTest\/CallerAccessTest.java","status":"copied"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"jni.h\"\n+#include \"assert.h\"\n+\n+static jclass class_IllegalCallerException;\n+\n+int checkAndClearIllegalCallerExceptionThrown(JNIEnv *env) {\n+    jthrowable t = (*env)->ExceptionOccurred(env);\n+    if ((*env)->IsInstanceOf(env, t, class_IllegalCallerException) == JNI_TRUE) {\n+        (*env)->ExceptionClear(env);\n+        return JNI_TRUE;\n+    }\n+    return JNI_FALSE;\n+}\n+\n+int main(int argc, char** args) {\n+    JavaVM *jvm;\n+    JNIEnv *env;\n+    JavaVMInitArgs vm_args;\n+    JavaVMOption options[1];\n+    jint rc;\n+\n+\n+    vm_args.version = JNI_VERSION_1_2;\n+    vm_args.nOptions = 0;\n+    vm_args.options = options;\n+\n+    if ((rc = JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args)) != JNI_OK) {\n+        printf(\"ERROR: cannot create VM.\\n\");\n+        exit(-1);\n+    }\n+    class_IllegalCallerException = (*env)->FindClass(env, \"java\/lang\/IllegalCallerException\");\n+    assert (class_IllegalCallerException != NULL);\n+\n+    \/\/ call MethodHandles.lookup()\n+    jclass methodHandlesClass = (*env)->FindClass(env, \"java\/lang\/invoke\/MethodHandles\");\n+    assert(methodHandlesClass != NULL);\n+    jmethodID mid_MethodHandles_lookup = (*env)->GetStaticMethodID(env, methodHandlesClass, \"lookup\", \"()Ljava\/lang\/invoke\/MethodHandles$Lookup;\" );\n+    assert(mid_MethodHandles_lookup != NULL);\n+    jobject l = (*env)->CallStaticObjectMethod(env, methodHandlesClass, mid_MethodHandles_lookup );\n+    if ((rc = checkAndClearIllegalCallerExceptionThrown(env)) != JNI_TRUE) {\n+        printf(\"ERROR: Didn't get the expected IllegalCallerException.\\n\");\n+        exit(-1);\n+    }\n+\n+    printf(\"Expected IllegalCallerException was thrown\\n\");\n+\n+    (*jvm)->DestroyJavaVM(jvm);\n+    return 0;\n+}\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerMethodHandlesLookup\/exeNullCallerMethodHandlesLookupTest.c","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}