{"files":[{"patch":"@@ -65,1 +65,1 @@\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerMethodHandlesLookupTest := jvm.lib\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerLookupTest := jvm.lib\n@@ -84,1 +84,1 @@\n-  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerMethodHandlesLookupTest := -ljvm\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerLookupTest := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,0 +112,6 @@\n+     * In cases where {@code MethodHandles.lookup} is called from a context where\n+     * there is no caller frame on the stack (e.g when called directly\n+     * from a JNI attached thread), {@code IllegalCallerException} is thrown.\n+     * To obtain a {@link Lookup lookup object} in such a context, use an auxiliary class that will\n+     * implicitly be identified as the caller, or use {@link MethodHandles#publicLookup()}\n+     * to obtain a low-privileged lookup instead.\n@@ -115,0 +121,2 @@\n+     * @throws IllegalCallerException if there is no caller frame on the\n+     *         stack when called directly from a JNI attached thread\n@@ -119,1 +127,1 @@\n-        Class<?> c = Reflection.getCallerClass();\n+        final Class<?> c = Reflection.getCallerClass();\n@@ -121,1 +129,1 @@\n-            throw new IllegalCallerException();\n+            throw new IllegalCallerException(\"no caller frame\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8281003\n+ * @summary Test uses custom launcher that starts VM using JNI that verifies\n+ *          MethodHandles::lookup with null caller class throws an IllegalCallerException.\n+ * @library \/test\/lib\n+ * @requires os.family != \"aix\"\n+ * @run main\/native NullCallerLookupTest\n+ *\/\n+\n+\/\/ Test disabled on AIX since we cannot invoke the JVM on the primordial thread.\n+\n+import java.io.File;\n+import java.util.Map;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+public class NullCallerLookupTest {\n+    public static void main(String[] args) throws IOException {\n+        Path launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerLookupTest\");\n+        ProcessBuilder pb = new ProcessBuilder(launcher.toString());\n+        Map<String, String> env = pb.environment();\n+\n+        String libDir = Platform.libDir().toString();\n+        String vmDir = Platform.jvmLibDir().toString();\n+\n+        \/\/ set up shared library path\n+        String sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n+        env.compute(sharedLibraryPathEnvName,\n+                    (k, v) -> (v == null) ? libDir : v + File.pathSeparator + libDir);\n+        env.compute(sharedLibraryPathEnvName,\n+                    (k, v) -> (v == null) ? vmDir : v + File.pathSeparator + vmDir);\n+\n+        System.out.println(\"Launching: \" + launcher + \" shared library path: \" +\n+                           env.get(sharedLibraryPathEnvName));\n+        new OutputAnalyzer(pb.start())\n+                .outputTo(System.out)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerLookup\/NullCallerLookupTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerLookup\/exeNullCallerLookupTest.c","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerMethodHandlesLookup\/exeNullCallerMethodHandlesLookupTest.c","status":"renamed"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8281003\n- * @summary Test uses custom launcher that starts VM using JNI that verifies\n- *          MethodHandles::lookup with null caller class throws an IllegalCallerException.\n- * @library \/test\/lib\n- * @requires os.family != \"aix\"\n- * @run main\/native NullCallerMethodHandlesLookupTest\n- *\/\n-\n-\/\/ Test disabled on AIX since we cannot invoke the JVM on the primordial thread.\n-\n-import java.io.File;\n-import java.util.Map;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-public class NullCallerMethodHandlesLookupTest {\n-    public static void main(String[] args) throws IOException {\n-        Path launcher = Paths.get(System.getProperty(\"test.nativepath\"), \"NullCallerMethodHandlesLookupTest\");\n-        ProcessBuilder pb = new ProcessBuilder(launcher.toString());\n-        Map<String, String> env = pb.environment();\n-\n-        String libDir = Platform.libDir().toString();\n-        String vmDir = Platform.jvmLibDir().toString();\n-\n-        \/\/ set up shared library path\n-        String sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n-        env.compute(sharedLibraryPathEnvName,\n-                    (k, v) -> (v == null) ? libDir : v + File.pathSeparator + libDir);\n-        env.compute(sharedLibraryPathEnvName,\n-                    (k, v) -> (v == null) ? vmDir : v + File.pathSeparator + vmDir);\n-\n-        System.out.println(\"Launching: \" + launcher + \" shared library path: \" +\n-                           env.get(sharedLibraryPathEnvName));\n-        new OutputAnalyzer(pb.start())\n-                .outputTo(System.out)\n-                .errorTo(System.err)\n-                .shouldHaveExitValue(0);\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/exeNullCallerMethodHandlesLookup\/NullCallerMethodHandlesLookupTest.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}