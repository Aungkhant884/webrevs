{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @summary Tests CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_id\n+ * @summary Tests CompileCommand=ControlIntrinsic,*.*,+_id\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/ControlIntrinsicTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-            String vmOptionType = null;\n@@ -79,1 +78,0 @@\n-                vmOptionType = \"ccstrlist\";\n@@ -84,1 +82,1 @@\n-                    Scenario.Type.DIRECTIVE, vmOptionType, argument);\n+                    Scenario.Type.DIRECTIVE, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/jcmd\/PrintDirectivesTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                md, type, \"ccstrlist\", intrinsic_ids);\n+                md, type, intrinsic_ids);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/IntrinsicCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-            String vmOptionType = null;\n@@ -67,1 +66,0 @@\n-                vmOptionType = \"ccstrlist\";\n@@ -84,1 +82,1 @@\n-                cc = cmdGen.generateCompileCommand(cmd, md, null, vmOptionType, argument);\n+                cc = cmdGen.generateCompileCommand(cmd, md, null, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/MultiCommand.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+        \/\/ ControlIntrinsic output example:\n@@ -99,7 +100,1 @@\n-        if (cc.command == Command.INTRINSIC) {\n-            sb.append(\"ControlIntrinsic\");\n-        }\n-        else {\n-            sb.append(cc.command.name);\n-        }\n-\n+        sb.append(cc.command.name);\n@@ -112,7 +107,10 @@\n-            boolean initial = true;\n-            for (String id: cc.argument.split(\",\")) {\n-                if(!initial) {\n-                    sb.append(\" \");\n-                }\n-                else {\n-                    initial = false;\n+            if (cc.argument != null) {\n+                boolean initial = true;\n+                for (String id: cc.argument.split(\",\")) {\n+                    if(!initial) {\n+                        sb.append(\" \");\n+                    }\n+                    else {\n+                        initial = false;\n+                    }\n+                    sb.append(id);\n@@ -120,1 +118,0 @@\n-                sb.append(id);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/processors\/CommandProcessor.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    INTRINSIC(\"option\", \"\"),\n+    INTRINSIC(\"ControlIntrinsic\", \"\"),\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/Command.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,10 +45,6 @@\n-            if (cc.command != Command.INTRINSIC) {\n-                return cc.command.name + \" \"\n-                    + cc.methodDescriptor.getString();\n-            }\n-            else {\n-                return cc.command.name + \" \"\n-                    + cc.methodDescriptor.getString()\n-                    + \" ccstrlist \"\n-                    + \" ControlIntrinsic \"\n-                    + cc.argument;\n+            StringBuilder sb = new StringBuilder(cc.command.name);\n+            sb.append(\" \");\n+            sb.append(cc.methodDescriptor.getString());\n+            if (cc.argument != null) {\n+                sb.append(\" \");\n+                sb.append(cc.argument);\n@@ -56,0 +52,1 @@\n+            return sb.toString();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CommandFileBuilder.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -93,3 +93,1 @@\n-            MethodDescriptor md, Scenario.Type type, String vmOptionType, String argument) {\n-        Asserts.assertTrue(command == Command.INTRINSIC, \"only command INTRINSIC support argument\");\n-        Asserts.assertTrue(vmOptionType.equals(\"ccstrlist\"), \"vmOptionType should be consistent with globals.hpp\");\n+            MethodDescriptor md, Scenario.Type type, String argument) {\n@@ -99,1 +97,1 @@\n-        return type.createCompileCommand(command, md, generateCompiler(), vmOptionType, argument);\n+        return type.createCompileCommand(command, md, generateCompiler(), argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CommandGenerator.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import compiler.compilercontrol.share.method.MethodDescriptor;\n-\n@@ -32,0 +30,1 @@\n+import static compiler.compilercontrol.share.method.MethodDescriptor.Separator.COMMA;\n@@ -39,17 +38,7 @@\n-            if (cc.command != Command.INTRINSIC) {\n-                return \"-XX:CompileCommand=\"\n-                    + cc.command.name\n-                    + MethodDescriptor.Separator.COMMA.symbol\n-                    + cc.methodDescriptor.getString();\n-            }\n-            else {\n-                return \"-XX:CompileCommand=\"\n-                    + cc.command.name\n-                    + MethodDescriptor.Separator.COMMA.symbol\n-                    + cc.methodDescriptor.getString()\n-                    + MethodDescriptor.Separator.COMMA.symbol\n-                    + \"ccstrlist\"\n-                    + MethodDescriptor.Separator.COMMA.symbol\n-                    + \"ControlIntrinsic\"\n-                    + MethodDescriptor.Separator.COMMA.symbol\n-                    + cc.argument;\n+            StringBuilder sb = new StringBuilder(\"-XX:CompileCommand=\");\n+            sb.append(cc.command.name);\n+            sb.append(COMMA.symbol);\n+            sb.append(cc.methodDescriptor.getString());\n+            if (cc.argument != null) {\n+                sb.append(COMMA.symbol);\n+                sb.append(cc.argument);\n@@ -57,0 +46,1 @@\n+            return sb.toString();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CommandOptionsBuilder.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    public final String vmOptionType;\n@@ -47,1 +46,0 @@\n-        this.vmOptionType = null;\n@@ -55,1 +53,1 @@\n-                          String vmOptionType, String argument) {\n+                          String argument) {\n@@ -60,1 +58,0 @@\n-        this.vmOptionType = vmOptionType;\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CompileCommand.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-                       String vmOptionType,\n@@ -47,1 +46,1 @@\n-        super(command, methodDescriptor, compiler, type, vmOptionType, argument);\n+        super(command, methodDescriptor, compiler, type, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/JcmdCommand.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        OutputAnalyzer mainOuput = outputList.get(0);\n+        OutputAnalyzer mainOutput = outputList.get(0);\n@@ -115,2 +115,2 @@\n-            mainOuput.shouldHaveExitValue(0);\n-            processors.forEach(processor -> processor.accept(mainOuput));\n+            mainOutput.shouldHaveExitValue(0);\n+            processors.forEach(processor -> processor.accept(mainOutput));\n@@ -122,3 +122,8 @@\n-            Asserts.assertNE(mainOuput.getExitValue(), 0, \"VM should exit with \"\n-                    + \"error for incorrect directives\");\n-            mainOuput.shouldContain(\"Parsing of compiler directives failed\");\n+            \/\/ two cases for invalid inputs.\n+            if (mainOutput.getExitValue() == 0) {\n+                mainOutput.shouldContain(\"CompileCommand: An error occurred during parsing\");\n+            } else {\n+                Asserts.assertNE(mainOutput.getExitValue(), 0, \"VM should exit with \"\n+                        + \"error for incorrect directives\");\n+                mainOutput.shouldContain(\"Parsing of compiler directives failed\");\n+            }\n@@ -180,1 +185,1 @@\n-                    MethodDescriptor md, Compiler compiler, String vmOptionType, String argument) {\n+                    MethodDescriptor md, Compiler compiler, String argument) {\n@@ -182,1 +187,1 @@\n-                        JcmdType.ADD, vmOptionType, argument);\n+                        JcmdType.ADD, argument);\n@@ -194,2 +199,2 @@\n-                MethodDescriptor md, Compiler compiler, String vmOptionType, String argument) {\n-            return new CompileCommand(command, md, compiler, this, vmOptionType, argument);\n+                MethodDescriptor md, Compiler compiler, String argument) {\n+            return new CompileCommand(command, md, compiler, this, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/Scenario.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}