{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.compilercontrol.share.scenario.Command;\n@@ -92,4 +93,33 @@\n-    private String getOutputString(CompileCommand command) {\n-        return \"CompileCommand: \"\n-                + command.command.name + \" \"\n-                + command.methodDescriptor.getCanonicalString();\n+    \/\/ the output here must match hotspot compilerOracle.cpp::register_command\n+    \/\/    tty->print(\"CompileCommand: %s \", option2name(option));\n+    \/\/    matcher->print();\n+    private String getOutputString(CompileCommand cc) {\n+        StringBuilder sb = new StringBuilder(\"CompileCommand: \");\n+        \/\/ CompileCommand: ControlIntrinsic *Klass.-()V const char* ControlIntrinsic = '+_newArray -_minF +_copyOf'\n+        if (cc.command == Command.INTRINSIC) {\n+            sb.append(\"ControlIntrinsic\");\n+        }\n+        else {\n+            sb.append(cc.command.name);\n+        }\n+\n+        sb.append(\" \");\n+        sb.append(cc.methodDescriptor.getCanonicalString());\n+        if (cc.command == Command.INTRINSIC) {\n+            sb.append(\" const char* \");\n+            sb.append(\"ControlIntrinsic = '\");\n+\n+            boolean initial = true;\n+            for (String id: cc.argument.split(\",\")) {\n+                if(!initial) {\n+                    sb.append(\" \");\n+                }\n+                else {\n+                    initial = false;\n+                }\n+                sb.append(id);\n+            }\n+            sb.append(\"'\");\n+        }\n+\n+        return sb.toString();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/processors\/CommandProcessor.java","additions":35,"deletions":5,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putChar,ccstrlist,ControlIntrinsic,-_getCharVolatile,-_getInt\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putCharVolatile,ccstrlist,ControlIntrinsic,-_getIntVolatile\n+ *                   -XX:CompileCommand=ControlIntrinsic,jdk.internal.misc.Unsafe::putChar,-_getCharVolatile,-_getInt\n+ *                   -XX:CompileCommand=ControlIntrinsic,jdk.internal.misc.Unsafe::putCharVolatile,-_getIntVolatile\n@@ -56,4 +56,4 @@\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putChar,ccstrlist,ControlIntrinsic,+_getCharVolatile,+_getInt\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putCharVolatile,ccstrlist,ControlIntrinsic,+_getIntVolatile\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putChar,ccstrlist,DisableIntrinsic,_getCharVolatile,_getInt\n- *                   -XX:CompileCommand=option,jdk.internal.misc.Unsafe::putCharVolatile,ccstrlist,DisableIntrinsic,_getIntVolatile\n+ *                   -XX:CompileCommand=ControlIntrinsic,jdk.internal.misc.Unsafe::putChar,+_getCharVolatile,+_getInt\n+ *                   -XX:CompileCommand=ControlIntrinsic,jdk.internal.misc.Unsafe::putCharVolatile,+_getIntVolatile\n+ *                   -XX:CompileCommand=DisableIntrinsic,jdk.internal.misc.Unsafe::putChar,_getCharVolatile,_getInt\n+ *                   -XX:CompileCommand=DisableIntrinsic,jdk.internal.misc.Unsafe::putCharVolatile,_getIntVolatile\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/IntrinsicDisabledTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}