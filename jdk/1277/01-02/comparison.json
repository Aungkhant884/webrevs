{"files":[{"patch":"@@ -41,1 +41,1 @@\n-@Warmup(iterations = 5)\n+@Warmup(iterations = 2)\n@@ -43,0 +43,1 @@\n+@BenchmarkMode(Mode.AverageTime)\n@@ -46,1 +47,1 @@\n-    static char[] pass = \"changeit\".toCharArray();\n+    private static final char[] PASS = \"changeit\".toCharArray();\n@@ -48,7 +49,2 @@\n-    Key pk;\n-    Certificate[] certs;\n-    byte[] bw2048;\n-    byte[] bw50000;\n-    byte[] bs50000;\n-    byte[] bs10000;\n-    byte[] bs2048;\n+    private Key pk;\n+    private Certificate[] certs;\n@@ -56,0 +52,8 @@\n+    \/\/ Several pkcs12 keystores in byte arrays\n+    private byte[] bw2048;\n+    private byte[] bw50000;     \/\/ Default old\n+    private byte[] bs50000;\n+    private byte[] bs10000;     \/\/ Default new\n+    private byte[] bs2048;\n+\n+    \/\/ Decodes HEX string to byte array\n@@ -83,1 +87,1 @@\n-        bw50000 = outweak50000();\n+        bw50000 = outweak50000_Old();\n@@ -85,1 +89,1 @@\n-        bs10000 = outstrong10000();\n+        bs10000 = outstrong10000_New();\n@@ -89,0 +93,31 @@\n+    \/\/ Reads in a pkcs12 keystore\n+    private KeyStore in(byte[] b) throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(new ByteArrayInputStream(b), PASS);\n+        if (!ks.getCertificate(\"a\").getPublicKey().getAlgorithm().equals(\n+                ks.getKey(\"a\", PASS).getAlgorithm())) {\n+            throw new RuntimeException(\"Not same alg\");\n+        }\n+        return ks;\n+    }\n+\n+    \/\/ Generates a pkcs12 keystore with the specified algorithm\/ic\n+    private byte[] out(String cAlg, String cIc, String kAlg, String kIc,\n+                      String mAlg, String mIc) throws Exception {\n+        System.setProperty(\"keystore.pkcs12.certProtectionAlgorithm\", cAlg);\n+        System.setProperty(\"keystore.pkcs12.certPbeIterationCount\", cIc);\n+        System.setProperty(\"keystore.pkcs12.keyProtectionAlgorithm\", kAlg);\n+        System.setProperty(\"keystore.pkcs12.keyPbeIterationCount\", kIc);\n+        System.setProperty(\"keystore.pkcs12.macAlgorithm\", mAlg);\n+        System.setProperty(\"keystore.pkcs12.macIterationCount\", mIc);\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n+        ks.setKeyEntry(\"a\", pk, PASS, certs);\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ks.store(bout, PASS);\n+        return bout.toByteArray();\n+    }\n+\n+    \/\/ Benchmark methods start here:\n+\n+    \/\/ Reading a keystore\n@@ -93,0 +128,1 @@\n+\n@@ -94,1 +130,1 @@\n-    public KeyStore inweak50000() throws Exception {\n+    public KeyStore inweak50000_Old() throws Exception {\n@@ -97,0 +133,1 @@\n+\n@@ -101,0 +138,1 @@\n+\n@@ -102,1 +140,1 @@\n-    public KeyStore instrong10000() throws Exception {\n+    public KeyStore instrong10000_New() throws Exception {\n@@ -105,0 +143,1 @@\n+\n@@ -110,10 +149,1 @@\n-    private KeyStore in(byte[] b) throws Exception {\n-        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n-        ks.load(new ByteArrayInputStream(b), pass);\n-        if (!ks.getCertificate(\"a\").getPublicKey().getAlgorithm().equals(\n-                ks.getKey(\"a\", pass).getAlgorithm())) {\n-            throw new RuntimeException(\"Not same alg\");\n-        }\n-        return ks;\n-    }\n-\n+    \/\/ Writing a keystore\n@@ -128,1 +158,1 @@\n-    public byte[] outweak50000() throws Exception {\n+    public byte[] outweak50000_Old() throws Exception {\n@@ -132,0 +162,1 @@\n+                \/\/ Attention: 100000 is old default Mac ic\n@@ -139,0 +170,1 @@\n+                \/\/ Attention: 100000 is old default Mac ic\n@@ -142,1 +174,1 @@\n-    public byte[] outstrong10000() throws Exception {\n+    public byte[] outstrong10000_New() throws Exception {\n@@ -154,17 +186,0 @@\n-\n-    \/\/ Create a keystore\n-    private byte[] out(String cAlg, String cIc, String kAlg, String kIc,\n-                      String mAlg, String mIc) throws Exception {\n-        System.setProperty(\"keystore.pkcs12.certProtectionAlgorithm\", cAlg);\n-        System.setProperty(\"keystore.pkcs12.certPbeIterationCount\", cIc);\n-        System.setProperty(\"keystore.pkcs12.keyProtectionAlgorithm\", kAlg);\n-        System.setProperty(\"keystore.pkcs12.keyPbeIterationCount\", kIc);\n-        System.setProperty(\"keystore.pkcs12.macAlgorithm\", mAlg);\n-        System.setProperty(\"keystore.pkcs12.macIterationCount\", mIc);\n-        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n-        ks.load(null, null);\n-        ks.setKeyEntry(\"a\", pk, pass, certs);\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        ks.store(bout, pass);\n-        return bout.toByteArray();\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/PKCS12KeyStores.java","additions":57,"deletions":42,"binary":false,"changes":99,"status":"modified"}]}