{"files":[{"patch":"@@ -33,7 +33,2 @@\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n+\n+import org.openjdk.jmh.annotations.*;\n@@ -44,1 +39,1 @@\n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n@@ -53,7 +48,7 @@\n-    static Key pk;\n-    static Certificate[] certs;\n-    static byte[] bw2048;\n-    static byte[] bw50000;\n-    static byte[] bs50000;\n-    static byte[] bs10000;\n-    static byte[] bs2048;\n+    Key pk;\n+    Certificate[] certs;\n+    byte[] bw2048;\n+    byte[] bw50000;\n+    byte[] bs50000;\n+    byte[] bs10000;\n+    byte[] bs2048;\n@@ -65,30 +60,27 @@\n-    static {\n-        try {\n-            \/\/ Just generate a keypair and dump getEncoded() of key and cert.\n-            byte[] x1 = xeh(\"3041020100301306072A8648CE3D020106082A8648CE3D03\" +\n-                    \"0107042730250201010420B561D1FBE150488508BBE8FF4540F09057\" +\n-                    \"58712F5D2D3CC80F9A15BA5D481117\");\n-            byte[] x2 = xeh(\"3082012D3081D5A00302010202084EE6ECC5585640A7300A\" +\n-                    \"06082A8648CE3D040302300C310A30080603550403130161301E170D\" +\n-                    \"3230313131373230343730355A170D3233303831343230343730355A\" +\n-                    \"300C310A300806035504031301613059301306072A8648CE3D020106\" +\n-                    \"082A8648CE3D030107034200041E761F511841602E272B40A021995D\" +\n-                    \"1BD828DDC7F71412D6A66CC0CB858C856D32C58273E494676D1D2B05\" +\n-                    \"B8E9B08207A122265C2AA5FCBDCE19E5E88CA7A1B6A321301F301D06\" +\n-                    \"03551D0E04160414173F278D77096E5C8EA182D12F147694587B5D9A\" +\n-                    \"300A06082A8648CE3D04030203470030440220760CEAF1FA7041CB8C\" +\n-                    \"1CA80AF60E4F9C9D5136D96B2AF0AAA9440F79561C44E502205D5C72\" +\n-                    \"886C92B95A681C4393C67AAEC8DA9FD7910FF9BF2BCB721AE71D1B6F88\");\n-            KeyFactory kf = KeyFactory.getInstance(\"EC\");\n-            pk = kf.generatePrivate(new PKCS8EncodedKeySpec(x1));\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            certs = new Certificate[] { cf.generateCertificate(new ByteArrayInputStream(x2)) };\n-\n-            bw2048 = genweak2048();\n-            bw50000 = genweak50000();\n-            bs50000 = genstrong50000();\n-            bs10000 = genstrong10000();\n-            bs2048 = genstrong2048();\n-        } catch (Exception e) {\n-            throw new AssertionError(e);\n-        }\n+    @Setup\n+    public void setup() throws Exception {\n+        \/\/ Just generate a keypair and dump getEncoded() of key and cert.\n+        byte[] x1 = xeh(\"3041020100301306072A8648CE3D020106082A8648CE3D03\" +\n+                \"0107042730250201010420B561D1FBE150488508BBE8FF4540F09057\" +\n+                \"58712F5D2D3CC80F9A15BA5D481117\");\n+        byte[] x2 = xeh(\"3082012D3081D5A00302010202084EE6ECC5585640A7300A\" +\n+                \"06082A8648CE3D040302300C310A30080603550403130161301E170D\" +\n+                \"3230313131373230343730355A170D3233303831343230343730355A\" +\n+                \"300C310A300806035504031301613059301306072A8648CE3D020106\" +\n+                \"082A8648CE3D030107034200041E761F511841602E272B40A021995D\" +\n+                \"1BD828DDC7F71412D6A66CC0CB858C856D32C58273E494676D1D2B05\" +\n+                \"B8E9B08207A122265C2AA5FCBDCE19E5E88CA7A1B6A321301F301D06\" +\n+                \"03551D0E04160414173F278D77096E5C8EA182D12F147694587B5D9A\" +\n+                \"300A06082A8648CE3D04030203470030440220760CEAF1FA7041CB8C\" +\n+                \"1CA80AF60E4F9C9D5136D96B2AF0AAA9440F79561C44E502205D5C72\" +\n+                \"886C92B95A681C4393C67AAEC8DA9FD7910FF9BF2BCB721AE71D1B6F88\");\n+        KeyFactory kf = KeyFactory.getInstance(\"EC\");\n+        pk = kf.generatePrivate(new PKCS8EncodedKeySpec(x1));\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        certs = new Certificate[]{cf.generateCertificate(new ByteArrayInputStream(x2))};\n+\n+        bw2048 = outweak2048();\n+        bw50000 = outweak50000();\n+        bs50000 = outstrong50000();\n+        bs10000 = outstrong10000();\n+        bs2048 = outstrong2048();\n@@ -118,1 +110,1 @@\n-    static KeyStore in(byte[] b) throws Exception {\n+    private KeyStore in(byte[] b) throws Exception {\n@@ -130,4 +122,0 @@\n-        return genweak2048();\n-    }\n-\n-    private static byte[] genweak2048() throws Exception {\n@@ -141,4 +129,0 @@\n-        return genweak50000();\n-    }\n-\n-    private static byte[] genweak50000() throws Exception {\n@@ -152,4 +136,0 @@\n-        return genstrong50000();\n-    }\n-\n-    private static byte[] genstrong50000() throws Exception {\n@@ -163,4 +143,0 @@\n-        return genstrong10000();\n-    }\n-\n-    private static byte[] genstrong10000() throws Exception {\n@@ -174,4 +150,0 @@\n-        return genstrong2048();\n-    }\n-\n-    private static byte[] genstrong2048() throws Exception {\n@@ -184,1 +156,1 @@\n-    private static byte[] out(String cAlg, String cIc, String kAlg, String kIc,\n+    private byte[] out(String cAlg, String cIc, String kAlg, String kIc,\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/PKCS12KeyStores.java","additions":39,"deletions":67,"binary":false,"changes":106,"status":"modified"}]}