{"files":[{"patch":"@@ -374,1 +374,1 @@\n-    HeapWord* aligned_top = align_up(top, BOTConstants::bot_card_size_bytes());\n+    HeapWord* aligned_top = align_up(top, BOTConstants::card_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  return (delta & right_n_bits((int)BOTConstants::log_bot_card_size_words())) == (size_t)NoBits;\n+  return (delta & right_n_bits((int)BOTConstants::log_card_size_in_words())) == (size_t)NoBits;\n@@ -60,1 +60,1 @@\n-  assert((index) < (_reserved.word_size() >> BOTConstants::log_bot_card_size_words()),\n+  assert((index) < (_reserved.word_size() >> BOTConstants::log_card_size_in_words()),\n@@ -62,1 +62,1 @@\n-         msg, (index), (_reserved.word_size() >> BOTConstants::log_bot_card_size_words()));\n+         msg, (index), (_reserved.word_size() >> BOTConstants::log_card_size_in_words()));\n@@ -144,1 +144,1 @@\n-  assert(end ==_bot->address_for_index(end_card)+BOTConstants::bot_card_size_words(), \"Precondition\");\n+  assert(end ==_bot->address_for_index(end_card)+BOTConstants::card_size_in_words(), \"Precondition\");\n@@ -156,1 +156,1 @@\n-  assert(_bot->offset_array(start_card-1) <= BOTConstants::bot_card_size_words(),\n+  assert(_bot->offset_array(start_card-1) <= BOTConstants::card_size_in_words(),\n@@ -165,1 +165,1 @@\n-    offset = BOTConstants::bot_card_size_words() + i;\n+    offset = BOTConstants::card_size_in_words() + i;\n@@ -186,1 +186,1 @@\n-  guarantee(_bot->offset_array(start_card) == BOTConstants::bot_card_size_words(), \"Wrong value in second card\");\n+  guarantee(_bot->offset_array(start_card) == BOTConstants::card_size_in_words(), \"Wrong value in second card\");\n@@ -190,1 +190,1 @@\n-      guarantee(entry > BOTConstants::bot_card_size_words(),\n+      guarantee(entry > BOTConstants::card_size_in_words(),\n@@ -195,1 +195,1 @@\n-                (uint)entry, (uint)_bot->offset_array(c), BOTConstants::bot_card_size_words());\n+                (uint)entry, (uint)_bot->offset_array(c), BOTConstants::card_size_in_words());\n@@ -208,1 +208,1 @@\n-      guarantee(_bot->offset_array(landing_card) <= BOTConstants::bot_card_size_words(),\n+      guarantee(_bot->offset_array(landing_card) <= BOTConstants::card_size_in_words(),\n@@ -211,1 +211,1 @@\n-                (uint)_bot->offset_array(landing_card), (uint)BOTConstants::bot_card_size_words());\n+                (uint)_bot->offset_array(landing_card), (uint)BOTConstants::card_size_in_words());\n@@ -236,1 +236,1 @@\n-  assert(pointer_delta(threshold, blk_start) <= BOTConstants::bot_card_size_words(),\n+  assert(pointer_delta(threshold, blk_start) <= BOTConstants::card_size_in_words(),\n@@ -242,1 +242,1 @@\n-  assert(threshold == _bot->_reserved.start() + index*BOTConstants::bot_card_size_words(),\n+  assert(threshold == _bot->_reserved.start() + index*BOTConstants::card_size_in_words(),\n@@ -262,1 +262,1 @@\n-    HeapWord* rem_end = _bot->address_for_index(end_index) + BOTConstants::bot_card_size_words();\n+    HeapWord* rem_end = _bot->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -269,1 +269,1 @@\n-  threshold = _bot->address_for_index(end_index) + BOTConstants::bot_card_size_words();\n+  threshold = _bot->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -280,1 +280,1 @@\n-         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) <= BOTConstants::bot_card_size_words()),\n+         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) <= BOTConstants::card_size_in_words()),\n@@ -290,1 +290,1 @@\n-             (u_char) (BOTConstants::bot_card_size_words()+BOTConstants::N_powers-1),\n+             (u_char) (BOTConstants::card_size_in_words()+BOTConstants::N_powers-1),\n@@ -295,1 +295,1 @@\n-           (uint) (BOTConstants::bot_card_size_words()+BOTConstants::N_powers-1));\n+           (uint) (BOTConstants::card_size_in_words() + BOTConstants::N_powers - 1));\n@@ -309,1 +309,1 @@\n-    if (entry < BOTConstants::bot_card_size_words()) {\n+    if (entry < BOTConstants::card_size_in_words()) {\n@@ -373,1 +373,1 @@\n-  _next_offset_threshold = _hr->bottom() + BOTConstants::bot_card_size_words();\n+  _next_offset_threshold = _hr->bottom() + BOTConstants::card_size_in_words();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    assert(offset <= BOTConstants::bot_card_size_words(),\n+    assert(offset <= BOTConstants::card_size_in_words(),\n@@ -60,1 +60,1 @@\n-           msg, offset, BOTConstants::bot_card_size_words());\n+           msg, offset, BOTConstants::card_size_in_words());\n@@ -83,1 +83,1 @@\n-    size_t number_of_slots = (mem_region_words \/ BOTConstants::bot_card_size_words());\n+    size_t number_of_slots = (mem_region_words \/ BOTConstants::card_size_in_words());\n@@ -89,1 +89,1 @@\n-    return BOTConstants::bot_card_size_bytes();\n+    return BOTConstants::card_size();\n@@ -105,1 +105,1 @@\n-    return _reserved.start() + (index << BOTConstants::log_bot_card_size_words());\n+    return _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  HeapWord* threshold = card_boundary + BOTConstants::bot_card_size_words();\n+  HeapWord* threshold = card_boundary + BOTConstants::card_size_in_words();\n@@ -87,1 +87,1 @@\n-  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> BOTConstants::log_bot_card_size();\n+  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> BOTConstants::log_card_size();\n@@ -125,1 +125,1 @@\n-  while (offset >= BOTConstants::bot_card_size_words()) {\n+  while (offset >= BOTConstants::card_size_in_words()) {\n@@ -129,1 +129,1 @@\n-    q -= (BOTConstants::bot_card_size_words() * n_cards_back);\n+    q -= (BOTConstants::card_size_in_words() * n_cards_back);\n@@ -133,1 +133,1 @@\n-  assert(offset < BOTConstants::bot_card_size_words(), \"offset too large\");\n+  assert(offset < BOTConstants::card_size_in_words(), \"offset too large\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -811,1 +811,1 @@\n-    HeapWord* scan_end = MIN2(card_start + (num_cards << BOTConstants::log_bot_card_size_words()), top);\n+    HeapWord* scan_end = MIN2(card_start + (num_cards << BOTConstants::log_card_size_in_words()), top);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-uint ObjectStartArray::_block_shift = 0;\n-uint ObjectStartArray::_block_size = 0;\n-uint ObjectStartArray::_block_size_in_words = 0;\n+uint ObjectStartArray::_card_shift = 0;\n+uint ObjectStartArray::_card_size = 0;\n+uint ObjectStartArray::_card_size_in_words = 0;\n@@ -39,3 +39,3 @@\n-  _block_shift = card_shift;\n-  _block_size = 1 << _block_shift;\n-  _block_size_in_words = _block_size \/ sizeof(HeapWord);\n+  _card_shift = card_shift;\n+  _card_size = 1 << _card_shift;\n+  _card_size_in_words = _card_size \/ sizeof(HeapWord);\n@@ -47,2 +47,2 @@\n-  assert((int)_block_size == (int)(CardTable::card_size()), \"Sanity\");\n-  assert(_block_size <= MaxBlockSize, \"block_size must be less than or equal to \" UINT32_FORMAT, MaxBlockSize);\n+  assert((int)_card_size == (int)(CardTable::card_size()), \"Sanity\");\n+  assert(_card_size <= MaxBlockSize, \"block_size must be less than or equal to \" UINT32_FORMAT, MaxBlockSize);\n@@ -53,1 +53,1 @@\n-  size_t bytes_to_reserve = reserved_region.word_size() \/ _block_size_in_words;\n+  size_t bytes_to_reserve = reserved_region.word_size() \/ _card_size_in_words;\n@@ -81,1 +81,1 @@\n-  _offset_base = _raw_base - (size_t(reserved_region.start()) >> _block_shift);\n+  _offset_base = _raw_base - (size_t(reserved_region.start()) >> _card_shift);\n@@ -96,2 +96,2 @@\n-  assert((uintptr_t(low_bound)  & (_block_size - 1))  == 0, \"heap must start at block boundary\");\n-  assert((uintptr_t(high_bound) & (_block_size - 1))  == 0, \"heap must end at block boundary\");\n+  assert((uintptr_t(low_bound)  & (_card_size - 1))  == 0, \"heap must start at block boundary\");\n+  assert((uintptr_t(high_bound) & (_card_size - 1))  == 0, \"heap must end at block boundary\");\n@@ -99,1 +99,1 @@\n-  size_t requested_blocks_size_in_bytes = mr.word_size() \/ _block_size_in_words;\n+  size_t requested_blocks_size_in_bytes = mr.word_size() \/ _card_size_in_words;\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,3 +49,3 @@\n-  static uint _block_shift;\n-  static uint _block_size;\n-  static uint _block_size_in_words;\n+  static uint _card_shift;\n+  static uint _card_size;\n+  static uint _card_size_in_words;\n@@ -67,2 +67,2 @@\n-  static uint block_shift() {\n-    return _block_shift;\n+  static uint card_shift() {\n+    return _card_shift;\n@@ -71,2 +71,2 @@\n-  static uint block_size() {\n-    return _block_size;\n+  static uint card_size() {\n+    return _card_size;\n@@ -74,2 +74,2 @@\n-  static uint block_size_in_words() {\n-    return _block_size_in_words;\n+  static uint card_size_in_words() {\n+    return _card_size_in_words;\n@@ -84,1 +84,1 @@\n-    jbyte* result = &_offset_base[uintptr_t(p) >> _block_shift];\n+    jbyte* result = &_offset_base[uintptr_t(p) >> _card_shift];\n@@ -95,1 +95,1 @@\n-    HeapWord* result = (HeapWord*) (delta << _block_shift);\n+    HeapWord* result = (HeapWord*) (delta << _card_shift);\n@@ -118,1 +118,1 @@\n-    HeapWord* result = (HeapWord*) (delta << _block_shift);\n+    HeapWord* result = (HeapWord*) (delta << _card_shift);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  assert((block_word_size % (ObjectStartArray::block_size())) == 0,\n+  assert((block_word_size % (ObjectStartArray::card_size())) == 0,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,4 +36,4 @@\n-uint BOTConstants::_log_bot_card_size = 0;\n-uint BOTConstants::_log_bot_card_size_words = 0;\n-uint BOTConstants::_bot_card_size_bytes = 0;\n-uint BOTConstants::_bot_card_size_words = 0;\n+uint BOTConstants::_log_card_size = 0;\n+uint BOTConstants::_log_card_size_in_words = 0;\n+uint BOTConstants::_card_size = 0;\n+uint BOTConstants::_card_size_in_words = 0;\n@@ -42,4 +42,4 @@\n-  _log_bot_card_size =  card_shift;\n-  _log_bot_card_size_words = _log_bot_card_size - LogHeapWordSize;\n-  _bot_card_size_bytes = 1 << _log_bot_card_size;\n-  _bot_card_size_words = 1 << _log_bot_card_size_words;\n+  _log_card_size =  card_shift;\n+  _log_card_size_in_words = _log_card_size - LogHeapWordSize;\n+  _card_size = 1 << _log_card_size;\n+  _card_size_in_words = 1 << _log_card_size_in_words;\n@@ -102,1 +102,1 @@\n-  return (delta & right_n_bits((int)BOTConstants::log_bot_card_size_words())) == (size_t)NoBits;\n+  return (delta & right_n_bits((int)BOTConstants::log_card_size_in_words())) == (size_t)NoBits;\n@@ -119,1 +119,1 @@\n-    set_remainder_to_point_to_start(mr.start() + BOTConstants::bot_card_size_words(), mr.end());\n+    set_remainder_to_point_to_start(mr.start() + BOTConstants::card_size_in_words(), mr.end());\n@@ -175,1 +175,1 @@\n-  assert(end ==_array->address_for_index(end_card)+BOTConstants::bot_card_size_words(), \"Precondition\");\n+  assert(end ==_array->address_for_index(end_card)+BOTConstants::card_size_in_words(), \"Precondition\");\n@@ -191,1 +191,1 @@\n-  assert(_array->offset_array(start_card-1) <= BOTConstants::bot_card_size_words(),\n+  assert(_array->offset_array(start_card-1) <= BOTConstants::card_size_in_words(),\n@@ -200,1 +200,1 @@\n-    offset = BOTConstants::bot_card_size_words() + i;\n+    offset = BOTConstants::card_size_in_words() + i;\n@@ -221,2 +221,2 @@\n-  guarantee(_array->offset_array(start_card) == BOTConstants::bot_card_size_words(), \"Wrong value in second card\");\n-  u_char last_entry = BOTConstants::bot_card_size_words();\n+  guarantee(_array->offset_array(start_card) == BOTConstants::card_size_in_words(), \"Wrong value in second card\");\n+  u_char last_entry = BOTConstants::card_size_in_words();\n@@ -227,1 +227,1 @@\n-      guarantee(entry > BOTConstants::bot_card_size_words(), \"Should be in logarithmic region\");\n+      guarantee(entry > BOTConstants::card_size_in_words(), \"Should be in logarithmic region\");\n@@ -237,1 +237,1 @@\n-      guarantee(_array->offset_array(landing_card) <= BOTConstants::bot_card_size_words(), \"Offset value\");\n+      guarantee(_array->offset_array(landing_card) <= BOTConstants::card_size_in_words(), \"Offset value\");\n@@ -269,1 +269,1 @@\n-  clear_bits(boundary_before_end, right_n_bits((int)BOTConstants::log_bot_card_size()));\n+  clear_bits(boundary_before_end, right_n_bits((int)BOTConstants::log_card_size()));\n@@ -282,1 +282,1 @@\n-      boundary += BOTConstants::bot_card_size_words();\n+      boundary += BOTConstants::card_size_in_words();\n@@ -299,2 +299,2 @@\n-          HeapWord* rem_st = _array->address_for_index(start_index) + BOTConstants::bot_card_size_words();\n-          HeapWord* rem_end = _array->address_for_index(end_index) + BOTConstants::bot_card_size_words();\n+          HeapWord* rem_st = _array->address_for_index(start_index) + BOTConstants::card_size_in_words();\n+          HeapWord* rem_end = _array->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -383,1 +383,1 @@\n-  while (offset > BOTConstants::bot_card_size_words()) {\n+  while (offset > BOTConstants::card_size_in_words()) {\n@@ -387,1 +387,1 @@\n-    q -= (BOTConstants::bot_card_size_words() * n_cards_back);\n+    q -= (BOTConstants::card_size_in_words() * n_cards_back);\n@@ -392,1 +392,1 @@\n-  while (offset == BOTConstants::bot_card_size_words()) {\n+  while (offset == BOTConstants::card_size_in_words()) {\n@@ -394,1 +394,1 @@\n-    q -= BOTConstants::bot_card_size_words();\n+    q -= BOTConstants::card_size_in_words();\n@@ -398,1 +398,1 @@\n-  assert(offset < BOTConstants::bot_card_size_words(), \"offset too large\");\n+  assert(offset < BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -431,1 +431,1 @@\n-  assert(pointer_delta(_next_offset_threshold, blk_start) <= BOTConstants::bot_card_size_words(),\n+  assert(pointer_delta(_next_offset_threshold, blk_start) <= BOTConstants::card_size_in_words(),\n@@ -438,1 +438,1 @@\n-         _array->_reserved.start() + _next_offset_index*BOTConstants::bot_card_size_words(),\n+         _array->_reserved.start() + _next_offset_index*BOTConstants::card_size_in_words(),\n@@ -460,1 +460,1 @@\n-    HeapWord* rem_end = _array->address_for_index(end_index) +  BOTConstants::bot_card_size_words();\n+    HeapWord* rem_end = _array->address_for_index(end_index) +  BOTConstants::card_size_in_words();\n@@ -468,1 +468,1 @@\n-  _next_offset_threshold = _array->address_for_index(end_index) + BOTConstants::bot_card_size_words();\n+  _next_offset_threshold = _array->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -479,1 +479,1 @@\n-         _array->offset_array(orig_next_offset_index) <= BOTConstants::bot_card_size_words()),\n+         _array->offset_array(orig_next_offset_index) <= BOTConstants::card_size_in_words()),\n@@ -483,1 +483,1 @@\n-           _array->offset_array(j) <= (u_char) (BOTConstants::bot_card_size_words()+BOTConstants::N_powers-1),\n+           _array->offset_array(j) <= (u_char) (BOTConstants::card_size_in_words()+BOTConstants::N_powers-1),\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -52,4 +52,4 @@\n-  static uint _log_bot_card_size;\n-  static uint _log_bot_card_size_words;\n-  static uint _bot_card_size_bytes;\n-  static uint _bot_card_size_words;\n+  static uint _log_card_size;\n+  static uint _log_card_size_in_words;\n+  static uint _card_size;\n+  static uint _card_size_in_words;\n@@ -72,2 +72,2 @@\n-    assert(entry >= _bot_card_size_words, \"Precondition\");\n-    return power_to_cards_back(entry - _bot_card_size_words);\n+    assert(entry >= _card_size_in_words, \"Precondition\");\n+    return power_to_cards_back(entry - _card_size_in_words);\n@@ -75,2 +75,2 @@\n-  static uint log_bot_card_size() {\n-    return _log_bot_card_size;\n+  static uint log_card_size() {\n+    return _log_card_size;\n@@ -78,2 +78,2 @@\n-  static uint log_bot_card_size_words() {\n-    return _log_bot_card_size_words;\n+  static uint log_card_size_in_words() {\n+    return _log_card_size_in_words;\n@@ -81,2 +81,2 @@\n-  static uint bot_card_size_bytes() {\n-    return _bot_card_size_bytes;\n+  static uint card_size() {\n+    return _card_size;\n@@ -84,2 +84,2 @@\n-  static uint bot_card_size_words() {\n-    return _bot_card_size_words;\n+  static uint card_size_in_words() {\n+    return _card_size_in_words;\n@@ -107,1 +107,1 @@\n-    assert(BOTConstants::bot_card_size_bytes() == CardTable::card_size(), \"sanity\");\n+    assert(BOTConstants::card_size() == CardTable::card_size(), \"sanity\");\n@@ -194,1 +194,1 @@\n-    assert(pointer_delta(high, low) <= BOTConstants::bot_card_size_words(), \"offset too large\");\n+    assert(pointer_delta(high, low) <= BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -205,1 +205,1 @@\n-    size_t num_cards = pointer_delta(right, left) >> BOTConstants::log_bot_card_size_words();\n+    size_t num_cards = pointer_delta(right, left) >> BOTConstants::log_card_size_in_words();\n@@ -222,1 +222,1 @@\n-    assert(pointer_delta(high, low) <= BOTConstants::bot_card_size_words(), \"offset too large\");\n+    assert(pointer_delta(high, low) <= BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -237,1 +237,1 @@\n-    size_t number_of_slots = (mem_region_words \/ BOTConstants::bot_card_size_words()) + 1;\n+    size_t number_of_slots = (mem_region_words \/ BOTConstants::card_size_in_words()) + 1;\n@@ -351,1 +351,1 @@\n-      _array->set_offset_array(_end, new_end, BOTConstants::bot_card_size_words());\n+      _array->set_offset_array(_end, new_end, BOTConstants::card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  size_t result = delta >> BOTConstants::log_bot_card_size();\n+  size_t result = delta >> BOTConstants::log_card_size();\n@@ -60,1 +60,1 @@\n-  HeapWord* result = _reserved.start() + (index << BOTConstants::log_bot_card_size_words());\n+  HeapWord* result = _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -442,1 +442,1 @@\n-                              dirty_cards*_card_size_in_words);\n+                              dirty_cards * _card_size_in_words);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                                         BOTConstants::bot_card_size_bytes(),\n+                                         BOTConstants::card_size(),\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}