{"files":[{"patch":"@@ -225,1 +225,1 @@\n-  __ lsr(card_addr, store_addr, CardTable::card_shift);\n+  __ lsr(card_addr, store_addr, CardTable::card_shift());\n@@ -447,1 +447,1 @@\n-  __ lsr(card_offset, card_offset, CardTable::card_shift);\n+  __ lsr(card_offset, card_offset, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  __ lsr(obj, obj, CardTable::card_shift);\n+  __ lsr(obj, obj, CardTable::card_shift());\n@@ -67,2 +67,2 @@\n-  __ lsr(start, start, CardTable::card_shift);\n-  __ lsr(end, end, CardTable::card_shift);\n+  __ lsr(start, start, CardTable::card_shift());\n+  __ lsr(end, end, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-  LIR_Address* card_addr = new LIR_Address(tmp, addr, (LIR_Address::Scale) -CardTable::card_shift, 0, T_BOOLEAN);\n+  LIR_Address* card_addr = new LIR_Address(tmp, addr, (LIR_Address::Scale) -CardTable::card_shift(), 0, T_BOOLEAN);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  __ add(card_addr, tmp2, AsmOperand(store_addr, lsr, CardTable::card_shift));\n+  __ add(card_addr, tmp2, AsmOperand(store_addr, lsr, CardTable::card_shift()));\n@@ -455,1 +455,1 @@\n-  __ add(r_card_addr_0, r_card_base_1, AsmOperand(r_obj_0, lsr, CardTable::card_shift));\n+  __ add(r_card_addr_0, r_card_base_1, AsmOperand(r_obj_0, lsr, CardTable::card_shift()));\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-  __ logical_shift_right(addr, addr, CardTable::card_shift);\n-  __ logical_shift_right(count, count, CardTable::card_shift);\n+  __ logical_shift_right(addr, addr, CardTable::card_shift());\n+  __ logical_shift_right(count, count, CardTable::card_shift());\n@@ -132,1 +132,1 @@\n-  Address card_table_addr(card_table_base, obj, lsr, CardTable::card_shift);\n+  Address card_table_addr(card_table_base, obj, lsr, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/cardTableBarrierSetAssembler_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-  __ srdi(Rcard_addr, store_addr, CardTable::card_shift);\n+  __ srdi(Rcard_addr, store_addr, CardTable::card_shift());\n@@ -519,1 +519,1 @@\n-  __ srdi(addr, R0, CardTable::card_shift); \/\/ Addr is passed in R0.\n+  __ srdi(addr, R0, CardTable::card_shift()); \/\/ Addr is passed in R0.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  __ srdi(addr, addr, CardTable::card_shift);\n-  __ srdi(count, count, CardTable::card_shift);\n+  __ srdi(addr, addr, CardTable::card_shift());\n+  __ srdi(count, count, CardTable::card_shift());\n@@ -77,1 +77,1 @@\n-  __ srdi(obj, obj, CardTable::card_shift);\n+  __ srdi(obj, obj, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/cardTableBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-  __ z_srlg(Rcard_addr, Rstore_addr, CardTable::card_shift);         \/\/ Index into card table.\n+  __ z_srlg(Rcard_addr, Rstore_addr, CardTable::card_shift());         \/\/ Index into card table.\n@@ -551,1 +551,1 @@\n-  __ z_srlg(addr_card, addr_oop, CardTable::card_shift);\n+  __ z_srlg(addr_card, addr_oop, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  __ z_srlg(addr,  addr,  CardTable::card_shift);\n-  __ z_srlg(count, count, CardTable::card_shift);\n+  __ z_srlg(addr,  addr,  CardTable::card_shift());\n+  __ z_srlg(count, count, CardTable::card_shift());\n@@ -149,1 +149,1 @@\n-  __ z_srlg(store_addr, store_addr, CardTable::card_shift);\n+  __ z_srlg(store_addr, store_addr, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/cardTableBarrierSetAssembler_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-  __ shrptr(card_addr, CardTable::card_shift);\n+  __ shrptr(card_addr, CardTable::card_shift());\n@@ -543,1 +543,1 @@\n-  __ shrptr(card_addr, CardTable::card_shift);\n+  __ shrptr(card_addr, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-  __ shrptr(addr, CardTable::card_shift);\n-  __ shrptr(end, CardTable::card_shift);\n+  __ shrptr(addr, CardTable::card_shift());\n+  __ shrptr(end, CardTable::card_shift());\n@@ -75,2 +75,2 @@\n-  __ shrptr(addr, CardTable::card_shift);\n-  __ shrptr(end,   CardTable::card_shift);\n+  __ shrptr(addr, CardTable::card_shift());\n+  __ shrptr(end,   CardTable::card_shift());\n@@ -96,1 +96,1 @@\n-  __ shrptr(obj, CardTable::card_shift);\n+  __ shrptr(obj, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -445,1 +445,1 @@\n-  Node* card_offset = __ URShiftX( cast, __ ConI(CardTable::card_shift) );\n+  Node* card_offset = __ URShiftX( cast, __ ConI(CardTable::card_shift()) );\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-    HeapWord* aligned_top = align_up(top, BOTConstants::N_bytes);\n+    HeapWord* aligned_top = align_up(top, BOTConstants::card_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-    uint max_cards_in_inline_ptr = G1CardSetConfiguration::max_cards_in_inline_ptr(HeapRegion::LogOfHRGrainBytes - CardTable::card_shift);\n+    uint max_cards_in_inline_ptr = G1CardSetConfiguration::max_cards_in_inline_ptr(HeapRegion::LogOfHRGrainBytes - CardTable::card_shift());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  return (delta & right_n_bits((int)BOTConstants::LogN_words)) == (size_t)NoBits;\n+  return (delta & right_n_bits((int)BOTConstants::log_card_size_in_words())) == (size_t)NoBits;\n@@ -60,1 +60,1 @@\n-  assert((index) < (_reserved.word_size() >> BOTConstants::LogN_words),\n+  assert((index) < (_reserved.word_size() >> BOTConstants::log_card_size_in_words()),\n@@ -62,1 +62,1 @@\n-         msg, (index), (_reserved.word_size() >> BOTConstants::LogN_words));\n+         msg, (index), (_reserved.word_size() >> BOTConstants::log_card_size_in_words()));\n@@ -144,1 +144,1 @@\n-  assert(end ==_bot->address_for_index(end_card)+BOTConstants::N_words, \"Precondition\");\n+  assert(end ==_bot->address_for_index(end_card)+BOTConstants::card_size_in_words(), \"Precondition\");\n@@ -156,1 +156,1 @@\n-  assert(_bot->offset_array(start_card-1) <= BOTConstants::N_words,\n+  assert(_bot->offset_array(start_card-1) <= BOTConstants::card_size_in_words(),\n@@ -165,1 +165,1 @@\n-    offset = BOTConstants::N_words + i;\n+    offset = BOTConstants::card_size_in_words() + i;\n@@ -186,1 +186,1 @@\n-  guarantee(_bot->offset_array(start_card) == BOTConstants::N_words, \"Wrong value in second card\");\n+  guarantee(_bot->offset_array(start_card) == BOTConstants::card_size_in_words(), \"Wrong value in second card\");\n@@ -190,1 +190,1 @@\n-      guarantee(entry > BOTConstants::N_words,\n+      guarantee(entry > BOTConstants::card_size_in_words(),\n@@ -195,1 +195,1 @@\n-                (uint)entry, (uint)_bot->offset_array(c), BOTConstants::N_words);\n+                (uint)entry, (uint)_bot->offset_array(c), BOTConstants::card_size_in_words());\n@@ -208,1 +208,1 @@\n-      guarantee(_bot->offset_array(landing_card) <= BOTConstants::N_words,\n+      guarantee(_bot->offset_array(landing_card) <= BOTConstants::card_size_in_words(),\n@@ -211,1 +211,1 @@\n-                (uint)_bot->offset_array(landing_card), (uint)BOTConstants::N_words);\n+                (uint)_bot->offset_array(landing_card), (uint)BOTConstants::card_size_in_words());\n@@ -236,1 +236,1 @@\n-  assert(pointer_delta(threshold, blk_start) <= BOTConstants::N_words,\n+  assert(pointer_delta(threshold, blk_start) <= BOTConstants::card_size_in_words(),\n@@ -242,1 +242,1 @@\n-  assert(threshold == _bot->_reserved.start() + index*BOTConstants::N_words,\n+  assert(threshold == _bot->_reserved.start() + index*BOTConstants::card_size_in_words(),\n@@ -262,1 +262,1 @@\n-    HeapWord* rem_end = _bot->address_for_index(end_index) + BOTConstants::N_words;\n+    HeapWord* rem_end = _bot->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -269,1 +269,1 @@\n-  threshold = _bot->address_for_index(end_index) + BOTConstants::N_words;\n+  threshold = _bot->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -280,1 +280,1 @@\n-         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) <= BOTConstants::N_words),\n+         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) <= BOTConstants::card_size_in_words()),\n@@ -290,1 +290,1 @@\n-             (u_char) (BOTConstants::N_words+BOTConstants::N_powers-1),\n+             (u_char) (BOTConstants::card_size_in_words()+BOTConstants::N_powers-1),\n@@ -295,1 +295,1 @@\n-           (uint) (BOTConstants::N_words+BOTConstants::N_powers-1));\n+           (uint) (BOTConstants::card_size_in_words() + BOTConstants::N_powers - 1));\n@@ -309,1 +309,1 @@\n-    if (entry < BOTConstants::N_words) {\n+    if (entry < BOTConstants::card_size_in_words()) {\n@@ -373,1 +373,1 @@\n-  _next_offset_threshold = _hr->bottom() + BOTConstants::N_words;\n+  _next_offset_threshold = _hr->bottom() + BOTConstants::card_size_in_words();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    assert(offset <= BOTConstants::N_words,\n+    assert(offset <= BOTConstants::card_size_in_words(),\n@@ -60,1 +60,1 @@\n-           msg, offset, BOTConstants::N_words);\n+           msg, offset, BOTConstants::card_size_in_words());\n@@ -83,1 +83,1 @@\n-    size_t number_of_slots = (mem_region_words \/ BOTConstants::N_words);\n+    size_t number_of_slots = (mem_region_words \/ BOTConstants::card_size_in_words());\n@@ -89,1 +89,1 @@\n-    return BOTConstants::N_bytes;\n+    return BOTConstants::card_size();\n@@ -105,1 +105,1 @@\n-    return _reserved.start() + (index << BOTConstants::LogN_words);\n+    return _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  HeapWord* threshold = card_boundary + BOTConstants::N_words;\n+  HeapWord* threshold = card_boundary + BOTConstants::card_size_in_words();\n@@ -87,1 +87,1 @@\n-  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> BOTConstants::LogN;\n+  return pointer_delta((char*)p, _reserved.start(), sizeof(char)) >> BOTConstants::log_card_size();\n@@ -125,1 +125,1 @@\n-  while (offset >= BOTConstants::N_words) {\n+  while (offset >= BOTConstants::card_size_in_words()) {\n@@ -129,1 +129,1 @@\n-    q -= (BOTConstants::N_words * n_cards_back);\n+    q -= (BOTConstants::card_size_in_words() * n_cards_back);\n@@ -133,1 +133,1 @@\n-  assert(offset < BOTConstants::N_words, \"offset too large\");\n+  assert(offset < BOTConstants::card_size_in_words(), \"offset too large\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    assert((last_addr + G1CardTable::card_size_in_words) == mr.end(), \"MemRegion end must be aligned to a card.\");\n+    assert((last_addr + G1CardTable::card_size_in_words()) == mr.end(), \"MemRegion end must be aligned to a card.\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardCounts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  _byte_map_base = _byte_map - (uintptr_t(low_bound) >> card_shift);\n+  _byte_map_base = _byte_map - (uintptr_t(low_bound) >> _card_shift);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    size_t number_of_slots = (mem_region_size_in_words \/ card_size_in_words);\n+    size_t number_of_slots = (mem_region_size_in_words \/ _card_size_in_words);\n@@ -118,1 +118,1 @@\n-  static size_t heap_map_factor() { return card_size; }\n+  static size_t heap_map_factor() { return _card_size; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  return (uint)(card_idx >> (HeapRegion::LogOfHRGrainBytes - card_shift));\n+  return (uint)(card_idx >> (HeapRegion::LogOfHRGrainBytes - _card_shift));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1663,1 +1663,1 @@\n-  guarantee((uintptr_t)(heap_rs.base()) >= G1CardTable::card_size, \"Java heap must not start within the first card.\");\n+  guarantee((uintptr_t)(heap_rs.base()) >= G1CardTable::card_size(), \"Java heap must not start within the first card.\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -811,1 +811,1 @@\n-    HeapWord* scan_end = MIN2(card_start + (num_cards << BOTConstants::LogN_words), top);\n+    HeapWord* scan_end = MIN2(card_start + (num_cards << BOTConstants::log_card_size_in_words()), top);\n@@ -1677,1 +1677,1 @@\n-  HeapWord* end = start + G1CardTable::card_size_in_words;\n+  HeapWord* end = start + G1CardTable::card_size_in_words();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  CardsPerRegion = GrainBytes >> G1CardTable::card_shift;\n+  CardsPerRegion = GrainBytes >> G1CardTable::card_shift();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  _split_card_shift = CardBitsWithinCardRegion + CardTable::card_shift;\n+  _split_card_shift = CardBitsWithinCardRegion + CardTable::card_shift();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  card_within_region = (uint)((offset & _split_card_mask) >> CardTable::card_shift);\n+  card_within_region = (uint)((offset & _split_card_mask) >> CardTable::card_shift());\n@@ -132,1 +132,1 @@\n-  uintptr_t from_card = uintptr_t(from) >> CardTable::card_shift;\n+  uintptr_t from_card = uintptr_t(from) >> CardTable::card_shift();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-uint ObjectStartArray::block_shift = 0;\n-uint ObjectStartArray::block_size = 0;\n-uint ObjectStartArray::block_size_in_words = 0;\n+uint ObjectStartArray::_card_shift = 0;\n+uint ObjectStartArray::_card_size = 0;\n+uint ObjectStartArray::_card_size_in_words = 0;\n@@ -39,3 +39,3 @@\n-  block_shift = card_shift;\n-  block_size = 1 << block_shift;\n-  block_size_in_words = block_size \/ sizeof(HeapWord);\n+  _card_shift = card_shift;\n+  _card_size = 1 << _card_shift;\n+  _card_size_in_words = _card_size \/ sizeof(HeapWord);\n@@ -47,2 +47,2 @@\n-  assert((int)block_size == (int)CardTable::card_size, \"Sanity\");\n-  assert(block_size <= MaxBlockSize, \"block_size must be less than or equal to \" UINT32_FORMAT, MaxBlockSize);\n+  assert((int)_card_size == (int)(CardTable::card_size()), \"Sanity\");\n+  assert(_card_size <= MaxBlockSize, \"block_size must be less than or equal to \" UINT32_FORMAT, MaxBlockSize);\n@@ -53,1 +53,1 @@\n-  size_t bytes_to_reserve = reserved_region.word_size() \/ block_size_in_words;\n+  size_t bytes_to_reserve = reserved_region.word_size() \/ _card_size_in_words;\n@@ -81,1 +81,1 @@\n-  _offset_base = _raw_base - (size_t(reserved_region.start()) >> block_shift);\n+  _offset_base = _raw_base - (size_t(reserved_region.start()) >> _card_shift);\n@@ -96,2 +96,2 @@\n-  assert((uintptr_t(low_bound)  & (block_size - 1))  == 0, \"heap must start at block boundary\");\n-  assert((uintptr_t(high_bound) & (block_size - 1))  == 0, \"heap must end at block boundary\");\n+  assert((uintptr_t(low_bound)  & (_card_size - 1))  == 0, \"heap must start at block boundary\");\n+  assert((uintptr_t(high_bound) & (_card_size - 1))  == 0, \"heap must end at block boundary\");\n@@ -99,1 +99,1 @@\n-  size_t requested_blocks_size_in_bytes = mr.word_size() \/ block_size_in_words;\n+  size_t requested_blocks_size_in_bytes = mr.word_size() \/ _card_size_in_words;\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+  static uint _card_shift;\n+  static uint _card_size;\n+  static uint _card_size_in_words;\n+\n@@ -55,4 +59,0 @@\n-  static uint block_shift;\n-  static uint block_size;\n-  static uint block_size_in_words;\n-\n@@ -67,0 +67,11 @@\n+  static uint card_shift() {\n+    return _card_shift;\n+  }\n+\n+  static uint card_size() {\n+    return _card_size;\n+  }\n+  static uint card_size_in_words() {\n+    return _card_size_in_words;\n+  }\n+\n@@ -73,1 +84,1 @@\n-    jbyte* result = &_offset_base[uintptr_t(p) >> block_shift];\n+    jbyte* result = &_offset_base[uintptr_t(p) >> _card_shift];\n@@ -84,1 +95,1 @@\n-    HeapWord* result = (HeapWord*) (delta << block_shift);\n+    HeapWord* result = (HeapWord*) (delta << _card_shift);\n@@ -107,1 +118,1 @@\n-    HeapWord* result = (HeapWord*) (delta << block_shift);\n+    HeapWord* result = (HeapWord*) (delta << _card_shift);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  assert((block_word_size % (ObjectStartArray::block_size)) == 0,\n+  assert((block_word_size % (ObjectStartArray::card_size())) == 0,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,4 +36,4 @@\n-uint BOTConstants::LogN = 0;\n-uint BOTConstants::LogN_words = 0;\n-uint BOTConstants::N_bytes = 0;\n-uint BOTConstants::N_words = 0;\n+uint BOTConstants::_log_card_size = 0;\n+uint BOTConstants::_log_card_size_in_words = 0;\n+uint BOTConstants::_card_size = 0;\n+uint BOTConstants::_card_size_in_words = 0;\n@@ -42,4 +42,4 @@\n-  LogN =  card_shift;\n-  LogN_words = LogN - LogHeapWordSize;\n-  N_bytes = 1 << LogN;\n-  N_words = 1 << LogN_words;\n+  _log_card_size =  card_shift;\n+  _log_card_size_in_words = _log_card_size - LogHeapWordSize;\n+  _card_size = 1 << _log_card_size;\n+  _card_size_in_words = 1 << _log_card_size_in_words;\n@@ -102,1 +102,1 @@\n-  return (delta & right_n_bits((int)BOTConstants::LogN_words)) == (size_t)NoBits;\n+  return (delta & right_n_bits((int)BOTConstants::log_card_size_in_words())) == (size_t)NoBits;\n@@ -119,1 +119,1 @@\n-    set_remainder_to_point_to_start(mr.start() + BOTConstants::N_words, mr.end());\n+    set_remainder_to_point_to_start(mr.start() + BOTConstants::card_size_in_words(), mr.end());\n@@ -175,1 +175,1 @@\n-  assert(end ==_array->address_for_index(end_card)+BOTConstants::N_words, \"Precondition\");\n+  assert(end ==_array->address_for_index(end_card)+BOTConstants::card_size_in_words(), \"Precondition\");\n@@ -191,1 +191,1 @@\n-  assert(_array->offset_array(start_card-1) <= BOTConstants::N_words,\n+  assert(_array->offset_array(start_card-1) <= BOTConstants::card_size_in_words(),\n@@ -200,1 +200,1 @@\n-    offset = BOTConstants::N_words + i;\n+    offset = BOTConstants::card_size_in_words() + i;\n@@ -221,2 +221,2 @@\n-  guarantee(_array->offset_array(start_card) == BOTConstants::N_words, \"Wrong value in second card\");\n-  u_char last_entry = BOTConstants::N_words;\n+  guarantee(_array->offset_array(start_card) == BOTConstants::card_size_in_words(), \"Wrong value in second card\");\n+  u_char last_entry = BOTConstants::card_size_in_words();\n@@ -227,1 +227,1 @@\n-      guarantee(entry > BOTConstants::N_words, \"Should be in logarithmic region\");\n+      guarantee(entry > BOTConstants::card_size_in_words(), \"Should be in logarithmic region\");\n@@ -237,1 +237,1 @@\n-      guarantee(_array->offset_array(landing_card) <= BOTConstants::N_words, \"Offset value\");\n+      guarantee(_array->offset_array(landing_card) <= BOTConstants::card_size_in_words(), \"Offset value\");\n@@ -269,1 +269,1 @@\n-  clear_bits(boundary_before_end, right_n_bits((int)BOTConstants::LogN));\n+  clear_bits(boundary_before_end, right_n_bits((int)BOTConstants::log_card_size()));\n@@ -282,1 +282,1 @@\n-      boundary += BOTConstants::N_words;\n+      boundary += BOTConstants::card_size_in_words();\n@@ -299,2 +299,2 @@\n-          HeapWord* rem_st = _array->address_for_index(start_index) + BOTConstants::N_words;\n-          HeapWord* rem_end = _array->address_for_index(end_index) + BOTConstants::N_words;\n+          HeapWord* rem_st = _array->address_for_index(start_index) + BOTConstants::card_size_in_words();\n+          HeapWord* rem_end = _array->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -383,1 +383,1 @@\n-  while (offset > BOTConstants::N_words) {\n+  while (offset > BOTConstants::card_size_in_words()) {\n@@ -387,1 +387,1 @@\n-    q -= (BOTConstants::N_words * n_cards_back);\n+    q -= (BOTConstants::card_size_in_words() * n_cards_back);\n@@ -392,1 +392,1 @@\n-  while (offset == BOTConstants::N_words) {\n+  while (offset == BOTConstants::card_size_in_words()) {\n@@ -394,1 +394,1 @@\n-    q -= BOTConstants::N_words;\n+    q -= BOTConstants::card_size_in_words();\n@@ -398,1 +398,1 @@\n-  assert(offset < BOTConstants::N_words, \"offset too large\");\n+  assert(offset < BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -431,1 +431,1 @@\n-  assert(pointer_delta(_next_offset_threshold, blk_start) <= BOTConstants::N_words,\n+  assert(pointer_delta(_next_offset_threshold, blk_start) <= BOTConstants::card_size_in_words(),\n@@ -438,1 +438,1 @@\n-         _array->_reserved.start() + _next_offset_index*BOTConstants::N_words,\n+         _array->_reserved.start() + _next_offset_index*BOTConstants::card_size_in_words(),\n@@ -460,1 +460,1 @@\n-    HeapWord* rem_end = _array->address_for_index(end_index) +  BOTConstants::N_words;\n+    HeapWord* rem_end = _array->address_for_index(end_index) +  BOTConstants::card_size_in_words();\n@@ -468,1 +468,1 @@\n-  _next_offset_threshold = _array->address_for_index(end_index) + BOTConstants::N_words;\n+  _next_offset_threshold = _array->address_for_index(end_index) + BOTConstants::card_size_in_words();\n@@ -479,1 +479,1 @@\n-         _array->offset_array(orig_next_offset_index) <= BOTConstants::N_words),\n+         _array->offset_array(orig_next_offset_index) <= BOTConstants::card_size_in_words()),\n@@ -483,1 +483,1 @@\n-           _array->offset_array(j) <= (u_char) (BOTConstants::N_words+BOTConstants::N_powers-1),\n+           _array->offset_array(j) <= (u_char) (BOTConstants::card_size_in_words()+BOTConstants::N_powers-1),\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -52,5 +52,4 @@\n-public:\n-  static uint LogN;\n-  static uint LogN_words;\n-  static uint N_bytes;\n-  static uint N_words;\n+  static uint _log_card_size;\n+  static uint _log_card_size_in_words;\n+  static uint _card_size;\n+  static uint _card_size_in_words;\n@@ -58,0 +57,1 @@\n+public:\n@@ -70,0 +70,1 @@\n+\n@@ -71,2 +72,14 @@\n-    assert(entry >= N_words, \"Precondition\");\n-    return power_to_cards_back(entry - N_words);\n+    assert(entry >= _card_size_in_words, \"Precondition\");\n+    return power_to_cards_back(entry - _card_size_in_words);\n+  }\n+  static uint log_card_size() {\n+    return _log_card_size;\n+  }\n+  static uint log_card_size_in_words() {\n+    return _log_card_size_in_words;\n+  }\n+  static uint card_size() {\n+    return _card_size;\n+  }\n+  static uint card_size_in_words() {\n+    return _card_size_in_words;\n@@ -94,1 +107,1 @@\n-    assert(BOTConstants::N_bytes == CardTable::card_size, \"sanity\");\n+    assert(BOTConstants::card_size() == CardTable::card_size(), \"sanity\");\n@@ -181,1 +194,1 @@\n-    assert(pointer_delta(high, low) <= BOTConstants::N_words, \"offset too large\");\n+    assert(pointer_delta(high, low) <= BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -192,1 +205,1 @@\n-    size_t num_cards = pointer_delta(right, left) >> BOTConstants::LogN_words;\n+    size_t num_cards = pointer_delta(right, left) >> BOTConstants::log_card_size_in_words();\n@@ -209,1 +222,1 @@\n-    assert(pointer_delta(high, low) <= BOTConstants::N_words, \"offset too large\");\n+    assert(pointer_delta(high, low) <= BOTConstants::card_size_in_words(), \"offset too large\");\n@@ -224,1 +237,1 @@\n-    size_t number_of_slots = (mem_region_words \/ BOTConstants::N_words) + 1;\n+    size_t number_of_slots = (mem_region_words \/ BOTConstants::card_size_in_words()) + 1;\n@@ -338,1 +351,1 @@\n-      _array->set_offset_array(_end, new_end, BOTConstants::N_words);\n+      _array->set_offset_array(_end, new_end, BOTConstants::card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.hpp","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  size_t result = delta >> BOTConstants::LogN;\n+  size_t result = delta >> BOTConstants::log_card_size();\n@@ -60,1 +60,1 @@\n-  HeapWord* result = _reserved.start() + (index << BOTConstants::LogN_words);\n+  HeapWord* result = _reserved.start() + (index << BOTConstants::log_card_size_in_words());\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    __ unsigned_shift_right(tmp, CardTable::card_shift, tmp);\n+    __ unsigned_shift_right(tmp, CardTable::card_shift(), tmp);\n@@ -74,1 +74,1 @@\n-    __ unsigned_shift_right(addr, CardTable::card_shift, tmp);\n+    __ unsigned_shift_right(addr, CardTable::card_shift(), tmp);\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  Node* card_offset = __ URShiftX(cast, __ ConI(CardTable::card_shift));\n+  Node* card_offset = __ URShiftX(cast, __ ConI(CardTable::card_shift()));\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n-uint CardTable::card_shift = 0;\n-uint CardTable::card_size = 0;\n-uint CardTable::card_size_in_words = 0;\n+uint CardTable::_card_shift = 0;\n+uint CardTable::_card_size = 0;\n+uint CardTable::_card_size_in_words = 0;\n@@ -49,3 +49,3 @@\n-  card_size = GCCardSizeInBytes;\n-  card_shift = log2i_exact(card_size);\n-  card_size_in_words = card_size \/ sizeof(HeapWord);\n+  _card_size = GCCardSizeInBytes;\n+  _card_shift = log2i_exact(_card_size);\n+  _card_size_in_words = _card_size \/ sizeof(HeapWord);\n@@ -54,1 +54,1 @@\n-  BOTConstants::initialize_bot_size(card_shift);\n+  BOTConstants::initialize_bot_size(_card_shift);\n@@ -58,1 +58,1 @@\n-  ObjectStartArray::initialize_block_size(card_shift);\n+  ObjectStartArray::initialize_block_size(_card_shift);\n@@ -61,1 +61,1 @@\n-  log_info_p(gc, init)(\"CardTable entry size: \" UINT32_FORMAT,  card_size);\n+  log_info_p(gc, init)(\"CardTable entry size: \" UINT32_FORMAT,  _card_size);\n@@ -85,2 +85,2 @@\n-  assert((uintptr_t(_whole_heap.start())  & (card_size - 1))  == 0, \"heap must start at card boundary\");\n-  assert((uintptr_t(_whole_heap.end()) & (card_size - 1))  == 0, \"heap must end at card boundary\");\n+  assert((uintptr_t(_whole_heap.start())  & (_card_size - 1))  == 0, \"heap must start at card boundary\");\n+  assert((uintptr_t(_whole_heap.end()) & (_card_size - 1))  == 0, \"heap must end at card boundary\");\n@@ -123,1 +123,1 @@\n-  _byte_map_base = _byte_map - (uintptr_t(low_bound) >> card_shift);\n+  _byte_map_base = _byte_map - (uintptr_t(low_bound) >> _card_shift);\n@@ -416,1 +416,1 @@\n-                              dirty_cards*card_size_in_words);\n+                              dirty_cards*_card_size_in_words);\n@@ -442,1 +442,1 @@\n-                              dirty_cards*card_size_in_words);\n+                              dirty_cards * _card_size_in_words);\n@@ -496,1 +496,1 @@\n-                            p2i((HeapWord*) (((size_t) addr_for(curr)) + card_size)),\n+                            p2i((HeapWord*) (((size_t) addr_for(curr)) + _card_size)),\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -114,0 +114,5 @@\n+  \/\/ CardTable entry size\n+  static uint _card_shift;\n+  static uint _card_size;\n+  static uint _card_size_in_words;\n+\n@@ -136,2 +141,2 @@\n-    const size_t words = align_up(covered_words, card_size_in_words);\n-    return words \/ card_size_in_words + 1;\n+    const size_t words = align_up(covered_words, _card_size_in_words);\n+    return words \/ _card_size_in_words + 1;\n@@ -160,1 +165,1 @@\n-    CardValue* result = &_byte_map_base[uintptr_t(p) >> card_shift];\n+    CardValue* result = &_byte_map_base[uintptr_t(p) >> _card_shift];\n@@ -192,1 +197,1 @@\n-    HeapWord* result = (HeapWord*) (delta << card_shift);\n+    HeapWord* result = (HeapWord*) (delta << _card_shift);\n@@ -231,4 +236,11 @@\n-  \/\/ CardTable entry size\n-  static uint card_shift;\n-  static uint card_size;\n-  static uint card_size_in_words;\n+  static uint card_shift() {\n+    return _card_shift;\n+  }\n+\n+  static uint card_size() {\n+    return _card_size;\n+  }\n+\n+  static uint card_size_in_words() {\n+    return _card_size_in_words;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -264,4 +264,0 @@\n-  declare_constant(BOTConstants::LogN)                                      \\\n-  declare_constant(BOTConstants::LogN_words)                                \\\n-  declare_constant(BOTConstants::N_bytes)                                   \\\n-  declare_constant(BOTConstants::N_words)                                   \\\n@@ -277,3 +273,0 @@\n-  declare_constant(CardTable::card_shift)                                   \\\n-  declare_constant(CardTable::card_size)                                    \\\n-  declare_constant(CardTable::card_size_in_words)                           \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-    cardtable_shift = CardTable::card_shift;\n+    cardtable_shift = CardTable::card_shift();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                                         BOTConstants::N_bytes,\n+                                         BOTConstants::card_size(),\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-    G1CardSetContainersTest::cardset_inlineptr_test(i - CardTable::card_shift);\n+    G1CardSetContainersTest::cardset_inlineptr_test(i - CardTable::card_shift());\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSetContainers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}