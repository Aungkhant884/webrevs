{"files":[{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @enablePreview\n- * @library ..\/\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestMixedMallocFree\n- *\/\n-\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryAddress;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.MemorySession;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static org.testng.Assert.assertEquals;\n-\n-public class TestMixedMallocFree extends NativeTestHelper {\n-\n-    static final MethodHandle MH_my_malloc;\n-\n-    static {\n-        System.loadLibrary(\"Malloc\");\n-        MH_my_malloc = Linker.nativeLinker().downcallHandle(\n-                findNativeOrThrow(\"my_malloc\"),\n-                FunctionDescriptor.of(C_POINTER, C_LONG_LONG));\n-    }\n-\n-    @Test\n-    public void testMalloc() throws Throwable {\n-        MemoryAddress ma = (MemoryAddress) MH_my_malloc.invokeExact(4L);\n-        MemorySegment seg = MemorySegment.ofAddress(ma, 4L, MemorySession.openImplicit());\n-        seg.set(JAVA_INT, 0, 42);\n-        assertEquals(seg.get(JAVA_INT, 0), 42);\n-        \/\/ Test if this free crashes the VM, which might be the case if we load the wrong default library\n-        \/\/ and end up mixing two allocators together.\n-        freeMemory(ma);\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/foreign\/malloc\/TestMixedMallocFree.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-#include <stdlib.h>\n-\n-#ifdef _WIN64\n-#define EXPORT __declspec(dllexport)\n-#else\n-#define EXPORT\n-#endif\n-\n-EXPORT void* my_malloc(size_t size) {\n-    return malloc(size);\n-}\n","filename":"test\/jdk\/java\/foreign\/malloc\/libMalloc.c","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"}]}