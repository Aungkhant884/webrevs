{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/BadObjectClass\/TestUnloadClassError.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -39,1 +39,1 @@\n-\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/ConstantPoolDependsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/DictionaryDependsTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveClass.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveClassLoader.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveObject.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveSoftReference.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n@@ -51,1 +52,1 @@\n-        byte[] data = switchClassData ? getNewClassData(name) : getClassData(name);\n+        byte[] data = switchClassData ? getNewClassData(name) : ClassUnloadCommon.getClassData(name);\n@@ -55,15 +56,0 @@\n-    byte[] getClassData(String name) {\n-        try {\n-           String TempName = name.replaceAll(\"\\\\.\", \"\/\");\n-           String currentDir = System.getProperty(\"test.classes\");\n-           String filename = currentDir + File.separator + TempName + \".class\";\n-           FileInputStream fis = new FileInputStream(filename);\n-           byte[] b = new byte[5000];\n-           int cnt = fis.read(b, 0, 5000);\n-           byte[] c = new byte[cnt];\n-           for (int i=0; i<cnt; i++) c[i] = b[i];\n-             return c;\n-        } catch (IOException e) {\n-           return null;\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/MyDiffClassLoader.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -37,0 +37,1 @@\n+\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/SuperDependsTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadInterfaceTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -36,0 +36,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.io.*;\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n@@ -53,1 +53,1 @@\n-                    byte[] b = getClassData(\"A\");\n+                    byte[] b = ClassUnloadCommon.getClassData(\"A\");\n@@ -72,8 +72,0 @@\n-\n-        byte[] getClassData(String name) {\n-           try {\n-             return SimpleLoader.class.getClassLoader().getResourceAsStream(name + \".class\").readAllBytes();\n-           } catch (IOException e) {\n-              return null;\n-           }\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/DefineClass\/NullClassBytesTest.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -48,0 +48,1 @@\n+import jdk.test.lib.classloader.ClassWithManyMethodsClassLoader;\n","filename":"test\/hotspot\/jtreg\/runtime\/MemberName\/MemberNameLeak.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -65,0 +65,2 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/TestNestHostErrorWithClassUnload.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/runtime\/testlibrary\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n@@ -32,2 +32,5 @@\n- * @build sun.hotspot.WhiteBox ClassUnloadCommon\n- * @run driver ClassFileInstaller -jar hello.jar HelloUnload ClassUnloadCommon ClassUnloadCommon$1 ClassUnloadCommon$TestFailure\n+ * @build sun.hotspot.WhiteBox jdk.test.lib.classloader.ClassUnloadCommon\n+ * @run driver ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/HelloCustom.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/runtime\/testlibrary\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n@@ -35,2 +35,5 @@\n- * @build sun.hotspot.WhiteBox ClassUnloadCommon\n- * @run driver ClassFileInstaller -jar hello.jar HelloUnload ClassUnloadCommon ClassUnloadCommon$1 ClassUnloadCommon$TestFailure\n+ * @build sun.hotspot.WhiteBox jdk.test.lib.classloader.ClassUnloadCommon\n+ * @run driver ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/HelloCustom_JFR.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/testlibrary\n- * @build sun.hotspot.WhiteBox ClassUnloadCommon\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @build sun.hotspot.WhiteBox jdk.test.lib.classloader.ClassUnloadCommon\n@@ -36,3 +36,3 @@\n- *                                ClassUnloadCommon\n- *                                ClassUnloadCommon$1\n- *                                ClassUnloadCommon$TestFailure\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n@@ -49,1 +49,3 @@\n-                                          \"ClassUnloadCommon\", \"ClassUnloadCommon$1\", \"ClassUnloadCommon$TestFailure\");\n+                                          \"jdk\/test\/lib\/classloader\/ClassUnloadCommon\",\n+                                          \"jdk\/test\/lib\/classloader\/ClassUnloadCommon$1\",\n+                                          \"jdk\/test\/lib\/classloader\/ClassUnloadCommon$TestFailure\");\n@@ -57,3 +59,3 @@\n-            \"ClassUnloadCommon\",\n-            \"ClassUnloadCommon$1\",\n-            \"ClassUnloadCommon$TestFailure\",\n+            \"jdk\/test\/lib\/classloader\/ClassUnloadCommon\",\n+            \"jdk\/test\/lib\/classloader\/ClassUnloadCommon$1\",\n+            \"jdk\/test\/lib\/classloader\/ClassUnloadCommon$TestFailure\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/UnloadUnregisteredLoaderTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/HelloUnload.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/UnloadUnregisteredLoader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes \/runtime\/testlibrary\n- * @build HelloUnload CustomLoadee ClassUnloadCommon\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\n+ * @build HelloUnload CustomLoadee jdk.test.lib.classloader.ClassUnloadCommon\n@@ -32,1 +32,4 @@\n- * @run driver ClassFileInstaller -jar hello.jar HelloUnload ClassUnloadCommon ClassUnloadCommon$1 ClassUnloadCommon$TestFailure\n+ * @run driver ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicCustom.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes \/runtime\/testlibrary\n- * @build HelloUnload CustomLoadee ClassUnloadCommon\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\n+ * @build HelloUnload CustomLoadee jdk.test.lib.classloader.ClassUnloadCommon\n@@ -35,1 +35,4 @@\n- * @run driver ClassFileInstaller -jar hello.jar HelloUnload ClassUnloadCommon ClassUnloadCommon$1 ClassUnloadCommon$TestFailure\n+ * @run driver ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicCustomUnload.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n","filename":"test\/hotspot\/jtreg\/runtime\/defineAnonClass\/TestAnonSymbolLeak.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary\n+ * @library \/test\/lib\n@@ -44,0 +44,2 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/runtime\/testlibrary classes\n+ * @library \/test\/lib classes\n@@ -41,0 +41,2 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/LoaderConstraintsTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/runtime\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -34,6 +34,0 @@\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.FileChannel;\n-\n@@ -45,0 +39,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n@@ -89,12 +84,0 @@\n-            static ByteBuffer readClassFile(String name) {\n-                File f = new File(testClasses, name);\n-                try (FileInputStream fin = new FileInputStream(f);\n-                     FileChannel fc = fin.getChannel())\n-                {\n-                    return fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\n-                } catch (IOException e) {\n-                    throw new RuntimeException(\"Can't open file: \" + name +\n-                                               \", exception: \" + e.toString());\n-                }\n-            }\n-\n@@ -120,1 +103,2 @@\n-                return defineClass(name, readClassFile(name + \".class\"), null);\n+                byte[] class_bytes = ClassUnloadCommon.getClassData(name);\n+                return defineClass(name, class_bytes, 0, class_bytes.length);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/loadLibraryTest\/LoadLibraryTest.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/UmodDiffCL_Umod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/UmodDiffCL_UmodUpkg.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/UmodUpkgDiffCL_Umod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/UmodUpkg_Umod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/Umod_UmodUpkg.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n@@ -52,1 +53,1 @@\n-        byte[] data = getClassData(name);\n+        byte[] data = ClassUnloadCommon.getClassData(name);\n@@ -55,15 +56,0 @@\n-    byte[] getClassData(String name) {\n-        try {\n-           String TempName = name.replaceAll(\"\\\\.\", \"\/\");\n-           String currentDir = System.getProperty(\"test.classes\");\n-           String filename = currentDir + File.separator + TempName + \".class\";\n-           FileInputStream fis = new FileInputStream(filename);\n-           byte[] b = new byte[5000];\n-           int cnt = fis.read(b, 0, 5000);\n-           byte[] c = new byte[cnt];\n-           for (int i=0; i<cnt; i++) c[i] = b[i];\n-              return c;\n-        } catch (IOException e) {\n-           return null;\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/myloaders\/MyDiffClassLoader.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n@@ -48,1 +49,1 @@\n-        byte[] data = getClassData(name);\n+        byte[] data = ClassUnloadCommon.getClassData(name);\n@@ -51,15 +52,0 @@\n-    byte[] getClassData(String name) {\n-        try {\n-           String TempName = name.replaceAll(\"\\\\.\", \"\/\");\n-           String currentDir = System.getProperty(\"test.classes\");\n-           String filename = currentDir + File.separator + TempName + \".class\";\n-           FileInputStream fis = new FileInputStream(filename);\n-           byte[] b = new byte[5000];\n-           int cnt = fis.read(b, 0, 5000);\n-           byte[] c = new byte[cnt];\n-           for (int i=0; i<cnt; i++) c[i] = b[i];\n-              return c;\n-        } catch (IOException e) {\n-           return null;\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/AccessCheck\/myloaders\/MySameClassLoader.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/test\/lib ..\n+ * @library \/test\/lib\n@@ -43,0 +43,2 @@\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+\n@@ -211,1 +213,1 @@\n-        byte[] data = getClassData(name);\n+        byte[] data = ClassUnloadCommon.getClassData(name);\n@@ -214,16 +216,0 @@\n-\n-    byte[] getClassData(String name) {\n-        try {\n-           String TempName = name.replaceAll(\"\\\\.\", \"\/\");\n-           String currentDir = System.getProperty(\"test.classes\");\n-           String filename = currentDir + File.separator + TempName + \".class\";\n-           FileInputStream fis = new FileInputStream(filename);\n-           byte[] b = new byte[5000];\n-           int cnt = fis.read(b, 0, 5000);\n-           byte[] c = new byte[cnt];\n-           for (int i=0; i<cnt; i++) c[i] = b[i];\n-              return c;\n-        } catch (IOException e) {\n-           return null;\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/CCE_module_msg.java","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * To use ClassUnloadCommon from a sub-process, see hotspot\/test\/runtime\/logging\/ClassLoadUnloadTest.java\n- * for an example.\n- *\/\n-\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.stream.Stream;\n-\n-public class ClassUnloadCommon {\n-    public static class TestFailure extends RuntimeException {\n-        TestFailure(String msg) {\n-            super(msg);\n-        }\n-    }\n-\n-    public static void failIf(boolean value, String msg) {\n-        if (value) throw new TestFailure(\"Test failed: \" + msg);\n-    }\n-\n-    private static volatile Object dummy = null;\n-    private static void allocateMemory(int kilobytes) {\n-        ArrayList<byte[]> l = new ArrayList<>();\n-        dummy = l;\n-        for (int i = kilobytes; i > 0; i -= 1) {\n-            l.add(new byte[1024]);\n-        }\n-        l = null;\n-        dummy = null;\n-    }\n-\n-    public static void triggerUnloading() {\n-        allocateMemory(16 * 1024); \/\/ force young collection\n-        System.gc();\n-    }\n-\n-    \/**\n-     * Creates a class loader that loads classes from {@code ${test.class.path}}\n-     * before delegating to the system class loader.\n-     *\/\n-    public static ClassLoader newClassLoader() {\n-        String cp = System.getProperty(\"test.class.path\", \".\");\n-        URL[] urls = Stream.of(cp.split(File.pathSeparator))\n-                .map(Paths::get)\n-                .map(ClassUnloadCommon::toURL)\n-                .toArray(URL[]::new);\n-        return new URLClassLoader(\"ClassUnloadCommonClassLoader\", urls, new ClassUnloadCommon().getClass().getClassLoader()) {\n-            @Override\n-            public Class<?> loadClass(String cn, boolean resolve)\n-                throws ClassNotFoundException\n-            {\n-                synchronized (getClassLoadingLock(cn)) {\n-                    Class<?> c = findLoadedClass(cn);\n-                    if (c == null) {\n-                        try {\n-                            c = findClass(cn);\n-                        } catch (ClassNotFoundException e) {\n-                            c = getParent().loadClass(cn);\n-                        }\n-\n-                    }\n-                    if (resolve) {\n-                        resolveClass(c);\n-                    }\n-                    return c;\n-                }\n-            }\n-        };\n-    }\n-\n-    static URL toURL(Path path) {\n-        try {\n-            return path.toUri().toURL();\n-        } catch (MalformedURLException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/\/ Get data for pre-compiled class file to load.\n-    public static byte[] getClassData(String name) {\n-        try {\n-           String TempName = name.replaceAll(\"\\\\.\", \"\/\");\n-           String currentDir = System.getProperty(\"test.classes\");\n-           String filename = currentDir + File.separator + TempName + \".class\";\n-           System.out.println(\"filename is \" + filename);\n-           FileInputStream fis = new FileInputStream(filename);\n-           byte[] b = new byte[5000];\n-           int cnt = fis.read(b, 0, 5000);\n-           byte[] c = new byte[cnt];\n-           for (int i=0; i<cnt; i++) c[i] = b[i];\n-              return c;\n-        } catch (IOException e) {\n-           return null;\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/testlibrary\/ClassUnloadCommon.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * To use ClassUnloadCommon from a sub-process, see hotspot\/test\/runtime\/logging\/ClassLoadUnloadTest.java\n+ * for an example.\n+ *\/\n+\n+\n+package jdk.test.lib.classloader;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class ClassUnloadCommon {\n+    public static class TestFailure extends RuntimeException {\n+        TestFailure(String msg) {\n+            super(msg);\n+        }\n+    }\n+\n+    public static void failIf(boolean value, String msg) {\n+        if (value) throw new TestFailure(\"Test failed: \" + msg);\n+    }\n+\n+    private static volatile Object dummy = null;\n+    private static void allocateMemory(int kilobytes) {\n+        ArrayList<byte[]> l = new ArrayList<>();\n+        dummy = l;\n+        for (int i = kilobytes; i > 0; i -= 1) {\n+            l.add(new byte[1024]);\n+        }\n+        l = null;\n+        dummy = null;\n+    }\n+\n+    public static void triggerUnloading() {\n+        allocateMemory(16 * 1024); \/\/ force young collection\n+        System.gc();\n+    }\n+\n+    \/**\n+     * Creates a class loader that loads classes from {@code ${test.class.path}}\n+     * before delegating to the system class loader.\n+     *\/\n+    public static ClassLoader newClassLoader() {\n+        String cp = System.getProperty(\"test.class.path\", \".\");\n+        URL[] urls = Stream.of(cp.split(File.pathSeparator))\n+                .map(Paths::get)\n+                .map(ClassUnloadCommon::toURL)\n+                .toArray(URL[]::new);\n+        return new URLClassLoader(\"ClassUnloadCommonClassLoader\", urls, new ClassUnloadCommon().getClass().getClassLoader()) {\n+            @Override\n+            public Class<?> loadClass(String cn, boolean resolve)\n+                throws ClassNotFoundException\n+            {\n+                synchronized (getClassLoadingLock(cn)) {\n+                    Class<?> c = findLoadedClass(cn);\n+                    if (c == null) {\n+                        try {\n+                            c = findClass(cn);\n+                        } catch (ClassNotFoundException e) {\n+                            c = getParent().loadClass(cn);\n+                        }\n+\n+                    }\n+                    if (resolve) {\n+                        resolveClass(c);\n+                    }\n+                    return c;\n+                }\n+            }\n+        };\n+    }\n+\n+    static URL toURL(Path path) {\n+        try {\n+            return path.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/\/ Get data for pre-compiled class file to load.\n+    public static byte[] getClassData(String name) {\n+        try {\n+            String tempName = name.replaceAll(\"\\\\.\", \"\/\");\n+            return ClassUnloadCommon.class.getClassLoader().getResourceAsStream(tempName + \".class\").readAllBytes();\n+        } catch (Exception e) {\n+              return null;\n+        }\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/ClassUnloadCommon.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package jdk.test.lib.classloader;\n+\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/ClassWithManyMethodsClassLoader.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/runtime\/testlibrary\/ClassWithManyMethodsClassLoader.java","status":"renamed"}]}