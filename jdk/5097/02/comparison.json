{"files":[{"patch":"@@ -357,0 +357,21 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public long transferTo(OutputStream out) throws IOException {\n+        long transferred = 0L;\n+        if (out instanceof FileOutputStream fos) {\n+            FileChannel fc = getChannel();\n+            long pos = fc.position();\n+            long count = fc.size() - pos;\n+            if (pos >= 0 && count >= 0) {\n+                transferred = fc.transferTo(pos, Long.MAX_VALUE, fos.getChannel());\n+                long newPos = pos + transferred;\n+                fc.position(newPos);\n+                if (newPos >= fc.size()) {\n+                    return transferred;\n+                }\n+            }\n+        }\n+        return transferred + super.transferTo(out);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main TransferTo\n+ * @bug 8272297\n+ * @summary Test FileInputStream.transferTo(FileOutputStream)\n+ * @key randomness\n+ *\/\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+import jdk.test.lib.RandomFactory;\n+\n+public class TransferTo {\n+    private static int MIN_SIZE      = 10_000;\n+    private static int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n+\n+    private static int ITERATIONS = 10;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    public static void main(String[] args) throws IOException {\n+        File dir = new File(\".\");\n+        File in = File.createTempFile(\"src\", \".dat\", dir);\n+        in.deleteOnExit();\n+\n+        int length = MIN_SIZE + RND.nextInt(MAX_SIZE_INCR);\n+        byte[] bytes = new byte[length];\n+\n+        try (RandomAccessFile rafi = new RandomAccessFile(in, \"rw\")) {\n+            rafi.write(bytes);\n+        }\n+\n+        File out = File.createTempFile(\"dst\", \".dat\", dir);\n+        out.deleteOnExit();\n+\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            int posIn = RND.nextInt(length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+\n+            try (RandomAccessFile rafo = new RandomAccessFile(out, \"rw\")) {\n+                rafo.setLength(posOut);\n+            }\n+\n+            test(in, posIn, out, posOut);\n+\n+            out.delete();\n+            out = File.createTempFile(\"dst\", \".dat\", dir);\n+            out.deleteOnExit();\n+        }\n+    }\n+\n+    private static void test(File in, int posIn, File out, int posOut)\n+        throws IOException {\n+        try (FileInputStream fis = new FileInputStream(in)) {\n+            try (FileChannel fci = fis.getChannel()) {\n+                fci.position(posIn);\n+                long size = fci.size();\n+                long length = size - posIn;\n+                int count = Math.toIntExact(length);\n+\n+                try (FileOutputStream fos = new FileOutputStream(out)) {\n+                    try (FileChannel fco = fos.getChannel()) {\n+                        fco.position(posOut);\n+\n+                        long transferred = fis.transferTo(fos);\n+                        if (transferred != count)\n+                            fail(posIn, size, posOut,\n+                                \"Transferred \" + transferred +\n+                                \", expected \" + count);\n+\n+                        if (fci.position() != posIn + count)\n+                            fail(posIn, size, posOut,\n+                                \"Input position \" + fci.position() +\n+                                \", expected \" + posIn + count);\n+\n+                        if (fco.position() != posOut + count)\n+                            fail(posIn, size, posOut,\n+                                \"Output position \" + fco.position() +\n+                                \", expected \" + posOut + count);\n+\n+                        byte[] bytesIn = Files.readAllBytes(in.toPath());\n+                        byte[] bytesOut = Files.readAllBytes(out.toPath());\n+                        if (!Arrays.equals(bytesIn, posIn, posIn + count,\n+                                           bytesOut, posOut, posOut + count))\n+                            fail(posIn, size, posOut, \"Contents unequal\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void fail(int posIn, long size, int posOut,\n+                             String msg) {\n+        System.out.printf(\"Failure for posIn %s, size %d, posOut %d%n\",\n+                          posIn, size, posOut);\n+        throw new RuntimeException(msg);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/FileInputStream\/TransferTo.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"}]}