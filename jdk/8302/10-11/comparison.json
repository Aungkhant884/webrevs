{"files":[{"patch":"@@ -54,1 +54,1 @@\n- * @bug 8186958 8210280 8281631\n+ * @bug 8186958 8210280 8281631 8284780\n@@ -64,0 +64,1 @@\n+    final VarHandle HS_MAP;\n@@ -73,0 +74,3 @@\n+\n+        MethodHandles.Lookup hslookup = MethodHandles.privateLookupIn(HashSet.class, MethodHandles.lookup());\n+        HS_MAP = hslookup.unreflectVarHandle(HashSet.class.getDeclaredField(\"map\"));\n@@ -334,1 +338,1 @@\n-                 Supplier<Map<String, String>> supplier) {\n+                 Supplier<Capacitiable> supplier) {\n@@ -340,21 +344,5 @@\n-                rsc(\"rshm\", size, cap, () -> HashMap.newHashMap(size)),\n-                rsc(\"rslm\", size, cap, () -> LinkedHashMap.newLinkedHashMap(size)),\n-                rsc(\"rswm\", size, cap, () -> WeakHashMap.newWeakHashMap(size)),\n-                rsc(\"rshs\", size, cap, () -> {\n-                    try {\n-                        Field mapField = HashSet.class.getDeclaredField(\"map\");\n-                        HashSet<String> set = HashSet.newHashSet(size);\n-                        return (Map<String, String>) mapField.get(set);\n-                    } catch (Exception e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                }),\n-                rsc(\"rsls\", size, cap, () -> {\n-                    try {\n-                        Field mapField = HashSet.class.getDeclaredField(\"map\");\n-                        LinkedHashSet<String> set = LinkedHashSet.newLinkedHashSet(size);\n-                        return (Map<String, String>) mapField.get(set);\n-                    } catch (Exception e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                })\n+                rsc(\"rshm\", size, cap, () -> new MapCapacitiable(HashMap.newHashMap(size))),\n+                rsc(\"rslm\", size, cap, () -> new MapCapacitiable(LinkedHashMap.newLinkedHashMap(size))),\n+                rsc(\"rswm\", size, cap, () -> new MapCapacitiable(WeakHashMap.newWeakHashMap(size))),\n+                rsc(\"rshs\", size, cap, () -> new SetCapacitiable(HashSet.newHashSet(size))),\n+                rsc(\"rsls\", size, cap, () -> new SetCapacitiable(LinkedHashSet.newLinkedHashSet(size)))\n@@ -388,4 +376,12 @@\n-                              Supplier<Map<String, String>> s) {\n-        Map<String, String> map = s.get();\n-        map.put(\"\", \"\");\n-        assertEquals(capacity(map), expectedCapacity);\n+                              Supplier<Capacitiable> s) {\n+        Capacitiable capacitiable = s.get();\n+        capacitiable.init();\n+        assertEquals(capacitiable.capacity(), expectedCapacity);\n+    }\n+\n+    interface Capacitiable {\n+\n+        void init();\n+\n+        int capacity();\n+\n@@ -393,0 +389,53 @@\n+\n+    class MapCapacitiable implements Capacitiable {\n+\n+        private final Map<String, String> content;\n+\n+        public MapCapacitiable(Map<String, String> content) {\n+            this.content = content;\n+        }\n+\n+        @Override\n+        public void init() {\n+            if (content != null) {\n+                content.put(\"\", \"\");\n+            }\n+        }\n+\n+        @Override\n+        public int capacity() {\n+            if (content == null) {\n+                return -1;\n+            }\n+            return table(content).length;\n+        }\n+    }\n+\n+    class SetCapacitiable implements Capacitiable {\n+\n+        private final Set<String> content;\n+\n+        public SetCapacitiable(Set<String> content) {\n+            this.content = content;\n+        }\n+\n+        @Override\n+        public void init() {\n+            if (content != null) {\n+                content.add(\"\");\n+            }\n+        }\n+\n+        @Override\n+        public int capacity() {\n+            if (content == null) {\n+                return -1;\n+            }\n+            HashMap<?, ?> hashMap = (HashMap<?, ?>) HS_MAP.get(content);\n+            if (hashMap == null) {\n+                return -1;\n+            }\n+            return table(hashMap).length;\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":76,"deletions":27,"binary":false,"changes":103,"status":"modified"}]}