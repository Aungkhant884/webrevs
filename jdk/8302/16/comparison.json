{"files":[{"patch":"@@ -59,1 +59,1 @@\n-        validTypes = new HashSet<>(17);\n+        validTypes = HashSet.newHashSet(17);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKeyFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1651,1 +1651,1 @@\n-        Set<String> fieldNames = new HashSet<>(serialPersistentFields.length);\n+        Set<String> fieldNames = HashSet.newHashSet(serialPersistentFields.length);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-            Set<String> itfs = new LinkedHashSet<>(altInterfaces.length + 1);\n+            Set<String> itfs = LinkedHashSet.newLinkedHashSet(altInterfaces.length + 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -721,1 +721,1 @@\n-        HashSet<String> hs = new HashSet<>(n);\n+        HashSet<String> hs = HashSet.newHashSet(n);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-        Set<Locale> locales = new HashSet<>(l.length);\n+        Set<Locale> locales = HashSet.newHashSet(l.length);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DecimalStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2645,1 +2645,1 @@\n-            Set<String> set = new HashSet<>(3);\n+            Set<String> set = HashSet.newHashSet(3);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Calendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,0 +128,4 @@\n+     * @apiNote\n+     * To create a {@code HashSet} with an initial capacity that accommodates\n+     * an expected number of elements, use {@link #newHashSet(int) newHashSet}.\n+     *\n@@ -141,0 +145,4 @@\n+     * @apiNote\n+     * To create a {@code HashSet} with an initial capacity that accommodates\n+     * an expected number of elements, use {@link #newHashSet(int) newHashSet}.\n+     *\n@@ -375,0 +383,17 @@\n+\n+    \/**\n+     * Creates a new, empty HashSet suitable for the expected number of elements.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of elements can be added\n+     * without resizing the set.\n+     *\n+     * @param numElements    the expected number of elements\n+     * @param <E>         the type of elements maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numElements is negative\n+     * @since 19\n+     *\/\n+    public static <E> HashSet<E> newHashSet(int numElements) {\n+        return new HashSet<>(HashMap.calculateHashMapCapacity(numElements));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -129,0 +129,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashSet} with an initial capacity that accommodates\n+     * an expected number of elements, use {@link #newLinkedHashSet(int) newLinkedHashSet}.\n+     *\n@@ -142,0 +146,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashSet} with an initial capacity that accommodates\n+     * an expected number of elements, use {@link #newLinkedHashSet(int) newLinkedHashSet}.\n+     *\n@@ -169,1 +177,1 @@\n-        super(Math.max(2*c.size(), 11), .75f, true);\n+        super(HashMap.calculateHashMapCapacity(Math.max(c.size(), 12)), .75f, true);\n@@ -196,0 +204,17 @@\n+\n+    \/**\n+     * Creates a new, empty LinkedHashSet suitable for the expected number of elements.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of elements can be added\n+     * without resizing the set.\n+     *\n+     * @param numElements    the expected number of elements\n+     * @param <E>         the type of elements maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numElements is negative\n+     * @since 19\n+     *\/\n+    public static <E> LinkedHashSet<E> newLinkedHashSet(int numElements) {\n+        return new LinkedHashSet<>(HashMap.calculateHashMapCapacity(numElements));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-                    Set<String> targets = new HashSet<>(exports_to_count);\n+                    Set<String> targets = HashSet.newHashSet(exports_to_count);\n@@ -489,1 +489,1 @@\n-                    Set<String> targets = new HashSet<>(open_to_count);\n+                    Set<String> targets = HashSet.newHashSet(open_to_count);\n@@ -543,1 +543,1 @@\n-        Set<String> packages = new HashSet<>(package_count);\n+        Set<String> packages = HashSet.newHashSet(package_count);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-            restrictedHeaderSet = new HashSet<>(restrictedHeaders.length);\n+            restrictedHeaderSet = HashSet.newHashSet(restrictedHeaders.length);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-            HashSet<SocketOption<?>> set = new HashSet<>(2);\n+            HashSet<SocketOption<?>> set = HashSet.newHashSet(2);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-            HashSet<SocketOption<?>> set = new HashSet<>(5);\n+            HashSet<SocketOption<?>> set = HashSet.newHashSet(5);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        Set<WatchEvent.Kind<?>> eventSet = new HashSet<>(events.length);\n+        Set<WatchEvent.Kind<?>> eventSet = HashSet.newHashSet(events.length);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractPoller.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        final Set<WatchEvent.Kind<?>> eventSet = new HashSet<>(events.length);\n+        final Set<WatchEvent.Kind<?>> eventSet = HashSet.newHashSet(events.length);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -517,1 +517,1 @@\n-            Set<X509CRLImpl> implCRLs = new HashSet<>(crls.length);\n+            Set<X509CRLImpl> implCRLs = HashSet.newHashSet(crls.length);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            supportedExts = new HashSet<String>(2);\n+            supportedExts = HashSet.newHashSet(2);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ConstraintsChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,2 +84,2 @@\n-        trustedCerts = new HashSet<X509Certificate>(trustAnchors.size());\n-        trustedSubjectDNs = new HashSet<X500Principal>(trustAnchors.size());\n+        trustedCerts = HashSet.newHashSet(trustAnchors.size());\n+        trustedSubjectDNs = HashSet.newHashSet(trustAnchors.size());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ForwardBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            supportedExts = new HashSet<String>(3);\n+            supportedExts = HashSet.newHashSet(3);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/KeyChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            this.initPolicies = new HashSet<String>(1);\n+            this.initPolicies = HashSet.newHashSet(1);\n@@ -157,1 +157,1 @@\n-            supportedExts = new HashSet<String>(4);\n+            supportedExts = HashSet.newHashSet(4);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PolicyChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -576,1 +576,1 @@\n-                                    new HashSet<>(subjectAltNames.size());\n+                                    HashSet.newHashSet(subjectAltNames.size());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-            this.issuerX500Principals = new HashSet<>(certificates.length);\n+            this.issuerX500Principals = HashSet.newHashSet(certificates.length);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-            Set<CaseInsensitiveChar> done = new HashSet<>(bcpExtensions.size());\n+            Set<CaseInsensitiveChar> done = HashSet.newHashSet(bcpExtensions.size());\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/InternalLocaleBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        LinkedHashSet<String> sp = new LinkedHashSet<>(subprotocols.size(), 1);\n+        LinkedHashSet<String> sp = LinkedHashSet.newLinkedHashSet(subprotocols.size());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/OpeningHandshake.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-            s = new HashSet<TCPTransport>(localEndpoints.size());\n+            s = HashSet.newHashSet(localEndpoints.size());\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPEndpoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3312,1 +3312,1 @@\n-                perms = new HashSet<>(PosixFilePermission.values().length);\n+                perms = HashSet.newHashSet(PosixFilePermission.values().length);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        HashSet<Reference<?>> pending = new HashSet<>(3);\n+        HashSet<Reference<?>> pending = HashSet.newHashSet(3);\n","filename":"test\/jdk\/java\/io\/RandomAccessFile\/UnreferencedRAFClosesFd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    private static Set<String> envToRm = new HashSet<>(3);\n+    private static Set<String> envToRm = HashSet.newHashSet(3);\n","filename":"test\/jdk\/java\/lang\/System\/MacEncoding\/TestFileEncoding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-        Set<Attribute> set = new HashSet<>(Math.max(1, names.size()));\n+        Set<Attribute> set = HashSet.newHashSet(names.size());\n","filename":"test\/jdk\/java\/text\/Format\/common\/FormatIteratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.Field;\n@@ -37,0 +38,1 @@\n+import java.util.HashSet;\n@@ -39,0 +41,1 @@\n+import java.util.LinkedHashSet;\n@@ -51,1 +54,1 @@\n- * @bug 8186958 8210280 8281631 8285386\n+ * @bug 8186958 8210280 8281631 8285386 8284780\n@@ -61,0 +64,1 @@\n+    final VarHandle HS_MAP;\n@@ -70,0 +74,3 @@\n+\n+        MethodHandles.Lookup hslookup = MethodHandles.privateLookupIn(HashSet.class, MethodHandles.lookup());\n+        HS_MAP = hslookup.unreflectVarHandle(HashSet.class.getDeclaredField(\"map\"));\n@@ -331,1 +338,1 @@\n-                 Supplier<Map<String, String>> supplier) {\n+                 Supplier<Capacitiable> supplier) {\n@@ -337,3 +344,5 @@\n-                rsc(\"rshm\", size, cap, () -> HashMap.newHashMap(size)),\n-                rsc(\"rslm\", size, cap, () -> LinkedHashMap.newLinkedHashMap(size)),\n-                rsc(\"rswm\", size, cap, () -> WeakHashMap.newWeakHashMap(size))\n+                rsc(\"rshm\", size, cap, () -> new MapCapacitiable(HashMap.newHashMap(size))),\n+                rsc(\"rslm\", size, cap, () -> new MapCapacitiable(LinkedHashMap.newLinkedHashMap(size))),\n+                rsc(\"rswm\", size, cap, () -> new MapCapacitiable(WeakHashMap.newWeakHashMap(size))),\n+                rsc(\"rshs\", size, cap, () -> new SetCapacitiable(HashSet.newHashSet(size))),\n+                rsc(\"rsls\", size, cap, () -> new SetCapacitiable(LinkedHashSet.newLinkedHashSet(size)))\n@@ -367,4 +376,12 @@\n-                              Supplier<Map<String, String>> s) {\n-        Map<String, String> map = s.get();\n-        map.put(\"\", \"\");\n-        assertEquals(capacity(map), expectedCapacity);\n+                              Supplier<Capacitiable> s) {\n+        Capacitiable capacitiable = s.get();\n+        capacitiable.init();\n+        assertEquals(capacitiable.capacity(), expectedCapacity);\n+    }\n+\n+    interface Capacitiable {\n+\n+        void init();\n+\n+        int capacity();\n+\n@@ -372,0 +389,53 @@\n+\n+    class MapCapacitiable implements Capacitiable {\n+\n+        private final Map<String, String> content;\n+\n+        public MapCapacitiable(Map<String, String> content) {\n+            this.content = content;\n+        }\n+\n+        @Override\n+        public void init() {\n+            if (content != null) {\n+                content.put(\"\", \"\");\n+            }\n+        }\n+\n+        @Override\n+        public int capacity() {\n+            if (content == null) {\n+                return -1;\n+            }\n+            return table(content).length;\n+        }\n+    }\n+\n+    class SetCapacitiable implements Capacitiable {\n+\n+        private final Set<String> content;\n+\n+        public SetCapacitiable(Set<String> content) {\n+            this.content = content;\n+        }\n+\n+        @Override\n+        public void init() {\n+            if (content != null) {\n+                content.add(\"\");\n+            }\n+        }\n+\n+        @Override\n+        public int capacity() {\n+            if (content == null) {\n+                return -1;\n+            }\n+            HashMap<?, ?> hashMap = (HashMap<?, ?>) HS_MAP.get(content);\n+            if (hashMap == null) {\n+                return -1;\n+            }\n+            return table(hashMap).length;\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":79,"deletions":9,"binary":false,"changes":88,"status":"modified"}]}