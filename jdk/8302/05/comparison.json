{"files":[{"patch":"@@ -59,1 +59,1 @@\n-        validTypes = new HashSet<>(17);\n+        validTypes = HashSet.newHashSet(17);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKeyFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1651,1 +1651,1 @@\n-        Set<String> fieldNames = new HashSet<>(serialPersistentFields.length);\n+        Set<String> fieldNames = HashSet.newHashSet(serialPersistentFields.length);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-            Set<String> itfs = new LinkedHashSet<>(altInterfaces.length + 1);\n+            Set<String> itfs = LinkedHashSet.newLinkedHashSet(altInterfaces.length + 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-        HashSet<String> hs = new HashSet<>(n);\n+        HashSet<String> hs = HashSet.newHashSet(n);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-        Set<Locale> locales = new HashSet<>(l.length);\n+        Set<Locale> locales = HashSet.newHashSet(l.length);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DecimalStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2645,1 +2645,1 @@\n-            Set<String> set = new HashSet<>(3);\n+            Set<String> set = HashSet.newHashSet(3);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Calendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,0 +128,4 @@\n+     * @apiNote\n+     * To create a {@code HashSet} with an initial capacity that accommodates\n+     * an expected number of items, use {@link #newHashSet(int) newHashSet}.\n+     *\n@@ -141,0 +145,4 @@\n+     * @apiNote\n+     * To create a {@code HashSet} with an initial capacity that accommodates\n+     * an expected number of items, use {@link #newHashSet(int) newHashSet}.\n+     *\n@@ -375,0 +383,17 @@\n+\n+    \/**\n+     * Creates a new, empty HashSet suitable for the expected number of items.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of items can be added\n+     * without resizing the set.\n+     *\n+     * @param numItems    the expected number of items\n+     * @param <E>         the type of keys maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numItems is negative\n+     * @since 19\n+     *\/\n+    public static <E> HashSet<E> newHashSet(int numItems) {\n+        return new HashSet<>(HashMap.calculateHashMapCapacity(numItems));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -129,0 +129,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashSet} with an initial capacity that accommodates\n+     * an expected number of items, use {@link #newLinkedHashSet(int) newLinkedHashSet}.\n+     *\n@@ -142,0 +146,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashSet} with an initial capacity that accommodates\n+     * an expected number of items, use {@link #newLinkedHashSet(int) newLinkedHashSet}.\n+     *\n@@ -169,1 +177,1 @@\n-        super(Math.max(2*c.size(), 11), .75f, true);\n+        super(HashMap.calculateHashMapCapacity(Math.max(c.size(), 12)), .75f, true);\n@@ -196,0 +204,17 @@\n+\n+    \/**\n+     * Creates a new, empty, insertion-ordered LinkedHashSet suitable for the expected number of items.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of items can be added\n+     * without resizing the set.\n+     *\n+     * @param numItems    the expected number of items\n+     * @param <E>         the type of keys maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numItems is negative\n+     * @since 19\n+     *\/\n+    public static <E> LinkedHashSet<E> newLinkedHashSet(int numItems) {\n+        return new LinkedHashSet<>(HashMap.calculateHashMapCapacity(numItems));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-                    Set<String> targets = new HashSet<>(exports_to_count);\n+                    Set<String> targets = HashSet.newHashSet(exports_to_count);\n@@ -489,1 +489,1 @@\n-                    Set<String> targets = new HashSet<>(open_to_count);\n+                    Set<String> targets = HashSet.newHashSet(open_to_count);\n@@ -543,1 +543,1 @@\n-        Set<String> packages = new HashSet<>(package_count);\n+        Set<String> packages = HashSet.newHashSet(package_count);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-            restrictedHeaderSet = new HashSet<>(restrictedHeaders.length);\n+            restrictedHeaderSet = HashSet.newHashSet(restrictedHeaders.length);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-            HashSet<SocketOption<?>> set = new HashSet<>(2);\n+            HashSet<SocketOption<?>> set = HashSet.newHashSet(2);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-            HashSet<SocketOption<?>> set = new HashSet<>(5);\n+            HashSet<SocketOption<?>> set = HashSet.newHashSet(5);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        Set<WatchEvent.Kind<?>> eventSet = new HashSet<>(events.length);\n+        Set<WatchEvent.Kind<?>> eventSet = HashSet.newHashSet(events.length);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractPoller.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        final Set<WatchEvent.Kind<?>> eventSet = new HashSet<>(events.length);\n+        final Set<WatchEvent.Kind<?>> eventSet = HashSet.newHashSet(events.length);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -517,1 +517,1 @@\n-            Set<X509CRLImpl> implCRLs = new HashSet<>(crls.length);\n+            Set<X509CRLImpl> implCRLs = HashSet.newHashSet(crls.length);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            supportedExts = new HashSet<String>(2);\n+            supportedExts = HashSet.newHashSet(2);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ConstraintsChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,2 +84,2 @@\n-        trustedCerts = new HashSet<X509Certificate>(trustAnchors.size());\n-        trustedSubjectDNs = new HashSet<X500Principal>(trustAnchors.size());\n+        trustedCerts = HashSet.newHashSet(trustAnchors.size());\n+        trustedSubjectDNs = HashSet.newHashSet(trustAnchors.size());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ForwardBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            supportedExts = new HashSet<String>(3);\n+            supportedExts = HashSet.newHashSet(3);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/KeyChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            this.initPolicies = new HashSet<String>(1);\n+            this.initPolicies = HashSet.newHashSet(1);\n@@ -157,1 +157,1 @@\n-            supportedExts = new HashSet<String>(4);\n+            supportedExts = HashSet.newHashSet(4);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PolicyChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -576,1 +576,1 @@\n-                                    new HashSet<>(subjectAltNames.size());\n+                                    HashSet.newHashSet(subjectAltNames.size());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-            this.issuerX500Principals = new HashSet<>(certificates.length);\n+            this.issuerX500Principals = HashSet.newHashSet(certificates.length);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        Set<String> tagset = new HashSet<>((tokens.countTokens() * 4 + 2) \/ 3);\n+        Set<String> tagset = HashSet.newHashSet(tokens.countTokens());\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRLocaleProviderAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-            Set<CaseInsensitiveChar> done = new HashSet<>(bcpExtensions.size());\n+            Set<CaseInsensitiveChar> done = HashSet.newHashSet(bcpExtensions.size());\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/InternalLocaleBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-        Set<String> tagset = new HashSet<>((tokens.countTokens() * 4 + 2) \/ 3);\n+        Set<String> tagset = HashSet.newHashSet(tokens.countTokens());\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/JRELocaleProviderAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            Set<PackageElement> result = new LinkedHashSet<>(1); \/\/ Usually expect at most 1 result\n+            Set<PackageElement> result = LinkedHashSet.newHashSet(1); \/\/ Usually expect at most 1 result\n@@ -212,1 +212,1 @@\n-            Set<TypeElement> result = new LinkedHashSet<>(1); \/\/ Usually expect at most 1 result\n+            Set<TypeElement> result = LinkedHashSet.newHashSet(1); \/\/ Usually expect at most 1 result\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-            list = new LinkedHashSet<>(1);\n+            list = LinkedHashSet.newLinkedHashSet(1);\n@@ -412,1 +412,1 @@\n-                flavors = new LinkedHashSet<>(1);\n+                flavors = LinkedHashSet.newLinkedHashSet(1);\n@@ -419,1 +419,1 @@\n-                    natives = new LinkedHashSet<>(1);\n+                    natives = LinkedHashSet.newLinkedHashSet(1);\n@@ -464,1 +464,1 @@\n-                natives = new LinkedHashSet<>(1);\n+                natives = LinkedHashSet.newLinkedHashSet(1);\n@@ -470,1 +470,1 @@\n-                    flavors = new LinkedHashSet<>(1);\n+                    flavors = LinkedHashSet.newLinkedHashSet(1);\n@@ -848,1 +848,1 @@\n-            natives = new LinkedHashSet<>(1);\n+            natives = LinkedHashSet.newLinkedHashSet(1);\n@@ -917,1 +917,1 @@\n-            flavors = new LinkedHashSet<>(1);\n+            flavors = LinkedHashSet.newLinkedHashSet(1);\n","filename":"src\/java.datatransfer\/share\/classes\/java\/awt\/datatransfer\/SystemFlavorMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            ignoredRoles = new HashSet<String>(roles.length);\n+            ignoredRoles = HashSet.newHashSet(roles.length);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-                managingFocusForwardTraversalKeys = new HashSet<KeyStroke>(1);\n+                managingFocusForwardTraversalKeys = HashSet.newHashSet(1);\n@@ -505,1 +505,1 @@\n-                managingFocusBackwardTraversalKeys = new HashSet<KeyStroke>(1);\n+                managingFocusBackwardTraversalKeys = HashSet.newHashSet(1);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JComponent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-     private static final HashSet<Integer> extendedKeyCodesSet =\n-                                                  new HashSet<Integer>(496, 1.0f);\n+     private static final HashSet<Integer> extendedKeyCodesSet = HashSet.newHashSet(496);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/ExtendedKeyCodes.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -413,2 +413,2 @@\n-        Set<AbstractMap.SimpleEntry<Long, DataFlavor>> mappingSet = new HashSet<>(formats.length);\n-        Set<DataFlavor> flavorSet = new HashSet<>(formats.length);\n+        Set<AbstractMap.SimpleEntry<Long, DataFlavor>> mappingSet = HashSet.newHashSet(formats.length);\n+        Set<DataFlavor> flavorSet = HashSet.newHashSet(formats.length);\n@@ -485,1 +485,1 @@\n-        Set<DataFlavor> flavorSet = new HashSet<>(formats.length);\n+        Set<DataFlavor> flavorSet = HashSet.newHashSet(formats.length);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/DataTransferer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-        Set<String> s = new HashSet<String>(1);\n+        Set<String> s = HashSet.newHashSet(1);\n@@ -137,1 +137,1 @@\n-        Set<String> s = new HashSet<String>(interfaces.length);\n+        Set<String> s = HashSet.newHashSet(interfaces.length);\n@@ -167,1 +167,1 @@\n-        Set<String> s = new HashSet<String>(1);\n+        Set<String> s = HashSet.newHashSet(1);\n@@ -181,1 +181,1 @@\n-        Set<String> s = new HashSet<String>(interfaces.length);\n+        Set<String> s = HashSet.newHashSet(interfaces.length);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/TransferableProxy.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -383,1 +383,1 @@\n-        LinkedHashSet<String> natives = new LinkedHashSet<>(1);\n+        LinkedHashSet<String> natives = LinkedHashSet.newLinkedHashSet(1);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDataTransferer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-                Set<Long> childrenSet = new HashSet<Long>(childrenCount);\n+                Set<Long> childrenSet = HashSet.newHashSet(childrenCount);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XlibUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -479,2 +479,1 @@\n-            Set<ObjectInstance> allowedList =\n-                new HashSet<ObjectInstance>(list.size());\n+            Set<ObjectInstance> allowedList = HashSet.newHashSet(list.size());\n@@ -526,2 +525,1 @@\n-            Set<ObjectInstance> allowedList =\n-                new HashSet<ObjectInstance>(list.size());\n+            Set<ObjectInstance> allowedList = HashSet.newHashSet(list.size());\n@@ -542,1 +540,1 @@\n-            queryList = new HashSet<ObjectName>(queryObjectInstanceList.size());\n+            queryList = HashSet.newHashSet(queryObjectInstanceList.size());\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/interceptor\/DefaultMBeanServerInterceptor.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-    private final Collection<ShareBuffer> sharers = new HashSet<ShareBuffer>(1);\n+    private final Collection<ShareBuffer> sharers = HashSet.newHashSet(1);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/internal\/ArrayNotificationBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        LinkedHashSet<String> sp = new LinkedHashSet<>(subprotocols.size(), 1);\n+        LinkedHashSet<String> sp = LinkedHashSet.newLinkedHashSet(subprotocols.size());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/OpeningHandshake.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-            s = new HashSet<TCPTransport>(localEndpoints.size());\n+            s = HashSet.newHashSet(localEndpoints.size());\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPEndpoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-                        new HashSet<GSSCredentialSpi>(hashtable.size());\n+                        HashSet.newHashSet(hashtable.size());\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSCredentialImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-            privCredentials = new HashSet<Object>(gssCredentials.size());\n+            privCredentials = HashSet.newHashSet(gssCredentials.size());\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,1 +538,1 @@\n-        Set<Node> set = new HashSet<>(length);\n+        Set<Node> set = HashSet.newHashSet(length);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/XMLUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3846,1 +3846,1 @@\n-                            stringSet = new LinkedHashSet<>(1, 1.0f);\n+                            stringSet = LinkedHashSet.newLinkedHashSet(1);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-        Set<TypeElement> annotationSet = new LinkedHashSet<>(annotations.length);\n+        Set<TypeElement> annotationSet = LinkedHashSet.newHashSet(annotations.length);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacRoundEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,2 +461,1 @@\n-            Set<Modifier> modifiers = new LinkedHashSet<>();\n-            modifiers.addAll(e.getModifiers());\n+            Set<Modifier> modifiers = new LinkedHashSet<>(e.getModifiers());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -705,9 +705,5 @@\n-        \/\/ process modules\n-        Set<ModuleElement> imodules = new LinkedHashSet<>();\n-        \/\/ add all the expanded modules\n-        imodules.addAll(specifiedModuleElements);\n-\n-        \/\/ process packages\n-        Set<PackageElement> ipackages = new LinkedHashSet<>();\n-        \/\/ add all packages belonging to expanded modules\n-        ipackages.addAll(expandedModulePackages);\n+        \/\/ process modules, and add all the expanded modules\n+        Set<ModuleElement> imodules = new LinkedHashSet<>(specifiedModuleElements);\n+\n+        \/\/ process packages, and add all packages belonging to expanded modules\n+        Set<PackageElement> ipackages = new LinkedHashSet<>(expandedModulePackages);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-            HashSet<Long> knownIds = new HashSet<>(eventClasses.size());\n+            HashSet<Long> knownIds = HashSet.newHashSet(eventClasses.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -552,2 +552,1 @@\n-        Set<String> uniqueCultures = new LinkedHashSet<>();\n-        uniqueCultures.addAll(cultures);\n+        Set<String> uniqueCultures = new LinkedHashSet<>(cultures);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        Set<Integer> activeSet = new HashSet<Integer>(active.length);\n+        Set<Integer> activeSet = HashSet.newHashSet(active.length);\n","filename":"src\/jdk.jstatd\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/rmi\/RemoteVmManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -698,1 +698,1 @@\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(10);\n+            HashSet<SctpSocketOption<?>> set = HashSet.newHashSet(10);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(10);\n+            HashSet<SctpSocketOption<?>> set = HashSet.newHashSet(10);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-         Set<SocketAddress> set = new HashSet<>(saa.length);\n+         Set<SocketAddress> set = HashSet.newHashSet(saa.length);\n@@ -139,1 +139,1 @@\n-            set = new HashSet<SocketAddress>(saa.length);\n+            set = HashSet.newHashSet(saa.length);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(1);\n+            HashSet<SctpSocketOption<?>> set = HashSet.newHashSet(1);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3319,1 +3319,1 @@\n-                perms = new HashSet<>(PosixFilePermission.values().length);\n+                perms = HashSet.newHashSet(PosixFilePermission.values().length);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        set = new LinkedHashSet<>(1);\n+        set = LinkedHashSet.newHashSet(1);\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                outputPorts.put(v1, new HashSet<Port>(1));\n+                outputPorts.put(v1, new HashSet<Port>(2));\n@@ -73,1 +73,1 @@\n-                outputPorts.put(v2, new HashSet<Port>(1));\n+                outputPorts.put(v2, new HashSet<Port>(2));\n@@ -95,1 +95,1 @@\n-                outputPorts.put(v, new HashSet<Port>(1));\n+                outputPorts.put(v, new HashSet<Port>(2));\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/src\/main\/java\/com\/sun\/hotspot\/igv\/layout\/LayoutGraph.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-                Set<Node> localSuccs = new HashSet<>(n.succs.size());\n+                Set<Node> localSuccs = HashSet.newHashSet(n.succs.size());\n@@ -347,1 +347,1 @@\n-        Set<Node> visited = new HashSet<Node>(nodes.size());\n+        Set<Node> visited = HashSet.newHashSet(nodes.size());\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        HashSet<Reference<?>> pending = new HashSet<>(3);\n+        HashSet<Reference<?>> pending = HashSet.newHashSet(3);\n","filename":"test\/jdk\/java\/io\/RandomAccessFile\/UnreferencedRAFClosesFd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    private static Set<String> envToRm = new HashSet<>(3);\n+    private static Set<String> envToRm = HashSet.newHashSet(3);\n","filename":"test\/jdk\/java\/lang\/System\/MacEncoding\/TestFileEncoding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-        Set<Attribute> set = new HashSet<>(Math.max(1, names.size()));\n+        Set<Attribute> set = HashSet.newHashSet(names.size());\n","filename":"test\/jdk\/java\/text\/Format\/common\/FormatIteratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}