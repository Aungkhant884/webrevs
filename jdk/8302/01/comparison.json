{"files":[{"patch":"@@ -375,0 +375,17 @@\n+\n+    \/**\n+     * Creates a new, empty HashSet suitable for the expected number of items.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of items can be added\n+     * without resizing the set.\n+     *\n+     * @param numItems    the expected number of items\n+     * @param <E>         the type of keys maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numItems is negative\n+     * @since 19\n+     *\/\n+    public static <E> HashSet<E> newHashSet(int numItems) {\n+        return new HashSet<>(HashMap.calculateHashMapCapacity(numItems));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-        super(Math.max(2*c.size(), 11), .75f, true);\n+        super(HashMap.calculateHashMapCapacity(Math.max(c.size(), 12)), .75f, true);\n@@ -196,0 +196,17 @@\n+\n+    \/**\n+     * Creates a new, empty, insertion-ordered LinkedHashSet suitable for the expected number of items.\n+     * The returned set uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of items can be added\n+     * without resizing the set.\n+     *\n+     * @param numItems    the expected number of items\n+     * @param <E>         the type of keys maintained by this set\n+     * @return the newly created set\n+     * @throws IllegalArgumentException if numItems is negative\n+     * @since 19\n+     *\/\n+    public static <E> LinkedHashSet<E> newLinkedHashSet(int numItems) {\n+        return new LinkedHashSet<>(HashMap.calculateHashMapCapacity(numItems));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}