{"files":[{"patch":"@@ -374,2 +374,0 @@\n-            if (memberMethod.isSynthetic())\n-                continue;\n@@ -472,8 +470,12 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Method[]>() {\n-                public Method[] run() {\n-                    final Method[] methods = type.getDeclaredMethods();\n-                    validateAnnotationMethods(methods);\n-                    AccessibleObject.setAccessible(methods, true);\n-                    return methods;\n-                }});\n+        return AccessController.doPrivileged((PrivilegedAction<Method[]>) () -> {\n+            final Method[] methods = Arrays.stream(type.getDeclaredMethods())\n+                    \/\/ Skip over synthetic methods. It may be a static initializer\n+                    \/\/ or similar construct. A static initializer may be used for\n+                    \/\/ purposes such as initializing a lambda stored in an\n+                    \/\/ interface field.\n+                    .filter(method -> !method.isSynthetic())\n+                    .toArray(Method[]::new);\n+            validateAnnotationMethods(methods);\n+            AccessibleObject.setAccessible(methods, true);\n+            return methods;\n+        });\n@@ -501,9 +503,0 @@\n-            \/\/ Skip over methods that may be a static initializer or\n-            \/\/ similar construct. A static initializer may be used for\n-            \/\/ purposes such as initializing a lambda stored in an\n-            \/\/ interface field.\n-            if (method.isSynthetic() &&\n-                (modifiers & (Modifier.STATIC | Modifier.PRIVATE)) != 0 &&\n-                method.getParameterCount() == 0) {\n-                continue;\n-            }\n@@ -579,5 +572,3 @@\n-        if (valid)\n-            return;\n-        else\n-            throw new AnnotationFormatError(\"Malformed method on an annotation type: \" +\n-                                            currentMethod.toString());\n+        if (!valid)\n+            throw new AnnotationFormatError(\"Malformed method on an annotation type: \"\n+                    + currentMethod);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationInvocationHandler.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.Function;\n@@ -62,1 +63,1 @@\n-    \/\/ Trigger creation of synthetic method to initialize r.\n+    \/\/ Trigger creation of synthetic method to initialize r and f.\n@@ -64,0 +65,1 @@\n+    public static final Function<Integer,Integer> f = x -> x;\n","filename":"test\/jdk\/java\/lang\/annotation\/EqualityTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}