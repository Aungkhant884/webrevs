{"files":[{"patch":"@@ -235,1 +235,1 @@\n-  return entry != nullptr && entry->definer_acquire() == thread;\n+  return entry != nullptr && entry->definer() == thread;\n@@ -291,1 +291,1 @@\n-\/\/ definer_acquire() tracks the single thread that owns define token\n+\/\/ definer() tracks the single thread that owns define token\n@@ -312,1 +312,1 @@\n-      && (probe->defineThreadQ() == nullptr) && (probe->definer_acquire() == nullptr)) {\n+      && (probe->defineThreadQ() == nullptr) && (probe->definer() == nullptr)) {\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -120,2 +119,2 @@\n-  JavaThread*        definer_acquire()     const { return Atomic::load_acquire(&_definer); }\n-  void               release_set_definer(JavaThread* definer) { Atomic::release_store(&_definer, definer); }\n+  JavaThread*        definer()     const { return _definer; }\n+  void               set_definer(JavaThread* definer) { _definer = definer; }\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1454,1 +1454,1 @@\n-    while (probe->definer_acquire() != nullptr) {\n+    while (probe->definer() != nullptr) {\n@@ -1471,1 +1471,1 @@\n-      probe->release_set_definer(THREAD);\n+      probe->set_definer(THREAD);\n@@ -1485,1 +1485,1 @@\n-    probe->release_set_definer(nullptr);\n+    probe->set_definer(nullptr);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}