{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/spinYield.hpp\"\n@@ -126,9 +127,6 @@\n-\/\/ postcondition: ret is a dirty card or end_card\n-CardTable::CardValue* PSCardTable::find_first_dirty_card(CardValue* const start_card,\n-                                                         CardValue* const end_card) {\n-  for (CardValue* i_card = start_card; i_card < end_card; ++i_card) {\n-    if (*i_card != PSCardTable::clean_card_val()) {\n-      return i_card;\n-    }\n-  }\n-  return end_card;\n+void PSCardTable::scan_obj_with_limit(PSPromotionManager* pm,\n+                                      oop obj,\n+                                      HeapWord* start,\n+                                      HeapWord* end) {\n+  prefetch_write(start);\n+  pm->push_contents_bounded(obj, start, end);\n@@ -137,14 +135,35 @@\n-\/\/ postcondition: ret is a clean card or end_card\n-\/\/ Note: if a part of an object is on a dirty card, all cards this object\n-\/\/ resides on are considered dirty.\n-CardTable::CardValue* PSCardTable::find_first_clean_card(ObjectStartArray* const start_array,\n-                                                         CardValue* const start_card,\n-                                                         CardValue* const end_card) {\n-  assert(start_card == end_card ||\n-         *start_card != PSCardTable::clean_card_val(), \"precondition\");\n-  \/\/ Skip the first dirty card.\n-  CardValue* i_card = start_card + 1;\n-  while (i_card < end_card) {\n-    if (*i_card != PSCardTable::clean_card_val()) {\n-      i_card++;\n-      continue;\n+void PSCardTable::pre_scavenge(HeapWord* old_gen_bottom, uint active_workers) {\n+  _pre_scavenge_active_workers = active_workers;\n+}\n+\n+\/\/ Scavenge objects on dirty cards of the given stripe [start, end). Accesses to\n+\/\/ the card table and scavenging is strictly limited to the stripe. The work on\n+\/\/ objects covering multiple stripes is shared among the worker threads owning the\n+\/\/ stripes.  To support this the card table is preprocessed before\n+\/\/ scavenge. Imprecise dirty marks of non-objArrays are copied from start stripes\n+\/\/ to all stripes (if any) they extend to.\n+\/\/ A copy of card table entries corresponding to the stripe called \"shadow\" table\n+\/\/ is used to separate card reading, clearing and redirtying.\n+template <typename Func>\n+void PSCardTable::process_range(Func&& object_start,\n+                                PSPromotionManager* pm,\n+                                HeapWord* const start,\n+                                HeapWord* const end) {\n+  assert(start < end, \"precondition\");\n+  assert(is_card_aligned(start), \"precondition\");\n+\n+  \/\/ Helper struct to keep the following code compact.\n+  struct Obj {\n+    HeapWord* addr;\n+    oop obj;\n+    bool is_obj_array;\n+    HeapWord* end_addr;\n+    Obj(HeapWord* o_addr) : addr(o_addr),\n+                            obj(cast_to_oop(o_addr)),\n+                            is_obj_array(obj->is_objArray()),\n+                            end_addr(addr + obj->size()) {}\n+    void next() {\n+      addr = end_addr;\n+      obj = cast_to_oop(addr);\n+      is_obj_array = obj->is_objArray();\n+      end_addr = addr + obj->size();\n@@ -152,9 +171,16 @@\n-    assert(i_card - 1 >= start_card, \"inv\");\n-    assert(*(i_card - 1) != PSCardTable::clean_card_val(), \"prev card must be dirty\");\n-    \/\/ Find the final obj on the prev dirty card.\n-    HeapWord* obj_addr = start_array->object_start(addr_for(i_card)-1);\n-    HeapWord* obj_end_addr = obj_addr + cast_to_oop(obj_addr)->size();\n-    CardValue* final_card_by_obj = byte_for(obj_end_addr - 1);\n-    assert(final_card_by_obj < end_card, \"inv\");\n-    if (final_card_by_obj <= i_card) {\n-      return i_card;\n+  };\n+\n+  StripeShadowTable sct(this, MemRegion(start, end));\n+\n+  \/\/ end might not be card-aligned\n+  const CardValue* end_card = sct.card_for(end - 1) + 1;\n+\n+  for (HeapWord* i_addr = start; i_addr < end; \/* empty *\/) {\n+    const CardValue* dirty_l = sct.find_first_dirty_card(sct.card_for(i_addr), end_card);\n+    const CardValue* dirty_r = sct.find_first_clean_card(dirty_l, end_card);\n+\n+    assert(dirty_l <= dirty_r, \"inv\");\n+\n+    if (dirty_l == dirty_r) {\n+      assert(dirty_r == end_card, \"inv\");\n+      break;\n@@ -162,3 +188,29 @@\n-    \/\/ This final obj extends beyond i_card, check if this new card is dirty.\n-    if (*final_card_by_obj == PSCardTable::clean_card_val()) {\n-      return final_card_by_obj;\n+\n+    \/\/ Located a non-empty dirty chunk [dirty_l, dirty_r)\n+    HeapWord* addr_l = sct.addr_for(dirty_l);\n+    HeapWord* addr_r = MIN2(sct.addr_for(dirty_r), end);\n+\n+    \/\/ Scan objects overlapping [addr_l, addr_r) limited to [start, end)\n+    Obj obj(object_start(addr_l));\n+\n+    while (true) {\n+      assert(obj.addr < addr_r, \"inv\");\n+\n+      if (obj.is_obj_array) {\n+        \/\/ precise-marked\n+        scan_obj_with_limit(pm, obj.obj, addr_l, addr_r);\n+      } else {\n+        if (obj.addr < i_addr && i_addr > start) {\n+          \/\/ already-scanned\n+        } else {\n+          scan_obj_with_limit(pm, obj.obj, addr_l, end);\n+        }\n+      }\n+\n+      if (obj.end_addr >= addr_r) {\n+        i_addr = obj.is_obj_array ? addr_r : obj.end_addr;\n+        break;\n+      }\n+\n+      \/\/ move to next obj inside this dirty chunk\n+      obj.next();\n@@ -166,2 +218,3 @@\n-    \/\/ This new card is dirty, continuing the search...\n-    i_card = final_card_by_obj + 1;\n+\n+    \/\/ Finished a dirty chunk\n+    pm->drain_stacks_cond_depth();\n@@ -169,1 +222,0 @@\n-  return end_card;\n@@ -172,3 +224,26 @@\n-void PSCardTable::clear_cards(CardValue* const start, CardValue* const end) {\n-  for (CardValue* i_card = start; i_card < end; ++i_card) {\n-    *i_card = clean_card;\n+\/\/ Propagate imprecise card marks from object start to the stripes an object extends to.\n+template <typename Func>\n+void PSCardTable::preprocess_card_table_parallel(Func&& object_start,\n+                                                 HeapWord* old_gen_bottom,\n+                                                 HeapWord* old_gen_top,\n+                                                 uint stripe_index,\n+                                                 uint n_stripes) {\n+  const uint active_workers = n_stripes;\n+  const size_t num_cards_in_slice = num_cards_in_stripe * n_stripes;\n+  CardValue* cur_card = byte_for(old_gen_bottom) + stripe_index * num_cards_in_stripe;\n+  CardValue* const end_card = byte_for(old_gen_top - 1) + 1;\n+  HeapWord* signaled_goal = nullptr;\n+\n+  for ( \/* empty *\/ ; cur_card < end_card; cur_card += num_cards_in_slice) {\n+    HeapWord* stripe_addr = addr_for(cur_card);\n+    if (!is_dirty(cur_card)) {\n+      HeapWord* first_obj_addr = object_start(stripe_addr);\n+      if (first_obj_addr < stripe_addr) {\n+        oop first_obj = cast_to_oop(first_obj_addr);\n+        if (!first_obj->is_array() && is_dirty(byte_for(first_obj_addr))) {\n+          \/\/ Potentially imprecisely marked dirty.\n+          \/\/ Mark first card of stripe dirty too.\n+          *cur_card = dirty_card_val();\n+        }\n+      }\n+    }\n@@ -176,1 +251,0 @@\n-}\n@@ -178,10 +252,5 @@\n-void PSCardTable::scan_objects_in_range(PSPromotionManager* pm,\n-                                        HeapWord* start,\n-                                        HeapWord* end) {\n-  HeapWord* obj_addr = start;\n-  while (obj_addr < end) {\n-    oop obj = cast_to_oop(obj_addr);\n-    assert(oopDesc::is_oop(obj), \"inv\");\n-    prefetch_write(obj_addr);\n-    pm->push_contents(obj);\n-    obj_addr += obj->size();\n+  \/\/ Sync with other workers\n+  Atomic::dec(&_pre_scavenge_active_workers);\n+  SpinYield spin_yield;\n+  while (Atomic::load_acquire(&_pre_scavenge_active_workers) > 0) {\n+    spin_yield.wait();\n@@ -189,1 +258,0 @@\n-  pm->drain_stacks_cond_depth();\n@@ -231,2 +299,2 @@\n-                                             MutableSpace* sp,\n-                                             HeapWord* space_top,\n+                                             HeapWord* old_gen_bottom,\n+                                             HeapWord* old_gen_top,\n@@ -236,48 +304,12 @@\n-  const size_t num_cards_in_stripe = 128;\n-  const size_t stripe_size_in_words = num_cards_in_stripe * _card_size_in_words;\n-  const size_t slice_size_in_words = stripe_size_in_words * n_stripes;\n-\n-  HeapWord* cur_stripe_addr = sp->bottom() + stripe_index * stripe_size_in_words;\n-\n-  for (\/* empty *\/; cur_stripe_addr < space_top; cur_stripe_addr += slice_size_in_words) {\n-    \/\/ exclusive\n-    HeapWord* const cur_stripe_end_addr = MIN2(cur_stripe_addr + stripe_size_in_words,\n-                                               space_top);\n-\n-    \/\/ Process a stripe iff it contains any obj-start\n-    if (!start_array->object_starts_in_range(cur_stripe_addr, cur_stripe_end_addr)) {\n-      continue;\n-    }\n-\n-    \/\/ Constraints:\n-    \/\/ 1. range of cards checked for being dirty or clean: [iter_limit_l, iter_limit_r)\n-    \/\/ 2. range of cards can be cleared: [clear_limit_l, clear_limit_r)\n-    \/\/ 3. range of objs (obj-start) can be scanned: [first_obj_addr, cur_stripe_end_addr)\n-\n-    CardValue* iter_limit_l;\n-    CardValue* iter_limit_r;\n-    CardValue* clear_limit_l;\n-    CardValue* clear_limit_r;\n-\n-    \/\/ Identify left ends and the first obj-start inside this stripe.\n-    HeapWord* first_obj_addr = start_array->object_start(cur_stripe_addr);\n-    if (first_obj_addr < cur_stripe_addr) {\n-      \/\/ this obj belongs to previous stripe; can't clear any cards it occupies\n-      first_obj_addr += cast_to_oop(first_obj_addr)->size();\n-      clear_limit_l = byte_for(first_obj_addr - 1) + 1;\n-      iter_limit_l = byte_for(first_obj_addr);\n-    } else {\n-      assert(first_obj_addr == cur_stripe_addr, \"inv\");\n-      iter_limit_l = clear_limit_l = byte_for(cur_stripe_addr);\n-    }\n-\n-    assert(cur_stripe_addr <= first_obj_addr, \"inside this stripe\");\n-    assert(first_obj_addr <= cur_stripe_end_addr, \"can be empty\");\n-\n-    {\n-      \/\/ Identify right ends.\n-      HeapWord* obj_addr = start_array->object_start(cur_stripe_end_addr - 1);\n-      HeapWord* obj_end_addr = obj_addr + cast_to_oop(obj_addr)->size();\n-      assert(obj_end_addr >= cur_stripe_end_addr, \"inv\");\n-      clear_limit_r = byte_for(obj_end_addr);\n-      iter_limit_r = byte_for(obj_end_addr - 1) + 1;\n+  struct {\n+    HeapWord* start_addr;\n+    HeapWord* end_addr;\n+    DEBUG_ONLY(HeapWord* _prev_query);\n+  } cached_obj {nullptr, old_gen_bottom DEBUG_ONLY(COMMA nullptr)};\n+\n+  auto object_start = [&] (HeapWord* addr) {\n+    assert(cached_obj._prev_query <= addr, \"precondition\");\n+    DEBUG_ONLY(cached_obj._prev_query = addr);\n+    if (addr < cached_obj.end_addr) {\n+      assert(cached_obj.start_addr != nullptr, \"inv\");\n+      return cached_obj.start_addr;\n@@ -285,0 +317,1 @@\n+    HeapWord* result = start_array->object_start(addr);\n@@ -286,2 +319,2 @@\n-    assert(iter_limit_l <= clear_limit_l &&\n-           clear_limit_r <= iter_limit_r, \"clear cards only if we iterate over them\");\n+    cached_obj.start_addr = result;\n+    cached_obj.end_addr = result + cast_to_oop(result)->size();\n@@ -289,4 +322,2 @@\n-    \/\/ Process dirty chunks, i.e. consecutive dirty cards [dirty_l, dirty_r),\n-    \/\/ chunk by chunk inside [iter_limit_l, iter_limit_r).\n-    CardValue* dirty_l;\n-    CardValue* dirty_r;\n+    return result;\n+  };\n@@ -294,14 +325,2 @@\n-    for (CardValue* cur_card = iter_limit_l; cur_card < iter_limit_r; cur_card = dirty_r + 1) {\n-      dirty_l = find_first_dirty_card(cur_card, iter_limit_r);\n-      dirty_r = find_first_clean_card(start_array, dirty_l, iter_limit_r);\n-      assert(dirty_l <= dirty_r, \"inv\");\n-\n-      \/\/ empty\n-      if (dirty_l == dirty_r) {\n-        assert(dirty_r == iter_limit_r, \"no more dirty cards in this stripe\");\n-        break;\n-      }\n-\n-      assert(*dirty_l != clean_card, \"inv\");\n-      assert(*dirty_r == clean_card || dirty_r >= clear_limit_r,\n-             \"clean card or belonging to next stripe\");\n+  const size_t stripe_size_in_words = num_cards_in_stripe * _card_size_in_words;\n+  const size_t slice_size_in_words = stripe_size_in_words * n_stripes;\n@@ -309,6 +328,2 @@\n-      \/\/ Process this non-empty dirty chunk in two steps:\n-      {\n-        \/\/ 1. Clear card in [dirty_l, dirty_r) subject to [clear_limit_l, clear_limit_r) constraint\n-        clear_cards(MAX2(dirty_l, clear_limit_l),\n-                    MIN2(dirty_r, clear_limit_r));\n-      }\n+  \/\/ Prepare scavenge\n+  preprocess_card_table_parallel(object_start, old_gen_bottom, old_gen_top, stripe_index, n_stripes);\n@@ -316,4 +331,2 @@\n-      {\n-        \/\/ 2. Scan objs in [dirty_l, dirty_r) subject to [first_obj_addr, cur_stripe_end_addr) constraint\n-        HeapWord* obj_l = MAX2(start_array->object_start(addr_for(dirty_l)),\n-                               first_obj_addr);\n+  \/\/ Reset cached object\n+  cached_obj = {nullptr, old_gen_bottom DEBUG_ONLY(COMMA nullptr)};\n@@ -321,2 +334,6 @@\n-        HeapWord* obj_r = MIN2(addr_for(dirty_r),\n-                               cur_stripe_end_addr);\n+  \/\/ Scavenge\n+  HeapWord* cur_stripe_addr = old_gen_bottom + stripe_index * stripe_size_in_words;\n+  for (\/* empty *\/; cur_stripe_addr < old_gen_top; cur_stripe_addr += slice_size_in_words) {\n+    HeapWord* const stripe_l = cur_stripe_addr;\n+    HeapWord* const stripe_r = MIN2(cur_stripe_addr + stripe_size_in_words,\n+                                    old_gen_top);\n@@ -324,3 +341,1 @@\n-        scan_objects_in_range(pm, obj_l, obj_r);\n-      }\n-    }\n+    process_range(object_start, pm, stripe_l, stripe_r);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":153,"deletions":138,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -37,0 +37,80 @@\n+  static constexpr size_t num_cards_in_stripe = 128;\n+  static_assert(num_cards_in_stripe >= 1, \"progress\");\n+\n+  class StripeShadowTable {\n+    CardValue _table[num_cards_in_stripe];\n+    const CardValue* _table_base;\n+#ifdef ASSERT\n+    const CardValue* _table_end;\n+#endif\n+\n+   public:\n+    StripeShadowTable(PSCardTable* pst, MemRegion stripe) :\n+      _table_base(_table - (uintptr_t(stripe.start()) >> _card_shift))\n+#ifdef ASSERT\n+      , _table_end((const CardValue*)(uintptr_t(_table) + (align_up(stripe.byte_size(), _card_size) >> _card_shift)))\n+#endif\n+    {\n+      \/\/ Old gen top is not card aligned.\n+      size_t copy_length = align_up(stripe.byte_size(), _card_size) >> _card_shift;\n+      size_t clear_length = align_down(stripe.byte_size(), _card_size) >> _card_shift;\n+      memcpy(_table, pst->byte_for(stripe.start()), copy_length);\n+      memset(pst->byte_for(stripe.start()), clean_card_val(), clear_length);\n+    }\n+\n+    HeapWord* addr_for(const CardValue* const card) {\n+      assert(card >= _table && card <= _table_end, \"out of bounds\");\n+      return (HeapWord*) ((card - _table_base) << _card_shift);\n+    }\n+\n+    const CardValue* card_for(HeapWord* addr) {\n+      return &_table_base[uintptr_t(addr) >> _card_shift];\n+    }\n+\n+    bool is_dirty(const CardValue* const card) {\n+      return !is_clean(card);\n+    }\n+\n+    bool is_clean(const CardValue* const card) {\n+      assert(card >= _table && card < _table_end, \"out of bounds\");\n+      return *card == PSCardTable::clean_card_val();\n+    }\n+\n+    const CardValue* find_first_dirty_card(const CardValue* const start,\n+                                           const CardValue* const end) {\n+      for (const CardValue* i = start; i < end; ++i) {\n+        if (!is_clean(i)) {\n+          return i;\n+        }\n+      }\n+      return end;\n+    }\n+\n+    const CardValue* find_first_clean_card(const CardValue* const start,\n+                                           const CardValue* const end) {\n+      for (const CardValue* i = start; i < end; ++i) {\n+        if (is_clean(i)) {\n+          return i;\n+        }\n+      }\n+      return end;\n+    }\n+  };\n+\n+  \/\/ Pre-scavenge support.\n+  \/\/ The pre-scavenge phase can overlap with scavenging.\n+  volatile int _pre_scavenge_active_workers;\n+\n+  bool is_dirty(CardValue* card) {\n+    return !is_clean(card);\n+  }\n+\n+  bool is_clean(CardValue* card) {\n+    return *card == clean_card_val();\n+  }\n+\n+  template <typename Func>\n+  void process_range(Func&& object_start,\n+                     PSPromotionManager* pm,\n+                     HeapWord* const start,\n+                     HeapWord* const end);\n@@ -45,12 +125,4 @@\n-  CardValue* find_first_dirty_card(CardValue* const start_card,\n-                                   CardValue* const end_card);\n-\n-  CardValue* find_first_clean_card(ObjectStartArray* start_array,\n-                                   CardValue* const start_card,\n-                                   CardValue* const end_card);\n-\n-  void clear_cards(CardValue* const start, CardValue* const end);\n-\n-  void scan_objects_in_range(PSPromotionManager* pm,\n-                             HeapWord* start,\n-                             HeapWord* end);\n+  void scan_obj_with_limit(PSPromotionManager* pm,\n+                           oop obj,\n+                           HeapWord* start,\n+                           HeapWord* end);\n@@ -59,1 +131,2 @@\n-  PSCardTable(MemRegion whole_heap) : CardTable(whole_heap) {}\n+  PSCardTable(MemRegion whole_heap) : CardTable(whole_heap),\n+                                      _pre_scavenge_active_workers(0) {}\n@@ -64,0 +137,2 @@\n+  void pre_scavenge(HeapWord* old_gen_bottom, uint active_workers);\n+\n@@ -65,0 +140,9 @@\n+\n+  \/\/ Propagate imprecise card marks from object start to the stripes an object extends to.\n+  template <typename Func>\n+  void preprocess_card_table_parallel(Func&& object_start,\n+                                      HeapWord* old_gen_bottom,\n+                                      HeapWord* old_gen_top,\n+                                      uint stripe_index,\n+                                      uint n_stripes);\n+\n@@ -66,2 +150,2 @@\n-                                  MutableSpace* sp,\n-                                  HeapWord* space_top,\n+                                  HeapWord* old_gen_bottom,\n+                                  HeapWord* old_gen_top,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.hpp","additions":99,"deletions":15,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -180,0 +180,1 @@\n+  void push_contents_bounded(oop obj, HeapWord* left, HeapWord* right);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -134,0 +134,7 @@\n+inline void PSPromotionManager::push_contents_bounded(oop obj, HeapWord* left, HeapWord* right) {\n+  if (!obj->klass()->is_typeArray_klass()) {\n+    PSPushContentsClosure pcc(this);\n+    obj->oop_iterate(&pcc, MemRegion(left, right));\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-  PSScavengeRootsClosure roots_closure(pm);\n@@ -304,0 +303,5 @@\n+\n+    if (!_is_old_gen_empty) {\n+      PSCardTable* card_table = ParallelScavengeHeap::heap()->card_table();\n+      card_table->pre_scavenge(_old_gen->object_space()->bottom(), active_workers);\n+    }\n@@ -317,0 +321,1 @@\n+        \/\/ The top of the old gen changes during scavenge when objects are promoted.\n@@ -318,1 +323,1 @@\n-                                               _old_gen->object_space(),\n+                                               _old_gen->object_space()->bottom(),\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}