{"files":[{"patch":"@@ -279,0 +279,8 @@\n+      if (first_obj_addr >= cur_stripe_end_addr) {\n+        \/\/ No object starts in the stripe so continue.\n+        \/\/ object_starts_in_range() above is imprecise. It can return true iff\n+        \/\/ cur_stripe_end_addr equals space_top which is not aligned to _card_size and an\n+        \/\/ object starts there.\n+        assert(first_obj_addr == space_top, \"assumption\");\n+        continue;\n+      }\n@@ -287,1 +295,1 @@\n-    assert(first_obj_addr <= cur_stripe_end_addr, \"can be empty\");\n+    assert(first_obj_addr < cur_stripe_end_addr, \"no objects start in stripe\");\n@@ -294,4 +302,6 @@\n-      \/\/ large arrays starting in this stripe are scanned here\n-      if (obj_sz >= large_obj_arr_min_words() && cast_to_oop(obj_addr)->is_objArray() &&\n-          obj_addr >= cur_stripe_addr) {\n-        \/\/ the last condition is not redundant as we can reach here if an obj starts at space_top\n+      \/\/ Scan the elements of a large array to the stripe end.\n+      if (obj_sz >= large_obj_arr_min_words() && cast_to_oop(obj_addr)->is_objArray()) {\n+        \/\/ Reaching here we know that the large array starts in this stripe.\n+        \/\/ If it starts here then its end has to be in a following stripe.\n+        assert(obj_addr >= cur_stripe_addr &&\n+               obj_end_addr >= cur_stripe_end_addr, \"overlapping work\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}