{"files":[{"patch":"@@ -259,0 +259,1 @@\n+      \/\/ Scan middle and end of large arrays\n@@ -267,0 +268,2 @@\n+    \/\/ 4. range of large array elements to be scanned: [first_obj_addr, cur_stripe_end_addr)\n+    \/\/    limited to dirty regions\n@@ -279,8 +282,0 @@\n-      if (first_obj_addr >= cur_stripe_end_addr) {\n-        \/\/ No object starts in the stripe so continue.\n-        \/\/ object_starts_in_range() above is imprecise. It can return true iff\n-        \/\/ cur_stripe_end_addr equals space_top which is not aligned to _card_size and an\n-        \/\/ object starts there.\n-        assert(first_obj_addr == space_top, \"assumption\");\n-        continue;\n-      }\n@@ -295,1 +290,1 @@\n-    assert(first_obj_addr < cur_stripe_end_addr, \"no objects start in stripe\");\n+    assert(first_obj_addr <= cur_stripe_end_addr, \"can be empty\");\n@@ -304,0 +299,11 @@\n+        if (first_obj_addr >= cur_stripe_end_addr) {\n+          \/\/ Nothing to scan according to constraints given above.\n+          \/\/ We reach here only for the last stripe below space_top where\n+          \/\/ object_starts_in_range() returns true if space_top is not aligned to\n+          \/\/ _card_size and an object starts there.\n+          assert(first_obj_addr == space_top, \"assumption\");\n+          assert(cur_stripe_end_addr == space_top, \"assumption\");\n+          \/\/ This stripe accomodates the end of a large array. It is scanned by the\n+          \/\/ thread owning the previous stripe.\n+          continue;\n+        }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"}]}