{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    if (output != NULL) {\n+    if (output != nullptr) {\n@@ -96,1 +96,1 @@\n-  assert(throwable != NULL, \"invariant\");\n+  assert(throwable != nullptr, \"invariant\");\n@@ -99,1 +99,1 @@\n-  if (msg == NULL) {\n+  if (msg == nullptr) {\n@@ -103,1 +103,1 @@\n-  if (text != NULL) {\n+  if (text != nullptr) {\n@@ -114,1 +114,1 @@\n-  assert(lines != NULL, \"invariant\");\n+  assert(lines != nullptr, \"invariant\");\n@@ -119,1 +119,1 @@\n-    if (text == NULL) {\n+    if (text == nullptr) {\n@@ -130,1 +130,1 @@\n-  assert(lines != NULL, \"invariant\");\n+  assert(lines != nullptr, \"invariant\");\n@@ -135,1 +135,1 @@\n-    if (text == NULL) {\n+    if (text == nullptr) {\n@@ -148,1 +148,1 @@\n-  assert(output != NULL, \"invariant\");\n+  assert(output != nullptr, \"invariant\");\n@@ -180,1 +180,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -182,1 +182,1 @@\n-  assert(args->klass() != NULL, \"invariant\");\n+  assert(args->klass() != nullptr, \"invariant\");\n@@ -189,1 +189,1 @@\n-JfrDCmd::JfrDCmd(outputStream* output, bool heap, int num_arguments) : DCmd(output, heap), _args(NULL), _num_arguments(num_arguments), _delimiter('\\0') {}\n+JfrDCmd::JfrDCmd(outputStream* output, bool heap, int num_arguments) : DCmd(output, heap), _args(nullptr), _num_arguments(num_arguments), _delimiter('\\0') {}\n@@ -224,1 +224,1 @@\n-  jstring s = NULL;\n+  jstring s = nullptr;\n@@ -251,5 +251,5 @@\n-  assert(array != NULL, \"invariant\");\n-  DCmdArgumentInfo * const dummy = new DCmdArgumentInfo(NULL,\n-                                                        NULL,\n-                                                        NULL,\n-                                                        NULL,\n+  assert(array != nullptr, \"invariant\");\n+  DCmdArgumentInfo * const dummy = new DCmdArgumentInfo(nullptr,\n+                                                        nullptr,\n+                                                        nullptr,\n+                                                        nullptr,\n@@ -266,1 +266,1 @@\n-static THREAD_LOCAL Arena* dcmd_arena = NULL;\n+static THREAD_LOCAL Arena* dcmd_arena = nullptr;\n@@ -275,1 +275,1 @@\n-  assert(dcmd_arena != NULL, \"invariant\");\n+  assert(dcmd_arena != nullptr, \"invariant\");\n@@ -280,1 +280,1 @@\n-  char* str = NULL;\n+  char* str = nullptr;\n@@ -282,1 +282,1 @@\n-  if (value != NULL) {\n+  if (value != nullptr) {\n@@ -285,1 +285,1 @@\n-    assert(str != NULL, \"invariant\");\n+    assert(str != nullptr, \"invariant\");\n@@ -300,1 +300,1 @@\n-  return string_oop != NULL ? get_as_dcmd_arena_string(string_oop) : NULL;\n+  return string_oop != nullptr ? get_as_dcmd_arena_string(string_oop) : nullptr;\n@@ -345,1 +345,1 @@\n-  assert(arguments != NULL, \"invariant\");\n+  assert(arguments != nullptr, \"invariant\");\n@@ -352,1 +352,1 @@\n-    assert(dai != NULL, \"invariant\");\n+    assert(dai != nullptr, \"invariant\");\n@@ -369,2 +369,2 @@\n-  _repository_path(\"repositorypath\", \"Path to repository,.e.g \\\\\\\"My Repository\\\\\\\"\", \"STRING\", false, NULL),\n-  _dump_path(\"dumppath\", \"Path to dump,.e.g \\\\\\\"My Dump path\\\\\\\"\", \"STRING\", false, NULL),\n+  _repository_path(\"repositorypath\", \"Path to repository,.e.g \\\\\\\"My Repository\\\\\\\"\", \"STRING\", false, nullptr),\n+  _dump_path(\"dumppath\", \"Path to dump,.e.g \\\\\\\"My Dump path\\\\\\\"\", \"STRING\", false, nullptr),\n@@ -452,2 +452,2 @@\n-  JfrConfigureFlightRecorderDCmd* dcmd = new JfrConfigureFlightRecorderDCmd(NULL, false);\n-  if (dcmd != NULL) {\n+  JfrConfigureFlightRecorderDCmd* dcmd = new JfrConfigureFlightRecorderDCmd(nullptr, false);\n+  if (dcmd != nullptr) {\n@@ -477,2 +477,2 @@\n-  jstring repository_path = NULL;\n-  if (_repository_path.is_set() && _repository_path.value() != NULL) {\n+  jstring repository_path = nullptr;\n+  if (_repository_path.is_set() && _repository_path.value() != nullptr) {\n@@ -482,2 +482,2 @@\n-  jstring dump_path = NULL;\n-  if (_dump_path.is_set() && _dump_path.value() != NULL) {\n+  jstring dump_path = nullptr;\n+  if (_dump_path.is_set() && _dump_path.value() != nullptr) {\n@@ -487,6 +487,6 @@\n-  jobject stack_depth = NULL;\n-  jobject global_buffer_count = NULL;\n-  jobject global_buffer_size = NULL;\n-  jobject thread_buffer_size = NULL;\n-  jobject max_chunk_size = NULL;\n-  jobject memory_size = NULL;\n+  jobject stack_depth = nullptr;\n+  jobject global_buffer_count = nullptr;\n+  jobject global_buffer_size = nullptr;\n+  jobject thread_buffer_size = nullptr;\n+  jobject max_chunk_size = nullptr;\n+  jobject memory_size = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n@@ -87,1 +87,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n@@ -112,1 +112,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n@@ -137,1 +137,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n@@ -177,1 +177,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,1 +194,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -209,1 +209,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -283,1 +283,1 @@\n-    assert(_buffer != NULL, \"invariant\");\n+    assert(_buffer != nullptr, \"invariant\");\n@@ -335,2 +335,2 @@\n-                                                                     _limit(ar != NULL ? ar->length() : 0),\n-                                                                     _buffer(_limit > 2 ? ar->adr_at(2) : NULL),\n+                                                                     _limit(ar != nullptr ? ar->length() : 0),\n+                                                                     _buffer(_limit > 2 ? ar->adr_at(2) : nullptr),\n@@ -339,1 +339,1 @@\n-    if (_buffer != NULL) {\n+    if (_buffer != nullptr) {\n@@ -361,1 +361,1 @@\n-    assert(_buffer != NULL, \"invariant\");\n+    assert(_buffer != nullptr, \"invariant\");\n@@ -369,1 +369,1 @@\n-  assert(annotation_type != NULL, \"invariant\");\n+  assert(annotation_type != nullptr, \"invariant\");\n@@ -371,1 +371,1 @@\n-  if (class_annotations == NULL) {\n+  if (class_annotations == nullptr) {\n@@ -382,1 +382,1 @@\n-      assert(value_symbol != NULL, \"invariant\");\n+      assert(value_symbol != nullptr, \"invariant\");\n@@ -402,2 +402,2 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(annotation_type != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(annotation_type != nullptr, \"invariant\");\n@@ -409,1 +409,1 @@\n-  return super != NULL && JdkJfrEvent::is_a(super) ? annotation_value(super, annotation_type, value) : false;\n+  return super != nullptr && JdkJfrEvent::is_a(super) ? annotation_value(super, annotation_type, value) : false;\n@@ -419,2 +419,2 @@\n-  static Symbol* jdk_jfr_module_symbol = NULL;\n-  if (jdk_jfr_module_symbol == NULL) {\n+  static Symbol* jdk_jfr_module_symbol = nullptr;\n+  if (jdk_jfr_module_symbol == nullptr) {\n@@ -422,1 +422,1 @@\n-    if (jdk_jfr_module_symbol == NULL) {\n+    if (jdk_jfr_module_symbol == nullptr) {\n@@ -426,1 +426,1 @@\n-  assert(jdk_jfr_module_symbol != NULL, \"invariant\");\n+  assert(jdk_jfr_module_symbol != nullptr, \"invariant\");\n@@ -428,1 +428,1 @@\n-  assert(table != NULL, \"invariant\");\n+  assert(table != nullptr, \"invariant\");\n@@ -430,1 +430,1 @@\n-  if (java_base_module == NULL) {\n+  if (java_base_module == nullptr) {\n@@ -433,1 +433,1 @@\n-  assert(java_base_module != NULL, \"invariant\");\n+  assert(java_base_module != nullptr, \"invariant\");\n@@ -438,1 +438,1 @@\n-    if (jdk_jfr_module == NULL) {\n+    if (jdk_jfr_module == nullptr) {\n@@ -442,1 +442,1 @@\n-  assert(jdk_jfr_module != NULL, \"invariant\");\n+  assert(jdk_jfr_module != nullptr, \"invariant\");\n@@ -455,1 +455,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -458,2 +458,2 @@\n-  static const Symbol* registered_symbol = NULL;\n-  if (registered_symbol == NULL) {\n+  static const Symbol* registered_symbol = nullptr;\n+  if (registered_symbol == nullptr) {\n@@ -461,1 +461,1 @@\n-    if (registered_symbol == NULL) {\n+    if (registered_symbol == nullptr) {\n@@ -466,1 +466,1 @@\n-  assert(registered_symbol != NULL, \"invariant\");\n+  assert(registered_symbol != nullptr, \"invariant\");\n@@ -476,1 +476,1 @@\n-  assert(target != NULL, \"invariant\");\n+  assert(target != nullptr, \"invariant\");\n@@ -483,1 +483,1 @@\n-      assert(utf8_sym != NULL, \"invariant\");\n+      assert(utf8_sym != nullptr, \"invariant\");\n@@ -500,1 +500,1 @@\n-  assert(utf8_constant != NULL, \"invariant\");\n+  assert(utf8_constant != nullptr, \"invariant\");\n@@ -543,1 +543,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -576,1 +576,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -651,1 +651,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -718,1 +718,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -748,1 +748,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -750,1 +750,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -769,1 +769,1 @@\n-    if (clinit_method != NULL && name_index == clinit_method->name_index()) {\n+    if (clinit_method != nullptr && name_index == clinit_method->name_index()) {\n@@ -793,1 +793,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -841,1 +841,1 @@\n-  const u2 ex_table_length = method != NULL ? (u2)method->exception_table_length() : 0;\n+  const u2 ex_table_length = method != nullptr ? (u2)method->exception_table_length() : 0;\n@@ -844,1 +844,1 @@\n-    assert(method != NULL, \"invariant\");\n+    assert(method != nullptr, \"invariant\");\n@@ -847,1 +847,1 @@\n-      assert(ex_elements != NULL, \"invariant\");\n+      assert(ex_elements != nullptr, \"invariant\");\n@@ -875,2 +875,2 @@\n-  assert(stack_map != NULL, \"invariant\");\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(stack_map != nullptr, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -923,2 +923,2 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n-  assert(method != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -953,2 +953,2 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n-  assert(method != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -962,1 +962,1 @@\n-  assert(table != NULL, \"invariant\");\n+  assert(table != nullptr, \"invariant\");\n@@ -993,1 +993,1 @@\n-  assert(table != NULL, \"invariant\");\n+  assert(table != nullptr, \"invariant\");\n@@ -1016,1 +1016,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -1020,1 +1020,1 @@\n-  if (clinit_method != NULL) {\n+  if (clinit_method != nullptr) {\n@@ -1022,1 +1022,1 @@\n-    if (stack_map != NULL) {\n+    if (stack_map != nullptr) {\n@@ -1027,1 +1027,1 @@\n-    if (clinit_method != NULL && clinit_method->has_linenumber_table()) {\n+    if (clinit_method != nullptr && clinit_method->has_linenumber_table()) {\n@@ -1032,1 +1032,1 @@\n-    if (clinit_method != NULL && clinit_method->has_localvariable_table()) {\n+    if (clinit_method != nullptr && clinit_method->has_localvariable_table()) {\n@@ -1056,1 +1056,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -1064,4 +1064,4 @@\n-  const u2 max_stack = MAX2(clinit_method != NULL ? clinit_method->verifier_max_stack() : 1, 1);\n-  const u2 max_locals = MAX2(clinit_method != NULL ? clinit_method->max_locals() : 0, 0);\n-  const u2 orig_bytecodes_length = clinit_method != NULL ? (u2)clinit_method->code_size() : 0;\n-  const address orig_bytecodes = clinit_method != NULL ? clinit_method->code_base() : NULL;\n+  const u2 max_stack = MAX2(clinit_method != nullptr ? clinit_method->verifier_max_stack() : 1, 1);\n+  const u2 max_locals = MAX2(clinit_method != nullptr ? clinit_method->max_locals() : 0, 0);\n+  const u2 orig_bytecodes_length = clinit_method != nullptr ? (u2)clinit_method->code_size() : 0;\n+  const address orig_bytecodes = clinit_method != nullptr ? clinit_method->code_base() : nullptr;\n@@ -1093,1 +1093,1 @@\n-  if (clinit_method == NULL) {\n+  if (clinit_method == nullptr) {\n@@ -1121,7 +1121,7 @@\n-static Symbol* begin = NULL;\n-static Symbol* end = NULL;\n-static Symbol* commit = NULL;\n-static Symbol* isEnabled = NULL;\n-static Symbol* shouldCommit = NULL;\n-static Symbol* void_method_sig = NULL;\n-static Symbol* boolean_method_sig = NULL;\n+static Symbol* begin = nullptr;\n+static Symbol* end = nullptr;\n+static Symbol* commit = nullptr;\n+static Symbol* isEnabled = nullptr;\n+static Symbol* shouldCommit = nullptr;\n+static Symbol* void_method_sig = nullptr;\n+static Symbol* boolean_method_sig = nullptr;\n@@ -1130,1 +1130,1 @@\n-  if (begin == NULL) {\n+  if (begin == nullptr) {\n@@ -1132,1 +1132,1 @@\n-    assert(begin != NULL, \"invariant\");\n+    assert(begin != nullptr, \"invariant\");\n@@ -1134,1 +1134,1 @@\n-    assert(end != NULL, \"invariant\");\n+    assert(end != nullptr, \"invariant\");\n@@ -1136,1 +1136,1 @@\n-    assert(commit != NULL, \"invariant\");\n+    assert(commit != nullptr, \"invariant\");\n@@ -1138,1 +1138,1 @@\n-    assert(isEnabled != NULL, \"invariant\");\n+    assert(isEnabled != nullptr, \"invariant\");\n@@ -1140,1 +1140,1 @@\n-    assert(shouldCommit != NULL, \"invariant\");\n+    assert(shouldCommit != nullptr, \"invariant\");\n@@ -1142,1 +1142,1 @@\n-    assert(void_method_sig != NULL, \"invariant\");\n+    assert(void_method_sig != nullptr, \"invariant\");\n@@ -1144,1 +1144,1 @@\n-    assert(boolean_method_sig != NULL, \"invariant\");\n+    assert(boolean_method_sig != nullptr, \"invariant\");\n@@ -1154,1 +1154,1 @@\n-  assert(orig_stream != NULL, \"invariant\");\n+  assert(orig_stream != nullptr, \"invariant\");\n@@ -1157,3 +1157,3 @@\n-  u1* const new_buffer = NEW_RESOURCE_ARRAY_IN_THREAD_RETURN_NULL(THREAD, u1, orig_stream_length);\n-  if (new_buffer == NULL) {\n-    return NULL;\n+  u1* const new_buffer = NEW_RESOURCE_ARRAY_IN_THREAD_RETURN_nullptr(THREAD, u1, orig_stream_length);\n+  if (new_buffer == nullptr) {\n+    return nullptr;\n@@ -1161,1 +1161,1 @@\n-  assert(new_buffer != NULL, \"invariant\");\n+  assert(new_buffer != nullptr, \"invariant\");\n@@ -1201,1 +1201,1 @@\n-  return new ClassFileStream(new_buffer, orig_stream_length, NULL, ClassFileStream::verify);\n+  return new ClassFileStream(new_buffer, orig_stream_length, nullptr, ClassFileStream::verify);\n@@ -1212,1 +1212,1 @@\n-  assert(utf8_constant != NULL, \"invariant\");\n+  assert(utf8_constant != nullptr, \"invariant\");\n@@ -1243,1 +1243,1 @@\n-  assert(utf8_indexes != NULL, \"invariant\");\n+  assert(utf8_indexes != nullptr, \"invariant\");\n@@ -1273,1 +1273,1 @@\n-  if (clinit_method != NULL && clinit_method->has_stackmap_table()) {\n+  if (clinit_method != nullptr && clinit_method->has_stackmap_table()) {\n@@ -1280,1 +1280,1 @@\n-  if (clinit_method != NULL && clinit_method->has_linenumber_table()) {\n+  if (clinit_method != nullptr && clinit_method->has_linenumber_table()) {\n@@ -1287,1 +1287,1 @@\n-  if (clinit_method != NULL && clinit_method->has_localvariable_table()) {\n+  if (clinit_method != nullptr && clinit_method->has_localvariable_table()) {\n@@ -1304,1 +1304,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -1320,1 +1320,1 @@\n-  if (new_buffer == NULL) {\n+  if (new_buffer == nullptr) {\n@@ -1323,1 +1323,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1325,1 +1325,1 @@\n-  assert(new_buffer != NULL, \"invariant\");\n+  assert(new_buffer != nullptr, \"invariant\");\n@@ -1409,1 +1409,1 @@\n-  number_of_new_methods += clinit_method != NULL ? 0 : register_klass ? 1 : 0;\n+  number_of_new_methods += clinit_method != nullptr ? 0 : register_klass ? 1 : 0;\n@@ -1426,1 +1426,1 @@\n-  assert(throwable != NULL, \"invariant\");\n+  assert(throwable != nullptr, \"invariant\");\n@@ -1428,1 +1428,1 @@\n-  if (msg != NULL) {\n+  if (msg != nullptr) {\n@@ -1430,1 +1430,1 @@\n-    if (text != NULL) {\n+    if (text != nullptr) {\n@@ -1437,1 +1437,1 @@\n-  assert(THREAD != NULL, \"invariant\");\n+  assert(THREAD != nullptr, \"invariant\");\n@@ -1447,4 +1447,4 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(name != NULL, \"invariant\");\n-  assert(signature != NULL, \"invariant\");\n-  return NULL != ik->find_local_method(name, signature, Klass::OverpassLookupMode::skip, Klass::StaticLookupMode::find,\n+  assert(ik != nullptr, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n+  assert(signature != nullptr, \"invariant\");\n+  return nullptr != ik->find_local_method(name, signature, Klass::OverpassLookupMode::skip, Klass::StaticLookupMode::find,\n@@ -1457,1 +1457,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -1473,1 +1473,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1477,2 +1477,2 @@\n-  if (new_bytes == NULL) {\n-    return NULL;\n+  if (new_bytes == nullptr) {\n+    return nullptr;\n@@ -1480,1 +1480,1 @@\n-  assert(new_bytes != NULL, \"invariant\");\n+  assert(new_bytes != nullptr, \"invariant\");\n@@ -1485,1 +1485,1 @@\n-    unsigned char* instrumented_bytes = NULL;\n+    unsigned char* instrumented_bytes = nullptr;\n@@ -1499,1 +1499,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1501,1 +1501,1 @@\n-    assert(instrumented_bytes != NULL, \"invariant\");\n+    assert(instrumented_bytes != nullptr, \"invariant\");\n@@ -1507,1 +1507,1 @@\n-  return new ClassFileStream(new_bytes, size_of_new_bytes, NULL, ClassFileStream::verify);\n+  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr, ClassFileStream::verify);\n@@ -1521,1 +1521,1 @@\n-  assert(existing_klass != NULL, \"invariant\");\n+  assert(existing_klass != nullptr, \"invariant\");\n@@ -1526,1 +1526,1 @@\n-  unsigned char* new_bytes = NULL;\n+  unsigned char* new_bytes = nullptr;\n@@ -1528,1 +1528,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -1539,1 +1539,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1541,1 +1541,1 @@\n-  assert(new_bytes != NULL, \"invariant\");\n+  assert(new_bytes != nullptr, \"invariant\");\n@@ -1544,1 +1544,1 @@\n-  return new ClassFileStream(new_bytes, size_of_new_bytes, NULL, ClassFileStream::verify);\n+  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr, ClassFileStream::verify);\n@@ -1549,3 +1549,3 @@\n-  assert(new_ik != NULL, \"invariant\");\n-  assert(new_stream != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n+  assert(new_stream != nullptr, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -1559,1 +1559,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -1571,2 +1571,2 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(new_ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n@@ -1574,1 +1574,1 @@\n-  if (p != NULL) {\n+  if (p != nullptr) {\n@@ -1576,1 +1576,1 @@\n-    ik->set_cached_class_file(NULL);\n+    ik->set_cached_class_file(nullptr);\n@@ -1586,3 +1586,3 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(new_ik != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -1600,1 +1600,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -1607,1 +1607,1 @@\n-  assert(methods != NULL, \"invariant\");\n+  assert(methods != nullptr, \"invariant\");\n@@ -1620,1 +1620,1 @@\n-  assert(methods != NULL, \"invariant\");\n+  assert(methods != nullptr, \"invariant\");\n@@ -1637,1 +1637,1 @@\n-  assert(new_ik != NULL, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n@@ -1640,1 +1640,1 @@\n-  if (new_ik->class_loader() == NULL) {\n+  if (new_ik->class_loader() == nullptr) {\n@@ -1651,2 +1651,2 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(new_ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n@@ -1658,2 +1658,2 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(state != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(state != nullptr, \"invariant\");\n@@ -1661,2 +1661,2 @@\n-  if (redef_klasses == NULL || redef_klasses->is_empty()) {\n-    return NULL;\n+  if (redef_klasses == nullptr || redef_klasses->is_empty()) {\n+    return nullptr;\n@@ -1666,1 +1666,1 @@\n-    assert(existing_klass != NULL, \"invariant\");\n+    assert(existing_klass != nullptr, \"invariant\");\n@@ -1672,1 +1672,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1677,2 +1677,2 @@\n-  assert(ik != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -1680,1 +1680,1 @@\n-  return state != NULL ? klass_being_redefined(ik, state) : NULL;\n+  return state != nullptr ? klass_being_redefined(ik, state) : nullptr;\n@@ -1684,1 +1684,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -1689,1 +1689,1 @@\n-  const char* const klass_name = class_name != NULL ? class_name->as_C_string() : \"\";\n+  const char* const klass_name = class_name != nullptr ? class_name->as_C_string() : \"\";\n@@ -1700,1 +1700,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1707,1 +1707,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1709,2 +1709,2 @@\n-  assert(new_ik != NULL, \"invariant\");\n-  assert(new_ik->name() != NULL, \"invariant\");\n+  assert(new_ik != nullptr, \"invariant\");\n+  assert(new_ik->name() != nullptr, \"invariant\");\n@@ -1716,1 +1716,1 @@\n-  if (stream == NULL) {\n+  if (stream == nullptr) {\n@@ -1720,1 +1720,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1723,1 +1723,1 @@\n-  if (new_ik == NULL) {\n+  if (new_ik == nullptr) {\n@@ -1734,1 +1734,1 @@\n-  ClassFileStream* stream = NULL;\n+  ClassFileStream* stream = nullptr;\n@@ -1736,1 +1736,1 @@\n-  if (existing_klass != NULL) {\n+  if (existing_klass != nullptr) {\n@@ -1743,2 +1743,2 @@\n-  InstanceKlass* const new_ik = create_instance_klass(ik, stream, existing_klass == NULL, thread);\n-  if (new_ik == NULL) {\n+  InstanceKlass* const new_ik = create_instance_klass(ik, stream, existing_klass == nullptr, thread);\n+  if (new_ik == nullptr) {\n@@ -1747,1 +1747,1 @@\n-  if (existing_klass != NULL) {\n+  if (existing_klass != nullptr) {\n@@ -1765,1 +1765,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -1778,1 +1778,1 @@\n-  assert(methods != NULL, \"invariant\");\n+  assert(methods != nullptr, \"invariant\");\n@@ -1790,1 +1790,1 @@\n-  assert(methods != NULL, \"invariant\");\n+  assert(methods != nullptr, \"invariant\");\n@@ -1802,1 +1802,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -1805,1 +1805,1 @@\n-  if (ik->class_loader() == NULL) {\n+  if (ik->class_loader() == nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":161,"deletions":161,"binary":false,"changes":322,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-static JfrJvmtiAgent* agent = NULL;\n-static jvmtiEnv* jfr_jvmti_env = NULL;\n+static JfrJvmtiAgent* agent = nullptr;\n+static jvmtiEnv* jfr_jvmti_env = nullptr;\n@@ -48,1 +48,1 @@\n-    char* errnum_str = NULL;\n+    char* errnum_str = nullptr;\n@@ -52,2 +52,2 @@\n-                           NULL == errnum_str ? \"Unknown\" : errnum_str,\n-                           NULL == str ? \"\" : str);\n+                           nullptr == errnum_str ? \"Unknown\" : errnum_str,\n+                           nullptr == str ? \"\" : str);\n@@ -61,1 +61,1 @@\n-  assert(jfr_jvmti_env != NULL, \"invariant\");\n+  assert(jfr_jvmti_env != nullptr, \"invariant\");\n@@ -68,1 +68,1 @@\n-  return set_event_notification_mode(mode, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, NULL);\n+  return set_event_notification_mode(mode, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, nullptr);\n@@ -82,1 +82,1 @@\n-  if (class_being_redefined == NULL) {\n+  if (class_being_redefined == nullptr) {\n@@ -103,1 +103,1 @@\n-  if (NULL == classes) {\n+  if (nullptr == classes) {\n@@ -122,1 +122,1 @@\n-    assert(jvmti_error_name != NULL, \"invariant\");\n+    assert(jvmti_error_name != nullptr, \"invariant\");\n@@ -135,1 +135,1 @@\n-  assert(env != NULL, \"invariant\");\n+  assert(env != nullptr, \"invariant\");\n@@ -150,2 +150,2 @@\n-  assert(env != NULL, \"invariant\");\n-  assert(classes_array != NULL, \"invariant\");\n+  assert(env != nullptr, \"invariant\");\n+  assert(classes_array != nullptr, \"invariant\");\n@@ -160,1 +160,1 @@\n-  assert(classes != NULL, \"invariant\");\n+  assert(classes != nullptr, \"invariant\");\n@@ -185,1 +185,1 @@\n-  assert(jfr_jvmti_env != NULL, \"invariant\");\n+  assert(jfr_jvmti_env != nullptr, \"invariant\");\n@@ -196,1 +196,1 @@\n-  assert(jfr_jvmti_env != NULL, \"invariant\");\n+  assert(jfr_jvmti_env != nullptr, \"invariant\");\n@@ -209,1 +209,1 @@\n-  assert(jfr_jvmti_env == NULL, \"invariant\");\n+  assert(jfr_jvmti_env == nullptr, \"invariant\");\n@@ -217,1 +217,1 @@\n-  assert(jfr_jvmti_env != NULL, \"invariant\");\n+  assert(jfr_jvmti_env != nullptr, \"invariant\");\n@@ -231,1 +231,1 @@\n-  if (jfr_jvmti_env != NULL) {\n+  if (jfr_jvmti_env != nullptr) {\n@@ -236,1 +236,1 @@\n-    jfr_jvmti_env = NULL;\n+    jfr_jvmti_env = nullptr;\n@@ -241,1 +241,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -245,1 +245,1 @@\n-    assert(jfr_jvmti_env == NULL, \"invariant\");\n+    assert(jfr_jvmti_env == nullptr, \"invariant\");\n@@ -248,1 +248,1 @@\n-  assert(jfr_jvmti_env != NULL, \"invariant\");\n+  assert(jfr_jvmti_env != nullptr, \"invariant\");\n@@ -268,1 +268,1 @@\n-  assert(agent == NULL, \"invariant\");\n+  assert(agent == nullptr, \"invariant\");\n@@ -275,1 +275,1 @@\n-  if (agent == NULL) {\n+  if (agent == nullptr) {\n@@ -280,1 +280,1 @@\n-    agent = NULL;\n+    agent = nullptr;\n@@ -287,1 +287,1 @@\n-  if (agent != NULL) {\n+  if (agent != nullptr) {\n@@ -289,1 +289,1 @@\n-    agent = NULL;\n+    agent = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  assert(str != NULL, \"invariant\");\n+  assert(str != nullptr, \"invariant\");\n@@ -47,1 +47,1 @@\n-  assert(k_sym != NULL, \"invariant\");\n+  assert(k_sym != nullptr, \"invariant\");\n@@ -57,1 +57,1 @@\n-  assert(_storage != NULL, \"invariant\");\n+  assert(_storage != nullptr, \"invariant\");\n@@ -65,1 +65,1 @@\n-  assert(_storage != NULL, \"invariant\");\n+  assert(_storage != nullptr, \"invariant\");\n@@ -73,2 +73,2 @@\n-  assert(_storage != NULL, \"invariant\");\n-  assert(receiver != NULL, \"invariant\");\n+  assert(_storage != nullptr, \"invariant\");\n+  assert(receiver != nullptr, \"invariant\");\n@@ -91,1 +91,1 @@\n-  assert(_storage != NULL, \"invariant\");\n+  assert(_storage != nullptr, \"invariant\");\n@@ -187,2 +187,2 @@\n-JfrJavaArguments::JfrJavaArguments(JavaValue* result) : _result(result), _klass(NULL), _name(NULL), _signature(NULL), _array_length(-1) {\n-  assert(result != NULL, \"invariant\");\n+JfrJavaArguments::JfrJavaArguments(JavaValue* result) : _result(result), _klass(nullptr), _name(nullptr), _signature(nullptr), _array_length(-1) {\n+  assert(result != nullptr, \"invariant\");\n@@ -193,3 +193,3 @@\n-  _klass(NULL),\n-  _name(NULL),\n-  _signature(NULL),\n+  _klass(nullptr),\n+  _name(nullptr),\n+  _signature(nullptr),\n@@ -197,2 +197,2 @@\n-  assert(result != NULL, \"invariant\");\n-  if (klass_name != NULL) {\n+  assert(result != nullptr, \"invariant\");\n+  if (klass_name != nullptr) {\n@@ -201,1 +201,1 @@\n-  if (name != NULL) {\n+  if (name != nullptr) {\n@@ -204,1 +204,1 @@\n-  if (signature != NULL) {\n+  if (signature != nullptr) {\n@@ -210,3 +210,3 @@\n-  _klass(NULL),\n-  _name(NULL),\n-  _signature(NULL),\n+  _klass(nullptr),\n+  _name(nullptr),\n+  _signature(nullptr),\n@@ -214,2 +214,2 @@\n-  assert(result != NULL, \"invariant\");\n-  if (klass != NULL) {\n+  assert(result != nullptr, \"invariant\");\n+  if (klass != nullptr) {\n@@ -218,1 +218,1 @@\n-  if (name != NULL) {\n+  if (name != nullptr) {\n@@ -221,1 +221,1 @@\n-  if (signature != NULL) {\n+  if (signature != nullptr) {\n@@ -227,1 +227,1 @@\n-  assert(_klass != NULL, \"invariant\");\n+  assert(_klass != nullptr, \"invariant\");\n@@ -232,1 +232,1 @@\n-  assert(klass_name != NULL, \"invariant\");\n+  assert(klass_name != nullptr, \"invariant\");\n@@ -234,1 +234,1 @@\n-  assert(k_sym != NULL, \"invariant\");\n+  assert(k_sym != nullptr, \"invariant\");\n@@ -240,1 +240,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -245,1 +245,1 @@\n-  assert(_name != NULL, \"invariant\");\n+  assert(_name != nullptr, \"invariant\");\n@@ -250,1 +250,1 @@\n-  assert(name != NULL, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n@@ -256,1 +256,1 @@\n-  assert(name != NULL, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n@@ -261,1 +261,1 @@\n-  assert(_signature != NULL, \"invariant\");\n+  assert(_signature != nullptr, \"invariant\");\n@@ -266,1 +266,1 @@\n-  assert(signature != NULL, \"invariant\");\n+  assert(signature != nullptr, \"invariant\");\n@@ -272,1 +272,1 @@\n-  assert(signature != NULL, \"invariant\");\n+  assert(signature != nullptr, \"invariant\");\n@@ -286,1 +286,1 @@\n-  assert(_result != NULL, \"invariant\");\n+  assert(_result != nullptr, \"invariant\");\n@@ -351,1 +351,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -361,1 +361,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -372,1 +372,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.cpp","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -89,1 +89,1 @@\n-  return obj == NULL ? NULL : local_jni_handle(obj, t);\n+  return obj == nullptr ? nullptr : local_jni_handle(obj, t);\n@@ -104,1 +104,1 @@\n-  return obj == NULL ? NULL : global_jni_handle(obj, t);\n+  return obj == nullptr ? nullptr : global_jni_handle(obj, t);\n@@ -119,1 +119,1 @@\n-  return obj == NULL ? NULL : global_weak_jni_handle(obj, t);\n+  return obj == nullptr ? nullptr : global_weak_jni_handle(obj, t);\n@@ -150,1 +150,1 @@\n-  assert(object != NULL, \"invariant\");\n+  assert(object != nullptr, \"invariant\");\n@@ -165,3 +165,3 @@\n-  assert(args != NULL, \"invariant\");\n-  assert(result != NULL, \"invariant\");\n-  assert(klass != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -182,3 +182,3 @@\n-  assert(args != NULL, \"invariant\");\n-  assert(result != NULL, \"invariant\");\n-  assert(klass != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -195,2 +195,2 @@\n-  assert(args != NULL, \"invariant\");\n-  assert(result != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -213,1 +213,1 @@\n-  assert(result != NULL, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -216,1 +216,1 @@\n-  if (result_oop == NULL) {\n+  if (result_oop == nullptr) {\n@@ -225,1 +225,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -231,1 +231,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -234,1 +234,1 @@\n-  assert(result != NULL, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -240,1 +240,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -243,1 +243,1 @@\n-  assert(result != NULL, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -249,1 +249,1 @@\n-  assert(c_str != NULL, \"invariant\");\n+  assert(c_str != nullptr, \"invariant\");\n@@ -292,1 +292,1 @@\n-  assert(arr != NULL, \"invariant\");\n+  assert(arr != nullptr, \"invariant\");\n@@ -304,1 +304,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -310,1 +310,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -316,1 +316,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -322,1 +322,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -328,1 +328,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -333,1 +333,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -335,1 +335,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -370,1 +370,1 @@\n-  assert(result != NULL, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -372,1 +372,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -405,1 +405,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -407,1 +407,1 @@\n-    return ik->find_field(name_symbol, signature_symbol, is_static, fd) != NULL;\n+    return ik->find_field(name_symbol, signature_symbol, is_static, fd) != nullptr;\n@@ -413,2 +413,2 @@\n-  assert(args != NULL, \"invariant\");\n-  assert(ik != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -416,1 +416,1 @@\n-  assert(fd != NULL, \"invariant\");\n+  assert(fd != nullptr, \"invariant\");\n@@ -434,2 +434,2 @@\n-  assert(args != NULL, \"invariant\");\n-  assert(result != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -444,1 +444,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -461,1 +461,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -466,1 +466,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -471,1 +471,1 @@\n-  assert(args != NULL, \"invariant\");\n+  assert(args != nullptr, \"invariant\");\n@@ -474,1 +474,1 @@\n-  assert(result != NULL, \"invariant\");\n+  assert(result != nullptr, \"invariant\");\n@@ -501,1 +501,1 @@\n-  assert(obj != NULL, \"invariant\");\n+  assert(obj != nullptr, \"invariant\");\n@@ -511,1 +511,1 @@\n-  char* str = NULL;\n+  char* str = nullptr;\n@@ -513,1 +513,1 @@\n-  if (value != NULL) {\n+  if (value != nullptr) {\n@@ -516,2 +516,2 @@\n-    if (str == NULL) {\n-      return NULL;\n+    if (str == nullptr) {\n+      return nullptr;\n@@ -525,1 +525,1 @@\n-  return string != NULL ? c_str(resolve_non_null(string), thread, c_heap) : NULL;\n+  return string != nullptr ? c_str(resolve_non_null(string), thread, c_heap) : nullptr;\n@@ -532,1 +532,1 @@\n-  assert(name != NULL, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n@@ -611,1 +611,1 @@\n-  assert(throwable != NULL, \"invariant\");\n+  assert(throwable != nullptr, \"invariant\");\n@@ -646,1 +646,1 @@\n-  assert(stream != NULL, \"invariant\");\n+  assert(stream != nullptr, \"invariant\");\n@@ -657,1 +657,1 @@\n-    if (stream != NULL) {\n+    if (stream != nullptr) {\n@@ -669,2 +669,2 @@\n-  JavaThread* native_thread = NULL;\n-  (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);\n+  JavaThread* native_thread = nullptr;\n+  (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, nullptr);\n@@ -779,1 +779,1 @@\n-  assert(descriptor != NULL, \"invariant\");\n+  assert(descriptor != nullptr, \"invariant\");\n@@ -791,1 +791,1 @@\n-  return typed_field_holder != NULL ? typed_field_holder : ik->find_field(vmSymbols::eventConfiguration_name(),\n+  return typed_field_holder != nullptr ? typed_field_holder : ik->find_field(vmSymbols::eventConfiguration_name(),\n@@ -804,1 +804,1 @@\n-  if (field_holder == NULL) {\n+  if (field_holder == nullptr) {\n@@ -806,1 +806,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -810,1 +810,1 @@\n-  return configuration_oop != NULL ? JfrJavaSupport::local_jni_handle(configuration_oop, THREAD) : NULL;\n+  return configuration_oop != nullptr ? JfrJavaSupport::local_jni_handle(configuration_oop, THREAD) : nullptr;\n@@ -820,1 +820,1 @@\n-  if (field_holder == NULL) {\n+  if (field_holder == nullptr) {\n@@ -826,1 +826,1 @@\n-  assert(configuration_oop != NULL, \"invariant\");\n+  assert(configuration_oop != nullptr, \"invariant\");\n@@ -839,1 +839,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-  return pid_string; \/\/ exception pending if NULL\n+  return pid_string; \/\/ exception pending if null\n@@ -186,1 +186,1 @@\n-  const char* type_name = env->GetStringUTFChars(type, NULL);\n+  const char* type_name = env->GetStringUTFChars(type, nullptr);\n@@ -318,2 +318,2 @@\n-  if (dumppath == NULL) {\n-    JfrEmergencyDump::set_dump_path(NULL);\n+  if (dumppath == nullptr) {\n+    JfrEmergencyDump::set_dump_path(nullptr);\n@@ -321,1 +321,1 @@\n-    const char* dump_path = env->GetStringUTFChars(dumppath, NULL);\n+    const char* dump_path = env->GetStringUTFChars(dumppath, nullptr);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-  assert(env != NULL, \"invariant\");\n+  assert(env != nullptr, \"invariant\");\n@@ -36,1 +36,1 @@\n-  if (jfr_clz != NULL) {\n+  if (jfr_clz != nullptr) {\n@@ -104,1 +104,1 @@\n-      assert(jt != NULL, \"invariant\");\n+      assert(jt != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,7 +44,7 @@\n-static Symbol* jvm_upcalls_class_sym = NULL;\n-static Symbol* on_retransform_method_sym = NULL;\n-static Symbol* on_retransform_signature_sym = NULL;\n-static Symbol* bytes_for_eager_instrumentation_sym = NULL;\n-static Symbol* bytes_for_eager_instrumentation_sig_sym = NULL;\n-static Symbol* unhide_internal_types_sym = NULL;\n-static Symbol* unhide_internal_types_sig_sym = NULL;\n+static Symbol* jvm_upcalls_class_sym = nullptr;\n+static Symbol* on_retransform_method_sym = nullptr;\n+static Symbol* on_retransform_signature_sym = nullptr;\n+static Symbol* bytes_for_eager_instrumentation_sym = nullptr;\n+static Symbol* bytes_for_eager_instrumentation_sig_sym = nullptr;\n+static Symbol* unhide_internal_types_sym = nullptr;\n+static Symbol* unhide_internal_types_sig_sym = nullptr;\n@@ -63,1 +63,1 @@\n-    initialized = unhide_internal_types_sig_sym != NULL;\n+    initialized = unhide_internal_types_sig_sym != nullptr;\n@@ -80,1 +80,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -94,1 +94,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -98,1 +98,1 @@\n-  assert(res != NULL, \"invariant\");\n+  assert(res != nullptr, \"invariant\");\n@@ -123,4 +123,4 @@\n-  assert(class_being_redefined != NULL, \"invariant\");\n-  assert(class_data != NULL, \"invariant\");\n-  assert(new_class_data_len != NULL, \"invariant\");\n-  assert(new_class_data != NULL, \"invariant\");\n+  assert(class_being_redefined != nullptr, \"invariant\");\n+  assert(class_data != nullptr, \"invariant\");\n+  assert(new_class_data_len != nullptr, \"invariant\");\n+  assert(new_class_data != nullptr, \"invariant\");\n@@ -142,1 +142,1 @@\n-  assert(new_byte_array != NULL, \"invariant\");\n+  assert(new_byte_array != nullptr, \"invariant\");\n@@ -145,1 +145,1 @@\n-  if (new_bytes == NULL) {\n+  if (new_bytes == nullptr) {\n@@ -148,1 +148,1 @@\n-  assert(new_bytes != NULL, \"invariant\");\n+  assert(new_bytes != nullptr, \"invariant\");\n@@ -164,4 +164,4 @@\n-  assert(super != NULL, \"invariant\");\n-  assert(class_data != NULL, \"invariant\");\n-  assert(new_class_data_len != NULL, \"invariant\");\n-  assert(new_class_data != NULL, \"invariant\");\n+  assert(super != nullptr, \"invariant\");\n+  assert(class_data != nullptr, \"invariant\");\n+  assert(new_class_data_len != nullptr, \"invariant\");\n+  assert(new_class_data != nullptr, \"invariant\");\n@@ -180,1 +180,1 @@\n-  assert(new_byte_array != NULL, \"invariant\");\n+  assert(new_byte_array != nullptr, \"invariant\");\n@@ -183,1 +183,1 @@\n-  if (new_bytes == NULL) {\n+  if (new_bytes == nullptr) {\n@@ -186,1 +186,1 @@\n-  assert(new_bytes != NULL, \"invariant\");\n+  assert(new_bytes != nullptr, \"invariant\");\n@@ -196,1 +196,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-  _current_parent(NULL),\n+  _current_parent(nullptr),\n@@ -109,1 +109,1 @@\n-    assert(edge->parent() == NULL, \"invariant\");\n+    assert(edge->parent() == nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-    assert(_current_parent != NULL, \"invariant\");\n+    assert(_current_parent != nullptr, \"invariant\");\n@@ -139,1 +139,1 @@\n-    if (_current_parent != NULL) {\n+    if (_current_parent != nullptr) {\n@@ -150,1 +150,1 @@\n-  assert(pointee != NULL, \"invariant\");\n+  assert(pointee != nullptr, \"invariant\");\n@@ -153,1 +153,1 @@\n-  _edge_store->put_chain(&leak_edge, _current_parent == NULL ? 1 : _current_frontier_level + 2);\n+  _edge_store->put_chain(&leak_edge, _current_parent == nullptr ? 1 : _current_frontier_level + 2);\n@@ -162,1 +162,1 @@\n-    if (edge->pointee() != NULL) {\n+    if (edge->pointee() != nullptr) {\n@@ -206,1 +206,1 @@\n-  assert(parent != NULL, \"invariant\");\n+  assert(parent != nullptr, \"invariant\");\n@@ -208,1 +208,1 @@\n-  assert(pointee != NULL, \"invariant\");\n+  assert(pointee != nullptr, \"invariant\");\n@@ -214,1 +214,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n@@ -217,1 +217,1 @@\n-  if (pointee != NULL) {\n+  if (pointee != nullptr) {\n@@ -223,1 +223,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n@@ -226,1 +226,1 @@\n-  if (pointee != NULL) {\n+  if (pointee != nullptr) {\n@@ -232,1 +232,1 @@\n-  assert(ref.dereference() != NULL, \"pointee must not be null\");\n+  assert(ref.dereference() != nullptr, \"pointee must not be null\");\n@@ -234,1 +234,1 @@\n-    _edge_queue->add(NULL, ref);\n+    _edge_queue->add(nullptr, ref);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,3 @@\n-  assert(edge_store != NULL, \"invariant\");\n-  assert(mark_bits != NULL,\" invariant\");\n-  assert(start_edge != NULL, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n+  assert(mark_bits != nullptr,\" invariant\");\n+  assert(start_edge != nullptr, \"invariant\");\n@@ -56,2 +56,2 @@\n-  assert(edge_store != NULL, \"invariant\");\n-  assert(mark_bits != NULL, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n+  assert(mark_bits != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-  DFSClosure dfs(edge_store, mark_bits, NULL);\n+  DFSClosure dfs(edge_store, mark_bits, nullptr);\n@@ -77,1 +77,1 @@\n-  assert(pointee != NULL, \"invariant\");\n+  assert(pointee != nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-  if (_start_edge != NULL) {\n+  if (_start_edge != nullptr) {\n@@ -129,1 +129,1 @@\n-    chain[idx - 1] = Edge(NULL, chain[idx - 1].reference());\n+    chain[idx - 1] = Edge(nullptr, chain[idx - 1].reference());\n@@ -131,1 +131,1 @@\n-  _edge_store->put_chain(chain, idx + (_start_edge != NULL ? _start_edge->distance_to_root() : 0));\n+  _edge_store->put_chain(chain, idx + (_start_edge != nullptr ? _start_edge->distance_to_root() : 0));\n@@ -135,1 +135,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n@@ -138,1 +138,1 @@\n-  if (pointee != NULL) {\n+  if (pointee != nullptr) {\n@@ -144,1 +144,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n@@ -147,1 +147,1 @@\n-  if (pointee != NULL) {\n+  if (pointee != nullptr) {\n@@ -155,1 +155,1 @@\n-  assert(pointee != NULL, \"invariant\");\n+  assert(pointee != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  return is_root() ? (oop)NULL : _parent->pointee();\n+  return is_root() ? (oop)nullptr : _parent->pointee();\n@@ -43,1 +43,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edge.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    return _parent == NULL;\n+    return _parent == nullptr;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edge.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  _vmm(NULL),\n+  _vmm(nullptr),\n@@ -40,1 +40,1 @@\n-  assert(_vmm == NULL, \"invariant\");\n+  assert(_vmm == nullptr, \"invariant\");\n@@ -42,1 +42,1 @@\n-  return _vmm != NULL && _vmm->initialize(_reservation_size_bytes, _commit_block_size_bytes, sizeof(Edge));\n+  return _vmm != nullptr && _vmm->initialize(_reservation_size_bytes, _commit_block_size_bytes, sizeof(Edge));\n@@ -54,1 +54,1 @@\n-  assert(allocation != NULL, \"invariant\");\n+  assert(allocation != nullptr, \"invariant\");\n@@ -89,1 +89,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -94,1 +94,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -99,1 +99,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeQueue.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -52,1 +52,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -58,1 +58,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -64,1 +64,1 @@\n-  return get(reference) != NULL;\n+  return get(reference) != nullptr;\n@@ -71,1 +71,1 @@\n-  return entry != NULL ? entry->literal_addr() : NULL;\n+  return entry != nullptr ? entry->literal_addr() : nullptr;\n@@ -76,2 +76,2 @@\n-  const StoredEdge e(NULL, reference);\n-  assert(NULL == _edges->lookup_only(reference.addr<uintptr_t>()), \"invariant\");\n+  const StoredEdge e(nullptr, reference);\n+  assert(nullptr == _edges->lookup_only(reference.addr<uintptr_t>()), \"invariant\");\n@@ -83,1 +83,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n@@ -85,1 +85,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -90,1 +90,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n@@ -96,1 +96,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n@@ -98,2 +98,2 @@\n-  assert(root != NULL, \"invariant\");\n-  assert(root->parent() == NULL, \"invariant\");\n+  assert(root != nullptr, \"invariant\");\n+  assert(root->parent() == nullptr, \"invariant\");\n@@ -108,1 +108,1 @@\n-  assert(target != NULL, \"invariant\");\n+  assert(target != nullptr, \"invariant\");\n@@ -114,3 +114,3 @@\n-  assert(*previous != NULL, \"invariant\");\n-  assert((*previous)->parent() == NULL, \"invariant\");\n-  assert(*current != NULL, \"invariant\");\n+  assert(*previous != nullptr, \"invariant\");\n+  assert((*previous)->parent() == nullptr, \"invariant\");\n+  assert(*current != nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-  assert(skip_ancestor != NULL, \"invariant\");\n+  assert(skip_ancestor != nullptr, \"invariant\");\n@@ -131,1 +131,1 @@\n-  if (stored_target != NULL) {\n+  if (stored_target != nullptr) {\n@@ -137,1 +137,1 @@\n-  assert(stored_target == NULL, \"invariant\");\n+  assert(stored_target == nullptr, \"invariant\");\n@@ -139,1 +139,1 @@\n-  assert(stored_target != NULL, \"invariant\");\n+  assert(stored_target != nullptr, \"invariant\");\n@@ -147,3 +147,3 @@\n-  assert(current_stored != NULL, \"invariant\");\n-  assert(*previous != NULL, \"invariant\");\n-  assert((*previous)->parent() == NULL, \"invariant\");\n+  assert(current_stored != nullptr, \"invariant\");\n+  assert(*previous != nullptr, \"invariant\");\n+  assert((*previous)->parent() == nullptr, \"invariant\");\n@@ -154,2 +154,2 @@\n-  assert(edge != NULL, \"invariant\");\n-  assert(distance != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n+  assert(distance != nullptr, \"invariant\");\n@@ -158,1 +158,1 @@\n-  while (current != NULL && !current->is_skip_edge()) {\n+  while (current != nullptr && !current->is_skip_edge()) {\n@@ -166,2 +166,2 @@\n-  assert(current_stored != NULL, \"invariant\");\n-  assert((*previous)->parent() == NULL, \"invariant\");\n+  assert(current_stored != nullptr, \"invariant\");\n+  assert((*previous)->parent() == nullptr, \"invariant\");\n@@ -170,1 +170,1 @@\n-  if (closest_skip_edge == NULL) {\n+  if (closest_skip_edge == nullptr) {\n@@ -191,3 +191,3 @@\n-  assert(*previous != NULL, \"invariant\");\n-  assert((*previous)->parent() == NULL, \"invariant\");\n-  assert(*current != NULL, \"invariant\");\n+  assert(*previous != nullptr, \"invariant\");\n+  assert((*previous)->parent() == nullptr, \"invariant\");\n+  assert(*current != nullptr, \"invariant\");\n@@ -196,1 +196,1 @@\n-  assert(stored_edge != NULL, \"invariant\");\n+  assert(stored_edge != nullptr, \"invariant\");\n@@ -202,2 +202,2 @@\n-  assert(*previous != NULL, \"invariant\");\n-  assert(*current != NULL, \"invariant\");\n+  assert(*previous != nullptr, \"invariant\");\n+  assert(*current != nullptr, \"invariant\");\n@@ -205,1 +205,1 @@\n-  while (*current != NULL && depth < limit) {\n+  while (*current != nullptr && depth < limit) {\n@@ -207,1 +207,1 @@\n-    if (stored_edge != NULL) {\n+    if (stored_edge != nullptr) {\n@@ -212,1 +212,1 @@\n-    assert((*previous)->parent() != NULL, \"invariant\");\n+    assert((*previous)->parent() != nullptr, \"invariant\");\n@@ -217,1 +217,1 @@\n-  return NULL == *current;\n+  return nullptr == *current;\n@@ -225,1 +225,1 @@\n-  assert(_edges != NULL, \"invariant\");\n+  assert(_edges != nullptr, \"invariant\");\n@@ -268,1 +268,1 @@\n-  assert(sample_object != NULL, \"invariant\");\n+  assert(sample_object != nullptr, \"invariant\");\n@@ -301,1 +301,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n@@ -318,1 +318,1 @@\n-  assert(chain != NULL, \"invariant\");\n+  assert(chain != nullptr, \"invariant\");\n@@ -321,2 +321,2 @@\n-  assert(leak_context_edge != NULL, \"invariant\");\n-  assert(leak_context_edge->parent() == NULL, \"invariant\");\n+  assert(leak_context_edge != nullptr, \"invariant\");\n+  assert(leak_context_edge->parent() == nullptr, \"invariant\");\n@@ -330,1 +330,1 @@\n-  assert(current != NULL, \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n@@ -336,1 +336,1 @@\n-    assert(previous != NULL, \"invariant\");\n+    assert(previous != nullptr, \"invariant\");\n@@ -348,1 +348,1 @@\n-    assert(previous != NULL, \"invariant\");\n+    assert(previous != nullptr, \"invariant\");\n@@ -350,1 +350,1 @@\n-    assert(previous->parent() != NULL, \"invariant\");\n+    assert(previous->parent() != nullptr, \"invariant\");\n@@ -359,1 +359,1 @@\n-  assert(previous != NULL, \"invariant\");\n+  assert(previous != nullptr, \"invariant\");\n@@ -364,2 +364,2 @@\n-  assert(leak_context_edge != NULL, \"invariant\");\n-  assert(root != NULL, \"invariant\");\n+  assert(leak_context_edge != nullptr, \"invariant\");\n+  assert(root != nullptr, \"invariant\");\n@@ -373,1 +373,1 @@\n-  assert(leak_context_edge != NULL, \"invariant\");\n+  assert(leak_context_edge != nullptr, \"invariant\");\n@@ -375,2 +375,2 @@\n-  assert(root != NULL, \"invariant\");\n-  assert(root->parent() == NULL, \"invariant\");\n+  assert(root != nullptr, \"invariant\");\n+  assert(root->parent() == nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeStore.cpp","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-  assert(ref_owner != NULL, \"invariant\");\n-  assert(ik != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -46,1 +46,1 @@\n-  assert(ref_owner != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-  assert(modifiers != NULL, \"invariant\");\n+  assert(modifiers != nullptr, \"invariant\");\n@@ -62,1 +62,1 @@\n-  assert(ref_owner != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n@@ -71,1 +71,1 @@\n-  while (ik != NULL) {\n+  while (ik != nullptr) {\n@@ -83,1 +83,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -89,1 +89,1 @@\n-  assert(ref_owner != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n@@ -96,1 +96,1 @@\n-  assert(ref_owner != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n@@ -113,1 +113,1 @@\n-  assert(ref_owner != NULL, \"invariant\");\n+  assert(ref_owner != nullptr, \"invariant\");\n@@ -121,1 +121,1 @@\n-  while (parent != NULL) {\n+  while (parent != nullptr) {\n@@ -125,1 +125,1 @@\n-  assert(current != NULL, \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n@@ -133,1 +133,1 @@\n-  while (parent != NULL && seek != distance) {\n+  while (parent != nullptr && seek != distance) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    ObjectSampleMarkWord() : _obj(NULL), _mark_word(markWord::zero()) {}\n+    ObjectSampleMarkWord() : _obj(nullptr), _mark_word(markWord::zero()) {}\n@@ -57,1 +57,1 @@\n-    assert(_store != NULL, \"invariant\");\n+    assert(_store != nullptr, \"invariant\");\n@@ -67,1 +67,1 @@\n-    assert(obj != NULL, \"invariant\");\n+    assert(obj != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/objectSampleMarker.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n@@ -58,1 +58,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/rootSetClosure.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  assert(sampler != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n@@ -74,2 +74,2 @@\n-  assert(object_sampler != NULL, \"invariant\");\n-  assert(edge_store != NULL, \"invariant\");\n+  assert(object_sampler != nullptr, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n@@ -83,1 +83,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n@@ -99,1 +99,1 @@\n-    while (current != NULL) {\n+    while (current != nullptr) {\n@@ -111,1 +111,1 @@\n-  assert(object != NULL, \"invariant\");\n+  assert(object != nullptr, \"invariant\");\n@@ -119,1 +119,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -121,1 +121,1 @@\n-  assert(edge_store != NULL, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n@@ -135,1 +135,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -137,2 +137,2 @@\n-  assert(edge_store != NULL, \"invariant\");\n-  assert(_jfr_thread_local != NULL, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n+  assert(_jfr_thread_local != nullptr, \"invariant\");\n@@ -141,1 +141,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/eventEmitter.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-static GrowableArray<traceid>* unloaded_thread_id_set = NULL;\n+static GrowableArray<traceid>* unloaded_thread_id_set = nullptr;\n@@ -72,1 +72,1 @@\n-  if (unloaded_thread_id_set == NULL) {\n+  if (unloaded_thread_id_set == nullptr) {\n@@ -81,1 +81,1 @@\n-  if (unloaded_thread_id_set == NULL) {\n+  if (unloaded_thread_id_set == nullptr) {\n@@ -96,1 +96,1 @@\n-  if (unloaded_thread_id_set != NULL) {\n+  if (unloaded_thread_id_set != nullptr) {\n@@ -98,1 +98,1 @@\n-    unloaded_thread_id_set = NULL;\n+    unloaded_thread_id_set = nullptr;\n@@ -100,1 +100,1 @@\n-  assert(unloaded_thread_id_set == NULL, \"invariant\");\n+  assert(unloaded_thread_id_set == nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -115,1 +115,1 @@\n-  assert(sampler != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n@@ -117,2 +117,2 @@\n-  assert(last != NULL, \"invariant\");\n-  do_samples(last, all ? NULL : sampler->last_resolved(), processor);\n+  assert(last != nullptr, \"invariant\");\n+  do_samples(last, all ? nullptr : sampler->last_resolved(), processor);\n@@ -140,2 +140,2 @@\n-  assert(sampler != NULL, \"invariant\");\n-  if (sampler->last() == NULL) {\n+  assert(sampler != nullptr, \"invariant\");\n+  if (sampler->last() == nullptr) {\n@@ -166,1 +166,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -170,1 +170,1 @@\n-  return entry != NULL ? entry->literal() : JfrBlobHandle();\n+  return entry != nullptr ? entry->literal() : JfrBlobHandle();\n@@ -174,2 +174,2 @@\n-  assert(sample != NULL, \"invariant\");\n-  assert(_table.lookup_only(sample->stack_trace_hash()) == NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n+  assert(_table.lookup_only(sample->stack_trace_hash()) == nullptr, \"invariant\");\n@@ -182,1 +182,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -188,1 +188,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -194,1 +194,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -197,1 +197,1 @@\n-static GrowableArray<traceid>* id_set = NULL;\n+static GrowableArray<traceid>* id_set = nullptr;\n@@ -204,1 +204,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -230,1 +230,1 @@\n-  assert(stack_trace != NULL, \"invariant\");\n+  assert(stack_trace != nullptr, \"invariant\");\n@@ -258,1 +258,1 @@\n-  assert(sampler != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n@@ -269,1 +269,1 @@\n-  assert(sampler != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n@@ -287,1 +287,1 @@\n-  assert(id_set != NULL, \"invariant\");\n+  assert(id_set != nullptr, \"invariant\");\n@@ -292,1 +292,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -297,1 +297,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -303,1 +303,1 @@\n-  assert(trace != NULL, \"invariant\");\n+  assert(trace != nullptr, \"invariant\");\n@@ -344,1 +344,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -381,3 +381,3 @@\n-  assert(sampler != NULL, \"invariant\");\n-  assert(edge_store != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n+  assert(edge_store != nullptr, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -433,1 +433,1 @@\n-  if (writer.has_data() && last != NULL) {\n+  if (writer.has_data() && last != nullptr) {\n@@ -443,1 +443,1 @@\n-  if (writer.has_data() && ObjectSampler::sampler()->last() != NULL) {\n+  if (writer.has_data() && ObjectSampler::sampler()->last() != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-static Symbol* symbol_size = NULL;\n+static Symbol* symbol_size = nullptr;\n@@ -81,1 +81,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -85,1 +85,1 @@\n-  assert(copy != NULL, \"invariant\");\n+  assert(copy != nullptr, \"invariant\");\n@@ -95,1 +95,1 @@\n-  if (symbol_size == NULL) {\n+  if (symbol_size == nullptr) {\n@@ -153,1 +153,1 @@\n-  if (k == NULL) {\n+  if (k == nullptr) {\n@@ -156,1 +156,1 @@\n-    \/\/ If ak is NULL, this is most likely a mirror associated with a\n+    \/\/ If ak is null, this is most likely a mirror associated with a\n@@ -159,1 +159,1 @@\n-    if (ak != NULL) {\n+    if (ak != nullptr) {\n@@ -171,1 +171,1 @@\n-    if (name != NULL) {\n+    if (name != nullptr) {\n@@ -181,1 +181,1 @@\n-  if (tg_name != NULL) {\n+  if (tg_name != nullptr) {\n@@ -190,1 +190,1 @@\n-  if (name != NULL) {\n+  if (name != nullptr) {\n@@ -192,1 +192,1 @@\n-    if (p != NULL) {\n+    if (p != nullptr) {\n@@ -211,1 +211,1 @@\n-    if (ik->find_field(symbol_size, vmSymbols::int_signature(), false, &fd) != NULL) {\n+    if (ik->find_field(symbol_size, vmSymbols::int_signature(), false, &fd) != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleDescription.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-  ObjectSampleFieldInfo() : _field_name_symbol(NULL), _field_modifiers(0) {}\n+  ObjectSampleFieldInfo() : _field_name_symbol(nullptr), _field_modifiers(0) {}\n@@ -70,2 +70,2 @@\n-  ObjectSampleRootDescriptionData() : _root_edge(NULL),\n-                                      _description(NULL),\n+  ObjectSampleRootDescriptionData() : _root_edge(nullptr),\n+                                      _description(nullptr),\n@@ -97,1 +97,1 @@\n-  SampleSet() : _storage(NULL) {}\n+  SampleSet() : _storage(nullptr) {}\n@@ -100,2 +100,2 @@\n-    assert(data != NULL, \"invariant\");\n-    if (_storage == NULL) {\n+    assert(data != nullptr, \"invariant\");\n+    if (_storage == nullptr) {\n@@ -104,1 +104,1 @@\n-    assert(_storage != NULL, \"invariant\");\n+    assert(_storage != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-    return _storage != NULL ? (size_t)_storage->length() : 0;\n+    return _storage != nullptr ? (size_t)_storage->length() : 0;\n@@ -116,1 +116,1 @@\n-    if (_storage != NULL) {\n+    if (_storage != nullptr) {\n@@ -150,1 +150,1 @@\n-    assert(entry != NULL, \"invariant\");\n+    assert(entry != nullptr, \"invariant\");\n@@ -156,1 +156,1 @@\n-    assert(_lookup != NULL, \"invariant\");\n+    assert(_lookup != nullptr, \"invariant\");\n@@ -161,1 +161,1 @@\n-    assert(entry != NULL, \"invariant\");\n+    assert(entry != nullptr, \"invariant\");\n@@ -166,1 +166,1 @@\n-  FieldTable() : _table(new FieldInfoTable(this)), _lookup(NULL) {}\n+  FieldTable() : _table(new FieldInfoTable(this)), _lookup(nullptr) {}\n@@ -168,1 +168,1 @@\n-    assert(_table != NULL, \"invariant\");\n+    assert(_table != nullptr, \"invariant\");\n@@ -173,1 +173,1 @@\n-    assert(field_info != NULL, \"invariant\");\n+    assert(field_info != nullptr, \"invariant\");\n@@ -196,5 +196,5 @@\n-static SampleInfo* sample_infos = NULL;\n-static RefInfo* ref_infos = NULL;\n-static ArrayInfo* array_infos = NULL;\n-static FieldTable* field_infos = NULL;\n-static RootDescriptionInfo* root_infos = NULL;\n+static SampleInfo* sample_infos = nullptr;\n+static RefInfo* ref_infos = nullptr;\n+static ArrayInfo* array_infos = nullptr;\n+static FieldTable* field_infos = nullptr;\n+static RootDescriptionInfo* root_infos = nullptr;\n@@ -203,2 +203,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(si != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(si != nullptr, \"invariant\");\n@@ -207,1 +207,1 @@\n-  assert(object != NULL, \"invariant\");\n+  assert(object != nullptr, \"invariant\");\n@@ -221,1 +221,1 @@\n-  if (sample_infos != NULL) {\n+  if (sample_infos != nullptr) {\n@@ -228,2 +228,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(ri != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(ri != nullptr, \"invariant\");\n@@ -243,1 +243,1 @@\n-  if (ref_infos != NULL) {\n+  if (ref_infos != nullptr) {\n@@ -250,2 +250,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(ai != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(ai != nullptr, \"invariant\");\n@@ -263,1 +263,1 @@\n-  if (array_infos == NULL) {\n+  if (array_infos == nullptr) {\n@@ -266,1 +266,1 @@\n-  assert(array_infos != NULL, \"invariant\");\n+  assert(array_infos != nullptr, \"invariant\");\n@@ -269,1 +269,1 @@\n-  assert(osai != NULL, \"invariant\");\n+  assert(osai != nullptr, \"invariant\");\n@@ -280,1 +280,1 @@\n-  if (array_infos != NULL) {\n+  if (array_infos != nullptr) {\n@@ -287,2 +287,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(fi != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(fi != nullptr, \"invariant\");\n@@ -304,1 +304,1 @@\n-  if (field_name_symbol == NULL) {\n+  if (field_name_symbol == nullptr) {\n@@ -307,1 +307,1 @@\n-  if (field_infos == NULL) {\n+  if (field_infos == nullptr) {\n@@ -310,1 +310,1 @@\n-  assert(field_infos != NULL, \"invariant\");\n+  assert(field_infos != nullptr, \"invariant\");\n@@ -312,1 +312,1 @@\n-  assert(osfi != NULL, \"invariant\");\n+  assert(osfi != nullptr, \"invariant\");\n@@ -322,1 +322,1 @@\n-  if (field_infos != NULL) {\n+  if (field_infos != nullptr) {\n@@ -329,1 +329,1 @@\n-  assert(osdi != NULL, \"invariant\");\n+  assert(osdi != nullptr, \"invariant\");\n@@ -331,2 +331,2 @@\n-  if (osdi->_data._description == NULL) {\n-    return NULL;\n+  if (osdi->_data._description == nullptr) {\n+    return nullptr;\n@@ -344,2 +344,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(di != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(di != nullptr, \"invariant\");\n@@ -356,1 +356,1 @@\n-  if (root_infos == NULL) {\n+  if (root_infos == nullptr) {\n@@ -359,1 +359,1 @@\n-  assert(root_infos != NULL, \"invariant\");\n+  assert(root_infos != nullptr, \"invariant\");\n@@ -384,1 +384,1 @@\n-  assert(arr != NULL, \"invariant\");\n+  assert(arr != nullptr, \"invariant\");\n@@ -420,1 +420,1 @@\n-    assert(callback_info._low == NULL, \"invariant\");\n+    assert(callback_info._low == nullptr, \"invariant\");\n@@ -426,2 +426,2 @@\n-    assert(callback_info._high != NULL, \"invariant\");\n-    assert(callback_info._low != NULL, \"invariant\");\n+    assert(callback_info._high != nullptr, \"invariant\");\n+    assert(callback_info._low != nullptr, \"invariant\");\n@@ -439,1 +439,1 @@\n-    assert(callback_info._high != NULL, \"invariant\");\n+    assert(callback_info._high != nullptr, \"invariant\");\n@@ -453,1 +453,1 @@\n-    assert(desc != NULL, \"invariant\");\n+    assert(desc != nullptr, \"invariant\");\n@@ -461,1 +461,1 @@\n-      assert(jt != NULL, \"invariant\");\n+      assert(jt != nullptr, \"invariant\");\n@@ -470,2 +470,2 @@\n-  RootResolutionSet(RootDescriptionInfo* info) : _unresolved_roots(NULL) {\n-    assert(info != NULL, \"invariant\");\n+  RootResolutionSet(RootDescriptionInfo* info) : _unresolved_roots(nullptr) {\n+    assert(info != nullptr, \"invariant\");\n@@ -476,1 +476,1 @@\n-    assert(_unresolved_roots != NULL, \"invariant\");\n+    assert(_unresolved_roots != nullptr, \"invariant\");\n@@ -484,1 +484,1 @@\n-    if (NULL == callback_info._low) {\n+    if (nullptr == callback_info._low) {\n@@ -491,1 +491,1 @@\n-    assert(callback_info._low != NULL, \"invariant\");\n+    assert(callback_info._low != nullptr, \"invariant\");\n@@ -508,1 +508,1 @@\n-  if (root_infos != NULL) {\n+  if (root_infos != nullptr) {\n@@ -519,2 +519,2 @@\n-  assert(current != NULL, \"invariant\");\n-  if (sample_infos == NULL) {\n+  assert(current != nullptr, \"invariant\");\n+  if (sample_infos == nullptr) {\n@@ -523,1 +523,1 @@\n-  assert(sample_infos != NULL, \"invariant\");\n+  assert(sample_infos != nullptr, \"invariant\");\n@@ -525,1 +525,1 @@\n-  assert(oosi != NULL, \"invariant\");\n+  assert(oosi != nullptr, \"invariant\");\n@@ -528,1 +528,1 @@\n-  oosi->_data._reference_id = current->parent() == NULL ? 0 : id;\n+  oosi->_data._reference_id = current->parent() == nullptr ? 0 : id;\n@@ -533,2 +533,2 @@\n-  assert(current != NULL, \"invariant\");\n-  if (ref_infos == NULL) {\n+  assert(current != nullptr, \"invariant\");\n+  if (ref_infos == nullptr) {\n@@ -538,1 +538,1 @@\n-  assert(ref_infos != NULL, \"invariant\");\n+  assert(ref_infos != nullptr, \"invariant\");\n@@ -540,1 +540,1 @@\n-  assert(ri != NULL, \"invariant\");\n+  assert(ri != nullptr, \"invariant\");\n@@ -551,2 +551,2 @@\n-  assert(current != NULL, \"invariant\");\n-  return current->parent() == NULL && current->gc_root_id() != 0;\n+  assert(current != nullptr, \"invariant\");\n+  return current->parent() == nullptr && current->gc_root_id() != 0;\n@@ -556,1 +556,1 @@\n-  assert(root != NULL, \"invariant\");\n+  assert(root != nullptr, \"invariant\");\n@@ -562,1 +562,1 @@\n-  assert(edge != NULL, \"invariant\");\n+  assert(edge != nullptr, \"invariant\");\n@@ -566,1 +566,1 @@\n-  if (parent != NULL) {\n+  if (parent != nullptr) {\n@@ -612,1 +612,1 @@\n-  assert(store != NULL, \"invariant\");\n+  assert(store != nullptr, \"invariant\");\n@@ -615,5 +615,5 @@\n-  assert(field_infos == NULL, \"Invariant\");\n-  assert(sample_infos == NULL, \"Invariant\");\n-  assert(ref_infos == NULL, \"Invariant\");\n-  assert(array_infos == NULL, \"Invariant\");\n-  assert(root_infos == NULL, \"Invariant\");\n+  assert(field_infos == nullptr, \"Invariant\");\n+  assert(sample_infos == nullptr, \"Invariant\");\n+  assert(ref_infos == nullptr, \"Invariant\");\n+  assert(array_infos == nullptr, \"Invariant\");\n+  assert(root_infos == nullptr, \"Invariant\");\n@@ -630,1 +630,1 @@\n-  if (field_infos != NULL) {\n+  if (field_infos != nullptr) {\n@@ -632,1 +632,1 @@\n-    field_infos = NULL;\n+    field_infos = nullptr;\n@@ -634,4 +634,4 @@\n-  sample_infos = NULL;\n-  ref_infos = NULL;\n-  array_infos = NULL;\n-  root_infos = NULL;\n+  sample_infos = nullptr;\n+  ref_infos = nullptr;\n+  array_infos = nullptr;\n+  root_infos = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleWriter.cpp","additions":87,"deletions":87,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-    _info._high = NULL;\n-    _info._low = NULL;\n+    _info._high = nullptr;\n+    _info._low = nullptr;\n@@ -110,3 +110,3 @@\n-    _info._high = NULL;\n-    _info._low = NULL;\n-    _info._context = NULL;\n+    _info._high = nullptr;\n+    _info._low = nullptr;\n+    _info._context = nullptr;\n@@ -127,1 +127,1 @@\n-  ReferenceLocateClosure rlc(_callback, OldObjectRoot::_class_loader_data, OldObjectRoot::_type_undetermined, NULL);\n+  ReferenceLocateClosure rlc(_callback, OldObjectRoot::_class_loader_data, OldObjectRoot::_type_undetermined, nullptr);\n@@ -142,1 +142,1 @@\n-    ReferenceLocateClosure rlc(_callback, system, type, NULL);\n+    ReferenceLocateClosure rlc(_callback, system, type, nullptr);\n@@ -198,1 +198,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -206,1 +206,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -215,1 +215,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -224,2 +224,2 @@\n-  info._high = NULL;\n-  info._low = NULL;\n+  info._high = nullptr;\n+  info._low = nullptr;\n@@ -245,1 +245,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -253,1 +253,1 @@\n-    for (; chunk != NULL; chunk = chunk->next()) {\n+    for (; chunk != nullptr; chunk = chunk->next()) {\n@@ -263,1 +263,1 @@\n-      fst.current()->oops_do(&rcl, NULL, fst.register_map());\n+      fst.current()->oops_do(&rcl, nullptr, fst.register_map());\n@@ -273,1 +273,1 @@\n-  if (list != NULL) {\n+  if (list != nullptr) {\n@@ -293,2 +293,2 @@\n-  if (jvmti_thread_state != NULL) {\n-    jvmti_thread_state->oops_do(&rcl, NULL);\n+  if (jvmti_thread_state != nullptr) {\n+    jvmti_thread_state->oops_do(&rcl, nullptr);\n@@ -301,1 +301,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -305,1 +305,1 @@\n-  jt->oops_do(&rcl, NULL);\n+  jt->oops_do(&rcl, nullptr);\n@@ -310,1 +310,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-  assert(sampler != NULL, \"invariant\");\n+  assert(sampler != nullptr, \"invariant\");\n@@ -94,1 +94,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  return _object.peek() == NULL;\n+  return _object.peek() == nullptr;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSample.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,2 +72,2 @@\n-  ObjectSample() : _next(NULL),\n-                   _previous(NULL),\n+  ObjectSample() : _next(nullptr),\n+                   _previous(nullptr),\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSample.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-static OopStorage* _oop_storage = NULL;\n+static OopStorage* _oop_storage = nullptr;\n@@ -66,1 +66,1 @@\n-\/\/ already NULL or cleared by the iteration.\n+\/\/ already nullptr or cleared by the iteration.\n@@ -79,1 +79,1 @@\n-  assert(_oop_storage != NULL, \"invariant\");\n+  assert(_oop_storage != nullptr, \"invariant\");\n@@ -84,1 +84,1 @@\n-static ObjectSampler* _instance = NULL;\n+static ObjectSampler* _instance = nullptr;\n@@ -87,1 +87,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -103,1 +103,1 @@\n-  _priority_queue = NULL;\n+  _priority_queue = nullptr;\n@@ -105,1 +105,1 @@\n-  _list = NULL;\n+  _list = nullptr;\n@@ -110,1 +110,1 @@\n-  assert(_oop_storage != NULL, \"should be already created\");\n+  assert(_oop_storage != nullptr, \"should be already created\");\n@@ -112,1 +112,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -114,1 +114,1 @@\n-  return _instance != NULL;\n+  return _instance != nullptr;\n@@ -118,1 +118,1 @@\n-  return _instance != NULL;\n+  return _instance != nullptr;\n@@ -128,1 +128,1 @@\n-  if (_instance != NULL) {\n+  if (_instance != nullptr) {\n@@ -130,1 +130,1 @@\n-    _instance = NULL;\n+    _instance = nullptr;\n@@ -148,3 +148,3 @@\n-  assert(thread != NULL, \"invariant\");\n-  assert(virtual_thread != NULL, \"invariant\");\n-  if (thread->threadObj() == NULL) {\n+  assert(thread != nullptr, \"invariant\");\n+  assert(virtual_thread != nullptr, \"invariant\");\n+  if (thread->threadObj() == nullptr) {\n@@ -154,1 +154,1 @@\n-  assert(tl != NULL, \"invariant\");\n+  assert(tl != nullptr, \"invariant\");\n@@ -163,1 +163,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -165,1 +165,1 @@\n-  assert(tl != NULL, \"invariant\");\n+  assert(tl != nullptr, \"invariant\");\n@@ -198,1 +198,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -218,1 +218,1 @@\n-  assert(obj != NULL, \"invariant\");\n+  assert(obj != nullptr, \"invariant\");\n@@ -220,1 +220,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -244,1 +244,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -268,1 +268,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n@@ -278,1 +278,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -284,1 +284,1 @@\n-  if (previous != NULL) {\n+  if (previous != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  _last_resolved(NULL),\n+  _last_resolved(nullptr),\n@@ -62,1 +62,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -67,1 +67,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -75,1 +75,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -86,1 +86,1 @@\n-      if (sample != NULL) {\n+      if (sample != nullptr) {\n@@ -95,1 +95,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -103,1 +103,1 @@\n-  if (sample != NULL) {\n+  if (sample != nullptr) {\n@@ -107,1 +107,1 @@\n-    if (sample != NULL) {\n+    if (sample != nullptr) {\n@@ -111,1 +111,1 @@\n-  if (_cache_size > 0 && sample != NULL) {\n+  if (_cache_size > 0 && sample != nullptr) {\n@@ -118,1 +118,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-    while (sample != NULL) {\n+    while (sample != nullptr) {\n@@ -136,1 +136,1 @@\n-  assert(sample != NULL, \"invariant\");\n+  assert(sample != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/sampleList.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-  _items = NULL;\n+  _items = nullptr;\n@@ -45,2 +45,2 @@\n-  assert(item != NULL, \"invariant\");\n-  assert(_items[_count] == NULL, \"invariant\");\n+  assert(item != nullptr, \"invariant\");\n+  assert(_items[_count] == nullptr, \"invariant\");\n@@ -61,1 +61,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -65,1 +65,1 @@\n-  assert(s != NULL, \"invariant\");\n+  assert(s != nullptr, \"invariant\");\n@@ -70,1 +70,1 @@\n-  _items[_count] = NULL;\n+  _items[_count] = nullptr;\n@@ -131,1 +131,1 @@\n-  assert(s != NULL, \"invariant\");\n+  assert(s != nullptr, \"invariant\");\n@@ -144,1 +144,1 @@\n-  return _count == 0 ? NULL : _items[0];\n+  return _count == 0 ? nullptr : _items[0];\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/samplePriorityQueue.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -46,1 +46,1 @@\n-  if (oop_storage != NULL) {\n+  if (oop_storage != nullptr) {\n@@ -67,1 +67,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -87,1 +87,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/rootType.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-  assert(ref != NULL, \"invariant\");\n+  assert(ref != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/unifiedOopRef.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -41,1 +41,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -43,1 +43,1 @@\n-  const traceid url_symbol_id = url != NULL ? JfrSymbolTable::add(url) : 0;\n+  const traceid url_symbol_id = url != nullptr ? JfrSymbolTable::add(url) : 0;\n@@ -49,1 +49,1 @@\n-  if (fe == NULL) {\n+  if (fe == nullptr) {\n@@ -78,1 +78,1 @@\n-    assert(fe != NULL, \"invariant\");\n+    assert(fe != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerStatisticsEvent.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,3 +81,3 @@\n-  assert(to_module != NULL, \"invariant\");\n-  assert(_module != NULL, \"invariant\");\n-  assert(_event_func != NULL, \"invariant\");\n+  assert(to_module != nullptr, \"invariant\");\n+  assert(_module != nullptr, \"invariant\");\n+  assert(_event_func != nullptr, \"invariant\");\n@@ -89,3 +89,3 @@\n-  assert(qualified_export != NULL, \"invariant\");\n-  assert(_package != NULL, \"invariant\");\n-  assert(_event_func != NULL, \"invariant\");\n+  assert(qualified_export != nullptr, \"invariant\");\n+  assert(_package != nullptr, \"invariant\");\n+  assert(_event_func != nullptr, \"invariant\");\n@@ -97,1 +97,1 @@\n-  assert(module != NULL, \"invariant\");\n+  assert(module != nullptr, \"invariant\");\n@@ -107,1 +107,1 @@\n-  assert(package != NULL, \"invariant\");\n+  assert(package != nullptr, \"invariant\");\n@@ -119,1 +119,1 @@\n-    \/\/ only create a single event with NULL\n+    \/\/ only create a single event with nullptr\n@@ -121,1 +121,1 @@\n-    write_module_export_event(package, NULL);\n+    write_module_export_event(package, nullptr);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrModuleEvent.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-static GrowableArray<InterfaceEntry>* _interfaces = NULL;\n+static GrowableArray<InterfaceEntry>* _interfaces = nullptr;\n@@ -48,1 +48,1 @@\n-  if (_interfaces != NULL) {\n+  if (_interfaces != nullptr) {\n@@ -53,1 +53,1 @@\n-    _interfaces = NULL;\n+    _interfaces = nullptr;\n@@ -58,2 +58,2 @@\n-  assert(iface != NULL, \"invariant\");\n-  assert(interfaces != NULL, \"invariant\");\n+  assert(iface != nullptr, \"invariant\");\n+  assert(interfaces != nullptr, \"invariant\");\n@@ -65,1 +65,1 @@\n-  assert(name != NULL, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n@@ -79,1 +79,1 @@\n-  if (_interfaces == NULL) {\n+  if (_interfaces == nullptr) {\n@@ -91,1 +91,1 @@\n-  assert(interfaces != NULL, \"invariant\");\n+  assert(interfaces != nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-  assert(_interfaces != NULL, \"invariant\");\n+  assert(_interfaces != nullptr, \"invariant\");\n@@ -163,1 +163,1 @@\n-    for (NetworkInterface *cur = network_interfaces; cur != NULL; cur = cur->next()) {\n+    for (NetworkInterface *cur = network_interfaces; cur != nullptr; cur = cur->next()) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNetworkUtilization.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-static JfrOSInterface* _instance = NULL;\n+static JfrOSInterface* _instance = nullptr;\n@@ -45,1 +45,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -52,1 +52,1 @@\n-  if (_instance != NULL) {\n+  if (_instance != nullptr) {\n@@ -54,1 +54,1 @@\n-    _instance = NULL;\n+    _instance = nullptr;\n@@ -94,4 +94,4 @@\n-JfrOSInterface::JfrOSInterfaceImpl::JfrOSInterfaceImpl() : _cpu_info_interface(NULL),\n-                                                           _cpu_perf_interface(NULL),\n-                                                           _system_process_interface(NULL),\n-                                                           _network_performance_interface(NULL) {}\n+JfrOSInterface::JfrOSInterfaceImpl::JfrOSInterfaceImpl() : _cpu_info_interface(nullptr),\n+                                                           _cpu_perf_interface(nullptr),\n+                                                           _system_process_interface(nullptr),\n+                                                           _network_performance_interface(nullptr) {}\n@@ -103,1 +103,1 @@\n-  if (iface != NULL) {\n+  if (iface != nullptr) {\n@@ -106,1 +106,1 @@\n-      iface = NULL;\n+      iface = nullptr;\n@@ -113,1 +113,1 @@\n-  if (_cpu_info_interface == NULL) {\n+  if (_cpu_info_interface == nullptr) {\n@@ -120,1 +120,1 @@\n-  if (_cpu_perf_interface == NULL) {\n+  if (_cpu_perf_interface == nullptr) {\n@@ -127,1 +127,1 @@\n-  if (_system_process_interface == NULL) {\n+  if (_system_process_interface == nullptr) {\n@@ -134,1 +134,1 @@\n-  if (_network_performance_interface == NULL) {\n+  if (_network_performance_interface == nullptr) {\n@@ -145,1 +145,1 @@\n-  if (_cpu_info_interface != NULL) {\n+  if (_cpu_info_interface != nullptr) {\n@@ -147,1 +147,1 @@\n-    _cpu_info_interface = NULL;\n+    _cpu_info_interface = nullptr;\n@@ -149,1 +149,1 @@\n-  if (_cpu_perf_interface != NULL) {\n+  if (_cpu_perf_interface != nullptr) {\n@@ -151,1 +151,1 @@\n-    _cpu_perf_interface = NULL;\n+    _cpu_perf_interface = nullptr;\n@@ -153,1 +153,1 @@\n-  if (_system_process_interface != NULL) {\n+  if (_system_process_interface != nullptr) {\n@@ -155,1 +155,1 @@\n-    _system_process_interface = NULL;\n+    _system_process_interface = nullptr;\n@@ -157,1 +157,1 @@\n-  if (_network_performance_interface != NULL) {\n+  if (_network_performance_interface != nullptr) {\n@@ -159,1 +159,1 @@\n-    _network_performance_interface = NULL;\n+    _network_performance_interface = nullptr;\n@@ -165,1 +165,1 @@\n-  return iface == NULL ? OS_ERR : iface->cpu_information(cpu_info);\n+  return iface == nullptr ? OS_ERR : iface->cpu_information(cpu_info);\n@@ -170,1 +170,1 @@\n-  return iface == NULL ? OS_ERR : iface->cpu_load(which_logical_cpu, cpu_load);\n+  return iface == nullptr ? OS_ERR : iface->cpu_load(which_logical_cpu, cpu_load);\n@@ -175,1 +175,1 @@\n-  return iface == NULL ? OS_ERR : iface->context_switch_rate(rate);\n+  return iface == nullptr ? OS_ERR : iface->context_switch_rate(rate);\n@@ -180,1 +180,1 @@\n-  return iface == NULL ? OS_ERR : iface->cpu_load_total_process(cpu_load);\n+  return iface == nullptr ? OS_ERR : iface->cpu_load_total_process(cpu_load);\n@@ -187,1 +187,1 @@\n-  return iface == NULL ? OS_ERR : iface->cpu_loads_process(pjvmUserLoad, pjvmKernelLoad, psystemTotal);\n+  return iface == nullptr ? OS_ERR : iface->cpu_loads_process(pjvmUserLoad, pjvmKernelLoad, psystemTotal);\n@@ -191,2 +191,2 @@\n-  assert(system_processes != NULL, \"system_processes pointer is NULL!\");\n-  assert(no_of_sys_processes != NULL, \"no_of_sys_processes pointer is NULL!\");\n+  assert(system_processes != nullptr, \"system_processes pointer is null!\");\n+  assert(no_of_sys_processes != nullptr, \"no_of_sys_processes pointer is null!\");\n@@ -194,1 +194,1 @@\n-  return iface == NULL ? OS_ERR : iface->system_processes(system_processes, no_of_sys_processes);\n+  return iface == nullptr ? OS_ERR : iface->system_processes(system_processes, no_of_sys_processes);\n@@ -199,1 +199,1 @@\n-  return iface == NULL ? OS_ERR : iface->network_utilization(network_interfaces);\n+  return iface == nullptr ? OS_ERR : iface->network_utilization(network_interfaces);\n@@ -205,1 +205,1 @@\n-  assert(os_version != NULL, \"os_version pointer is NULL!\");\n+  assert(os_version != nullptr, \"os_version pointer is null!\");\n@@ -213,1 +213,1 @@\n-  _impl = NULL;\n+  _impl = nullptr;\n@@ -218,1 +218,1 @@\n-  return _impl != NULL && _impl->initialize();\n+  return _impl != nullptr && _impl->initialize();\n@@ -222,1 +222,1 @@\n-  if (_impl != NULL) {\n+  if (_impl != nullptr) {\n@@ -224,1 +224,1 @@\n-    _impl = NULL;\n+    _impl = nullptr;\n@@ -276,1 +276,1 @@\n-  if (os::get_environ() == NULL) {\n+  if (os::get_environ() == nullptr) {\n@@ -283,1 +283,1 @@\n-    for (char** p = os::get_environ(); *p != NULL; p++) {\n+    for (char** p = os::get_environ(); *p != nullptr; p++) {\n@@ -286,1 +286,1 @@\n-      if (equal_sign != NULL) {\n+      if (equal_sign != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrOSInterface.cpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-  SystemProcess* processes = NULL;\n+  SystemProcess* processes = nullptr;\n@@ -247,1 +247,1 @@\n-    while (processes != NULL) {\n+    while (processes != nullptr) {\n@@ -250,1 +250,1 @@\n-      if (info == NULL) {\n+      if (info == nullptr) {\n@@ -253,1 +253,1 @@\n-      if (info == NULL) {\n+      if (info == nullptr) {\n@@ -256,1 +256,1 @@\n-      if (info == NULL) {\n+      if (info == nullptr) {\n@@ -298,1 +298,1 @@\n-    while (flag->name() != NULL) {                                \\\n+    while (flag->name() != nullptr) {                                \\\n@@ -344,1 +344,1 @@\n-  VM_GC_SendObjectCountEvent() : VM_GC_HeapInspection(NULL, true) {}\n+  VM_GC_SendObjectCountEvent() : VM_GC_HeapInspection(nullptr, true) {}\n@@ -424,1 +424,1 @@\n-  while (p !=  NULL) {\n+  while (p !=  nullptr) {\n@@ -446,1 +446,1 @@\n-    assert(jt != NULL, \"invariant\");\n+    assert(jt != nullptr, \"invariant\");\n@@ -504,1 +504,1 @@\n-  JfrClassLoaderStatsClosure() : ClassLoaderStatsClosure(NULL) {}\n+  JfrClassLoaderStatsClosure() : ClassLoaderStatsClosure(nullptr) {}\n@@ -507,4 +507,4 @@\n-    const ClassLoaderData* this_cld = cls._class_loader != NULL ?\n-      java_lang_ClassLoader::loader_data_acquire(cls._class_loader) : NULL;\n-    const ClassLoaderData* parent_cld = cls._parent != NULL ?\n-      java_lang_ClassLoader::loader_data_acquire(cls._parent) : NULL;\n+    const ClassLoaderData* this_cld = cls._class_loader != nullptr ?\n+      java_lang_ClassLoader::loader_data_acquire(cls._class_loader) : nullptr;\n+    const ClassLoaderData* parent_cld = cls._parent != nullptr ?\n+      java_lang_ClassLoader::loader_data_acquire(cls._parent) : nullptr;\n@@ -532,1 +532,1 @@\n-  JfrClassLoaderStatsVMOperation() : ClassLoaderStatsVMOperation(NULL) { }\n+  JfrClassLoaderStatsVMOperation() : ClassLoaderStatsVMOperation(nullptr) { }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-    assert(jt != NULL, \"invariant\");\n+    assert(jt != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  assert(top_frame.cb() != NULL, \"invariant\");\n+  assert(top_frame.cb() != nullptr, \"invariant\");\n@@ -47,1 +47,1 @@\n-      if (jcw == NULL || jcw->is_first_frame()) {\n+      if (jcw == nullptr || jcw->is_first_frame()) {\n@@ -78,1 +78,1 @@\n-        if (pc_desc == NULL || pc_desc->scope_decode_offset() == DebugInformationRecorder::serialized_null) {\n+        if (pc_desc == nullptr || pc_desc->scope_decode_offset() == DebugInformationRecorder::serialized_null) {\n@@ -82,1 +82,1 @@\n-        assert(nm->pc_desc_at(candidate.pc()) != NULL, \"invalid pc\");\n+        assert(nm->pc_desc_at(candidate.pc()) != nullptr, \"invalid pc\");\n@@ -95,1 +95,1 @@\n-    if (candidate.cb() == NULL) {\n+    if (candidate.cb() == nullptr) {\n@@ -107,1 +107,1 @@\n-  if (topframe.cb() == NULL) {\n+  if (topframe.cb() == nullptr) {\n@@ -112,1 +112,1 @@\n-  Method* method = NULL;\n+  Method* method = nullptr;\n@@ -114,1 +114,1 @@\n-    if (method == NULL) {\n+    if (method == nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCallTrace.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -79,1 +79,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -243,1 +243,1 @@\n-  Method* method = NULL;\n+  Method* method = nullptr;\n@@ -248,1 +248,1 @@\n-  if (method == NULL) {\n+  if (method == nullptr) {\n@@ -379,1 +379,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -410,1 +410,1 @@\n-  _sampler_thread(NULL),\n+  _sampler_thread(nullptr),\n@@ -412,2 +412,2 @@\n-  _last_thread_java(NULL),\n-  _last_thread_native(NULL),\n+  _last_thread_java(nullptr),\n+  _last_thread_native(nullptr),\n@@ -456,1 +456,1 @@\n-  assert(t_list != NULL, \"invariant\");\n+  assert(t_list != nullptr, \"invariant\");\n@@ -459,1 +459,1 @@\n-  assert((current == NULL && -1 == _cur_index) || (t_list->find_index_of_JavaThread(current) == _cur_index), \"invariant\");\n+  assert((current == nullptr && -1 == _cur_index) || (t_list->find_index_of_JavaThread(current) == _cur_index), \"invariant\");\n@@ -468,1 +468,1 @@\n-  return next != first_sampled ? next : NULL;\n+  return next != first_sampled ? next : nullptr;\n@@ -500,1 +500,1 @@\n-  assert(_sampler_thread == NULL, \"invariant\");\n+  assert(_sampler_thread == nullptr, \"invariant\");\n@@ -580,1 +580,1 @@\n-  JavaThread* start = NULL;\n+  JavaThread* start = nullptr;\n@@ -588,1 +588,1 @@\n-      \/\/ In cases where the last sampled thread is NULL or not-NULL but stale, find_index() returns -1.\n+      \/\/ In cases where the last sampled thread is null or not-null but stale, find_index() returns -1.\n@@ -590,1 +590,1 @@\n-      JavaThread* current = _cur_index != -1 ? *last_thread : NULL;\n+      JavaThread* current = _cur_index != -1 ? *last_thread : nullptr;\n@@ -603,1 +603,1 @@\n-        if (current == NULL) {\n+        if (current == nullptr) {\n@@ -606,1 +606,1 @@\n-        if (start == NULL) {\n+        if (start == nullptr) {\n@@ -629,1 +629,1 @@\n-static JfrThreadSampling* _instance = NULL;\n+static JfrThreadSampling* _instance = nullptr;\n@@ -636,1 +636,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -642,1 +642,1 @@\n-  if (_instance != NULL) {\n+  if (_instance != nullptr) {\n@@ -644,1 +644,1 @@\n-    _instance = NULL;\n+    _instance = nullptr;\n@@ -648,1 +648,1 @@\n-JfrThreadSampling::JfrThreadSampling() : _sampler(NULL) {}\n+JfrThreadSampling::JfrThreadSampling() : _sampler(nullptr) {}\n@@ -651,1 +651,1 @@\n-  if (_sampler != NULL) {\n+  if (_sampler != nullptr) {\n@@ -714,1 +714,1 @@\n-  if (_instance == NULL && 0 == period_millis) {\n+  if (_instance == nullptr && 0 == period_millis) {\n@@ -722,1 +722,1 @@\n-  if (_instance == NULL && 0 == period_millis) {\n+  if (_instance == nullptr && 0 == period_millis) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-static JfrCheckpointManager* _instance = NULL;\n+static JfrCheckpointManager* _instance = nullptr;\n@@ -69,1 +69,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -75,1 +75,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -77,1 +77,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n@@ -103,1 +103,1 @@\n-  assert(_global_mspace == NULL, \"invariant\");\n+  assert(_global_mspace == nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  if (_global_mspace == NULL) {\n+  if (_global_mspace == nullptr) {\n@@ -115,1 +115,1 @@\n-  assert(_thread_local_mspace == NULL, \"invariant\");\n+  assert(_thread_local_mspace == nullptr, \"invariant\");\n@@ -117,1 +117,1 @@\n-  if (_thread_local_mspace == NULL || !_thread_local_mspace->initialize(thread_local_buffer_size,\n+  if (_thread_local_mspace == nullptr || !_thread_local_mspace->initialize(thread_local_buffer_size,\n@@ -123,1 +123,1 @@\n-  assert(_virtual_thread_local_mspace == NULL, \"invariant\");\n+  assert(_virtual_thread_local_mspace == nullptr, \"invariant\");\n@@ -125,1 +125,1 @@\n-  if (_virtual_thread_local_mspace == NULL || !_virtual_thread_local_mspace->initialize(virtual_thread_local_buffer_size,\n+  if (_virtual_thread_local_mspace == nullptr || !_virtual_thread_local_mspace->initialize(virtual_thread_local_buffer_size,\n@@ -143,1 +143,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -149,1 +149,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -161,1 +161,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -166,1 +166,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -171,1 +171,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -177,1 +177,1 @@\n-  assert(mspace != NULL, \"invariant\");\n+  assert(mspace != nullptr, \"invariant\");\n@@ -182,1 +182,1 @@\n-    if (buffer != NULL) {\n+    if (buffer != nullptr) {\n@@ -205,1 +205,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -211,1 +211,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -242,1 +242,1 @@\n-  assert(old != NULL, \"invariant\");\n+  assert(old != nullptr, \"invariant\");\n@@ -288,1 +288,1 @@\n-  assert(old != NULL, \"invariant\");\n+  assert(old != nullptr, \"invariant\");\n@@ -295,1 +295,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -356,1 +356,1 @@\n-  assert(data != NULL, \"invariant\");\n+  assert(data != nullptr, \"invariant\");\n@@ -376,1 +376,1 @@\n-  assert(data != NULL, \"invariant\");\n+  assert(data != nullptr, \"invariant\");\n@@ -391,1 +391,1 @@\n-  assert(data != NULL, \"invariant\");\n+  assert(data != nullptr, \"invariant\");\n@@ -403,1 +403,1 @@\n-  assert(data != NULL, \"invariant\");\n+  assert(data != nullptr, \"invariant\");\n@@ -531,1 +531,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -538,1 +538,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -588,1 +588,1 @@\n-      JfrTypeSet::serialize(&writer, NULL, false, false);\n+      JfrTypeSet::serialize(&writer, nullptr, false, false);\n@@ -604,1 +604,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -608,1 +608,1 @@\n-  return JfrTypeSet::serialize(&writer, NULL, false, true);\n+  return JfrTypeSet::serialize(&writer, nullptr, false, true);\n@@ -639,1 +639,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -652,1 +652,1 @@\n-    assert(thread != NULL, \"invariant\");\n+    assert(thread != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,2 +106,2 @@\n-  static JfrBlobHandle create_thread_blob(JavaThread* jt, traceid tid = 0, oop vthread = NULL);\n-  static void write_checkpoint(Thread* t, traceid tid = 0, oop vthread = NULL);\n+  static JfrBlobHandle create_thread_blob(JavaThread* jt, traceid tid = 0, oop vthread = nullptr);\n+  static void write_checkpoint(Thread* t, traceid tid = 0, oop vthread = nullptr);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-  assert(pos != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n@@ -156,1 +156,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -158,1 +158,1 @@\n-  if (ctx != NULL) {\n+  if (ctx != nullptr) {\n@@ -198,1 +198,1 @@\n-  if (ctx != NULL) {\n+  if (ctx != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-  const u1* session_data(size_t* size, bool move = false, const JfrCheckpointContext* ctx = NULL);\n+  const u1* session_data(size_t* size, bool move = false, const JfrCheckpointContext* ctx = nullptr);\n@@ -84,2 +84,2 @@\n-  JfrBlobHandle copy(const JfrCheckpointContext* ctx = NULL);\n-  JfrBlobHandle move(const JfrCheckpointContext* ctx = NULL);\n+  JfrBlobHandle copy(const JfrCheckpointContext* ctx = nullptr);\n+  JfrBlobHandle move(const JfrCheckpointContext* ctx = nullptr);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-static jbyteArray metadata_blob = NULL;\n+static jbyteArray metadata_blob = nullptr;\n@@ -55,2 +55,2 @@\n-  assert(thread != NULL, \"invariant\");\n-  assert(metadata_blob != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n+  assert(metadata_blob != nullptr, \"invariant\");\n@@ -59,1 +59,1 @@\n-  assert(arr != NULL, \"invariant\");\n+  assert(arr != nullptr, \"invariant\");\n@@ -62,1 +62,1 @@\n-  assert(k != NULL && k->is_array_klass(), \"invariant\");\n+  assert(k != nullptr && k->is_array_klass(), \"invariant\");\n@@ -96,1 +96,1 @@\n-  if (metadata_blob != NULL) {\n+  if (metadata_blob != nullptr) {\n@@ -100,1 +100,1 @@\n-  assert(new_desc_oop != NULL, \"invariant\");\n+  assert(new_desc_oop != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrMetadataEvent.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-JfrThreadGroup* JfrThreadGroup::_instance = NULL;\n+JfrThreadGroup* JfrThreadGroup::_instance = nullptr;\n@@ -74,1 +74,1 @@\n-  assert(_thread_group_weak_ref == NULL ||\n+  assert(_thread_group_weak_ref == nullptr ||\n@@ -81,1 +81,1 @@\n-  _thread_group_weak_ref = NULL;\n+  _thread_group_weak_ref = nullptr;\n@@ -86,1 +86,1 @@\n-  if (NULL != _thread_group_weak_ref) {\n+  if (nullptr != _thread_group_weak_ref) {\n@@ -121,1 +121,1 @@\n-  assert(_thread_group_hierarchy != NULL, \"invariant\");\n+  assert(_thread_group_hierarchy != nullptr, \"invariant\");\n@@ -131,1 +131,1 @@\n-  return (_thread_group_hierarchy != NULL && _thread_group_hierarchy->length() > 0);\n+  return (_thread_group_hierarchy != nullptr && _thread_group_hierarchy->length() > 0);\n@@ -150,3 +150,3 @@\n-  assert(jt != NULL && jt->is_Java_thread(), \"invariant\");\n-  assert(current != NULL, \"invariant\");\n-  assert(_thread_group_hierarchy != NULL, \"invariant\");\n+  assert(jt != nullptr && jt->is_Java_thread(), \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n+  assert(_thread_group_hierarchy != nullptr, \"invariant\");\n@@ -160,1 +160,1 @@\n-  if (thread_group_handle == NULL) {\n+  if (thread_group_handle == nullptr) {\n@@ -165,1 +165,1 @@\n-  jweak thread_group_weak_ref = use_weak_handles ? JNIHandles::make_weak_global(thread_group_handle) : NULL;\n+  jweak thread_group_weak_ref = use_weak_handles ? JNIHandles::make_weak_global(thread_group_handle) : nullptr;\n@@ -175,1 +175,1 @@\n-    const jweak parent_group_weak_ref = use_weak_handles ? JNIHandles::make_weak_global(parent_thread_group_handle) : NULL;\n+    const jweak parent_group_weak_ref = use_weak_handles ? JNIHandles::make_weak_global(parent_thread_group_handle) : nullptr;\n@@ -226,3 +226,3 @@\n-  _thread_group_name(NULL),\n-  _thread_group_oop(NULL),\n-  _thread_group_weak_ref(NULL) {\n+  _thread_group_name(nullptr),\n+  _thread_group_oop(nullptr),\n+  _thread_group_weak_ref(nullptr) {\n@@ -234,1 +234,1 @@\n-  if (_thread_group_name != NULL) {\n+  if (_thread_group_name != nullptr) {\n@@ -237,1 +237,1 @@\n-  if (_thread_group_weak_ref != NULL) {\n+  if (_thread_group_weak_ref != nullptr) {\n@@ -243,2 +243,2 @@\n-  assert(_thread_group_name == NULL, \"invariant\");\n-  if (tgname != NULL) {\n+  assert(_thread_group_name == nullptr, \"invariant\");\n+  if (tgname != nullptr) {\n@@ -252,1 +252,1 @@\n-  return _thread_group_weak_ref != NULL ? JNIHandles::resolve(_thread_group_weak_ref) : _thread_group_oop;\n+  return _thread_group_weak_ref != nullptr ? JNIHandles::resolve(_thread_group_weak_ref) : _thread_group_oop;\n@@ -257,1 +257,1 @@\n-  if (_thread_group_weak_ref == NULL) {\n+  if (_thread_group_weak_ref == nullptr) {\n@@ -259,1 +259,1 @@\n-    assert(_thread_group_oop != NULL, \"invariant\");\n+    assert(_thread_group_oop != nullptr, \"invariant\");\n@@ -261,1 +261,1 @@\n-    _thread_group_oop = NULL;\n+    _thread_group_oop = nullptr;\n@@ -269,1 +269,1 @@\n-  if (_list != NULL) {\n+  if (_list != nullptr) {\n@@ -299,1 +299,1 @@\n-  if (tg_instance == NULL) {\n+  if (tg_instance == nullptr) {\n@@ -301,1 +301,1 @@\n-    if (tg_instance == NULL) {\n+    if (tg_instance == nullptr) {\n@@ -307,1 +307,1 @@\n-  JfrThreadGroupEntry* tge = NULL;\n+  JfrThreadGroupEntry* tge = nullptr;\n@@ -312,1 +312,1 @@\n-    if (NULL == tge) {\n+    if (nullptr == tge) {\n@@ -314,1 +314,1 @@\n-      assert(tge != NULL, \"invariant\");\n+      assert(tge != nullptr, \"invariant\");\n@@ -335,1 +335,1 @@\n-  return (JfrThreadGroupEntry*) NULL;\n+  return (JfrThreadGroupEntry*) nullptr;\n@@ -348,1 +348,1 @@\n-  assert(tge != NULL, \"attempting to add a null entry!\");\n+  assert(tge != nullptr, \"attempting to add a null entry!\");\n@@ -355,1 +355,1 @@\n-  assert(_list != NULL && !_list->is_empty(), \"should not need be here!\");\n+  assert(_list != nullptr && !_list->is_empty(), \"should not need be here!\");\n@@ -361,1 +361,1 @@\n-  assert(vgroup != (oop)NULL, \"invariant\");\n+  assert(vgroup != (oop)nullptr, \"invariant\");\n@@ -363,1 +363,1 @@\n-  assert(vgroup_name != NULL, \"invariant\");\n+  assert(vgroup_name != nullptr, \"invariant\");\n@@ -374,2 +374,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(_list != NULL && !_list->is_empty(), \"should not need be here!\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(_list != nullptr && !_list->is_empty(), \"should not need be here!\");\n@@ -407,1 +407,1 @@\n-  assert(tg_instance != NULL, \"invariant\");\n+  assert(tg_instance != nullptr, \"invariant\");\n@@ -413,1 +413,1 @@\n-  assert(writer != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n@@ -416,1 +416,1 @@\n-  assert(tg_instance != NULL, \"invariant\");\n+  assert(tg_instance != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.cpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -102,1 +102,1 @@\n-  return os_thread != NULL ? os_thread->thread_id() : 0;\n+  return os_thread != nullptr ? os_thread->thread_id() : 0;\n@@ -106,1 +106,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -114,2 +114,2 @@\n-  oop thread_obj = vthread != NULL ? vthread : jt->threadObj();\n-  if (thread_obj == NULL) {\n+  oop thread_obj = vthread != nullptr ? vthread : jt->threadObj();\n+  if (thread_obj == nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static traceid id(const Thread* t, oop vthread = NULL);\n+  static traceid id(const Thread* t, oop vthread = nullptr);\n@@ -48,1 +48,1 @@\n-  static const char* name(const Thread* t, int& length, oop vthread = NULL);\n+  static const char* name(const Thread* t, int& length, oop vthread = nullptr);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -99,1 +99,1 @@\n-  assert(name != NULL, \"invariant\");\n+  assert(name != nullptr, \"invariant\");\n@@ -227,1 +227,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -280,1 +280,1 @@\n-  assert(_thread != NULL, \"invariant\");\n+  assert(_thread != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-  JfrThreadConstant(Thread* t, traceid tid, oop vthread = NULL) : _thread(t), _tid(tid), _vthread(vthread) {}\n+  JfrThreadConstant(Thread* t, traceid tid, oop vthread = nullptr) : _thread(t), _tid(tid), _vthread(vthread) {}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    _next(NULL), _serializer(serializer), _cache(), _id(id), _permit_cache(permit_cache) {}\n+    _next(nullptr), _serializer(serializer), _cache(), _id(id), _permit_cache(permit_cache) {}\n@@ -106,1 +106,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -118,1 +118,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -120,1 +120,1 @@\n-  assert(current != NULL, \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n@@ -157,1 +157,1 @@\n-    assert(registration != NULL, \"invariant\");\n+    assert(registration != nullptr, \"invariant\");\n@@ -165,1 +165,1 @@\n-    assert(r != NULL, \"invariant\");\n+    assert(r != nullptr, \"invariant\");\n@@ -184,1 +184,1 @@\n-    assert(r != NULL, \"invariant\");\n+    assert(r != nullptr, \"invariant\");\n@@ -197,1 +197,1 @@\n-  assert(serializer != NULL, \"invariant\");\n+  assert(serializer != nullptr, \"invariant\");\n@@ -199,1 +199,1 @@\n-  if (registration == NULL) {\n+  if (registration == nullptr) {\n@@ -255,1 +255,1 @@\n-    assert(r != NULL, \"invariant\");\n+    assert(r != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeManager.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,4 +61,4 @@\n-static JfrCheckpointWriter* _writer = NULL;\n-static JfrCheckpointWriter* _leakp_writer = NULL;\n-static JfrArtifactSet* _artifacts = NULL;\n-static JfrArtifactClosure* _subsystem_callback = NULL;\n+static JfrCheckpointWriter* _writer = nullptr;\n+static JfrCheckpointWriter* _leakp_writer = nullptr;\n+static JfrArtifactSet* _artifacts = nullptr;\n+static JfrArtifactClosure* _subsystem_callback = nullptr;\n@@ -86,1 +86,1 @@\n-  return klass != NULL ? _artifacts->mark(klass, leakp) : 0;\n+  return klass != nullptr ? _artifacts->mark(klass, leakp) : 0;\n@@ -90,1 +90,1 @@\n-  return symbol != NULL ? _artifacts->mark(symbol, leakp) : 0;\n+  return symbol != nullptr ? _artifacts->mark(symbol, leakp) : 0;\n@@ -109,1 +109,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -113,1 +113,1 @@\n-  if (type_array_klass == NULL) {\n+  if (type_array_klass == nullptr) {\n@@ -116,1 +116,1 @@\n-    assert(void_class_name != NULL, \"invariant\");\n+    assert(void_class_name != nullptr, \"invariant\");\n@@ -120,1 +120,1 @@\n-  assert(primitive_type_str != NULL, \"invariant\");\n+  assert(primitive_type_str != nullptr, \"invariant\");\n@@ -122,1 +122,1 @@\n-  assert(primitive_type_sym != NULL, \"invariant\");\n+  assert(primitive_type_sym != nullptr, \"invariant\");\n@@ -128,1 +128,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -133,1 +133,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -135,1 +135,1 @@\n-  if (pkg_entry == NULL) {\n+  if (pkg_entry == nullptr) {\n@@ -146,1 +146,1 @@\n-  assert(pkg != NULL, \"invariant\");\n+  assert(pkg != nullptr, \"invariant\");\n@@ -148,1 +148,1 @@\n-  if (module_entry == NULL) {\n+  if (module_entry == nullptr) {\n@@ -160,2 +160,2 @@\n-  assert(klass != NULL, \"invariant\");\n-  assert(method != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -166,1 +166,1 @@\n-  assert(cld != NULL, \"invariant\");\n+  assert(cld != nullptr, \"invariant\");\n@@ -177,1 +177,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -187,1 +187,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -191,1 +191,1 @@\n-  if (klass->is_non_strong_hidden()) return NULL;\n+  if (klass->is_non_strong_hidden()) return nullptr;\n@@ -197,1 +197,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -214,3 +214,3 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(_artifacts != NULL, \"invariant\");\n-  assert(klass != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -219,1 +219,1 @@\n-  writer->write(cld != NULL ? cld_id(cld, leakp) : 0);\n+  writer->write(cld != nullptr ? cld_id(cld, leakp) : 0);\n@@ -228,1 +228,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -235,1 +235,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -242,1 +242,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -247,1 +247,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -249,1 +249,1 @@\n-  assert(_subsystem_callback != NULL, \"invariant\");\n+  assert(_subsystem_callback != nullptr, \"invariant\");\n@@ -255,1 +255,1 @@\n-  if (array_klass == NULL) {\n+  if (array_klass == nullptr) {\n@@ -264,2 +264,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(_artifacts != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n@@ -275,2 +275,2 @@\n-  if (klass != NULL && _artifacts->should_do_loader_klass(klass)) {\n-    if (_leakp_writer != NULL) {\n+  if (klass != nullptr && _artifacts->should_do_loader_klass(klass)) {\n+    if (_leakp_writer != nullptr) {\n@@ -285,1 +285,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -299,2 +299,2 @@\n-  assert(klass != NULL, \"invariant\");\n-  assert(_subsystem_callback != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n+  assert(_subsystem_callback != nullptr, \"invariant\");\n@@ -314,1 +314,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -345,1 +345,1 @@\n-    write_primitive(_writer, NULL); \/\/ void.class\n+    write_primitive(_writer, nullptr); \/\/ void.class\n@@ -376,1 +376,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n@@ -391,1 +391,1 @@\n-  assert(_writer != NULL, \"invariant\");\n+  assert(_writer != nullptr, \"invariant\");\n@@ -395,1 +395,1 @@\n-  if (_leakp_writer == NULL) {\n+  if (_leakp_writer == nullptr) {\n@@ -419,2 +419,2 @@\n-  assert(callback != NULL, \"invariant\");\n-  assert(value != NULL, \"invariant\");\n+  assert(callback != nullptr, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -433,2 +433,2 @@\n-  assert(klass != NULL, \"invariant\");\n-  assert(_subsystem_callback != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n+  assert(_subsystem_callback != nullptr, \"invariant\");\n@@ -446,3 +446,3 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(_artifacts != NULL, \"invariant\");\n-  assert(pkg != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n+  assert(pkg != nullptr, \"invariant\");\n@@ -457,1 +457,1 @@\n-  assert(p != NULL, \"invariant\");\n+  assert(p != nullptr, \"invariant\");\n@@ -464,1 +464,1 @@\n-  assert(p != NULL, \"invariant\");\n+  assert(p != nullptr, \"invariant\");\n@@ -482,1 +482,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n@@ -505,1 +505,1 @@\n-  assert(_writer != NULL, \"invariant\");\n+  assert(_writer != nullptr, \"invariant\");\n@@ -514,1 +514,1 @@\n-  if (_leakp_writer == NULL) {\n+  if (_leakp_writer == nullptr) {\n@@ -542,2 +542,2 @@\n-  assert(mod != NULL, \"invariant\");\n-  assert(_artifacts != NULL, \"invariant\");\n+  assert(mod != nullptr, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n@@ -553,1 +553,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -560,1 +560,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -578,1 +578,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n@@ -580,1 +580,1 @@\n-    return pkg != NULL ? pkg->module() : NULL;\n+    return pkg != nullptr ? pkg->module() : nullptr;\n@@ -601,1 +601,1 @@\n-  assert(_writer != NULL, \"invariant\");\n+  assert(_writer != nullptr, \"invariant\");\n@@ -610,1 +610,1 @@\n-  if (_leakp_writer == NULL) {\n+  if (_leakp_writer == nullptr) {\n@@ -638,1 +638,1 @@\n-  assert(cld != NULL, \"invariant\");\n+  assert(cld != nullptr, \"invariant\");\n@@ -641,1 +641,1 @@\n-  if (class_loader_klass == NULL) {\n+  if (class_loader_klass == nullptr) {\n@@ -656,1 +656,1 @@\n-  assert(c != NULL, \"invariant\");\n+  assert(c != nullptr, \"invariant\");\n@@ -663,1 +663,1 @@\n-  assert(c != NULL, \"invariant\");\n+  assert(c != nullptr, \"invariant\");\n@@ -677,1 +677,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n@@ -686,1 +686,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n@@ -688,1 +688,1 @@\n-    return mod != NULL ? mod->loader_data() : NULL;\n+    return mod != nullptr ? mod->loader_data() : nullptr;\n@@ -696,1 +696,1 @@\n-    assert(cld != NULL, \"invariant\");\n+    assert(cld != nullptr, \"invariant\");\n@@ -730,1 +730,1 @@\n-  assert(_writer != NULL, \"invariant\");\n+  assert(_writer != nullptr, \"invariant\");\n@@ -741,1 +741,1 @@\n-  if (_leakp_writer == NULL) {\n+  if (_leakp_writer == nullptr) {\n@@ -771,1 +771,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -777,1 +777,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -786,3 +786,3 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(method != NULL, \"invariant\");\n-  assert(_artifacts != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n@@ -790,1 +790,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -801,1 +801,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -808,1 +808,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -858,1 +858,1 @@\n-      while (ik != NULL) {\n+      while (ik != nullptr) {\n@@ -908,1 +908,1 @@\n-  assert(_writer != NULL, \"invariant\");\n+  assert(_writer != nullptr, \"invariant\");\n@@ -910,1 +910,1 @@\n-  if (_leakp_writer == NULL) {\n+  if (_leakp_writer == nullptr) {\n@@ -922,1 +922,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -929,1 +929,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -935,2 +935,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(entry != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -944,1 +944,1 @@\n-  assert(e != NULL, \"invariant\");\n+  assert(e != nullptr, \"invariant\");\n@@ -951,1 +951,1 @@\n-  assert(e != NULL, \"invariant\");\n+  assert(e != nullptr, \"invariant\");\n@@ -957,2 +957,2 @@\n-  assert(writer != NULL, \"invariant\");\n-  assert(entry != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -965,1 +965,1 @@\n-  assert(e != NULL, \"invariant\");\n+  assert(e != nullptr, \"invariant\");\n@@ -972,1 +972,1 @@\n-  assert(e != NULL, \"invariant\");\n+  assert(e != nullptr, \"invariant\");\n@@ -994,1 +994,1 @@\n-  assert(_leakp_writer != NULL, \"invariant\");\n+  assert(_leakp_writer != nullptr, \"invariant\");\n@@ -1009,2 +1009,2 @@\n-  assert(_writer != NULL, \"invariant\");\n-  if (_leakp_writer != NULL) {\n+  assert(_writer != nullptr, \"invariant\");\n+  if (_leakp_writer != nullptr) {\n@@ -1032,1 +1032,1 @@\n-  assert(_artifacts != NULL, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n@@ -1050,1 +1050,1 @@\n-  if (_artifacts == NULL) {\n+  if (_artifacts == nullptr) {\n@@ -1058,1 +1058,1 @@\n-  assert(_artifacts != NULL, \"invariant\");\n+  assert(_artifacts != nullptr, \"invariant\");\n@@ -1066,1 +1066,1 @@\n-  assert(writer != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n@@ -1088,1 +1088,1 @@\n-  if (_artifacts != NULL) {\n+  if (_artifacts != nullptr) {\n@@ -1091,1 +1091,1 @@\n-  setup(NULL, NULL, false, false);\n+  setup(nullptr, nullptr, false, false);\n@@ -1105,1 +1105,1 @@\n-    return serialize(writer, NULL, true, false);\n+    return serialize(writer, nullptr, true, false);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":107,"deletions":107,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,2 @@\n-JfrArtifactSet::JfrArtifactSet(bool class_unload) : _symbol_table(NULL),\n-                                                    _klass_list(NULL),\n+JfrArtifactSet::JfrArtifactSet(bool class_unload) : _symbol_table(nullptr),\n+                                                    _klass_list(nullptr),\n@@ -37,1 +37,1 @@\n-  assert(_klass_list != NULL, \"invariant\");\n+  assert(_klass_list != nullptr, \"invariant\");\n@@ -44,1 +44,1 @@\n-  if (_symbol_table == NULL) {\n+  if (_symbol_table == nullptr) {\n@@ -46,1 +46,1 @@\n-    assert(_symbol_table != NULL, \"invariant\");\n+    assert(_symbol_table != nullptr, \"invariant\");\n@@ -48,1 +48,1 @@\n-  assert(_symbol_table != NULL, \"invariant\");\n+  assert(_symbol_table != nullptr, \"invariant\");\n@@ -57,1 +57,1 @@\n-  if (_symbol_table != NULL) {\n+  if (_symbol_table != nullptr) {\n@@ -101,2 +101,2 @@\n-  assert(k != NULL, \"invariant\");\n-  assert(_klass_loader_set != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n+  assert(_klass_loader_set != nullptr, \"invariant\");\n@@ -107,2 +107,2 @@\n-  assert(k != NULL, \"invariant\");\n-  assert(_klass_list != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n+  assert(_klass_list != nullptr, \"invariant\");\n@@ -117,1 +117,1 @@\n-  assert(_symbol_table != NULL, \"invariant\");\n+  assert(_symbol_table != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-    assert(f != NULL, \"invariant\");\n-    assert(g != NULL, \"invariant\");\n+    assert(f != nullptr, \"invariant\");\n+    assert(g != nullptr, \"invariant\");\n@@ -66,1 +66,1 @@\n-    assert(*_subsystem_callback_loc == NULL, \"Subsystem callback should not be set yet\");\n+    assert(*_subsystem_callback_loc == nullptr, \"Subsystem callback should not be set yet\");\n@@ -70,1 +70,1 @@\n-    *_subsystem_callback_loc = NULL;\n+    *_subsystem_callback_loc = nullptr;\n@@ -84,1 +84,1 @@\n-    return t != NULL ? (*_letter)(t) : true;\n+    return t != nullptr ? (*_letter)(t) : true;\n@@ -119,1 +119,1 @@\n-    assert(value != NULL, \"invariant\");\n+    assert(value != nullptr, \"invariant\");\n@@ -130,1 +130,1 @@\n-    assert(method != NULL, \"invariant\");\n+    assert(method != nullptr, \"invariant\");\n@@ -141,1 +141,1 @@\n-    assert(value != NULL, \"invariant\");\n+    assert(value != nullptr, \"invariant\");\n@@ -185,1 +185,1 @@\n-    assert(method != NULL, \"invariant\");\n+    assert(method != nullptr, \"invariant\");\n@@ -269,1 +269,1 @@\n-    assert(_artifacts != NULL, \"invariant\");\n+    assert(_artifacts != nullptr, \"invariant\");\n@@ -273,1 +273,1 @@\n-    assert(klass != NULL, \"invariant\");\n+    assert(klass != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -81,2 +81,2 @@\n-  static const Symbol* jdk_internal_event_sym = NULL;\n-  if (jdk_internal_event_sym == NULL) {\n+  static const Symbol* jdk_internal_event_sym = nullptr;\n+  if (jdk_internal_event_sym == nullptr) {\n@@ -86,1 +86,1 @@\n-  assert(jdk_internal_event_sym != NULL, \"invariant\");\n+  assert(jdk_internal_event_sym != nullptr, \"invariant\");\n@@ -88,2 +88,2 @@\n-  static const Symbol* jdk_jfr_event_sym = NULL;\n-  if (jdk_jfr_event_sym == NULL) {\n+  static const Symbol* jdk_jfr_event_sym = nullptr;\n+  if (jdk_jfr_event_sym == nullptr) {\n@@ -93,1 +93,1 @@\n-  assert(jdk_jfr_event_sym != NULL, \"invariant\");\n+  assert(jdk_jfr_event_sym != nullptr, \"invariant\");\n@@ -97,1 +97,1 @@\n-    if (jdk_internal_event_sym == klass_name && klass->class_loader() == NULL) {\n+    if (jdk_internal_event_sym == klass_name && klass->class_loader() == nullptr) {\n@@ -105,1 +105,1 @@\n-    if (jdk_jfr_event_sym == klass_name && klass->class_loader() == NULL) {\n+    if (jdk_jfr_event_sym == klass_name && klass->class_loader() == nullptr) {\n@@ -148,1 +148,1 @@\n-  assert(module != NULL, \"invariant\");\n+  assert(module != nullptr, \"invariant\");\n@@ -153,1 +153,1 @@\n-  assert(package != NULL, \"invariant\");\n+  assert(package != nullptr, \"invariant\");\n@@ -158,1 +158,1 @@\n-  assert(cld != NULL, \"invariant\");\n+  assert(cld != nullptr, \"invariant\");\n@@ -179,1 +179,1 @@\n-  if (tak == NULL) {\n+  if (tak == nullptr) {\n@@ -190,1 +190,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -193,1 +193,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -195,1 +195,1 @@\n-  return k != NULL ? (raw ? load_raw(k) : load(k)) : load_primitive(mirror);\n+  return k != nullptr ? (raw ? load_raw(k) : load(k)) : load_primitive(mirror);\n@@ -205,1 +205,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -215,1 +215,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -222,1 +222,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -237,1 +237,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -240,1 +240,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -245,1 +245,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -247,1 +247,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -252,1 +252,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -254,1 +254,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -259,1 +259,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -261,1 +261,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -266,1 +266,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -268,1 +268,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -273,1 +273,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -275,1 +275,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -282,1 +282,1 @@\n-  assert(jc != NULL, \"invariant\");\n+  assert(jc != nullptr, \"invariant\");\n@@ -284,1 +284,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -291,1 +291,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -94,1 +94,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -100,1 +100,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -116,1 +116,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -124,1 +124,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -129,1 +129,1 @@\n-  return super != NULL ? IS_EVENT_KLASS(super) : false;\n+  return super != nullptr ? IS_EVENT_KLASS(super) : false;\n@@ -133,1 +133,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -138,1 +138,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  assert(addr != NULL, \"invariant\");\n+  assert(addr != nullptr, \"invariant\");\n@@ -52,1 +52,1 @@\n-  assert(addr != NULL, \"invariant\");\n+  assert(addr != nullptr, \"invariant\");\n@@ -62,1 +62,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -68,1 +68,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -74,1 +74,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -80,1 +80,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -98,1 +98,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -117,1 +117,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -123,1 +123,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -128,1 +128,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -134,1 +134,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -148,1 +148,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -158,1 +158,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -164,1 +164,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -174,1 +174,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -184,1 +184,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n@@ -190,1 +190,1 @@\n-  assert(ptr != NULL, \"invariant\");\n+  assert(ptr != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdBits.inline.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -120,1 +120,1 @@\n-  assert(pos != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n@@ -146,2 +146,2 @@\n-  assert(pos != NULL, \"invariant\");\n-  assert(klass != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -174,1 +174,1 @@\n-  assert(pos != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n@@ -187,1 +187,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -194,2 +194,2 @@\n-  assert(klass != NULL, \"invariant\");\n-  assert(buffer != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -202,1 +202,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -208,1 +208,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -215,1 +215,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -231,1 +231,1 @@\n-  assert(_queue == NULL, \"invariant\");\n+  assert(_queue == nullptr, \"invariant\");\n@@ -233,1 +233,1 @@\n-  return _queue != NULL && _queue->initialize(min_elem_size, free_list_cache_count_limit, cache_prealloc_count);\n+  return _queue != nullptr && _queue->initialize(min_elem_size, free_list_cache_count_limit, cache_prealloc_count);\n@@ -237,1 +237,1 @@\n-  if (_queue != NULL) {\n+  if (_queue != nullptr) {\n@@ -239,1 +239,1 @@\n-    KlassFunctor functor(NULL);\n+    KlassFunctor functor(nullptr);\n@@ -246,1 +246,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdKlassQueue.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -54,1 +54,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-  assert(type != NULL, \"invariant\");\n+  assert(type != nullptr, \"invariant\");\n@@ -76,1 +76,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -89,2 +89,2 @@\n-   assert(klass != NULL, \"invariant\");\n-   assert(method != NULL, \"invariant\");\n+   assert(klass != nullptr, \"invariant\");\n+   assert(method != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-  assert(cld != NULL, \"invariant\");\n+  assert(cld != nullptr, \"invariant\");\n@@ -123,1 +123,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -125,1 +125,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-    if (FlightRecorder || StartFlightRecording != NULL) {\n+    if (FlightRecorder || StartFlightRecording != nullptr) {\n@@ -97,1 +97,1 @@\n-static GrowableArray<JfrStartFlightRecordingDCmd*>* dcmd_recordings_array = NULL;\n+static GrowableArray<JfrStartFlightRecordingDCmd*>* dcmd_recordings_array = nullptr;\n@@ -100,1 +100,1 @@\n-  if (dcmd_recordings_array != NULL) {\n+  if (dcmd_recordings_array != nullptr) {\n@@ -106,1 +106,1 @@\n-    dcmd_recordings_array = NULL;\n+    dcmd_recordings_array = nullptr;\n@@ -117,2 +117,2 @@\n-  assert(options != NULL, \"invariant\");\n-  assert(dcmd_recording != NULL, \"invariant\");\n+  assert(options != nullptr, \"invariant\");\n+  assert(dcmd_recording != nullptr, \"invariant\");\n@@ -131,1 +131,1 @@\n-  if (options == NULL) {\n+  if (options == nullptr) {\n@@ -136,1 +136,1 @@\n-  assert(dcmd_recordings_array == NULL, \"invariant\");\n+  assert(dcmd_recordings_array == nullptr, \"invariant\");\n@@ -138,1 +138,1 @@\n-  assert(dcmd_recordings_array != NULL, \"invariant\");\n+  assert(dcmd_recordings_array != nullptr, \"invariant\");\n@@ -141,1 +141,1 @@\n-    assert(dcmd_recording != NULL, \"invariant\");\n+    assert(dcmd_recording != nullptr, \"invariant\");\n@@ -151,1 +151,1 @@\n-  assert(dcmd_recording != NULL, \"invariant\");\n+  assert(dcmd_recording != nullptr, \"invariant\");\n@@ -165,1 +165,1 @@\n-  if (dcmd_recordings_array != NULL) {\n+  if (dcmd_recordings_array != nullptr) {\n@@ -188,1 +188,1 @@\n-  if (Arguments::is_dumping_archive() && JfrOptionSet::start_flight_recording_options() != NULL) {\n+  if (Arguments::is_dumping_archive() && JfrOptionSet::start_flight_recording_options() != nullptr) {\n@@ -303,4 +303,4 @@\n-static JfrPostBox* _post_box = NULL;\n-static JfrStorage* _storage = NULL;\n-static JfrCheckpointManager* _checkpoint_manager = NULL;\n-static JfrRepository* _repository = NULL;\n+static JfrPostBox* _post_box = nullptr;\n+static JfrStorage* _storage = nullptr;\n+static JfrCheckpointManager* _checkpoint_manager = nullptr;\n+static JfrRepository* _repository = nullptr;\n@@ -308,3 +308,3 @@\n-static JfrStringPool* _stringpool = NULL;\n-static JfrOSInterface* _os_interface = NULL;\n-static JfrThreadSampling* _thread_sampling = NULL;\n+static JfrStringPool* _stringpool = nullptr;\n+static JfrOSInterface* _os_interface = nullptr;\n+static JfrThreadSampling* _thread_sampling = nullptr;\n@@ -321,1 +321,1 @@\n-  assert(_post_box == NULL, \"invariant\");\n+  assert(_post_box == nullptr, \"invariant\");\n@@ -323,1 +323,1 @@\n-  return _post_box != NULL;\n+  return _post_box != nullptr;\n@@ -327,2 +327,2 @@\n-  assert(_repository == NULL, \"invariant\");\n-  assert(_post_box != NULL, \"invariant\");\n+  assert(_repository == nullptr, \"invariant\");\n+  assert(_post_box != nullptr, \"invariant\");\n@@ -330,1 +330,1 @@\n-  return _repository != NULL && _repository->initialize();\n+  return _repository != nullptr && _repository->initialize();\n@@ -334,1 +334,1 @@\n-  assert(_os_interface == NULL, \"invariant\");\n+  assert(_os_interface == nullptr, \"invariant\");\n@@ -336,1 +336,1 @@\n-  return _os_interface != NULL && _os_interface->initialize();\n+  return _os_interface != nullptr && _os_interface->initialize();\n@@ -340,2 +340,2 @@\n-  assert(_repository != NULL, \"invariant\");\n-  assert(_post_box != NULL, \"invariant\");\n+  assert(_repository != nullptr, \"invariant\");\n+  assert(_post_box != nullptr, \"invariant\");\n@@ -343,1 +343,1 @@\n-  return _storage != NULL && _storage->initialize();\n+  return _storage != nullptr && _storage->initialize();\n@@ -347,2 +347,2 @@\n-  assert(_checkpoint_manager == NULL, \"invariant\");\n-  assert(_repository != NULL, \"invariant\");\n+  assert(_checkpoint_manager == nullptr, \"invariant\");\n+  assert(_repository != nullptr, \"invariant\");\n@@ -350,1 +350,1 @@\n-  return _checkpoint_manager != NULL && _checkpoint_manager->initialize();\n+  return _checkpoint_manager != nullptr && _checkpoint_manager->initialize();\n@@ -354,1 +354,1 @@\n-  assert(_stack_trace_repository == NULL, \"invariant\");\n+  assert(_stack_trace_repository == nullptr, \"invariant\");\n@@ -356,1 +356,1 @@\n-  return _stack_trace_repository != NULL && _stack_trace_repository->initialize();\n+  return _stack_trace_repository != nullptr && _stack_trace_repository->initialize();\n@@ -360,2 +360,2 @@\n-  assert(_stringpool == NULL, \"invariant\");\n-  assert(_repository != NULL, \"invariant\");\n+  assert(_stringpool == nullptr, \"invariant\");\n+  assert(_repository != nullptr, \"invariant\");\n@@ -363,1 +363,1 @@\n-  return _stringpool != NULL && _stringpool->initialize();\n+  return _stringpool != nullptr && _stringpool->initialize();\n@@ -367,1 +367,1 @@\n-  assert(_thread_sampling == NULL, \"invariant\");\n+  assert(_thread_sampling == nullptr, \"invariant\");\n@@ -369,1 +369,1 @@\n-  return _thread_sampling != NULL;\n+  return _thread_sampling != nullptr;\n@@ -378,1 +378,1 @@\n-  if (_post_box != NULL) {\n+  if (_post_box != nullptr) {\n@@ -380,1 +380,1 @@\n-    _post_box = NULL;\n+    _post_box = nullptr;\n@@ -382,1 +382,1 @@\n-  if (_repository != NULL) {\n+  if (_repository != nullptr) {\n@@ -384,1 +384,1 @@\n-    _repository = NULL;\n+    _repository = nullptr;\n@@ -386,1 +386,1 @@\n-  if (_storage != NULL) {\n+  if (_storage != nullptr) {\n@@ -388,1 +388,1 @@\n-    _storage = NULL;\n+    _storage = nullptr;\n@@ -390,1 +390,1 @@\n-  if (_checkpoint_manager != NULL) {\n+  if (_checkpoint_manager != nullptr) {\n@@ -392,1 +392,1 @@\n-    _checkpoint_manager = NULL;\n+    _checkpoint_manager = nullptr;\n@@ -394,1 +394,1 @@\n-  if (_stack_trace_repository != NULL) {\n+  if (_stack_trace_repository != nullptr) {\n@@ -396,1 +396,1 @@\n-    _stack_trace_repository = NULL;\n+    _stack_trace_repository = nullptr;\n@@ -398,1 +398,1 @@\n-  if (_stringpool != NULL) {\n+  if (_stringpool != nullptr) {\n@@ -400,1 +400,1 @@\n-    _stringpool = NULL;\n+    _stringpool = nullptr;\n@@ -402,1 +402,1 @@\n-  if (_os_interface != NULL) {\n+  if (_os_interface != nullptr) {\n@@ -404,1 +404,1 @@\n-    _os_interface = NULL;\n+    _os_interface = nullptr;\n@@ -406,1 +406,1 @@\n-  if (_thread_sampling != NULL) {\n+  if (_thread_sampling != nullptr) {\n@@ -408,1 +408,1 @@\n-    _thread_sampling = NULL;\n+    _thread_sampling = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-  _path(NULL),\n+  _path(nullptr),\n@@ -77,1 +77,1 @@\n-  if (_path != NULL) {\n+  if (_path != nullptr) {\n@@ -79,1 +79,1 @@\n-    _path = NULL;\n+    _path = nullptr;\n@@ -183,1 +183,1 @@\n-  assert(path != NULL, \"invariant\");\n+  assert(path != nullptr, \"invariant\");\n@@ -191,1 +191,1 @@\n-  if (_path != NULL) {\n+  if (_path != nullptr) {\n@@ -193,1 +193,1 @@\n-    _path = NULL;\n+    _path = nullptr;\n@@ -195,1 +195,1 @@\n-  if (path != NULL) {\n+  if (path != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunk.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-static jobject chunk_monitor = NULL;\n+static jobject chunk_monitor = nullptr;\n@@ -38,1 +38,1 @@\n-  assert(chunk_monitor == NULL, \"invariant\");\n+  assert(chunk_monitor == nullptr, \"invariant\");\n@@ -53,1 +53,1 @@\n-  return chunk_monitor != NULL ? chunk_monitor : install_chunk_monitor(thread);\n+  return chunk_monitor != nullptr ? chunk_monitor : install_chunk_monitor(thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  return path != NULL ? os::open(path, O_CREAT | O_RDWR, S_IREAD | S_IWRITE) : invalid_fd;\n+  return path != nullptr ? os::open(path, O_CREAT | O_RDWR, S_IREAD | S_IWRITE) : invalid_fd;\n@@ -54,1 +54,1 @@\n-  assert(writer != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n@@ -136,1 +136,1 @@\n-    assert(_chunk != NULL, \"invariant\");\n+    assert(_chunk != nullptr, \"invariant\");\n@@ -145,1 +145,1 @@\n-    assert(_chunk != NULL, \"invariant\");\n+    assert(_chunk != nullptr, \"invariant\");\n@@ -156,1 +156,1 @@\n-    assert(_writer != NULL, \"invariant\");\n+    assert(_writer != nullptr, \"invariant\");\n@@ -158,1 +158,1 @@\n-    assert(_chunk != NULL, \"invariant\");\n+    assert(_chunk != nullptr, \"invariant\");\n@@ -216,1 +216,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -221,1 +221,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -229,1 +229,1 @@\n-JfrChunkWriter::JfrChunkWriter() : JfrChunkWriterBase(NULL), _chunk(new JfrChunk()) {}\n+JfrChunkWriter::JfrChunkWriter() : JfrChunkWriterBase(nullptr), _chunk(new JfrChunk()) {}\n@@ -232,1 +232,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -237,1 +237,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -242,1 +242,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -251,1 +251,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -256,1 +256,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -261,1 +261,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -266,1 +266,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -271,1 +271,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n@@ -276,1 +276,1 @@\n-  assert(_chunk != NULL, \"invariant\");\n+  assert(_chunk != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkWriter.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {\n+    if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == nullptr) {\n@@ -88,1 +88,1 @@\n-  assert((path != NULL) && (*path != '\\0'), \"invariant\");\n+  assert((path != nullptr) && (*path != '\\0'), \"invariant\");\n@@ -97,1 +97,1 @@\n-  if (path == NULL) {\n+  if (path == nullptr) {\n@@ -116,1 +116,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -118,1 +118,1 @@\n-  const char* filename_fmt = NULL;\n+  const char* filename_fmt = nullptr;\n@@ -131,1 +131,1 @@\n-  return result ? _path_buffer : NULL;\n+  return result ? _path_buffer : nullptr;\n@@ -152,1 +152,1 @@\n-  assert(st != NULL, \"invariant\");\n+  assert(st != nullptr, \"invariant\");\n@@ -157,1 +157,1 @@\n-  } else if (repository_path != NULL) {\n+  } else if (repository_path != nullptr) {\n@@ -169,1 +169,1 @@\n-  if (path == NULL || *path == '\\0') {\n+  if (path == nullptr || *path == '\\0') {\n@@ -184,1 +184,1 @@\n-  assert(st != NULL, \"invariant\");\n+  assert(st != nullptr, \"invariant\");\n@@ -186,1 +186,1 @@\n-  if (thread != NULL) {\n+  if (thread != nullptr) {\n@@ -188,1 +188,1 @@\n-  } else if (repository_path != NULL) {\n+  } else if (repository_path != nullptr) {\n@@ -195,1 +195,1 @@\n-  assert(NULL != *file1 && NULL != *file2, \"invariant\");\n+  assert(nullptr != *file1 && nullptr != *file2, \"invariant\");\n@@ -199,1 +199,1 @@\n-    assert(NULL != dot1, \"invariant\");\n+    assert(nullptr != dot1, \"invariant\");\n@@ -201,1 +201,1 @@\n-    assert(NULL != dot2, \"invariant\");\n+    assert(nullptr != dot2, \"invariant\");\n@@ -218,1 +218,1 @@\n-  assert(iso8601_str != NULL, \"invariant\");\n+  assert(iso8601_str != nullptr, \"invariant\");\n@@ -234,1 +234,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -267,1 +267,1 @@\n-  assert(NULL != file_name, \"invariant\");\n+  assert(nullptr != file_name, \"invariant\");\n@@ -275,1 +275,1 @@\n-  return result != -1 ? _path_buffer : NULL;\n+  return result != -1 ? _path_buffer : nullptr;\n@@ -280,2 +280,2 @@\n-  if (file_name == NULL) {\n-    return NULL;\n+  if (file_name == nullptr) {\n+    return nullptr;\n@@ -289,1 +289,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -292,2 +292,2 @@\n-  if (fqn == NULL) {\n-    return NULL;\n+  if (fqn == nullptr) {\n+    return nullptr;\n@@ -297,1 +297,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -302,1 +302,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -305,1 +305,1 @@\n-  if (file_name_copy == NULL) {\n+  if (file_name_copy == nullptr) {\n@@ -307,1 +307,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -314,1 +314,1 @@\n-  _file_names(NULL),\n+  _file_names(nullptr),\n@@ -318,1 +318,1 @@\n-    if (dirp == NULL) {\n+    if (dirp == nullptr) {\n@@ -332,1 +332,1 @@\n-    if (_file_names == NULL) {\n+    if (_file_names == nullptr) {\n@@ -338,1 +338,1 @@\n-    while ((dentry = os::readdir(dirp)) != NULL) {\n+    while ((dentry = os::readdir(dirp)) != nullptr) {\n@@ -340,1 +340,1 @@\n-      if (file_name != NULL) {\n+      if (file_name != nullptr) {\n@@ -351,1 +351,1 @@\n-  if (_file_names != NULL) {\n+  if (_file_names != nullptr) {\n@@ -360,1 +360,1 @@\n-  return _file_names != NULL && _iterator < _file_names->length();\n+  return _file_names != nullptr && _iterator < _file_names->length();\n@@ -364,1 +364,1 @@\n-  return _iterator >= _file_names->length() ? NULL : fully_qualified(_file_names->at(_iterator++));\n+  return _iterator >= _file_names->length() ? nullptr : fully_qualified(_file_names->at(_iterator++));\n@@ -372,1 +372,1 @@\n-    assert(fqn != NULL, \"invariant\");\n+    assert(fqn != nullptr, \"invariant\");\n@@ -399,1 +399,1 @@\n-  if (copy_block == NULL) {\n+  if (copy_block == nullptr) {\n@@ -409,1 +409,1 @@\n-  assert(repository_path != NULL, \"invariant\");\n+  assert(repository_path != nullptr, \"invariant\");\n@@ -429,1 +429,1 @@\n-  return result == -1 ? NULL : _path_buffer;\n+  return result == -1 ? nullptr : _path_buffer;\n@@ -433,1 +433,1 @@\n-  if (repository_path == NULL) {\n+  if (repository_path == nullptr) {\n@@ -435,1 +435,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -457,1 +457,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n@@ -465,1 +465,1 @@\n-  while (owned_lock != NULL) {\n+  while (owned_lock != nullptr) {\n@@ -534,1 +534,1 @@\n-  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? JavaThread::cast(t) : NULL),\n+  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? JavaThread::cast(t) : nullptr),\n@@ -536,1 +536,1 @@\n-    if (_jt != NULL) {\n+    if (_jt != nullptr) {\n@@ -551,1 +551,1 @@\n-    if (_jt != NULL) {\n+    if (_jt != nullptr) {\n@@ -578,1 +578,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":49,"deletions":49,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-static JfrRepository* _instance = NULL;\n+static JfrRepository* _instance = nullptr;\n@@ -45,1 +45,1 @@\n-static JfrChunkWriter* _chunkwriter = NULL;\n+static JfrChunkWriter* _chunkwriter = nullptr;\n@@ -52,1 +52,1 @@\n-JfrRepository::JfrRepository(JfrPostBox& post_box) : _path(NULL), _post_box(post_box) {}\n+JfrRepository::JfrRepository(JfrPostBox& post_box) : _path(nullptr), _post_box(post_box) {}\n@@ -55,1 +55,1 @@\n-  assert(_chunkwriter == NULL, \"invariant\");\n+  assert(_chunkwriter == nullptr, \"invariant\");\n@@ -57,1 +57,1 @@\n-  return _chunkwriter != NULL;\n+  return _chunkwriter != nullptr;\n@@ -61,1 +61,1 @@\n-  if (_path != NULL) {\n+  if (_path != nullptr) {\n@@ -63,1 +63,1 @@\n-    _path = NULL;\n+    _path = nullptr;\n@@ -66,1 +66,1 @@\n-  if (_chunkwriter != NULL) {\n+  if (_chunkwriter != nullptr) {\n@@ -68,1 +68,1 @@\n-    _chunkwriter = NULL;\n+    _chunkwriter = nullptr;\n@@ -73,1 +73,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -79,1 +79,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -81,1 +81,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n@@ -85,1 +85,1 @@\n-  if (_path == NULL) {\n+  if (_path == nullptr) {\n@@ -97,2 +97,2 @@\n-  assert(path != NULL, \"trying to set the repository path with a NULL string!\");\n-  if (_path != NULL) {\n+  assert(path != nullptr, \"trying to set the repository path with a null string!\");\n+  if (_path != nullptr) {\n@@ -104,1 +104,1 @@\n-  if (_path == NULL) {\n+  if (_path == nullptr) {\n@@ -146,2 +146,2 @@\n-  if (NULL == canonical_chunk_path && !_chunkwriter->is_valid()) {\n-    \/\/ new output is NULL and current output is NULL\n+  if (nullptr == canonical_chunk_path && !_chunkwriter->is_valid()) {\n+    \/\/ new output is nullptr and current output is null\n@@ -158,1 +158,1 @@\n-  if (path != NULL) {\n+  if (path != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrRepository.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-static JfrEventThrottler* _throttler = NULL;\n+static JfrEventThrottler* _throttler = nullptr;\n@@ -51,1 +51,1 @@\n-  assert(_throttler == NULL, \"invariant\");\n+  assert(_throttler == nullptr, \"invariant\");\n@@ -53,1 +53,1 @@\n-  return _throttler != NULL && _throttler->initialize();\n+  return _throttler != nullptr && _throttler->initialize();\n@@ -58,1 +58,1 @@\n-  _throttler = NULL;\n+  _throttler = nullptr;\n@@ -64,1 +64,1 @@\n-  assert(_throttler != NULL, \"JfrEventThrottler has not been properly initialized\");\n+  assert(_throttler != nullptr, \"JfrEventThrottler has not been properly initialized\");\n@@ -66,1 +66,1 @@\n-  return event_id == JfrObjectAllocationSampleEvent ? _throttler : NULL;\n+  return event_id == JfrObjectAllocationSampleEvent ? _throttler : nullptr;\n@@ -73,1 +73,1 @@\n-  assert(_throttler != NULL, \"JfrEventThrottler has not been properly initialized\");\n+  assert(_throttler != nullptr, \"JfrEventThrottler has not been properly initialized\");\n@@ -96,1 +96,1 @@\n-  if (throttler == NULL) return true;\n+  if (throttler == nullptr) return true;\n@@ -171,2 +171,2 @@\n-  assert(sample_size != NULL, \"invariant\");\n-  assert(period_ms != NULL, \"invariant\");\n+  assert(sample_size != nullptr, \"invariant\");\n+  assert(period_ms != nullptr, \"invariant\");\n@@ -248,1 +248,1 @@\n-  assert(sample_size_ewma != NULL, \"invariant\");\n+  assert(sample_size_ewma != nullptr, \"invariant\");\n@@ -269,1 +269,1 @@\n-  assert(expired != NULL, \"invariant\");\n+  assert(expired != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -342,1 +342,1 @@\n-  assert(options != NULL, \"invariant\");\n+  assert(options != nullptr, \"invariant\");\n@@ -364,1 +364,1 @@\n-  \/\/ C(4, 0) = {} = NULL set = 1\n+  \/\/ C(4, 0) = {} = null set = 1\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrMemorySizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,2 +157,2 @@\n-const char* const default_repository = NULL;\n-const char* const default_dumppath = NULL;\n+const char* const default_repository = nullptr;\n+const char* const default_dumppath = nullptr;\n@@ -275,1 +275,1 @@\n-  if (FlightRecorderOptions == NULL) {\n+  if (FlightRecorderOptions == nullptr) {\n@@ -286,1 +286,1 @@\n-      if (p != NULL && p[option_length] == '=') {\n+      if (p != nullptr && p[option_length] == '=') {\n@@ -293,1 +293,1 @@\n-    if (message != NULL) {\n+    if (message != nullptr) {\n@@ -330,1 +330,1 @@\n-  if (FlightRecorderOptions == NULL) {\n+  if (FlightRecorderOptions == nullptr) {\n@@ -339,1 +339,1 @@\n-  if (repo != NULL) {\n+  if (repo != nullptr) {\n@@ -342,1 +342,1 @@\n-    if (NULL == repo_copy) {\n+    if (nullptr == repo_copy) {\n@@ -351,1 +351,1 @@\n-  if (dumppath != NULL) {\n+  if (dumppath != nullptr) {\n@@ -354,1 +354,1 @@\n-    if (NULL == dumppath_copy) {\n+    if (nullptr == dumppath_copy) {\n@@ -734,3 +734,3 @@\n-  assert(option != NULL, \"invariant\");\n-  assert(delimiter != NULL, \"invariant\");\n-  assert((*option)->optionString != NULL, \"invariant\");\n+  assert(option != nullptr, \"invariant\");\n+  assert(delimiter != nullptr, \"invariant\");\n+  assert((*option)->optionString != nullptr, \"invariant\");\n@@ -748,1 +748,1 @@\n-static GrowableArray<const char*>* start_flight_recording_options_array = NULL;\n+static GrowableArray<const char*>* start_flight_recording_options_array = nullptr;\n@@ -751,3 +751,3 @@\n-  assert(option != NULL, \"invariant\");\n-  assert(delimiter != NULL, \"invariant\");\n-  assert((*option)->optionString != NULL, \"invariant\");\n+  assert(option != nullptr, \"invariant\");\n+  assert(delimiter != nullptr, \"invariant\");\n+  assert((*option)->optionString != nullptr, \"invariant\");\n@@ -755,1 +755,1 @@\n-  const char* value = NULL;\n+  const char* value = nullptr;\n@@ -768,1 +768,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -771,1 +771,1 @@\n-  if (start_flight_recording_options_array == NULL) {\n+  if (start_flight_recording_options_array == nullptr) {\n@@ -774,1 +774,1 @@\n-  assert(start_flight_recording_options_array != NULL, \"invariant\");\n+  assert(start_flight_recording_options_array != nullptr, \"invariant\");\n@@ -787,1 +787,1 @@\n-  if (start_flight_recording_options_array != NULL) {\n+  if (start_flight_recording_options_array != nullptr) {\n@@ -793,1 +793,1 @@\n-    start_flight_recording_options_array = NULL;\n+    start_flight_recording_options_array = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-static JfrPostBox* _instance = NULL;\n+static JfrPostBox* _instance = nullptr;\n@@ -48,1 +48,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -54,1 +54,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -56,1 +56,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-      assert(_owner_thread == NULL, \"invariant\");\n+      assert(_owner_thread == nullptr, \"invariant\");\n@@ -89,1 +89,1 @@\n-    assert(_thread != NULL, \"invariant\");\n+    assert(_thread != nullptr, \"invariant\");\n@@ -106,1 +106,1 @@\n-    _owner_thread = NULL;\n+    _owner_thread = nullptr;\n@@ -120,1 +120,1 @@\n-const Thread* JfrRotationLock::_owner_thread = NULL;\n+const Thread* JfrRotationLock::_owner_thread = nullptr;\n@@ -592,1 +592,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -597,2 +597,2 @@\n-  assert(buffer != NULL, \"invariant\");\n-  assert(t != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -609,1 +609,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  assert(proc != NULL, \"invariant\");\n+  assert(proc != nullptr, \"invariant\");\n@@ -48,1 +48,1 @@\n-  if (new_thread->osthread() == NULL) {\n+  if (new_thread->osthread() == nullptr) {\n@@ -51,1 +51,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -58,1 +58,1 @@\n-JfrPostBox* JfrRecorderThread::_post_box = NULL;\n+JfrPostBox* JfrRecorderThread::_post_box = nullptr;\n@@ -68,2 +68,2 @@\n-  assert(cp_manager != NULL, \"invariant\");\n-  assert(post_box != NULL, \"invariant\");\n+  assert(cp_manager != nullptr, \"invariant\");\n+  assert(post_box != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThreadLoop.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-  assert(lhs_frames != NULL, \"invariant\");\n-  assert(rhs_frames != NULL, \"invariant\");\n+  assert(lhs_frames != nullptr, \"invariant\");\n+  assert(rhs_frames != nullptr, \"invariant\");\n@@ -56,1 +56,1 @@\n-  _next(NULL),\n+  _next(nullptr),\n@@ -69,1 +69,1 @@\n-  _frames(NULL),\n+  _frames(nullptr),\n@@ -221,1 +221,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -274,1 +274,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -324,1 +324,1 @@\n-  assert(current_thread != NULL, \"invariant\");\n+  assert(current_thread != nullptr, \"invariant\");\n@@ -336,1 +336,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n-static JfrStackTraceRepository* _instance = NULL;\n-static JfrStackTraceRepository* _leak_profiler_instance = NULL;\n+static JfrStackTraceRepository* _instance = nullptr;\n+static JfrStackTraceRepository* _leak_profiler_instance = nullptr;\n@@ -45,1 +45,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -50,1 +50,1 @@\n-  assert(_leak_profiler_instance != NULL, \"invariant\");\n+  assert(_leak_profiler_instance != nullptr, \"invariant\");\n@@ -59,2 +59,2 @@\n-  assert(_instance == NULL, \"invariant\");\n-  assert(_leak_profiler_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n+  assert(_leak_profiler_instance == nullptr, \"invariant\");\n@@ -62,2 +62,2 @@\n-  if (_leak_profiler_instance == NULL) {\n-    return NULL;\n+  if (_leak_profiler_instance == nullptr) {\n+    return nullptr;\n@@ -89,1 +89,1 @@\n-  assert(_instance != NULL, \"invarinat\");\n+  assert(_instance != nullptr, \"invarinat\");\n@@ -91,1 +91,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n@@ -93,1 +93,1 @@\n-  _leak_profiler_instance = NULL;\n+  _leak_profiler_instance = nullptr;\n@@ -109,1 +109,1 @@\n-    while (stacktrace != NULL) {\n+    while (stacktrace != nullptr) {\n@@ -136,1 +136,1 @@\n-    while (stacktrace != NULL) {\n+    while (stacktrace != nullptr) {\n@@ -152,1 +152,1 @@\n-  assert(tl != NULL, \"invariant\");\n+  assert(tl != nullptr, \"invariant\");\n@@ -160,1 +160,1 @@\n-  if (frames == NULL) {\n+  if (frames == nullptr) {\n@@ -164,1 +164,1 @@\n-  assert(frames != NULL, \"invariant\");\n+  assert(frames != nullptr, \"invariant\");\n@@ -188,1 +188,1 @@\n-  assert(current_thread != NULL, \"invariant\");\n+  assert(current_thread != nullptr, \"invariant\");\n@@ -191,1 +191,1 @@\n-  assert(tl != NULL, \"invariant\");\n+  assert(tl != nullptr, \"invariant\");\n@@ -207,1 +207,1 @@\n-  while (table_entry != NULL) {\n+  while (table_entry != nullptr) {\n@@ -228,1 +228,1 @@\n-  while (trace != NULL && trace->id() != id) {\n+  while (trace != nullptr && trace->id() != id) {\n@@ -231,1 +231,1 @@\n-  assert(trace != NULL, \"invariant\");\n+  assert(trace != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-static const u1* const TOP_CRITICAL_SECTION = NULL;\n+static const u1* const TOP_CRITICAL_SECTION = nullptr;\n@@ -31,4 +31,4 @@\n-JfrBuffer::JfrBuffer() : _next(NULL),\n-                         _identity(NULL),\n-                         _pos(NULL),\n-                         _top(NULL),\n+JfrBuffer::JfrBuffer() : _next(nullptr),\n+                         _identity(nullptr),\n+                         _pos(nullptr),\n+                         _top(nullptr),\n@@ -42,2 +42,2 @@\n-  assert(_next == NULL, \"invariant\");\n-  assert(_identity == NULL, \"invariant\");\n+  assert(_next == nullptr, \"invariant\");\n+  assert(_identity == nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  assert(id != NULL, \"invariant\");\n+  assert(id != nullptr, \"invariant\");\n@@ -109,1 +109,1 @@\n-  } while (current_id != NULL || Atomic::cmpxchg(&_identity, current_id, id) != current_id);\n+  } while (current_id != nullptr || Atomic::cmpxchg(&_identity, current_id, id) != current_id);\n@@ -113,1 +113,1 @@\n-  assert(id != NULL, \"invariant\");\n+  assert(id != nullptr, \"invariant\");\n@@ -115,1 +115,1 @@\n-  return current_id == NULL && Atomic::cmpxchg(&_identity, current_id, id) == current_id;\n+  return current_id == nullptr && Atomic::cmpxchg(&_identity, current_id, id) == current_id;\n@@ -119,2 +119,2 @@\n-  assert(id != NULL, \"invariant\");\n-  assert(_identity == NULL, \"invariant\");\n+  assert(id != nullptr, \"invariant\");\n+  assert(_identity == nullptr, \"invariant\");\n@@ -126,2 +126,2 @@\n-  assert(identity() != NULL, \"invariant\");\n-  Atomic::release_store(&_identity, (const void*)NULL);\n+  assert(identity() != nullptr, \"invariant\");\n+  Atomic::release_store(&_identity, (const void*)nullptr);\n@@ -132,1 +132,1 @@\n-  assert(to != NULL, \"invariant\");\n+  assert(to != nullptr, \"invariant\");\n@@ -181,1 +181,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -186,1 +186,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -192,1 +192,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrBuffer.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-JfrEpochStorageHost<NodeType, RetrievalPolicy, EagerReclaim>::JfrEpochStorageHost() : _mspace(NULL) {}\n+JfrEpochStorageHost<NodeType, RetrievalPolicy, EagerReclaim>::JfrEpochStorageHost() : _mspace(nullptr) {}\n@@ -46,1 +46,1 @@\n-  assert(_mspace == NULL, \"invariant\");\n+  assert(_mspace == nullptr, \"invariant\");\n@@ -48,1 +48,1 @@\n-  return _mspace != NULL && _mspace->initialize(cache_prealloc_count);\n+  return _mspace != nullptr && _mspace->initialize(cache_prealloc_count);\n@@ -54,1 +54,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -56,1 +56,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -64,1 +64,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -104,1 +104,1 @@\n-    assert(node != NULL, \"invariant\");\n+    assert(node != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrEpochStorage.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-::JfrFullStorage(JfrStorageControl& control) : _control(control), _free_node_list(NULL), _queue(NULL) {}\n+::JfrFullStorage(JfrStorageControl& control) : _control(control), _free_node_list(nullptr), _queue(nullptr) {}\n@@ -55,1 +55,1 @@\n-  assert(_free_node_list == NULL, \"invariant\");\n+  assert(_free_node_list == nullptr, \"invariant\");\n@@ -57,1 +57,1 @@\n-  if (_free_node_list == NULL || !_free_node_list->initialize()) {\n+  if (_free_node_list == nullptr || !_free_node_list->initialize()) {\n@@ -62,1 +62,1 @@\n-    if (node == NULL) {\n+    if (node == nullptr) {\n@@ -67,1 +67,1 @@\n-  assert(_queue == NULL, \"invariant\");\n+  assert(_queue == nullptr, \"invariant\");\n@@ -69,1 +69,1 @@\n-  return _queue != NULL && _queue->initialize();\n+  return _queue != nullptr && _queue->initialize();\n@@ -86,1 +86,1 @@\n-  return node != NULL ? node : new Node();\n+  return node != nullptr ? node : new Node();\n@@ -92,1 +92,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -98,1 +98,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -100,1 +100,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -109,1 +109,1 @@\n-  Value value = NULL;\n+  Value value = nullptr;\n@@ -111,1 +111,1 @@\n-  if (node != NULL) {\n+  if (node != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrFullStorage.inline.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-    if (node == NULL) {\n+    if (node == nullptr) {\n@@ -224,2 +224,2 @@\n-  if (allocation == NULL) {\n-    return NULL;\n+  if (allocation == nullptr) {\n+    return nullptr;\n@@ -228,1 +228,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -235,1 +235,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -239,1 +239,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -250,1 +250,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -257,1 +257,1 @@\n-  assert(node->identity() == NULL, \"invariant\");\n+  assert(node->identity() == nullptr, \"invariant\");\n@@ -267,1 +267,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -276,1 +276,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -311,1 +311,1 @@\n-  if (mspace != NULL) {\n+  if (mspace != nullptr) {\n@@ -325,1 +325,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -333,1 +333,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -342,1 +342,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -351,1 +351,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -367,1 +367,1 @@\n-    if (node != NULL) {\n+    if (node != nullptr) {\n@@ -371,1 +371,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -377,1 +377,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -386,1 +386,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -395,1 +395,1 @@\n-  if (node == NULL) return NULL;\n+  if (node == nullptr) return nullptr;\n@@ -405,2 +405,2 @@\n-  if (node == NULL) {\n-    return NULL;\n+  if (node == nullptr) {\n+    return nullptr;\n@@ -417,1 +417,1 @@\n-    if (node != NULL) {\n+    if (node != nullptr) {\n@@ -434,1 +434,1 @@\n-    if (node != NULL) {\n+    if (node != nullptr) {\n@@ -438,1 +438,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -444,1 +444,1 @@\n-  if (node != NULL) {\n+  if (node != nullptr) {\n@@ -452,1 +452,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -454,1 +454,1 @@\n-  assert(mspace != NULL, \"invariant\");\n+  assert(mspace != nullptr, \"invariant\");\n@@ -460,1 +460,1 @@\n-  assert(mspace != NULL, \"invariant\");\n+  assert(mspace != nullptr, \"invariant\");\n@@ -466,1 +466,1 @@\n-  assert(mspace != NULL, \"invariant\");\n+  assert(mspace != nullptr, \"invariant\");\n@@ -485,1 +485,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -493,1 +493,1 @@\n-  if (node->identity() != NULL) {\n+  if (node->identity() != nullptr) {\n@@ -510,1 +510,1 @@\n-    ReleaseOp<Mspace>(mspace), _list(list), _prev(NULL), _count(0), _amount(0) {}\n+    ReleaseOp<Mspace>(mspace), _list(list), _prev(nullptr), _count(0), _amount(0) {}\n@@ -518,1 +518,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -539,1 +539,1 @@\n-    _mspace(mspace), _list(list), _prev(NULL), _count(0), _amount(0) {}\n+    _mspace(mspace), _list(list), _prev(nullptr), _count(0), _amount(0) {}\n@@ -547,1 +547,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -558,1 +558,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -565,1 +565,1 @@\n-  assert(node->identity() != NULL, \"invariant\");\n+  assert(node->identity() != nullptr, \"invariant\");\n@@ -586,1 +586,1 @@\n-    _functor(functor), _mspace(mspace), _list(list), _prev(NULL) {}\n+    _functor(functor), _mspace(mspace), _list(list), _prev(nullptr) {}\n@@ -592,1 +592,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -618,1 +618,1 @@\n-    _mspace(mspace), _list(list), _prev(NULL) {}\n+    _mspace(mspace), _list(list), _prev(nullptr) {}\n@@ -624,1 +624,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -643,2 +643,2 @@\n-  assert(old != NULL, \"invariant\");\n-  assert(new_node != NULL, \"invariant\");\n+  assert(old != nullptr, \"invariant\");\n+  assert(new_node != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrMemorySpace.inline.hpp","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    assert(mspace != NULL, \"invariant\");\n+    assert(mspace != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -73,1 +73,1 @@\n-      if (node != NULL) {\n+      if (node != nullptr) {\n@@ -86,1 +86,1 @@\n-      if (node == NULL) return NULL;\n+      if (node == nullptr) return nullptr;\n@@ -89,1 +89,1 @@\n-      assert(node->identity() == NULL, \"invariant\");\n+      assert(node->identity() == nullptr, \"invariant\");\n@@ -93,1 +93,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrMemorySpaceRetrieval.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-static JfrStorage* _instance = NULL;\n+static JfrStorage* _instance = nullptr;\n@@ -57,1 +57,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -63,1 +63,1 @@\n-  if (_instance != NULL) {\n+  if (_instance != nullptr) {\n@@ -65,1 +65,1 @@\n-    _instance = NULL;\n+    _instance = nullptr;\n@@ -70,3 +70,3 @@\n-  _control(NULL),\n-  _global_mspace(NULL),\n-  _thread_local_mspace(NULL),\n+  _control(nullptr),\n+  _global_mspace(nullptr),\n+  _thread_local_mspace(nullptr),\n@@ -77,1 +77,1 @@\n-  if (_control != NULL) {\n+  if (_control != nullptr) {\n@@ -80,1 +80,1 @@\n-  if (_global_mspace != NULL) {\n+  if (_global_mspace != nullptr) {\n@@ -83,1 +83,1 @@\n-  if (_thread_local_mspace != NULL) {\n+  if (_thread_local_mspace != nullptr) {\n@@ -86,1 +86,1 @@\n-  if (_full_list != NULL) {\n+  if (_full_list != nullptr) {\n@@ -89,1 +89,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n@@ -97,3 +97,3 @@\n-  assert(_control == NULL, \"invariant\");\n-  assert(_global_mspace == NULL, \"invariant\");\n-  assert(_thread_local_mspace == NULL, \"invariant\");\n+  assert(_control == nullptr, \"invariant\");\n+  assert(_global_mspace == nullptr, \"invariant\");\n+  assert(_thread_local_mspace == nullptr, \"invariant\");\n@@ -107,1 +107,1 @@\n-  if (_control == NULL) {\n+  if (_control == nullptr) {\n@@ -115,1 +115,1 @@\n-  if (_global_mspace == NULL) {\n+  if (_global_mspace == nullptr) {\n@@ -124,1 +124,1 @@\n-  if (_thread_local_mspace == NULL) {\n+  if (_thread_local_mspace == nullptr) {\n@@ -130,1 +130,1 @@\n-  return _full_list != NULL && _full_list->initialize(num_global_buffers * 2);\n+  return _full_list != nullptr && _full_list->initialize(num_global_buffers * 2);\n@@ -143,1 +143,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -145,1 +145,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -153,1 +153,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -155,1 +155,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -167,1 +167,1 @@\n-    if (buffer == NULL && storage_instance.control().should_discard()) {\n+    if (buffer == nullptr && storage_instance.control().should_discard()) {\n@@ -179,1 +179,1 @@\n-    if (buffer == NULL && storage_instance.control().should_discard()) {\n+    if (buffer == nullptr && storage_instance.control().should_discard()) {\n@@ -195,1 +195,1 @@\n-    if (buffer != NULL) {\n+    if (buffer != nullptr) {\n@@ -207,1 +207,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -222,1 +222,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -234,1 +234,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -245,1 +245,1 @@\n-  if (promotion_buffer == NULL) {\n+  if (promotion_buffer == nullptr) {\n@@ -264,1 +264,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -278,1 +278,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -288,1 +288,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -298,1 +298,1 @@\n-  assert(buffer->identity() != NULL, \"invariant\");\n+  assert(buffer->identity() != nullptr, \"invariant\");\n@@ -303,1 +303,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -328,2 +328,2 @@\n-      assert(oldest != NULL, \"invariant\");\n-      assert(oldest->identity() != NULL, \"invariant\");\n+      assert(oldest != nullptr, \"invariant\");\n+      assert(oldest->identity() != nullptr, \"invariant\");\n@@ -350,2 +350,2 @@\n-  assert(t != NULL, \"invariant\");\n-  assert(cur != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n+  assert(cur != nullptr, \"invariant\");\n@@ -357,2 +357,2 @@\n-  assert(t != NULL, \"invariant\");\n-  assert(cur != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n+  assert(cur != nullptr, \"invariant\");\n@@ -360,1 +360,1 @@\n-  assert(cur_pos != NULL, \"invariant\");\n+  assert(cur_pos != nullptr, \"invariant\");\n@@ -365,3 +365,3 @@\n-  assert(cur != NULL, \"invariant\");\n-  assert(t != NULL, \"invariant\");\n-  assert(t->jfr_thread_local()->shelved_buffer() != NULL, \"invariant\");\n+  assert(cur != nullptr, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n+  assert(t->jfr_thread_local()->shelved_buffer() != nullptr, \"invariant\");\n@@ -372,2 +372,2 @@\n-  assert(t != NULL, \"invariant\");\n-  assert(cur != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n+  assert(cur != nullptr, \"invariant\");\n@@ -375,1 +375,1 @@\n-  assert(cur_pos != NULL, \"invariant\");\n+  assert(cur_pos != nullptr, \"invariant\");\n@@ -377,1 +377,1 @@\n-  assert(t->jfr_thread_local()->shelved_buffer() != NULL, \"invariant\");\n+  assert(t->jfr_thread_local()->shelved_buffer() != nullptr, \"invariant\");\n@@ -411,1 +411,1 @@\n-  assert(t->jfr_thread_local()->shelved_buffer() == NULL, \"invariant\");\n+  assert(t->jfr_thread_local()->shelved_buffer() == nullptr, \"invariant\");\n@@ -417,1 +417,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -429,2 +429,2 @@\n-  assert(shelved != NULL, \"invariant\");\n-  tl->shelve_buffer(NULL);\n+  assert(shelved != nullptr, \"invariant\");\n+  tl->shelve_buffer(nullptr);\n@@ -439,1 +439,1 @@\n-  assert(shelved != NULL, \"invariant\");\n+  assert(shelved != nullptr, \"invariant\");\n@@ -453,2 +453,2 @@\n-  assert(cur != NULL, \"invariant\");\n-  assert(t != NULL, \"invariant\");\n+  assert(cur != nullptr, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -467,1 +467,1 @@\n-  assert(t->jfr_thread_local()->shelved_buffer() != NULL, \"invariant\");\n+  assert(t->jfr_thread_local()->shelved_buffer() != nullptr, \"invariant\");\n@@ -469,1 +469,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -534,1 +534,1 @@\n-  assert(list != NULL, \"invariant\");\n+  assert(list != nullptr, \"invariant\");\n@@ -539,1 +539,1 @@\n-    if (full == NULL) break;\n+    if (full == nullptr) break;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-    assert(_op != NULL, \"invariant\");\n+    assert(_op != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-    return _next == NULL ? op_result : TruthFunction::evaluate(op_result) ? _next->process(t) : op_result;\n+    return _next == nullptr ? op_result : TruthFunction::evaluate(op_result) ? _next->process(t) : op_result;\n@@ -63,1 +63,1 @@\n-    return _next == NULL ? _op->elements() : _op->elements() + _next->elements();\n+    return _next == nullptr ? _op->elements() : _op->elements() + _next->elements();\n@@ -66,1 +66,1 @@\n-    return _next == NULL ? _op->size() : _op->size() + _next->size();\n+    return _next == nullptr ? _op->size() : _op->size() + _next->size();\n@@ -102,1 +102,1 @@\n-    assert(t != NULL, \"invariant\");\n+    assert(t != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -81,1 +81,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -95,1 +95,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -121,1 +121,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -153,1 +153,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -167,1 +167,1 @@\n-  assert(element != NULL, \"invariant\");\n+  assert(element != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,2 +93,2 @@\n-  _next(NULL),\n-  _top(NULL),\n+  _next(nullptr),\n+  _top(nullptr),\n@@ -111,1 +111,1 @@\n-  assert(_rs.base() != NULL, \"invariant\");\n+  assert(_rs.base() != nullptr, \"invariant\");\n@@ -172,1 +172,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -175,1 +175,1 @@\n-  assert(block != NULL, \"invariant\");\n+  assert(block != nullptr, \"invariant\");\n@@ -224,2 +224,2 @@\n-  _segments(NULL),\n-  _current_segment(NULL),\n+  _segments(nullptr),\n+  _current_segment(nullptr),\n@@ -233,1 +233,1 @@\n-  while (segment != NULL) {\n+  while (segment != nullptr) {\n@@ -259,1 +259,1 @@\n-  if (NULL == segment) {\n+  if (nullptr == segment) {\n@@ -273,1 +273,1 @@\n-  assert(segment != NULL, \"invariant\");\n+  assert(segment != nullptr, \"invariant\");\n@@ -327,2 +327,2 @@\n-  assert(segment != NULL, \"invariant\");\n-  if (_segments == NULL) {\n+  assert(segment != nullptr, \"invariant\");\n+  if (_segments == nullptr) {\n@@ -331,1 +331,1 @@\n-    assert(_current_segment != NULL, \"invariant\");\n+    assert(_current_segment != nullptr, \"invariant\");\n@@ -343,1 +343,1 @@\n-  if (block != NULL) {\n+  if (block != nullptr) {\n@@ -346,1 +346,1 @@\n-  assert(block == NULL, \"invariant\");\n+  assert(block == nullptr, \"invariant\");\n@@ -348,1 +348,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -353,1 +353,1 @@\n-    assert(block != NULL, \"The allocation was expected to succeed after the expansion\");\n+    assert(block != nullptr, \"The allocation was expected to succeed after the expansion\");\n@@ -359,1 +359,1 @@\n-  _vmm(NULL),\n+  _vmm(nullptr),\n@@ -362,2 +362,2 @@\n-  _top(NULL),\n-  _commit_point(NULL),\n+  _top(nullptr),\n+  _commit_point(nullptr),\n@@ -368,1 +368,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -377,1 +377,1 @@\n-  assert(reservation_size_bytes != NULL, \"invariant\");\n+  assert(reservation_size_bytes != nullptr, \"invariant\");\n@@ -379,1 +379,1 @@\n-  assert(commit_size_bytes != NULL, \"invariant\");\n+  assert(commit_size_bytes != nullptr, \"invariant\");\n@@ -412,1 +412,1 @@\n-  assert(_vmm == NULL, \"invariant\");\n+  assert(_vmm == nullptr, \"invariant\");\n@@ -415,2 +415,2 @@\n-  if (_vmm == NULL) {\n-    return NULL;\n+  if (_vmm == nullptr) {\n+    return nullptr;\n@@ -443,1 +443,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -457,1 +457,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -471,1 +471,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -474,1 +474,1 @@\n-  if (block != NULL) {\n+  if (block != nullptr) {\n@@ -479,1 +479,1 @@\n-  assert(block == NULL, \"invariant\");\n+  assert(block == nullptr, \"invariant\");\n@@ -485,1 +485,1 @@\n-  assert(_vmm != NULL, \"invariant\");\n+  assert(_vmm != nullptr, \"invariant\");\n@@ -490,1 +490,1 @@\n-      return NULL;\n+      return nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-static JfrStringPool* _instance = NULL;\n+static JfrStringPool* _instance = nullptr;\n@@ -57,1 +57,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -63,1 +63,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -65,1 +65,1 @@\n-  _instance = NULL;\n+  _instance = nullptr;\n@@ -68,1 +68,1 @@\n-JfrStringPool::JfrStringPool(JfrChunkWriter& cw) : _mspace(NULL), _chunkwriter(cw) {}\n+JfrStringPool::JfrStringPool(JfrChunkWriter& cw) : _mspace(nullptr), _chunkwriter(cw) {}\n@@ -78,1 +78,1 @@\n-  assert(_mspace == NULL, \"invariant\");\n+  assert(_mspace == nullptr, \"invariant\");\n@@ -84,1 +84,1 @@\n-  return _mspace != NULL;\n+  return _mspace != nullptr;\n@@ -94,1 +94,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -106,1 +106,1 @@\n-  assert(old != NULL, \"invariant\");\n+  assert(old != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -115,1 +115,1 @@\n-  if (new_buffer != NULL) {\n+  if (new_buffer != nullptr) {\n@@ -119,1 +119,1 @@\n-  return new_buffer; \/\/ might be NULL\n+  return new_buffer; \/\/ might be nullptr\n@@ -126,1 +126,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -135,1 +135,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -212,1 +212,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n-  _window_0(NULL),\n-  _window_1(NULL),\n-  _active_window(NULL),\n+  _window_0(nullptr),\n+  _window_1(nullptr),\n+  _active_window(nullptr),\n@@ -62,1 +62,1 @@\n-  assert(_window_0 == NULL, \"invariant\");\n+  assert(_window_0 == nullptr, \"invariant\");\n@@ -64,1 +64,1 @@\n-  if (_window_0 == NULL) {\n+  if (_window_0 == nullptr) {\n@@ -67,1 +67,1 @@\n-  assert(_window_1 == NULL, \"invariant\");\n+  assert(_window_1 == nullptr, \"invariant\");\n@@ -69,1 +69,1 @@\n-  if (_window_1 == NULL) {\n+  if (_window_1 == nullptr) {\n@@ -105,1 +105,1 @@\n-  assert(expired_window != NULL, \"invariant\");\n+  assert(expired_window != nullptr, \"invariant\");\n@@ -119,1 +119,1 @@\n-  assert(current != NULL, \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n@@ -232,1 +232,1 @@\n-  assert(expired != NULL, \"invariant\");\n+  assert(expired != nullptr, \"invariant\");\n@@ -260,1 +260,1 @@\n-  assert(expired != NULL, \"invariant\");\n+  assert(expired != nullptr, \"invariant\");\n@@ -329,1 +329,1 @@\n-  assert(expired != NULL, \"invariant\");\n+  assert(expired != nullptr, \"invariant\");\n@@ -363,1 +363,1 @@\n-  assert(sample_size_ewma != NULL, \"invariant\");\n+  assert(sample_size_ewma != nullptr, \"invariant\");\n@@ -381,1 +381,1 @@\n-  assert(expired != NULL, \"invariant\");\n+  assert(expired != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAdaptiveSampler.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-    assert(t != NULL, \"invariant\");\n+    assert(t != nullptr, \"invariant\");\n@@ -51,1 +51,1 @@\n-    assert(t != NULL, \"invariant\");\n+    assert(t != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrFlush.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -75,1 +75,1 @@\n-  assert(klass != NULL, \"sanity\");\n+  assert(klass != nullptr, \"sanity\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-static jobject empty_java_util_arraylist = NULL;\n+static jobject empty_java_util_arraylist = nullptr;\n@@ -60,1 +60,1 @@\n-    assert(NULL == empty_java_util_arraylist, \"invariant\");\n+    assert(nullptr == empty_java_util_arraylist, \"invariant\");\n@@ -63,1 +63,1 @@\n-    initialized = empty_java_util_arraylist != NULL;\n+    initialized = empty_java_util_arraylist != nullptr;\n@@ -75,1 +75,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -85,1 +85,1 @@\n-  assert(event_klass != NULL, \"invariant\");\n+  assert(event_klass != nullptr, \"invariant\");\n@@ -110,1 +110,1 @@\n-  assert(empty_java_util_arraylist != NULL, \"should have been setup already!\");\n+  assert(empty_java_util_arraylist != nullptr, \"should have been setup already!\");\n@@ -114,1 +114,1 @@\n-  if (NULL == event_klass_name) {\n+  if (nullptr == event_klass_name) {\n@@ -120,1 +120,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -124,1 +124,1 @@\n-  if (klass->subklass() == NULL) {\n+  if (klass->subklass() == nullptr) {\n@@ -144,1 +144,1 @@\n-  assert(array_list_klass != NULL, \"invariant\");\n+  assert(array_list_klass != nullptr, \"invariant\");\n@@ -147,1 +147,1 @@\n-  assert(add_method_sym != NULL, \"invariant\");\n+  assert(add_method_sym != nullptr, \"invariant\");\n@@ -150,1 +150,1 @@\n-  assert(add_method_signature != NULL, \"invariant\");\n+  assert(add_method_signature != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-static GrowableArray<traceid>* _unload_set_epoch_0 = NULL;\n-static GrowableArray<traceid>* _unload_set_epoch_1 = NULL;\n+static GrowableArray<traceid>* _unload_set_epoch_0 = nullptr;\n+static GrowableArray<traceid>* _unload_set_epoch_1 = nullptr;\n@@ -49,1 +49,1 @@\n-  if (_unload_set_epoch_0 == NULL) {\n+  if (_unload_set_epoch_0 == nullptr) {\n@@ -56,1 +56,1 @@\n-  if (_unload_set_epoch_1 == NULL) {\n+  if (_unload_set_epoch_1 == nullptr) {\n@@ -75,1 +75,1 @@\n-  assert(set != NULL, \"invariant\");\n+  assert(set != nullptr, \"invariant\");\n@@ -82,1 +82,1 @@\n-    return _unload_set_epoch_0 != NULL && _unload_set_epoch_0->is_nonempty();\n+    return _unload_set_epoch_0 != nullptr && _unload_set_epoch_0->is_nonempty();\n@@ -84,1 +84,1 @@\n-  return _unload_set_epoch_1 != NULL && _unload_set_epoch_1->is_nonempty();\n+  return _unload_set_epoch_1 != nullptr && _unload_set_epoch_1->is_nonempty();\n@@ -107,1 +107,1 @@\n-  assert(unload_set != NULL, \"invariant\");\n+  assert(unload_set != nullptr, \"invariant\");\n@@ -126,1 +126,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrKlassUnloading.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -39,1 +39,1 @@\n-  assert(m != NULL, \"invariant\");\n+  assert(m != nullptr, \"invariant\");\n@@ -47,1 +47,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -56,1 +56,1 @@\n-  assert(method != NULL, \"invariant\");\n+  assert(method != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrMethodLookup.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  assert(thread != NULL, \"invariant\");\n+  assert(thread != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrObjectAllocationSample.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-JfrStackTraceMark::JfrStackTraceMark(JfrEventId eventId) : _t(NULL), _previous_id(0), _previous_hash(0) {\n+JfrStackTraceMark::JfrStackTraceMark(JfrEventId eventId) : _t(nullptr), _previous_id(0), _previous_hash(0) {\n@@ -62,1 +62,1 @@\n-JfrStackTraceMark::JfrStackTraceMark(JfrEventId eventId, Thread* t) : _t(NULL), _previous_id(0), _previous_hash(0) {\n+JfrStackTraceMark::JfrStackTraceMark(JfrEventId eventId, Thread* t) : _t(nullptr), _previous_id(0), _previous_hash(0) {\n@@ -78,1 +78,1 @@\n-    if (_t != NULL) {\n+    if (_t != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrStackTraceMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-static JfrSymbolTable::StringEntry* bootstrap = NULL;\n+static JfrSymbolTable::StringEntry* bootstrap = nullptr;\n@@ -51,1 +51,1 @@\n-static JfrSymbolTable* _instance = NULL;\n+static JfrSymbolTable* _instance = nullptr;\n@@ -54,1 +54,1 @@\n-  assert(_instance != NULL, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n@@ -59,1 +59,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -67,1 +67,1 @@\n-  if (_instance != NULL) {\n+  if (_instance != nullptr) {\n@@ -69,1 +69,1 @@\n-    _instance = NULL;\n+    _instance = nullptr;\n@@ -71,1 +71,1 @@\n-  assert(_instance == NULL, \"invariant\");\n+  assert(_instance == nullptr, \"invariant\");\n@@ -77,4 +77,4 @@\n-  _symbol_list(NULL),\n-  _string_list(NULL),\n-  _symbol_query(NULL),\n-  _string_query(NULL),\n+  _symbol_list(nullptr),\n+  _string_list(nullptr),\n+  _symbol_query(nullptr),\n+  _string_query(nullptr),\n@@ -83,2 +83,2 @@\n-  assert(_symbols != NULL, \"invariant\");\n-  assert(_strings != NULL, \"invariant\");\n+  assert(_symbols != nullptr, \"invariant\");\n+  assert(_strings != nullptr, \"invariant\");\n@@ -86,1 +86,1 @@\n-  assert(bootstrap != NULL, \"invariant\");\n+  assert(bootstrap != nullptr, \"invariant\");\n@@ -99,1 +99,1 @@\n-  assert(_symbols != NULL, \"invariant\");\n+  assert(_symbols != nullptr, \"invariant\");\n@@ -105,1 +105,1 @@\n-  assert(_strings != NULL, \"invariant\");\n+  assert(_strings != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-  _symbol_list = NULL;\n+  _symbol_list = nullptr;\n@@ -114,2 +114,2 @@\n-  _symbol_query = NULL;\n-  _string_query = NULL;\n+  _symbol_query = nullptr;\n+  _string_query = nullptr;\n@@ -117,1 +117,1 @@\n-  assert(bootstrap != NULL, \"invariant\");\n+  assert(bootstrap != nullptr, \"invariant\");\n@@ -134,1 +134,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -147,1 +147,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -149,1 +149,1 @@\n-  assert(_symbol_query != NULL, \"invariant\");\n+  assert(_symbol_query != nullptr, \"invariant\");\n@@ -154,1 +154,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -159,1 +159,1 @@\n-  assert(resource_str != NULL, \"invariant\");\n+  assert(resource_str != nullptr, \"invariant\");\n@@ -162,1 +162,1 @@\n-  assert(c_string != NULL, \"invariant\");\n+  assert(c_string != nullptr, \"invariant\");\n@@ -175,2 +175,2 @@\n-  assert(query != NULL, \"invariant\");\n-  assert(candidate != NULL, \"invariant\");\n+  assert(query != nullptr, \"invariant\");\n+  assert(candidate != nullptr, \"invariant\");\n@@ -182,1 +182,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -184,1 +184,1 @@\n-  assert(_string_query != NULL, \"invariant\");\n+  assert(_string_query != nullptr, \"invariant\");\n@@ -189,1 +189,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n@@ -194,1 +194,1 @@\n-  assert(bootstrap != NULL, \"invariant\");\n+  assert(bootstrap != nullptr, \"invariant\");\n@@ -202,1 +202,1 @@\n-  assert(sym != NULL, \"invariant\");\n+  assert(sym != nullptr, \"invariant\");\n@@ -207,2 +207,2 @@\n-  assert(sym != NULL, \"invariant\");\n-  assert(_symbols != NULL, \"invariant\");\n+  assert(sym != nullptr, \"invariant\");\n+  assert(_symbols != nullptr, \"invariant\");\n@@ -225,2 +225,2 @@\n-  assert(str != NULL, \"invariant\");\n-  assert(_strings != NULL, \"invariant\");\n+  assert(str != nullptr, \"invariant\");\n+  assert(_strings != nullptr, \"invariant\");\n@@ -247,1 +247,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -250,1 +250,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -255,1 +255,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -258,1 +258,1 @@\n-  char* hidden_symbol = NULL;\n+  char* hidden_symbol = nullptr;\n@@ -260,1 +260,1 @@\n-  assert(mirror != NULL, \"invariant\");\n+  assert(mirror != nullptr, \"invariant\");\n@@ -274,1 +274,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -279,1 +279,1 @@\n-  assert(ik != NULL, \"invariant\");\n+  assert(ik != nullptr, \"invariant\");\n@@ -287,1 +287,1 @@\n-  assert(k != NULL, \"invariant\");\n+  assert(k != nullptr, \"invariant\");\n@@ -294,1 +294,1 @@\n-    if (sym != NULL) {\n+    if (sym != nullptr) {\n@@ -304,2 +304,2 @@\n-  assert(sym != NULL, \"invariant\");\n-  assert(_instance != NULL, \"invariant\");\n+  assert(sym != nullptr, \"invariant\");\n+  assert(_instance != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.cpp","additions":49,"deletions":49,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-    _list_next(NULL), _serialized(false), _unloading(false), _leakp(false) {}\n+    _list_next(nullptr), _serialized(false), _unloading(false), _leakp(false) {}\n@@ -38,1 +38,1 @@\n-    _list_next = NULL; _serialized = false; _unloading = false; _leakp = false;\n+    _list_next = nullptr; _serialized = false; _unloading = false; _leakp = false;\n@@ -106,2 +106,2 @@\n-  bool has_symbol_entries() const { return _symbol_list != NULL; }\n-  bool has_string_entries() const { return _string_list != NULL; }\n+  bool has_symbol_entries() const { return _symbol_list != nullptr; }\n+  bool has_string_entries() const { return _string_list != nullptr; }\n@@ -140,1 +140,1 @@\n-    while (symbol != NULL) {\n+    while (symbol != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,9 +50,9 @@\n-  _java_event_writer(NULL),\n-  _java_buffer(NULL),\n-  _native_buffer(NULL),\n-  _shelved_buffer(NULL),\n-  _load_barrier_buffer_epoch_0(NULL),\n-  _load_barrier_buffer_epoch_1(NULL),\n-  _checkpoint_buffer_epoch_0(NULL),\n-  _checkpoint_buffer_epoch_1(NULL),\n-  _stackframes(NULL),\n+  _java_event_writer(nullptr),\n+  _java_buffer(nullptr),\n+  _native_buffer(nullptr),\n+  _shelved_buffer(nullptr),\n+  _load_barrier_buffer_epoch_0(nullptr),\n+  _load_barrier_buffer_epoch_1(nullptr),\n+  _checkpoint_buffer_epoch_0(nullptr),\n+  _checkpoint_buffer_epoch_1(nullptr),\n+  _stackframes(nullptr),\n@@ -80,1 +80,1 @@\n-  _parent_trace_id = thread != NULL ? jvm_thread_id(thread) : (traceid)0;\n+  _parent_trace_id = thread != nullptr ? jvm_thread_id(thread) : (traceid)0;\n@@ -102,1 +102,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -149,1 +149,1 @@\n-    _java_event_writer = NULL;\n+    _java_event_writer = nullptr;\n@@ -153,1 +153,1 @@\n-    _native_buffer = NULL;\n+    _native_buffer = nullptr;\n@@ -157,1 +157,1 @@\n-    _java_buffer = NULL;\n+    _java_buffer = nullptr;\n@@ -159,1 +159,1 @@\n-  if (_stackframes != NULL) {\n+  if (_stackframes != nullptr) {\n@@ -161,1 +161,1 @@\n-    _stackframes = NULL;\n+    _stackframes = nullptr;\n@@ -163,1 +163,1 @@\n-  if (_load_barrier_buffer_epoch_0 != NULL) {\n+  if (_load_barrier_buffer_epoch_0 != nullptr) {\n@@ -165,1 +165,1 @@\n-    _load_barrier_buffer_epoch_0 = NULL;\n+    _load_barrier_buffer_epoch_0 = nullptr;\n@@ -167,1 +167,1 @@\n-  if (_load_barrier_buffer_epoch_1 != NULL) {\n+  if (_load_barrier_buffer_epoch_1 != nullptr) {\n@@ -169,1 +169,1 @@\n-    _load_barrier_buffer_epoch_1 = NULL;\n+    _load_barrier_buffer_epoch_1 = nullptr;\n@@ -171,1 +171,1 @@\n-  if (_checkpoint_buffer_epoch_0 != NULL) {\n+  if (_checkpoint_buffer_epoch_0 != nullptr) {\n@@ -173,1 +173,1 @@\n-    _checkpoint_buffer_epoch_0 = NULL;\n+    _checkpoint_buffer_epoch_0 = nullptr;\n@@ -175,1 +175,1 @@\n-  if (_checkpoint_buffer_epoch_1 != NULL) {\n+  if (_checkpoint_buffer_epoch_1 != nullptr) {\n@@ -177,1 +177,1 @@\n-    _checkpoint_buffer_epoch_1 = NULL;\n+    _checkpoint_buffer_epoch_1 = nullptr;\n@@ -186,2 +186,2 @@\n-  assert(tl != NULL, \"invariant\");\n-  assert(t != NULL, \"invariant\");\n+  assert(tl != nullptr, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -190,1 +190,1 @@\n-  assert(tl->shelved_buffer() == NULL, \"invariant\");\n+  assert(tl->shelved_buffer() == nullptr, \"invariant\");\n@@ -196,1 +196,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -208,1 +208,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -240,1 +240,1 @@\n-  assert(_stackframes == NULL, \"invariant\");\n+  assert(_stackframes == nullptr, \"invariant\");\n@@ -330,1 +330,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -337,1 +337,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -383,1 +383,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -407,1 +407,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-    return _native_buffer != NULL ? _native_buffer : install_native_buffer();\n+    return _native_buffer != nullptr ? _native_buffer : install_native_buffer();\n@@ -98,1 +98,1 @@\n-    return _native_buffer != NULL;\n+    return _native_buffer != nullptr;\n@@ -106,1 +106,1 @@\n-    return _java_buffer != NULL ? _java_buffer : install_java_buffer();\n+    return _java_buffer != nullptr ? _java_buffer : install_java_buffer();\n@@ -110,1 +110,1 @@\n-    return _java_buffer != NULL;\n+    return _java_buffer != nullptr;\n@@ -126,1 +126,1 @@\n-    return _java_event_writer != NULL;\n+    return _java_event_writer != nullptr;\n@@ -138,1 +138,1 @@\n-    return _stackframes != NULL ? _stackframes : install_stackframes();\n+    return _stackframes != nullptr ? _stackframes : install_stackframes();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  if (NULL == allocation) {\n+  if (nullptr == allocation) {\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-  assert(location != NULL, \"just checking\");\n+  assert(location != nullptr, \"just checking\");\n@@ -115,1 +115,1 @@\n-  assert(location != NULL, \"just checking\");\n+  assert(location != nullptr, \"just checking\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBigEndian.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  assert(_data != NULL, \"invariant\");\n+  assert(_data != nullptr, \"invariant\");\n@@ -65,1 +65,1 @@\n-  assert(blob != NULL, \"invariant\");\n+  assert(blob != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBlob.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-  NodePtr remove(NodePtr head, ConstNodePtr tail, NodePtr last = NULL, bool insert_is_head = true);\n+  NodePtr remove(NodePtr head, ConstNodePtr tail, NodePtr last = nullptr, bool insert_is_head = true);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrConcurrentLinkedListHost.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -43,1 +43,1 @@\n-  assert(next != NULL, \"invariant\");\n+  assert(next != nullptr, \"invariant\");\n@@ -45,1 +45,1 @@\n-  return next == unmasked_next && cas(&node->_next, unmasked_next, set_excision_bit(unmasked_next)) ? unmasked_next : NULL;\n+  return next == unmasked_next && cas(&node->_next, unmasked_next, set_excision_bit(unmasked_next)) ? unmasked_next : nullptr;\n@@ -54,1 +54,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -63,2 +63,2 @@\n-  assert(head != NULL, \"invariant\");\n-  assert(tail != NULL, \"invariant\");\n+  assert(head != nullptr, \"invariant\");\n+  assert(tail != nullptr, \"invariant\");\n@@ -66,1 +66,1 @@\n-  Node* predecessor_next = NULL;\n+  Node* predecessor_next = nullptr;\n@@ -72,1 +72,1 @@\n-      assert(next != NULL, \"invariant\");\n+      assert(next != nullptr, \"invariant\");\n@@ -136,4 +136,4 @@\n-  assert(node != NULL, \"invariant\");\n-  assert(head != NULL, \"invariant\");\n-  assert(last != NULL, \"invarinat\");\n-  assert(tail != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n+  assert(head != nullptr, \"invariant\");\n+  assert(last != nullptr, \"invarinat\");\n+  assert(tail != nullptr, \"invariant\");\n@@ -191,1 +191,1 @@\n-                                                                                              typename Client::Node* last \/* NULL *\/,\n+                                                                                              typename Client::Node* last \/* nullptr *\/,\n@@ -193,2 +193,2 @@\n-  assert(head != NULL, \"invariant\");\n-  assert(tail != NULL, \"invariant\");\n+  assert(head != nullptr, \"invariant\");\n+  assert(tail != nullptr, \"invariant\");\n@@ -205,1 +205,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -212,1 +212,1 @@\n-    if (successor_next != NULL) {\n+    if (successor_next != nullptr) {\n@@ -228,1 +228,1 @@\n-  if (last != NULL && Atomic::load_acquire(&last->_next) == successor) {\n+  if (last != nullptr && Atomic::load_acquire(&last->_next) == successor) {\n@@ -246,2 +246,2 @@\n-  assert(head != NULL, \"invariant\");\n-  assert(tail != NULL, \"invariant\");\n+  assert(head != nullptr, \"invariant\");\n+  assert(tail != nullptr, \"invariant\");\n@@ -271,2 +271,2 @@\n-  assert(head != NULL, \"invariant\");\n-  assert(tail != NULL, \"invariant\");\n+  assert(head != nullptr, \"invariant\");\n+  assert(tail != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrConcurrentLinkedListHost.inline.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-JfrConcurrentQueue<NodeType, AllocPolicy>::JfrConcurrentQueue() : _list(NULL), _head(), _last(), _tail(), _version_system() {\n+JfrConcurrentQueue<NodeType, AllocPolicy>::JfrConcurrentQueue() : _list(nullptr), _head(), _last(), _tail(), _version_system() {\n@@ -41,1 +41,1 @@\n-  assert(_list == NULL, \"invariant\");\n+  assert(_list == nullptr, \"invariant\");\n@@ -43,1 +43,1 @@\n-  return _list != NULL && _list->initialize();\n+  return _list != nullptr && _list->initialize();\n@@ -79,1 +79,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrConcurrentQueue.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  JfrDoublyLinkedList() : _head(NULL), _tail(NULL), _count(0) {}\n+  JfrDoublyLinkedList() : _head(nullptr), _tail(nullptr), _count(0) {}\n@@ -57,2 +57,2 @@\n-  assert(node != NULL, \"invariant\");\n-  node->set_prev(NULL);\n+  assert(node != nullptr, \"invariant\");\n+  node->set_prev(nullptr);\n@@ -61,1 +61,1 @@\n-  if (*lh != NULL) {\n+  if (*lh != nullptr) {\n@@ -66,1 +66,1 @@\n-    assert(*lt == NULL, \"invariant\");\n+    assert(*lt == nullptr, \"invariant\");\n@@ -68,1 +68,1 @@\n-    node->set_next(NULL);\n+    node->set_next(nullptr);\n@@ -70,1 +70,1 @@\n-    assert(node->next() == NULL, \"invariant\");\n+    assert(node->next() == nullptr, \"invariant\");\n@@ -76,1 +76,1 @@\n-  assert(node->prev() == NULL, \"invariant\");\n+  assert(node->prev() == nullptr, \"invariant\");\n@@ -81,2 +81,2 @@\n-  assert(node != NULL, \"invariant\");\n-  node->set_next(NULL);\n+  assert(node != nullptr, \"invariant\");\n+  node->set_next(nullptr);\n@@ -85,1 +85,1 @@\n-  if (*lt != NULL) {\n+  if (*lt != nullptr) {\n@@ -91,1 +91,1 @@\n-    assert(*lt == NULL, \"invariant\");\n+    assert(*lt == nullptr, \"invariant\");\n@@ -93,2 +93,2 @@\n-    assert(*lh == NULL, \"invariant\");\n-    node->set_prev(NULL);\n+    assert(*lh == nullptr, \"invariant\");\n+    node->set_prev(nullptr);\n@@ -102,1 +102,1 @@\n-  assert(node->next() == NULL, \"invariant\");\n+  assert(node->next() == nullptr, \"invariant\");\n@@ -107,1 +107,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-  if (prev == NULL) {\n+  if (prev == nullptr) {\n@@ -113,2 +113,2 @@\n-    if (next != NULL) {\n-      next->set_prev(NULL);\n+    if (next != nullptr) {\n+      next->set_prev(nullptr);\n@@ -116,1 +116,1 @@\n-      assert(next == NULL, \"invariant\");\n+      assert(next == nullptr, \"invariant\");\n@@ -119,2 +119,2 @@\n-      *lt = NULL;\n-      assert(tail() == NULL, \"invariant\");\n+      *lt = nullptr;\n+      assert(tail() == nullptr, \"invariant\");\n@@ -126,2 +126,2 @@\n-    assert(prev != NULL, \"invariant\");\n-    if (next == NULL) {\n+    assert(prev != nullptr, \"invariant\");\n+    if (next == nullptr) {\n@@ -146,1 +146,1 @@\n-  *l = NULL;\n+  *l = nullptr;\n@@ -148,1 +148,1 @@\n-  *l = NULL;\n+  *l = nullptr;\n@@ -150,2 +150,2 @@\n-  assert(head() == NULL, \"invariant\");\n-  assert(tail() == NULL, \"invariant\");\n+  assert(head() == nullptr, \"invariant\");\n+  assert(tail() == nullptr, \"invariant\");\n@@ -157,2 +157,2 @@\n-  assert(target != NULL, \"invariant\");\n-  while (node != NULL) {\n+  assert(target != nullptr, \"invariant\");\n+  while (node != nullptr) {\n@@ -169,1 +169,1 @@\n-  assert(target != NULL, \"invariant\");\n+  assert(target != nullptr, \"invariant\");\n@@ -175,1 +175,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -186,1 +186,1 @@\n-  assert(head_node != NULL, \"invariant\");\n+  assert(head_node != nullptr, \"invariant\");\n@@ -188,1 +188,1 @@\n-  assert(tail_node != NULL, \"invariant\");\n+  assert(tail_node != nullptr, \"invariant\");\n@@ -190,1 +190,1 @@\n-  assert(tail_node->next() == NULL, \"invariant\");\n+  assert(tail_node->next() == nullptr, \"invariant\");\n@@ -194,1 +194,1 @@\n-  if (*lt != NULL) {\n+  if (*lt != nullptr) {\n@@ -199,1 +199,1 @@\n-    assert(*lt == NULL, \"invariant\");\n+    assert(*lt == nullptr, \"invariant\");\n@@ -201,2 +201,2 @@\n-    assert(*lh == NULL, \"invariant\");\n-    head_node->set_prev(NULL);\n+    assert(*lh == nullptr, \"invariant\");\n+    head_node->set_prev(nullptr);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrDoublyLinkedList.hpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-JfrEpochQueue<ElementPolicy>::JfrEpochQueue() : _storage(NULL) {}\n+JfrEpochQueue<ElementPolicy>::JfrEpochQueue() : _storage(nullptr) {}\n@@ -43,1 +43,1 @@\n-  assert(_storage == NULL, \"invariant\");\n+  assert(_storage == nullptr, \"invariant\");\n@@ -45,1 +45,1 @@\n-  return _storage != NULL && _storage->initialize(min_buffer_size, free_list_cache_count_limit, cache_prealloc_count);\n+  return _storage != nullptr && _storage->initialize(min_buffer_size, free_list_cache_count_limit, cache_prealloc_count);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrEpochQueue.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  JfrBasicHashtableEntry(uintptr_t hash, const T& data) : _next(NULL), _literal(data), _hash(hash) {}\n+  JfrBasicHashtableEntry(uintptr_t hash, const T& data) : _next(nullptr), _literal(data), _hash(hash) {}\n@@ -80,1 +80,1 @@\n-    _buckets(NULL), _table_size(table_size), _entry_size(entry_size), _number_of_entries(0) {\n+    _buckets(nullptr), _table_size(table_size), _entry_size(entry_size), _number_of_entries(0) {\n@@ -92,1 +92,1 @@\n-    entry->set_next(NULL);\n+    entry->set_next(nullptr);\n@@ -103,1 +103,1 @@\n-    assert(entry != NULL, \"invariant\");\n+    assert(entry != nullptr, \"invariant\");\n@@ -118,1 +118,1 @@\n-    assert(entry != NULL, \"invariant\");\n+    assert(entry != nullptr, \"invariant\");\n@@ -161,1 +161,1 @@\n-    return entry == NULL ? put(hash, data) : *entry;\n+    return entry == nullptr ? put(hash, data) : *entry;\n@@ -168,1 +168,1 @@\n-    assert(data != NULL, \"invariant\");\n+    assert(data != nullptr, \"invariant\");\n@@ -186,1 +186,1 @@\n-    assert(entry != NULL, \"invariant\");\n+    assert(entry != nullptr, \"invariant\");\n@@ -197,1 +197,1 @@\n-    assert(new_entry != NULL, \"invariant\");\n+    assert(new_entry != nullptr, \"invariant\");\n@@ -206,1 +206,1 @@\n-  assert(lookup_only(hash) == NULL, \"use lookup_put()\");\n+  assert(lookup_only(hash) == nullptr, \"use lookup_put()\");\n@@ -215,1 +215,1 @@\n-  while (entry != NULL) {\n+  while (entry != nullptr) {\n@@ -221,1 +221,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -229,1 +229,1 @@\n-    while (entry != NULL) {\n+    while (entry != nullptr) {\n@@ -243,1 +243,1 @@\n-    while (entry != NULL) {\n+    while (entry != nullptr) {\n@@ -257,1 +257,1 @@\n-    while (entry != NULL) {\n+    while (entry != nullptr) {\n@@ -262,1 +262,1 @@\n-    *bucket = NULL;\n+    *bucket = nullptr;\n@@ -271,1 +271,1 @@\n-  assert(entry != NULL, \"invariant\");\n+  assert(entry != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrHashtable.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    return _node != NULL;\n+    return _node != nullptr;\n@@ -42,1 +42,1 @@\n-    assert(_node != NULL, \"invariant\");\n+    assert(_node != nullptr, \"invariant\");\n@@ -56,1 +56,1 @@\n-  StopOnNullConditionRemoval(List& list) : _list(list), _node(NULL) {}\n+  StopOnNullConditionRemoval(List& list) : _list(list), _node(nullptr) {}\n@@ -59,1 +59,1 @@\n-    return _node != NULL;\n+    return _node != nullptr;\n@@ -62,1 +62,1 @@\n-    assert(_node != NULL, \"invariant\");\n+    assert(_node != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrIterator.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-  if (log_tag_sets[jflt].log_tag_enum_ref == NULL) {\n+  if (log_tag_sets[jflt].log_tag_enum_ref == nullptr) {\n@@ -92,1 +92,1 @@\n-    assert(NULL == log_tag_sets[tagSetType].log_tag_set, \"Init JFR LogTagSets twice\"); \\\n+    assert(nullptr == log_tag_sets[tagSetType].log_tag_set, \"Init JFR LogTagSets twice\"); \\\n@@ -113,1 +113,1 @@\n-  assert(NULL == log_tag_sets[id].log_tag_enum_ref, \"Subscribing twice\");\n+  assert(nullptr == log_tag_sets[id].log_tag_enum_ref, \"Subscribing twice\");\n@@ -126,1 +126,1 @@\n-  if (lines == NULL) {\n+  if (lines == nullptr) {\n@@ -135,1 +135,1 @@\n-  assert(the_lines != NULL, \"invariant\");\n+  assert(the_lines != nullptr, \"invariant\");\n@@ -144,1 +144,1 @@\n-    if (text == NULL) {\n+    if (text == nullptr) {\n@@ -158,1 +158,1 @@\n-  if (message == NULL) {\n+  if (message == nullptr) {\n@@ -171,2 +171,2 @@\n-  assert(s != NULL, \"invariant\");\n-  assert(log_tag_sets[tag_set].log_tag_set != NULL, \"LogTagSet is not init\");\n+  assert(s != nullptr, \"invariant\");\n+  assert(log_tag_sets[tag_set].log_tag_set != nullptr, \"LogTagSet is not init\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrJavaLog.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-JfrLinkedList<NodeType, AllocPolicy>::JfrLinkedList() : _head(NULL) {}\n+JfrLinkedList<NodeType, AllocPolicy>::JfrLinkedList() : _head(nullptr) {}\n@@ -47,1 +47,1 @@\n-  return NULL == head();\n+  return nullptr == head();\n@@ -57,1 +57,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -71,1 +71,1 @@\n-    if (node == NULL) break;\n+    if (node == nullptr) break;\n@@ -81,1 +81,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n@@ -93,1 +93,1 @@\n-  if (prev == NULL) {\n+  if (prev == nullptr) {\n@@ -96,1 +96,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -99,1 +99,1 @@\n-  assert(prev != NULL, \"invariant\");\n+  assert(prev != nullptr, \"invariant\");\n@@ -110,1 +110,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n@@ -112,1 +112,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrLinkedList.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-  JfrLinkedNode() : _next(NULL) {}\n+  JfrLinkedNode() : _next(nullptr) {}\n@@ -82,1 +82,1 @@\n-  JfrKeyIsThisNode(const Value value = NULL) : JfrLinkedNode<JfrKeyIsThisNode<V> >(), _value(value) {}\n+  JfrKeyIsThisNode(const Value value = nullptr) : JfrLinkedNode<JfrKeyIsThisNode<V> >(), _value(value) {}\n@@ -95,1 +95,1 @@\n-  JfrValueNode(const Value value = NULL) : JfrLinkedNode<JfrValueNode<V> >(), _value(value) {}\n+  JfrValueNode(const Value value = nullptr) : JfrLinkedNode<JfrValueNode<V> >(), _value(value) {}\n@@ -108,1 +108,1 @@\n-  JfrKeyIsFreeSizeNode(const Value value = NULL) : JfrLinkedNode<JfrKeyIsFreeSizeNode<V> >(), _value(value) {}\n+  JfrKeyIsFreeSizeNode(const Value value = nullptr) : JfrLinkedNode<JfrKeyIsFreeSizeNode<V> >(), _value(value) {}\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrNode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    assert(set != NULL, \"invariant\");\n+    assert(set != nullptr, \"invariant\");\n@@ -52,1 +52,1 @@\n-    assert(set != NULL, \"invariant\");\n+    assert(set != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrPredicate.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  assert(seed != NULL, \"invariant\");\n+  assert(seed != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrRandom.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    assert(_ptr != NULL, \"invariant\");\n+    assert(_ptr != nullptr, \"invariant\");\n@@ -42,1 +42,1 @@\n-  RefCountHandle() : _ptr(NULL) {}\n+  RefCountHandle() : _ptr(nullptr) {}\n@@ -45,1 +45,1 @@\n-    if (_ptr != NULL) {\n+    if (_ptr != nullptr) {\n@@ -51,1 +51,1 @@\n-    if (_ptr != NULL) {\n+    if (_ptr != nullptr) {\n@@ -53,1 +53,1 @@\n-      _ptr = NULL;\n+      _ptr = nullptr;\n@@ -73,1 +73,1 @@\n-    return _ptr != NULL;\n+    return _ptr != nullptr;\n@@ -160,1 +160,1 @@\n-    assert(_ptr != NULL, \"invariant\");\n+    assert(_ptr != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrRefCountPointer.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-  HeadNode(const Node* node = NULL) {}\n+  HeadNode(const Node* node = nullptr) {}\n@@ -91,1 +91,1 @@\n-  LastNode(const Node* node = NULL) {}\n+  LastNode(const Node* node = nullptr) {}\n@@ -103,1 +103,1 @@\n-  Identity(const Node* node = NULL) : _target(node), _found(false) {}\n+  Identity(const Node* node = nullptr) : _target(node), _found(false) {}\n@@ -105,2 +105,2 @@\n-    assert(current != NULL, \"invariant\");\n-    assert(next != NULL, \"invariant\");\n+    assert(current != nullptr, \"invariant\");\n+    assert(next != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrRelation.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    if (_resource != NULL) {\n+    if (_resource != nullptr) {\n@@ -52,1 +52,1 @@\n-    if (_resource_array != NULL) {\n+    if (_resource_array != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrResourceManager.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    Thread::SpinAcquire(_lock, NULL);\n+    Thread::SpinAcquire(_lock, nullptr);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrSpinlockHelper.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  assert(t != NULL, \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n@@ -37,1 +37,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -48,1 +48,1 @@\n-    assert(next != NULL, \"invariant\");\n+    assert(next != nullptr, \"invariant\");\n@@ -53,1 +53,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -85,1 +85,1 @@\n-  return _next != NULL;\n+  return _next != nullptr;\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrThreadIterator.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-inline JfrVersionSystem::JfrVersionSystem() : _tip(), _head(NULL) {\n+inline JfrVersionSystem::JfrVersionSystem() : _tip(), _head(nullptr) {\n@@ -43,1 +43,1 @@\n-  while (node != NULL) {\n+  while (node != nullptr) {\n@@ -48,1 +48,1 @@\n-  _head = NULL;\n+  _head = nullptr;\n@@ -69,1 +69,1 @@\n-  while (node != NULL) {\n+  while (node != nullptr) {\n@@ -92,1 +92,1 @@\n-inline JfrVersionSystem::Node::Node(JfrVersionSystem* system) : _system(system), _next(NULL), _version(0), _live(true) {}\n+inline JfrVersionSystem::Node::Node(JfrVersionSystem* system) : _system(system), _next(nullptr), _version(0), _live(true) {}\n@@ -132,1 +132,1 @@\n-  while (node != NULL) {\n+  while (node != nullptr) {\n@@ -139,1 +139,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -149,1 +149,1 @@\n-    if (last == NULL) {\n+    if (last == nullptr) {\n@@ -158,1 +158,1 @@\n-  assert(node != NULL, \"invariant\");\n+  assert(node != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrVersionSystem.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -98,1 +98,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -120,1 +120,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -205,1 +205,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -256,1 +256,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -269,1 +269,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n@@ -304,1 +304,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrEncoders.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,2 @@\n-    assert(value != NULL, \"invariant\");\n-    assert(pos != NULL, \"invariant\");\n+    assert(value != nullptr, \"invariant\");\n+    assert(pos != nullptr, \"invariant\");\n@@ -60,1 +60,1 @@\n-    assert(pos != NULL, \"invariant\");\n+    assert(pos != nullptr, \"invariant\");\n@@ -66,2 +66,2 @@\n-    assert(value != NULL, \"invariant\");\n-    assert(pos != NULL, \"invariant\");\n+    assert(value != nullptr, \"invariant\");\n+    assert(pos != nullptr, \"invariant\");\n@@ -84,2 +84,2 @@\n-    assert(value != NULL, \"invariant\");\n-    assert(pos != NULL, \"invariant\");\n+    assert(value != nullptr, \"invariant\");\n+    assert(pos != nullptr, \"invariant\");\n@@ -104,1 +104,1 @@\n-    if (value != NULL) {\n+    if (value != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrEncoding.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  assert(k_sym != NULL, \"invariant\");\n+  assert(k_sym != nullptr, \"invariant\");\n@@ -58,1 +58,1 @@\n-  assert(klass != NULL, \"invariant\");\n+  assert(klass != nullptr, \"invariant\");\n@@ -62,1 +62,1 @@\n-  assert(start_pos_sym != NULL, \"invariant\");\n+  assert(start_pos_sym != nullptr, \"invariant\");\n@@ -69,1 +69,1 @@\n-  assert(start_pos_address_sym != NULL, \"invariant\");\n+  assert(start_pos_address_sym != nullptr, \"invariant\");\n@@ -76,1 +76,1 @@\n-  assert(event_pos_sym != NULL, \"invariant\");\n+  assert(event_pos_sym != nullptr, \"invariant\");\n@@ -83,1 +83,1 @@\n-  assert(max_pos_sym != NULL, \"invariant\");\n+  assert(max_pos_sym != nullptr, \"invariant\");\n@@ -90,1 +90,1 @@\n-  assert (notified_sym != NULL, \"invariant\");\n+  assert (notified_sym != nullptr, \"invariant\");\n@@ -97,1 +97,1 @@\n-  assert(excluded_sym != NULL, \"invariant\");\n+  assert(excluded_sym != nullptr, \"invariant\");\n@@ -104,1 +104,1 @@\n-  assert(threadID_sym != NULL, \"invariant\");\n+  assert(threadID_sym != nullptr, \"invariant\");\n@@ -111,1 +111,1 @@\n-  assert (valid_sym != NULL, \"invariant\");\n+  assert (valid_sym != nullptr, \"invariant\");\n@@ -128,1 +128,1 @@\n-  assert(writer != NULL, \"invariant\");\n+  assert(writer != nullptr, \"invariant\");\n@@ -130,1 +130,1 @@\n-  assert(w != NULL, \"invariant\");\n+  assert(w != nullptr, \"invariant\");\n@@ -132,1 +132,1 @@\n-  assert(current != NULL, \"invariant\");\n+  assert(current != nullptr, \"invariant\");\n@@ -134,1 +134,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -198,1 +198,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -202,1 +202,1 @@\n-    assert(buffer_writer != NULL, \"invariant\");\n+    assert(buffer_writer != nullptr, \"invariant\");\n@@ -208,1 +208,1 @@\n-  assert(buffer != NULL, \"invariant\");\n+  assert(buffer != nullptr, \"invariant\");\n@@ -231,1 +231,1 @@\n-  assert(tl->shelved_buffer() == NULL, \"invariant\");\n+  assert(tl->shelved_buffer() == nullptr, \"invariant\");\n@@ -233,1 +233,1 @@\n-  if (h_writer != NULL) {\n+  if (h_writer != nullptr) {\n@@ -235,1 +235,1 @@\n-    assert(writer != NULL, \"invariant\");\n+    assert(writer != nullptr, \"invariant\");\n@@ -249,1 +249,1 @@\n-  assert(event_writer(THREAD) == NULL, \"invariant\");\n+  assert(event_writer(THREAD) == nullptr, \"invariant\");\n@@ -253,1 +253,1 @@\n-  if (buffer == NULL) {\n+  if (buffer == nullptr) {\n@@ -255,1 +255,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  assert(dest != NULL, \"invariant\");\n+  assert(dest != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrMemoryWriterHost.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-inline Position<AP>::Position() : _start_pos(NULL), _current_pos(NULL), _end_pos(NULL) {\n+inline Position<AP>::Position() : _start_pos(nullptr), _current_pos(nullptr), _end_pos(nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrPosition.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  Adapter(Thread* thread) : _storage(NULL), _thread(thread) {}\n+  Adapter(Thread* thread) : _storage(nullptr), _thread(thread) {}\n@@ -62,1 +62,1 @@\n-    assert(_storage != NULL, \"invariant\");\n+    assert(_storage != nullptr, \"invariant\");\n@@ -67,1 +67,1 @@\n-    assert(_storage != NULL, \"invariant\");\n+    assert(_storage != nullptr, \"invariant\");\n@@ -72,1 +72,1 @@\n-    assert(_storage != NULL, \"invariant\");\n+    assert(_storage != nullptr, \"invariant\");\n@@ -77,1 +77,1 @@\n-    assert(_storage != NULL, \"invariant\");\n+    assert(_storage != nullptr, \"invariant\");\n@@ -89,1 +89,1 @@\n-    if (_storage != NULL && _storage->lease()) {\n+    if (_storage != nullptr && _storage->lease()) {\n@@ -155,3 +155,3 @@\n-  _start(NULL),\n-  _pos(NULL),\n-  _end(NULL),\n+  _start(nullptr),\n+  _pos(nullptr),\n+  _end(nullptr),\n@@ -172,1 +172,1 @@\n-  if (NULL == _start) {\n+  if (nullptr == _start) {\n@@ -180,1 +180,1 @@\n-  return _start != NULL;\n+  return _start != nullptr;\n@@ -185,1 +185,1 @@\n-  if (_start != NULL) {\n+  if (_start != nullptr) {\n@@ -196,1 +196,1 @@\n-  assert(_start != NULL, \"invariant\");\n+  assert(_start != nullptr, \"invariant\");\n@@ -228,1 +228,1 @@\n-  NoOwnershipAdapter(Thread* thread) : _start(NULL), _pos(NULL), _end(NULL), _size(0) {\n+  NoOwnershipAdapter(Thread* thread) : _start(nullptr), _pos(nullptr), _end(nullptr), _size(0) {\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrStorageAdapter.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,3 @@\n-  this->set_start_pos(NULL);\n-  this->set_current_pos((const u1*)NULL);\n-  this->set_end_pos(NULL);\n+  this->set_start_pos(nullptr);\n+  this->set_current_pos((const u1*)nullptr);\n+  this->set_end_pos(nullptr);\n@@ -56,1 +56,1 @@\n-  this->set_end_pos(NULL);\n+  this->set_end_pos(nullptr);\n@@ -61,1 +61,1 @@\n-  return _adapter.storage() != NULL;\n+  return _adapter.storage() != nullptr;\n@@ -109,1 +109,1 @@\n-  return this->end_pos() != NULL;\n+  return this->end_pos() != nullptr;\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrStorageHost.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    assert(_writer != NULL, \"invariant\");\n+    assert(_writer != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrTypeWriterHost.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -65,1 +65,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -67,1 +67,1 @@\n-  assert(pos != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n@@ -74,1 +74,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -87,1 +87,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -89,1 +89,1 @@\n-  assert(pos != NULL, \"invariant\");\n+  assert(pos != nullptr, \"invariant\");\n@@ -95,3 +95,3 @@\n-  if (NULL == value) {\n-    \/\/ only write encoding byte indicating NULL string\n-    write<u1>(NULL_STRING);\n+  if (nullptr == value) {\n+    \/\/ only write encoding byte indicating null string\n+    write<u1>(nullptr_STRING);\n@@ -110,1 +110,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -127,1 +127,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -168,1 +168,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -173,1 +173,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -219,2 +219,2 @@\n-  if (string == NULL) {\n-    write<u1>(NULL_STRING);\n+  if (string == nullptr) {\n+    write<u1>(nullptr_STRING);\n@@ -224,1 +224,1 @@\n-  assert(string_oop != NULL, \"invariant\");\n+  assert(string_oop != nullptr, \"invariant\");\n@@ -232,1 +232,1 @@\n-  assert(value != NULL, \"invariant\");\n+  assert(value != nullptr, \"invariant\");\n@@ -246,2 +246,2 @@\n-  assert(w != NULL, \"invariant\");\n-  const traceid id = t == NULL ? 0 : JfrTraceId::load(t);\n+  assert(w != nullptr, \"invariant\");\n+  const traceid id = t == nullptr ? 0 : JfrTraceId::load(t);\n@@ -279,1 +279,1 @@\n-  write_utf8(symbol != NULL ? symbol->as_C_string() : NULL);\n+  write_utf8(symbol != nullptr ? symbol->as_C_string() : nullptr);\n@@ -306,1 +306,1 @@\n-  if (pos != NULL) {\n+  if (pos != nullptr) {\n@@ -315,1 +315,1 @@\n-  if (value != NULL) {\n+  if (value != nullptr) {\n@@ -326,1 +326,1 @@\n-  if (ensure_size(size) != NULL) {\n+  if (ensure_size(size) != nullptr) {\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrWriterHost.inline.hpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}