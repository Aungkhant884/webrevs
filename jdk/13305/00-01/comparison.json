{"files":[{"patch":"@@ -3129,3 +3129,78 @@\n-     * <p> This method works as if by invoking the three-argument {@link\n-     * #split(String, int, boolean) split} method with the given {@code regex},\n-     * the given {@code limit}, and {@code false} as the last argument.\n+     * <p> The array returned by this method contains each substring of this\n+     * string that is terminated by another substring that matches the given\n+     * expression or is terminated by the end of the string.  The substrings in\n+     * the array are in the order in which they occur in this string.  If the\n+     * expression does not match any part of the input then the resulting array\n+     * has just one element, namely this string.\n+     *\n+     * <p> When there is a positive-width match at the beginning of this\n+     * string then an empty leading substring is included at the beginning\n+     * of the resulting array. A zero-width match at the beginning however\n+     * never produces such empty leading substring.\n+     *\n+     * <p> The {@code limit} parameter controls the number of times the\n+     * pattern is applied and therefore affects the length of the resulting\n+     * array.\n+     * <ul>\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is positive then the pattern will be applied\n+     *    at most <i>limit<\/i>&nbsp;-&nbsp;1 times, the array's length will be\n+     *    no greater than <i>limit<\/i>, and the array's last entry will contain\n+     *    all input beyond the last matched delimiter.<\/p><\/li>\n+     *\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is zero then the pattern will be applied as\n+     *    many times as possible, the array can have any length, and trailing\n+     *    empty strings will be discarded.<\/p><\/li>\n+     *\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is negative then the pattern will be applied\n+     *    as many times as possible and the array can have any length.<\/p><\/li>\n+     * <\/ul>\n+     *\n+     * <p> The string {@code \"boo:and:foo\"}, for example, yields the\n+     * following results with these parameters:\n+     *\n+     * <blockquote><table class=\"plain\">\n+     * <caption style=\"display:none\">Split example showing regex, limit, and result<\/caption>\n+     * <thead>\n+     * <tr>\n+     *     <th scope=\"col\">Regex<\/th>\n+     *     <th scope=\"col\">Limit<\/th>\n+     *     <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n+     *     <td>{@code { \"boo\", \"and:foo\" }}<\/td><\/tr>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     * <\/tbody>\n+     * <\/table><\/blockquote>\n+     *\n+     * <p> An invocation of this method of the form\n+     * <i>str.<\/i>{@code split(}<i>regex<\/i>{@code ,}&nbsp;<i>n<\/i>{@code )}\n+     * yields the same result as the expression\n+     *\n+     * <blockquote>\n+     * <code>\n+     * {@link java.util.regex.Pattern}.{@link\n+     * java.util.regex.Pattern#compile(String) compile}(<i>regex<\/i>).{@link\n+     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(<i>str<\/i>,&nbsp;<i>n<\/i>)\n+     * <\/code>\n+     * <\/blockquote>\n+     *\n@@ -3154,2 +3229,2 @@\n-     * Splits this string around matches of the given\n-     * <a href=\"..\/util\/regex\/Pattern.html#sum\">regular expression<\/a>.\n+     * Splits this string around matches of the given regular expression and\n+     * returns both the strings and the matching delimiters.\n@@ -3157,2 +3232,1 @@\n-     * <p> When {@code withDelimiter} is {@code false},\n-     * the array returned by this method contains each substring of this\n+     * <p> The array returned by this method contains each substring of this\n@@ -3164,9 +3238,12 @@\n-\n-     * <p> When {@code withDelimiter} is {@code true}, each of the substrings\n-     * returned in the array described above is immediately followed by the\n-     * subsequence that matches the given expression, <em>except<\/em> for the\n-     * last substring, which is not followed by anything.\n-     * Thus, the element at index {@code 0} is the first substring, followed\n-     * by the first subsequence matching the given expression, and so on,\n-     * up to the last substring.\n-\n+     *\n+     * <p> The array returned by this method contains each substring of this\n+     * string that is terminated by another substring that matches the given\n+     * expression or is terminated by the end of the string.\n+     * Each substring is immediately followed by the subsequence (the delimiter)\n+     * that matches the given expression, <em>except<\/em> for the last\n+     * substring, which is not followed by anything.\n+     * The substrings in the array and the delimiters are in the order in which\n+     * they occur in the input.\n+     * If the expression does not match any part of the input then the resulting\n+     * array has just one element, namely this string.\n+     *\n@@ -3182,2 +3259,1 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is positive then the pattern will be applied\n+     *    <li> If the <i>limit<\/i> is positive then the pattern will be applied\n@@ -3185,4 +3261,2 @@\n-     *    no greater than <i>limit<\/i> when {@code withDelimiter} is\n-     *    {@code false}, and no greater than 2 &centerdot; <i>limit<\/i> - 1\n-     *    otherwise. The array's last entry will contain all input beyond the\n-     *    last matched delimiter.<\/p><\/li>\n+     *    no greater than 2 &centerdot; <i>limit<\/i> - 1, and the array's last\n+     *    entry will contain all input beyond the last matched delimiter.<\/li>\n@@ -3190,4 +3264,3 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is zero then the pattern will be applied as many\n-     *    times as possible, the array can have any length, and trailing empty\n-     *    strings, whether substrings or delimiters, will be discarded.<\/p><\/li>\n+     *    <li> If the <i>limit<\/i> is zero then the pattern will be applied as\n+     *    many times as possible, the array can have any length, and trailing\n+     *    empty strings will be discarded.<\/li>\n@@ -3195,3 +3268,2 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is negative then the pattern will be applied\n-     *    as many times as possible and the array can have any length.<\/p><\/li>\n+     *    <li> If the <i>limit<\/i> is negative then the pattern will be applied\n+     *    as many times as possible and the array can have any length.<\/li>\n@@ -3209,1 +3281,0 @@\n-     *     <th scope=\"col\">With Delimiters<\/th>\n@@ -3214,6 +3285,2 @@\n-     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">:+<\/th>\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and::foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:+<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n@@ -3221,6 +3288,2 @@\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n@@ -3228,6 +3291,2 @@\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n@@ -3235,7 +3294,2 @@\n-     * <tr><!-- :+ -->\n-     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">o<\/th>\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n@@ -3244,5 +3298,1 @@\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n@@ -3251,5 +3301,1 @@\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n@@ -3260,2 +3306,2 @@\n-     * <p> An invocation of this method of the form\n-     * {@code s.split(regex, n, b)}\n+     * @apiNote An invocation of this method of the form\n+     * <i>str.<\/i>{@code splitWithDelimiters(}<i>regex<\/i>{@code ,}&nbsp;<i>n<\/i>{@code )}\n@@ -3267,2 +3313,2 @@\n-     * java.util.regex.Pattern#compile(String) compile}(regex).{@link\n-     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(s,&nbsp;n,&nbsp;b)\n+     * java.util.regex.Pattern#compile(String) compile}(<i>regex<\/i>).{@link\n+     * java.util.regex.Pattern#splitWithDelimiters(CharSequence,int) splitWithDelimiters}(<i>str<\/i>,&nbsp;<i>n<\/i>)\n@@ -3278,3 +3324,0 @@\n-     * @param  withDelimiters\n-     *         Whether the result should include the matched delimiters\n-     *\n@@ -3284,6 +3327,1 @@\n-     * @throws  PatternSyntaxException\n-     *          if the regular expression's syntax is invalid\n-     *\n-     * @see java.util.regex.Pattern\n-     *\n-     * @since 21\n+     * @since   21\n@@ -3291,1 +3329,5 @@\n-    public String[] split(String regex, int limit, boolean withDelimiters) {\n+    public String[] splitWithDelimiters(String regex, int limit) {\n+        return split(regex, limit, true);\n+    }\n+\n+    private String[] split(String regex, int limit, boolean withDelimiters) {\n@@ -3316,1 +3358,4 @@\n-        return Pattern.compile(regex).split(this, limit, withDelimiters);\n+        Pattern pattern = Pattern.compile(regex);\n+        return withDelimiters\n+                ? pattern.splitWithDelimiters(this, limit)\n+                : pattern.split(this, limit);\n@@ -3365,4 +3410,24 @@\n-     * <p> This method works as if by invoking the three-argument {@link\n-     * #split(String, int, boolean) split} method with the given {@code regex},\n-     * a {@code limit} argument of {@code 0}, and {@code false} as the last argument.\n-     * Trailing empty strings are therefore not included in the resulting array.\n+     * <p> This method works as if by invoking the two-argument {@link\n+     * #split(String, int) split} method with the given expression and a limit\n+     * argument of zero.  Trailing empty strings are therefore not included in\n+     * the resulting array.\n+     *\n+     * <p> The string {@code \"boo:and:foo\"}, for example, yields the following\n+     * results with these expressions:\n+     *\n+     * <blockquote><table class=\"plain\">\n+     * <caption style=\"display:none\">Split examples showing regex and result<\/caption>\n+     * <thead>\n+     * <tr>\n+     *  <th scope=\"col\">Regex<\/th>\n+     *  <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" style=\"text-weight:normal\">:<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><th scope=\"row\" style=\"text-weight:normal\">o<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     * <\/tbody>\n+     * <\/table><\/blockquote>\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":149,"deletions":84,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -1219,4 +1219,66 @@\n-     * <p> This method works as if by invoking the three-argument\n-     * {@link #split(java.lang.CharSequence, int, boolean) split} method with\n-     * the given {@code input} sequence, the given {@code limit} and\n-     * {@code false} as the last argument.\n+     * <p> The array returned by this method contains each substring of the\n+     * input sequence that is terminated by another subsequence that matches\n+     * this pattern or is terminated by the end of the input sequence.  The\n+     * substrings in the array are in the order in which they occur in the\n+     * input. If this pattern does not match any subsequence of the input then\n+     * the resulting array has just one element, namely the input sequence in\n+     * string form.\n+     *\n+     * <p> When there is a positive-width match at the beginning of the input\n+     * sequence then an empty leading substring is included at the beginning\n+     * of the resulting array. A zero-width match at the beginning however\n+     * never produces such empty leading substring.\n+     *\n+     * <p> The {@code limit} parameter controls the number of times the\n+     * pattern is applied and therefore affects the length of the resulting\n+     * array.\n+     * <ul>\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is positive then the pattern will be applied\n+     *    at most <i>limit<\/i>&nbsp;-&nbsp;1 times, the array's length will be\n+     *    no greater than <i>limit<\/i>, and the array's last entry will contain\n+     *    all input beyond the last matched delimiter.<\/p><\/li>\n+     *\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is zero then the pattern will be applied as\n+     *    many times as possible, the array can have any length, and trailing\n+     *    empty strings will be discarded.<\/p><\/li>\n+     *\n+     *    <li><p>\n+     *    If the <i>limit<\/i> is negative then the pattern will be applied\n+     *    as many times as possible and the array can have any length.<\/p><\/li>\n+     * <\/ul>\n+     *\n+     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n+     * results with these parameters:\n+     *\n+     * <table class=\"plain\" style=\"margin-left:2em;\">\n+     * <caption style=\"display:none\">Split example showing regex, limit, and result<\/caption>\n+     * <thead>\n+     * <tr>\n+     *     <th scope=\"col\">Regex<\/th>\n+     *     <th scope=\"col\">Limit<\/th>\n+     *     <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n+     *     <td>{@code { \"boo\", \"and:foo\" }}<\/td><\/tr>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     * <\/tbody>\n+     * <\/table>\n@@ -1238,1 +1300,2 @@\n-     * Splits the given input sequence around matches of this pattern.\n+     * Splits the given input sequence around matches of this pattern and\n+     * returns both the strings and the matching delimiters.\n@@ -1240,2 +1303,1 @@\n-     * <p> When {@code withDelimiter} is {@code false},\n-     * the array returned by this method contains each substring of the\n+     * <p> The array returned by this method contains each substring of the\n@@ -1243,13 +1305,9 @@\n-     * this pattern or is terminated by the end of the input sequence.  The\n-     * substrings in the array are in the order in which they occur in the\n-     * input. If this pattern does not match any subsequence of the input then\n-     * the resulting array has just one element, namely the input sequence in\n-     * string form.\n-     *\n-     * <p> When {@code withDelimiter} is {@code true}, each of the substrings\n-     * returned in the array described above is immediately followed by the\n-     * subsequence that matches this pattern, <em>except<\/em> for the\n-     * last substring, which is not followed by anything.\n-     * Thus, the element at index {@code 0} is the first substring, followed\n-     * by the first subsequence matching this pattern, and so on,\n-     * up to the last substring.\n+     * this pattern or is terminated by the end of the input sequence.\n+     * Each substring is immediately followed by the subsequence (the delimiter)\n+     * that matches this pattern, <em>except<\/em> for the last substring, which\n+     * is not followed by anything.\n+     * The substrings in the array and the delimiters are in the order in which\n+     * they occur in the input.\n+     * If this pattern does not match any subsequence of the input then the\n+     * resulting array has just one element, namely the input sequence in string\n+     * form.\n@@ -1259,2 +1317,3 @@\n-     * of the resulting array. A zero-width match at the beginning however\n-     * never produces such empty leading substring.\n+     * of the resulting array.\n+     * A zero-width match at the beginning however never produces such empty\n+     * leading substring.\n@@ -1266,7 +1325,4 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is positive then the pattern will be applied\n-     *    at most <i>limit<\/i>&nbsp;-&nbsp;1 times, the array's length will be\n-     *    no greater than <i>limit<\/i> when {@code withDelimiter} is\n-     *    {@code false}, and no greater than 2 &centerdot; <i>limit<\/i> - 1\n-     *    otherwise. The array's last entry will contain all input beyond the\n-     *    last matched delimiter.<\/p><\/li>\n+     *    <li> If the <i>limit<\/i> is positive then the pattern will be applied\n+     *    at most <i>limit<\/i> - 1 times, the array's length will be\n+     *    no greater than 2 &centerdot; <i>limit<\/i> - 1, and the array's last\n+     *    entry will contain all input beyond the last matched delimiter.<\/li>\n@@ -1274,4 +1330,3 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is zero then the pattern will be applied as many\n-     *    times as possible, the array can have any length, and trailing empty\n-     *    strings, whether substrings or delimiters, will be discarded.<\/p><\/li>\n+     *    <li> If the <i>limit<\/i> is zero then the pattern will be applied as\n+     *    many times as possible, the array can have any length, and trailing\n+     *    empty strings, whether substrings or delimiters, will be discarded.<\/li>\n@@ -1279,3 +1334,2 @@\n-     *    <li><p>\n-     *    If the <i>limit<\/i> is negative then the pattern will be applied\n-     *    as many times as possible and the array can have any length.<\/p><\/li>\n+     *    <li> If the <i>limit<\/i> is negative then the pattern will be applied\n+     *    as many times as possible and the array can have any length.<\/li>\n@@ -1293,1 +1347,0 @@\n-     *     <th scope=\"col\">With Delimiters<\/th>\n@@ -1298,6 +1351,2 @@\n-     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">:+<\/th>\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and::foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:+<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n@@ -1305,6 +1354,2 @@\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n@@ -1312,6 +1357,2 @@\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><!-- :+ -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><!-- : -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n@@ -1319,7 +1360,2 @@\n-     * <tr><!-- :+ -->\n-     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">o<\/th>\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n@@ -1328,5 +1364,1 @@\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n@@ -1335,5 +1367,1 @@\n-     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n-     *     <td>{@code { \"b\", \"\", \":::and::f\" }}<\/td><\/tr>\n-     * <tr><!-- o -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n@@ -1350,3 +1378,0 @@\n-     * @param  withDelimiters\n-     *         Whether the result should include the matched delimiters\n-     *\n@@ -1356,1 +1381,1 @@\n-     * @since 21\n+     * @since   21\n@@ -1358,1 +1383,5 @@\n-    public String[] split(CharSequence input, int limit, boolean withDelimiters) {\n+    public String[] splitWithDelimiters(CharSequence input, int limit) {\n+        return split(input, limit, true);\n+    }\n+\n+    private String[] split(CharSequence input, int limit, boolean withDelimiters) {\n@@ -1410,5 +1439,24 @@\n-     * <p> This method works as if by invoking the three-argument\n-     * {@link #split(java.lang.CharSequence, int, boolean) split} method with\n-     * the given {@code input} sequence, a {@code limit} of {@code 0} and\n-     * {@code false} as the last argument.\n-     * Trailing empty strings are therefore not included in the resulting array.\n+     * <p> This method works as if by invoking the two-argument {@link\n+     * #split(java.lang.CharSequence, int) split} method with the given input\n+     * sequence and a limit argument of zero.  Trailing empty strings are\n+     * therefore not included in the resulting array. <\/p>\n+     *\n+     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n+     * results with these expressions:\n+     *\n+     * <table class=\"plain\" style=\"margin-left:2em\">\n+     * <caption style=\"display:none\">Split examples showing regex and result<\/caption>\n+     * <thead>\n+     * <tr>\n+     *  <th scope=\"col\">Regex<\/th>\n+     *  <th scope=\"col\">Result<\/th>\n+     * <\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" style=\"text-weight:normal\">:<\/th>\n+     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n+     * <tr><th scope=\"row\" style=\"text-weight:normal\">o<\/th>\n+     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     * <\/tbody>\n+     * <\/table>\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":130,"deletions":82,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        String[] computedWith = target.split(regex, limit, true);\n+        String[] computedWith = target.splitWithDelimiters(regex, limit);\n@@ -112,1 +112,1 @@\n-        String[] computedWithout = target.split(regex, limit, false);\n+        String[] computedWithout = target.split(regex, limit);\n","filename":"test\/jdk\/java\/util\/regex\/SplitWithDelimitersTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}