{"files":[{"patch":"@@ -3129,1 +3129,30 @@\n-     * <p> The array returned by this method contains each substring of this\n+     * <p> This method works as if by invoking the three-argument {@link\n+     * #split(String, int, boolean) split} method with the given {@code regex},\n+     * the given {@code limit}, and {@code false} as the last argument.\n+     *\n+     * @param  regex\n+     *         the delimiting regular expression\n+     *\n+     * @param  limit\n+     *         the result threshold, as described above\n+     *\n+     * @return  the array of strings computed by splitting this string\n+     *          around matches of the given regular expression\n+     *\n+     * @throws  PatternSyntaxException\n+     *          if the regular expression's syntax is invalid\n+     *\n+     * @see java.util.regex.Pattern\n+     *\n+     * @since 1.4\n+     *\/\n+    public String[] split(String regex, int limit) {\n+        return split(regex, limit, false);\n+    }\n+\n+    \/**\n+     * Splits this string around matches of the given\n+     * <a href=\"..\/util\/regex\/Pattern.html#sum\">regular expression<\/a>.\n+     *\n+     * <p> When {@code withDelimiter} is {@code false},\n+     * the array returned by this method contains each substring of this\n@@ -3135,1 +3164,9 @@\n-     *\n+\n+     * <p> When {@code withDelimiter} is {@code true}, each of the substrings\n+     * returned in the array described above is immediately followed by the\n+     * subsequence that matches the given expression, <em>except<\/em> for the\n+     * last substring, which is not followed by anything.\n+     * Thus, the element at index {@code 0} is the first substring, followed\n+     * by the first subsequence matching the given expression, and so on,\n+     * up to the last substring.\n+\n@@ -3148,2 +3185,4 @@\n-     *    no greater than <i>limit<\/i>, and the array's last entry will contain\n-     *    all input beyond the last matched delimiter.<\/p><\/li>\n+     *    no greater than <i>limit<\/i> when {@code withDelimiter} is\n+     *    {@code false}, and no greater than 2 &centerdot; <i>limit<\/i> - 1\n+     *    otherwise. The array's last entry will contain all input beyond the\n+     *    last matched delimiter.<\/p><\/li>\n@@ -3152,3 +3191,3 @@\n-     *    If the <i>limit<\/i> is zero then the pattern will be applied as\n-     *    many times as possible, the array can have any length, and trailing\n-     *    empty strings will be discarded.<\/p><\/li>\n+     *    If the <i>limit<\/i> is zero then the pattern will be applied as many\n+     *    times as possible, the array can have any length, and trailing empty\n+     *    strings, whether substrings or delimiters, will be discarded.<\/p><\/li>\n@@ -3161,2 +3200,2 @@\n-     * <p> The string {@code \"boo:and:foo\"}, for example, yields the\n-     * following results with these parameters:\n+     * <p> The input {@code \"boo:::and::foo\"}, for example, yields the following\n+     * results with these parameters:\n@@ -3164,1 +3203,1 @@\n-     * <blockquote><table class=\"plain\">\n+     * <table class=\"plain\" style=\"margin-left:2em;\">\n@@ -3170,0 +3209,1 @@\n+     *     <th scope=\"col\">With Delimiters<\/th>\n@@ -3174,5 +3214,10 @@\n-     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n-     *     <td>{@code { \"boo\", \"and:foo\" }}<\/td><\/tr>\n-     * <tr><!-- : -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">:+<\/th>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"boo\", \"and::foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and::foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n@@ -3180,2 +3225,6 @@\n-     * <tr><!-- : -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and\", \"::\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n@@ -3183,3 +3232,15 @@\n-     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and\", \"::\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n@@ -3187,2 +3248,2 @@\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }}<\/td><\/tr>\n@@ -3190,2 +3251,6 @@\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\" }}<\/td><\/tr>\n@@ -3193,1 +3258,1 @@\n-     * <\/table><\/blockquote>\n+     * <\/table>\n@@ -3196,1 +3261,1 @@\n-     * <i>str.<\/i>{@code split(}<i>regex<\/i>{@code ,}&nbsp;<i>n<\/i>{@code )}\n+     * {@code s.split(regex, n, b)}\n@@ -3202,2 +3267,2 @@\n-     * java.util.regex.Pattern#compile(String) compile}(<i>regex<\/i>).{@link\n-     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(<i>str<\/i>,&nbsp;<i>n<\/i>)\n+     * java.util.regex.Pattern#compile(String) compile}(regex).{@link\n+     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(s,&nbsp;n,&nbsp;b)\n@@ -3207,1 +3272,0 @@\n-     *\n@@ -3214,0 +3278,3 @@\n+     * @param  withDelimiters\n+     *         Whether the result should include the matched delimiters\n+     *\n@@ -3222,1 +3289,1 @@\n-     * @since 1.4\n+     * @since 21\n@@ -3224,1 +3291,1 @@\n-    public String[] split(String regex, int limit) {\n+    public String[] split(String regex, int limit, boolean withDelimiters) {\n@@ -3233,8 +3300,8 @@\n-             \".$|()[{^?*+\\\\\".indexOf(ch = regex.charAt(0)) == -1) ||\n-             (regex.length() == 2 &&\n-              regex.charAt(0) == '\\\\' &&\n-              (((ch = regex.charAt(1))-'0')|('9'-ch)) < 0 &&\n-              ((ch-'a')|('z'-ch)) < 0 &&\n-              ((ch-'A')|('Z'-ch)) < 0)) &&\n-            (ch < Character.MIN_HIGH_SURROGATE ||\n-             ch > Character.MAX_LOW_SURROGATE))\n+                \".$|()[{^?*+\\\\\".indexOf(ch = regex.charAt(0)) == -1) ||\n+                (regex.length() == 2 &&\n+                        regex.charAt(0) == '\\\\' &&\n+                        (((ch = regex.charAt(1))-'0')|('9'-ch)) < 0 &&\n+                        ((ch-'a')|('z'-ch)) < 0 &&\n+                        ((ch-'A')|('Z'-ch)) < 0)) &&\n+                (ch < Character.MIN_HIGH_SURROGATE ||\n+                        ch > Character.MAX_LOW_SURROGATE))\n@@ -3247,1 +3314,1 @@\n-            return split(ch, limit);\n+            return split(ch, limit, withDelimiters);\n@@ -3249,1 +3316,1 @@\n-        return Pattern.compile(regex).split(this, limit);\n+        return Pattern.compile(regex).split(this, limit, withDelimiters);\n@@ -3252,1 +3319,2 @@\n-    private String[] split(char ch, int limit) {\n+    private String[] split(char ch, int limit, boolean withDelimiters) {\n+        int matchCount = 0;\n@@ -3258,1 +3326,1 @@\n-            if (!limited || list.size() < limit - 1) {\n+            if (!limited || matchCount < limit - 1) {\n@@ -3260,0 +3328,3 @@\n+                if (withDelimiters) {\n+                    list.add(String.valueOf(ch));\n+                }\n@@ -3261,0 +3332,1 @@\n+                ++matchCount;\n@@ -3266,0 +3338,1 @@\n+                ++matchCount;\n@@ -3271,1 +3344,1 @@\n-            return new String[]{this};\n+            return new String[] {this};\n@@ -3274,1 +3347,1 @@\n-        if (!limited || list.size() < limit)\n+        if (!limited || matchCount < limit)\n@@ -3292,24 +3365,4 @@\n-     * <p> This method works as if by invoking the two-argument {@link\n-     * #split(String, int) split} method with the given expression and a limit\n-     * argument of zero.  Trailing empty strings are therefore not included in\n-     * the resulting array.\n-     *\n-     * <p> The string {@code \"boo:and:foo\"}, for example, yields the following\n-     * results with these expressions:\n-     *\n-     * <blockquote><table class=\"plain\">\n-     * <caption style=\"display:none\">Split examples showing regex and result<\/caption>\n-     * <thead>\n-     * <tr>\n-     *  <th scope=\"col\">Regex<\/th>\n-     *  <th scope=\"col\">Result<\/th>\n-     * <\/tr>\n-     * <\/thead>\n-     * <tbody>\n-     * <tr><th scope=\"row\" style=\"text-weight:normal\">:<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><th scope=\"row\" style=\"text-weight:normal\">o<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n-     * <\/tbody>\n-     * <\/table><\/blockquote>\n-     *\n+     * <p> This method works as if by invoking the three-argument {@link\n+     * #split(String, int, boolean) split} method with the given {@code regex},\n+     * a {@code limit} argument of {@code 0}, and {@code false} as the last argument.\n+     * Trailing empty strings are therefore not included in the resulting array.\n@@ -3331,1 +3384,1 @@\n-        return split(regex, 0);\n+        return split(regex, 0, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":123,"deletions":70,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -1219,1 +1219,23 @@\n-     * <p> The array returned by this method contains each substring of the\n+     * <p> This method works as if by invoking the three-argument\n+     * {@link #split(java.lang.CharSequence, int, boolean) split} method with\n+     * the given {@code input} sequence, the given {@code limit} and\n+     * {@code false} as the last argument.\n+     *\n+     * @param  input\n+     *         The character sequence to be split\n+     *\n+     * @param  limit\n+     *         The result threshold, as described above\n+     *\n+     * @return  The array of strings computed by splitting the input\n+     *          around matches of this pattern\n+     *\/\n+    public String[] split(CharSequence input, int limit) {\n+        return split(input, limit, false);\n+    }\n+\n+    \/**\n+     * Splits the given input sequence around matches of this pattern.\n+     *\n+     * <p> When {@code withDelimiter} is {@code false},\n+     * the array returned by this method contains each substring of the\n@@ -1227,0 +1249,8 @@\n+     * <p> When {@code withDelimiter} is {@code true}, each of the substrings\n+     * returned in the array described above is immediately followed by the\n+     * subsequence that matches this pattern, <em>except<\/em> for the\n+     * last substring, which is not followed by anything.\n+     * Thus, the element at index {@code 0} is the first substring, followed\n+     * by the first subsequence matching this pattern, and so on,\n+     * up to the last substring.\n+     *\n@@ -1239,2 +1269,4 @@\n-     *    no greater than <i>limit<\/i>, and the array's last entry will contain\n-     *    all input beyond the last matched delimiter.<\/p><\/li>\n+     *    no greater than <i>limit<\/i> when {@code withDelimiter} is\n+     *    {@code false}, and no greater than 2 &centerdot; <i>limit<\/i> - 1\n+     *    otherwise. The array's last entry will contain all input beyond the\n+     *    last matched delimiter.<\/p><\/li>\n@@ -1243,3 +1275,3 @@\n-     *    If the <i>limit<\/i> is zero then the pattern will be applied as\n-     *    many times as possible, the array can have any length, and trailing\n-     *    empty strings will be discarded.<\/p><\/li>\n+     *    If the <i>limit<\/i> is zero then the pattern will be applied as many\n+     *    times as possible, the array can have any length, and trailing empty\n+     *    strings, whether substrings or delimiters, will be discarded.<\/p><\/li>\n@@ -1252,1 +1284,1 @@\n-     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n+     * <p> The input {@code \"boo:::and::foo\"}, for example, yields the following\n@@ -1261,0 +1293,1 @@\n+     *     <th scope=\"col\">With Delimiters<\/th>\n@@ -1265,5 +1298,10 @@\n-     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n-     *     <td>{@code { \"boo\", \"and:foo\" }}<\/td><\/tr>\n-     * <tr><!-- : -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">:+<\/th>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"boo\", \"and::foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and::foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n@@ -1271,2 +1309,6 @@\n-     * <tr><!-- : -->\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and\", \"::\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n@@ -1274,3 +1316,15 @@\n-     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o<\/th>\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"boo\", \":::\", \"and\", \"::\", \"foo\" }}<\/td><\/tr>\n+     * <tr><!-- :+ -->\n+     * <tr><th scope=\"row\" rowspan=\"6\" style=\"font-weight:normal\">o<\/th>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-1<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\", \"\", \"\" }}<\/td><\/tr>\n@@ -1278,2 +1332,2 @@\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}<\/td><\/tr>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }}<\/td><\/tr>\n@@ -1281,2 +1335,6 @@\n-     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n+     *     <th scope=\"row\" rowspan=\"2\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0<\/th>\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">false<\/th>\n+     *     <td>{@code { \"b\", \"\", \":::and::f\" }}<\/td><\/tr>\n+     * <tr><!-- o -->\n+     *     <th scope=\"row\" style=\"font-weight:normal; text-align:left; padding-right:1em\">true<\/th>\n+     *     <td>{@code { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\" }}<\/td><\/tr>\n@@ -1292,0 +1350,3 @@\n+     * @param  withDelimiters\n+     *         Whether the result should include the matched delimiters\n+     *\n@@ -1294,0 +1355,2 @@\n+     *\n+     * @since 21\n@@ -1295,1 +1358,2 @@\n-    public String[] split(CharSequence input, int limit) {\n+    public String[] split(CharSequence input, int limit, boolean withDelimiters) {\n+        int matchCount = 0;\n@@ -1303,1 +1367,1 @@\n-            if (!matchLimited || matchList.size() < limit - 1) {\n+            if (!matchLimited || matchCount < limit - 1) {\n@@ -1312,3 +1376,6 @@\n-            } else if (matchList.size() == limit - 1) { \/\/ last one\n-                String match = input.subSequence(index,\n-                                                 input.length()).toString();\n+                if (withDelimiters) {\n+                    matchList.add(input.subSequence(m.start(), index).toString());\n+                }\n+                ++matchCount;\n+            } else if (matchCount == limit - 1) { \/\/ last one\n+                String match = input.subSequence(index, input.length()).toString();\n@@ -1317,0 +1384,1 @@\n+                ++matchCount;\n@@ -1325,1 +1393,1 @@\n-        if (!matchLimited || matchList.size() < limit)\n+        if (!matchLimited || matchCount < limit)\n@@ -1330,2 +1398,2 @@\n-        if (limit == 0)\n-            while (resultSize > 0 && matchList.get(resultSize-1).isEmpty())\n+        if (limit == 0) {\n+            while (resultSize > 0 && matchList.get(resultSize-1).isEmpty()) {\n@@ -1333,0 +1401,2 @@\n+            }\n+        }\n@@ -1340,24 +1410,5 @@\n-     * <p> This method works as if by invoking the two-argument {@link\n-     * #split(java.lang.CharSequence, int) split} method with the given input\n-     * sequence and a limit argument of zero.  Trailing empty strings are\n-     * therefore not included in the resulting array. <\/p>\n-     *\n-     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n-     * results with these expressions:\n-     *\n-     * <table class=\"plain\" style=\"margin-left:2em\">\n-     * <caption style=\"display:none\">Split examples showing regex and result<\/caption>\n-     * <thead>\n-     * <tr>\n-     *  <th scope=\"col\">Regex<\/th>\n-     *  <th scope=\"col\">Result<\/th>\n-     * <\/tr>\n-     * <\/thead>\n-     * <tbody>\n-     * <tr><th scope=\"row\" style=\"text-weight:normal\">:<\/th>\n-     *     <td>{@code { \"boo\", \"and\", \"foo\" }}<\/td><\/tr>\n-     * <tr><th scope=\"row\" style=\"text-weight:normal\">o<\/th>\n-     *     <td>{@code { \"b\", \"\", \":and:f\" }}<\/td><\/tr>\n-     * <\/tbody>\n-     * <\/table>\n-     *\n+     * <p> This method works as if by invoking the three-argument\n+     * {@link #split(java.lang.CharSequence, int, boolean) split} method with\n+     * the given {@code input} sequence, a {@code limit} of {@code 0} and\n+     * {@code false} as the last argument.\n+     * Trailing empty strings are therefore not included in the resulting array.\n@@ -1372,1 +1423,1 @@\n-        return split(input, 0);\n+        return split(input, 0, false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":105,"deletions":54,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8305486\n+ * @summary Tests to exercise the split functionality added in the issue.\n+ * @run junit SplitWithDelimitersTest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class SplitWithDelimitersTest {\n+\n+    private static String[] dropOddIndexed(String[] a, int limit) {\n+        String[] r = new String[(a.length + 1) \/ 2];\n+        for (int i = 0; i < a.length; i += 2) {\n+            r[i \/ 2] = a[i];\n+        }\n+        int len = r.length;\n+        if (limit == 0) {\n+            \/* Also drop trailing empty strings *\/\n+            for (; len > 0 && r[len - 1].isEmpty(); --len);  \/\/ empty body\n+        }\n+        return len < r.length ? Arrays.copyOf(r, len) : r;\n+    }\n+\n+    static Arguments[] testSplit() {\n+        return new Arguments[] {\n+                arguments(new String[] {\"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\"},\n+                        \"boo:::and::foo\", \"o\", 5),\n+                arguments(new String[] {\"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"o\"},\n+                        \"boo:::and::foo\", \"o\", 4),\n+                arguments(new String[] {\"b\", \"o\", \"\", \"o\", \":::and::foo\"},\n+                        \"boo:::and::foo\", \"o\", 3),\n+                arguments(new String[] {\"b\", \"o\", \"o:::and::foo\"},\n+                        \"boo:::and::foo\", \"o\", 2),\n+                arguments(new String[] {\"boo:::and::foo\"},\n+                        \"boo:::and::foo\", \"o\", 1),\n+                arguments(new String[] {\"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\"},\n+                        \"boo:::and::foo\", \"o\", 0),\n+                arguments(new String[] {\"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\"},\n+                        \"boo:::and::foo\", \"o\", -1),\n+\n+                arguments(new String[] {\"boo\", \":::\", \"and\", \"::\", \"foo\"},\n+                        \"boo:::and::foo\", \":+\", 3),\n+                arguments(new String[] {\"boo\", \":::\", \"and::foo\"},\n+                        \"boo:::and::foo\", \":+\", 2),\n+                arguments(new String[] {\"boo:::and::foo\"},\n+                        \"boo:::and::foo\", \":+\", 1),\n+                arguments(new String[] {\"boo\", \":::\", \"and\", \"::\", \"foo\"},\n+                        \"boo:::and::foo\", \":+\", 0),\n+                arguments(new String[] {\"boo\", \":::\", \"and\", \"::\", \"foo\"},\n+                        \"boo:::and::foo\", \":+\", -1),\n+\n+                arguments(new String[] {\"b\", \"\", \"b\", \"\", \"\"},\n+                        \"bb\", \"a*|b*\", 3),\n+                arguments(new String[] {\"b\", \"\", \"b\"},\n+                        \"bb\", \"a*|b*\", 2),\n+                arguments(new String[] {\"bb\"},\n+                        \"bb\", \"a*|b*\", 1),\n+                arguments(new String[] {\"b\", \"\", \"b\"},\n+                        \"bb\", \"a*|b*\", 0),\n+                arguments(new String[] {\"b\", \"\", \"b\", \"\", \"\"},\n+                        \"bb\", \"a*|b*\", -1),\n+\n+                arguments(new String[] {\"\", \"bb\", \"\", \"\", \"\"},\n+                        \"bb\", \"b*|a*\", 3),\n+                arguments(new String[] {\"\", \"bb\", \"\"},\n+                        \"bb\", \"b*|a*\", 2),\n+                arguments(new String[] {\"bb\"},\n+                        \"bb\", \"b*|a*\", 1),\n+                arguments(new String[] {\"\", \"bb\"},\n+                        \"bb\", \"b*|a*\", 0),\n+                arguments(new String[] {\"\", \"bb\", \"\", \"\", \"\"},\n+                        \"bb\", \"b*|a*\", -1),\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void testSplit(String[] expected, String target, String regex, int limit) {\n+        String[] computedWith = target.split(regex, limit, true);\n+        assertArrayEquals(expected, computedWith);\n+        String[] computedWithout = target.split(regex, limit, false);\n+        assertArrayEquals(dropOddIndexed(expected, limit), computedWithout);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/regex\/SplitWithDelimitersTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}