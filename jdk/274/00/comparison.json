{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/quickSort.hpp\"\n@@ -63,2 +62,5 @@\n-static int cmp_logtag(LogTagType a, LogTagType b) {\n-  return strcmp(LogTag::name(a), LogTag::name(b));\n+void LogTag::list_tags(outputStream* out) {\n+  for (size_t i = 1; i < LogTag::Count; i++) { \/\/ Not including __NO_TAG\n+    out->print(\"%s %s\", (i == 1 ? \"\" : \",\"), _name[static_cast<LogTagType>(i)]);\n+  }\n+  out->cr();\n@@ -67,4 +69,2 @@\n-static const size_t sorted_tagcount = LogTag::Count - 1; \/\/ Not counting _NO_TAG\n-static LogTagType sorted_tags[sorted_tagcount];\n-\n-class TagSorter {\n+#ifdef ASSERT\n+class LogTagTypeChecker {\n@@ -72,3 +72,11 @@\n-  TagSorter() {\n-    for (size_t i = 1; i < LogTag::Count; i++) {\n-      sorted_tags[i - 1] = static_cast<LogTagType>(i);\n+  LogTagTypeChecker() {\n+    assert(LogTagType::__NO_TAG == static_cast<LogTagType>(0), \"First tag should be __NO_TAG\");\n+\n+    \/\/ assert the LogTag type enum is sorted\n+    for (size_t i = 1; i < LogTag::Count - 1; i++) {\n+      const char* a = LogTag::name(static_cast<LogTagType>(i));\n+      const char* b = LogTag::name(static_cast<LogTagType>(i + 1));\n+\n+      assert(strcmp(a, b) < 0,\n+          \"LogTag type not in alphabetical order at index %zu: %s should be after %s\",\n+          i, a, b);\n@@ -76,1 +84,0 @@\n-    QuickSort::sort(sorted_tags, sorted_tagcount, cmp_logtag, true);\n@@ -80,8 +87,2 @@\n-static TagSorter tagsorter; \/\/ Sorts tags during static initialization\n-\n-void LogTag::list_tags(outputStream* out) {\n-  for (size_t i = 0; i < sorted_tagcount; i++) {\n-    out->print(\"%s %s\", (i == 0 ? \"\" : \",\"), _name[sorted_tags[i]]);\n-  }\n-  out->cr();\n-}\n+static LogTagTypeChecker logtagtypechecker; \/\/ Assert LogTag tags are set up as expected during static initialization\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/logging\/logTag.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-\/\/ List of available logging tags. New tags should be added here.\n+\/\/ List of available logging tags. New tags should be added here, in\n+\/\/ alphabetical order.\n@@ -37,1 +38,0 @@\n-  LOG_TAG(aot) \\\n@@ -39,0 +39,1 @@\n+  LOG_TAG(aot) \\\n@@ -56,1 +57,0 @@\n-  LOG_TAG(constraints) \\\n@@ -58,0 +58,1 @@\n+  LOG_TAG(constraints) \\\n@@ -104,1 +105,0 @@\n-  LOG_TAG(methodcomparator) \\\n@@ -107,0 +107,1 @@\n+  LOG_TAG(methodcomparator) \\\n@@ -108,0 +109,1 @@\n+  LOG_TAG(mirror) \\\n@@ -126,0 +128,1 @@\n+  LOG_TAG(parser) \\\n@@ -132,0 +135,1 @@\n+  LOG_TAG(preorder)  \/* Trace all classes loaded in order referenced (not loaded) *\/ \\\n@@ -135,1 +139,0 @@\n-  LOG_TAG(preorder) \/* Trace all classes loaded in order referenced (not loaded) *\/ \\\n@@ -137,1 +140,3 @@\n-  LOG_TAG(ref) \\\n+  LOG_TAG(ptrqueue) \\\n+  LOG_TAG(purge) \\\n+  LOG_TAG(record) \\\n@@ -139,0 +144,1 @@\n+  LOG_TAG(ref) \\\n@@ -143,4 +149,0 @@\n-  LOG_TAG(parser) \\\n-  LOG_TAG(ptrqueue) \\\n-  LOG_TAG(purge) \\\n-  LOG_TAG(record) \\\n@@ -154,0 +156,1 @@\n+  LOG_TAG(stackmap) \\\n@@ -163,2 +166,0 @@\n-  LOG_TAG(symboltable) \\\n-  LOG_TAG(stackmap) \\\n@@ -168,0 +169,1 @@\n+  LOG_TAG(symboltable) \\\n@@ -173,1 +175,0 @@\n-  LOG_TAG(tlab) \\\n@@ -176,0 +177,1 @@\n+  LOG_TAG(tlab) \\\n@@ -177,1 +179,0 @@\n-  LOG_TAG(update) \\\n@@ -180,1 +181,1 @@\n-  LOG_TAG(mirror) \\\n+  LOG_TAG(update) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}