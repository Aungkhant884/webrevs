{"files":[{"patch":"@@ -737,0 +737,1 @@\n+    void* buf = NULL;\n@@ -738,1 +739,1 @@\n-        void* buf = malloc(pfSize);\n+        buf = malloc(pfSize);\n@@ -744,1 +745,0 @@\n-            free(buf);\n@@ -748,0 +748,2 @@\n+    cmsCloseProfile(p); \/\/ No longer needed.\n+\n@@ -752,2 +754,2 @@\n-        cmsCloseProfile(p);\n-        p =  NULL;\n+        free(buf);\n+        return NULL;\n@@ -759,2 +761,3 @@\n-            cmsCloseProfile(p);\n-            p = NULL;\n+            free(buf);\n+            cmsCloseProfile(pfSanity);\n+            return NULL;\n@@ -762,0 +765,6 @@\n+        \/\/ The profile we used for sanity checking needs to be returned\n+        \/\/ since the one we updated is raw - not cooked.\n+        \/\/ Except we want to re-open it since the call to cmsReadTag()\n+        \/\/ means we may not get back the same bytes as we set.\n+        \/\/ Whilst this may change later anyway, we can at least prevent\n+        \/\/ it from happening immediately.\n@@ -763,1 +772,3 @@\n-        pfSanity = NULL;\n+        pfSanity = cmsOpenProfileFromMem(buf, pfSize);\n+        free(buf);\n+        return pfSanity;\n@@ -765,2 +776,0 @@\n-\n-    return p;\n","filename":"src\/java.desktop\/share\/native\/liblcms\/LCMS.c","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8282577\n+ * @summary Verify setting data for a tag doesn't invalidate the profile.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n+\n+public final class SetTagDataValidation {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ICC_Profile srgb = ICC_Profile.getInstance(ColorSpace.CS_sRGB);\n+        \/\/ Create a new profile, using the srgb data but private to us.\n+        ICC_Profile icc = ICC_Profile.getInstance(srgb.getData());\n+\n+        \/\/ Get data for some tag, which one isn't important so long as it exists\n+        int tag = ICC_Profile.icSigBlueColorantTag;\n+        byte[] tagData = icc.getData(tag);\n+        if (tagData == null) {\n+            throw new RuntimeException(\"No data for tag\");\n+        }\n+        \/\/ Set the data to be the SAME data which ought to be a harmless no-op\n+        icc.setData(tag, tagData);\n+\n+        \/\/ Perform a color conversion - from rgb to rgb but it doesn't matter\n+        \/\/ we just need to verify the op is applied and results are sane.\n+\n+        ColorSpace cs = new ICC_ColorSpace(icc);\n+        float[] in = new float[3];\n+        in[0] = 0.4f;\n+        in[1] = 0.5f;\n+        in[2] = 0.6f;\n+\n+        \/\/ the toRGB op previously threw an exception - or crashed\n+        float[] out = cs.toRGB(in);\n+        \/\/ If we get this far let's validate the results.\n+        if (out == null || out.length !=3) {\n+            throw new RuntimeException(\"out array invalid\");\n+        }\n+        for (int i=0;i<out.length;i++) {\n+           System.out.println(out[i]);\n+        }\n+        for (int i=0;i<out.length;i++) {\n+           if ((Math.abs(in[i]-out[i]) > 0.01)) {\n+               throw new RuntimeException(\"Inaccurate no-op conversion\");\n+           }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ColorSpace\/SetTagDataValidation.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import java.awt.color.CMMException;\n@@ -106,0 +107,1 @@\n+                System.err.println(\"Ignoring \" + ignored);\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/MTGetData.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}