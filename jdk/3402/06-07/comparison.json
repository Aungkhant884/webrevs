{"files":[{"patch":"@@ -263,3 +263,10 @@\n-     * Returns a string rendering of the {@code double} argument.\n-     *\n-     * <p>The characters of the result are all drawn from the ASCII set.\n+     * Returns a string representation of the {@code double}\n+     * argument. All characters mentioned below are ASCII characters.\n+     * <ul>\n+     * <li>If the argument is NaN, the result is the string\n+     *     \"{@code NaN}\".\n+     * <li>Otherwise, the result is a string that represents the sign and\n+     * magnitude (absolute value) of the argument. If the sign is negative,\n+     * the first character of the result is '{@code -}'\n+     * ({@code '\\u005Cu002D'}); if the sign is positive, no sign character\n+     * appears in the result. As for the magnitude <i>m<\/i>:\n@@ -267,9 +274,12 @@\n-     * <li> Any NaN, whether quiet or signaling, is rendered as\n-     * {@code \"NaN\"}, regardless of the sign bit.\n-     * <li> The infinities +&infin; and -&infin; are rendered as\n-     * {@code \"Infinity\"} and {@code \"-Infinity\"}, respectively.\n-     * <li> The positive and negative zeroes are rendered as\n-     * {@code \"0.0\"} and {@code \"-0.0\"}, respectively.\n-     * <li> A finite negative {@code v} is rendered as the sign\n-     * '{@code -}' followed by the rendering of the magnitude -{@code v}.\n-     * <li> A finite positive {@code v} is rendered in two stages:\n+     * <li>If <i>m<\/i> is infinity, it is represented by the characters\n+     * {@code \"Infinity\"}; thus, positive infinity produces the result\n+     * {@code \"Infinity\"} and negative infinity produces the result\n+     * {@code \"-Infinity\"}.\n+     *\n+     * <li>If <i>m<\/i> is zero, it is represented by the characters\n+     * {@code \"0.0\"}; thus, negative zero produces the result\n+     * {@code \"-0.0\"} and positive zero produces the result\n+     * {@code \"0.0\"}.\n+     *\n+     * <li> Otherwise <i>m<\/i> is positive and finite.\n+     * It is converted to a string in two stages:\n@@ -277,5 +287,8 @@\n-     * <li> <em>Selection of a decimal<\/em>: A well-defined\n-     * decimal <i>d<\/i><sub><code>v<\/code><\/sub> is selected\n-     * to represent {@code v}.\n-     * <li> <em>Formatting as a string<\/em>: The decimal\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as a string,\n+     * <li> <em>Selection of a decimal<\/em>:\n+     * A well-defined decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n+     * is selected to represent <i>m<\/i>.\n+     * This decimal is (almost always) the <em>shortest<\/em> one that\n+     * rounds to <i>m<\/i> according to the round to nearest\n+     * rounding policy of IEEE 754 floating-point arithmetic.\n+     * <li> <em>Formatting as a string<\/em>:\n+     * The decimal <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as a string,\n@@ -286,0 +299,1 @@\n+     * <\/ul>\n@@ -288,3 +302,3 @@\n-     * <i>d<\/i>&times;10<sup><i>i<\/i><\/sup>\n-     * for some (unique) integers <i>d<\/i> &gt; 0 and <i>i<\/i> such that\n-     * <i>d<\/i> is not a multiple of 10.\n+     * <i>s<\/i>&times;10<sup><i>i<\/i><\/sup>\n+     * for some (unique) integers <i>s<\/i> &gt; 0 and <i>i<\/i> such that\n+     * <i>s<\/i> is not a multiple of 10.\n@@ -295,1 +309,1 @@\n-     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>d<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n+     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>s<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n@@ -297,2 +311,2 @@\n-     * <p>The decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * for a finite positive {@code v} is defined as follows:\n+     * <p>The decimal <i>d<\/i><sub><i>m<\/i><\/sub> for a finite positive <i>m<\/i>\n+     * is defined as follows:\n@@ -300,2 +314,2 @@\n-     * <li>Let <i>R<\/i> be the set of all decimals that round to {@code v}\n-     * according to the usual round-to-closest rule of\n+     * <li>Let <i>R<\/i> be the set of all decimals that round to <i>m<\/i>\n+     * according to the usual <em>round to nearest<\/em> rounding policy of\n@@ -303,3 +317,3 @@\n-     * <li>Let <i>m<\/i> be the minimal length over all decimals in <i>R<\/i>.\n-     * <li>When <i>m<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length <i>m<\/i>.\n+     * <li>Let <i>p<\/i> be the minimal length over all decimals in <i>R<\/i>.\n+     * <li>When <i>p<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n+     * in <i>R<\/i> with length <i>p<\/i>.\n@@ -308,2 +322,2 @@\n-     * <li>Define <i>d<\/i><sub><code>v<\/code><\/sub> as\n-     * the decimal in <i>T<\/i> that is closest to {@code v}.\n+     * <li>Define <i>d<\/i><sub><i>m<\/i><\/sub> as the decimal in <i>T<\/i>\n+     * that is closest to <i>m<\/i>.\n@@ -311,1 +325,1 @@\n-     * select the one with the even significand (there is exactly one).\n+     * select the one with the even significand.\n@@ -314,1 +328,1 @@\n-     * <p>The (uniquely) selected decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n+     * <p>The (uniquely) selected decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n@@ -316,3 +330,2 @@\n-     *\n-     * <p>Let <i>d<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n-     * length of <i>d<\/i><sub><code>v<\/code><\/sub>, respectively.\n+     * Let <i>s<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n+     * length of <i>d<\/i><sub><i>m<\/i><\/sub>, respectively.\n@@ -320,4 +333,6 @@\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>\n-     * be the usual decimal expansion of the significand.\n-     * Note that <i>d<\/i><sub>1<\/sub> &ne; 0\n-     * and <i>d<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>\n+     * be the usual decimal expansion of <i>s<\/i>.\n+     * Note that <i>s<\/i><sub>1<\/sub> &ne; 0\n+     * and <i>s<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n+     * Below, the decimal point {@code '.'} is {@code '\\u005Cu002E'}\n+     * and the exponent indicator {@code 'E'} is {@code '\\u005Cu0045'}.\n@@ -326,1 +341,1 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n@@ -328,1 +343,1 @@\n-     * --><i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>,\n+     * --><i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>,\n@@ -330,1 +345,1 @@\n-     * the decimal point and <i>d<\/i><sub>1<\/sub>.\n+     * the decimal point and <i>s<\/i><sub>1<\/sub>.\n@@ -336,2 +351,2 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><!--\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><!--\n@@ -340,1 +355,1 @@\n-     * between <i>d<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n+     * between <i>s<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n@@ -344,6 +359,6 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub>.<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i><\/sub>.\n-     * There are exactly -<i>i<\/i> digits to the right of\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub><code>.<\/code><!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i><\/sub>,\n+     * where there are exactly -<i>i<\/i> digits to the right of\n@@ -356,1 +371,1 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub>.\n@@ -360,2 +375,2 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n@@ -365,3 +380,3 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.<\/code><i>d<\/i><sub>2<\/sub><!--\n-     * -->&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.<\/code><i>s<\/i><sub>2<\/sub><!--\n+     * -->&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n@@ -373,2 +388,5 @@\n-     * @param v the {@code double} to be rendered.\n-     * @return a string rendering of the argument.\n+     * <p>To create localized string representations of a floating-point\n+     * value, use subclasses of {@link java.text.NumberFormat}.\n+     *\n+     * @param   d   the {@code double} to be converted.\n+     * @return a string representation of the argument.\n@@ -376,2 +394,2 @@\n-    public static String toString(double v) {\n-        return DoubleToDecimal.toString(v);\n+    public static String toString(double d) {\n+        return DoubleToDecimal.toString(d);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":79,"deletions":61,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -173,3 +173,11 @@\n-     * Returns a string rendering of the {@code float} argument.\n-     *\n-     * <p>The characters of the result are all drawn from the ASCII set.\n+     * Returns a string representation of the {@code float}\n+     * argument. All characters mentioned below are ASCII characters.\n+     * <ul>\n+     * <li>If the argument is NaN, the result is the string\n+     * \"{@code NaN}\".\n+     * <li>Otherwise, the result is a string that represents the sign and\n+     *     magnitude (absolute value) of the argument. If the sign is\n+     *     negative, the first character of the result is\n+     *     '{@code -}' ({@code '\\u005Cu002D'}); if the sign is\n+     *     positive, no sign character appears in the result. As for\n+     *     the magnitude <i>m<\/i>:\n@@ -177,9 +185,11 @@\n-     * <li> Any NaN, whether quiet or signaling, is rendered as\n-     * {@code \"NaN\"}, regardless of the sign bit.\n-     * <li> The infinities +&infin; and -&infin; are rendered as\n-     * {@code \"Infinity\"} and {@code \"-Infinity\"}, respectively.\n-     * <li> The positive and negative zeroes are rendered as\n-     * {@code \"0.0\"} and {@code \"-0.0\"}, respectively.\n-     * <li> A finite negative {@code v} is rendered as the sign\n-     * '{@code -}' followed by the rendering of the magnitude -{@code v}.\n-     * <li> A finite positive {@code v} is rendered in two stages:\n+     * <li>If <i>m<\/i> is infinity, it is represented by the characters\n+     *     {@code \"Infinity\"}; thus, positive infinity produces\n+     *     the result {@code \"Infinity\"} and negative infinity\n+     *     produces the result {@code \"-Infinity\"}.\n+     * <li>If <i>m<\/i> is zero, it is represented by the characters\n+     *     {@code \"0.0\"}; thus, negative zero produces the result\n+     *     {@code \"-0.0\"} and positive zero produces the result\n+     *     {@code \"0.0\"}.\n+     *\n+     * <li> Otherwise <i>m<\/i> is positive and finite.\n+     * It is converted to a string in two stages:\n@@ -187,5 +197,8 @@\n-     * <li> <em>Selection of a decimal<\/em>: A well-defined\n-     * decimal <i>d<\/i><sub><code>v<\/code><\/sub> is selected\n-     * to represent {@code v}.\n-     * <li> <em>Formatting as a string<\/em>: The decimal\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as a string,\n+     * <li> <em>Selection of a decimal<\/em>:\n+     * A well-defined decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n+     * is selected to represent <i>m<\/i>.\n+     * This decimal is (almost always) the <em>shortest<\/em> one that\n+     * rounds to <i>m<\/i> according to the round to nearest\n+     * rounding policy of IEEE 754 floating-point arithmetic.\n+     * <li> <em>Formatting as a string<\/em>:\n+     * The decimal <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as a string,\n@@ -196,0 +209,1 @@\n+     * <\/ul>\n@@ -198,3 +212,3 @@\n-     * <i>d<\/i>&times;10<sup><i>i<\/i><\/sup>\n-     * for some (unique) integers <i>d<\/i> &gt; 0 and <i>i<\/i> such that\n-     * <i>d<\/i> is not a multiple of 10.\n+     * <i>s<\/i>&times;10<sup><i>i<\/i><\/sup>\n+     * for some (unique) integers <i>s<\/i> &gt; 0 and <i>i<\/i> such that\n+     * <i>s<\/i> is not a multiple of 10.\n@@ -205,1 +219,1 @@\n-     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>d<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n+     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>s<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n@@ -207,2 +221,2 @@\n-     * <p>The decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * for a finite positive {@code v} is defined as follows:\n+     * <p>The decimal <i>d<\/i><sub><i>m<\/i><\/sub> for a finite positive <i>m<\/i>\n+     * is defined as follows:\n@@ -210,2 +224,2 @@\n-     * <li>Let <i>R<\/i> be the set of all decimals that round to {@code v}\n-     * according to the usual round-to-closest rule of\n+     * <li>Let <i>R<\/i> be the set of all decimals that round to <i>m<\/i>\n+     * according to the usual <em>round to nearest<\/em> rounding policy of\n@@ -213,3 +227,3 @@\n-     * <li>Let <i>m<\/i> be the minimal length over all decimals in <i>R<\/i>.\n-     * <li>When <i>m<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length <i>m<\/i>.\n+     * <li>Let <i>p<\/i> be the minimal length over all decimals in <i>R<\/i>.\n+     * <li>When <i>p<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n+     * in <i>R<\/i> with length <i>p<\/i>.\n@@ -218,2 +232,2 @@\n-     * <li>Define <i>d<\/i><sub><code>v<\/code><\/sub> as\n-     * the decimal in <i>T<\/i> that is closest to {@code v}.\n+     * <li>Define <i>d<\/i><sub><i>m<\/i><\/sub> as the decimal in <i>T<\/i>\n+     * that is closest to <i>m<\/i>.\n@@ -221,1 +235,1 @@\n-     * select the one with the even significand (there is exactly one).\n+     * select the one with the even significand.\n@@ -224,1 +238,1 @@\n-     * <p>The (uniquely) selected decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n+     * <p>The (uniquely) selected decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n@@ -226,3 +240,2 @@\n-     *\n-     * <p>Let <i>d<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n-     * length of <i>d<\/i><sub><code>v<\/code><\/sub>, respectively.\n+     * Let <i>s<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n+     * length of <i>d<\/i><sub><i>m<\/i><\/sub>, respectively.\n@@ -230,4 +243,6 @@\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>\n-     * be the usual decimal expansion of the significand.\n-     * Note that <i>d<\/i><sub>1<\/sub> &ne; 0\n-     * and <i>d<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>\n+     * be the usual decimal expansion of <i>s<\/i>.\n+     * Note that <i>s<\/i><sub>1<\/sub> &ne; 0\n+     * and <i>s<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n+     * Below, the decimal point {@code '.'} is {@code '\\u005Cu002E'}\n+     * and the exponent indicator {@code 'E'} is {@code '\\u005Cu0045'}.\n@@ -236,1 +251,1 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n@@ -238,1 +253,1 @@\n-     * --><i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>,\n+     * --><i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>,\n@@ -240,1 +255,1 @@\n-     * the decimal point and <i>d<\/i><sub>1<\/sub>.\n+     * the decimal point and <i>s<\/i><sub>1<\/sub>.\n@@ -246,2 +261,2 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><!--\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><!--\n@@ -250,1 +265,1 @@\n-     * between <i>d<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n+     * between <i>s<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n@@ -254,6 +269,6 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub>.<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i><\/sub>.\n-     * There are exactly -<i>i<\/i> digits to the right of\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub><code>.<\/code><!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i><\/sub>,\n+     * where there are exactly -<i>i<\/i> digits to the right of\n@@ -266,1 +281,1 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub>.\n@@ -270,2 +285,2 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n@@ -275,3 +290,3 @@\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.<\/code><i>d<\/i><sub>2<\/sub><!--\n-     * -->&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.<\/code><i>s<\/i><sub>2<\/sub><!--\n+     * -->&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n@@ -283,2 +298,5 @@\n-     * @param  v the {@code float} to be rendered.\n-     * @return a string rendering of the argument.\n+     * <p>To create localized string representations of a floating-point\n+     * value, use subclasses of {@link java.text.NumberFormat}.\n+     *\n+     * @param   f   the {@code float} to be converted.\n+     * @return a string representation of the argument.\n@@ -286,2 +304,2 @@\n-    public static String toString(float v) {\n-        return FloatToDecimal.toString(v);\n+    public static String toString(float f) {\n+        return FloatToDecimal.toString(f);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":79,"deletions":61,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-     *     https:\/\/drive.google.com\/file\/d\/1IEeATSVnEE6TkrHlCYNY2GjaraBjOT4f\n+     *     https:\/\/drive.google.com\/file\/d\/1gp5xv4CAa78SVgCeWfGqqI4FfYYYuNFb\n@@ -57,1 +57,1 @@\n-    static final int P = 53;\n+    static final int P = PRECISION;\n@@ -132,1 +132,2 @@\n-     * Returns a string rendering of the {@code double} argument.\n+     * Returns a string representation of the {@code double}\n+     * argument. All characters mentioned below are ASCII characters.\n@@ -134,110 +135,3 @@\n-     * <p>The characters of the result are all drawn from the ASCII set.\n-     * <ul>\n-     * <li> Any NaN, whether quiet or signaling, is rendered as\n-     * {@code \"NaN\"}, regardless of the sign bit.\n-     * <li> The infinities +&infin; and -&infin; are rendered as\n-     * {@code \"Infinity\"} and {@code \"-Infinity\"}, respectively.\n-     * <li> The positive and negative zeroes are rendered as\n-     * {@code \"0.0\"} and {@code \"-0.0\"}, respectively.\n-     * <li> A finite negative {@code v} is rendered as the sign\n-     * '{@code -}' followed by the rendering of the magnitude -{@code v}.\n-     * <li> A finite positive {@code v} is rendered in two stages:\n-     * <ul>\n-     * <li> <em>Selection of a decimal<\/em>: A well-defined\n-     * decimal <i>d<\/i><sub><code>v<\/code><\/sub> is selected\n-     * to represent {@code v}.\n-     * <li> <em>Formatting as a string<\/em>: The decimal\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as a string,\n-     * either in plain or in computerized scientific notation,\n-     * depending on its value.\n-     * <\/ul>\n-     * <\/ul>\n-     *\n-     * <p>A <em>decimal<\/em> is a number of the form\n-     * <i>d<\/i>&times;10<sup><i>i<\/i><\/sup>\n-     * for some (unique) integers <i>d<\/i> &gt; 0 and <i>i<\/i> such that\n-     * <i>d<\/i> is not a multiple of 10.\n-     * These integers are the <em>significand<\/em> and\n-     * the <em>exponent<\/em>, respectively, of the decimal.\n-     * The <em>length<\/em> of the decimal is the (unique)\n-     * positive integer <i>n<\/i> meeting\n-     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>d<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n-     *\n-     * <p>The decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * for a finite positive {@code v} is defined as follows:\n-     * <ul>\n-     * <li>Let <i>R<\/i> be the set of all decimals that round to {@code v}\n-     * according to the usual round-to-closest rule of\n-     * IEEE 754 floating-point arithmetic.\n-     * <li>Let <i>m<\/i> be the minimal length over all decimals in <i>R<\/i>.\n-     * <li>When <i>m<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length <i>m<\/i>.\n-     * Otherwise, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length 1 or 2.\n-     * <li>Define <i>d<\/i><sub><code>v<\/code><\/sub> as\n-     * the decimal in <i>T<\/i> that is closest to {@code v}.\n-     * Or if there are two such decimals in <i>T<\/i>,\n-     * select the one with the even significand (there is exactly one).\n-     * <\/ul>\n-     *\n-     * <p>The (uniquely) selected decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * is then formatted.\n-     *\n-     * <p>Let <i>d<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n-     * length of <i>d<\/i><sub><code>v<\/code><\/sub>, respectively.\n-     * Further, let <i>e<\/i> = <i>n<\/i> + <i>i<\/i> - 1 and let\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>\n-     * be the usual decimal expansion of the significand.\n-     * Note that <i>d<\/i><sub>1<\/sub> &ne; 0\n-     * and <i>d<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n-     * <ul>\n-     * <li>Case -3 &le; <i>e<\/i> &lt; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <code>0.0<\/code>&hellip;<code>0<\/code><!--\n-     * --><i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>,\n-     * where there are exactly -(<i>n<\/i> + <i>i<\/i>) zeroes between\n-     * the decimal point and <i>d<\/i><sub>1<\/sub>.\n-     * For example, 123 &times; 10<sup>-4<\/sup> is formatted as\n-     * {@code 0.0123}.\n-     * <li>Case 0 &le; <i>e<\/i> &lt; 7:\n-     * <ul>\n-     * <li>Subcase <i>i<\/i> &ge; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><!--\n-     * --><code>0<\/code>&hellip;<code>0.0<\/code>,\n-     * where there are exactly <i>i<\/i> zeroes\n-     * between <i>d<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n-     * For example, 123 &times; 10<sup>2<\/sup> is formatted as\n-     * {@code 12300.0}.\n-     * <li>Subcase <i>i<\/i> &lt; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub>.<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i><\/sub>.\n-     * There are exactly -<i>i<\/i> digits to the right of\n-     * the decimal point.\n-     * For example, 123 &times; 10<sup>-1<\/sup> is formatted as\n-     * {@code 12.3}.\n-     * <\/ul>\n-     * <li>Case <i>e<\/i> &lt; -3 or <i>e<\/i> &ge; 7:\n-     * computerized scientific notation is used to format\n-     * <i>d<\/i><sub><code>v<\/code><\/sub>.\n-     * Here <i>e<\/i> is formatted as by {@link Integer#toString(int)}.\n-     * <ul>\n-     * <li>Subcase <i>n<\/i> = 1:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n-     * For example, 1 &times; 10<sup>23<\/sup> is formatted as\n-     * {@code 1.0E23}.\n-     * <li>Subcase <i>n<\/i> &gt; 1:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.<\/code><i>d<\/i><sub>2<\/sub><!--\n-     * -->&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n-     * For example, 123 &times; 10<sup>-21<\/sup> is formatted as\n-     * {@code 1.23E-19}.\n-     * <\/ul>\n-     * <\/ul>\n-     *\n-     * @param v the {@code double} to be rendered.\n-     * @return a string rendering of the argument.\n+     * @param   v   the {@code double} to be converted.\n+     * @return a string representation of the argument.\n+     * @see Double#toString(double) \n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/DoubleToDecimal.java","additions":7,"deletions":113,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-     *     https:\/\/drive.google.com\/file\/d\/1IEeATSVnEE6TkrHlCYNY2GjaraBjOT4f\n+     *     https:\/\/drive.google.com\/file\/d\/1gp5xv4CAa78SVgCeWfGqqI4FfYYYuNFb\n@@ -57,1 +57,1 @@\n-    static final int P = 24;\n+    static final int P = PRECISION;\n@@ -132,1 +132,2 @@\n-     * Returns a string rendering of the {@code float} argument.\n+     * Returns a string representation of the {@code float}\n+     * argument. All characters mentioned below are ASCII characters.\n@@ -134,110 +135,3 @@\n-     * <p>The characters of the result are all drawn from the ASCII set.\n-     * <ul>\n-     * <li> Any NaN, whether quiet or signaling, is rendered as\n-     * {@code \"NaN\"}, regardless of the sign bit.\n-     * <li> The infinities +&infin; and -&infin; are rendered as\n-     * {@code \"Infinity\"} and {@code \"-Infinity\"}, respectively.\n-     * <li> The positive and negative zeroes are rendered as\n-     * {@code \"0.0\"} and {@code \"-0.0\"}, respectively.\n-     * <li> A finite negative {@code v} is rendered as the sign\n-     * '{@code -}' followed by the rendering of the magnitude -{@code v}.\n-     * <li> A finite positive {@code v} is rendered in two stages:\n-     * <ul>\n-     * <li> <em>Selection of a decimal<\/em>: A well-defined\n-     * decimal <i>d<\/i><sub><code>v<\/code><\/sub> is selected\n-     * to represent {@code v}.\n-     * <li> <em>Formatting as a string<\/em>: The decimal\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as a string,\n-     * either in plain or in computerized scientific notation,\n-     * depending on its value.\n-     * <\/ul>\n-     * <\/ul>\n-     *\n-     * <p>A <em>decimal<\/em> is a number of the form\n-     * <i>d<\/i>&times;10<sup><i>i<\/i><\/sup>\n-     * for some (unique) integers <i>d<\/i> &gt; 0 and <i>i<\/i> such that\n-     * <i>d<\/i> is not a multiple of 10.\n-     * These integers are the <em>significand<\/em> and\n-     * the <em>exponent<\/em>, respectively, of the decimal.\n-     * The <em>length<\/em> of the decimal is the (unique)\n-     * positive integer <i>n<\/i> meeting\n-     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>d<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n-     *\n-     * <p>The decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * for a finite positive {@code v} is defined as follows:\n-     * <ul>\n-     * <li>Let <i>R<\/i> be the set of all decimals that round to {@code v}\n-     * according to the usual round-to-closest rule of\n-     * IEEE 754 floating-point arithmetic.\n-     * <li>Let <i>m<\/i> be the minimal length over all decimals in <i>R<\/i>.\n-     * <li>When <i>m<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length <i>m<\/i>.\n-     * Otherwise, let <i>T<\/i> be the set of all decimals\n-     * in <i>R<\/i> with length 1 or 2.\n-     * <li>Define <i>d<\/i><sub><code>v<\/code><\/sub> as\n-     * the decimal in <i>T<\/i> that is closest to {@code v}.\n-     * Or if there are two such decimals in <i>T<\/i>,\n-     * select the one with the even significand (there is exactly one).\n-     * <\/ul>\n-     *\n-     * <p>The (uniquely) selected decimal <i>d<\/i><sub><code>v<\/code><\/sub>\n-     * is then formatted.\n-     *\n-     * <p>Let <i>d<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n-     * length of <i>d<\/i><sub><code>v<\/code><\/sub>, respectively.\n-     * Further, let <i>e<\/i> = <i>n<\/i> + <i>i<\/i> - 1 and let\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>\n-     * be the usual decimal expansion of the significand.\n-     * Note that <i>d<\/i><sub>1<\/sub> &ne; 0\n-     * and <i>d<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n-     * <ul>\n-     * <li>Case -3 &le; <i>e<\/i> &lt; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <code>0.0<\/code>&hellip;<code>0<\/code><!--\n-     * --><i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub>,\n-     * where there are exactly -(<i>n<\/i> + <i>i<\/i>) zeroes between\n-     * the decimal point and <i>d<\/i><sub>1<\/sub>.\n-     * For example, 123 &times; 10<sup>-4<\/sup> is formatted as\n-     * {@code 0.0123}.\n-     * <li>Case 0 &le; <i>e<\/i> &lt; 7:\n-     * <ul>\n-     * <li>Subcase <i>i<\/i> &ge; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><!--\n-     * --><code>0<\/code>&hellip;<code>0.0<\/code>,\n-     * where there are exactly <i>i<\/i> zeroes\n-     * between <i>d<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n-     * For example, 123 &times; 10<sup>2<\/sup> is formatted as\n-     * {@code 12300.0}.\n-     * <li>Subcase <i>i<\/i> &lt; 0:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub>.<!--\n-     * --><i>d<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n-     * --><i>d<\/i><sub><i>n<\/i><\/sub>.\n-     * There are exactly -<i>i<\/i> digits to the right of\n-     * the decimal point.\n-     * For example, 123 &times; 10<sup>-1<\/sup> is formatted as\n-     * {@code 12.3}.\n-     * <\/ul>\n-     * <li>Case <i>e<\/i> &lt; -3 or <i>e<\/i> &ge; 7:\n-     * computerized scientific notation is used to format\n-     * <i>d<\/i><sub><code>v<\/code><\/sub>.\n-     * Here <i>e<\/i> is formatted as by {@link Integer#toString(int)}.\n-     * <ul>\n-     * <li>Subcase <i>n<\/i> = 1:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n-     * For example, 1 &times; 10<sup>23<\/sup> is formatted as\n-     * {@code 1.0E23}.\n-     * <li>Subcase <i>n<\/i> &gt; 1:\n-     * <i>d<\/i><sub><code>v<\/code><\/sub> is formatted as\n-     * <i>d<\/i><sub>1<\/sub><code>.<\/code><i>d<\/i><sub>2<\/sub><!--\n-     * -->&hellip;<i>d<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n-     * For example, 123 &times; 10<sup>-21<\/sup> is formatted as\n-     * {@code 1.23E-19}.\n-     * <\/ul>\n-     * <\/ul>\n-     *\n-     * @param  v the {@code float} to be rendered.\n-     * @return a string rendering of the argument.\n+     * @param   v   the {@code float} to be converted.\n+     * @return a string representation of the argument.\n+     * @see Float#toString(float)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FloatToDecimal.java","additions":7,"deletions":113,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-     *     https:\/\/drive.google.com\/file\/d\/1IEeATSVnEE6TkrHlCYNY2GjaraBjOT4f\n+     *     https:\/\/drive.google.com\/file\/d\/1gp5xv4CAa78SVgCeWfGqqI4FfYYYuNFb\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/MathUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}