{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import sun.swing.SwingUtilities2;\n@@ -28,2 +29,2 @@\n-import java.util.*;\n-import java.net.URL;\n+import java.io.IOException;\n+import java.io.StringReader;\n@@ -31,6 +32,32 @@\n-import java.io.*;\n-import javax.swing.*;\n-import javax.swing.event.*;\n-import javax.swing.text.*;\n-import javax.swing.undo.*;\n-import sun.swing.SwingUtilities2;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Stack;\n+import java.util.Vector;\n+\n+import javax.swing.ButtonGroup;\n+import javax.swing.DefaultButtonModel;\n+import javax.swing.DefaultComboBoxModel;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JToggleButton;\n+import javax.swing.ListSelectionModel;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.EventListenerList;\n+import javax.swing.event.UndoableEditEvent;\n+import javax.swing.text.AbstractDocument;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.DefaultEditorKit;\n+import javax.swing.text.DefaultStyledDocument;\n+import javax.swing.text.Document;\n+import javax.swing.text.Element;\n+import javax.swing.text.ElementIterator;\n+import javax.swing.text.GapContent;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.PlainDocument;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.undo.UndoableEdit;\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLDocument.java","additions":35,"deletions":8,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1123,0 +1123,1 @@\n+            System.out.println(\"HTMLEditorKit\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLEditorKit.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+import javax.swing.text.ChangedCharSetException;\n@@ -29,1 +33,0 @@\n-import javax.swing.text.html.HTMLEditorKit;\n@@ -31,5 +34,1 @@\n-import javax.swing.text.ChangedCharSetException;\n-\n-import java.util.*;\n-import java.io.*;\n-import java.net.*;\n+import javax.swing.text.html.HTMLEditorKit;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/DocumentParser.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,7 @@\n+import java.io.CharArrayReader;\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.io.Reader;\n+import java.util.Vector;\n+\n+import javax.swing.text.ChangedCharSetException;\n@@ -30,7 +37,0 @@\n-import javax.swing.text.ChangedCharSetException;\n-import java.io.*;\n-import java.util.Hashtable;\n-import java.util.Properties;\n-import java.util.Vector;\n-import java.util.Enumeration;\n-import java.net.URL;\n@@ -71,0 +71,3 @@\n+ * <p>\n+ * Unsupported tags, such as script tags, will be handled by HiddenTagView. The\n+ * tags and its contents will be displayed as editable JTextFields and JTextAreas.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/Parser.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8012675\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Tests if HTML script tags are unsupported\n+ * @run main\/manual HtmlTagParserTest\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+public class HtmlTagParserTest {\n+    private static String instructionsText = \"Pass if you can see the \" +\n+            \"script tag and its contents as text in JTextFields and \" +\n+            \"JTextAreas in the frame. Fail if this is not shown.\";\n+\n+    private static final String htmlText = \"<!DOCTYPE html> <html> <head> \" +\n+            \"<title>Title<\/title> <\/head> <body><script>function foo() \" +\n+            \"{alert('Alert generated by script tag function!');}<\/script>\" +\n+            \"This is a test. <input onclick=\\\"foo()\\\" type=\\\"button\\\" \" +\n+            \"value=\\\"Click Me\\\" id=\\\"myButton1\\\"><\/input> <\/body> <\/html>\";\n+\n+    private static JFrame frame;\n+    private static JEditorPane jep;\n+    private static Path testDir;\n+\n+    public static void createAndShowGUI() throws InterruptedException,\n+            InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            jep = new JEditorPane();\n+            JScrollPane scroll = new JScrollPane(jep);\n+            Dimension scrollSize = new Dimension(500, 300);\n+            scroll.setPreferredSize(scrollSize);\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n+\n+            frame = new JFrame();\n+            frame.getContentPane().add(scroll);\n+            frame.setVisible(true);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+\n+            PassFailJFrame.addTestFrame(frame);\n+            PassFailJFrame.positionTestFrame(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n+    }\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException, IOException {\n+\n+        testDir = Path.of(System.getProperty(\"test.src\", \".\"));\n+        File f = new File(testDir + \"\/HtmlTagParserFile.html\");\n+\n+        BufferedWriter bw = new BufferedWriter(new FileWriter(f));\n+        bw.write(htmlText);\n+        bw.close();\n+\n+        URL page = HtmlTagParserTest.class.getResource(\"HtmlTagParserFile.html\");\n+\n+        PassFailJFrame pfjFrame = new PassFailJFrame(\"JScrollPane \"\n+                + \"Test Instructions\", instructionsText +\n+                \"\\n\\nHTML Used:\\n\" + htmlText, 5);\n+\n+        createAndShowGUI();\n+\n+        jep.setPage(page);\n+\n+        pfjFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HtmlTagParserTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+import java.awt.Dimension;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 8012675\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Tests if HTML script tags are unsupported\n+ * @run main\/manual HtmlTagParserTest\n+ *\/\n+\n+public class HtmlTagParserTest {\n+    private static String instructionsText = \"Pass if you can see the \" +\n+            \"script tag and its contents as text in JTextFields and \" +\n+            \"JTextAreas in the frame. Fail if this is not shown.\";\n+\n+    private static final String htmlText = \"<!DOCTYPE html> <html> <head> \" +\n+            \"<title>Title<\/title> <\/head> <body><script>function foo() \" +\n+            \"{alert('Alert generated by script tag function!');}<\/script>\" +\n+            \"This is a test. <input onclick=\\\"foo()\\\" type=\\\"button\\\" \" +\n+            \"value=\\\"Click Me\\\" id=\\\"myButton1\\\"><\/input> <\/body> <\/html>\";\n+\n+    private static JFrame frame;\n+    private static JEditorPane jep;\n+    private static Path testDir;\n+\n+    public static void createAndShowGUI() throws InterruptedException,\n+            InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            jep = new JEditorPane();\n+            JScrollPane scroll = new JScrollPane(jep);\n+            Dimension scrollSize = new Dimension(500, 300);\n+            scroll.setPreferredSize(scrollSize);\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n+\n+            frame = new JFrame();\n+            frame.getContentPane().add(scroll);\n+            frame.setVisible(true);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+\n+            PassFailJFrame.addTestFrame(frame);\n+            PassFailJFrame.positionTestFrame(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n+    }\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException, IOException {\n+\n+        testDir = Path.of(System.getProperty(\"test.src\", \".\"));\n+        File f = new File(testDir + \"\/tagParserTest.html\");\n+\n+        BufferedWriter bw = new BufferedWriter(new FileWriter(f));\n+        bw.write(htmlText);\n+        bw.close();\n+\n+        URL page = HtmlTagParserTest.class.getResource(\"tagParserTest.html\");\n+\n+        PassFailJFrame pfjFrame = new PassFailJFrame(\"JScrollPane \"\n+                + \"Test Instructions\", instructionsText +\n+                \"\\n\\nHTML Used:\\n\" + htmlText, 5);\n+\n+        createAndShowGUI();\n+\n+        jep.setPage(page);\n+\n+        pfjFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/parser\/HtmlTagParserTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}