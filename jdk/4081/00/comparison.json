{"files":[{"patch":"@@ -125,1 +125,1 @@\n-  static void* allocate_node(size_t size, Value const& value) {\n+  static void* allocate_node(void* context, size_t size, Value const& value) {\n@@ -129,1 +129,1 @@\n-  static void free_node(void* memory, Value const& value) {\n+  static void free_node(void* context, void* memory, Value const& value) {\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  static void* allocate_node(size_t size, Value const& value) {\n+  static void* allocate_node(void* context, size_t size, Value const& value) {\n@@ -139,1 +139,1 @@\n-  static void free_node(void* memory, Value const& value) {\n+  static void free_node(void* context, void* memory, Value const& value) {\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static void* allocate_node(size_t size, Value const& value) {\n+  static void* allocate_node(void* context, size_t size, Value const& value) {\n@@ -86,1 +86,1 @@\n-  static void free_node(void* memory, Value const& value) {\n+  static void free_node(void* context, void* memory, Value const& value) {\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    static void* allocate_node(size_t size, Value const& value) {\n+    static void* allocate_node(void* context, size_t size, Value const& value) {\n@@ -76,1 +76,1 @@\n-    static void free_node(void* memory, Value const& value) {\n+    static void free_node(void* context, void* memory, Value const& value) {\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-    static Node* create_node(const VALUE& value, Node* next = NULL) {\n-      return new (CONFIG::allocate_node(sizeof(Node), value)) Node(value, next);\n+    static Node* create_node(void* context, const VALUE& value, Node* next = NULL) {\n+      return new (CONFIG::allocate_node(context, sizeof(Node), value)) Node(value, next);\n@@ -70,2 +70,2 @@\n-    static void destroy_node(Node* node) {\n-      CONFIG::free_node((void*)node, node->_value);\n+    static void destroy_node(void* context, Node* node) {\n+      CONFIG::free_node(context, (void*)node, node->_value);\n@@ -203,0 +203,2 @@\n+  void* _context;\n+\n@@ -375,1 +377,5 @@\n-                      size_t grow_hint = DEFAULT_GROW_HINT);\n+                      size_t grow_hint = DEFAULT_GROW_HINT,\n+                      void* context = NULL);\n+\n+  explicit ConcurrentHashTable(void* context, size_t log2size = DEFAULT_START_SIZE_LOG2) :\n+    ConcurrentHashTable(log2size, DEFAULT_MAX_SIZE_LOG2, DEFAULT_GROW_HINT, context) {}\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-      Node::destroy_node(free_node);\n+      Node::destroy_node(_context, free_node);\n@@ -472,1 +472,1 @@\n-  Node::destroy_node(rem_n);\n+  Node::destroy_node(_context, rem_n);\n@@ -521,1 +521,1 @@\n-      Node::destroy_node(ndel[node_it]);\n+      Node::destroy_node(_context, ndel[node_it]);\n@@ -560,1 +560,1 @@\n-      Node::destroy_node(ndel[node_it]);\n+      Node::destroy_node(_context, ndel[node_it]);\n@@ -689,1 +689,1 @@\n-      Node::destroy_node(delete_me);\n+      Node::destroy_node(_context, delete_me);\n@@ -894,1 +894,1 @@\n-  Node* new_node = Node::create_node(value, NULL);\n+  Node* new_node = Node::create_node(_context, value, NULL);\n@@ -929,1 +929,1 @@\n-    Node::destroy_node(new_node);\n+    Node::destroy_node(_context, new_node);\n@@ -1010,5 +1010,5 @@\n-  ConcurrentHashTable(size_t log2size, size_t log2size_limit, size_t grow_hint)\n-    : _new_table(NULL), _log2_size_limit(log2size_limit),\n-       _log2_start_size(log2size), _grow_hint(grow_hint),\n-       _size_limit_reached(false), _resize_lock_owner(NULL),\n-       _invisible_epoch(0)\n+  ConcurrentHashTable(size_t log2size, size_t log2size_limit, size_t grow_hint, void* context)\n+    : _context(context), _new_table(NULL), _log2_size_limit(log2size_limit),\n+      _log2_start_size(log2size), _grow_hint(grow_hint),\n+      _size_limit_reached(false), _resize_lock_owner(NULL),\n+      _invisible_epoch(0)\n@@ -1094,1 +1094,1 @@\n-  Node* new_node = Node::create_node(value, bucket->first());\n+  Node* new_node = Node::create_node(_context, value, bucket->first());\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void* allocate_node(size_t size, const Value& value) {\n+  static void* allocate_node(void* context, size_t size, const Value& value) {\n@@ -47,1 +47,1 @@\n-  static void free_node(void* memory, const Value& value) {\n+  static void free_node(void* context, void* memory, const Value& value) {\n@@ -52,2 +52,1 @@\n-struct Config : public AllStatic {\n-  typedef uintptr_t Value;\n+struct Allocator {\n@@ -56,1 +55,1 @@\n-    Value _value;\n+    uintptr_t _value;\n@@ -59,3 +58,3 @@\n-  static const uint nelements = 5;\n-  static TableElement* elements;\n-  static uint cur_index;\n+  const uint nelements = 5;\n+  TableElement* elements;\n+  uint cur_index;\n@@ -63,4 +62,1 @@\n-  static uintx get_hash(const Value& value, bool* dead_hash) {\n-    return (uintx)value;\n-  }\n-  static void initialize() {\n+  Allocator() : cur_index(0) {\n@@ -69,1 +65,2 @@\n-  static void* allocate_node(size_t size, const Value& value) {\n+\n+  void* allocate_node() {\n@@ -73,3 +70,1 @@\n-  static void free_node(void* memory, const Value& value) {\n-    return;\n-  }\n+  void free_node(void* value) { \/* Arena allocator. Ignore freed nodes*\/ }\n@@ -77,1 +72,1 @@\n-  static void reset() {\n+  void reset() {\n@@ -81,1 +76,1 @@\n-  static void bulk_free() {\n+  ~Allocator() {\n@@ -86,2 +81,16 @@\n-Config::TableElement* Config::elements = nullptr;\n-uint Config::cur_index = 0;\n+struct Config : public AllStatic {\n+  typedef uintptr_t Value;\n+\n+  static uintx get_hash(const Value& value, bool* dead_hash) {\n+    return (uintx)value;\n+  }\n+  static void* allocate_node(void* context, size_t size, const Value& value) {\n+    Allocator* mm = (Allocator*)context;\n+    return mm->allocate_node();\n+  }\n+\n+  static void free_node(void* context, void* memory, const Value& value) {\n+    Allocator* mm = (Allocator*)context;\n+    mm->free_node(memory);\n+  }\n+};\n@@ -283,2 +292,3 @@\n-  Config::initialize();\n-  CustomTestTable* cht = new CustomTestTable();\n+  Allocator mem_allocator;\n+  const uint initial_log_table_size = 4;\n+  CustomTestTable* cht = new CustomTestTable(&mem_allocator);\n@@ -291,1 +301,1 @@\n-  Config::reset();\n+  mem_allocator.reset();\n@@ -299,0 +309,1 @@\n+  cht->unsafe_reset();\n@@ -300,1 +311,0 @@\n-  Config::bulk_free();\n@@ -509,1 +519,1 @@\n-  static void* allocate_node(size_t size, const Value& value) {\n+  static void* allocate_node(void* context, size_t size, const Value& value) {\n@@ -512,1 +522,1 @@\n-  static void free_node(void* memory, const Value& value) {\n+  static void free_node(void* context, void* memory, const Value& value) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":36,"deletions":26,"binary":false,"changes":62,"status":"modified"}]}