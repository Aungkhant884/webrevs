{"files":[{"patch":"@@ -141,11 +141,8 @@\n-\/\/ gcc warns about applying offsetof() to non-POD object or calculating\n-\/\/ offset directly when base address is NULL. The -Wno-invalid-offsetof\n-\/\/ option could be used to suppress this warning, but we instead just\n-\/\/ avoid the use of offsetof().\n-\/\/\n-\/\/ FIXME: This macro is complex and rather arcane. Perhaps we should\n-\/\/ use offsetof() instead, with the invalid-offsetof warning\n-\/\/ temporarily disabled.\n-#define offset_of(klass,field)                          \\\n-[]() {                                                  \\\n-  char space[sizeof (klass)] ATTRIBUTE_ALIGNED(16);     \\\n+\/\/ GCC\/Clang warns about applying offsetof() to types that are not standard layout or calculating\n+\/\/ offset directly when base address is NULL. Technically using offsetof() on non-standard layout is\n+\/\/ undefined behavior before C++17 and \"conditionally-supported\" after C++17. Rather than take our\n+\/\/ chances we use our own implementation which both GCC\/Clang ultimately produce a constant for but\n+\/\/ is not a constant expression.\n+#define offset_of(klass, field)                         \\\n+([]() __attribute__((always_inline)) {                  \\\n+  alignas(klass) char space[sizeof(klass)];             \\\n@@ -155,2 +152,1 @@\n-}()\n-\n+}())\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"}]}