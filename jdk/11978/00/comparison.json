{"files":[{"patch":"@@ -89,1 +89,1 @@\n-    shift-negative-value unknown-pragmas\n+    shift-negative-value unknown-pragmas invalid-offsetof\n@@ -92,1 +92,2 @@\n-    missing-braces delete-non-abstract-non-virtual-dtor unknown-pragmas\n+    missing-braces delete-non-abstract-non-virtual-dtor unknown-pragmas \\\n+    invalid-offsetof\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -141,16 +141,1 @@\n-\/\/ gcc warns about applying offsetof() to non-POD object or calculating\n-\/\/ offset directly when base address is NULL. The -Wno-invalid-offsetof\n-\/\/ option could be used to suppress this warning, but we instead just\n-\/\/ avoid the use of offsetof().\n-\/\/\n-\/\/ FIXME: This macro is complex and rather arcane. Perhaps we should\n-\/\/ use offsetof() instead, with the invalid-offsetof warning\n-\/\/ temporarily disabled.\n-#define offset_of(klass,field)                          \\\n-[]() {                                                  \\\n-  char space[sizeof (klass)] ATTRIBUTE_ALIGNED(16);     \\\n-  klass* dummyObj = (klass*)space;                      \\\n-  char* c = (char*)(void*)&dummyObj->field;             \\\n-  return (size_t)(c - space);                           \\\n-}()\n-\n+#define offset_of(klass,field) offsetof(klass, field)\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"}]}