{"files":[{"patch":"@@ -26,0 +26,4 @@\n+#ifndef UNICODE\n+#define UNICODE 1\n+#endif\n+\n@@ -41,0 +45,3 @@\n+\/* The winsock provider ID of the Microsoft AF_UNIX implementation *\/\n+static GUID MS_PROVIDER_ID  = {0xA00943D9,0x9C2E,0x4633,{0x9B,0x59,0,0x57,0xA3,0x16,0x09,0x94}};\n+\n@@ -87,0 +94,12 @@\n+static int cmpGuid(GUID *g1, GUID *g2) {\n+    if (g1->Data1 != g2->Data1)\n+        return 0;\n+    if (g1->Data2 != g2->Data2)\n+        return 0;\n+    if (g1->Data3 != g2->Data3)\n+        return 0;\n+    return !memcmp(g1->Data4, g2->Data4, 8);\n+}\n+\n+static WSAPROTOCOL_INFO provider;\n+\n@@ -90,3 +109,44 @@\n-    SOCKET s = socket(PF_UNIX, SOCK_STREAM, 0);\n-    if (s == INVALID_SOCKET) {\n-        return JNI_FALSE;\n+    WSAPROTOCOL_INFO info[5]; \/\/ if not large enough, a buffer is malloc'd\n+    LPWSAPROTOCOL_INFO infoPtr = &info[0];\n+    DWORD len = sizeof(info);\n+    jboolean found;\n+\n+    \/*\n+     * First locate the Microsoft AF_UNIX Winsock provider\n+     *\/\n+    int result = WSAEnumProtocols(0, infoPtr, &len);\n+    if (result == SOCKET_ERROR) {\n+        if (GetLastError() == WSAENOBUFS) {\n+            infoPtr = (LPWSAPROTOCOL_INFO)malloc(len);\n+            result = WSAEnumProtocols(0, infoPtr, &len);\n+            if (result == SOCKET_ERROR) {\n+                free(infoPtr);\n+                return JNI_FALSE;\n+            }\n+        } else {\n+            return JNI_FALSE;\n+        }\n+    }\n+    found = JNI_FALSE;\n+    for (int i=0; i<result;  i++) {\n+        if (infoPtr[i].iAddressFamily != AF_UNIX)\n+            continue;\n+        GUID g = infoPtr[i].ProviderId;\n+        if (cmpGuid(&g, &MS_PROVIDER_ID)) {\n+            found = JNI_TRUE;\n+            provider = infoPtr[i];\n+            break;\n+        }\n+    }\n+    if (infoPtr != &info[0]) {\n+        free(infoPtr);\n+    }\n+    \/*\n+     * check we can create a socket\n+     *\/\n+    if (found) {\n+        SOCKET s = WSASocket(PF_UNIX, SOCK_STREAM, 0, &provider, 0, WSA_FLAG_OVERLAPPED);\n+        if (s == INVALID_SOCKET) {\n+            return JNI_FALSE;\n+        }\n+        closesocket(s);\n@@ -94,2 +154,1 @@\n-    closesocket(s);\n-    return JNI_TRUE;\n+    return found;\n@@ -101,1 +160,1 @@\n-    SOCKET s = socket(PF_UNIX, SOCK_STREAM, 0);\n+    SOCKET s = WSASocket(PF_UNIX, SOCK_STREAM, 0, &provider, 0, WSA_FLAG_OVERLAPPED);\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/UnixDomainSockets.c","additions":65,"deletions":6,"binary":false,"changes":71,"status":"modified"}]}