{"files":[{"patch":"@@ -879,4 +879,3 @@\n-  \/\/ Convert ~(x-1) into -x. Note there isn't a bitwise not bytecode,\n-  \/\/ \"~x\" would typically represented as \"x^(-1)\", and \"x-c0\" would\n-  \/\/ convert into \"x+ -c0\" in SubXNode::Ideal. So ~(x-1) will eventually\n-  \/\/ be (x+(-1))^-1.\n+  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n+  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n+  \/\/ will eventually be (x+c)^-1.\n@@ -884,2 +883,4 @@\n-      phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n-    return new SubINode(phase->makecon(TypeInt::ZERO), in1->in(1));\n+      in1->in(2)->Opcode() == Op_ConI) {\n+    jint c = phase->type(in1->in(2))->isa_int()->get_con();\n+    Node* neg_c_minus_one = phase->intcon(java_add(-c, -1));\n+    return new SubINode(neg_c_minus_one, in1->in(1));\n@@ -958,4 +959,3 @@\n-  \/\/ Convert ~(x-1) into -x. Note there isn't a bitwise not bytecode,\n-  \/\/ \"~x\" would typically represented as \"x^(-1)\", and \"x-c0\" would\n-  \/\/ convert into \"x+ -c0\" in SubXNode::Ideal. So ~(x-1) will eventually\n-  \/\/ be (x+(-1))^-1.\n+  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n+  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n+  \/\/ will eventually be (x+c)^-1.\n@@ -963,2 +963,4 @@\n-      phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n-    return new SubLNode(phase->makecon(TypeLong::ZERO), in1->in(1));\n+      in1->in(2)->Opcode() == Op_ConL) {\n+    jlong c = phase->type(in1->in(2))->isa_long()->get_con();\n+    Node* neg_c_minus_one = phase->longcon(java_add(-c, -1L));\n+    return new SubLNode(neg_c_minus_one, in1->in(1));\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @summary Test that transformation from ~x + c to (c - 1) - x works\n- *          as intended.\n+ * @summary Test that transformation from ~x + c to (c - 1) - x and\n+ *          from ~(x + c) to (-c - 1) - x works as intended.\n@@ -46,1 +46,1 @@\n-    public int testIntConIsNormal(int x) {\n+    public int testIntConIsNormal1(int x) {\n@@ -50,2 +50,2 @@\n-    @Run(test = \"testIntConIsNormal\")\n-    public void checkTestIntConIsNormal(RunInfo info) {\n+    @Run(test = \"testIntConIsNormal1\")\n+    public void checkTestIntConIsNormal1(RunInfo info) {\n@@ -53,2 +53,16 @@\n-        Asserts.assertEquals(1223, testIntConIsNormal(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal(0));\n+        Asserts.assertEquals(1223, testIntConIsNormal1(10));\n+        Asserts.assertEquals(1233, testIntConIsNormal1(0));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConIsNormal2(int x) {\n+        return ~(x + -1234); \/\/ transformed to 1233 - x\n+    }\n+\n+    @Run(test = \"testIntConIsNormal2\")\n+    public void checkTestIntConIsNormal2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1223, testIntConIsNormal2(10));\n+        Asserts.assertEquals(1233, testIntConIsNormal2(0));\n@@ -60,1 +74,1 @@\n-    public long testLongConIsNormal(long x) {\n+    public long testLongConIsNormal1(long x) {\n@@ -64,2 +78,2 @@\n-    @Run(test = \"testLongConIsNormal\")\n-    public void checkTestLongConIsNormal(RunInfo info) {\n+    @Run(test = \"testLongConIsNormal1\")\n+    public void checkTestLongConIsNormal1(RunInfo info) {\n@@ -67,2 +81,16 @@\n-        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal(0L));\n+        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal1(10_000_000_000L));\n+        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal1(0L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConIsNormal2(long x) {\n+        return ~(x + -123_456_789_123L); \/\/ transformed to 123_456_789_122L - x\n+    }\n+\n+    @Run(test = \"testLongConIsNormal2\")\n+    public void checkTestLongConIsNormal2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal2(10_000_000_000L));\n+        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal2(0L));\n@@ -74,1 +102,1 @@\n-    public int testIntConIsZero(int x) {\n+    public int testIntConIsZero1(int x) {\n@@ -78,2 +106,2 @@\n-    @Run(test = \"testIntConIsZero\")\n-    public void checkTestIntConIsZero(RunInfo info) {\n+    @Run(test = \"testIntConIsZero1\")\n+    public void checkTestIntConIsZero1(RunInfo info) {\n@@ -81,1 +109,14 @@\n-        Asserts.assertEquals(-11, testIntConIsZero(10));\n+        Asserts.assertEquals(-11, testIntConIsZero1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.SUB_I})\n+    @IR(counts = {IRNode.XOR_I, \"1\"})\n+    public int testIntConIsZero2(int x) {\n+        return ~(x + 0); \/\/ should not happen, transformed to ~x\n+    }\n+\n+    @Run(test = \"testIntConIsZero2\")\n+    public void checkTestIntConIsZero2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-11, testIntConIsZero2(10));\n@@ -87,1 +128,1 @@\n-    public long testLongConIsZero(long x) {\n+    public long testLongConIsZero1(long x) {\n@@ -91,2 +132,15 @@\n-    @Run(test = \"testLongConIsZero\")\n-    public void checkTestLongConIsZero(RunInfo info) {\n+    @Run(test = \"testLongConIsZero1\")\n+    public void checkTestLongConIsZero1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero1(10_000_000_000L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.SUB_L})\n+    @IR(counts = {IRNode.XOR_L, \"1\"})\n+    public long testLongConIsZero2(long x) {\n+        return ~(x + 0L); \/\/ should not happen, transformed to ~x\n+    }\n+\n+    @Run(test = \"testLongConIsZero2\")\n+    public void checkTestLongConIsZero2(RunInfo info) {\n@@ -94,1 +148,1 @@\n-        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero(10_000_000_000L));\n+        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero2(10_000_000_000L));\n@@ -100,1 +154,1 @@\n-    public int testIntConIsOne(int x) {\n+    public int testIntConIsOne1(int x) {\n@@ -104,2 +158,2 @@\n-    @Run(test = \"testIntConIsOne\")\n-    public void checkTestIntConIsOne(RunInfo info) {\n+    @Run(test = \"testIntConIsOne1\")\n+    public void checkTestIntConIsOne1(RunInfo info) {\n@@ -107,1 +161,14 @@\n-        Asserts.assertEquals(-10, testIntConIsOne(10));\n+        Asserts.assertEquals(-10, testIntConIsOne1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConIsNegOne2(int x) {\n+        return ~(x + -1); \/\/ transformed to 0 - x\n+    }\n+\n+    @Run(test = \"testIntConIsNegOne2\")\n+    public void checkTestIntConIsNegOne2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10, testIntConIsNegOne2(10));\n@@ -113,1 +180,1 @@\n-    public long testLongConIsOne(long x) {\n+    public long testLongConIsOne1(long x) {\n@@ -117,2 +184,2 @@\n-    @Run(test = \"testLongConIsOne\")\n-    public void checkTestLongConIsOne(RunInfo info) {\n+    @Run(test = \"testLongConIsOne1\")\n+    public void checkTestLongConIsOne1(RunInfo info) {\n@@ -120,1 +187,14 @@\n-        Asserts.assertEquals(-10_000_000_000L, testLongConIsOne(10_000_000_000L));\n+        Asserts.assertEquals(-10_000_000_000L, testLongConIsOne1(10_000_000_000L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConIsNegOne2(long x) {\n+        return ~(x + -1L); \/\/ transformed to 0 - x\n+    }\n+\n+    @Run(test = \"testLongConIsNegOne2\")\n+    public void checkTestLongConIsNegOne2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10_000_000_000L, testLongConIsNegOne2(10_000_000_000L));\n@@ -126,1 +206,1 @@\n-    public int testIntConMinusOneIsUnderflow(int x) {\n+    public int testIntConMinusOneIsUnderflow1(int x) {\n@@ -130,2 +210,2 @@\n-    @Run(test = \"testIntConMinusOneIsUnderflow\")\n-    public void checkTestIntConMinusOneIsUnderflow(RunInfo info) {\n+    @Run(test = \"testIntConMinusOneIsUnderflow1\")\n+    public void checkTestIntConMinusOneIsUnderflow1(RunInfo info) {\n@@ -133,1 +213,14 @@\n-        Asserts.assertEquals(2147483637, testIntConMinusOneIsUnderflow(10));\n+        Asserts.assertEquals(2147483637, testIntConMinusOneIsUnderflow1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntNegConMinusOneIsUnderflow2(int x) {\n+        return ~(x + Integer.MIN_VALUE); \/\/ transformed to Integer.MAX_VALUE - x\n+    }\n+\n+    @Run(test = \"testIntNegConMinusOneIsUnderflow2\")\n+    public void checkTestIntNegConMinusOneIsUnderflow2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(2147483637, testIntNegConMinusOneIsUnderflow2(10));\n@@ -139,1 +232,1 @@\n-    public long testLongConMinusOneIsUnderflow(long x) {\n+    public long testLongConMinusOneIsUnderflow1(long x) {\n@@ -143,2 +236,2 @@\n-    @Run(test = \"testLongConMinusOneIsUnderflow\")\n-    public void checkTestLongConMinusOneIsUnderflow(RunInfo info) {\n+    @Run(test = \"testLongConMinusOneIsUnderflow1\")\n+    public void checkTestLongConMinusOneIsUnderflow1(RunInfo info) {\n@@ -146,1 +239,14 @@\n-        Asserts.assertEquals(9223372036854775797L, testLongConMinusOneIsUnderflow(10));\n+        Asserts.assertEquals(9223372036854775797L, testLongConMinusOneIsUnderflow1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongNegConMinusOneIsUnderflow2(long x) {\n+        return ~(x + Long.MIN_VALUE); \/\/ transformed to Long.MAX_VALUE - x\n+    }\n+\n+    @Run(test = \"testLongNegConMinusOneIsUnderflow2\")\n+    public void checkTestLongNegConMinusOneIsUnderflow2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(9223372036854775797L, testLongNegConMinusOneIsUnderflow2(10));\n@@ -152,1 +258,1 @@\n-    public int testIntResultIsUnderflow(int x) {\n+    public int testIntResultIsUnderflow1(int x) {\n@@ -156,2 +262,2 @@\n-    @Run(test = \"testIntResultIsUnderflow\")\n-    public void checkTestIntResultIsUnderflow(RunInfo info) {\n+    @Run(test = \"testIntResultIsUnderflow1\")\n+    public void checkTestIntResultIsUnderflow1(RunInfo info) {\n@@ -159,1 +265,14 @@\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow(10));\n+        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntResultIsUnderflow2(int x) {\n+        return ~(x + 2147483638); \/\/ transformed to -2147483639 - x\n+    }\n+\n+    @Run(test = \"testIntResultIsUnderflow2\")\n+    public void checkTestIntResultIsUnderflow2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow2(10));\n@@ -165,1 +284,1 @@\n-    public long testLongResultIsUnderflow(long x) {\n+    public long testLongResultIsUnderflow1(long x) {\n@@ -169,2 +288,2 @@\n-    @Run(test = \"testLongResultIsUnderflow\")\n-    public void checkTestLongResultIsUnderflow(RunInfo info) {\n+    @Run(test = \"testLongResultIsUnderflow1\")\n+    public void checkTestLongResultIsUnderflow1(RunInfo info) {\n@@ -172,1 +291,14 @@\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow(10));\n+        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow1(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongResultIsUnderflow2(long x) {\n+        return ~(x + 9223372036854775798L); \/\/ transformed to -9223372036854775799L - x\n+    }\n+\n+    @Run(test = \"testLongResultIsUnderflow2\")\n+    public void checkTestLongResultIsUnderflow2(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow2(10));\n@@ -178,1 +310,1 @@\n-    public int testIntResultIsOverflow(int x) {\n+    public int testIntResultIsOverflow1(int x) {\n@@ -182,2 +314,14 @@\n-    @Run(test = \"testIntResultIsOverflow\")\n-    public void checkTestIntResultIsOverflow(RunInfo info) {\n+    @Run(test = \"testIntResultIsOverflow1\")\n+    public void checkTestIntResultIsOverflow1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow1(-12));\n+    }\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntResultIsOverflow2(int x) {\n+        return ~(x + -2147483637); \/\/ transformed to 2147483646 - x\n+    }\n+\n+    @Run(test = \"testIntResultIsOverflow2\")\n+    public void checkTestIntResultIsOverflow2(RunInfo info) {\n@@ -185,1 +329,1 @@\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow(-12));\n+        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow2(-12));\n@@ -191,1 +335,1 @@\n-    public long testLongResultIsOverflow(long x) {\n+    public long testLongResultIsOverflow1(long x) {\n@@ -195,2 +339,15 @@\n-    @Run(test = \"testLongResultIsOverflow\")\n-    public void checkTestLongResultIsOverflow(RunInfo info) {\n+    @Run(test = \"testLongResultIsOverflow1\")\n+    public void checkTestLongResultIsOverflow1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow1(-12));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongResultIsOverflow2(long x) {\n+        return ~(x + -9223372036854775797L); \/\/ transformed to 9223372036854775798L - x\n+    }\n+\n+    @Run(test = \"testLongResultIsOverflow2\")\n+    public void checkTestLongResultIsOverflow2(RunInfo info) {\n@@ -198,1 +355,1 @@\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow(-12));\n+        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow2(-12));\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealNotXPlusC.java","additions":209,"deletions":52,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n- * AddNode::IdealIL.\n+ * AddNode::IdealIL and \"~(x+c)\" into \"(-c - 1) - x\" in XorINode:Ideal\n+ * and XorLNode::Ideal.\n@@ -80,1 +81,1 @@\n-    public void testInt(Blackhole bh) {\n+    public void testInt1(Blackhole bh) {\n@@ -86,0 +87,9 @@\n+    \/\/ Convert \"~(x + c)\" into \"(-c - 1) - x\" for int.\n+    \/\/ (-c - 1) -x + x is then converted into -c - 1.\n+    @Benchmark\n+    public void testInt2(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(~(iFld + I_C) + iFld);\n+        }\n+    }\n+\n@@ -89,1 +99,1 @@\n-    public void testLong(Blackhole bh) {\n+    public void testLong1(Blackhole bh) {\n@@ -94,0 +104,9 @@\n+\n+    \/\/ Convert \"~(x + c)\" into \"(-c - 1) - x\" for long.\n+     \/\/ (-c - 1) -x + x is then converted into -c - 1.\n+    @Benchmark\n+    public void testLong2(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(~(lFld + L_C) + lFld);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/AddIdealNotXPlusC.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}