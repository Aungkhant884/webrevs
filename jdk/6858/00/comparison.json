{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -370,4 +370,5 @@\n-  \/\/ Convert (~x+1) into -x. Note there isn't a bitwise not bytecode,\n-  \/\/ \"~x\" would typically represented as \"x^(-1)\", so (~x+1) will\n-  \/\/ be (x^(-1))+1.\n-  if (op1 == Op_Xor(bt) && phase->type(in2) == TypeInteger::one(bt) &&\n+  \/\/ Convert (~x+c) into (c-1)-x. Note there isn't a bitwise not\n+  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so (~x+c)\n+  \/\/ will be (x^(-1))+c.\n+  if (op1 == Op_Xor(bt) &&\n+      (in2->Opcode() == Op_ConI || in2->Opcode() == Op_ConL) &&\n@@ -375,1 +376,2 @@\n-    return SubNode::make(phase->makecon(TypeInteger::zero(bt)), in1->in(1), bt);\n+    Node* c_minus_one = phase->makecon(add_ring(phase->type(in(2)), TypeInteger::minus_1(bt)));\n+    return SubNode::make(c_minus_one, in1->in(1), bt);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @summary Test that transformation from ~x + c to (c - 1) - x works\n+ *          as intended.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestIRAddIdealNotXPlusC\n+ *\/\n+public class TestIRAddIdealNotXPlusC {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConIsNormal(int x) {\n+        return ~x + 1234; \/\/ transformed to 1233 - x\n+    }\n+\n+    @Run(test = \"testIntConIsNormal\")\n+    public void checkTestIntConIsNormal(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1223, testIntConIsNormal(10));\n+        Asserts.assertEquals(1233, testIntConIsNormal(0));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConIsNormal(long x) {\n+        return ~x + 123_456_789_123L; \/\/ transformed to 123_456_789_122L - x\n+    }\n+\n+    @Run(test = \"testLongConIsNormal\")\n+    public void checkTestLongConIsNormal(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal(10_000_000_000L));\n+        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal(0L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConIsZero(int x) {\n+        return ~x + 0; \/\/ transformed to -1 - x\n+    }\n+\n+    @Run(test = \"testIntConIsZero\")\n+    public void checkTestIntConIsZero(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-11, testIntConIsZero(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConIsZero(long x) {\n+        return ~x + 0L; \/\/ transformed to -1 - x\n+    }\n+\n+    @Run(test = \"testLongConIsZero\")\n+    public void checkTestLongConIsZero(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero(10_000_000_000L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConIsOne(int x) {\n+        return ~x + 1; \/\/ transformed to 0 - x\n+    }\n+\n+    @Run(test = \"testIntConIsOne\")\n+    public void checkTestIntConIsOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10, testIntConIsOne(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConIsOne(long x) {\n+        return ~x + 1L; \/\/ transformed to 0 - x\n+    }\n+\n+    @Run(test = \"testLongConIsOne\")\n+    public void checkTestLongConIsOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-10_000_000_000L, testLongConIsOne(10_000_000_000L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntConMinusOneIsUnderflow(int x) {\n+        return ~x + Integer.MIN_VALUE; \/\/ transformed to Integer.MAX_VALUE - x\n+    }\n+\n+    @Run(test = \"testIntConMinusOneIsUnderflow\")\n+    public void checkTestIntConMinusOneIsUnderflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(2147483637, testIntConMinusOneIsUnderflow(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongConMinusOneIsUnderflow(long x) {\n+        return ~x + Long.MIN_VALUE; \/\/ transformed to Long.MAX_VALUE - x\n+    }\n+\n+    @Run(test = \"testLongConMinusOneIsUnderflow\")\n+    public void checkTestLongConMinusOneIsUnderflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(9223372036854775797L, testLongConMinusOneIsUnderflow(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntResultIsUnderflow(int x) {\n+        return ~x + -2147483638; \/\/ transformed to -2147483639 - x\n+    }\n+\n+    @Run(test = \"testIntResultIsUnderflow\")\n+    public void checkTestIntResultIsUnderflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongResultIsUnderflow(long x) {\n+        return ~x + -9223372036854775798L; \/\/ transformed to -9223372036854775799L - x\n+    }\n+\n+    @Run(test = \"testLongResultIsUnderflow\")\n+    public void checkTestLongResultIsUnderflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow(10));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntResultIsOverflow(int x) {\n+        return ~x + 2147483637; \/\/ transformed to 2147483646 - x\n+    }\n+\n+    @Run(test = \"testIntResultIsOverflow\")\n+    public void checkTestIntResultIsOverflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow(-12));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongResultIsOverflow(long x) {\n+        return ~x + 9223372036854775797L; \/\/ transformed to 9223372036854775798L - x\n+    }\n+\n+    @Run(test = \"testLongResultIsOverflow\")\n+    public void checkTestLongResultIsOverflow(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow(-12));\n+    }\n+\n+    private void assertC2Compiled(RunInfo info) {\n+        \/\/ Test VM allows C2 to work\n+        Asserts.assertTrue(info.isC2CompilationEnabled());\n+        if (!info.isWarmUp()) {\n+            \/\/ C2 compilation happens\n+            Asserts.assertTrue(info.isTestC2Compiled());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealNotXPlusC.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"},{"patch":"@@ -138,0 +138,2 @@\n+    public static final String XOR_I = START + \"XorI\" + MID + END;\n+    public static final String XOR_L = START + \"XorL\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts \"~x + c\" into \"(c - 1) - x\" in\n+ * AddNode::IdealIL.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class AddIdealNotXPlusC {\n+\n+    private static final int I_C = 1234567;\n+\n+    private static final long L_C = 123_456_789_123_456L;\n+\n+    private int iFld = 4711;\n+\n+    private long lFld = 4711 * 4711 * 4711;\n+\n+    private final int SIZE = 10;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(iFld);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(lFld);\n+        }\n+    }\n+\n+    \/\/ Convert \"~x + c\" into \"(c - 1) - x\" for int.\n+    \/\/ (c - 1) -x + x is then converted into c - 1.\n+    @Benchmark\n+    public void testInt(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(~iFld + I_C + iFld);\n+        }\n+    }\n+\n+    \/\/ Convert \"~x + c\" into \"(c - 1) - x\" for long.\n+     \/\/ (c - 1) -x + x is then converted into c - 1.\n+    @Benchmark\n+    public void testLong(Blackhole bh) {\n+        for (int i = 0; i < SIZE; i++) {\n+            bh.consume(~lFld + L_C + lFld);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/AddIdealNotXPlusC.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}