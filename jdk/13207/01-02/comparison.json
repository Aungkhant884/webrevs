{"files":[{"patch":"@@ -4651,0 +4651,1 @@\n+  bool fail = false;\n@@ -4652,1 +4653,1 @@\n-  PhaseIdealLoop loop_verify(_igvn, this);\n+  PhaseIdealLoop phase_verify(_igvn, this);\n@@ -4655,3 +4656,1 @@\n-  int fail = 0;\n-  verify_nodes(C->root(), &loop_verify, fail);\n-  assert(fail == 0, \"verify loops failed\");\n+  fail |= verify_idom_and_nodes(C->root(), &phase_verify);\n@@ -4660,1 +4659,3 @@\n-  _ltree_root->verify_tree(loop_verify._ltree_root);\n+  fail |= _ltree_root->verify_tree(phase_verify._ltree_root);\n+\n+  assert(!fail, \"verify loops failed\");\n@@ -4666,1 +4667,1 @@\n-\/\/------------------------------verify_nodes-----------------------------\n+\/\/------------------------------verify_idom_and_nodes-----------------------------\n@@ -4668,2 +4669,2 @@\n-\/\/ Call verify_node on all nodes of BFS traversal.\n-void PhaseIdealLoop::verify_nodes(Node* root, const PhaseIdealLoop* loop_verify, int &fail) const {\n+\/\/ Call verify_idom and verify_node on all nodes of BFS traversal.\n+bool PhaseIdealLoop::verify_idom_and_nodes(Node* root, const PhaseIdealLoop* phase_verify) const {\n@@ -4672,1 +4673,2 @@\n-  for (uint i = 0; i < worklist.size() && fail < 10; i++) {\n+  bool fail = false;\n+  for (uint i = 0; i < worklist.size(); i++) {\n@@ -4675,1 +4677,2 @@\n-    verify_node(n, loop_verify, fail);\n+    fail |= verify_idom(n, phase_verify);\n+    fail |= verify_nodes(n, phase_verify);\n@@ -4677,1 +4680,1 @@\n-    for(uint j = 0; j < n->req(); j++) {\n+    for (uint j = 0; j < n->req(); j++) {\n@@ -4683,0 +4686,36 @@\n+  return fail;\n+}\n+\n+\/\/------------------------------verify_idom---------------------------------\n+\/\/ Verify dominator structure (IDOM).\n+bool PhaseIdealLoop::verify_idom(Node* n, const PhaseIdealLoop* phase_verify) const {\n+  \/\/ Verify IDOM for all CFG nodes (except root).\n+  if (!n->is_CFG() || n->is_Root()) {\n+    return false; \/\/ pass\n+  }\n+\n+  if (n->_idx >= _idom_size) {\n+    tty->print(\"CFG Node with no idom: \");\n+    n->dump();\n+    return true; \/\/ fail\n+  }\n+\n+  \/\/ Broken part of VerifyLoopOptimizations (C)\n+  \/\/ Reason:\n+  \/\/   Idom not always set correctly, for example BUG in\n+  \/\/   PhaseIdealLoop::create_new_if_for_predicate\n+  \/\/   at \"set_idom(rgn, nrdom, dom_depth(rgn));\"\n+  \/*\n+  Node *id = idom_no_update(n);\n+  if( id != loop_verify->idom_no_update(n) ) {\n+    tty->print(\"Unequals idoms for: \");\n+    n->dump();\n+    if( fail++ > 10 ) return;\n+    tty->print(\"We have it as: \");\n+    id->dump();\n+    tty->print(\"Verify thinks: \");\n+    loop_verify->idom_no_update(n)->dump();\n+    tty->cr();\n+  }\n+  *\/\n+  return false; \/\/ pass\n@@ -4685,6 +4724,8 @@\n-\/\/------------------------------verify_node---------------------------------\n-\/\/ Compare \"this\" and \"loop_verify\".\n-\/\/  (1) Verify \"_nodes\": control and loop membership.\n-\/\/  (2) Verify dominator structure (IDOM).\n-void PhaseIdealLoop::verify_node(Node* n, const PhaseIdealLoop* loop_verify, int &fail) const {\n-  uint i = n->_idx;\n+\/\/------------------------------verify_nodes---------------------------------\n+\/\/ Verify \"_nodes\": control and loop membership.\n+\/\/  (0) _nodes[i] == nullptr -> node not reachable.\n+\/\/  (1) has_ctrl -> check lowest bit. 1 -> data node. 0 -> ctrl node.\n+\/\/  (2) has_ctrl true: get_ctrl_no_update returns ctrl of data node.\n+\/\/  (3) has_ctrl false: get_loop_idx returns IdealLoopTree for ctrl node.\n+bool PhaseIdealLoop::verify_nodes(Node* n, const PhaseIdealLoop* phase_verify) const {\n+  const uint i = n->_idx;\n@@ -4694,3 +4735,9 @@\n-  if(_nodes[i] == nullptr) {\n-    assert(loop_verify->_nodes[i] == nullptr, \"both should be unreachable\");\n-    return;\n+  if (_nodes[i] == nullptr || phase_verify->_nodes[i] == nullptr) {\n+    if (_nodes[i] != nullptr || phase_verify->_nodes[i] != nullptr) {\n+      tty->print_cr(\"Was reachable in only one. this %d, verify %d.\",\n+                 _nodes[i] != nullptr, phase_verify->_nodes[i] != nullptr);\n+      n->dump();\n+      return true; \/\/ fail\n+    }\n+    \/\/ Not reachable for both.\n+    return false; \/\/ pass\n@@ -4699,4 +4746,0 @@\n-  \/\/ Check everything stored in \"_nodes\".\n-  \/\/  (1) has_ctrl -> check lowest bit. 1 -> data node. 0 -> ctrl node.\n-  \/\/  (2) has_ctrl true: get_ctrl_no_update returns ctrl of data node.\n-  \/\/  (3) has_ctrl false: get_loop_idx returns IdealLoopTree for ctrl node.\n@@ -4704,1 +4747,1 @@\n-    tty->print(\"Exactly one should be true: %d for is_CFG, %d for has_ctrl.\", n->is_CFG(), has_ctrl(n));\n+    tty->print_cr(\"Exactly one should be true: %d for is_CFG, %d for has_ctrl.\", n->is_CFG(), has_ctrl(n));\n@@ -4706,1 +4749,1 @@\n-    fail++;\n+    return true; \/\/ fail\n@@ -4709,2 +4752,2 @@\n-  if (has_ctrl(n) != loop_verify->has_ctrl(n)) {\n-    tty->print(\"Mismatch has_ctrl: %d for this, %d for verify.\", has_ctrl(n), loop_verify->has_ctrl(n));\n+  if (has_ctrl(n) != phase_verify->has_ctrl(n)) {\n+    tty->print_cr(\"Mismatch has_ctrl: %d for this, %d for verify.\", has_ctrl(n), phase_verify->has_ctrl(n));\n@@ -4712,1 +4755,1 @@\n-    fail++;\n+    return true; \/\/ fail\n@@ -4714,1 +4757,1 @@\n-    assert(loop_verify->has_ctrl(n), \"sanity\");\n+    assert(phase_verify->has_ctrl(n), \"sanity\");\n@@ -4741,0 +4784,1 @@\n+    return false; \/\/ pass\n@@ -4742,1 +4786,1 @@\n-    assert(!loop_verify->has_ctrl(n), \"sanity\");\n+    assert(!phase_verify->has_ctrl(n), \"sanity\");\n@@ -4768,0 +4812,1 @@\n+    return false; \/\/ pass\n@@ -4769,31 +4814,0 @@\n-\n-  \/\/ Verify IDOM for all CFG nodes (except root).\n-  if (!n->is_CFG() || n->is_Root()) {\n-    return;\n-  }\n-\n-  if (i >= _idom_size) {\n-    tty->print(\"CFG Node with no idom: \");\n-    n->dump();\n-    fail++;\n-    return;\n-  }\n-\n-  \/\/ Broken part of VerifyLoopOptimizations (C)\n-  \/\/ Reason:\n-  \/\/   Idom not always set correctly, for example BUG in\n-  \/\/   PhaseIdealLoop::create_new_if_for_predicate\n-  \/\/   at \"set_idom(rgn, nrdom, dom_depth(rgn));\"\n-  \/*\n-  Node *id = idom_no_update(n);\n-  if( id != loop_verify->idom_no_update(n) ) {\n-    tty->print(\"Unequals idoms for: \");\n-    n->dump();\n-    if( fail++ > 10 ) return;\n-    tty->print(\"We have it as: \");\n-    id->dump();\n-    tty->print(\"Verify thinks: \");\n-    loop_verify->idom_no_update(n)->dump();\n-    tty->cr();\n-  }\n-  *\/\n@@ -4822,1 +4836,1 @@\n-void IdealLoopTree::verify_tree(IdealLoopTree* loop_verify) const {\n+bool IdealLoopTree::verify_tree(IdealLoopTree* loop_verify) const {\n@@ -4834,0 +4848,2 @@\n+  bool fail = false;\n+\n@@ -4861,1 +4877,1 @@\n-        assert(false, \"We have loop that verify does not have\");\n+        fail = true;\n@@ -4872,1 +4888,1 @@\n-        assert(false, \"Verify has loop that we do not have\");\n+        fail = true;\n@@ -4877,1 +4893,1 @@\n-      child->verify_tree(child_verify); \/\/ Recursion\n+      fail |= child->verify_tree(child_verify); \/\/ Recursion\n@@ -4954,0 +4970,1 @@\n+  return fail;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":83,"deletions":66,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-  void verify_tree(IdealLoopTree* loop_verify) const;\n+  bool verify_tree(IdealLoopTree* loop_verify) const;\n@@ -1702,2 +1702,3 @@\n-  void verify_nodes(Node* root, const PhaseIdealLoop* loop_verify, int &fail) const;\n-  void verify_node(Node* n, const PhaseIdealLoop* loop_verify, int &fail) const;\n+  bool verify_idom_and_nodes(Node* root, const PhaseIdealLoop* phase_verify) const;\n+  bool verify_idom(Node* n, const PhaseIdealLoop* phase_verify) const;\n+  bool verify_nodes(Node* n, const PhaseIdealLoop* phase_verify) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}