{"files":[{"patch":"@@ -413,1 +413,1 @@\n-  UTIL_ARG_ENABLE(NAME: asan, DEFAULT: false,\n+  UTIL_ARG_ENABLE(NAME: asan, DEFAULT: false, RESULT: ASAN_ENABLED,\n@@ -429,1 +429,1 @@\n-        ASAN_CFLAGS=\"-fsanitize=address -Wno-stringop-truncation -fno-omit-frame-pointer\"\n+        ASAN_CFLAGS=\"-fsanitize=address -Wno-stringop-truncation -fno-omit-frame-pointer -DADDRESS_SANITIZER\"\n@@ -439,4 +439,0 @@\n-        ASAN_ENABLED=\"yes\"\n-      ],\n-      IF_DISABLED: [\n-        ASAN_ENABLED=\"no\"\n@@ -448,0 +444,42 @@\n+###############################################################################\n+#\n+# UndefinedBehaviorSanitizer\n+#\n+AC_DEFUN_ONCE([JDKOPT_SETUP_UNDEFINED_BEHAVIOR_SANITIZER],\n+[\n+  # GCC reports lots of likely false positives for stringop-truncation and format-overflow.\n+  # Silence them for now.\n+  UBSAN_CHECKS=\"-fsanitize=undefined -fsanitize=float-divide-by-zero -fno-sanitize=shift-base\"\n+  UBSAN_CFLAGS=\"$UBSAN_CHECKS -Wno-stringop-truncation -Wno-format-overflow -fno-omit-frame-pointer -DUNDEFINED_BEHAVIOR_SANITIZER\"\n+  UBSAN_LDFLAGS=\"$UBSAN_CHECKS\"\n+  UTIL_ARG_ENABLE(NAME: ubsan, DEFAULT: false, RESULT: UBSAN_ENABLED,\n+      DESC: [enable UndefinedBehaviorSanitizer],\n+      CHECK_AVAILABLE: [\n+        AC_MSG_CHECKING([if UndefinedBehaviorSanitizer (ubsan) is available])\n+        if test \"x$TOOLCHAIN_TYPE\" = \"xgcc\" ||\n+            test \"x$TOOLCHAIN_TYPE\" = \"xclang\"; then\n+          AC_MSG_RESULT([yes])\n+        else\n+          AC_MSG_RESULT([no])\n+          AVAILABLE=false\n+        fi\n+      ],\n+      IF_ENABLED: [\n+        JVM_CFLAGS=\"$JVM_CFLAGS $UBSAN_CFLAGS\"\n+        JVM_LDFLAGS=\"$JVM_LDFLAGS $UBSAN_LDFLAGS\"\n+        CFLAGS_JDKLIB=\"$CFLAGS_JDKLIB $UBSAN_CFLAGS\"\n+        CFLAGS_JDKEXE=\"$CFLAGS_JDKEXE $UBSAN_CFLAGS\"\n+        CXXFLAGS_JDKLIB=\"$CXXFLAGS_JDKLIB $UBSAN_CFLAGS\"\n+        CXXFLAGS_JDKEXE=\"$CXXFLAGS_JDKEXE $UBSAN_CFLAGS\"\n+        LDFLAGS_JDKLIB=\"$LDFLAGS_JDKLIB $UBSAN_LDFLAGS\"\n+        LDFLAGS_JDKEXE=\"$LDFLAGS_JDKEXE $UBSAN_LDFLAGS\"\n+      ])\n+  if test \"x$UBSAN_ENABLED\" = xfalse; then\n+    UBSAN_CFLAGS=\"\"\n+    UBSAN_LDFLAGS=\"\"\n+  fi\n+  AC_SUBST(UBSAN_CFLAGS)\n+  AC_SUBST(UBSAN_LDFLAGS)\n+  AC_SUBST(UBSAN_ENABLED)\n+])\n+\n@@ -784,1 +822,1 @@\n-          DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,\n+          DEFAULT: openjdk_codesign, CHECK_VALUE: [UTIL_CHECK_STRING_NON_EMPTY],\n","filename":"make\/autoconf\/jdk-options.m4","additions":45,"deletions":7,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1106,0 +1106,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1113,1 +1116,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1130,0 +1136,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1171,1 +1180,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -981,0 +981,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -988,1 +991,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1008,0 +1014,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1048,1 +1057,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -71,0 +70,2 @@\n+#include <type_traits>\n+\n@@ -263,1 +264,1 @@\n-  typedef typename Conditional<oops == oop_kind::NARROW, narrowOop, oop>::type OopT;\n+  using OopT = std::conditional_t<oops == oop_kind::NARROW, narrowOop, oop>;\n@@ -2569,1 +2570,1 @@\n-                    (JavaThread*)nullptr :\n+                    nullptr :\n@@ -2580,1 +2581,1 @@\n-  values.print_on((JavaThread*)nullptr, st);\n+  values.print_on(static_cast<JavaThread*>(nullptr), st);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}