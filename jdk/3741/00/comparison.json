{"files":[{"patch":"@@ -408,0 +408,8 @@\n+        \/*\n+         * Ignore the module name which should not be shown in the output\n+         *\/\n+        @Override\n+        public String name() {\n+            return getName();\n+        }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/Analyzer.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -315,1 +315,1 @@\n-        if (source == target || !target.getModule().isNamed()) {\n+        if (source == target || !target.getModule().isNamed() || Analyzer.notFound(target)) {\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.io.IOException;\n@@ -36,0 +37,3 @@\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n@@ -37,0 +41,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -45,0 +51,1 @@\n+import static org.testng.Assert.assertFalse;\n@@ -118,0 +125,59 @@\n+    private static final List<String> REMOVED_APIS = List.of(\n+            \"com.sun.image.codec.jpeg.JPEGCodec\",\n+            \"sun.misc.Service\",\n+            \"sun.misc.SoftCache\",\n+            \"sun.reflect.Reflection\"\n+    );\n+    private static final String REMOVED_INTERNAL_API = \"JDK removed internal API\";\n+\n+\n+    @Test\n+    public void removedInternalJDKs() throws IOException  {\n+        \/\/ verify the JDK removed internal API\n+        JdepsRunner summary = JdepsRunner.run(\"-summary\", CLASSES_DIR.toString());\n+        Arrays.stream(summary.output()).map(l -> l.split(\" -> \"))\n+              .map(a -> a[1]).filter(n -> n.equals(REMOVED_INTERNAL_API))\n+              .findFirst().orElseThrow();\n+\n+        JdepsRunner jdeps = JdepsRunner.run(\"-verbose:class\", CLASSES_DIR.toString());\n+        String output = jdeps.stdout.toString();\n+        Map<String, String> result = findDeps(output);\n+        for (String cn : result.keySet()) {\n+            String name = result.get(cn);\n+            if (REMOVED_APIS.contains(cn)) {\n+                assertEquals(name, REMOVED_INTERNAL_API);\n+            } else if (cn.startsWith(\"sun.reflect\")){\n+                assertEquals(name, \"JDK internal API (jdk.unsupported)\");\n+            } else {\n+                assertEquals(name, \"java.base\");\n+            }\n+        }\n+        REMOVED_APIS.stream().map(result::containsKey).allMatch(b -> b);\n+    }\n+\n+    \/\/ Pattern used to parse lines\n+    private static final Pattern linePattern = Pattern.compile(\".*\\r?\\n\");\n+    private static final  Pattern pattern = Pattern.compile(\"\\\\s+ -> (\\\\S+) +(.*)\");\n+\n+    \/\/ Use the linePattern to break the given String into lines, applying\n+    \/\/ the pattern to each line to see if we have a match\n+    private static Map<String, String> findDeps(String out) {\n+        Map<String, String> result = new LinkedHashMap<>();\n+        Matcher lm = linePattern.matcher(out);  \/\/ Line matcher\n+        Matcher pm = null;                      \/\/ Pattern matcher\n+        int lines = 0;\n+        while (lm.find()) {\n+            lines++;\n+            CharSequence cs = lm.group();       \/\/ The current line\n+            if (pm == null)\n+                pm = pattern.matcher(cs);\n+            else\n+                pm.reset(cs);\n+            if (pm.find())\n+                result.put(pm.group(1), pm.group(2).trim());\n+            if (lm.end() == out.length())\n+                break;\n+        }\n+        return result;\n+    }\n+\n","filename":"test\/langtools\/tools\/jdeps\/jdkinternals\/RemovedJDKInternals.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"}]}