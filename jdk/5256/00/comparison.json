{"files":[{"patch":"@@ -290,0 +290,2 @@\n+\n+  assert(_rank >= 0, \"Bad lock rank\");\n@@ -367,1 +369,0 @@\n-  assert(this->rank() >= 0, \"bad lock rank\");\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,16 +45,1 @@\n-  \/\/ A special lock: Is a lock where you are guaranteed not to block while you are\n-  \/\/ holding it, i.e., no vm operation can happen, taking other (blocking) locks, etc.\n-  \/\/ The rank 'access' is similar to 'special' and has the same restrictions on usage.\n-  \/\/ It is reserved for locks that may be required in order to perform memory accesses\n-  \/\/ that require special barriers, e.g. SATB GC barriers, that in turn uses locks.\n-  \/\/ The rank 'tty' is also similar to 'special' and has the same restrictions.\n-  \/\/ It is reserved for the tty_lock.\n-  \/\/ Since memory accesses should be able to be performed pretty much anywhere\n-  \/\/ in the code, that requires locks required for performing accesses being\n-  \/\/ inherently a bit more special than even locks of the 'special' rank.\n-  \/\/ NOTE: It is critical that the rank 'special' be the lowest (earliest)\n-  \/\/ (except for \"event\" and \"access\") for the deadlock detection to work correctly.\n-  \/\/ While at a safepoint no mutexes of rank safepoint are held by any thread.\n-  \/\/ The rank named \"leaf\" is probably historical (and should\n-  \/\/ be changed) -- mutexes of this rank aren't really leaf mutexes\n-  \/\/ at all.\n+  \/\/ Special low level locks are given names and ranges avoid overlap.\n@@ -63,4 +48,4 @@\n-       access         = event          +   1,\n-       service        = access         +   3,\n-       tty            = service        +   3,\n-       special        = tty            +   3,\n+       tty            = event          +   3,\n+       service        = tty            +   3,\n+       stackwatermark = service        +   3,\n+       special        = stackwatermark +   3,\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-  def(MonitorDeflation_lock        , PaddedMonitor, tty-2,       true,  _safepoint_check_never);      \/\/ used for monitor deflation thread operations\n+  def(MonitorDeflation_lock        , PaddedMonitor, special,     true,  _safepoint_check_never);      \/\/ used for monitor deflation thread operations\n@@ -323,1 +323,1 @@\n-  def(JfrStacktrace_lock           , PaddedMutex  , tty-2,       true,  _safepoint_check_never);\n+  def(JfrStacktrace_lock           , PaddedMutex  , stackwatermark-1,  true,  _safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    _lock(Mutex::tty - 1, \"stack_watermark_lock\", true, Mutex::_safepoint_check_never),\n+    _lock(Mutex::stackwatermark, \"StackWatermark_lock\", true, Mutex::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,2 +131,2 @@\n-TEST_VM_ASSERT_MSG(MutexRank, mutex_lock_access_leaf,\n-                   \".* Attempting to acquire lock mutex_rank_leaf\/.* out of order with lock mutex_rank_access\/1 \"\n+TEST_VM_ASSERT_MSG(MutexRank, mutex_lock_event_leaf,\n+                   \".* Attempting to acquire lock mutex_rank_leaf\/.* out of order with lock mutex_rank_event\/0 \"\n@@ -137,1 +137,1 @@\n-  Mutex* mutex_rank_access = new Mutex(Mutex::access, \"mutex_rank_access\", false, Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_event = new Mutex(Mutex::event, \"mutex_rank_event\", false, Mutex::_safepoint_check_never);\n@@ -140,1 +140,1 @@\n-  mutex_rank_access->lock_without_safepoint_check();\n+  mutex_rank_event->lock_without_safepoint_check();\n@@ -143,1 +143,1 @@\n-  mutex_rank_access->unlock();\n+  mutex_rank_event->unlock();\n@@ -223,2 +223,2 @@\n-TEST_VM_ASSERT_MSG(MutexRank, monitor_wait_access_leaf,\n-                   \".* Attempting to wait on monitor monitor_rank_access\/1 while holding lock monitor_rank_tty\/.*\"\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_wait_event_tty,\n+                   \".* Attempting to wait on monitor monitor_rank_event\/0 while holding lock monitor_rank_tty\/.*\"\n@@ -230,1 +230,1 @@\n-  Monitor* monitor_rank_access = new Monitor(Mutex::access, \"monitor_rank_access\", false, Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_event = new Monitor(Mutex::event, \"monitor_rank_event\", false, Mutex::_safepoint_check_never);\n@@ -233,3 +233,3 @@\n-  monitor_rank_access->lock_without_safepoint_check();\n-  monitor_rank_access->wait_without_safepoint_check(1);\n-  monitor_rank_access->unlock();\n+  monitor_rank_event->lock_without_safepoint_check();\n+  monitor_rank_event->wait_without_safepoint_check(1);\n+  monitor_rank_event->unlock();\n@@ -254,0 +254,10 @@\n+\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_negative_rank,\n+                   \".*Bad lock rank\") {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+\n+  Monitor* monitor_rank_broken = new Monitor(Mutex::tty-6, \"monitor_rank_broken\", false, Mutex::_safepoint_check_never);\n+  monitor_rank_broken->lock_without_safepoint_check();\n+  monitor_rank_broken->unlock();\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"}]}