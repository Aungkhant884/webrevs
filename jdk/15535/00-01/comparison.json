{"files":[{"patch":"@@ -32,1 +32,1 @@\n-JfrNativeLibraryEventImpl::JfrNativeLibraryEventImpl(const char* name) : _name(name), _error_msg(nullptr), _start_time(nullptr) {}\n+JfrNativeLibraryEventBase::JfrNativeLibraryEventBase(const char* name) : _name(name), _error_msg(nullptr), _start_time(nullptr) {}\n@@ -34,1 +34,1 @@\n-JfrNativeLibraryEventImpl::~JfrNativeLibraryEventImpl() {\n+JfrNativeLibraryEventBase::~JfrNativeLibraryEventBase() {\n@@ -38,1 +38,1 @@\n-const char* JfrNativeLibraryEventImpl::name() const {\n+const char* JfrNativeLibraryEventBase::name() const {\n@@ -42,1 +42,1 @@\n-JfrTicksWrapper* JfrNativeLibraryEventImpl::start_time() const {\n+JfrTicksWrapper* JfrNativeLibraryEventBase::start_time() const {\n@@ -46,1 +46,1 @@\n-bool JfrNativeLibraryEventImpl::has_start_time() const {\n+bool JfrNativeLibraryEventBase::has_start_time() const {\n@@ -50,1 +50,1 @@\n-const char* JfrNativeLibraryEventImpl::error_msg() const {\n+const char* JfrNativeLibraryEventBase::error_msg() const {\n@@ -54,1 +54,1 @@\n-void JfrNativeLibraryEventImpl::set_error_msg(const char* error_msg) {\n+void JfrNativeLibraryEventBase::set_error_msg(const char* error_msg) {\n@@ -59,0 +59,6 @@\n+\/*\n+ * The JfrTicks value is heap allocated inside an object of type JfrTicksWrapper.\n+ * The reason is that a raw value object of type Ticks is not possible at this\n+ * location because this code runs as part of early VM bootstrap, at a moment\n+ * where Ticks support is not yet initialized.\n+ *\/\n@@ -64,1 +70,1 @@\n-NativeLibraryLoadEvent::NativeLibraryLoadEvent(const char* name, void** result) : JfrNativeLibraryEventImpl(name), _result(result) {\n+NativeLibraryLoadEvent::NativeLibraryLoadEvent(const char* name, void** result) : JfrNativeLibraryEventBase(name), _result(result) {\n@@ -73,1 +79,1 @@\n-NativeLibraryUnloadEvent::NativeLibraryUnloadEvent(const char* name) : JfrNativeLibraryEventImpl(name), _result(false) {\n+NativeLibraryUnloadEvent::NativeLibraryUnloadEvent(const char* name) : JfrNativeLibraryEventBase(name), _result(false) {\n@@ -85,3 +91,3 @@\n-template <typename EventType, typename Type>\n-static void commit(Type& type) {\n-  if (!type.has_start_time()) {\n+template <typename EventType, typename HelperType>\n+static void commit(HelperType& helper) {\n+  if (!helper.has_start_time()) {\n@@ -92,4 +98,4 @@\n-  event.set_starttime(*type.start_time());\n-  event.set_name(type.name());\n-  event.set_errorMessage(type.error_msg());\n-  event.set_success(type.success());\n+  event.set_starttime(*helper.start_time());\n+  event.set_name(helper.name());\n+  event.set_errorMessage(helper.error_msg());\n+  event.set_success(helper.success());\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNativeLibraryLoadEvent.cpp","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n-class JfrNativeLibraryEventImpl : public StackObj {\n+\/*\n+ * Helper types for populating NativeLibrary events.\n+ * Event commit is run as part of destructors.\n+ *\/\n+\n+class JfrNativeLibraryEventBase : public StackObj {\n@@ -37,2 +42,2 @@\n-  JfrNativeLibraryEventImpl(const char* name);\n-  ~JfrNativeLibraryEventImpl();\n+  JfrNativeLibraryEventBase(const char* name);\n+  ~JfrNativeLibraryEventBase();\n@@ -47,1 +52,1 @@\n-class NativeLibraryLoadEvent : public JfrNativeLibraryEventImpl {\n+class NativeLibraryLoadEvent : public JfrNativeLibraryEventBase {\n@@ -56,1 +61,1 @@\n-class NativeLibraryUnloadEvent : public JfrNativeLibraryEventImpl {\n+class NativeLibraryUnloadEvent : public JfrNativeLibraryEventBase {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNativeLibraryLoadEvent.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}