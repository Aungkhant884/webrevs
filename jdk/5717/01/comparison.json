{"files":[{"patch":"@@ -210,0 +210,1 @@\n+    private final DeferredCompletionFailureHandler dcfh;\n@@ -334,0 +335,1 @@\n+        dcfh = DeferredCompletionFailureHandler.instance(context);\n@@ -773,6 +775,3 @@\n-                            if (sup.tsym.kind == TYP && sup.tsym.isAbstract() && sup.tsym.isSealed()) {\n-                                boolean hasAll = ((ClassSymbol) sup.tsym).permitted\n-                                                                         .stream()\n-                                                                         .allMatch(covered::contains);\n-\n-                                if (hasAll && covered.add(sup.tsym)) {\n+                            if (sup.tsym.kind == TYP) {\n+                                if (isTransitivelyCovered(sup.tsym, covered) &&\n+                                    covered.add(sup.tsym)) {\n@@ -788,0 +787,20 @@\n+        private boolean isTransitivelyCovered(Symbol sealed, Set<Symbol> covered) {\n+            DeferredCompletionFailureHandler.Handler prevHandler =\n+                    dcfh.setHandler(dcfh.speculativeCodeHandler);\n+            try {\n+                if (covered.stream().anyMatch(c -> sealed.isSubClass(c, types)))\n+                    return true;\n+                if (sealed.kind == TYP && sealed.isAbstract() && sealed.isSealed()) {\n+                    return ((ClassSymbol) sealed).permitted\n+                                                 .stream()\n+                                                 .allMatch(s -> isTransitivelyCovered(s, covered));\n+                }\n+                return false;\n+            } catch (CompletionFailure cf) {\n+                \/\/safe to ignore, the symbol will be un-completed when the speculative handler is removed.\n+                return false;\n+            } finally {\n+                dcfh.setHandler(prevHandler);\n+            }\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8262891 8268871\n+ * @bug 8262891 8268871 8274363\n@@ -778,0 +778,24 @@\n+    @Test\n+    public void testTransitiveSealed(Path base) throws Exception {\n+        doTest(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   sealed interface A {}\n+                   sealed interface B1 extends A {}\n+                   sealed interface B2 extends A {}\n+                   sealed interface C extends A {}\n+                   final class D1 implements B1, C {}\n+                   final class D2 implements B2, C {}\n+\n+                   void test(A arg) {\n+                       int i = switch (arg) {\n+                           case B1 b1 -> 1;\n+                           case B2 b2 -> 2;\n+                       };\n+                   }\n+               }\n+               \"\"\");\n+    }\n+\n@@ -780,5 +804,0 @@\n-        Path libSrc = current.resolve(\"lib-src\");\n-        for (String code : libraryCode) {\n-            tb.writeJavaFiles(libSrc, code);\n-        }\n-\n@@ -789,6 +808,14 @@\n-        new JavacTask(tb)\n-                .options(\"--enable-preview\",\n-                         \"-source\", JAVA_VERSION)\n-                .outdir(libClasses)\n-                .files(tb.findJavaFiles(libSrc))\n-                .run();\n+        if (libraryCode.length != 0) {\n+            Path libSrc = current.resolve(\"lib-src\");\n+\n+            for (String code : libraryCode) {\n+                tb.writeJavaFiles(libSrc, code);\n+            }\n+\n+            new JavacTask(tb)\n+                    .options(\"--enable-preview\",\n+                             \"-source\", JAVA_VERSION)\n+                    .outdir(libClasses)\n+                    .files(tb.findJavaFiles(libSrc))\n+                    .run();\n+        }\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":39,"deletions":12,"binary":false,"changes":51,"status":"modified"}]}