{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.HashMap;\n@@ -87,0 +88,6 @@\n+    \/**\n+     * Mapping from output file name to class name, for all classes we've written.\n+     * This is used to detect when two classes generate the same output file.\n+     *\/\n+    private final HashMap<String, String> filesWritten = new HashMap<>();\n+\n@@ -186,3 +193,8 @@\n-        FileObject outFile\n-            = fileManager.getFileForOutput(outLocn,\n-                \"\", className.replaceAll(\"[.$]\", \"_\") + \".h\", null);\n+        String fileName = className.replaceAll(\"[.$]\", \"_\") + \".h\";\n+        String prevName = filesWritten.put(fileName, className);\n+        if (prevName != null) {\n+            throw new IOException(String.format(\n+              \"native header file collision between %s and %s (both generate %s)\",\n+              prevName, className, fileName));\n+        }\n+        FileObject outFile = fileManager.getFileForOutput(outLocn, \"\", fileName, null);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/JNIWriter.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7150368 8003412 8000407\n+ * @bug 7150368 8003412 8000407 7016187\n@@ -152,0 +152,26 @@\n+    @Test\n+    void conflictTest(RunKind rk, GenKind gk) throws Exception {\n+\n+        \/\/ These two classes will generate the same header file \"Foo_Bar.h\"\n+        List<File> files = new ArrayList<File>();\n+        files.add(createFile(\"p\/Foo.java\", \"\"\"\n+            public class Foo {\n+                public static class Bar {\n+                    public static native void method1();\n+                }\n+            }\n+        \"\"\"));\n+        files.add(createFile(\"p\/Foo_Bar.java\", \"\"\"\n+            public class Foo_Bar {\n+                public static native void method2();\n+            }\n+        \"\"\"));\n+\n+        try {\n+            test(rk, gk, files, null);\n+            throw new AssertionError(\"expected failure\");\n+        } catch (Exception e) {\n+            \/\/ expected\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/nativeHeaders\/NativeHeaderTest.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}