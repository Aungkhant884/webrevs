[{"commit":{"message":"Add copyright headers."},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShort.java"}],"sha":"9fe25c047f80ed49bf7db33d0c099c2f43dd0076"},{"commit":{"message":"Adding micro benchmarks\n\n# Optimized\nBenchmark                                  (size)  Mode  Cnt       Score     Error  Units\nTestLoadStoreShort.array                  1048576  avgt   30   20729.206 ? 113.531  ns\/op\nTestLoadStoreShort.array                    16384  avgt   30     274.495 ?  20.187  ns\/op\nTestLoadStoreShort.arrayAdd               1048576  avgt   30   21257.633 ? 212.117  ns\/op\nTestLoadStoreShort.arrayAdd                 16384  avgt   30     261.173 ?   6.402  ns\/op\nTestLoadStoreShort.bufferHeap             1048576  avgt   30   78329.120 ? 222.094  ns\/op\nTestLoadStoreShort.bufferHeap               16384  avgt   30    1200.676 ?  14.305  ns\/op\nTestLoadStoreShort.bufferNative           1048576  avgt   30   78474.449 ? 262.780  ns\/op\nTestLoadStoreShort.bufferNative             16384  avgt   30    1207.160 ?   2.784  ns\/op\nTestLoadStoreShort.bufferNativeAdd        1048576  avgt   30   80076.777 ? 586.137  ns\/op\nTestLoadStoreShort.bufferNativeAdd          16384  avgt   30    1207.525 ?   7.332  ns\/op\nTestLoadStoreShort.bufferSegmentConfined  1048576  avgt   30  100749.706 ? 591.570  ns\/op\nTestLoadStoreShort.bufferSegmentConfined    16384  avgt   30    1113.044 ?   7.862  ns\/op\nTestLoadStoreShort.bufferSegmentImplicit  1048576  avgt   30  112926.546 ? 460.734  ns\/op\nTestLoadStoreShort.bufferSegmentImplicit    16384  avgt   30    1712.764 ?   9.556  ns\/op\nTestLoadStoreShort.vectAdd1               1048576  avgt   30   60954.285 ? 643.489  ns\/op\nTestLoadStoreShort.vectAdd1                 16384  avgt   30     783.505 ?  47.268  ns\/op\nTestLoadStoreShort.vectAdd2               1048576  avgt   30   62970.011 ? 392.856  ns\/op\nTestLoadStoreShort.vectAdd2                 16384  avgt   30     818.670 ?  37.000  ns\/op\n\nBenchmark                                  (size)  Mode  Cnt       Score      Error  Units\nTestLoadStoreBytes.array                  1048576  avgt   30   25628.013 ?  585.134  ns\/op\nTestLoadStoreBytes.array                    16384  avgt   30     313.763 ?    4.118  ns\/op\nTestLoadStoreBytes.array2                 1048576  avgt   30   28210.376 ?  889.006  ns\/op\nTestLoadStoreBytes.array2                   16384  avgt   30     374.070 ?    3.979  ns\/op\nTestLoadStoreBytes.arrayAdd               1048576  avgt   30   26766.715 ?  569.497  ns\/op\nTestLoadStoreBytes.arrayAdd                 16384  avgt   30     356.223 ?    5.461  ns\/op\nTestLoadStoreBytes.arrayScalar            1048576  avgt   30   21411.246 ?  215.435  ns\/op\nTestLoadStoreBytes.arrayScalar              16384  avgt   30     202.638 ?    2.371  ns\/op\nTestLoadStoreBytes.bufferHeap             1048576  avgt   30   85093.456 ?  141.605  ns\/op\nTestLoadStoreBytes.bufferHeap               16384  avgt   30    1452.955 ?  181.239  ns\/op\nTestLoadStoreBytes.bufferHeapScalar       1048576  avgt   30  239887.128 ? 1157.807  ns\/op\nTestLoadStoreBytes.bufferHeapScalar         16384  avgt   30    3726.556 ?   14.778  ns\/op\nTestLoadStoreBytes.bufferNative           1048576  avgt   30   89906.578 ? 4178.711  ns\/op\nTestLoadStoreBytes.bufferNative             16384  avgt   30    1320.245 ?    5.761  ns\/op\nTestLoadStoreBytes.bufferNativeScalar     1048576  avgt   30  242911.915 ? 1036.925  ns\/op\nTestLoadStoreBytes.bufferNativeScalar       16384  avgt   30    3784.892 ?    9.545  ns\/op\nTestLoadStoreBytes.bufferSegmentConfined  1048576  avgt   30  112232.229 ?  333.270  ns\/op\nTestLoadStoreBytes.bufferSegmentConfined    16384  avgt   30    1717.749 ?  175.997  ns\/op\nTestLoadStoreBytes.bufferSegmentImplicit  1048576  avgt   30  116308.291 ?  771.860  ns\/op\nTestLoadStoreBytes.bufferSegmentImplicit    16384  avgt   30    1692.686 ?    7.616  ns\/op\nTestLoadStoreBytes.segmentImplicitScalar  1048576  avgt   30  733283.905 ? 3691.582  ns\/op\nTestLoadStoreBytes.segmentImplicitScalar    16384  avgt   30   11440.098 ?   55.731  ns\/op\nTestLoadStoreBytes.vectAdd1               1048576  avgt   30   34902.208 ?  639.553  ns\/op\nTestLoadStoreBytes.vectAdd1                 16384  avgt   30     542.248 ?   30.560  ns\/op\nTestLoadStoreBytes.vectAdd2               1048576  avgt   30   36448.084 ? 1032.608  ns\/op\nTestLoadStoreBytes.vectAdd2                 16384  avgt   30     509.069 ?   12.677  ns\/op\n\n# Max stride 8\n\nBenchmark                                  (size)  Mode  Cnt       Score     Error  Units\nTestLoadStoreShort.array                  1048576  avgt   30   21924.266 ? 260.754  ns\/op\nTestLoadStoreShort.array                    16384  avgt   30     308.362 ?  24.404  ns\/op\nTestLoadStoreShort.arrayAdd               1048576  avgt   30   21600.363 ? 284.365  ns\/op\nTestLoadStoreShort.arrayAdd                 16384  avgt   30     262.476 ?   3.419  ns\/op\nTestLoadStoreShort.bufferHeap             1048576  avgt   30   77870.222 ? 506.600  ns\/op\nTestLoadStoreShort.bufferHeap               16384  avgt   30    1162.587 ?   6.296  ns\/op\nTestLoadStoreShort.bufferNative           1048576  avgt   30   79973.889 ? 676.345  ns\/op\nTestLoadStoreShort.bufferNative             16384  avgt   30    1210.141 ?  11.058  ns\/op\nTestLoadStoreShort.bufferNativeAdd        1048576  avgt   30   79608.287 ? 552.371  ns\/op\nTestLoadStoreShort.bufferNativeAdd          16384  avgt   30    1215.755 ?   3.436  ns\/op\nTestLoadStoreShort.bufferSegmentConfined  1048576  avgt   30  100683.242 ? 553.136  ns\/op\nTestLoadStoreShort.bufferSegmentConfined    16384  avgt   30    1205.342 ?  51.870  ns\/op\nTestLoadStoreShort.bufferSegmentImplicit  1048576  avgt   30  112555.011 ? 542.466  ns\/op\nTestLoadStoreShort.bufferSegmentImplicit    16384  avgt   30    1738.978 ?  44.425  ns\/op\nTestLoadStoreShort.vectAdd1               1048576  avgt   30   62262.555 ? 531.741  ns\/op\nTestLoadStoreShort.vectAdd1                 16384  avgt   30     840.467 ?  21.841  ns\/op\nTestLoadStoreShort.vectAdd2               1048576  avgt   30   62643.137 ? 727.039  ns\/op\nTestLoadStoreShort.vectAdd2                 16384  avgt   30     798.146 ?  64.926  ns\/op\n\nBenchmark                                  (size)  Mode  Cnt       Score      Error  Units\nTestLoadStoreBytes.array                  1048576  avgt   30   28146.073 ?  655.025  ns\/op\nTestLoadStoreBytes.array                    16384  avgt   30     374.979 ?    5.568  ns\/op\nTestLoadStoreBytes.array2                 1048576  avgt   30   29526.235 ?  643.623  ns\/op\nTestLoadStoreBytes.array2                   16384  avgt   30     372.197 ?    2.318  ns\/op\nTestLoadStoreBytes.arrayAdd               1048576  avgt   30   29102.706 ?  337.768  ns\/op\nTestLoadStoreBytes.arrayAdd                 16384  avgt   30     371.534 ?    5.630  ns\/op\nTestLoadStoreBytes.arrayScalar            1048576  avgt   30   21157.252 ?  153.367  ns\/op\nTestLoadStoreBytes.arrayScalar              16384  avgt   30     198.908 ?    1.664  ns\/op\nTestLoadStoreBytes.bufferHeap             1048576  avgt   30   85498.846 ?  401.317  ns\/op\nTestLoadStoreBytes.bufferHeap               16384  avgt   30    1285.696 ?    7.873  ns\/op\nTestLoadStoreBytes.bufferHeapScalar       1048576  avgt   30  240052.206 ? 1020.145  ns\/op\nTestLoadStoreBytes.bufferHeapScalar         16384  avgt   30    3752.597 ?   12.535  ns\/op\nTestLoadStoreBytes.bufferNative           1048576  avgt   30   85093.972 ?  244.327  ns\/op\nTestLoadStoreBytes.bufferNative             16384  avgt   30    1296.797 ?    6.493  ns\/op\nTestLoadStoreBytes.bufferNativeScalar     1048576  avgt   30  238522.752 ?  571.675  ns\/op\nTestLoadStoreBytes.bufferNativeScalar       16384  avgt   30    3713.942 ?   13.707  ns\/op\nTestLoadStoreBytes.bufferSegmentConfined  1048576  avgt   30  109515.096 ?  536.842  ns\/op\nTestLoadStoreBytes.bufferSegmentConfined    16384  avgt   30    1444.239 ?   76.509  ns\/op\nTestLoadStoreBytes.bufferSegmentImplicit  1048576  avgt   30  114683.710 ?  763.426  ns\/op\nTestLoadStoreBytes.bufferSegmentImplicit    16384  avgt   30    1710.655 ?   68.046  ns\/op\nTestLoadStoreBytes.segmentImplicitScalar  1048576  avgt   30  722084.119 ? 4226.589  ns\/op\nTestLoadStoreBytes.segmentImplicitScalar    16384  avgt   30   11511.461 ?  418.509  ns\/op\nTestLoadStoreBytes.vectAdd1               1048576  avgt   30   36393.430 ?  865.503  ns\/op\nTestLoadStoreBytes.vectAdd1                 16384  avgt   30     712.802 ?    5.025  ns\/op\nTestLoadStoreBytes.vectAdd2               1048576  avgt   30   36823.597 ?  841.554  ns\/op\nTestLoadStoreBytes.vectAdd2                 16384  avgt   30     500.464 ?    4.657  ns\/op"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShort.java"}],"sha":"e7a94c5b51f28c5f4dbd74c6b53d08cb94a5b798"},{"commit":{"message":"Fix MIN2 assertion in debug builds."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"0445c1e4db3d26b3036d5d4e825439935fe763b6"},{"commit":{"message":"Fix compilation error in VS (win)"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"4a583d2687d939b6d846ca8ac25eca730146729d"},{"commit":{"message":"Fix assertion condition\nBetter note while abs should not be used."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"e150ddd82ca6652f737a7e899d20ffa02f7676d2"},{"commit":{"message":"Drop whitespace, again."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"16384c313b684b3a341a4d9f2365776a695800a2"},{"commit":{"message":"Set maximum stride size to be 1 << 2 or max vector size\n\nKeep overflow test if stride can overflow when doubling\nDrop diagnostic flag"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"c5be033d56725aaa476bb2bb1f5019fbfccd1f9b"},{"commit":{"message":"Drop whitespace"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"01cfea1f833fdfc972d82dd17db395df7d1f5283"},{"commit":{"message":"Put back feature switch"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"f286e97f615c0c3b21489e81672262bc3882cdb3"},{"commit":{"message":"Increase stride size to allow unrolling more loops\n\nThis increase allowed stride size for loop unrolling to almost maxium possible\nvalue which is around `max_jint \/  2 - 2`,\nso the value which will prevent overflow when stride is doubled in C2.\n\nThe motivation of this change is discussion and research about unrolling\nvector (SIMD) loops. In such a case stride size depends on elements size\nand machine size of vector for AVX256 and int stride size is 8,\nand loop unroll happens. However short vectors will not cause loop unroll.\n\n```\n    for (int i = 0; i < SPECIES.loopBound(longSize); i += SPECIES.length() \/* 8 for int, 16 for short *\/ ) {\n      var v = ShortVector.fromByteBuffer(SPECIES, srcBufferHeap, i << 1, ByteOrder.nativeOrder());\n      v.intoByteBuffer(dstBufferHeap, i << 1, ByteOrder.nativeOrder());\n    }\n```"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"}],"sha":"813bee95100d4ec58067c19276801219d099d6f4"}]