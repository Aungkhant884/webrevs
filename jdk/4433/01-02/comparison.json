{"files":[{"patch":"@@ -607,6 +607,6 @@\n-                return switch (chronoField) {\n-                    case DAY_OF_MONTH          -> ValueRange.of(1, lengthOfMonth());\n-                    case DAY_OF_YEAR           -> ValueRange.of(1, lengthOfYear());\n-                    case ALIGNED_WEEK_OF_MONTH -> ValueRange.of(1, getMonth() == Month.FEBRUARY && isLeapYear() == false ? 4 : 5);\n-                    case YEAR_OF_ERA           -> (getYear() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE));\n-                    default -> field.range();\n+                int n = switch (chronoField) {\n+                    case DAY_OF_MONTH -> lengthOfMonth();\n+                    case DAY_OF_YEAR -> lengthOfYear();\n+                    case ALIGNED_WEEK_OF_MONTH -> getMonth() == Month.FEBRUARY && !isLeapYear() ? 4 : 5;\n+                    case YEAR_OF_ERA -> Year.MAX_VALUE + (getYear() <= 0 ?  1 : 0);\n+                    default -> -1;\n@@ -614,0 +614,1 @@\n+                return (n == -1) ? field.range() : ValueRange.of(1, n);\n@@ -869,1 +870,1 @@\n-            case 2           -> (isLeapYear() ? 29 : 28);\n+            case 2 -> (isLeapYear() ? 29 : 28);\n@@ -871,1 +872,1 @@\n-            default          -> 31;\n+            default -> 31;\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1187,2 +1187,2 @@\n-                case HALF_DAYS -> plusDays(amountToAdd \/ 256).plusHours((amountToAdd % 256) * 12);\n-                default -> with(date.plus(amountToAdd, unit), time); \/\/ no overflow (256 is multiple of 2)\n+                case HALF_DAYS -> plusDays(amountToAdd \/ 256).plusHours((amountToAdd % 256) * 12); \/\/ no overflow (256 is multiple of 2)\n+                default -> with(date.plus(amountToAdd, unit), time);\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-            case FEBRUARY                         -> (leapYear ? 29 : 28);\n+            case FEBRUARY -> (leapYear ? 29 : 28);\n@@ -429,1 +429,1 @@\n-            default                               -> 31;\n+            default -> 31;\n@@ -444,1 +444,1 @@\n-            case FEBRUARY                         -> 28;\n+            case FEBRUARY -> 28;\n@@ -446,1 +446,1 @@\n-            default                               -> 31;\n+            default -> 31;\n@@ -461,1 +461,1 @@\n-            case FEBRUARY                         -> 29;\n+            case FEBRUARY -> 29;\n@@ -463,1 +463,1 @@\n-            default                               -> 31;\n+            default -> 31;\n@@ -491,0 +491,1 @@\n+            \/\/ otherwise (DECEMBER)\n","filename":"src\/java.base\/share\/classes\/java\/time\/Month.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -601,1 +601,2 @@\n-                case INSTANT_SECONDS -> throw new UnsupportedTemporalTypeException(\"Invalid field 'InstantSeconds' for get() method, use getLong() instead\");\n+                case INSTANT_SECONDS -> throw new UnsupportedTemporalTypeException(\"Invalid field \" +\n+                                         \"'InstantSeconds' for get() method, use getLong() instead\");\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -818,1 +818,2 @@\n-                case INSTANT_SECONDS -> throw new UnsupportedTemporalTypeException(\"Invalid field 'InstantSeconds' for get() method, use getLong() instead\");\n+                case INSTANT_SECONDS -> throw new UnsupportedTemporalTypeException(\"Invalid field \" +\n+                                         \"'InstantSeconds' for get() method, use getLong() instead\");\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -309,2 +309,2 @@\n-                case HALF_DAYS -> plusDays(amountToAdd \/ 256).plusHours((amountToAdd % 256) * 12);\n-                default -> with(date.plus(amountToAdd, unit), time); \/\/ no overflow (256 is multiple of 2)\n+                case HALF_DAYS -> plusDays(amountToAdd \/ 256).plusHours((amountToAdd % 256) * 12); \/\/ no overflow (256 is multiple of 2)\n+                default -> with(date.plus(amountToAdd, unit), time);\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoLocalDateTimeImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -540,2 +540,2 @@\n-                case DAY_OF_MONTH          -> ValueRange.of(1, 1, getMinimumMonthLength(), getMaximumMonthLength());\n-                case DAY_OF_YEAR           -> ValueRange.of(1, getMaximumDayOfYear());\n+                case DAY_OF_MONTH -> ValueRange.of(1, 1, getMinimumMonthLength(), getMaximumMonthLength());\n+                case DAY_OF_YEAR -> ValueRange.of(1, getMaximumDayOfYear());\n@@ -543,2 +543,2 @@\n-                case YEAR, YEAR_OF_ERA     -> ValueRange.of(getMinimumYear(), getMaximumYear());\n-                case ERA                   -> ValueRange.of(1, 1);\n+                case YEAR, YEAR_OF_ERA -> ValueRange.of(getMinimumYear(), getMaximumYear());\n+                case ERA -> ValueRange.of(1, 1);\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahChronology.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-            case YEAR_OF_ERA     -> {\n+            case YEAR_OF_ERA -> {\n@@ -324,1 +324,1 @@\n-            case YEAR            -> {\n+            case YEAR -> {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoChronology.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-            case YEAR_OF_ERA     -> {\n+            case YEAR_OF_ERA -> {\n@@ -360,1 +360,1 @@\n-            case YEAR            -> {\n+            case YEAR -> {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -318,2 +318,2 @@\n-            return switch (chronoField) {\n-                case PROLEPTIC_MONTH -> {\n+            switch (chronoField) {\n+                case PROLEPTIC_MONTH:\n@@ -321,7 +321,4 @@\n-                    yield  plusMonths(newValue - getProlepticMonth());\n-                }\n-                case YEAR_OF_ERA -> {\n-                    int nvalue = getChronology().range(chronoField).checkValidIntValue(newValue, chronoField);\n-                    yield with(isoDate.withYear((getProlepticYear() >= 1 ? nvalue : 1 - nvalue) - YEARS_DIFFERENCE));\n-                }\n-                case YEAR -> {\n+                    return plusMonths(newValue - getProlepticMonth());\n+                case YEAR_OF_ERA:\n+                case YEAR:\n+                case ERA: {\n@@ -329,1 +326,8 @@\n-                    yield with(isoDate.withYear(nvalue - YEARS_DIFFERENCE));\n+                    switch (chronoField) {\n+                        case YEAR_OF_ERA:\n+                            return with(isoDate.withYear((getProlepticYear() >= 1 ? nvalue : 1 - nvalue)  - YEARS_DIFFERENCE));\n+                        case YEAR:\n+                            return with(isoDate.withYear(nvalue - YEARS_DIFFERENCE));\n+                        case ERA:\n+                            return with(isoDate.withYear((1 - getProlepticYear()) - YEARS_DIFFERENCE));\n+                    }\n@@ -331,4 +335,2 @@\n-                case ERA -> with(isoDate.withYear((1 - getProlepticYear()) - YEARS_DIFFERENCE));\n-\n-                default -> with(isoDate.with(field, newValue));\n-            };\n+            }\n+            return with(isoDate.with(field, newValue));\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistDate.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -4964,3 +4964,4 @@\n-            return switch (chr) {\n-                case 'Y' -> {\n-                    var field = weekDef.weekBasedYear();\n+            TemporalField field = null;\n+            switch (chr) {\n+                case 'Y':\n+                    field = weekDef.weekBasedYear();\n@@ -4968,1 +4969,1 @@\n-                        yield new ReducedPrinterParser(field, 2, 2, 0, ReducedPrinterParser.BASE_DATE,\n+                        return new ReducedPrinterParser(field, 2, 2, 0, ReducedPrinterParser.BASE_DATE,\n@@ -4971,1 +4972,1 @@\n-                        yield new NumberPrinterParser(field, count, 19,\n+                        return new NumberPrinterParser(field, count, 19,\n@@ -4975,18 +4976,15 @@\n-                }\n-                case 'e', 'c' -> {\n-                    var field = weekDef.dayOfWeek();\n-                    yield new NumberPrinterParser(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE,\n-                            this.subsequentWidth);\n-                }\n-                case 'w' -> {\n-                    var field = weekDef.weekOfWeekBasedYear();\n-                    yield new NumberPrinterParser(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE,\n-                            this.subsequentWidth);\n-                }\n-                case 'W' -> {\n-                    var field = weekDef.weekOfMonth();\n-                    yield new NumberPrinterParser(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE,\n-                            this.subsequentWidth);\n-                }\n-                default -> throw new IllegalStateException(\"unreachable\");\n-            };\n+                case 'e':\n+                case 'c':\n+                    field = weekDef.dayOfWeek();\n+                    break;\n+                case 'w':\n+                    field = weekDef.weekOfWeekBasedYear();\n+                    break;\n+                case 'W':\n+                    field = weekDef.weekOfMonth();\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"unreachable\");\n+            }\n+            return new NumberPrinterParser(field, minWidth, maxWidth, SignStyle.NOT_NEGATIVE,\n+                    this.subsequentWidth);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -127,5 +127,3 @@\n-            \/\/ valid if negative or (positive and lenient)\n-            case 0      -> !positive || !strict;\/\/ NORMAL\n-            case 1,   4 -> true; \/\/ ALWAYS, EXCEEDS_PAD\n-            \/\/ valid if lenient and not fixed width\n-            default     -> !strict && !fixedWidth;\n+            case 0    -> !positive || !strict; \/\/ NORMAL - valid if negative or (positive and lenient)\n+            case 1, 4 -> true; \/\/ ALWAYS, EXCEEDS_PAD\n+            default   -> !strict && !fixedWidth; \/\/ valid if lenient and not fixed width\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/SignStyle.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}