{"files":[{"patch":"@@ -304,0 +304,1 @@\n+                TypeAnnotation[] typeAnnotations = l.toArray(EMPTY_TYPE_ANNOTATION_ARRAY);\n@@ -306,3 +307,3 @@\n-                        l.toArray(EMPTY_TYPE_ANNOTATION_ARRAY),\n-                        candidates.toArray(EMPTY_TYPE_ANNOTATION_ARRAY),\n-                        (AnnotatedElement)decl);\n+                        typeAnnotations,\n+                        typeAnnotations,\n+                        decl);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/TypeAnnotationParser.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8202473\n+ * @summary Annotations on type variables with multiple bounds should be placed on their respective bound\n+ * @compile  TypeVariableBoundParameterIndex.java\n+ * @run main TypeVariableBoundParameterIndex\n+ *\/\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.TypeVariable;\n+import java.util.concurrent.Callable;\n+\n+\/*\n+ * A class might have multiple bounds as parameterized types with type annotations on these bounds.\n+ * This test assures that these bound annotations are resolved correctly.\n+ *\/\n+public class TypeVariableBoundParameterIndex {\n+\n+    public static void main(String[] args) throws Exception {\n+        TypeVariable<?>[] variables = Sample.class.getTypeParameters();\n+\n+        for (int i = 0; i < 2; i++) {\n+            TypeVariable<?> variable = variables[i];\n+            AnnotatedType[] bounds = variable.getAnnotatedBounds();\n+            AnnotatedType bound = bounds[0];\n+            AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) bound;\n+            AnnotatedType[] actualTypeArguments = parameterizedType.getAnnotatedActualTypeArguments();\n+            Annotation[] annotations = actualTypeArguments[0].getAnnotations();\n+            if (annotations.length != 1 || annotations[0].annotationType() != TypeAnnotation.class) {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        TypeVariable<?> variable = variables[2];\n+        AnnotatedType[] bounds = variable.getAnnotatedBounds();\n+        AnnotatedType bound = bounds[0];\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) bound;\n+        AnnotatedType[] actualTypeArguments = parameterizedType.getAnnotatedActualTypeArguments();\n+        Annotation[] annotations = actualTypeArguments[0].getAnnotations();\n+        if (annotations.length != 0) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+\n+    static class Sample<T extends Callable<@TypeAnnotation ?>, S extends Callable<@TypeAnnotation ?>, U extends Callable<?>> { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TypeVariableBoundParameterIndex.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}