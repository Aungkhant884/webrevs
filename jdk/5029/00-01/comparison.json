{"files":[{"patch":"@@ -332,1 +332,3 @@\n-bool ZMark::drain(ZMarkContext* context, ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks, T* timeout) {\n+bool ZMark::drain(ZMarkContext* context, T* timeout) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n@@ -350,1 +352,4 @@\n-bool ZMark::try_steal_local(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+bool ZMark::try_steal_local(ZMarkContext* context) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n+\n@@ -367,1 +372,4 @@\n-bool ZMark::try_steal_global(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+bool ZMark::try_steal_global(ZMarkContext* context) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n+\n@@ -384,2 +392,2 @@\n-bool ZMark::try_steal(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n-  return try_steal_local(stripe, stacks) || try_steal_global(stripe, stacks);\n+bool ZMark::try_steal(ZMarkContext* context) {\n+  return try_steal_local(context) || try_steal_global(context);\n@@ -503,1 +511,1 @@\n-void ZMark::work_without_timeout(ZMarkContext* context, ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+void ZMark::work_without_timeout(ZMarkContext* context) {\n@@ -508,1 +516,1 @@\n-    if (!drain(context, stripe, stacks, &no_timeout)) {\n+    if (!drain(context, &no_timeout)) {\n@@ -513,1 +521,1 @@\n-    if (try_steal(stripe, stacks)) {\n+    if (try_steal(context)) {\n@@ -568,1 +576,1 @@\n-void ZMark::work_with_timeout(ZMarkContext* context, ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks, uint64_t timeout_in_micros) {\n+void ZMark::work_with_timeout(ZMarkContext* context, uint64_t timeout_in_micros) {\n@@ -573,1 +581,1 @@\n-    if (!drain(context, stripe, stacks, &timeout)) {\n+    if (!drain(context, &timeout)) {\n@@ -578,1 +586,1 @@\n-    if (try_steal(stripe, stacks)) {\n+    if (try_steal(context)) {\n@@ -589,1 +597,0 @@\n-  ZMarkContext context(_stripes.nstripes());\n@@ -592,0 +599,1 @@\n+  ZMarkContext context(_stripes.nstripes(), stripe, stacks);\n@@ -594,1 +602,1 @@\n-    work_without_timeout(&context, stripe, stacks);\n+    work_without_timeout(&context);\n@@ -596,1 +604,1 @@\n-    work_with_timeout(&context, stripe, stacks, timeout_in_micros);\n+    work_with_timeout(&context, timeout_in_micros);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -69,7 +69,4 @@\n-  template <typename T> bool drain(ZMarkContext* context,\n-                                   ZMarkStripe* stripe,\n-                                   ZMarkThreadLocalStacks* stacks,\n-                                   T* timeout);\n-  bool try_steal_local(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n-  bool try_steal_global(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n-  bool try_steal(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n+  template <typename T> bool drain(ZMarkContext* context, T* timeout);\n+  bool try_steal_local(ZMarkContext* context);\n+  bool try_steal_global(ZMarkContext* context);\n+  bool try_steal(ZMarkContext* context);\n@@ -87,7 +84,2 @@\n-  void work_without_timeout(ZMarkContext* context,\n-                            ZMarkStripe* stripe,\n-                            ZMarkThreadLocalStacks* stacks);\n-  void work_with_timeout(ZMarkContext* context,\n-                         ZMarkStripe* stripe,\n-                         ZMarkThreadLocalStacks* stacks,\n-                         uint64_t timeout_in_micros);\n+  void work_without_timeout(ZMarkContext* context);\n+  void work_with_timeout(ZMarkContext* context, uint64_t timeout_in_micros);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.hpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/z\/zMarkContext.hpp\"\n-\n-ZMarkContext::ZMarkContext(size_t nstripes) :\n-    _cache(nstripes),\n-    _string_dedup_requests() {}\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.cpp","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -31,0 +31,3 @@\n+class ZMarkStripe;\n+class ZMarkThreadLocalStacks;\n+\n@@ -33,2 +36,4 @@\n-  ZMarkCache            _cache;\n-  StringDedup::Requests _string_dedup_requests;\n+  ZMarkCache                    _cache;\n+  ZMarkStripe* const            _stripe;\n+  ZMarkThreadLocalStacks* const _stacks;\n+  StringDedup::Requests         _string_dedup_requests;\n@@ -37,1 +42,7 @@\n-  ZMarkContext(size_t nstripes);\n+  ZMarkContext(size_t nstripes,\n+               ZMarkStripe* stripe,\n+               ZMarkThreadLocalStacks* stacks);\n+\n+  ZMarkStripe* stripe();\n+\n+  ZMarkThreadLocalStacks* stacks();\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,0 +31,16 @@\n+inline ZMarkContext::ZMarkContext(size_t nstripes,\n+                                  ZMarkStripe* stripe,\n+                                  ZMarkThreadLocalStacks* stacks) :\n+    _cache(nstripes),\n+    _stripe(stripe),\n+    _stacks(stacks),\n+    _string_dedup_requests() {}\n+\n+inline ZMarkStripe* ZMarkContext::stripe() {\n+  return _stripe;\n+}\n+\n+inline ZMarkThreadLocalStacks* ZMarkContext::stacks() {\n+  return _stacks;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.inline.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}