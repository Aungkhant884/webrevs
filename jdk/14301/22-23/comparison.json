{"files":[{"patch":"@@ -48,55 +48,0 @@\n-    \/\/ setup to ensure each test runs under a new thread, to preclude\n-    \/\/ stale interrupts from changing expected close() behavior\n-\n-    static abstract class TestAction {\n-        abstract void run() throws Exception;\n-    }\n-    static final class CheckedAction implements Runnable {\n-        final TestAction action;\n-        volatile Exception error;\n-        CheckedAction(TestAction a) { action = a; }\n-        public void run() {\n-            try {\n-                action.run();\n-            } catch (Exception ex) {\n-                error = ex;\n-            }\n-        }\n-    }\n-\n-    \/\/ Avoids unwanted interrupts when run inder jtreg\n-    static ThreadGroup topThreadGroup() {\n-        ThreadGroup g = Thread.currentThread().getThreadGroup();\n-        for (ThreadGroup p;;) {\n-            try {\n-                p = g.getParent();\n-            } catch (Exception ok) { \/\/ possible under SecurityManager\n-                break;\n-            }\n-            if (p == null)\n-                break;\n-            g = p;\n-        }\n-        return g;\n-    }\n-    static final ThreadGroup closeTestThreadGroup =\n-        new ThreadGroup(topThreadGroup(), \"closeTestThreadGroup\");\n-    static void testInNewThread(TestAction a) throws Exception {\n-        var wrapper =  new CheckedAction(a);\n-        try {\n-            Thread t = new Thread(closeTestThreadGroup, wrapper);\n-            t.start();\n-            for (;;) { \/\/ ignore stray test harness exceptions\n-                try {\n-                    t.join();\n-                    break;\n-                } catch (InterruptedException ignode) {\n-                }\n-            }\n-        } finally {\n-            Exception e = wrapper.error;\n-            if (e != null)\n-                throw e;\n-        }\n-    }\n-\n@@ -121,6 +66,4 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            executor.close();\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-        }});\n+        executor.close();\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n@@ -135,12 +78,14 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> future = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            executor.close();  \/\/ waits for task to complete\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-            assertEquals(\"foo\", future.resultNow());\n-        }});\n+        Phaser phaser = new Phaser(2);\n+        Future<?> future = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"foo\";\n+        });\n+        phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n+\n+        executor.close();  \/\/ waits for task to complete\n+        assertFalse(Thread.interrupted());\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        assertEquals(\"foo\", future.resultNow());\n@@ -155,12 +100,14 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> future = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            executor.shutdown();\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.awaitTermination(1000,  TimeUnit.MILLISECONDS));\n-            assertTrue(executor.isTerminated());\n-            assertEquals(\"foo\", future.resultNow());\n-        }});\n+        Phaser phaser = new Phaser(2);\n+        Future<?> future = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"foo\";\n+        });\n+        phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n+\n+        executor.shutdown();\n+        assertFalse(Thread.interrupted());\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.awaitTermination(1,  TimeUnit.MINUTES));\n+        assertTrue(executor.isTerminated());\n+        assertEquals(\"foo\", future.resultNow());\n@@ -175,17 +122,20 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> f1 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            Future<?> f2 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"bar\";\n-                });\n-            executor.close();  \/\/ waits for task to complete\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-            assertEquals(\"foo\", f1.resultNow());\n-            assertEquals(\"bar\", f2.resultNow());\n-        }});\n+        Phaser phaser = new Phaser(3);\n+        Future<?> f1 = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"foo\";\n+        });\n+        Future<?> f2 = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"bar\";\n+        });\n+        phaser.arriveAndAwaitAdvance();   \/\/ wait for tasks to start\n+\n+        executor.close();  \/\/ waits for task to complete\n+        assertFalse(Thread.interrupted());\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        assertEquals(\"foo\", f1.resultNow());\n+        assertEquals(\"bar\", f2.resultNow());\n@@ -200,17 +150,20 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> f1 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            Future<?> f2 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"bar\";\n-                });\n-            executor.shutdown();\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.awaitTermination(1000,  TimeUnit.MILLISECONDS));\n-            assertTrue(executor.isTerminated());\n-            assertEquals(\"foo\", f1.resultNow());\n-            assertEquals(\"bar\", f2.resultNow());\n-        }});\n+        Phaser phaser = new Phaser(3);\n+        Future<?> f1 = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"foo\";\n+        });\n+        Future<?> f2 = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"bar\";\n+        });\n+        phaser.arriveAndAwaitAdvance();   \/\/ wait for tasks to start\n+\n+        executor.shutdown();\n+        assertFalse(Thread.interrupted());\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.awaitTermination(1,  TimeUnit.MINUTES));\n+        assertTrue(executor.isTerminated());\n+        assertEquals(\"foo\", f1.resultNow());\n+        assertEquals(\"bar\", f2.resultNow());\n@@ -225,15 +178,21 @@\n-         testInNewThread(new TestAction() { void run() throws Exception {\n-             Phaser phaser = new Phaser(2);\n-             Future<?> future = executor.submit(() -> {\n-                     phaser.arriveAndAwaitAdvance();\n-                     Thread.sleep(Duration.ofMillis(100));\n-                     return \"foo\";\n-                 });\n-             phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n-             executor.shutdown();  \/\/ shutdown, will not immediately terminate\n-             executor.close();\n-             assertTrue(executor.isShutdown());\n-             assertTrue(executor.isTerminated());\n-             assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-             assertEquals(\"foo\", future.resultNow());\n-        }});\n+        Phaser phaser = new Phaser(2);\n+        Future<?> future = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofMillis(100));\n+            return \"foo\";\n+        });\n+        phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n+\n+        executor.shutdown();  \/\/ shutdown, will not immediately terminate\n+        executor.close();\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        try {\n+            Object s = future.resultNow();\n+            assertEquals(\"foo\", s);\n+        } catch (Exception e) {\n+            System.err.println(\"future => \" + future.state());\n+            e.printStackTrace();\n+            fail();\n+        }\n@@ -248,8 +207,6 @@\n-         testInNewThread(new TestAction() { void run() throws Exception {\n-             executor.shutdown();\n-             assertTrue(executor.isTerminated());\n-             executor.close();\n-             assertTrue(executor.isShutdown());\n-             assertTrue(executor.isTerminated());\n-             assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-        }});\n+        executor.shutdown();\n+        assertTrue(executor.isTerminated());\n+        executor.close();\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n@@ -264,20 +221,19 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Phaser phaser = new Phaser(2);\n-            Future<?> future = executor.submit(() -> {\n-                    phaser.arriveAndAwaitAdvance();\n-                    Thread.sleep(Duration.ofDays(1));\n-                    return null;\n-                });\n-            phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n-            Thread.currentThread().interrupt();\n-            try {\n-                executor.close();\n-                assertTrue(Thread.currentThread().isInterrupted());\n-            } finally {\n-                Thread.interrupted();  \/\/ clear interrupt status\n-            }\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n-            assertThrows(ExecutionException.class, future::get);\n-        }});\n+        Phaser phaser = new Phaser(2);\n+        Future<?> future = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofDays(1));\n+            return null;\n+        });\n+        phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n+\n+        Thread.currentThread().interrupt();\n+        try {\n+            executor.close();\n+            assertTrue(Thread.currentThread().isInterrupted());\n+        } finally {\n+            Thread.interrupted();  \/\/ clear interrupt status\n+        }\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n+        assertThrows(ExecutionException.class, future::get);\n@@ -292,16 +248,11 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Phaser phaser = new Phaser(2);\n-            Future<?> future = executor.submit(() -> {\n-                    phaser.arriveAndAwaitAdvance();\n-                    Thread.sleep(Duration.ofDays(1));\n-                    return null;\n-                });\n-            phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n-            \/\/ schedule main thread to be interrupted\n-            Thread thread = Thread.currentThread();\n-            new Thread(() -> {\n-                    try {\n-                        Thread.sleep( Duration.ofMillis(100));\n-                    } catch (Exception ignore) { }\n-                    thread.interrupt();\n-            }).start();\n+        Phaser phaser = new Phaser(2);\n+        Future<?> future = executor.submit(() -> {\n+            phaser.arriveAndAwaitAdvance();\n+            Thread.sleep(Duration.ofDays(1));\n+            return null;\n+        });\n+        phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n+\n+        \/\/ schedule main thread to be interrupted\n+        Thread thread = Thread.currentThread();\n+        new Thread(() -> {\n@@ -309,10 +260,14 @@\n-                executor.close();\n-                assertTrue(Thread.currentThread().isInterrupted());\n-            } finally {\n-                Thread.interrupted();  \/\/ clear interrupt status\n-            }\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n-            assertThrows(ExecutionException.class, future::get);\n-        }});\n+                Thread.sleep( Duration.ofMillis(100));\n+            } catch (Exception ignore) { }\n+            thread.interrupt();\n+        }).start();\n+        try {\n+            executor.close();\n+            assertTrue(Thread.currentThread().isInterrupted());\n+        } finally {\n+            Thread.interrupted();  \/\/ clear interrupt status\n+        }\n+        assertTrue(executor.isShutdown());\n+        assertTrue(executor.isTerminated());\n+        assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n+        assertThrows(ExecutionException.class, future::get);\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":143,"deletions":188,"binary":false,"changes":331,"status":"modified"}]}