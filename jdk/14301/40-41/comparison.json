{"files":[{"patch":"@@ -1295,1 +1295,1 @@\n-         * @throws RejectedExecutionException if array cannot be resized\n+         * @throws RejectedExecutionException if array could not be resized\n@@ -1300,14 +1300,6 @@\n-            if ((a = array) != null && (cap = a.length) > 0) {\n-                if ((room = (m = cap - 1) - (s - base)) == 0)\n-                    growAndPush(task, a, s, internal);\n-                else {\n-                    long pos = slotOffset(m & s);\n-                    if (internal)\n-                        U.getAndSetReference(a, pos, task);    \/\/ fully fenced\n-                    else {\n-                        U.putReference(a, pos, task);          \/\/ inside lock\n-                        unlockPhase();\n-                    }\n-                }\n-                if ((room == 0 || a[m & (s - 1)] == null) && pool != null)\n-                    pool.signalWork();\n+            if ((a = array) == null || (cap = a.length) <= 0 ||\n+                (room = (m = cap - 1) - (s - base)) < 0) {\n+                top = s;                              \/\/ revert on failure\n+                if (!internal)\n+                    unlockPhase();\n+                throw new RejectedExecutionException(\"Queue capacity exceeded\");\n@@ -1315,16 +1307,9 @@\n-        }\n-\n-        \/**\n-         * Grows the task array if possible and adds the task.\n-         * @param a the current task array\n-         * @param s the old top value\n-         *\/\n-        private void growAndPush(ForkJoinTask<?> task, ForkJoinTask<?>[] a,\n-                                 int s, boolean internal) {\n-            U.storeFence();                  \/\/ ensure task publishable\n-            int cap;                         \/\/ rapidly grow until large\n-            if (a != null && (cap = a.length) > 0) {\n-                int newCap = (cap < 1 << 24) ? cap << 2 : cap << 1;\n-                int newMask = newCap - 1, k = s, b = k - cap, m = cap - 1;\n-                if (newCap > 0) {\n-                    ForkJoinTask<?>[] newArray = null;\n+            long pos = slotOffset(m & s);\n+            if (!internal)\n+                U.putReference(a, pos, task);         \/\/ inside lock\n+            else\n+                U.getAndSetReference(a, pos, task);   \/\/ fully fenced\n+            if (room == 0) {                          \/\/ resize for next time\n+                int newCap;                           \/\/ rapidly grow until large\n+                ForkJoinTask<?>[] newArray = null;\n+                if ((newCap = (cap < 1 << 24) ? cap << 2 : cap << 1) > 0) {\n@@ -1335,11 +1320,0 @@\n-                    if (newArray != null) {\n-                        do { \/\/ poll old, push to new; exit if lose to pollers\n-                            newArray[k & newMask] = task;\n-                        } while (--k != b &&\n-                                 (task = (ForkJoinTask<?>)U.getAndSetReference(\n-                                     a, slotOffset(k & m), null)) != null);\n-                        updateArray(newArray);\n-                        if (!internal)\n-                            unlockPhase();\n-                        return;\n-                    }\n@@ -1347,0 +1321,9 @@\n+                if (newArray != null) {               \/\/ poll old, push to new\n+                    for (int nm = newCap - 1, k = s, j = cap; j > 0; --j, --k) {\n+                        if ((newArray[k & nm] =\n+                             (ForkJoinTask<?>)U.getAndSetReference(\n+                                 a, slotOffset(k & m), null)) == null)\n+                            break;                    \/\/ lost to pollers\n+                    }\n+                    updateArray(newArray);            \/\/ fully fenced\n+                } \/\/ else will throw on next push unless tasks taken\n@@ -1348,1 +1331,0 @@\n-            top = s; \/\/ revert on failure\n@@ -1351,1 +1333,3 @@\n-            throw new RejectedExecutionException(\"Queue capacity exceeded\");\n+            if ((room == 0 || room == m || a[m & (s - 1)] == null) &&\n+                pool != null)\n+                pool.signalWork();\n@@ -1634,2 +1618,1 @@\n-         * Sets closed status, interrupts if a worker, and unless\n-         * already closed, cancels tasks,\n+         * Sets closed status, interrupts if a worker, and cancels tasks,\n@@ -1648,6 +1631,4 @@\n-            if (wasClosed == 0) {\n-                for (ForkJoinTask<?> t; (t = poll(null)) != null; ) {\n-                    try {\n-                        t.cancel(false);\n-                    } catch (Throwable ignore) {\n-                    }\n+            for (ForkJoinTask<?> t; (t = poll(null)) != null; ) {\n+                try {\n+                    t.cancel(false);\n+                } catch (Throwable ignore) {\n@@ -1941,6 +1922,4 @@\n-        if ((runState & STOP) == 0) {\n-            if (replaceable)\n-                signalWork(); \/\/ may replace unless trimmed or uninitialized\n-            if (ex != null)\n-                ForkJoinTask.rethrow(ex);\n-        }\n+        if ((runState & STOP) == 0 && replaceable)\n+            signalWork(); \/\/ may replace unless trimmed or uninitialized\n+        if (ex != null)\n+            ForkJoinTask.rethrow(ex);\n@@ -2020,1 +1999,1 @@\n-        for (;;) {\n+        outer: for (;;) {\n@@ -2038,1 +2017,1 @@\n-                                if ((i & 1) == 0)\n+                                if ((i & 1) == 0 && compareAndSetCtl(c, c))\n@@ -2040,1 +2019,3 @@\n-                                return false;\n+                                if (parallelism == 0)\n+                                    return false;\n+                                continue outer;\n@@ -2115,6 +2096,4 @@\n-                            if (a[k] == null) {   \/\/ revisit if nonempty\n-                                if (next >= 0L && \/\/  and resized or uncontended\n-                                    (q.array != a ||\n-                                     (!contended &&\n-                                      (a[nk] != null || q.top - b > 0))))\n-                                    next |= RESCAN;\n+                            if (a[k] == null) {\n+                                if (!contended && next >= 0L &&\n+                                    (a[nk] != null || q.top - b > 0))\n+                                    next |= RESCAN; \/\/ revisit\n@@ -2645,0 +2624,1 @@\n+        tryTerminate(false, false);\n@@ -2787,2 +2767,3 @@\n-                if (isShutdown != 0 && quiescent())\n-                    e = runState;\n+                if (isShutdown != 0)\n+                    quiescent();                 \/\/ may trigger STOP\n+                e = runState;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":50,"deletions":69,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -1632,5 +1632,2 @@\n-            Thread t = Thread.currentThread();\n-            if ((t instanceof ForkJoinWorkerThread) &&\n-                ForkJoinPool.poolIsStopping(((ForkJoinWorkerThread)t).pool))\n-                cancel(false);\n-            else {\n+            Thread t = runner = Thread.currentThread();\n+            try {\n@@ -1638,8 +1635,10 @@\n-                runner = t;\n-                try {\n-                    if (status >= 0)\n-                        setRawResult(compute());\n-                } catch (Exception ex) {\n-                   trySetException(ex);\n-                } finally {\n-                    runner = null;\n+                if ((t instanceof ForkJoinWorkerThread) &&\n+                    ForkJoinPool.poolIsStopping(((ForkJoinWorkerThread)t).pool))\n+                    cancel(true);\n+                else {\n+                    try {\n+                        if (status >= 0)\n+                            setRawResult(compute());\n+                    } catch (Exception ex) {\n+                        trySetException(ex);\n+                    }\n@@ -1647,0 +1646,2 @@\n+            } finally {\n+                runner = null;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinTask.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}