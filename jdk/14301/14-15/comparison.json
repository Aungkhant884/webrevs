{"files":[{"patch":"@@ -151,17 +151,19 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> f1 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            Future<?> f2 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"bar\";\n-                });\n-            executor.close();  \/\/ waits for task to complete\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.isTerminated());\n-            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-            assertEquals(\"foo\", f1.resultNow());\n-            assertEquals(\"bar\", f2.resultNow());\n-        }});\n+        if (executor instanceof ForkJoinPool) {\n+            testInNewThread(new TestAction() { void run() throws Exception {\n+                Future<?> f1 = executor.submit(() -> {\n+                        Thread.sleep(Duration.ofMillis(100));\n+                        return \"foo\";\n+                    });\n+                Future<?> f2 = executor.submit(() -> {\n+                        Thread.sleep(Duration.ofMillis(100));\n+                        return \"bar\";\n+                    });\n+                executor.close();  \/\/ waits for task to complete\n+                assertFalse(Thread.interrupted());\n+                assertTrue(executor.isShutdown());\n+                assertTrue(executor.isTerminated());\n+                assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+                assertEquals(\"foo\", f1.resultNow());\n+                assertEquals(\"bar\", f2.resultNow());\n+            }});\n+        }\n@@ -176,17 +178,19 @@\n-        testInNewThread(new TestAction() { void run() throws Exception {\n-            Future<?> f1 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"foo\";\n-                });\n-            Future<?> f2 = executor.submit(() -> {\n-                    Thread.sleep(Duration.ofMillis(100));\n-                    return \"bar\";\n-                });\n-            executor.shutdown();\n-            assertFalse(Thread.interrupted());\n-            assertTrue(executor.isShutdown());\n-            assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n-            assertTrue(executor.isTerminated());\n-            assertEquals(\"foo\", f1.resultNow());\n-            assertEquals(\"bar\", f2.resultNow());\n-        }});\n+        if (executor instanceof ForkJoinPool) {\n+            testInNewThread(new TestAction() { void run() throws Exception {\n+                Future<?> f1 = executor.submit(() -> {\n+                        Thread.sleep(Duration.ofMillis(100));\n+                        return \"foo\";\n+                    });\n+                Future<?> f2 = executor.submit(() -> {\n+                        Thread.sleep(Duration.ofMillis(100));\n+                        return \"bar\";\n+                    });\n+                executor.shutdown();\n+                assertFalse(Thread.interrupted());\n+                assertTrue(executor.isShutdown());\n+                assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n+                assertTrue(executor.isTerminated());\n+                assertEquals(\"foo\", f1.resultNow());\n+                assertEquals(\"bar\", f2.resultNow());\n+            }});\n+        }\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":38,"deletions":34,"binary":false,"changes":72,"status":"modified"}]}