{"files":[{"patch":"@@ -666,2 +666,2 @@\n-     * further arranges runState checks before executing task bodies, and\n-     * ensures interrupts while terminating. Even so, there are no\n+     * further arranges runState checks before executing task bodies,\n+     * and ensures interrupts while terminating. Even so, there are no\n@@ -670,3 +670,3 @@\n-     * Termination may fail to complete if running tasks repeatedly\n-     * ignore both task status and interrupts and\/or produce more\n-     * tasks after others that could cancel them have exited.\n+     * Termination may fail to complete if running tasks ignore both\n+     * task status and interrupts and\/or produce more tasks after\n+     * others that could cancel them have exited.\n@@ -1216,1 +1216,0 @@\n-        volatile int closed;       \/\/ nonzero if pool terminating or deregistered\n@@ -1236,1 +1235,0 @@\n-        private static final long CLOSED;\n@@ -1299,1 +1297,1 @@\n-            int s = top++, cap, m, room; ForkJoinTask<?>[] a;\n+            int s = top, b = base, cap, m, room; ForkJoinTask<?>[] a;\n@@ -1301,2 +1299,1 @@\n-                (room = (m = cap - 1) - (s - base)) < 0) {\n-                top = s;                              \/\/ revert on failure\n+                (room = (m = cap - 1) - (s - b)) < 0) { \/\/ could not resize\n@@ -1307,0 +1304,1 @@\n+            top = s + 1;\n@@ -1314,1 +1312,0 @@\n-                ForkJoinTask<?>[] newArray = null;\n@@ -1316,0 +1313,1 @@\n+                    ForkJoinTask<?>[] newArray = null;\n@@ -1320,7 +1318,9 @@\n-                }\n-                if (newArray != null) {               \/\/ poll old, push to new\n-                    for (int nm = newCap - 1, k = s, j = cap; j > 0; --j, --k) {\n-                        if ((newArray[k & nm] =\n-                             (ForkJoinTask<?>)U.getAndSetReference(\n-                                 a, slotOffset(k & m), null)) == null)\n-                            break;                    \/\/ lost to pollers\n+                    if (newArray != null) {           \/\/ else throw on next push\n+                        int newMask = newCap - 1;     \/\/ poll old, push to new\n+                        for (int k = s, j = cap; j > 0; --j, --k) {\n+                            if ((newArray[k & newMask] =\n+                                 (ForkJoinTask<?>)U.getAndSetReference(\n+                                     a, slotOffset(k & m), null)) == null)\n+                                break;                \/\/ lost to pollers\n+                        }\n+                        updateArray(newArray);        \/\/ fully fenced\n@@ -1328,2 +1328,1 @@\n-                    updateArray(newArray);            \/\/ fully fenced\n-                } \/\/ else will throw on next push unless tasks taken\n+                }\n@@ -1618,1 +1617,1 @@\n-         * Sets closed status, interrupts if a worker, and cancels tasks,\n+         * Unless already deregistered, interrupts if a worker, and cancels tasks\n@@ -1620,1 +1619,1 @@\n-        final void close() {\n+        final void onStop() {\n@@ -1622,7 +1621,6 @@\n-            int wasClosed = closed;\n-            if (wasClosed == 0)\n-                wasClosed = U.getAndSetInt(this, CLOSED, 1);\n-            if (o != null && (wasClosed == 0 || !o.isInterrupted())) {\n-                try {\n-                    o.interrupt();\n-                } catch (Throwable ignore) {\n+            if (source != DEREGISTERED) {\n+                if (o != null) {\n+                    try {\n+                        o.interrupt();\n+                    } catch (Throwable ignore) {\n+                    }\n@@ -1630,5 +1628,5 @@\n-            }\n-            for (ForkJoinTask<?> t; (t = poll(null)) != null; ) {\n-                try {\n-                    t.cancel(false);\n-                } catch (Throwable ignore) {\n+                for (ForkJoinTask<?> t; (t = poll(null)) != null; ) {\n+                    try {\n+                        t.cancel(false);\n+                    } catch (Throwable ignore) {\n+                    }\n@@ -1657,1 +1655,0 @@\n-            CLOSED = U.objectFieldOffset(klass, \"closed\");\n@@ -1886,1 +1883,0 @@\n-            w.closed = 1;\n@@ -1889,0 +1885,1 @@\n+                w.source = DEREGISTERED;\n@@ -2010,1 +2007,1 @@\n-                    WorkQueue[] qs = queues;\n+                    WorkQueue[] qs = queues; WorkQueue q;\n@@ -2013,1 +2010,0 @@\n-                        int p; WorkQueue q;\n@@ -2015,4 +2011,3 @@\n-                            if (((p = q.phase) & IDLE) == 0 ||\n-                                q.top - q.base > 0) {\n-                                if ((i & 1) == 0 && compareAndSetCtl(c, c))\n-                                    signalWork();         \/\/ ensure live\n+                            int p = q.phase, s = q.top, b = q.base;\n+                            sum += (p & 0xffffffffL) | ((long)b << 32);\n+                            if ((p & IDLE) == 0 || s - b > 0) {\n@@ -2021,0 +2016,2 @@\n+                                if ((i & 1) == 0 && compareAndSetCtl(c, c))\n+                                    signalWork();         \/\/ ensure live\n@@ -2023,1 +2020,0 @@\n-                            sum += p & 0xffffffffL;\n@@ -2029,1 +2025,3 @@\n-                         casRunState(e, (e & SHUTDOWN) != 0 ? e | STOP : e))\n+                         casRunState(e, (e & SHUTDOWN) != 0 ? e | STOP : e)) {\n+                    if ((e & SHUTDOWN) != 0)              \/\/ enable termination\n+                        interruptAll();\n@@ -2031,0 +2029,1 @@\n+                }\n@@ -2115,2 +2114,3 @@\n-                        else if (!running)\n-                            contended = (o == null);\n+                        else                      \/\/ limit retries on contention\n+                            contended = (o == null && !running &&\n+                                         q.array == a && a[nk] != null);\n@@ -2547,1 +2547,0 @@\n-        tryTerminate(false, false);\n@@ -2760,1 +2759,1 @@\n-        int e, isShutdown;\n+        int e, s, isShutdown;\n@@ -2762,2 +2761,5 @@\n-            if (now)\n-                runState = e = (lockRunState() + RS_LOCK) | STOP | SHUTDOWN;\n+            if (now) {\n+                runState = ((s = lockRunState()) + RS_LOCK) | STOP | SHUTDOWN;\n+                if ((s & STOP) == 0)\n+                    interruptAll();\n+            }\n@@ -2769,1 +2771,0 @@\n-                e = runState;\n@@ -2771,0 +2772,1 @@\n+            e = runState;\n@@ -2772,1 +2774,1 @@\n-        if ((e & (STOP | TERMINATED)) == STOP) { \/\/ help terminate\n+        if ((e & (STOP | TERMINATED)) == STOP) { \/\/ help cancel tasks\n@@ -2774,1 +2776,1 @@\n-            WorkQueue[] qs = queues; WorkQueue q;\n+            WorkQueue[] qs = queues;\n@@ -2777,2 +2779,9 @@\n-                if ((q = qs[r & SMASK & (n - 1)]) != null)\n-                    q.close();\n+                int j; WorkQueue q; ForkJoinTask<?> t;\n+                while ((q = qs[r & SMASK & (n - 1)]) != null &&\n+                       q.source != DEREGISTERED &&\n+                       (t = q.poll(null)) != null) {\n+                    try {\n+                        t.cancel(false);\n+                    } catch (Throwable ignore) {\n+                    }\n+                }\n@@ -2794,0 +2803,20 @@\n+    \/**\n+     * Interrupts all workers\n+     *\/\n+    private void interruptAll() {\n+        Thread current = Thread.currentThread();\n+        WorkQueue[] qs = queues;\n+        int n = (qs == null) ? 0 : qs.length;\n+        for (int i = 1; i < n; i += 2) {\n+            WorkQueue q; Thread o;\n+            if ((q = qs[i]) != null && (o = q.owner) != null && o != current &&\n+                q.source != DEREGISTERED) {\n+                try {\n+                    o.interrupt();\n+                } catch (Throwable ignore) {\n+                }\n+            }\n+        }\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":84,"deletions":55,"binary":false,"changes":139,"status":"modified"}]}