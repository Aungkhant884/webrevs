{"files":[{"patch":"@@ -1498,2 +1498,1 @@\n-        final void topLevelExec(ForkJoinTask<?> task, ForkJoinPool pool,\n-                                WorkQueue src, int srcId) {\n+        final void topLevelExec(ForkJoinTask<?> task, WorkQueue src, int srcId) {\n@@ -1506,8 +1505,0 @@\n-                Thread.interrupted();\n-                if (poolIsStopping(pool)) {\n-                    try {\n-                        task.cancel(false);\n-                    } catch (Throwable ignore) {\n-                    }\n-                    break;\n-                }\n@@ -1742,2 +1733,3 @@\n-    private boolean casTerminationSignal(CountDownLatch x) {\n-        return U.compareAndSetReference(this, TERMINATION, null, x);\n+    private CountDownLatch cmpExTerminationSignal(CountDownLatch x) {\n+        return (CountDownLatch)\n+            U.compareAndExchangeReference(this, TERMINATION, null, x);\n@@ -1893,1 +1885,0 @@\n-            Thread o = w.owner;\n@@ -1895,2 +1886,0 @@\n-            if (o == Thread.currentThread())\n-                Thread.interrupted();     \/\/ clear\n@@ -2131,1 +2120,1 @@\n-                                w.topLevelExec(t, this, q, j);\n+                                w.topLevelExec(t, q, j);\n@@ -2788,2 +2777,2 @@\n-        int e = runState, wasStopping = e & STOP, isShutdown;\n-        if (wasStopping == 0) {\n+        int e, isShutdown;\n+        if (((e = runState) & STOP) == 0) {\n@@ -2800,0 +2789,1 @@\n+            boolean alive = false;\n@@ -2803,1 +2793,0 @@\n-            boolean active = false;\n@@ -2807,3 +2796,3 @@\n-                    if ((o = q.owner) != null && o != Thread.currentThread()) {\n-                        active = true;\n-                        if (wasStopping == 0 || !o.isInterrupted()) {\n+                    if ((o = q.owner) != null) {\n+                        alive = true;\n+                        if (o != Thread.currentThread()) {\n@@ -2824,1 +2813,1 @@\n-            if (((e = runState) & TERMINATED) == 0 && !active && ctl == 0L) {\n+            if (((e = runState) & TERMINATED) == 0 && !alive && ctl == 0L) {\n@@ -2839,1 +2828,1 @@\n-     * Lazily constructs termination signal\n+     * Returns termination signal, constructing if necessary\n@@ -2842,5 +2831,4 @@\n-        CountDownLatch signal;\n-        do {\n-            signal = termination;\n-        } while (signal == null && \/\/ OK to throw away if CAS failure\n-                 !casTerminationSignal(signal = new CountDownLatch(1)));\n+        CountDownLatch signal, s, u;\n+        if ((signal = termination) == null)\n+            signal = ((u = cmpExTerminationSignal(\n+                           s = new CountDownLatch(1))) == null) ? s : u;\n@@ -3835,1 +3823,1 @@\n-            boolean interrupted = Thread.interrupted();\n+            boolean interrupted = false; \/\/ Thread.interrupted();\n@@ -3842,0 +3830,1 @@\n+                        break;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -66,0 +66,3 @@\n+    \/\/ Avoids unwanted interrupts when run inder jtreg\n+    static final ThreadGroup closeTestThreadGroup =\n+        new ThreadGroup(\"closeTestThreadGroup\");\n@@ -69,1 +72,1 @@\n-            Thread t = new Thread(wrapper);\n+            Thread t = new Thread(closeTestThreadGroup, wrapper);\n@@ -151,19 +154,17 @@\n-        if (executor instanceof ForkJoinPool) {\n-            testInNewThread(new TestAction() { void run() throws Exception {\n-                Future<?> f1 = executor.submit(() -> {\n-                        Thread.sleep(Duration.ofMillis(100));\n-                        return \"foo\";\n-                    });\n-                Future<?> f2 = executor.submit(() -> {\n-                        Thread.sleep(Duration.ofMillis(100));\n-                        return \"bar\";\n-                    });\n-                executor.close();  \/\/ waits for task to complete\n-                assertFalse(Thread.interrupted());\n-                assertTrue(executor.isShutdown());\n-                assertTrue(executor.isTerminated());\n-                assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-                assertEquals(\"foo\", f1.resultNow());\n-                assertEquals(\"bar\", f2.resultNow());\n-            }});\n-        }\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> f1 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            Future<?> f2 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"bar\";\n+                });\n+            executor.close();  \/\/ waits for task to complete\n+            assertFalse(Thread.interrupted());\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+            assertEquals(\"foo\", f1.resultNow());\n+            assertEquals(\"bar\", f2.resultNow());\n+        }});\n@@ -178,19 +179,17 @@\n-        if (executor instanceof ForkJoinPool) {\n-            testInNewThread(new TestAction() { void run() throws Exception {\n-                Future<?> f1 = executor.submit(() -> {\n-                        Thread.sleep(Duration.ofMillis(100));\n-                        return \"foo\";\n-                    });\n-                Future<?> f2 = executor.submit(() -> {\n-                        Thread.sleep(Duration.ofMillis(100));\n-                        return \"bar\";\n-                    });\n-                executor.shutdown();\n-                assertFalse(Thread.interrupted());\n-                assertTrue(executor.isShutdown());\n-                assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n-                assertTrue(executor.isTerminated());\n-                assertEquals(\"foo\", f1.resultNow());\n-                assertEquals(\"bar\", f2.resultNow());\n-            }});\n-        }\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> f1 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            Future<?> f2 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"bar\";\n+                });\n+            executor.shutdown();\n+            assertFalse(Thread.interrupted());\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n+            assertTrue(executor.isTerminated());\n+            assertEquals(\"foo\", f1.resultNow());\n+            assertEquals(\"bar\", f2.resultNow());\n+        }});\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":38,"deletions":39,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -519,0 +519,1 @@\n+                    assertTrue(pool != null && pool.isTerminated());\n@@ -521,1 +522,0 @@\n-                    assertTrue(pool != null && pool.isTerminated());\n@@ -536,0 +536,1 @@\n+                    assertTrue(pool.isTerminated());\n@@ -538,1 +539,0 @@\n-                    assertTrue(pool != null && pool.isTerminated());\n@@ -554,0 +554,1 @@\n+                    assertTrue(pool.isTerminated());\n@@ -556,1 +557,0 @@\n-                    assertTrue(pool != null && pool.isTerminated());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool19Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1650,0 +1650,4 @@\n+    \/\/ Avoids unwanted interrupts when run inder jtreg\n+    static final ThreadGroup jsr166TestThreadGroup =\n+        new ThreadGroup(\"jsr1666TestThreadGroup\");\n+\n@@ -1654,1 +1658,1 @@\n-        Thread t = new Thread(runnable);\n+        Thread t = new Thread(jsr166TestThreadGroup, runnable);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}