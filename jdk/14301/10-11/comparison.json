{"files":[{"patch":"@@ -48,0 +48,29 @@\n+    \/\/ setup to ensure each test runs under a new thread, to preclude\n+    \/\/ stale interrupts from changing expected close() behavior\n+\n+    static abstract class TestAction {\n+        abstract void run() throws Exception;\n+    }\n+    static final class CheckedAction implements Runnable {\n+        final TestAction action;\n+        volatile Exception error;\n+        CheckedAction(TestAction a) { action = a; }\n+        public void run() {\n+            try {\n+                a.run();\n+            } catch (Exception ex) {\n+                error = ex;\n+            }\n+        }\n+    }\n+    static void testInNewThread(TestAction a) throws Throawble {\n+        try {\n+            Thread t = new Thread(new CheckedAction(a));\n+            t.start();\n+            t.join();\n+        } finally {\n+            Exception e = a.error;\n+            if (e != null)\n+                throw e;\n+        }\n+    }\n@@ -66,4 +95,6 @@\n-        executor.close();\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            executor.close();\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        }});\n@@ -78,9 +109,11 @@\n-        Future<?> future = executor.submit(() -> {\n-            Thread.sleep(Duration.ofMillis(100));\n-            return \"foo\";\n-        });\n-        executor.close();  \/\/ waits for task to complete\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-        assertEquals(\"foo\", future.resultNow());\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> future = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            executor.close();  \/\/ waits for task to complete\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+            assertEquals(\"foo\", future.resultNow());\n+        }});\n@@ -95,15 +128,15 @@\n-        Phaser phaser = new Phaser(2);\n-        Future<?> future = executor.submit(() -> {\n-            phaser.arriveAndAwaitAdvance();\n-            Thread.sleep(Duration.ofMillis(100));\n-            return \"foo\";\n-        });\n-        phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n-\n-        executor.shutdown();  \/\/ shutdown, will not immediately terminate\n-\n-        executor.close();\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n-        assertEquals(\"foo\", future.resultNow());\n+         testInNewThread(new TestAction() { void run() throws Exception {\n+             Phaser phaser = new Phaser(2);\n+             Future<?> future = executor.submit(() -> {\n+                     phaser.arriveAndAwaitAdvance();\n+                     Thread.sleep(Duration.ofMillis(100));\n+                     return \"foo\";\n+                 });\n+             phaser.arriveAndAwaitAdvance();   \/\/ wait for task to start\n+             executor.shutdown();  \/\/ shutdown, will not immediately terminate\n+             executor.close();\n+             assertTrue(executor.isShutdown());\n+             assertTrue(executor.isTerminated());\n+             assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+             assertEquals(\"foo\", future.resultNow());\n+        }});\n@@ -118,7 +151,8 @@\n-        executor.shutdown();\n-        assertTrue(executor.isTerminated());\n-\n-        executor.close();\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+         testInNewThread(new TestAction() { void run() throws Exception {\n+             executor.shutdown();\n+             assertTrue(executor.isTerminated());\n+             executor.close();\n+             assertTrue(executor.isShutdown());\n+             assertTrue(executor.isTerminated());\n+             assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+        }});\n@@ -133,19 +167,20 @@\n-        Phaser phaser = new Phaser(2);\n-        Future<?> future = executor.submit(() -> {\n-            phaser.arriveAndAwaitAdvance();\n-            Thread.sleep(Duration.ofDays(1));\n-            return null;\n-        });\n-        phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n-\n-        Thread.currentThread().interrupt();\n-        try {\n-            executor.close();\n-            assertTrue(Thread.currentThread().isInterrupted());\n-        } finally {\n-            Thread.interrupted();  \/\/ clear interrupt status\n-        }\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n-        assertThrows(ExecutionException.class, future::get);\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Phaser phaser = new Phaser(2);\n+            Future<?> future = executor.submit(() -> {\n+                    phaser.arriveAndAwaitAdvance();\n+                    Thread.sleep(Duration.ofDays(1));\n+                    return null;\n+                });\n+            phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n+            Thread.currentThread().interrupt();\n+            try {\n+                executor.close();\n+                assertTrue(Thread.currentThread().isInterrupted());\n+            } finally {\n+                Thread.interrupted();  \/\/ clear interrupt status\n+            }\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n+            assertThrows(ExecutionException.class, future::get);\n+        }});\n@@ -160,25 +195,27 @@\n-        Phaser phaser = new Phaser(2);\n-        Future<?> future = executor.submit(() -> {\n-            phaser.arriveAndAwaitAdvance();\n-            Thread.sleep(Duration.ofDays(1));\n-            return null;\n-        });\n-        phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n-\n-        \/\/ schedule main thread to be interrupted\n-        Thread thread = Thread.currentThread();\n-        new Thread(() -> {\n-            try { Thread.sleep( Duration.ofMillis(100)); } catch (Exception ignore) { }\n-            thread.interrupt();\n-        }).start();\n-\n-        try {\n-            executor.close();\n-            assertTrue(Thread.currentThread().isInterrupted());\n-        } finally {\n-            Thread.interrupted();  \/\/ clear interrupt status\n-        }\n-        assertTrue(executor.isShutdown());\n-        assertTrue(executor.isTerminated());\n-        assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n-        assertThrows(ExecutionException.class, future::get);\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Phaser phaser = new Phaser(2);\n+            Future<?> future = executor.submit(() -> {\n+                    phaser.arriveAndAwaitAdvance();\n+                    Thread.sleep(Duration.ofDays(1));\n+                    return null;\n+                });\n+            phaser.arriveAndAwaitAdvance();  \/\/ wait for task to start\n+            \/\/ schedule main thread to be interrupted\n+            Thread thread = Thread.currentThread();\n+            new Thread(() -> {\n+                    try {\n+                        Thread.sleep( Duration.ofMillis(100));\n+                    } catch (Exception ignore) { }\n+                    thread.interrupt();\n+            }).start();\n+            try {\n+                executor.close();\n+                assertTrue(Thread.currentThread().isInterrupted());\n+            } finally {\n+                Thread.interrupted();  \/\/ clear interrupt status\n+            }\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10, TimeUnit.MILLISECONDS));\n+            assertThrows(ExecutionException.class, future::get);\n+        }});\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":116,"deletions":79,"binary":false,"changes":195,"status":"modified"}]}