{"files":[{"patch":"@@ -1884,0 +1884,1 @@\n+            Thread o = w.owner;\n@@ -1885,0 +1886,2 @@\n+            if (o == Thread.currentThread())\n+                Thread.interrupted();     \/\/ clear\n@@ -2776,2 +2779,2 @@\n-        int e, isShutdown;\n-        if (((e = runState) & STOP) == 0) {\n+        int e = runState, wasStopping = e & STOP, isShutdown;\n+        if (wasStopping == 0) {\n@@ -2795,1 +2798,1 @@\n-                    if ((o = q.owner) != null) {\n+                    if ((o = q.owner) != null && o != Thread.currentThread()) {\n@@ -2797,3 +2800,5 @@\n-                        try {\n-                            o.interrupt();\n-                        } catch (Throwable ignore) {\n+                        if (wasStopping == 0 || !o.isInterrupted()) {\n+                            try {\n+                                o.interrupt();\n+                            } catch (Throwable ignore) {\n+                            }\n@@ -3828,1 +3833,0 @@\n-                        break;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+            assertFalse(Thread.interrupted());\n@@ -124,0 +125,70 @@\n+    \/**\n+     * Test shutdown with tasks running.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testShutdownWithRunningTasks(ExecutorService executor) throws Exception {\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> future = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            executor.shutdown();\n+            assertFalse(Thread.interrupted());\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n+            assertTrue(executor.isTerminated());\n+            assertEquals(\"foo\", future.resultNow());\n+        }});\n+    }\n+\n+    \/**\n+     * Test close with multiple tasks running\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testCloseWith2RunningTasks(ExecutorService executor) throws Exception {\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> f1 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            Future<?> f2 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"bar\";\n+                });\n+            executor.close();  \/\/ waits for task to complete\n+            assertFalse(Thread.interrupted());\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.isTerminated());\n+            assertTrue(executor.awaitTermination(10,  TimeUnit.MILLISECONDS));\n+            assertEquals(\"foo\", f1.resultNow());\n+            assertEquals(\"bar\", f2.resultNow());\n+        }});\n+    }\n+\n+    \/**\n+     * Test shutdown with multiple tasks running\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"executors\")\n+    void testShutdownWith2RunningTasks(ExecutorService executor) throws Exception {\n+        testInNewThread(new TestAction() { void run() throws Exception {\n+            Future<?> f1 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"foo\";\n+                });\n+            Future<?> f2 = executor.submit(() -> {\n+                    Thread.sleep(Duration.ofMillis(100));\n+                    return \"bar\";\n+                });\n+            executor.shutdown();\n+            assertFalse(Thread.interrupted());\n+            assertTrue(executor.isShutdown());\n+            assertTrue(executor.awaitTermination(200,  TimeUnit.MILLISECONDS));\n+            assertTrue(executor.isTerminated());\n+            assertEquals(\"foo\", f1.resultNow());\n+            assertEquals(\"bar\", f2.resultNow());\n+        }});\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -519,0 +519,36 @@\n+                    assertFalse(Thread.interrupted());\n+                    checkCompletedNormally(f);\n+                    assertTrue(pool != null && pool.isTerminated());\n+                }});\n+        awaitTermination(t);\n+    }\n+\n+    \/**\n+     * Explicitly closing a new pool terminates it\n+     *\/\n+    public void testClose2() {\n+        Thread t = newStartedThread(new CheckedRunnable() {\n+                public void realRun() throws InterruptedException {\n+                    ForkJoinPool pool = new ForkJoinPool();\n+                    ForkJoinTask f = new FibAction(8);\n+                    pool.execute(f);\n+                    pool.close();\n+                    assertFalse(Thread.interrupted());\n+                    checkCompletedNormally(f);\n+                    assertTrue(pool != null && pool.isTerminated());\n+                }});\n+        awaitTermination(t);\n+    }\n+\n+    \/**\n+     * Explicitly closing a shutdown pool awaits termination\n+     *\/\n+    public void testClose3() {\n+        Thread t = newStartedThread(new CheckedRunnable() {\n+                public void realRun() throws InterruptedException {\n+                    ForkJoinPool pool = new ForkJoinPool();\n+                    ForkJoinTask f = new FibAction(8);\n+                    pool.execute(f);\n+                    pool.shutdown();\n+                    pool.close();\n+                    assertFalse(Thread.interrupted());\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool19Test.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}