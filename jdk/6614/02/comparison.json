{"files":[{"patch":"@@ -234,1 +234,0 @@\n-\n@@ -236,1 +235,0 @@\n-\n@@ -249,3 +247,7 @@\n-  output()->print(\"successors \");\n-  for (i = 0; i < block->number_of_sux(); i++) {\n-    output()->print(\"\\\"B%d\\\" \", block->sux_at(i)->block_id());\n+  if (block->end() != NULL) {\n+    output()->print(\"successors \");\n+    for (i = 0; i < block->number_of_sux(); i++) {\n+      output()->print(\"\\\"B%d\\\" \", block->sux_at(i)->block_id());\n+    }\n+  } else {\n+    output()->print(\"(block has no end, cannot print successors)\");\n","filename":"src\/hotspot\/share\/c1\/c1_CFGPrinter.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+  GrowableArray<BlockList> _bci2block_successors; \/\/ Mapping bcis to their blocks successors while we dont have a blockend\n@@ -92,0 +93,5 @@\n+  int number_of_successors(BlockBegin* block);\n+  BlockBegin* successor_at(BlockBegin* block, int i);\n+  void add_successor(BlockBegin* block, BlockBegin* sux);\n+  bool is_successor(BlockBegin* block, BlockBegin* sux);\n+\n@@ -108,0 +114,1 @@\n+ , _bci2block_successors(scope->method()->code_size())\n@@ -121,0 +128,2 @@\n+  \/\/ _bci2block still contains blocks with _end == null and > 0 sux in _bci2block_successors.\n+\n@@ -163,0 +172,1 @@\n+    _bci2block_successors.at_put_grow(cur_bci, BlockList());\n@@ -173,1 +183,1 @@\n-    predecessor->add_successor(block);\n+    add_successor(predecessor, block);\n@@ -204,2 +214,2 @@\n-      if (!current->is_successor(entry)) {\n-        current->add_successor(entry);\n+      if(!is_successor(current, entry)) {\n+        add_successor(current, entry);\n@@ -421,1 +431,1 @@\n-  for (int i = block->number_of_sux() - 1; i >= 0; i--) {\n+  for (int i = number_of_successors(block) - 1; i >= 0; i--) {\n@@ -423,1 +433,1 @@\n-    loop_state |= mark_loops(block->sux_at(i), in_subroutine);\n+    loop_state |= mark_loops(successor_at(block, i), in_subroutine);\n@@ -455,0 +465,22 @@\n+inline int BlockListBuilder::number_of_successors(BlockBegin* block)\n+{\n+  assert(_bci2block_successors.length() > block->bci(), \"sux must exist\");\n+  return _bci2block_successors.at(block->bci()).length();\n+}\n+\n+inline BlockBegin* BlockListBuilder::successor_at(BlockBegin* block, int i)\n+{\n+  assert(_bci2block_successors.length() > block->bci(), \"sux must exist\");\n+  return _bci2block_successors.at(block->bci()).at(i);\n+}\n+\n+inline void BlockListBuilder::add_successor(BlockBegin* block, BlockBegin* sux)\n+{\n+  assert(_bci2block_successors.length() > block->bci(), \"sux must exist\");\n+  _bci2block_successors.at(block->bci()).append(sux);\n+}\n+\n+inline bool BlockListBuilder::is_successor(BlockBegin* block, BlockBegin* sux) {\n+  assert(_bci2block_successors.length() > block->bci(), \"sux must exist\");\n+  return _bci2block_successors.at(block->bci()).contains(sux);\n+}\n@@ -480,1 +512,1 @@\n-    if (cur->number_of_sux() > 0) {\n+    if (number_of_successors(cur) > 0) {\n@@ -482,2 +514,2 @@\n-      for (int j = 0; j < cur->number_of_sux(); j++) {\n-        BlockBegin* sux = cur->sux_at(j);\n+      for (int j = 0; j < number_of_successors(cur); j++) {\n+        BlockBegin* sux = successor_at(cur, j);\n@@ -3218,0 +3250,2 @@\n+  \/\/ End nulls still exist here\n+\n@@ -3321,0 +3355,21 @@\n+# ifdef ASSERT\n+  \/\/All blocks reachable from start_block have _end != NULL\n+  {\n+    BlockList processed;\n+    BlockList to_go;\n+    to_go.append(start_block);\n+    while(to_go.length() > 0) {\n+      BlockBegin* current = to_go.pop();\n+      assert(current != NULL, \"Should not happen.\");\n+      assert(current->end() != NULL, \"All blocks reachable from start_block should have end() != NULL.\");\n+      processed.append(current);\n+      for(int i = 0; i < current->number_of_sux(); i++) {\n+        BlockBegin* s = current->sux_at(i);\n+        if (!processed.contains(s)) {\n+          to_go.append(s);\n+        }\n+      }\n+    }\n+  }\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":63,"deletions":8,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1264,0 +1264,10 @@\n+class EndNotNullValidator : public BlockClosure {\n+ public:\n+  EndNotNullValidator(IR* hir) {\n+    hir->start()->iterate_postorder(this);\n+  }\n+\n+  void block_do(BlockBegin* block) {\n+    assert(block->end() != NULL, \"Expect block end to exist.\");\n+  }\n+};\n@@ -1366,0 +1376,1 @@\n+  EndNotNullValidator(this);\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -527,9 +527,3 @@\n-void BlockBegin::set_end(BlockEnd* end) {\n-  assert(end != NULL, \"should not reset block end to NULL\");\n-  if (end == _end) {\n-    return;\n-  }\n-  clear_end();\n-\n-  \/\/ Set the new end\n-  _end = end;\n+void BlockBegin::set_end(BlockEnd* new_end) { \/\/ Assumes that no predecessor of new_end still has it as its successor\n+  assert(new_end != NULL, \"Should not reset block new_end to NULL\");\n+  if (new_end == _end) return;\n@@ -537,6 +531,4 @@\n-  _successors.clear();\n-  \/\/ Now reset successors list based on BlockEnd\n-  for (int i = 0; i < end->number_of_sux(); i++) {\n-    BlockBegin* sux = end->sux_at(i);\n-    _successors.append(sux);\n-    sux->_predecessors.append(this);\n+  \/\/ Remove this block as predecessor of its current successors\n+  if (_end != NULL)\n+  for (int i = 0; i < number_of_sux(); i++) {\n+    sux_at(i)->remove_predecessor(this);\n@@ -544,3 +536,0 @@\n-  _end->set_begin(this);\n-}\n-\n@@ -548,6 +537,1 @@\n-void BlockBegin::clear_end() {\n-  \/\/ Must make the predecessors\/successors match up with the\n-  \/\/ BlockEnd's notion.\n-  if (_end != NULL) {\n-    \/\/ disconnect from the old end\n-    _end->set_begin(NULL);\n+  _end = new_end;\n@@ -555,5 +539,3 @@\n-    \/\/ disconnect this block from it's current successors\n-    for (int i = 0; i < _successors.length(); i++) {\n-      _successors.at(i)->remove_predecessor(this);\n-    }\n-    _end = NULL;\n+  \/\/ Add this block as predecessor of its new successors\n+  for (int i = 0; i < number_of_sux(); i++) {\n+    sux_at(i)->add_predecessor(this);\n@@ -578,1 +560,1 @@\n-      from->_successors.remove_at(s);\n+      from->end()->remove_sux_at(s);\n@@ -586,10 +568,0 @@\n-void BlockBegin::disconnect_from_graph() {\n-  \/\/ disconnect this block from all other blocks\n-  for (int p = 0; p < number_of_preds(); p++) {\n-    pred_at(p)->remove_successor(this);\n-  }\n-  for (int s = 0; s < number_of_sux(); s++) {\n-    sux_at(s)->remove_predecessor(this);\n-  }\n-}\n-\n@@ -672,8 +644,0 @@\n-void BlockBegin::remove_successor(BlockBegin* pred) {\n-  int idx;\n-  while ((idx = _successors.find(pred)) >= 0) {\n-    _successors.remove_at(idx);\n-  }\n-}\n-\n-\n@@ -956,15 +920,0 @@\n-void BlockEnd::set_begin(BlockBegin* begin) {\n-  BlockList* sux = NULL;\n-  if (begin != NULL) {\n-    sux = begin->successors();\n-  } else if (this->begin() != NULL) {\n-    \/\/ copy our sux list\n-    BlockList* sux = new BlockList(this->begin()->number_of_sux());\n-    for (int i = 0; i < this->begin()->number_of_sux(); i++) {\n-      sux->append(this->begin()->sux_at(i));\n-    }\n-  }\n-  _sux = sux;\n-}\n-\n-\n@@ -975,1 +924,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":12,"deletions":64,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -1598,1 +1598,0 @@\n-  BlockList   _successors;                       \/\/ the successors of this block\n@@ -1652,1 +1651,0 @@\n-  , _successors(2)\n@@ -1679,1 +1677,0 @@\n-  BlockList* successors()                        { return &_successors; }\n@@ -1707,3 +1704,1 @@\n-  void set_end(BlockEnd* end);\n-  void clear_end();\n-  void disconnect_from_graph();\n+  void set_end(BlockEnd* new_end);\n@@ -1732,4 +1727,0 @@\n-  void add_successor(BlockBegin* sux);\n-  void remove_successor(BlockBegin* pred);\n-  bool is_successor(BlockBegin* sux) const       { return _successors.contains(sux); }\n-\n@@ -1795,0 +1786,1 @@\n+\n@@ -1828,1 +1820,2 @@\n-  void set_begin(BlockBegin* begin);\n+  inline void remove_sux_at(int i) { _sux->remove_at(i);}\n+  inline int find_sux(BlockBegin* sux) {return _sux->find(sux);}\n@@ -1834,2 +1827,0 @@\n-  BlockBegin** addr_sux_at(int i) const          { return _sux->adr_at(i); }\n-  int sux_index(BlockBegin* sux) const           { return _sux->find(sux); }\n@@ -2442,3 +2433,2 @@\n-inline int         BlockBegin::number_of_sux() const            { assert(_end == NULL || _end->number_of_sux() == _successors.length(), \"mismatch\"); return _successors.length(); }\n-inline BlockBegin* BlockBegin::sux_at(int i) const              { assert(_end == NULL || _end->sux_at(i) == _successors.at(i), \"mismatch\");          return _successors.at(i); }\n-inline void        BlockBegin::add_successor(BlockBegin* sux)   { assert(_end == NULL, \"Would create mismatch with successors of BlockEnd\");         _successors.append(sux); }\n+inline int         BlockBegin::number_of_sux() const            { assert(_end != NULL, \"need end\"); return _end->number_of_sux(); }\n+inline BlockBegin* BlockBegin::sux_at(int i) const              { assert(_end != NULL , \"need end\"); return _end->sux_at(i); }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -615,8 +615,1 @@\n-  \/\/ print predecessors and successors\n-  if (x->successors()->length() > 0) {\n-    output()->print(\" sux:\");\n-    for (int i = 0; i < x->successors()->length(); i ++) {\n-      output()->print(\" B%d\", x->successors()->at(i)->block_id());\n-    }\n-  }\n-\n+  \/\/ print predecessors\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1589,1 +1589,1 @@\n-  if (x->number_of_sux() > 0) {\n+  if (end != NULL && x->number_of_sux() > 0) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,0 +315,13 @@\n+void disconnect_from_graph(BlockBegin* block) {\n+  for (int p = 0; p < block->number_of_preds(); p++) {\n+    BlockBegin* pred = block->pred_at(p);\n+    int idx;\n+    while ((idx = pred->end()->find_sux(block)) >= 0) {\n+      pred->end()->remove_sux_at(idx);\n+    }\n+  }\n+  for (int s = 0; s < block->number_of_sux(); s++) {\n+    block->sux_at(s)->remove_predecessor(block);\n+  }\n+}\n+\n@@ -372,2 +385,2 @@\n-      assert(sux_value == end_state->local_at(index), \"locals not equal\");\n-    }\n+        assert(sux_value == end_state->local_at(index), \"locals not equal\");\n+      }\n@@ -383,1 +396,3 @@\n-    sux->disconnect_from_graph();\n+\n+    \/\/ disconnect this block from all other blocks\n+    disconnect_from_graph(sux);\n@@ -385,0 +400,2 @@\n+\n+    \/\/ TODO Should this be done in set_end universally?\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}