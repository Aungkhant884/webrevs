{"files":[{"patch":"@@ -2066,1 +2066,7 @@\n-                        ret = new VarSymbol(sym.flags() & FINAL, sym.name, sym.type, translatedSym);\n+                        ret = new VarSymbol(sym.flags() & FINAL, sym.name, sym.type, translatedSym) {\n+                            @Override\n+                            public Symbol baseSymbol() {\n+                                \/\/keep mapping with original symbol\n+                                return sym;\n+                            }\n+                        };\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1224,1 +1224,1 @@\n-                Symbol translatedSym = lambdaTranslationMap.get(sym);\n+                Symbol translatedSym = lambdaTranslationMap.get(sym.baseSymbol());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8258897\n+ * @summary Checks translation of capturing local classes inside nested lambdas\n+ * @run main CaptureVariables\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public class CaptureVariables {\n+    static Supplier<Integer> supplier1 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local().i).get();\n+    };\n+\n+    static Supplier<Integer> supplier2 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local().i).get()).get();\n+    };\n+\n+    Supplier<Integer> supplier3 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local().i).get();\n+    };\n+\n+    Supplier<Integer> supplier4 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local().i).get()).get();\n+    };\n+\n+    public static void main(String[] args) {\n+        assert supplier1.get() == 11;\n+        assert supplier2.get() == 11;\n+        assert new CaptureVariables().supplier3.get() == 11;\n+        assert new CaptureVariables().supplier4.get() == 11;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/8258897\/CaptureVariables.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8258897\n+ * @summary Checks translation of capturing local classes inside nested lambdas\n+ * @run main CaptureVariablesAnonymous\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public class CaptureVariablesAnonymous {\n+    static Supplier<Integer> supplier1 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local() {}.i).get();\n+    };\n+\n+    static Supplier<Integer> supplier2 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local() {}.i).get()).get();\n+    };\n+\n+    Supplier<Integer> supplier3 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local() {}.i).get();\n+    };\n+\n+    Supplier<Integer> supplier4 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local() {}.i).get()).get();\n+    };\n+\n+    public static void main(String[] args) {\n+        assert supplier1.get() == 11;\n+        assert supplier2.get() == 11;\n+        assert new CaptureVariablesAnonymous().supplier3.get() == 11;\n+        assert new CaptureVariablesAnonymous().supplier4.get() == 11;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/8258897\/CaptureVariablesAnonymous.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}