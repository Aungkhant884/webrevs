{"files":[{"patch":"@@ -2798,1 +2798,1 @@\n-            tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n+            tree.args = tree.args.appendList(loadFreevars(tree.pos(), substitutedFreevars(freevars(c))));\n@@ -2846,0 +2846,22 @@\n+    \/\/ For each free variable, if it was captured as a synthetic argument in current synthetic lambda method,\n+    \/\/ replace it with the base symbol of the argument.\n+    private List<VarSymbol> substitutedFreevars(List<VarSymbol> vars) {\n+        if (vars.isEmpty() || currentMethodDef == null || currentMethodDef.params == null ||\n+                currentMethodDef.params.isEmpty() ||\n+                (currentMethodSym.flags_field & (SYNTHETIC | LAMBDA_METHOD)) != (SYNTHETIC | LAMBDA_METHOD)) {\n+            return vars;\n+        }\n+\n+        Map<Name, VarSymbol> syntheticParamVars = new HashMap<>();\n+        for (JCVariableDecl p: currentMethodDef.params) {\n+            if ((p.mods.flags & (SYNTHETIC | FINAL)) == (SYNTHETIC | FINAL)) {\n+                syntheticParamVars.put(p.name, (VarSymbol)p.sym.baseSymbol());\n+            }\n+        }\n+        ListBuffer<VarSymbol> substituted = new ListBuffer<>();\n+        for (VarSymbol v: vars) {\n+            substituted.append(syntheticParamVars.getOrDefault(v.name, v));\n+        }\n+        return substituted.toList();\n+    }\n+\n@@ -3000,1 +3022,1 @@\n-                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n+                tree.args = tree.args.appendList(loadFreevars(tree.pos(), substitutedFreevars(freevars(c))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+import java.util.function.Supplier;\n+\n+\/**\n+ * @test\n+ *\/\n+public class CaptureVariables {\n+    static Supplier<Integer> supplier1 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local().i).get();\n+    };\n+\n+    static Supplier<Integer> supplier2 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local().i).get()).get();\n+    };\n+\n+    Supplier<Integer> supplier3 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local().i).get();\n+    };\n+\n+    Supplier<Integer> supplier4 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local().i).get()).get();\n+    };\n+\n+    public static void main(String[] args) {\n+        assert supplier1.get() == 11;\n+        assert supplier2.get() == 11;\n+        assert new CaptureVariables().supplier3.get() == 11;\n+        assert new CaptureVariables().supplier4.get() == 11;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/localClass\/CaptureVariables.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+import java.util.function.Supplier;\n+\n+\/**\n+ * @test\n+ *\/\n+public class CaptureVariablesAnonymous {\n+    static Supplier<Integer> supplier1 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local() {}.i).get();\n+    };\n+\n+    static Supplier<Integer> supplier2 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local() {}.i).get()).get();\n+    };\n+\n+    Supplier<Integer> supplier3 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> new Local() {}.i).get();\n+    };\n+\n+    Supplier<Integer> supplier4 = () -> {\n+        boolean b0 = false;\n+        int i0 = 6;\n+        boolean b1 = false;\n+        String s0 = \"hello\";\n+\n+        class Local {\n+            int i = s0.length() + i0;\n+        }\n+\n+        return ((Supplier<Integer>) () -> ((Supplier<Integer>) () -> new Local() {}.i).get()).get();\n+    };\n+\n+    public static void main(String[] args) {\n+        assert supplier1.get() == 11;\n+        assert supplier2.get() == 11;\n+        assert new CaptureVariablesAnonymous().supplier3.get() == 11;\n+        assert new CaptureVariablesAnonymous().supplier4.get() == 11;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/localClass\/CaptureVariablesAnonymous.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}