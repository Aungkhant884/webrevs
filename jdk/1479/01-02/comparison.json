{"files":[{"patch":"@@ -2066,1 +2066,7 @@\n-                        ret = new VarSymbol(sym.flags() & FINAL, sym.name, sym.type, translatedSym);\n+                        ret = new VarSymbol(sym.flags() & FINAL, sym.name, sym.type, translatedSym) {\n+                            @Override\n+                            public Symbol baseSymbol() {\n+                                \/\/keep mapping with original symbol\n+                                return sym;\n+                            }\n+                        };\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1224,1 +1224,1 @@\n-                Symbol translatedSym = lambdaTranslationMap.get(sym);\n+                Symbol translatedSym = lambdaTranslationMap.get(sym.baseSymbol());\n@@ -2798,1 +2798,1 @@\n-            tree.args = tree.args.appendList(loadFreevars(tree.pos(), substitutedFreevars(freevars(c))));\n+            tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n@@ -2846,22 +2846,0 @@\n-    \/\/ For each free variable, if it was captured as a synthetic argument in current synthetic lambda method,\n-    \/\/ replace it with the base symbol of the argument.\n-    private List<VarSymbol> substitutedFreevars(List<VarSymbol> vars) {\n-        if (vars.isEmpty() || currentMethodDef == null || currentMethodDef.params == null ||\n-                currentMethodDef.params.isEmpty() ||\n-                (currentMethodSym.flags_field & (SYNTHETIC | LAMBDA_METHOD)) != (SYNTHETIC | LAMBDA_METHOD)) {\n-            return vars;\n-        }\n-\n-        Map<Name, VarSymbol> syntheticParamVars = new HashMap<>();\n-        for (JCVariableDecl p: currentMethodDef.params) {\n-            if ((p.mods.flags & (SYNTHETIC | FINAL)) == (SYNTHETIC | FINAL)) {\n-                syntheticParamVars.put(p.name, (VarSymbol)p.sym.baseSymbol());\n-            }\n-        }\n-        ListBuffer<VarSymbol> substituted = new ListBuffer<>();\n-        for (VarSymbol v: vars) {\n-            substituted.append(syntheticParamVars.getOrDefault(v.name, v));\n-        }\n-        return substituted.toList();\n-    }\n-\n@@ -3022,1 +3000,1 @@\n-                tree.args = tree.args.appendList(loadFreevars(tree.pos(), substitutedFreevars(freevars(c))));\n+                tree.args = tree.args.appendList(loadFreevars(tree.pos(), freevars(c)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lambda\/8258897\/CaptureVariables.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/lambda\/localClass\/CaptureVariables.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lambda\/8258897\/CaptureVariablesAnonymous.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/lambda\/localClass\/CaptureVariablesAnonymous.java","status":"renamed"}]}