{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n@@ -43,6 +43,0 @@\n-  if (PowerArchitecturePPC64 == 6) {\n-    if (FLAG_IS_DEFAULT(InsertEndGroupPPC64)) {\n-      FLAG_SET_ERGO(InsertEndGroupPPC64, true);\n-    }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/c2_init_ppc.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -139,6 +139,0 @@\n-  product(bool, UsePower6SchedulerPPC64, false,                             \\\n-          \"Use Power6 Scheduler.\")                                          \\\n-                                                                            \\\n-  product(bool, InsertEndGroupPPC64, false,                                 \\\n-          \"Insert EndGroup instructions to optimize for Power6.\")           \\\n-                                                                            \\\n","filename":"src\/hotspot\/cpu\/ppc\/globals_ppc.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1373,25 +1373,0 @@\n-\/\/ Macro used instead of the common __ to emulate the pipes of PPC.\n-\/\/ Instead of e.g. __ ld(...) one hase to write ___(ld) ld(...) This enables the\n-\/\/ micro scheduler to cope with \"hand written\" assembler like in the prolog. Though\n-\/\/ still no scheduling of this code is possible, the micro scheduler is aware of the\n-\/\/ code and can update its internal data. The following mechanism is used to achieve this:\n-\/\/ The micro scheduler calls size() of each compound node during scheduling. size() does a\n-\/\/ dummy emit and only during this dummy emit C->hb_scheduling() is not NULL.\n-#if 0 \/\/ TODO: PPC port\n-#define ___(op) if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n-                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(ppc64Opcode_##op); \\\n-                _masm.\n-#define ___stop if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n-                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(archOpcode_none)\n-#define ___advance if (UsePower6SchedulerPPC64 && C->hb_scheduling())                 \\\n-                  C->hb_scheduling()->_pdScheduling->advance_offset\n-#else\n-#define ___(op) if (UsePower6SchedulerPPC64)                                          \\\n-                  Unimplemented();                                                    \\\n-                _masm.\n-#define ___stop if (UsePower6SchedulerPPC64)                                          \\\n-                  Unimplemented()\n-#define ___advance if (UsePower6SchedulerPPC64)                                       \\\n-                  Unimplemented()\n-#endif\n-\n@@ -1417,1 +1392,1 @@\n-    ___(nop) nop();\n+    __ nop();\n@@ -1420,1 +1395,1 @@\n-    ___(mflr) mflr(return_pc);\n+    __ mflr(return_pc);\n@@ -1480,1 +1455,1 @@\n-          ___(ld) ld(R0,  (int)(signed short)stdoffset, R1_SP);\n+          __ ld(R0,  (int)(signed short)stdoffset, R1_SP);\n@@ -1482,1 +1457,1 @@\n-          ___(std) std(R0, (int)(signed short)stdoffset, R1_SP);\n+          __ std(R0, (int)(signed short)stdoffset, R1_SP);\n@@ -1490,1 +1465,1 @@\n-        ___(addis) addis(tmp, R1_SP, hi);\n+        __ addis(tmp, R1_SP, hi);\n@@ -1492,1 +1467,1 @@\n-          ___(ld) ld(R0, lo, tmp);\n+          __ ld(R0, lo, tmp);\n@@ -1494,1 +1469,1 @@\n-          ___(std) std(R0, lo, tmp);\n+          __ std(R0, lo, tmp);\n@@ -1509,10 +1484,0 @@\n-  \/\/ Optimized version for most common case.\n-  if (UsePower6SchedulerPPC64 &&\n-      !method_is_frameless && Assembler::is_simm((int)(-offset), 16) &&\n-      !(false \/* ConstantsALot TODO: PPC port*\/)) {\n-    ___(or) mr(callers_sp, R1_SP);\n-    ___(std) std(return_pc, _abi(lr), R1_SP);\n-    ___(stdu) stdu(R1_SP, -offset, R1_SP);\n-    return;\n-  }\n-\n@@ -1521,1 +1486,1 @@\n-    ___(or) mr(callers_sp, R1_SP);\n+    __ mr(callers_sp, R1_SP);\n@@ -1530,1 +1495,1 @@\n-      ___(stdu) stdu(R1_SP, -offset, R1_SP);\n+      __ stdu(R1_SP, -offset, R1_SP);\n@@ -1534,5 +1499,5 @@\n-      ___(addis)  lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n-      ___(ori)    ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n-      ___(rldicr) sldi(tmp, tmp, 32);\n-      ___(oris)   oris(tmp, tmp, (x & 0xffff0000) >> 16);\n-      ___(ori)    ori( tmp, tmp, (x & 0x0000ffff));\n+      __ lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n+      __ ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n+      __ sldi(tmp, tmp, 32);\n+      __ oris(tmp, tmp, (x & 0xffff0000) >> 16);\n+      __ ori( tmp, tmp, (x & 0x0000ffff));\n@@ -1540,1 +1505,1 @@\n-      ___(stdux) stdux(R1_SP, R1_SP, tmp);\n+      __ stdux(R1_SP, R1_SP, tmp);\n@@ -1555,1 +1520,1 @@\n-    ___(std) std(return_pc, _abi(lr), callers_sp);\n+    __ std(return_pc, _abi(lr), callers_sp);\n@@ -1560,3 +1525,0 @@\n-#undef ___\n-#undef ___stop\n-#undef ___advance\n@@ -1644,29 +1606,0 @@\n-#if 0 \/\/ TODO: PPC port\n-void MachLoadPollAddrLateNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-  if (LoadPollAddressFromThread) {\n-    _masm.ld(R11, in_bytes(JavaThread::poll_address_offset()), R16_thread);\n-  } else {\n-    _masm.nop();\n-  }\n-}\n-\n-uint MachLoadPollAddrLateNode::size(PhaseRegAlloc* ra_) const {\n-  if (LoadPollAddressFromThread) {\n-    return 4;\n-  } else {\n-    return 4;\n-  }\n-}\n-\n-#ifndef PRODUCT\n-void MachLoadPollAddrLateNode::format(PhaseRegAlloc* ra_, outputStream* st) const {\n-  st->print_cr(\" LD R11, PollAddressOffset, R16_thread \\t\/\/ LoadPollAddressFromThread\");\n-}\n-#endif\n-\n-const RegMask &MachLoadPollAddrLateNode::out_RegMask() const {\n-  return RSCRATCH1_BITS64_REG_mask();\n-}\n-#endif \/\/ PPC port\n-\n@@ -1955,96 +1888,0 @@\n-#if 0 \/\/ TODO: PPC port\n-ArchOpcode MachSpillCopyNode_archOpcode(MachSpillCopyNode *n, PhaseRegAlloc *ra_) {\n-#ifndef PRODUCT\n-  if (ra_->node_regs_max_index() == 0) return archOpcode_undefined;\n-#endif\n-  assert(ra_->node_regs_max_index() != 0, \"\");\n-\n-  \/\/ Get registers to move.\n-  OptoReg::Name src_hi = ra_->get_reg_second(n->in(1));\n-  OptoReg::Name src_lo = ra_->get_reg_first(n->in(1));\n-  OptoReg::Name dst_hi = ra_->get_reg_second(n);\n-  OptoReg::Name dst_lo = ra_->get_reg_first(n);\n-\n-  enum RC src_lo_rc = rc_class(src_lo);\n-  enum RC dst_lo_rc = rc_class(dst_lo);\n-\n-  if (src_lo == dst_lo && src_hi == dst_hi)\n-    return ppc64Opcode_none;            \/\/ Self copy, no move.\n-\n-  \/\/ --------------------------------------\n-  \/\/ Memory->Memory Spill. Use R0 to hold the value.\n-  if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {\n-    return ppc64Opcode_compound;\n-  }\n-\n-  \/\/ --------------------------------------\n-  \/\/ Check for float->int copy; requires a trip through memory.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_int) {\n-    Unimplemented();\n-  }\n-\n-  \/\/ --------------------------------------\n-  \/\/ Check for integer reg-reg copy.\n-  if (src_lo_rc == rc_int && dst_lo_rc == rc_int) {\n-    Register Rsrc = as_Register(Matcher::_regEncode[src_lo]);\n-    Register Rdst = as_Register(Matcher::_regEncode[dst_lo]);\n-    if (Rsrc == Rdst) {\n-      return ppc64Opcode_none;\n-    } else {\n-      return ppc64Opcode_or;\n-    }\n-  }\n-\n-  \/\/ Check for integer store.\n-  if (src_lo_rc == rc_int && dst_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_std;\n-    } else {\n-      return ppc64Opcode_stw;\n-    }\n-  }\n-\n-  \/\/ Check for integer load.\n-  if (dst_lo_rc == rc_int && src_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_ld;\n-    } else {\n-      return ppc64Opcode_lwz;\n-    }\n-  }\n-\n-  \/\/ Check for float reg-reg copy.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {\n-    return ppc64Opcode_fmr;\n-  }\n-\n-  \/\/ Check for float store.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_stfd;\n-    } else {\n-      return ppc64Opcode_stfs;\n-    }\n-  }\n-\n-  \/\/ Check for float load.\n-  if (dst_lo_rc == rc_float && src_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_lfd;\n-    } else {\n-      return ppc64Opcode_lfs;\n-    }\n-  }\n-\n-  \/\/ --------------------------------------------------------------------\n-  \/\/ Check for hi bits still needing moving. Only happens for misaligned\n-  \/\/ arguments to native calls.\n-  if (src_hi == dst_hi) {\n-    return ppc64Opcode_none;               \/\/ Self copy; no move.\n-  }\n-\n-  ShouldNotReachHere();\n-  return ppc64Opcode_undefined;\n-}\n-#endif \/\/ PPC port\n-\n@@ -2146,7 +1983,0 @@\n-#if 0 \/\/ TODO: PPC port\n-\/\/ Optimize UEP code on z (save a load_const() call in main path).\n-int MachUEPNode::ep_offset() {\n-  return 0;\n-}\n-#endif\n-\n@@ -2681,1 +2511,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2688,1 +2517,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2692,1 +2520,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_none);\n@@ -2697,1 +2524,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lbz);\n@@ -2705,1 +2531,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2714,1 +2539,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lhz);\n@@ -2723,1 +2547,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2733,1 +2556,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwz);\n@@ -2742,1 +2564,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2752,1 +2573,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2762,1 +2582,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2773,1 +2592,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -2780,1 +2598,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2804,1 +2621,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -3039,1 +2855,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -3072,1 +2887,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -3207,1 +3021,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stw);\n@@ -3214,1 +3027,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_std);\n@@ -3223,1 +3035,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfs);\n@@ -3230,1 +3041,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfd);\n@@ -3239,1 +3049,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3255,7 +3064,0 @@\n-#if 0 \/\/ TODO: PPC port\n-    \/\/ Check CMSCollectorCardTableBarrierSetBSExt::_requires_release and do the\n-    \/\/ StoreStore barrier conditionally.\n-    __ lwz(R0, 0, $releaseFieldAddr$$Register);\n-    __ cmpwi($crx$$CondRegister, R0, 0);\n-    __ beq_predict_taken($crx$$CondRegister, skip_storestore);\n-#endif\n@@ -3264,3 +3066,0 @@\n-#if 0 \/\/ TODO: PPC port\n-    __ bind(skip_storestore);\n-#endif\n@@ -3471,1 +3270,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3481,1 +3279,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3486,1 +3283,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3494,1 +3290,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3501,1 +3296,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -3507,1 +3301,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3520,1 +3313,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3533,1 +3325,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3540,1 +3331,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3545,1 +3335,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3551,1 +3340,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3556,1 +3344,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3586,1 +3373,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3614,41 +3400,0 @@\n-  \/\/ Branch used with Power6 scheduling (can be shortened without changing the node).\n-  enc_class enc_bc_short_far(flagsRegSrc crx, cmpOp cmp, Label lbl) %{\n-    \/\/ The scheduler doesn't know about branch shortening, so we set the opcode\n-    \/\/ to ppc64Opcode_bc in order to hide this detail from the scheduler.\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-    Label d;   \/\/ dummy\n-    __ bind(d);\n-    Label* p = ($lbl$$label);\n-    \/\/ `p' is `NULL' when this encoding class is used only to\n-    \/\/ determine the size of the encoded instruction.\n-    Label& l = (NULL == p)? d : *(p);\n-    int cc = $cmp$$cmpcode;\n-    int flags_reg = $crx$$reg;\n-    int bhint = Assembler::bhintNoHint;\n-\n-    if (UseStaticBranchPredictionForUncommonPathsPPC64) {\n-      if (_prob <= PROB_NEVER) {\n-        bhint = Assembler::bhintIsNotTaken;\n-      } else if (_prob >= PROB_ALWAYS) {\n-        bhint = Assembler::bhintIsTaken;\n-      }\n-    }\n-\n-#if 0 \/\/ TODO: PPC port\n-    if (_size == 8) {\n-      \/\/ Tell the conditional far branch to optimize itself when being relocated.\n-      __ bc_far(Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n-                    cc_to_biint(cc, flags_reg),\n-                    l,\n-                    MacroAssembler::bc_far_optimize_on_relocate);\n-    } else {\n-      __ bc    (Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n-                    cc_to_biint(cc, flags_reg),\n-                    l);\n-    }\n-#endif\n-    Unimplemented();\n-  %}\n-\n@@ -3701,1 +3446,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -3759,1 +3503,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3809,1 +3552,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3913,1 +3655,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3971,1 +3712,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -4005,1 +3745,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mtctr);\n@@ -5517,1 +5256,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -5675,1 +5413,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lha);\n@@ -5692,1 +5429,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -5799,1 +5535,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -5816,1 +5551,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -6018,1 +5752,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -6038,1 +5771,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6075,1 +5807,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6110,1 +5841,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6124,1 +5854,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6137,1 +5866,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6151,1 +5879,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6168,1 +5895,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6196,1 +5922,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6210,1 +5935,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6226,1 +5950,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6306,1 +6029,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6333,1 +6055,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6347,1 +6068,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6361,1 +6081,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6392,1 +6111,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6405,1 +6123,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6453,1 +6170,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6469,1 +6185,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6485,1 +6200,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6543,1 +6257,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6591,1 +6304,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6628,1 +6340,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -6651,1 +6362,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6692,1 +6402,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -6716,1 +6425,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6759,1 +6467,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6773,1 +6480,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6787,1 +6493,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6801,1 +6506,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6817,1 +6521,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stb);\n@@ -6832,1 +6535,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sth);\n@@ -6986,1 +6688,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7008,1 +6709,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7022,1 +6722,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7038,1 +6737,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7057,1 +6755,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7071,1 +6768,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7110,1 +6806,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7125,1 +6820,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7142,1 +6836,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7156,1 +6849,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7175,1 +6867,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7196,1 +6887,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7225,1 +6915,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7242,1 +6931,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -7353,1 +7041,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7368,1 +7055,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7387,1 +7073,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7402,1 +7087,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -7416,1 +7100,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7476,1 +7159,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7492,1 +7174,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -7556,1 +7237,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7590,1 +7270,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7603,1 +7282,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7626,1 +7304,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sync);\n@@ -7685,1 +7362,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7702,1 +7378,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7715,1 +7391,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7731,1 +7407,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7748,1 +7423,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7761,1 +7436,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7777,1 +7452,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7795,1 +7469,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7808,1 +7482,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7824,1 +7498,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7841,1 +7514,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7854,1 +7527,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7867,1 +7540,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -7869,1 +7542,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7875,1 +7547,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7889,1 +7560,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -7891,1 +7562,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7897,1 +7567,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7919,1 +7588,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7939,1 +7607,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stdcx_);\n@@ -7955,1 +7622,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ldarx);\n@@ -7975,1 +7641,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7995,1 +7660,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8015,1 +7679,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8035,1 +7698,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8054,1 +7716,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8073,1 +7734,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8092,1 +7752,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8111,1 +7770,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8133,1 +7791,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8148,1 +7805,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8163,1 +7819,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8178,1 +7833,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8193,1 +7847,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8208,1 +7861,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8223,1 +7875,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8238,1 +7889,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8253,1 +7903,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8268,1 +7917,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8285,1 +7933,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8300,1 +7947,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8317,1 +7963,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8333,1 +7978,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8350,1 +7994,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8365,1 +8008,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8384,1 +8026,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8399,1 +8040,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8414,1 +8054,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8435,1 +8074,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8456,1 +8094,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8471,1 +8108,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8486,1 +8122,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8507,1 +8142,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8528,1 +8162,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8543,1 +8176,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8564,1 +8196,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8579,1 +8210,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8600,1 +8230,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8615,1 +8244,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8636,1 +8264,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8651,1 +8278,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8909,1 +8535,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8922,1 +8547,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8948,1 +8572,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -8960,1 +8583,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -8972,1 +8594,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8985,1 +8606,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9012,1 +8632,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9025,1 +8644,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -9039,1 +8657,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -9051,1 +8668,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9065,1 +8681,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -9079,1 +8694,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -9094,1 +8708,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9111,1 +8724,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subfic);\n@@ -9127,1 +8739,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -9151,1 +8762,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9163,1 +8773,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9176,1 +8785,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9192,1 +8800,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9208,1 +8815,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9233,1 +8839,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9246,1 +8851,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9263,1 +8867,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mullw);\n@@ -9277,1 +8880,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -9290,1 +8892,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulld);\n@@ -9304,1 +8905,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulhd);\n@@ -9318,1 +8918,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -9332,1 +8931,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9349,1 +8947,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divw);\n@@ -9363,1 +8960,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -9365,1 +8962,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -9369,1 +8965,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -9397,1 +8992,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9412,1 +9006,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divd);\n@@ -9426,1 +9019,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -9428,1 +9021,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -9432,1 +9024,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -9502,1 +9093,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9516,1 +9106,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_slw);\n@@ -9540,1 +9129,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9554,1 +9142,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9575,1 +9162,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9596,1 +9182,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sld);\n@@ -9620,1 +9205,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9634,1 +9218,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9649,1 +9232,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldic);\n@@ -9663,1 +9245,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sraw);\n@@ -9688,1 +9269,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -9702,1 +9282,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srad);\n@@ -9728,1 +9307,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9741,1 +9319,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9755,1 +9332,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srw);\n@@ -9781,1 +9357,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9795,1 +9370,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srd);\n@@ -9821,1 +9395,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9834,1 +9407,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9847,1 +9419,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9860,1 +9431,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9879,1 +9449,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9897,1 +9466,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -9913,1 +9481,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9927,1 +9494,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9942,1 +9508,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadds);\n@@ -9955,1 +9520,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadd);\n@@ -9968,1 +9532,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsubs);\n@@ -9980,1 +9543,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsub);\n@@ -9992,1 +9554,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmuls);\n@@ -10004,1 +9565,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmul);\n@@ -10016,1 +9576,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdivs);\n@@ -10028,1 +9587,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdiv);\n@@ -10040,1 +9598,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -10052,1 +9609,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -10063,1 +9619,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -10074,1 +9629,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -10086,1 +9640,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -10098,1 +9651,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -10111,1 +9663,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrt);\n@@ -10126,1 +9677,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrts);\n@@ -10163,1 +9713,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadds);\n@@ -10176,1 +9725,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadd);\n@@ -10190,1 +9738,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsubs);\n@@ -10204,1 +9751,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsub);\n@@ -10218,1 +9764,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadds);\n@@ -10232,1 +9777,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadd);\n@@ -10245,1 +9789,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsubs);\n@@ -10258,1 +9801,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsub);\n@@ -10275,1 +9817,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -10288,1 +9829,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andis_);\n@@ -10302,1 +9842,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -10315,1 +9854,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -10326,1 +9864,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10338,1 +9875,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -10353,1 +9889,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -10367,1 +9902,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -10380,1 +9914,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -10391,1 +9924,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10405,1 +9937,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10419,1 +9950,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10432,1 +9962,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10458,1 +9987,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10472,1 +10000,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10486,1 +10013,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10500,1 +10026,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10514,1 +10039,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10527,1 +10051,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10553,1 +10076,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10567,1 +10089,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10581,1 +10102,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10595,1 +10115,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10608,1 +10127,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10621,1 +10139,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10647,1 +10164,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -10774,1 +10290,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -10862,1 +10377,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10877,1 +10391,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10890,1 +10403,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -11005,1 +10517,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -11107,1 +10618,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -11125,1 +10635,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -11147,1 +10656,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsh);\n@@ -11160,1 +10668,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -11171,1 +10678,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -11185,1 +10691,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);;\n@@ -11200,1 +10705,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -11214,1 +10719,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -11367,1 +10872,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11412,1 +10916,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -11426,1 +10929,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -11440,1 +10942,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -11454,1 +10955,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11469,1 +10969,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -11483,1 +10983,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -11630,1 +11130,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11679,1 +11178,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11691,1 +11189,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_frsp);\n@@ -11724,1 +11221,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11853,1 +11349,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -11868,1 +11363,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11879,1 +11373,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11892,1 +11385,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11903,1 +11395,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11914,1 +11405,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11926,1 +11416,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11937,1 +11426,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -11949,1 +11437,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and_);\n@@ -11961,1 +11448,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11976,1 +11462,1 @@\n-  size((false \/* TODO: PPC PORTInsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 20 : 16));\n+  size(16);\n@@ -11978,1 +11464,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -11985,1 +11470,0 @@\n-    \/\/ TODO: PPC port__ endgroup_if_needed(_size == 20);\n@@ -12074,1 +11558,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -12101,1 +11584,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tw);\n@@ -12128,1 +11610,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -12146,1 +11627,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12157,1 +11637,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -12179,1 +11658,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -12200,1 +11678,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12214,1 +11691,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -12236,1 +11712,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -12255,1 +11730,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12266,1 +11740,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12283,1 +11756,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -12300,1 +11772,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -12315,1 +11786,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 16 : 12));\n+  size(12);\n@@ -12317,1 +11788,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovecr);\n@@ -12322,1 +11792,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 16);\n@@ -12415,1 +11884,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -12620,1 +12088,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_b);\n@@ -12660,1 +12127,0 @@\n-  predicate(!false \/* TODO: PPC port HB_Schedule*\/);\n@@ -12673,20 +12139,0 @@\n-\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n-instruct branchConSched(cmpOp cmp, flagsRegSrc crx, label lbl) %{\n-  \/\/ Same match rule as `branchCon'.\n-  match(If cmp crx);\n-  effect(USE crx, USE lbl);\n-  predicate(false \/* TODO: PPC port HB_Schedule*\/);\n-  \/\/ Higher cost than `branchCon'.\n-  ins_cost(5*BRANCH_COST);\n-\n-  \/\/ Actually size doesn't depend on alignment but on shortening.\n-  ins_variable_size_depending_on_alignment(true);\n-  \/\/ long variant.\n-  ins_short_branch(0);\n-\n-  format %{ \"B_FAR$cmp $crx, $lbl\" %}\n-  size(8); \/\/ worst case\n-  ins_encode( enc_bc_short_far(crx, cmp, lbl) );\n-  ins_pipe(pipe_class_default);\n-%}\n-\n@@ -12710,1 +12156,0 @@\n-  predicate(!false \/* TODO: PPC port HB_Schedule *\/);\n@@ -12722,19 +12167,0 @@\n-\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n-instruct branchLoopEndSched(cmpOp cmp, flagsRegSrc crx, label labl) %{\n-  match(CountedLoopEnd cmp crx);\n-  effect(USE labl);\n-  predicate(false \/* TODO: PPC port HB_Schedule *\/);\n-  \/\/ Higher cost than `branchCon'.\n-  ins_cost(5*BRANCH_COST);\n-\n-  \/\/ Actually size doesn't depend on alignment but on shortening.\n-  ins_variable_size_depending_on_alignment(true);\n-  \/\/ Long variant.\n-  ins_short_branch(0);\n-\n-  format %{ \"B_FAR$cmp $crx, $labl \\t\/\/ counted loop end\" %}\n-  size(8); \/\/ worst case\n-  ins_encode( enc_bc_short_far(crx, cmp, labl) );\n-  ins_pipe(pipe_class_default);\n-%}\n-\n@@ -12760,1 +12186,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12776,1 +12201,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12795,1 +12219,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12816,1 +12239,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12835,1 +12257,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12853,1 +12274,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -12866,1 +12286,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -12880,1 +12299,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12894,1 +12312,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12908,1 +12325,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12922,1 +12338,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12939,1 +12354,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12956,1 +12370,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12973,1 +12386,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12990,1 +12402,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13006,1 +12417,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13022,1 +12432,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13038,1 +12447,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13060,1 +12468,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13094,1 +12501,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13121,1 +12527,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13149,1 +12554,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13184,1 +12588,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13212,1 +12615,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13235,1 +12637,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13260,1 +12661,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13288,1 +12688,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13316,1 +12715,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13341,1 +12739,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13363,1 +12760,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13385,1 +12781,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13403,1 +12798,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13426,1 +12820,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13447,1 +12840,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13463,1 +12855,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13520,1 +12911,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13554,1 +12944,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13572,1 +12961,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -13587,1 +12975,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -13601,1 +12988,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzw);\n@@ -13615,1 +13001,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13629,1 +13014,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13706,1 +13090,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -13720,1 +13103,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -14115,1 +13497,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14129,1 +13510,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14143,1 +13523,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14166,1 +13545,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14178,1 +13556,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14240,1 +13617,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14252,1 +13628,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14314,1 +13689,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14326,1 +13700,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14404,1 +13777,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14852,1 +14224,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14865,1 +14236,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14878,1 +14248,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14891,1 +14260,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15156,1 +14524,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bctrl);\n@@ -15205,1 +14572,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15218,1 +14584,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_blr);\n@@ -15240,1 +14605,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15269,1 +14633,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15284,1 +14647,0 @@\n-      \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -15318,1 +14680,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_endgroup);\n@@ -15334,1 +14695,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15348,1 +14708,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15362,1 +14721,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15373,1 +14731,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -15388,1 +14745,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -15402,1 +14758,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":34,"deletions":679,"binary":false,"changes":713,"status":"modified"},{"patch":"@@ -119,7 +119,0 @@\n-  \/\/ On Power6 test for section size.\n-  if (PowerArchitecturePPC64 == 6) {\n-    determine_section_size();\n-  \/\/ TODO: PPC port } else {\n-  \/\/ TODO: PPC port PdScheduling::power6SectorSize = 0x20;\n-  }\n-\n@@ -570,234 +563,0 @@\n-#ifdef COMPILER2\n-\/\/ Determine section size on power6: If section size is 8 instructions,\n-\/\/ there should be a difference between the two testloops of ~15 %. If\n-\/\/ no difference is detected the section is assumed to be 32 instructions.\n-void VM_Version::determine_section_size() {\n-\n-  int unroll = 80;\n-\n-  const int code_size = (2* unroll * 32 + 100)*BytesPerInstWord;\n-\n-  \/\/ Allocate space for the code.\n-  ResourceMark rm;\n-  CodeBuffer cb(\"detect_section_size\", code_size, 0);\n-  MacroAssembler* a = new MacroAssembler(&cb);\n-\n-  uint32_t *code = (uint32_t *)a->pc();\n-  \/\/ Emit code.\n-  void (*test1)() = (void(*)())(void *)a->function_entry();\n-\n-  Label l1;\n-\n-  a->li(R4, 1);\n-  a->sldi(R4, R4, 28);\n-  a->b(l1);\n-  a->align(CodeEntryAlignment);\n-\n-  a->bind(l1);\n-\n-  for (int i = 0; i < unroll; i++) {\n-    \/\/ Schleife 1\n-    \/\/ ------- sector 0 ------------\n-    \/\/ ;; 0\n-    a->nop();                   \/\/ 1\n-    a->fpnop0();                \/\/ 2\n-    a->fpnop1();                \/\/ 3\n-    a->addi(R4,R4, -1); \/\/ 4\n-\n-    \/\/ ;;  1\n-    a->nop();                   \/\/ 5\n-    a->fmr(F6, F6);             \/\/ 6\n-    a->fmr(F7, F7);             \/\/ 7\n-    a->endgroup();              \/\/ 8\n-    \/\/ ------- sector 8 ------------\n-\n-    \/\/ ;;  2\n-    a->nop();                   \/\/ 9\n-    a->nop();                   \/\/ 10\n-    a->fmr(F8, F8);             \/\/ 11\n-    a->fmr(F9, F9);             \/\/ 12\n-\n-    \/\/ ;;  3\n-    a->nop();                   \/\/ 13\n-    a->fmr(F10, F10);           \/\/ 14\n-    a->fmr(F11, F11);           \/\/ 15\n-    a->endgroup();              \/\/ 16\n-    \/\/ -------- sector 16 -------------\n-\n-    \/\/ ;;  4\n-    a->nop();                   \/\/ 17\n-    a->nop();                   \/\/ 18\n-    a->fmr(F15, F15);           \/\/ 19\n-    a->fmr(F16, F16);           \/\/ 20\n-\n-    \/\/ ;;  5\n-    a->nop();                   \/\/ 21\n-    a->fmr(F17, F17);           \/\/ 22\n-    a->fmr(F18, F18);           \/\/ 23\n-    a->endgroup();              \/\/ 24\n-    \/\/ ------- sector 24  ------------\n-\n-    \/\/ ;;  6\n-    a->nop();                   \/\/ 25\n-    a->nop();                   \/\/ 26\n-    a->fmr(F19, F19);           \/\/ 27\n-    a->fmr(F20, F20);           \/\/ 28\n-\n-    \/\/ ;;  7\n-    a->nop();                   \/\/ 29\n-    a->fmr(F21, F21);           \/\/ 30\n-    a->fmr(F22, F22);           \/\/ 31\n-    a->brnop0();                \/\/ 32\n-\n-    \/\/ ------- sector 32 ------------\n-  }\n-\n-  \/\/ ;; 8\n-  a->cmpdi(CCR0, R4, unroll);   \/\/ 33\n-  a->bge(CCR0, l1);             \/\/ 34\n-  a->blr();\n-\n-  \/\/ Emit code.\n-  void (*test2)() = (void(*)())(void *)a->function_entry();\n-  \/\/ uint32_t *code = (uint32_t *)a->pc();\n-\n-  Label l2;\n-\n-  a->li(R4, 1);\n-  a->sldi(R4, R4, 28);\n-  a->b(l2);\n-  a->align(CodeEntryAlignment);\n-\n-  a->bind(l2);\n-\n-  for (int i = 0; i < unroll; i++) {\n-    \/\/ Schleife 2\n-    \/\/ ------- sector 0 ------------\n-    \/\/ ;; 0\n-    a->brnop0();                  \/\/ 1\n-    a->nop();                     \/\/ 2\n-    \/\/a->cmpdi(CCR0, R4, unroll);\n-    a->fpnop0();                  \/\/ 3\n-    a->fpnop1();                  \/\/ 4\n-    a->addi(R4,R4, -1);           \/\/ 5\n-\n-    \/\/ ;; 1\n-\n-    a->nop();                     \/\/ 6\n-    a->fmr(F6, F6);               \/\/ 7\n-    a->fmr(F7, F7);               \/\/ 8\n-    \/\/ ------- sector 8 ---------------\n-\n-    \/\/ ;; 2\n-    a->endgroup();                \/\/ 9\n-\n-    \/\/ ;; 3\n-    a->nop();                     \/\/ 10\n-    a->nop();                     \/\/ 11\n-    a->fmr(F8, F8);               \/\/ 12\n-\n-    \/\/ ;; 4\n-    a->fmr(F9, F9);               \/\/ 13\n-    a->nop();                     \/\/ 14\n-    a->fmr(F10, F10);             \/\/ 15\n-\n-    \/\/ ;; 5\n-    a->fmr(F11, F11);             \/\/ 16\n-    \/\/ -------- sector 16 -------------\n-\n-    \/\/ ;; 6\n-    a->endgroup();                \/\/ 17\n-\n-    \/\/ ;; 7\n-    a->nop();                     \/\/ 18\n-    a->nop();                     \/\/ 19\n-    a->fmr(F15, F15);             \/\/ 20\n-\n-    \/\/ ;; 8\n-    a->fmr(F16, F16);             \/\/ 21\n-    a->nop();                     \/\/ 22\n-    a->fmr(F17, F17);             \/\/ 23\n-\n-    \/\/ ;; 9\n-    a->fmr(F18, F18);             \/\/ 24\n-    \/\/ -------- sector 24 -------------\n-\n-    \/\/ ;; 10\n-    a->endgroup();                \/\/ 25\n-\n-    \/\/ ;; 11\n-    a->nop();                     \/\/ 26\n-    a->nop();                     \/\/ 27\n-    a->fmr(F19, F19);             \/\/ 28\n-\n-    \/\/ ;; 12\n-    a->fmr(F20, F20);             \/\/ 29\n-    a->nop();                     \/\/ 30\n-    a->fmr(F21, F21);             \/\/ 31\n-\n-    \/\/ ;; 13\n-    a->fmr(F22, F22);             \/\/ 32\n-  }\n-\n-  \/\/ -------- sector 32 -------------\n-  \/\/ ;; 14\n-  a->cmpdi(CCR0, R4, unroll); \/\/ 33\n-  a->bge(CCR0, l2);           \/\/ 34\n-\n-  a->blr();\n-  uint32_t *code_end = (uint32_t *)a->pc();\n-  a->flush();\n-\n-  cb.insts()->set_end((u_char*)code_end);\n-\n-  double loop1_seconds,loop2_seconds, rel_diff;\n-  uint64_t start1, stop1;\n-\n-  start1 = os::current_thread_cpu_time(false);\n-  (*test1)();\n-  stop1 = os::current_thread_cpu_time(false);\n-  loop1_seconds = (stop1- start1) \/ (1000 *1000 *1000.0);\n-\n-\n-  start1 = os::current_thread_cpu_time(false);\n-  (*test2)();\n-  stop1 = os::current_thread_cpu_time(false);\n-\n-  loop2_seconds = (stop1 - start1) \/ (1000 *1000 *1000.0);\n-\n-  rel_diff = (loop2_seconds - loop1_seconds) \/ loop1_seconds *100;\n-\n-  if (PrintAssembly || PrintStubCode) {\n-    ttyLocker ttyl;\n-    tty->print_cr(\"Decoding section size detection stub at \" INTPTR_FORMAT \" before execution:\", p2i(code));\n-    \/\/ Use existing decode function. This enables the [MachCode] format which is needed to DecodeErrorFile.\n-    Disassembler::decode(&cb, (u_char*)code, (u_char*)code_end, tty);\n-    tty->print_cr(\"Time loop1 :%f\", loop1_seconds);\n-    tty->print_cr(\"Time loop2 :%f\", loop2_seconds);\n-    tty->print_cr(\"(time2 - time1) \/ time1 = %f %%\", rel_diff);\n-\n-    if (rel_diff > 12.0) {\n-      tty->print_cr(\"Section Size 8 Instructions\");\n-    } else{\n-      tty->print_cr(\"Section Size 32 Instructions or Power5\");\n-    }\n-  }\n-\n-#if 0 \/\/ TODO: PPC port\n-  \/\/ Set sector size (if not set explicitly).\n-  if (FLAG_IS_DEFAULT(Power6SectorSize128PPC64)) {\n-    if (rel_diff > 12.0) {\n-      PdScheduling::power6SectorSize = 0x20;\n-    } else {\n-      PdScheduling::power6SectorSize = 0x80;\n-    }\n-  } else if (Power6SectorSize128PPC64) {\n-    PdScheduling::power6SectorSize = 0x80;\n-  } else {\n-    PdScheduling::power6SectorSize = 0x20;\n-  }\n-#endif\n-  if (UsePower6SchedulerPPC64) Unimplemented();\n-}\n-#endif \/\/ COMPILER2\n-\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":0,"deletions":241,"binary":false,"changes":241,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-  static void determine_section_size();\n-  static void power6_micro_bench();\n+\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}