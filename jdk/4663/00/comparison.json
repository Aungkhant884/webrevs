{"files":[{"patch":"@@ -798,8 +798,2 @@\n-  Handle string = java_lang_String::create_from_str(name, CHECK_NH);\n-  Handle thread_group(THREAD, Universe::system_thread_group());\n-  return JavaCalls::construct_new_instance(\n-                       vmClasses::Thread_klass(),\n-                       vmSymbols::threadgroup_string_void_signature(),\n-                       thread_group,\n-                       string,\n-                       CHECK_NH);\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, false \/* not visible *\/, CHECK_NH);\n+  return thread_oop;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,10 +40,1 @@\n-  Handle string = java_lang_String::create_from_str(name, CHECK);\n-\n-  \/\/ Initialize thread_oop to put it into the system threadGroup\n-  Handle thread_group (THREAD, Universe::system_thread_group());\n-  Handle thread_oop = JavaCalls::construct_new_instance(\n-                          vmClasses::Thread_klass(),\n-                          vmSymbols::threadgroup_string_void_signature(),\n-                          thread_group,\n-                          string,\n-                          CHECK);\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, false \/* not visible *\/, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,20 +42,1 @@\n-  Handle string = java_lang_String::create_from_str(name, CHECK);\n-\n-  \/\/ Initialize thread_oop to put it into the system threadGroup\n-  Handle thread_group (THREAD, Universe::system_thread_group());\n-  Handle thread_oop = JavaCalls::construct_new_instance(\n-                          vmClasses::Thread_klass(),\n-                          vmSymbols::threadgroup_string_void_signature(),\n-                          thread_group,\n-                          string,\n-                          CHECK);\n-\n-  Klass* group = vmClasses::ThreadGroup_klass();\n-  JavaValue result(T_VOID);\n-  JavaCalls::call_special(&result,\n-                          thread_group,\n-                          group,\n-                          vmSymbols::add_method_name(),\n-                          vmSymbols::thread_void_signature(),\n-                          thread_oop,\n-                          THREAD);\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, true \/* visible *\/, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/notificationThread.cpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -472,20 +472,2 @@\n-    const char thread_name[] = \"Signal Dispatcher\";\n-    Handle string = java_lang_String::create_from_str(thread_name, CHECK);\n-\n-    \/\/ Initialize thread_oop to put it into the system threadGroup\n-    Handle thread_group (THREAD, Universe::system_thread_group());\n-    Handle thread_oop = JavaCalls::construct_new_instance(vmClasses::Thread_klass(),\n-                           vmSymbols::threadgroup_string_void_signature(),\n-                           thread_group,\n-                           string,\n-                           CHECK);\n-\n-    Klass* group = vmClasses::ThreadGroup_klass();\n-    JavaValue result(T_VOID);\n-    JavaCalls::call_special(&result,\n-                            thread_group,\n-                            group,\n-                            vmSymbols::add_method_name(),\n-                            vmSymbols::thread_void_signature(),\n-                            thread_oop,\n-                            CHECK);\n+    const char* name = \"Signal Dispatcher\";\n+    Handle thread_oop = JavaThread::create_system_thread_object(name, true \/* visible *\/, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -95,10 +95,1 @@\n-  Handle string = java_lang_String::create_from_str(name, CHECK);\n-\n-  \/\/ Initialize thread_oop to put it into the system threadGroup\n-  Handle thread_group (THREAD, Universe::system_thread_group());\n-  Handle thread_oop = JavaCalls::construct_new_instance(\n-                          vmClasses::Thread_klass(),\n-                          vmSymbols::threadgroup_string_void_signature(),\n-                          thread_group,\n-                          string,\n-                          CHECK);\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, false \/* not visible *\/, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3904,0 +3904,37 @@\n+\/\/ Helper function to create the java.lang.Thread object for a\n+\/\/ VM-internal thread. The thread will have the given name, be\n+\/\/ part of the System ThreadGroup and if is_visible is true will be\n+\/\/ discoverable via the system ThreadGroup.\n+Handle JavaThread::create_system_thread_object(const char* name,\n+                                               bool is_visible, TRAPS) {\n+  Handle string = java_lang_String::create_from_str(name, CHECK_NH);\n+\n+  \/\/ Initialize thread_oop to put it into the system threadGroup.\n+  \/\/ This is done by calling the Thread(ThreadGroup tg, String name)\n+  \/\/ constructor, which adds the new thread to the group as an unstarted\n+  \/\/ thread.\n+  Handle thread_group(THREAD, Universe::system_thread_group());\n+  Handle thread_oop =\n+    JavaCalls::construct_new_instance(vmClasses::Thread_klass(),\n+                                      vmSymbols::threadgroup_string_void_signature(),\n+                                      thread_group,\n+                                      string,\n+                                      CHECK_NH);\n+\n+  \/\/ If the Thread is intended to be visible then we have to mimic what\n+  \/\/ Thread.start() would do, by adding it to its ThreadGroup: tg.add(t).\n+  if (is_visible) {\n+    Klass* group = vmClasses::ThreadGroup_klass();\n+    JavaValue result(T_VOID);\n+    JavaCalls::call_special(&result,\n+                            thread_group,\n+                            group,\n+                            vmSymbols::add_method_name(),\n+                            vmSymbols::thread_void_signature(),\n+                            thread_oop,\n+                            CHECK_NH);\n+  }\n+\n+  return thread_oop;\n+}\n+\n@@ -3910,1 +3947,1 @@\n-  assert(target->osthread()!= NULL, \"target thread is not properly initialized\");\n+  assert(target->osthread() != NULL, \"target thread is not properly initialized\");\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1597,0 +1597,6 @@\n+  \/\/ Helper function to create the java.lang.Thread object for a\n+  \/\/ VM-internal thread. The thread will have the given name, be\n+  \/\/ part of the System ThreadGroup and if is_visible is true will be\n+  \/\/ discoverable via the system ThreadGroup.\n+  static Handle create_system_thread_object(const char* name, bool is_visible, TRAPS);\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -454,28 +454,2 @@\n-  const char thread_name[] = \"Attach Listener\";\n-  Handle string = java_lang_String::create_from_str(thread_name, THREAD);\n-  if (has_init_error(THREAD)) {\n-    set_state(AL_NOT_INITIALIZED);\n-    return;\n-  }\n-\n-  \/\/ Initialize thread_oop to put it into the system threadGroup\n-  Handle thread_group (THREAD, Universe::system_thread_group());\n-  Handle thread_oop = JavaCalls::construct_new_instance(vmClasses::Thread_klass(),\n-                       vmSymbols::threadgroup_string_void_signature(),\n-                       thread_group,\n-                       string,\n-                       THREAD);\n-  if (has_init_error(THREAD)) {\n-    set_state(AL_NOT_INITIALIZED);\n-    return;\n-  }\n-\n-  Klass* group = vmClasses::ThreadGroup_klass();\n-  JavaValue result(T_VOID);\n-  JavaCalls::call_special(&result,\n-                        thread_group,\n-                        group,\n-                        vmSymbols::add_method_name(),\n-                        vmSymbols::thread_void_signature(),\n-                        thread_oop,\n-                        THREAD);\n+  const char* name = \"Attach Listener\";\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, true \/* visible *\/, THREAD);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"}]}