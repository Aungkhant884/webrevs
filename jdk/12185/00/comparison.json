{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  if (p == NULL && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n@@ -60,1 +60,1 @@\n-  if (p == NULL && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n@@ -66,1 +66,1 @@\n-\/\/ handles NULL pointers\n+\/\/ handles null pointers\n@@ -71,2 +71,2 @@\n-void* MetaspaceObj::_shared_metaspace_base = NULL;\n-void* MetaspaceObj::_shared_metaspace_top  = NULL;\n+void* MetaspaceObj::_shared_metaspace_base = nullptr;\n+void* MetaspaceObj::_shared_metaspace_top  = nullptr;\n@@ -135,1 +135,1 @@\n-    DEBUG_ONLY(if (res!= NULL) set_allocation_type(res, C_HEAP);)\n+    DEBUG_ONLY(if (res!= nullptr) set_allocation_type(res, C_HEAP);)\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,1 +177,1 @@\n-\/\/ handles NULL pointers\n+\/\/ handles null pointers\n@@ -324,1 +324,1 @@\n-  \/\/ When CDS is not enabled, both pointers are set to NULL.\n+  \/\/ When CDS is not enabled, both pointers are set to null.\n@@ -338,1 +338,1 @@\n-    \/\/ both be NULL and all values of p will be rejected quickly.\n+    \/\/ both be null and all values of p will be rejected quickly.\n@@ -389,1 +389,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -514,1 +514,1 @@\n-    DEBUG_ONLY(if (res != NULL) set_allocation_type(res, RESOURCE_AREA);)\n+    DEBUG_ONLY(if (res != nullptr) set_allocation_type(res, RESOURCE_AREA);)\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,2 @@\n-  if (addr == NULL) {\n-    return NULL;\n+  if (addr == nullptr) {\n+    return nullptr;\n@@ -70,1 +70,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -79,1 +79,1 @@\n-  if (addr == NULL) {\n+  if (addr == nullptr) {\n@@ -151,1 +151,1 @@\n-      : NULL;\n+      : nullptr;\n@@ -153,1 +153,1 @@\n-  if (new_addr != NULL && old_addr != NULL) {\n+  if (new_addr != nullptr && old_addr != nullptr) {\n@@ -157,1 +157,1 @@\n-  if (old_addr != NULL) {\n+  if (old_addr != nullptr) {\n@@ -176,1 +176,1 @@\n-  if (addr != NULL) {\n+  if (addr != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-  ChunkPool(size_t size) : _first(NULL), _num_chunks(0), _size(size) {}\n+  ChunkPool(size_t size) : _first(nullptr), _num_chunks(0), _size(size) {}\n@@ -61,1 +61,1 @@\n-  \/\/ Allocate a chunk from the pool; returns NULL if pool is empty.\n+  \/\/ Allocate a chunk from the pool; returns null if pool is empty.\n@@ -84,1 +84,1 @@\n-    Chunk* cur = NULL;\n+    Chunk* cur = nullptr;\n@@ -92,1 +92,1 @@\n-        assert(cur != NULL, \"counter out of sync?\");\n+        assert(cur != nullptr, \"counter out of sync?\");\n@@ -95,1 +95,1 @@\n-      assert(cur != NULL, \"counter out of sync?\");\n+      assert(cur != nullptr, \"counter out of sync?\");\n@@ -98,1 +98,1 @@\n-      cur->set_next(NULL);\n+      cur->set_next(nullptr);\n@@ -103,1 +103,1 @@\n-      while(cur != NULL) {\n+      while(cur != nullptr) {\n@@ -118,1 +118,1 @@\n-  \/\/ Given a (inner payload) size, return the pool responsible for it, or NULL if the size is non-standard\n+  \/\/ Given a (inner payload) size, return the pool responsible for it, or null if the size is non-standard\n@@ -125,1 +125,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -173,1 +173,1 @@\n-  if (pool != NULL) {\n+  if (pool != nullptr) {\n@@ -175,1 +175,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -183,1 +183,1 @@\n-  if (p == NULL && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n@@ -195,1 +195,1 @@\n-  if (pool != NULL) {\n+  if (pool != nullptr) {\n@@ -204,1 +204,1 @@\n-  _next = NULL;         \/\/ Chain on the linked list\n+  _next = nullptr;         \/\/ Chain on the linked list\n@@ -220,1 +220,1 @@\n-  _next = NULL;\n+  _next = nullptr;\n@@ -279,1 +279,1 @@\n-  if (_first != NULL) {\n+  if (_first != nullptr) {\n@@ -315,1 +315,1 @@\n-  if (_chunk == NULL) {\n+  if (_chunk == nullptr) {\n@@ -317,1 +317,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -335,1 +335,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -337,1 +337,1 @@\n-  if (old_ptr == NULL) {\n+  if (old_ptr == nullptr) {\n@@ -339,1 +339,1 @@\n-    return Amalloc(new_size, alloc_failmode); \/\/ as with realloc(3), a NULL old ptr is equivalent to malloc(3)\n+    return Amalloc(new_size, alloc_failmode); \/\/ as with realloc(3), a null old ptr is equivalent to malloc(3)\n@@ -361,2 +361,2 @@\n-  if (new_ptr == NULL) {\n-    return NULL;\n+  if (new_ptr == nullptr) {\n+    return nullptr;\n@@ -372,1 +372,1 @@\n-  if (_chunk == NULL) return false;\n+  if (_chunk == nullptr) return false;\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,2 +143,2 @@\n-    if (ptr == NULL) {\n-      return true; \/\/ as with free(3), freeing NULL is a noop.\n+    if (ptr == nullptr) {\n+      return true; \/\/ as with free(3), freeing null is a noop.\n@@ -177,2 +177,2 @@\n-    _first = _chunk = NULL;\n-    _hwm = _max = NULL;\n+    _first = _chunk = nullptr;\n+    _hwm = _max = nullptr;\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-  _non_class_space_arena(NULL),\n-  _class_space_arena(NULL)\n+  _non_class_space_arena(nullptr),\n+  _class_space_arena(nullptr)\n@@ -101,1 +101,1 @@\n-\/\/ and allocate. Returns NULL if failure. Used during Metaspace GC.\n+\/\/ and allocate. Returns null if failure. Used during Metaspace GC.\n@@ -118,1 +118,1 @@\n-  } while (!incremented && res == NULL && can_retry);\n+  } while (!incremented && res == nullptr && can_retry);\n@@ -144,1 +144,1 @@\n-  if (non_class_space_arena() != NULL) {\n+  if (non_class_space_arena() != nullptr) {\n@@ -147,1 +147,1 @@\n-  if (class_space_arena() != NULL) {\n+  if (class_space_arena() != nullptr) {\n@@ -154,1 +154,1 @@\n-  if (non_class_space_arena() != NULL) {\n+  if (non_class_space_arena() != nullptr) {\n@@ -157,1 +157,1 @@\n-  if (class_space_arena() != NULL) {\n+  if (class_space_arena() != nullptr) {\n@@ -170,2 +170,2 @@\n-  if (non_class_space_arena() != NULL) {\n-    non_class_space_arena()->usage_numbers(&used_nc, NULL, &cap_nc);\n+  if (non_class_space_arena() != nullptr) {\n+    non_class_space_arena()->usage_numbers(&used_nc, nullptr, &cap_nc);\n@@ -173,2 +173,2 @@\n-  if (class_space_arena() != NULL) {\n-    class_space_arena()->usage_numbers(&used_c, NULL, &cap_c);\n+  if (class_space_arena() != nullptr) {\n+    class_space_arena()->usage_numbers(&used_c, nullptr, &cap_c);\n@@ -176,1 +176,1 @@\n-  if (p_used_bytes != NULL) {\n+  if (p_used_bytes != nullptr) {\n@@ -179,1 +179,1 @@\n-  if (p_capacity_bytes != NULL) {\n+  if (p_capacity_bytes != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-  \/\/  (NULL if -XX:-UseCompressedClassPointers).\n+  \/\/  (null if -XX:-UseCompressedClassPointers).\n@@ -90,1 +90,1 @@\n-  \/\/ and allocate. Returns NULL if failure. Used during Metaspace GC.\n+  \/\/ and allocate. Returns null if failure. Used during Metaspace GC.\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  if (outerp != NULL) {\n+  if (outerp != nullptr) {\n@@ -39,1 +39,1 @@\n-  return NULL; \/\/ OOM\n+  return nullptr; \/\/ OOM\n@@ -43,1 +43,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -56,1 +56,1 @@\n-  if (_base_addr == NULL) {\n+  if (_base_addr == nullptr) {\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,1 +166,1 @@\n-  GuardedMemory(void* base_ptr, const size_t user_size, const void* tag = NULL) {\n+  GuardedMemory(void* base_ptr, const size_t user_size, const void* tag = nullptr) {\n@@ -195,2 +195,2 @@\n-  void* wrap_with_guards(void* base_ptr, size_t user_size, const void* tag = NULL) {\n-    assert(base_ptr != NULL, \"Attempt to wrap NULL with memory guard\");\n+  void* wrap_with_guards(void* base_ptr, size_t user_size, const void* tag = nullptr) {\n+    assert(base_ptr != nullptr, \"Attempt to wrap nullptr with memory guard\");\n@@ -213,1 +213,1 @@\n-    if (_base_addr != NULL) {\n+    if (_base_addr != nullptr) {\n@@ -229,1 +229,1 @@\n-   * @return the general purpose tag, defaults to NULL.\n+   * @return the general purpose tag, defaults to nullptr.\n@@ -239,1 +239,1 @@\n-    assert(_base_addr != NULL, \"Not wrapping any memory\");\n+    assert(_base_addr != nullptr, \"Not wrapping any memory\");\n@@ -249,1 +249,1 @@\n-    assert(_base_addr != NULL, \"Not wrapping any memory\");\n+    assert(_base_addr != nullptr, \"Not wrapping any memory\");\n@@ -272,1 +272,1 @@\n-    _base_addr = NULL;\n+    _base_addr = nullptr;\n@@ -306,1 +306,1 @@\n-   * @return guarded wrapped memory pointer to the user area, or NULL if OOM.\n+   * @return guarded wrapped memory pointer to the user area, or nullptr if OOM.\n@@ -308,1 +308,1 @@\n-  static void* wrap_copy(const void* p, const size_t len, const void* tag = NULL);\n+  static void* wrap_copy(const void* p, const size_t len, const void* tag = nullptr);\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n-  _freelist                     = NULL;\n-  _last_insert_point            = NULL;\n+  _freelist                     = nullptr;\n+  _last_insert_point            = nullptr;\n@@ -288,1 +288,1 @@\n-  if (block != NULL) {\n+  if (block != nullptr) {\n@@ -315,1 +315,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -329,1 +329,1 @@\n-  if (b == NULL) return NULL;\n+  if (b == nullptr) return nullptr;\n@@ -448,1 +448,1 @@\n-\/\/ NULL is returned if anything invalid is detected.\n+\/\/ null is returned if anything invalid is detected.\n@@ -452,1 +452,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -461,1 +461,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -481,1 +481,1 @@\n-  return ((h == NULL) || h->free()) ? NULL : h->allocated_space();\n+  return ((h == nullptr) || h->free()) ? nullptr : h->allocated_space();\n@@ -488,1 +488,1 @@\n-  return (result != NULL && result->blob_contains((address)start)) ? result : NULL;\n+  return (result != nullptr && result->blob_contains((address)start)) ? result : nullptr;\n@@ -504,1 +504,1 @@\n-\/\/ If not, it returns the subsequent block (if available), NULL otherwise.\n+\/\/ If not, it returns the subsequent block (if available), null otherwise.\n@@ -510,3 +510,3 @@\n-  if (b != NULL && b->free()) b = next_block(b);\n-  assert(b == NULL || !b->free(), \"must be in use or at end of heap\");\n-  return (b == NULL) ? NULL : b->allocated_space();\n+  if (b != nullptr && b->free()) b = next_block(b);\n+  assert(b == nullptr || !b->free(), \"must be in use or at end of heap\");\n+  return (b == nullptr) ? nullptr : b->allocated_space();\n@@ -520,1 +520,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -526,1 +526,1 @@\n-  if (b == NULL) return NULL;\n+  if (b == nullptr) return nullptr;\n@@ -533,1 +533,1 @@\n-  if (b == NULL) return NULL;\n+  if (b == nullptr) return nullptr;\n@@ -537,1 +537,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -573,1 +573,1 @@\n-  assert(a != NULL && b != NULL, \"must be real pointers\");\n+  assert(a != nullptr && b != nullptr, \"must be real pointers\");\n@@ -588,1 +588,1 @@\n-    assert(a->link() != NULL && a->link()->free(), \"must be free too\");\n+    assert(a->link() != nullptr && a->link()->free(), \"must be free too\");\n@@ -626,2 +626,2 @@\n-  if (_freelist == NULL) {\n-    b->set_link(NULL);\n+  if (_freelist == nullptr) {\n+    b->set_link(nullptr);\n@@ -647,1 +647,1 @@\n-  if ((_freelist_length > freelist_limit) && (_last_insert_point != NULL)) {\n+  if ((_freelist_length > freelist_limit) && (_last_insert_point != nullptr)) {\n@@ -649,1 +649,1 @@\n-    if ((_last_insert_point != NULL) && _last_insert_point->free() && (_last_insert_point < b)) {\n+    if ((_last_insert_point != nullptr) && _last_insert_point->free() && (_last_insert_point < b)) {\n@@ -654,1 +654,1 @@\n-  while(cur != NULL && cur < b) {\n+  while(cur != nullptr && cur < b) {\n@@ -659,1 +659,1 @@\n-  assert((prev < b) && (cur == NULL || b < cur), \"free-list must be ordered\");\n+  assert((prev < b) && (cur == nullptr || b < cur), \"free-list must be ordered\");\n@@ -666,1 +666,1 @@\n- * @return NULL, if no one was found\n+ * @return null, if no one was found\n@@ -669,2 +669,2 @@\n-  FreeBlock* found_block  = NULL;\n-  FreeBlock* found_prev   = NULL;\n+  FreeBlock* found_block  = nullptr;\n+  FreeBlock* found_prev   = nullptr;\n@@ -673,2 +673,2 @@\n-  HeapBlock* res  = NULL;\n-  FreeBlock* prev = NULL;\n+  HeapBlock* res  = nullptr;\n+  FreeBlock* prev = nullptr;\n@@ -680,1 +680,1 @@\n-  while(cur != NULL) {\n+  while(cur != nullptr) {\n@@ -699,1 +699,1 @@\n-  if (found_block == NULL) {\n+  if (found_block == nullptr) {\n@@ -701,1 +701,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -709,1 +709,1 @@\n-    if (found_prev == NULL) {\n+    if (found_prev == nullptr) {\n@@ -742,1 +742,1 @@\n-  for(HeapBlock* h = first_block(); h != NULL; h = next_block(h)) {\n+  for(HeapBlock* h = first_block(); h != nullptr; h = next_block(h)) {\n@@ -797,1 +797,1 @@\n-    for(FreeBlock* b = _freelist; b != NULL; b = b->link()) {\n+    for(FreeBlock* b = _freelist; b != nullptr; b = b->link()) {\n@@ -806,1 +806,1 @@\n-    for(HeapBlock* h = first_block(); h != NULL; h = next_block(h)) {\n+    for(HeapBlock* h = first_block(); h != nullptr; h = next_block(h)) {\n@@ -814,1 +814,1 @@\n-    for(FreeBlock* b = _freelist; b != NULL; b = b->link()) {\n+    for(FreeBlock* b = _freelist; b != nullptr; b = b->link()) {\n@@ -824,1 +824,1 @@\n-    for(HeapBlock* b = first_block(); b != NULL; b = next_block(b)) {\n+    for(HeapBlock* b = first_block(); b != nullptr; b = next_block(b)) {\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-  void initialize(size_t length)             { HeapBlock::initialize(length); _link= NULL; }\n+  void initialize(size_t length)             { HeapBlock::initialize(length); _link= nullptr; }\n@@ -156,1 +156,1 @@\n-  void* allocate (size_t size); \/\/ Allocate 'size' bytes in the code cache or return NULL\n+  void* allocate (size_t size); \/\/ Allocate 'size' bytes in the code cache or return null\n@@ -178,1 +178,1 @@\n-  virtual void* find_start(void* p)     const;   \/\/ returns the block containing p or NULL\n+  virtual void* find_start(void* p)     const;   \/\/ returns the block containing p or null\n@@ -194,1 +194,1 @@\n-  \/\/ returns the first block or NULL\n+  \/\/ returns the first block or null\n@@ -196,1 +196,1 @@\n-  \/\/ returns the next block given a block p or NULL\n+  \/\/ returns the next block given a block p or null\n","filename":"src\/hotspot\/share\/memory\/heap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-  if (_subclasses != NULL) {\n+  if (_subclasses != nullptr) {\n@@ -53,1 +53,1 @@\n-  if (_subclasses == NULL) {\n+  if (_subclasses == nullptr) {\n@@ -83,1 +83,1 @@\n-  if (_klass->name() != NULL) {\n+  if (_klass->name() != nullptr) {\n@@ -110,2 +110,2 @@\n-                 module->version() != NULL ? \"@\" : \"\",\n-                 module->version() != NULL ? module->version()->as_C_string() : \"\");\n+                 module->version() != nullptr ? \"@\" : \"\",\n+                 module->version() != nullptr ? module->version()->as_C_string() : \"\");\n@@ -122,2 +122,2 @@\n-  if (k->java_mirror_no_keepalive() == NULL) {\n-    return NULL;\n+  if (k->java_mirror_no_keepalive() == nullptr) {\n+    return nullptr;\n@@ -127,1 +127,1 @@\n-  while (elt != NULL) {\n+  while (elt != nullptr) {\n@@ -135,1 +135,1 @@\n-  if (elt != NULL) {\n+  if (elt != nullptr) {\n@@ -143,1 +143,1 @@\n-  while (elt != NULL) {\n+  while (elt != nullptr) {\n@@ -151,2 +151,2 @@\n-  _list = NULL;\n-  while (elt != NULL) {\n+  _list = nullptr;\n+  while (elt != nullptr) {\n@@ -177,1 +177,1 @@\n-  if (_buckets != NULL) {\n+  if (_buckets != nullptr) {\n@@ -189,1 +189,1 @@\n-  if (_buckets != NULL) {\n+  if (_buckets != nullptr) {\n@@ -194,1 +194,1 @@\n-    _buckets = NULL;\n+    _buckets = nullptr;\n@@ -204,1 +204,1 @@\n-  assert(_buckets != NULL, \"Allocation failure should have been caught\");\n+  assert(_buckets != nullptr, \"Allocation failure should have been caught\");\n@@ -209,1 +209,1 @@\n-  assert(e == NULL || k == e->klass(), \"must be equal\");\n+  assert(e == nullptr || k == e->klass(), \"must be equal\");\n@@ -218,1 +218,1 @@\n-  \/\/ elt may be NULL if it's a new klass for which we\n+  \/\/ elt may be null if it's a new klass for which we\n@@ -220,1 +220,1 @@\n-  if (elt != NULL) {\n+  if (elt != nullptr) {\n@@ -231,1 +231,1 @@\n-  assert(_buckets != NULL, \"Allocation failure should have been caught\");\n+  assert(_buckets != nullptr, \"Allocation failure should have been caught\");\n@@ -246,1 +246,1 @@\n-  \/\/ elt may be NULL if it's a new klass for which we\n+  \/\/ elt may be null if it's a new klass for which we\n@@ -248,1 +248,1 @@\n-  if (elt != NULL) {\n+  if (elt != nullptr) {\n@@ -352,1 +352,1 @@\n-    if (super != NULL) {\n+    if (super != nullptr) {\n@@ -354,1 +354,1 @@\n-      assert(super_cie != NULL, \"could not lookup superclass\");\n+      assert(super_cie != nullptr, \"could not lookup superclass\");\n@@ -362,1 +362,1 @@\n-    if (classname == NULL) {\n+    if (classname == nullptr) {\n@@ -377,1 +377,1 @@\n-  assert(jlo_cie != NULL, \"could not lookup java.lang.Object\");\n+  assert(jlo_cie != nullptr, \"could not lookup java.lang.Object\");\n@@ -387,1 +387,1 @@\n-      if (curr_cie->subclasses() != NULL) {\n+      if (curr_cie->subclasses() != nullptr) {\n@@ -407,1 +407,1 @@\n-  while (super != NULL) {\n+  while (super != nullptr) {\n@@ -419,1 +419,1 @@\n-    if (print_subclasses && curr_cie->subclasses() != NULL) {\n+    if (print_subclasses && curr_cie->subclasses() != nullptr) {\n@@ -443,1 +443,1 @@\n-  if (loader_oop == NULL) {\n+  if (loader_oop == nullptr) {\n@@ -464,1 +464,1 @@\n-  while (super != NULL) {\n+  while (super != nullptr) {\n@@ -533,1 +533,1 @@\n-    return _filter == NULL || _filter->do_object_b(obj);\n+    return _filter == nullptr || _filter->do_object_b(obj);\n@@ -574,1 +574,1 @@\n-    if (workers != NULL) {\n+    if (workers != nullptr) {\n@@ -604,1 +604,1 @@\n-    uintx missed_count = populate_table(&cit, NULL, parallel_thread_num);\n+    uintx missed_count = populate_table(&cit, nullptr, parallel_thread_num);\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-    _do_print(false), _subclasses(NULL)\n+    _do_print(false), _subclasses(nullptr)\n@@ -100,1 +100,1 @@\n-  void initialize() { _list = NULL; }\n+  void initialize() { _list = nullptr; }\n@@ -126,1 +126,1 @@\n-  bool allocation_failed() { return _buckets == NULL; }\n+  bool allocation_failed() { return _buckets == nullptr; }\n@@ -204,1 +204,1 @@\n-  uintx populate_table(KlassInfoTable* cit, BoolObjectClosure* filter = NULL, uint parallel_thread_num = 1) NOT_SERVICES_RETURN_(0);\n+  uintx populate_table(KlassInfoTable* cit, BoolObjectClosure* filter = nullptr, uint parallel_thread_num = 1) NOT_SERVICES_RETURN_(0);\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-  if (nm != NULL) {\n+  if (nm != nullptr) {\n@@ -60,1 +60,1 @@\n-  if (nm != NULL && nm->oops_do_try_claim()) {\n+  if (nm != nullptr && nm->oops_do_try_claim()) {\n@@ -69,1 +69,1 @@\n-      if (bs_nm != NULL) {\n+      if (bs_nm != nullptr) {\n@@ -82,1 +82,1 @@\n-  if (nm != NULL) {\n+  if (nm != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-  OopIterateClosure() : _ref_discoverer(NULL) { }\n+  OopIterateClosure() : _ref_discoverer(nullptr) { }\n@@ -117,1 +117,1 @@\n-  BasicOopIterateClosure(ReferenceDiscoverer* rd = NULL) : OopIterateClosure(rd) {}\n+  BasicOopIterateClosure(ReferenceDiscoverer* rd = nullptr) : OopIterateClosure(rd) {}\n@@ -179,1 +179,1 @@\n-  ClaimMetadataVisitingOopIterateClosure(int claim, ReferenceDiscoverer* rd = NULL) :\n+  ClaimMetadataVisitingOopIterateClosure(int claim, ReferenceDiscoverer* rd = nullptr) :\n@@ -195,1 +195,1 @@\n-  MetadataVisitingOopIterateClosure(ReferenceDiscoverer* rd = NULL);\n+  MetadataVisitingOopIterateClosure(ReferenceDiscoverer* rd = nullptr);\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-  if (array == NULL) {\n+  if (array == nullptr) {\n","filename":"src\/hotspot\/share\/memory\/memRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  MemRegion() : _start(NULL), _word_size(0) {};\n+  MemRegion() : _start(nullptr), _word_size(0) {};\n","filename":"src\/hotspot\/share\/memory\/memRegion.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-    if (data != NULL) {\n-      assert(loader_data != NULL, \"shouldn't pass null\");\n+    if (data != nullptr) {\n+      assert(loader_data != nullptr, \"shouldn't pass null\");\n@@ -66,2 +66,2 @@\n-    if (md != NULL) {\n-      assert(loader_data != NULL, \"shouldn't pass null\");\n+    if (md != nullptr) {\n+      assert(loader_data != nullptr, \"shouldn't pass null\");\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,1 +338,1 @@\n-    if (can_retry != NULL) {\n+    if (can_retry != nullptr) {\n@@ -344,1 +344,1 @@\n-  if (can_retry != NULL) {\n+  if (can_retry != nullptr) {\n@@ -353,1 +353,1 @@\n-  if (new_cap_until_GC != NULL) {\n+  if (new_cap_until_GC != nullptr) {\n@@ -356,1 +356,1 @@\n-  if (old_cap_until_GC != NULL) {\n+  if (old_cap_until_GC != nullptr) {\n@@ -537,1 +537,1 @@\n-const MetaspaceTracer* Metaspace::_tracer = NULL;\n+const MetaspaceTracer* Metaspace::_tracer = nullptr;\n@@ -540,1 +540,1 @@\n-  return metaspace::MetaspaceContext::context_nonclass() != NULL\n+  return metaspace::MetaspaceContext::context_nonclass() != nullptr\n@@ -547,1 +547,1 @@\n-  if (VirtualSpaceList::vslist_class() != NULL) {\n+  if (VirtualSpaceList::vslist_class() != nullptr) {\n@@ -580,1 +580,1 @@\n-  return MetaspaceContext::context_class() != NULL;\n+  return MetaspaceContext::context_class() != nullptr;\n@@ -615,1 +615,1 @@\n-    {  NULL, NULL, 0 }\n+    {  nullptr, nullptr, 0 }\n@@ -618,1 +618,1 @@\n-  for (int i = 0; search_ranges[i].from != NULL; i ++) {\n+  for (int i = 0; search_ranges[i].from != nullptr; i ++) {\n@@ -639,1 +639,1 @@\n-  return ReservedSpace(size, Metaspace::reserve_alignment(), os::vm_page_size(), (char*)NULL);\n+  return ReservedSpace(size, Metaspace::reserve_alignment(), os::vm_page_size(), (char*)nullptr);\n@@ -763,1 +763,1 @@\n-    address base = NULL;\n+    address base = nullptr;\n@@ -798,1 +798,1 @@\n-      if (base != NULL) {\n+      if (base != nullptr) {\n@@ -834,1 +834,1 @@\n-  \/\/ VM does not distinguish between \"narrow 0 as in NULL\" and \"narrow 0 as in start\n+  \/\/ VM does not distinguish between \"narrow 0 as in null\" and \"narrow 0 as in start\n@@ -870,1 +870,1 @@\n-\/\/ This version of Metaspace::allocate does not throw OOM but simply returns NULL, and\n+\/\/ This version of Metaspace::allocate does not throw OOM but simply returns null, and\n@@ -878,1 +878,1 @@\n-  assert(loader_data != NULL, \"Should never pass around a NULL loader_data. \"\n+  assert(loader_data != nullptr, \"Should never pass around a nullptr loader_data. \"\n@@ -889,1 +889,1 @@\n-  if (result != NULL) {\n+  if (result != nullptr) {\n@@ -904,1 +904,1 @@\n-    return NULL;  \/\/ caller does a CHECK_NULL too\n+    return nullptr;  \/\/ caller does a CHECK_NULL too\n@@ -909,1 +909,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -921,1 +921,1 @@\n-    if (result == NULL) {\n+    if (result == nullptr) {\n@@ -924,1 +924,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -946,1 +946,1 @@\n-      if (loader_data->metaspace_or_null() != NULL) {\n+      if (loader_data->metaspace_or_null() != nullptr) {\n@@ -994,1 +994,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1005,1 +1005,1 @@\n-    if (cm != NULL) {\n+    if (cm != nullptr) {\n@@ -1010,1 +1010,1 @@\n-      if (cm != NULL) {\n+      if (cm != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-  \/\/ NULL on failure.\n+  \/\/ null on failure.\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-    while (i2 < num_lists && _blocks[i2] == NULL) {\n+    while (i2 < num_lists && _blocks[i2] == nullptr) {\n@@ -134,1 +134,1 @@\n-      _blocks[i] = NULL;\n+      _blocks[i] = nullptr;\n@@ -158,1 +158,1 @@\n-      assert(b != NULL, \"Sanity\");\n+      assert(b != nullptr, \"Sanity\");\n@@ -168,1 +168,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -186,1 +186,1 @@\n-      for (Block* b = _blocks[i]; b != NULL; b = b->_next, pos++) {\n+      for (Block* b = _blocks[i]; b != nullptr; b = b->_next, pos++) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-  if (_root != NULL) {\n+  if (_root != nullptr) {\n@@ -129,1 +129,1 @@\n-        tree_assert_invalid_node(n->_parent == NULL, n);\n+        tree_assert_invalid_node(n->_parent == nullptr, n);\n@@ -131,1 +131,1 @@\n-        tree_assert_invalid_node(n->_parent != NULL, n);\n+        tree_assert_invalid_node(n->_parent != nullptr, n);\n@@ -141,1 +141,1 @@\n-      if (n->_left != NULL) {\n+      if (n->_left != nullptr) {\n@@ -153,1 +153,1 @@\n-      if (n->_right != NULL) {\n+      if (n->_right != nullptr) {\n@@ -167,1 +167,1 @@\n-      while (n2 != NULL) {\n+      while (n2 != nullptr) {\n@@ -195,1 +195,1 @@\n-  if (_root != NULL) {\n+  if (_root != nullptr) {\n@@ -219,1 +219,1 @@\n-      for (Node* n2 = n->_next; n2 != NULL; n2 = n2->_next) {\n+      for (Node* n2 = n->_next; n2 != nullptr; n2 = n2->_next) {\n@@ -230,1 +230,1 @@\n-      if (n->_right != NULL) {\n+      if (n->_right != nullptr) {\n@@ -236,1 +236,1 @@\n-      if (n->_left != NULL) {\n+      if (n->_left != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,4 +106,4 @@\n-      _parent(NULL),\n-      _left(NULL),\n-      _right(NULL),\n-      _next(NULL),\n+      _parent(nullptr),\n+      _left(nullptr),\n+      _right(nullptr),\n+      _next(nullptr),\n@@ -147,1 +147,1 @@\n-    DEBUG_ONLY(n->_left = n->_right = n->_parent = NULL;)\n+    DEBUG_ONLY(n->_left = n->_right = n->_parent = nullptr;)\n@@ -155,1 +155,1 @@\n-    assert(head->_next != NULL, \"sanity\");\n+    assert(head->_next != nullptr, \"sanity\");\n@@ -164,1 +164,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -173,1 +173,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -182,2 +182,2 @@\n-    Node* succ = NULL;\n-    if (n->_right != NULL) {\n+    Node* succ = nullptr;\n+    if (n->_right != nullptr) {\n@@ -187,1 +187,1 @@\n-      while (succ->_left != NULL) {\n+      while (succ->_left != nullptr) {\n@@ -194,1 +194,1 @@\n-      while (succ != NULL && n2 == succ->_right) {\n+      while (succ != nullptr && n2 == succ->_right) {\n@@ -206,1 +206,1 @@\n-    if (parent != NULL) {\n+    if (parent != nullptr) {\n@@ -215,2 +215,2 @@\n-      if (replace != NULL) {\n-        replace->_parent = NULL;\n+      if (replace != nullptr) {\n+        replace->_parent = nullptr;\n@@ -224,1 +224,1 @@\n-    assert(n->_parent == NULL, \"Sanity\");\n+    assert(n->_parent == nullptr, \"Sanity\");\n@@ -228,1 +228,1 @@\n-        add_to_list(n, insertion_point); \/\/ parent stays NULL in this case.\n+        add_to_list(n, insertion_point); \/\/ parent stays null in this case.\n@@ -231,1 +231,1 @@\n-        if (insertion_point->_right == NULL) {\n+        if (insertion_point->_right == nullptr) {\n@@ -238,1 +238,1 @@\n-        if (insertion_point->_left == NULL) {\n+        if (insertion_point->_left == nullptr) {\n@@ -251,2 +251,2 @@\n-    Node* best_match = NULL;\n-    while (n != NULL) {\n+    Node* best_match = nullptr;\n+    while (n != nullptr) {\n@@ -270,1 +270,1 @@\n-    if (_root != NULL) {\n+    if (_root != nullptr) {\n@@ -273,1 +273,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -278,1 +278,1 @@\n-    assert(n->_next == NULL, \"do not delete a node which has a non-empty list\");\n+    assert(n->_next == nullptr, \"do not delete a node which has a non-empty list\");\n@@ -280,2 +280,2 @@\n-    if (n->_left == NULL && n->_right == NULL) {\n-      replace_node_in_parent(n, NULL);\n+    if (n->_left == nullptr && n->_right == nullptr) {\n+      replace_node_in_parent(n, nullptr);\n@@ -283,1 +283,1 @@\n-    } else if (n->_left == NULL && n->_right != NULL) {\n+    } else if (n->_left == nullptr && n->_right != nullptr) {\n@@ -286,1 +286,1 @@\n-    } else if (n->_left != NULL && n->_right == NULL) {\n+    } else if (n->_left != nullptr && n->_right == nullptr) {\n@@ -295,2 +295,2 @@\n-      \/\/ There has to be a successor since n->right was != NULL...\n-      assert(succ != NULL, \"must be\");\n+      \/\/ There has to be a successor since n->right was != null...\n+      assert(succ != nullptr, \"must be\");\n@@ -301,1 +301,1 @@\n-      assert(succ->_left == NULL, \"must be\");\n+      assert(succ->_left == nullptr, \"must be\");\n@@ -346,1 +346,1 @@\n-  BlockTree() : _root(NULL) {}\n+  BlockTree() : _root(nullptr) {}\n@@ -353,1 +353,1 @@\n-    if (_root == NULL) {\n+    if (_root == nullptr) {\n@@ -369,1 +369,1 @@\n-    if (n != NULL) {\n+    if (n != nullptr) {\n@@ -373,1 +373,1 @@\n-      if (n->_next != NULL) {\n+      if (n->_next != nullptr) {\n@@ -391,1 +391,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -400,1 +400,1 @@\n-  bool is_empty() const { return _root == NULL; }\n+  bool is_empty() const { return _root == nullptr; }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-ChunkHeaderPool* ChunkHeaderPool::_chunkHeaderPool = NULL;\n+ChunkHeaderPool* ChunkHeaderPool::_chunkHeaderPool = nullptr;\n@@ -39,2 +39,2 @@\n-  _first_slab(NULL),\n-  _current_slab(NULL)\n+  _first_slab(nullptr),\n+  _current_slab(nullptr)\n@@ -47,1 +47,1 @@\n-  while (s != NULL) {\n+  while (s != nullptr) {\n@@ -56,1 +56,1 @@\n-  if (_current_slab != NULL) {\n+  if (_current_slab != nullptr) {\n@@ -60,1 +60,1 @@\n-  if (_first_slab == NULL) {\n+  if (_first_slab == nullptr) {\n@@ -72,1 +72,1 @@\n-  assert(_chunkHeaderPool == NULL, \"only once\");\n+  assert(_chunkHeaderPool == nullptr, \"only once\");\n@@ -80,1 +80,1 @@\n-  while (s != NULL) {\n+  while (s != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkHeaderPool.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    Slab() : _next(NULL), _top(0) {\n+    Slab() : _next(nullptr), _top(0) {\n@@ -80,1 +80,1 @@\n-    Metachunk* c = NULL;\n+    Metachunk* c = nullptr;\n@@ -82,3 +82,3 @@\n-    assert(c == NULL || c->is_dead(), \"Not a freelist chunk header?\");\n-    if (c == NULL) {\n-      if (_current_slab == NULL ||\n+    assert(c == nullptr || c->is_dead(), \"Not a freelist chunk header?\");\n+    if (c == nullptr) {\n+      if (_current_slab == nullptr ||\n@@ -103,1 +103,1 @@\n-    assert(c != NULL && c->is_free(), \"Sanity\");\n+    assert(c != nullptr && c->is_free(), \"Sanity\");\n@@ -107,2 +107,2 @@\n-    c->set_next(NULL);\n-    c->set_prev(NULL);\n+    c->set_next(nullptr);\n+    c->set_prev(nullptr);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkHeaderPool.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-  assert(c->prev() == NULL && c->next() == NULL, \"Chunk must be outside of any list.\");\n+  assert(c->prev() == nullptr && c->next() == nullptr, \"Chunk must be outside of any list.\");\n@@ -112,1 +112,1 @@\n-\/\/ On error, will return NULL.\n+\/\/ On error, will return null.\n@@ -140,1 +140,1 @@\n-  Metachunk* c = NULL;\n+  Metachunk* c = nullptr;\n@@ -146,1 +146,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -152,1 +152,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -157,1 +157,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -161,1 +161,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -165,1 +165,1 @@\n-  if (c != NULL) {\n+  if (c != nullptr) {\n@@ -171,1 +171,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -173,1 +173,1 @@\n-    if (c == NULL) {\n+    if (c == nullptr) {\n@@ -180,1 +180,1 @@\n-  if (c == NULL) {\n+  if (c == nullptr) {\n@@ -185,1 +185,1 @@\n-    c = NULL;\n+    c = nullptr;\n@@ -187,1 +187,1 @@\n-  if (c != NULL) {\n+  if (c != nullptr) {\n@@ -198,1 +198,1 @@\n-    \/\/  did split it) and return NULL.\n+    \/\/  did split it) and return null.\n@@ -205,1 +205,1 @@\n-        c = NULL;\n+        c = nullptr;\n@@ -208,1 +208,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -251,1 +251,1 @@\n-  Metachunk* merged = NULL;\n+  Metachunk* merged = nullptr;\n@@ -257,1 +257,1 @@\n-  if (merged != NULL) {\n+  if (merged != nullptr) {\n@@ -325,1 +325,1 @@\n-      for (Metachunk* c = _chunks.first_at_level(l); c != NULL; c = c->next()) {\n+      for (Metachunk* c = _chunks.first_at_level(l); c != nullptr; c = c->next()) {\n@@ -357,1 +357,1 @@\n-  return MetaspaceContext::context_class() == NULL ? NULL : MetaspaceContext::context_class()->cm();\n+  return MetaspaceContext::context_class() == nullptr ? nullptr : MetaspaceContext::context_class()->cm();\n@@ -361,1 +361,1 @@\n-  return MetaspaceContext::context_nonclass() == NULL ? NULL : MetaspaceContext::context_nonclass()->cm();\n+  return MetaspaceContext::context_nonclass() == nullptr ? nullptr : MetaspaceContext::context_nonclass()->cm();\n@@ -394,1 +394,1 @@\n-  assert(_vslist != NULL, \"No vslist\");\n+  assert(_vslist != nullptr, \"No vslist\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-  \/\/ On error, will return NULL.\n+  \/\/ On error, will return null.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-  assert(_base != NULL && _word_size > 0 && _words_per_bit > 0, \"Sanity\");\n+  assert(_base != nullptr && _word_size > 0 && _words_per_bit > 0, \"Sanity\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/commitMask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  MetaWord* p = NULL;\n+  MetaWord* p = nullptr;\n@@ -52,1 +52,1 @@\n-  if (p != NULL) {\n+  if (p != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeBlocks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  for (const Metachunk* c = _first; c != NULL; c = c->next()) {\n+  for (const Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -45,1 +45,1 @@\n-    for (const Metachunk* c = _first; c != NULL; c = c->next()) {\n+    for (const Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -59,1 +59,1 @@\n-  for (Metachunk* c2 = _first; c2 != NULL; c2 = c2->next()) {\n+  for (Metachunk* c2 = _first; c2 != nullptr; c2 = c2->next()) {\n@@ -68,2 +68,2 @@\n-  if (_first == NULL) {\n-    assert(_last == NULL, \"Sanity\");\n+  if (_first == nullptr) {\n+    assert(_last == nullptr, \"Sanity\");\n@@ -71,1 +71,1 @@\n-    assert(_last != NULL, \"Sanity\");\n+    assert(_last != nullptr, \"Sanity\");\n@@ -73,1 +73,1 @@\n-    for (Metachunk* c = _first; c != NULL; c = c->next()) {\n+    for (Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -77,2 +77,2 @@\n-      assert(c->next() == NULL || c->next()->prev() == c, \"front link broken\");\n-      assert(c->prev() == NULL || c->prev()->next() == c, \"back link broken\");\n+      assert(c->next() == nullptr || c->next()->prev() == c, \"front link broken\");\n+      assert(c->prev() == nullptr || c->prev()->next() == c, \"back link broken\");\n@@ -122,1 +122,1 @@\n-\/\/ Return NULL if no such chunk was found.\n+\/\/ Return null if no such chunk was found.\n@@ -129,1 +129,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -134,1 +134,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -139,1 +139,1 @@\n-\/\/ Return NULL if no such chunk was found.\n+\/\/ Return null if no such chunk was found.\n@@ -144,1 +144,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -149,1 +149,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeChunkList.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,2 +75,2 @@\n-    if (_first == NULL) {\n-      assert(_last == NULL, \"Sanity\");\n+    if (_first == nullptr) {\n+      assert(_last == nullptr, \"Sanity\");\n@@ -78,2 +78,2 @@\n-      c->set_prev(NULL);\n-      c->set_next(NULL);\n+      c->set_prev(nullptr);\n+      c->set_next(nullptr);\n@@ -81,1 +81,1 @@\n-      assert(_last != NULL, \"Sanity\");\n+      assert(_last != nullptr, \"Sanity\");\n@@ -83,1 +83,1 @@\n-      c->set_prev(NULL);\n+      c->set_prev(nullptr);\n@@ -91,2 +91,2 @@\n-    if (_last == NULL) {\n-      assert(_first == NULL, \"Sanity\");\n+    if (_last == nullptr) {\n+      assert(_first == nullptr, \"Sanity\");\n@@ -94,2 +94,2 @@\n-      c->set_prev(NULL);\n-      c->set_next(NULL);\n+      c->set_prev(nullptr);\n+      c->set_next(nullptr);\n@@ -97,2 +97,2 @@\n-      assert(_first != NULL, \"Sanity\");\n-      c->set_next(NULL);\n+      assert(_first != nullptr, \"Sanity\");\n+      c->set_next(nullptr);\n@@ -108,2 +108,2 @@\n-    _first(NULL),\n-    _last(NULL)\n+    _first(nullptr),\n+    _last(nullptr)\n@@ -129,2 +129,2 @@\n-    c->set_next(NULL);\n-    c->set_prev(NULL);\n+    c->set_next(nullptr);\n+    c->set_prev(nullptr);\n@@ -137,1 +137,1 @@\n-    assert(_first == NULL || _first->level() == c->level(),\n+    assert(_first == nullptr || _first->level() == c->level(),\n@@ -148,1 +148,1 @@\n-  \/\/ Removes the first chunk from the list and returns it. Returns NULL if list is empty.\n+  \/\/ Removes the first chunk from the list and returns it. Returns null if list is empty.\n@@ -151,1 +151,1 @@\n-    if (c != NULL) {\n+    if (c != nullptr) {\n@@ -157,1 +157,1 @@\n-  \/\/ Returns reference to the first chunk in the list, or NULL\n+  \/\/ Returns reference to the first chunk in the list, or null\n@@ -161,1 +161,1 @@\n-  \/\/ level >= min_committed_words, or NULL.\n+  \/\/ level >= min_committed_words, or null.\n@@ -166,1 +166,1 @@\n-    while (c != NULL &&\n+    while (c != nullptr &&\n@@ -171,1 +171,1 @@\n-    if (c != NULL &&\n+    if (c != nullptr &&\n@@ -175,1 +175,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -211,1 +211,1 @@\n-  \/\/ Remove first node unless empty. Returns node or NULL.\n+  \/\/ Remove first node unless empty. Returns node or null.\n@@ -226,1 +226,1 @@\n-  \/\/ Returns reference to first chunk at this level, or NULL if sublist is empty.\n+  \/\/ Returns reference to first chunk at this level, or null if sublist is empty.\n@@ -233,1 +233,1 @@\n-  \/\/ Return NULL if no such chunk was found.\n+  \/\/ Return null if no such chunk was found.\n@@ -239,1 +239,1 @@\n-  \/\/ Return NULL if no such chunk was found.\n+  \/\/ Return null if no such chunk was found.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeChunkList.hpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,1 +193,1 @@\n-    assert(next_in_vs() == NULL || prev_in_vs() == NULL, \"Root chunks should have no neighbors\");\n+    assert(next_in_vs() == nullptr || prev_in_vs() == nullptr, \"Root chunks should have no neighbors\");\n@@ -196,1 +196,1 @@\n-    assert(next_in_vs() != NULL || prev_in_vs() != NULL,\n+    assert(next_in_vs() != nullptr || prev_in_vs() != nullptr,\n@@ -200,1 +200,1 @@\n-    if (prev_in_vs() != NULL) {\n+    if (prev_in_vs() != nullptr) {\n@@ -208,1 +208,1 @@\n-    if (next_in_vs() != NULL) {\n+    if (next_in_vs() != nullptr) {\n@@ -221,1 +221,1 @@\n-    assert(buddy != NULL, \"Missing neighbor.\");\n+    assert(buddy != nullptr, \"Missing neighbor.\");\n@@ -271,1 +271,1 @@\n-  assert(base() != NULL, \"No base ptr\");\n+  assert(base() != nullptr, \"No base ptr\");\n@@ -280,2 +280,2 @@\n-  assert(base() != NULL, \"Base pointer NULL\");\n-  assert(vsnode() != NULL, \"No space\");\n+  assert(base() != nullptr, \"Base pointer nullptr\");\n+  assert(vsnode() != nullptr, \"No space\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,1 @@\n-  \/\/ start of chunk memory; NULL if dead.\n+  \/\/ start of chunk memory; null if dead.\n@@ -227,1 +227,1 @@\n-    _base(NULL),\n+    _base(nullptr),\n@@ -232,4 +232,4 @@\n-    _vsnode(NULL),\n-    _prev(NULL), _next(NULL),\n-    _prev_in_vs(NULL),\n-    _next_in_vs(NULL)\n+    _vsnode(nullptr),\n+    _prev(nullptr), _next(nullptr),\n+    _prev_in_vs(nullptr),\n+    _next_in_vs(nullptr)\n@@ -239,1 +239,1 @@\n-    _base = NULL;\n+    _base = nullptr;\n@@ -243,3 +243,3 @@\n-    _vsnode = NULL;\n-    _prev = NULL; _next = NULL;\n-    _prev_in_vs = NULL; _next_in_vs = NULL;\n+    _vsnode = nullptr;\n+    _prev = nullptr; _next = nullptr;\n+    _prev_in_vs = nullptr; _next_in_vs = nullptr;\n@@ -261,1 +261,1 @@\n-  DEBUG_ONLY(bool in_list() const { return _prev != NULL || _next != NULL; })\n+  DEBUG_ONLY(bool in_list() const { return _prev != nullptr || _next != nullptr; })\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  for (Metachunk* c2 = _first; c2 != NULL; c2 = c2->next()) {\n+  for (Metachunk* c2 = _first; c2 != nullptr; c2 = c2->next()) {\n@@ -52,2 +52,2 @@\n-  const Metachunk* last_c = NULL;\n-  for (const Metachunk* c = _first; c != NULL; c = c->next()) {\n+  const Metachunk* last_c = nullptr;\n+  for (const Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -68,1 +68,1 @@\n-  if (_first != NULL && _first->is_dead()) {\n+  if (_first != nullptr && _first->is_dead()) {\n@@ -73,1 +73,1 @@\n-  for (Metachunk* c = _first; c != NULL; c = c->next()) {\n+  for (Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -81,1 +81,1 @@\n-  if (_first != NULL && _first->is_dead()) {\n+  if (_first != nullptr && _first->is_dead()) {\n@@ -86,1 +86,1 @@\n-  for (Metachunk* c = _first; c != NULL; c = c->next()) {\n+  for (Metachunk* c = _first; c != nullptr; c = c->next()) {\n@@ -95,1 +95,1 @@\n-    for (const Metachunk* c = _first; c != NULL; c = c->next()) {\n+    for (const Metachunk* c = _first; c != nullptr; c = c->next()) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunkList.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  MetachunkList() : _first(NULL), _num_chunks() {}\n+  MetachunkList() : _first(nullptr), _num_chunks() {}\n@@ -75,1 +75,1 @@\n-        _first->set_prev(NULL);\n+        _first->set_prev(nullptr);\n@@ -78,2 +78,2 @@\n-      c->set_prev(NULL);\n-      c->set_next(NULL);\n+      c->set_prev(nullptr);\n+      c->set_next(nullptr);\n@@ -82,1 +82,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunkList.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-    assert(ptr != NULL, \"Should have worked\");\n+    assert(ptr != nullptr, \"Should have worked\");\n@@ -94,2 +94,2 @@\n-  if (c == NULL) {\n-    return NULL;\n+  if (c == nullptr) {\n+    return nullptr;\n@@ -104,1 +104,1 @@\n-  if (_fbl == NULL) {\n+  if (_fbl == nullptr) {\n@@ -117,1 +117,1 @@\n-  _fbl(NULL),\n+  _fbl(nullptr),\n@@ -121,1 +121,1 @@\n-  , _first_fence(NULL)\n+  , _first_fence(nullptr)\n@@ -142,1 +142,1 @@\n-  Metachunk* c2 = NULL;\n+  Metachunk* c2 = nullptr;\n@@ -147,2 +147,2 @@\n-    DEBUG_ONLY(c->set_prev(NULL);)\n-    DEBUG_ONLY(c->set_next(NULL);)\n+    DEBUG_ONLY(c->set_prev(nullptr);)\n+    DEBUG_ONLY(c->set_next(nullptr);)\n@@ -221,1 +221,1 @@\n-\/\/ At any point, if we hit a commit limit, we return NULL.\n+\/\/ At any point, if we hit a commit limit, we return null.\n@@ -226,1 +226,1 @@\n-  MetaWord* p = NULL;\n+  MetaWord* p = nullptr;\n@@ -230,1 +230,1 @@\n-  if (_fbl != NULL && !_fbl->is_empty()) {\n+  if (_fbl != nullptr && !_fbl->is_empty()) {\n@@ -232,1 +232,1 @@\n-    if (p != NULL) {\n+    if (p != nullptr) {\n@@ -248,1 +248,1 @@\n-  if (p != NULL && Settings::use_allocation_guard()) {\n+  if (p != nullptr && Settings::use_allocation_guard()) {\n@@ -251,1 +251,1 @@\n-    if (guard != NULL) {\n+    if (guard != nullptr) {\n@@ -272,1 +272,1 @@\n-  MetaWord* p = NULL;\n+  MetaWord* p = nullptr;\n@@ -276,1 +276,1 @@\n-  if (current_chunk() != NULL) {\n+  if (current_chunk() != nullptr) {\n@@ -304,1 +304,1 @@\n-      assert(p != NULL, \"Allocation from chunk failed.\");\n+      assert(p != nullptr, \"Allocation from chunk failed.\");\n@@ -308,1 +308,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -310,1 +310,1 @@\n-    assert(current_chunk() == NULL ||\n+    assert(current_chunk() == nullptr ||\n@@ -314,1 +314,1 @@\n-    if (new_chunk != NULL) {\n+    if (new_chunk != nullptr) {\n@@ -324,1 +324,1 @@\n-      if (current_chunk() != NULL) {\n+      if (current_chunk() != nullptr) {\n@@ -333,1 +333,1 @@\n-      assert(p != NULL, \"Allocation from chunk failed.\");\n+      assert(p != nullptr, \"Allocation from chunk failed.\");\n@@ -339,1 +339,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -348,2 +348,2 @@\n-  if (p == NULL) {\n-    UL(info, \"allocation failed, returned NULL.\");\n+  if (p == nullptr) {\n+    UL(info, \"allocation failed, returned nullptr.\");\n@@ -363,1 +363,1 @@\n-  assert(current_chunk() != NULL, \"stray deallocation?\");\n+  assert(current_chunk() != nullptr, \"stray deallocation?\");\n@@ -388,1 +388,1 @@\n-  for (const Metachunk* c = _chunks.first(); c != NULL; c = c->next()) {\n+  for (const Metachunk* c = _chunks.first(); c != nullptr; c = c->next()) {\n@@ -402,1 +402,1 @@\n-  if (_fbl != NULL) {\n+  if (_fbl != nullptr) {\n@@ -415,1 +415,1 @@\n-  for (const Metachunk* c = _chunks.first(); c != NULL; c = c->next()) {\n+  for (const Metachunk* c = _chunks.first(); c != nullptr; c = c->next()) {\n@@ -420,1 +420,1 @@\n-  if (p_used_words != NULL) {\n+  if (p_used_words != nullptr) {\n@@ -423,1 +423,1 @@\n-  if (p_committed_words != NULL) {\n+  if (p_committed_words != nullptr) {\n@@ -426,1 +426,1 @@\n-  if (p_capacity_words != NULL) {\n+  if (p_capacity_words != nullptr) {\n@@ -435,1 +435,1 @@\n-  assert(_growth_policy != NULL && _chunk_manager != NULL, \"Sanity\");\n+  assert(_growth_policy != nullptr && _chunk_manager != nullptr, \"Sanity\");\n@@ -437,1 +437,1 @@\n-  if (_fbl != NULL) {\n+  if (_fbl != nullptr) {\n@@ -449,1 +449,1 @@\n-  for (const Fence* f = _first_fence; f != NULL; f = f->next()) {\n+  for (const Fence* f = _first_fence; f != nullptr; f = f->next()) {\n@@ -462,1 +462,1 @@\n-  assert(p != NULL && word_size > 0, \"Sanity\");\n+  assert(p != nullptr && word_size > 0, \"Sanity\");\n@@ -464,1 +464,1 @@\n-  for (const Metachunk* c = _chunks.first(); c != NULL && !found; c = c->next()) {\n+  for (const Metachunk* c = _chunks.first(); c != nullptr && !found; c = c->next()) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,1 +178,1 @@\n-  \/\/ At any point, if we hit a commit limit, we return NULL.\n+  \/\/ At any point, if we hit a commit limit, we return null.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArenaGrowthPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  const char* s = NULL;\n+  const char* s = nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n-MetaspaceContext* MetaspaceContext::_class_space_context = NULL;\n-MetaspaceContext* MetaspaceContext::_nonclass_space_context = NULL;\n+MetaspaceContext* MetaspaceContext::_class_space_context = nullptr;\n+MetaspaceContext* MetaspaceContext::_nonclass_space_context = nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceContext.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-  \/\/ NULL otherwise.\n+  \/\/ null otherwise.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceContext.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-  MetaspaceDCmd* dcmd = new MetaspaceDCmd(NULL, false);\n-  if (dcmd != NULL) {\n+  MetaspaceDCmd* dcmd = new MetaspaceDCmd(nullptr, false);\n+  if (dcmd != nullptr) {\n@@ -76,1 +76,1 @@\n-  if (scale_value != NULL) {\n+  if (scale_value != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-                        \"monitor\", NULL};\n+                        \"monitor\", nullptr};\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  const char* s = NULL;\n+  const char* s = nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceReporter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-  if (msp == NULL) {\n+  if (msp == nullptr) {\n@@ -114,2 +114,2 @@\n-    const char* name = NULL;\n-    const char* class_name = NULL;\n+    const char* name = nullptr;\n+    const char* class_name = nullptr;\n@@ -119,1 +119,1 @@\n-    if (k != NULL) {\n+    if (k != nullptr) {\n@@ -122,1 +122,1 @@\n-      if (s != NULL) {\n+      if (s != nullptr) {\n@@ -138,1 +138,1 @@\n-    if (name != NULL) {\n+    if (name != nullptr) {\n@@ -141,1 +141,1 @@\n-    if (class_name != NULL) {\n+    if (class_name != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printCLDMetaspaceInfoClosure.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-  _first_chunk(NULL)\n+  _first_chunk(nullptr)\n@@ -51,1 +51,1 @@\n-  if (_first_chunk != NULL) {\n+  if (_first_chunk != nullptr) {\n@@ -126,1 +126,1 @@\n-    if (c->next_in_vs() != NULL) {\n+    if (c->next_in_vs() != nullptr) {\n@@ -149,1 +149,1 @@\n-\/\/ the merged chunk; NULL otherwise.\n+\/\/ the merged chunk; null otherwise.\n@@ -153,1 +153,1 @@\n-\/\/ !!! Please note that if this method returns a non-NULL value, the\n+\/\/ !!! Please note that if this method returns a non-null value, the\n@@ -202,1 +202,1 @@\n-  Metachunk* result = NULL;\n+  Metachunk* result = nullptr;\n@@ -253,1 +253,1 @@\n-      if (follower->next_in_vs() != NULL) {\n+      if (follower->next_in_vs() != nullptr) {\n@@ -279,1 +279,1 @@\n-  if (result != NULL) {\n+  if (result != nullptr) {\n@@ -336,1 +336,1 @@\n-  if (successor != NULL) {\n+  if (successor != nullptr) {\n@@ -363,1 +363,1 @@\n-  return _first_chunk == NULL ||\n+  return _first_chunk == nullptr ||\n@@ -384,2 +384,2 @@\n-  if (_first_chunk != NULL) {\n-    assrt_(_first_chunk->prev_in_vs() == NULL, \"Sanity\");\n+  if (_first_chunk != nullptr) {\n+    assrt_(_first_chunk->prev_in_vs() == nullptr, \"Sanity\");\n@@ -390,1 +390,1 @@\n-    while (c != NULL) {\n+    while (c != nullptr) {\n@@ -416,1 +416,1 @@\n-  for (const Metachunk* c = _first_chunk; c != NULL; c = c->next_in_vs()) {\n+  for (const Metachunk* c = _first_chunk; c != nullptr; c = c->next_in_vs()) {\n@@ -435,1 +435,1 @@\n-  if (_first_chunk != NULL) {\n+  if (_first_chunk != nullptr) {\n@@ -440,1 +440,1 @@\n-    while (c != NULL) {\n+    while (c != nullptr) {\n@@ -456,1 +456,1 @@\n-\/\/ Create an array of ChunkTree objects, all initialized to NULL, covering\n+\/\/ Create an array of ChunkTree objects, all initialized to null, covering\n@@ -461,1 +461,1 @@\n-  _arr(NULL)\n+  _arr(nullptr)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/rootChunkArea.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-  \/\/ the merged chunk; NULL otherwise.\n+  \/\/ the merged chunk; null otherwise.\n@@ -89,1 +89,1 @@\n-  \/\/ !!! Please note that if this method returns a non-NULL value, the\n+  \/\/ !!! Please note that if this method returns a non-null value, the\n","filename":"src\/hotspot\/share\/memory\/metaspace\/rootChunkArea.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-  return vs != NULL ? vs->reserved_words() : 0;\n+  return vs != nullptr ? vs->reserved_words() : 0;\n@@ -58,1 +58,1 @@\n-  return vs != NULL ? vs->committed_words() : 0;\n+  return vs != nullptr ? vs->committed_words() : 0;\n@@ -89,1 +89,1 @@\n-  return cm != NULL ? cm->total_word_size() : 0;\n+  return cm != nullptr ? cm->total_word_size() : 0;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/runningCounters.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  _context(NULL),\n+  _context(nullptr),\n@@ -97,1 +97,1 @@\n-  MetaspaceArena* arena = NULL;\n+  MetaspaceArena* arena = nullptr;\n@@ -111,1 +111,1 @@\n-  if (_context != NULL) {\n+  if (_context != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  _first_node(NULL),\n+  _first_node(nullptr),\n@@ -60,1 +60,1 @@\n-  _first_node(NULL),\n+  _first_node(nullptr),\n@@ -70,1 +70,1 @@\n-  assert(vsn != NULL, \"node creation failed\");\n+  assert(vsn != nullptr, \"node creation failed\");\n@@ -72,1 +72,1 @@\n-  _first_node->set_next(NULL);\n+  _first_node->set_next(nullptr);\n@@ -84,1 +84,1 @@\n-  while (vsn != NULL) {\n+  while (vsn != nullptr) {\n@@ -113,1 +113,1 @@\n-  if (_first_node == NULL ||\n+  if (_first_node == nullptr ||\n@@ -120,1 +120,1 @@\n-    if (_first_node != NULL) {\n+    if (_first_node != nullptr) {\n@@ -130,1 +130,1 @@\n-      return NULL; \/\/ We cannot expand this list.\n+      return nullptr; \/\/ We cannot expand this list.\n@@ -135,1 +135,1 @@\n-  assert(c != NULL, \"This should have worked\");\n+  assert(c != nullptr, \"This should have worked\");\n@@ -147,1 +147,1 @@\n-  while (vsn != NULL) {\n+  while (vsn != nullptr) {\n@@ -160,1 +160,1 @@\n-  assert(_name != NULL, \"Sanity\");\n+  assert(_name != nullptr, \"Sanity\");\n@@ -164,1 +164,1 @@\n-  if (_first_node != NULL) {\n+  if (_first_node != nullptr) {\n@@ -168,1 +168,1 @@\n-    while (vsn != NULL) {\n+    while (vsn != nullptr) {\n@@ -194,1 +194,1 @@\n-  while (vsn != NULL) {\n+  while (vsn != nullptr) {\n@@ -206,1 +206,1 @@\n-  return MetaspaceContext::context_class() == NULL ? NULL : MetaspaceContext::context_class()->vslist();\n+  return MetaspaceContext::context_class() == nullptr ? nullptr : MetaspaceContext::context_class()->vslist();\n@@ -210,1 +210,1 @@\n-  return MetaspaceContext::context_nonclass() == NULL ? NULL : MetaspaceContext::context_nonclass()->vslist();\n+  return MetaspaceContext::context_nonclass() == nullptr ? nullptr : MetaspaceContext::context_nonclass()->vslist();\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-  \/\/ May return NULL if vslist would need to be expanded to hold the new root node but\n+  \/\/ May return null if vslist would need to be expanded to hold the new root node but\n@@ -139,2 +139,2 @@\n-  MetaWord* base_of_first_node() const { return _first_node != NULL ? _first_node->base() : NULL; }\n-  size_t word_size_of_first_node() const { return _first_node != NULL ? _first_node->word_size() : 0; }\n+  MetaWord* base_of_first_node() const { return _first_node != nullptr ? _first_node->base() : nullptr; }\n+  size_t word_size_of_first_node() const { return _first_node != nullptr ? _first_node->word_size() : 0; }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,1 +161,1 @@\n-  assert(p != NULL && word_size > 0, \"Sanity\");\n+  assert(p != nullptr && word_size > 0, \"Sanity\");\n@@ -218,1 +218,1 @@\n-  _next(NULL),\n+  _next(nullptr),\n@@ -286,1 +286,1 @@\n-\/\/ Allocate a root chunk from this node. Will fail and return NULL if the node is full\n+\/\/ Allocate a root chunk from this node. Will fail and return null if the node is full\n@@ -312,1 +312,1 @@\n-  return NULL; \/\/ Node is full.\n+  return nullptr; \/\/ Node is full.\n@@ -330,1 +330,1 @@\n-\/\/ the merged chunk; NULL otherwise.\n+\/\/ the merged chunk; null otherwise.\n@@ -334,1 +334,1 @@\n-\/\/ !!! Please note that if this method returns a non-NULL value, the\n+\/\/ !!! Please note that if this method returns a non-null value, the\n@@ -337,1 +337,1 @@\n-  assert(c != NULL && c->is_free(), \"Sanity\");\n+  assert(c != nullptr && c->is_free(), \"Sanity\");\n@@ -357,1 +357,1 @@\n-  assert(c != NULL && c->is_in_use() && !c->is_root_chunk(), \"Sanity\");\n+  assert(c != nullptr && c->is_in_use() && !c->is_root_chunk(), \"Sanity\");\n@@ -405,1 +405,1 @@\n-  assert(base() != NULL, \"Invalid base\");\n+  assert(base() != nullptr, \"Invalid base\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-  \/\/ Allocate a root chunk from this node. Will fail and return NULL if the node is full\n+  \/\/ Allocate a root chunk from this node. Will fail and return null if the node is full\n@@ -192,1 +192,1 @@\n-  \/\/ the merged chunk; NULL otherwise.\n+  \/\/ the merged chunk; null otherwise.\n@@ -196,1 +196,1 @@\n-  \/\/ !!! Please note that if this method returns a non-NULL value, the\n+  \/\/ !!! Please note that if this method returns a non-null value, the\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-      assert(_enclosing_ref == NULL, \"must be\");\n+      assert(_enclosing_ref == nullptr, \"must be\");\n@@ -79,1 +79,1 @@\n-  while (_pending_refs != NULL) {\n+  while (_pending_refs != nullptr) {\n@@ -90,1 +90,1 @@\n-  assert(_pending_refs == NULL,\n+  assert(_pending_refs == nullptr,\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-    Ref(Writability w) : _writability(w), _keep_after_pushing(false), _next(NULL), _user_data(NULL) {}\n+    Ref(Writability w) : _writability(w), _keep_after_pushing(false), _next(nullptr), _user_data(nullptr) {}\n@@ -165,1 +165,1 @@\n-    virtual bool not_null()                const { return dereference() != NULL; }\n+    virtual bool not_null()                const { return dereference() != nullptr; }\n@@ -192,1 +192,1 @@\n-    virtual bool not_null()                const { return dereference() != NULL;  }\n+    virtual bool not_null()                const { return dereference() != nullptr;  }\n@@ -270,1 +270,1 @@\n-  MetaspaceClosure(): _pending_refs(NULL), _nest_level(0), _enclosing_ref(NULL) {}\n+  MetaspaceClosure(): _pending_refs(nullptr), _nest_level(0), _enclosing_ref(nullptr) {}\n@@ -286,1 +286,1 @@\n-  \/\/ when do_pending_ref(r) is called, and will return NULL when do_ref(r) is called.\n+  \/\/ when do_pending_ref(r) is called, and will return null when do_ref(r) is called.\n@@ -348,1 +348,1 @@\n-    Hashtable<bool, mtInternal>* h  = NULL;\n+    Hashtable<bool, mtInternal>* h  = nullptr;\n@@ -351,1 +351,1 @@\n-    Array<Hashtable<bool, mtInternal>*>* a6 = NULL;\n+    Array<Hashtable<bool, mtInternal>*>* a6 = nullptr;\n@@ -354,1 +354,1 @@\n-    Array<int*>* a7 = NULL;\n+    Array<int*>* a7 = nullptr;\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  MetaspacePerfCounters() : _capacity(NULL), _used(NULL), _max_capacity(NULL) {}\n+  MetaspacePerfCounters() : _capacity(nullptr), _used(nullptr), _max_capacity(nullptr) {}\n@@ -55,1 +55,1 @@\n-    assert(_capacity == NULL, \"Only initialize once\");\n+    assert(_capacity == nullptr, \"Only initialize once\");\n","filename":"src\/hotspot\/share\/memory\/metaspaceCounters.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n-      _next(NULL),\n-      _result(NULL),\n+      _next(nullptr),\n+      _result(nullptr),\n@@ -75,2 +75,2 @@\n-MetadataAllocationRequest* MetaspaceCriticalAllocation::_requests_head = NULL;\n-MetadataAllocationRequest* MetaspaceCriticalAllocation::_requests_tail = NULL;\n+MetadataAllocationRequest* MetaspaceCriticalAllocation::_requests_head = nullptr;\n+MetadataAllocationRequest* MetaspaceCriticalAllocation::_requests_tail = nullptr;\n@@ -82,1 +82,1 @@\n-  if (_requests_head == NULL) {\n+  if (_requests_head == nullptr) {\n@@ -97,1 +97,1 @@\n-  if (prev != NULL) {\n+  if (prev != nullptr) {\n@@ -104,2 +104,2 @@\n-  MetadataAllocationRequest* prev = NULL;\n-  for (MetadataAllocationRequest* curr = _requests_head; curr != NULL; curr = curr->next()) {\n+  MetadataAllocationRequest* prev = nullptr;\n+  for (MetadataAllocationRequest* curr = _requests_head; curr != nullptr; curr = curr->next()) {\n@@ -140,1 +140,1 @@\n-      for (MetadataAllocationRequest* curr = _requests_head; curr != NULL; curr = curr->next()) {\n+      for (MetadataAllocationRequest* curr = _requests_head; curr != nullptr; curr = curr->next()) {\n@@ -159,1 +159,1 @@\n-  return request->result() != NULL;\n+  return request->result() != nullptr;\n@@ -186,2 +186,2 @@\n-  for (MetadataAllocationRequest* curr = _requests_head; curr != NULL; curr = curr->next()) {\n-    if (curr->result() != NULL) {\n+  for (MetadataAllocationRequest* curr = _requests_head; curr != nullptr; curr = curr->next()) {\n+    if (curr->result() != nullptr) {\n@@ -193,1 +193,1 @@\n-    if (result == NULL) {\n+    if (result == nullptr) {\n@@ -196,1 +196,1 @@\n-    if (result == NULL) {\n+    if (result == nullptr) {\n","filename":"src\/hotspot\/share\/memory\/metaspaceCriticalAllocation.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -77,3 +77,3 @@\n-                                    size_t* new_cap_until_GC = NULL,\n-                                    size_t* old_cap_until_GC = NULL,\n-                                    bool* can_retry = NULL);\n+                                    size_t* new_cap_until_GC = nullptr,\n+                                    size_t* old_cap_until_GC = nullptr,\n+                                    bool* can_retry = nullptr);\n","filename":"src\/hotspot\/share\/memory\/metaspaceUtils.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  assert(Universe::objectArrayKlassObj() != NULL, \"Too early?\");\n+  assert(Universe::objectArrayKlassObj() != nullptr, \"Too early?\");\n@@ -82,1 +82,1 @@\n-  int length = utf8_str == NULL ? 0 : UTF8::unicode_length(utf8_str);\n+  int length = utf8_str == nullptr ? 0 : UTF8::unicode_length(utf8_str);\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-  static T** create_unfreeable(uint rows, uint columns, size_t* allocation_size = NULL);\n+  static T** create_unfreeable(uint rows, uint columns, size_t* allocation_size = nullptr);\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  if (allocation_size != NULL) {\n+  if (allocation_size != nullptr) {\n","filename":"src\/hotspot\/share\/memory\/padded.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,3 +88,3 @@\n-Klass* Universe::_typeArrayKlassObjs[T_LONG+1]        = { NULL \/*, NULL...*\/ };\n-Klass* Universe::_objectArrayKlassObj                 = NULL;\n-Klass* Universe::_fillerArrayKlassObj                 = NULL;\n+Klass* Universe::_typeArrayKlassObjs[T_LONG+1]        = { nullptr \/*, nullptr...*\/ };\n+Klass* Universe::_objectArrayKlassObj                 = nullptr;\n+Klass* Universe::_fillerArrayKlassObj                 = nullptr;\n@@ -131,6 +131,6 @@\n-Array<Klass*>* Universe::_the_array_interfaces_array = NULL;\n-LatestMethodCache* Universe::_finalizer_register_cache = NULL;\n-LatestMethodCache* Universe::_loader_addClass_cache    = NULL;\n-LatestMethodCache* Universe::_throw_illegal_access_error_cache = NULL;\n-LatestMethodCache* Universe::_throw_no_such_method_error_cache = NULL;\n-LatestMethodCache* Universe::_do_stack_walk_cache     = NULL;\n+Array<Klass*>* Universe::_the_array_interfaces_array = nullptr;\n+LatestMethodCache* Universe::_finalizer_register_cache = nullptr;\n+LatestMethodCache* Universe::_loader_addClass_cache    = nullptr;\n+LatestMethodCache* Universe::_throw_illegal_access_error_cache = nullptr;\n+LatestMethodCache* Universe::_throw_no_such_method_error_cache = nullptr;\n+LatestMethodCache* Universe::_do_stack_walk_cache     = nullptr;\n@@ -140,5 +140,5 @@\n-Array<int>* Universe::_the_empty_int_array            = NULL;\n-Array<u2>* Universe::_the_empty_short_array           = NULL;\n-Array<Klass*>* Universe::_the_empty_klass_array     = NULL;\n-Array<InstanceKlass*>* Universe::_the_empty_instance_klass_array  = NULL;\n-Array<Method*>* Universe::_the_empty_method_array   = NULL;\n+Array<int>* Universe::_the_empty_int_array            = nullptr;\n+Array<u2>* Universe::_the_empty_short_array           = nullptr;\n+Array<Klass*>* Universe::_the_empty_klass_array     = nullptr;\n+Array<InstanceKlass*>* Universe::_the_empty_instance_klass_array  = nullptr;\n+Array<Method*>* Universe::_the_empty_method_array   = nullptr;\n@@ -162,2 +162,2 @@\n-OopStorage*     Universe::_vm_weak = NULL;\n-OopStorage*     Universe::_vm_global = NULL;\n+OopStorage*     Universe::_vm_weak = nullptr;\n+OopStorage*     Universe::_vm_global = nullptr;\n@@ -165,1 +165,1 @@\n-CollectedHeap*  Universe::_collectedHeap = NULL;\n+CollectedHeap*  Universe::_collectedHeap = nullptr;\n@@ -251,1 +251,1 @@\n-        assert(mirror_oop != NULL, \"must be\");\n+        assert(mirror_oop != nullptr, \"must be\");\n@@ -304,1 +304,1 @@\n-      InstanceKlass::cast(k)->restore_unshareable_info(loader_data, Handle(), NULL, CHECK);\n+      InstanceKlass::cast(k)->restore_unshareable_info(loader_data, Handle(), nullptr, CHECK);\n@@ -311,1 +311,1 @@\n-    k->initialize_supers(ok, NULL, CHECK);\n+    k->initialize_supers(ok, nullptr, CHECK);\n@@ -340,1 +340,1 @@\n-        _the_array_interfaces_array     = MetadataFactory::new_array<Klass*>(null_cld, 2, NULL, CHECK);\n+        _the_array_interfaces_array     = MetadataFactory::new_array<Klass*>(null_cld, 2, nullptr, CHECK);\n@@ -396,1 +396,1 @@\n-  _reference_pending_list = OopHandle(vm_global(), NULL);\n+  _reference_pending_list = OopHandle(vm_global(), nullptr);\n@@ -458,1 +458,1 @@\n-        _basic_type_mirrors[T_INT].resolve() != NULL) {\n+        _basic_type_mirrors[T_INT].resolve() != nullptr) {\n@@ -465,1 +465,1 @@\n-          assert(m != NULL, \"archived mirrors should not be NULL\");\n+          assert(m != nullptr, \"archived mirrors should not be nullptr\");\n@@ -469,1 +469,1 @@\n-      \/\/ _basic_type_mirrors[T_INT], etc, are NULL if archived heap is not mapped.\n+      \/\/ _basic_type_mirrors[T_INT], etc, are null if archived heap is not mapped.\n@@ -507,1 +507,1 @@\n-  java_lang_Class::set_fixup_mirror_list(NULL);\n+  java_lang_Class::set_fixup_mirror_list(nullptr);\n@@ -526,1 +526,1 @@\n-  _reference_pending_list.replace(NULL);\n+  _reference_pending_list.replace(nullptr);\n@@ -531,1 +531,1 @@\n-  return _reference_pending_list.peek() != NULL;\n+  return _reference_pending_list.peek() != nullptr;\n@@ -650,1 +650,1 @@\n-    \/\/ get the error object at the slot and set set it to NULL so that the\n+    \/\/ get the error object at the slot and set set it to null so that the\n@@ -653,2 +653,2 @@\n-    assert(exc() != NULL, \"slot has been used already\");\n-    preallocated_out_of_memory_errors()->obj_at_put(next, NULL);\n+    assert(exc() != nullptr, \"slot has been used already\");\n+    preallocated_out_of_memory_errors()->obj_at_put(next, nullptr);\n@@ -658,1 +658,1 @@\n-    assert(msg != NULL, \"no message\");\n+    assert(msg != nullptr, \"no message\");\n@@ -842,1 +842,1 @@\n-  assert(_collectedHeap == NULL, \"Heap already created\");\n+  assert(_collectedHeap == nullptr, \"Heap already created\");\n@@ -884,1 +884,1 @@\n-    if (AllocateHeapAt != NULL) {\n+    if (AllocateHeapAt != nullptr) {\n@@ -930,1 +930,1 @@\n-  Method* m = NULL;\n+  Method* m = nullptr;\n@@ -933,1 +933,1 @@\n-      ((m = ik->find_method(name, signature)) == NULL) ||\n+      ((m = ik->find_method(name, signature)) == nullptr) ||\n@@ -1084,1 +1084,1 @@\n-  while (token != NULL) {\n+  while (token != nullptr) {\n@@ -1112,1 +1112,1 @@\n-    token = strtok_r(NULL, delimiter, &save_ptr);\n+    token = strtok_r(nullptr, delimiter, &save_ptr);\n@@ -1252,1 +1252,1 @@\n-    assert(_klass != NULL, \"just checking\");\n+    assert(_klass != nullptr, \"just checking\");\n@@ -1262,1 +1262,1 @@\n-  if (klass() == NULL) return NULL;\n+  if (klass() == nullptr) return nullptr;\n@@ -1265,1 +1265,1 @@\n-  assert(m != NULL, \"sanity check\");\n+  assert(m != nullptr, \"sanity check\");\n@@ -1274,1 +1274,1 @@\n-  if (fullgc_alot_dummy_array != NULL) {\n+  if (fullgc_alot_dummy_array != nullptr) {\n@@ -1278,1 +1278,1 @@\n-      _fullgc_alot_dummy_array = OopHandle(); \/\/ NULL out OopStorage pointer.\n+      _fullgc_alot_dummy_array = OopHandle(); \/\/ null out OopStorage pointer.\n@@ -1283,1 +1283,1 @@\n-    fullgc_alot_dummy_array->obj_at_put(_fullgc_alot_dummy_next++, NULL);\n+    fullgc_alot_dummy_array->obj_at_put(_fullgc_alot_dummy_next++, nullptr);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,2 @@\n-  LatestMethodCache()   { _klass = NULL; _method_idnum = -1; }\n-  ~LatestMethodCache()  { _klass = NULL; _method_idnum = -1; }\n+  LatestMethodCache()   { _klass = nullptr; _method_idnum = -1; }\n+  ~LatestMethodCache()  { _klass = nullptr; _method_idnum = -1; }\n@@ -188,1 +188,1 @@\n-    assert(m != NULL, \"mirror not initialized\");\n+    assert(m != nullptr, \"mirror not initialized\");\n@@ -229,1 +229,1 @@\n-    assert(_typeArrayKlassObjs[t] != NULL, \"domain check\");\n+    assert(_typeArrayKlassObjs[t] != nullptr, \"domain check\");\n@@ -325,1 +325,1 @@\n-  DEBUG_ONLY(static bool is_in_heap_or_null(const void* p) { return p == NULL || is_in_heap(p); })\n+  DEBUG_ONLY(static bool is_in_heap_or_null(const void* p) { return p == nullptr || is_in_heap(p); })\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-ReservedSpace::ReservedSpace() : _base(NULL), _size(0), _noaccess_prefix(0),\n+ReservedSpace::ReservedSpace() : _base(nullptr), _size(0), _noaccess_prefix(0),\n@@ -53,1 +53,1 @@\n-  initialize(size, alignment, page_size, NULL, false);\n+  initialize(size, alignment, page_size, nullptr, false);\n@@ -65,1 +65,1 @@\n-  initialize(size, alignment, preferred_page_size, NULL, false);\n+  initialize(size, alignment, preferred_page_size, nullptr, false);\n@@ -119,1 +119,1 @@\n-  if (base == requested_address || requested_address == NULL) {\n+  if (base == requested_address || requested_address == nullptr) {\n@@ -123,1 +123,1 @@\n-  if (base != NULL) {\n+  if (base != nullptr) {\n@@ -160,1 +160,1 @@\n-  \/\/ important.  If the reservation fails, return NULL.\n+  \/\/ important.  If the reservation fails, return null.\n@@ -193,1 +193,1 @@\n-  if (base != NULL) {\n+  if (base != nullptr) {\n@@ -204,1 +204,1 @@\n-  initialize_members(NULL, 0, 0, 0, false, false);\n+  initialize_members(nullptr, 0, 0, 0, false, false);\n@@ -238,1 +238,1 @@\n-    if (base != NULL) {\n+    if (base != nullptr) {\n@@ -253,1 +253,1 @@\n-      if (base != NULL) {\n+      if (base != nullptr) {\n@@ -269,1 +269,1 @@\n-  if (base != NULL) {\n+  if (base != nullptr) {\n@@ -398,1 +398,1 @@\n-  if (_base != NULL) {\n+  if (_base != nullptr) {\n@@ -439,1 +439,1 @@\n-         ((_base == NULL) ||\n+         ((_base == nullptr) ||\n@@ -452,1 +452,1 @@\n-\/\/ NULL terminated.\n+\/\/ null terminated.\n@@ -525,1 +525,1 @@\n-  if (_base == NULL) {\n+  if (_base == nullptr) {\n@@ -562,1 +562,1 @@\n-        ((_base == NULL) ||                        \/\/ No previous try succeeded.\n+        ((_base == nullptr) ||                        \/\/ No previous try succeeded.\n@@ -587,1 +587,1 @@\n-           ((_base == NULL) ||                             \/\/ No previous try succeeded.\n+           ((_base == nullptr) ||                             \/\/ No previous try succeeded.\n@@ -597,3 +597,3 @@\n-    if (_base == NULL) {\n-      log_trace(gc, heap, coops)(\"Trying to allocate at address NULL heap of size \" SIZE_FORMAT_X, size + noaccess_prefix);\n-      initialize(size + noaccess_prefix, alignment, page_size, NULL, false);\n+    if (_base == nullptr) {\n+      log_trace(gc, heap, coops)(\"Trying to allocate at address nullptr heap of size \" SIZE_FORMAT_X, size + noaccess_prefix);\n+      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false);\n@@ -610,1 +610,1 @@\n-  if (heap_allocation_directory != NULL) {\n+  if (heap_allocation_directory != nullptr) {\n@@ -636,1 +636,1 @@\n-    initialize(size, alignment, page_size, NULL, false);\n+    initialize(size, alignment, page_size, nullptr, false);\n@@ -644,1 +644,1 @@\n-  if (base() != NULL) {\n+  if (base() != nullptr) {\n@@ -662,1 +662,1 @@\n-  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ NULL, \/*executable*\/ true);\n+  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ nullptr, \/*executable*\/ true);\n@@ -669,10 +669,10 @@\n-  _low_boundary           = NULL;\n-  _high_boundary          = NULL;\n-  _low                    = NULL;\n-  _high                   = NULL;\n-  _lower_high             = NULL;\n-  _middle_high            = NULL;\n-  _upper_high             = NULL;\n-  _lower_high_boundary    = NULL;\n-  _middle_high_boundary   = NULL;\n-  _upper_high_boundary    = NULL;\n+  _low_boundary           = nullptr;\n+  _high_boundary          = nullptr;\n+  _low                    = nullptr;\n+  _high                   = nullptr;\n+  _lower_high             = nullptr;\n+  _middle_high            = nullptr;\n+  _upper_high             = nullptr;\n+  _lower_high_boundary    = nullptr;\n+  _middle_high_boundary   = nullptr;\n+  _upper_high_boundary    = nullptr;\n@@ -694,1 +694,1 @@\n-  assert(_low_boundary == NULL, \"VirtualSpace already initialized\");\n+  assert(_low_boundary == nullptr, \"VirtualSpace already initialized\");\n@@ -748,10 +748,10 @@\n-  _low_boundary           = NULL;\n-  _high_boundary          = NULL;\n-  _low                    = NULL;\n-  _high                   = NULL;\n-  _lower_high             = NULL;\n-  _middle_high            = NULL;\n-  _upper_high             = NULL;\n-  _lower_high_boundary    = NULL;\n-  _middle_high_boundary   = NULL;\n-  _upper_high_boundary    = NULL;\n+  _low_boundary           = nullptr;\n+  _high_boundary          = nullptr;\n+  _low                    = nullptr;\n+  _high                   = nullptr;\n+  _lower_high             = nullptr;\n+  _middle_high            = nullptr;\n+  _upper_high             = nullptr;\n+  _lower_high_boundary    = nullptr;\n+  _middle_high_boundary   = nullptr;\n+  _upper_high_boundary    = nullptr;\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-                char* requested_address = NULL);\n+                char* requested_address = nullptr);\n@@ -91,1 +91,1 @@\n-  bool is_reserved()       const { return _base != NULL; }\n+  bool is_reserved()       const { return _base != nullptr; }\n@@ -138,1 +138,1 @@\n-  ReservedHeapSpace(size_t size, size_t forced_base_alignment, size_t page_size, const char* heap_allocation_directory = NULL);\n+  ReservedHeapSpace(size_t size, size_t forced_base_alignment, size_t page_size, const char* heap_allocation_directory = nullptr);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}