{"files":[{"patch":"@@ -46,0 +46,1 @@\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n@@ -66,1 +67,0 @@\n-#include \"gc\/g1\/g1YCTypes.hpp\"\n@@ -2929,1 +2929,1 @@\n-    _gc_tracer_stw->report_yc_type(collector_state()->yc_type());\n+    _gc_tracer_stw->report_yc_phase(collector_state()->young_gc_phase());\n@@ -2943,1 +2943,1 @@\n-                         collector_state()->yc_type() == Mixed \/* all_memory_pools_affected *\/);\n+                         collector_state()->young_gc_phase() == Mixed \/* all_memory_pools_affected *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n@@ -47,1 +48,0 @@\n-#include \"gc\/g1\/g1YCTypes.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/g1\/g1CollectorState.hpp\"\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n+\n+G1GCPauseType G1CollectorState::young_gc_pause_type(bool concurrent_operation_is_full_mark) const {\n+  assert(!in_full_gc(), \"must be\");\n+  if (in_concurrent_start_gc()) {\n+    assert(!in_young_gc_before_mixed(), \"must be\");\n+    return concurrent_operation_is_full_mark ? ConcurrentStartMarkGC : ConcurrentStartUndoGC;\n+  } else if (in_young_gc_before_mixed()) {\n+    assert(!in_concurrent_start_gc(), \"must be\");\n+    return LastYoungGC;\n+  } else if (in_mixed_phase()) {\n+    assert(!in_concurrent_start_gc(), \"must be\");\n+    assert(!in_young_gc_before_mixed(), \"must be\");\n+    return MixedGC;\n+  } else {\n+    assert(!in_concurrent_start_gc(), \"must be\");\n+    assert(!in_young_gc_before_mixed(), \"must be\");\n+    return YoungGC;\n+  }\n+}\n+\n+G1GCYoungPhase G1CollectorState::young_gc_phase() const {\n+  assert(!in_full_gc(), \"must be\");\n+\n+  if (in_concurrent_start_gc()) {\n+    return ConcurrentStart;\n+  } else if (mark_or_rebuild_in_progress()) {\n+    return DuringMarkOrRebuild;\n+  } else if (in_young_only_phase()) {\n+    return Normal;\n+  } else {\n+    return Mixed;\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectorState.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"gc\/g1\/g1YCTypes.hpp\"\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n@@ -113,11 +113,4 @@\n-  G1YCType yc_type() const {\n-    if (in_concurrent_start_gc()) {\n-      return ConcurrentStart;\n-    } else if (mark_or_rebuild_in_progress()) {\n-      return DuringMarkOrRebuild;\n-    } else if (in_young_only_phase()) {\n-      return Normal;\n-    } else {\n-      return Mixed;\n-    }\n-  }\n+  \/\/ Calculate GC Pause Type from internal state.\n+  G1GCPauseType young_gc_pause_type(bool concurrent_operation_is_full_mark) const;\n+  G1GCYoungPhase young_gc_phase() const;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectorState.hpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1GCTYPES_HPP\n+#define SHARE_GC_G1_G1GCTYPES_HPP\n+\n+#include \"utilities\/debug.hpp\"\n+\n+\/\/ Enumarate the phases in which the collection cycle can be.\n+enum G1GCYoungPhase {\n+  Normal,\n+  ConcurrentStart,\n+  DuringMarkOrRebuild,\n+  Mixed,\n+  G1GCYoungPhaseEndSentinel\n+};\n+\n+enum G1GCPauseType {\n+  YoungGC,\n+  LastYoungGC,\n+  ConcurrentStartMarkGC,\n+  ConcurrentStartUndoGC,\n+  Cleanup,\n+  Remark,\n+  MixedGC,\n+  FullGC,\n+  G1GCPauseTypeEndSentinel\n+};\n+\n+class G1GCTypeHelper {\n+ public:\n+\n+  static void assert_is_young_pause(G1GCPauseType type) {\n+    assert(type != FullGC, \"must be\");\n+    assert(type != Remark, \"must be\");\n+    assert(type != Cleanup, \"must be\");\n+  }\n+\n+  static bool is_young_only_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == ConcurrentStartUndoGC ||\n+           type == ConcurrentStartMarkGC ||\n+           type == LastYoungGC ||\n+           type == YoungGC;\n+  }\n+\n+  static bool is_mixed_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == MixedGC;\n+  }\n+\n+  static bool is_last_young_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == LastYoungGC;\n+  }\n+\n+  static bool is_concurrent_start_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == ConcurrentStartMarkGC || type == ConcurrentStartUndoGC;\n+  }\n+\n+  static const char* to_string(G1GCYoungPhase type) {\n+    switch(type) {\n+      case Normal: return \"Normal\";\n+      case ConcurrentStart: return \"Concurrent Start\";\n+      case DuringMarkOrRebuild: return \"During Mark\";\n+      case Mixed: return \"Mixed\";\n+      default: ShouldNotReachHere(); return NULL;\n+    }\n+  }\n+};\n+\n+#endif \/\/ SHARE_GC_G1_G1GCTYPES_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCTypes.hpp","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -634,1 +634,1 @@\n-  PauseKind this_pause = young_gc_pause_kind(concurrent_operation_is_full_mark);\n+  G1GCPauseType this_pause = collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark);\n@@ -638,1 +638,1 @@\n-  if (is_concurrent_start_pause(this_pause)) {\n+  if (G1GCTypeHelper::is_concurrent_start_pause(this_pause)) {\n@@ -668,2 +668,2 @@\n-  if (is_last_young_pause(this_pause)) {\n-    assert(!is_concurrent_start_pause(this_pause),\n+  if (G1GCTypeHelper::is_last_young_pause(this_pause)) {\n+    assert(!G1GCTypeHelper::is_concurrent_start_pause(this_pause),\n@@ -676,1 +676,1 @@\n-  } else if (is_mixed_pause(this_pause)) {\n+  } else if (G1GCTypeHelper::is_mixed_pause(this_pause)) {\n@@ -687,1 +687,1 @@\n-    assert(is_young_only_pause(this_pause), \"must be\");\n+    assert(G1GCTypeHelper::is_young_only_pause(this_pause), \"must be\");\n@@ -712,1 +712,1 @@\n-                                                is_young_only_pause(this_pause));\n+                                                G1GCTypeHelper::is_young_only_pause(this_pause));\n@@ -724,1 +724,1 @@\n-                                               is_young_only_pause(this_pause));\n+                                               G1GCTypeHelper::is_young_only_pause(this_pause));\n@@ -739,1 +739,1 @@\n-                                                is_young_only_pause(this_pause));\n+                                                G1GCTypeHelper::is_young_only_pause(this_pause));\n@@ -769,1 +769,1 @@\n-    if (is_young_only_pause(this_pause)) {\n+    if (G1GCTypeHelper::is_young_only_pause(this_pause)) {\n@@ -775,1 +775,1 @@\n-  assert(!(is_concurrent_start_pause(this_pause) && collector_state()->mark_or_rebuild_in_progress()),\n+  assert(!(G1GCTypeHelper::is_concurrent_start_pause(this_pause) && collector_state()->mark_or_rebuild_in_progress()),\n@@ -777,1 +777,1 @@\n-  if (is_concurrent_start_pause(this_pause)) {\n+  if (G1GCTypeHelper::is_concurrent_start_pause(this_pause)) {\n@@ -797,1 +797,1 @@\n-                           is_young_only_pause(this_pause));\n+                           G1GCTypeHelper::is_young_only_pause(this_pause));\n@@ -1154,44 +1154,0 @@\n-bool G1Policy::is_young_only_pause(PauseKind kind) {\n-  assert(kind != FullGC, \"must be\");\n-  assert(kind != Remark, \"must be\");\n-  assert(kind != Cleanup, \"must be\");\n-  return kind == ConcurrentStartUndoGC ||\n-         kind == ConcurrentStartMarkGC ||\n-         kind == LastYoungGC ||\n-         kind == YoungOnlyGC;\n-}\n-\n-bool G1Policy::is_mixed_pause(PauseKind kind) {\n-  assert(kind != FullGC, \"must be\");\n-  assert(kind != Remark, \"must be\");\n-  assert(kind != Cleanup, \"must be\");\n-  return kind == MixedGC;\n-}\n-\n-bool G1Policy::is_last_young_pause(PauseKind kind) {\n-  return kind == LastYoungGC;\n-}\n-\n-bool G1Policy::is_concurrent_start_pause(PauseKind kind) {\n-  return kind == ConcurrentStartMarkGC || kind == ConcurrentStartUndoGC;\n-}\n-\n-G1Policy::PauseKind G1Policy::young_gc_pause_kind(bool concurrent_operation_is_full_mark) const {\n-  assert(!collector_state()->in_full_gc(), \"must be\");\n-  if (collector_state()->in_concurrent_start_gc()) {\n-    assert(!collector_state()->in_young_gc_before_mixed(), \"must be\");\n-    return concurrent_operation_is_full_mark ? ConcurrentStartMarkGC : ConcurrentStartUndoGC;\n-  } else if (collector_state()->in_young_gc_before_mixed()) {\n-    assert(!collector_state()->in_concurrent_start_gc(), \"must be\");\n-    return LastYoungGC;\n-  } else if (collector_state()->in_mixed_phase()) {\n-    assert(!collector_state()->in_concurrent_start_gc(), \"must be\");\n-    assert(!collector_state()->in_young_gc_before_mixed(), \"must be\");\n-    return MixedGC;\n-  } else {\n-    assert(!collector_state()->in_concurrent_start_gc(), \"must be\");\n-    assert(!collector_state()->in_young_gc_before_mixed(), \"must be\");\n-    return YoungOnlyGC;\n-  }\n-}\n-\n@@ -1204,1 +1160,1 @@\n-void G1Policy::update_gc_pause_time_ratios(PauseKind kind, double start_time_sec, double end_time_sec) {\n+void G1Policy::update_gc_pause_time_ratios(G1GCPauseType gc_type, double start_time_sec, double end_time_sec) {\n@@ -1212,1 +1168,1 @@\n-  if (kind == Cleanup || kind == Remark) {\n+  if (gc_type == Cleanup || gc_type == Remark) {\n@@ -1219,1 +1175,1 @@\n-void G1Policy::record_pause(PauseKind kind,\n+void G1Policy::record_pause(G1GCPauseType gc_type,\n@@ -1223,1 +1179,1 @@\n-  if (kind != FullGC) {\n+  if (gc_type != FullGC) {\n@@ -1228,1 +1184,1 @@\n-    update_gc_pause_time_ratios(kind, start, end);\n+    update_gc_pause_time_ratios(gc_type, start, end);\n@@ -1231,1 +1187,1 @@\n-  update_time_to_mixed_tracking(kind, start, end);\n+  update_time_to_mixed_tracking(gc_type, start, end);\n@@ -1234,1 +1190,1 @@\n-void G1Policy::update_time_to_mixed_tracking(PauseKind kind,\n+void G1Policy::update_time_to_mixed_tracking(G1GCPauseType gc_type,\n@@ -1238,1 +1194,1 @@\n-  switch (kind) {\n+  switch (gc_type) {\n@@ -1244,1 +1200,1 @@\n-    case YoungOnlyGC:\n+    case YoungGC:\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":22,"deletions":66,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -264,19 +264,0 @@\n-\n-  \/\/ The kind of STW pause.\n-  enum PauseKind : uint {\n-    FullGC,\n-    YoungOnlyGC,\n-    MixedGC,\n-    LastYoungGC,\n-    ConcurrentStartMarkGC,\n-    ConcurrentStartUndoGC,\n-    Cleanup,\n-    Remark\n-  };\n-\n-  static bool is_young_only_pause(PauseKind kind);\n-  static bool is_mixed_pause(PauseKind kind);\n-  static bool is_last_young_pause(PauseKind kind);\n-  static bool is_concurrent_start_pause(PauseKind kind);\n-  \/\/ Calculate PauseKind from internal state.\n-  PauseKind young_gc_pause_kind(bool concurrent_operation_is_full_mark) const;\n@@ -284,1 +265,1 @@\n-  void update_time_to_mixed_tracking(PauseKind pause, double start, double end);\n+  void update_time_to_mixed_tracking(G1GCPauseType gc_type, double start, double end);\n@@ -286,1 +267,1 @@\n-  void record_pause(PauseKind kind, double start, double end);\n+  void record_pause(G1GCPauseType gc_type, double start, double end);\n@@ -290,1 +271,1 @@\n-  void update_gc_pause_time_ratios(PauseKind kind, double start_sec, double end_sec);\n+  void update_gc_pause_time_ratios(G1GCPauseType gc_type, double start_sec, double end_sec);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1YCTypes.hpp\"\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n@@ -52,1 +52,1 @@\n-    static const u4 nof_entries = G1YCTypeEndSentinel;\n+    static const u4 nof_entries = G1GCYoungPhaseEndSentinel;\n@@ -56,1 +56,1 @@\n-      writer.write(G1YCTypeHelper::to_string((G1YCType)i));\n+      writer.write(G1GCTypeHelper::to_string((G1GCYoungPhase)i));\n@@ -75,2 +75,2 @@\n-void G1NewTracer::report_yc_type(G1YCType type) {\n-  _g1_young_gc_info.set_type(type);\n+void G1NewTracer::report_yc_phase(G1GCYoungPhase phase) {\n+  _g1_young_gc_info.set_phase(phase);\n@@ -132,1 +132,1 @@\n-    e.set_type(_g1_young_gc_info.type());\n+    e.set_type(_g1_young_gc_info.phase());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/g1\/g1YCTypes.hpp\"\n+#include \"gc\/g1\/g1GCTypes.hpp\"\n@@ -36,1 +36,1 @@\n-  G1YCType _type;\n+  G1GCYoungPhase _phase;\n@@ -38,3 +38,3 @@\n-  G1YoungGCInfo() : _type(G1YCTypeEndSentinel) {}\n-  void set_type(G1YCType type) {\n-    _type = type;\n+  G1YoungGCInfo() : _phase(G1GCYoungPhaseEndSentinel) {}\n+  void set_phase(G1GCYoungPhase phase) {\n+    _phase = phase;\n@@ -42,1 +42,1 @@\n-  G1YCType type() const { return _type; }\n+  G1GCYoungPhase phase() const { return _phase; }\n@@ -52,1 +52,1 @@\n-  void report_yc_type(G1YCType type);\n+  void report_yc_phase(G1GCYoungPhase phase);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1YCTYPES_HPP\n-#define SHARE_GC_G1_G1YCTYPES_HPP\n-\n-#include \"utilities\/debug.hpp\"\n-\n-enum G1YCType {\n-  Normal,\n-  ConcurrentStart,\n-  DuringMarkOrRebuild,\n-  Mixed,\n-  G1YCTypeEndSentinel\n-};\n-\n-class G1YCTypeHelper {\n- public:\n-  static const char* to_string(G1YCType type) {\n-    switch(type) {\n-      case Normal: return \"Normal\";\n-      case ConcurrentStart: return \"Concurrent Start\";\n-      case DuringMarkOrRebuild: return \"During Mark\";\n-      case Mixed: return \"Mixed\";\n-      default: ShouldNotReachHere(); return NULL;\n-    }\n-  }\n-};\n-\n-#endif \/\/ SHARE_GC_G1_G1YCTYPES_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YCTypes.hpp","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"}]}