{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -610,1 +610,1 @@\n-     * Since the preferred length exceeds the soft maximum, we use the minimum growth\n+     * If the preferred length exceeds the soft maximum, we use the minimum growth\n@@ -612,5 +612,3 @@\n-     * amount to the current length. If the minimum required length is less than the\n-     * soft maximum, the soft maximum is returned. If the minimum required length is\n-     * greater than the soft maximum but does not exceed Integer.MAX_VALUE, the minimum\n-     * required length is returned. Otherwise, the minimum required length exceeds\n-     * Integer.MAX_VALUE, which can never be fulfilled, so this method throws OutOfMemoryError.\n+     * amount to the current length. If the minimum required length exceeds Integer.MAX_VALUE,\n+     * then this method throws OutOfMemoryError. Otherwise, this method returns the greater of\n+     * the soft maximum or the minimum required length.\n@@ -631,1 +629,1 @@\n-     * @return the new length of the array\n+     * @return the new array length\n@@ -643,0 +641,1 @@\n+            \/\/ put code cold in a separate method\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -100,3 +100,1 @@\n-        } catch (OutOfMemoryError oome) {\n-            \/\/ ok\n-        }\n+        } catch (OutOfMemoryError success) { }\n","filename":"test\/jdk\/jdk\/internal\/util\/ArraysSupport\/NewLength.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}