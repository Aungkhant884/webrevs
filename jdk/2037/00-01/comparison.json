{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -4352,0 +4352,31 @@\n+\/\/ Determine if the vmid is the parent pid for a child in a PID namespace.\n+\/\/ Return the namespace pid if so, otherwise -1.\n+int os::Linux::get_namespace_pid(int vmid) {\n+  char fname[24];\n+  int retpid = -1;\n+\n+  snprintf(fname, sizeof(fname), \"\/proc\/%d\/status\", vmid);\n+  FILE *fp = fopen(fname, \"r\");\n+\n+  if (fp) {\n+    int pid, nspid;\n+    int ret;\n+    while (!feof(fp) && !ferror(fp)) {\n+      ret = fscanf(fp, \"NSpid: %d %d\", &pid, &nspid);\n+      if (ret == 1) {\n+        break;\n+      }\n+      if (ret == 2) {\n+        retpid = nspid;\n+        break;\n+      }\n+      for (;;) {\n+        int ch = fgetc(fp);\n+        if (ch == EOF || ch == (int)'\\n') break;\n+      }\n+    }\n+    fclose(fp);\n+  }\n+  return retpid;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,0 +172,4 @@\n+  \/\/ Determine if the vmid is the parent pid for a child in a PID namespace.\n+  \/\/ Return the namespace pid if so, otherwise -1.\n+  static int get_namespace_pid(int vmid);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  RESTARTABLE(os::open(destfile, O_CREAT|O_WRONLY|O_TRUNC, S_IREAD|S_IWRITE),\n+  RESTARTABLE(os::open(destfile, O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR),\n@@ -139,1 +139,1 @@\n-\/\/ Note: the linux shared memory implementation uses the mmap\n+\/\/ Note: the Posix shared memory implementation uses the mmap\n@@ -146,5 +146,0 @@\n-\/\/ The linux implementation stores the backing store file in\n-\/\/ a user specific temporary directory located in the \/tmp file system,\n-\/\/ which is always a local file system and is sometimes a RAM based file\n-\/\/ system.\n-\n@@ -153,5 +148,0 @@\n-\/\/\n-\/\/ On linux, if containerized process, get dirname of\n-\/\/ \/proc\/{vmid}\/root\/tmp\/{PERFDATA_NAME_user}\n-\/\/ otherwise \/tmp\/{PERFDATA_NAME_user}\n-\/\/\n@@ -164,0 +154,3 @@\n+  \/\/ On linux, if containerized process, get dirname of\n+  \/\/ \/proc\/{vmid}\/root\/tmp\/{PERFDATA_NAME_user}\n+  \/\/ otherwise \/tmp\/{PERFDATA_NAME_user}\n@@ -352,5 +345,1 @@\n-#if defined(_AIX)\n-  if (!is_same_fsobject(fd, dirp->dd_fd)) {\n-#else\n-  if (!is_same_fsobject(fd, dirfd(dirp))) {\n-#endif\n+  if (!is_same_fsobject(fd, AIX_ONLY(dirp->dd_fdi) NOT_AIX(dirfd(dirp)))) {\n@@ -388,5 +377,1 @@\n-#if defined(_AIX)\n-  int fd = dirp->dd_fd;\n-#else\n-  int fd = dirfd(dirp);\n-#endif\n+  int fd = AIX_ONLY(dirp->dd_fd) NOT_AIX(dirfd(dirp));\n@@ -527,3 +512,0 @@\n-\/\/ On Linux, if nspid != -1, look in \/proc\/{vmid}\/root\/tmp for directories\n-\/\/ containing nspid, otherwise just look for vmid in \/tmp. On other\n-\/\/ platforms, nspid should always be -1.\n@@ -552,0 +534,2 @@\n+  \/\/ On Linux, if nspid != -1, look in \/proc\/{vmid}\/root\/tmp for directories\n+  \/\/ containing nspid, otherwise just look for vmid in \/tmp.\n@@ -667,34 +651,0 @@\n-#if defined(LINUX)\n-\/\/ Determine if the vmid is the parent pid\n-\/\/ for a child in a PID namespace.\n-\/\/ return the namespace pid if so, otherwise -1\n-static int get_namespace_pid(int vmid) {\n-  char fname[24];\n-  int retpid = -1;\n-\n-  snprintf(fname, sizeof(fname), \"\/proc\/%d\/status\", vmid);\n-  FILE *fp = fopen(fname, \"r\");\n-\n-  if (fp) {\n-    int pid, nspid;\n-    int ret;\n-    while (!feof(fp) && !ferror(fp)) {\n-      ret = fscanf(fp, \"NSpid: %d %d\", &pid, &nspid);\n-      if (ret == 1) {\n-        break;\n-      }\n-      if (ret == 2) {\n-        retpid = nspid;\n-        break;\n-      }\n-      for (;;) {\n-        int ch = fgetc(fp);\n-        if (ch == EOF || ch == (int)'\\n') break;\n-      }\n-    }\n-    fclose(fp);\n-  }\n-  return retpid;\n-}\n-#endif\n-\n@@ -725,5 +675,1 @@\n-#if defined(LINUX)\n-  int pid = (nspid == -1) ? vmid : nspid;\n-#else\n-  int pid = vmid;\n-#endif\n+  int pid = LINUX_ONLY((nspid == -1) ? vmid : nspid) NOT_LINUX(vmid);\n@@ -898,1 +844,1 @@\n-  RESTARTABLE(os::open(filename, O_RDWR|O_CREAT|O_NOFOLLOW, S_IREAD|S_IWRITE), result);\n+  RESTARTABLE(os::open(filename, O_RDWR|O_CREAT|O_NOFOLLOW, S_IRUSR|S_IWUSR), result);\n@@ -1188,6 +1134,2 @@\n-#if defined(LINUX)\n-  \/\/ determine if vmid is for a containerized process\n-  int nspid = get_namespace_pid(vmid);\n-#else\n-  int nspid = -1;\n-#endif\n+  \/\/ for linux, determine if vmid is for a containerized process\n+  int nspid = LINUX_ONLY(os::Linux::get_namespace_pid(vmid)) NOT_LINUX(-1);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":13,"deletions":71,"binary":false,"changes":84,"status":"modified"}]}