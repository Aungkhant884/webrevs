{"files":[{"patch":"@@ -41,1 +41,1 @@\n-  static const char field[] = \"FILE_DELTA_CHANGE\";\n+  static const char field[] = \"CHUNK_ROTATION_MONITOR\";\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+  template(jfr_chunk_rotation_monitor,                                \"jdk\/jfr\/internal\/JVM$ChunkRotationMonitor\")   \\\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1419,0 +1419,6 @@\n+static inline bool is_excluded(const Klass* monitor_klass) {\n+  assert(monitor_klass != nullptr, \"invariant\");\n+  NOT_JFR_RETURN_(false);\n+  JFR_ONLY(return vmSymbols::jfr_chunk_rotation_monitor() == monitor_klass->name());\n+}\n+\n@@ -1424,2 +1430,0 @@\n-  bool includeEvent = true;\n-  Klass* objectMonitorClass;\n@@ -1428,15 +1432,3 @@\n-  objectMonitorClass = monitor->object()->klass();\n-  if (objectMonitorClass != NULL &&\n-      objectMonitorClass->name()->equals(\"jdk\/jfr\/internal\/FileDeltaChangeLockObject\")) {\n-    includeEvent = false;\n-  }\n-  if (includeEvent) {\n-    event->set_monitorClass(objectMonitorClass);\n-    event->set_timeout(timeout);\n-    \/\/ Set an address that is 'unique enough', such that events close in\n-    \/\/ time and with the same address are likely (but not guaranteed) to\n-    \/\/ belong to the same object.\n-    event->set_address((uintptr_t)monitor);\n-    event->set_notifier(notifier_tid);\n-    event->set_timedOut(timedout);\n-    event->commit();\n+  const Klass* monitor_klass = monitor->object()->klass();\n+  if (is_excluded(monitor_klass)) {\n+    return;\n@@ -1444,0 +1436,9 @@\n+  event->set_monitorClass(monitor_klass);\n+  event->set_timeout(timeout);\n+  \/\/ Set an address that is 'unique enough', such that events close in\n+  \/\/ time and with the same address are likely (but not guaranteed) to\n+  \/\/ belong to the same object.\n+  event->set_address((uintptr_t)monitor);\n+  event->set_notifier(notifier_tid);\n+  event->set_timedOut(timedout);\n+  event->commit();\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal;\n-\n-\/**\n- * JFR internal object used for the file delta change locks. A call\n- * to Object.wait() on this object will not generate a JFR event.\n- *\/\n-class FileDeltaChangeLockObject {}\n\\ No newline at end of file\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/FileDeltaChangeLockObject.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -42,3 +42,0 @@\n-    \/\/ JVM signals file changes by doing Object#notify on this object\n-    static final Object FILE_DELTA_CHANGE = new FileDeltaChangeLockObject();\n-\n@@ -47,0 +44,9 @@\n+    private static class ChunkRotationMonitor {}\n+\n+    \/*\n+     * The JVM uses the chunk rotation monitor to notify Java that a rotation is warranted.\n+     * The monitor type is used to exclude jdk.JavaMonitorWait events from being generated\n+     * when Object.wait() is called on this monitor.\n+     *\/\n+    static final Object CHUNK_ROTATION_MONITOR = new ChunkRotationMonitor();\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -523,2 +523,2 @@\n-            synchronized (JVM.FILE_DELTA_CHANGE) {\n-                JVM.FILE_DELTA_CHANGE.wait(duration < 10 ? 10 : duration);\n+            synchronized (JVM.CHUNK_ROTATION_MONITOR) {\n+                JVM.CHUNK_ROTATION_MONITOR.wait(duration < 10 ? 10 : duration);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -305,2 +305,2 @@\n-            synchronized (JVM.FILE_DELTA_CHANGE) {\n-                JVM.FILE_DELTA_CHANGE.notifyAll();\n+            synchronized (JVM.CHUNK_ROTATION_MONITOR) {\n+                JVM.CHUNK_ROTATION_MONITOR.notifyAll();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RequestEngine.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}