{"files":[{"patch":"@@ -1017,1 +1017,1 @@\n-  address value() override { return cast_from_oop<address>(*oop_addr()); }\n+  address value() override { return *reinterpret_cast<address*>(oop_addr()); }\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-static inline derived_pointer to_derived_pointer(oop obj) {\n-  return static_cast<derived_pointer>(cast_from_oop<intptr_t>(obj));\n+static inline derived_pointer to_derived_pointer(intptr_t obj) {\n+  return static_cast<derived_pointer>(obj);\n@@ -417,1 +417,1 @@\n-    derived_pointer derived_base = to_derived_pointer(*base);\n+  derived_pointer derived_base = to_derived_pointer(*reinterpret_cast<intptr_t*>(base));\n@@ -926,1 +926,1 @@\n-  intptr_t offset = *derived_loc - to_derived_pointer(*base_loc);\n+  intptr_t offset = *derived_loc - to_derived_pointer(*reinterpret_cast<intptr_t*>(base_loc));\n@@ -957,1 +957,1 @@\n-    derived_pointer derived_base = to_derived_pointer(base);\n+    derived_pointer derived_base = to_derived_pointer(cast_from_oop<intptr_t>(base));\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-  static inline bool should_skip(oop val);\n+  static inline bool should_skip(void* val);\n@@ -457,1 +457,1 @@\n-  static bool should_skip(oop value) { return false; }\n+  static bool should_skip(void* value) { return false; }\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-inline bool SkipNullValue::should_skip(oop val) {\n-  return val == (oop)nullptr || CompressedOops::is_base(val);\n+inline bool SkipNullValue::should_skip(void* val) {\n+  return val == nullptr || (UseCompressedOops && CompressedOops::is_base(val));\n@@ -87,2 +87,3 @@\n-      oop* base_loc = fr->oopmapreg_to_oop_location(omv.content_reg(), reg_map);\n-      \/\/ Ignore nullptr oops and decoded nullptr narrow oops which\n+      void** base_loc = (void**) fr->oopmapreg_to_location(omv.content_reg(), reg_map);\n+\n+      \/\/ Ignore nullptr oops and decoded null narrow oops which\n@@ -93,2 +94,2 @@\n-      if (base_loc != nullptr && *base_loc != (oop)nullptr && !CompressedOops::is_base(*base_loc)) {\n-        _derived_oop_fn->do_derived_oop(base_loc, derived_loc);\n+      if (base_loc != nullptr && !SkipNullValue::should_skip(*base_loc)) {\n+        _derived_oop_fn->do_derived_oop((oop*)base_loc, derived_loc);\n@@ -105,1 +106,1 @@\n-      oop* loc = fr->oopmapreg_to_oop_location(omv.reg(),reg_map);\n+      void** loc = (void**) fr->oopmapreg_to_location(omv.reg(),reg_map);\n@@ -125,1 +126,1 @@\n-        oop val = *loc;\n+        void* val = *loc;\n@@ -134,1 +135,1 @@\n-        _oop_fn->do_oop(loc);\n+        _oop_fn->do_oop((oop*)loc);\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1057,1 +1057,0 @@\n-#define       badOop            (cast_to_oop(::badOopVal))\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}