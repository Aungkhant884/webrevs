{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Set;\n@@ -37,1 +38,0 @@\n- * @modules java.sql\n@@ -50,15 +50,27 @@\n-        ModuleDescriptor md = javaSQLModuleFromBootLayer().getDescriptor();\n-        assertRequiresHasModifier(md);\n-        int expectedHashCode = md.hashCode();\n-        int numProcesses = 50;\n-        for (int i = 0; i < numProcesses; i++) {\n-            \/\/ run some with CDS enabled and some with CDS disabled\n-            boolean disableCDS = (i % 2 == 0);\n-            String[] processArgs;\n-            if (disableCDS) {\n-                processArgs = new String[]{\"-Xshare:off\",\n-                        HashCodeChecker.class.getName(),\n-                        String.valueOf(expectedHashCode)};\n-            } else {\n-                processArgs = new String[]{HashCodeChecker.class.getName(),\n-                        String.valueOf(expectedHashCode)};\n+        Set<Module> bootModules = ModuleLayer.boot().modules();\n+        for (Module bootModule : bootModules) {\n+            ModuleDescriptor md = bootModule.getDescriptor();\n+            int expectedHashCode = md.hashCode();\n+            System.out.println(\"Expected ModuleDescriptor.hashCode() of boot module \"\n+                    + bootModule.getName() + \" is \" + expectedHashCode);\n+            int numProcesses = 2;\n+            for (int i = 0; i < numProcesses; i++) {\n+                \/\/ run some with CDS enabled and some with CDS disabled\n+                boolean disableCDS = (i % 2 == 0);\n+                String[] processArgs;\n+                if (disableCDS) {\n+                    processArgs = new String[]{\"-Xshare:off\",\n+                            HashCodeChecker.class.getName(),\n+                            bootModule.getName(),\n+                            String.valueOf(expectedHashCode)};\n+                } else {\n+                    processArgs = new String[]{HashCodeChecker.class.getName(),\n+                            bootModule.getName(),\n+                            String.valueOf(expectedHashCode)};\n+                }\n+                ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(processArgs);\n+                long start = System.currentTimeMillis();\n+                OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(processBuilder);\n+                System.out.println(\"Process \" + outputAnalyzer.pid() + \" completed in \"\n+                        + (System.currentTimeMillis() - start) + \" milli seconds\");\n+                outputAnalyzer.shouldHaveExitValue(0);\n@@ -66,6 +78,0 @@\n-            ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(processArgs);\n-            long start = System.currentTimeMillis();\n-            OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(processBuilder);\n-            System.out.println(\"Process \" + outputAnalyzer.pid() + \" completed in \"\n-                    + (System.currentTimeMillis() - start) + \" milli seconds\");\n-            outputAnalyzer.shouldHaveExitValue(0);\n@@ -76,1 +82,1 @@\n-     * Loads the java.sql module from boot layer and compares the hashCode of that module's\n+     * Loads the passed module from the boot layer and compares the hashCode of that module's\n@@ -81,3 +87,6 @@\n-    private static void assertExpectedHashCode(int expectedHashCode) throws Exception {\n-        Module bootModule = javaSQLModuleFromBootLayer();\n-        ModuleDescriptor bootMD = bootModule.getDescriptor();\n+    private static void assertExpectedHashCode(String moduleName, int expectedHashCode) throws Exception {\n+        Optional<Module> bootModule = ModuleLayer.boot().findModule(moduleName);\n+        if (bootModule.isEmpty()) {\n+            throw new RuntimeException(\"Boot module \" + moduleName + \" is missing\");\n+        }\n+        ModuleDescriptor bootMD = bootModule.get().getDescriptor();\n@@ -90,1 +99,1 @@\n-        ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule);\n+        ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule.get());\n@@ -114,30 +123,3 @@\n-            ModuleDescriptorHashCodeTest.assertExpectedHashCode(Integer.parseInt(args[0]));\n-        }\n-    }\n-\n-    private static void assertRequiresHasModifier(ModuleDescriptor moduleDescriptor) {\n-        \/\/ The test case needs a module whose descriptor has at least one \"requires\" with a \"modifier\"\n-        \/\/ set. This is to ensure that the hashCode tests that we run in this test case,\n-        \/\/ do indeed trigger the hashCode() calls against the \"modifier\" enums.\n-        \/\/ At the time of writing this test, the test does indeed use such a boot module which satisfies\n-        \/\/ that criteria. However, we want to be sure that any future\n-        \/\/ changes to that module definition don't create artificial success of the test case.\n-        for (ModuleDescriptor.Requires requires : moduleDescriptor.requires()) {\n-            if (!requires.modifiers().isEmpty()) {\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(moduleDescriptor + \" doesn't have a \\\"requires\\\" with a \\\"modifier\\\"\");\n-    }\n-\n-    \/\/ Finds and returns the java.sql module from the boot layer\n-    private static Module javaSQLModuleFromBootLayer() {\n-        \/\/ we use \"java.sql\" as the module of choice because its module definition has\n-        \/\/ at least one \"requires\" with a \"modifier\":\n-        \/\/  requires transitive java.logging;\n-        \/\/  requires transitive java.transaction.xa;\n-        \/\/  requires transitive java.xml;\n-        String moduleName = \"java.sql\";\n-        Optional<Module> bootModule = ModuleLayer.boot().findModule(moduleName);\n-        if (bootModule.isEmpty()) {\n-            throw new RuntimeException(moduleName + \" module is missing in boot layer\");\n+            \/\/ args[0] is module name\n+            \/\/ args[1] is the expected hash code of that module descriptor\n+            ModuleDescriptorHashCodeTest.assertExpectedHashCode(args[0], Integer.parseInt(args[1]));\n@@ -145,1 +127,0 @@\n-        return bootModule.get();\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorHashCodeTest.java","additions":39,"deletions":58,"binary":false,"changes":97,"status":"modified"}]}