{"files":[{"patch":"@@ -71,1 +71,7 @@\n-            outputAnalyzer.shouldHaveExitValue(0);\n+            try {\n+                outputAnalyzer.shouldHaveExitValue(0);\n+            } catch (RuntimeException e) {\n+                \/\/ print out diagnostics from the launched process, that failed, for easy debugging\n+                System.err.println(\"Diagnostic summary for failed process \" + outputAnalyzer.pid() + \":\");\n+                outputAnalyzer.reportDiagnosticSummary();\n+            }\n@@ -75,28 +81,33 @@\n-    private static class HashCodeChecker {\n-\n-        \/**\n-         * Loads the java.sql module from boot layer and compares the hashCode of that module's\n-         * descriptor with the expected hash code (which is passed as an argument to the program).\n-         * Then uses the {@link ModuleDescriptor.Builder} to construct a module descriptor for the\n-         * same module and verifies that it too has the same hash code.\n-         *\/\n-        public static void main(String[] args) throws Exception {\n-            int expectedHashCode = Integer.parseInt(args[0]);\n-            Module bootModule = javaSQLModuleFromBootLayer();\n-            ModuleDescriptor bootMD = bootModule.getDescriptor();\n-            int actualHashCode = bootMD.hashCode();\n-            if (actualHashCode != expectedHashCode) {\n-                throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + actualHashCode\n-                        + \" from boot module descriptor \" + bootMD);\n-            }\n-            System.out.println(\"Got expected hashCode of \" + expectedHashCode + \" for boot module descriptor \" + bootMD);\n-            ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule);\n-            \/\/ verify that this object is indeed a different object instance than the boot module descriptor\n-            \/\/ to prevent any artificial passing of the test\n-            if (bootMD == mdFromBuilder) {\n-                throw new RuntimeException(\"ModuleDescriptor loaded from boot layer and \" +\n-                        \"one created from module-info.class unexpectedly returned the same instance: \" + bootMD);\n-            }\n-            int hashCode = mdFromBuilder.hashCode();\n-            if (expectedHashCode != hashCode) {\n-                throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + hashCode\n+    \/**\n+     * Loads the java.sql module from boot layer and compares the hashCode of that module's\n+     * descriptor with the expected hash code (which is passed as an argument).\n+     * Then uses the {@link ModuleDescriptor.Builder} to construct a module descriptor for the\n+     * same module and verifies that it too has the same hash code.\n+     *\/\n+    private static void realMain(String[] args) throws Exception {\n+        int expectedHashCode = Integer.parseInt(args[0]);\n+        Module bootModule = javaSQLModuleFromBootLayer();\n+        ModuleDescriptor bootMD = bootModule.getDescriptor();\n+        int actualHashCode = bootMD.hashCode();\n+        if (actualHashCode != expectedHashCode) {\n+            throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + actualHashCode\n+                    + \" from boot module descriptor \" + bootMD);\n+        }\n+        System.out.println(\"Got expected hashCode of \" + expectedHashCode + \" for boot module descriptor \" + bootMD);\n+        ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule);\n+        \/\/ verify that this object is indeed a different object instance than the boot module descriptor\n+        \/\/ to prevent any artificial passing of the test\n+        if (bootMD == mdFromBuilder) {\n+            throw new RuntimeException(\"ModuleDescriptor loaded from boot layer and \" +\n+                    \"one created from module-info.class unexpectedly returned the same instance: \" + bootMD);\n+        }\n+        int hashCode = mdFromBuilder.hashCode();\n+        if (expectedHashCode != hashCode) {\n+            throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + hashCode\n+                    + \" from module descriptor \" + mdFromBuilder);\n+        }\n+        \/\/ invoke a few times to make sure the hashCode doesn't change within the same JVM run\n+        for (int i = 0; i < 5; i++) {\n+            int h = mdFromBuilder.hashCode();\n+            if (expectedHashCode != h) {\n+                throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + h\n@@ -105,8 +116,6 @@\n-            \/\/ invoke a few times to make sure the hashCode doesn't change within the same JVM run\n-            for (int i = 0; i < 5; i++) {\n-                int h = mdFromBuilder.hashCode();\n-                if (expectedHashCode != h) {\n-                    throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + h\n-                            + \" from module descriptor \" + mdFromBuilder);\n-                }\n-            }\n+        }\n+    }\n+\n+    private static class HashCodeChecker {\n+        public static void main(String[] args) throws Exception {\n+            ModuleDescriptorHashCodeTest.realMain(args);\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorHashCodeTest.java","additions":46,"deletions":37,"binary":false,"changes":83,"status":"modified"}]}