{"files":[{"patch":"@@ -24,2 +24,1 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.Test;\n@@ -30,1 +29,0 @@\n-import java.util.Optional;\n@@ -33,0 +31,3 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotSame;\n+\n@@ -36,4 +37,3 @@\n- * @library \/test\/lib\n- * @run driver ModuleDescriptorHashCodeTest\n- * @summary Tests that the ModuleDescriptor.hashCode() method returns the same hash code\n- * across multiple JVM runs, for the same module descriptor.\n+ * @run testng ModuleDescriptorHashCodeTest\n+ * @run testng\/othervm -Xshare:off ModuleDescriptorHashCodeTest\n+ * @summary Tests the ModuleDescriptor.hashCode() for boot layer modules\n@@ -44,4 +44,3 @@\n-     * Launches multiple instances of a Java program which verifies the hashCode() of a\n-     * ModuleDescriptor, which is loaded from the boot layer as well as constructed using\n-     * the ModuleDescriptor.Builder. It is expected that every single run of this program\n-     * will generate the exact same hash code for the module descriptor of the same module.\n+     * Verifies that the ModuleDescriptor.hashCode() returned by a boot layer module is\n+     * the same as that returned by a ModuleDescriptor constructed from the ModuleDescriptor.Builder\n+     * for the same module.\n@@ -49,1 +48,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBootModuleDescriptor() throws Exception {\n@@ -52,74 +52,11 @@\n-            ModuleDescriptor md = bootModule.getDescriptor();\n-            int expectedHashCode = md.hashCode();\n-            System.out.println(\"Expected ModuleDescriptor.hashCode() of boot module \"\n-                    + bootModule.getName() + \" is \" + expectedHashCode);\n-            int numProcesses = 2;\n-            for (int i = 0; i < numProcesses; i++) {\n-                \/\/ run some with CDS enabled and some with CDS disabled\n-                boolean disableCDS = (i % 2 == 0);\n-                String[] processArgs;\n-                if (disableCDS) {\n-                    processArgs = new String[]{\"-Xshare:off\",\n-                            HashCodeChecker.class.getName(),\n-                            bootModule.getName(),\n-                            String.valueOf(expectedHashCode)};\n-                } else {\n-                    processArgs = new String[]{HashCodeChecker.class.getName(),\n-                            bootModule.getName(),\n-                            String.valueOf(expectedHashCode)};\n-                }\n-                ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(processArgs);\n-                long start = System.currentTimeMillis();\n-                OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(processBuilder);\n-                System.out.println(\"Process \" + outputAnalyzer.pid() + \" completed in \"\n-                        + (System.currentTimeMillis() - start) + \" milli seconds\");\n-                outputAnalyzer.shouldHaveExitValue(0);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Loads the passed module from the boot layer and compares the hashCode of that module's\n-     * descriptor with the expected hash code (which is passed as an argument).\n-     * Then uses the {@link ModuleDescriptor.Builder} to construct a module descriptor for the\n-     * same module and verifies that it too has the same hash code.\n-     *\/\n-    private static void assertExpectedHashCode(String moduleName, int expectedHashCode) throws Exception {\n-        Optional<Module> bootModule = ModuleLayer.boot().findModule(moduleName);\n-        if (bootModule.isEmpty()) {\n-            throw new RuntimeException(\"Boot module \" + moduleName + \" is missing\");\n-        }\n-        ModuleDescriptor bootMD = bootModule.get().getDescriptor();\n-        int actualHashCode = bootMD.hashCode();\n-        if (actualHashCode != expectedHashCode) {\n-            throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + actualHashCode\n-                    + \" from boot module descriptor \" + bootMD);\n-        }\n-        System.out.println(\"Got expected hashCode of \" + expectedHashCode + \" for boot module descriptor \" + bootMD);\n-        ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule.get());\n-        \/\/ verify that this object is indeed a different object instance than the boot module descriptor\n-        \/\/ to prevent any artificial passing of the test\n-        if (bootMD == mdFromBuilder) {\n-            throw new RuntimeException(\"ModuleDescriptor loaded from boot layer and \" +\n-                    \"one created from module-info.class unexpectedly returned the same instance: \" + bootMD);\n-        }\n-        int hashCode = mdFromBuilder.hashCode();\n-        if (expectedHashCode != hashCode) {\n-            throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + hashCode\n-                    + \" from module descriptor \" + mdFromBuilder);\n-        }\n-        \/\/ invoke a few times to make sure the hashCode doesn't change within the same JVM run\n-        for (int i = 0; i < 5; i++) {\n-            int h = mdFromBuilder.hashCode();\n-            if (expectedHashCode != h) {\n-                throw new RuntimeException(\"Expected hashCode \" + expectedHashCode + \" but got \" + h\n-                        + \" from module descriptor \" + mdFromBuilder);\n-            }\n-        }\n-    }\n-\n-    private static class HashCodeChecker {\n-        public static void main(String[] args) throws Exception {\n-            \/\/ args[0] is module name\n-            \/\/ args[1] is the expected hash code of that module descriptor\n-            ModuleDescriptorHashCodeTest.assertExpectedHashCode(args[0], Integer.parseInt(args[1]));\n+            System.out.println(\"Testing module descriptor of boot module \" + bootModule);\n+            ModuleDescriptor bootMD = bootModule.getDescriptor();\n+            ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule);\n+            \/\/ verify that this object is indeed a different object instance than the boot module descriptor\n+            \/\/ to prevent any artificial passing of the test\n+            assertNotSame(mdFromBuilder, bootMD, \"ModuleDescriptor loaded from boot layer and \" +\n+                    \"one created from module-info.class unexpectedly returned the same instance\");\n+            assertEquals(mdFromBuilder.hashCode(), bootMD.hashCode(),\n+                    \"Unexpected ModuleDescriptor.hashCode() for \" + mdFromBuilder);\n+            assertEquals(mdFromBuilder.compareTo(bootMD), 0,\n+                    \"Unexpected ModuleDescriptor.compareTo() for \" + mdFromBuilder);\n@@ -135,0 +72,1 @@\n+            \/\/ internally calls ModuleDescriptor.Builder\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorHashCodeTest.java","additions":24,"deletions":86,"binary":false,"changes":110,"status":"modified"}]}