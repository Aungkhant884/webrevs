{"files":[{"patch":"@@ -330,1 +330,1 @@\n-            int hash = name.hashCode() * 43 + mods.hashCode();\n+            int hash = name.hashCode() * 43 + ordinalHashCode(mods);\n@@ -508,1 +508,1 @@\n-            int hash = mods.hashCode();\n+            int hash = ordinalHashCode(mods);\n@@ -711,1 +711,1 @@\n-            int hash = mods.hashCode();\n+            int hash = ordinalHashCode(mods);\n@@ -2264,1 +2264,1 @@\n-            hc = hc * 43 + Objects.hashCode(modifiers);\n+            hc = hc * 43 + ordinalHashCode(modifiers);\n@@ -2549,0 +2549,12 @@\n+    \/**\n+     * Generates and returns a hashcode for the enum instances. The returned hashcode\n+     * is a sum of each of the enum instances' {@link Enum#ordinal() ordinal} value.\n+     *\/\n+    private static int ordinalHashCode(Iterable<? extends Enum<?>> enums) {\n+        int h = 0;\n+        for (Enum<?> e : enums) {\n+            h += e.ordinal();\n+        }\n+        return h;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.module.ModuleDescriptor;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotSame;\n+\n+\/**\n+ * @test\n+ * @bug 8275509\n+ * @run testng ModuleDescriptorHashCodeTest\n+ * @run testng\/othervm -Xshare:off ModuleDescriptorHashCodeTest\n+ * @summary Tests the ModuleDescriptor.hashCode() for boot layer modules\n+ *\/\n+public class ModuleDescriptorHashCodeTest {\n+\n+    \/**\n+     * Verifies that the ModuleDescriptor.hashCode() returned by a boot layer module is\n+     * the same as that returned by a ModuleDescriptor constructed from the ModuleDescriptor.Builder\n+     * for the same module.\n+     *\/\n+    @Test\n+    public void testBootModuleDescriptor() throws Exception {\n+        Set<Module> bootModules = ModuleLayer.boot().modules();\n+        for (Module bootModule : bootModules) {\n+            System.out.println(\"Testing module descriptor of boot module \" + bootModule);\n+            ModuleDescriptor bootMD = bootModule.getDescriptor();\n+            ModuleDescriptor mdFromBuilder = fromModuleInfoClass(bootModule);\n+            \/\/ verify that this object is indeed a different object instance than the boot module descriptor\n+            \/\/ to prevent any artificial passing of the test\n+            assertNotSame(mdFromBuilder, bootMD, \"ModuleDescriptor loaded from boot layer and \" +\n+                    \"one created from module-info.class unexpectedly returned the same instance\");\n+            assertEquals(mdFromBuilder.hashCode(), bootMD.hashCode(),\n+                    \"Unexpected ModuleDescriptor.hashCode() for \" + mdFromBuilder);\n+            assertEquals(mdFromBuilder.compareTo(bootMD), 0,\n+                    \"Unexpected ModuleDescriptor.compareTo() for \" + mdFromBuilder);\n+        }\n+    }\n+\n+    \/\/ Returns a ModuleDescriptor parsed out of the module-info.class of the passed Module\n+    private static ModuleDescriptor fromModuleInfoClass(Module module) throws IOException {\n+        try (InputStream moduleInfo = module.getResourceAsStream(\"module-info.class\")) {\n+            if (moduleInfo == null) {\n+                throw new RuntimeException(\"Could not locate module-info.class in \" + module);\n+            }\n+            \/\/ internally calls ModuleDescriptor.Builder\n+            return ModuleDescriptor.read(moduleInfo);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorHashCodeTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}