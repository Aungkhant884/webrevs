{"files":[{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8279508\n- * @summary Auto-vectorize Math.round API\n- * @requires vm.compiler2.enabled\n- * @requires os.simpleArch == \"x64\"\n- * @library \/test\/lib \/\n- * @run driver compiler.vectorization.TestRoundVect\n- *\/\n-\n-package compiler.vectorization;\n-\n-import compiler.lib.ir_framework.*;\n-\n-public class TestRoundVect {\n-  private static final int ARRLEN = 1024;\n-  private static final int ITERS  = 11000;\n-\n-  private static double [] dinp;\n-  private static long   [] lout;\n-  private static float  [] finp;\n-  private static int    [] iout;\n-\n-  public static void main(String args[]) {\n-      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                  \"-XX:UseAVX=3\",\n-                                  \"-XX:CompileThresholdScaling=0.3\");\n-      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                  \"-XX:UseAVX=1\",\n-                                  \"-XX:CompileThresholdScaling=0.3\");\n-      System.out.println(\"PASSED\");\n-  }\n-\n-  @Test\n-  @IR(applyIf = {\"UseAVX\", \"3\"}, counts = {\"RoundVD\" , \" > 0 \"})\n-  public void test_round_double(long[] lout, double[] dinp) {\n-      for (int i = 0; i < lout.length; i+=1) {\n-          lout[i] = Math.round(dinp[i]);\n-      }\n-  }\n-\n-  @Run(test = {\"test_round_double\"}, mode = RunMode.STANDALONE)\n-  public void kernel_test_round_double() {\n-      dinp = new double[ARRLEN];\n-      lout = new long[ARRLEN];\n-      for(int i = 0 ; i < ARRLEN; i++) {\n-          dinp[i] = (double)i*1.4;\n-      }\n-      for (int i = 0; i < ITERS; i++) {\n-          test_round_double(lout , dinp);\n-      }\n-  }\n-\n-  @Test\n-  @IR(applyIf = {\"UseAVX\", \" > 1\"}, counts = {\"RoundVF\" , \" > 0 \"})\n-  public void test_round_float(int[] iout, float[] finp) {\n-      for (int i = 0; i < finp.length; i+=1) {\n-          iout[i] = Math.round(finp[i]);\n-      }\n-  }\n-\n-  @Run(test = {\"test_round_float\"}, mode = RunMode.STANDALONE)\n-  public void kernel_test_round() {\n-      finp = new float[ARRLEN];\n-      iout = new int[ARRLEN];\n-      for(int i = 0 ; i < ARRLEN; i++) {\n-          finp[i] = (float)i*1.4f;\n-      }\n-      for (int i = 0; i < ITERS; i++) {\n-          test_round_float(iout , finp);\n-      }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVect.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8279508\n+ * @summary Auto-vectorize Math.round API\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*avx512dq.*\"\n+ * @requires os.simpleArch == \"x64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorization.TestRoundVectDouble\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestRoundVectDouble {\n+  private static final int ARRLEN = 1024;\n+  private static final int ITERS  = 11000;\n+\n+  private static double [] dinp;\n+  private static long   [] lout;\n+\n+  public static void main(String args[]) {\n+      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                  \"-XX:UseAVX=3\",\n+                                  \"-XX:CompileThresholdScaling=0.3\");\n+      System.out.println(\"PASSED\");\n+  }\n+\n+  @Test\n+  @IR(applyIf = {\"UseAVX\", \"3\"}, counts = {\"RoundVD\" , \" > 0 \"})\n+  public void test_round_double(long[] lout, double[] dinp) {\n+      for (int i = 0; i < lout.length; i+=1) {\n+          lout[i] = Math.round(dinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_round_double\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_round_double() {\n+      dinp = new double[ARRLEN];\n+      lout = new long[ARRLEN];\n+      for(int i = 0 ; i < ARRLEN; i++) {\n+          dinp[i] = (double)i*1.4;\n+      }\n+      for (int i = 0; i < ITERS; i++) {\n+          test_round_double(lout , dinp);\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectDouble.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8279508\n+ * @summary Auto-vectorize Math.round API\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @requires os.simpleArch == \"x64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorization.TestRoundVectFloat\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestRoundVectFloat {\n+  private static final int ARRLEN = 1024;\n+  private static final int ITERS  = 11000;\n+  private static float  [] finp;\n+  private static int    [] iout;\n+\n+  public static void main(String args[]) {\n+      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                 \"-XX:UseAVX=1\",\n+                                 \"-XX:CompileThresholdScaling=0.3\");\n+      System.out.println(\"PASSED\");\n+  }\n+\n+  @Test\n+  @IR(applyIf = {\"UseAVX\", \" > 1\"}, counts = {\"RoundVF\" , \" > 0 \"})\n+  public void test_round_float(int[] iout, float[] finp) {\n+      for (int i = 0; i < finp.length; i+=1) {\n+          iout[i] = Math.round(finp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_round_float\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_round() {\n+      finp = new float[ARRLEN];\n+      iout = new int[ARRLEN];\n+      for(int i = 0 ; i < ARRLEN; i++) {\n+          finp[i] = (float)i*1.4f;\n+      }\n+      for (int i = 0; i < ITERS; i++) {\n+          test_round_float(iout , finp);\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectFloat.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}