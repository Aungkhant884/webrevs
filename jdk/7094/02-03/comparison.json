{"files":[{"patch":"@@ -4120,35 +4120,11 @@\n-                                                 XMMRegister xtmp3, KRegister ktmp1, KRegister ktmp2, KRegister ktmp3,\n-                                                 AddressLiteral double_sign_flip, Register scratch, int vec_enc) {\n-  \/\/ Following assembly snippet is vectorized translation of Math.round(double) algorithm\n-  \/\/ for AVX512 target.\n-  evmovdquq(xtmp1, k0, src, true, vec_enc);\n-  movptr(scratch, 0x7ff0000000000000L);\n-  evpbroadcastq(xtmp2, scratch, vec_enc);\n-  evpandq(xtmp2, k0, xtmp2, xtmp1, true, vec_enc);\n-  Assembler::evpsraq(xtmp2, k0, xtmp2, 0x34, true, vec_enc);\n-  mov64(scratch, 0x432);\n-  evpbroadcastq(dst, scratch, vec_enc);\n-  vpsubq(dst, dst, xtmp2, vec_enc);\n-  evmovdquq(xtmp3, k0, dst, true, vec_enc);\n-  mov64(scratch, 0xffffffffffffffc0L);\n-  evpbroadcastq(xtmp2, scratch, vec_enc);\n-  evpandq(xtmp2, k0, dst, xtmp2, true, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  Assembler::evpcmpeqq(ktmp1, xtmp2, dst, vec_enc);\n-  mov64(scratch, 0xfffffffffffffL);\n-  evpbroadcastq(xtmp2, scratch, vec_enc);\n-  mov64(scratch, 0x10000000000000L);\n-  evpbroadcastq(dst, scratch, vec_enc);\n-  evpternlogq(xtmp1, 0xea, k0, xtmp2, dst, true, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  evpcmpq(ktmp2, k0, src, dst, Assembler::lt, true, vec_enc);\n-  kandwl(ktmp2, ktmp2, ktmp1);\n-  evpsubq(xtmp1, ktmp2, dst, xtmp1, true, vec_enc);\n-  evpsravq(xtmp1, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  mov64(scratch, 0x1);\n-  evpbroadcastq(xtmp3, scratch, vec_enc);\n-  evpaddq(xtmp1, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  evpsravq(xtmp3, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  evcvtpd2qq(dst, src, vec_enc);\n-  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp2, ktmp3, scratch, double_sign_flip, vec_enc);\n-  evpblendmq(dst, ktmp1, dst, xtmp3, true, vec_enc);\n+                                                 KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n+                                                 AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n+  ldmxcsr(as_Address(new_mxcsr));\n+  mov64(scratch, 4602678819172646912L);\n+  evpbroadcastq(xtmp1, scratch, vec_enc);\n+  vaddpd(xtmp1, src , xtmp1, vec_enc);\n+  vrndscalepd(dst, xtmp1, 0x4, vec_enc);\n+  evcvtpd2qq(dst, dst, vec_enc);\n+  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  ldmxcsr(as_Address(mxcsr_std));\n@@ -4158,35 +4134,11 @@\n-                                                XMMRegister xtmp3, KRegister ktmp1, KRegister ktmp2, KRegister ktmp3,\n-                                                AddressLiteral float_sign_flip, Register scratch, int vec_enc) {\n-  \/\/ Following assembly snippet is vectorized translation of Math.round(float) algorithm\n-  \/\/ for AVX512 target.\n-  evmovdquq(xtmp1, k0, src, true, vec_enc);\n-  movl(scratch, 0x7F800000);\n-  evpbroadcastd(xtmp2, scratch, vec_enc);\n-  evpandd(xtmp2, k0, xtmp2, xtmp1, true, vec_enc);\n-  Assembler::evpsrad(xtmp2, k0, xtmp2, 0x17, true, vec_enc);\n-  movl(scratch, 0x95);\n-  evpbroadcastd(dst, scratch, vec_enc);\n-  vpsubd(dst, dst, xtmp2, vec_enc);\n-  evmovdquq(xtmp3, k0, dst, true, vec_enc);\n-  movl(scratch, 0XFFFFFFE0);\n-  evpbroadcastd(xtmp2, scratch, vec_enc);\n-  evpandd(xtmp2, k0, dst, xtmp2, true, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  Assembler::evpcmpeqd(ktmp1, k0, xtmp2, dst, vec_enc);\n-  movl(scratch, 0X007FFFFF);\n-  evpbroadcastd(xtmp2, scratch, vec_enc);\n-  movl(scratch, 0X00800000);\n-  evpbroadcastd(dst, scratch, vec_enc);\n-  evpternlogd(xtmp1, 0xea, k0, xtmp2, dst, true, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  evpcmpd(ktmp2, k0, src, dst, Assembler::lt, true, vec_enc);\n-  kandwl(ktmp2, ktmp2, ktmp1);\n-  evpsubd(xtmp1, ktmp2, dst, xtmp1, true, vec_enc);\n-  evpsravd(xtmp1, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  movl(scratch, 0x1);\n-  evpbroadcastd(xtmp3, scratch, vec_enc);\n-  evpaddd(xtmp1, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  evpsravd(xtmp3, ktmp1, xtmp1, xtmp3, true, vec_enc);\n-  vcvtps2dq(dst, src, vec_enc);\n-  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp2, ktmp3, scratch, float_sign_flip, vec_enc);\n-  evpblendmd(dst, ktmp1, dst, xtmp3, true, vec_enc);\n+                                                KRegister ktmp1, KRegister ktmp2, AddressLiteral float_sign_flip,\n+                                                AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n+  ldmxcsr(as_Address(new_mxcsr));\n+  movl(scratch, 1056964608);\n+  evpbroadcastd(xtmp1, scratch, vec_enc);\n+  vaddps(xtmp1, src , xtmp1, vec_enc);\n+  vrndscaleps(dst, xtmp1, 0x4, vec_enc);\n+  vcvtps2dq(dst, dst, vec_enc);\n+  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, float_sign_flip, vec_enc);\n+  ldmxcsr(as_Address(mxcsr_std));\n@@ -4196,43 +4148,12 @@\n-                                               XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, XMMRegister xtmp6,\n-                                               AddressLiteral float_sign_flip, Register scratch, int vec_enc) {\n-  \/\/ Following assembly snippet is vectorized translation of Math.round(float) algorithm\n-  \/\/ for AVX2 target.\n-  vmovdqu(xtmp1, src);\n-  movl(scratch, 0x7F800000);\n-  movdl(xtmp2, scratch);\n-  vpbroadcastd(xtmp2, xtmp2, vec_enc);\n-  vpand(xtmp2, xtmp2, xtmp1, vec_enc);\n-  Assembler::vpsrad(xtmp2, xtmp2, 0x17, vec_enc);\n-  movl(scratch, 0x95);\n-  movdl(dst, scratch);\n-  vpbroadcastd(dst, dst, vec_enc);\n-  vpsubd(dst, dst, xtmp2, vec_enc);\n-  vmovdqu(xtmp3, dst);\n-  movl(scratch, 0xFFFFFFE0);\n-  movdl(xtmp2, scratch);\n-  vpbroadcastd(xtmp2, xtmp2, vec_enc);\n-  vpand(xtmp2, dst, xtmp2, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  Assembler::vpcmpeqd(xtmp5, xtmp2, dst, vec_enc);\n-  movl(scratch, 0x007FFFFF);\n-  movdl(xtmp2, scratch);\n-  vpbroadcastd(xtmp2, xtmp2, vec_enc);\n-  movl(scratch, 0x00800000);\n-  movdl(dst, scratch);\n-  vpbroadcastd(dst, dst, vec_enc);\n-  vpand(xtmp1, xtmp2, xtmp1, vec_enc);\n-  vpor(xtmp1, xtmp1, dst, vec_enc);\n-  vpxor(dst, dst, dst, vec_enc);\n-  vpcmpCCW(xtmp4, src, dst, xtmp2, Assembler::lt, Assembler::D, vec_enc);\n-  vpand(xtmp4, xtmp4, xtmp5, vec_enc);\n-  vpsubd(dst, dst, xtmp1, vec_enc);\n-  vblendvps(xtmp1, xtmp1, dst, xtmp4, vec_enc);\n-  vpsravd(xtmp1, xtmp1, xtmp3, vec_enc);\n-  movl(scratch, 0x1);\n-  movdl(xtmp4, scratch);\n-  vpbroadcastd(xtmp4, xtmp4, vec_enc);\n-  vpaddd(xtmp1, xtmp1, xtmp4, vec_enc);\n-  Assembler::vpsrad(xtmp3, xtmp1, 0x1, vec_enc);\n-  vcvtps2dq(dst, src, vec_enc);\n-  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp6, xtmp4, scratch, float_sign_flip, vec_enc);\n-  vblendvps(dst, dst, xtmp3, xtmp5, vec_enc);\n+                                               XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n+                                               AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n+  ldmxcsr(as_Address(new_mxcsr));\n+  movl(scratch, 1056964608);\n+  movq(xtmp1, scratch);\n+  vpbroadcastd(xtmp1, xtmp1, vec_enc);\n+  vaddps(xtmp1, src , xtmp1, vec_enc);\n+  vroundps(dst, xtmp1, 0x4, vec_enc);\n+  vcvtps2dq(dst, dst, vec_enc);\n+  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, scratch, float_sign_flip, vec_enc);\n+  ldmxcsr(as_Address(mxcsr_std));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":34,"deletions":113,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -327,3 +327,2 @@\n-                                XMMRegister xtmp3, KRegister ktmp1, KRegister ktmp2, KRegister ktmp3,\n-                                AddressLiteral double_sign_flip, Register scratch, int vec_enc);\n-\n+                                KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n+                                AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n@@ -332,2 +331,2 @@\n-                               XMMRegister xtmp3, KRegister ktmp1, KRegister ktmp2, KRegister ktmp3,\n-                               AddressLiteral float_sign_flip, Register scratch, int vec_enc);\n+                               KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n+                               AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n@@ -336,2 +335,2 @@\n-                              XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, XMMRegister xtmp6,\n-                              AddressLiteral float_sign_flip, Register scratch, int vec_enc);\n+                              XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n+                              AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -7232,1 +7232,1 @@\n-instruct vround_float_avx(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, vec xtmp5, vec xtmp6, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_avx(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, rRegP scratch, rFlagsReg cr) %{\n@@ -7237,2 +7237,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, TEMP xtmp5, TEMP xtmp6, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $xtmp4, $xtmp5 ,$xtmp6 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, TEMP scratch, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $xtmp4 and $scratch as TEMP\" %}\n@@ -7241,3 +7241,4 @@\n-    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n-                              $xtmp3$$XMMRegister, $xtmp4$$XMMRegister, $xtmp5$$XMMRegister, $xtmp6$$XMMRegister,\n-                              ExternalAddress(vector_float_signflip()), $scratch$$Register, vlen_enc);\n+    InternalAddress new_mxcsr = $constantaddress(0x3F80L);\n+    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+                              $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister,\n+                              ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n@@ -7248,1 +7249,1 @@\n-instruct vround_float_evex(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, kReg ktmp1, kReg ktmp2, kReg ktmp3,  rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n@@ -7253,2 +7254,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP ktmp1, TEMP ktmp2, TEMP ktmp3, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $ktmp1, $ktmp2, $ktmp3 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n@@ -7257,3 +7258,4 @@\n-    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n-                               $xtmp3$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister, $ktmp3$$KRegister,\n-                               ExternalAddress(vector_float_signflip()), $scratch$$Register, vlen_enc);\n+    InternalAddress new_mxcsr = $constantaddress(0x3F80L);\n+    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+                               $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n+                               ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n@@ -7264,1 +7266,1 @@\n-instruct vround_reg_evex(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, kReg ktmp1, kReg ktmp2, kReg ktmp3, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_reg_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n@@ -7267,2 +7269,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP ktmp1, TEMP ktmp2, TEMP ktmp3, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_long $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $ktmp1, $ktmp2, $ktmp3 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n+  format %{ \"vector_round_long $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n@@ -7271,2 +7273,4 @@\n-    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,                                                                         $xtmp3$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister, $ktmp3$$KRegister,\n-                                ExternalAddress(vector_double_signflip()), $scratch$$Register, vlen_enc);\n+    InternalAddress new_mxcsr = $constantaddress(0x3F80L);\n+    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+                                $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n+                                ExternalAddress(vector_double_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -971,2 +971,0 @@\n-      case Op_RoundVF: body_size += 100; break;\n-      case Op_RoundVD: body_size += 100; break;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}