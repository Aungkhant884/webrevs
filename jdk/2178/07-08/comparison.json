{"files":[{"patch":"@@ -4052,3 +4052,3 @@\n-      \/\/ suppress new-lines('\\n') in ss emitted by const_oop->print_oop()\n-      \/\/ so each node is one-liner for -XX:+Verbose && -XX:+PrintIdeal\n-      char* buf = ss.as_string(false);\n+      \/\/ 'const_oop->print_oop()' may emit newlines('\\n') into ss.\n+      \/\/ suppress newlines from it so -XX:+Verbose -XX:+PrintIdeal dumps one-liner for each node.\n+      char* buf = ss.as_string(\/* c_heap= *\/false);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-#include \"utilities\/stringUtils.hpp\"\n@@ -54,26 +53,0 @@\n-static size_t count_char(const char* s, size_t len, char ch) {\n-  size_t cnt = 0;\n-\n-  for (size_t i = 0; i < len; ++i) {\n-    if (s[i] == ch) {\n-      cnt++;\n-    }\n-  }\n-  return cnt;\n-}\n-\n-static size_t count_char(const stringStream* ss, char ch) {\n-  return count_char(ss->as_string(), ss->size(), ch);\n-}\n-\n-static void test_stringStream_tr_delete(stringStream* ss) {\n-  ResourceMark rm;\n-  size_t whitespaces = count_char(ss, ' ');\n-  char* s2 = ss->as_string(false);\n-  int deleted = StringUtils::replace_no_expand(s2, \" \", \"\");\n-  ASSERT_EQ(whitespaces, (size_t)deleted);\n-\n-  whitespaces = count_char(s2, strlen(s2), ' ');\n-  ASSERT_EQ(whitespaces, (size_t)0);\n-}\n-\n@@ -93,3 +66,0 @@\n-\n-  test_stringStream_tr_delete(ss);\n-\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":1,"deletions":31,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -34,0 +35,40 @@\n+\n+static size_t count_char(const char* s, size_t len, char ch) {\n+  size_t cnt = 0;\n+\n+  for (size_t i = 0; i < len; ++i) {\n+    if (s[i] == ch) {\n+      cnt++;\n+    }\n+  }\n+  return cnt;\n+}\n+\n+static size_t count_char(const stringStream& ss, char ch) {\n+  return count_char(ss.base(), ss.size(), ch);\n+}\n+\n+static const char* const lorem = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\\n\"            \\\n+                                 \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\"  \\\n+                                 \"Lacinia at quis risus sed vulputate odio ut enim blandit.\\n\"           \\\n+                                 \"Amet risus nullam eget felis eget.\\n\"                                  \\\n+                                 \"Viverra orci sagittis eu volutpat odio facilisis mauris sit.\\n\"        \\\n+                                 \"Erat velit scelerisque in dictum non.\\n\";\n+\n+\n+TEST_VM(StringUtils, replace_no_expand) {\n+  ResourceMark rm;\n+  stringStream ss;\n+\n+  ss.print_raw(lorem);\n+  size_t newlines = count_char(ss, '\\n');\n+  char* s2 = ss.as_string(false);\n+  int deleted = StringUtils::replace_no_expand(s2, \"\\n\", \"\");\n+  ASSERT_EQ(newlines, (size_t)deleted);\n+\n+  newlines = count_char(s2, strlen(s2), '\\n');\n+  ASSERT_EQ(newlines, (size_t)0);\n+\n+  deleted = StringUtils::replace_no_expand(s2, \"\\n\", \"\");\n+  ASSERT_EQ(deleted, 0);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}