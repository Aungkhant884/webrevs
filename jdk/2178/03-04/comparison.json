{"files":[{"patch":"@@ -43,0 +43,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -4046,0 +4047,1 @@\n+      st->print(\" \");\n@@ -4047,1 +4049,0 @@\n-      ss.print(\" \");\n@@ -4049,2 +4050,8 @@\n-      ss.tr_delete('\\n');\n-      st->print_raw(ss.as_string());\n+\n+      {\n+        ResourceMark rm;\n+        char* buf = os::strdup(ss.as_string());\n+        StringUtils::tr_delete(buf, \"\\n\");\n+        st->print_raw(buf);\n+        os::free(buf);\n+      }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -420,15 +420,0 @@\n-size_t stringStream::tr_delete(char ch) {\n-  size_t cnt = _written;\n-\n-  for (size_t i = 0; i < _written; ++i) {\n-    if (_buffer[i] == ch) {\n-      for (size_t j = i; j < _written - 1; ++j) {\n-        _buffer[j] = _buffer[j + 1];\n-      }\n-      _written--;\n-    }\n-  }\n-\n-  zero_terminate();\n-  return cnt - _written;\n-}\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,2 +222,0 @@\n-  \/\/ delete all appearances of ch\n-  size_t tr_delete(char ch);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,27 @@\n+int StringUtils::tr_delete(char* s, const char* charset) {\n+  if (s == nullptr || charset == nullptr)\n+    return 0;\n+\n+  size_t nums = strlen(charset);\n+  size_t len = strlen(s);\n+  int k = 0;\n+\n+  for (size_t i = 0; i < len; ++i) {\n+    bool matched = false;\n+\n+    for (size_t j = 0; j < nums; ++j) {\n+      if (s[i] == charset[j]) {\n+        matched = true;\n+        break;\n+      }\n+    }\n+\n+    if (!matched) {\n+      s[k++] = s[i];\n+    }\n+  }\n+\n+  s[k] = '\\0';\n+  return len - k;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,4 @@\n+  \/\/ Simulate tr --delete, which deletes all apperances of charset in the C-String s\n+  \/\/ Return the number of deleted characters.\n+  static int tr_delete(char* s, const char* charset);\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -53,1 +54,1 @@\n-static size_t count_char(const stringStream* ss, char ch) {\n+static size_t count_char(const char* s, size_t len, char ch) {\n@@ -56,2 +57,2 @@\n-  for (size_t i = 0; i < ss->size(); ++i) {\n-    if (ss->base()[i] == ch) {\n+  for (size_t i = 0; i < len; ++i) {\n+    if (s[i] == ch) {\n@@ -64,0 +65,4 @@\n+static size_t count_char(const stringStream* ss, char ch) {\n+  return count_char(ss->as_string(), ss->size(), ch);\n+}\n+\n@@ -65,0 +70,1 @@\n+  ResourceMark rm;\n@@ -66,1 +72,3 @@\n-  size_t deleted = ss->tr_delete(' ');\n+\n+  char* s2 = os::strdup(ss->as_string());\n+  size_t deleted = StringUtils::tr_delete(s2, \" \");\n@@ -69,1 +77,1 @@\n-  whitespaces = count_char(ss, ' ');\n+  whitespaces = count_char(s2, strlen(s2), ' ');\n@@ -71,0 +79,10 @@\n+\n+  StringUtils::tr_delete(s2, \"mno\");\n+  size_t t = count_char(s2, strlen(s2), 'm');\n+  ASSERT_EQ(t, (size_t)0);\n+  t = count_char(s2, strlen(s2), 'n');\n+  ASSERT_EQ(t, (size_t)0);\n+  t = count_char(s2, strlen(s2), 'o');\n+  ASSERT_EQ(t, (size_t)0);\n+\n+  os::free(s2);\n@@ -88,1 +106,0 @@\n-  test_stringStream_is_zero_terminated(ss);\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -34,0 +35,31 @@\n+\n+TEST_VM(StringUtils, tr_delete) {\n+  ResourceMark rm;\n+  const char* str = \"the quick brown fox jumps over the lazy dog.\";\n+  char* buf = os::strdup(str);\n+  int sz;\n+\n+  sz = StringUtils::tr_delete(buf, \" \\n.\");\n+  EXPECT_EQ(sz, 9);\n+  EXPECT_STREQ(buf, \"thequickbrownfoxjumpsoverthelazydog\");\n+\n+  sz = StringUtils::tr_delete(buf, \"\");\n+  EXPECT_EQ(sz, 0);\n+\n+  sz = StringUtils::tr_delete(NULL, NULL);\n+  EXPECT_EQ(sz, 0);\n+\n+  char buf2[4] = {'a', 'b', 'c', '\\0'};\n+  sz = StringUtils::tr_delete(buf2, \"efg\");\n+  EXPECT_EQ(sz, 0);\n+  EXPECT_STREQ(buf2, \"abc\");\n+\n+  sz = StringUtils::tr_delete(buf2, \"abc\");\n+  EXPECT_EQ(sz, 3);\n+  EXPECT_STREQ(buf2, \"\");\n+\n+  sz = StringUtils::tr_delete(buf2, \"abc\");\n+  EXPECT_EQ(sz, 0);\n+\n+  os::free(buf);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}