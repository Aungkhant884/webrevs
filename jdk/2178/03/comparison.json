{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -4039,1 +4039,1 @@\n-void TypeInstPtr::dump2( Dict &d, uint depth, outputStream *st ) const {\n+void TypeInstPtr::dump2( Dict &d, uint depth, outputStream* st ) const {\n@@ -4045,1 +4045,0 @@\n-    \/\/ TO DO: Make CI print the hex address of the underlying oop.\n@@ -4047,1 +4046,5 @@\n-      const_oop()->print_oop(st);\n+      stringStream ss;\n+      ss.print(\" \");\n+      const_oop()->print_oop(&ss);\n+      ss.tr_delete('\\n');\n+      st->print_raw(ss.as_string());\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -420,0 +420,15 @@\n+size_t stringStream::tr_delete(char ch) {\n+  size_t cnt = _written;\n+\n+  for (size_t i = 0; i < _written; ++i) {\n+    if (_buffer[i] == ch) {\n+      for (size_t j = i; j < _written - 1; ++j) {\n+        _buffer[j] = _buffer[j + 1];\n+      }\n+      _written--;\n+    }\n+  }\n+\n+  zero_terminate();\n+  return cnt - _written;\n+}\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,0 +222,2 @@\n+  \/\/ delete all appearances of ch\n+  size_t tr_delete(char ch);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,20 @@\n+static size_t count_char(const stringStream* ss, char ch) {\n+  size_t cnt = 0;\n+\n+  for (size_t i = 0; i < ss->size(); ++i) {\n+    if (ss->base()[i] == ch) {\n+      cnt++;\n+    }\n+  }\n+  return cnt;\n+}\n+\n+static void test_stringStream_tr_delete(stringStream* ss) {\n+  size_t whitespaces = count_char(ss, ' ');\n+  size_t deleted = ss->tr_delete(' ');\n+  ASSERT_EQ(whitespaces, deleted);\n+\n+  whitespaces = count_char(ss, ' ');\n+  ASSERT_EQ(whitespaces, (size_t)0);\n+}\n+\n@@ -66,0 +86,4 @@\n+\n+  test_stringStream_tr_delete(ss);\n+  test_stringStream_is_zero_terminated(ss);\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}