{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -4039,1 +4040,1 @@\n-void TypeInstPtr::dump2( Dict &d, uint depth, outputStream *st ) const {\n+void TypeInstPtr::dump2( Dict &d, uint depth, outputStream* st ) const {\n@@ -4045,1 +4046,0 @@\n-    \/\/ TO DO: Make CI print the hex address of the underlying oop.\n@@ -4047,1 +4047,11 @@\n-      const_oop()->print_oop(st);\n+      st->print(\" \");\n+      stringStream ss;\n+      const_oop()->print_oop(&ss);\n+\n+      {\n+        ResourceMark rm;\n+        char* buf = os::strdup(ss.as_string());\n+        StringUtils::tr_delete(buf, \"\\n\");\n+        st->print_raw(buf);\n+        os::free(buf);\n+      }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,27 @@\n+size_t StringUtils::tr_delete(char* s, const char* charset) {\n+  if (s == nullptr || charset == nullptr)\n+    return 0;\n+\n+  size_t nums = strlen(charset);\n+  size_t len = strlen(s);\n+  size_t k = 0;\n+\n+  for (size_t i = 0; i < len; ++i) {\n+    bool matched = false;\n+\n+    for (size_t j = 0; j < nums; ++j) {\n+      if (s[i] == charset[j]) {\n+        matched = true;\n+        break;\n+      }\n+    }\n+\n+    if (!matched) {\n+      s[k++] = s[i];\n+    }\n+  }\n+\n+  s[k] = '\\0';\n+  return len - k;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,4 @@\n+  \/\/ Simulate tr --delete, which deletes all apperances of charset in the C-String s\n+  \/\/ Return the number of deleted characters.\n+  static size_t tr_delete(char* s, const char* charset);\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -53,0 +54,37 @@\n+static size_t count_char(const char* s, size_t len, char ch) {\n+  size_t cnt = 0;\n+\n+  for (size_t i = 0; i < len; ++i) {\n+    if (s[i] == ch) {\n+      cnt++;\n+    }\n+  }\n+  return cnt;\n+}\n+\n+static size_t count_char(const stringStream* ss, char ch) {\n+  return count_char(ss->as_string(), ss->size(), ch);\n+}\n+\n+static void test_stringStream_tr_delete(stringStream* ss) {\n+  ResourceMark rm;\n+  size_t whitespaces = count_char(ss, ' ');\n+\n+  char* s2 = os::strdup(ss->as_string());\n+  size_t deleted = StringUtils::tr_delete(s2, \" \");\n+  ASSERT_EQ(whitespaces, deleted);\n+\n+  whitespaces = count_char(s2, strlen(s2), ' ');\n+  ASSERT_EQ(whitespaces, (size_t)0);\n+\n+  StringUtils::tr_delete(s2, \"mno\");\n+  size_t t = count_char(s2, strlen(s2), 'm');\n+  ASSERT_EQ(t, (size_t)0);\n+  t = count_char(s2, strlen(s2), 'n');\n+  ASSERT_EQ(t, (size_t)0);\n+  t = count_char(s2, strlen(s2), 'o');\n+  ASSERT_EQ(t, (size_t)0);\n+\n+  os::free(s2);\n+}\n+\n@@ -66,0 +104,3 @@\n+\n+  test_stringStream_tr_delete(ss);\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -34,0 +35,31 @@\n+\n+TEST_VM(StringUtils, tr_delete) {\n+  ResourceMark rm;\n+  const char* str = \"the quick brown fox jumps over the lazy dog.\";\n+  char* buf = os::strdup(str);\n+  size_t sz;\n+\n+  sz = StringUtils::tr_delete(buf, \" \\n.\");\n+  EXPECT_EQ(sz, (size_t)9);\n+  EXPECT_STREQ(buf, \"thequickbrownfoxjumpsoverthelazydog\");\n+\n+  sz = StringUtils::tr_delete(buf, \"\");\n+  EXPECT_EQ(sz, (size_t)0);\n+\n+  sz = StringUtils::tr_delete(NULL, NULL);\n+  EXPECT_EQ(sz, (size_t)0);\n+\n+  char buf2[4] = {'a', 'b', 'c', '\\0'};\n+  sz = StringUtils::tr_delete(buf2, \"efg\");\n+  EXPECT_EQ(sz, (size_t)0);\n+  EXPECT_STREQ(buf2, \"abc\");\n+\n+  sz = StringUtils::tr_delete(buf2, \"abc\");\n+  EXPECT_EQ(sz, (size_t)3);\n+  EXPECT_STREQ(buf2, \"\");\n+\n+  sz = StringUtils::tr_delete(buf2, \"abc\");\n+  EXPECT_EQ(sz, (size_t)0);\n+\n+  os::free(buf);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}