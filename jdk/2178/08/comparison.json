{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -4039,1 +4040,1 @@\n-void TypeInstPtr::dump2( Dict &d, uint depth, outputStream *st ) const {\n+void TypeInstPtr::dump2(Dict &d, uint depth, outputStream* st) const {\n@@ -4045,1 +4046,0 @@\n-    \/\/ TO DO: Make CI print the hex address of the underlying oop.\n@@ -4047,1 +4047,10 @@\n-      const_oop()->print_oop(st);\n+      ResourceMark rm;\n+      stringStream ss;\n+\n+      st->print(\" \");\n+      const_oop()->print_oop(&ss);\n+      \/\/ 'const_oop->print_oop()' may emit newlines('\\n') into ss.\n+      \/\/ suppress newlines from it so -XX:+Verbose -XX:+PrintIdeal dumps one-liner for each node.\n+      char* buf = ss.as_string(\/* c_heap= *\/false);\n+      StringUtils::replace_no_expand(buf, \"\\n\", \"\");\n+      st->print_raw(buf);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -34,0 +35,40 @@\n+\n+static size_t count_char(const char* s, size_t len, char ch) {\n+  size_t cnt = 0;\n+\n+  for (size_t i = 0; i < len; ++i) {\n+    if (s[i] == ch) {\n+      cnt++;\n+    }\n+  }\n+  return cnt;\n+}\n+\n+static size_t count_char(const stringStream& ss, char ch) {\n+  return count_char(ss.base(), ss.size(), ch);\n+}\n+\n+static const char* const lorem = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\\n\"            \\\n+                                 \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\"  \\\n+                                 \"Lacinia at quis risus sed vulputate odio ut enim blandit.\\n\"           \\\n+                                 \"Amet risus nullam eget felis eget.\\n\"                                  \\\n+                                 \"Viverra orci sagittis eu volutpat odio facilisis mauris sit.\\n\"        \\\n+                                 \"Erat velit scelerisque in dictum non.\\n\";\n+\n+\n+TEST_VM(StringUtils, replace_no_expand) {\n+  ResourceMark rm;\n+  stringStream ss;\n+\n+  ss.print_raw(lorem);\n+  size_t newlines = count_char(ss, '\\n');\n+  char* s2 = ss.as_string(false);\n+  int deleted = StringUtils::replace_no_expand(s2, \"\\n\", \"\");\n+  ASSERT_EQ(newlines, (size_t)deleted);\n+\n+  newlines = count_char(s2, strlen(s2), '\\n');\n+  ASSERT_EQ(newlines, (size_t)0);\n+\n+  deleted = StringUtils::replace_no_expand(s2, \"\\n\", \"\");\n+  ASSERT_EQ(deleted, 0);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}