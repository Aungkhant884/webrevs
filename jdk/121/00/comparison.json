{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.awt.Rectangle;\n@@ -43,0 +44,1 @@\n+\n@@ -52,2 +54,0 @@\n-import sun.java2d.loops.TransformHelper;\n-import sun.java2d.loops.MaskBlit;\n@@ -55,0 +55,1 @@\n+import sun.java2d.loops.MaskBlit;\n@@ -57,0 +58,1 @@\n+import sun.java2d.loops.TransformHelper;\n@@ -581,4 +583,1 @@\n-                SurfaceType srcType = srcData.getSurfaceType();\n-                SurfaceType dstType = dstData.getSurfaceType();\n-                blitSurfaceData(sg, clip,\n-                                srcData, dstData, srcType, dstType,\n+                blitSurfaceData(sg, clip, srcData, dstData,\n@@ -927,9 +926,5 @@\n-    protected void blitSurfaceData(SunGraphics2D sg,\n-                                   Region clipRegion,\n-                                   SurfaceData srcData,\n-                                   SurfaceData dstData,\n-                                   SurfaceType srcType,\n-                                   SurfaceType dstType,\n-                                   int sx, int sy, int dx, int dy,\n-                                   int w, int h,\n-                                   Color bgColor)\n+    private static void blitSurfaceData(SunGraphics2D sg, Region clip,\n+                                        SurfaceData srcData,\n+                                        SurfaceData dstData,\n+                                        int sx, int sy, int dx, int dy,\n+                                        int w, int h, Color bgColor)\n@@ -937,19 +932,0 @@\n-        if (w <= 0 || h <= 0) {\n-            \/*\n-             * Fix for bugid 4783274 - BlitBg throws an exception for\n-             * a particular set of anomalous parameters.\n-             * REMIND: The native loops do proper clipping and would\n-             * detect this situation themselves, but the Java loops\n-             * all seem to trust their parameters a little too well\n-             * to the point where they will try to process a negative\n-             * area of pixels and throw exceptions.  The real fix is\n-             * to modify the Java loops to do proper clipping so that\n-             * they can deal with negative dimensions as well as\n-             * improperly large dimensions, but that fix is too risky\n-             * to integrate for Mantis at this point.  In the meantime\n-             * eliminating the negative or zero dimensions here is\n-             * \"correct\" and saves them from some nasty exceptional\n-             * conditions, one of which is the test case of 4783274.\n-             *\/\n-            return;\n-        }\n@@ -970,0 +946,38 @@\n+        \/\/ The next optimization should be used by all our pipelines but for now\n+        \/\/ some of the native pipelines \"ogl\", \"d3d\", \"gdi\", \"xrender\" relies to\n+        \/\/ much on the native driver, which does not apply it automatically.\n+        \/\/ At some point, we should remove it from here, since it affects the\n+        \/\/ performance of the software loops, and move to the appropriate place.\n+        Rectangle dst =\n+                new Rectangle(dx, dy, w, h).intersection(dstData.getBounds());\n+        if (dst.isEmpty()) {\n+            \/\/ The check above also includes:\n+            \/\/ if (w <= 0 || h <= 0) {\n+                \/*\n+                 * Fix for bugid 4783274 - BlitBg throws an exception for\n+                 * a particular set of anomalous parameters.\n+                 * REMIND: The native loops do proper clipping and would\n+                 * detect this situation themselves, but the Java loops\n+                 * all seem to trust their parameters a little too well\n+                 * to the point where they will try to process a negative\n+                 * area of pixels and throw exceptions.  The real fix is\n+                 * to modify the Java loops to do proper clipping so that\n+                 * they can deal with negative dimensions as well as\n+                 * improperly large dimensions, but that fix is too risky\n+                 * to integrate for Mantis at this point.  In the meantime\n+                 * eliminating the negative or zero dimensions here is\n+                 * \"correct\" and saves them from some nasty exceptional\n+                 * conditions, one of which is the test case of 4783274.\n+                 *\/\n+                \/\/ return;\n+            \/\/ }\n+            return;\n+        }\n+        \/\/ Adjust final src(x,y) based on the dst. The logic is that, when dst\n+        \/\/ limits drawing on the destination, corresponding pixels from the src\n+        \/\/ should be skipped.\n+        sx += dst.x - dx;\n+        sy += dst.y - dy;\n+\n+        SurfaceType srcType = srcData.getSurfaceType();\n+        SurfaceType dstType = dstData.getSurfaceType();\n@@ -972,2 +986,2 @@\n-            blit.Blit(srcData, dstData, sg.composite, clipRegion,\n-                      sx, sy, dx, dy, w, h);\n+            blit.Blit(srcData, dstData, sg.composite, clip,\n+                      sx, sy, dst.x, dst.y, dst.width, dst.height);\n@@ -976,2 +990,2 @@\n-            blit.BlitBg(srcData, dstData, sg.composite, clipRegion,\n-                        bgColor.getRGB(), sx, sy, dx, dy, w, h);\n+            blit.BlitBg(srcData, dstData, sg.composite, clip, bgColor.getRGB(),\n+                        sx, sy, dst.x, dst.y, dst.width, dst.height);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/DrawImage.java","additions":53,"deletions":39,"binary":false,"changes":92,"status":"modified"}]}