{"files":[{"patch":"@@ -1430,1 +1430,1 @@\n-Klass* InstanceKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* InstanceKlass::array_klass(int n, TRAPS) {\n@@ -1433,2 +1433,0 @@\n-    if (or_null) return NULL;\n-\n@@ -1449,1 +1447,1 @@\n-  \/\/ _this will always be set at this point\n+  \/\/ array_klasses() will always be set at this point\n@@ -1451,1 +1449,9 @@\n-  if (or_null) {\n+  return oak->array_klass(n, THREAD);\n+}\n+\n+Klass* InstanceKlass::array_klass_or_null(int n) {\n+  \/\/ Need load-acquire for lock-free read\n+  ObjArrayKlass* oak = array_klasses_acquire();\n+  if (oak == NULL) {\n+    return NULL;\n+  } else {\n@@ -1454,1 +1460,0 @@\n-  return oak->array_klass(n, THREAD);\n@@ -1457,2 +1462,6 @@\n-Klass* InstanceKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, 1, THREAD);\n+Klass* InstanceKlass::array_klass(TRAPS) {\n+  return array_klass(1, THREAD);\n+}\n+\n+Klass* InstanceKlass::array_klass_or_null() {\n+  return array_klass_or_null(1);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1203,0 +1203,9 @@\n+\n+  \/\/ Returns the array class for the n'th dimension\n+  virtual Klass* array_klass(int n, TRAPS);\n+  virtual Klass* array_klass_or_null(int n);\n+\n+  \/\/ Returns the array class with this class as element type\n+  virtual Klass* array_klass(TRAPS);\n+  virtual Klass* array_klass_or_null();\n+\n@@ -1214,6 +1223,0 @@\n-  \/\/ Returns the array class for the n'th dimension\n-  Klass* array_klass_impl(bool or_null, int n, TRAPS);\n-\n-  \/\/ Returns the array class with this class as element type\n-  Klass* array_klass_impl(bool or_null, TRAPS);\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -647,27 +647,0 @@\n-Klass* Klass::array_klass_or_null(int rank) {\n-  EXCEPTION_MARK;\n-  \/\/ No exception can be thrown by array_klass_impl when called with or_null == true.\n-  \/\/ (In anycase, the execption mark will fail if it do so)\n-  return array_klass_impl(true, rank, THREAD);\n-}\n-\n-\n-Klass* Klass::array_klass_or_null() {\n-  EXCEPTION_MARK;\n-  \/\/ No exception can be thrown by array_klass_impl when called with or_null == true.\n-  \/\/ (In anycase, the execption mark will fail if it do so)\n-  return array_klass_impl(true, THREAD);\n-}\n-\n-\n-Klass* Klass::array_klass_impl(bool or_null, int rank, TRAPS) {\n-  fatal(\"array_klass should be dispatched to InstanceKlass, ObjArrayKlass or TypeArrayKlass\");\n-  return NULL;\n-}\n-\n-\n-Klass* Klass::array_klass_impl(bool or_null, TRAPS) {\n-  fatal(\"array_klass should be dispatched to InstanceKlass, ObjArrayKlass or TypeArrayKlass\");\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-  Klass* array_klass(int rank, TRAPS)         {  return array_klass_impl(false, rank, THREAD); }\n+  virtual Klass* array_klass(int rank, TRAPS) = 0;\n@@ -509,1 +509,1 @@\n-  Klass* array_klass(TRAPS)                   {  return array_klass_impl(false, THREAD); }\n+  virtual Klass* array_klass(TRAPS) = 0;\n@@ -512,3 +512,2 @@\n-  \/\/ NB: these can block for a mutex, like other functions with TRAPS arg.\n-  Klass* array_klass_or_null(int rank);\n-  Klass* array_klass_or_null();\n+  virtual Klass* array_klass_or_null(int rank) = 0;\n+  virtual Klass* array_klass_or_null() = 0;\n@@ -523,2 +522,0 @@\n-  virtual Klass* array_klass_impl(bool or_null, int rank, TRAPS);\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-Klass* ObjArrayKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* ObjArrayKlass::array_klass(int n, TRAPS) {\n@@ -321,1 +321,0 @@\n-    if (or_null) return NULL;\n@@ -344,3 +343,0 @@\n-  if (or_null) {\n-    return ak->array_klass_or_null(n);\n-  }\n@@ -351,2 +347,21 @@\n-Klass* ObjArrayKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, dimension() +  1, THREAD);\n+Klass* ObjArrayKlass::array_klass_or_null(int n) {\n+\n+  assert(dimension() <= n, \"check order of chain\");\n+  int dim = dimension();\n+  if (dim == n) return this;\n+\n+  \/\/ lock-free read needs acquire semantics\n+  if (higher_dimension_acquire() == NULL) {\n+    return NULL;\n+  }\n+\n+  ObjArrayKlass *ak = ObjArrayKlass::cast(higher_dimension());\n+  return ak->array_klass_or_null(n);\n+}\n+\n+Klass* ObjArrayKlass::array_klass(TRAPS) {\n+  return array_klass(dimension() +  1, THREAD);\n+}\n+\n+Klass* ObjArrayKlass::array_klass_or_null() {\n+  return array_klass_or_null(dimension() +  1);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n- protected:\n+ public:\n@@ -100,1 +100,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, int n, TRAPS);\n+  virtual Klass* array_klass(int n, TRAPS);\n+  virtual Klass* array_klass_or_null(int n);\n@@ -103,3 +104,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n-\n- public:\n+  virtual Klass* array_klass(TRAPS);\n+  virtual Klass* array_klass_or_null();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-Klass* TypeArrayKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* TypeArrayKlass::array_klass(int n, TRAPS) {\n@@ -182,1 +182,0 @@\n-    if (or_null)  return NULL;\n@@ -203,3 +202,0 @@\n-  if (or_null) {\n-    return h_ak->array_klass_or_null(n);\n-  }\n@@ -210,2 +206,22 @@\n-Klass* TypeArrayKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, dimension() +  1, THREAD);\n+\/\/ return existing klass of array holding typeArrays\n+Klass* TypeArrayKlass::array_klass_or_null(int n) {\n+  int dim = dimension();\n+  assert(dim <= n, \"check order of chain\");\n+    if (dim == n)\n+      return this;\n+\n+  \/\/ lock-free read needs acquire semantics\n+  if (higher_dimension_acquire() == NULL) {\n+    return NULL;\n+  }\n+\n+  ObjArrayKlass* h_ak = ObjArrayKlass::cast(higher_dimension());\n+  return h_ak->array_klass_or_null(n);\n+}\n+\n+Klass* TypeArrayKlass::array_klass(TRAPS) {\n+  return array_klass(dimension() +  1, THREAD);\n+}\n+\n+Klass* TypeArrayKlass::array_klass_or_null() {\n+  return array_klass_or_null(dimension() +  1);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n- protected:\n+ public:\n@@ -98,1 +98,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, int n, TRAPS);\n+  virtual Klass* array_klass(int n, TRAPS);\n+  virtual Klass* array_klass_or_null(int n);\n@@ -101,1 +102,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n+  virtual Klass* array_klass(TRAPS);\n+  virtual Klass* array_klass_or_null();\n@@ -103,1 +105,0 @@\n- public:\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}