{"files":[{"patch":"@@ -1430,1 +1430,1 @@\n-Klass* InstanceKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* InstanceKlass::array_klass_impl(int n, TRAPS) {\n@@ -1433,2 +1433,0 @@\n-    if (or_null) return NULL;\n-\n@@ -1451,3 +1449,0 @@\n-  if (or_null) {\n-    return oak->array_klass_or_null(n);\n-  }\n@@ -1457,2 +1452,16 @@\n-Klass* InstanceKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, 1, THREAD);\n+Klass* InstanceKlass::array_klass_or_null_impl(int n) {\n+  \/\/ Need load-acquire for lock-free read\n+  if (array_klasses_acquire() == NULL) {\n+    return NULL;\n+  }\n+  \/\/ _this will always be set at this point\n+  ObjArrayKlass* oak = array_klasses();\n+  return oak->array_klass_or_null(n);\n+}\n+\n+Klass* InstanceKlass::array_klass_impl(TRAPS) {\n+  return array_klass_impl(1, THREAD);\n+}\n+\n+Klass* InstanceKlass::array_klass_or_null_impl() {\n+  return array_klass_or_null_impl(1);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1215,1 +1215,2 @@\n-  Klass* array_klass_impl(bool or_null, int n, TRAPS);\n+  Klass* array_klass_impl(int n, TRAPS);\n+  Klass* array_klass_or_null_impl(int n);\n@@ -1218,1 +1219,2 @@\n-  Klass* array_klass_impl(bool or_null, TRAPS);\n+  Klass* array_klass_impl(TRAPS);\n+  Klass* array_klass_or_null_impl();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -648,4 +648,1 @@\n-  EXCEPTION_MARK;\n-  \/\/ No exception can be thrown by array_klass_impl when called with or_null == true.\n-  \/\/ (In anycase, the execption mark will fail if it do so)\n-  return array_klass_impl(true, rank, THREAD);\n+  return array_klass_or_null_impl(rank);\n@@ -654,1 +651,0 @@\n-\n@@ -656,4 +652,1 @@\n-  EXCEPTION_MARK;\n-  \/\/ No exception can be thrown by array_klass_impl when called with or_null == true.\n-  \/\/ (In anycase, the execption mark will fail if it do so)\n-  return array_klass_impl(true, THREAD);\n+  return array_klass_or_null_impl();\n@@ -662,0 +655,4 @@\n+Klass* Klass::array_klass_impl(int rank, TRAPS) {\n+  fatal(\"array_klass should be dispatched to InstanceKlass, ObjArrayKlass or TypeArrayKlass\");\n+  return NULL;\n+}\n@@ -663,1 +660,1 @@\n-Klass* Klass::array_klass_impl(bool or_null, int rank, TRAPS) {\n+Klass* Klass::array_klass_impl(TRAPS) {\n@@ -668,0 +665,4 @@\n+Klass* Klass::array_klass_or_null_impl(int rank) {\n+  fatal(\"array_klass should be dispatched to InstanceKlass, ObjArrayKlass or TypeArrayKlass\");\n+  return NULL;\n+}\n@@ -669,1 +670,1 @@\n-Klass* Klass::array_klass_impl(bool or_null, TRAPS) {\n+Klass* Klass::array_klass_or_null_impl() {\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-  Klass* array_klass(int rank, TRAPS)         {  return array_klass_impl(false, rank, THREAD); }\n+  Klass* array_klass(int rank, TRAPS)         {  return array_klass_impl(rank, THREAD); }\n@@ -509,1 +509,1 @@\n-  Klass* array_klass(TRAPS)                   {  return array_klass_impl(false, THREAD); }\n+  Klass* array_klass(TRAPS)                   {  return array_klass_impl(THREAD); }\n@@ -512,1 +512,0 @@\n-  \/\/ NB: these can block for a mutex, like other functions with TRAPS arg.\n@@ -523,2 +522,4 @@\n-  virtual Klass* array_klass_impl(bool or_null, int rank, TRAPS);\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n+  virtual Klass* array_klass_impl(int rank, TRAPS);\n+  virtual Klass* array_klass_impl(TRAPS);\n+  virtual Klass* array_klass_or_null_impl(int rank);\n+  virtual Klass* array_klass_or_null_impl();\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-Klass* ObjArrayKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* ObjArrayKlass::array_klass_impl(int n, TRAPS) {\n@@ -321,1 +321,0 @@\n-    if (or_null) return NULL;\n@@ -344,3 +343,0 @@\n-  if (or_null) {\n-    return ak->array_klass_or_null(n);\n-  }\n@@ -351,2 +347,21 @@\n-Klass* ObjArrayKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, dimension() +  1, THREAD);\n+Klass* ObjArrayKlass::array_klass_or_null_impl(int n) {\n+\n+  assert(dimension() <= n, \"check order of chain\");\n+  int dim = dimension();\n+  if (dim == n) return this;\n+\n+  \/\/ lock-free read needs acquire semantics\n+  if (higher_dimension_acquire() == NULL) {\n+    return NULL;\n+  }\n+\n+  ObjArrayKlass *ak = ObjArrayKlass::cast(higher_dimension());\n+  return ak->array_klass_or_null(n);\n+}\n+\n+Klass* ObjArrayKlass::array_klass_impl(TRAPS) {\n+  return array_klass_impl(dimension() +  1, THREAD);\n+}\n+\n+Klass* ObjArrayKlass::array_klass_or_null_impl() {\n+  return array_klass_or_null_impl(dimension() +  1);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -100,1 +100,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, int n, TRAPS);\n+  virtual Klass* array_klass_impl(int n, TRAPS);\n+  virtual Klass* array_klass_or_null_impl(int n);\n@@ -103,1 +104,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n+  virtual Klass* array_klass_impl(TRAPS);\n+  virtual Klass* array_klass_or_null_impl();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-Klass* TypeArrayKlass::array_klass_impl(bool or_null, int n, TRAPS) {\n+Klass* TypeArrayKlass::array_klass_impl(int n, TRAPS) {\n@@ -182,1 +182,0 @@\n-    if (or_null)  return NULL;\n@@ -203,3 +202,0 @@\n-  if (or_null) {\n-    return h_ak->array_klass_or_null(n);\n-  }\n@@ -210,2 +206,22 @@\n-Klass* TypeArrayKlass::array_klass_impl(bool or_null, TRAPS) {\n-  return array_klass_impl(or_null, dimension() +  1, THREAD);\n+\/\/ return existing klass of array holding typeArrays\n+Klass* TypeArrayKlass::array_klass_or_null_impl(int n) {\n+  int dim = dimension();\n+  assert(dim <= n, \"check order of chain\");\n+    if (dim == n)\n+      return this;\n+\n+  \/\/ lock-free read needs acquire semantics\n+  if (higher_dimension_acquire() == NULL) {\n+    return NULL;\n+  }\n+\n+  ObjArrayKlass* h_ak = ObjArrayKlass::cast(higher_dimension());\n+  return h_ak->array_klass_or_null(n);\n+}\n+\n+Klass* TypeArrayKlass::array_klass_impl(TRAPS) {\n+  return array_klass_impl(dimension() +  1, THREAD);\n+}\n+\n+Klass* TypeArrayKlass::array_klass_or_null_impl() {\n+  return array_klass_or_null_impl(dimension() +  1);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -98,1 +98,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, int n, TRAPS);\n+  virtual Klass* array_klass_impl(int n, TRAPS);\n+  virtual Klass* array_klass_or_null_impl(int n);\n@@ -101,1 +102,2 @@\n-  virtual Klass* array_klass_impl(bool or_null, TRAPS);\n+  virtual Klass* array_klass_impl(TRAPS);\n+  virtual Klass* array_klass_or_null_impl();\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}