{"files":[{"patch":"@@ -45,25 +45,0 @@\n- * @implNote\n- * The JDK implementation of {@link org.w3c.dom.ls.LSSerializer LSSerializer}\n- * follows the <a href=\"https:\/\/www.w3.org\/TR\/xml\/#charsets\">Characters<\/a> section\n- * of the XML Specification in handling characters output. In particular, the\n- * specification defined a character range that excluded the surrogate blocks.\n- * As a result, the JDK LSSerializer writes characters in the surrogate blocks\n- * as Character References. Character {@code 0xf0 0x9f 0x9a 0xa9}\n- * (Unicode code point U+1F6A9) for example will be written as {@code &#128681;}.\n- *\n- * <p>\n- * This behavior is different from what was in the class description of\n- * {@link org.w3c.dom.ls.LSSerializer LSSerializer}. The relevant section is quoted\n- * below:\n- *\n- * <p>\n- * {@code Within the character data of a document (outside of markup), any characters\n- * that cannot be represented directly are replaced with character references...\n- * Any characters that cannot be represented directly in the output character encoding\n- * are serialized as numeric character references }\n- *\n- * <p>\n- * The JDK implementation does not follow this definition because it is not consistent\n- * with the XML Specification that defined an explicit character range with no\n- * association to the setting of the output character encoding.\n- *\n","filename":"src\/java.xml\/share\/classes\/org\/w3c\/dom\/package-info.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"}]}