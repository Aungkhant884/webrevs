{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Arrays;\n@@ -210,1 +211,1 @@\n-    private transient String cname;\n+    private transient String[] cnames;\n@@ -460,1 +461,1 @@\n-                cname = \"\";\n+                cnames = new String[]{\"\"};\n@@ -462,1 +463,1 @@\n-                cname = host.substring(1).toLowerCase();\n+                cnames = new String[]{host.substring(1).toLowerCase()};\n@@ -627,1 +628,1 @@\n-                if (this.cname == null) {\n+                if (this.cnames == null) {\n@@ -630,1 +631,1 @@\n-                if (!match(cname, hostname)) {\n+                if (!matchArr(cnames, hostname)) {\n@@ -636,1 +637,1 @@\n-                            debug.println(\"socket access restriction: proxied host \" + \"(\" + addresses[0] + \")\" + \" does not match \" + cname + \" from reverse lookup\");\n+                            debug.println(\"socket access restriction: proxied host \" + \"(\" + addresses[0] + \")\" + \" does not match \" + cnames[0] + \" from reverse lookup\");\n@@ -654,5 +655,4 @@\n-    void getCanonName()\n-        throws UnknownHostException\n-    {\n-        if (cname != null || invalid || untrusted) return;\n-\n+     void getCanonName() throws UnknownHostException {\n+         if (cnames != null || invalid || untrusted) {\n+            return;\n+         }\n@@ -660,1 +660,0 @@\n-\n@@ -662,7 +661,0 @@\n-            \/\/ first get the IP addresses if we don't have them yet\n-            \/\/ this is because we need the IP address to then get\n-            \/\/ FQDN.\n-            if (addresses == null) {\n-                getIP();\n-            }\n-\n@@ -672,1 +664,1 @@\n-                cname = addresses[0].getHostName(false).toLowerCase();\n+                    cnames = new String[]{addresses[0].getHostName(false).toLowerCase()};\n@@ -674,2 +666,6 @@\n-             cname = InetAddress.getByName(addresses[0].getHostAddress()).\n-                                              getHostName(false).toLowerCase();\n+               cnames = new String[addresses.length];\n+                int index = 0;\n+                for (InetAddress inAdd : addresses) {\n+                    cnames[index++] = InetAddress.getByName(inAdd.getHostAddress()).\n+                            getHostName(false).toLowerCase();\n+                }\n@@ -697,0 +693,9 @@\n+    private boolean matchArr(String[] cnames, String hname){\n+        for(String cname: cnames){\n+            if(match(cname, hname)){\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -813,2 +818,1 @@\n-            addresses =\n-                new InetAddress[] {InetAddress.getAllByName0(host, false)[0]};\n+            addresses = InetAddress.getAllByName0(host, false);\n@@ -921,1 +925,1 @@\n-        if (this.wildcard && \"\".equals(this.cname))\n+        if (this.wildcard && \"\".equals(this.cnames[0]))\n@@ -956,1 +960,1 @@\n-                    return (that.cname.endsWith(this.cname));\n+                    return (that.cnames[0].endsWith(this.cnames[0]));\n@@ -962,1 +966,1 @@\n-                \/\/ this is a wildcard, lets see if that's cname ends with\n+                \/\/ this is a wildcard, lets see if that's cnames ends with\n@@ -964,1 +968,1 @@\n-                if (that.cname == null) {\n+                if (that.cnames == null) {\n@@ -967,1 +971,1 @@\n-                return (that.cname.endsWith(this.cname));\n+                return (that.cnames[0].endsWith(this.cnames[0]));\n@@ -989,1 +993,1 @@\n-                if (this.cname == null) {\n+                if (this.cnames == null) {\n@@ -993,1 +997,1 @@\n-                if (that.cname == null) {\n+                if (that.cnames == null) {\n@@ -997,1 +1001,1 @@\n-                return (this.cname.equalsIgnoreCase(that.cname));\n+                return (this.cnames[0].equalsIgnoreCase(that.cnames[0]));\n@@ -1019,1 +1023,1 @@\n-            final int cnameLength = this.cname.length();\n+            final int cnameLength = this.cnames[0].length();\n@@ -1022,1 +1026,1 @@\n-                                          this.cname, 0, cnameLength);\n+                                          this.cnames[0], 0, cnameLength);\n@@ -1086,2 +1090,2 @@\n-        if (this.cname != null) {\n-            return this.cname.equalsIgnoreCase(that.cname);\n+        if (this.cnames != null) {\n+            return this.cnames[0].equalsIgnoreCase(that.cnames[0]);\n@@ -1117,1 +1121,1 @@\n-        if (invalid || cname == null)\n+        if (invalid || cnames == null)\n@@ -1120,1 +1124,1 @@\n-            return this.cname.hashCode();\n+            return this.cnames[0].hashCode();\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":42,"deletions":38,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+1.2.3.2 www.exmp.com\n+1.2.3.6 www.exmp.com\n","filename":"test\/jdk\/java\/net\/SocketPermission\/Host.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * @test\n+ * @bug 8243376\n+ * @summary SocketPermission implies(Permission p) spec allows, If the object was initialized with a single IP address and one of p's IP addresses is equal to this object's IP addr\n+ * @run java -Dsun.net.inetaddr.ttl=0 SocketPermissionIm\n+ *\/\n+\n+import java.net.SocketPermission;\n+import java.net.InetAddress;\n+import java.io.*;\n+\n+public class SocketPermissionIm {\n+           public static void main(String[] args) throws Exception {\n+             String hostname = \"www.exmp.com\";\n+             String hostsFileName = System.getProperty(\"test.src\", \".\") + File.separator + \"Host.txt\";\n+             System.setProperty(\"jdk.net.hosts.file\", hostsFileName);\n+\n+             int testPass = 0;\n+             SocketPermission sp = new SocketPermission(hostname, \"connect,resolve\");\n+\n+             do{\n+                    if (!sp.implies(new SocketPermission(hostname, \"connect,resolve\"))) {\n+                              System.out.println(\"Expected true, returned false\");\n+                              break;\n+                     }\n+                     addIpToHostsFile(hostname, \"1.2.3.\"+testPass, hostsFileName);\n+                     Thread.sleep(1000);\n+                testPass++;\n+               }while(testPass <= 2);\n+    }\n+\n+    private  static void addIpToHostsFile(String host, String addr, String hostsFileName)\n+                                                                      throws Exception {\n+       String mapping = addr + \" \" + host;\n+       RandomAccessFile f = new RandomAccessFile(new File(hostsFileName), \"rw\");\n+       f.seek(0);\n+       f.write(mapping.getBytes());\n+       f.close();\n+     }\n+}\n","filename":"test\/jdk\/java\/net\/SocketPermission\/SocketPermissionIm.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}