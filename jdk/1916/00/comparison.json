{"files":[{"patch":"@@ -654,5 +654,4 @@\n-    void getCanonName()\n-        throws UnknownHostException\n-    {\n-        if (cname != null || invalid || untrusted) return;\n-\n+     void getCanonName() throws UnknownHostException {\n+         if (invalid || untrusted) {\n+            return;\n+         }\n@@ -660,1 +659,0 @@\n-\n@@ -662,7 +660,0 @@\n-            \/\/ first get the IP addresses if we don't have them yet\n-            \/\/ this is because we need the IP address to then get\n-            \/\/ FQDN.\n-            if (addresses == null) {\n-                getIP();\n-            }\n-\n@@ -672,1 +663,3 @@\n-                cname = addresses[0].getHostName(false).toLowerCase();\n+                if (cname == null) {\n+                    cname = addresses[0].getHostName(false).toLowerCase();\n+                }\n@@ -674,2 +667,5 @@\n-             cname = InetAddress.getByName(addresses[0].getHostAddress()).\n-                                              getHostName(false).toLowerCase();\n+               \/\/ Always calls getIP(), this will make sure that if order of IP\n+               \/\/ addresses changed then cname also get's change.\n+                 getIP();\n+                 cname = InetAddress.getByName(addresses[0].getHostAddress()).\n+                               getHostName(false).toLowerCase();\n@@ -813,2 +809,1 @@\n-            addresses =\n-                new InetAddress[] {InetAddress.getAllByName0(host, false)[0]};\n+            addresses = InetAddress.getAllByName0(host, false);\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+1.2.3.2 www.exmp.com\n+1.2.3.6 www.exmp.com\n","filename":"test\/jdk\/java\/net\/SocketPermission\/Host.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * @test\n+ * @bug 8243376\n+ * @summary SocketPermission implies(Permission p) spec allows, If the object was initialized with a single IP address and one of p's IP addresses is equal to this object's IP addr\n+ * @run java -Dsun.net.inetaddr.ttl=0 SocketPermissionIm\n+ *\/\n+\n+import java.net.SocketPermission;\n+import java.net.InetAddress;\n+import java.io.*;\n+\n+public class SocketPermissionIm {\n+           public static void main(String[] args) throws Exception {\n+             String hostname = \"www.exmp.com\";\n+             String hostsFileName = System.getProperty(\"test.src\", \".\") + \"\/Host.txt\";\n+             System.setProperty(\"jdk.net.hosts.file\", hostsFileName);\n+\n+             int testPass = 0;\n+             SocketPermission sp = new SocketPermission(hostname, \"connect,resolve\");\n+\n+             do{\n+                    if (!sp.implies(new SocketPermission(hostname, \"connect,resolve\"))) {\n+                              System.out.println(\"Expected true, returned false\");\n+                              System.exit(0);\n+                     }\n+                     addIpToHostsFile(hostname, \"1.2.3.\"+testPass, hostsFileName);\n+                     Thread.sleep(1000);\n+                testPass++;\n+               }while(testPass <= 2);\n+    }\n+\n+    private  static void addIpToHostsFile(String host, String addr, String hostsFileName)\n+                                                                      throws Exception {\n+       String mapping = addr + \" \" + host;\n+       RandomAccessFile f = new RandomAccessFile(new File(hostsFileName), \"rw\");\n+       f.seek(0);\n+       f.write(mapping.getBytes());\n+       f.close();\n+     }\n+}\n","filename":"test\/jdk\/java\/net\/SocketPermission\/SocketPermissionIm.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}