{"files":[{"patch":"@@ -945,1 +945,1 @@\n-     * @return  The mapped byte buffer\n+     * @return The mapped byte buffer\n@@ -1000,5 +1000,5 @@\n-     * @param mode\n-     *        The file mapping mode, see\n-     *        {@link FileChannel#map(FileChannel.MapMode, long, long)};\n-     *        the mapping mode might affect the behavior of the returned memory\n-     *        mapped segment (see {@link MemorySegment#force()}).\n+     * @param   mode\n+     *          The file mapping mode, see\n+     *          {@link FileChannel#map(FileChannel.MapMode, long, long)};\n+     *          the mapping mode might affect the behavior of the returned\n+     *          memory mapped segment (see {@link MemorySegment#force()}).\n@@ -1006,3 +1006,3 @@\n-     * @param offset\n-     *        The offset (expressed in bytes) within the file at which the\n-     *        mapped segment is to start.\n+     * @param   offset\n+     *          The offset (expressed in bytes) within the file at which the\n+     *          mapped segment is to start.\n@@ -1010,6 +1010,3 @@\n-     * @param size\n-     *        The size (in bytes) of the mapped memory backing the memory\n-     *        segment.\n-\n-     * @param session\n-     *        The segment memory session.\n+     * @param   size\n+     *          The size (in bytes) of the mapped memory backing the memory\n+     *          segment.\n@@ -1017,1 +1014,2 @@\n-     * @return A new mapped memory segment.\n+     * @param   session\n+     *          The segment memory session.\n@@ -1019,3 +1017,1 @@\n-     * @throws IllegalArgumentException\n-     *         If {@code offset < 0}, {@code size < 0} or\n-     *         {@code offset + size} overflows the range of {@code long}.\n+     * @return  A new mapped memory segment.\n@@ -1023,3 +1019,3 @@\n-     * @throws IllegalStateException\n-     *         If the {@code session} is not\n-     *         {@linkplain MemorySession#isAlive() alive}.\n+     * @throws  IllegalArgumentException\n+     *          If {@code offset < 0}, {@code size < 0} or\n+     *          {@code offset + size} overflows the range of {@code long}.\n@@ -1027,4 +1023,3 @@\n-     * @throws WrongThreadException\n-     *         If this method is called from a thread other than the thread\n-     *         {@linkplain MemorySession#ownerThread() owning} the\n-     *         {@code session}.\n+     * @throws  IllegalStateException\n+     *          If the {@code session} is not\n+     *          {@linkplain MemorySession#isAlive() alive}.\n@@ -1032,4 +1027,4 @@\n-     * @throws NonReadableChannelException\n-     *         If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} or\n-     *         an implementation specific map mode requiring read access,\n-     *         but this channel was not opened for reading.\n+     * @throws  WrongThreadException\n+     *          If this method is called from a thread other than the thread\n+     *          {@linkplain MemorySession#ownerThread() owning} the\n+     *          {@code session}.\n@@ -1037,5 +1032,4 @@\n-     * @throws NonWritableChannelException\n-     *         If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE},\n-     *         {@link MapMode#PRIVATE PRIVATE} or an implementation specific\n-     *         map mode requiring write access, but this channel was not\n-     *         opened for both reading and writing.\n+     * @throws  NonReadableChannelException\n+     *          If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} or\n+     *          an implementation specific map mode requiring read access,\n+     *          but this channel was not opened for reading.\n@@ -1043,2 +1037,5 @@\n-     * @throws IOException\n-     *         If some other I\/O error occurs.\n+     * @throws  NonWritableChannelException\n+     *          If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE},\n+     *          {@link MapMode#PRIVATE PRIVATE} or an implementation specific\n+     *          map mode requiring write access, but this channel was not\n+     *          opened for both reading and writing.\n@@ -1046,2 +1043,5 @@\n-     * @throws UnsupportedOperationException\n-     *         If an unsupported map mode is specified.\n+     * @throws  IOException\n+     *          If some other I\/O error occurs.\n+     *\n+     * @throws  UnsupportedOperationException\n+     *          If an unsupported map mode is specified.\n@@ -1049,1 +1049,1 @@\n-     * @since 19\n+     * @since   19\n@@ -1052,3 +1052,2 @@\n-    public MemorySegment map(MapMode mode, long offset, long size,\n-                                      MemorySession session)\n-            throws IOException\n+    public MemorySegment map(MapMode mode, long offset, long size, MemorySession session)\n+        throws IOException\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":42,"deletions":43,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -1214,2 +1214,4 @@\n-        if (offset < 0) throw new IllegalArgumentException(\"Requested bytes offset must be >= 0.\");\n-        if (size < 0) throw new IllegalArgumentException(\"Requested bytes size must be >= 0.\");\n+        if (offset < 0)\n+            throw new IllegalArgumentException(\"Requested bytes offset must be >= 0.\");\n+        if (size < 0)\n+            throw new IllegalArgumentException(\"Requested bytes size must be >= 0.\");\n@@ -1225,8 +1227,11 @@\n-            AbstractMemorySegmentImpl segment = new MappedMemorySegmentImpl(unmapper.address(), unmapper, size,\n-                    modes, session);\n-            sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n-                @Override\n-                public void cleanup() {\n-                    unmapper.unmap();\n-                }\n-            });\n+            AbstractMemorySegmentImpl segment =\n+                new MappedMemorySegmentImpl(unmapper.address(), unmapper, size,\n+                                            modes, session);\n+            MemorySessionImpl.ResourceList.ResourceCleanup resource =\n+                new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+                    @Override\n+                    public void cleanup() {\n+                        unmapper.unmap();\n+                    }\n+                };\n+            sessionImpl.addOrCleanupIfFail(resource);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}