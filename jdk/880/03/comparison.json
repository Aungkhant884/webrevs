{"files":[{"patch":"@@ -37,2 +37,4 @@\n-\/\/ Ordering here is important: _log_table first, _log_table_initialized second.\n-double ThreadHeapSampler::_log_table[1 << ThreadHeapSampler::FastLogNumBits] = {};\n+\/\/ Statics for the fast log\n+static const int FastLogNumBits = 10;\n+static const int FastLogCount = 1 << FastLogNumBits;\n+static const int FastLogMask = FastLogCount - 1;\n@@ -40,6 +42,5 @@\n-\/\/ Force initialization of the log_table.\n-bool ThreadHeapSampler::_log_table_initialized = init_log_table();\n-\n-bool ThreadHeapSampler::init_log_table() {\n-  for (int i = 0; i < (1 << FastLogNumBits); i++) {\n-    _log_table[i] = (log(1.0 + static_cast<double>(i+0.5) \/ (1 << FastLogNumBits))\n+template<int N>\n+struct FastLogTable {\n+  constexpr FastLogTable() : _values() {\n+    for (int i = 0; i < N; i++) {\n+      _values[i] = (log(1.0 + static_cast<double>(i+0.5) \/ N)\n@@ -47,0 +48,1 @@\n+    }\n@@ -48,2 +50,4 @@\n-  return true;\n-}\n+  double _values[N];\n+};\n+\n+static constexpr FastLogTable<FastLogCount> log_table;\n@@ -74,3 +78,1 @@\n-\n-  assert(_log_table_initialized, \"log table should be initialized\");\n-  return exponent + _log_table[y];\n+  return exponent + log_table._values[y];\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,4 +33,0 @@\n-  \/\/ Statics for the fast log\n-  static const int FastLogNumBits = 10;\n-  static const int FastLogMask = (1 << FastLogNumBits) - 1;\n-\n@@ -40,1 +36,0 @@\n-  static bool _log_table_initialized;\n@@ -42,1 +37,0 @@\n-  static double _log_table[1<<FastLogNumBits];  \/\/ Constant\n@@ -49,1 +43,0 @@\n-  static bool init_log_table();\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}