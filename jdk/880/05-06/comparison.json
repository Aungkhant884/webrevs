{"files":[{"patch":"@@ -43,28 +43,0 @@\n-\n-#ifndef PRODUCT\n-\/\/ Print the log_table below by running -Xlog:heapsampling+generate::none\n-static double log_table_value(int i) {\n-  return (log(1.0 + static_cast<double>(i + 0.5) \/ FastLogCount) \/ log(2.0));\n-}\n-\n-static void print_log_table() {\n-  if (log_is_enabled(Info, heapsampling,generate)) {\n-    assert(is_power_of_2(FastLogCount) && FastLogCount >= 4, \"table size should be power of two and at least 4\");\n-\n-    log_info(heapsampling, generate)(\"FastLogCount = %d\", FastLogCount);\n-    log_info(heapsampling,generate)(\"static const double log_table[FastLogCount] = {\");\n-    int i = 0;\n-    for (; i < FastLogCount; i += 4) {\n-      log_info(heapsampling,generate)(\"  %.15f, %.15f, %.15f, %.15f,\",\n-                                      log_table_value(i),     log_table_value(i + 1),\n-                                      log_table_value(i + 2), log_table_value(i + 3));\n-    }\n-    log_info(heapsampling,generate)(\"};\");\n-\n-    assert(i == FastLogCount, \"invariant\");\n-  }\n-}\n-\/\/ Ensure initialization happen during bootstrap\n-static volatile bool log_table_printed = false;\n-#endif\n-\n@@ -330,0 +302,37 @@\n+#ifndef PRODUCT\n+static double log_table_value(int i) {\n+  return (log(1.0 + static_cast<double>(i + 0.5) \/ FastLogCount) \/ log(2.0));\n+}\n+\n+\/\/ Ensure initialization checks only happen once during bootstrap\n+static volatile bool log_table_checked = false;\n+\n+\/\/ Sanity check all log_table values or print it out if running\n+\/\/ -Xlog:heapsampling+generate::none\n+static void verify_or_generate_log_table() {\n+  log_table_checked = true;\n+  assert(is_power_of_2(FastLogCount) && FastLogCount >= 4, \"table size should be power of two and at least 4\");\n+  if (log_is_enabled(Info,heapsampling,generate)) {\n+    log_info(heapsampling,generate)(\"FastLogCount = %d\", FastLogCount);\n+    log_info(heapsampling,generate)(\"static const double log_table[FastLogCount] = {\");\n+    int i = 0;\n+    for (; i < FastLogCount; i += 4) {\n+      double v1 = log_table_value(i);\n+      double v2 = log_table_value(i + 1);\n+      double v3 = log_table_value(i + 2);\n+      double v4 = log_table_value(i + 3);\n+      log_info(heapsampling,generate)(\"  %.15f, %.15f, %.15f, %.15f,\", v1, v2, v3, v4);\n+    }\n+    log_info(heapsampling,generate)(\"};\");\n+    assert(i == FastLogCount, \"post-loop invariant\");\n+  } else {\n+    \/\/ sanity check log_table - disabled when generating\n+    for (int i = 0; i < FastLogCount; i++) {\n+    assert(abs(log_table_value(i) - log_table[i]) < 0.0001,\n+      \"log_table deviates too much at index: %d %.15f %.15f\",\n+      i, log_table_value(i), log_table[i]);\n+    }\n+  }\n+}\n+#endif\n+\n@@ -394,3 +403,2 @@\n-  if (!log_table_printed) {\n-    log_table_printed = true;\n-    print_log_table();\n+  if (!log_table_checked) {\n+    verify_or_generate_log_table();\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp","additions":39,"deletions":31,"binary":false,"changes":70,"status":"modified"}]}