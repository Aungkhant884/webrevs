{"files":[{"patch":"@@ -526,5 +526,5 @@\n-  VirtualMemorySummary::record_released_memory(size, reserved_rgn->flag());\n-\n-  assert(reserved_rgn->contain_region(addr, size), \"Not completely contained\");\n-  if (reserved_rgn->base() == addr ||\n-      reserved_rgn->end() == addr + size) {\n+  if (size <= reserved_rgn->size()) {\n+    VirtualMemorySummary::record_released_memory(size, reserved_rgn->flag());\n+    assert(reserved_rgn->contain_region(addr, size), \"Not completely contained\");\n+    if (reserved_rgn->base() == addr ||\n+        reserved_rgn->end() == addr + size) {\n@@ -532,14 +532,0 @@\n-    return true;\n-  } else {\n-    address top = reserved_rgn->end();\n-    address high_base = addr + size;\n-    ReservedMemoryRegion high_rgn(high_base, top - high_base,\n-      *reserved_rgn->call_stack(), reserved_rgn->flag());\n-\n-    \/\/ use original region for lower region\n-    reserved_rgn->exclude_region(addr, top - addr);\n-    LinkedListNode<ReservedMemoryRegion>* new_rgn = _reserved_regions->add(high_rgn);\n-    if (new_rgn == nullptr) {\n-      return false;\n-    } else {\n-      reserved_rgn->move_committed_regions(addr, *new_rgn->data());\n@@ -547,0 +533,15 @@\n+    } else {\n+      address top = reserved_rgn->end();\n+      address high_base = addr + size;\n+      ReservedMemoryRegion high_rgn(high_base, top - high_base,\n+                                    *reserved_rgn->call_stack(), reserved_rgn->flag());\n+\n+      \/\/ use original region for lower region\n+      reserved_rgn->exclude_region(addr, top - addr);\n+      LinkedListNode<ReservedMemoryRegion>* new_rgn = _reserved_regions->add(high_rgn);\n+      if (new_rgn == nullptr) {\n+        return false;\n+      } else {\n+        reserved_rgn->move_committed_regions(addr, *new_rgn->data());\n+        return true;\n+      }\n@@ -548,0 +549,18 @@\n+  } else {\n+    address end = addr+size;\n+    size_t remaining = size;\n+    LinkedListNode<ReservedMemoryRegion>* node_rgn = _reserved_regions->find_node(rgn);\n+    while (remaining > 0) {\n+      ReservedMemoryRegion* remove_rgn = node_rgn->data();\n+      assert(remove_rgn!=nullptr, \"NULL region\");\n+\n+      node_rgn = node_rgn->next();\n+      assert(remove_rgn->base()<node_rgn->data()->base(), \"not ascending bases\");\n+\n+      \/\/ Allow for the last segment to be partially released\n+      size_t remove_size = MIN(remove_rgn->size(), remaining);\n+      assert(remove_rgn->base()+remove_size<=end, \"not contained\");\n+      assert(remove_released_region(remove_rgn->base(), remove_size), \"error in remove_released_region\");\n+      remaining -= remove_size;\n+    }\n+    return true;\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":38,"deletions":19,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -461,5 +461,0 @@\n-  \/\/ With NMT enabled, this will trigger JDK-8263464. For now disable the test if NMT=on.\n-  if (MemTracker::tracking_level() > NMT_off) {\n-    return;\n-  }\n-\n@@ -518,0 +513,41 @@\n+#ifndef _AIX \/\/ JDK-8257041\n+TEST_VM(os, partial_release_multi_mappings) {\n+\n+  \/\/  see \"release_multi_mappings\" test comment for general explanation\n+\n+  \/\/  thread grabbing that memory.\n+\n+  const size_t stripe_len = os::vm_allocation_granularity();\n+  const int num_stripes = 4;\n+  const size_t total_range_len = stripe_len * num_stripes;\n+  const size_t partial_release_len = total_range_len - (stripe_len\/2); \/\/ partially release the last stripe\n+\n+  \/\/ reserve address space...\n+  address p = reserve_multiple(num_stripes, stripe_len);\n+  ASSERT_NE(p, (address)NULL);\n+  PRINT_MAPPINGS(\"A\");\n+\n+  \/\/ .. release the middle stripe...\n+  address p_middle_stripes = p + stripe_len;\n+  const size_t middle_stripe_len = (num_stripes - 2) * stripe_len;\n+  {\n+    \/\/ On Windows, temporarily switch on UseNUMAInterleaving to allow release_memory to release\n+    \/\/  multiple mappings in one go (otherwise we assert, which we test too, see death test below).\n+    WINDOWS_ONLY(NUMASwitcher b(true);)\n+    ASSERT_TRUE(os::release_memory((char*)p_middle_stripes, middle_stripe_len));\n+  }\n+  PRINT_MAPPINGS(\"B\");\n+\n+  \/\/ ...re-reserve the middle stripes. This should work unless release silently failed.\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n+  ASSERT_EQ(p2, p_middle_stripes);\n+  PRINT_MAPPINGS(\"C\");\n+\n+  \/\/ Clean up. Release all mappings except a 1\/2 stripe sized portion at the very end.\n+  {\n+    WINDOWS_ONLY(NUMASwitcher b(true);) \/\/ allow release_memory to release multiple regions\n+    ASSERT_TRUE(os::release_memory((char*)p, partial_release_len));\n+  }\n+}\n+#endif \/\/ !AIX\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":41,"deletions":5,"binary":false,"changes":46,"status":"modified"}]}