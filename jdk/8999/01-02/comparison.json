{"files":[{"patch":"@@ -101,0 +101,7 @@\n+    \/**\n+     * Accepts a single feature pair which is composed of CPU feature string followed by a true\/false\n+     * value where a true value necessities existence of CPU feature and vice-versa.\n+     * IR verifications checks are enforced only if the specified feature constraint is met.\n+     *\/\n+    String[] applyIfCPUFeature() default {};\n+\n@@ -106,1 +113,1 @@\n-    String[] applyIfTargetFeatureAnd() default {};\n+    String[] applyIfCPUFeatureAnd() default {};\n@@ -113,1 +120,1 @@\n-    String[] applyIfTargetFeatureOr() default {};\n+    String[] applyIfCPUFeatureOr() default {};\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IR.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -169,0 +169,1 @@\n+    public static final String ADD_VI = START + \"AddVI\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,1 +104,6 @@\n-            return hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\");\n+            boolean check = hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\");\n+            if (!check) {\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n+                                     \"[IREncodingPrinter]\", true);\n+            }\n+            return check;\n@@ -108,1 +113,6 @@\n-            return hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\");\n+            boolean check = hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\");\n+            if (!check) {\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n+                                     \"[IREncodingPrinter]\", true);\n+            }\n+            return check;\n@@ -112,1 +122,6 @@\n-            return hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\");\n+            boolean check = hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\");\n+            if (!check) {\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All flag constraints not met.\",\n+                                     \"[IREncodingPrinter]\", true);\n+            }\n+            return check;\n@@ -116,1 +131,15 @@\n-            return !hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\");\n+            boolean check = hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\");\n+            if (check) {\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the flag constraint met.\",\n+                                     \"[IREncodingPrinter]\", true);\n+            }\n+            return !check;\n+        }\n+\n+        if (irAnno.applyIfCPUFeature().length != 0) {\n+            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature(), \"applyIfCPUFeature\");\n+            if (!check) {\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Feature constraint not met.\",\n+                                     \"[IREncodingPrinter]\", true);\n+            }\n+            return check;\n@@ -119,2 +148,2 @@\n-        if (irAnno.applyIfTargetFeatureAnd().length != 0) {\n-            boolean check = hasRequiredFeaturesAnd(irAnno.applyIfTargetFeatureAnd(), \"applyIfTargetFeatureAnd\");\n+        if (irAnno.applyIfCPUFeatureAnd().length != 0) {\n+            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd(), \"applyIfCPUFeatureAnd\");\n@@ -122,1 +151,2 @@\n-                System.out.println(\"Disabling IR validation for \" + m + \", all feature constraints not met.\");\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All feature constraints not met.\",\n+                                     \"[IREncodingPrinter]\", true);\n@@ -127,2 +157,2 @@\n-        if (irAnno.applyIfTargetFeatureOr().length != 0) {\n-            boolean check = hasRequiredFeaturesOr(irAnno.applyIfTargetFeatureOr(), \"applyIfTargetFeatureOr\");\n+        if (irAnno.applyIfCPUFeatureOr().length != 0) {\n+            boolean check = hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr(), \"applyIfCPUFeatureOr\");\n@@ -130,1 +160,2 @@\n-                System.out.println(\"Disabling IR validation for \" + m + \", none of the feature constraint is met.\");\n+                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the feature constraint met.\",\n+                                     \"[IREncodingPrinter]\", true);\n@@ -157,1 +188,6 @@\n-        if (irAnno.applyIfTargetFeatureAnd().length != 0) {\n+        if (irAnno.applyIfCPUFeature().length != 0) {\n+            applyRules++;\n+            TestFormat.checkNoThrow((irAnno.applyIfCPUFeature().length % 2) == 0,\n+                                    \"Argument count for applyIfCPUFeature should be multiple of two\" + failAt());\n+        }\n+        if (irAnno.applyIfCPUFeatureAnd().length != 0) {\n@@ -159,2 +195,2 @@\n-            TestFormat.checkNoThrow((irAnno.applyIfTargetFeatureAnd().length & 1) == 0,\n-                                    \"Argument count for applyIfTargetFeatureAnd should be multiple of two\" + failAt());\n+            TestFormat.checkNoThrow((irAnno.applyIfCPUFeatureAnd().length % 2) == 0,\n+                                    \"Argument count for applyIfCPUFeatureAnd should be multiple of two\" + failAt());\n@@ -162,1 +198,1 @@\n-        if (irAnno.applyIfTargetFeatureOr().length != 0) {\n+        if (irAnno.applyIfCPUFeatureOr().length != 0) {\n@@ -164,2 +200,2 @@\n-            TestFormat.checkNoThrow((irAnno.applyIfTargetFeatureOr().length & 1) == 0,\n-                                    \"Argument count for applyIfTargetFeatureOr should be multiple of two\" + failAt());\n+            TestFormat.checkNoThrow((irAnno.applyIfCPUFeatureOr().length % 2) == 0,\n+                                    \"Argument count for applyIfCPUFeatureOr should be multiple of two\" + failAt());\n@@ -206,1 +242,2 @@\n-    private boolean hasRequiredFeaturesAnd(String[] andRules, String ruleType) {\n+    private boolean hasAllRequiredCPUFeature(String[] andRules, String ruleType) {\n+        boolean returnValue = true;\n@@ -208,1 +245,1 @@\n-            String feature = andRules[i];\n+            String feature = andRules[i].trim();\n@@ -210,6 +247,2 @@\n-            String value = andRules[i];\n-            TestFormat.check((value.contains(\"true\") || value.contains(\"false\")), \"Incorrect value in \" + ruleType + failAt());\n-            if (!checkTargetFeature(feature, value)) {\n-                \/\/ Rule will not be applied but keep processing the other flags to verify that they are same.\n-                return false;\n-            }\n+            String value = andRules[i].trim();\n+            returnValue &= checkCPUFeature(feature, value);\n@@ -217,1 +250,1 @@\n-        return true;\n+        return returnValue;\n@@ -220,1 +253,1 @@\n-    private boolean hasRequiredFeaturesOr(String[] orRules, String ruleType) {\n+    private boolean hasAnyRequiredCPUFeature(String[] orRules, String ruleType) {\n@@ -223,1 +256,1 @@\n-            String feature = orRules[i];\n+            String feature = orRules[i].trim();\n@@ -225,3 +258,2 @@\n-            String value = orRules[i];\n-            TestFormat.check((value.contains(\"true\") || value.contains(\"false\")), \"Incorrect value in \" + ruleType + failAt());\n-            returnValue |= checkTargetFeature(feature, value);\n+            String value = orRules[i].trim();\n+            returnValue |= checkCPUFeature(feature, value);\n@@ -232,2 +264,18 @@\n-    private boolean checkTargetFeature(String feature, String value) {\n-        String s = WHITE_BOX.getCPUFeatures();\n+    private boolean checkCPUFeature(String feature, String value) {\n+        if (feature.isEmpty()) {\n+            TestFormat.failNoThrow(\"Provided empty feature\" + failAt());\n+            return false;\n+        }\n+        if (value.isEmpty()) {\n+            TestFormat.failNoThrow(\"Provided empty value for feature \" + feature + failAt());\n+            return false;\n+        }\n+\n+        boolean trueValue = value.contains(\"true\");\n+        boolean falseValue = value.contains(\"false\");\n+\n+        if (!trueValue && !falseValue) {\n+            TestFormat.failNoThrow(\"Provided incorrect value for feature \" + feature + failAt());\n+            return false;\n+        }\n+        String cpuFeatures = WHITE_BOX.getCPUFeatures();\n@@ -236,1 +284,1 @@\n-        HashSet<String> knlFeatureSet = new HashSet<String>();\n+        HashSet<String> knlFeatureSet = new HashSet<>();\n@@ -250,1 +298,1 @@\n-        Boolean isKNLFlagEnabled = (Boolean)WHITE_BOX.getBooleanVMFlag(\"UseKNLSettings\");\n+        Boolean isKNLFlagEnabled = WHITE_BOX.getBooleanVMFlag(\"UseKNLSetting\");\n@@ -253,5 +301,3 @@\n-        if (isKNLFlagEnabled == null || (isKNLFlagEnabled.booleanValue() && !knlFeatureSet.contains(feature.toUpperCase()))) {\n-            if ((value.contains(\"true\") && s.contains(feature)) ||\n-               (value.contains(\"false\") && !s.contains(feature))) {\n-                return true;\n-            }\n+        if (isKNLFlagEnabled == null ||\n+             (isKNLFlagEnabled.booleanValue() && (!knlFeatureSet.contains(feature.toUpperCase()) || falseValue))) {\n+            return (trueValue && cpuFeatures.contains(feature)) || (falseValue && !cpuFeatures.contains(feature));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":85,"deletions":39,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package ir_framework.examples;\n-\n-import compiler.lib.ir_framework.*;\n-import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n-\n-\/*\n- * @test 8287525\n- * @summary Extend IR annotation with new options to test specific target feature.\n- * @requires vm.cpu.features ~= \".*avx512f.*\"\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n- * @library \/test\/lib \/\n- * @run driver ir_framework.examples.TargetFeatureCheckExample\n- *\/\n-\n-public class TargetFeatureCheckExample {\n-    private static int a[] = new int[1000];\n-    private static int b[] = new int[1000];\n-    private static int res[] = new int[1000];\n-\n-    public static void setup() {\n-        for (int i = 0; i < 1000; i++) {\n-            a[i] = i;\n-            b[i] = i;\n-        }\n-    }\n-\n-    public static void main(String args[]) {\n-        setup();\n-        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                   \"-XX:UseAVX=3\",\n-                                   \"-XX:+UseKNLSetting\",\n-                                   \"-XX:CompileThresholdScaling=0.3\");\n-    }\n-\n-    @Test\n-    @IR(counts = {\"AddVI\", \"> 0\"}, applyIfTargetFeatureAnd = {\"avx512bw\", \"false\"})\n-    public static void test1() {\n-        for ( int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if all the feature conditions holds good\n-    @Test\n-    @IR(counts = {\"AddVI\", \"> 0\"}, applyIfTargetFeatureAnd = {\"avx512bw\", \"false\", \"avx512f\", \"true\"})\n-    public static void test2() {\n-        for ( int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if any of the feature condition holds good\n-    @Test\n-    @IR(counts = {\"AddVI\",  \"> 0\"}, applyIfTargetFeatureOr = {\"avx512bw\", \"true\", \"avx512f\", \"true\"})\n-    public static void test3() {\n-        for ( int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/TargetFeatureCheckExample.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.examples;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n+\n+\/*\n+ * @test 8287525\n+ * @summary Extend IR annotation with new options to test specific target feature.\n+ * @requires vm.cpu.features ~= \".*avx512f.*\"\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.examples.TestCPUFeatureCheck\n+ *\/\n+\n+public class TestCPUFeatureCheck {\n+    private static int a[] = new int[1000];\n+    private static int b[] = new int[1000];\n+    private static int res[] = new int[1000];\n+\n+    public static void setup() {\n+        for (int i = 0; i < 1000; i++) {\n+            a[i] = i;\n+            b[i] = i;\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        setup();\n+        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                   \"-XX:UseAVX=3\",\n+                                   \"-XX:+UseKNLSetting\",\n+                                   \"-XX:CompileThresholdScaling=0.3\");\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeature = {\"avx512bw\", \"false\"})\n+    public static void test1() {\n+        for (int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if all the feature conditions holds good\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeatureAnd = {\"avx512bw\", \"false\", \"avx512f\", \"true\"})\n+    public static void test2() {\n+        for (int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if any of the feature condition holds good\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI,  \"> 0\"}, applyIfCPUFeatureOr = {\"avx512bw\", \"true\", \"avx512f\", \"true\"})\n+    public static void test3() {\n+        for (int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/TestCPUFeatureCheck.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}