{"files":[{"patch":"@@ -941,0 +941,2 @@\n+  \/\/ Note: Any modifications to following suppressed feature list for KNL target\n+  \/\/ should also be applied to test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,0 +101,14 @@\n+    \/**\n+     * Accepts a list of feature pairs where each pair is composed of target feature string followed by a true\/false\n+     * value where a true value necessities existence of target feature and vice-versa.\n+     * IR verifications checks are enforced only if all the specified feature constraints are met.\n+     *\/\n+    String[] applyIfTargetFeatureAnd() default {};\n+\n+     \/**\n+     * Accepts a list of feature pairs where each pair is composed of target feature string followed by a true\/false\n+     * value where a true value necessities existence of target feature and vice-versa.\n+     * IR verifications checks are enforced if any of the specified feature constraint is met.\n+     *\/\n+    String[] applyIfTargetFeatureOr() default {};\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IR.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.HashSet;\n@@ -75,1 +76,1 @@\n-                    if (shouldApplyIrRule(irAnno)) {\n+                    if (shouldApplyIrRule(irAnno, m.getName())) {\n@@ -97,1 +98,1 @@\n-    private boolean shouldApplyIrRule(IR irAnno) {\n+    private boolean shouldApplyIrRule(IR irAnno, String m) {\n@@ -117,0 +118,16 @@\n+\n+        if (irAnno.applyIfTargetFeatureAnd().length != 0) {\n+            boolean check = hasRequiredFeaturesAnd(irAnno.applyIfTargetFeatureAnd(), \"applyIfTargetFeatureAnd\");\n+            if (!check) {\n+                System.out.println(\"Disabling IR validation for \" + m + \", all feature constraints not met.\");\n+            }\n+            return check;\n+        }\n+\n+        if (irAnno.applyIfTargetFeatureOr().length != 0) {\n+            boolean check = hasRequiredFeaturesOr(irAnno.applyIfTargetFeatureOr(), \"applyIfTargetFeatureOr\");\n+            if (!check) {\n+                System.out.println(\"Disabling IR validation for \" + m + \", none of the feature constraint is met.\");\n+            }\n+            return check;\n+        }\n@@ -140,0 +157,10 @@\n+        if (irAnno.applyIfTargetFeatureAnd().length != 0) {\n+            applyRules++;\n+            TestFormat.checkNoThrow((irAnno.applyIfTargetFeatureAnd().length & 1) == 0,\n+                                    \"Argument count for applyIfTargetFeatureAnd should be multiple of two\" + failAt());\n+        }\n+        if (irAnno.applyIfTargetFeatureOr().length != 0) {\n+            applyRules++;\n+            TestFormat.checkNoThrow((irAnno.applyIfTargetFeatureOr().length & 1) == 0,\n+                                    \"Argument count for applyIfTargetFeatureOr should be multiple of two\" + failAt());\n+        }\n@@ -179,0 +206,56 @@\n+    private boolean hasRequiredFeaturesAnd(String[] andRules, String ruleType) {\n+        for (int i = 0; i < andRules.length; i++) {\n+            String feature = andRules[i];\n+            i++;\n+            String value = andRules[i];\n+            TestFormat.check((value.contains(\"true\") || value.contains(\"false\")), \"Incorrect value in \" + ruleType + failAt());\n+            if (!checkTargetFeature(feature, value)) {\n+                \/\/ Rule will not be applied but keep processing the other flags to verify that they are same.\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasRequiredFeaturesOr(String[] orRules, String ruleType) {\n+        boolean returnValue = false;\n+        for (int i = 0; i < orRules.length; i++) {\n+            String feature = orRules[i];\n+            i++;\n+            String value = orRules[i];\n+            TestFormat.check((value.contains(\"true\") || value.contains(\"false\")), \"Incorrect value in \" + ruleType + failAt());\n+            returnValue |= checkTargetFeature(feature, value);\n+        }\n+        return returnValue;\n+    }\n+\n+    private boolean checkTargetFeature(String feature, String value) {\n+        String s = WHITE_BOX.getCPUFeatures();\n+        \/\/ Following feature list is in sync with suppressed feature list for KNL target.\n+        \/\/ Please refer vm_version_x86.cpp for details.\n+        HashSet<String> knlFeatureSet = new HashSet<String>();\n+        knlFeatureSet.add(\"AVX512BW\");\n+        knlFeatureSet.add(\"AVX512VL\");\n+        knlFeatureSet.add(\"AVX512DQ\");\n+        knlFeatureSet.add(\"AVX512_VNNI\");\n+        knlFeatureSet.add(\"AVX512_VAES\");\n+        knlFeatureSet.add(\"AVX512_VPOPCNTDQ\");\n+        knlFeatureSet.add(\"AVX512_VPCLMULQDQ\");\n+        knlFeatureSet.add(\"AVX512_VBMI\");\n+        knlFeatureSet.add(\"AVX512_VBMI2\");\n+        knlFeatureSet.add(\"CLWB\");\n+        knlFeatureSet.add(\"FLUSHOPT\");\n+        knlFeatureSet.add(\"GFNI\");\n+        knlFeatureSet.add(\"AVX512_BITALG\");\n+        Boolean isKNLFlagEnabled = (Boolean)WHITE_BOX.getBooleanVMFlag(\"UseKNLSettings\");\n+        \/\/ Perform the feature check if UseKNLSetting flag is set to off or if\n+        \/\/ feature is supported by KNL target.\n+        if (isKNLFlagEnabled == null || (isKNLFlagEnabled.booleanValue() && !knlFeatureSet.contains(feature.toUpperCase()))) {\n+            if ((value.contains(\"true\") && s.contains(feature)) ||\n+               (value.contains(\"false\") && !s.contains(feature))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":85,"deletions":2,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.examples;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n+\n+\/*\n+ * @test 8287525\n+ * @summary Extend IR annotation with new options to test specific target feature.\n+ * @requires vm.cpu.features ~= \".*avx512f.*\"\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.examples.TargetFeatureCheckExample\n+ *\/\n+\n+public class TargetFeatureCheckExample {\n+    private static int a[] = new int[1000];\n+    private static int b[] = new int[1000];\n+    private static int res[] = new int[1000];\n+\n+    public static void setup() {\n+        for (int i = 0; i < 1000; i++) {\n+            a[i] = i;\n+            b[i] = i;\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        setup();\n+        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                   \"-XX:UseAVX=3\",\n+                                   \"-XX:+UseKNLSetting\",\n+                                   \"-XX:CompileThresholdScaling=0.3\");\n+    }\n+\n+    @Test\n+    @IR(counts = {\"AddVI\", \"> 0\"}, applyIfTargetFeatureAnd = {\"avx512bw\", \"false\"})\n+    public static void test1() {\n+        for ( int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if all the feature conditions holds good\n+    @Test\n+    @IR(counts = {\"AddVI\", \"> 0\"}, applyIfTargetFeatureAnd = {\"avx512bw\", \"false\", \"avx512f\", \"true\"})\n+    public static void test2() {\n+        for ( int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if any of the feature condition holds good\n+    @Test\n+    @IR(counts = {\"AddVI\",  \"> 0\"}, applyIfTargetFeatureOr = {\"avx512bw\", \"true\", \"avx512f\", \"true\"})\n+    public static void test3() {\n+        for ( int i = 0; i < 1000; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/TargetFeatureCheckExample.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}