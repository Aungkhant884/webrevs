[{"commit":{"message":"Merge branch 'openjdk:master' into JDK-8307555"},"files":[],"sha":"8918a17bac4ba1e4de71dc17dacaa3cb4c08acfb"},{"commit":{"message":"8307555: Reduce memory reads in x86 MD5 intrinsic\n\nThe optimization is addressing the redundant memory reads below.\n\n```\nloop0:\n  movl(rax, Address(rdi, 0));       \/\/ 4) read the value at the address stored in rdi (The value was just written to the memory.)\n  \/\/ loop body\n  addl(Address(rdi, 0), rax);       \/\/ 1) read the value at the address stored in rdi, 2) add the value of rax, 3) write back to the address stored in rdi\n  \/\/ jump to loop0\n```\n\nThis pattern is optimized by removing the redundant memory reads.\n\n```\n  movl(rax, Address(rdi, 0));\nloop0:\n  \/\/ loop body\n  addl(rax, Address(rdi, 0));       \/\/ 1) read the value at the address stored in rdi, 2) add the value to rax\n  movl(Address(rdi, 0), rax);       \/\/ 3) write the value to the address stored in rdi\n  \/\/ jump to loop0\n```\n\nThe following tests passed.\n```\njtreg:test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestMD5Intrinsics.java\njtreg:test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestMD5MultiBlockIntrinsics.java\n```\n\nThe performance is improved by ~ 1-2% with `micro:org.openjdk.bench.java.security.MessageDigests`.\n\n|              | MessageDigests.digest | MessageDigests.digest | MessageDigests.getAndDigest | MessageDigests.getAndDigest  |\n|--------------|-----------------------|-----------------------|-----------------------------|------------------------------|-------|\n|              | 64                    | 16,384                | 64                          | 16,384                       | bytes |\n| Ice Lake     | -0.19%                | 1.63%                 | -0.07%                      | 1.69%\n| Cascade Lake | -0.28%                | 0.98%                 | 0.43%                       | 0.96%\n| Haswell      | -0.47%                | 2.16%                 | 1.02%                       | 1.94%\n\nIce Lake\n```\nBenchmark                    (digesterName)  (length)  (provider)   Mode  Cnt     Score    Error   Units\n-- Baseline ---------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  5350.876 ± 12.489  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    43.691 ±  0.013  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  4545.059 ± 55.981  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    43.523 ±  0.012  ops\/ms\n-- Optimized --------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  5340.630 ± 17.155  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    44.401 ±  0.011  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  4541.748 ± 13.583  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    44.257 ±  0.025  ops\/ms\n```\n\nCascade Lake\n```\nBenchmark                    (digesterName)  (length)  (provider)   Mode  Cnt     Score     Error   Units\n-- Baseline ---------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  4483.860 ±  12.864  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    38.924 ±   0.006  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  3682.282 ± 159.619  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    38.695 ±   0.007  ops\/ms\n-- Optimized --------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  4471.167 ±  16.366  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    39.307 ±   0.006  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  3698.120 ± 162.463  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    39.066 ±   0.008  ops\/ms\n```\n\nHaswell\n```\nBenchmark                    (digesterName)  (length)  (provider)   Mode  Cnt     Score     Error   Units\n-- Baseline ---------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  3673.925 ±  33.793  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    33.526 ±   0.107  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  3092.655 ± 120.806  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    33.479 ±   0.135  ops\/ms\n-- Optimized --------------------------------------------------------------------------------------------\nMessageDigests.digest                   md5        64     DEFAULT  thrpt   15  3656.642 ±  47.520  ops\/ms\nMessageDigests.digest                   md5     16384     DEFAULT  thrpt   15    34.251 ±   0.089  ops\/ms\nMessageDigests.getAndDigest             md5        64     DEFAULT  thrpt   15  3124.269 ± 121.331  ops\/ms\nMessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt   15    34.130 ±   0.117  ops\/ms\n```"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_md5.cpp"}],"sha":"e2c1758600ad35ef0e121af61d7493dda2485fe3"}]