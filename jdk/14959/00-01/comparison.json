{"files":[{"patch":"@@ -526,1 +526,5 @@\n-    if (bottom->is_instance_klass()) {\n+    if (MetaspaceShared::is_shared_static(bottom)) {\n+      \/\/ The bottom class is in the static archive so it's clearly not excluded.\n+      assert(DynamicDumpSharedSpaces, \"sanity\");\n+      return false;\n+    } else if (bottom->is_instance_klass()) {\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -155,5 +155,1 @@\n-#ifdef ASSERT\n-    if (k->is_shared()) {\n-      assert(DynamicDumpSharedSpaces, \"Should only be called with shared class during DynamicDumpSharedSpaces\");\n-    }\n-#endif\n+  assert(!k->is_shared(), \"Do not call with shared classes\");\n@@ -161,7 +157,3 @@\n-#ifdef ASSERT\n-  if (DumpSharedSpaces) {\n-    assert(p != nullptr, \"we must not see any non-shared InstanceKlass* that's \"\n-           \"not stored with SystemDictionaryShared::init_dumptime_info\");\n-    assert(p->_klass == k, \"Sanity\");\n-  }\n-#endif\n+  assert(p != nullptr, \"we must not see any non-shared InstanceKlass* that's \"\n+         \"not stored with SystemDictionaryShared::init_dumptime_info\");\n+  assert(p->_klass == k, \"Sanity\");\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"runtime\/signature.hpp\"\n@@ -406,55 +405,11 @@\n-      ArrayKlass* sav_ak = ak;\n-      SignatureStream ss(ak->name(), false);\n-      int ndims = ss.skip_array_prefix();  \/\/ skip all '['s, has_envelope() requires it.\n-      BasicType t = ss.type();\n-      bool is_obj_array = ss.has_envelope();\n-      Klass* bk = nullptr;\n-      if (is_obj_array) {\n-        bk = ObjArrayKlass::cast(ak)->bottom_klass();\n-        assert(MetaspaceShared::is_shared_static((void*)bk), \"bottom_klass should be in static archive\");\n-      }\n-      if (ak->dimension() > 1) {\n-        Klass* higher_dim = nullptr;\n-        while (ak->dimension() > 1) {\n-          if (ak->dimension() == 2) {\n-            \/\/ Save the two-dimensional array for setting up primitive array.\n-            higher_dim = ak;\n-          }\n-          Klass* ld = ak->lower_dimension();\n-          assert(ld != nullptr, \"unexpected null lower_dimension klass\");\n-          assert(MetaspaceShared::is_in_shared_metaspace((void*)ld), \"lower_dimension klass should be in CDS archive\");\n-          ld = ArrayKlass::cast(ld)->lower_dimension();\n-          if (ld != nullptr) {\n-            ak = ArrayKlass::cast(ld);\n-          }  else {\n-            break;\n-          }\n-        }\n-        if (is_obj_array) {\n-          assert(ak->dimension() >= 1, \"sanity\");\n-          int target_dim = ak->dimension() - 1;\n-          assert(target_dim >= 0, \"sanity\");\n-          if (target_dim == 0) {\n-            \/\/ Point InstanceKlass::_array_klasses to the one-dimensional archived ObjArrayKlass\n-            InstanceKlass* ik = InstanceKlass::cast(bk);\n-            ik->release_set_array_klasses(ObjArrayKlass::cast(ak));\n-          } else {\n-            ObjArrayKlass* fixup_oak = ObjArrayKlass::cast(bk->array_klass_or_null(target_dim));\n-            assert(fixup_oak != nullptr, \"sanity\");\n-            assert(MetaspaceShared::is_shared_static((void*)fixup_oak),\n-              \"ObjArrayKlass to be fixed should be in static CDS archive\");\n-            fixup_oak->set_higher_dimension(ak);\n-          }\n-        } else {\n-          if (is_java_primitive(t)) {\n-            \/\/ Setup primitive array - obtain the equivalent of a \"bottom_klass\" of a primitive array.\n-            Klass* k = Universe::typeArrayKlassObj(t);\n-            \/\/ A one-dimensional primitive array should exist in the static CDS archive.\n-            assert(ArrayKlass::cast(k)->dimension() == 1, \"expecting one-dimension primitive array klass\");\n-            assert(MetaspaceShared::is_shared_static((void*)k),\n-              \"one-dimension primitive array klass should be in static CDS archive\");\n-            if (ArrayKlass::cast(k)->higher_dimension() == nullptr) {\n-              \/\/ Point _higher_dimension to the archived array.\n-              ArrayKlass::cast(k)->set_higher_dimension(higher_dim);\n-            }\n-          }\n+      Klass* bk = ObjArrayKlass::cast(ak)->bottom_klass();\n+      assert(MetaspaceShared::is_shared_static((void*)bk), \"bottom_klass should be in static archive\");\n+      while (ak->dimension() > 1) {\n+        Klass* ld = ak->lower_dimension();\n+        assert(ld != nullptr, \"unexpected null lower_dimension klass\");\n+        assert(MetaspaceShared::is_in_shared_metaspace((void*)ld), \"lower_dimension klass should be in CDS archive\");\n+        ld = ArrayKlass::cast(ld)->lower_dimension();\n+        if (ld != nullptr) {\n+          ak = ArrayKlass::cast(ld);\n+        }  else {\n+          break;\n@@ -462,4 +417,5 @@\n-      } else {\n-        assert(ak->dimension() == 1, \"must be\");\n-        assert(ak->lower_dimension() == nullptr, \"unexpected non-null lower_dimension klass\");\n-        assert(is_obj_array, \"sanity\");\n+      }\n+      assert(ak->dimension() >= 1, \"sanity\");\n+      int target_dim = ak->dimension() - 1;\n+      assert(target_dim >= 0, \"sanity\");\n+      if (target_dim == 0) {\n@@ -469,0 +425,6 @@\n+      } else {\n+        ArrayKlass* fixup_oak = ArrayKlass::cast(bk->array_klass_or_null(target_dim));\n+        assert(fixup_oak != nullptr, \"sanity\");\n+        assert(MetaspaceShared::is_shared_static((void*)fixup_oak),\n+          \"ObjArrayKlass to be fixed should be in static CDS archive\");\n+        fixup_oak->set_higher_dimension(ak);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":22,"deletions":60,"binary":false,"changes":82,"status":"modified"}]}