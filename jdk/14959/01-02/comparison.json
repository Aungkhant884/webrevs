{"files":[{"patch":"@@ -236,3 +236,0 @@\n-  if (DynamicDumpSharedSpaces) {\n-    iterate_primitive_array_klasses(&doit);\n-  }\n@@ -801,24 +798,0 @@\n-void ArchiveBuilder::gather_array_klasses() {\n-  for (int i = 0; i < klasses()->length(); i++) {\n-    if (klasses()->at(i)->is_objArray_klass()) {\n-      ObjArrayKlass* oak = ObjArrayKlass::cast(klasses()->at(i));\n-      Klass* elem = oak->element_klass();\n-      if (MetaspaceShared::is_shared_static(elem)) {\n-        \/\/ Only capture the array klass whose element_klass is in the static archive.\n-        \/\/ During run time, setup (see DynamicArchive::setup_array_klasses()) is needed\n-        \/\/ so that the element_klass can find its array klasses from the dynamic archive.\n-        ArrayKlass* ak = ArrayKlass::cast(klasses()->at(i));\n-        DynamicArchive::append_array_klass(ak);\n-      } else {\n-        \/\/ The element_klass and its array klasses are in the same archive.\n-        if (oak->dimension() > 1) {\n-          assert(ArrayKlass::cast(elem)->higher_dimension() == oak, \"must be\");\n-        } else {\n-          assert(InstanceKlass::cast(elem)->array_klasses() == oak, \"must be\");\n-        }\n-      }\n-    }\n-  }\n-  log_debug(cds)(\"Total array klasses gathered for dynamic archive: %d\", DynamicArchive::num_array_klasses());\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -259,1 +259,0 @@\n-  virtual void iterate_primitive_array_klasses(MetaspaceClosure* it) = 0;\n@@ -345,1 +344,0 @@\n-  void gather_array_klasses();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  void gather_array_klasses();\n@@ -175,0 +176,1 @@\n+    iterate_primitive_array_klasses(it);\n@@ -177,1 +179,1 @@\n-  virtual void iterate_primitive_array_klasses(MetaspaceClosure* it) {\n+  void iterate_primitive_array_klasses(MetaspaceClosure* it) {\n@@ -192,1 +194,2 @@\n-      if (ak != nullptr && (ak->dimension() > 1)) {\n+      if (ak != nullptr) {\n+        assert(ak->dimension() > 1, \"sanity\");\n@@ -355,0 +358,20 @@\n+void DynamicArchiveBuilder::gather_array_klasses() {\n+  for (int i = 0; i < klasses()->length(); i++) {\n+    if (klasses()->at(i)->is_objArray_klass()) {\n+      ObjArrayKlass* oak = ObjArrayKlass::cast(klasses()->at(i));\n+      Klass* elem = oak->element_klass();\n+      if (MetaspaceShared::is_shared_static(elem)) {\n+        \/\/ Only capture the array klass whose element_klass is in the static archive.\n+        \/\/ During run time, setup (see DynamicArchive::setup_array_klasses()) is needed\n+        \/\/ so that the element_klass can find its array klasses from the dynamic archive.\n+        DynamicArchive::append_array_klass(oak);\n+      } else {\n+        \/\/ The element_klass and its array klasses are in the same archive.\n+        assert(!MetaspaceShared::is_shared_static(oak),\n+          \"we should not gather klasses that are already in the static archive\");\n+      }\n+    }\n+  }\n+  log_debug(cds)(\"Total array klasses gathered for dynamic archive: %d\", DynamicArchive::num_array_klasses());\n+}\n+\n@@ -376,2 +399,2 @@\n-GrowableArray<ArrayKlass*>* DynamicArchive::_array_klasses = nullptr;\n-Array<ArrayKlass*>* DynamicArchive::_dynamic_archive_array_klasses = nullptr;\n+GrowableArray<ObjArrayKlass*>* DynamicArchive::_array_klasses = nullptr;\n+Array<ObjArrayKlass*>* DynamicArchive::_dynamic_archive_array_klasses = nullptr;\n@@ -379,1 +402,1 @@\n-void DynamicArchive::append_array_klass(ArrayKlass* ak) {\n+void DynamicArchive::append_array_klass(ObjArrayKlass* ak) {\n@@ -381,1 +404,1 @@\n-    _array_klasses = new (mtClassShared) GrowableArray<ArrayKlass*>(50, mtClassShared);\n+    _array_klasses = new (mtClassShared) GrowableArray<ObjArrayKlass*>(50, mtClassShared);\n@@ -392,1 +415,1 @@\n-        ArchiveBuilder::new_ro_array<ArrayKlass*>(num_array_klasses);\n+        ArchiveBuilder::new_ro_array<ObjArrayKlass*>(num_array_klasses);\n@@ -394,3 +417,3 @@\n-      ArrayKlass* ak = _array_klasses->at(i);\n-      _dynamic_archive_array_klasses->at_put(i, ak);\n-      builder->write_pointer_in_buffer(_dynamic_archive_array_klasses->adr_at(i), ak);\n+      ObjArrayKlass* oak = _array_klasses->at(i);\n+      _dynamic_archive_array_klasses->at_put(i, oak);\n+      builder->write_pointer_in_buffer(_dynamic_archive_array_klasses->adr_at(i), oak);\n@@ -404,21 +427,9 @@\n-      ArrayKlass* ak = _dynamic_archive_array_klasses->at(i);\n-      Klass* bk = ObjArrayKlass::cast(ak)->bottom_klass();\n-      assert(MetaspaceShared::is_shared_static((void*)bk), \"bottom_klass should be in static archive\");\n-      while (ak->dimension() > 1) {\n-        Klass* ld = ak->lower_dimension();\n-        assert(ld != nullptr, \"unexpected null lower_dimension klass\");\n-        assert(MetaspaceShared::is_in_shared_metaspace((void*)ld), \"lower_dimension klass should be in CDS archive\");\n-        ld = ArrayKlass::cast(ld)->lower_dimension();\n-        if (ld != nullptr) {\n-          ak = ArrayKlass::cast(ld);\n-        }  else {\n-          break;\n-        }\n-      }\n-      assert(ak->dimension() >= 1, \"sanity\");\n-      int target_dim = ak->dimension() - 1;\n-      assert(target_dim >= 0, \"sanity\");\n-      if (target_dim == 0) {\n-        \/\/ Point InstanceKlass::_array_klasses to the one-dimensional archived ObjArrayKlass\n-        InstanceKlass* ik = InstanceKlass::cast(bk);\n-        ik->release_set_array_klasses(ObjArrayKlass::cast(ak));\n+      ObjArrayKlass* oak = _dynamic_archive_array_klasses->at(i);\n+      assert(!oak->is_typeArray_klass(), \"all type array classes must be in static archive\");\n+\n+      Klass* elm = oak->element_klass();\n+      assert(MetaspaceShared::is_shared_static((void*)elm), \"must be\");\n+\n+      if (elm->is_instance_klass()) {\n+        assert(InstanceKlass::cast(elm)->array_klasses() == nullptr, \"must be\");\n+        InstanceKlass::cast(elm)->release_set_array_klasses(oak);\n@@ -426,5 +437,3 @@\n-        ArrayKlass* fixup_oak = ArrayKlass::cast(bk->array_klass_or_null(target_dim));\n-        assert(fixup_oak != nullptr, \"sanity\");\n-        assert(MetaspaceShared::is_shared_static((void*)fixup_oak),\n-          \"ObjArrayKlass to be fixed should be in static CDS archive\");\n-        fixup_oak->set_higher_dimension(ak);\n+        assert(elm->is_array_klass(), \"sanity\");\n+        assert(ArrayKlass::cast(elm)->higher_dimension() == nullptr, \"must be\");\n+        ArrayKlass::cast(elm)->set_higher_dimension(oak);\n@@ -445,1 +454,1 @@\n-      ArrayKlass* k = ArchiveBuilder::current()->get_buffered_addr(_array_klasses->at(i));\n+      ObjArrayKlass* k = ArchiveBuilder::current()->get_buffered_addr(_array_klasses->at(i));\n@@ -461,15 +470,0 @@\n-void DynamicArchive::log_array_class_load(JavaThread* thread, Klass* k) {\n-  LogTarget(Debug, class, load, cds) lt;\n-  if (lt.is_enabled() && MetaspaceShared::is_in_shared_metaspace((void*)k)) {\n-    LogStream ls(lt);\n-    ResourceMark rm(thread);\n-    ls.print(\"%s\", k->external_name());\n-    if (MetaspaceShared::is_shared_dynamic((void*)k)) {\n-      ls.print(\" source: shared objects file (top)\");\n-    } else {\n-      ls.print(\" source: shared objects file\");\n-    }\n-    ls.cr();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":46,"deletions":52,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  static GrowableArray<ArrayKlass*>* _array_klasses;\n-  static Array<ArrayKlass*>* _dynamic_archive_array_klasses;\n+  static GrowableArray<ObjArrayKlass*>* _array_klasses;\n+  static Array<ObjArrayKlass*>* _dynamic_archive_array_klasses;\n@@ -74,1 +74,1 @@\n-  static void append_array_klass(ArrayKlass* oak);\n+  static void append_array_klass(ObjArrayKlass* oak);\n@@ -79,1 +79,0 @@\n-  static void log_array_class_load(JavaThread* thread, Klass* k);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -473,1 +473,0 @@\n-  virtual void iterate_primitive_array_klasses(MetaspaceClosure* it) { ShouldNotReachHere(); }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  LOG_TAG(array) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/metaspaceShared.hpp\"\n@@ -99,0 +100,1 @@\n+  log_array_class_load(this);\n@@ -183,0 +185,1 @@\n+    log_array_class_load(ak);\n@@ -198,0 +201,15 @@\n+void ArrayKlass::log_array_class_load(Klass* k) {\n+  LogTarget(Debug, class, load, array) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ResourceMark rm;\n+    ls.print(\"%s\", k->name()->as_klass_external_name());\n+    if (MetaspaceShared::is_shared_dynamic((void*)k)) {\n+      ls.print(\" source: shared objects file (top)\");\n+    } else if (MetaspaceShared::is_shared_static((void*)k)) {\n+      ls.print(\" source: shared objects file\");\n+    }\n+    ls.cr();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+  void log_array_class_load(Klass* k);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,3 +47,0 @@\n-#if INCLUDE_CDS\n-#include \"cds\/dynamicArchive.hpp\"\n-#endif\n@@ -318,8 +315,1 @@\n-  if (dim == n) {\n-#if INCLUDE_CDS\n-  if (UseSharedSpaces) {\n-    DynamicArchive::log_array_class_load(THREAD, this);\n-  }\n-#endif\n-    return this;\n-  }\n+  if (dim == n) return this;\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n-                     output\/\/.shouldMatch(\"cds.class.*klasses.*array \\\\[LArrayKlassesApp;\")\n+                     output.shouldMatch(\"cds.class.*klasses.*array \\\\[LArrayKlassesApp;\")\n+                           .shouldMatch(\"cds.class.*klasses.*array \\\\[\\\\[LArrayKlassesApp;\")\n@@ -65,1 +66,1 @@\n-             \"-Xlog:class+load,class+load+cds=debug,cds+dynamic=debug,cds=debug\",\n+             \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug\",\n@@ -69,0 +70,2 @@\n+                           .shouldContain(\"[LArrayKlassesApp; source: shared objects file (top)\")\n+                           .shouldContain(\"[[LArrayKlassesApp; source: shared objects file (top)\")\n@@ -91,1 +94,1 @@\n-             \"-Xlog:class+load,class+load+cds=debug,cds+dynamic=debug,cds=debug\",\n+             \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug\",\n@@ -95,0 +98,2 @@\n+                           .shouldContain(\"[Ljava.util.Date; source: shared objects file (top)\")\n+                           .shouldContain(\"[[Ljava.util.Date; source: shared objects file (top)\")\n@@ -115,1 +120,1 @@\n-             \"-Xlog:class+load,class+load+cds=debug,cds+dynamic=debug,cds=debug\",\n+             \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug\",\n@@ -119,0 +124,1 @@\n+                           .shouldContain(\"[[J source: shared objects file (top)\")\n@@ -140,1 +146,1 @@\n-             \"-Xlog:class+load,class+load+cds=debug,cds+dynamic=debug,cds=debug\",\n+             \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug\",\n@@ -143,1 +149,3 @@\n-                     output.shouldContain(\"[[[[Ljava.lang.Integer; source: shared objects file (top)\")\n+                     output.shouldContain(\"[[Ljava.lang.Integer; source: shared objects file (top)\")\n+                           .shouldContain(\"[[[Ljava.lang.Integer; source: shared objects file (top)\")\n+                           .shouldContain(\"[[[[Ljava.lang.Integer; source: shared objects file (top)\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArrayKlasses.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}