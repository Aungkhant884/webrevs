{"files":[{"patch":"@@ -754,3 +754,5 @@\n-        \/\/ TODO: userinfo deprecated. Needs to be removed\n-        hdrs.setHeader(\":authority\", uri.getAuthority());\n-        \/\/ TODO: ensure header names beginning with : not in user headers\n+        if(uri.getHost() != null && uri.getPort() != -1) {\n+            hdrs.setHeader(\":authority\", uri.getHost() + \":\" + uri.getPort());\n+        } else if (uri.getHost()!=null) {\n+            hdrs.setHeader(\":authority\", uri.getHost());\n+        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2022, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.net.SimpleSSLContext;\n+import org.testng.annotations.Test;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+\n+\/**\n+ * @test\n+ * @bug 8292876\n+ * @library \/test\/lib server\n+ * @modules java.base\/sun.net.www.http\n+ *          java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ * @run testng UserInfoTest\n+ *\/\n+\n+public class UserInfoTest {\n+\n+    static class Http2TestHandler implements Http2Handler{\n+        @Override\n+        public void handle(Http2TestExchange e) throws IOException {\n+            InputStream is = e.getRequestBody();\n+            StringBuilder sb = new StringBuilder();\n+            for (int ch; (ch = is.read()) != -1; ) {\n+                sb.append((char) ch);\n+            }\n+            is.readAllBytes();\n+            is.close();\n+            if(e.getRequestURI().getAuthority().contains(\"user@\")){\n+                e.sendResponseHeaders(500, -1);\n+            } else {\n+                e.sendResponseHeaders(200, -1);\n+            }\n+        }\n+    }\n+\n+    private static Http2TestServer createServer(SSLContext sslContext) throws Exception {\n+        Http2TestServer http2TestServer = new Http2TestServer(\"localhost\",true, sslContext);\n+        Http2TestHandler handler = new Http2TestHandler();\n+        http2TestServer.addHandler(handler, \"\/\");\n+        return http2TestServer;\n+    }\n+\n+    @Test\n+    public void main() throws Exception {\n+        SSLContext sslContext = new SimpleSSLContext().get();\n+        Http2TestServer server = createServer(sslContext);\n+        int port = server.getAddress().getPort();\n+\n+        server.start();\n+\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .sslContext(sslContext)\n+                .build();\n+\n+        URI uri = new URI(\"https:\/\/user@127.0.0.1:\" + Integer.toString(port));\n+\n+        HttpRequest request = HttpRequest.newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+\n+        if(response.statusCode()==500){\n+            throw new RuntimeException(\"Test Failed : \" + response.uri().getAuthority());\n+        }\n+        server.stop();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/UserInfoTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}