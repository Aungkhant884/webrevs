{"files":[{"patch":"@@ -43,1 +43,1 @@\n-    static class XServer extends Thread {\n+    static class XServer extends Thread implements AutoCloseable {\n@@ -45,2 +45,2 @@\n-        ServerSocket serverSocket;\n-        OutputStream outputStream;\n+        volatile ServerSocket serverSocket;\n+        volatile Socket clientSocket;\n@@ -48,2 +48,4 @@\n-        XServer (ServerSocket socket) {\n-            serverSocket = socket;\n+        XServer (InetAddress address, Integer port) throws IOException {\n+            ServerSocket serversocket = new ServerSocket();\n+            serversocket.bind(new InetSocketAddress(address, port));\n+            this.serverSocket = serversocket;\n@@ -53,1 +55,0 @@\n-            try {\n@@ -55,0 +56,1 @@\n+            try {\n@@ -56,1 +58,1 @@\n-                Socket socket = null;\n+                clientSocket = null;\n@@ -63,1 +65,1 @@\n-                    if (socket != null) {\n+                    if (clientSocket != null) {\n@@ -65,2 +67,2 @@\n-                                socket.getInetAddress().getHostAddress(),\n-                                socket.getPort()\n+                                clientSocket.getInetAddress().getHostAddress(),\n+                                clientSocket.getPort()\n@@ -69,1 +71,1 @@\n-                            socket.close();\n+                            clientSocket.close();\n@@ -78,3 +80,1 @@\n-\n-                    socket = serverSocket.accept();\n-\n+                    clientSocket = serverSocket.accept();\n@@ -83,1 +83,1 @@\n-                    clientBytes.write(socket.getInputStream().readNBytes(getRequest1stLine.getBytes().length));\n+                    clientBytes.write(clientSocket.getInputStream().readNBytes(getRequest1stLine.getBytes().length));\n@@ -86,2 +86,5 @@\n-\n-                OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream = socket.getOutputStream());\n+            }\n+            catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+            try (OutputStreamWriter outputStreamWriter = new OutputStreamWriter(clientSocket.getOutputStream())) {\n@@ -101,1 +104,2 @@\n-            } catch (Exception e) {\n+            }\n+            catch (Exception e) {\n@@ -103,2 +107,0 @@\n-            } finally {\n-                try {if (outputStream != null) { outputStream.close(); }} catch (IOException e) {}\n@@ -107,0 +109,7 @@\n+\n+        @Override\n+        public void close() throws Exception {\n+            clientSocket.close();\n+            serverSocket.close();\n+        }\n+\n@@ -112,1 +121,0 @@\n-\n@@ -114,2 +122,0 @@\n-        final ServerSocket serversocket = new ServerSocket();\n-        serversocket.bind(new InetSocketAddress(loopback, port));\n@@ -117,2 +123,1 @@\n-        try {\n-            XServer server = new XServer(serversocket);\n+        try (XServer server = new XServer(loopback,port)) {\n@@ -138,6 +143,0 @@\n-        } catch (IOException e) {\n-            throw new RuntimeException (e);\n-        } catch (NullPointerException e) {\n-            throw new RuntimeException (e);\n-        } finally {\n-            serversocket.close();\n@@ -145,0 +144,4 @@\n+        catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveStream\/KeepAliveStreamCloseWithWrongContentLength.java","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"}]}