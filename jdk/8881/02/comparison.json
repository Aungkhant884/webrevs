{"files":[{"patch":"@@ -225,2 +225,2 @@\n-        static byte[] basicTypesOrd(Class<?>[] types) {\n-            byte[] ords = new byte[types.length];\n+        static int[] basicTypesOrd(Class<?>[] types) {\n+            int[] ords = new int[types.length];\n@@ -228,1 +228,1 @@\n-                ords[i] = (byte)basicType(types[i]).ordinal();\n+                ords[i] = basicType(types[i]).ordinal();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,12 +74,9 @@\n-            FILTER_RETURN_TO_ZERO = 7,\n-            COLLECT_ARGS = 8,\n-            COLLECT_ARGS_TO_VOID = 9,\n-            COLLECT_ARGS_TO_ARRAY = 10,\n-            FOLD_ARGS = 11,\n-            FOLD_ARGS_TO_VOID = 12,\n-            PERMUTE_ARGS = 13,\n-            LOCAL_TYPES = 14,\n-            FOLD_SELECT_ARGS = 15,\n-            FOLD_SELECT_ARGS_TO_VOID = 16,\n-            FILTER_SELECT_ARGS = 17,\n-            REPEAT_FILTER_ARGS = 18;\n+            COLLECT_ARGS = 7,\n+            COLLECT_ARGS_TO_VOID = 8,\n+            REPEAT_FILTER_ARGS = 9,\n+            FOLD_ARGS = 10,\n+            FOLD_ARGS_TO_VOID = 11,\n+            PERMUTE_ARGS = 12,\n+            LOCAL_TYPES = 13,\n+            FILTER_SELECT_ARGS = 14,\n+            FOLD_SELECT_ARGS = 15;\n@@ -157,0 +154,1 @@\n+            assert(packedBytes(fullBytes) == 0);\n@@ -162,0 +160,1 @@\n+            assert(fullBytes == null || packedBytes == 0);\n@@ -170,0 +169,6 @@\n+\n+        private static int ival(int b) {\n+            assert((b & 0xFF) == b);  \/\/ incoming value must fit in *unsigned* byte\n+            return b;\n+        }\n+\n@@ -189,1 +194,0 @@\n-        private static final byte[] NO_BYTES = {};\n@@ -191,1 +195,10 @@\n-            return ofBothArrays(kind, b123, NO_BYTES);\n+            long packedBytes = packedBytes(kind, b123);\n+            if (packedBytes != 0) {\n+                return new TransformKey(packedBytes);\n+            }\n+            byte[] fullBytes = new byte[b123.length + 1];\n+            fullBytes[0] = kind;\n+            for (int i = 0; i < b123.length; i++) {\n+                fullBytes[i + 1] = TransformKey.bval(b123[i]);\n+            }\n+            return new TransformKey(fullBytes);\n@@ -193,3 +206,6 @@\n-\n-        static TransformKey of(byte kind, int b1, int[] b23456) {\n-            byte[] fullBytes = new byte[b23456.length + 2];\n+        static TransformKey of(byte kind, int b1, int... b234) {\n+            long packedBytes = packedBytes(kind, b1, b234);\n+            if (packedBytes != 0) {\n+                return new TransformKey(packedBytes);\n+            }\n+            byte[] fullBytes = new byte[b234.length + 2];\n@@ -198,2 +214,2 @@\n-            for (int i = 0; i < b23456.length; i++) {\n-                fullBytes[i + 2] = TransformKey.bval(b23456[i]);\n+            for (int i = 0; i < b234.length; i++) {\n+                fullBytes[i + 2] = TransformKey.bval(b234[i]);\n@@ -201,9 +217,1 @@\n-            long packedBytes = packedBytes(fullBytes);\n-            if (packedBytes != 0)\n-                return new TransformKey(packedBytes);\n-            else\n-                return new TransformKey(fullBytes);\n-        }\n-\n-        static TransformKey of(byte kind, int b1, int b2, byte[] b345) {\n-            return ofBothArrays(kind, new int[]{ b1, b2 }, b345);\n+            return new TransformKey(fullBytes);\n@@ -211,6 +219,4 @@\n-        private static TransformKey ofBothArrays(byte kind, int[] b123, byte[] b456) {\n-            byte[] fullBytes = new byte[1 + b123.length + b456.length];\n-            int i = 0;\n-            fullBytes[i++] = bval(kind);\n-            for (int bv : b123) {\n-                fullBytes[i++] = bval(bv);\n+        static TransformKey of(byte kind, int b1, int b2, int[] b3456) {\n+            long packedBytes = packedBytes(kind, b1, b2, b3456);\n+            if (packedBytes != 0) {\n+                return new TransformKey(packedBytes);\n@@ -218,2 +224,6 @@\n-            for (byte bv : b456) {\n-                fullBytes[i++] = bv;\n+            byte[] fullBytes = new byte[b3456.length + 3];\n+            fullBytes[0] = kind;\n+            fullBytes[1] = bval(b1);\n+            fullBytes[2] = bval(b2);\n+            for (int i = 0; i < b3456.length; i++) {\n+                fullBytes[i + 3] = TransformKey.bval(b3456[i]);\n@@ -221,5 +231,1 @@\n-            long packedBytes = packedBytes(fullBytes);\n-            if (packedBytes != 0)\n-                return new TransformKey(packedBytes);\n-            else\n-                return new TransformKey(fullBytes);\n+            return new TransformKey(fullBytes);\n@@ -234,0 +240,46 @@\n+        private static long packedBytes(byte b0, int b1, int b2, int[] b345) {\n+            if (b345.length + 3 > PACKED_BYTE_MAX_LENGTH)\n+                return 0;\n+            long pb = 0;\n+            int bitset = b0 | b1 | b2;\n+            for (int i = 0; i < b345.length; i++) {\n+                int b = ival(b345[i]);\n+                bitset |= b;\n+                pb |= (long)b << ((i + 3) * PACKED_BYTE_SIZE);\n+            }\n+            if (!inRange(bitset))\n+                return 0;\n+            pb = pb | b2 << (2 * PACKED_BYTE_SIZE) | b1 << PACKED_BYTE_SIZE | b0;\n+            return pb;\n+        }\n+        private static long packedBytes(byte b0, int b1, int[] b234) {\n+            if (b234.length + 2 > PACKED_BYTE_MAX_LENGTH)\n+                return 0;\n+            long pb = 0;\n+            int bitset = b0 | b1;\n+            for (int i = 0; i < b234.length; i++) {\n+                int b = ival(b234[i]);\n+                bitset |= b;\n+                pb |= (long)b << ((i + 2) * PACKED_BYTE_SIZE);\n+            }\n+            if (!inRange(bitset))\n+                return 0;\n+            pb = pb | b1 << PACKED_BYTE_SIZE | b0;\n+            return pb;\n+        }\n+        private static long packedBytes(byte b0, int[] b123) {\n+            if (b123.length + 1 > PACKED_BYTE_MAX_LENGTH)\n+                return 0;\n+            long pb = 0;\n+            int bitset = b0;\n+            for (int i = 0; i < b123.length; i++) {\n+                int b = ival(b123[i]);\n+                bitset |= b;\n+                pb |= (long)b << ((i + 1) * PACKED_BYTE_SIZE);\n+            }\n+            if (!inRange(bitset))\n+                return 0;\n+            pb = pb | b0;\n+            return pb;\n+        }\n+\n@@ -323,1 +375,0 @@\n-                assert(fullBytes == null);\n@@ -639,1 +690,1 @@\n-        byte[] newTypes = BasicType.basicTypesOrd(collectorType.ptypes());\n+        int[] newTypes = BasicType.basicTypesOrd(collectorType.ptypes());\n@@ -890,2 +941,1 @@\n-        byte kind = (constantZero ? FILTER_RETURN_TO_ZERO : FILTER_RETURN);\n-        TransformKey key = TransformKey.of(kind, newType.ordinal());\n+        TransformKey key = TransformKey.of(FILTER_RETURN, constantZero ? (byte) 1 : (byte)0, newType.ordinal());\n@@ -1005,2 +1055,1 @@\n-        byte kind = (dropResult ? FOLD_SELECT_ARGS_TO_VOID : FOLD_SELECT_ARGS);\n-        TransformKey key = TransformKey.of(kind, foldPos, argPositions);\n+        TransformKey key = TransformKey.of(FOLD_SELECT_ARGS, foldPos, dropResult ? 1 : 0, argPositions);\n@@ -1009,1 +1058,1 @@\n-            assert(form.arity == lambdaForm.arity - (kind == FOLD_SELECT_ARGS ? 1 : 0));\n+            assert(form.arity == lambdaForm.arity - (dropResult ? 0 : 1));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":97,"deletions":48,"binary":false,"changes":145,"status":"modified"}]}