{"files":[{"patch":"@@ -497,1 +497,1 @@\n-                                    return new JarLoader(nestedUrl, jarHandler, lmap, acc);\n+                                    return new JarLoader(nestedUrl, jarHandler, lmap, loaders, acc);\n@@ -502,1 +502,1 @@\n-                                return new JarLoader(url, jarHandler, lmap, acc);\n+                                return new JarLoader(url, jarHandler, lmap, loaders, acc);\n@@ -717,0 +717,1 @@\n+        private final List<Loader> loaders;\n@@ -729,0 +730,1 @@\n+                          List<Loader> loaders,\n@@ -736,0 +738,1 @@\n+            this.loaders = loaders;\n@@ -1011,1 +1014,1 @@\n-                                            lmap, acc);\n+                                            lmap, loaders, acc);\n@@ -1025,1 +1028,2 @@\n-\n+                            \/\/ add the Loader to the search path and track it for closing\n+                            loaders.add(newLoader);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.util.JarBuilder;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * @test\n+ * @bug 8227020\n+ * @summary Tests that URLClassLoader properly closes resources corresponding to jar files loaded\n+ * from those listed in META-INF\/INDEX.LIST\n+ * @library \/test\/lib\n+ * @run testng\/othervm -Djdk.net.URLClassPath.enableJarIndex=true IndexedJarResourceLeakTest\n+ *\/\n+public class IndexedJarResourceLeakTest {\n+\n+    private static Path jarFile;\n+    private static Path siblingJarFile;\n+    private static final String RESOURCE_CONTENT = \"hello\";\n+    private static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n+\n+    @BeforeTest\n+    public void beforeTest() throws Exception {\n+        jarFile = Files.createTempFile(CWD, \"JDK-8227020-\", \".jar\");\n+        siblingJarFile = Files.createTempFile(CWD, \"JDK-8227020-sibling\", \".jar\");\n+        \/\/ create jar index which will be as follows:\n+        \/\/ JarIndex-Version: 1.0\n+        \/\/\n+        \/\/ sibling.jar\n+        \/\/ hello\n+        String jarIndexContent = \"JarIndex-Version: 1.0 \\n\\n\"\n+                + siblingJarFile.getFileName().toString() + \"\\n\"\n+                + \"hello\\n\\n\";\n+        \/\/ create a jar with a jar index which contains an index entry for a sibling jar resources\n+        new JarBuilder(jarFile.toString())\n+                .addEntry(\"META-INF\/INDEX.LIST\", jarIndexContent.getBytes(StandardCharsets.UTF_8))\n+                .build();\n+        \/\/ create the sibling jar with the hello\/ dir and hello\/hello.txt entries\n+        new JarBuilder(siblingJarFile.toString())\n+                .addEntry(\"hello\/\", new byte[0])\n+                .addEntry(\"hello\/hello.txt\", RESOURCE_CONTENT.getBytes(StandardCharsets.UTF_8))\n+                .build();\n+    }\n+\n+    @AfterTest\n+    public void afterTest() throws IOException {\n+        Files.deleteIfExists(jarFile);\n+        Files.deleteIfExists(siblingJarFile);\n+    }\n+\n+    \/**\n+     * Creates a URLClassLoader with a path to one single jar file containing the\n+     * META-INF\/INDEX.LIST. The index points to a sibling jar file for a particular\n+     * resource. The test then loads that resource through the URLClassLoader and\n+     * expects the resource to be found. Finally, the URLClassLoader is closed\n+     * and both the jar files (one that was passed to the URL classpath and\n+     * the other sibling jar which was listed in the index) are deleted.\n+     * The test expects that the deletion of these jar files works fine after the\n+     * URLClassLoader is closed.\n+     *\/\n+    @Test\n+    public void testIndexedResource() throws Exception {\n+        \/\/ Create a URLClassLoader with just the jar file in the classpath.\n+        \/\/ The sibling jar isn't added in the classpath list and instead is\n+        \/\/ expected to be picked up through the META-INF\/INDEX.LIST entry\n+        try (URLClassLoader urlClassLoader = new URLClassLoader(\n+                new URL[]{jarFile.toUri().toURL()}, null)) {\n+            \/\/ load a resource that is part of the sibling jar\n+            try (InputStream is = urlClassLoader.getResourceAsStream(\"hello\/hello.txt\")) {\n+                Assert.assertNotNull(is, \"Missing resource hello\/hello.txt from URLClassLoader\");\n+                String content = new String(is.readAllBytes(), StandardCharsets.UTF_8);\n+                Assert.assertEquals(content, RESOURCE_CONTENT,\n+                        \"Unexpected content in resource returned by classloader\");\n+            }\n+        }\n+        \/\/ now attempt deleting each of these jars and expect the deletion to succeed\n+        Files.delete(jarFile);\n+        System.out.println(\"Successfully deleted \" + jarFile);\n+        Files.delete(siblingJarFile);\n+        System.out.println(\"Successfully deleted \" + siblingJarFile);\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/IndexedJarResourceLeakTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}