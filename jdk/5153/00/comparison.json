{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/serial\/serialStringDedup.hpp\"\n@@ -145,1 +146,2 @@\n-    _should_allocate_from_space(false)\n+    _should_allocate_from_space(false),\n+    _string_dedup_requests()\n@@ -604,0 +606,2 @@\n+  _string_dedup_requests.flush();\n+\n@@ -708,0 +712,1 @@\n+  bool new_obj_is_tenured = false;\n@@ -715,0 +720,1 @@\n+    new_obj_is_tenured = true;\n@@ -731,0 +737,5 @@\n+  if (SerialStringDedup::is_candidate_from_evacuation(obj, new_obj_is_tenured)) {\n+    \/\/ Record old; request adds a new weak reference, which reference\n+    \/\/ processing expects to refer to a from-space object.\n+    _string_dedup_requests.add(old);\n+  }\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -142,0 +143,2 @@\n+  StringDedup::Requests _string_dedup_requests;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,0 +115,2 @@\n+  MarkSweep::_string_dedup_requests.flush();\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+StringDedup::Requests  MarkSweep::_string_dedup_requests;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -115,0 +116,2 @@\n+  static StringDedup::Requests _string_dedup_requests;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/serial\/serialStringDedup.hpp\"\n@@ -40,0 +41,6 @@\n+  if (StringDedup::is_enabled() &&\n+      java_lang_String::is_instance_inlined(obj) &&\n+      SerialStringDedup::is_candidate_from_mark(obj)) {\n+    _string_dedup_requests.add(obj);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -102,0 +102,12 @@\n+\n+void SerialHeap::safepoint_synchronize_begin() {\n+  if (UseStringDeduplication) {\n+    SuspendibleThreadSet::synchronize();\n+  }\n+}\n+\n+void SerialHeap::safepoint_synchronize_end() {\n+  if (UseStringDeduplication) {\n+    SuspendibleThreadSet::desynchronize();\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -83,0 +83,3 @@\n+\n+  virtual void safepoint_synchronize_begin();\n+  virtual void safepoint_synchronize_end();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/serial\/serialHeap.hpp\"\n+#include \"gc\/serial\/serialStringDedup.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+\n+bool SerialStringDedup::is_candidate_from_mark(oop java_string) {\n+  \/\/ Candidate if string is being evacuated from young to old but has not\n+  \/\/ reached the deduplication age threshold, i.e. has not previously been a\n+  \/\/ candidate during its life in the young generation.\n+  return SerialHeap::heap()->young_gen()->is_in_reserved(java_string) &&\n+         StringDedup::is_below_threshold_age(java_string->age());\n+}\n","filename":"src\/hotspot\/share\/gc\/serial\/serialStringDedup.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_SERIAL_STRINGDEDUP_HPP\n+#define SHARE_GC_SERIAL_STRINGDEDUP_HPP\n+\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"memory\/allStatic.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+class SerialStringDedup : AllStatic {\n+public:\n+\n+  \/\/ Candidate selection policy for full GC, returning true if the given\n+  \/\/ String is a candidate for string deduplication.\n+  \/\/ precondition: StringDedup::is_enabled()\n+  \/\/ precondition: java_string is a Java String\n+  static bool is_candidate_from_mark(oop java_string);\n+\n+  \/\/ Candidate selection policy for young during evacuation.\n+  \/\/ If to is young then age should be the new (survivor's) age.\n+  \/\/ if to is old then age should be the age of the copied from object.\n+  static bool is_candidate_from_evacuation(oop java_string,\n+                                           bool obj_is_tenured) {\n+    return StringDedup::is_enabled() &&\n+           java_lang_String::is_instance_inlined(java_string) &&\n+           (obj_is_tenured ?\n+            StringDedup::is_below_threshold_age(java_string->age()) :\n+            StringDedup::is_threshold_age(java_string->age()));\n+  }\n+};\n+#endif \/\/ SHARE_GC_SERIAL_STRINGDEDUP_HPP\n","filename":"src\/hotspot\/share\/gc\/serial\/serialStringDedup.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -119,1 +119,1 @@\n-  } else if (!UseG1GC && !UseShenandoahGC && !UseZGC) {\n+  } else if (!UseG1GC && !UseShenandoahGC && !UseZGC && !UseSerialGC) {\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationAgeThreshold\n+ * @summary Test string deduplication age threshold\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationAgeThreshold.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationFullGC\n+ * @summary Test string deduplication during full GC\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationFullGC Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationFullGC.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationInterned\n+ * @summary Test string deduplication of interned strings\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationInterned Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationInterned.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationPrintOptions\n+ * @summary Test string deduplication print options\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationPrintOptions Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationPrintOptions.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationTableResize\n+ * @summary Test string deduplication table resize\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationTableResize Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTableResize.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,13 @@\n+\/*\n+ * @test TestStringDeduplicationYoungGC\n+ * @summary Test string deduplication during young GC\n+ * @bug 8029075\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationYoungGC Serial\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationYoungGC.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}