{"files":[{"patch":"@@ -113,6 +113,1 @@\n-                if (key.length() == 2) {\n-                    pushStringEntry(qName, attributes,\n-                        CLDRConverter.LOCALE_KEY_PREFIX + key);\n-                } else {\n-                    pushIgnoredContainer(qName);\n-                }\n+                pushStringEntry(qName, attributes, CLDRConverter.LOCALE_KEY_PREFIX + key);\n@@ -127,7 +122,3 @@\n-                if (key.length() == 2) {\n-                    pushStringEntry(qName, attributes,\n-                    CLDRConverter.LOCALE_TYPE_PREFIX + key + \".\" +\n-                    attributes.getValue(\"type\"));\n-                } else {\n-                    pushIgnoredContainer(qName);\n-                }\n+                pushStringEntry(qName, attributes,\n+                CLDRConverter.LOCALE_TYPE_PREFIX + key + \".\" +\n+                attributes.getValue(\"type\"));\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/LDMLParseHandler.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import sun.util.locale.TransformedContentExtension;\n@@ -235,0 +236,45 @@\n+ * <h2><a id=\"t_extension\">Transformed Content extension<\/a><\/h2>\n+ * <a href=\"https:\/\/datatracker.ietf.org\/doc\/html\/rfc6497\">RFC 6497<\/a>\n+ * specifies an extension to BCP 47 that provides subtags for specifying\n+ * the source language or script of transformed content. Transformed content\n+ * is content that has been transformed, including text that has been\n+ * transliterated, transcribed, translated, or in some other way\n+ * influenced by the source locale. For example,\n+ * <table class=\"striped\">\n+ * <caption style=\"display:none\">Transformed Content extension examples<\/caption>\n+ * <thead>\n+ * <tr><th scope=\"col\">Language Tag<\/th>\n+ *     <th scope=\"col\">Description<\/th><\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">ja-t-it<\/th>\n+ *     <td>The content is Japanese, transformed from Italian.<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">ja-Kana-t-it<\/th>\n+ *     <td>The content is Japanese Katakana transformed from Italian.<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">und-Latn-t-und-cyrl<\/th>\n+ *     <td>The content is in the Latin script, transformed from the Cyrillic script.<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">und-Cyrl-t-und-latn-m0-ungegn-2007<\/th>\n+ *     <td>The content is in Cyrillic, transformed from Latin, according to a UNGEGN specification dated 2007.<\/td><\/tr>\n+ * <\/tbody>\n+ * <\/table>\n+ * <p>The transformed content extension contains an optional well-formed BCP47 {@code source}\n+ * language tag followed by zero or more {@code field}s. At least the {@code source} language tag\n+ * or one {@code field} must be included. See the example above. Each {@code field} consists of a\n+ * field separator (one alpha + one digit), followed by one or more subtags of the length 3 to 8,\n+ * each delimited by a hyphen.\n+ * <p>The transformed content information {@code source} language tag and {@code fields} are returned\n+ * from a {@code Locale}, either via {@link #getExtension(char)} with\n+ * {@link #TRANSFORMED_CONTENT_EXTENSION} which returns the string\n+ * representation of the transformed content, or via the methods {@link #getTransformedContentSource()}\n+ * and {@link #getTransformedContentFields()}.\n+ * <p>To create a locale object that contains the transformed content extension, either use\n+ * the factory method {@link #forLanguageTag(String)} or use\n+ * {@link Locale.Builder#setExtension(char, String)} with\n+ * {@link #TRANSFORMED_CONTENT_EXTENSION}. Although the Unicode Consortium maintains the valid field\n+ * separators and their valid subtags in <a href=\"http:\/\/www.unicode.org\/reports\/tr35\/#BCP47_T_Extension\">\n+ *     3.7 Unicode BCP 47 T Extension<\/a>, these methods do not check the validity,\n+ * only the well-formed check is done on creating a locale object with T extension.\n+ * <p>For more detail about the Transformed Content extension, refer to\n+ * <a href=\"https:\/\/datatracker.ietf.org\/doc\/html\/rfc6497\">\n+ *     BCP 47 Extension T - Transformed Content<\/a>\n+ *\n@@ -630,0 +676,9 @@\n+    \/**\n+     * The key for the transformed content extension ('t').\n+     *\n+     * @see #getExtension(char)\n+     * @see Builder#setExtension(char, String)\n+     * @since 20\n+     *\/\n+    public static final char TRANSFORMED_CONTENT_EXTENSION = 't';\n+\n@@ -1375,0 +1430,1 @@\n+     * @see #TRANSFORMED_CONTENT_EXTENSION\n@@ -1452,0 +1508,37 @@\n+    \/**\n+     * Returns the locale representing the source language tag of\n+     * the transformed content extension in this locale, or\n+     * {@code null} if it does not contain it.\n+     *\n+     * @return The locale representing the source language tag\n+     * @since 20\n+     *\/\n+    public Locale getTransformedContentSource() {\n+        if (hasExtensions()) {\n+            return localeExtensions.getTransformedContentSource()\n+                    .map(Locale::forLanguageTag)\n+                    .orElse(null);\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Returns the map of fields in the T extension of this\n+     * locale, or an empty map if it has no T extension fields.\n+     * The returned map contains entries for each field separator\n+     * and its subtags. If there are multiple subtags in the map value,\n+     * subtags are delimited by a hyphen. The returned map is unmodifiable.\n+     *\n+     * @return The map of fields in the T extension\n+     * @since 20\n+     *\/\n+    public Map<String, String> getTransformedContentFields() {\n+        if (hasExtensions()) {\n+            return localeExtensions.getTransformedContentFields().stream()\n+                    .collect(Collectors.toUnmodifiableMap(\n+                        TransformedContentExtension.Field::fsep,\n+                        TransformedContentExtension.Field::fval));\n+        }\n+        return Collections.emptyMap();\n+    }\n+\n@@ -1514,1 +1607,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -1806,1 +1899,6 @@\n-        LocaleExtensions exts = bldr.getLocaleExtensions();\n+        LocaleExtensions exts = null;\n+        try {\n+            exts = bldr.getLocaleExtensions();\n+        } catch (LocaleSyntaxException e) {\n+            \/\/ ignore\n+        }\n@@ -1903,1 +2001,1 @@\n-    public final String getDisplayLanguage() {\n+    public String getDisplayLanguage() {\n@@ -1976,1 +2074,1 @@\n-    public final String getDisplayCountry() {\n+    public String getDisplayCountry() {\n@@ -2026,1 +2124,1 @@\n-    public final String getDisplayVariant() {\n+    public String getDisplayVariant() {\n@@ -2076,1 +2174,1 @@\n-    public final String getDisplayName() {\n+    public String getDisplayName() {\n@@ -2149,1 +2247,0 @@\n-        \/\/ add Unicode extensions\n@@ -2151,6 +2248,32 @@\n-            localeExtensions.getUnicodeLocaleAttributes().stream()\n-                .map(key -> getDisplayString(key, null, inLocale, DISPLAY_UEXT_KEY))\n-                .forEach(names::add);\n-            localeExtensions.getUnicodeLocaleKeys().stream()\n-                .map(key -> getDisplayKeyTypeExtensionString(key, lr, inLocale))\n-                .forEach(names::add);\n+            localeExtensions.getKeys().forEach(key -> {\n+                switch (key) {\n+                    case UNICODE_LOCALE_EXTENSION -> {\n+                        localeExtensions.getUnicodeLocaleAttributes().stream()\n+                                .map(k -> getDisplayString(k, null, inLocale, DISPLAY_UEXT_KEY))\n+                                .forEach(names::add);\n+                        localeExtensions.getUnicodeLocaleKeys().stream()\n+                                .map(k -> getDisplayKeyTypeExtensionString(k, lr, inLocale))\n+                                .forEach(names::add);\n+                    }\n+                    case TRANSFORMED_CONTENT_EXTENSION -> {\n+                        localeExtensions.getTransformedContentSource()\n+                                .ifPresent(sourceLang ->\n+                                    names.add(getDisplayString(String.valueOf(TRANSFORMED_CONTENT_EXTENSION),\n+                                                            null, inLocale, DISPLAY_UEXT_KEY) + \": \" +\n+                                            forLanguageTag(sourceLang).getDisplayName(inLocale)));\n+                        localeExtensions.getTransformedContentFields().stream()\n+                                .map(f -> getDisplayString(f.fsep(), null, inLocale, DISPLAY_UEXT_KEY) + \": \" +\n+                                        Arrays.stream(f.fval().split(\"-\"))\n+                                                .map(v -> getDisplayString(v, f.fsep(), inLocale, DISPLAY_UEXT_TYPE))\n+                                                .collect(Collectors.joining(\" \")))\n+                                .forEach(names::add);\n+                    }\n+                    default -> {\n+                        var ext = localeExtensions.getExtensionValue(key);\n+                        if (ext != null && !ext.isEmpty()) {\n+                            names.add((key == PRIVATE_USE_EXTENSION ?\n+                                    getDisplayString(String.valueOf(PRIVATE_USE_EXTENSION), null, inLocale, DISPLAY_UEXT_KEY) : key) + \": \" + ext);\n+                        }\n+                    }\n+                }\n+            });\n@@ -2788,1 +2911,2 @@\n-         * <p><b>Note:<\/b> The key {@link Locale#UNICODE_LOCALE_EXTENSION\n+         * @implNote\n+         * The key {@link #UNICODE_LOCALE_EXTENSION\n@@ -2792,2 +2916,2 @@\n-         *\n-         * <p><b>Note:<\/b> The key {@link Locale#PRIVATE_USE_EXTENSION\n+         * <p>\n+         * The key {@link #PRIVATE_USE_EXTENSION\n@@ -2797,0 +2921,11 @@\n+         * <p>\n+         * The key {@link #TRANSFORMED_CONTENT_EXTENSION\n+         * TRANSFORMED_CONTENT_EXTENSION} ('t') is used for the transformed content.\n+         * The transformed content extension contains an optional well-formed BCP47 {@code source}\n+         * language tag followed by zero or more {@code field}s. At least the {@code source} language tag\n+         * or one {@code field} must be included. Each {@code field} consists of a\n+         * field separator (one alpha + one digit), followed by one or more subtags of\n+         * the length 3 to 8, each delimited by a hyphen. For the detailed\n+         * specification for the well-formed T extension, refer to\n+         * <a href=\"https:\/\/datatracker.ietf.org\/doc\/html\/rfc6497\">RFC 6497: BCP 47 Extension\n+         * T - Transformed Content<\/a>.\n@@ -2923,1 +3058,6 @@\n-            LocaleExtensions extensions = localeBuilder.getLocaleExtensions();\n+            LocaleExtensions extensions;\n+            try {\n+                extensions = localeBuilder.getLocaleExtensions();\n+            } catch (LocaleSyntaxException e) {\n+                throw new IllformedLocaleException(e.getMessage(), e.getErrorIndex());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":157,"deletions":17,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class Extension {\n+sealed class Extension permits UnicodeLocaleExtension, TransformedContentExtension {\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/Extension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-                ukeywords = new HashMap<>(4);\n+                ukeywords = HashMap.newHashMap(4);\n@@ -214,1 +214,1 @@\n-                    extensions = new HashMap<>(4);\n+                    extensions = HashMap.newHashMap(4);\n@@ -326,1 +326,1 @@\n-                            extensions = new HashMap<>(4);\n+                            extensions = HashMap.newHashMap(4);\n@@ -337,1 +337,1 @@\n-                extensions = new HashMap<>(1);\n+                extensions = HashMap.newHashMap(1);\n@@ -441,2 +441,1 @@\n-                if (e instanceof UnicodeLocaleExtension) {\n-                    UnicodeLocaleExtension ue = (UnicodeLocaleExtension)e;\n+                if (e instanceof UnicodeLocaleExtension ue) {\n@@ -445,1 +444,1 @@\n-                            uattributes = new HashSet<>(4);\n+                            uattributes = HashSet.newHashSet(4);\n@@ -451,1 +450,1 @@\n-                            ukeywords = new HashMap<>(4);\n+                            ukeywords = HashMap.newHashMap(4);\n@@ -457,1 +456,1 @@\n-                        extensions = new HashMap<>(4);\n+                        extensions = HashMap.newHashMap(4);\n@@ -527,1 +526,1 @@\n-    public LocaleExtensions getLocaleExtensions() {\n+    public LocaleExtensions getLocaleExtensions() throws LocaleSyntaxException {\n@@ -607,1 +606,1 @@\n-                uattributes = new HashSet<>(4);\n+                uattributes = HashSet.newHashSet(4);\n@@ -625,1 +624,1 @@\n-                        ukeywords = new HashMap<>(4);\n+                        ukeywords = HashMap.newHashMap(4);\n@@ -655,1 +654,1 @@\n-                        ukeywords = new HashMap<>(4);\n+                        ukeywords = HashMap.newHashMap(4);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/InternalLocaleBuilder.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+    public static final String TRANSFORMED_CONTENT = \"t\";\n@@ -368,0 +369,12 @@\n+                \/\/ parse transformed content\n+                var extension = sb.toString();\n+                if (isTransformedContentPrefix(singleton)) {\n+                    try {\n+                        extension = new TransformedContentExtension(extension.substring(2)).getID();\n+                    } catch (LocaleSyntaxException e) {\n+                        sts.errorIndex = start + e.getErrorIndex();\n+                        sts.errorMsg = e.getMessage();\n+                        break;\n+                    }\n+                }\n+\n@@ -371,1 +384,1 @@\n-                extensions.add(sb.toString());\n+                extensions.add(extension);\n@@ -667,0 +680,9 @@\n+    public static boolean isTransformedContentPrefix(String s) {\n+        return (s.length() == 1)\n+                && LocaleUtils.caseIgnoreMatch(TRANSFORMED_CONTENT, s);\n+    }\n+\n+    public static boolean isTransformedContentPrefixChar(char c) {\n+        return (LocaleUtils.caseIgnoreMatch(TRANSFORMED_CONTENT, String.valueOf(c)));\n+    }\n+\n@@ -675,4 +697,0 @@\n-    public static String canonicalizeExtlang(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n@@ -687,4 +705,0 @@\n-    public static String canonicalizeVariant(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n@@ -695,16 +709,0 @@\n-    public static String canonicalizeExtensionSingleton(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n-    public static String canonicalizeExtensionSubtag(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n-    public static String canonicalizePrivateuse(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n-    public static String canonicalizePrivateuseSubtag(String s) {\n-        return LocaleUtils.toLowerString(s);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.Optional;\n@@ -72,1 +73,1 @@\n-                     Map<CaseInsensitiveString, String> ukeywords) {\n+                     Map<CaseInsensitiveString, String> ukeywords) throws LocaleSyntaxException {\n@@ -97,2 +98,5 @@\n-\n-                map.put(key, new Extension(key, LocaleUtils.toLowerString(value)));\n+                if (LanguageTag.isTransformedContentPrefixChar(key)) {\n+                    map.put(key, new TransformedContentExtension(LocaleUtils.toLowerString(value)));\n+                } else {\n+                    map.put(key, new Extension(key, LocaleUtils.toLowerString(value)));\n+                }\n@@ -182,0 +186,16 @@\n+    public Optional<String> getTransformedContentSource() {\n+        if (extensionMap.get(TransformedContentExtension.SINGLETON)\n+                instanceof TransformedContentExtension t_ext) {\n+            return t_ext.getSourceLang();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public SortedSet<TransformedContentExtension.Field> getTransformedContentFields() {\n+        if (extensionMap.get(TransformedContentExtension.SINGLETON)\n+                instanceof TransformedContentExtension t_ext) {\n+            return t_ext.getFields();\n+        }\n+        return Collections.emptySortedSet();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LocaleExtensions.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.util.locale;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * Represents the BCP 47 't' extension\n+ *\/\n+public final class TransformedContentExtension extends Extension {\n+\n+    public static final char SINGLETON = 't';\n+    private static final Pattern FIELD = Pattern.compile(\"[-_]?(?<fsep>[a-zA-Z]\\\\d)[-_](?<fval>([-_]?\\\\w{3,8})+)\");\n+    private final String sourceLang;\n+    private final SortedSet<Field> fields;\n+\n+    TransformedContentExtension(String value) throws LocaleSyntaxException {\n+        super(SINGLETON);\n+\n+        Matcher m = FIELD.matcher(value);\n+        if (m.find()) {\n+            var sourceEnd = m.start();\n+            sourceLang = sourceEnd != 0 ? value.substring(0, sourceEnd) : null;\n+            fields = new TreeSet<>();\n+            do {\n+                var f = new Field(m.group(\"fsep\"), m.group(\"fval\"));\n+                if (fields.contains(f)) {\n+                    throw new LocaleSyntaxException(\"Field duplicates for the separator '\" +\n+                            f.fsep() + \"' within the Transformed Content extension\",\n+                            m.start() + 1); \/\/ +1 for the leading '-' of the duplicated field\n+                } else {\n+                    fields.add(f);\n+                }\n+            } while (m.find());\n+        } else {\n+            sourceLang = value;\n+            fields = Collections.emptySortedSet();\n+        }\n+\n+        \/\/ validate source lang\n+        if (sourceLang != null) {\n+            var pp = new ParseStatus();\n+            LanguageTag.parse(sourceLang, pp);\n+            if (pp.isError()) {\n+                throw new LocaleSyntaxException(\"Source language tag is invalid within the t extension: \" +\n+                        sourceLang);\n+            }\n+        }\n+\n+        \/\/ set the canonical ID as the value\n+        var sourceLangStr = (sourceLang != null) ? sourceLang : \"\";\n+        var fieldsStr = fields.stream()\n+            .map(f -> f.fsep() + \"-\" + f.fval())\n+            .collect(Collectors.joining(\"-\"));\n+        var delim = (!sourceLangStr.isEmpty() && !fieldsStr.isEmpty()) ? \"-\" : \"\";\n+        setValue(sourceLangStr + delim + fieldsStr);\n+    }\n+\n+    public Optional<String> getSourceLang() {\n+        return Optional.ofNullable(sourceLang);\n+    }\n+\n+    public SortedSet<Field> getFields() {\n+        return fields;\n+    }\n+\n+    \/**\n+     * Record representing a field which consists of a separator and a value (subtags).\n+     * @param fsep field separator\n+     * @param fval subtags for the separator. Can contain multiple subtags concatenated with a '-'.\n+     *\/\n+    public record Field(String fsep, String fval) implements Comparable<Field> {\n+        @Override\n+        public int compareTo(Field f) {\n+            return fsep().compareTo(f.fsep());\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/TransformedContentExtension.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2010, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-public class UnicodeLocaleExtension extends Extension {\n+public final class UnicodeLocaleExtension extends Extension {\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/UnicodeLocaleExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/CalendarTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CalendarTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/CurrencyFormatTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CurrencyFormatTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/CurrencyTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CurrencyTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/DefaultLocaleTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/DefaultLocaleTest.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/DisplayNameTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/DisplayNameTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/FormatTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/FormatTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/SymbolsTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/SymbolsTests.java","status":"renamed"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @bug 8189134 8289227\n+ * @summary Tests the system properties\n+ * @build DefaultLocaleTest\n+ * @run testng SystemPropertyTests\n+ *\/\n+\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * Test Locale.getDefault() reflects the system property.\n+ *\/\n+@Test\n+public class SystemPropertyTests {\n+\n+    private static String LANGPROP = \"-Duser.language=en\";\n+    private static String SCPTPROP = \"-Duser.script=\";\n+    private static String CTRYPROP = \"-Duser.country=US\";\n+\n+    @DataProvider(name=\"data\")\n+    Object[][] data() {\n+        return new Object[][] {\n+            \/\/ system property, expected default, expected format, expected display\n+            {\"-Duser.extensions=u-ca-japanese\",\n+             \"en_US_#u-ca-japanese\",\n+             \"en_US_#u-ca-japanese\",\n+             \"en_US_#u-ca-japanese\",\n+            },\n+\n+            {\"-Duser.extensions=u-ca-japanese-nu-thai\",\n+             \"en_US_#u-ca-japanese-nu-thai\",\n+             \"en_US_#u-ca-japanese-nu-thai\",\n+             \"en_US_#u-ca-japanese-nu-thai\",\n+            },\n+\n+            {\"-Duser.extensions=foo\",\n+             \"en_US\",\n+             \"en_US\",\n+             \"en_US\",\n+            },\n+\n+            {\"-Duser.extensions.format=u-ca-japanese\",\n+             \"en_US\",\n+             \"en_US_#u-ca-japanese\",\n+             \"en_US\",\n+            },\n+\n+            {\"-Duser.extensions.display=u-ca-japanese\",\n+             \"en_US\",\n+             \"en_US\",\n+             \"en_US_#u-ca-japanese\",\n+            },\n+\n+            \/\/ 't' extension\n+            {\"-Duser.extensions=t-ja\",\n+             \"en_US_#t-ja\",\n+             \"en_US_#t-ja\",\n+             \"en_US_#t-ja\",\n+            },\n+            {\"-Duser.extensions=t-ja-m0-bbb-aaa-s0-src-d0-dst\",\n+             \"en_US_#t-ja-d0-dst-m0-bbb-aaa-s0-src\",\n+             \"en_US_#t-ja-d0-dst-m0-bbb-aaa-s0-src\",\n+             \"en_US_#t-ja-d0-dst-m0-bbb-aaa-s0-src\",\n+            },\n+            {\"-Duser.extensions=t-aa-bb-cc\",\n+             \"en_US\",\n+             \"en_US\",\n+             \"en_US\",\n+            },\n+        };\n+    }\n+\n+    @Test(dataProvider=\"data\")\n+    public void runTest(String extprop, String defLoc,\n+                        String defFmtLoc, String defDspLoc) throws Exception {\n+        int exitValue = executeTestJava(LANGPROP, SCPTPROP, CTRYPROP,\n+                                    extprop, \"DefaultLocaleTest\", defLoc, defFmtLoc, defDspLoc)\n+                            .outputTo(System.out)\n+                            .errorTo(System.out)\n+                            .getExitValue();\n+\n+        assertTrue(exitValue == 0);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/SystemPropertyTests.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289227\n+ * @summary BCP47 Transformed Content extension tests\n+ * @modules jdk.localedata\n+ * @run testng TExtensionTests\n+ *\/\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotSame;\n+\n+import java.util.IllformedLocaleException;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * Test BCP47 T extensions\n+ *\/\n+@Test\n+public class TExtensionTests {\n+    private static final String T1 = \"und-latn-m0-ungegn-2007\"; \/\/ two values for 'm0'\n+    private static final String T2 = \"en-t0-und\";\n+    private static final String T3 = \"en-h0-hybrid\";\n+    private static final String T4 = \"en-latn-s0-ascii-d0-fwidth\";\n+    private static final String T4_CANON = \"en-latn-d0-fwidth-s0-ascii\";\n+    private static final String T5 = \"s0-ascii-hex-d0-fwidth\"; \/\/ no source lang\n+    private static final String T5_CANON = \"d0-fwidth-s0-ascii-hex\"; \/\/ no source lang\n+    private static final String DUPLICATE_FIELD = \"s0-dup\";\n+    private static final String DUPLICATE = T4 + \"-\" + DUPLICATE_FIELD;\n+    private static final String INVALID_SOURCE = \"aa-bb-cc\";\n+    private static final Locale L1 = Locale.forLanguageTag(\"und-Cyrl-t-\" + T1);\n+    private static final Locale L2 = Locale.forLanguageTag(\"ja-Kana-t-\" + T2);\n+    private static final Locale L3 = Locale.forLanguageTag(\"hi-Latn-t-\" + T3); \/\/ Hinglish\n+    private static final Locale L4 = Locale.forLanguageTag(\"ja-u-nu-jpan-t-\" + T4 + \"-x-pri-vate\");\n+    private static final Locale L5 = Locale.forLanguageTag(\"ja-t-\" + T5 + \"-x-pri-vate\");\n+    private static final Locale.Builder LB = new Locale.Builder();\n+\n+    @DataProvider\n+    Object[][] data_TExtension() {\n+        return new Object[][]{\n+                {L1, T1},\n+                {L2, T2},\n+                {L3, T3},\n+                {L4, T4_CANON},\n+                {L5, T5_CANON},\n+        };\n+    }\n+\n+    @DataProvider\n+    Object[][] data_GetDisplayName() {\n+        return new Object[][] {\n+                {L1, Locale.US,\n+                        \"Cyrillic (Transform: Latin, Transform Rules: UN GEGN Transliteration 2007)\"},\n+                {L2, Locale.US,\n+                        \"Japanese (Katakana, Transform: English, Machine Translated: Unspecified Machine Translation)\"},\n+                {L3, Locale.US,\n+                        \"Hindi (Latin, Transform: English, Mixed-in: Hybrid)\"}, \/\/ aka \"Hinglish\"\n+                {L4, Locale.US,\n+                        \"Japanese (Transform: English (Latin), Transform Destination: To Fullwidth, Transform Source: From ASCII, Japanese Numerals, Private-Use: pri-vate)\"},\n+                {L5, Locale.US,\n+                        \"Japanese (Transform Destination: To Fullwidth, Transform Source: From ASCII From Hexadecimal Codes, Private-Use: pri-vate)\"},\n+\n+                {L1, Locale.JAPAN,\n+                        \"\\u30ad\\u30ea\\u30eb\\u6587\\u5b57 (t: \\u30e9\\u30c6\\u30f3\\u6587\\u5b57\\u3001m0: UNGEGN 2007)\"},\n+                {L2, Locale.JAPAN,\n+                        \"\\u65e5\\u672c\\u8a9e (\\u30ab\\u30bf\\u30ab\\u30ca\\u3001t: \\u82f1\\u8a9e\\u3001t0: und)\"},\n+                {L3, Locale.JAPAN,\n+                        \"\\u30d2\\u30f3\\u30c7\\u30a3\\u30fc\\u8a9e (\\u30e9\\u30c6\\u30f3\\u6587\\u5b57\\u3001t: \\u82f1\\u8a9e\\u3001h0: hybrid)\"},\n+                {L4, Locale.JAPAN,\n+                        \"\\u65e5\\u672c\\u8a9e (t: \\u82f1\\u8a9e (\\u30e9\\u30c6\\u30f3\\u6587\\u5b57)\\u3001d0: \\u5168\\u89d2\\u3001s0: ascii\\u3001\\u6f22\\u6570\\u5b57\\u3001\\u79c1\\u7528: pri-vate)\"},\n+                {L5, Locale.JAPAN,\n+                        \"\\u65e5\\u672c\\u8a9e (d0: \\u5168\\u89d2\\u3001s0: ascii hex\\u3001\\u79c1\\u7528: pri-vate)\"},\n+        };\n+    }\n+\n+    @DataProvider\n+    Object[][] data_Fields() {\n+        return new Object[][]{\n+                {L1, Map.of(\"m0\", \"ungegn-2007\")},\n+                {L2, Map.of(\"t0\", \"und\")},\n+                {L3, Map.of(\"h0\", \"hybrid\")},\n+                {L4, Map.of(\"s0\", \"ascii\", \"d0\", \"fwidth\")},\n+                {L5, Map.of(\"s0\", \"ascii-hex\", \"d0\", \"fwidth\")},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"data_TExtension\")\n+    public void test_GetExtension(Locale locale, String expected) {\n+        assertEquals(locale.getExtension(Locale.TRANSFORMED_CONTENT_EXTENSION), expected);\n+        assertEquals(locale.getExtension('T'), expected);\n+    }\n+\n+    @Test(dataProvider=\"data_TExtension\")\n+    public void test_SetExtension(Locale locale, String t_extension) {\n+        var l =LB.clear().setExtension(Locale.TRANSFORMED_CONTENT_EXTENSION,\n+                t_extension).build();\n+        assertEquals(l.getExtension(Locale.TRANSFORMED_CONTENT_EXTENSION),\n+                locale.getExtension(Locale.TRANSFORMED_CONTENT_EXTENSION));\n+        l =LB.clear().setExtension('T', t_extension).build();\n+        assertEquals(l.getExtension('T'),\n+                locale.getExtension('T'));\n+    }\n+\n+    @Test(dataProvider=\"data_GetDisplayName\")\n+    public void test_GetDisplayName(Locale locale, Locale inLocale, String expected) {\n+        assertEquals(locale.getDisplayName(inLocale), expected);\n+    }\n+\n+    @Test\n+    public void test_FieldOrder() {\n+        \/\/ order of the fields does NOT matter\n+        var l = Locale.forLanguageTag(\"ja-u-nu-jpan-t-en-Latn-d0-fwidth-s0-ascii-x-pri-vate\");\n+        assertEquals(l, L4);\n+    }\n+\n+    @Test\n+    public void test_SubtagOrderInField() {\n+        \/\/ order of the subtags in a field DOES matter\n+        var l = Locale.forLanguageTag(\"und-Cyrl-t-und-latn-m0-2007-ungegn\");\n+        assertNotSame(l, L1);\n+    }\n+\n+    @Test\n+    public void test_FieldDuplicatesForLanguageTag() {\n+        \/\/ Locale.forLanguageTag() should ignore the t extension\n+        assertEquals(Locale.forLanguageTag(\"en-t-\" + DUPLICATE), Locale.ENGLISH);\n+    }\n+\n+    @Test\n+    public void test_FieldDuplicatesSetExtension() {\n+        \/\/ Locale.Builder.setExtension() should throw IllformedLocaleException\n+        try {\n+            LB.clear().setLocale(Locale.ENGLISH).setExtension('t', DUPLICATE).build();\n+            throw new RuntimeException(\"Duplicated fields should throw an exception.\");\n+        } catch (IllformedLocaleException ile) {\n+            assertEquals(ile.getErrorIndex(), DUPLICATE.indexOf(DUPLICATE_FIELD));\n+            \/\/ success\n+            System.out.println(\"IllformedLocaleException thrown correctly: \" + ile.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void test_InvalidSourceLangForLanguageTag() {\n+        \/\/ Locale.forLanguageTag() should ignore the t extension\n+        assertEquals(Locale.forLanguageTag(\"en-t-\" + INVALID_SOURCE), Locale.ENGLISH);\n+    }\n+\n+    @Test\n+    public void test_InvalidSourceLangSetExtension() {\n+        \/\/ Locale.Builder.setExtension() should throw IllformedLocaleException\n+        try {\n+            LB.clear().setLocale(Locale.ENGLISH).setExtension('t', INVALID_SOURCE).build();\n+            throw new RuntimeException(\"Invalid source language tag should throw an exception\");\n+        } catch (IllformedLocaleException ile) {\n+            \/\/ success\n+            System.out.println(\"IllformedLocaleException thrown correctly: \" + ile.getMessage());\n+        }\n+    }\n+\n+    @Test(dataProvider=\"data_TExtension\")\n+    public void test_getTransformedContentSource(Locale locale, String ext) {\n+        var expected = ext.replaceFirst(\"-?[a-zA-Z]\\\\d-.*\", \"\");\n+        assertEquals(locale.getTransformedContentSource(), expected.isEmpty() ? null : Locale.forLanguageTag(expected));\n+    }\n+\n+    @Test(dataProvider=\"data_Fields\")\n+    public void test_getTransformedContentFields(Locale locale, Map<String, String> fields) {\n+        assertEquals(locale.getTransformedContentFields(), fields);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/TExtensionTests.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/spi\/DateFormatSymbolsProviderTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/spi\/DateFormatSymbolsProviderTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/spi\/LocaleNameProviderTests.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/spi\/LocaleNameProviderTests.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/spi\/provider\/foo\/DateFormatSymbolsProviderImpl.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/spi\/provider\/foo\/DateFormatSymbolsProviderImpl.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/spi\/provider\/foo\/LocaleNameProviderImpl.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/spi\/provider\/foo\/LocaleNameProviderImpl.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/spi\/provider\/module-info.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/spi\/provider\/module-info.java","status":"renamed"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library \/test\/lib\n- * @bug 8189134\n- * @summary Tests the system properties\n- * @modules jdk.localedata\n- * @build DefaultLocaleTest\n- * @run testng\/othervm SystemPropertyTests\n- *\/\n-\n-import static jdk.test.lib.process.ProcessTools.executeTestJava;\n-import static org.testng.Assert.assertTrue;\n-\n-import java.util.Locale;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-\/**\n- * Test Locale.getDefault() reflects the system property. Note that the\n- * result may change depending on the CLDR releases.\n- *\/\n-@Test\n-public class SystemPropertyTests {\n-\n-    private static String LANGPROP = \"-Duser.language=en\";\n-    private static String SCPTPROP = \"-Duser.script=\";\n-    private static String CTRYPROP = \"-Duser.country=US\";\n-\n-    @DataProvider(name=\"data\")\n-    Object[][] data() {\n-        return new Object[][] {\n-            \/\/ system property, expected default, expected format, expected display\n-            {\"-Duser.extensions=u-ca-japanese\",\n-             \"en_US_#u-ca-japanese\",\n-             \"en_US_#u-ca-japanese\",\n-             \"en_US_#u-ca-japanese\",\n-            },\n-\n-            {\"-Duser.extensions=u-ca-japanese-nu-thai\",\n-             \"en_US_#u-ca-japanese-nu-thai\",\n-             \"en_US_#u-ca-japanese-nu-thai\",\n-             \"en_US_#u-ca-japanese-nu-thai\",\n-            },\n-\n-            {\"-Duser.extensions=foo\",\n-             \"en_US\",\n-             \"en_US\",\n-             \"en_US\",\n-            },\n-\n-            {\"-Duser.extensions.format=u-ca-japanese\",\n-             \"en_US\",\n-             \"en_US_#u-ca-japanese\",\n-             \"en_US\",\n-            },\n-\n-            {\"-Duser.extensions.display=u-ca-japanese\",\n-             \"en_US\",\n-             \"en_US\",\n-             \"en_US_#u-ca-japanese\",\n-            },\n-        };\n-    }\n-\n-    @Test(dataProvider=\"data\")\n-    public void runTest(String extprop, String defLoc,\n-                        String defFmtLoc, String defDspLoc) throws Exception {\n-        int exitValue = executeTestJava(LANGPROP, SCPTPROP, CTRYPROP,\n-                                    extprop, \"DefaultLocaleTest\", defLoc, defFmtLoc, defDspLoc)\n-                            .outputTo(System.out)\n-                            .errorTo(System.out)\n-                            .getExitValue();\n-\n-        assertTrue(exitValue == 0);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/SystemPropertyTests.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"}]}