{"files":[{"patch":"@@ -65,1 +65,0 @@\n-import sun.util.locale.TransformedContentExtension;\n@@ -265,5 +264,3 @@\n- * <p>The transformed content information; namely {@code source} language tag and {@code fields}\n- * are returned from a {@code Locale}, either via {@link #getExtension(char)} with\n- * {@link #TRANSFORMED_CONTENT_EXTENSION} which returns the string\n- * representation of the transformed content, or via the methods {@link #getTransformedContentSource()}\n- * and {@link #getTransformedContentFields()}.\n+ * <p>The transformed content information, namely {@code source} language tag and {@code fields}\n+ * are returned from a {@code Locale} via {@link #getExtension(char)} with\n+ * {@link #TRANSFORMED_CONTENT_EXTENSION}.\n@@ -1508,35 +1505,0 @@\n-    \/**\n-     * {@return the locale representing the source language tag of\n-     * the transformed content extension in this locale, or\n-     * {@code null} if it does not contain it}\n-     *\n-     * @since 20\n-     *\/\n-    public Locale getTransformedContentSource() {\n-        if (hasExtensions()) {\n-            return localeExtensions.getTransformedContentSource()\n-                    .map(Locale::forLanguageTag)\n-                    .orElse(null);\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * {@return the map of fields in the transformed content extension of this\n-     * locale, or an empty map if it has no transformed content extension fields}\n-     * The returned map contains entries for each field separator\n-     * and its subtags. If there are multiple subtags in the map value,\n-     * subtags are delimited by a hyphen. The returned map is unmodifiable.\n-     *\n-     * @since 20\n-     *\/\n-    public Map<String, String> getTransformedContentFields() {\n-        if (hasExtensions()) {\n-            return localeExtensions.getTransformedContentFields().stream()\n-                    .collect(Collectors.toUnmodifiableMap(\n-                        TransformedContentExtension.Field::fsep,\n-                        TransformedContentExtension.Field::fval));\n-        }\n-        return Collections.emptyMap();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":3,"deletions":41,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -102,11 +102,0 @@\n-    @DataProvider\n-    Object[][] data_Fields() {\n-        return new Object[][]{\n-                {L1, Map.of(\"m0\", \"ungegn-2007\")},\n-                {L2, Map.of(\"t0\", \"und\")},\n-                {L3, Map.of(\"h0\", \"hybrid\")},\n-                {L4, Map.of(\"s0\", \"ascii\", \"d0\", \"fwidth\")},\n-                {L5, Map.of(\"s0\", \"ascii-hex\", \"d0\", \"fwidth\")},\n-        };\n-    }\n-\n@@ -185,11 +174,0 @@\n-\n-    @Test(dataProvider=\"data_TExtension\")\n-    public void test_getTransformedContentSource(Locale locale, String ext) {\n-        var expected = ext.replaceFirst(\"-?[a-zA-Z]\\\\d-.*\", \"\");\n-        assertEquals(locale.getTransformedContentSource(), expected.isEmpty() ? null : Locale.forLanguageTag(expected));\n-    }\n-\n-    @Test(dataProvider=\"data_Fields\")\n-    public void test_getTransformedContentFields(Locale locale, Map<String, String> fields) {\n-        assertEquals(locale.getTransformedContentFields(), fields);\n-    }\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47\/TExtensionTests.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}