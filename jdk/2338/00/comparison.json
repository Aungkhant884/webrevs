{"files":[{"patch":"@@ -59,14 +59,0 @@\n-\/*\n- * Bump the version number when either of the following happens:\n- *\n- * 1. There is a change in JVM_* functions.\n- *\n- * 2. There is a change in the contract between VM and Java classes.\n- *    For example, if the VM relies on a new private field in Thread\n- *    class.\n- *\/\n-\n-#define JVM_INTERFACE_VERSION 6\n-\n-JNIEXPORT jint JNICALL\n-JVM_GetInterfaceVersion(void);\n@@ -764,74 +750,0 @@\n-\/*\n- * com.sun.dtrace.jsdt support\n- *\/\n-\n-#define JVM_TRACING_DTRACE_VERSION 1\n-\n-\/*\n- * Structure to pass one probe description to JVM\n- *\/\n-typedef struct {\n-    jmethodID method;\n-    jstring   function;\n-    jstring   name;\n-    void*            reserved[4];     \/\/ for future use\n-} JVM_DTraceProbe;\n-\n-\/**\n- * Encapsulates the stability ratings for a DTrace provider field\n- *\/\n-typedef struct {\n-    jint nameStability;\n-    jint dataStability;\n-    jint dependencyClass;\n-} JVM_DTraceInterfaceAttributes;\n-\n-\/*\n- * Structure to pass one provider description to JVM\n- *\/\n-typedef struct {\n-    jstring                       name;\n-    JVM_DTraceProbe*              probes;\n-    jint                          probe_count;\n-    JVM_DTraceInterfaceAttributes providerAttributes;\n-    JVM_DTraceInterfaceAttributes moduleAttributes;\n-    JVM_DTraceInterfaceAttributes functionAttributes;\n-    JVM_DTraceInterfaceAttributes nameAttributes;\n-    JVM_DTraceInterfaceAttributes argsAttributes;\n-    void*                         reserved[4]; \/\/ for future use\n-} JVM_DTraceProvider;\n-\n-\/*\n- * Get the version number the JVM was built with\n- *\/\n-JNIEXPORT jint JNICALL\n-JVM_DTraceGetVersion(JNIEnv* env);\n-\n-\/*\n- * Register new probe with given signature, return global handle\n- *\n- * The version passed in is the version that the library code was\n- * built with.\n- *\/\n-JNIEXPORT jlong JNICALL\n-JVM_DTraceActivate(JNIEnv* env, jint version, jstring module_name,\n-  jint providers_count, JVM_DTraceProvider* providers);\n-\n-\/*\n- * Check JSDT probe\n- *\/\n-JNIEXPORT jboolean JNICALL\n-JVM_DTraceIsProbeEnabled(JNIEnv* env, jmethodID method);\n-\n-\/*\n- * Destroy custom DOF\n- *\/\n-JNIEXPORT void JNICALL\n-JVM_DTraceDispose(JNIEnv* env, jlong activation_handle);\n-\n-\/*\n- * Check to see if DTrace is supported by OS\n- *\/\n-JNIEXPORT jboolean JNICALL\n-JVM_DTraceIsSupported(JNIEnv* env);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":88,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -96,1 +96,0 @@\n-#include \"utilities\/dtrace.hpp\"\n@@ -230,9 +229,0 @@\n-\n-\/\/ Interface version \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-\n-JVM_LEAF(jint, JVM_GetInterfaceVersion())\n-  return JVM_INTERFACE_VERSION;\n-JVM_END\n-\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,11 +33,0 @@\n-    jint vm_version = JVM_GetInterfaceVersion();\n-    if (vm_version != JVM_INTERFACE_VERSION) {\n-        JNIEnv *env;\n-        char buf[128];\n-        sprintf(buf, \"JVM interface version mismatch: expecting %d, got %d.\",\n-                JVM_INTERFACE_VERSION, (int)vm_version);\n-        (*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_2);\n-        if (env) {\n-            (*env)->FatalError(env, buf);\n-        }\n-    }\n","filename":"src\/java.base\/share\/native\/libjava\/check_version.c","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"}]}