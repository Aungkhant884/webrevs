{"files":[{"patch":"@@ -59,0 +59,1 @@\n+import java.util.LinkedHashMap;\n@@ -73,1 +74,0 @@\n-import java.util.HashMap;\n@@ -390,1 +390,1 @@\n-            this.hoistedVarMap = new HashMap<>();\n+            this.hoistedVarMap = new LinkedHashMap<>();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264306\n+ * @summary Verify patterns are desugaring in a reproducible manner\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @compile StablePatternDesugaring.java\n+ * @run main StablePatternDesugaring\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+\n+public class StablePatternDesugaring {\n+    protected ToolBox tb;\n+\n+    StablePatternDesugaring() {\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new StablePatternDesugaring().run();\n+    }\n+\n+    void run() throws Exception {\n+        String code = \"\"\"\n+                      public class T {\n+                          private boolean t(Object o) {\n+                              if (o instanceof String s) {\n+                                  return s.isEmpty();\n+                              } else if (o instanceof CharSequence cs) {\n+                                  return cs.isEmpty();\n+                              } else if (o instanceof Integer i) {\n+                                  return i != 0;\n+                              } else if (o instanceof Float f) {\n+                                  return f != 0;\n+                              } else {\n+                                  return false;\n+                              }\n+                          }\n+                      }\n+                      \"\"\";\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src, code);\n+\n+        Path classes1 = base.resolve(\"classes1\");\n+\n+        if (Files.isDirectory(classes1)) {\n+            tb.cleanDirectory(classes1);\n+        } else {\n+            Files.createDirectories(classes1);\n+        }\n+\n+        new JavacTask(tb)\n+            .files(tb.findJavaFiles(src))\n+            .outdir(classes1)\n+            .run()\n+            .writeAll();\n+\n+        byte[] expected = Files.readAllBytes(classes1.resolve(\"T.class\"));\n+\n+        for (int i = 0; i < 10; i++) {\n+            Path classes2 = base.resolve(\"classes2\");\n+\n+            if (Files.isDirectory(classes2)) {\n+                tb.cleanDirectory(classes2);\n+            } else {\n+                Files.createDirectories(classes2);\n+            }\n+\n+            new JavacTask(tb)\n+                .files(tb.findJavaFiles(src))\n+                .outdir(classes2)\n+                .run()\n+                .writeAll();\n+\n+            byte[] actual = Files.readAllBytes(classes2.resolve(\"T.class\"));\n+\n+            if (!Arrays.equals(expected, actual)) {\n+                throw new AssertionError(\"Classfiles differ!\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/StablePatternDesugaring.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}