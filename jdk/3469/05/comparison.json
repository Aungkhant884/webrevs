{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.random.RandomGenerator;\n@@ -33,0 +34,1 @@\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -34,5 +36,0 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n@@ -88,2 +85,1 @@\n-public class Random extends AbstractSpliteratorGenerator\n-        implements java.io.Serializable {\n+public class Random implements RandomGenerator, java.io.Serializable {\n@@ -618,26 +614,0 @@\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-    }\n-\n@@ -659,1 +629,1 @@\n-        return super.ints(streamSize);\n+        return AbstractSpliteratorGenerator.ints(this, streamSize);\n@@ -677,1 +647,1 @@\n-        return super.ints();\n+        return AbstractSpliteratorGenerator.ints(this);\n@@ -714,1 +684,1 @@\n-        return super.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -752,1 +722,1 @@\n-        return super.ints(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(this, randomNumberOrigin, randomNumberBound);\n@@ -770,1 +740,1 @@\n-        return super.longs(streamSize);\n+        return AbstractSpliteratorGenerator.longs(this, streamSize);\n@@ -788,1 +758,1 @@\n-        return super.longs();\n+        return AbstractSpliteratorGenerator.longs(this);\n@@ -830,1 +800,1 @@\n-        return super.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -873,1 +843,1 @@\n-        return super.longs(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(this, randomNumberOrigin, randomNumberBound);\n@@ -892,1 +862,1 @@\n-        return super.doubles(streamSize);\n+        return AbstractSpliteratorGenerator.doubles(this, streamSize);\n@@ -911,1 +881,1 @@\n-        return super.doubles();\n+        return AbstractSpliteratorGenerator.doubles(this);\n@@ -943,1 +913,1 @@\n-        return super.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -975,1 +945,1 @@\n-        return super.doubles(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(this, randomNumberOrigin, randomNumberBound);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":15,"deletions":45,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -283,24 +283,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return super.makeIntsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return super.makeLongsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return super.makeDoublesSpliterator(index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -399,42 +395,0 @@\n-    private static final class ThreadLocalRandomProxy extends Random {\n-        @java.io.Serial\n-        static final long serialVersionUID = 0L;\n-\n-\n-        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n-\n-\n-        public int nextInt() {\n-            return ThreadLocalRandom.current().nextInt();\n-        }\n-\n-        public long nextLong() {\n-            return ThreadLocalRandom.current().nextLong();\n-        }\n-    }\n-\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n@@ -460,0 +414,13 @@\n+    @SuppressWarnings(\"serial\")\n+    private static final class ThreadLocalRandomProxy extends Random {\n+        static final Random PROXY = new ThreadLocalRandomProxy();\n+\n+        public int nextInt() {\n+            return ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        public long nextLong() {\n+            return ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n@@ -582,1 +549,1 @@\n-        return super.ints(streamSize);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -593,1 +560,1 @@\n-        return super.ints();\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY);\n@@ -603,1 +570,1 @@\n-        return super.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -615,1 +582,1 @@\n-        return super.ints(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n@@ -625,1 +592,1 @@\n-        return super.longs(streamSize);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -636,1 +603,1 @@\n-        return super.longs();\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY);\n@@ -646,1 +613,1 @@\n-        return super.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -658,1 +625,1 @@\n-        return super.longs(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n@@ -668,1 +635,1 @@\n-        return super.doubles(streamSize);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -679,1 +646,1 @@\n-        return super.doubles();\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY);\n@@ -689,1 +656,1 @@\n-        return super.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -701,1 +668,1 @@\n-        return super.doubles(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":26,"deletions":59,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Random;\n@@ -53,2 +54,0 @@\n- * @hidden\n- *\n@@ -955,1 +954,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -968,1 +967,1 @@\n-        public RandomIntsSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomIntsSpliterator(RandomGenerator generatingGenerator,\n@@ -1013,1 +1012,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -1026,1 +1025,1 @@\n-        public RandomLongsSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomLongsSpliterator(RandomGenerator generatingGenerator,\n@@ -1071,1 +1070,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -1084,1 +1083,1 @@\n-        public RandomDoublesSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomDoublesSpliterator(RandomGenerator generatingGenerator,\n@@ -1408,4 +1407,0 @@\n-     * {@link AbstractSpliteratorGenerator#makeIntsSpliterator(long, long, int, int) makeIntsSpliterator}(index, fence, origin, bound),\n-     * {@link AbstractSpliteratorGenerator#makeLongsSpliterator(long, long, long, long) makeLongsSpliterator}(index, fence, origin, bound),\n-     * and\n-     * {@link AbstractSpliteratorGenerator#makeDoublesSpliterator(long, long, double, double) makeDoublesSpliterator}(index, fence, origin, bound).\n@@ -1418,1 +1413,0 @@\n-     * @hidden\n@@ -1428,2 +1422,1 @@\n-         * that take no arguments) and makeIntsSpliterator,\n-         * makeLongsSpliterator, and makeDoublesSpliterator.\n+         * that take no arguments).\n@@ -1436,1 +1429,1 @@\n-         * Explicit constructor.\n+         * No instances.\n@@ -1438,1 +1431,1 @@\n-        protected AbstractSpliteratorGenerator() {\n+        private AbstractSpliteratorGenerator() {\n@@ -1441,56 +1434,0 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfInt} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code int} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfInt}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfLong} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code long} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfLong}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfDouble} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code double} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfDouble}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n-\n-        \/* ---------------- public methods ---------------- *\/\n-\n@@ -1512,2 +1449,3 @@\n-        @Override\n-        public IntStream ints(long streamSize) {\n+        \/* ---------------- public static methods ---------------- *\/\n+\n+       public static IntStream ints(RandomGenerator gen, long streamSize) {\n@@ -1515,1 +1453,1 @@\n-            return intStream(makeIntsSpliterator(0L, streamSize, Integer.MAX_VALUE, 0));\n+            return intStream(new RandomIntsSpliterator(gen, 0L, streamSize, Integer.MAX_VALUE, 0));\n@@ -1518,3 +1456,2 @@\n-        @Override\n-        public IntStream ints() {\n-            return intStream(makeIntsSpliterator(0L, Long.MAX_VALUE, Integer.MAX_VALUE, 0));\n+        public static IntStream ints(RandomGenerator gen) {\n+            return intStream(new RandomIntsSpliterator(gen, 0L, Long.MAX_VALUE, Integer.MAX_VALUE, 0));\n@@ -1523,2 +1460,1 @@\n-        @Override\n-        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+        public static IntStream ints(RandomGenerator gen, long streamSize, int randomNumberOrigin, int randomNumberBound) {\n@@ -1527,1 +1463,1 @@\n-            return intStream(makeIntsSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+            return intStream(new RandomIntsSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1530,2 +1466,1 @@\n-        @Override\n-        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+        public static IntStream ints(RandomGenerator gen, int randomNumberOrigin, int randomNumberBound) {\n@@ -1533,1 +1468,1 @@\n-            return intStream(makeIntsSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+            return intStream(new RandomIntsSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n@@ -1536,2 +1471,1 @@\n-        @Override\n-        public LongStream longs(long streamSize) {\n+        public static LongStream longs(RandomGenerator gen, long streamSize) {\n@@ -1539,1 +1473,1 @@\n-            return longStream(makeLongsSpliterator(0L, streamSize, Long.MAX_VALUE, 0L));\n+            return longStream(new RandomLongsSpliterator(gen, 0L, streamSize, Long.MAX_VALUE, 0L));\n@@ -1542,3 +1476,2 @@\n-        @Override\n-        public LongStream longs() {\n-            return longStream(makeLongsSpliterator(0L, Long.MAX_VALUE, Long.MAX_VALUE, 0L));\n+        public static LongStream longs(RandomGenerator gen) {\n+            return longStream(new RandomLongsSpliterator(gen, 0L, Long.MAX_VALUE, Long.MAX_VALUE, 0L));\n@@ -1547,3 +1480,1 @@\n-        @Override\n-        public LongStream longs(long streamSize, long randomNumberOrigin,\n-                                long randomNumberBound) {\n+        public static LongStream longs(RandomGenerator gen, long streamSize, long randomNumberOrigin, long randomNumberBound) {\n@@ -1552,1 +1483,1 @@\n-            return longStream(makeLongsSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+            return longStream(new RandomLongsSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1555,2 +1486,1 @@\n-        @Override\n-        public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+        public static LongStream longs(RandomGenerator gen, long randomNumberOrigin, long randomNumberBound) {\n@@ -1558,3 +1488,1 @@\n-            return StreamSupport.longStream\n-                    (makeLongsSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound),\n-                            false);\n+            return longStream(new RandomLongsSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n@@ -1563,2 +1491,1 @@\n-        @Override\n-        public DoubleStream doubles(long streamSize) {\n+        public static DoubleStream doubles(RandomGenerator gen, long streamSize) {\n@@ -1566,1 +1493,1 @@\n-            return doubleStream(makeDoublesSpliterator(0L, streamSize, Double.MAX_VALUE, 0.0));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, streamSize, Double.MAX_VALUE, 0.0));\n@@ -1569,3 +1496,2 @@\n-        @Override\n-        public DoubleStream doubles() {\n-            return doubleStream(makeDoublesSpliterator(0L, Long.MAX_VALUE, Double.MAX_VALUE, 0.0));\n+        public static DoubleStream doubles(RandomGenerator gen) {\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, Long.MAX_VALUE, Double.MAX_VALUE, 0.0));\n@@ -1574,2 +1500,1 @@\n-        @Override\n-        public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+        public static DoubleStream doubles(RandomGenerator gen, long streamSize, double randomNumberOrigin, double randomNumberBound) {\n@@ -1578,1 +1503,1 @@\n-            return doubleStream(makeDoublesSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1581,2 +1506,1 @@\n-        @Override\n-        public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+        public static DoubleStream doubles(RandomGenerator gen, double randomNumberOrigin, double randomNumberBound) {\n@@ -1584,1 +1508,51 @@\n-            return doubleStream(makeDoublesSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+        }\n+\n+        \/* ---------------- public instance methods ---------------- *\/\n+\n+        public IntStream ints(long streamSize) {\n+            return ints(this, streamSize);\n+        }\n+\n+        public IntStream ints() {\n+            return ints(this);\n+        }\n+\n+        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+            return ints(this, streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+            return ints(this, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public LongStream longs(long streamSize) {\n+            return longs(this, streamSize);\n+        }\n+\n+        public LongStream longs() {\n+            return longs(this);\n+        }\n+\n+        public LongStream longs(long streamSize, long randomNumberOrigin,long randomNumberBound) {\n+            return longs(this, streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public LongStream longs(long randomNumberOrigin, long randomNumberBound) {\n+            return longs(this, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public DoubleStream doubles(long streamSize) {\n+            return doubles(this, streamSize);\n+        }\n+\n+        public DoubleStream doubles() {\n+            return doubles(this);\n+        }\n+\n+        public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound) {\n+            return doubles(this, streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {\n+            return doubles(this, randomNumberOrigin, randomNumberBound);\n@@ -1639,1 +1613,0 @@\n-     * @hidden\n@@ -1664,14 +1637,0 @@\n-        \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-        }\n-\n@@ -2081,1 +2040,0 @@\n-     * @hidden\n@@ -2106,12 +2064,0 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-        }\n-\n@@ -2385,1 +2331,0 @@\n-     * @hidden\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":86,"deletions":141,"binary":false,"changes":227,"status":"modified"}]}