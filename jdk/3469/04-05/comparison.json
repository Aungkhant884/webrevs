{"files":[{"patch":"@@ -30,1 +30,1 @@\n-import java.util.concurrent.ThreadLocalRandom;\n+import java.util.random.RandomGenerator;\n@@ -85,2 +85,1 @@\n-public class Random extends AbstractSpliteratorGenerator\n-        implements java.io.Serializable {\n+public class Random implements RandomGenerator, java.io.Serializable {\n@@ -630,1 +629,1 @@\n-        return super.ints(streamSize);\n+        return AbstractSpliteratorGenerator.ints(this, streamSize);\n@@ -648,1 +647,1 @@\n-        return super.ints();\n+        return AbstractSpliteratorGenerator.ints(this);\n@@ -685,1 +684,1 @@\n-        return super.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -723,1 +722,1 @@\n-        return super.ints(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(this, randomNumberOrigin, randomNumberBound);\n@@ -741,1 +740,1 @@\n-        return super.longs(streamSize);\n+        return AbstractSpliteratorGenerator.longs(this, streamSize);\n@@ -759,1 +758,1 @@\n-        return super.longs();\n+        return AbstractSpliteratorGenerator.longs(this);\n@@ -801,1 +800,1 @@\n-        return super.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -844,1 +843,1 @@\n-        return super.longs(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(this, randomNumberOrigin, randomNumberBound);\n@@ -863,1 +862,1 @@\n-        return super.doubles(streamSize);\n+        return AbstractSpliteratorGenerator.doubles(this, streamSize);\n@@ -882,1 +881,1 @@\n-        return super.doubles();\n+        return AbstractSpliteratorGenerator.doubles(this);\n@@ -914,1 +913,1 @@\n-        return super.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -946,1 +945,1 @@\n-        return super.doubles(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(this, randomNumberOrigin, randomNumberBound);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -414,0 +414,13 @@\n+    @SuppressWarnings(\"serial\")\n+    private static final class ThreadLocalRandomProxy extends Random {\n+        static final Random PROXY = new ThreadLocalRandomProxy();\n+\n+        public int nextInt() {\n+            return ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        public long nextLong() {\n+            return ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n@@ -536,1 +549,1 @@\n-        return super.ints(streamSize);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -547,1 +560,1 @@\n-        return super.ints();\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY);\n@@ -557,1 +570,1 @@\n-        return super.ints(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -569,1 +582,1 @@\n-        return super.ints(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.ints(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n@@ -579,1 +592,1 @@\n-        return super.longs(streamSize);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -590,1 +603,1 @@\n-        return super.longs();\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY);\n@@ -600,1 +613,1 @@\n-        return super.longs(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -612,1 +625,1 @@\n-        return super.longs(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.longs(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n@@ -622,1 +635,1 @@\n-        return super.doubles(streamSize);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, streamSize);\n@@ -633,1 +646,1 @@\n-        return super.doubles();\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY);\n@@ -643,1 +656,1 @@\n-        return super.doubles(streamSize, randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -655,1 +668,1 @@\n-        return super.doubles(randomNumberOrigin, randomNumberBound);\n+        return AbstractSpliteratorGenerator.doubles(ThreadLocalRandomProxy.PROXY, randomNumberOrigin, randomNumberBound);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.concurrent.ThreadLocalRandom;\n@@ -55,2 +54,0 @@\n- * @hidden\n- *\n@@ -957,1 +954,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -970,1 +967,1 @@\n-        public RandomIntsSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomIntsSpliterator(RandomGenerator generatingGenerator,\n@@ -1015,1 +1012,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -1028,1 +1025,1 @@\n-        public RandomLongsSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomLongsSpliterator(RandomGenerator generatingGenerator,\n@@ -1073,1 +1070,1 @@\n-        final AbstractSpliteratorGenerator generatingGenerator;\n+        final RandomGenerator generatingGenerator;\n@@ -1086,1 +1083,1 @@\n-        public RandomDoublesSpliterator(AbstractSpliteratorGenerator generatingGenerator,\n+        public RandomDoublesSpliterator(RandomGenerator generatingGenerator,\n@@ -1416,1 +1413,0 @@\n-     * @hidden\n@@ -1433,1 +1429,1 @@\n-         * Explicit constructor.\n+         * No instances.\n@@ -1435,1 +1431,1 @@\n-        protected AbstractSpliteratorGenerator() {\n+        private AbstractSpliteratorGenerator() {\n@@ -1438,6 +1434,2 @@\n-        \/\/ Bug 8265221\n-        \/\/ To prevent leaking private interfaces.\n-        \/\/\n-        private static final class ThreadLocalRandomProxy extends Random {\n-            @java.io.Serial\n-            static final long serialVersionUID = 0L;\n+        \/\/ stream methods, coded in a way intended to better isolate for\n+        \/\/ maintenance purposes the small differences across forms.\n@@ -1445,1 +1437,3 @@\n-            static final AbstractSpliteratorGenerator PROXY = new ThreadLocalRandomProxy();\n+        private static IntStream intStream(Spliterator.OfInt srng) {\n+            return StreamSupport.intStream(srng, false);\n+        }\n@@ -1447,3 +1441,3 @@\n-            public int nextInt() {\n-                return ThreadLocalRandom.current().nextInt();\n-            }\n+        private static LongStream longStream(Spliterator.OfLong srng) {\n+            return StreamSupport.longStream(srng, false);\n+        }\n@@ -1451,3 +1445,2 @@\n-            public long nextLong() {\n-                return ThreadLocalRandom.current().nextLong();\n-            }\n+        private static DoubleStream doubleStream(Spliterator.OfDouble srng) {\n+            return StreamSupport.doubleStream(srng, false);\n@@ -1456,6 +1449,5 @@\n-        private Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-            if (this instanceof ThreadLocalRandom) {\n-                return new RandomIntsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-            } else {\n-                return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-            }\n+        \/* ---------------- public static methods ---------------- *\/\n+\n+       public static IntStream ints(RandomGenerator gen, long streamSize) {\n+            RandomSupport.checkStreamSize(streamSize);\n+            return intStream(new RandomIntsSpliterator(gen, 0L, streamSize, Integer.MAX_VALUE, 0));\n@@ -1464,6 +1456,2 @@\n-        private Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-            if (this instanceof ThreadLocalRandom) {\n-                return new RandomLongsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-            } else {\n-                return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-            }\n+        public static IntStream ints(RandomGenerator gen) {\n+            return intStream(new RandomIntsSpliterator(gen, 0L, Long.MAX_VALUE, Integer.MAX_VALUE, 0));\n@@ -1472,6 +1460,4 @@\n-        private Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-            if (this instanceof ThreadLocalRandom) {\n-                return new RandomDoublesSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-            } else {\n-                return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-            }\n+        public static IntStream ints(RandomGenerator gen, long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+            RandomSupport.checkStreamSize(streamSize);\n+            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n+            return intStream(new RandomIntsSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1480,1 +1466,4 @@\n-        \/* ---------------- public methods ---------------- *\/\n+        public static IntStream ints(RandomGenerator gen, int randomNumberOrigin, int randomNumberBound) {\n+            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n+            return intStream(new RandomIntsSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+        }\n@@ -1482,2 +1471,4 @@\n-        \/\/ stream methods, coded in a way intended to better isolate for\n-        \/\/ maintenance purposes the small differences across forms.\n+        public static LongStream longs(RandomGenerator gen, long streamSize) {\n+            RandomSupport.checkStreamSize(streamSize);\n+            return longStream(new RandomLongsSpliterator(gen, 0L, streamSize, Long.MAX_VALUE, 0L));\n+        }\n@@ -1485,2 +1476,2 @@\n-        private static IntStream intStream(Spliterator.OfInt srng) {\n-            return StreamSupport.intStream(srng, false);\n+        public static LongStream longs(RandomGenerator gen) {\n+            return longStream(new RandomLongsSpliterator(gen, 0L, Long.MAX_VALUE, Long.MAX_VALUE, 0L));\n@@ -1489,2 +1480,4 @@\n-        private static LongStream longStream(Spliterator.OfLong srng) {\n-            return StreamSupport.longStream(srng, false);\n+        public static LongStream longs(RandomGenerator gen, long streamSize, long randomNumberOrigin, long randomNumberBound) {\n+            RandomSupport.checkStreamSize(streamSize);\n+            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n+            return longStream(new RandomLongsSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1493,2 +1486,3 @@\n-        private static DoubleStream doubleStream(Spliterator.OfDouble srng) {\n-            return StreamSupport.doubleStream(srng, false);\n+        public static LongStream longs(RandomGenerator gen, long randomNumberOrigin, long randomNumberBound) {\n+            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n+            return longStream(new RandomLongsSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n@@ -1497,2 +1491,1 @@\n-        @Override\n-        public IntStream ints(long streamSize) {\n+        public static DoubleStream doubles(RandomGenerator gen, long streamSize) {\n@@ -1500,1 +1493,1 @@\n-            return intStream(makeIntsSpliterator(0L, streamSize, Integer.MAX_VALUE, 0));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, streamSize, Double.MAX_VALUE, 0.0));\n@@ -1503,3 +1496,2 @@\n-        @Override\n-        public IntStream ints() {\n-            return intStream(makeIntsSpliterator(0L, Long.MAX_VALUE, Integer.MAX_VALUE, 0));\n+        public static DoubleStream doubles(RandomGenerator gen) {\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, Long.MAX_VALUE, Double.MAX_VALUE, 0.0));\n@@ -1508,2 +1500,1 @@\n-        @Override\n-        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+        public static DoubleStream doubles(RandomGenerator gen, long streamSize, double randomNumberOrigin, double randomNumberBound) {\n@@ -1512,1 +1503,1 @@\n-            return intStream(makeIntsSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, streamSize, randomNumberOrigin, randomNumberBound));\n@@ -1515,2 +1506,1 @@\n-        @Override\n-        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+        public static DoubleStream doubles(RandomGenerator gen, double randomNumberOrigin, double randomNumberBound) {\n@@ -1518,1 +1508,19 @@\n-            return intStream(makeIntsSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+            return doubleStream(new RandomDoublesSpliterator(gen, 0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+        }\n+\n+        \/* ---------------- public instance methods ---------------- *\/\n+\n+        public IntStream ints(long streamSize) {\n+            return ints(this, streamSize);\n+        }\n+\n+        public IntStream ints() {\n+            return ints(this);\n+        }\n+\n+        public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {\n+            return ints(this, streamSize, randomNumberOrigin, randomNumberBound);\n+        }\n+\n+        public IntStream ints(int randomNumberOrigin, int randomNumberBound) {\n+            return ints(this, randomNumberOrigin, randomNumberBound);\n@@ -1521,1 +1529,0 @@\n-        @Override\n@@ -1523,2 +1530,1 @@\n-            RandomSupport.checkStreamSize(streamSize);\n-            return longStream(makeLongsSpliterator(0L, streamSize, Long.MAX_VALUE, 0L));\n+            return longs(this, streamSize);\n@@ -1527,1 +1533,0 @@\n-        @Override\n@@ -1529,1 +1534,1 @@\n-            return longStream(makeLongsSpliterator(0L, Long.MAX_VALUE, Long.MAX_VALUE, 0L));\n+            return longs(this);\n@@ -1532,6 +1537,2 @@\n-        @Override\n-        public LongStream longs(long streamSize, long randomNumberOrigin,\n-                                long randomNumberBound) {\n-            RandomSupport.checkStreamSize(streamSize);\n-            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n-            return longStream(makeLongsSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+        public LongStream longs(long streamSize, long randomNumberOrigin,long randomNumberBound) {\n+            return longs(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -1540,1 +1541,0 @@\n-        @Override\n@@ -1542,4 +1542,1 @@\n-            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n-            return StreamSupport.longStream\n-                    (makeLongsSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound),\n-                            false);\n+            return longs(this, randomNumberOrigin, randomNumberBound);\n@@ -1548,1 +1545,0 @@\n-        @Override\n@@ -1550,2 +1546,1 @@\n-            RandomSupport.checkStreamSize(streamSize);\n-            return doubleStream(makeDoublesSpliterator(0L, streamSize, Double.MAX_VALUE, 0.0));\n+            return doubles(this, streamSize);\n@@ -1554,1 +1549,0 @@\n-        @Override\n@@ -1556,1 +1550,1 @@\n-            return doubleStream(makeDoublesSpliterator(0L, Long.MAX_VALUE, Double.MAX_VALUE, 0.0));\n+            return doubles(this);\n@@ -1559,1 +1553,0 @@\n-        @Override\n@@ -1561,3 +1554,1 @@\n-            RandomSupport.checkStreamSize(streamSize);\n-            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n-            return doubleStream(makeDoublesSpliterator(0L, streamSize, randomNumberOrigin, randomNumberBound));\n+            return doubles(this, streamSize, randomNumberOrigin, randomNumberBound);\n@@ -1566,1 +1557,0 @@\n-        @Override\n@@ -1568,2 +1558,1 @@\n-            RandomSupport.checkRange(randomNumberOrigin, randomNumberBound);\n-            return doubleStream(makeDoublesSpliterator(0L, Long.MAX_VALUE, randomNumberOrigin, randomNumberBound));\n+            return doubles(this, randomNumberOrigin, randomNumberBound);\n@@ -1624,1 +1613,0 @@\n-     * @hidden\n@@ -2052,1 +2040,0 @@\n-     * @hidden\n@@ -2344,1 +2331,0 @@\n-     * @hidden\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":81,"deletions":95,"binary":false,"changes":176,"status":"modified"}]}