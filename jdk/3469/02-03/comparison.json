{"files":[{"patch":"@@ -615,44 +615,0 @@\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-    private static final class ThreadLocalRandomProxy extends Random {\n-        @java.io.Serial\n-        static final long serialVersionUID = 0L;\n-\n-        static final AbstractSpliteratorGenerator PROXY = new ThreadLocalRandomProxy();\n-\n-        public int nextInt() {\n-            return ThreadLocalRandom.current().nextInt();\n-        }\n-\n-        public long nextLong() {\n-            return ThreadLocalRandom.current().nextLong();\n-        }\n-    }\n-\n-    @Override\n-    final protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        if (this instanceof ThreadLocalRandom) {\n-            return new RandomIntsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-        } else {\n-            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-        }\n-    }\n-\n-    @Override\n-    final protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        if (this instanceof ThreadLocalRandom) {\n-            return new RandomLongsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-        } else {\n-            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-        }\n-    }\n-\n-    @Override\n-    final protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        if (this instanceof ThreadLocalRandom) {\n-            return new RandomDoublesSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n-        } else {\n-            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -1441,3 +1443,41 @@\n-        protected abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n-        protected abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n-        protected abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n+        \/\/ Bug 8265221\n+        \/\/ To prevent leaking private interfaces.\n+        \/\/\n+        private static final class ThreadLocalRandomProxy extends Random {\n+            @java.io.Serial\n+            static final long serialVersionUID = 0L;\n+\n+            static final AbstractSpliteratorGenerator PROXY = new ThreadLocalRandomProxy();\n+\n+            public int nextInt() {\n+                return ThreadLocalRandom.current().nextInt();\n+            }\n+\n+            public long nextLong() {\n+                return ThreadLocalRandom.current().nextLong();\n+            }\n+        }\n+\n+        private Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomIntsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n+\n+        private Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomLongsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n+\n+        private Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomDoublesSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"}]}