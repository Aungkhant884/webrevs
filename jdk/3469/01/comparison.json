{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -33,0 +34,1 @@\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -34,5 +36,0 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n@@ -620,3 +617,15 @@\n-    \/**\n-     * @hidden\n-     *\/\n+    private static final class ThreadLocalRandomProxy extends Random {\n+        @java.io.Serial\n+        static final long serialVersionUID = 0L;\n+\n+        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n+\n+        public int nextInt() {\n+            return ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        public long nextLong() {\n+            return ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n@@ -624,2 +633,6 @@\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+        }\n@@ -628,3 +641,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -632,2 +642,6 @@\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+        }\n@@ -636,3 +650,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -640,2 +651,6 @@\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":35,"deletions":20,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -283,24 +283,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return super.makeIntsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return super.makeLongsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return super.makeDoublesSpliterator(index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -399,42 +395,0 @@\n-    private static final class ThreadLocalRandomProxy extends Random {\n-        @java.io.Serial\n-        static final long serialVersionUID = 0L;\n-\n-\n-        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n-\n-\n-        public int nextInt() {\n-            return ThreadLocalRandom.current().nextInt();\n-        }\n-\n-        public long nextLong() {\n-            return ThreadLocalRandom.current().nextLong();\n-        }\n-    }\n-\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":1,"deletions":47,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1441,53 +1441,3 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfInt} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code int} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfInt}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfLong} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code long} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfLong}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfDouble} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code double} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfDouble}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n+        protected abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n+        protected abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n+        protected abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n@@ -1666,1 +1616,1 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -1670,1 +1620,1 @@\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -1674,1 +1624,1 @@\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n@@ -2106,1 +2056,1 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -2110,1 +2060,1 @@\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -2114,1 +2064,1 @@\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":9,"deletions":59,"binary":false,"changes":68,"status":"modified"}]}