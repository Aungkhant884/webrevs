{"files":[{"patch":"@@ -620,3 +620,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -624,1 +621,1 @@\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+    protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -628,3 +625,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -632,1 +626,1 @@\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+    protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -636,3 +630,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -640,1 +631,1 @@\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+    protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -283,24 +283,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return super.makeIntsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return super.makeLongsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return super.makeDoublesSpliterator(index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -417,3 +417,1 @@\n-    \/**\n-     * @hidden\n-     *\/\n+\n@@ -421,1 +419,1 @@\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+    protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -425,3 +423,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -429,1 +424,1 @@\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+    protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -433,3 +428,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -437,1 +429,1 @@\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+    protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1441,53 +1441,3 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfInt} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code int} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfInt}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfLong} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code long} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfLong}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n-\n-        \/**\n-         * Create an instance of {@link Spliterator.OfDouble} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code double} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfDouble}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n+        protected abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n+        protected abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n+        protected abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n@@ -1666,1 +1616,1 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -1670,1 +1620,1 @@\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -1674,1 +1624,1 @@\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n@@ -2106,1 +2056,1 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n@@ -2110,1 +2060,1 @@\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n@@ -2114,1 +2064,1 @@\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":9,"deletions":59,"binary":false,"changes":68,"status":"modified"}]}