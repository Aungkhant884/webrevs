{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -33,0 +34,1 @@\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -34,5 +36,0 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n@@ -620,0 +617,15 @@\n+    private static final class ThreadLocalRandomProxy extends Random {\n+        @java.io.Serial\n+        static final long serialVersionUID = 0L;\n+\n+        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n+\n+        public int nextInt() {\n+            return ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        public long nextLong() {\n+            return ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n@@ -621,2 +633,6 @@\n-    protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+        }\n@@ -626,2 +642,6 @@\n-    protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+        }\n@@ -631,2 +651,6 @@\n-    protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+    final protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+        if (this instanceof ThreadLocalRandom) {\n+            return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n+        } else {\n+            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":35,"deletions":11,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -399,34 +395,0 @@\n-    private static final class ThreadLocalRandomProxy extends Random {\n-        @java.io.Serial\n-        static final long serialVersionUID = 0L;\n-\n-\n-        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n-\n-\n-        public int nextInt() {\n-            return ThreadLocalRandom.current().nextInt();\n-        }\n-\n-        public long nextLong() {\n-            return ThreadLocalRandom.current().nextLong();\n-        }\n-    }\n-\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-    @Override\n-    protected Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    @Override\n-    protected Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    @Override\n-    protected Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"}]}