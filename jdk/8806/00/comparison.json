{"files":[{"patch":"@@ -30,2 +30,0 @@\n-compiler\/c2\/irTests\/TestSkeletonPredicates.java 8286361 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @requires vm.compiler2.enabled\n+ * @bug 8286638\n+ * @summary Dominator failure because CastII node becomes TOP while skeleton predicate cannot be folded\n+ *          due to insufficient overflow\/underflow handling in CmpUNode::Value.\n+\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -Xbatch -XX:-UseLoopPredicate -XX:+StressIGVN -XX:StressSeed=680585904\n+ *                   -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckCmpUOverflow::test\n+ *                   -XX:CompileCommand=inline,compiler.rangechecks.TestRangeCheckCmpUOverflow::inlined\n+ *                   -XX:-DoEscapeAnalysis compiler.rangechecks.TestRangeCheckCmpUOverflow\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -Xbatch -XX:-UseLoopPredicate -XX:+StressIGVN\n+ *                   -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckCmpUOverflow::test\n+ *                   -XX:CompileCommand=inline,compiler.rangechecks.TestRangeCheckCmpUOverflow::inlined\n+ *                   -XX:-DoEscapeAnalysis compiler.rangechecks.TestRangeCheckCmpUOverflow\n+ *\/\n+\n+package compiler.rangechecks;\n+\n+\n+public class TestRangeCheckCmpUOverflow {\n+    static volatile int barrier;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            run();\n+        }\n+    }\n+\n+    static void run() {\n+        double[] array = new double[1000];\n+        inlined(1000, array);\n+        test(11);\n+    }\n+\n+    static void inlined(int stop, double[] array1) {\n+        for (int i = 8; i < stop; i++) {\n+            if ((i % 2) == 0) {\n+                array1[i] = 42.42;\n+            } else {\n+                barrier = 0x42;\n+            }\n+        }\n+    }\n+\n+    static void test(int stop) {\n+        double[] array1 = new double[10];\n+        for (int j = 0; j < stop; j++) {\n+            inlined(j, array1);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckCmpUOverflow.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}