{"files":[{"patch":"@@ -3034,0 +3034,1 @@\n+            JCCaseLabel defaultPattern = toP(F.at(pos).DefaultCaseLabel());\n@@ -3036,1 +3037,0 @@\n-            int patternPos = token.pos;\n@@ -3052,1 +3052,0 @@\n-            JCCaseLabel defaultPattern = toP(F.at(patternPos).DefaultCaseLabel());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097\n@@ -55,1 +55,0 @@\n-import com.sun.source.util.TreePathScanner;\n@@ -86,0 +85,1 @@\n+import com.sun.source.tree.DefaultCaseLabelTree;\n@@ -1823,0 +1823,87 @@\n+    @Test \/\/JDK-8275097\n+    void testDefaultTagPosition() throws IOException {\n+        String code = \"\"\"\n+                      package t;\n+                      class Test {\n+                          private void test1(int i) {\n+                              switch (i) {\n+                                  default:\n+                              }\n+                          }\n+                          private void test2(int i) {\n+                              switch (i) {\n+                                  case default:\n+                              }\n+                          }\n+                          private int test3(int i) {\n+                              return switch (i) {\n+                                  default: yield 0;\n+                              }\n+                          }\n+                          private int test4(int i) {\n+                              return switch (i) {\n+                                  case default: yield 0;\n+                              }\n+                          }\n+                          private void test5(int i) {\n+                              switch (i) {\n+                                  default -> {}\n+                              }\n+                          }\n+                          private void test6(int i) {\n+                              switch (i) {\n+                                  case default -> {}\n+                              }\n+                          }\n+                          private int test5(int i) {\n+                              return switch (i) {\n+                                  default -> { yield 0; }\n+                              }\n+                          }\n+                          private int test6(int i) {\n+                              return switch (i) {\n+                                  case default -> { yield 0; }\n+                              }\n+                          }\n+                          private int test7(int i) {\n+                              return switch (i) {\n+                                  default -> 0;\n+                              }\n+                          }\n+                          private int test8(int i) {\n+                              return switch (i) {\n+                                  case default -> 0;\n+                              }\n+                          }\n+                      }\n+                      \"\"\";\n+\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, null, null,\n+                null, Arrays.asList(new MyFileObject(code)));\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+        Trees t = Trees.instance(ct);\n+        SourcePositions sp = t.getSourcePositions();\n+        new TreeScanner<Void, Void>() {\n+            @Override\n+            public Void visitDefaultCaseLabel(DefaultCaseLabelTree tree, Void p) {\n+                int start = (int) sp.getStartPosition(cut, tree);\n+                int end   = (int) sp.getEndPosition(cut, tree);\n+                String defaultName = code.substring(start, end);\n+                if (!\"default\".equals(defaultName)) {\n+                    throw new AssertionError(\"Incorrect span: \" + defaultName);\n+                }\n+                return super.visitDefaultCaseLabel(tree, p);\n+            }\n+\n+            @Override\n+            public Void visitCase(CaseTree node, Void p) {\n+                scan(node.getLabels(), p);\n+                if (node.getCaseKind() == CaseTree.CaseKind.RULE)\n+                    scan(node.getBody(), p);\n+                else\n+                    scan(node.getStatements(), p);\n+                return null;\n+            }\n+        }.scan(cut, null);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":89,"deletions":2,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-SwitchErrors.java:36:20: compiler.err.total.pattern.and.default\n+SwitchErrors.java:36:13: compiler.err.total.pattern.and.default\n@@ -13,2 +13,2 @@\n-SwitchErrors.java:60:20: compiler.err.duplicate.default.label\n-SwitchErrors.java:66:20: compiler.err.duplicate.default.label\n+SwitchErrors.java:60:13: compiler.err.duplicate.default.label\n+SwitchErrors.java:66:13: compiler.err.duplicate.default.label\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}