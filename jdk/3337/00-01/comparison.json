{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-\n-\/* this is changed\n-public class PNGImageDecoder extends FilterInputStream implements Runnable\n-{ *\/\n-\n@@ -72,3 +67,0 @@\n-  \/* this is not needed\n-    ImageConsumer target;\n-    *\/\n@@ -80,4 +72,0 @@\n-  \/* this is not needed\n-     PNGImageDecoder next;\n-     *\/\n-\n@@ -156,3 +144,0 @@\n-                \/* this is not needed\n-                  if(target!=null) target.setDimensions(width,height);\n-                  *\/\n@@ -238,3 +223,0 @@\n-  \/* this is changed\n-     public void run() {\n-     *\/\n@@ -242,4 +224,0 @@\n-    \/* this is not needed\n-       ImageConsumer t = target;\n-       if(t!=null) try {\n-       *\/\n@@ -313,8 +291,0 @@\n-            \/* this is going to be set in the pixel store\n-              t.setColorModel(cm);\n-            t.setHints(interlaceMethod !=0\n-                       ? ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES\n-                       : ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES |\n-                         ImageConsumer.SINGLEPASS | ImageConsumer.SINGLEFRAME);\n-                         *\/\n-            \/\/ code added to make it work with ImageDecoder architecture\n@@ -329,1 +299,0 @@\n-            \/\/ end of adding\n@@ -338,5 +307,0 @@\n-            \/\/ These loops are far from being tuned.  They're this way to make them easy to\n-            \/\/ debug.  Tuning comes later.\n-            \/* code changed. target not needed here\n-               while(++pass<=passLimit && (t=target)!=null) {\n-               *\/\n@@ -359,3 +323,0 @@\n-                \/* code changed. target not needed here\n-                   while (row < height && (t=target)!=null) {\n-                   *\/\n@@ -460,3 +421,0 @@\n-                        \/*visit (row, col,\n-                            min (bHeight, height - row),\n-                            min (bWidth, width - col)); *\/\n@@ -467,4 +425,0 @@\n-                        \/* code changed. target not needed here\n-                          t.setPixels(0,row,width,1,cm,wPixels,0,width);\n-                          *\/\n-                       \/\/ code added to make it work with ImageDecoder arch\n@@ -472,7 +426,1 @@\n-                        \/\/ end of adding\n-                      }\n-                      else {\n-                        \/* code changed. target not needed here\n-                           t.setPixels(0,row,width,1,cm,bPixels,0,width);\n-                           *\/\n-                        \/\/ code added to make it work with ImageDecoder arch\n+                      } else {\n@@ -480,1 +428,0 @@\n-                        \/\/end of adding\n@@ -491,4 +438,0 @@\n-                    \/* code changed. target not needed here\n-                       t.setPixels(0,0,width,height,cm,wPixels,0,width);\n-                       *\/\n-                    \/\/ code added to make it work with ImageDecoder arch\n@@ -496,7 +439,1 @@\n-                      \/\/end of adding\n-                  }\n-                  else {\n-                     \/* code changed. target not needed here\n-                        t.setPixels(0,0,width,height,cm,bPixels,0,width);\n-                        *\/\n-                    \/\/ code added to make it work with ImageDecoder arch\n+                  } else {\n@@ -504,1 +441,0 @@\n-                      \/\/end of adding\n@@ -514,6 +450,0 @@\n-            \/* code not needed, don't deal with target\n-             if((t=target)!=null) {\n-               if(properties!=null) t.setProperties(properties);\n-                 t.imageComplete(ImageConsumer.STATICIMAGEDONE);\n-                 *\/\n-\n@@ -521,4 +451,0 @@\n-\n-              \/* code not needed }\n-               is.close();\n-               *\/\n@@ -527,4 +453,0 @@\n-                \/* code not needed\n-                   if((t=target)!=null) {\n-                   PNGEncoder.prChunk(e.toString(),inbuf,pos,limit-pos,true);\n-                *\/\n@@ -532,4 +454,0 @@\n-                \/* code not needed\n-                   t.setProperties(properties);\n-                   t.imageComplete(ImageConsumer.IMAGEERROR|ImageConsumer.STATICIMAGEDONE);\n-                *\/\n@@ -541,4 +459,0 @@\n-          \/* code not needed\n-             target = null;\n-             endTurn();\n-             *\/\n@@ -623,2 +537,1 @@\n-    \/\/public abstract class ChunkReader extends FilterInputStream {\n-  int pos, limit;\n+    int pos, limit;\n@@ -626,1 +539,1 @@\n-   int chunkKey, chunkLength, chunkCRC;\n+    int chunkKey, chunkLength, chunkCRC;\n@@ -632,2 +545,2 @@\n-  PNGFilterInputStream inputStream;\n-  InputStream underlyingInputStream;\n+    PNGFilterInputStream inputStream;\n+    InputStream underlyingInputStream;\n@@ -635,3 +548,0 @@\n-  \/* code changed\n-    public PNGImageDecoder(InputStream in, ImageConsumer t) throws IOException {\n-    *\/\n@@ -639,1 +549,0 @@\n-    \/\/ code added\n@@ -643,19 +552,0 @@\n-    \/\/ end of adding\n-    \/* code changed\n-       super(in);\n-       target = t;\n-       waitTurn();\n-       new Thread(this).start();\n-       *\/\n-    }\n-  \/* code changed to make it work with ImageDecoder architecture\n-    static int ThreadLimit = 10;\n-    private static synchronized void waitTurn() {\n-        try {\n-            while(ThreadLimit<=0) PNGImageDecoder.class.wait(1000);\n-        } catch(InterruptedException e){}\n-        ThreadLimit--;\n-    }\n-    private static synchronized void endTurn() {\n-        if(ThreadLimit<=0) PNGImageDecoder.class.notify();\n-        ThreadLimit++;\n@@ -663,1 +553,0 @@\n-    *\/\n@@ -731,2 +620,0 @@\n-    \/\/protected abstract boolean handleChunk(int key, byte[] buf, int st, int len)\n-    \/\/    throws IOException;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/PNGImageDecoder.java","additions":7,"deletions":120,"binary":false,"changes":127,"status":"modified"}]}