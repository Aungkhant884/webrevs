{"files":[{"patch":"@@ -140,1 +140,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: June 2022\n@@ -152,0 +152,1 @@\n+    private int lastSym;\n@@ -380,1 +381,4 @@\n-          opCount++;\n+          \/\/ axis nodetest is counted as one step, so not counted if last=DCOLON\n+          if (lastSym != sym.DCOLON) {\n+              opCount++;\n+          }\n@@ -387,0 +391,1 @@\n+      lastSym = s.sym;\n@@ -591,0 +596,1 @@\n+      lastSym = -1;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/java_cup\/internal\/runtime\/lr_parser.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.Arrays;\n-\n@@ -34,1 +32,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: June 2022\n@@ -95,2 +93,3 @@\n-            NAMESPACE, FOLLOWINGSIBLING, CHILD, DESCENDANTORSELF, DESCENDANT\n-          , PRECEDINGSIBLING, SELF, ANCESTORORSELF, PRECEDING, ANCESTOROR, PARENT, FOLLOWING, ATTRIBUTE\n+          NAMESPACE, FOLLOWINGSIBLING, CHILD, DESCENDANTORSELF, DESCENDANT,\n+          PRECEDINGSIBLING, SELF, ANCESTORORSELF, PRECEDING, ANCESTOROR, PARENT,\n+          FOLLOWING, ATTRIBUTE\n@@ -98,2 +97,3 @@\n-  public static final int[] OPERATORS = {GE, SLASH, ATSIGN, LPAREN, DCOLON,\n-      MINUS, STAR, LT, OR, DIV, PLUS, LE, VBAR, MOD, EQ, LBRACK, DOLLAR, NE, GT};\n+  public static final int[] OPERATORS = {GT, GE, EQ, NE, LT, LE, SLASH, DSLASH,\n+      DOT, DDOT, ATSIGN, DCOLON, PLUS, MINUS, STAR, DIV, MOD, AND, OR, LPAREN,\n+      LBRACK, VBAR, DOLLAR, NODE, TEXT, PI, PIPARAM};\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/sym.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @LastModified: Apr 2022\n+ * @LastModified: June 2022\n@@ -158,0 +158,1 @@\n+    boolean isAxis = false;\n@@ -257,2 +258,1 @@\n-                m_opCount++;\n-                isLiteral = false;\n+                incrementCount();\n@@ -342,1 +342,1 @@\n-        else if ((Token.LPAREN == c) || (Token.LBRACK == c))\n+        else if (Token.LBRACK == c)\n@@ -345,4 +345,13 @@\n-          if (!isLiteral && (Token.LPAREN == c)) {\n-            m_grpCount++;\n-            m_opCount++;\n-            isLiteral = false;\n+          incrementCount();\n+          isAxis = false;\n+        }\n+        else if ((Token.LPAREN == c))\n+        {\n+          nesting++;\n+          if (isLiteral) {\n+              if (!isAxis) {\n+                  incrementCount();\n+              }\n+          } else {\n+              m_grpCount++;\n+              incrementCount();\n@@ -350,0 +359,1 @@\n+          isAxis = false;\n@@ -352,3 +362,4 @@\n-        if ((Token.GT == c || Token.LT == c || Token.EQ == c) && Token.EQ != peekNext(pat, i)) {\n-            m_opCount++;\n-            isLiteral = false;\n+        if ((Token.GT == c || Token.LT == c || Token.EQ == c || Token.EM == c)) {\n+            if (Token.EQ != peekNext(pat, i)) {\n+                incrementCount();\n+            }\n@@ -356,3 +367,14 @@\n-        else if ((Token.LPAREN != c) && (Token.RPAREN != c) && (Token.RBRACK != c)) {\n-            m_opCount++;\n-            isLiteral = false;\n+        else if (Token.SLASH == c) {\n+            isAxis = false;\n+            if (Token.SLASH != peekNext(pat, i)) {\n+                incrementCount();\n+            }\n+        }\n+        \/\/ '(' and '[' already counted above; ':' is examined in case below\n+        \/\/ ',' is part of a function\n+        else if ((Token.LPAREN != c) && (Token.LBRACK != c) && (Token.RPAREN != c)\n+                && (Token.RBRACK != c) && (Token.COLON != c) && (Token.COMMA != c)) {\n+            if (Token.STAR != c || !isAxis) {\n+                incrementCount();\n+            }\n+            isAxis = false;\n@@ -379,0 +401,1 @@\n+            isAxis = true;\n@@ -392,0 +415,3 @@\n+        if (!isNum && Token.DOT == c && Token.DOT != peekNext(pat, i)) {\n+            incrementCount();\n+        }\n@@ -446,0 +472,5 @@\n+  private void incrementCount() {\n+      m_opCount++;\n+      isLiteral = false;\n+  }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/compiler\/Lexer.java","additions":45,"deletions":14,"binary":false,"changes":59,"status":"modified"}]}