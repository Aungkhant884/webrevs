{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-      live = new (Compile::current()->comp_arena()->Amalloc_D(sizeof(RegMask))) RegMask();\n+      live = new (Compile::current()->comp_arena()->AmallocWords(sizeof(RegMask))) RegMask();\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-#include \"gc\/g1\/heapRegionRemSet.hpp\"\n+#include \"gc\/g1\/heapRegionRemSet.inline.hpp\"\n@@ -1936,1 +1936,1 @@\n-  return HeapShared::is_archived_object(obj_oop);\n+  return Universe::heap()->is_archived_object(obj_oop);\n@@ -1944,1 +1944,1 @@\n-  return !HeapShared::closed_archive_heap_region_mapped();\n+  return !HeapShared::closed_regions_mapped();\n@@ -1969,1 +1969,1 @@\n-  return HeapShared::open_archive_heap_region_mapped();\n+  return HeapShared::open_regions_mapped();\n@@ -2020,0 +2020,46 @@\n+WB_ENTRY(jboolean, WB_HandshakeReadMonitors(JNIEnv* env, jobject wb, jobject thread_handle))\n+  class ReadMonitorsClosure : public HandshakeClosure {\n+    jboolean _executed;\n+\n+    void do_thread(Thread* th) {\n+      JavaThread* jt = JavaThread::cast(th);\n+      ResourceMark rm;\n+\n+      GrowableArray<MonitorInfo*>* info = new GrowableArray<MonitorInfo*>();\n+\n+      if (!jt->has_last_Java_frame()) {\n+        return;\n+      }\n+      RegisterMap rmap(jt);\n+      for (javaVFrame* vf = jt->last_java_vframe(&rmap); vf != NULL; vf = vf->java_sender()) {\n+        GrowableArray<MonitorInfo*> *monitors = vf->monitors();\n+        if (monitors != NULL) {\n+          int len = monitors->length();\n+          \/\/ Walk monitors youngest to oldest\n+          for (int i = len - 1; i >= 0; i--) {\n+            MonitorInfo* mon_info = monitors->at(i);\n+            if (mon_info->eliminated()) continue;\n+            oop owner = mon_info->owner();\n+            if (owner != NULL) {\n+              info->append(mon_info);\n+            }\n+          }\n+        }\n+      }\n+      _executed = true;\n+    }\n+\n+   public:\n+    ReadMonitorsClosure() : HandshakeClosure(\"WB_HandshakeReadMonitors\"), _executed(false) {}\n+    jboolean executed() const { return _executed; }\n+  };\n+\n+  ReadMonitorsClosure rmc;\n+  oop thread_oop = JNIHandles::resolve(thread_handle);\n+  if (thread_oop != NULL) {\n+    JavaThread* target = java_lang_Thread::thread(thread_oop);\n+    Handshake::execute(&rmc, target);\n+  }\n+  return rmc.executed();\n+WB_END\n+\n@@ -2025,1 +2071,1 @@\n-      JavaThread* jt = th->as_Java_thread();\n+      JavaThread* jt = JavaThread::cast(th);\n@@ -2061,1 +2107,1 @@\n-      JavaThread* jt = th->as_Java_thread();\n+      JavaThread* jt = JavaThread::cast(th);\n@@ -2592,0 +2638,1 @@\n+  {CC\"handshakeReadMonitors\", CC\"(Ljava\/lang\/Thread;)Z\", (void*)&WB_HandshakeReadMonitors },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":53,"deletions":6,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-        wait_blocked(self->as_Java_thread(), now);\n+        wait_blocked(JavaThread::cast(self), now);\n@@ -304,1 +304,1 @@\n-    StackWatermarkSet::start_processing(_requester->as_Java_thread(), StackWatermarkKind::gc);\n+    StackWatermarkSet::start_processing(JavaThread::cast(_requester), StackWatermarkKind::gc);\n@@ -632,1 +632,1 @@\n-    JavaThread* current = thr->as_Java_thread();\n+    JavaThread* current = JavaThread::cast(thr);\n@@ -640,2 +640,2 @@\n-  if (_handshakee->is_exiting() ||\n-     _handshakee->threadObj() == NULL) {\n+  assert(_handshakee->threadObj() != NULL, \"cannot suspend with a NULL threadObj\");\n+  if (_handshakee->is_exiting()) {\n@@ -676,1 +676,1 @@\n-    JavaThread* target = thr->as_Java_thread();\n+    JavaThread* target = JavaThread::cast(thr);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-      JavaThread* t2 = t->as_Java_thread();\n+      JavaThread* t2 = JavaThread::cast(t);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-    return getMethodCompilationLevel(method, false \/*not ost*\/);\n+    return getMethodCompilationLevel(method, false \/*not osr*\/);\n@@ -608,0 +608,1 @@\n+  public native boolean handshakeReadMonitors(Thread t);\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}