{"files":[{"patch":"@@ -143,6 +143,0 @@\n-class ShenandoahRendezvousClosure : public HandshakeClosure {\n-public:\n-  inline ShenandoahRendezvousClosure();\n-  inline void do_thread(Thread* thread);\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -236,7 +236,0 @@\n-ShenandoahRendezvousClosure::ShenandoahRendezvousClosure() :\n-  HandshakeClosure(\"ShenandoahRendezvous\") {\n-}\n-\n-void ShenandoahRendezvousClosure::do_thread(Thread* thread) {\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-    vmop_entry_disable_weakroots();\n+    vmop_entry_final_roots();\n@@ -215,1 +215,1 @@\n-void ShenandoahConcurrentGC::vmop_entry_disable_weakroots() {\n+void ShenandoahConcurrentGC::vmop_entry_final_roots() {\n@@ -218,1 +218,1 @@\n-  ShenandoahTimingsTracker timing(ShenandoahPhaseTimings::disable_weakroots_gross);\n+  ShenandoahTimingsTracker timing(ShenandoahPhaseTimings::final_roots_gross);\n@@ -222,1 +222,1 @@\n-  VM_ShenandoahDisableWeakRoots op(this);\n+  VM_ShenandoahFinalRoots op(this);\n@@ -226,1 +226,0 @@\n-\n@@ -272,3 +271,3 @@\n-void ShenandoahConcurrentGC::entry_disable_weakroots() {\n-  static const char* msg = \"Pause Disable Weak Roots\";\n-  ShenandoahPausePhase gc_phase(msg, ShenandoahPhaseTimings::disable_weakroots);\n+void ShenandoahConcurrentGC::entry_final_roots() {\n+  static const char* msg = \"Pause Final Roots\";\n+  ShenandoahPausePhase gc_phase(msg, ShenandoahPhaseTimings::final_roots);\n@@ -277,1 +276,1 @@\n-  op_disable_weakroots();\n+  op_final_roots();\n@@ -909,4 +908,0 @@\n-void ShenandoahConcurrentGC::op_rendezvous_roots() {\n-  ShenandoahHeap::heap()->disable_concurrent_weak_root_in_progress_concurrently();\n-}\n-\n@@ -992,1 +987,1 @@\n-void ShenandoahConcurrentGC::op_disable_weakroots() {\n+void ShenandoahConcurrentGC::op_final_roots() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  friend class VM_ShenandoahDisableWeakRoots;\n+  friend class VM_ShenandoahFinalRoots;\n@@ -63,1 +63,1 @@\n-  void vmop_entry_disable_weakroots();\n+  void vmop_entry_final_roots();\n@@ -71,1 +71,1 @@\n-  void entry_disable_weakroots();\n+  void entry_final_roots();\n@@ -101,1 +101,0 @@\n-  void op_rendezvous_roots();\n@@ -107,1 +106,1 @@\n-  void op_disable_weakroots();\n+  void op_final_roots();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1548,5 +1548,0 @@\n-void ShenandoahHeap::rendezvous_threads() {\n-  ShenandoahRendezvousClosure cl;\n-  Handshake::execute(&cl);\n-}\n-\n@@ -1723,28 +1718,0 @@\n-class ShenandoahDisableWeakRootsClosure : public HandshakeClosure {\n-public:\n-  inline ShenandoahDisableWeakRootsClosure() : HandshakeClosure(\"ShenandoahDisableWeakRoots\") {}\n-  inline void do_thread(Thread* thread) {\n-    char gc_state = ShenandoahThreadLocalData::gc_state(thread);\n-    gc_state &= ~((char)ShenandoahHeap::WEAK_ROOTS);\n-    ShenandoahThreadLocalData::set_gc_state(thread, gc_state);\n-  }\n-};\n-\n-void ShenandoahHeap::disable_concurrent_weak_root_in_progress_concurrently() {\n-\n-  \/\/ We need a rendezvous here to avoid the following race:\n-  \/\/ 1. Java thread reads referent, sees non-null but unreachable oop\n-  \/\/ 2. GC thread clears the referent\n-  \/\/ 3. GC thread turns off conc-ref-processing (we are here!)\n-  \/\/ 4. Java thread sees conc-ref-processing is off, publishes the dead oop\n-  rendezvous_threads();\n-\n-  \/\/ We need to turn off global flag before propagating the change to thread, otherwise new\n-  \/\/ threads might pick-up the old state but miss the update.\n-  _gc_state.set_cond(WEAK_ROOTS, false);\n-\n-  \/\/ Propagate flag-change to threads.\n-  ShenandoahDisableWeakRootsClosure cl;\n-  Handshake::execute(&cl);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -304,1 +304,0 @@\n-  void disable_concurrent_weak_root_in_progress_concurrently();\n@@ -374,1 +373,0 @@\n-  void rendezvous_threads();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-  f(conc_weak_roots_rendezvous,                     \"  Rendezvous\")                    \\\n@@ -101,2 +100,2 @@\n-  f(disable_weakroots_gross,                        \"Disable Weak Roots (G)\")          \\\n-  f(disable_weakroots,                              \"Disable Weak Roots (N)\")          \\\n+  f(final_roots_gross,                              \"Pause Final Roots (G)\")           \\\n+  f(final_roots,                                    \"Pause Final Roots (N)\")           \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -138,0 +136,6 @@\n+class ShenandoahRendezvousClosure : public HandshakeClosure {\n+public:\n+  inline ShenandoahRendezvousClosure() : HandshakeClosure(\"ShenandoahRendezvous\") {}\n+  inline void do_thread(Thread* thread) {}\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-           type == VM_Operation::VMOp_ShenandoahDisableWeakRoots ||\n+           type == VM_Operation::VMOp_ShenandoahFinalRoots ||\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-void VM_ShenandoahDisableWeakRoots::doit() {\n+void VM_ShenandoahFinalRoots::doit() {\n@@ -81,1 +81,1 @@\n-  _gc->entry_disable_weakroots();\n+  _gc->entry_final_roots();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-class VM_ShenandoahDisableWeakRoots: public VM_ShenandoahOperation {\n+class VM_ShenandoahFinalRoots: public VM_ShenandoahOperation {\n@@ -136,1 +136,1 @@\n-  VM_ShenandoahDisableWeakRoots(ShenandoahConcurrentGC* gc) :\n+  VM_ShenandoahFinalRoots(ShenandoahConcurrentGC* gc) :\n@@ -139,2 +139,2 @@\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahDisableWeakRoots; }\n-  const char* name()             const { return \"Shenandoah Disable Weak Roots\"; }\n+  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahFinalRoots; }\n+  const char* name()             const { return \"Shenandoah Final Roots\"; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  template(ShenandoahDisableWeakRoots)            \\\n+  template(ShenandoahFinalRoots)                  \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}