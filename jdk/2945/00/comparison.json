{"files":[{"patch":"@@ -345,1 +345,5 @@\n-  __ testb(gc_state, ShenandoahHeap::HAS_FORWARDED);\n+  int flags = ShenandoahHeap::HAS_FORWARDED;\n+  if (!is_strong) {\n+    flags |= ShenandoahHeap::WEAK_ROOTS;\n+  }\n+  __ testb(gc_state, flags);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -141,1 +141,5 @@\n-  LIR_Opr mask = LIR_OprFact::intConst(ShenandoahHeap::HAS_FORWARDED);\n+  int flags = ShenandoahHeap::HAS_FORWARDED;\n+  if (!ShenandoahBarrierSet::is_strong_access(decorators)) {\n+    flags |= ShenandoahHeap::WEAK_ROOTS;\n+  }\n+  LIR_Opr mask = LIR_OprFact::intConst(flags);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1364,1 +1364,5 @@\n-    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, ShenandoahHeap::HAS_FORWARDED);\n+    int flags = ShenandoahHeap::HAS_FORWARDED;\n+    if (!ShenandoahBarrierSet::is_strong_access(lrb->decorators())) {\n+      flags |= ShenandoahHeap::WEAK_ROOTS;\n+    }\n+    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, flags);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -808,6 +808,0 @@\n-  \/\/ Perform handshake to flush out dead oops\n-  {\n-    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_rendezvous);\n-    heap->rendezvous_threads();\n-  }\n-\n@@ -815,1 +809,1 @@\n-    heap->set_concurrent_weak_root_in_progress(false);\n+    heap->disable_concurrent_weak_root_in_progress_concurrently();\n@@ -825,1 +819,1 @@\n-  heap->set_concurrent_weak_root_in_progress(false);\n+  heap->disable_concurrent_weak_root_in_progress_concurrently();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -127,4 +127,2 @@\n-  if (ClassUnloading) {\n-    heap->set_concurrent_strong_root_in_progress(false);\n-    heap->set_concurrent_weak_root_in_progress(false);\n-  }\n+  heap->set_concurrent_strong_root_in_progress(false);\n+  heap->set_concurrent_weak_root_in_progress(false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1658,1 +1658,0 @@\n-  set_concurrent_weak_root_in_progress(false);\n@@ -1720,5 +1719,11 @@\n-void ShenandoahHeap::set_concurrent_weak_root_in_progress(bool in_progress) {\n-  if (in_progress) {\n-    _concurrent_weak_root_in_progress.set();\n-  } else {\n-    _concurrent_weak_root_in_progress.unset();\n+void ShenandoahHeap::set_concurrent_weak_root_in_progress(bool cond) {\n+  set_gc_state_mask(WEAK_ROOTS, cond);\n+}\n+\n+class ShenandoahDisableWeakRootsClosure : public HandshakeClosure {\n+public:\n+  inline ShenandoahDisableWeakRootsClosure() : HandshakeClosure(\"ShenandoahDisableWeakRoots\") {}\n+  inline void do_thread(Thread* thread) {\n+    char gc_state = ShenandoahThreadLocalData::gc_state(thread);\n+    gc_state &= ~((char)ShenandoahHeap::WEAK_ROOTS);\n+    ShenandoahThreadLocalData::set_gc_state(thread, gc_state);\n@@ -1726,0 +1731,11 @@\n+};\n+\n+void ShenandoahHeap::disable_concurrent_weak_root_in_progress_concurrently() {\n+  \/\/ Perform handshake to flush out dead oops\n+  {\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_rendezvous);\n+    ShenandoahDisableWeakRootsClosure cl;\n+    Handshake::execute(&cl);\n+  }\n+\n+  _gc_state.set_cond(WEAK_ROOTS, false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -266,0 +266,3 @@\n+\n+    \/\/ Weak-reference\/roots-processing in progress: need weak-LRB\n+    WEAK_ROOTS_BITPOS  = 4,\n@@ -274,0 +277,1 @@\n+    WEAK_ROOTS    = 1 << WEAK_ROOTS_BITPOS,\n@@ -283,1 +287,0 @@\n-  ShenandoahSharedFlag   _concurrent_weak_root_in_progress;\n@@ -301,0 +304,1 @@\n+  void disable_concurrent_weak_root_in_progress_concurrently();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-  return _concurrent_weak_root_in_progress.is_set();\n+  return _gc_state.is_set(WEAK_ROOTS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  _heap->set_concurrent_weak_root_in_progress(false);\n@@ -55,1 +54,0 @@\n-  _heap->set_concurrent_weak_root_in_progress(_concurrent_weak_root_in_progress);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-    char actual = ShenandoahThreadLocalData::gc_state(t);\n+    char actual = ShenandoahThreadLocalData::gc_state(t) & ~((char)ShenandoahHeap::WEAK_ROOTS);\n@@ -653,1 +653,1 @@\n-      char actual = _heap->gc_state();\n+      char actual = _heap->gc_state() & ~((char)ShenandoahHeap::WEAK_ROOTS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,26 @@\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.shenandoah;\n+\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceShortcutCycle\n+ *\/\n+\n+\/* @test\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceShortcutCycle\n+ *\/\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import sun.hotspot.WhiteBox;\n+\n+public class TestReferenceShortcutCycle {\n+    private static final int NUM_ITEMS = 100000;\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private static final class TestObject {\n+        public final int value;\n+\n+        public TestObject(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    private static WeakReference[] refs;\n+\n+    private static void setup() {\n+        refs = new WeakReference[NUM_ITEMS];\n+        for (int i = 0; i < NUM_ITEMS; i++) {\n+            refs[i] = new WeakReference<>(new TestObject(i));\n+        }\n+    }\n+\n+    private static void fail(String msg) throws Exception {\n+        throw new RuntimeException(msg);\n+    }\n+\n+    private static void testConcurrentCollection() throws Exception {\n+        setup();\n+        WB.concurrentGCAcquireControl();\n+        try {\n+            WB.concurrentGCRunTo(WB.AFTER_CONCURRENT_REFERENCE_PROCESSING_STARTED);\n+            for (int i = 0; i < NUM_ITEMS; i++) {\n+                if (refs[i].get() != null) {\n+                    fail(\"resurrected referent\");\n+                }\n+            }\n+        } finally {\n+            WB.concurrentGCReleaseControl();\n+        }\n+    }\n+    public static void main(String[] args) throws Exception {\n+        testConcurrentCollection();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}