{"files":[{"patch":"@@ -1269,1 +1269,1 @@\n-  BlockListList* _predecessors;\n+  BlockListList* _predecessors; \/\/ Each index i will hold predecessors of block with id i\n@@ -1280,1 +1280,1 @@\n-    _blocks = new BlockList();\n+    _blocks = new BlockList(BlockBegin::number_of_blocks());\n@@ -1282,1 +1282,0 @@\n-    int i;\n@@ -1286,1 +1285,1 @@\n-      for (i = 0; i < _blocks->length(); i++) {\n+      for (int i = 0; i < _blocks->length(); i++) {\n@@ -1291,1 +1290,1 @@\n-    for (i = 0; i < _blocks->length(); i++) {\n+    for (int i = 0; i < _blocks->length(); i++) {\n@@ -1293,21 +1292,1 @@\n-      BlockList* preds = _predecessors->at(block->block_id());\n-      if (preds == NULL) {\n-        assert(block->number_of_preds() == 0, \"should be the same\");\n-        continue;\n-      }\n-\n-      \/\/ clone the pred list so we can mutate it\n-      BlockList* pred_copy = new BlockList();\n-      int j;\n-      for (j = 0; j < block->number_of_preds(); j++) {\n-        pred_copy->append(block->pred_at(j));\n-      }\n-      \/\/ sort them in the same order\n-      preds->sort(cmp);\n-      pred_copy->sort(cmp);\n-      int length = MIN2(preds->length(), block->number_of_preds());\n-      for (j = 0; j < block->number_of_preds(); j++) {\n-        assert(preds->at(j) == pred_copy->at(j), \"must match\");\n-      }\n-\n-      assert(preds->length() == block->number_of_preds(), \"should be the same\");\n+      verify_block_preds_against_collected_preds(block);\n@@ -1319,13 +1298,11 @@\n-    BlockEnd* be = block->end();\n-    int n = be->number_of_sux();\n-    int i;\n-    for (i = 0; i < n; i++) {\n-      BlockBegin* sux = be->sux_at(i);\n-      assert(!sux->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n-\n-      BlockList* preds = _predecessors->at_grow(sux->block_id(), NULL);\n-      if (preds == NULL) {\n-        preds = new BlockList();\n-        _predecessors->at_put(sux->block_id(), preds);\n-      }\n-      preds->append(block);\n+    verify_successor_xentry_flag(block);\n+    collect_predecessors(block);\n+  }\n+\n+ private:\n+  void verify_successor_xentry_flag(const BlockBegin *block) const {\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      assert(!block->end()->sux_at(i)->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n+    }\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      assert(block->exception_handler_at(i)->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n@@ -1333,0 +1310,1 @@\n+  }\n@@ -1334,4 +1312,8 @@\n-    n = block->number_of_exception_handlers();\n-    for (i = 0; i < n; i++) {\n-      BlockBegin* sux = block->exception_handler_at(i);\n-      assert(sux->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n+  void collect_predecessors(BlockBegin *block) {\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      collect_predecessor(block, block->end()->sux_at(i));\n+    }\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      collect_predecessor(block, block->exception_handler_at(i));\n+    }\n+  }\n@@ -1339,6 +1321,27 @@\n-      BlockList* preds = _predecessors->at_grow(sux->block_id(), NULL);\n-      if (preds == NULL) {\n-        preds = new BlockList();\n-        _predecessors->at_put(sux->block_id(), preds);\n-      }\n-      preds->append(block);\n+  void collect_predecessor(BlockBegin* const pred, const BlockBegin *sux) {\n+    BlockList* preds = _predecessors->at_grow(sux->block_id(), NULL);\n+    if (preds == NULL) {\n+      preds = new BlockList();\n+      _predecessors->at_put(sux->block_id(), preds);\n+    }\n+    preds->append(pred);\n+  }\n+\n+  void verify_block_preds_against_collected_preds(const BlockBegin* block) const {\n+    BlockList* preds = _predecessors->at(block->block_id());\n+    if (preds == NULL) {\n+      assert(block->number_of_preds() == 0, \"should be the same\");\n+      return;\n+    }\n+    assert(preds->length() == block->number_of_preds(), \"should be the same\");\n+\n+    \/\/ clone the pred list so we can mutate it\n+    BlockList* pred_copy = new BlockList();\n+    for (int j = 0; j < block->number_of_preds(); j++) {\n+      pred_copy->append(block->pred_at(j));\n+    }\n+    \/\/ sort them in the same order\n+    preds->sort(cmp);\n+    pred_copy->sort(cmp);\n+    for (int j = 0; j < block->number_of_preds(); j++) {\n+      assert(preds->at(j) == pred_copy->at(j), \"must match\");\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":52,"deletions":49,"binary":false,"changes":101,"status":"modified"}]}