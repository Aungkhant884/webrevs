{"files":[{"patch":"@@ -222,2 +222,4 @@\n- * <p> <i>Relativization<\/i>, finally, is the inverse of resolution: For any\n- * two normalized URIs <i>u<\/i> and&nbsp;<i>v<\/i>,\n+ * <p> <i>Relativization<\/i>, finally, can be regarded as the inverse of resolution.\n+ * Let <i>u<\/i> be any normalized absolute URI ending with a slash character ({@code '\/'})\n+ * and <i>v<\/i> be any normalized relative URI not beginning with a period character ({@code '.'})\n+ * or slash character ({@code '\/'}). Then, the following statement is true:\n@@ -226,2 +228,8 @@\n- *   <i>u<\/i>{@code .relativize(}<i>u<\/i>{@code .resolve(}<i>v<\/i>{@code )).equals(}<i>v<\/i>{@code )}&nbsp;&nbsp;and<br>\n- *   <i>u<\/i>{@code .resolve(}<i>u<\/i>{@code .relativize(}<i>v<\/i>{@code )).equals(}<i>v<\/i>{@code )}&nbsp;&nbsp;.<br>\n+ *   <i>u<\/i>{@code .relativize(}<i>u<\/i>{@code .resolve(}<i>v<\/i>{@code )).equals(}<i>v<\/i>{@code )}\n+ * <\/blockquote>\n+ *\n+ * Let <i>u<\/i> be any normalized absolute URI ending with a slash character ({@code '\/'})\n+ * and <i>v<\/i> be any normalized absolute URI. Then, the following statement is true:\n+ *\n+ * <blockquote>\n+ *   <i>u<\/i>{@code .resolve(}<i>u<\/i>{@code .relativize(}<i>v<\/i>{@code )).equals(}<i>v<\/i>{@code )}\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *      7171415 6339649 6933879 8037396 8272072\n+ *      7171415 6339649 6933879 8037396 8272072 8051627\n@@ -1620,0 +1620,1 @@\n+        b8051627();\n@@ -1680,0 +1681,43 @@\n+    \/\/ 8051627 - Invariants about java.net.URI resolve and relativize are wrong\n+    private static void b8051627() {\n+        try {\n+            \/\/ Let u be a normalized absolute URI u which ends with \"\/\" and\n+            \/\/ v be a normalized relative URI v which does not start with \".\" or \"\/\", then\n+            \/\/ u.relativize(u.resolve(v)).equals(v) should be true\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\/\", \"c\/d\", \"c\/d\");\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\/\", \"g;x?y#s\", \"g;x?y#s\");\n+\n+            \/\/ when the URI condition is not met, u.relativize(u.resolve(v)).equals(v) may be false\n+            \/\/ In the following examples, that should be false\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\", \"c\/d\", \"http:\/\/a\/c\/d\");\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\/\", \"..\/c\/d\", \"http:\/\/a\/c\/d\");\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\/\", \"\/c\/d\", \"http:\/\/a\/c\/d\");\n+            reltivizeAfterResolveTest(\"http:\/\/a\/b\/\", \"http:\/\/a\/b\/c\/d\", \"c\/d\");\n+\n+            \/\/ Let u be a normalized absolute URI u which ends with \"\/\" and\n+            \/\/ v be a normalized absolute URI v, then\n+            \/\/ u.resolve(u.relativize(v)).equals(v) should be true\n+            resolveAfterRelativizeTest(\"http:\/\/a\/b\/\", \"http:\/\/a\/b\/c\/d\", \"http:\/\/a\/b\/c\/d\");\n+            resolveAfterRelativizeTest(\"http:\/\/a\/b\/\", \"http:\/\/a\/b\/c\/g;x?y#s\", \"http:\/\/a\/b\/c\/g;x?y#s\");\n+\n+            \/\/ when the URI condition is not met, u.resolve(u.relativize(v)).equals(v) may be false\n+            \/\/ In the following examples, that should be false\n+            resolveAfterRelativizeTest(\"http:\/\/a\/b\", \"http:\/\/a\/b\/c\/d\", \"http:\/\/a\/c\/d\");\n+            resolveAfterRelativizeTest(\"http:\/\/a\/b\/\", \"c\/d\", \"http:\/\/a\/b\/c\/d\");\n+        } catch (URISyntaxException e) {\n+            throw new AssertionError(\"shouldn't ever happen\", e);\n+        }\n+    }\n+    private static void reltivizeAfterResolveTest(String base, String target, String expected)\n+        throws URISyntaxException {\n+            URI baseURI = URI.create(base);\n+            URI targetURI = URI.create(target);\n+            eq(URI.create(expected), baseURI.relativize(baseURI.resolve(targetURI)));\n+    }\n+    private static void resolveAfterRelativizeTest(String base, String target, String expected)\n+        throws URISyntaxException {\n+            URI baseURI = URI.create(base);\n+            URI targetURI = URI.create(target);\n+            eq(URI.create(expected), baseURI.resolve(baseURI.relativize(targetURI)));\n+    }\n+\n","filename":"test\/jdk\/java\/net\/URI\/Test.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"}]}