{"files":[{"patch":"@@ -830,0 +830,49 @@\n+\n+\/*\n+ * In JDK 1.1.1, the pkg private class java.awt.PeerFixer was moved to\n+ * become an inner class of ScrollPane, which broke serialization\n+ * for ScrollPane objects using JDK 1.1.\n+ * Instead of moving it back out here, which would break all JDK 1.1.x\n+ * releases, we keep PeerFixer in both places. Because of the scoping rules,\n+ * the PeerFixer that is used in ScrollPane will be the one that is the\n+ * inner class. This pkg private PeerFixer class below will only be used\n+ * if the Java 2 platform is used to deserialize ScrollPane objects that were serialized\n+ * using JDK1.1\n+ *\/\n+class PeerFixer implements AdjustmentListener, java.io.Serializable {\n+    \/*\n+     * serialVersionUID\n+     *\/\n+    private static final long serialVersionUID = 7051237413532574756L;\n+\n+    PeerFixer(ScrollPane scroller) {\n+        this.scroller = scroller;\n+    }\n+\n+    \/**\n+     * Invoked when the value of the adjustable has changed.\n+     *\/\n+    @SuppressWarnings(\"deprecation\")\n+    public void adjustmentValueChanged(AdjustmentEvent e) {\n+        Adjustable adj = e.getAdjustable();\n+        int value = e.getValue();\n+        ScrollPanePeer peer = (ScrollPanePeer) scroller.peer;\n+        if (peer != null) {\n+            peer.setValue(adj, value);\n+        }\n+\n+        Component c = scroller.getComponent(0);\n+        switch(adj.getOrientation()) {\n+        case Adjustable.VERTICAL:\n+            c.move(c.getLocation().x, -(value));\n+            break;\n+        case Adjustable.HORIZONTAL:\n+            c.move(-(value), c.getLocation().y);\n+            break;\n+        default:\n+            throw new IllegalArgumentException(\"Illegal adjustable orientation\");\n+        }\n+    }\n+\n+    private ScrollPane scroller;\n+}\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/ScrollPane.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -246,2 +246,1 @@\n-     * Focus transfers for the lightweight components request should be made\n-     * synchronously.\n+     * Focus transfers should be synchronous for lightweight component requests.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * A {@code IIODOMException} is thrown by the {@code IIOMetadataNode} in\n+ * An {@code IIODOMException} is thrown by the {@code IIOMetadataNode} in\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/metadata\/IIOMetadataNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}