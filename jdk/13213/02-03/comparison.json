{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -684,1 +684,1 @@\n-                    if (OperatingSystem.isLinux()) {\n+                    if (OSInfo.getOSType() == OSInfo.OSType.LINUX) {\n@@ -718,1 +718,1 @@\n-                    if (OperatingSystem.isWindows()) {\n+                    if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftSynthesizer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.security.AccessController;\n@@ -47,1 +48,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -49,0 +49,1 @@\n+import sun.awt.OSInfo;\n@@ -291,1 +292,1 @@\n-            if (OperatingSystem.isMacOS() && (owner != null) &&\n+            if ((OSInfo.getOSType() == OSInfo.OSType.MACOSX) && (owner != null) &&\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/PopupFactory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -58,0 +57,1 @@\n+import sun.awt.OSInfo;\n@@ -383,1 +383,2 @@\n-        if (OperatingSystem.isWindows()) {\n+        OSInfo.OSType osType = OSInfo.getOSType();\n+        if (osType == OSInfo.OSType.WINDOWS) {\n@@ -392,1 +393,1 @@\n-        else if (OperatingSystem.isMacOS()) {\n+        else if (osType == OSInfo.OSType.MACOSX) {\n@@ -660,1 +661,2 @@\n-        if (OperatingSystem.isWindows()) {\n+        OSInfo.OSType osType = OSInfo.getOSType();\n+        if (osType == OSInfo.OSType.WINDOWS) {\n@@ -672,1 +674,1 @@\n-            if (OperatingSystem.isMacOS()) {\n+            if (osType == OSInfo.OSType.MACOSX) {\n@@ -1288,1 +1290,1 @@\n-                    if (OperatingSystem.isMacOS()) {\n+                    if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIManager.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -122,1 +121,1 @@\n-            if (OperatingSystem.isWindows()) {\n+            if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalLookAndFeel.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import sun.awt.OSInfo;\n@@ -59,2 +60,0 @@\n-import jdk.internal.util.OperatingSystem;\n-\n@@ -136,1 +135,1 @@\n-            boolean isWindows = OperatingSystem.isWindows();\n+            boolean isWindows = OSInfo.getOSType() == OSInfo.OSType.WINDOWS;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/NimbusLookAndFeel.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-\n@@ -55,2 +54,0 @@\n-import jdk.internal.util.OperatingSystem;\n-\n@@ -1379,1 +1376,1 @@\n-                if (OperatingSystem.isWindows()) {\n+                if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/FontConfiguration.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import jdk.internal.util.OperatingSystem;\n+\n+import java.security.AccessController;\n@@ -66,0 +69,4 @@\n+    \/\/ Cache the OSType for getOSType()\n+    private static final OSType CURRENT_OSTYPE = getOSTypeImpl();  \/\/ No DoPriv needed\n+\n+\n@@ -79,1 +86,1 @@\n-            return getOSType();\n+            return getOSTypeImpl();\n@@ -90,22 +97,3 @@\n-    public static OSType getOSType() throws SecurityException {\n-        String osName = System.getProperty(OS_NAME);\n-\n-        if (osName != null) {\n-            if (osName.contains(\"Windows\")) {\n-                return WINDOWS;\n-            }\n-\n-            if (osName.contains(\"Linux\")) {\n-                return LINUX;\n-            }\n-\n-            if (osName.contains(\"OS X\")) {\n-                return MACOSX;\n-            }\n-\n-            if (osName.contains(\"AIX\")) {\n-                return AIX;\n-            }\n-\n-            \/\/ determine another OS here\n-        }\n+    public static OSType getOSType() {\n+        return CURRENT_OSTYPE;\n+    }\n@@ -113,1 +101,10 @@\n-        return UNKNOWN;\n+    private static OSType getOSTypeImpl() {\n+        OperatingSystem os = OperatingSystem.current();\n+        return switch (os) {\n+            \/\/ Map OperatingSystem enum values to OSType enum values.\n+            case WINDOWS -> WINDOWS;\n+            case LINUX -> LINUX;\n+            case MACOS -> MACOSX;\n+            case AIX -> AIX;\n+            default -> UNKNOWN;\n+        };\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/OSInfo.java","additions":22,"deletions":25,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -297,1 +296,1 @@\n-        if (f.equals(canonical) || OperatingSystem.isWindows()) {\n+        if (f.equals(canonical) || OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/shell\/ShellFolder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -38,1 +38,1 @@\n-               if (OperatingSystem.isWindows()) {\n+               if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontManagerNativeLibrary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -69,1 +69,1 @@\n-                isLinux = OperatingSystem.isLinux();\n+                isLinux = OSInfo.getOSType() == OSInfo.OSType.LINUX;\n@@ -71,1 +71,1 @@\n-                isMacOSX = OperatingSystem.isMacOS();\n+                isMacOSX = OSInfo.getOSType() == OSInfo.OSType.MACOSX;\n@@ -103,1 +103,1 @@\n-                isWindows = OperatingSystem.isWindows();\n+                isWindows = OSInfo.getOSType() == OSInfo.OSType.WINDOWS;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontUtilities.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -86,0 +85,1 @@\n+import sun.awt.OSInfo;\n@@ -348,1 +348,1 @@\n-                isMac = OperatingSystem.isMacOS();\n+                isMac = OSInfo.getOSType() == OSInfo.OSType.MACOSX;\n@@ -1626,2 +1626,2 @@\n-        if (OperatingSystem.isLinux() ||\n-                OperatingSystem.isMacOS()) {\n+        if (OSInfo.getOSType() == OSInfo.OSType.LINUX ||\n+                OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPrinterJob.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -54,1 +56,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -80,1 +81,1 @@\n-        boolean isXPPlatform = (OperatingSystem.isWindows() &&\n+        boolean isXPPlatform = (OSInfo.getOSType() == OSInfo.OSType.WINDOWS &&\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/WindowsPlacesBar.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -439,1 +438,1 @@\n-        int numOfColor = OperatingSystem.isAix() ? 8 : 4;\n+        int numOfColor = OSInfo.getOSType() == OSInfo.OSType.AIX ? 8 : 4;\n@@ -638,1 +637,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -640,1 +638,1 @@\n-        if (OperatingSystem.isLinux()) { \/\/ Load motif default colors on Linux.\n+        if (OSInfo.getOSType() == OSInfo.OSType.LINUX) { \/\/ Load motif default colors on Linux.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/MotifColorUtilities.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -80,1 +80,1 @@\n-        if (OperatingSystem.isLinux()) {\n+        if (OSInfo.getOSType() == OSInfo.OSType.LINUX) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XScrollbarPeer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -317,1 +316,1 @@\n-        if (!OperatingSystem.isLinux()) {\n+        if (!osName.equals(\"Linux\")) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/font\/FcFontConfiguration.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import jdk.internal.util.OperatingSystem;\n+import sun.awt.OSInfo;\n@@ -150,1 +150,5 @@\n-        return OperatingSystem.isMacOS();\n+        return OSInfo.getOSType() == OSInfo.OSType.MACOSX;\n+    }\n+\n+    static boolean isLinux() {\n+        return OSInfo.getOSType() == OSInfo.OSType.LINUX;\n@@ -154,2 +158,2 @@\n-        return (OperatingSystem.isLinux() ||\n-                OperatingSystem.isMacOS());\n+        return (OSInfo.getOSType() == OSInfo.OSType.LINUX ||\n+                OSInfo.getOSType() == OSInfo.OSType.MACOSX);\n@@ -159,1 +163,1 @@\n-        return OperatingSystem.isAix();\n+        return OSInfo.getOSType() == OSInfo.OSType.AIX;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -102,2 +102,0 @@\n-import jdk.internal.util.OperatingSystem;\n-\n@@ -164,1 +162,1 @@\n-        return OperatingSystem.isWindows();\n+        return OSInfo.getOSType() == OSInfo.OSType.WINDOWS;\n@@ -597,1 +595,1 @@\n-                (OperatingSystem.isWindows() &&\n+                (OSInfo.getOSType() == OSInfo.OSType.WINDOWS &&\n@@ -1594,1 +1592,1 @@\n-        return OperatingSystem.isWindows()\n+        return OSInfo.getOSType() == OSInfo.OSType.WINDOWS\n@@ -1599,1 +1597,1 @@\n-        return OperatingSystem.isWindows()\n+        return OSInfo.getOSType() == OSInfo.OSType.WINDOWS\n@@ -2129,1 +2127,1 @@\n-            if (OperatingSystem.isWindows() &&\n+            if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS &&\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}