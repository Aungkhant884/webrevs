{"files":[{"patch":"@@ -0,0 +1,29 @@\n+import java.awt.Window;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 8294156\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Demonstrates adding and positioning several test windows\n+ *          vertically in multiple rows\n+ * @run main\/manual ThreeWindowRows\n+ *\/\n+public class ThreeWindowRows {\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .instructions(TwoWindowColumnsH.INSTRUCTIONS)\n+                      .rows(5)\n+                      .columns(30)\n+                      .testUI(ThreeWindowRows::createTestUI)\n+                      .positionTestUI(TwoWindowColumnsH::positionTestUI)\n+                      .position(PassFailJFrame.Position.VERTICAL)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static List<? extends Window> createTestUI() {\n+        return TwoWindowColumnsH.createTestUI(8);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/8294156\/manyWindows\/ThreeWindowRows.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,195 @@\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+import static java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment;\n+import static java.awt.Toolkit.getDefaultToolkit;\n+\n+\/*\n+ * @test\n+ * @bug 8294156\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Demonstrates adding and positioning several test windows\n+ *          horizontally in columns\n+ * @run main\/manual TwoWindowColumnsH\n+ *\/\n+public class TwoWindowColumnsH {\n+    public static final String INSTRUCTIONS = \"\"\"\n+            A simple demo to position test windows\n+            in two columns or rows near the\n+            instruction frame.\n+            \"\"\";\n+    private static final Dimension[] SIZE = {\n+            new Dimension(300, 200),\n+            new Dimension(250, 100)\n+    };\n+\n+    private static final Color[] COLORS = {\n+            new Color(240, 200, 240),\n+            new Color(200, 240, 200),\n+            new Color(200, 240, 240)\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .instructions(INSTRUCTIONS)\n+                      .rows(15)\n+                      .columns(30)\n+                      .testUI(TwoWindowColumnsH::createTestUI)\n+                      .positionTestUI(TwoWindowColumnsH::positionTestUI)\n+                      .position(PassFailJFrame.Position.HORIZONTAL)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static final int GAP = 8;\n+\n+    private static Point getScreenCenter() {\n+        GraphicsConfiguration gc = getLocalGraphicsEnvironment()\n+                                   .getDefaultScreenDevice()\n+                                   .getDefaultConfiguration();\n+        Dimension size = gc.getBounds()\n+                           .getSize();\n+        Insets insets = getDefaultToolkit()\n+                        .getScreenInsets(gc);\n+\n+        return new Point((size.width - insets.left - insets.right) \/ 2,\n+                         (size.height - insets.top - insets.bottom) \/ 2);\n+    }\n+\n+    private static Dimension getColumnSize(List<? extends Window> column) {\n+        return new Dimension(column.stream()\n+                                   .mapToInt(Component::getWidth)\n+                                   .max()\n+                                   .orElseThrow(),\n+                             column.stream()\n+                                         .mapToInt(Component::getHeight)\n+                                         .sum()\n+                             + (column.size() - 1) * GAP);\n+    }\n+\n+    private static Dimension getRowSize(List<? extends Window> row) {\n+        return new Dimension(row.stream()\n+                                     .mapToInt(Component::getWidth)\n+                                     .sum(),\n+                             row.stream()\n+                                      .mapToInt(Component::getHeight)\n+                                      .max()\n+                                      .orElseThrow()\n+                             + (row.size() - 1) * GAP);\n+    }\n+\n+    private static final int ROWS = 3;\n+    private static final int COLUMNS = 3;\n+\n+    public static void positionTestUI(List<? extends Window> windows,\n+                                      PassFailJFrame.InstructionUI instructionUI) {\n+        final Point center = getScreenCenter();\n+\n+        Dimension columnSize;\n+        int x;\n+        int y;\n+        switch (instructionUI.getPosition()) {\n+            case HORIZONTAL:\n+                x = instructionUI.getLocation().x + instructionUI.getSize().width + GAP;\n+                int columnStart = 0;\n+                do {\n+                    List<? extends Window> column =\n+                            windows.subList(columnStart,\n+                                            Math.min(columnStart + ROWS,\n+                                                     windows.size()));\n+                    columnSize = getColumnSize(column);\n+\n+                    y = center.y - columnSize.height \/ 2;\n+                    for (Window w : column) {\n+                        w.setLocation(x, y);\n+                        y += w.getHeight() + GAP;\n+                    }\n+\n+                    x += columnSize.width + GAP;\n+                    columnStart += ROWS;\n+                } while (columnStart < windows.size());\n+                break;\n+\n+            case VERTICAL:\n+                List<List<? extends Window>> windowRows =\n+                        new ArrayList<>(windows.size() \/ COLUMNS + 1);\n+                int rowStart = 0;\n+                do {\n+                    windowRows.add(windows.subList(rowStart,\n+                                                   Math.min(rowStart + COLUMNS,\n+                                                            windows.size())));\n+                    rowStart += COLUMNS;\n+                } while (rowStart < windows.size());\n+\n+                List<Dimension> rowSizes =\n+                        windowRows.stream()\n+                                  .map(TwoWindowColumnsH::getRowSize)\n+                                  .toList();\n+\n+                y = center.y - (rowSizes.stream()\n+                                        .mapToInt(d -> d.height)\n+                                        .sum()\n+                                + (rowSizes.size() - 1) * GAP\n+                                - instructionUI.getSize().height) \/ 2;\n+                instructionUI.setLocation(instructionUI.getLocation().x,\n+                                          y - GAP - instructionUI.getSize().height);\n+\n+                for (int i = 0; i < windowRows.size(); i++) {\n+                    List<? extends Window> row = windowRows.get(i);\n+                    Dimension rowSize = rowSizes.get(i);\n+\n+                    x = center.x - (rowSize.width\n+                                    + (row.size() - 1) * GAP) \/ 2;\n+                    for (Window w : row) {\n+                        w.setLocation(x, y);\n+                        x += w.getWidth() + GAP;\n+                    }\n+\n+                    y += rowSize.height + GAP;\n+                }\n+                break;\n+\n+            default:\n+                throw new IllegalStateException(\"Unexpected position value: \"\n+                                                + instructionUI.getPosition());\n+        }\n+    }\n+\n+    public static List<? extends Window> createTestUI() {\n+        return createTestUI(6);\n+    }\n+\n+    public static List<? extends Window> createTestUI(final int windowLimit) {\n+        return IntStream.rangeClosed(1, windowLimit)\n+                        .mapToObj(TwoWindowColumnsH::createFrame)\n+                        .toList();\n+    }\n+\n+    private static JFrame createFrame(int index) {\n+        JFrame frame = new JFrame(\"Test window \" + index);\n+        frame.add(createPanel(SIZE[index % SIZE.length],\n+                              COLORS[index % COLORS.length]));\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static JPanel createPanel(final Dimension size,\n+                                      final Color color) {\n+        JPanel panel = new JPanel();\n+        panel.setPreferredSize(size);\n+        panel.setBackground(color);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/8294156\/manyWindows\/TwoWindowColumnsH.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test\n+ * @bug 8294156\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Demonstrates adding and positioning several test windows\n+ *          vertically in rows\n+ * @run main\/manual TwoWindowRowsV\n+ *\/\n+public class TwoWindowRowsV {\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(TwoWindowColumnsH.INSTRUCTIONS)\n+                .rows(5)\n+                .columns(30)\n+                .testUI(TwoWindowColumnsH::createTestUI)\n+                .positionTestUI(TwoWindowColumnsH::positionTestUI)\n+                .position(PassFailJFrame.Position.VERTICAL)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/8294156\/manyWindows\/TwoWindowRowsV.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Window;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+import static java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment;\n+import static java.awt.Toolkit.getDefaultToolkit;\n+\n+\/*\n+ * @test\n+ * @bug 8294156\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Demonstrates adding and positioning two test windows horizontally\n+ * @run main\/manual TwoWindowsH\n+ *\/\n+public class TwoWindowsH {\n+    public static final String INSTRUCTIONS = \"\"\"\n+            A simple demo to position two test windows\n+            side by side horizontally or vertically.\n+            \"\"\";\n+    private static final Dimension SIZE = new Dimension(300, 200);\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .instructions(INSTRUCTIONS)\n+                      .rows(15)\n+                      .columns(30)\n+                      .testUI(TwoWindowsH::createTestUI)\n+                      .positionTestUI(TwoWindowsH::positionTestUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static final int GAP = 8;\n+\n+    private static Point getScreenCenter() {\n+        GraphicsConfiguration gc = getLocalGraphicsEnvironment()\n+                                   .getDefaultScreenDevice()\n+                                   .getDefaultConfiguration();\n+        Dimension size = gc.getBounds()\n+                           .getSize();\n+        Insets insets = getDefaultToolkit()\n+                        .getScreenInsets(gc);\n+\n+        return new Point((size.width - insets.left - insets.right) \/ 2,\n+                         (size.height - insets.top - insets.bottom) \/ 2);\n+    }\n+\n+    public static void positionTestUI(List<? extends Window> windows,\n+                                      PassFailJFrame.InstructionUI instructionUI) {\n+        final Point center = getScreenCenter();\n+\n+        int x;\n+        switch (instructionUI.getPosition()) {\n+            case HORIZONTAL:\n+                x = instructionUI.getLocation().x + instructionUI.getSize().width + GAP;\n+                for (Window w : windows) {\n+                    w.setLocation(x, center.y - w.getHeight() \/ 2);\n+                    x += w.getWidth() + GAP;\n+                }\n+                break;\n+\n+            case VERTICAL:\n+                final int width = windows.stream()\n+                                         .mapToInt(Component::getWidth)\n+                                         .sum()\n+                                  + GAP;\n+                final int y = instructionUI.getLocation().y\n+                              + instructionUI.getSize().height + GAP;\n+                x = center.x - width \/ 2;\n+                for (Window w : windows) {\n+                    w.setLocation(x, y);\n+                    x += w.getWidth() + GAP;\n+                }\n+                break;\n+\n+            default:\n+                throw new IllegalStateException(\"Unexpected position value: \"\n+                                                + instructionUI.getPosition());\n+        }\n+    }\n+\n+    public static List<? extends Window> createTestUI() {\n+        return Stream.of(new Color(240, 200, 240),\n+                         new Color(200, 240, 200))\n+                     .map(TwoWindowsH::createFrame)\n+                     .toList();\n+    }\n+\n+    private static int counter;\n+\n+    private static JFrame createFrame(Color color) {\n+        JFrame frame = new JFrame(\"Test window \" + (++counter));\n+        frame.add(createPanel(color));\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static JPanel createPanel(Color color) {\n+        JPanel panel = new JPanel();\n+        panel.setPreferredSize(SIZE);\n+        panel.setBackground(color);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/8294156\/twoWindows\/TwoWindowsH.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+\/*\n+ * @test\n+ * @bug 8294156\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Demonstrates adding and positioning two test windows vertically\n+ * @run main\/manual TwoWindowsV\n+ *\/\n+public class TwoWindowsV {\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .instructions(TwoWindowsH.INSTRUCTIONS)\n+                      .rows(15)\n+                      .columns(30)\n+                      .testUI(TwoWindowsH::createTestUI)\n+                      .positionTestUI(TwoWindowsH::positionTestUI)\n+                      .position(PassFailJFrame.Position.VERTICAL)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/8294156\/twoWindows\/TwoWindowsV.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"}]}