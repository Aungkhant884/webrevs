{"files":[{"patch":"@@ -1987,1 +1987,0 @@\n-                         LoopStripMiningIter > 1 &&\n@@ -2015,1 +2014,1 @@\n-    if (sfpt2->Opcode() == Op_SafePoint && (LoopStripMiningIter != 0 || is_deleteable_safept(sfpt2))) {\n+    if (sfpt2->Opcode() == Op_SafePoint && (strip_mine_loop || is_deleteable_safept(sfpt2))) {\n@@ -2564,0 +2563,23 @@\n+  if (LoopStripMiningIter == 0) {\n+    remove_outer_loop_and_safepoint(igvn);\n+    return;\n+  }\n+  if (LoopStripMiningIter == 1) {\n+    CountedLoopEndNode* cle = inner_cl->loopexit();\n+    Node* inner_test = cle->in(1);\n+    IfNode* outer_le = outer_loop_end();\n+    Node* outer_test = outer_le->in(1);\n+\n+    \/\/ make counted loop exit test always fail to\n+    igvn->replace_input_of(cle, 1, outer_test);\n+    \/\/ replace outer loop end with CountedLoopEndNode with formers' CLE's exit test\n+    Node* new_end = igvn->transform(new CountedLoopEndNode(outer_le->in(0), inner_test, cle->_prob, cle->_fcnt));\n+    igvn->replace_node(outer_le, new_end);\n+    \/\/ the outer loop backedge becomes the backedge of the inner loop\n+    igvn->replace_input_of(inner_cl, LoopBackControl, in(LoopBackControl));\n+    \/\/ make the outer loop go away\n+    igvn->replace_input_of(this, LoopBackControl, igvn->C->top());\n+    igvn->C->print_method(PHASE_DEBUG, 2);\n+    inner_cl->clear_strip_mined();\n+    return;\n+  }\n@@ -2583,5 +2605,1 @@\n-    Node* outer_sfpt = outer_safepoint();\n-    Node* outer_out = outer_loop_exit();\n-    igvn->replace_node(outer_out, outer_sfpt->in(0));\n-    igvn->replace_input_of(outer_sfpt, 0, igvn->C->top());\n-    inner_cl->clear_strip_mined();\n+    remove_outer_loop_and_safepoint(igvn);\n@@ -2831,0 +2849,9 @@\n+void OuterStripMinedLoopNode::remove_outer_loop_and_safepoint(PhaseIterGVN* igvn) const {\n+  CountedLoopNode* inner_cl = unique_ctrl_out()->as_CountedLoop();\n+  Node* outer_sfpt = outer_safepoint();\n+  Node* outer_out = outer_loop_exit();\n+  igvn->replace_node(outer_out, outer_sfpt->in(0));\n+  igvn->replace_input_of(outer_sfpt, 0, igvn->C->top());\n+  inner_cl->clear_strip_mined();\n+}\n+\n@@ -3666,1 +3693,1 @@\n-    if (LoopStripMiningIter == 0 || (LoopStripMiningIter > 1 && _child == NULL)) {\n+    if (LoopStripMiningIter == 0 || _head->as_CountedLoop()->is_strip_mined()) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":35,"deletions":8,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -565,0 +565,2 @@\n+\n+  void remove_outer_loop_and_safepoint(PhaseIterGVN* igvn) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * bug 8281322\n+ * @summary check counted loop is properly constructed with\/without safepoint\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestCountedLoopSafepoint\n+ *\/\n+\n+public class TestCountedLoopSafepoint {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=1\", \"-XX:-UseCountedLoopSafepoints\");\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=1\", \"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1\");\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=1\", \"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\");\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopStripMiningIter\", \"0\" }, failOn = { IRNode.SAFEPOINT, IRNode.OUTERSTRIPMINEDLOOP })\n+    @IR(applyIf = { \"LoopStripMiningIter\", \"1\" }, counts = { IRNode.SAFEPOINT, \"1\" }, failOn = { IRNode.OUTERSTRIPMINEDLOOP })\n+    @IR(applyIf = { \"LoopStripMiningIter\", \"> 1\" }, counts = { IRNode.SAFEPOINT, \"1\", IRNode.OUTERSTRIPMINEDLOOP, \"1\" })\n+    public static float test(int start, int stop) {\n+        float v = 1;\n+        for (int i = start; i < stop; i++) {\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    @Run(test = \"test\")\n+    private void testRunner() {\n+        test(0, 100);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopSafepoint.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -39,1 +39,3 @@\n-        TestFramework.run();\n+        TestFramework.runWithFlags(\"-XX:-UseCountedLoopSafepoints\");\n+        TestFramework.runWithFlags(\"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1\");\n+        TestFramework.runWithFlags(\"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestLongRangeChecks.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+    public static final String OUTERSTRIPMINEDLOOP = START + \"OuterStripMinedLoop\" + MID + END;\n@@ -138,0 +139,1 @@\n+    public static final String SAFEPOINT = START + \"SafePoint\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}