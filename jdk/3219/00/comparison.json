{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -331,3 +332,6 @@\n-  if (type_enum == JVMFlag::TYPE_ccstr || type_enum == JVMFlag::TYPE_ccstrlist) {\n-    return ccstrAtPut((JVMFlagsEnum)flag_enum, *((ccstr*)value), origin);\n-  }\n+  \/\/ The FLAG_SET_XXX macros should have caused an static_assert to fail if you try to use them on\n+  \/\/ ccstr\/ccstrlist options.\n+  \/\/\n+  \/\/ Uncomment the following and verify that the C++ compilation will fail.\n+  \/\/ FLAG_SET_ERGO(LogFile, \"\");\n+  assert(type_enum != JVMFlag::TYPE_ccstr && type_enum != JVMFlag::TYPE_ccstrlist, \"sanity\");\n@@ -340,16 +344,0 @@\n-\/\/ This is called by the FLAG_SET_XXX macros.\n-JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin) {\n-  JVMFlag* faddr = JVMFlag::flag_from_enum(flag);\n-  assert(faddr->is_ccstr(), \"wrong flag type\");\n-  ccstr old_value = faddr->get_ccstr();\n-  trace_flag_changed<ccstr, EventStringFlagChanged>(faddr, old_value, value, origin);\n-  char* new_value = os::strdup_check_oom(value);\n-  faddr->set_ccstr(new_value);\n-  if (!faddr->is_default() && old_value != NULL) {\n-    \/\/ Prior value is heap allocated so free it.\n-    FREE_C_HEAP_ARRAY(char, old_value);\n-  }\n-  faddr->set_origin(origin);\n-  return JVMFlag::SUCCESS;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":7,"deletions":19,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n-  static JVMFlag::Error ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin);\n@@ -89,0 +88,1 @@\n+    static_assert(type_enum != JVMFlag::TYPE_ccstr && type_enum != JVMFlag::TYPE_ccstrlist, \"not supported\");\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,2 @@\n-\/\/ Construct set functions for all flags\n+\/\/ Set functions for all flags -- use a template so we can do static_assert\n+\/\/ at individual call sites of FLAG_SET_{CMDLINE,ERGO,MGMT}\n@@ -56,0 +57,1 @@\n+  template <int dummy> \\\n@@ -78,3 +80,3 @@\n-                                       FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::COMMAND_LINE))\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n-#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::MANAGEMENT))\n+                                       FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::COMMAND_LINE))\n+#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::ERGONOMIC))\n+#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::MANAGEMENT))\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}