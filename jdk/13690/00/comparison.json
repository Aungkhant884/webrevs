{"files":[{"patch":"@@ -48,0 +48,3 @@\n+const UNICODE_LETTER = 0;\n+const UNICODE_DIGIT = 1;\n+const UNICODE_OTHER = 2;\n@@ -131,1 +134,1 @@\n-        var tokens = w.split(\/(?=[A-Z,.()<>?[\\\/])\/);\n+        var tokens = w.split(\/(?=[\\p{Lu},.()<>?[\\\/])\/u);\n@@ -135,1 +138,1 @@\n-            pattern += \"(\" + $.ui.autocomplete.escapeRegex(s).replace(\/[,?]\/g, \"$&\\\\s*?\") + \")\";\n+            pattern += \"(\" + escapeUnicodeRegex(s).replace(\/[,?]\/g, \"$&\\\\s*?\") + \")\";\n@@ -137,1 +140,1 @@\n-            var isWordToken =  \/\\w$\/.test(s);\n+            var isWordToken =  \/[\\p{L}\\p{Nd}_]$\/u.test(s);\n@@ -147,1 +150,1 @@\n-                        pattern += \"([a-z0-9$<>?[\\\\]]*?)\";\n+                        pattern += \"([\\\\p{L}\\\\p{Nd}\\\\p{Sc}<>?[\\\\]]*?)\";\n@@ -157,1 +160,1 @@\n-    var re = new RegExp(pattern, \"gi\");\n+    var re = new RegExp(pattern, \"gui\");\n@@ -161,0 +164,4 @@\n+\/\/ Unicode regular expressions do not allow certain characters to be escaped\n+function escapeUnicodeRegex(pattern) {\n+    return pattern.replace(\/[\\[\\]{}()*+?.\\\\^$|\\s]\/g, '\\\\$&');\n+}\n@@ -180,1 +187,1 @@\n-        var isUpper = isUpperCase(input[start]);\n+        var charType = getCharType(input[start]);\n@@ -187,6 +194,2 @@\n-        if (start !== 0 && !\/[\\W_]\/.test(prevChar) && !\/[\\W_]\/.test(input[start])) {\n-            if (isUpper && (isLowerCase(prevChar) || isLowerCase(nextChar))) {\n-                score -= 0.1;\n-            } else if (isMatcherUpper && start === prevEnd) {\n-                score -= isUpper ? 0.1 : 1.0;\n-            } else {\n+        if (start !== 0) {\n+            if (charType === UNICODE_DIGIT && getCharType(prevChar) === UNICODE_DIGIT) {\n@@ -194,0 +197,9 @@\n+            } else if (charType === UNICODE_LETTER && getCharType(prevChar) === UNICODE_LETTER) {\n+                var isUpper = isUpperCase(input[start]);\n+                if (isUpper && (isLowerCase(prevChar) || isLowerCase(nextChar))) {\n+                    score -= 0.1;\n+                } else if (isMatcherUpper && start === prevEnd) {\n+                    score -= isUpper ? 0.1 : 1.0;\n+                } else {\n+                    return NO_MATCH;\n+                }\n@@ -218,0 +230,3 @@\n+function isLetter(s) {\n+    return \/\\p{L}\/u.test(s);\n+}\n@@ -219,1 +234,1 @@\n-    return s !== s.toLowerCase();\n+    return \/\\p{Lu}\/u.test(s);\n@@ -222,1 +237,13 @@\n-    return s !== s.toUpperCase();\n+    return \/\\p{Ll}\/u.test(s);\n+}\n+function isDigit(s) {\n+    return \/\\p{Nd}\/u.test(s);\n+}\n+function getCharType(s) {\n+    if (isLetter(s)) {\n+        return UNICODE_LETTER;\n+    } else if (isDigit(s)) {\n+        return UNICODE_DIGIT;\n+    } else {\n+        return UNICODE_OTHER;\n+    }\n@@ -226,1 +253,1 @@\n-         + (str.match(\/([A-Z]+)\/g) || []).length \/ 10\n+         + (str.match(\/(\\p{Lu}+)\/gu) || []).length \/ 10\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/search.js.template","additions":42,"deletions":15,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8178982 8220497 8210683 8241982 8297216\n+ * @bug 8178982 8220497 8210683 8241982 8297216 8303056\n@@ -338,0 +338,40 @@\n+        \/\/ search for numeric strings\n+        checkSearch(inv, \"1\", List.of(\"listpkg.MyList.abc123xyz()\"));\n+        checkSearch(inv, \"12\", List.of(\"listpkg.MyList.abc123xyz()\"));\n+        checkSearch(inv, \"12 x\", List.of(\"listpkg.MyList.abc123xyz()\"));\n+        checkSearch(inv, \"123 x\", List.of(\"listpkg.MyList.abc123xyz()\"));\n+        checkSearch(inv, \"1 x\", List.of(\"listpkg.MyList.abc123xyz()\"));\n+        checkSearch(inv, \"2 x\", List.of());\n+        checkSearch(inv, \"3\", List.of(\"listpkg.MyList.M_3X\"));\n+        checkSearch(inv, \"3x\", List.of(\"listpkg.MyList.M_3X\"));\n+        checkSearch(inv, \"_3\", List.of(\"listpkg.MyList.M_3X\"));\n+        checkSearch(inv, \"3 x\", List.of(\"listpkg.MyList.M_3X\"));\n+\n+        \/\/ Unicode camel-case tests\n+        checkSearch(inv, \"νέα λίστα\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δημ νέα λίσ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δ ν λ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"ν λ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δημιουργήστεΝέαΛίστα\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δηΝέΛίσ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δΝΛ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"ΝΛ\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"δημ λίστα\", List.of(\"listpkg.ListProvider.δημιουργήστεΝέαΛίστα()\"));\n+        checkSearch(inv, \"сделать новый список\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сде нов спи\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"с н с\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"н с\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сделатьНовыйСписок\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сдеНовСпис\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сНС\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сН\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+        checkSearch(inv, \"сдеН Спи\", List.of(\"listpkg.ListProvider.сделатьНовыйСписок()\"));\n+\n+        \/\/ Negative Unicode camel-case tests\n+        checkSearch(inv, \"Νέα ίστα\", List.of());\n+        checkSearch(inv, \"α λίστα\", List.of());\n+        checkSearch(inv, \"ηΝΛ\", List.of());\n+        checkSearch(inv, \"овый\", List.of());\n+        checkSearch(inv, \"д н с\", List.of());\n+        checkSearch(inv, \"пи\", List.of());\n+        checkSearch(inv, \"НОВЫЙС ПИСОК\", List.of());\n@@ -367,1 +407,1 @@\n-        checking(\"Checking resut for query \\\"\" + query + \"\\\"\");\n+        checking(\"Checking result for query \\\"\" + query + \"\\\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/TestSearchScript.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @param <E> type parameter\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/listpkg\/List.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+    \/**\n+     * Constructor.\n+     *\/\n@@ -32,0 +35,3 @@\n+    \/**\n+     * English camel-case name\n+     *\/\n@@ -35,0 +41,15 @@\n+\n+    \/**\n+     * Greek camel-case name\n+     *\/\n+    public List δημιουργήστεΝέαΛίστα() {\n+        return null;\n+    }\n+\n+    \/**\n+     * Russion camel-case name\n+     *\/\n+    public List сделатьНовыйСписок() {\n+        return null;\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/listpkg\/ListProvider.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,1 +26,14 @@\n-public class MyList implements List {\n+\/**\n+ * A class.\n+ *\/\n+public abstract class MyList implements List {\n+\n+    \/**\n+     * Field name containing a digit.\n+     *\/\n+    public static final int M_3X = 2;\n+\n+    \/**\n+     * Method name containing digits.\n+     *\/\n+    public void abc123xyz() {}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/listpkg\/MyList.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}