{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,10 +38,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {}\n-  intptr_t* base_of_stack_pointer()   { return NULL; }\n-  void record_base_of_stack_pointer() {}\n-\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/thread_aix_ppc.hpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-  }\n-\n@@ -47,6 +44,0 @@\n-  intptr_t* base_of_stack_pointer() {\n-    return NULL;\n-  }\n-  void record_base_of_stack_pointer() {\n-  }\n-\n@@ -61,7 +52,0 @@\n-public:\n-\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/thread_bsd_x86.hpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,9 +63,0 @@\n- public:\n-  void record_base_of_stack_pointer() {\n-    assert(top_zero_frame() == NULL, \"junk on stack prior to Java call\");\n-  }\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-    assert(base_sp == NULL, \"should be\");\n-    assert(top_zero_frame() == NULL, \"junk on stack after Java call\");\n-  }\n-\n@@ -113,6 +104,0 @@\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/thread_bsd_zero.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,3 +51,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-  }\n-\n@@ -58,6 +55,0 @@\n-  intptr_t* base_of_stack_pointer() {\n-    return NULL;\n-  }\n-  void record_base_of_stack_pointer() {\n-  }\n-\n@@ -74,6 +65,0 @@\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/thread_linux_aarch64.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,12 +51,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-    \/\/ Nothing to do\n-  }\n-\n-  intptr_t* base_of_stack_pointer() {\n-    return NULL;\n-  }\n-\n-  void record_base_of_stack_pointer() {\n-    \/\/ Nothing to do\n-  }\n-\n@@ -81,6 +69,0 @@\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/thread_linux_arm.hpp","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,10 +40,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {}\n-  intptr_t* base_of_stack_pointer() { return NULL; }\n-  void record_base_of_stack_pointer() {}\n-\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/thread_linux_ppc.hpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,10 +39,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {}\n-  intptr_t* base_of_stack_pointer() { return NULL; }\n-  void record_base_of_stack_pointer() {}\n-\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/thread_linux_s390.hpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-  }\n-\n@@ -47,6 +44,0 @@\n-  intptr_t* base_of_stack_pointer() {\n-    return NULL;\n-  }\n-  void record_base_of_stack_pointer() {\n-  }\n-\n@@ -61,6 +52,0 @@\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/thread_linux_x86.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,9 +63,0 @@\n- public:\n-  void record_base_of_stack_pointer() {\n-    assert(top_zero_frame() == NULL, \"junk on stack prior to Java call\");\n-  }\n-  void set_base_of_stack_pointer(intptr_t* base_sp) {\n-    assert(base_sp == NULL, \"should be\");\n-    assert(top_zero_frame() == NULL, \"junk on stack after Java call\");\n-  }\n-\n@@ -120,7 +111,0 @@\n-\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/thread_linux_zero.hpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,3 +47,0 @@\n-  void set_base_of_stack_pointer(intptr_t* base_sp)  {}\n-\n-\n@@ -54,3 +51,0 @@\n-  intptr_t* base_of_stack_pointer()              { return NULL; }\n-  void record_base_of_stack_pointer()            {}\n-\n@@ -67,7 +61,0 @@\n- public:\n-  \/\/ These routines are only used on cpu architectures that\n-  \/\/ have separate register stacks (Itanium).\n-  static bool register_stack_overflow() { return false; }\n-  static void enable_register_stack_guard() {}\n-  static void disable_register_stack_guard() {}\n-\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/thread_windows_x86.hpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -111,4 +111,0 @@\n-\n-  if (_anchor.last_Java_sp() == NULL) {\n-    _thread->record_base_of_stack_pointer();\n-  }\n@@ -129,5 +125,0 @@\n-  if (_anchor.last_Java_sp() == NULL) {\n-    _thread->set_base_of_stack_pointer(NULL);\n-  }\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1810,7 +1810,0 @@\n-  if (register_stack_overflow()) {\n-    \/\/ For those architectures which have separate register and\n-    \/\/ memory stacks, we must check the register stack to see if\n-    \/\/ it has overflowed.\n-    return false;\n-  }\n-\n@@ -1945,7 +1938,0 @@\n-  \/\/ Used to test validity of stack trace backs.\n-  \/\/ This can't be moved into pre_run() else we invalidate\n-  \/\/ the requirement that thread_main_inner is lower on\n-  \/\/ the stack. Consequently all the initialization logic\n-  \/\/ stays here in run() rather than pre_run().\n-  this->record_base_of_stack_pointer();\n-\n@@ -2797,1 +2783,0 @@\n-  enable_register_stack_guard();\n@@ -2815,1 +2800,0 @@\n-  disable_register_stack_guard();\n@@ -2834,1 +2818,0 @@\n-  enable_register_stack_guard();\n@@ -2853,1 +2836,0 @@\n-  disable_register_stack_guard();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}