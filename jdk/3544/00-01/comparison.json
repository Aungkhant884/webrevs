{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -434,1 +434,1 @@\n-            } else if (word.endsWith(\"cleaner.shortInterval\")) {\n+            } else if (word.equals(\"cleaner.shortInterval\")) {\n@@ -439,1 +439,1 @@\n-            } else if (word.endsWith(\"cleaner.longInterval\")) {\n+            } else if (word.equals(\"cleaner.longInterval\")) {\n@@ -444,1 +444,1 @@\n-            } else if (word.endsWith(\"destroyTokenAfterLogout\")) {\n+            } else if (word.equals(\"destroyTokenAfterLogout\")) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/Config.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/KeyCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,2 @@\n+    \/\/ Called by the NativeResourceCleaner at specified intervals\n+    \/\/ See NativeResourceCleaner for more information\n@@ -169,5 +171,2 @@\n-        while (true) {\n-            SessionKeyRef next = (SessionKeyRef) SessionKeyRef.refQueue.poll();\n-            if (next == null) {\n-                break;\n-            }\n+        SessionKeyRef next;\n+        while ((next = (SessionKeyRef) SessionKeyRef.refQueue.poll()) != null) {\n@@ -1341,2 +1340,1 @@\n-    static ReferenceQueue<P11Key> refQueue =\n-        new ReferenceQueue<P11Key>();\n+    static ReferenceQueue<P11Key> refQueue = new ReferenceQueue<>();\n@@ -1344,1 +1342,1 @@\n-        Collections.synchronizedSet(new HashSet<SessionKeyRef>());\n+        Collections.synchronizedSet(new HashSet<>());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,0 +133,2 @@\n+    \/\/ Called by the NativeResourceCleaner at specified intervals\n+    \/\/ See NativeResourceCleaner for more information\n@@ -135,3 +137,2 @@\n-        while (true) {\n-            SessionRef next = (SessionRef) SessionRef.refQueue.poll();\n-            if (next == null) break;\n+        SessionRef next;\n+        while ((next = (SessionRef) SessionRef.refQueue.poll())!= null) {\n@@ -152,2 +153,1 @@\n-    static ReferenceQueue<Session> refQueue =\n-        new ReferenceQueue<Session>();\n+    static ReferenceQueue<Session> refQueue = new ReferenceQueue<>();\n@@ -156,1 +156,1 @@\n-        Collections.synchronizedSortedSet(new TreeSet<SessionRef>());\n+        Collections.synchronizedSortedSet(new TreeSet<>());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/Session.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,0 @@\n-        \/\/ access is synchronized on 'this'\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SessionManager.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -963,1 +963,1 @@\n-        boolean p11RefFound, SessRefFound;\n+        boolean keyRefFound, sessRefFound;\n@@ -972,0 +972,13 @@\n+        \/*\n+         * The cleaner.shortInterval and cleaner.longInterval properties\n+         * may be defined in the pkcs11 config file and are specified in milliseconds\n+         * Minimum value is 1000ms.  Default values :\n+         *  cleaner.shortInterval : 2000ms\n+         *  cleaner.longInterval  : 60000ms\n+         *\n+         * The cleaner thread runs at cleaner.shortInterval intervals\n+         * while P11Key or Session references continue to be found for cleaning.\n+         * If 100 iterations occur with no references being found, then the interval\n+         * period moves to cleaner.longInterval value. The cleaner thread moves back\n+         * to short interval checking if a resource is found\n+         *\/\n@@ -980,3 +993,3 @@\n-                p11RefFound = P11Key.drainRefQueue();\n-                SessRefFound = Session.drainRefQueue();\n-                if (!p11RefFound && !SessRefFound) {\n+                keyRefFound = P11Key.drainRefQueue();\n+                sessRefFound = Session.drainRefQueue();\n+                if (!keyRefFound && !sessRefFound) {\n@@ -984,0 +997,5 @@\n+                    if (count > 100) {\n+                        \/\/ no reference freed for some time\n+                        \/\/ increase the sleep time\n+                        sleepMillis = config.getResourceCleanerLongInterval();\n+                    }\n@@ -988,5 +1006,0 @@\n-                if (count > 100) {\n-                    \/\/ no reference freed for some time\n-                    \/\/ increase the sleep time\n-                    sleepMillis = config.getResourceCleanerLongInterval();\n-                }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.lang.ref.WeakReference;\n+import java.util.*;\n@@ -31,3 +31,0 @@\n-import javax.security.auth.login.LoginException;\n-\n-import sun.security.pkcs11.SunPKCS11;\n@@ -39,1 +36,0 @@\n-    private static SunPKCS11 pkcs11Provider = null;\n@@ -43,9 +39,0 @@\n-\n-        pkcs11Provider.logout();\n-        WeakReference<SunPKCS11> weakRef = new WeakReference<>(pkcs11Provider);\n-        pkcs11Provider = null;\n-        for (int i = 0; i > 100; i++) {\n-            System.gc();\n-            Thread.sleep(100);\n-        }\n-        System.out.println(\"Finish: \"+ weakRef.refersTo(null));\n@@ -68,1 +55,1 @@\n-        pkcs11Provider = (SunPKCS11)ks.getProvider();\n+        AuthProvider ap = (AuthProvider)ks.getProvider();\n@@ -75,2 +62,2 @@\n-            pkcs11Provider.login(new Subject(), new PasswordCallbackHandler());\n-            pkcs11Provider.logout();\n+            ap.login(new Subject(), new PasswordCallbackHandler());\n+            ap.logout();\n@@ -90,2 +77,2 @@\n-            pkcs11Provider.login(new Subject(), null);\n-            pkcs11Provider.logout();\n+            ap.login(new Subject(), null);\n+            ap.logout();\n@@ -102,2 +89,2 @@\n-        pkcs11Provider.setCallbackHandler(new PasswordCallbackHandler());\n-        pkcs11Provider.login(new Subject(), null);\n+        ap.setCallbackHandler(new PasswordCallbackHandler());\n+        ap.login(new Subject(), null);\n@@ -107,2 +94,2 @@\n-        pkcs11Provider.setCallbackHandler(null);\n-        pkcs11Provider.login(new Subject(), null);\n+        ap.setCallbackHandler(null);\n+        ap.login(new Subject(), null);\n@@ -112,1 +99,1 @@\n-        pkcs11Provider.logout();\n+        ap.logout();\n@@ -115,11 +102,2 @@\n-        pkcs11Provider.setCallbackHandler(new PasswordCallbackHandler());\n-        try {\n-            ks.load(null, (char[]) null);\n-        } catch (IOException e) {\n-            if (e.getCause() instanceof LoginException &&\n-                    e.getCause().getMessage().contains(\"No token present\")) {\n-                \/\/ignore\n-            } else {\n-                throw new RuntimeException(\"Unexpected result\", e);\n-            }\n-        }\n+        ap.setCallbackHandler(new PasswordCallbackHandler());\n+        ks.load(null, (char[])null);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.java","additions":13,"deletions":35,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -112,2 +112,0 @@\n-        --add-modules jdk.crypto.cryptoki \\\n-        --add-exports jdk.crypto.cryptoki\/sun.security.pkcs11=ALL-UNNAMED \\\n@@ -122,2 +120,0 @@\n-        --add-modules jdk.crypto.cryptoki \\\n-        --add-exports jdk.crypto.cryptoki\/sun.security.pkcs11=ALL-UNNAMED \\\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.sh","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}