{"files":[{"patch":"@@ -3052,138 +3052,0 @@\n-\/\/ Inline static functions for Java Stack and Local manipulation\n-\n-\/\/ The implementations are platform dependent. We have to worry about alignment\n-\/\/ issues on some machines which can change on the same platform depending on\n-\/\/ whether it is an LP64 machine also.\n-address BytecodeInterpreter::stack_slot(intptr_t *tos, int offset) {\n-  return (address) tos[Interpreter::expr_index_at(-offset)];\n-}\n-\n-jint BytecodeInterpreter::stack_int(intptr_t *tos, int offset) {\n-  return *((jint*) &tos[Interpreter::expr_index_at(-offset)]);\n-}\n-\n-jfloat BytecodeInterpreter::stack_float(intptr_t *tos, int offset) {\n-  return *((jfloat *) &tos[Interpreter::expr_index_at(-offset)]);\n-}\n-\n-oop BytecodeInterpreter::stack_object(intptr_t *tos, int offset) {\n-  return cast_to_oop(tos [Interpreter::expr_index_at(-offset)]);\n-}\n-\n-jdouble BytecodeInterpreter::stack_double(intptr_t *tos, int offset) {\n-  return ((VMJavaVal64*) &tos[Interpreter::expr_index_at(-offset)])->d;\n-}\n-\n-jlong BytecodeInterpreter::stack_long(intptr_t *tos, int offset) {\n-  return ((VMJavaVal64 *) &tos[Interpreter::expr_index_at(-offset)])->l;\n-}\n-\n-\/\/ only used for value types\n-void BytecodeInterpreter::set_stack_slot(intptr_t *tos, address value,\n-                                                        int offset) {\n-  *((address *)&tos[Interpreter::expr_index_at(-offset)]) = value;\n-}\n-\n-void BytecodeInterpreter::set_stack_int(intptr_t *tos, int value,\n-                                                       int offset) {\n-  *((jint *)&tos[Interpreter::expr_index_at(-offset)]) = value;\n-}\n-\n-void BytecodeInterpreter::set_stack_float(intptr_t *tos, jfloat value,\n-                                                         int offset) {\n-  *((jfloat *)&tos[Interpreter::expr_index_at(-offset)]) = value;\n-}\n-\n-void BytecodeInterpreter::set_stack_object(intptr_t *tos, oop value,\n-                                                          int offset) {\n-  *((oop *)&tos[Interpreter::expr_index_at(-offset)]) = value;\n-}\n-\n-\/\/ needs to be platform dep for the 32 bit platforms.\n-void BytecodeInterpreter::set_stack_double(intptr_t *tos, jdouble value,\n-                                                          int offset) {\n-  ((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset)])->d = value;\n-}\n-\n-void BytecodeInterpreter::set_stack_double_from_addr(intptr_t *tos,\n-                                              address addr, int offset) {\n-  (((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset)])->d =\n-                        ((VMJavaVal64*)addr)->d);\n-}\n-\n-void BytecodeInterpreter::set_stack_long(intptr_t *tos, jlong value,\n-                                                        int offset) {\n-  ((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset+1)])->l = 0xdeedbeeb;\n-  ((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset)])->l = value;\n-}\n-\n-void BytecodeInterpreter::set_stack_long_from_addr(intptr_t *tos,\n-                                            address addr, int offset) {\n-  ((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset+1)])->l = 0xdeedbeeb;\n-  ((VMJavaVal64*)&tos[Interpreter::expr_index_at(-offset)])->l =\n-                        ((VMJavaVal64*)addr)->l;\n-}\n-\n-\/\/ Locals\n-\n-address BytecodeInterpreter::locals_slot(intptr_t* locals, int offset) {\n-  return (address)locals[Interpreter::local_index_at(-offset)];\n-}\n-jint BytecodeInterpreter::locals_int(intptr_t* locals, int offset) {\n-  return (jint)locals[Interpreter::local_index_at(-offset)];\n-}\n-jfloat BytecodeInterpreter::locals_float(intptr_t* locals, int offset) {\n-  return (jfloat)locals[Interpreter::local_index_at(-offset)];\n-}\n-oop BytecodeInterpreter::locals_object(intptr_t* locals, int offset) {\n-  return cast_to_oop(locals[Interpreter::local_index_at(-offset)]);\n-}\n-jdouble BytecodeInterpreter::locals_double(intptr_t* locals, int offset) {\n-  return ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->d;\n-}\n-jlong BytecodeInterpreter::locals_long(intptr_t* locals, int offset) {\n-  return ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->l;\n-}\n-\n-\/\/ Returns the address of locals value.\n-address BytecodeInterpreter::locals_long_at(intptr_t* locals, int offset) {\n-  return ((address)&locals[Interpreter::local_index_at(-(offset+1))]);\n-}\n-address BytecodeInterpreter::locals_double_at(intptr_t* locals, int offset) {\n-  return ((address)&locals[Interpreter::local_index_at(-(offset+1))]);\n-}\n-\n-\/\/ Used for local value or returnAddress\n-void BytecodeInterpreter::set_locals_slot(intptr_t *locals,\n-                                   address value, int offset) {\n-  *((address*)&locals[Interpreter::local_index_at(-offset)]) = value;\n-}\n-void BytecodeInterpreter::set_locals_int(intptr_t *locals,\n-                                   jint value, int offset) {\n-  *((jint *)&locals[Interpreter::local_index_at(-offset)]) = value;\n-}\n-void BytecodeInterpreter::set_locals_float(intptr_t *locals,\n-                                   jfloat value, int offset) {\n-  *((jfloat *)&locals[Interpreter::local_index_at(-offset)]) = value;\n-}\n-void BytecodeInterpreter::set_locals_object(intptr_t *locals,\n-                                   oop value, int offset) {\n-  *((oop *)&locals[Interpreter::local_index_at(-offset)]) = value;\n-}\n-void BytecodeInterpreter::set_locals_double(intptr_t *locals,\n-                                   jdouble value, int offset) {\n-  ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->d = value;\n-}\n-void BytecodeInterpreter::set_locals_long(intptr_t *locals,\n-                                   jlong value, int offset) {\n-  ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->l = value;\n-}\n-void BytecodeInterpreter::set_locals_double_from_addr(intptr_t *locals,\n-                                   address addr, int offset) {\n-  ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->d = ((VMJavaVal64*)addr)->d;\n-}\n-void BytecodeInterpreter::set_locals_long_from_addr(intptr_t *locals,\n-                                   address addr, int offset) {\n-  ((VMJavaVal64*)&locals[Interpreter::local_index_at(-(offset+1))])->l = ((VMJavaVal64*)addr)->l;\n-}\n-\n@@ -3196,1 +3058,0 @@\n-\n@@ -3206,0 +3067,1 @@\n+\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":1,"deletions":139,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -512,46 +512,0 @@\n-static void End_Of_Interpreter(void);\n-\n-\/\/ Inline static functions for Java Stack and Local manipulation\n-\n-static address stack_slot(intptr_t *tos, int offset);\n-static jint stack_int(intptr_t *tos, int offset);\n-static jfloat stack_float(intptr_t *tos, int offset);\n-static oop stack_object(intptr_t *tos, int offset);\n-static jdouble stack_double(intptr_t *tos, int offset);\n-static jlong stack_long(intptr_t *tos, int offset);\n-\n-\/\/ only used for value types\n-static void set_stack_slot(intptr_t *tos, address value, int offset);\n-static void set_stack_int(intptr_t *tos, int value, int offset);\n-static void set_stack_float(intptr_t *tos, jfloat value, int offset);\n-static void set_stack_object(intptr_t *tos, oop value, int offset);\n-\n-\/\/ needs to be platform dep for the 32 bit platforms.\n-static void set_stack_double(intptr_t *tos, jdouble value, int offset);\n-static void set_stack_long(intptr_t *tos, jlong value, int offset);\n-\n-static void set_stack_double_from_addr(intptr_t *tos, address addr, int offset);\n-static void set_stack_long_from_addr(intptr_t *tos, address addr, int offset);\n-\n-\/\/ Locals\n-\n-static address locals_slot(intptr_t* locals, int offset);\n-static jint locals_int(intptr_t* locals, int offset);\n-static jfloat locals_float(intptr_t* locals, int offset);\n-static oop locals_object(intptr_t* locals, int offset);\n-static jdouble locals_double(intptr_t* locals, int offset);\n-static jlong locals_long(intptr_t* locals, int offset);\n-\n-static address locals_long_at(intptr_t* locals, int offset);\n-static address locals_double_at(intptr_t* locals, int offset);\n-\n-static void set_locals_slot(intptr_t *locals, address value, int offset);\n-static void set_locals_int(intptr_t *locals, jint value, int offset);\n-static void set_locals_float(intptr_t *locals, jfloat value, int offset);\n-static void set_locals_object(intptr_t *locals, oop value, int offset);\n-static void set_locals_double(intptr_t *locals, jdouble value, int offset);\n-static void set_locals_long(intptr_t *locals, jlong value, int offset);\n-static void set_locals_double_from_addr(intptr_t *locals,\n-                                   address addr, int offset);\n-static void set_locals_long_from_addr(intptr_t *locals,\n-                                   address addr, int offset);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"}]}