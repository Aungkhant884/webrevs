{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,7 +59,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.BitSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import java.util.*;\n@@ -6747,2 +6741,1 @@\n-        final List<Class<?>> empty = List.of();\n-        final List<Class<?>> longest = mhs.filter(Objects::nonNull).\n+        return mhs.filter(Objects::nonNull)\n@@ -6750,10 +6743,6 @@\n-                        map(MethodHandle::type).\n-                        filter(t -> t.parameterCount() > skipSize).\n-                        map(MethodType::parameterList).\n-                        reduce((p, q) -> p.size() >= q.size() ? p : q).orElse(empty);\n-        return longest.isEmpty() ? empty : longest.subList(skipSize, longest.size());\n-    }\n-\n-    private static List<Class<?>> longestParameterList(List<List<Class<?>>> lists) {\n-        final List<Class<?>> empty = List.of();\n-        return lists.stream().reduce((p, q) -> p.size() >= q.size() ? p : q).orElse(empty);\n+                .map(MethodHandle::type)\n+                .filter(t -> t.parameterCount() > skipSize)\n+                .max(Comparator.comparing(MethodType::parameterCount))\n+                .map(MethodType::ptypes)\n+                .map(longest -> List.of(Arrays.copyOfRange(longest, skipSize, longest.length)))\n+                .orElse(List.of());\n@@ -6765,1 +6754,1 @@\n-        return longestParameterList(List.of(longest1, longest2));\n+        return longest1.size() >= longest2.size() ? longest1 : longest2;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"}]}