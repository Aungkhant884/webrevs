{"files":[{"patch":"@@ -66,1 +66,1 @@\n-  \/\/ convert \"max(a,b) * min(a,b)\" into \"a*b\".\n+  \/\/ convert \"(-a)*(-b)\" into \"a*b\"\n@@ -69,0 +69,10 @@\n+  if (in1->is_Sub() && in2->is_Sub()) {\n+    Node* n11 = in1->in(1);\n+    Node* n21 = in2->in(1);\n+    if (phase->type(n11)->is_zero_type() &&\n+        phase->type(n21)->is_zero_type()) {\n+      return make(in1->in(2), in2->in(2));\n+    }\n+  }\n+\n+  \/\/ convert \"max(a,b) * min(a,b)\" into \"a*b\".\n@@ -204,12 +214,0 @@\n-  \/\/ convert \"(-a)*(-b)\" into \"a*b\"\n-  Node *in1 = in(1);\n-  Node *in2 = in(2);\n-  if (in1->Opcode() == Op_SubI && in2->Opcode() == Op_SubI) {\n-    Node* n11 = in1->in(1);\n-    Node* n21 = in2->in(1);\n-    if (phase->type(n11)->higher_equal(TypeInt::ZERO) &&\n-        phase->type(n21)->higher_equal(TypeInt::ZERO)) {\n-      return new MulINode(in1->in(2), in2->in(2));\n-    }\n-  }\n-\n@@ -311,12 +309,0 @@\n-  \/\/ convert \"(-a)*(-b)\" into \"a*b\"\n-  Node *in1 = in(1);\n-  Node *in2 = in(2);\n-  if (in1->Opcode() == Op_SubL && in2->Opcode() == Op_SubL) {\n-    Node* n11 = in1->in(1);\n-    Node* n21 = in2->in(1);\n-    if (phase->type(n11)->higher_equal(TypeLong::ZERO) &&\n-        phase->type(n21)->higher_equal(TypeLong::ZERO)) {\n-      return new MulLNode(in1->in(2), in2->in(2));\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":11,"deletions":25,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -83,0 +83,2 @@\n+\n+  virtual MulNode* make(Node* in1, Node* in2) const = 0;\n@@ -101,0 +103,1 @@\n+  virtual MulNode* make(Node* in1, Node* in2) const { return new MulINode(in1, in2); }\n@@ -119,0 +122,1 @@\n+  virtual MulNode* make(Node* in1, Node* in2) const { return new MulLNode(in1, in2); }\n@@ -137,0 +141,1 @@\n+  virtual MulNode* make(Node* in1, Node* in2) const { return new MulFNode(in1, in2); }\n@@ -154,0 +159,1 @@\n+  virtual MulNode* make(Node* in1, Node* in2) const { return new MulDNode(in1, in2); }\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8270366\n+ * @bug 8273454\n@@ -33,0 +33,2 @@\n+import java.util.Random;\n+\n@@ -34,11 +36,30 @@\n-    private static final int[][] intParams = {\n-        {Integer.MAX_VALUE, Integer.MAX_VALUE},\n-        {Integer.MIN_VALUE, Integer.MIN_VALUE},\n-        {Integer.MAX_VALUE, Integer.MIN_VALUE},\n-        {232, 34},\n-        {-23, 445},\n-        {-244, -84},\n-        {233, -99}\n-    };\n-\n-    private static int intTest(int a, int b) {\n+    private static Random random = new Random();\n+    private static final int TEST_COUNT = 2000;\n+\n+    private static int test(int a, int b) {\n+        return (-a) * (-b);\n+    }\n+\n+    private static void testInt(int a, int b) {\n+        int expected = (-a) * (-b);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (expected != test(a, b)) {\n+                throw new RuntimeException(\"Incorrect result.\");\n+            }\n+        }\n+    }\n+\n+    private static long test(long a, long b) {\n+        return (-a) * (-b);\n+    }\n+\n+    private static void testLong(long a, long b) {\n+        long expected = (-a) * (-b);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (expected != test(a, b)) {\n+                throw new RuntimeException(\"Incorrect result.\");\n+            }\n+        }\n+    }\n+\n+    private static float test(float a, float b) {\n@@ -48,7 +69,5 @@\n-    private static void runIntTest() {\n-        for (int index = 0; index < intParams.length; index ++) {\n-            int result = intTest(intParams[index][0], intParams[index][1]);\n-            for (int i = 0; i < 20_000; i++) {\n-                if (result != intTest(intParams[index][0], intParams[index][1])) {\n-                    throw new RuntimeException(\"incorrect result\");\n-                }\n+    private static void testFloat(float a, float b) {\n+        float expected = (-a) * (-b);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (expected != test(a, b)) {\n+                throw new RuntimeException(\"Incorrect result.\");\n@@ -59,11 +78,1 @@\n-    private static final long[][] longParams = {\n-        {Long.MAX_VALUE, Long.MAX_VALUE},\n-        {Long.MIN_VALUE, Long.MIN_VALUE},\n-        {Long.MAX_VALUE, Long.MIN_VALUE},\n-        {232L, 34L},\n-        {-23L, 445L},\n-        {-244L, -84L},\n-        {233L, -99L}\n-    };\n-\n-    private static long longTest(long a, long b) {\n+    private static double test(double a, double b) {\n@@ -73,7 +82,5 @@\n-    private static void runLongTest() {\n-        for (int index = 0; index < intParams.length; index ++) {\n-            long result = longTest(longParams[index][0], longParams[index][1]);\n-            for (int i = 0; i < 20_000; i++) {\n-                if (result != longTest(longParams[index][0], longParams[index][1])) {\n-                    throw new RuntimeException(\"incorrect result\");\n-                }\n+    private static void testDouble(double a, double b) {\n+        double expected = (-a) * (-b);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (expected != test(a, b)) {\n+                throw new RuntimeException(\"Incorrect result.\");\n@@ -84,0 +91,32 @@\n+    private static void runIntTests() {\n+        for (int index = 0; index < TEST_COUNT; index ++) {\n+            int a = random.nextInt();\n+            int b = random.nextInt();\n+            testInt(a, b);\n+        }\n+    }\n+\n+    private static void runLongTests() {\n+        for (int index = 0; index < TEST_COUNT; index ++) {\n+            long a = random.nextLong();\n+            long b = random.nextLong();\n+            testLong(a, b);\n+        }\n+    }\n+\n+    private static void runFloatTests() {\n+        for (int index = 0; index < TEST_COUNT; index ++) {\n+            float a = random.nextFloat();\n+            float b = random.nextFloat();\n+            testFloat(a, b);\n+        }\n+    }\n+\n+    private static void runDoubleTests() {\n+        for (int index = 0; index < TEST_COUNT; index ++) {\n+            double a = random.nextDouble();\n+            double b = random.nextDouble();\n+            testDouble(a, b);\n+        }\n+    }\n+\n@@ -85,2 +124,4 @@\n-        runIntTest();\n-        runLongTest();\n+        runIntTests();\n+        runLongTests();\n+        runFloatTests();\n+        runDoubleTests();\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestNegMultiply.java","additions":80,"deletions":39,"binary":false,"changes":119,"status":"modified"}]}