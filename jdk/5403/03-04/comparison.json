{"files":[{"patch":"@@ -70,4 +70,2 @@\n-    Node* n11 = in1->in(1);\n-    Node* n21 = in2->in(1);\n-    if (phase->type(n11)->is_zero_type() &&\n-        phase->type(n21)->is_zero_type()) {\n+    if (phase->type(in1->in(1))->is_zero_type() &&\n+        phase->type(in2->in(1))->is_zero_type()) {\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key randomness\n@@ -29,1 +30,3 @@\n- * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestNegMultiply\n+ * @library \/test\/lib\n+ * \n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:CompileCommand=\"dontinline,TestNegMultiply::test*\" TestNegMultiply\n@@ -34,0 +37,3 @@\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.Asserts;\n+\n@@ -36,1 +42,1 @@\n-    private static Random random = new Random();\n+    private static final Random random = Utils.getRandomInstance();\n@@ -39,1 +45,1 @@\n-    private static int test(int a, int b) {\n+    private static int testInt(int a, int b) {\n@@ -42,11 +48,1 @@\n-\n-    private static void testInt(int a, int b) {\n-        int expected = (-a) * (-b);\n-        for (int i = 0; i < 20_000; i++) {\n-            if (expected != test(a, b)) {\n-                throw new RuntimeException(\"Incorrect result.\");\n-            }\n-        }\n-    }\n-\n-    private static long test(long a, long b) {\n+    private static long testLong(long a, long b) {\n@@ -55,11 +51,1 @@\n-\n-    private static void testLong(long a, long b) {\n-        long expected = (-a) * (-b);\n-        for (int i = 0; i < 20_000; i++) {\n-            if (expected != test(a, b)) {\n-                throw new RuntimeException(\"Incorrect result.\");\n-            }\n-        }\n-    }\n-\n-    private static float test(float a, float b) {\n+    private static float testFloat(float a, float b) {\n@@ -68,11 +54,1 @@\n-\n-    private static void testFloat(float a, float b) {\n-        float expected = (-a) * (-b);\n-        for (int i = 0; i < 20_000; i++) {\n-            if (expected != test(a, b)) {\n-                throw new RuntimeException(\"Incorrect result.\");\n-            }\n-        }\n-    }\n-\n-    private static double test(double a, double b) {\n+    private static double testDouble(double a, double b) {\n@@ -82,2 +58,2 @@\n-    private static void testDouble(double a, double b) {\n-        double expected = (-a) * (-b);\n+    private static void runIntTests() {\n+        \/\/ Ensure testInt() is JIT-ed\n@@ -85,3 +61,1 @@\n-            if (expected != test(a, b)) {\n-                throw new RuntimeException(\"Incorrect result.\");\n-            }\n+            testInt(1, 2);\n@@ -89,3 +63,0 @@\n-    }\n-\n-    private static void runIntTests() {\n@@ -95,1 +66,3 @@\n-            testInt(a, b);\n+            int expected = (-a) * (-b);\n+            int res = testInt(a, b);\n+            Asserts.assertEQ(res, expected);\n@@ -100,0 +73,5 @@\n+        \/\/ Ensure testLong() is JIT-ed\n+        for (int i = 0; i < 20_000; i++) {\n+            testLong(1L, 2L);\n+        }\n+\n@@ -103,1 +81,3 @@\n-            testLong(a, b);\n+            long expected = (-a) * (-b);\n+            long res = testLong(a, b);\n+            Asserts.assertEQ(res, expected);\n@@ -108,0 +88,4 @@\n+        \/\/ Ensure testFloat() is JIT-ed\n+        for (int i = 0; i < 20_000; i++) {\n+            testFloat(1.0f, 2.0f);\n+        }\n@@ -111,1 +95,3 @@\n-            testFloat(a, b);\n+            float expected = (-a) * (-b);\n+            float res = testFloat(a, b);\n+            Asserts.assertEQ(res, expected);\n@@ -116,0 +102,4 @@\n+        \/\/ Ensure testDouble() is JIT-ed\n+        for (int i = 0; i < 20_000; i++) {\n+            testDouble(1.0, 2.0);\n+        }\n@@ -119,1 +109,3 @@\n-            testDouble(a, b);\n+            double expected = (-a) * (-b);\n+            double res = testDouble(a, b);\n+            Asserts.assertEQ(res, expected);\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestNegMultiply.java","additions":40,"deletions":48,"binary":false,"changes":88,"status":"modified"}]}