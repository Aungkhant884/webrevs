{"files":[{"patch":"@@ -204,0 +204,12 @@\n+  \/\/ convert \"(-a)*(-b)\" into \"a*b\"\n+  Node *in1 = in(1);\n+  Node *in2 = in(2);\n+  if (in1->Opcode() == Op_SubI && in2->Opcode() == Op_SubI) {\n+    Node* n11 = in1->in(1);\n+    Node* n21 = in2->in(1);\n+    if (phase->type(n11)->higher_equal(TypeInt::ZERO) &&\n+        phase->type(n21)->higher_equal(TypeInt::ZERO)) {\n+      return new MulINode(in1->in(2), in2->in(2));\n+    }\n+  }\n+\n@@ -299,0 +311,12 @@\n+  \/\/ convert \"(-a)*(-b)\" into \"a*b\"\n+  Node *in1 = in(1);\n+  Node *in2 = in(2);\n+  if (in1->Opcode() == Op_SubL && in2->Opcode() == Op_SubL) {\n+    Node* n11 = in1->in(1);\n+    Node* n21 = in2->in(1);\n+    if (phase->type(n11)->higher_equal(TypeLong::ZERO) &&\n+        phase->type(n21)->higher_equal(TypeLong::ZERO)) {\n+      return new MulLNode(in1->in(2), in2->in(2));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270366\n+ * @summary Test transformation (-a)*(-b) = a*b\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestAssociative\n+ *\n+ *\/\n+\n+public class Test {\n+    private static final int[][2] intParams = {\n+        {Integer.MAX_VALUE, Integer.MAX_VALUE},\n+        {Integer.MIN_VALUE, Integer.MIN_VALUE},\n+        {Integer.MAX_VALUE, Integer.MIN_VALUE},\n+        {232, 34},\n+        {-23, 445},\n+        {-244, -84},\n+        {233, -99}\n+    };\n+\n+    private static int intTest(int a, int b) {\n+        return (-a) * (-b);\n+    }\n+\n+    private static void runIntTest() {\n+        for (int index = 0; index < intParams.length; index ++) {\n+            int result = intTest(intParams[index][0], intParams[index][1]);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != intTest(intParams[index][0], intParams[index][1])) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final int[][2] longParams = {\n+        {Long.MAX_VALUE, Long.MAX_VALUE},\n+        {Long.MIN_VALUE, Long.MIN_VALUE},\n+        {Long.MAX_VALUE, Long.MIN_VALUE},\n+        {232L, 34L},\n+        {-23L, 445L},\n+        {-244L, -84L},\n+        {233L, -99L}\n+    };\n+\n+    private static long longTest(long a, long b) {\n+        return (-a) * (-b);\n+    }\n+\n+    private static void runLongTest() {\n+        for (int index = 0; index < intParams.length; index ++) {\n+            long result = longTest(longParams[index][0], longParams[index][1]);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != longTest(longParams[index][0], longParams[index][1])) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        runIntTest();\n+        runLongTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestNegMultiply.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}