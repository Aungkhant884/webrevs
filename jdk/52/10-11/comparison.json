{"files":[{"patch":"@@ -185,4 +185,2 @@\n-$(eval $(call SetupCopyFiles, COPY_NET_PROPERTIES, \\\n-    FILES := $(TOPDIR)\/src\/java.base\/share\/conf\/net.properties, \\\n-    DEST := $(CONF_DST_DIR), \\\n-))\n+NET_PROPERTIES_SRC := $(TOPDIR)\/src\/java.base\/share\/conf\/net.properties.common\n+NET_PROPERTIES_DST := $(CONF_DST_DIR)\/net.properties\n@@ -190,1 +188,12 @@\n-TARGETS += $(COPY_NET_PROPERTIES)\n+NET_PROPERTIES_SRC += $(TOPDIR)\/src\/java.base\/unix\/conf\/net.properties.unix\n+NET_PROPERTIES_SRC += $(TOPDIR)\/src\/java.base\/windows\/conf\/net.properties.windows\n+\n+NET_PROPERTIES_SRC_LIST := $(NET_PROPERTIES_SRC)\n+\n+$(NET_PROPERTIES_DST): $(NET_PROPERTIES_SRC_LIST)\n+\t$(call MakeTargetDir)\n+\t$(RM) $@ $@.tmp\n+\t$(foreach f,$(NET_PROPERTIES_SRC_LIST),$(CAT) $(f) >> $@.tmp;)\n+\t$(MV) $@.tmp $@\n+\n+TARGETS += $(NET_PROPERTIES_DST)\n","filename":"make\/modules\/java.base\/Copy.gmk","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.nio.channels.SocketChannel;\n@@ -42,2 +43,2 @@\n- * an empty path. The local address of a Unix domain socket that is automatically\n- * bound will be unnamed.\n+ * an empty path. The local address of a {@link SocketChannel} to a Unix domain socket\n+ * that is <i>automatically<\/i> or <i>implicitly<\/i> bound will be unnamed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/UnixDomainSocketAddress.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -89,1 +89,2 @@\n-        return UnixDomainSocketAddress.of(new String(bytes, UnixDomainHelper.getCharset()));\n+        return UnixDomainSocketAddress.of(\n+                    new String(bytes, UnixDomainSocketsUtil.getCharset()));\n@@ -97,1 +98,2 @@\n-        return UnixDomainSocketAddress.of(new String(bytes, UnixDomainHelper.getCharset()));\n+        return UnixDomainSocketAddress.of(new String(bytes,\n+                    UnixDomainSocketsUtil.getCharset()));\n@@ -136,1 +138,1 @@\n-    static final Path tempDir = UnixDomainHelper.getTempDir();\n+    static final Path tempDir = UnixDomainSocketsUtil.getTempDir();\n@@ -164,1 +166,1 @@\n-        isaa[0] = bytes == null ? null : new String(bytes, UnixDomainHelper.getCharset());\n+        isaa[0] = bytes == null ? null : new String(bytes, UnixDomainSocketsUtil.getCharset());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"","filename":"src\/java.base\/share\/conf\/net.properties.common","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/conf\/net.properties","status":"renamed"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.ch;\n-\n-import java.nio.charset.Charset;\n-import java.nio.file.InvalidPathException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-\/**\n- * Platform specific helper functions\n- *\/\n-class UnixDomainHelper {\n-    static Charset getCharset() {\n-        return Charset.defaultCharset();\n-    }\n-\n-    \/**\n-     * Return the temp directory for storing automatically bound\n-     * server sockets.\n-     *\n-     * On UNIX we search the following directories in sequence:\n-     *\n-     * 1. ${jdk.nio.unixdomain.tmpdir} if set, Use that unconditionally\n-     * 2. \/tmp\n-     * 3. \/var\/tmp\n-     * 4. ${java.io.tmpdir}\n-     *\n-     *\/\n-    static Path getTempDir() {\n-        PrivilegedAction<Path> action = () -> {\n-            try {\n-                String s = System.getProperty(\"jdk.nio.unixdomain.tmpdir\");\n-                if (s != null) {\n-                    return Path.of(s);\n-                }\n-                Path p = Path.of(\"\/tmp\");\n-                if (Files.exists(p)) {\n-                    return p;\n-                }\n-                p = Path.of(\"\/var\/tmp\");\n-                if (Files.exists(p)) {\n-                    return p;\n-                }\n-                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-            } catch (InvalidPathException ipe) {\n-                return null;\n-            }\n-        };\n-        return AccessController.doPrivileged(action);\n-    }\n-}\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import sun.net.NetProperties;\n+\n+\/**\n+ * Platform specific utility functions\n+ *\/\n+class UnixDomainSocketsUtil {\n+    static Charset getCharset() {\n+        return Charset.defaultCharset();\n+    }\n+\n+    \/**\n+     * Return the temp directory for storing automatically bound\n+     * server sockets.\n+     *\n+     * On UNIX we search the following directories in sequence:\n+     *\n+     * 1. ${jdk.nio.unixdomain.tmpdir} if set as system property\n+     * 2. ${jdk.nio.unixdomain.tmpdir} if set as net property\n+     * 3. ${java.io.tmpdir} system property\n+     *\n+     *\/\n+    static Path getTempDir() {\n+        PrivilegedAction<Path> action = () -> {\n+            try {\n+                String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+                if (s != null && s.length() > 0) {\n+                    return Path.of(s);\n+                }\n+                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+            } catch (InvalidPathException ipe) {\n+                return null;\n+            }\n+        };\n+        return AccessController.doPrivileged(action);\n+    }\n+}\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+#\n+# Default directory where automatically bound Unix domain server\n+# sockets are stored. Sockets are automatically bound when bound\n+# with a null address.\n+#\n+# On Unix the search order to determine this directory is:\n+#\n+# 1. System property jdk.nio.unixdomain.tmpdir\n+#\n+# 2. Networking property jdk.nio.unixdomain.tmpdir specified\n+#    in this file (effective default)\n+#\n+# 3. System property java.io.tmpdir\n+#\n+jdk.nio.unixdomain.tmpdir=\/tmp\n","filename":"src\/java.base\/unix\/conf\/net.properties.unix","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.ch;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.InvalidPathException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-class UnixDomainHelper {\n-\n-    static Charset getCharset() {\n-        return StandardCharsets.UTF_8;\n-    }\n-\n-    \/**\n-     * Return the temp directory for storing automatically bound\n-     * server sockets.\n-     *\n-     * On Windows we search the following directories in sequence:\n-     *\n-     * 1. ${jdk.nio.unixdomain.tmpdir} if set, Use that unconditionally\n-     * 2. %TEMP%\n-     * 3. ${java.io.tmpdir}\n-     *\n-     *\/\n-    static Path getTempDir() {\n-        PrivilegedAction<Path> action = () -> {\n-            try {\n-                String s = System.getProperty(\"jdk.nio.unixdomain.tmpdir\");\n-                if (s != null) {\n-                    return Path.of(s);\n-                }\n-                String temp = System.getenv(\"TEMP\");\n-                if (temp != null) {\n-                    Path p = Path.of(temp);\n-                    if (Files.exists(p)) {\n-                        return p;\n-                    }\n-                }\n-                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-            } catch (InvalidPathException ipe) {\n-                return null;\n-            }\n-        };\n-        return AccessController.doPrivileged(action);\n-    }\n-}\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import sun.net.NetProperties;\n+\n+class UnixDomainSocketsUtil {\n+\n+    static Charset getCharset() {\n+        return StandardCharsets.UTF_8;\n+    }\n+\n+    \/**\n+     * Return the temp directory for storing automatically bound\n+     * server sockets.\n+     *\n+     * On Windows we search the following directories in sequence:\n+     *\n+     * 1. ${jdk.nio.unixdomain.tmpdir} if set as system property\n+     * 2. ${jdk.nio.unixdomain.tmpdir} if set as net property\n+     * 3. %TEMP%\n+     * 4. ${java.io.tmpdir}\n+     *\n+     *\/\n+    static Path getTempDir() {\n+        PrivilegedAction<Path> action = () -> {\n+            try {\n+                String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+                if (s != null) {\n+                    return Path.of(s);\n+                }\n+                String temp = System.getenv(\"TEMP\");\n+                if (temp != null) {\n+                    Path p = Path.of(temp);\n+                    if (Files.exists(p)) {\n+                        return p;\n+                    }\n+                }\n+                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+            } catch (InvalidPathException ipe) {\n+                return null;\n+            }\n+        };\n+        return AccessController.doPrivileged(action);\n+    }\n+}\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+#\n+# Default directory where automatically bound Unix domain server\n+# sockets are stored. Sockets are automatically bound when bound\n+# with a null address.\n+#\n+# The search order for the directory on Windows is:\n+#\n+# 1. System property \"jdk.nio.unixdomain.tmpdir\"\n+#\n+# 2. Networking property \"jdk.nio.unixdomain.tmpdir\" specified\n+#    in this file (not set by default)\n+#\n+# 3. The TEMP environment variable (the effective default)\n+#\n+# 4. The java.io.tmpdir system property\n+#\n+#jdk.nio.unixdomain.tmpdir=\n+#\n+\n","filename":"src\/java.base\/windows\/conf\/net.properties.windows","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"}]}