{"files":[{"patch":"@@ -713,2 +713,2 @@\n-        if (path != null) {\n-            \/\/ implicit bind for null address\n+        if (path != null && path.toString().length() > 0) {\n+            \/\/ implicit bind for null address or empty path\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -180,0 +180,8 @@\n+        \/\/ client bind to UNNAMED: allowed\n+        checkNormal(() -> {\n+            client = SocketChannel.open(StandardProtocolFamily.UNIX);\n+            client.bind(UNNAMED);\n+            SocketAddress a = client.getLocalAddress();\n+            assertAddress(a, nullAddr, \"null address\");\n+            assertEquals(a, UNNAMED);\n+        });\n@@ -248,0 +256,16 @@\n+        \/\/ client multiple bind to different addresses: not allowed\n+        checkException(\n+            AlreadyBoundException.class, () -> {\n+                client = SocketChannel.open(StandardProtocolFamily.UNIX);\n+                client.bind(cAddr);\n+                client.bind(sAddr);\n+            }\n+        );\n+        \/\/ client multiple bind to differnt addresses, incl null: not allowed\n+        checkException(\n+            AlreadyBoundException.class, () -> {\n+                client = SocketChannel.open(StandardProtocolFamily.UNIX);\n+                client.bind(null);\n+                client.bind(cAddr);\n+            }\n+        );\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Bind.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @run main\/othervm Security policy3\n@@ -69,1 +70,1 @@\n-            throw new RuntimeException(\"SecurityException was expected\");\n+            throw new RuntimeException(\"% was expected\".formatted(expectedException.getName()));\n@@ -77,2 +78,1 @@\n-        }\n-        catch (UnsupportedOperationException e) {\n+        } catch (UnsupportedOperationException e) {\n@@ -84,4 +84,10 @@\n-        if (policy.equals(\"policy1\")) {\n-            testPolicy1();\n-        } else {\n-            testPolicy2();\n+\tswitch (policy) {\n+            case \"policy1\":\n+                testPolicy1();\n+\t\tbreak;\n+            case \"policy2\":\n+                testPolicy2();\n+\t\tbreak;\n+            case \"policy3\":\n+                testPolicy3();\n+\t\tbreak;\n@@ -91,0 +97,9 @@\n+    static void setSecurityManager(String policy) {\n+        String testSrc = System.getProperty(\"test.src\");\n+        \/\/ Three \/\/\/ required for Windows below\n+        String policyURL = \"file:\/\/\/\" + testSrc + File.separator + policy;\n+        System.out.println(\"POLICY: \" + policyURL);\n+        System.setProperty(\"java.security.policy\", policyURL);\n+        System.setSecurityManager(new SecurityManager());\n+    }\n+\n@@ -140,0 +155,35 @@\n+\n+    public static void testPolicy3() throws Exception {\n+        Path sock1 = Path.of(\"sock3\");\n+        Files.deleteIfExists(sock1);\n+        final UnixDomainSocketAddress saddr = UnixDomainSocketAddress.of(sock1);\n+\tvar s1 = ServerSocketChannel.open(UNIX);\n+\ts1.bind(saddr);\n+\tvar s2 = ServerSocketChannel.open(UNIX);\n+\ts2.bind(null);\n+\tvar add2 = (UnixDomainSocketAddress)s2.getLocalAddress();\n+\tsaddr.getPath().toFile().deleteOnExit();\n+\tadd2.getPath().toFile().deleteOnExit();\n+\n+\t\/\/ Now set security manager and check if we can see addresses\n+\n+\tsetSecurityManager(\"policy3\");\n+\n+\tif (((UnixDomainSocketAddress)s1\n+\t\t\t.getLocalAddress())\n+\t\t\t.getPath()\n+\t\t\t.toString()\n+\t\t\t.length() != 0)\n+\t{\n+\t    throw new RuntimeException(\"address should have been empty\");\n+\t}\n+\n+\tif (((UnixDomainSocketAddress)s2\n+\t\t\t.getLocalAddress())\n+\t\t\t.getPath()\n+\t\t\t.toString()\n+\t\t\t.length() != 0)\n+\t{\n+\t    throw new RuntimeException(\"address should have been empty\");\n+\t}\n+    }\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":57,"deletions":7,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Shutdown.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/policy3","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/policy1","status":"copied"}]}