{"files":[{"patch":"@@ -137,17 +137,1 @@\n-    static final Path tempDir = getTempDir();\n-\n-    private static Path getTempDir() {\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<Path>) () -> {\n-                try {\n-                    String s = System.getProperty(\"jdk.nio.channels.tmpdir\");\n-                    if (s == null) {\n-                        s = System.getProperty(\"java.io.tmpdir\");\n-                    }\n-                    return Path.of(s);\n-                } catch (InvalidPathException ipe) {\n-                    return null;\n-                }\n-            }\n-        );\n-    }\n+    static final Path tempDir = UnixDomainHelper.getTempDir();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainNet.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -30,0 +35,3 @@\n+\/**\n+ * Platform specific helper functions\n+ *\/\n@@ -34,0 +42,36 @@\n+\n+    \/**\n+     * Return the temp directory for storing automatically bound\n+     * server sockets.\n+     *\n+     * On UNIX we search the following directories in sequence:\n+     *\n+     * 1. ${jdk.nio.channels.tmpdir} if set, Use that unconditionally\n+     * 2. \/tmp\n+     * 3. \/var\/tmp\n+     * 4. ${java.io.tmpdir}\n+     *\n+     *\/\n+    static Path getTempDir() {\n+        return AccessController.doPrivileged(\n+            (PrivilegedAction<Path>) () -> {\n+                try {\n+                    String s = System.getProperty(\"jdk.nio.channels.tmpdir\");\n+                    if (s != null) {\n+                        return Path.of(s);\n+                    }\n+                    Path p = Path.of(\"\/tmp\");\n+                    if (Files.exists(p)) {\n+                        return p;\n+                    }\n+                    p = Path.of(\"\/var\/tmp\");\n+                    if (Files.exists(p)) {\n+                        return p;\n+                    }\n+                    return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+                } catch (InvalidPathException ipe) {\n+                    return null;\n+                }\n+            }\n+        );\n+    }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -194,1 +194,3 @@\n-        } catch (UnsupportedOperationException e) {\n+        } catch (UnsupportedOperationException | IOException e) {\n+            \/\/ IOException is most likely to be caused by the temporary directory\n+            \/\/ name being too long. Possibly should log this.\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,5 @@\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -32,0 +37,1 @@\n+\n@@ -35,0 +41,35 @@\n+\n+    \/**\n+     * Return the temp directory for storing automatically bound\n+     * server sockets.\n+     *\n+     * On Windows we search the following directories in sequence:\n+     *\n+     * 1. ${jdk.nio.channels.tmpdir} if set, Use that unconditionally\n+     * 2. %TEMP%\n+     * 3. ${java.io.tmpdir}\n+     *\n+     *\/\n+    static Path getTempDir() {\n+        return AccessController.doPrivileged(\n+            (PrivilegedAction<Path>) () -> {\n+                try {\n+                    String s = System.getProperty(\"jdk.nio.channels.tmpdir\");\n+                    if (s != null) {\n+                        return Path.of(s);\n+                    }\n+                    String temp = System.getenv(\"TEMP\");\n+                    if (temp != null) {\n+                        Path p = Path.of(temp);\n+                        if (Files.exists(p)) {\n+                            return p;\n+                        }\n+                    }\n+                    return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+                } catch (InvalidPathException ipe) {\n+                    return null;\n+                }\n+            }\n+        );\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-        args.add(\"-Djdk.nio.channels.tmpdir=\/tmp\");\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/InheritedChannelTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        String cmdarray[] = new String[len+1]; \/\/ extra arg added below\n+        String cmdarray[] = new String[len];\n@@ -63,1 +63,0 @@\n-        cmdarray[pos++] = \"-Djdk.nio.channels.tmpdir=\/tmp\";\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/Launcher.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp AddressTest\n+ * @run main\/othervm AddressTest\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/AddressTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Djdk.nio.channels.tmpdir=\/tmp LengthTest\n+ * @run testng\/othervm LengthTest\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/LengthTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,5 +29,5 @@\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp Bind\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp Shutdown\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp NonBlockingAccept\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp SocketOptions\n- * @run testng\/othervm -Djdk.nio.channels.tmpdir=\/tmp IOExchanges\n+ * @run main\/othervm Bind\n+ * @run main\/othervm Shutdown\n+ * @run main\/othervm NonBlockingAccept\n+ * @run main\/othervm SocketOptions\n+ * @run testng\/othervm IOExchanges\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/NonWindowsDriver.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp Security policy1\n- * @run main\/othervm -Djdk.nio.channels.tmpdir=\/tmp Security policy2\n+ * @run main\/othervm Security policy1\n+ * @run main\/othervm Security policy2\n@@ -135,0 +135,1 @@\n+        Files.deleteIfExists(servername);\n@@ -152,0 +153,1 @@\n+        Files.deleteIfExists(servername);\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}