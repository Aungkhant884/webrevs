{"files":[{"patch":"@@ -128,7 +128,0 @@\n-        FileSystem fs = path.getFileSystem();\n-        if (fs != FileSystems.getDefault()) {\n-            throw new IllegalArgumentException();\n-        }\n-        if (fs.getClass().getModule() != Object.class.getModule()) {\n-            throw new IllegalArgumentException();\n-        }\n@@ -169,0 +162,7 @@\n+        FileSystem fs = path.getFileSystem();\n+        if (fs != FileSystems.getDefault()) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (fs.getClass().getModule() != Object.class.getModule()) {\n+            throw new IllegalArgumentException();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/UnixDomainSocketAddress.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private final Set<SocketOption<?>> unixOptions;\n+    private final Set<SocketOption<?>> unixDomainClientOptions;\n@@ -61,2 +61,8 @@\n-    \/** Return the, possibly empty, set of extended socket options available. *\/\n-    public final Set<SocketOption<?>> unixOptions() { return unixOptions; }\n+    \/**\n+     * Return the, possibly empty, set of extended socket options available for\n+     * Unix domain client sockets. Note, there are no extended\n+     * Unix domain server options.\n+     *\/\n+    public final Set<SocketOption<?>> unixDomainClientOptions() {\n+        return unixDomainClientOptions;\n+    }\n@@ -73,1 +79,1 @@\n-        return getInstance().unixOptions();\n+        return getInstance().unixDomainClientOptions();\n@@ -136,1 +142,1 @@\n-        var unixOptions = new HashSet<SocketOption<?>>();\n+        var unixDomainClientOptions = new HashSet<SocketOption<?>>();\n@@ -148,1 +154,1 @@\n-                unixOptions.add(option);\n+                unixDomainClientOptions.add(option);\n@@ -154,1 +160,1 @@\n-        this.unixOptions = Set.copyOf(unixOptions);\n+        this.unixDomainClientOptions = Set.copyOf(unixDomainClientOptions);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import java.security.NoSuchAlgorithmException;\n@@ -251,1 +250,1 @@\n-        static final Set<SocketOption<?>> defaultUnixOptions = defaultUnixOptions();\n+        static final Set<SocketOption<?>> defaultUnixDomainOptions = defaultUnixDomainOptions();\n@@ -264,1 +263,1 @@\n-        private static Set<SocketOption<?>> defaultUnixOptions() {\n+        private static Set<SocketOption<?>> defaultUnixDomainOptions() {\n@@ -274,1 +273,1 @@\n-            return DefaultOptionsHolder.defaultUnixOptions;\n+            return DefaultOptionsHolder.defaultUnixDomainOptions;\n@@ -429,1 +428,1 @@\n-    protected int implAcceptUnix(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] addrs)\n+    private int implAcceptUnix(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] addrs)\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -135,2 +135,1 @@\n-    SocketChannelImpl(SelectorProvider sp, ProtocolFamily family) throws IOException {\n-        super(sp);\n+    private static FileDescriptor socketFor(ProtocolFamily family) throws IOException {\n@@ -144,1 +143,1 @@\n-            this.fd = UnixDomainSockets.socket();\n+            return UnixDomainSockets.socket();\n@@ -148,1 +147,1 @@\n-            this.fd = Net.socket(family, true);\n+            return Net.socket(family, true);\n@@ -150,0 +149,10 @@\n+    }\n+\n+    SocketChannelImpl(SelectorProvider sp, ProtocolFamily family) throws IOException {\n+        this(sp, family, socketFor(family));\n+    }\n+\n+    private SocketChannelImpl(SelectorProvider sp, ProtocolFamily family, FileDescriptor fd)\n+      throws IOException\n+    {\n+        super(sp);\n@@ -151,0 +160,1 @@\n+        this.fd = fd;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+            if ((*env)->ExceptionOccurred(env)) {\n+                return NULL;\n+            }\n@@ -77,0 +80,4 @@\n+    if (pname == NULL) {\n+        JNU_ThrowByName(env, JNU_JAVANETPKG \"SocketException\", \"Unix domain path not present\");\n+        return 1;\n+    }\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDomainSockets.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+            if ((*env)->ExceptionOccurred(env)) {\n+                return NULL;\n+            }\n@@ -66,0 +69,4 @@\n+    if (pname == NULL) {\n+        JNU_ThrowByName(env, JNU_JAVANETPKG \"SocketException\", \"Unix domain path not present\");\n+        return 1;\n+    }\n@@ -71,1 +78,4 @@\n-        goto finish;\n+    } else {\n+        strncpy(sa->sun_path, pname, name_len);\n+        *len = (int)(offsetof(struct sockaddr_un, sun_path) + name_len);\n+        ret = 0;\n@@ -73,4 +83,0 @@\n-    strncpy(sa->sun_path, pname, name_len);\n-    *len = (int)(offsetof(struct sockaddr_un, sun_path) + name_len);\n-    ret = 0;\n-  finish:\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/UnixDomainSockets.c","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}