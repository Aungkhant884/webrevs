{"files":[{"patch":"@@ -49,2 +49,2 @@\n-     * 1. ${jdk.nio.unixdomain.tmpdir} if set as system property\n-     * 2. ${jdk.nio.unixdomain.tmpdir} if set as net property\n+     * 1. ${jdk.net.unixdomain.tmpdir} if set as system property\n+     * 2. ${jdk.net.unixdomain.tmpdir} if set as net property\n@@ -56,1 +56,1 @@\n-            String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+            String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-# 1. System property jdk.nio.unixdomain.tmpdir\n+# 1. System property jdk.net.unixdomain.tmpdir\n@@ -10,1 +10,1 @@\n-# 2. Networking property jdk.nio.unixdomain.tmpdir specified\n+# 2. Networking property jdk.net.unixdomain.tmpdir specified\n@@ -15,1 +15,1 @@\n-jdk.nio.unixdomain.tmpdir=\/tmp\n+jdk.net.unixdomain.tmpdir=\/tmp\n","filename":"src\/java.base\/unix\/conf\/net.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-     * 1. ${jdk.nio.unixdomain.tmpdir} if set as system property\n-     * 2. ${jdk.nio.unixdomain.tmpdir} if set as net property\n+     * 1. ${jdk.net.unixdomain.tmpdir} if set as system property\n+     * 2. ${jdk.net.unixdomain.tmpdir} if set as net property\n@@ -55,1 +55,1 @@\n-            String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+            String s = NetProperties.get(\"jdk.net.unixdomain.tmpdir\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-# 1. System property \"jdk.nio.unixdomain.tmpdir\"\n+# 1. System property \"jdk.net.unixdomain.tmpdir\"\n@@ -10,1 +10,1 @@\n-# 2. Networking property \"jdk.nio.unixdomain.tmpdir\" specified\n+# 2. Networking property \"jdk.net.unixdomain.tmpdir\" specified\n@@ -17,1 +17,1 @@\n-#jdk.nio.unixdomain.tmpdir=\n+#jdk.net.unixdomain.tmpdir=\n","filename":"src\/java.base\/windows\/conf\/net.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -672,0 +672,12 @@\n+    <event name=\"jdk.UnixSocketRead\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-io-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.UnixSocketWrite\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\" control=\"socket-io-threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,4 @@\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+import java.nio.channels.SocketChannel;\n@@ -80,0 +84,2 @@\n+    public static final String EVENT_UNIX_SOCKET_READ = EventNames.UnixSocketRead;\n+    public static final String EVENT_UNIX_SOCKET_WRITE = EventNames.UnixSocketWrite;\n@@ -81,1 +87,6 @@\n-    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketRead, SocketWrite }\n+    public enum EventType {\n+        UnknownEvent, FileForce,\n+        FileRead, FileWrite,\n+        SocketRead, SocketWrite,\n+        UnixSocketRead, UnixSocketWrite\n+    }\n@@ -84,1 +95,2 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE,\n+        EVENT_SOCKET_READ, EVENT_SOCKET_WRITE, EVENT_UNIX_SOCKET_READ, EVENT_UNIX_SOCKET_WRITE\n@@ -88,1 +100,13 @@\n-        return (eventType == EventType.SocketWrite || eventType == EventType.FileWrite);\n+        return (eventType == EventType.SocketWrite\n+                || eventType == EventType.FileWrite\n+                || eventType == EventType.UnixSocketWrite);\n+    }\n+\n+    public static boolean isInetEvent(EventType eventType) {\n+        return (eventType == EventType.SocketRead\n+                || eventType == EventType.SocketWrite);\n+    }\n+\n+    public static boolean isUnixEvent(EventType eventType) {\n+        return (eventType == EventType.UnixSocketRead\n+                || eventType == EventType.UnixSocketWrite);\n@@ -92,1 +116,3 @@\n-        return (eventType == EventType.SocketRead || eventType == EventType.FileRead);\n+        return (eventType == EventType.SocketRead\n+                || eventType == EventType.FileRead\n+                || eventType == EventType.UnixSocketRead);\n@@ -115,0 +141,18 @@\n+    public static IOEvent createUnixSocketWriteEvent(long size, SocketChannel c) {\n+        if (size < 0) {\n+            size = 0;\n+        }\n+        return new IOEvent(Thread.currentThread().getName(), EventType.UnixSocketWrite,\n+                                size, getUnixAddress(c), false);\n+    }\n+\n+    public static IOEvent createUnixSocketReadEvent(long size, SocketChannel c) {\n+        boolean endOfStream = false;\n+        if (size < 0) {\n+            size = 0;\n+            endOfStream = true;\n+        }\n+        return new IOEvent(Thread.currentThread().getName(), EventType.UnixSocketRead,\n+                                size, getUnixAddress(c), endOfStream);\n+    }\n+\n@@ -189,1 +233,2 @@\n-        if (isFileEvent(getEventType(event))) {\n+        EventType eventType = getEventType(event);\n+        if (isFileEvent(eventType)) {\n@@ -199,1 +244,1 @@\n-        } else {\n+        } else if (isInetEvent(eventType)) {\n@@ -201,0 +246,2 @@\n+        } else {\n+            return event.getValue(\"path\");\n@@ -207,0 +254,12 @@\n+\n+    private static String getUnixAddress(SocketChannel c) {\n+        SocketAddress a = null;\n+        try {\n+            a = c.getRemoteAddress();\n+        } catch (IOException e) {}\n+        if (a instanceof UnixDomainSocketAddress) {\n+            UnixDomainSocketAddress ua = (UnixDomainSocketAddress)a;\n+            return ua.getPath().toString();\n+        } else\n+            throw new RuntimeException(\"unexpected channel type\");\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":65,"deletions":6,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -80,2 +80,7 @@\n-            boolean isSocket = IOEvent.EVENT_SOCKET_READ.equals(msg) || IOEvent.EVENT_SOCKET_WRITE.equals(msg);\n-            boolean isFile = IOEvent.EVENT_FILE_FORCE.equals(msg) || IOEvent.EVENT_FILE_READ.equals(msg) || IOEvent.EVENT_FILE_WRITE.equals(msg);\n+            boolean isInetSock = IOEvent.EVENT_SOCKET_READ.equals(msg) || IOEvent.EVENT_SOCKET_WRITE.equals(msg);\n+            boolean isUnixSock = IOEvent.EVENT_UNIX_SOCKET_READ.equals(msg) ||\n+                                 IOEvent.EVENT_UNIX_SOCKET_WRITE.equals(msg);\n+            boolean isFile = IOEvent.EVENT_FILE_FORCE.equals(msg)\n+                          || IOEvent.EVENT_FILE_READ.equals(msg)\n+                          || IOEvent.EVENT_FILE_WRITE.equals(msg);\n+\n@@ -83,1 +88,4 @@\n-            boolean isRead = IOEvent.EVENT_FILE_READ.equals(msg) || IOEvent.EVENT_SOCKET_READ.equals(msg);\n+\n+            boolean isRead = IOEvent.EVENT_FILE_READ.equals(msg)\n+                          || IOEvent.EVENT_SOCKET_READ.equals(msg)\n+                          || IOEvent.EVENT_UNIX_SOCKET_READ.equals(msg);\n@@ -86,1 +94,1 @@\n-            } else if (isSocket) {\n+            } else if (isInetSock) {\n@@ -90,0 +98,2 @@\n+            } else if (isUnixSock) {\n+                msg += \" : \" + Events.assertField(event, \"path\").getValue();\n@@ -91,1 +101,1 @@\n-            if (isSocket || isFileReadOrWrite) {\n+            if (isInetSock || isUnixSock || isFileReadOrWrite) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -195,1 +195,2 @@\n-                TestSocketChannelEvents.main(noArgs);\n+                TestSocketChannelEvents.main(new String[] {\"inet\"});\n+                TestSocketChannelEvents.main(new String[] {\"unix\"});\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestInstrumentation.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import java.net.SocketAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnixDomainSocketAddress;\n@@ -34,0 +37,1 @@\n+import java.nio.file.Files;\n@@ -44,0 +48,2 @@\n+import static java.net.StandardProtocolFamily.UNIX;\n+\n@@ -49,1 +55,2 @@\n- * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents\n+ * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents inet\n+ * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents unix\n@@ -61,0 +68,47 @@\n+    static ServerSocketChannel getListener(String arg) throws IOException {\n+        if (arg.equals(\"inet\")) {\n+            return ServerSocketChannel.open();\n+        } else if (arg.equals(\"unix\"))\n+            return ServerSocketChannel.open(UNIX);\n+        else\n+            throw new RuntimeException(\"invalid arg\");\n+    }\n+\n+    static IOEvent getReadEvent(int size, SocketChannel sc) throws IOException {\n+        SocketAddress addr = sc.getLocalAddress();\n+        if (addr instanceof InetSocketAddress) {\n+            return IOEvent.createSocketReadEvent(size, sc.socket());\n+        } else if (addr instanceof UnixDomainSocketAddress) {\n+            return IOEvent.createUnixSocketReadEvent(size, sc);\n+        } else\n+            throw new RuntimeException(\"unexpected channel type\");\n+    }\n+\n+    static IOEvent getWriteEvent(int size, SocketChannel sc) throws IOException {\n+        SocketAddress addr = sc.getLocalAddress();\n+        if (addr instanceof InetSocketAddress) {\n+            return IOEvent.createSocketWriteEvent(size, sc.socket());\n+        } else if (addr instanceof UnixDomainSocketAddress) {\n+            return IOEvent.createUnixSocketWriteEvent(size, sc);\n+        } else\n+            throw new RuntimeException(\"unexpected channel type\");\n+    }\n+\n+    static String getReadEventName(String mode) {\n+        if (mode.equals(\"inet\"))\n+            return IOEvent.EVENT_SOCKET_READ;\n+        else if (mode.equals(\"unix\"))\n+            return IOEvent.EVENT_UNIX_SOCKET_READ;\n+        else\n+            throw new RuntimeException();\n+    }\n+\n+    static String getWriteEventName(String mode) {\n+        if (mode.equals(\"inet\"))\n+            return IOEvent.EVENT_SOCKET_WRITE;\n+        else if (mode.equals(\"unix\"))\n+            return IOEvent.EVENT_UNIX_SOCKET_WRITE;\n+        else\n+            throw new RuntimeException();\n+    }\n+\n@@ -62,1 +116,1 @@\n-        new TestSocketChannelEvents().test();\n+        new TestSocketChannelEvents().test(args[0]);\n@@ -65,1 +119,1 @@\n-    public void test() throws Throwable {\n+    public void test(String mode) throws Throwable {\n@@ -67,3 +121,4 @@\n-            try (ServerSocketChannel ss = ServerSocketChannel.open()) {\n-                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n-                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n+            SocketAddress local = null;\n+            try (ServerSocketChannel ss = getListener(mode)) {\n+                recording.enable(getReadEventName(mode)).withThreshold(Duration.ofMillis(0));\n+                recording.enable(getWriteEventName(mode)).withThreshold(Duration.ofMillis(0));\n@@ -72,2 +127,5 @@\n-                ss.socket().setReuseAddress(true);\n-                ss.socket().bind(null);\n+                ss.bind(null);\n+                local = ss.getLocalAddress();\n+                if (ss.getLocalAddress() instanceof InetSocketAddress) {\n+                    ss.socket().setReuseAddress(true);\n+                }\n@@ -83,1 +141,1 @@\n-                            addExpectedEvent(IOEvent.createSocketReadEvent(bufSizeA, sc.socket()));\n+                            addExpectedEvent(getReadEvent(bufSizeA, sc));\n@@ -89,1 +147,1 @@\n-                            addExpectedEvent(IOEvent.createSocketReadEvent(readSize, sc.socket()));\n+                            addExpectedEvent(getReadEvent(readSize, sc));\n@@ -97,1 +155,1 @@\n-                            addExpectedEvent(IOEvent.createSocketReadEvent(-1, sc.socket()));\n+                            addExpectedEvent(getReadEvent(-1, sc));\n@@ -103,1 +161,1 @@\n-                try (SocketChannel sc = SocketChannel.open(ss.socket().getLocalSocketAddress())) {\n+                try (SocketChannel sc = SocketChannel.open(ss.getLocalAddress())) {\n@@ -116,1 +174,1 @@\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(bufSizeA, sc.socket()));\n+                    addExpectedEvent(getWriteEvent(bufSizeA, sc));\n@@ -122,1 +180,1 @@\n-                    addExpectedEvent(IOEvent.createSocketWriteEvent(bytesWritten, sc.socket()));\n+                    addExpectedEvent(getWriteEvent(bytesWritten, sc));\n@@ -129,0 +187,5 @@\n+            } finally {\n+                if (local instanceof UnixDomainSocketAddress) {\n+                    var ua = (UnixDomainSocketAddress)local;\n+                    Files.deleteIfExists(ua.getPath());\n+                }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":77,"deletions":14,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -190,0 +190,2 @@\n+    public static final String UnixSocketRead = PREFIX + \"UnixSocketRead\";\n+    public static final String UnixSocketWrite = PREFIX + \"UnixSocketWrite\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}