{"files":[{"patch":"@@ -93,1 +93,1 @@\n-        return !option.name().startsWith(\"TCP_\") && !isUnixOption(option);\n+        return !option.name().startsWith(\"TCP_\") && !isUnixDomainOption(option);\n@@ -96,1 +96,1 @@\n-    private static boolean isUnixOption(SocketOption<?> option) {\n+    private static boolean isUnixDomainOption(SocketOption<?> option) {\n@@ -101,1 +101,1 @@\n-        if (server && \"SO_FLOW_SLA\".equals(option.name())) {\n+        if (isUnixDomainOption(option)) {\n@@ -103,5 +103,0 @@\n-        } else {\n-            if (isUnixOption(option)) {\n-                return false;\n-            }\n-            return !option.name().startsWith(\"UDP_\");\n@@ -109,0 +104,1 @@\n+        return !option.name().startsWith(\"UDP_\");\n@@ -151,1 +147,1 @@\n-            if (isUnixOption(option)) {\n+            if (isUnixDomainOption(option)) {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        if (addr instanceof UnixDomainSocketAddress)\n+        if (addr instanceof UnixDomainSocketAddress) {\n@@ -59,1 +59,3 @@\n-        if (!(addr instanceof InetSocketAddress))\n+        } else if (addr instanceof InetSocketAddress) {\n+            return ofInet(e, (InetSocketAddress)addr);\n+        } else {\n@@ -61,0 +63,2 @@\n+        }\n+    }\n@@ -62,2 +66,2 @@\n-        InetSocketAddress address = (InetSocketAddress)addr;\n-        if (!enhancedExceptionText || address == null)\n+    private static IOException ofInet(IOException e, InetSocketAddress addr) {\n+        if (!enhancedExceptionText || addr == null) {\n@@ -65,2 +69,3 @@\n-        int port = address.getPort();\n-        String host = address.getHostString();\n+        }\n+        int port = addr.getPort();\n+        String host = addr.getHostString();\n@@ -78,1 +83,1 @@\n-        if (!enhancedExceptionText || addr == null)\n+        if (!enhancedExceptionText) {\n@@ -80,0 +85,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/util\/SocketExceptions.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * An implementation of ServerSocketChannels\n+ * An implementation of ServerSocketChannels for AF_INET\/AF_INET6 sockets\n@@ -52,5 +52,0 @@\n-    \/\/ set true when exclusive binding is on and SO_REUSEADDR is emulated\n-    private boolean isReuseAddress;\n-\n-    \/\/ -- End of fields protected by stateLock\n-\n@@ -60,0 +55,3 @@\n+    \/\/ set true when exclusive binding is on and SO_REUSEADDR is emulated\n+    private boolean isReuseAddress;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/InetServerSocketChannelImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * An implementation of SocketChannels\n+ * An implementation of SocketChannels for AF_INET\/AF_INET6 sockets\n@@ -52,3 +52,0 @@\n-    \/\/ set true when exclusive binding is on and SO_REUSEADDR is emulated\n-    private boolean isReuseAddress;\n-\n@@ -58,0 +55,3 @@\n+    \/\/ set true when exclusive binding is on and SO_REUSEADDR is emulated\n+    private boolean isReuseAddress;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/InetSocketChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,2 @@\n-        } else if (family == StandardProtocolFamily.INET || family == StandardProtocolFamily.INET6)  {\n+        } else if (family == StandardProtocolFamily.INET ||\n+                   family == StandardProtocolFamily.INET6)  {\n@@ -85,1 +86,2 @@\n-        } else if (family == StandardProtocolFamily.UNIX && UnixDomainSockets.isSupported()) {\n+        } else if (family == StandardProtocolFamily.UNIX &&\n+                   UnixDomainSockets.isSupported()) {\n@@ -96,1 +98,2 @@\n-        } else if (family == StandardProtocolFamily.INET || family == StandardProtocolFamily.INET6)  {\n+        } else if (family == StandardProtocolFamily.INET ||\n+                   family == StandardProtocolFamily.INET6)  {\n@@ -98,1 +101,2 @@\n-        } else if (family == StandardProtocolFamily.UNIX && UnixDomainSockets.isSupported()) {\n+        } else if (family == StandardProtocolFamily.UNIX &&\n+                   UnixDomainSockets.isSupported()) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorProviderImpl.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        return provider.getByteArrayForSocket(path);\n+        return provider.getSunPathForSocketFile(path);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,2 +159,2 @@\n-     * Get a pathname of a Unix domain socket in raw bytes. Different encodings\n-     * may be used for these names on some platforms.\n+     * Returns a path name as bytes for a Unix domain socket.\n+     * Different encodings may be used for these names on some platforms.\n@@ -162,1 +162,1 @@\n-    public abstract byte[] getByteArrayForSocket(Path file) throws IOException;\n+    public abstract byte[] getSunPathForSocketFile(Path file);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,2 +43,5 @@\n-\/* 2 bytes to allow for null at end of string and null at start of string for abstract name *\/\n-#define MAX_UNIX_DOMAIN_PATH_LEN (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n+\/* 2 bytes to allow for null at end of string and null at start of string\n+ * for abstract name\n+ *\/\n+#define MAX_UNIX_DOMAIN_PATH_LEN \\\n+        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n@@ -164,1 +167,4 @@\n-NET_UnixSocketAddressToSockaddr(JNIEnv *env, jbyteArray uaddr, struct sockaddr_un *sa, int *len);\n+NET_UnixSocketAddressToSockaddr(JNIEnv *env,\n+                                jbyteArray uaddr,\n+                                struct sockaddr_un *sa,\n+                                int *len);\n","filename":"src\/java.base\/share\/native\/libnet\/net_util.h","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-     * 1. ${jdk.nio.channels.tmpdir} if set, Use that unconditionally\n+     * 1. ${jdk.nio.unixdomain.tmpdir} if set, Use that unconditionally\n@@ -56,18 +56,5 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<Path>) () -> {\n-                try {\n-                    String s = System.getProperty(\"jdk.nio.channels.tmpdir\");\n-                    if (s != null) {\n-                        return Path.of(s);\n-                    }\n-                    Path p = Path.of(\"\/tmp\");\n-                    if (Files.exists(p)) {\n-                        return p;\n-                    }\n-                    p = Path.of(\"\/var\/tmp\");\n-                    if (Files.exists(p)) {\n-                        return p;\n-                    }\n-                    return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-                } catch (InvalidPathException ipe) {\n-                    return null;\n+        PrivilegedAction<Path> action = () -> {\n+            try {\n+                String s = System.getProperty(\"jdk.nio.unixdomain.tmpdir\");\n+                if (s != null) {\n+                    return Path.of(s);\n@@ -75,0 +62,11 @@\n+                Path p = Path.of(\"\/tmp\");\n+                if (Files.exists(p)) {\n+                    return p;\n+                }\n+                p = Path.of(\"\/var\/tmp\");\n+                if (Files.exists(p)) {\n+                    return p;\n+                }\n+                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+            } catch (InvalidPathException ipe) {\n+                return null;\n@@ -76,1 +74,2 @@\n-        );\n+        };\n+        return AccessController.doPrivileged(action);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -562,2 +562,2 @@\n-    public byte[] getByteArrayForSocket(Path file) {\n-        if (file == null)\n+    public byte[] getSunPathForSocketFile(Path obj) {\n+        if (obj == null)\n@@ -565,4 +565,2 @@\n-        if (!(file instanceof UnixPath))\n-            throw new IllegalArgumentException();\n-        UnixPath up = (UnixPath)file;\n-        return up.getByteArrayForSysCalls();\n+        UnixPath file = UnixPath.toUnixPath(obj);\n+        return file.getByteArrayForSysCalls();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.net.StandardSocketOptions;\n@@ -65,2 +66,0 @@\n-    \/\/ Allowed to buffer data if set\n-    private final boolean buffering;\n@@ -154,1 +153,5 @@\n-                    sink = new SinkChannelImpl(sp, sc2, buffering);\n+                    sink = new SinkChannelImpl(sp, sc2);\n+                    if (sc2 instanceof InetSocketChannelImpl) {\n+                        var isc = (InetSocketChannelImpl)sc2;\n+                        isc.setOption(StandardSocketOptions.TCP_NODELAY, true);\n+                    }\n@@ -176,5 +179,0 @@\n-        this(sp, true);\n-    }\n-\n-    PipeImpl(final SelectorProvider sp, boolean buffering) throws IOException {\n-        this.buffering = buffering;\n@@ -196,1 +194,1 @@\n-    private static volatile boolean tryUnixDomain = true;\n+    private static volatile boolean noUnixDomainSockets = false;\n@@ -200,2 +198,2 @@\n-        try {\n-            if (tryUnixDomain) {\n+        if (!noUnixDomainSockets) {\n+            try {\n@@ -204,0 +202,6 @@\n+            } catch (UnsupportedOperationException | IOException e) {\n+                \/\/ IOException is most likely to be caused by the temporary directory\n+                \/\/ name being too long. Possibly should log this.\n+                noUnixDomainSockets = true;\n+                if (listener != null)\n+                    listener.close();\n@@ -205,6 +209,0 @@\n-        } catch (UnsupportedOperationException | IOException e) {\n-            \/\/ IOException is most likely to be caused by the temporary directory\n-            \/\/ name being too long. Possibly should log this.\n-            tryUnixDomain = false;\n-            if (listener != null)\n-                listener.close();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.net.StandardSocketOptions;\n@@ -58,1 +57,1 @@\n-    SinkChannelImpl(SelectorProvider sp, SocketChannel sc, boolean buffering) throws IOException {\n+    SinkChannelImpl(SelectorProvider sp, SocketChannel sc) throws IOException {\n@@ -61,4 +60,0 @@\n-        if (!buffering && sc instanceof InetSocketChannelImpl) {\n-            InetSocketChannelImpl isc = (InetSocketChannelImpl)sc;\n-            isc.setOption(StandardSocketOptions.TCP_NODELAY, true);\n-        }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-     * 1. ${jdk.nio.channels.tmpdir} if set, Use that unconditionally\n+     * 1. ${jdk.nio.unixdomain.tmpdir} if set, Use that unconditionally\n@@ -54,13 +54,11 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<Path>) () -> {\n-                try {\n-                    String s = System.getProperty(\"jdk.nio.channels.tmpdir\");\n-                    if (s != null) {\n-                        return Path.of(s);\n-                    }\n-                    String temp = System.getenv(\"TEMP\");\n-                    if (temp != null) {\n-                        Path p = Path.of(temp);\n-                        if (Files.exists(p)) {\n-                            return p;\n-                        }\n+        PrivilegedAction<Path> action = () -> {\n+            try {\n+                String s = System.getProperty(\"jdk.nio.unixdomain.tmpdir\");\n+                if (s != null) {\n+                    return Path.of(s);\n+                }\n+                String temp = System.getenv(\"TEMP\");\n+                if (temp != null) {\n+                    Path p = Path.of(temp);\n+                    if (Files.exists(p)) {\n+                        return p;\n@@ -68,3 +66,0 @@\n-                    return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-                } catch (InvalidPathException ipe) {\n-                    return null;\n@@ -72,0 +67,3 @@\n+                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n+            } catch (InvalidPathException ipe) {\n+                return null;\n@@ -73,1 +71,2 @@\n-        );\n+        };\n+        return AccessController.doPrivileged(action);\n@@ -75,1 +74,0 @@\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainHelper.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        wakeupPipe = new PipeImpl(sp, false);\n+        wakeupPipe = new PipeImpl(sp);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -628,2 +628,2 @@\n-    public byte[] getByteArrayForSocket(Path file) throws IOException {\n-        if (file == null)\n+    public byte[] getSunPathForSocketFile(Path obj) {\n+        if (obj == null)\n@@ -631,4 +631,2 @@\n-        if (!(file instanceof WindowsPath))\n-            throw new IllegalArgumentException();\n-        WindowsPath wp = (WindowsPath)file;\n-        String s = wp.toString();\n+        WindowsPath file = WindowsPath.toWindowsPathobj);\n+        String s = file.toString();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-\n@@ -107,5 +106,5 @@\n-        int[] result = new int[2];\n-\n-        getSoPeerCred0(fd, result);\n-        UserPrincipal user = UnixUserPrincipals.fromUid(result[0]);\n-        GroupPrincipal group = UnixUserPrincipals.fromGid(result[1]);\n+        long l = getSoPeerCred0(fd);\n+        int uid = (int)(l >> 32);\n+        int gid = (int)l;\n+        UserPrincipal user = UnixUserPrincipals.fromUid(uid);\n+        GroupPrincipal group = UnixUserPrincipals.fromGid(gid);\n@@ -123,1 +122,1 @@\n-    private static native void getSoPeerCred0(int fd, int[] result) throws SocketException;\n+    private static native long getSoPeerCred0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/linux\/classes\/jdk\/net\/LinuxSocketOptions.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n- * Signature: (I[I)I\n+ * Signature: (I)L\n@@ -119,2 +119,2 @@\n-JNIEXPORT void JNICALL Java_jdk_net_LinuxSocketOptions_getSoPeerCred0\n-  (JNIEnv *env, jclass clazz, jint fd, jintArray result) {\n+JNIEXPORT jlong JNICALL Java_jdk_net_LinuxSocketOptions_getSoPeerCred0\n+  (JNIEnv *env, jclass clazz, jint fd) {\n@@ -125,1 +125,0 @@\n-    int *rr = (int *)(*env)->GetIntArrayElements(env, result, NULL);\n@@ -132,3 +131,1 @@\n-        } else {\n-            rr[0] = cred.uid;\n-            rr[1] = cred.gid;\n+            cred.uid = cred.gid = -1;\n@@ -137,1 +134,1 @@\n-    (*env)->ReleaseIntArrayElements(env, result, rr, 0);\n+    return (((long)cred.uid) << 32) | (cred.gid & 0xffffffffL);\n","filename":"src\/jdk.net\/linux\/native\/libextnet\/LinuxSocketOptions.c","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -82,5 +82,5 @@\n-        int[] result = new int[2];\n-\n-        getSoPeerCred0(fd, result);\n-        UserPrincipal user = UnixUserPrincipals.fromUid(result[0]);\n-        GroupPrincipal group = UnixUserPrincipals.fromGid(result[1]);\n+        long l = getSoPeerCred0(fd);\n+        int uid = (int)(l >> 32);\n+        int gid = (int)l;\n+        UserPrincipal user = UnixUserPrincipals.fromUid(uid);\n+        GroupPrincipal group = UnixUserPrincipals.fromGid(gid);\n@@ -96,1 +96,1 @@\n-    private static native void getSoPeerCred0(int fd, int[] result) throws SocketException;\n+    private static native long getSoPeerCred0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/macosx\/classes\/jdk\/net\/MacOSXSocketOptions.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n- * Signature: (I[I)I\n+ * Signature: (I)L\n@@ -132,4 +132,2 @@\n-JNIEXPORT void JNICALL Java_jdk_net_MacOSXSocketOptions_getSoPeerCred0\n-  (JNIEnv *env, jclass clazz, jint fd, jintArray result) {\n-\n-    int *rr = (int *)(*env)->GetIntArrayElements(env, result, NULL);\n+JNIEXPORT jlong JNICALL Java_jdk_net_MacOSXSocketOptions_getSoPeerCred0\n+  (JNIEnv *env, jclass clazz, jint fd) {\n@@ -138,2 +136,2 @@\n-    rv = getpeereid(fd, (uid_t *)&rr[0], (gid_t *)&rr[1]);\n-    (*env)->ReleaseIntArrayElements(env, result, rr, 0);\n+    int uid, gid;\n+    rv = getpeereid(fd, (uid_t *)&uid, (gid_t *)&gid);\n@@ -141,0 +139,4 @@\n+    if (rv == -1) {\n+        uid = gid = -1;\n+    }\n+    return (((long)uid) << 32) | (gid & 0xffffffffL);\n","filename":"src\/jdk.net\/macosx\/native\/libextnet\/MacOSXSocketOptions.c","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,0 +24,6 @@\n+\/* @test\n+ * @bug 4927640\n+ * @summary Tests the SCTP protocol implementation\n+ * @author chegar\n+ *\/\n+\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpServerChannel\/NonBlockingAccept.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.net.ProtocolFamily;\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/ConnectionPoolTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}