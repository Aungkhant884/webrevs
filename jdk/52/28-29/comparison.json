{"files":[{"patch":"@@ -41,0 +41,5 @@\n+\/**\n+ * Verify that UnixDomainSocketAddress.of(path) throws IAE\n+ * if given a Path that does not originate from system default\n+ * file system.\n+ *\/\n@@ -43,2 +48,0 @@\n-    static UnixDomainSocketAddress addr;\n-\n","filename":"test\/jdk\/java\/net\/UnixDomainSocketAddress\/AddressTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,10 +77,11 @@\n-            throws IOException {\n-        ServerSocketChannel ssc = ServerSocketChannel.open(UNIX);\n-        var addr = (UnixDomainSocketAddress)ssc.bind(null).getLocalAddress();\n-        SocketChannel sc1 = SocketChannel.open(addr);\n-        SocketChannel sc2 = ssc.accept();\n-        launch(className, null, null, Util.getFD(sc2));\n-        sc2.close();\n-        Files.delete(addr.getPath());\n-        ssc.close();\n-        return sc1;\n+            throws IOException \n+    {\n+        try (ServerSocketChannel ssc = ServerSocketChannel.open(UNIX)) {\n+            var addr = (UnixDomainSocketAddress)ssc.bind(null).getLocalAddress();\n+            SocketChannel sc1 = SocketChannel.open(addr);\n+            try (SocketChannel sc2 = ssc.accept()) {\n+                launch(className, null, null, Util.getFD(sc2));\n+\t    }\n+            Files.delete(addr.getPath());\n+            return sc1;\n+\t}\n@@ -97,4 +98,5 @@\n-            throws IOException {\n-        ServerSocketChannel ssc = ServerSocketChannel.open();\n-        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n-        InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(),\n+            throws IOException \n+    {\n+        try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+            ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n+            InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(),\n@@ -102,6 +104,6 @@\n-        SocketChannel sc1 = SocketChannel.open(isa);\n-        SocketChannel sc2 = ssc.accept();\n-        launch(className, options, args, Util.getFD(sc2));\n-        sc2.close();\n-        ssc.close();\n-        return sc1;\n+            SocketChannel sc1 = SocketChannel.open(isa);\n+            try (SocketChannel sc2 = ssc.accept()) {\n+                launch(className, options, args, Util.getFD(sc2));\n+            }\n+            return sc1;\n+        }\n@@ -129,8 +131,9 @@\n-            throws IOException {\n-        ServerSocketChannel ssc = ServerSocketChannel.open();\n-        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n-        int port = ssc.socket().getLocalPort();\n-        launch(className, options, args, Util.getFD(ssc));\n-        ssc.close();\n-        InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(), port);\n-        return SocketChannel.open(isa);\n+            throws IOException \n+    {\n+        try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+            ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n+            int port = ssc.socket().getLocalPort();\n+            launch(className, options, args, Util.getFD(ssc));\n+            InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(), port);\n+            return SocketChannel.open(isa);\n+\t}\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/Launcher.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -126,10 +126,12 @@\n-        final ServerSocketChannel server = ServerSocketChannel.open(UNIX);\n-        final SocketChannel client = SocketChannel.open(UNIX);\n-        call(() -> {\n-            server.bind(saddr);\n-        }, SE);\n-        call(() -> {\n-            client.connect(saddr);\n-        }, SE);\n-        close(server, client);\n-        Files.deleteIfExists(servername);\n+        try (final ServerSocketChannel server = ServerSocketChannel.open(UNIX)) {\n+            try (final SocketChannel client = SocketChannel.open(UNIX)) {\n+                call(() -> {\n+                    server.bind(saddr);\n+                }, SE);\n+                call(() -> {\n+                    client.connect(saddr);\n+                }, SE);\n+\t    }\n+\t} finally {\n+            Files.deleteIfExists(servername);\n+\t}\n@@ -144,10 +146,12 @@\n-        final ServerSocketChannel server = ServerSocketChannel.open(UNIX);\n-        final SocketChannel client = SocketChannel.open(UNIX);\n-        call(() -> {\n-            server.bind(saddr);\n-        }, null);\n-        call(() -> {\n-            client.connect(saddr);\n-        }, null);\n-        close(server, client);\n-        Files.deleteIfExists(servername);\n+        try (final ServerSocketChannel server = ServerSocketChannel.open(UNIX)) {\n+            try (final SocketChannel client = SocketChannel.open(UNIX)) {\n+                call(() -> {\n+                    server.bind(saddr);\n+                }, null);\n+                call(() -> {\n+                    client.connect(saddr);\n+                }, null);\n+            }\n+\t} finally {\n+            Files.deleteIfExists(servername);\n+\t}\n@@ -160,29 +164,31 @@\n-        var s1 = ServerSocketChannel.open(UNIX);\n-        s1.bind(saddr);\n-        var s2 = ServerSocketChannel.open(UNIX);\n-        s2.bind(null);\n-        var add2 = (UnixDomainSocketAddress)s2.getLocalAddress();\n-        saddr.getPath().toFile().deleteOnExit();\n-        add2.getPath().toFile().deleteOnExit();\n-\n-        \/\/ Now set security manager and check if we can see addresses\n-\n-        setSecurityManager(\"policy3\");\n-\n-        if (((UnixDomainSocketAddress)s1\n-                        .getLocalAddress())\n-                        .getPath()\n-                        .toString()\n-                        .length() != 0)\n-        {\n-            throw new RuntimeException(\"address should have been empty\");\n-        }\n-\n-        if (((UnixDomainSocketAddress)s2\n-                        .getLocalAddress())\n-                        .getPath()\n-                        .toString()\n-                        .length() != 0)\n-        {\n-            throw new RuntimeException(\"address should have been empty\");\n-        }\n+        try (var s1 = ServerSocketChannel.open(UNIX)) {\n+            s1.bind(saddr);\n+            try (var s2 = ServerSocketChannel.open(UNIX)) {\n+                s2.bind(null);\n+                var add2 = (UnixDomainSocketAddress)s2.getLocalAddress();\n+                saddr.getPath().toFile().deleteOnExit();\n+                add2.getPath().toFile().deleteOnExit();\n+\n+                \/\/ Now set security manager and check if we can see addresses\n+\n+                setSecurityManager(\"policy3\");\n+\n+                if (((UnixDomainSocketAddress)s1\n+                            .getLocalAddress())\n+                            .getPath()\n+                            .toString()\n+                            .length() != 0)\n+                {\n+                    throw new RuntimeException(\"address should have been empty\");\n+                }\n+\n+                if (((UnixDomainSocketAddress)s2\n+                            .getLocalAddress())\n+                            .getPath()\n+                            .toString()\n+                            .length() != 0)\n+                {\n+                    throw new RuntimeException(\"address should have been empty\");\n+                }\n+\t    }\n+\t}\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":55,"deletions":49,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -56,29 +56,33 @@\n-        ServerSocketChannel s = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-        s.bind(null);\n-        UnixDomainSocketAddress addr = (UnixDomainSocketAddress)s.getLocalAddress();\n-        SocketChannel c = SocketChannel.open(addr);\n-        if (!c.supportedOptions().contains(SO_PEERCRED)) {\n-            return;\n-        }\n-        Files.deleteIfExists(addr.getPath());\n-        UnixDomainPrincipal p = c.getOption(SO_PEERCRED);\n-        String s1 = p.user().getName();\n-        System.out.println(s1);\n-        System.out.println(p.group().getName());\n-        String s2 = System.getProperty(\"user.name\");\n-\n-        \/\/ Check returned user name\n-\n-        if (!s1.equals(s2)) {\n-            throw new RuntimeException(\"wrong username\");\n-        }\n-\n-        \/\/ Try setting the option: Read only\n-\n-        try {\n-            c.setOption(SO_PEERCRED, p);\n-            throw new RuntimeException(\"should have thrown SocketException\");\n-        } catch (SocketException e) {}\n-\n-        c.close();\n-        s.close();\n+    \tUnixDomainSocketAddress addr = null;\n+\tUnixDomainPrincipal p;\n+        try (ServerSocketChannel s = ServerSocketChannel.open(StandardProtocolFamily.UNIX)) {\n+            s.bind(null);\n+            addr = (UnixDomainSocketAddress)s.getLocalAddress();\n+            try (SocketChannel c = SocketChannel.open(addr)) {\n+                if (!c.supportedOptions().contains(SO_PEERCRED)) {\n+                    return;\n+                }\n+                Files.deleteIfExists(addr.getPath());\n+                p = c.getOption(SO_PEERCRED);\n+                String s1 = p.user().getName();\n+                System.out.println(s1);\n+                System.out.println(p.group().getName());\n+                String s2 = System.getProperty(\"user.name\");\n+\n+                \/\/ Check returned user name\n+\n+                if (!s1.equals(s2)) {\n+                    throw new RuntimeException(\"wrong username\");\n+                }\n+\n+                \/\/ Try setting the option: Read only\n+\n+                try {\n+                    c.setOption(SO_PEERCRED, p);\n+                    throw new RuntimeException(\"should have thrown SocketException\");\n+                } catch (SocketException e) {}\n+\t    }\n+\t} finally {\n+\t    if (addr != null)\n+                Files.deleteIfExists(addr.getPath());\n+\t}\n@@ -88,6 +92,7 @@\n-        c = SocketChannel.open(StandardProtocolFamily.UNIX);\n-        try {\n-            p = c.getOption(SO_PEERCRED);\n-            System.out.println(p.user());\n-            throw new RuntimeException(\"should have thrown SocketException\");\n-        } catch (SocketException e) {}\n+        try (var c = SocketChannel.open(StandardProtocolFamily.UNIX)) {\n+            try {\n+                p = c.getOption(SO_PEERCRED);\n+                System.out.println(p.user());\n+                throw new RuntimeException(\"should have thrown SocketException\");\n+            } catch (SocketException e) {}\n+\t}\n@@ -97,7 +102,7 @@\n-        var server = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n-        try {\n-            p = server.getOption(SO_PEERCRED);\n-            System.out.println(p.user());\n-            throw new RuntimeException(\"should have thrown USE\");\n-        } catch (UnsupportedOperationException e) {}\n-\n+        try (var server = ServerSocketChannel.open(StandardProtocolFamily.UNIX)) {\n+            try {\n+                p = server.getOption(SO_PEERCRED);\n+                System.out.println(p.user());\n+                throw new RuntimeException(\"should have thrown USE\");\n+            } catch (UnsupportedOperationException e) {}\n+\t}\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/SocketOptions.java","additions":47,"deletions":42,"binary":false,"changes":89,"status":"modified"}]}