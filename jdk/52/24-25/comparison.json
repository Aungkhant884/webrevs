{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-import sun.security.action.GetPropertyAction;\n-\n+import jdk.internal.util.StaticProperty;\n@@ -48,2 +47,1 @@\n-    private static final Path tmpdir =\n-        Path.of(GetPropertyAction.privilegedGetProperty(\"java.io.tmpdir\"));\n+    private static final Path tmpdir = Path.of(StaticProperty.javaIoTmpDir());\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/TempFileHelper.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-    public static String javaIOTmpdir() {\n+    public static String javaIoTmpDir() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,9 +61,0 @@\n-    \/**\n-     * Return the, possibly empty, set of extended socket options available for\n-     * Unix domain client sockets. Note, there are no extended\n-     * Unix domain server options.\n-     *\/\n-    public final Set<SocketOption<?>> unixDomainClientOptions() {\n-        return unixDomainClientOptions;\n-    }\n-\n@@ -78,4 +69,0 @@\n-    public static Set<SocketOption<?>> unixSocketOptions() {\n-        return getInstance().unixDomainClientOptions();\n-    }\n-\n@@ -90,0 +77,13 @@\n+    \/**\n+     * Return the, possibly empty, set of extended socket options available for\n+     * Unix domain client sockets. Note, there are no extended\n+     * Unix domain server options.\n+     *\/\n+    private final Set<SocketOption<?>> unixDomainClientOptions() {\n+        return unixDomainClientOptions;\n+    }\n+\n+    public static Set<SocketOption<?>> unixDomainSocketOptions() {\n+        return getInstance().unixDomainClientOptions();\n+    }\n+\n@@ -107,1 +107,1 @@\n-        if (isUnixDomainOption(option)) {\n+        if (option.name().startsWith(\"UDP_\") || isUnixDomainOption(option)) {\n@@ -109,0 +109,2 @@\n+        } else {\n+            return true;\n@@ -110,1 +112,0 @@\n-        return !option.name().startsWith(\"UDP_\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -229,1 +229,2 @@\n-    static InetSocketAddress getRevealedLocalAddress(InetSocketAddress addr) {\n+    static InetSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n+        InetSocketAddress isa = (InetSocketAddress) sa;\n@@ -231,9 +232,7 @@\n-        if (addr == null || sm == null)\n-            return addr;\n-\n-        try{\n-            sm.checkConnect(addr.getAddress().getHostAddress(), -1);\n-            \/\/ Security check passed\n-        } catch (SecurityException e) {\n-            \/\/ Return loopback address only if security check fails\n-            addr = getLoopbackAddress(addr.getPort());\n+        if (isa != null && sm != null) {\n+            try {\n+                sm.checkConnect(isa.getAddress().getHostAddress(), -1);\n+            } catch (SecurityException e) {\n+                \/\/ Return loopback address only if security check fails\n+                isa = getLoopbackAddress(isa.getPort());\n+            }\n@@ -241,1 +240,1 @@\n-        return addr;\n+        return isa;\n@@ -244,3 +243,7 @@\n-    static String getRevealedLocalAddressAsString(InetSocketAddress addr) {\n-        return System.getSecurityManager() == null ? addr.toString() :\n-                getLoopbackAddress(addr.getPort()).toString();\n+    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n+        InetSocketAddress isa = (InetSocketAddress) sa;\n+        if (System.getSecurityManager() == null) {\n+            return isa.toString();\n+        } else {\n+            return getLoopbackAddress(isa.getPort()).toString();\n+        }\n@@ -250,2 +253,1 @@\n-        return new InetSocketAddress(InetAddress.getLoopbackAddress(),\n-                                     port);\n+        return new InetSocketAddress(InetAddress.getLoopbackAddress(), port);\n@@ -577,0 +579,7 @@\n+    static int connect(ProtocolFamily family, FileDescriptor fd, SocketAddress remote)\n+        throws IOException\n+    {\n+        InetSocketAddress isa = (InetSocketAddress) remote;\n+        return connect(family, fd, isa.getAddress(), isa.getPort());\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.net.StandardProtocolFamily;\n@@ -38,0 +37,3 @@\n+import static java.net.StandardProtocolFamily.INET;\n+import static java.net.StandardProtocolFamily.INET6;\n+import static java.net.StandardProtocolFamily.UNIX;\n@@ -81,1 +83,1 @@\n-        if (family == StandardProtocolFamily.INET6 && !Net.isIPv6Available()) {\n+        if (family == INET6 && !Net.isIPv6Available()) {\n@@ -83,2 +85,1 @@\n-        } else if (family == StandardProtocolFamily.INET ||\n-                   family == StandardProtocolFamily.INET6)  {\n+        } else if (family == INET || family == INET6) {\n@@ -86,2 +87,1 @@\n-        } else if (family == StandardProtocolFamily.UNIX &&\n-                   UnixDomainSockets.isSupported()) {\n+        } else if (family == UNIX && UnixDomainSockets.isSupported()) {\n@@ -89,2 +89,3 @@\n-        } else\n-            return super.openSocketChannel(family);\n+        } else {\n+            throw new UnsupportedOperationException(\"Protocol family not supported\");\n+        }\n@@ -96,1 +97,1 @@\n-        if (family == StandardProtocolFamily.INET6 && !Net.isIPv6Available()) {\n+        if (family == INET6 && !Net.isIPv6Available()) {\n@@ -98,2 +99,1 @@\n-        } else if (family == StandardProtocolFamily.INET ||\n-                   family == StandardProtocolFamily.INET6)  {\n+        } else if (family == INET || family == INET6)  {\n@@ -101,2 +101,1 @@\n-        } else if (family == StandardProtocolFamily.UNIX &&\n-                   UnixDomainSockets.isSupported()) {\n+        } else if (family == UNIX && UnixDomainSockets.isSupported()) {\n@@ -104,2 +103,3 @@\n-        } else\n-            return super.openServerSocketChannel(family);\n+        } else {\n+            throw new UnsupportedOperationException(\"Protocol family not supported\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorProviderImpl.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        InetSocketAddress local = (InetSocketAddress)ssc.localAddress();\n+        SocketAddress local = ssc.localAddress();\n@@ -106,1 +106,1 @@\n-        InetSocketAddress local = (InetSocketAddress)ssc.localAddress();\n+        InetSocketAddress local = (InetSocketAddress) ssc.localAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketAdaptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.net.StandardProtocolFamily;\n@@ -49,1 +48,0 @@\n-import java.nio.file.InvalidPathException;\n@@ -56,0 +54,3 @@\n+import static java.net.StandardProtocolFamily.INET;\n+import static java.net.StandardProtocolFamily.INET6;\n+import static java.net.StandardProtocolFamily.UNIX;\n@@ -108,3 +109,1 @@\n-        this(sp, Net.isIPv6Available()\n-                ? StandardProtocolFamily.INET6\n-                : StandardProtocolFamily.INET);\n+        this(sp, Net.isIPv6Available() ? INET6 : INET);\n@@ -118,4 +117,1 @@\n-\n-        if ((family != StandardProtocolFamily.INET) &&\n-                (family != StandardProtocolFamily.INET6) &&\n-                (family != StandardProtocolFamily.UNIX)) {\n+        if ((family != INET) && (family != INET6) && (family != UNIX)) {\n@@ -124,1 +120,6 @@\n-        if (family == StandardProtocolFamily.UNIX) {\n+        if (family == INET6 && !Net.isIPv6Available()) {\n+            throw new UnsupportedOperationException(\"IPv6 not available\");\n+        }\n+\n+        this.family = family;\n+        if (family == UNIX) {\n@@ -127,3 +128,0 @@\n-            if (family == StandardProtocolFamily.INET6 && !Net.isIPv6Available()) {\n-                throw new UnsupportedOperationException(\"IPv6 not available\");\n-            }\n@@ -132,2 +130,0 @@\n-\n-        this.family = family;\n@@ -137,2 +133,4 @@\n-    ServerSocketChannelImpl(SelectorProvider sp, ProtocolFamily family,\n-                            FileDescriptor fd, boolean bound)\n+    ServerSocketChannelImpl(SelectorProvider sp,\n+                            ProtocolFamily family,\n+                            FileDescriptor fd,\n+                            boolean bound)\n@@ -142,3 +140,3 @@\n-        this.fd = fd;\n-        if (family == StandardProtocolFamily.UNIX) {\n-            this.family = family;\n+\n+        if (family == UNIX) {\n+            this.family = UNIX;\n@@ -146,3 +144,1 @@\n-            this.family = Net.isIPv6Available()\n-                ? StandardProtocolFamily.INET6\n-                : StandardProtocolFamily.INET;\n+            this.family = Net.isIPv6Available() ? INET6 : INET;\n@@ -150,0 +146,1 @@\n+        this.fd = fd;\n@@ -154,1 +151,1 @@\n-                if (family == StandardProtocolFamily.UNIX) {\n+                if (family == UNIX) {\n@@ -163,0 +160,14 @@\n+    \/**\n+     * Returns true if this channel is to a INET or INET6 socket.\n+     *\/\n+    private boolean isNetSocket() {\n+        return (family == INET) || (family == INET6);\n+    }\n+\n+    \/**\n+     * Returns true if this channel is to a UNIX socket.\n+     *\/\n+    boolean isUnixSocket() {\n+        return (family == UNIX);\n+    }\n+\n@@ -172,4 +183,2 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                throw new UnsupportedOperationException(\"protocol family not supported\");\n-            } else {\n-                if (socket == null) {\n+            if (socket == null) {\n+                if (isNetSocket()) {\n@@ -177,0 +186,2 @@\n+                } else {\n+                    throw new UnsupportedOperationException(\"Not supported\");\n@@ -187,6 +198,2 @@\n-            if (localAddress == null) {\n-                return null;\n-            }\n-            if (family == StandardProtocolFamily.UNIX) {\n-                return UnixDomainSockets.getRevealedLocalAddress(\n-                                (UnixDomainSocketAddress)localAddress);\n+            if (isUnixSocket()) {\n+                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n@@ -194,1 +201,1 @@\n-                return Net.getRevealedLocalAddress((InetSocketAddress)localAddress);\n+                return Net.getRevealedLocalAddress(localAddress);\n@@ -211,2 +218,5 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                Net.setSocketOption(fd, Net.UNSPEC, name, value);\n+            if (isNetSocket()\n+                    && name == StandardSocketOptions.SO_REUSEADDR\n+                    && Net.useExclusiveBind()) {\n+                \/\/ SO_REUSEADDR emulated when using exclusive bind\n+                isReuseAddress = (Boolean) value;\n@@ -214,6 +224,2 @@\n-                if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n-                    \/\/ SO_REUSEADDR emulated when using exclusive bind\n-                    isReuseAddress = (Boolean) value;\n-                } else {\n-                    Net.setSocketOption(fd, Net.UNSPEC, name, value);\n-                }\n+                \/\/ no options that require special handling\n+                Net.setSocketOption(fd, Net.UNSPEC, name, value);\n@@ -236,2 +242,5 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                return (T) Net.getSocketOption(fd, Net.UNSPEC, name);\n+            if (isNetSocket()\n+                    && name == StandardSocketOptions.SO_REUSEADDR\n+                    && Net.useExclusiveBind()) {\n+                \/\/ SO_REUSEADDR emulated when using exclusive bind\n+                return (T) Boolean.valueOf(isReuseAddress);\n@@ -239,4 +248,1 @@\n-                if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n-                    \/\/ SO_REUSEADDR emulated when using exclusive bind\n-                    return (T) Boolean.valueOf(isReuseAddress);\n-                }\n+                \/\/ no options that require special handling\n@@ -272,1 +278,1 @@\n-        if (family == StandardProtocolFamily.UNIX) {\n+        if (isUnixSocket()) {\n@@ -285,2 +291,2 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                localAddress = implBindUnix(local, backlog);\n+            if (isUnixSocket()) {\n+                localAddress = unixBind(local, backlog);\n@@ -288,1 +294,1 @@\n-                localAddress = implBindInet(local, backlog);\n+                localAddress = netBind(local, backlog);\n@@ -294,4 +300,1 @@\n-    private SocketAddress implBindUnix(SocketAddress local, int backlog) throws IOException {\n-        boolean found = false;\n-        UnixDomainSocketAddress usa = null;\n-\n+    private SocketAddress unixBind(SocketAddress local, int backlog) throws IOException {\n@@ -299,6 +302,1 @@\n-\n-        if (local != null) {\n-            usa = UnixDomainSockets.checkAddress(local);\n-            UnixDomainSockets.bind(fd, usa.getPath());\n-            found = true;\n-        } else {\n+        if (local == null) {\n@@ -307,2 +305,3 @@\n-            for (int i = 0; i < 10; i++) {\n-                usa = UnixDomainSockets.getTempName();\n+            boolean bound = false;\n+            int attempts = 0;\n+            while (attempts < 10 && !bound) {\n@@ -310,4 +309,5 @@\n-                    UnixDomainSockets.bind(fd, usa.getPath());\n-                    found = true;\n-                    break;\n-                } catch (BindException e) {}\n+                    Path path = UnixDomainSockets.generateTempName().getPath();\n+                    UnixDomainSockets.bind(fd, path);\n+                    bound = true;\n+                } catch (BindException e) { }\n+                attempts++;\n@@ -315,0 +315,5 @@\n+            if (!bound)\n+                throw new BindException(\"Could not bind to temporary name\");\n+        } else {\n+            Path path = UnixDomainSockets.checkAddress(local).getPath();\n+            UnixDomainSockets.bind(fd, path);\n@@ -316,2 +321,0 @@\n-        if (!found)\n-            throw new BindException(\"Could not bind to temporary name\");\n@@ -322,1 +325,1 @@\n-    private SocketAddress implBindInet(SocketAddress local, int backlog) throws IOException {\n+    private SocketAddress netBind(SocketAddress local, int backlog) throws IOException {\n@@ -380,1 +383,1 @@\n-        SocketAddress[] isaa = new SocketAddress[1];\n+        SocketAddress[] saa = new SocketAddress[1];\n@@ -387,1 +390,1 @@\n-                n = implAccept(this.fd, newfd, isaa);\n+                n = implAccept(this.fd, newfd, saa);\n@@ -391,1 +394,1 @@\n-                        n = implAccept(this.fd, newfd, isaa);\n+                        n = implAccept(this.fd, newfd, saa);\n@@ -403,1 +406,1 @@\n-            return finishAccept(newfd, isaa[0]);\n+            return finishAccept(newfd, saa[0]);\n@@ -409,1 +412,1 @@\n-    private int implAccept(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] sa)\n+    private int implAccept(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] saa)\n@@ -412,2 +415,7 @@\n-        if (family == StandardProtocolFamily.UNIX) {\n-            return implAcceptUnix(fd, newfd, sa);\n+        if (isUnixSocket()) {\n+            UnixDomainSockets.checkPermission();\n+            String[] pa = new String[1];\n+            int n = UnixDomainSockets.accept(fd, newfd, pa);\n+            if (n > 0)\n+                saa[0] = UnixDomainSocketAddress.of(pa[0]);\n+            return n;\n@@ -415,1 +423,5 @@\n-            return implAcceptInet(fd, newfd, sa);\n+            InetSocketAddress[] issa = new InetSocketAddress[1];\n+            int n = Net.accept(fd, newfd, issa);\n+            if (n > 0)\n+                saa[0] = issa[0];\n+            return n;\n@@ -419,21 +431,0 @@\n-    private int implAcceptInet(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] addrs)\n-        throws IOException\n-    {\n-        InetSocketAddress[] a = new InetSocketAddress[1];\n-        int n = Net.accept(fd, newfd, a);\n-        addrs[0] = a[0];\n-        return n;\n-    }\n-\n-    private int implAcceptUnix(FileDescriptor fd, FileDescriptor newfd, SocketAddress[] addrs)\n-        throws IOException\n-    {\n-        UnixDomainSockets.checkPermission();\n-        String[] addrArray = new String[1];\n-        int n = UnixDomainSockets.accept(fd, newfd, addrArray);\n-        if (n > 0) {\n-            addrs[0] = UnixDomainSocketAddress.of(addrArray[0]);\n-        }\n-        return n;\n-    }\n-\n@@ -453,1 +444,1 @@\n-        SocketAddress[] isaa = new SocketAddress[1];\n+        SocketAddress[] saa = new SocketAddress[1];\n@@ -467,1 +458,1 @@\n-                    n = implAccept(fd, newfd, isaa);\n+                    n = implAccept(fd, newfd, saa);\n@@ -474,1 +465,1 @@\n-                        n = implAccept(fd, newfd, isaa);\n+                        n = implAccept(fd, newfd, saa);\n@@ -488,1 +479,1 @@\n-        return finishAccept(newfd, isaa[0]);\n+        return finishAccept(newfd, saa[0]);\n@@ -497,6 +488,3 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                UnixDomainSocketAddress usa = (UnixDomainSocketAddress)sa;\n-                return new SocketChannelImpl(provider(), StandardProtocolFamily.UNIX, newfd, usa);\n-            } else {\n-                InetSocketAddress isa = (InetSocketAddress)sa;\n-                \/\/ check permitted to accept connections from the remote address\n+\n+            \/\/ check permitted to accept connections from the remote address\n+            if (isNetSocket()) {\n@@ -505,0 +493,1 @@\n+                    InetSocketAddress isa = (InetSocketAddress) sa;\n@@ -507,1 +496,0 @@\n-                return new SocketChannelImpl(provider(), family, newfd, isa);\n@@ -509,0 +497,1 @@\n+            return new SocketChannelImpl(provider(), family, newfd, sa);\n@@ -729,0 +718,2 @@\n+                } else if (isUnixSocket()) {\n+                    sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n@@ -730,6 +721,1 @@\n-                    if (family == StandardProtocolFamily.UNIX) {\n-                        sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(\n-                                 (UnixDomainSocketAddress)addr));\n-                    } else {\n-                        sb.append(Net.getRevealedLocalAddressAsString((InetSocketAddress)addr));\n-                    }\n+                    sb.append(Net.getRevealedLocalAddressAsString(addr));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":104,"deletions":118,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+    private InetSocketAddress localAddress() {\n+        return (InetSocketAddress) sc.localAddress();\n+    }\n+\n+    private InetSocketAddress remoteAddress() {\n+        return (InetSocketAddress) sc.remoteAddress();\n+    }\n+\n@@ -109,1 +117,1 @@\n-        InetSocketAddress remote = (InetSocketAddress)sc.remoteAddress();\n+        InetSocketAddress remote = remoteAddress();\n@@ -120,1 +128,1 @@\n-            InetSocketAddress local = (InetSocketAddress)sc.localAddress();\n+            InetSocketAddress local = localAddress();\n@@ -130,1 +138,1 @@\n-        InetSocketAddress remote = (InetSocketAddress)sc.remoteAddress();\n+        InetSocketAddress remote = remoteAddress();\n@@ -140,1 +148,1 @@\n-        InetSocketAddress local = (InetSocketAddress)sc.localAddress();\n+        InetSocketAddress local = localAddress();\n@@ -155,6 +163,1 @@\n-        InetSocketAddress local = (InetSocketAddress)sc.localAddress();\n-        if (local != null) {\n-            return Net.getRevealedLocalAddress(local);\n-        } else {\n-            return null;\n-        }\n+        return Net.getRevealedLocalAddress(sc.localAddress());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketAdaptor.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.net.StandardProtocolFamily;\n@@ -41,1 +40,0 @@\n-import java.net.UnixDomainSocketAddress;\n@@ -60,0 +58,3 @@\n+import static java.net.StandardProtocolFamily.INET;\n+import static java.net.StandardProtocolFamily.INET6;\n+import static java.net.StandardProtocolFamily.UNIX;\n@@ -127,2 +128,0 @@\n-    \/\/ Constructor for normal connecting sockets\n-\n@@ -130,3 +129,1 @@\n-        this(sp, Net.isIPv6Available()\n-                ? StandardProtocolFamily.INET6\n-                : StandardProtocolFamily.INET);\n+        this(sp, Net.isIPv6Available() ? INET6 : INET);\n@@ -135,1 +132,2 @@\n-    private static FileDescriptor socketFor(ProtocolFamily family) throws IOException {\n+    SocketChannelImpl(SelectorProvider sp, ProtocolFamily family) throws IOException {\n+        super(sp);\n@@ -137,3 +135,1 @@\n-        if ((family != StandardProtocolFamily.INET) &&\n-                (family != StandardProtocolFamily.UNIX) &&\n-                (family != StandardProtocolFamily.INET6)) {\n+        if ((family != INET) && (family != INET6) && (family != UNIX)) {\n@@ -142,3 +138,1 @@\n-        if (family == StandardProtocolFamily.UNIX) {\n-            return UnixDomainSockets.socket();\n-        } else if (family == StandardProtocolFamily.INET6 && !Net.isIPv6Available()) {\n+        if (family == INET6 && !Net.isIPv6Available()) {\n@@ -146,2 +140,0 @@\n-        } else {\n-            return Net.socket(family, true);\n@@ -149,1 +141,0 @@\n-    }\n@@ -151,8 +142,0 @@\n-    SocketChannelImpl(SelectorProvider sp, ProtocolFamily family) throws IOException {\n-        this(sp, family, socketFor(family));\n-    }\n-\n-    private SocketChannelImpl(SelectorProvider sp, ProtocolFamily family, FileDescriptor fd)\n-      throws IOException\n-    {\n-        super(sp);\n@@ -160,1 +143,5 @@\n-        this.fd = fd;\n+        if (family == UNIX) {\n+            this.fd = UnixDomainSockets.socket();\n+        } else {\n+            this.fd = Net.socket(family, true);\n+        }\n@@ -169,1 +156,1 @@\n-                      SocketAddress isa)\n+                      SocketAddress remoteAddress)\n@@ -177,2 +164,6 @@\n-            this.localAddress = implLocalAddress(fd);\n-            this.remoteAddress = isa;\n+            if (family == UNIX) {\n+                this.localAddress = UnixDomainSockets.localAddress(fd);\n+            } else {\n+                this.localAddress = Net.localAddress(fd);\n+            }\n+            this.remoteAddress = remoteAddress;\n@@ -183,0 +174,14 @@\n+    \/**\n+     * Returns true if this channel is to a INET or INET6 socket.\n+     *\/\n+    boolean isNetSocket() {\n+        return (family == INET) || (family == INET6);\n+    }\n+\n+    \/**\n+     * Returns true if this channel is to a UNIX socket.\n+     *\/\n+    boolean isUnixSocket() {\n+        return (family == UNIX);\n+    }\n+\n@@ -217,3 +222,0 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                throw new UnsupportedOperationException(\"protocol family not supported\");\n-            }\n@@ -221,1 +223,5 @@\n-                socket = SocketAdaptor.create(this);\n+                if (isNetSocket()) {\n+                    socket = SocketAdaptor.create(this);\n+                } else {\n+                    throw new UnsupportedOperationException(\"Not supported\");\n+                }\n@@ -231,19 +237,5 @@\n-            return getRevealedLocalAddress(localAddress);\n-        }\n-    }\n-\n-    private SocketAddress implLocalAddress(FileDescriptor fd) throws IOException {\n-        if (family == StandardProtocolFamily.UNIX) {\n-            return UnixDomainSockets.localAddress(fd);\n-        } else {\n-            return Net.localAddress(fd);\n-        }\n-    }\n-\n-    private SocketAddress getRevealedLocalAddress(SocketAddress sa) {\n-        if (family == StandardProtocolFamily.UNIX) {\n-            UnixDomainSocketAddress usa = (UnixDomainSocketAddress)sa;\n-            return UnixDomainSockets.getRevealedLocalAddress(usa);\n-        } else {\n-            InetSocketAddress isa = (InetSocketAddress)sa;\n-            return Net.getRevealedLocalAddress(isa);\n+            if (isUnixSocket()) {\n+                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n+            } else {\n+                return Net.getRevealedLocalAddress(localAddress);\n+            }\n@@ -273,3 +265,2 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                Net.setSocketOption(fd, name, value);\n-            } else {\n+\n+            if (isNetSocket()) {\n@@ -277,2 +268,1 @@\n-                    ProtocolFamily family = Net.isIPv6Available() ?\n-                        StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n+                    \/\/ special handling for IP_TOS\n@@ -280,1 +270,3 @@\n-                } else if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n+                    return this;\n+                }\n+                if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n@@ -282,3 +274,2 @@\n-                    isReuseAddress = (Boolean)value;\n-                } else {\n-                    Net.setSocketOption(fd, name, value);\n+                    isReuseAddress = (Boolean) value;\n+                    return this;\n@@ -287,0 +278,3 @@\n+\n+            \/\/ no options that require special handling\n+            Net.setSocketOption(fd, name, value);\n@@ -302,7 +296,0 @@\n-            if (family == StandardProtocolFamily.UNIX) {\n-                return (T) Net.getSocketOption(fd, name);\n-            } else {\n-                if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n-                    \/\/ SO_REUSEADDR emulated when using exclusive bind\n-                    return (T)Boolean.valueOf(isReuseAddress);\n-                }\n@@ -310,1 +297,1 @@\n-                \/\/ special handling for IP_TOS\n+            if (isNetSocket()) {\n@@ -312,2 +299,1 @@\n-                    ProtocolFamily family = Net.isIPv6Available() ?\n-                        StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n+                    \/\/ special handling for IP_TOS\n@@ -316,1 +302,4 @@\n-                return (T) Net.getSocketOption(fd, name);\n+                if (name == StandardSocketOptions.SO_REUSEADDR && Net.useExclusiveBind()) {\n+                    \/\/ SO_REUSEADDR emulated when using exclusive bind\n+                    return (T) Boolean.valueOf(isReuseAddress);\n+                }\n@@ -318,0 +307,3 @@\n+\n+            \/\/ no options that require special handling\n+            return (T) Net.getSocketOption(fd, name);\n@@ -348,1 +340,1 @@\n-            set.addAll(ExtendedSocketOptions.unixSocketOptions());\n+            set.addAll(ExtendedSocketOptions.unixDomainSocketOptions());\n@@ -355,1 +347,1 @@\n-        if (family == StandardProtocolFamily.UNIX) {\n+        if (isUnixSocket()) {\n@@ -362,1 +354,0 @@\n-\n@@ -694,2 +685,2 @@\n-                    if (family == StandardProtocolFamily.UNIX) {\n-                        localAddress = implBindUnix(local);\n+                    if (isUnixSocket()) {\n+                        localAddress = unixBind(local);\n@@ -697,1 +688,1 @@\n-                        localAddress = implBindInet(local);\n+                        localAddress = netBind(local);\n@@ -709,1 +700,1 @@\n-    private SocketAddress implBindUnix(SocketAddress local) throws IOException {\n+    private SocketAddress unixBind(SocketAddress local) throws IOException {\n@@ -711,7 +702,1 @@\n-        UnixDomainSocketAddress usa = UnixDomainSockets.checkAddress(local);\n-        Path path = usa == null ? null : usa.getPath();\n-        if (path != null && !path.toString().isEmpty()) {\n-            \/\/ implicit bind for null address or empty path\n-            UnixDomainSockets.bind(fd, path);\n-        }\n-        if (usa == null || path.toString().isEmpty()) {\n+        if (local == null) {\n@@ -720,1 +705,8 @@\n-            return UnixDomainSockets.localAddress(fd);\n+            Path path = UnixDomainSockets.checkAddress(local).getPath();\n+            if (path.toString().isEmpty()) {\n+                return UnixDomainSockets.UNNAMED;\n+            } else {\n+                \/\/ bind to non-empty path\n+                UnixDomainSockets.bind(fd, path);\n+                return UnixDomainSockets.localAddress(fd);\n+            }\n@@ -724,1 +716,1 @@\n-    private SocketAddress implBindInet(SocketAddress local) throws IOException {\n+    private SocketAddress netBind(SocketAddress local) throws IOException {\n@@ -776,2 +768,2 @@\n-            if (localAddress == null && sa instanceof InetSocketAddress) {\n-                InetSocketAddress isa = (InetSocketAddress)sa;\n+            if (isNetSocket() && (localAddress == null)) {\n+                InetSocketAddress isa = (InetSocketAddress) sa;\n@@ -804,1 +796,5 @@\n-                    localAddress = implLocalAddress(fd);\n+                    if (isUnixSocket()) {\n+                        localAddress = UnixDomainSockets.localAddress(fd);\n+                    } else {\n+                        localAddress = Net.localAddress(fd);\n+                    }\n@@ -814,3 +810,2 @@\n-    private SocketAddress checkRemote(SocketAddress sa) throws IOException {\n-        if (family == StandardProtocolFamily.UNIX) {\n-            Objects.requireNonNull(sa);\n+    private SocketAddress checkRemote(SocketAddress sa) {\n+        if (isUnixSocket()) {\n@@ -818,13 +813,16 @@\n-            UnixDomainSocketAddress usa = UnixDomainSockets.checkAddress(sa);\n-            return usa;\n-        }\n-        InetSocketAddress isa = Net.checkAddress(sa, family);\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n-        }\n-        InetAddress address = isa.getAddress();\n-        if (address.isAnyLocalAddress()) {\n-            int port = isa.getPort();\n-            if (address instanceof Inet4Address) {\n-                return new InetSocketAddress(Net.inet4LoopbackAddress(), port);\n+            return UnixDomainSockets.checkAddress(sa);\n+        } else {\n+            InetSocketAddress isa = Net.checkAddress(sa, family);\n+            SecurityManager sm = System.getSecurityManager();\n+            if (sm != null) {\n+                sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n+            }\n+            InetAddress address = isa.getAddress();\n+            if (address.isAnyLocalAddress()) {\n+                int port = isa.getPort();\n+                if (address instanceof Inet4Address) {\n+                    return new InetSocketAddress(Net.inet4LoopbackAddress(), port);\n+                } else {\n+                    assert family == INET6;\n+                    return new InetSocketAddress(Net.inet6LoopbackAddress(), port);\n+                }\n@@ -832,2 +830,1 @@\n-                assert family == StandardProtocolFamily.INET6;\n-                return new InetSocketAddress(Net.inet6LoopbackAddress(), port);\n+                return isa;\n@@ -835,2 +832,0 @@\n-        } else {\n-            return isa;\n@@ -852,1 +847,6 @@\n-                        int n = implConnect(fd, sa);\n+                        int n;\n+                        if (isUnixSocket()) {\n+                            n = UnixDomainSockets.connect(fd, sa);\n+                        } else {\n+                            n = Net.connect(family, fd, sa);\n+                        }\n@@ -881,10 +881,0 @@\n-    private int implConnect(FileDescriptor fd,SocketAddress sa) throws IOException {\n-        if (family == StandardProtocolFamily.UNIX) {\n-            UnixDomainSocketAddress usa = (UnixDomainSocketAddress)sa;\n-            return UnixDomainSockets.connect(fd, usa.getPath());\n-        } else {\n-            InetSocketAddress isa = (InetSocketAddress)sa;\n-            return Net.connect(family, fd, isa.getAddress(), isa.getPort());\n-        }\n-    }\n-\n@@ -928,1 +918,5 @@\n-                    localAddress = implLocalAddress(fd);\n+                    if (isUnixSocket()) {\n+                        localAddress = UnixDomainSockets.localAddress(fd);\n+                    } else {\n+                        localAddress = Net.localAddress(fd);\n+                    }\n@@ -1181,1 +1175,6 @@\n-                            int n = implConnect(fd, sa);\n+                            int n;\n+                            if (isUnixSocket()) {\n+                                n = UnixDomainSockets.connect(fd, sa);\n+                            } else {\n+                                n = Net.connect(family, fd, sa);\n+                            }\n@@ -1446,10 +1445,0 @@\n-    private String getRevealedLocalAddressAsString(SocketAddress sa) {\n-        if (family == StandardProtocolFamily.UNIX) {\n-            UnixDomainSocketAddress usa = (UnixDomainSocketAddress)sa;\n-            return UnixDomainSockets.getRevealedLocalAddressAsString(usa);\n-        } else {\n-            InetSocketAddress isa = (InetSocketAddress)sa;\n-            return Net.getRevealedLocalAddressAsString(isa);\n-        }\n-    }\n-\n@@ -1483,1 +1472,5 @@\n-                    sb.append(getRevealedLocalAddressAsString(addr));\n+                    if (isUnixSocket()) {\n+                        sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n+                    } else {\n+                        sb.append(Net.getRevealedLocalAddressAsString(addr));\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":128,"deletions":135,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.security.AccessController;\n@@ -41,1 +40,0 @@\n-import java.security.PrivilegedAction;\n@@ -48,5 +46,1 @@\n-\n-    static {\n-        \/\/ Load all required native libs\n-        IOUtil.load();\n-    }\n+    private UnixDomainSockets() { }\n@@ -66,2 +60,3 @@\n-    static UnixDomainSocketAddress getRevealedLocalAddress(UnixDomainSocketAddress addr) {\n-        try{\n+    static UnixDomainSocketAddress getRevealedLocalAddress(SocketAddress sa) {\n+        UnixDomainSocketAddress addr = (UnixDomainSocketAddress) sa;\n+        try {\n@@ -95,2 +90,2 @@\n-    static String getRevealedLocalAddressAsString(UnixDomainSocketAddress addr) {\n-        return System.getSecurityManager() == null ? addr.toString() : \"\";\n+    static String getRevealedLocalAddressAsString(SocketAddress sa) {\n+        return (System.getSecurityManager() != null) ? sa.toString() : \"\";\n@@ -101,1 +96,1 @@\n-            return null;\n+            throw new NullPointerException();\n@@ -104,7 +99,1 @@\n-        UnixDomainSocketAddress usa = (UnixDomainSocketAddress)sa;\n-        return usa;\n-    }\n-\n-    static boolean isUnixDomain(SocketChannel sc) {\n-        SocketChannelImpl sci = (SocketChannelImpl)sc;\n-        return sci.localAddress() instanceof UnixDomainSocketAddress;\n+        return (UnixDomainSocketAddress) sa;\n@@ -154,1 +143,1 @@\n-    static UnixDomainSocketAddress getTempName() throws IOException {\n+    static UnixDomainSocketAddress generateTempName() throws IOException {\n@@ -167,0 +156,4 @@\n+    static int connect(FileDescriptor fd, SocketAddress sa) throws IOException {\n+        return UnixDomainSockets.connect(fd, ((UnixDomainSocketAddress) sa).getPath());\n+    }\n+\n@@ -197,0 +190,4 @@\n+    static {\n+        \/\/ Load all required native libs\n+        IOUtil.load();\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -40,0 +38,2 @@\n+    private UnixDomainSocketsUtil() { }\n+\n@@ -53,1 +53,0 @@\n-     *\n@@ -60,0 +59,2 @@\n+            } else {\n+                return StaticProperty.javaIoTmpDir();\n@@ -61,2 +62,0 @@\n-\n-            return StaticProperty.javaIOTmpdir();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import java.nio.file.Paths;\n+import java.nio.file.Path;\n@@ -64,2 +64,2 @@\n-    private SourceChannelImpl source;\n-    private SinkChannelImpl sink;\n+    private final SourceChannel source;\n+    private final SinkChannel sink;\n@@ -72,2 +72,3 @@\n-\n-        private IOException ioe = null;\n+        private IOException ioe;\n+        SourceChannelImpl source;\n+        SinkChannelImpl sink;\n@@ -166,2 +167,4 @@\n-                        if (sa instanceof UnixDomainSocketAddress)\n-                            Files.delete(((UnixDomainSocketAddress)sa).getPath());\n+                        if (sa instanceof UnixDomainSocketAddress) {\n+                            Path path = ((UnixDomainSocketAddress) sa).getPath();\n+                            Files.deleteIfExists(path);\n+                        }\n@@ -174,1 +177,4 @@\n-    PipeImpl(final SelectorProvider sp) throws IOException {\n+    \/**\n+     * Creates a Pipe implementation that supports buffering.\n+     *\/\n+    PipeImpl(SelectorProvider sp) throws IOException {\n@@ -179,4 +185,1 @@\n-     * Creates a PipeImpl using either UNIX channels if available\n-     * or INET\/6 otherwise.\n-     *\n-     * @param sp the SelectorProvider\n+     * Creates Pipe implementation that supports optionally buffering.\n@@ -184,2 +187,3 @@\n-     * @param buffering if false and TCP sockets being used, then TCP_NODELAY\n-     *                  is set on the sink channel.\n+     * @implNote The pipe uses Unix domain sockets where possible. It uses a\n+     * loopback connection on older editions of Windows. When buffering is\n+     * disabled then it sets TCP_NODELAY on the sink channel.\n@@ -187,1 +191,2 @@\n-    PipeImpl(final SelectorProvider sp, boolean buffering) throws IOException {\n+    PipeImpl(SelectorProvider sp, boolean buffering) throws IOException {\n+        Initializer initializer = new Initializer(sp);\n@@ -189,4 +194,4 @@\n-            AccessController.doPrivileged(new Initializer(sp));\n-            SocketChannel sc = sink.channel();\n-            if (!buffering && !UnixDomainSockets.isUnixDomain(sc)) {\n-                sc.setOption(StandardSocketOptions.TCP_NODELAY, true);\n+            AccessController.doPrivileged(initializer);\n+            SinkChannelImpl sink = initializer.sink;\n+            if (sink.isNetSocket() && !buffering) {\n+                sink.setOption(StandardSocketOptions.TCP_NODELAY, true);\n@@ -194,2 +199,2 @@\n-        } catch (PrivilegedActionException x) {\n-            throw (IOException)x.getCause();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getCause();\n@@ -197,0 +202,2 @@\n+        this.source = initializer.source;\n+        this.sink = initializer.sink;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.net.SocketOption;\n@@ -47,1 +48,1 @@\n-    final SocketChannel sc;\n+    private final SocketChannelImpl sc;\n@@ -50,1 +51,1 @@\n-        return ((SocketChannelImpl)sc).getFD();\n+        return sc.getFD();\n@@ -54,1 +55,1 @@\n-        return ((SocketChannelImpl)sc).getFDVal();\n+        return sc.getFDVal();\n@@ -57,1 +58,1 @@\n-    SinkChannelImpl(SelectorProvider sp, SocketChannel sc) throws IOException {\n+    SinkChannelImpl(SelectorProvider sp, SocketChannel sc) {\n@@ -59,1 +60,9 @@\n-        this.sc = sc;\n+        this.sc = (SocketChannelImpl) sc;\n+    }\n+\n+    boolean isNetSocket() {\n+        return sc.isNetSocket();\n+    }\n+\n+    <T> void setOption(SocketOption<T> name, T value) throws IOException {\n+        sc.setOption(name, value);\n@@ -67,4 +76,0 @@\n-    SocketChannel channel() {\n-        return sc;\n-    }\n-\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.nio.file.Files;\n@@ -37,0 +36,1 @@\n+    private UnixDomainSocketsUtil() { }\n@@ -52,1 +52,0 @@\n-     *\n@@ -60,1 +59,0 @@\n-\n@@ -65,1 +63,1 @@\n-            return StaticProperty.javaIOTmpdir();\n+            return StaticProperty.javaIoTmpDir();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-                SelectionKeyImpl sk = me.ski;\n+                SelectionKeyImpl ski = me.ski;\n@@ -421,5 +421,4 @@\n-                SelectableChannel sc = sk.channel();\n-                if (isExceptFds && sc instanceof SocketChannelImpl &&\n-                    !UnixDomainSockets.isUnixDomain((SocketChannelImpl)sc) &&\n-                    discardUrgentData(desc))\n-                {\n+                SelectableChannel sc = ski.channel();\n+                if (isExceptFds && (sc instanceof SocketChannelImpl)\n+                        && ((SocketChannelImpl) sc).isNetSocket()\n+                        && discardUrgentData(desc)) {\n@@ -429,1 +428,1 @@\n-                int updated = processReadyEvents(rOps, sk, action);\n+                int updated = processReadyEvents(rOps, ski, action);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-        SocketAddress remoteAddress = getRemoteAddress();\n@@ -61,0 +60,1 @@\n+                SocketAddress remoteAddress = getRemoteAddress();\n@@ -62,1 +62,1 @@\n-                    InetSocketAddress isa = (InetSocketAddress)remoteAddress;\n+                    InetSocketAddress isa = (InetSocketAddress) remoteAddress;\n@@ -75,2 +75,2 @@\n-                    UnixDomainSocketAddress usa = (UnixDomainSocketAddress)remoteAddress;\n-                    String path = \"[\" + usa.getPath().toString() + \"]\";\n+                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n+                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n@@ -95,2 +95,0 @@\n-        SocketAddress remoteAddress = getRemoteAddress();\n-\n@@ -105,0 +103,1 @@\n+                SocketAddress remoteAddress = getRemoteAddress();\n@@ -106,1 +105,1 @@\n-                    InetSocketAddress isa = (InetSocketAddress)remoteAddress;\n+                    InetSocketAddress isa = (InetSocketAddress) remoteAddress;\n@@ -119,2 +118,2 @@\n-                    UnixDomainSocketAddress usa = (UnixDomainSocketAddress)remoteAddress;\n-                    String path = \"[\" + usa.getPath().toString() + \"]\";\n+                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n+                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n@@ -139,1 +138,0 @@\n-        SocketAddress remoteAddress = getRemoteAddress();\n@@ -149,0 +147,1 @@\n+                SocketAddress remoteAddress = getRemoteAddress();\n@@ -150,1 +149,1 @@\n-                    InetSocketAddress isa = (InetSocketAddress)remoteAddress;\n+                    InetSocketAddress isa = (InetSocketAddress) remoteAddress;\n@@ -159,2 +158,2 @@\n-                    UnixDomainSocketAddress usa = (UnixDomainSocketAddress)remoteAddress;\n-                    String path = \"[\" + usa.getPath().toString() + \"]\";\n+                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n+                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n@@ -180,1 +179,0 @@\n-        SocketAddress remoteAddress = getRemoteAddress();\n@@ -190,0 +188,1 @@\n+                SocketAddress remoteAddress = getRemoteAddress();\n@@ -191,1 +190,1 @@\n-                    InetSocketAddress isa = (InetSocketAddress)remoteAddress;\n+                    InetSocketAddress isa = (InetSocketAddress) remoteAddress;\n@@ -200,2 +199,2 @@\n-                    UnixDomainSocketAddress usa = (UnixDomainSocketAddress)remoteAddress;\n-                    String path = \"[\" + usa.getPath().toString() + \"]\";\n+                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n+                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/SocketChannelImplInstrumentor.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n-import java.net.InetSocketAddress;\n-import java.net.SocketAddress;\n-import java.net.UnixDomainSocketAddress;\n-import java.nio.channels.SocketChannel;\n@@ -84,2 +80,0 @@\n-    public static final String EVENT_UNIX_SOCKET_READ = EventNames.UnixSocketRead;\n-    public static final String EVENT_UNIX_SOCKET_WRITE = EventNames.UnixSocketWrite;\n@@ -87,6 +81,1 @@\n-    public enum EventType {\n-        UnknownEvent, FileForce,\n-        FileRead, FileWrite,\n-        SocketRead, SocketWrite,\n-        UnixSocketRead, UnixSocketWrite\n-    }\n+    public enum EventType { UnknownEvent, FileForce, FileRead, FileWrite, SocketRead, SocketWrite }\n@@ -95,2 +84,1 @@\n-        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE,\n-        EVENT_SOCKET_READ, EVENT_SOCKET_WRITE, EVENT_UNIX_SOCKET_READ, EVENT_UNIX_SOCKET_WRITE\n+        EVENT_UNKNOWN, EVENT_FILE_FORCE, EVENT_FILE_READ, EVENT_FILE_WRITE, EVENT_SOCKET_READ, EVENT_SOCKET_WRITE\n@@ -100,13 +88,1 @@\n-        return (eventType == EventType.SocketWrite\n-                || eventType == EventType.FileWrite\n-                || eventType == EventType.UnixSocketWrite);\n-    }\n-\n-    public static boolean isInetEvent(EventType eventType) {\n-        return (eventType == EventType.SocketRead\n-                || eventType == EventType.SocketWrite);\n-    }\n-\n-    public static boolean isUnixEvent(EventType eventType) {\n-        return (eventType == EventType.UnixSocketRead\n-                || eventType == EventType.UnixSocketWrite);\n+        return (eventType == EventType.SocketWrite || eventType == EventType.FileWrite);\n@@ -116,3 +92,1 @@\n-        return (eventType == EventType.SocketRead\n-                || eventType == EventType.FileRead\n-                || eventType == EventType.UnixSocketRead);\n+        return (eventType == EventType.SocketRead || eventType == EventType.FileRead);\n@@ -141,18 +115,0 @@\n-    public static IOEvent createUnixSocketWriteEvent(long size, SocketChannel c) {\n-        if (size < 0) {\n-            size = 0;\n-        }\n-        return new IOEvent(Thread.currentThread().getName(), EventType.UnixSocketWrite,\n-                                size, getUnixAddress(c), false);\n-    }\n-\n-    public static IOEvent createUnixSocketReadEvent(long size, SocketChannel c) {\n-        boolean endOfStream = false;\n-        if (size < 0) {\n-            size = 0;\n-            endOfStream = true;\n-        }\n-        return new IOEvent(Thread.currentThread().getName(), EventType.UnixSocketRead,\n-                                size, getUnixAddress(c), endOfStream);\n-    }\n-\n@@ -233,2 +189,1 @@\n-        EventType eventType = getEventType(event);\n-        if (isFileEvent(eventType)) {\n+        if (isFileEvent(getEventType(event))) {\n@@ -244,2 +199,0 @@\n-        } else if (isInetEvent(eventType)) {\n-            return event.getValue(\"address\") + \":\"  + event.getValue(\"port\");\n@@ -247,1 +200,1 @@\n-            return event.getValue(\"path\");\n+            return event.getValue(\"address\") + \":\"  + event.getValue(\"port\");\n@@ -254,12 +207,0 @@\n-\n-    private static String getUnixAddress(SocketChannel c) {\n-        SocketAddress a = null;\n-        try {\n-            a = c.getRemoteAddress();\n-        } catch (IOException e) {}\n-        if (a instanceof UnixDomainSocketAddress) {\n-            UnixDomainSocketAddress ua = (UnixDomainSocketAddress)a;\n-            return ua.getPath().toString();\n-        } else\n-            throw new RuntimeException(\"unexpected channel type\");\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOEvent.java","additions":6,"deletions":65,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -80,7 +80,2 @@\n-            boolean isInetSock = IOEvent.EVENT_SOCKET_READ.equals(msg) || IOEvent.EVENT_SOCKET_WRITE.equals(msg);\n-            boolean isUnixSock = IOEvent.EVENT_UNIX_SOCKET_READ.equals(msg) ||\n-                                 IOEvent.EVENT_UNIX_SOCKET_WRITE.equals(msg);\n-            boolean isFile = IOEvent.EVENT_FILE_FORCE.equals(msg)\n-                          || IOEvent.EVENT_FILE_READ.equals(msg)\n-                          || IOEvent.EVENT_FILE_WRITE.equals(msg);\n-\n+            boolean isSocket = IOEvent.EVENT_SOCKET_READ.equals(msg) || IOEvent.EVENT_SOCKET_WRITE.equals(msg);\n+            boolean isFile = IOEvent.EVENT_FILE_FORCE.equals(msg) || IOEvent.EVENT_FILE_READ.equals(msg) || IOEvent.EVENT_FILE_WRITE.equals(msg);\n@@ -88,4 +83,1 @@\n-\n-            boolean isRead = IOEvent.EVENT_FILE_READ.equals(msg)\n-                          || IOEvent.EVENT_SOCKET_READ.equals(msg)\n-                          || IOEvent.EVENT_UNIX_SOCKET_READ.equals(msg);\n+            boolean isRead = IOEvent.EVENT_FILE_READ.equals(msg) || IOEvent.EVENT_SOCKET_READ.equals(msg);\n@@ -94,1 +86,1 @@\n-            } else if (isInetSock) {\n+            } else if (isSocket) {\n@@ -98,2 +90,0 @@\n-            } else if (isUnixSock) {\n-                msg += \" : \" + Events.assertField(event, \"path\").getValue();\n@@ -101,1 +91,1 @@\n-            if (isInetSock || isUnixSock || isFileReadOrWrite) {\n+            if (isSocket || isFileReadOrWrite) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/IOHelper.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -195,2 +195,1 @@\n-                TestSocketChannelEvents.main(new String[] {\"inet\"});\n-                TestSocketChannelEvents.main(new String[] {\"unix\"});\n+                TestSocketChannelEvents.main(noArgs);\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestInstrumentation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import java.net.SocketAddress;\n-import java.net.InetSocketAddress;\n-import java.net.UnixDomainSocketAddress;\n@@ -37,1 +34,0 @@\n-import java.nio.file.Files;\n@@ -48,2 +44,0 @@\n-import static java.net.StandardProtocolFamily.UNIX;\n-\n@@ -55,2 +49,1 @@\n- * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents inet\n- * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents unix\n+ * @run main\/othervm jdk.jfr.event.io.TestSocketChannelEvents\n@@ -68,47 +61,0 @@\n-    static ServerSocketChannel getListener(String arg) throws IOException {\n-        if (arg.equals(\"inet\")) {\n-            return ServerSocketChannel.open();\n-        } else if (arg.equals(\"unix\"))\n-            return ServerSocketChannel.open(UNIX);\n-        else\n-            throw new RuntimeException(\"invalid arg\");\n-    }\n-\n-    static IOEvent getReadEvent(int size, SocketChannel sc) throws IOException {\n-        SocketAddress addr = sc.getLocalAddress();\n-        if (addr instanceof InetSocketAddress) {\n-            return IOEvent.createSocketReadEvent(size, sc.socket());\n-        } else if (addr instanceof UnixDomainSocketAddress) {\n-            return IOEvent.createUnixSocketReadEvent(size, sc);\n-        } else\n-            throw new RuntimeException(\"unexpected channel type\");\n-    }\n-\n-    static IOEvent getWriteEvent(int size, SocketChannel sc) throws IOException {\n-        SocketAddress addr = sc.getLocalAddress();\n-        if (addr instanceof InetSocketAddress) {\n-            return IOEvent.createSocketWriteEvent(size, sc.socket());\n-        } else if (addr instanceof UnixDomainSocketAddress) {\n-            return IOEvent.createUnixSocketWriteEvent(size, sc);\n-        } else\n-            throw new RuntimeException(\"unexpected channel type\");\n-    }\n-\n-    static String getReadEventName(String mode) {\n-        if (mode.equals(\"inet\"))\n-            return IOEvent.EVENT_SOCKET_READ;\n-        else if (mode.equals(\"unix\"))\n-            return IOEvent.EVENT_UNIX_SOCKET_READ;\n-        else\n-            throw new RuntimeException();\n-    }\n-\n-    static String getWriteEventName(String mode) {\n-        if (mode.equals(\"inet\"))\n-            return IOEvent.EVENT_SOCKET_WRITE;\n-        else if (mode.equals(\"unix\"))\n-            return IOEvent.EVENT_UNIX_SOCKET_WRITE;\n-        else\n-            throw new RuntimeException();\n-    }\n-\n@@ -116,1 +62,1 @@\n-        new TestSocketChannelEvents().test(args[0]);\n+        new TestSocketChannelEvents().test();\n@@ -119,1 +65,1 @@\n-    public void test(String mode) throws Throwable {\n+    public void test() throws Throwable {\n@@ -121,4 +67,3 @@\n-            SocketAddress local = null;\n-            try (ServerSocketChannel ss = getListener(mode)) {\n-                recording.enable(getReadEventName(mode)).withThreshold(Duration.ofMillis(0));\n-                recording.enable(getWriteEventName(mode)).withThreshold(Duration.ofMillis(0));\n+            try (ServerSocketChannel ss = ServerSocketChannel.open()) {\n+                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));\n+                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));\n@@ -127,5 +72,2 @@\n-                ss.bind(null);\n-                local = ss.getLocalAddress();\n-                if (ss.getLocalAddress() instanceof InetSocketAddress) {\n-                    ss.socket().setReuseAddress(true);\n-                }\n+                ss.socket().setReuseAddress(true);\n+                ss.socket().bind(null);\n@@ -141,1 +83,1 @@\n-                            addExpectedEvent(getReadEvent(bufSizeA, sc));\n+                            addExpectedEvent(IOEvent.createSocketReadEvent(bufSizeA, sc.socket()));\n@@ -147,1 +89,1 @@\n-                            addExpectedEvent(getReadEvent(readSize, sc));\n+                            addExpectedEvent(IOEvent.createSocketReadEvent(readSize, sc.socket()));\n@@ -155,1 +97,1 @@\n-                            addExpectedEvent(getReadEvent(-1, sc));\n+                            addExpectedEvent(IOEvent.createSocketReadEvent(-1, sc.socket()));\n@@ -161,1 +103,1 @@\n-                try (SocketChannel sc = SocketChannel.open(ss.getLocalAddress())) {\n+                try (SocketChannel sc = SocketChannel.open(ss.socket().getLocalSocketAddress())) {\n@@ -174,1 +116,1 @@\n-                    addExpectedEvent(getWriteEvent(bufSizeA, sc));\n+                    addExpectedEvent(IOEvent.createSocketWriteEvent(bufSizeA, sc.socket()));\n@@ -180,1 +122,1 @@\n-                    addExpectedEvent(getWriteEvent(bytesWritten, sc));\n+                    addExpectedEvent(IOEvent.createSocketWriteEvent(bytesWritten, sc.socket()));\n@@ -187,5 +129,0 @@\n-            } finally {\n-                if (local instanceof UnixDomainSocketAddress) {\n-                    var ua = (UnixDomainSocketAddress)local;\n-                    Files.deleteIfExists(ua.getPath());\n-                }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSocketChannelEvents.java","additions":14,"deletions":77,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -190,2 +190,0 @@\n-    public static final String UnixSocketRead = PREFIX + \"UnixSocketRead\";\n-    public static final String UnixSocketWrite = PREFIX + \"UnixSocketWrite\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}