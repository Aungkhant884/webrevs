{"files":[{"patch":"@@ -47,1 +47,1 @@\n-     * Local (Unix domain) interprocess communication.\n+     * Unix domain (Local) interprocess communication.\n","filename":"src\/java.base\/share\/classes\/java\/net\/StandardProtocolFamily.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-            throw new IllegalArgumentException(); \/\/ fix message\n+            throw new IllegalArgumentException();\n@@ -133,1 +133,1 @@\n-            throw new IllegalArgumentException();  \/\/ fix message\n+            throw new IllegalArgumentException();\n@@ -148,0 +148,2 @@\n+     *\n+     * @throws NullPointerException if pathname is {@code null}\n@@ -163,0 +165,2 @@\n+     *\n+     * @throws NullPointerException if path is {@code null}\n@@ -192,1 +196,1 @@\n-        if (! (o instanceof UnixDomainSocketAddress))\n+        if (!(o instanceof UnixDomainSocketAddress))\n","filename":"src\/java.base\/share\/classes\/java\/net\/UnixDomainSocketAddress.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n- * using the {@link java.net.StandardProtocolFamily#UNIX UNIX} protocol family only.\n+ * using the {@link java.net.StandardProtocolFamily#UNIX UNIX} protocol family.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+        if (!enhancedExceptionText || addr == null) {\n+            return e;\n+        }\n@@ -67,3 +70,0 @@\n-        if (!enhancedExceptionText || addr == null) {\n-            return e;\n-        }\n@@ -83,3 +83,0 @@\n-        if (!enhancedExceptionText) {\n-            return e;\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/util\/SocketExceptions.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.net.ServerSocket;\n@@ -55,0 +56,3 @@\n+    \/\/ Our socket adaptor, if any\n+    private ServerSocket socket;\n+\n@@ -161,0 +165,7 @@\n+    @Override\n+    ServerSocket implSocket() {\n+        if (socket == null)\n+            socket = ServerSocketAdaptor.create(this);\n+        return socket;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/InetServerSocketChannelImpl.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.net.Socket;\n@@ -55,0 +56,3 @@\n+    \/\/ Socket adaptor, created on demand\n+    private Socket socket;\n+\n@@ -250,0 +254,7 @@\n+    @Override\n+    Socket implSocket() {\n+        if (socket == null)\n+            socket = SocketAdaptor.create(this);\n+        return socket;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/InetSocketChannelImpl.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -502,1 +502,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * An implementation of ServerSocketChannels\n+ * Base implementation of ServerSocketChannels\n@@ -82,3 +82,0 @@\n-    \/\/ Our socket adaptor, if any\n-    private ServerSocket socket;\n-\n@@ -110,3 +107,1 @@\n-            if (socket == null)\n-                socket = ServerSocketAdaptor.create((InetServerSocketChannelImpl)this);\n-            return socket;\n+            return implSocket();\n@@ -116,0 +111,5 @@\n+    \/\/ Override when supported\n+    ServerSocket implSocket() {\n+        throw new UnsupportedOperationException(\"socket not supported\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * An implementation of SocketChannels\n+ * Base implementation of SocketChannels\n@@ -106,3 +106,0 @@\n-    \/\/ Socket adaptor, created on demand\n-    private Socket socket;\n-\n@@ -181,3 +178,1 @@\n-            if (socket == null)\n-                socket = SocketAdaptor.create((InetSocketChannelImpl)this);\n-            return socket;\n+            return implSocket();\n@@ -187,0 +182,5 @@\n+    \/\/ Override when supported\n+    Socket implSocket() {\n+        throw new UnsupportedOperationException(\"socket not supported\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -93,9 +95,2 @@\n-    private static class DefaultOptionsHolder {\n-        static final Set<SocketOption<?>> defaultOptions = defaultOptions();\n-\n-        private static Set<SocketOption<?>> defaultOptions() {\n-            HashSet<SocketOption<?>> set = new HashSet<>();\n-            set.add(StandardSocketOptions.SO_RCVBUF);\n-            return Collections.unmodifiableSet(set);\n-        }\n-    }\n+    private static Set<SocketOption<?>> supportedOptions =\n+        Collections.unmodifiableSet(Set.of(StandardSocketOptions.SO_RCVBUF));\n@@ -105,1 +100,1 @@\n-        return DefaultOptionsHolder.defaultOptions;\n+        return supportedOptions;\n@@ -112,1 +107,1 @@\n-        UnixDomainSockets.checkCapability();\n+        UnixDomainSockets.checkPermission();\n@@ -114,2 +109,2 @@\n-        \/\/ Attempt up to 10 times to find an unused name in temp directory\n-        \/\/ Unlikely to fail\n+        \/\/ Attempt up to 10 times to find an unused name in temp directory.\n+        \/\/ If local address supplied then bind called only once\n@@ -134,1 +129,1 @@\n-            throw new IOException(\"could not bind to temporary name\");\n+            throw new BindException(\"Could not bind to temporary name\");\n@@ -151,1 +146,1 @@\n-     * Name is of the form <temp dir>\/niosocket_<pid>_<random>\n+     * Name is of the form <temp dir>\/socket_<random>\n@@ -154,0 +149,3 @@\n+        String dir = UnixDomainSockets.tempDir;\n+        if (dir == null)\n+            throw new BindException(\"Could not locate temporary directory for sockets\");\n@@ -155,3 +153,6 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(UnixDomainSockets.tempDir).append(\"\/niosocket_\").append(rnd);\n-        return UnixDomainSocketAddress.of(sb.toString());\n+        try {\n+            Path path = Path.of(dir, \"socket_\" + Integer.toString(rnd));\n+            return UnixDomainSocketAddress.of(path);\n+        } catch (InvalidPathException e) {\n+            throw new BindException(\"Invalid temporary directory\");\n+        }\n@@ -164,1 +165,1 @@\n-        UnixDomainSockets.checkCapability();\n+        UnixDomainSockets.checkPermission();\n@@ -190,1 +191,1 @@\n-            if (addr == null) { \/\/ TODO: ???\n+            if (addr == null) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainServerSocketChannelImpl.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-        UnixDomainSockets.checkCapability();\n+        UnixDomainSockets.checkPermission();\n@@ -155,1 +155,1 @@\n-        UnixDomainSockets.checkCapability();\n+        UnixDomainSockets.checkPermission();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    static void init() {}\n+    static final UnixDomainSocketAddress UNNAMED = UnixDomainSocketAddress.of(\"\");\n@@ -50,16 +50,1 @@\n-    static final UnixDomainSocketAddress UNNAMED\n-        = UnixDomainSocketAddress.of(\"\");;\n-\n-    private static final boolean supported =\n-        socketSupported();\n-\n-    static {\n-        PrivilegedAction<Void> pa = () -> {\n-            \/\/ -1 if unsupported or +ve integer otherwise. Prop set after Net initialization\n-            \/\/ Undocumented. Just use for testing\n-            System.setProperty(\"jdk.nio.channels.unixdomain.maxnamelength\",\n-                               Integer.toString(maxNameLen()));\n-            return null;\n-        };\n-        AccessController.doPrivileged(pa);\n-    }\n+    private static final boolean supported = socketSupported();\n@@ -69,1 +54,1 @@\n-    static void checkCapability() {\n+    static void checkPermission() {\n@@ -71,3 +56,2 @@\n-        if (sm == null)\n-            return;\n-        sm.checkPermission(np);\n+        if (sm != null)\n+            sm.checkPermission(np);\n@@ -78,1 +62,1 @@\n-            checkCapability();\n+            checkPermission();\n@@ -87,1 +71,1 @@\n-    public static UnixDomainSocketAddress localAddress(FileDescriptor fd) throws IOException {\n+    static UnixDomainSocketAddress localAddress(FileDescriptor fd) throws IOException {\n@@ -96,1 +80,1 @@\n-    public static UnixDomainSocketAddress remoteAddress(FileDescriptor fd) throws IOException {\n+    static UnixDomainSocketAddress remoteAddress(FileDescriptor fd) throws IOException {\n@@ -109,1 +93,1 @@\n-    public static UnixDomainSocketAddress checkAddress(SocketAddress sa) {\n+    static UnixDomainSocketAddress checkAddress(SocketAddress sa) {\n@@ -118,1 +102,1 @@\n-    public static boolean isSupported() {\n+    static boolean isSupported() {\n@@ -122,1 +106,1 @@\n-    public static int maxNameLen() {\n+    static int maxNameLen() {\n@@ -126,13 +110,1 @@\n-    public static boolean inTempDirectory(Path path) {\n-        Path parent = AccessController.doPrivileged(\n-            (PrivilegedAction<Path>) () -> {\n-                return path\n-                    .normalize()\n-                    .toAbsolutePath()\n-                    .getParent();\n-            }\n-        );\n-        return parent.equals(tempDir);\n-    }\n-\n-    static final Path tempDir = UnixDomainSocketsUtil.getTempDir();\n+    static final String tempDir = UnixDomainSocketsUtil.getTempDir();\n@@ -141,0 +113,2 @@\n+        if (path == null)\n+            return null;\n@@ -146,1 +120,1 @@\n-    public static FileDescriptor socket() throws IOException {\n+    static FileDescriptor socket() throws IOException {\n@@ -150,1 +124,1 @@\n-    public static void bind(FileDescriptor fd, Path addr) throws IOException {\n+    static void bind(FileDescriptor fd, Path addr) throws IOException {\n@@ -155,1 +129,1 @@\n-    public static int connect(FileDescriptor fd, Path addr) throws IOException {\n+    static int connect(FileDescriptor fd, Path addr) throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":17,"deletions":43,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -43,6 +43,0 @@\n-\/* 2 bytes to allow for null at end of string and null at start of string\n- * for abstract name\n- *\/\n-#define MAX_UNIX_DOMAIN_PATH_LEN \\\n-        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n-\n@@ -163,9 +157,0 @@\n-JNIEXPORT jbyteArray JNICALL\n-NET_SockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len);\n-\n-JNIEXPORT jint JNICALL\n-NET_UnixSocketAddressToSockaddr(JNIEnv *env,\n-                                jbyteArray uaddr,\n-                                struct sockaddr_un *sa,\n-                                int *len);\n-\n","filename":"src\/java.base\/share\/native\/libnet\/net_util.h","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.file.InvalidPathException;\n@@ -55,10 +54,5 @@\n-    static Path getTempDir() {\n-        PrivilegedAction<Path> action = () -> {\n-            try {\n-                String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n-                if (s != null && s.length() > 0) {\n-                    return Path.of(s);\n-                }\n-                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-            } catch (InvalidPathException ipe) {\n-                return null;\n+    static String getTempDir() {\n+        PrivilegedAction<String> action = () -> {\n+            String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+            if (s != null && s.length() > 0) {\n+                return s;\n@@ -66,0 +60,2 @@\n+\n+            return System.getProperty(\"java.io.tmpdir\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -563,2 +563,0 @@\n-        if (obj == null)\n-            return null;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-#include <sys\/types.h>\n-#include <sys\/un.h>\n@@ -74,1 +72,0 @@\n-    struct sockaddr_un  saun;\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"nio_util.h\"\n@@ -77,1 +78,1 @@\n-            remote_sa = NET_SockaddrToUnixAddressBytes(env, &sa, len);\n+            remote_sa = sockaddrToUnixAddressBytes(env, &sa, len);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/InheritedChannel.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-#include \"net_util.h\"\n-#include \"net_util_md.h\"\n@@ -61,2 +59,1 @@\n-JNIEXPORT jbyteArray JNICALL\n-NET_SockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n@@ -80,2 +77,1 @@\n-JNIEXPORT jint JNICALL\n-NET_UnixSocketAddressToSockaddr(JNIEnv *env, jbyteArray path, struct sockaddr_un *sa, int *len)\n+jint unixSocketAddressToSockaddr(JNIEnv *env, jbyteArray path, struct sockaddr_un *sa, int *len)\n@@ -133,1 +129,1 @@\n-    if (NET_UnixSocketAddressToSockaddr(env, path, &sa, &sa_len) != 0)\n+    if (unixSocketAddressToSockaddr(env, path, &sa, &sa_len) != 0)\n@@ -151,1 +147,1 @@\n-    if (NET_UnixSocketAddressToSockaddr(env, path, &sa, &sa_len) != 0) {\n+    if (unixSocketAddressToSockaddr(env, path, &sa, &sa_len) != 0) {\n@@ -200,1 +196,1 @@\n-    usa = NET_SockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    usa = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n@@ -211,2 +207,2 @@\n-    SOCKETADDRESS sa;\n-    socklen_t sa_len = sizeof(SOCKETADDRESS);\n+    struct sockaddr_un sa;\n+    socklen_t sa_len = sizeof(struct sockaddr_un);\n@@ -214,1 +210,1 @@\n-    if (getsockname(fdval(env, fdo), &sa.sa, &sa_len) < 0) {\n+    if (getsockname(fdval(env, fdo), (struct sockaddr *)&sa, &sa_len) < 0) {\n@@ -218,1 +214,1 @@\n-    return NET_SockaddrToUnixAddressBytes(env, &sa.saun, sa_len);\n+    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n@@ -224,1 +220,1 @@\n-    SOCKETADDRESS sa;\n+    struct sockaddr_un sa;\n@@ -227,1 +223,1 @@\n-    if (getpeername(fdval(env, fdo), &sa.sa, &sa_len) < 0) {\n+    if (getpeername(fdval(env, fdo), (struct sockaddr *)&sa, &sa_len) < 0) {\n@@ -231,1 +227,1 @@\n-    return NET_SockaddrToUnixAddressBytes(env, &sa.saun, sa_len);\n+    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDomainSockets.c","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <sys\/un.h>\n@@ -50,0 +51,6 @@\n+\/* 2 bytes to allow for null at end of string and null at start of string\n+ * for abstract name\n+ *\/\n+#define MAX_UNIX_DOMAIN_PATH_LEN \\\n+        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n+\n@@ -65,0 +72,12 @@\n+\n+\/* Defined in UnixDomainSockets.c *\/\n+\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env,\n+                                      struct sockaddr_un *sa,\n+                                      socklen_t len);\n+\n+jint unixSocketAddressToSockaddr(JNIEnv *env,\n+                                jbyteArray uaddr,\n+                                struct sockaddr_un *sa,\n+                                int *len);\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/nio_util.h","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-    private SourceChannel source;\n-    private SinkChannel sink;\n+    private SourceChannelImpl source;\n+    private SinkChannelImpl sink;\n@@ -154,4 +154,0 @@\n-                    if (sc2 instanceof InetSocketChannelImpl) {\n-                        var isc = (InetSocketChannelImpl)sc2;\n-                        isc.setOption(StandardSocketOptions.TCP_NODELAY, true);\n-                    }\n@@ -179,0 +175,7 @@\n+        this(sp, true);\n+    }\n+\n+    \/\/ if buffering is false and TCP sockets being used, then TCP_NODELAY\n+    \/\/ is set on the sink channel.\n+\n+    PipeImpl(final SelectorProvider sp, boolean buffering) throws IOException {\n@@ -181,0 +184,5 @@\n+            SocketChannel sc = sink.channel();\n+            if (!buffering && (sc instanceof InetSocketChannelImpl)) {\n+                var isc = (InetSocketChannelImpl)sc;\n+                isc.setOption(StandardSocketOptions.TCP_NODELAY, true);\n+            }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -67,0 +67,4 @@\n+    SocketChannel channel() {\n+        return sc;\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.nio.file.InvalidPathException;\n@@ -32,1 +31,0 @@\n-import java.nio.file.Path;\n@@ -55,17 +53,5 @@\n-    static Path getTempDir() {\n-        PrivilegedAction<Path> action = () -> {\n-            try {\n-                String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n-                if (s != null) {\n-                    return Path.of(s);\n-                }\n-                String temp = System.getenv(\"TEMP\");\n-                if (temp != null) {\n-                    Path p = Path.of(temp);\n-                    if (Files.exists(p)) {\n-                        return p;\n-                    }\n-                }\n-                return Path.of(System.getProperty(\"java.io.tmpdir\"));\n-            } catch (InvalidPathException ipe) {\n-                return null;\n+    static String getTempDir() {\n+        PrivilegedAction<String> action = () -> {\n+            String s = NetProperties.get(\"jdk.nio.unixdomain.tmpdir\");\n+            if (s != null) {\n+                return s;\n@@ -73,0 +59,6 @@\n+\n+            String temp = System.getenv(\"TEMP\");\n+            if (temp != null) {\n+                return temp;\n+            }\n+            return System.getProperty(\"java.io.tmpdir\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        wakeupPipe = new PipeImpl(sp);\n+        wakeupPipe = new PipeImpl(sp, false);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -629,2 +629,0 @@\n-        if (obj == null)\n-            return null;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include <afunix.h>\n","filename":"src\/java.base\/windows\/native\/libnet\/net_util_md.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-JNIEXPORT jbyteArray JNICALL\n-NET_SockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n@@ -55,2 +54,1 @@\n-JNIEXPORT jint JNICALL\n-NET_UnixSocketAddressToSockaddr(JNIEnv *env, jbyteArray addr, struct sockaddr_un *sa, int *len)\n+jint unixSocketAddressToSockaddr(JNIEnv *env, jbyteArray addr, struct sockaddr_un *sa, int *len)\n@@ -112,1 +110,1 @@\n- * Windows does not support auto bind. So, the windows version of NET_UnixSocketAddressToSockaddr\n+ * Windows does not support auto bind. So, the windows version of unixSocketAddressToSockaddr\n@@ -122,1 +120,1 @@\n-    if (NET_UnixSocketAddressToSockaddr(env, addr, &sa, &sa_len) != 0)\n+    if (unixSocketAddressToSockaddr(env, addr, &sa, &sa_len) != 0)\n@@ -141,1 +139,1 @@\n-    if (NET_UnixSocketAddressToSockaddr(env, addr, &sa, &sa_len) != 0) {\n+    if (unixSocketAddressToSockaddr(env, addr, &sa, &sa_len) != 0) {\n@@ -181,1 +179,1 @@\n-    usa = NET_SockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    usa = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n@@ -196,1 +194,1 @@\n-        NET_ThrowNew(env, WSAGetLastError(), \"getsockname\");\n+        JNU_ThrowIOExceptionWithLastError(env, \"getsockname\");\n@@ -199,1 +197,1 @@\n-    return NET_SockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n@@ -209,1 +207,1 @@\n-        NET_ThrowNew(env, WSAGetLastError(), \"getsockname\");\n+        JNU_ThrowIOExceptionWithLastError(env, \"getpeername\");\n@@ -212,1 +210,1 @@\n-    return NET_SockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/UnixDomainSockets.c","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include <ws2tcpip.h>\n+#include <afunix.h>\n@@ -38,0 +40,3 @@\n+#define MAX_UNIX_DOMAIN_PATH_LEN \\\n+        (int)(sizeof(((struct sockaddr_un *)0)->sun_path)-2)\n+\n@@ -77,0 +82,8 @@\n+\n+\/* Defined in UnixDomainSockets.c *\/\n+\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len);\n+\n+jint unixSocketAddressToSockaddr(JNIEnv *env, jbyteArray uaddr,\n+                                struct sockaddr_un *sa, int *len);\n+\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/nio_util.h","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-        SocketChannel chan = family == null ? SocketChannel.open()\n+        SocketChannel sc = family == null ? SocketChannel.open()\n@@ -343,1 +343,1 @@\n-        return chan;\n+        return sc;\n@@ -348,1 +348,1 @@\n-        ServerSocketChannel chan = family == null ? ServerSocketChannel.open()\n+        ServerSocketChannel ssc = family == null ? ServerSocketChannel.open()\n@@ -350,1 +350,1 @@\n-        return chan;\n+        return ssc;\n@@ -355,1 +355,1 @@\n-        DatagramChannel chan = family == null ? DatagramChannel.open()\n+        DatagramChannel dc = family == null ? DatagramChannel.open()\n@@ -357,1 +357,1 @@\n-        return chan;\n+        return dc;\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/ProtocolFamilies.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,4 +78,4 @@\n-            \/\/{ \"UnixSocketTest\", List.of(UnixSocketTest.class.getName())},\n-            \/\/{ \"StateTest\", List.of(StateTest.class.getName()) },\n-            \/\/{ \"EchoTest\",  List.of(EchoTest.class.getName())  },\n-            \/\/{ \"CloseTest\", List.of(CloseTest.class.getName()) },\n+            { \"UnixSocketTest\", List.of(UnixSocketTest.class.getName())},\n+            { \"StateTest\", List.of(StateTest.class.getName()) },\n+            { \"EchoTest\",  List.of(EchoTest.class.getName())  },\n+            { \"CloseTest\", List.of(CloseTest.class.getName()) },\n@@ -88,1 +88,0 @@\n-\/*\n@@ -100,1 +99,0 @@\n-*\/\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/InheritedChannelTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/Launcher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        \/\/ bind and connect to name of max size\n+        \/\/ bind and connect to name of close to max size\n@@ -277,2 +277,1 @@\n-            int len = Integer.parseInt(System.getProperty(\"jdk.nio.channels.unixdomain.maxnamelength\"));\n-            System.out.printf(\"jdk.nio.channels.unixdomain.maxnamelength = %d\\n\", len);\n+            int len = 100;\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Bind.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,4 +48,3 @@\n-        try {SocketChannel.open(UNIX); }\n-           catch (IOException | UnsupportedOperationException e) {}\n-        int namelen = Integer.parseInt(System.getProperty(\"jdk.nio.channels.unixdomain.maxnamelength\"));\n-        if (namelen == -1) {\n+        try {\n+            SocketChannel.open(UNIX);\n+        } catch (IOException | UnsupportedOperationException e) {\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/IOExchanges.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    volatile int namelen;\n+    final int namelen = 100;    \/\/ length close to max\n@@ -53,3 +53,1 @@\n-        catch (IOException | UnsupportedOperationException e) {}\n-        namelen = Integer.parseInt(System.getProperty(\"jdk.nio.channels.unixdomain.maxnamelength\"));\n-        if (namelen == -1) {\n+        catch (IOException | UnsupportedOperationException e) {\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/LengthTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,5 +77,2 @@\n-       }\n-       catch (UnsupportedOperationException e) {}\n-\n-        int namelen = Integer.parseInt(System.getProperty(\"jdk.nio.channels.unixdomain.maxnamelength\"));\n-        if (namelen == -1) {\n+        }\n+        catch (UnsupportedOperationException e) {\n@@ -85,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -268,4 +268,0 @@\n-        return getFD1(sc, sc.getClass());\n-    }\n-\n-    private static FileDescriptor getFD1(SocketChannel sc, Class<?> clazz) {\n@@ -273,0 +269,1 @@\n+            Class<?> clazz = Class.forName(\"sun.nio.ch.SocketChannelImpl\");\n@@ -276,6 +273,0 @@\n-        } catch (NoSuchFieldException e1) {\n-            Class<?> superclass = clazz.getSuperclass();\n-            if (superclass == null)\n-                throw new Error(e1);\n-            else\n-                return getFD1(sc, superclass);\n","filename":"test\/jdk\/jdk\/nio\/Basic.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}