{"files":[{"patch":"@@ -99,1 +99,5 @@\n-        return !option.name().startsWith(\"TCP_\") && !isUnixDomainOption(option);\n+        if (option.name().startsWith(\"TCP_\") || isUnixDomainOption(option)) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.channels.SocketChannel;\n@@ -39,0 +38,1 @@\n+import java.nio.file.spi.FileSystemProvider;\n@@ -42,1 +42,0 @@\n-\n@@ -52,1 +51,8 @@\n-    private static final NetPermission np = new NetPermission(\"accessUnixDomainSocket\");\n+    private static final String tempDir = UnixDomainSocketsUtil.getTempDir();\n+\n+    private static final NetPermission accessUnixDomainSocket =\n+            new NetPermission(\"accessUnixDomainSocket\");\n+\n+    static boolean isSupported() {\n+        return supported;\n+    }\n@@ -57,1 +63,1 @@\n-            sm.checkPermission(np);\n+            sm.checkPermission(accessUnixDomainSocket);\n@@ -73,3 +79,2 @@\n-        byte[] bytes = localAddress0(fd);\n-        return UnixDomainSocketAddress.of(\n-                    new String(bytes, UnixDomainSocketsUtil.getCharset()));\n+        String path = new String(localAddress0(fd), UnixDomainSocketsUtil.getCharset());\n+        return UnixDomainSocketAddress.of(path);\n@@ -78,11 +83,1 @@\n-    static native byte[] localAddress0(FileDescriptor fd)\n-        throws IOException;\n-\n-    static UnixDomainSocketAddress remoteAddress(FileDescriptor fd) throws IOException {\n-        byte[] bytes = remoteAddress0(fd);\n-        return UnixDomainSocketAddress.of(new String(bytes,\n-                    UnixDomainSocketsUtil.getCharset()));\n-    }\n-\n-    static native byte[] remoteAddress0(FileDescriptor fd)\n-        throws IOException;\n+    private static native byte[] localAddress0(FileDescriptor fd) throws IOException;\n@@ -102,16 +97,3 @@\n-    static boolean isSupported() {\n-        return supported;\n-    }\n-\n-    static int maxNameLen() {\n-        return supported ? maxNameLen0() : -1;\n-    }\n-\n-    static final String tempDir = UnixDomainSocketsUtil.getTempDir();\n-\n-    static byte[] getPathBytes(Path path) throws IOException {\n-        if (path == null)\n-            return null;\n-        AbstractFileSystemProvider provider = (AbstractFileSystemProvider)\n-            FileSystems.getDefault().provider();\n-        return provider.getSunPathForSocketFile(path);\n+    static byte[] getPathBytes(Path path) {\n+        FileSystemProvider provider = FileSystems.getDefault().provider();\n+        return ((AbstractFileSystemProvider) provider).getSunPathForSocketFile(path);\n@@ -149,1 +131,1 @@\n-            Path path = Path.of(dir, \"socket_\" + Integer.toString(rnd));\n+            Path path = Path.of(dir, \"socket_\" + rnd);\n@@ -160,3 +142,2 @@\n-    static int connect(FileDescriptor fd, Path addr) throws IOException {\n-        byte[] path = getPathBytes(addr);\n-        return connect0(fd, path);\n+    static int connect(FileDescriptor fd, Path path) throws IOException {\n+        return connect0(fd, getPathBytes(path));\n@@ -165,1 +146,1 @@\n-    static int accept(FileDescriptor fd, FileDescriptor newfd, String[] isaa)\n+    static int accept(FileDescriptor fd, FileDescriptor newfd, String[] paths)\n@@ -168,5 +149,7 @@\n-        Object[] barray  = new Object[1];\n-        int ret = accept0(fd, newfd, barray);\n-        byte[] bytes = (byte[])barray[0];\n-        isaa[0] = bytes == null ? null : new String(bytes, UnixDomainSocketsUtil.getCharset());\n-        return ret;\n+        Object[] array  = new Object[1];\n+        int n = accept0(fd, newfd, array);\n+        if (n > 0) {\n+            byte[] bytes = (byte[]) array[0];\n+            paths[0] = new String(bytes, UnixDomainSocketsUtil.getCharset());\n+        }\n+        return n;\n@@ -175,2 +158,0 @@\n-    private static native int socket0();\n-\n@@ -179,0 +160,2 @@\n+    private static native int socket0() throws IOException;\n+\n@@ -185,1 +168,1 @@\n-    static native int accept0(FileDescriptor fd, FileDescriptor newfd, Object[] isaa)\n+    private static native int accept0(FileDescriptor fd, FileDescriptor newfd, Object[] array)\n@@ -188,2 +171,0 @@\n-    static native int maxNameLen0();\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/UnixDomainSockets.java","additions":30,"deletions":49,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-import java.nio.channels.SocketChannel;\n-import java.nio.channels.ServerSocketChannel;\n-import java.nio.channels.DatagramChannel;\n@@ -84,1 +81,1 @@\n-    static ProtocolFamily family(SocketAddress sa) {\n+    static ProtocolFamily protocolFamily(SocketAddress sa) {\n@@ -87,0 +84,3 @@\n+        } else {\n+            InetSocketAddress isa = (InetSocketAddress) sa;\n+            return (isa.getAddress() instanceof Inet6Address) ? INET6 : INET;\n@@ -88,2 +88,9 @@\n-        InetSocketAddress isa = (InetSocketAddress)sa;\n-        return (isa.getAddress() instanceof Inet6Address) ? INET6 : INET;\n+    }\n+\n+    static ProtocolFamily protocolFamily(int family) {\n+        return switch (family) {\n+            case AF_INET -> INET;\n+            case AF_INET6 -> INET6;\n+            case AF_UNIX -> UNIX;\n+            default -> throw new IllegalArgumentException();\n+        };\n@@ -104,1 +111,1 @@\n-            super(sp, family(remote), fd, remote);\n+            super(sp, protocolFamily(remote), fd, remote);\n@@ -115,1 +122,3 @@\n-        InheritedServerSocketChannelImpl(SelectorProvider sp, ProtocolFamily family, FileDescriptor fd)\n+        InheritedServerSocketChannelImpl(SelectorProvider sp,\n+                                         ProtocolFamily family,\n+                                         FileDescriptor fd)\n@@ -128,2 +137,1 @@\n-    public static class InheritedDatagramChannelImpl extends\n-        DatagramChannelImpl {\n+    public static class InheritedDatagramChannelImpl extends DatagramChannelImpl {\n@@ -148,1 +156,1 @@\n-    private static void checkAccess(Channel c) {\n+    private static void checkAccess() {\n@@ -151,3 +159,1 @@\n-            sm.checkPermission(\n-                new RuntimePermission(\"inheritedChannel\")\n-            );\n+            sm.checkPermission(new RuntimePermission(\"inheritedChannel\"));\n@@ -157,9 +163,0 @@\n-    static ProtocolFamily protocolFamily(int family) {\n-        return switch (family) {\n-            case AF_INET -> INET;\n-            case AF_INET6 -> INET6;\n-            case AF_UNIX -> UNIX;\n-            default -> throw new IllegalArgumentException();\n-        };\n-    }\n-\n@@ -260,1 +257,1 @@\n-            checkAccess(channel);\n+            checkAccess();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/InheritedChannel.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n-\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len)\n+{\n@@ -82,1 +82,1 @@\n-        return 1;\n+        return -1;\n@@ -87,1 +87,1 @@\n-        ret = 1;\n+        ret = -1;\n@@ -97,6 +97,0 @@\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_UnixDomainSockets_maxNameLen0(JNIEnv *env, jclass cl)\n-{\n-    return MAX_UNIX_DOMAIN_PATH_LEN;\n-}\n-\n@@ -129,2 +123,0 @@\n-    int fd = fdval(env, fdo);\n-\n@@ -162,1 +154,1 @@\n-                                          jobjectArray usaa)\n+                                          jobjectArray array)\n@@ -168,13 +160,1 @@\n-    jstring usa;\n-\n-    \/* accept connection but ignore ECONNABORTED *\/\n-    for (;;) {\n-        newfd = accept(fd, (struct sockaddr *)&sa, &sa_len);\n-        if (newfd >= 0) {\n-            break;\n-        }\n-        if (errno != ECONNABORTED) {\n-            break;\n-        }\n-        \/* ECONNABORTED => restart accept *\/\n-    }\n+    jbyteArray address;\n@@ -182,0 +162,1 @@\n+    newfd = accept(fd, (struct sockaddr *)&sa, &sa_len);\n@@ -193,2 +174,2 @@\n-    usa = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n-    CHECK_NULL_RETURN(usa, IOS_THROWN);\n+    address = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    CHECK_NULL_RETURN(address, IOS_THROWN);\n@@ -196,1 +177,1 @@\n-    (*env)->SetObjectArrayElement(env, usaa, 0, usa);\n+    (*env)->SetObjectArrayElement(env, array, 0, address);\n@@ -214,12 +195,0 @@\n-JNIEXPORT jbyteArray JNICALL\n-Java_sun_nio_ch_UnixDomainSockets_remoteAddress0(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    struct sockaddr_un sa;\n-    socklen_t sa_len = sizeof(sa);\n-\n-    if (getpeername(fdval(env, fdo), (struct sockaddr *)&sa, &sa_len) < 0) {\n-        handleSocketError(env, errno);\n-        return NULL;\n-    }\n-    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n-}\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDomainSockets.c","additions":11,"deletions":42,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len) {\n-\n+jbyteArray sockaddrToUnixAddressBytes(JNIEnv *env, struct sockaddr_un *sa, socklen_t len)\n+{\n@@ -71,1 +71,1 @@\n-        return 1;\n+        return -1;\n@@ -77,1 +77,1 @@\n-        ret=1;\n+        ret = -1;\n@@ -87,1 +87,0 @@\n-\n@@ -91,2 +90,2 @@\n-    SOCKET fd = socket(PF_UNIX, SOCK_STREAM, 0);\n-    if (fd == INVALID_SOCKET) {\n+    SOCKET s = socket(PF_UNIX, SOCK_STREAM, 0);\n+    if (s == INVALID_SOCKET) {\n@@ -95,1 +94,1 @@\n-    closesocket(fd);\n+    closesocket(s);\n@@ -99,6 +98,0 @@\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_UnixDomainSockets_maxNameLen0(JNIEnv *env, jclass cl)\n-{\n-    return MAX_UNIX_DOMAIN_PATH_LEN - 1;\n-}\n-\n@@ -108,2 +101,2 @@\n-    SOCKET fd = socket(PF_UNIX, SOCK_STREAM, 0);\n-    if (fd == INVALID_SOCKET) {\n+    SOCKET s = socket(PF_UNIX, SOCK_STREAM, 0);\n+    if (s == INVALID_SOCKET) {\n@@ -112,1 +105,2 @@\n-    return (int)fd;\n+    SetHandleInformation((HANDLE)s, HANDLE_FLAG_INHERIT, 0);\n+    return (int)s;\n@@ -129,2 +123,0 @@\n-    int fd = fdval(env, fdo);\n-\n@@ -132,1 +124,1 @@\n-    if (rv != 0) {\n+    if (rv == SOCKET_ERROR) {\n@@ -163,1 +155,1 @@\n-                           jobjectArray usaa)\n+                                          jobjectArray array)\n@@ -169,1 +161,1 @@\n-    jobject usa;\n+    jbyteArray address;\n@@ -185,4 +177,3 @@\n-    usa = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n-    CHECK_NULL_RETURN(usa, IOS_THROWN);\n-\n-    (*env)->SetObjectArrayElement(env, usaa, 0, usa);\n+    address = sockaddrToUnixAddressBytes(env, &sa, sa_len);\n+    CHECK_NULL_RETURN(address, IOS_THROWN);\n+    (*env)->SetObjectArrayElement(env, array, 0, address);\n@@ -206,12 +197,0 @@\n-JNIEXPORT jbyteArray JNICALL\n-Java_sun_nio_ch_UnixDomainSockets_remoteAddress0(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    struct sockaddr_un sa;\n-    int sa_len = sizeof(sa);\n-\n-    if (getpeername(fdval(env, fdo), (struct sockaddr *)&sa, &sa_len) == SOCKET_ERROR) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"getpeername\");\n-        return NULL;\n-    }\n-    return sockaddrToUnixAddressBytes(env, &sa, sa_len);\n-}\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/UnixDomainSockets.c","additions":18,"deletions":39,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            SocketChannel.open(StandardProtocolFamily.UNIX);\n+            SocketChannel.open(StandardProtocolFamily.UNIX).close();\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Bind.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-            SocketChannel.open(StandardProtocolFamily.UNIX);\n+            SocketChannel.open(StandardProtocolFamily.UNIX).close();\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/NonBlockingAccept.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            SocketChannel.open(StandardProtocolFamily.UNIX);\n+            SocketChannel.open(StandardProtocolFamily.UNIX).close();\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Shutdown.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-            SocketChannel.open(StandardProtocolFamily.UNIX);\n+            SocketChannel.open(StandardProtocolFamily.UNIX).close();\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/SocketOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}