{"files":[{"patch":"@@ -37,0 +37,2 @@\n+#include <string.h>\n+#include <sys\/procfs.h>\n@@ -127,0 +129,61 @@\n+#ifdef AIX\n+    void set_error_if_shared(JNIEnv* env, prmap_t* map_entry)\n+    {\n+        if (map_entry->pr_mflags & MA_SHARED) {\n+            \/\/ MA_SHARED => MAP_SHARED => !MAP_PRIVATE. This error is valid and should be thrown.\n+            JNU_ThrowIOExceptionWithMessageAndLastError(env, \"msync with parameter MS_SYNC failed\");\n+            return;\n+        } else {\n+            \/\/ O.W. MAP_PRIVATE or no flag was specified and EINVAL is the expected behaviour.\n+            return;\n+        }\n+    }\n+\n+    void check_proc_map_array(JNIEnv* env, FILE* proc_file, prmap_t* map_entry, void* end_address)\n+    {\n+        while (!feof(proc_file)) {\n+            memset(map_entry, '\\0', sizeof(prmap_t));\n+            fread((char*)map_entry, sizeof(prmap_t), 1, proc_file);\n+            if (ferror(proc_file)) {\n+                JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                            \"msync with parameter MS_SYNC failed (could not read \/proc\/<pid>\/map)\");\n+                return;\n+            } else if (map_entry->pr_vaddr <= end_address && end_address <= map_entry->pr_vaddr + map_entry->pr_size) {\n+                set_error_if_shared(env, map_entry);\n+                return;\n+            }\n+        }\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                                        \"msync with parameter MS_SYNC failed (end_address not found)\");\n+    }\n+\n+    \/\/ '\/proc\/' + <pid> + '\/map' + '\\0'\n+    #define PFNAME_LEN 32\n+    void check_aix_einval(JNIEnv* env, void* end_address)\n+    {\n+        \/\/ If EINVAL is set for a mmap address on AIX, additional validation is required.\n+        \/\/ AIX will set EINVAL when msync is called on a mmap address that didn't receive MAP_SHARED\n+        \/\/ as a flag (since MAP_PRIVATE is the default).\n+        \/\/ https:\/\/www.ibm.com\/docs\/en\/aix\/7.2?topic=m-msync-subroutine\n+\n+        FILE* proc_file;\n+        {\n+            char* fname = (char*) malloc(sizeof(char) * PFNAME_LEN);\n+            pid_t the_pid = getpid();\n+            jio_snprintf(fname, PFNAME_LEN, \"\/proc\/%d\/map\", the_pid);\n+            proc_file = fopen(fname, \"r\");\n+            free(fname);\n+        }\n+        if (!proc_file) {\n+            JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                            \"msync with parameter MS_SYNC failed (could not open \/proc\/<pid>\/map)\");\n+            return;\n+        }\n+        {\n+            prmap_t* map_entry = (prmap_t*) malloc(sizeof(prmap_t));\n+            check_proc_map_array(env, proc_file, map_entry, end_address);\n+            free(map_entry);\n+        }\n+        fclose(proc_file);\n+    }\n+#endif \/\/ AIX\n@@ -135,0 +198,8 @@\n+        #ifdef AIX\n+            void* end_address = (void*)jlong_to_ptr(address + len);\n+            size_t pagesize = (size_t)sysconf(_SC_PAGESIZE);\n+            if (errno == EINVAL) {\n+                check_aix_einval(env, end_address);\n+                return;\n+            }\n+        #endif\n","filename":"src\/java.base\/unix\/native\/libnio\/MappedMemoryUtils.c","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"}]}