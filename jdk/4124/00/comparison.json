{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -691,1 +691,14 @@\n-                    return nextElement;\n+                    T t = nextElement;\n+                    nextElement = null;\n+                    return t;\n+                }\n+            }\n+\n+            @Override\n+            public void forEachRemaining(Consumer<? super T> action) {\n+                Objects.requireNonNull(action);\n+                if (valueReady) {\n+                    valueReady = false;\n+                    T t = nextElement;\n+                    nextElement = null;\n+                    action.accept(t);\n@@ -693,0 +706,1 @@\n+                spliterator.forEachRemaining(action);\n@@ -739,0 +753,10 @@\n+\n+            @Override\n+            public void forEachRemaining(IntConsumer action) {\n+                Objects.requireNonNull(action);\n+                if (valueReady) {\n+                    valueReady = false;\n+                    action.accept(nextElement);\n+                }\n+                spliterator.forEachRemaining(action);\n+            }\n@@ -784,0 +808,10 @@\n+\n+            @Override\n+            public void forEachRemaining(LongConsumer action) {\n+                Objects.requireNonNull(action);\n+                if (valueReady) {\n+                    valueReady = false;\n+                    action.accept(nextElement);\n+                }\n+                spliterator.forEachRemaining(action);\n+            }\n@@ -829,0 +863,10 @@\n+\n+            @Override\n+            public void forEachRemaining(DoubleConsumer action) {\n+                Objects.requireNonNull(action);\n+                if (valueReady) {\n+                    valueReady = false;\n+                    action.accept(nextElement);\n+                }\n+                spliterator.forEachRemaining(action);\n+            }\n@@ -1846,1 +1890,1 @@\n-        private PrimitiveIterator.OfInt it;\n+        private final PrimitiveIterator.OfInt it;\n@@ -1940,1 +1984,1 @@\n-        private PrimitiveIterator.OfLong it;\n+        private final PrimitiveIterator.OfLong it;\n@@ -2034,1 +2078,1 @@\n-        private PrimitiveIterator.OfDouble it;\n+        private final PrimitiveIterator.OfDouble it;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Spliterators.java","additions":49,"deletions":5,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Spliterator.iterator traversing tests\n+ * @library \/lib\/testlibrary\/bootlib\n+ * @run testng IteratorFromSpliteratorTest\n+ * @bug 8267452\n+ *\/\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.PrimitiveIterator;\n+import java.util.Spliterators;\n+import java.util.function.DoubleConsumer;\n+import java.util.function.IntConsumer;\n+import java.util.function.LongConsumer;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class IteratorFromSpliteratorTest {\n+  @Test\n+  public void testIteratorFromSpliterator() {\n+    List<Integer> input = List.of(1, 2, 3, 4, 5);\n+    for (int i = 0; i < input.size(); i++) {\n+      Iterator<Integer> iterator = Spliterators.iterator(input.spliterator());\n+      List<Integer> result = new ArrayList<>();\n+      int j = i;\n+      while (j++ < input.size() && iterator.hasNext()) {\n+        result.add(iterator.next());\n+      }\n+      assertEquals(iterator.hasNext(), result.size() < input.size());\n+      iterator.forEachRemaining(result::add);\n+      iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+      assertFalse(iterator.hasNext());\n+      assertThrows(NoSuchElementException.class, iterator::next);\n+      iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+      assertEquals(result, input);\n+    }\n+  }\n+\n+  @Test\n+  public void testIteratorFromSpliteratorInt() {\n+    int[] input = {1, 2, 3, 4, 5};\n+    for (int i = 0; i < input.length; i++) {\n+      PrimitiveIterator.OfInt iterator = Spliterators.iterator(Arrays.spliterator(input));\n+      List<Integer> result = new ArrayList<>();\n+      int j = i;\n+      while (j++ < input.length && iterator.hasNext()) {\n+        result.add(iterator.nextInt());\n+      }\n+      assertEquals(iterator.hasNext(), result.size() < input.length);\n+      iterator.forEachRemaining((IntConsumer) result::add);\n+      iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n+      assertFalse(iterator.hasNext());\n+      assertThrows(NoSuchElementException.class, iterator::next);\n+      iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n+      assertEquals(result.stream().mapToInt(x -> x).toArray(), input);\n+    }\n+  }\n+\n+  @Test\n+  public void testIteratorFromSpliteratorLong() {\n+    long[] input = {1, 2, 3, 4, 5};\n+    for (int i = 0; i < input.length; i++) {\n+      PrimitiveIterator.OfLong iterator = Spliterators.iterator(Arrays.spliterator(input));\n+      List<Long> result = new ArrayList<>();\n+      int j = i;\n+      while (j++ < input.length && iterator.hasNext()) {\n+        result.add(iterator.nextLong());\n+      }\n+      assertEquals(iterator.hasNext(), result.size() < input.length);\n+      iterator.forEachRemaining((LongConsumer) result::add);\n+      iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n+      assertFalse(iterator.hasNext());\n+      assertThrows(NoSuchElementException.class, iterator::next);\n+      iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n+      assertEquals(result.stream().mapToLong(x -> x).toArray(), input);\n+    }\n+  }\n+\n+  @Test\n+  public void testIteratorFromSpliteratorDouble() {\n+    double[] input = {1, 2, 3, 4, 5};\n+    for (int i = 0; i < input.length; i++) {\n+      PrimitiveIterator.OfDouble iterator = Spliterators.iterator(Arrays.spliterator(input));\n+      List<Double> result = new ArrayList<>();\n+      int j = i;\n+      while (j++ < input.length && iterator.hasNext()) {\n+        result.add(iterator.nextDouble());\n+      }\n+      assertEquals(iterator.hasNext(), result.size() < input.length);\n+      iterator.forEachRemaining((DoubleConsumer) result::add);\n+      iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n+      assertFalse(iterator.hasNext());\n+      assertThrows(NoSuchElementException.class, iterator::next);\n+      iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n+      assertEquals(result.stream().mapToDouble(x -> x).toArray(), input);\n+    }\n+  }\n+}\n","filename":"test\/jdk\/java\/util\/Spliterator\/IteratorFromSpliteratorTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}