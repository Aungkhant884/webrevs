{"files":[{"patch":"@@ -24,7 +24,0 @@\n-\/**\n- * @test\n- * @summary Spliterator.iterator traversing tests\n- * @library \/lib\/testlibrary\/bootlib\n- * @run testng IteratorFromSpliteratorTest\n- * @bug 8267452\n- *\/\n@@ -49,0 +42,7 @@\n+\/**\n+ * @test\n+ * @summary Spliterator.iterator traversing tests\n+ * @library \/lib\/testlibrary\/bootlib\n+ * @run testng IteratorFromSpliteratorTest\n+ * @bug 8267452\n+ *\/\n@@ -50,17 +50,38 @@\n-  @Test\n-  public void testIteratorFromSpliterator() {\n-    List<Integer> input = List.of(1, 2, 3, 4, 5);\n-    for (int i = 0; i < input.size(); i++) {\n-      Iterator<Integer> iterator = Spliterators.iterator(input.spliterator());\n-      List<Integer> result = new ArrayList<>();\n-      int j = i;\n-      while (j++ < input.size() && iterator.hasNext()) {\n-        result.add(iterator.next());\n-      }\n-      assertEquals(iterator.hasNext(), result.size() < input.size());\n-      iterator.forEachRemaining(result::add);\n-      iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n-      assertFalse(iterator.hasNext());\n-      assertThrows(NoSuchElementException.class, iterator::next);\n-      iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n-      assertEquals(result, input);\n+    @Test\n+    public void testIteratorFromSpliterator() {\n+        List<Integer> input = List.of(1, 2, 3, 4, 5);\n+        for (int i = 0; i < input.size(); i++) {\n+            Iterator<Integer> iterator = Spliterators.iterator(input.spliterator());\n+            List<Integer> result = new ArrayList<>();\n+            int j = i;\n+            while (j++ < input.size() && iterator.hasNext()) {\n+                result.add(iterator.next());\n+            }\n+            assertEquals(iterator.hasNext(), result.size() < input.size());\n+            iterator.forEachRemaining(result::add);\n+            iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+            assertFalse(iterator.hasNext());\n+            assertThrows(NoSuchElementException.class, iterator::next);\n+            iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+            assertEquals(result, input);\n+        }\n+    }\n+\n+    @Test\n+    public void testIteratorFromSpliteratorInt() {\n+        int[] input = {1, 2, 3, 4, 5};\n+        for (int i = 0; i < input.length; i++) {\n+            PrimitiveIterator.OfInt iterator = Spliterators.iterator(Arrays.spliterator(input));\n+            List<Integer> result = new ArrayList<>();\n+            int j = i;\n+            while (j++ < input.length && iterator.hasNext()) {\n+                result.add(iterator.nextInt());\n+            }\n+            assertEquals(iterator.hasNext(), result.size() < input.length);\n+            iterator.forEachRemaining((IntConsumer) result::add);\n+            iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n+            assertFalse(iterator.hasNext());\n+            assertThrows(NoSuchElementException.class, iterator::next);\n+            iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n+            assertEquals(result.stream().mapToInt(x -> x).toArray(), input);\n+        }\n@@ -68,1 +89,0 @@\n-  }\n@@ -70,17 +90,18 @@\n-  @Test\n-  public void testIteratorFromSpliteratorInt() {\n-    int[] input = {1, 2, 3, 4, 5};\n-    for (int i = 0; i < input.length; i++) {\n-      PrimitiveIterator.OfInt iterator = Spliterators.iterator(Arrays.spliterator(input));\n-      List<Integer> result = new ArrayList<>();\n-      int j = i;\n-      while (j++ < input.length && iterator.hasNext()) {\n-        result.add(iterator.nextInt());\n-      }\n-      assertEquals(iterator.hasNext(), result.size() < input.length);\n-      iterator.forEachRemaining((IntConsumer) result::add);\n-      iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n-      assertFalse(iterator.hasNext());\n-      assertThrows(NoSuchElementException.class, iterator::next);\n-      iterator.forEachRemaining((IntConsumer) (x -> fail(\"Should not be called\")));\n-      assertEquals(result.stream().mapToInt(x -> x).toArray(), input);\n+    @Test\n+    public void testIteratorFromSpliteratorLong() {\n+        long[] input = {1, 2, 3, 4, 5};\n+        for (int i = 0; i < input.length; i++) {\n+            PrimitiveIterator.OfLong iterator = Spliterators.iterator(Arrays.spliterator(input));\n+            List<Long> result = new ArrayList<>();\n+            int j = i;\n+            while (j++ < input.length && iterator.hasNext()) {\n+                result.add(iterator.nextLong());\n+            }\n+            assertEquals(iterator.hasNext(), result.size() < input.length);\n+            iterator.forEachRemaining((LongConsumer) result::add);\n+            iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n+            assertFalse(iterator.hasNext());\n+            assertThrows(NoSuchElementException.class, iterator::next);\n+            iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n+            assertEquals(result.stream().mapToLong(x -> x).toArray(), input);\n+        }\n@@ -88,1 +109,0 @@\n-  }\n@@ -90,17 +110,18 @@\n-  @Test\n-  public void testIteratorFromSpliteratorLong() {\n-    long[] input = {1, 2, 3, 4, 5};\n-    for (int i = 0; i < input.length; i++) {\n-      PrimitiveIterator.OfLong iterator = Spliterators.iterator(Arrays.spliterator(input));\n-      List<Long> result = new ArrayList<>();\n-      int j = i;\n-      while (j++ < input.length && iterator.hasNext()) {\n-        result.add(iterator.nextLong());\n-      }\n-      assertEquals(iterator.hasNext(), result.size() < input.length);\n-      iterator.forEachRemaining((LongConsumer) result::add);\n-      iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n-      assertFalse(iterator.hasNext());\n-      assertThrows(NoSuchElementException.class, iterator::next);\n-      iterator.forEachRemaining((LongConsumer) (x -> fail(\"Should not be called\")));\n-      assertEquals(result.stream().mapToLong(x -> x).toArray(), input);\n+    @Test\n+    public void testIteratorFromSpliteratorDouble() {\n+        double[] input = {1, 2, 3, 4, 5};\n+        for (int i = 0; i < input.length; i++) {\n+            PrimitiveIterator.OfDouble iterator = Spliterators.iterator(Arrays.spliterator(input));\n+            List<Double> result = new ArrayList<>();\n+            int j = i;\n+            while (j++ < input.length && iterator.hasNext()) {\n+                result.add(iterator.nextDouble());\n+            }\n+            assertEquals(iterator.hasNext(), result.size() < input.length);\n+            iterator.forEachRemaining((DoubleConsumer) result::add);\n+            iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n+            assertFalse(iterator.hasNext());\n+            assertThrows(NoSuchElementException.class, iterator::next);\n+            iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n+            assertEquals(result.stream().mapToDouble(x -> x).toArray(), input);\n+        }\n@@ -108,1 +129,0 @@\n-  }\n@@ -110,17 +130,14 @@\n-  @Test\n-  public void testIteratorFromSpliteratorDouble() {\n-    double[] input = {1, 2, 3, 4, 5};\n-    for (int i = 0; i < input.length; i++) {\n-      PrimitiveIterator.OfDouble iterator = Spliterators.iterator(Arrays.spliterator(input));\n-      List<Double> result = new ArrayList<>();\n-      int j = i;\n-      while (j++ < input.length && iterator.hasNext()) {\n-        result.add(iterator.nextDouble());\n-      }\n-      assertEquals(iterator.hasNext(), result.size() < input.length);\n-      iterator.forEachRemaining((DoubleConsumer) result::add);\n-      iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n-      assertFalse(iterator.hasNext());\n-      assertThrows(NoSuchElementException.class, iterator::next);\n-      iterator.forEachRemaining((DoubleConsumer) (x -> fail(\"Should not be called\")));\n-      assertEquals(result.stream().mapToDouble(x -> x).toArray(), input);\n+    @Test\n+    public void testIteratorFromSpliteratorEmpty() {\n+        Iterator<?>[] iterators = {\n+            Spliterators.iterator(Spliterators.emptySpliterator()),\n+            Spliterators.iterator(Spliterators.emptyIntSpliterator()),\n+            Spliterators.iterator(Spliterators.emptyLongSpliterator()),\n+            Spliterators.iterator(Spliterators.emptyDoubleSpliterator())\n+        };\n+        for (Iterator<?> iterator : iterators) {\n+            iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+            assertFalse(iterator.hasNext());\n+            iterator.forEachRemaining(x -> fail(\"Should not be called\"));\n+            assertThrows(NoSuchElementException.class, iterator::next);\n+        }\n@@ -128,1 +145,0 @@\n-  }\n","filename":"test\/jdk\/java\/util\/Spliterator\/IteratorFromSpliteratorTest.java","additions":95,"deletions":79,"binary":false,"changes":174,"status":"modified"}]}