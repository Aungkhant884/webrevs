{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4413752\n+ * @bug 4413752 8262881\n@@ -65,5 +65,0 @@\n-    public static final int THR_MAIN      = 0;     \/\/ ID for main thread\n-    public static final int THR_BLOCKER   = 1;     \/\/ ID for blocker thread\n-    public static final int THR_CONTENDER = 2;     \/\/ ID for contender thread\n-    public static final int THR_RESUMER   = 3;     \/\/ ID for resumer thread\n-\n@@ -85,1 +80,0 @@\n-    public volatile static int testState;\n@@ -87,0 +81,2 @@\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n@@ -90,4 +86,2 @@\n-    native static int GetResult();\n-    native static void SetPrintDebug();\n-    native static void SuspendThread(int id, SuspendWithObjectMonitorEnterWorker thr);\n-    native static void Wait4ContendedEnter(int id, SuspendWithObjectMonitorEnterWorker thr);\n+    native static int suspendThread(SuspendWithObjectMonitorEnterWorker thr);\n+    native static int wait4ContendedEnter(SuspendWithObjectMonitorEnterWorker thr);\n@@ -105,1 +99,33 @@\n-        System.exit(run(args, System.out) + exit_delta);\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n@@ -118,2 +144,2 @@\n-    public static int run(String[] args, PrintStream out) {\n-        return (new SuspendWithObjectMonitorEnter()).doWork(args, out);\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithObjectMonitorEnter()).doWork(timeMax, out);\n@@ -130,27 +156,1 @@\n-    public int doWork(String[] args, PrintStream out) {\n-        int time_max = 0;\n-        if (args.length == 0) {\n-            time_max = DEF_TIME_MAX;\n-        } else {\n-            int arg_index = 0;\n-            int args_left = args.length;\n-            if (args[0].equals(\"-p\")) {\n-                SetPrintDebug();\n-                arg_index = 1;\n-                args_left--;\n-            }\n-            if (args_left == 0) {\n-                time_max = DEF_TIME_MAX;\n-            } else if (args_left == 1) {\n-                try {\n-                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n-                } catch (NumberFormatException nfe) {\n-                    System.err.println(\"'\" + args[arg_index] +\n-                                       \"': invalid time_max value.\");\n-                    usage();\n-                }\n-            } else {\n-                usage();\n-            }\n-        }\n-\n+    public int doWork(int timeMax, PrintStream out) {\n@@ -161,1 +161,1 @@\n-        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n@@ -164,1 +164,1 @@\n-        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n@@ -208,1 +208,7 @@\n-            Wait4ContendedEnter(THR_MAIN, contender);\n+            logDebug(\"before contended enter wait\");\n+            int retCode = wait4ContendedEnter(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI GetThreadState: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"done contended enter wait\");\n@@ -212,1 +218,7 @@\n-            SuspendThread(THR_MAIN, contender);\n+            logDebug(\"before suspend thread\");\n+            retCode = suspendThread(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI SuspendThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"suspended thread\");\n@@ -260,1 +272,1 @@\n-        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n@@ -263,1 +275,1 @@\n-        return GetResult();\n+        return 0;\n@@ -279,2 +291,1 @@\n-    native static int GetPrintDebug();\n-    native static void ResumeThread(int id, SuspendWithObjectMonitorEnterWorker thr);\n+    native static int resumeThread(SuspendWithObjectMonitorEnterWorker thr);\n@@ -283,3 +294,1 @@\n-        if (GetPrintDebug() != 0) {\n-            System.err.println(getName() + \" thread running\");\n-        }\n+        SuspendWithObjectMonitorEnter.logDebug(\"thread running\");\n@@ -295,3 +304,1 @@\n-            if (GetPrintDebug() != 0) {\n-                System.err.println(getName() + \": before enter threadLock\");\n-            }\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n@@ -299,3 +306,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": enter threadLock\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n@@ -311,3 +316,1 @@\n-                    if (GetPrintDebug() != 0) {\n-                        System.err.println(getName() + \" thread waiting\");\n-                    }\n+                    SuspendWithObjectMonitorEnter.logDebug(\"thread waiting\");\n@@ -326,3 +329,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": exit threadLock\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n@@ -344,3 +345,1 @@\n-            if (GetPrintDebug() != 0) {\n-                System.err.println(getName() + \": before enter threadLock\");\n-            }\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n@@ -348,3 +347,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": enter threadLock\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n@@ -355,3 +352,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": exit threadLock\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n@@ -374,3 +369,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \" thread waiting\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"thread waiting\");\n@@ -386,3 +379,1 @@\n-            if (GetPrintDebug() != 0) {\n-                System.err.println(getName() + \": before enter threadLock\");\n-            }\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n@@ -390,3 +381,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": enter threadLock\");\n-                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n@@ -398,4 +387,5 @@\n-                ResumeThread(SuspendWithObjectMonitorEnter.THR_RESUMER, target);\n-\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": exit threadLock\");\n+                SuspendWithObjectMonitorEnter.logDebug(\"before resume thread\");\n+                int retCode = resumeThread(target);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                               \"retCode=\" + retCode);\n@@ -403,0 +393,3 @@\n+                SuspendWithObjectMonitorEnter.logDebug(\"resumed thread\");\n+\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorEnter\/SuspendWithObjectMonitorEnter.java","additions":79,"deletions":86,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-static jint iGlobalStatus = 0;\n@@ -31,3 +30,0 @@\n-static jint printdebug = 0;\n-static jrawMonitorID threadLock = NULL;\n-static char threadLockName[] = \"threadLock\";\n@@ -42,25 +38,0 @@\n-static void\n-check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n-    iGlobalStatus = 2;\n-    jni->FatalError(msg);\n-  }\n-}\n-\n-static void print_debug(jint id, const char* mesg) {\n-  const char *thr;\n-\n-  switch (id) {\n-  \/\/ These id values need to match SuspendWithObjectMonitorEnter.java:\n-  case 0:  thr = \"main\";      break;\n-  case 1:  thr = \"blocker\";   break;\n-  case 2:  thr = \"contender\"; break;\n-  case 3:  thr = \"resumer\";   break;\n-  default: thr = \"unknown\";   break;\n-  }\n-\n-  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n-}\n-#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n-\n@@ -68,15 +39,2 @@\n-Java_SuspendWithObjectMonitorEnter_GetResult(JNIEnv *env, jclass cls) {\n-  return iGlobalStatus;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorEnter_SetPrintDebug(JNIEnv *env, jclass cls) {\n-  printdebug = 1;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorEnter_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before suspend thread\\n\");\n-  jvmtiError err = jvmti->SuspendThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnter_SuspendThread: error in JVMTI SuspendThread\");\n-  DEBUG_MESG(id, \"suspended thread\\n\");\n+Java_SuspendWithObjectMonitorEnter_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n@@ -85,2 +43,3 @@\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorEnter_Wait4ContendedEnter(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnter_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n+  jvmtiError err;\n@@ -88,1 +47,0 @@\n-  DEBUG_MESG(id, \"before contended enter wait\\n\");\n@@ -90,2 +48,4 @@\n-    jvmtiError err = jvmti->GetThreadState(thr, &thread_state);\n-    check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnter_Wait4ContendedEnter: error in JVMTI GetThreadState\");\n+    err = jvmti->GetThreadState(thr, &thread_state);\n+    if (err != JVMTI_ERROR_NONE) {\n+      return err;\n+    }\n@@ -93,1 +53,1 @@\n-  DEBUG_MESG(id, \"done contended enter wait\\n\");\n+  return err;\n@@ -97,10 +57,2 @@\n-Java_SuspendWithObjectMonitorEnterWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n-  return printdebug;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorEnterWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before resume thread\\n\");\n-  jvmtiError err = jvmti->ResumeThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnterWorker_ResumeThread: error in JVMTI ResumeThread\");\n-  DEBUG_MESG(id, \"resumed thread\\n\");\n+Java_SuspendWithObjectMonitorEnterWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorEnter\/libSuspendWithObjectMonitorEnter.cpp","additions":12,"deletions":60,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4413752\n+ * @bug 4413752 8262881\n@@ -67,4 +67,0 @@\n-    public static final int THR_MAIN      = 0;     \/\/ ID for main thread\n-    public static final int THR_RESUMER   = 1;     \/\/ ID for resumer thread\n-    public static final int THR_WAITER    = 2;     \/\/ ID for waiter thread\n-\n@@ -84,1 +80,0 @@\n-    public volatile static int testState;\n@@ -86,0 +81,2 @@\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n@@ -89,4 +86,2 @@\n-    native static int GetResult();\n-    native static void SetPrintDebug();\n-    native static void SuspendThread(int id, SuspendWithObjectMonitorWaitWorker thr);\n-    native static void Wait4ContendedEnter(int id, SuspendWithObjectMonitorWaitWorker thr);\n+    native static int suspendThread(SuspendWithObjectMonitorWaitWorker thr);\n+    native static int wait4ContendedEnter(SuspendWithObjectMonitorWaitWorker thr);\n@@ -104,1 +99,33 @@\n-        System.exit(run(args, System.out) + exit_delta);\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n@@ -117,2 +144,2 @@\n-    public static int run(String[] args, PrintStream out) {\n-        return (new SuspendWithObjectMonitorWait()).doWork(args, out);\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithObjectMonitorWait()).doWork(timeMax, out);\n@@ -129,27 +156,1 @@\n-    public int doWork(String[] args, PrintStream out) {\n-        int time_max = 0;\n-        if (args.length == 0) {\n-            time_max = DEF_TIME_MAX;\n-        } else {\n-            int arg_index = 0;\n-            int args_left = args.length;\n-            if (args[0].equals(\"-p\")) {\n-                SetPrintDebug();\n-                arg_index = 1;\n-                args_left--;\n-            }\n-            if (args_left == 0) {\n-                time_max = DEF_TIME_MAX;\n-            } else if (args_left == 1) {\n-                try {\n-                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n-                } catch (NumberFormatException nfe) {\n-                    System.err.println(\"'\" + args[arg_index] +\n-                                       \"': invalid time_max value.\");\n-                    usage();\n-                }\n-            } else {\n-                usage();\n-            }\n-        }\n-\n+    public int doWork(int timeMax, PrintStream out) {\n@@ -159,1 +160,1 @@\n-        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n@@ -162,1 +163,1 @@\n-        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n@@ -204,1 +205,7 @@\n-                Wait4ContendedEnter(THR_MAIN, waiter);\n+                logDebug(\"before contended enter wait\");\n+                int retCode = wait4ContendedEnter(waiter);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI GetThreadState: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                logDebug(\"done contended enter wait\");\n@@ -208,1 +215,7 @@\n-                SuspendThread(THR_MAIN, waiter);\n+                logDebug(\"before suspend thread\");\n+                retCode = suspendThread(waiter);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI SuspendThread: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                logDebug(\"suspended thread\");\n@@ -250,1 +263,1 @@\n-        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n@@ -253,1 +266,1 @@\n-        return GetResult();\n+        return 0;\n@@ -269,2 +282,1 @@\n-    native static int GetPrintDebug();\n-    native static void ResumeThread(int id, SuspendWithObjectMonitorWaitWorker thr);\n+    native static int resumeThread(SuspendWithObjectMonitorWaitWorker thr);\n@@ -273,3 +285,1 @@\n-        if (GetPrintDebug() != 0) {\n-            System.err.println(getName() + \" thread running\");\n-        }\n+        SuspendWithObjectMonitorWait.logDebug(\"thread running\");\n@@ -285,3 +295,1 @@\n-            if (GetPrintDebug() != 0) {\n-                System.err.println(getName() + \": before enter threadLock\");\n-            }\n+            SuspendWithObjectMonitorWait.logDebug(\"before enter threadLock\");\n@@ -289,3 +297,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": enter threadLock\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"enter threadLock\");\n@@ -301,3 +307,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \" before wait\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"before wait\");\n@@ -315,3 +319,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": after wait\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"after wait\");\n@@ -322,3 +324,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": exit threadLock\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"exit threadLock\");\n@@ -341,3 +341,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \" thread waiting\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"thread waiting\");\n@@ -353,3 +351,1 @@\n-            if (GetPrintDebug() != 0) {\n-                System.err.println(getName() + \": before enter threadLock\");\n-            }\n+            SuspendWithObjectMonitorWait.logDebug(\"before enter threadLock\");\n@@ -357,3 +353,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": enter threadLock\");\n-                }\n+                SuspendWithObjectMonitorWait.logDebug(\"enter threadLock\");\n@@ -365,4 +359,5 @@\n-                ResumeThread(SuspendWithObjectMonitorWait.THR_RESUMER, target);\n-\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \": exit threadLock\");\n+                SuspendWithObjectMonitorWait.logDebug(\"before resume thread\");\n+                int retCode = resumeThread(target);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                               \"retCode=\" + retCode);\n@@ -370,0 +365,3 @@\n+                SuspendWithObjectMonitorWait.logDebug(\"resumed thread\");\n+\n+                SuspendWithObjectMonitorWait.logDebug(\"exit threadLock\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorWait\/SuspendWithObjectMonitorWait.java","additions":77,"deletions":79,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-static jint iGlobalStatus = 0;\n@@ -31,3 +30,0 @@\n-static jint printdebug = 0;\n-static jrawMonitorID threadLock = NULL;\n-static char threadLockName[] = \"threadLock\";\n@@ -42,22 +38,3 @@\n-static void\n-check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n-    iGlobalStatus = 2;\n-    jni->FatalError(msg);\n-  }\n-}\n-\n-static void print_debug(jint id, const char* mesg) {\n-  const char *thr;\n-\n-  switch (id) {\n-  \/\/ These id values need to match SuspendWithObjectMonitorWait.java:\n-  case 0:  thr = \"main\";      break;\n-  case 1:  thr = \"blocker\";   break;\n-  case 2:  thr = \"contender\"; break;\n-  case 3:  thr = \"resumer\";   break;\n-  default: thr = \"unknown\";   break;\n-  }\n-\n-  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n+JNIEXPORT int JNICALL\n+Java_SuspendWithObjectMonitorWait_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n@@ -65,1 +42,0 @@\n-#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n@@ -68,15 +44,2 @@\n-Java_SuspendWithObjectMonitorWait_GetResult(JNIEnv *env, jclass cls) {\n-  return iGlobalStatus;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorWait_SetPrintDebug(JNIEnv *env, jclass cls) {\n-  printdebug = 1;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorWait_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before suspend thread\\n\");\n-  jvmtiError err = jvmti->SuspendThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWait_SuspendThread: error in JVMTI SuspendThread\");\n-  DEBUG_MESG(id, \"suspended thread\\n\");\n+Java_SuspendWithObjectMonitorWaitWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n@@ -86,14 +49,2 @@\n-Java_SuspendWithObjectMonitorWaitWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n-  return printdebug;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorWaitWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before resume thread\\n\");\n-  jvmtiError err = jvmti->ResumeThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWaitWorker_ResumeThread: error in JVMTI ResumeThread\");\n-  DEBUG_MESG(id, \"resumed thread\\n\");\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithObjectMonitorWait_Wait4ContendedEnter(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+Java_SuspendWithObjectMonitorWait_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n+  jvmtiError err;\n@@ -101,1 +52,0 @@\n-  DEBUG_MESG(id, \"before contended enter wait\\n\");\n@@ -103,2 +53,4 @@\n-    jvmtiError err = jvmti->GetThreadState(thr, &thread_state);\n-    check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWait_Wait4ContendedEnter: error in JVMTI GetThreadState\");\n+    err = jvmti->GetThreadState(thr, &thread_state);\n+    if (err != JVMTI_ERROR_NONE) {\n+      return err;\n+    }\n@@ -106,1 +58,1 @@\n-  DEBUG_MESG(id, \"done contended enter wait\\n\");\n+  return err;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorWait\/libSuspendWithObjectMonitorWait.cpp","additions":12,"deletions":60,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -65,5 +65,0 @@\n-    public static final int THR_MAIN      = 0;     \/\/ ID for main thread\n-    public static final int THR_BLOCKER   = 1;     \/\/ ID for blocker thread\n-    public static final int THR_CONTENDER = 2;     \/\/ ID for contender thread\n-    public static final int THR_RESUMER   = 3;     \/\/ ID for resumer thread\n-\n@@ -84,1 +79,0 @@\n-    public volatile static int testState;\n@@ -86,0 +80,2 @@\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n@@ -89,5 +85,3 @@\n-    native static void CreateRawMonitor(int id);\n-    native static void DestroyRawMonitor(int id);\n-    native static int GetResult();\n-    native static void SetPrintDebug();\n-    native static void SuspendThread(int id, SuspendWithRawMonitorEnterWorker thr);\n+    native static int createRawMonitor();\n+    native static int destroyRawMonitor();\n+    native static int suspendThread(SuspendWithRawMonitorEnterWorker thr);\n@@ -105,1 +99,33 @@\n-        System.exit(run(args, System.out) + exit_delta);\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n@@ -118,2 +144,2 @@\n-    public static int run(String[] args, PrintStream out) {\n-        return (new SuspendWithRawMonitorEnter()).doWork(args, out);\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithRawMonitorEnter()).doWork(timeMax, out);\n@@ -130,27 +156,1 @@\n-    public int doWork(String[] args, PrintStream out) {\n-        int time_max = 0;\n-        if (args.length == 0) {\n-            time_max = DEF_TIME_MAX;\n-        } else {\n-            int arg_index = 0;\n-            int args_left = args.length;\n-            if (args[0].equals(\"-p\")) {\n-                SetPrintDebug();\n-                arg_index = 1;\n-                args_left--;\n-            }\n-            if (args_left == 0) {\n-                time_max = DEF_TIME_MAX;\n-            } else if (args_left == 1) {\n-                try {\n-                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n-                } catch (NumberFormatException nfe) {\n-                    System.err.println(\"'\" + args[arg_index] +\n-                                       \"': invalid time_max value.\");\n-                    usage();\n-                }\n-            } else {\n-                usage();\n-            }\n-        }\n-\n+    public int doWork(int timeMax, PrintStream out) {\n@@ -161,1 +161,6 @@\n-        CreateRawMonitor(THR_MAIN);\n+        int retCode = createRawMonitor();\n+        if (retCode != 0) {\n+            throw new RuntimeException(\"error in JVMTI CreateRawMonitor: \" +\n+                                       \"retCode=\" + retCode);\n+        }\n+        logDebug(\"created threadLock\");\n@@ -163,1 +168,1 @@\n-        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n@@ -166,1 +171,1 @@\n-        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n@@ -226,1 +231,7 @@\n-            SuspendThread(THR_MAIN, contender);\n+            logDebug(\"before suspend thread\");\n+            retCode = suspendThread(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI SuspendThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"suspended thread\");\n@@ -273,1 +284,6 @@\n-        DestroyRawMonitor(THR_MAIN);\n+        retCode = destroyRawMonitor();\n+        if (retCode != 0) {\n+            throw new RuntimeException(\"error in JVMTI DestroyRawMonitor: \" +\n+                                       \"retCode=\" + retCode);\n+        }\n+        logDebug(\"destroyed threadLock\");\n@@ -275,1 +291,1 @@\n-        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n@@ -278,1 +294,1 @@\n-        return GetResult();\n+        return 0;\n@@ -294,4 +310,3 @@\n-    native static int GetPrintDebug();\n-    native static void RawMonitorEnter(int id);\n-    native static void RawMonitorExit(int id);\n-    native static void ResumeThread(int id, SuspendWithRawMonitorEnterWorker thr);\n+    native static int rawMonitorEnter();\n+    native static int rawMonitorExit();\n+    native static int resumeThread(SuspendWithRawMonitorEnterWorker thr);\n@@ -300,3 +315,1 @@\n-        if (GetPrintDebug() != 0) {\n-            System.err.println(getName() + \" thread running\");\n-        }\n+        SuspendWithRawMonitorEnter.logDebug(\"thread running\");\n@@ -310,0 +323,1 @@\n+        int retCode;\n@@ -312,1 +326,7 @@\n-            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n@@ -317,2 +337,15 @@\n-            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_BLOCKER);\n-            RawMonitorExit(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before recursive enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"recursive enter threadLock\");\n+\n+            SuspendWithRawMonitorEnter.logDebug(\"before recursive exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"recursive exit threadLock\");\n@@ -326,3 +359,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \" thread waiting\");\n-                }\n+                SuspendWithRawMonitorEnter.logDebug(\"thread waiting\");\n@@ -340,1 +371,7 @@\n-                RawMonitorExit(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+                SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+                retCode = rawMonitorExit();\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI RawMonitorExit: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n@@ -356,1 +393,7 @@\n-            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_CONTENDER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n@@ -361,1 +404,7 @@\n-            RawMonitorExit(SuspendWithRawMonitorEnter.THR_CONTENDER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n@@ -377,3 +426,1 @@\n-                if (GetPrintDebug() != 0) {\n-                    System.err.println(getName() + \" thread waiting\");\n-                }\n+                SuspendWithRawMonitorEnter.logDebug(\"thread waiting\");\n@@ -388,1 +435,7 @@\n-            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_RESUMER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n@@ -394,1 +447,7 @@\n-            ResumeThread(SuspendWithRawMonitorEnter.THR_RESUMER, target);\n+            SuspendWithRawMonitorEnter.logDebug(\"before resume thread\");\n+            retCode = resumeThread(target);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"resumed thread\");\n@@ -396,1 +455,7 @@\n-            RawMonitorExit(SuspendWithRawMonitorEnter.THR_RESUMER);\n+            SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithRawMonitorEnter\/SuspendWithRawMonitorEnter.java","additions":135,"deletions":70,"binary":false,"changes":205,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-static jint iGlobalStatus = 0;\n@@ -31,1 +30,0 @@\n-static jint printdebug = 0;\n@@ -42,39 +40,0 @@\n-static void\n-check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n-    iGlobalStatus = 2;\n-    jni->FatalError(msg);\n-  }\n-}\n-\n-static void print_debug(jint id, const char* mesg) {\n-  const char *thr;\n-\n-  switch (id) {\n-  \/\/ These id values need to match SuspendWithRawMonitorEnter.java:\n-  case 0:  thr = \"main\";      break;\n-  case 1:  thr = \"blocker\";   break;\n-  case 2:  thr = \"contender\"; break;\n-  case 3:  thr = \"resumer\";   break;\n-  default: thr = \"unknown\";   break;\n-  }\n-\n-  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n-}\n-#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnter_CreateRawMonitor(JNIEnv *jni, jclass cls, jint id) {\n-  jvmtiError err = jvmti->CreateRawMonitor(threadLockName, &threadLock);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_CreateRawMonitor: error in JVMTI CreateRawMonitor\");\n-  DEBUG_MESG(id, \"created threadLock\\n\");\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnter_DestroyRawMonitor(JNIEnv *jni, jclass cls, jint id) {\n-  jvmtiError err = jvmti->DestroyRawMonitor(threadLock);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_DestroyRawMonitor: error in JVMTI DestroyRawMonitor\");\n-  DEBUG_MESG(id, \"destroyed threadLock\\n\");\n-}\n-\n@@ -82,7 +41,2 @@\n-Java_SuspendWithRawMonitorEnter_GetResult(JNIEnv *env, jclass cls) {\n-  return iGlobalStatus;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnter_SetPrintDebug(JNIEnv *env, jclass cls) {\n-  printdebug = 1;\n+Java_SuspendWithRawMonitorEnter_createRawMonitor(JNIEnv *jni, jclass cls) {\n+  return jvmti->CreateRawMonitor(threadLockName, &threadLock);\n@@ -91,6 +45,3 @@\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnter_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before suspend thread\\n\");\n-  jvmtiError err = jvmti->SuspendThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_SuspendThread: error in JVMTI SuspendThread\");\n-  DEBUG_MESG(id, \"suspended thread\\n\");\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnter_destroyRawMonitor(JNIEnv *jni, jclass cls) {\n+  return jvmti->DestroyRawMonitor(threadLock);\n@@ -100,2 +51,2 @@\n-Java_SuspendWithRawMonitorEnterWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n-  return printdebug;\n+Java_SuspendWithRawMonitorEnter_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n@@ -104,6 +55,3 @@\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnterWorker_RawMonitorEnter(JNIEnv *jni, jclass cls, jint id) {\n-  DEBUG_MESG(id, \"before enter threadLock\\n\");\n-  jvmtiError err = jvmti->RawMonitorEnter(threadLock);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_RawMonitorEnter: error in JVMTI RawMonitorEnter\");\n-  DEBUG_MESG(id, \"enter threadLock\\n\");\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_rawMonitorEnter(JNIEnv *jni, jclass cls) {\n+  return jvmti->RawMonitorEnter(threadLock);\n@@ -112,6 +60,3 @@\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnterWorker_RawMonitorExit(JNIEnv *jni, jclass cls, jint id) {\n-  DEBUG_MESG(id, \"before exit threadLock\\n\");\n-  jvmtiError err = jvmti->RawMonitorExit(threadLock);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_RawMonitorExit: error in JVMTI RawMonitorExit\");\n-  DEBUG_MESG(id, \"exit threadLock\\n\");\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_rawMonitorExit(JNIEnv *jni, jclass cls) {\n+  return jvmti->RawMonitorExit(threadLock);\n@@ -120,6 +65,3 @@\n-JNIEXPORT void JNICALL\n-Java_SuspendWithRawMonitorEnterWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n-  DEBUG_MESG(id, \"before resume thread\\n\");\n-  jvmtiError err = jvmti->ResumeThread(thr);\n-  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_ResumeThread: error in JVMTI ResumeThread\");\n-  DEBUG_MESG(id, \"resumed thread\\n\");\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithRawMonitorEnter\/libSuspendWithRawMonitorEnter.cpp","additions":16,"deletions":74,"binary":false,"changes":90,"status":"modified"}]}