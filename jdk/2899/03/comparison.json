{"files":[{"patch":"@@ -0,0 +1,399 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4413752 8262881\n+ * @summary Test SuspendThread with ObjectMonitor enter.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @compile SuspendWithObjectMonitorEnter.java\n+ * @run main\/othervm\/native -agentlib:SuspendWithObjectMonitorEnter SuspendWithObjectMonitorEnter\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+\/\/\n+\/\/ main               blocker           contender            resumer\n+\/\/ =================  ================  ===================  ================\n+\/\/ launch blocker\n+\/\/ <launch returns>   blocker running\n+\/\/ launch contender   enter threadLock\n+\/\/ <launch returns>   wait for notify   contender running\n+\/\/ launch resumer     :                 block on threadLock\n+\/\/ <launch returns>   :                 :                    resumer running\n+\/\/ suspend contender  :                 <suspended>          wait for notify\n+\/\/ <ready to test>    :                 :                    :\n+\/\/ :                  :                 :                    :\n+\/\/ notify blocker     wait finishes     :                    :\n+\/\/ notify resumer     exit threadLock   :                    wait finishes\n+\/\/ join blocker       :                 :                    enter threadLock\n+\/\/ <join returns>     blocker exits     <resumed>            resume contender\n+\/\/ join resumer                         :                    exit threadLock\n+\/\/ <join returns>                       enter threadLock     resumer exits\n+\/\/ join contender                       exit threadLock\n+\/\/ <join returns>                       contender exits\n+\/\/\n+\n+public class SuspendWithObjectMonitorEnter {\n+    private static final String AGENT_LIB = \"SuspendWithObjectMonitorEnter\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    \/\/ default max # secs to test\n+    private static final int JOIN_MAX     = 30;    \/\/ max # secs to wait for join\n+\n+    public static final int TS_INIT              = 1;  \/\/ initial testState\n+    public static final int TS_BLOCKER_RUNNING   = 2;  \/\/ blocker is running\n+    public static final int TS_CONTENDER_RUNNING = 3;  \/\/ contender is running\n+    public static final int TS_RESUMER_RUNNING   = 4;  \/\/ resumer is running\n+    public static final int TS_CALL_SUSPEND      = 5;  \/\/ call suspend on contender\n+    public static final int TS_DONE_BLOCKING     = 6;  \/\/ done blocking threadLock\n+    public static final int TS_READY_TO_RESUME   = 7;  \/\/ ready to resume contender\n+    public static final int TS_CALL_RESUME       = 8;  \/\/ call resume on contender\n+    public static final int TS_CONTENDER_DONE    = 9;  \/\/ contender has run; done\n+\n+    public static Object barrierLaunch = new Object();   \/\/ controls thread launch\n+    public static Object barrierBlocker = new Object();  \/\/ controls blocker\n+    public static Object barrierResumer = new Object();  \/\/ controls resumer\n+    public static Object threadLock = new Object();      \/\/ testing object\n+\n+    public static long count = 0;\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int suspendThread(SuspendWithObjectMonitorEnterWorker thr);\n+    native static int wait4ContendedEnter(SuspendWithObjectMonitorEnterWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithObjectMonitorEnter()).doWork(timeMax, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(int timeMax, PrintStream out) {\n+        SuspendWithObjectMonitorEnterWorker blocker;    \/\/ blocker thread\n+        SuspendWithObjectMonitorEnterWorker contender;  \/\/ contender thread\n+        SuspendWithObjectMonitorEnterWorker resumer;    \/\/ resumer thread\n+\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n+            count++;\n+            testState = TS_INIT;  \/\/ starting the test loop\n+\n+            \/\/ launch the blocker thread\n+            synchronized (barrierLaunch) {\n+                blocker = new SuspendWithObjectMonitorEnterWorker(\"blocker\");\n+                blocker.start();\n+\n+                while (testState != TS_BLOCKER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the contender thread\n+            synchronized (barrierLaunch) {\n+                contender = new SuspendWithObjectMonitorEnterWorker(\"contender\");\n+                contender.start();\n+\n+                while (testState != TS_CONTENDER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithObjectMonitorEnterWorker(\"resumer\", contender);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ wait for the contender thread to block\n+            logDebug(\"before contended enter wait\");\n+            int retCode = wait4ContendedEnter(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI GetThreadState: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"done contended enter wait\");\n+\n+            checkTestState(TS_RESUMER_RUNNING);\n+            testState = TS_CALL_SUSPEND;\n+            logDebug(\"before suspend thread\");\n+            retCode = suspendThread(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI SuspendThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"suspended thread\");\n+\n+            \/\/\n+            \/\/ At this point, all of the child threads are running\n+            \/\/ and we can get to meat of the test:\n+            \/\/\n+            \/\/ - suspended threadLock contender\n+            \/\/ - a threadLock exit in the blocker thread\n+            \/\/ - a threadLock enter in the resumer thread\n+            \/\/ - resumption of the contender thread\n+            \/\/ - a threadLock enter in the freshly resumed contender thread\n+            \/\/\n+            synchronized (barrierBlocker) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                \/\/ tell blocker thread to exit threadLock\n+                testState = TS_DONE_BLOCKING;\n+                barrierBlocker.notify();\n+            }\n+\n+            synchronized (barrierResumer) {\n+                \/\/ tell resumer thread to resume contender thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                \/\/ Can't call checkTestState() here because the\n+                \/\/ resumer thread may have already resumed the\n+                \/\/ contender thread.\n+            }\n+\n+            try {\n+                blocker.join();\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                contender.join(JOIN_MAX * 1000);\n+                if (contender.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"contender thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_CONTENDER_DONE);\n+        }\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n+                           \" seconds.\");\n+\n+        return 0;\n+    }\n+}\n+\n+class SuspendWithObjectMonitorEnterWorker extends Thread {\n+    private SuspendWithObjectMonitorEnterWorker target;  \/\/ target for resume operation\n+\n+    public SuspendWithObjectMonitorEnterWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithObjectMonitorEnterWorker(String name, SuspendWithObjectMonitorEnterWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int resumeThread(SuspendWithObjectMonitorEnterWorker thr);\n+\n+    public void run() {\n+        SuspendWithObjectMonitorEnter.logDebug(\"thread running\");\n+\n+        \/\/\n+        \/\/ Launch the blocker thread:\n+        \/\/ - grabs threadLock\n+        \/\/ - holds threadLock until we tell it let go\n+        \/\/ - releases threadLock\n+        \/\/\n+        if (getName().equals(\"blocker\")) {\n+            \/\/ grab threadLock before we tell main we are running\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_INIT);\n+\n+                synchronized(SuspendWithObjectMonitorEnter.barrierBlocker) {\n+                    synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                        \/\/ tell main we are running\n+                        SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_BLOCKER_RUNNING;\n+                        SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+                    }\n+                    SuspendWithObjectMonitorEnter.logDebug(\"thread waiting\");\n+                    \/\/ TS_READY_TO_RESUME is set right after TS_DONE_BLOCKING\n+                    \/\/ is set so either can get the blocker thread out of\n+                    \/\/ this wait() wrapper:\n+                    while (SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_DONE_BLOCKING &&\n+                           SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME) {\n+                        try {\n+                            \/\/ wait for main to tell us when to exit threadLock\n+                            SuspendWithObjectMonitorEnter.barrierBlocker.wait(0);\n+                        } catch (InterruptedException ex) {\n+                        }\n+                    }\n+                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ Launch the contender thread:\n+        \/\/ - tries to grab the threadLock\n+        \/\/ - grabs threadLock\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"contender\")) {\n+            synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                \/\/ tell main we are running\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CONTENDER_RUNNING;\n+                SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+            }\n+\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_CALL_RESUME);\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CONTENDER_DONE;\n+\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ Launch the resumer thread:\n+        \/\/ - tries to grab the threadLock (should not block!)\n+        \/\/ - grabs threadLock\n+        \/\/ - resumes the contended thread\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithObjectMonitorEnter.barrierResumer) {\n+                synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_RESUMER_RUNNING;\n+                    SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"thread waiting\");\n+                while (SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        \/\/ wait for main to tell us when to continue\n+                        SuspendWithObjectMonitorEnter.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            SuspendWithObjectMonitorEnter.logDebug(\"before enter threadLock\");\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                SuspendWithObjectMonitorEnter.logDebug(\"enter threadLock\");\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME);\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CALL_RESUME;\n+\n+                \/\/ resume the contender thread so contender.join() can work\n+                SuspendWithObjectMonitorEnter.logDebug(\"before resume thread\");\n+                int retCode = resumeThread(target);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                               \"retCode=\" + retCode);\n+                }\n+                SuspendWithObjectMonitorEnter.logDebug(\"resumed thread\");\n+\n+                SuspendWithObjectMonitorEnter.logDebug(\"exit threadLock\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorEnter\/SuspendWithObjectMonitorEnter.java","additions":399,"deletions":0,"binary":false,"changes":399,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv* jvmti = NULL;\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnter_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnter_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n+  jvmtiError err;\n+  jint thread_state;\n+  do {\n+    err = jvmti->GetThreadState(thr, &thread_state);\n+    if (err != JVMTI_ERROR_NONE) {\n+      return err;\n+    }\n+  } while ((thread_state & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) == 0);\n+  return err;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnterWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n+}\n+\n+\n+\/** Agent library initialization. *\/\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  \/\/ create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorEnter\/libSuspendWithObjectMonitorEnter.cpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,371 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4413752 8262881\n+ * @summary Test SuspendThread with ObjectMonitor wait.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @compile SuspendWithObjectMonitorWait.java\n+ * @run main\/othervm\/native -agentlib:SuspendWithObjectMonitorWait SuspendWithObjectMonitorWait\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+\/\/\n+\/\/ main               waiter              resumer\n+\/\/ =================  ==================  ===================\n+\/\/ launch waiter\n+\/\/ <launch returns>   waiter running\n+\/\/ launch resumer     enter threadLock\n+\/\/ <launch returns>   threadLock.wait()   resumer running\n+\/\/ enter threadLock   :                   wait for notify\n+\/\/ threadLock.notify  wait finishes       :\n+\/\/ :                  reenter blocks      :\n+\/\/ suspend waiter     <suspended>         :\n+\/\/ exit threadLock    :                   :\n+\/\/ <ready to test>    :                   :\n+\/\/ :                  :                   :\n+\/\/ notify resumer     :                   wait finishes\n+\/\/ join resumer       :                   enter threadLock\n+\/\/ :                  <resumed>           resume waiter\n+\/\/ :                  :                   exit threadLock\n+\/\/ :                  reenter threadLock  :\n+\/\/ <join returns>     :                   resumer exits\n+\/\/ join waiter        :\n+\/\/ <join returns>     waiter exits\n+\/\/\n+\n+public class SuspendWithObjectMonitorWait {\n+    private static final String AGENT_LIB = \"SuspendWithObjectMonitorWait\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    \/\/ default max # secs to test\n+    private static final int JOIN_MAX     = 30;    \/\/ max # secs to wait for join\n+\n+    public static final int TS_INIT            = 1;  \/\/ initial testState\n+    public static final int TS_WAITER_RUNNING  = 2;  \/\/ waiter is running\n+    public static final int TS_RESUMER_RUNNING = 3;  \/\/ resumer is running\n+    public static final int TS_READY_TO_NOTIFY = 4;  \/\/ ready to notify threadLock\n+    public static final int TS_CALL_SUSPEND    = 5;  \/\/ call suspend on contender\n+    public static final int TS_READY_TO_RESUME = 6;  \/\/ ready to resume waiter\n+    public static final int TS_CALL_RESUME     = 7;  \/\/ call resume on waiter\n+    public static final int TS_WAITER_DONE     = 8;  \/\/ waiter has run; done\n+\n+    public static Object barrierLaunch = new Object();   \/\/ controls thread launch\n+    public static Object barrierResumer = new Object();  \/\/ controls resumer\n+    public static Object threadLock = new Object();      \/\/ testing object\n+\n+    public static long count = 0;\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int suspendThread(SuspendWithObjectMonitorWaitWorker thr);\n+    native static int wait4ContendedEnter(SuspendWithObjectMonitorWaitWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithObjectMonitorWait()).doWork(timeMax, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(int timeMax, PrintStream out) {\n+        SuspendWithObjectMonitorWaitWorker waiter;    \/\/ waiter thread\n+        SuspendWithObjectMonitorWaitWorker resumer;    \/\/ resumer thread\n+\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n+            count++;\n+            testState = TS_INIT;  \/\/ starting the test loop\n+\n+            \/\/ launch the waiter thread\n+            synchronized (barrierLaunch) {\n+                waiter = new SuspendWithObjectMonitorWaitWorker(\"waiter\");\n+                waiter.start();\n+\n+                while (testState != TS_WAITER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithObjectMonitorWaitWorker(\"resumer\", waiter);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            checkTestState(TS_RESUMER_RUNNING);\n+\n+            \/\/ The waiter thread was synchronized on threadLock before it\n+            \/\/ set TS_WAITER_RUNNING and notified barrierLaunch above so\n+            \/\/ we cannot enter threadLock until the waiter thread calls\n+            \/\/ threadLock.wait().\n+            synchronized (threadLock) {\n+                \/\/ notify waiter thread so it can try to reenter threadLock\n+                testState = TS_READY_TO_NOTIFY;\n+                threadLock.notify();\n+\n+                \/\/ wait for the waiter thread to block\n+                logDebug(\"before contended enter wait\");\n+                int retCode = wait4ContendedEnter(waiter);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI GetThreadState: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                logDebug(\"done contended enter wait\");\n+\n+                checkTestState(TS_READY_TO_NOTIFY);\n+                testState = TS_CALL_SUSPEND;\n+                logDebug(\"before suspend thread\");\n+                retCode = suspendThread(waiter);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI SuspendThread: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                logDebug(\"suspended thread\");\n+            }\n+\n+            \/\/\n+            \/\/ At this point, all of the child threads are running\n+            \/\/ and we can get to meat of the test:\n+            \/\/\n+            \/\/ - suspended threadLock waiter (trying to reenter)\n+            \/\/ - a threadLock enter in the resumer thread\n+            \/\/ - resumption of the waiter thread\n+            \/\/ - a threadLock enter in the freshly resumed waiter thread\n+            \/\/\n+\n+            synchronized (barrierResumer) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                \/\/ tell resumer thread to resume waiter thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                \/\/ Can't call checkTestState() here because the\n+                \/\/ resumer thread may have already resumed the\n+                \/\/ waiter thread.\n+            }\n+\n+            try {\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                waiter.join(JOIN_MAX * 1000);\n+                if (waiter.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"waiter thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_WAITER_DONE);\n+        }\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n+                           \" seconds.\");\n+\n+        return 0;\n+    }\n+}\n+\n+class SuspendWithObjectMonitorWaitWorker extends Thread {\n+    private SuspendWithObjectMonitorWaitWorker target;  \/\/ target for resume operation\n+\n+    public SuspendWithObjectMonitorWaitWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithObjectMonitorWaitWorker(String name, SuspendWithObjectMonitorWaitWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int resumeThread(SuspendWithObjectMonitorWaitWorker thr);\n+\n+    public void run() {\n+        SuspendWithObjectMonitorWait.logDebug(\"thread running\");\n+\n+        \/\/\n+        \/\/ Launch the waiter thread:\n+        \/\/ - grab the threadLock\n+        \/\/ - threadLock.wait()\n+        \/\/ - releases threadLock\n+        \/\/\n+        if (getName().equals(\"waiter\")) {\n+            \/\/ grab threadLock before we tell main we are running\n+            SuspendWithObjectMonitorWait.logDebug(\"before enter threadLock\");\n+            synchronized(SuspendWithObjectMonitorWait.threadLock) {\n+                SuspendWithObjectMonitorWait.logDebug(\"enter threadLock\");\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_INIT);\n+\n+                synchronized(SuspendWithObjectMonitorWait.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_WAITER_RUNNING;\n+                    SuspendWithObjectMonitorWait.barrierLaunch.notify();\n+                }\n+\n+                SuspendWithObjectMonitorWait.logDebug(\"before wait\");\n+\n+                \/\/ TS_READY_TO_NOTIFY is set after the main thread has\n+                \/\/ entered threadLock so a spurious wakeup can't get the\n+                \/\/ waiter thread out of this threadLock.wait(0) call:\n+                while (SuspendWithObjectMonitorWait.testState <= SuspendWithObjectMonitorWait.TS_READY_TO_NOTIFY) {\n+                    try {\n+                        SuspendWithObjectMonitorWait.threadLock.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+\n+                SuspendWithObjectMonitorWait.logDebug(\"after wait\");\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_CALL_RESUME);\n+                SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_WAITER_DONE;\n+\n+                SuspendWithObjectMonitorWait.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ Launch the resumer thread:\n+        \/\/ - tries to grab the threadLock (should not block!)\n+        \/\/ - grabs threadLock\n+        \/\/ - resumes the waiter thread\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithObjectMonitorWait.barrierResumer) {\n+                synchronized(SuspendWithObjectMonitorWait.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_RESUMER_RUNNING;\n+                    SuspendWithObjectMonitorWait.barrierLaunch.notify();\n+                }\n+                SuspendWithObjectMonitorWait.logDebug(\"thread waiting\");\n+                while (SuspendWithObjectMonitorWait.testState != SuspendWithObjectMonitorWait.TS_READY_TO_RESUME) {\n+                    try {\n+                        \/\/ wait for main to tell us when to continue\n+                        SuspendWithObjectMonitorWait.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            SuspendWithObjectMonitorWait.logDebug(\"before enter threadLock\");\n+            synchronized(SuspendWithObjectMonitorWait.threadLock) {\n+                SuspendWithObjectMonitorWait.logDebug(\"enter threadLock\");\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_READY_TO_RESUME);\n+                SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_CALL_RESUME;\n+\n+                \/\/ resume the waiter thread so waiter.join() can work\n+                SuspendWithObjectMonitorWait.logDebug(\"before resume thread\");\n+                int retCode = resumeThread(target);\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                               \"retCode=\" + retCode);\n+                }\n+                SuspendWithObjectMonitorWait.logDebug(\"resumed thread\");\n+\n+                SuspendWithObjectMonitorWait.logDebug(\"exit threadLock\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorWait\/SuspendWithObjectMonitorWait.java","additions":371,"deletions":0,"binary":false,"changes":371,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv* jvmti = NULL;\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+JNIEXPORT int JNICALL\n+Java_SuspendWithObjectMonitorWait_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorWaitWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorWait_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n+  jvmtiError err;\n+  jint thread_state;\n+  do {\n+    err = jvmti->GetThreadState(thr, &thread_state);\n+    if (err != JVMTI_ERROR_NONE) {\n+      return err;\n+    }\n+  } while ((thread_state & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) == 0);\n+  return err;\n+}\n+\n+\n+\/** Agent library initialization. *\/\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  \/\/ create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithObjectMonitorWait\/libSuspendWithObjectMonitorWait.cpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,464 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4413752\n+ * @summary Test SuspendThread with RawMonitor enter.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @compile SuspendWithRawMonitorEnter.java\n+ * @run main\/othervm\/native -agentlib:SuspendWithRawMonitorEnter SuspendWithRawMonitorEnter\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+\/\/\n+\/\/ main               blocker           contender            resumer\n+\/\/ =================  ================  ===================  ================\n+\/\/ launch blocker\n+\/\/ <launch returns>   blocker running\n+\/\/ launch contender   enter threadLock\n+\/\/ <launch returns>   wait for notify   contender running\n+\/\/ launch resumer     :                 block on threadLock\n+\/\/ <launch returns>   :                 :                    resumer running\n+\/\/ suspend contender  :                 <suspended>          wait for notify\n+\/\/ <ready to test>    :                 :                    :\n+\/\/ :                  :                 :                    :\n+\/\/ notify blocker     wait finishes     :                    :\n+\/\/ notify resumer     exit threadLock   :                    wait finishes\n+\/\/ join blocker       :                 :                    enter threadLock\n+\/\/ <join returns>     blocker exits     <resumed>            resume contender\n+\/\/ join resumer                         :                    exit threadLock\n+\/\/ <join returns>                       enter threadLock     resumer exits\n+\/\/ join contender                       exit threadLock\n+\/\/ <join returns>                       contender exits\n+\/\/\n+\n+public class SuspendWithRawMonitorEnter {\n+    private static final String AGENT_LIB = \"SuspendWithRawMonitorEnter\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    \/\/ default max # secs to test\n+    private static final int JOIN_MAX     = 30;    \/\/ max # secs to wait for join\n+\n+    public static final int TS_INIT              = 1;  \/\/ initial testState\n+    public static final int TS_BLOCKER_RUNNING   = 2;  \/\/ blocker is running\n+    public static final int TS_CONTENDER_RUNNING = 3;  \/\/ contender is running\n+    public static final int TS_RESUMER_RUNNING   = 4;  \/\/ resumer is running\n+    public static final int TS_CALL_SUSPEND      = 5;  \/\/ call suspend on contender\n+    public static final int TS_DONE_BLOCKING     = 6;  \/\/ done blocking threadLock\n+    public static final int TS_READY_TO_RESUME   = 7;  \/\/ ready to resume contender\n+    public static final int TS_CALL_RESUME       = 8;  \/\/ call resume on contender\n+    public static final int TS_CONTENDER_DONE    = 9;  \/\/ contender has run; done\n+\n+    public static Object barrierLaunch = new Object();   \/\/ controls thread launch\n+    public static Object barrierBlocker = new Object();  \/\/ controls blocker\n+    public static Object barrierResumer = new Object();  \/\/ controls resumer\n+\n+    public static long count = 0;\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int createRawMonitor();\n+    native static int destroyRawMonitor();\n+    native static int suspendThread(SuspendWithRawMonitorEnterWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        System.exit(run(timeMax, System.out) + exit_delta);\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new SuspendWithRawMonitorEnter()).doWork(timeMax, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(int timeMax, PrintStream out) {\n+        SuspendWithRawMonitorEnterWorker blocker;    \/\/ blocker thread\n+        SuspendWithRawMonitorEnterWorker contender;  \/\/ contender thread\n+        SuspendWithRawMonitorEnterWorker resumer;    \/\/ resumer thread\n+\n+        int retCode = createRawMonitor();\n+        if (retCode != 0) {\n+            throw new RuntimeException(\"error in JVMTI CreateRawMonitor: \" +\n+                                       \"retCode=\" + retCode);\n+        }\n+        logDebug(\"created threadLock\");\n+\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n+            count++;\n+            testState = TS_INIT;  \/\/ starting the test loop\n+\n+            \/\/ launch the blocker thread\n+            synchronized (barrierLaunch) {\n+                blocker = new SuspendWithRawMonitorEnterWorker(\"blocker\");\n+                blocker.start();\n+\n+                while (testState != TS_BLOCKER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the contender thread\n+            synchronized (barrierLaunch) {\n+                contender = new SuspendWithRawMonitorEnterWorker(\"contender\");\n+                contender.start();\n+\n+                while (testState != TS_CONTENDER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithRawMonitorEnterWorker(\"resumer\", contender);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/\n+            \/\/ Known bug: We don't have a way of knowing when the\n+            \/\/ contender thread contends on the threadLock. If we\n+            \/\/ suspend it before it has blocked, then we don't really\n+            \/\/ have contention. However, the resumer thread won't\n+            \/\/ resume the contender thread until after it has grabbed\n+            \/\/ the threadLock so we don't have a lock order problem\n+            \/\/ and the test won't fall over.\n+            \/\/\n+            \/\/ We reduce the size of this timing window by launching\n+            \/\/ the resumer thread after the contender thread. So the\n+            \/\/ contender thread has all the setup time for the resumer\n+            \/\/ thread to call JVM\/TI RawMonitorEnter() and block on\n+            \/\/ the threadLock.\n+            \/\/\n+            checkTestState(TS_RESUMER_RUNNING);\n+            testState = TS_CALL_SUSPEND;\n+            logDebug(\"before suspend thread\");\n+            retCode = suspendThread(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI SuspendThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            logDebug(\"suspended thread\");\n+\n+            \/\/\n+            \/\/ At this point, all of the child threads are running\n+            \/\/ and we can get to meat of the test:\n+            \/\/\n+            \/\/ - suspended threadLock contender\n+            \/\/ - a threadLock exit in the blocker thread\n+            \/\/ - a threadLock enter in the resumer thread\n+            \/\/ - resumption of the contender thread\n+            \/\/ - a threadLock enter in the freshly resumed contender thread\n+            \/\/\n+            synchronized (barrierBlocker) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                \/\/ tell blocker thread to exit threadLock\n+                testState = TS_DONE_BLOCKING;\n+                barrierBlocker.notify();\n+            }\n+\n+            synchronized (barrierResumer) {\n+                \/\/ tell resumer thread to resume contender thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                \/\/ Can't call checkTestState() here because the\n+                \/\/ resumer thread may have already resumed the\n+                \/\/ contender thread.\n+            }\n+\n+            try {\n+                blocker.join();\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                contender.join(JOIN_MAX * 1000);\n+                if (contender.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"contender thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_CONTENDER_DONE);\n+        }\n+        retCode = destroyRawMonitor();\n+        if (retCode != 0) {\n+            throw new RuntimeException(\"error in JVMTI DestroyRawMonitor: \" +\n+                                       \"retCode=\" + retCode);\n+        }\n+        logDebug(\"destroyed threadLock\");\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n+                           \" seconds.\");\n+\n+        return 0;\n+    }\n+}\n+\n+class SuspendWithRawMonitorEnterWorker extends Thread {\n+    private SuspendWithRawMonitorEnterWorker target;  \/\/ target for resume operation\n+\n+    public SuspendWithRawMonitorEnterWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithRawMonitorEnterWorker(String name, SuspendWithRawMonitorEnterWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int rawMonitorEnter();\n+    native static int rawMonitorExit();\n+    native static int resumeThread(SuspendWithRawMonitorEnterWorker thr);\n+\n+    public void run() {\n+        SuspendWithRawMonitorEnter.logDebug(\"thread running\");\n+\n+        \/\/\n+        \/\/ Launch the blocker thread:\n+        \/\/ - grabs threadLock\n+        \/\/ - holds threadLock until we tell it let go\n+        \/\/ - releases threadLock\n+        \/\/\n+        int retCode;\n+        if (getName().equals(\"blocker\")) {\n+            \/\/ grab threadLock before we tell main we are running\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_INIT);\n+\n+            \/\/ recursive entry\n+            SuspendWithRawMonitorEnter.logDebug(\"before recursive enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"recursive enter threadLock\");\n+\n+            SuspendWithRawMonitorEnter.logDebug(\"before recursive exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"recursive exit threadLock\");\n+\n+            synchronized(SuspendWithRawMonitorEnter.barrierBlocker) {\n+                synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_BLOCKER_RUNNING;\n+                    SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+                }\n+                SuspendWithRawMonitorEnter.logDebug(\"thread waiting\");\n+                \/\/ TS_READY_TO_RESUME is set right after TS_DONE_BLOCKING\n+                \/\/ is set so either can get the blocker thread out of\n+                \/\/ this wait() wrapper:\n+                while (SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_DONE_BLOCKING &&\n+                       SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        \/\/ wait for main to tell us when to exit threadLock\n+                        SuspendWithRawMonitorEnter.barrierBlocker.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+                SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+                retCode = rawMonitorExit();\n+                if (retCode != 0) {\n+                    throw new RuntimeException(\"error in JVMTI RawMonitorExit: \"\n+                                               + \"retCode=\" + retCode);\n+                }\n+                SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ Launch the contender thread:\n+        \/\/ - tries to grab the threadLock\n+        \/\/ - grabs threadLock\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"contender\")) {\n+            synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                \/\/ tell main we are running\n+                SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CONTENDER_RUNNING;\n+                SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+            }\n+\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_CALL_RESUME);\n+            SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CONTENDER_DONE;\n+\n+            SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n+        }\n+        \/\/\n+        \/\/ Launch the resumer thread:\n+        \/\/ - tries to grab the threadLock (should not block!)\n+        \/\/ - grabs threadLock\n+        \/\/ - resumes the contended thread\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithRawMonitorEnter.barrierResumer) {\n+                synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_RESUMER_RUNNING;\n+                    SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+                }\n+                SuspendWithRawMonitorEnter.logDebug(\"thread waiting\");\n+                while (SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        \/\/ wait for main to tell us when to continue\n+                        SuspendWithRawMonitorEnter.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"before enter threadLock\");\n+            retCode = rawMonitorEnter();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorEnter: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"enter threadLock\");\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_READY_TO_RESUME);\n+            SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CALL_RESUME;\n+\n+            \/\/ resume the contender thread so contender.join() can work\n+            SuspendWithRawMonitorEnter.logDebug(\"before resume thread\");\n+            retCode = resumeThread(target);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI ResumeThread: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"resumed thread\");\n+\n+            SuspendWithRawMonitorEnter.logDebug(\"before exit threadLock\");\n+            retCode = rawMonitorExit();\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI RawMonitorExit: \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            SuspendWithRawMonitorEnter.logDebug(\"exit threadLock\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithRawMonitorEnter\/SuspendWithRawMonitorEnter.java","additions":464,"deletions":0,"binary":false,"changes":464,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv* jvmti = NULL;\n+static jrawMonitorID threadLock = NULL;\n+static char threadLockName[] = \"threadLock\";\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnter_createRawMonitor(JNIEnv *jni, jclass cls) {\n+  return jvmti->CreateRawMonitor(threadLockName, &threadLock);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnter_destroyRawMonitor(JNIEnv *jni, jclass cls) {\n+  return jvmti->DestroyRawMonitor(threadLock);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnter_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_rawMonitorEnter(JNIEnv *jni, jclass cls) {\n+  return jvmti->RawMonitorEnter(threadLock);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_rawMonitorExit(JNIEnv *jni, jclass cls) {\n+  return jvmti->RawMonitorExit(threadLock);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n+}\n+\n+\n+\/** Agent library initialization. *\/\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  \/\/ create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SuspendWithRawMonitorEnter\/libSuspendWithRawMonitorEnter.cpp","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}