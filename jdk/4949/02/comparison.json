{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/threadSMR.inline.hpp\"\n@@ -43,8 +44,0 @@\n-static JavaThread* next_java_thread(JavaThreadIteratorWithHandle& iter, bool live_only) {\n-  JavaThread* next = iter.next();\n-  while (next != NULL && !java_thread_inclusion_predicate(next, live_only)) {\n-    next = iter.next();\n-  }\n-  return next;\n-}\n-\n@@ -63,3 +56,18 @@\n-JfrJavaThreadIteratorAdapter::JfrJavaThreadIteratorAdapter(bool live_only \/* true *\/) : _iter(),\n-                                                                                        _next(next_java_thread(_iter, live_only)),\n-                                                                                        _live_only(live_only) {}\n+JfrJavaThreadIteratorAdapter::JfrJavaThreadIteratorAdapter(bool live_only \/* true *\/) :\n+  _tlist(),\n+  _it(_tlist.begin()),\n+  _end(_tlist.end()),\n+  _live_only(live_only)\n+{\n+  skip_excluded();\n+}\n+\n+bool JfrJavaThreadIteratorAdapter::has_next() const {\n+  return _it != _end;\n+}\n+\n+void JfrJavaThreadIteratorAdapter::skip_excluded() {\n+  while (has_next() && !java_thread_inclusion_predicate(*_it, _live_only)) {\n+    ++_it;\n+  }\n+}\n@@ -69,3 +77,2 @@\n-  Type* const temp = _next;\n-  _next = next_java_thread(_iter, _live_only);\n-  assert(temp != _next, \"invariant\");\n+  Type* const temp = *_it++;\n+  skip_excluded();\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrThreadIterator.cpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -50,2 +50,3 @@\n-  JavaThreadIteratorWithHandle _iter;\n-  JavaThread* _next;\n+  ThreadsListHandle _tlist;\n+  ThreadsListHandle::Iterator _it;\n+  ThreadsListHandle::Iterator _end;\n@@ -53,0 +54,3 @@\n+\n+  void skip_excluded();\n+\n@@ -56,3 +60,1 @@\n-  bool has_next() const {\n-    return _next != NULL;\n-  }\n+  bool has_next() const;\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrThreadIterator.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}