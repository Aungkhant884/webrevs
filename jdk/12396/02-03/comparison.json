{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import javax.crypto.SecretKey;\n@@ -33,0 +32,1 @@\n+import java.util.Arrays;\n@@ -34,0 +34,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -111,0 +112,3 @@\n+        char[] password = null;\n+        byte[] derivedKey = null;\n+        SecretKeySpec cipherKey = null;\n@@ -112,1 +116,0 @@\n-        byte[] derivedKey;\n@@ -114,0 +117,1 @@\n+            password = keySpec.getPassword();\n@@ -115,1 +119,1 @@\n-                    keySpec.getPassword(), keySpec.getSalt(),\n+                    password, keySpec.getSalt(),\n@@ -118,0 +122,2 @@\n+            cipherKey = new SecretKeySpec(derivedKey, \"HmacSHA1\");\n+            super.engineInit(cipherKey, null);\n@@ -119,0 +125,10 @@\n+            if (cipherKey != null) {\n+                SharedSecrets.getJavaxCryptoSpecAccess()\n+                        .clearSecretKeySpec(cipherKey);\n+            }\n+            if (derivedKey != null) {\n+                Arrays.fill(derivedKey, (byte) 0);\n+            }\n+            if (password != null) {\n+                Arrays.fill(password, '\\0');\n+            }\n@@ -121,2 +137,0 @@\n-        SecretKey cipherKey = new SecretKeySpec(derivedKey, \"HmacSHA1\");\n-        super.engineInit(cipherKey, null);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacPKCS12PBECore.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Arrays;\n@@ -33,0 +34,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -153,3 +155,2 @@\n-\n-        PBKDF2KeyImpl s;\n-\n+        PBKDF2KeyImpl s = null;\n+        byte[] derivedKey;\n@@ -158,0 +159,1 @@\n+            derivedKey = s.getEncoded();\n@@ -161,0 +163,3 @@\n+            if (s != null) {\n+                s.clear();\n+            }\n@@ -163,3 +168,0 @@\n-        byte[] derivedKey = s.getEncoded();\n-        s.clearPassword();\n-        SecretKeySpec cipherKey = new SecretKeySpec(derivedKey, cipherAlgo);\n@@ -167,2 +169,12 @@\n-        \/\/ initialize the underlying cipher\n-        cipher.init(opmode, cipherKey, pbes2Params.getIvSpec(), random);\n+        SecretKeySpec cipherKey = null;\n+        try {\n+            cipherKey = new SecretKeySpec(derivedKey, cipherAlgo);\n+            \/\/ initialize the underlying cipher\n+            cipher.init(opmode, cipherKey, pbes2Params.getIvSpec(), random);\n+        } finally {\n+            if (cipherKey != null) {\n+                SharedSecrets.getJavaxCryptoSpecAccess()\n+                        .clearSecretKeySpec(cipherKey);\n+            }\n+            Arrays.fill(derivedKey, (byte) 0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Core.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.lang.ref.Reference;\n+import java.lang.ref.Cleaner;\n@@ -67,2 +67,2 @@\n-    @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable;\n-                                \/\/ see writeReplace method\n+    \/\/ The following fields are not Serializable. See writeReplace method.\n+    @SuppressWarnings(\"serial\")\n@@ -70,0 +70,2 @@\n+    @SuppressWarnings(\"serial\")\n+    private Cleaner.Cleanable cleaner;\n@@ -91,7 +93,1 @@\n-        char[] passwd = keySpec.getPassword();\n-        if (passwd == null) {\n-            \/\/ Should allow an empty password.\n-            this.passwd = new char[0];\n-        } else {\n-            this.passwd = passwd.clone();\n-        }\n+        this.passwd = keySpec.getPassword();\n@@ -100,2 +96,0 @@\n-        \/\/ remove local copy\n-        if (passwd != null) Arrays.fill(passwd, '\\0');\n@@ -127,9 +121,3 @@\n-\n-            \/\/ Use the cleaner to zero the key when no longer referenced\n-            final byte[] k = this.key;\n-            final char[] p = this.passwd;\n-            CleanerFactory.cleaner().register(this,\n-                    () -> {\n-                        Arrays.fill(k, (byte) 0x00);\n-                        Arrays.fill(p, '\\0');\n-                    });\n+            if (key == null) {\n+                Arrays.fill(passwd, '\\0');\n+            }\n@@ -137,0 +125,8 @@\n+        \/\/ Use the cleaner to zero the key when no longer referenced\n+        final byte[] k = this.key;\n+        final char[] p = this.passwd;\n+        cleaner = CleanerFactory.cleaner().register(this,\n+                () -> {\n+                    Arrays.fill(k, (byte) 0x00);\n+                    Arrays.fill(p, '\\0');\n+                });\n@@ -214,5 +210,1 @@\n-        \/\/ The key is zeroized by finalize()\n-        \/\/ The reachability fence ensures finalize() isn't called early\n-        byte[] result = key.clone();\n-        Reference.reachabilityFence(this);\n-        return result;\n+        return key.clone();\n@@ -229,2 +221,2 @@\n-    public void clearPassword() {\n-        Arrays.fill(passwd, (char)0);\n+    public void clear() {\n+        cleaner.clean();\n@@ -234,5 +226,1 @@\n-        \/\/ The password is zeroized by finalize()\n-        \/\/ The reachability fence ensures finalize() isn't called early\n-        char[] result = passwd.clone();\n-        Reference.reachabilityFence(this);\n-        return result;\n+        return passwd.clone();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2KeyImpl.java","additions":22,"deletions":34,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -182,2 +184,2 @@\n-        PBKDF2Core kdf = getKDFImpl(kdfAlgo);\n-        byte[] derivedKey;\n+        byte[] derivedKey = null;\n+        SecretKeySpec cipherKey = null;\n@@ -185,0 +187,1 @@\n+            PBKDF2Core kdf = getKDFImpl(kdfAlgo);\n@@ -187,0 +190,2 @@\n+            cipherKey = new SecretKeySpec(derivedKey, kdfAlgo);\n+            super.engineInit(cipherKey, null);\n@@ -190,1 +195,7 @@\n-            pbeSpec.clearPassword();\n+            if (cipherKey != null) {\n+                SharedSecrets.getJavaxCryptoSpecAccess()\n+                        .clearSecretKeySpec(cipherKey);\n+            }\n+            if (derivedKey != null) {\n+                Arrays.fill(derivedKey, (byte) 0);\n+            }\n@@ -192,1 +203,1 @@\n-                s.clearPassword();\n+                s.clear();\n@@ -194,0 +205,1 @@\n+            pbeSpec.clearPassword();\n@@ -195,4 +207,0 @@\n-        SecretKey cipherKey = new SecretKeySpec(derivedKey, kdfAlgo);\n-        Arrays.fill(derivedKey, (byte)0);\n-\n-        super.engineInit(cipherKey, null);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Core.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    public final static class PBES2Params {\n+    public static final class PBES2Params {\n@@ -129,1 +129,0 @@\n-            byte[] passwdBytes = key.getEncoded();\n@@ -134,1 +133,0 @@\n-\n@@ -136,0 +134,5 @@\n+            byte[] passwdBytes;\n+            if (!(key.getAlgorithm().regionMatches(true, 0, \"PBE\", 0, 3)) ||\n+                    (passwdBytes = key.getEncoded()) == null) {\n+                throw new InvalidKeyException(\"Missing password\");\n+            }\n@@ -137,6 +140,0 @@\n-                if ((passwdBytes == null) ||\n-                        !(key.getAlgorithm().regionMatches(true, 0, \"PBE\", 0,\n-                                3))) {\n-                    throw new InvalidKeyException(\"Missing password\");\n-                }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBEUtil.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-    private static final class P11PBEKey extends P11SecretKey\n+    static final class P11PBEKey extends P11SecretKey\n@@ -510,2 +510,2 @@\n-            this.password = password;\n-            this.salt = salt;\n+            this.password = password.clone();\n+            this.salt = salt.clone();\n@@ -529,0 +529,4 @@\n+\n+        void clearPassword() {\n+            Arrays.fill(password, '\\0');\n+        }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javax.crypto.spec.PBEKeySpec;\n@@ -216,0 +217,1 @@\n+                PBEKeySpec pbeKeySpec = PBEUtil.getPBAKeySpec(key, params);\n@@ -217,2 +219,9 @@\n-                    p11Key = P11SecretKeyFactory.derivePBEKey(token,\n-                            PBEUtil.getPBAKeySpec(key, params), svcPbeKi);\n+                    P11Key.P11PBEKey p11PBEKey =\n+                            P11SecretKeyFactory.derivePBEKey(token,\n+                            pbeKeySpec, svcPbeKi);\n+                    \/\/ This Mac service uses the token where the derived key\n+                    \/\/ lives so there won't be any need to re-derive and use\n+                    \/\/ the password. The p11Key cannot be accessed out of this\n+                    \/\/ class.\n+                    p11PBEKey.clearPassword();\n+                    p11Key = p11PBEKey;\n@@ -221,0 +230,2 @@\n+                } finally {\n+                    pbeKeySpec.clearPassword();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import com.sun.crypto.provider.SunJCE;\n@@ -149,1 +148,1 @@\n-                key = P11SecretKeyFactory.derivePBEKey(\n+                P11Key.P11PBEKey p11PBEKey = P11SecretKeyFactory.derivePBEKey(\n@@ -151,0 +150,6 @@\n+                \/\/ The internal Cipher service uses the token where the\n+                \/\/ derived key lives so there won't be any need to re-derive\n+                \/\/ and use the password. The key cannot be accessed out of this\n+                \/\/ class.\n+                p11PBEKey.clearPassword();\n+                key = p11PBEKey;\n@@ -153,0 +158,2 @@\n+            } finally {\n+                pbeSpec.clearPassword();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PBECipher.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+\n+import jdk.internal.access.SharedSecrets;\n@@ -269,2 +271,1 @@\n-            CK_ATTRIBUTE[] extraAttrs)\n-            throws InvalidKeyException {\n+            CK_ATTRIBUTE[] extraAttrs) throws InvalidKeyException {\n@@ -329,0 +330,1 @@\n+                PBEKeySpec keySpec = getPbeKeySpec(pbeKey);\n@@ -330,1 +332,1 @@\n-                    p11Key = derivePBEKey(token, getPbeKeySpec(pbeKey), pbeKi);\n+                    p11Key = derivePBEKey(token, keySpec, pbeKi);\n@@ -333,0 +335,2 @@\n+                } finally {\n+                    keySpec.clearPassword();\n@@ -352,1 +356,1 @@\n-    static P11Key derivePBEKey(Token token, PBEKeySpec keySpec,\n+    static P11Key.P11PBEKey derivePBEKey(Token token, PBEKeySpec keySpec,\n@@ -359,0 +363,2 @@\n+        char[] password = null;\n+        char[] encPassword = null;\n@@ -362,1 +368,1 @@\n-            char[] password = keySpec.getPassword();\n+            password = keySpec.getPassword();\n@@ -391,1 +397,0 @@\n-            char[] encPassword;\n@@ -432,1 +437,1 @@\n-            return (P11Key) P11Key.pbeKey(session, keyID, pbeKi.algo,\n+            return (P11Key.P11PBEKey) P11Key.pbeKey(session, keyID, pbeKi.algo,\n@@ -437,0 +442,6 @@\n+            if (encPassword != null) {\n+                Arrays.fill(encPassword, '\\0');\n+            }\n+            if (password != null) {\n+                Arrays.fill(password, '\\0');\n+            }\n@@ -447,0 +458,1 @@\n+                Arrays.fill(encoded, (byte) 0);\n@@ -450,1 +462,0 @@\n-        char[] pwd = pbeKey.getPassword();\n@@ -452,3 +463,10 @@\n-        return keyLength == 0 ?\n-                new PBEKeySpec(pwd, salt, ic) :\n-                new PBEKeySpec(pwd, salt, ic, keyLength);\n+        char[] pwd = pbeKey.getPassword();\n+        try {\n+            return keyLength == 0 ?\n+                    new PBEKeySpec(pwd, salt, ic) :\n+                    new PBEKeySpec(pwd, salt, ic, keyLength);\n+        } finally {\n+            if (pwd != null) {\n+                Arrays.fill(pwd, '\\0');\n+            }\n+        }\n@@ -562,3 +580,1 @@\n-                byte[] keyBytes = desKeySpec.getKey();\n-                keySpec = new SecretKeySpec(keyBytes, \"DES\");\n-                return engineGenerateSecret(keySpec);\n+                return generateDESSecret(desKeySpec.getKey(), \"DES\");\n@@ -568,3 +584,1 @@\n-                byte[] keyBytes = desEdeKeySpec.getKey();\n-                keySpec = new SecretKeySpec(keyBytes, \"DESede\");\n-                return engineGenerateSecret(keySpec);\n+                return generateDESSecret(desEdeKeySpec.getKey(), \"DESede\");\n@@ -577,0 +591,17 @@\n+    private SecretKey generateDESSecret(byte[] keyBytes, String desAlgo)\n+            throws InvalidKeySpecException {\n+        SecretKeySpec secretKeySpec = null;\n+        try {\n+            secretKeySpec = new SecretKeySpec(keyBytes, desAlgo);\n+            return engineGenerateSecret(secretKeySpec);\n+        } finally {\n+            if (secretKeySpec != null) {\n+                SharedSecrets.getJavaxCryptoSpecAccess()\n+                        .clearSecretKeySpec(secretKeySpec);\n+            }\n+            if (keyBytes != null) {\n+                Arrays.fill(keyBytes, (byte) 0);\n+            }\n+        }\n+    }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":48,"deletions":17,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -35,0 +36,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -85,2 +87,1 @@\n-        ByteBuffer passwordBytes = cs.encode(\n-                CharBuffer.allocate(password.length).put(password).rewind());\n+        ByteBuffer passwordBytes = cs.encode(CharBuffer.wrap(password));\n@@ -91,1 +92,2 @@\n-            encPassword[i++] = (char) (passwordBytes.get() & 0xFF);\n+            encPassword[i] = (char) (passwordBytes.get() & 0xFF);\n+            passwordBytes.put(i++, (byte) 0);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Util.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1704,0 +1704,3 @@\n+    if (ckParamPtr->pPassword != NULL) {\n+        memset(ckParamPtr->pPassword, 0, ckParamPtr->ulPasswordLen);\n+    }\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_convert.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -425,0 +425,4 @@\n+                     if (((CK_PBE_PARAMS_PTR)tmp)->pPassword != NULL) {\n+                         memset(((CK_PBE_PARAMS_PTR)tmp)->pPassword, 0,\n+                                 ((CK_PBE_PARAMS_PTR)tmp)->ulPasswordLen);\n+                     }\n@@ -716,2 +720,1 @@\n-        free(jTemp);\n-        return;\n+        goto cleanup;\n@@ -722,1 +725,0 @@\n-        free(jTemp);\n@@ -724,1 +726,1 @@\n-        return;\n+        goto cleanup;\n@@ -729,0 +731,3 @@\n+cleanup:\n+    \/\/ Clean possible temporary copies of passwords.\n+    memset(jTemp, 0, *ckpLength * sizeof(jchar));\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_util.c","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -415,12 +415,22 @@\n-#define FREE_VERSIONED_PBKD2_MEMBERS(verParamsPtr)                  \\\n-    do {                                                            \\\n-        if ((verParamsPtr)->version == PARAMS) {                    \\\n-            free((verParamsPtr)->params.v1.pSaltSourceData);        \\\n-            free((verParamsPtr)->params.v1.pPrfData);               \\\n-            free((verParamsPtr)->params.v1.pPassword);              \\\n-            free((verParamsPtr)->params.v1.ulPasswordLen);          \\\n-        } else {                                                    \\\n-            free((verParamsPtr)->params.v2.pSaltSourceData);        \\\n-            free((verParamsPtr)->params.v2.pPrfData);               \\\n-            free((verParamsPtr)->params.v2.pPassword);              \\\n-        }                                                           \\\n+#define FREE_VERSIONED_PBKD2_MEMBERS(verParamsPtr)                   \\\n+    do {                                                             \\\n+        if ((verParamsPtr)->version == PARAMS) {                     \\\n+            free((verParamsPtr)->params.v1.pSaltSourceData);         \\\n+            free((verParamsPtr)->params.v1.pPrfData);                \\\n+            if ((verParamsPtr)->params.v1.pPassword != NULL &&       \\\n+                    (verParamsPtr)->params.v1.ulPasswordLen          \\\n+                            != NULL) {                               \\\n+                memset((verParamsPtr)->params.v1.pPassword, 0,       \\\n+                        *((verParamsPtr)->params.v1.ulPasswordLen)); \\\n+            }                                                        \\\n+            free((verParamsPtr)->params.v1.pPassword);               \\\n+            free((verParamsPtr)->params.v1.ulPasswordLen);           \\\n+        } else {                                                     \\\n+            free((verParamsPtr)->params.v2.pSaltSourceData);         \\\n+            free((verParamsPtr)->params.v2.pPrfData);                \\\n+            if ((verParamsPtr)->params.v2.pPassword != NULL) {       \\\n+                memset((verParamsPtr)->params.v2.pPassword, 0,       \\\n+                        (verParamsPtr)->params.v2.ulPasswordLen);    \\\n+            }                                                        \\\n+            free((verParamsPtr)->params.v2.pPassword);               \\\n+        }                                                            \\\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11wrapper.h","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"}]}