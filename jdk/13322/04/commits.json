[{"commit":{"message":"Update aarch64.ad and jvmci AArch64TestAssembler.java\n\nBefore this patch, rscratch1 is clobbered.\nWith this patch, we use the rscratch1 register after we save it on the\nstack.\n\nIn this way, the code would be consistent with\nmacroAssembler_aarch64.cpp."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java"}],"sha":"894b369709568f5079c1aa3995a84a081448b7df"},{"commit":{"message":"Merge branch 'master' into jdk-8287325"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"}],"sha":"d89bb83b31127e78ba3d72acbea7e3319bc5bf66"},{"commit":{"message":"Remove my temp test patch on jvmci_global.hpp and stubGenerator_aarch64.hpp"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"0dd4ae478e63f871041616041c9cad1812f4cb54"},{"commit":{"message":"Use relative SP as the PAC modifier"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp"},{"filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp"},{"filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/windows_aarch64\/pauth_windows_aarch64.inline.hpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java"}],"sha":"ba3ed144fb50356b2e3c31ce1fbe2a8f562cefae"},{"commit":{"message":"Merge branch 'master' into jdk-8287325"},"files":[],"sha":"a5aeb1239025c27f7e2ac547ad62279c7aeb88cb"},{"commit":{"message":"Merge branch 'master' into jdk-8287325"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp"}],"sha":"fdf7127daea4eaf34aee5035fb18cf8802724334"},{"commit":{"message":"Rename return_pc_at and patch_pc_at\n\nRename return_pc_at to return_address_at.\nRename patch_pc_at to patch_return_address_at."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp"},{"filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp"},{"filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp"}],"sha":"5bd587aa7ae9c7e4629b4031ebbdb92a0b28312d"},{"commit":{"message":"8287325: AArch64: fix virtual threads with -XX:UseBranchProtection=pac-ret\n\n* Background\n\n1. PAC-RET branch protection was initially implemented on Linux\/AArch64\nin JDK-8277204 [1].\n\n2. However, it was broken with the introduction of virtual threads [2],\nmainly because the continuation freeze\/thaw mechanism would trigger\nstack copying to\/from memory, whereas the saved and signed LR on the\nstack doesn't get re-signed accordingly.\n\n3. PR-9067 [3] tried to implement the re-sign part, but it was not\naccepted because option \"PreserveFramePointer\" is always turned on by\nPAC-RET but this would slow down virtual threads by ~5-20x.\n\n4. As a workaround, JDK-8288023 [4] disables PAC-RET when preview\nlanguage features are enabled. Note that virtual thread is one preview\nfeature then.\n\n5. Virtual thread will become a permanent feature in JDK-21 [5][6].\n\n* Goal\n\nThis patch aims to make PAC-RET compatible with virtual threads.\n\n* Requirements of virtual threads\n\nR-1: Option \"PreserveFramePointer\" should be turned off. That is,\nPAC-RET implementation should not rely on frame pointer FP. Otherwise,\nthe fast path in stack copying will never be taken.\n\nR-2: Use some invariant values to stack copying as the modifier, so as\nto avoid the PAC re-sign for continuation thaw, as the fast path in\nstack copying doesn't walk the frame.\n\nNote that more details can be found in the discussion [3].\n\n* Investigation\n\nWe considered to use (relative) stack pointer SP, thread ID, PACStack\n[7] and value zero as the candidate modifier.\n\n1. SP: In some scenarios, we need to authenticate the return address in\nplaces where the current SP doesn't match the SP on function entry. E.g.\nsee the usage in Runtime1::generate_handle_exception(). Hence, neither\nabsolute nor relative SP works.\n\n2. thread ID (tid): It's invariant to virtual thread, but it's\nnontrivial to access it from the JIT side. We need 1) firstly resolve\nthe address of current thread (See [8] as an example), and 2) get the\ntid field in the way like java_lang_Thread::thread_id(). I suppose this\nwould introduce big performance overhead.\n\nThen can we turn to use \"rthread\" register (JavaThread object address)\nas the modifier? Unfortunately, it's not an invariant to virtual threads\nand PAC re-sign is still needed.\n\n3. PACStack uses the signed return address of caller as the modifier to\nsign the callee's return address. In this way, we get one PACed call\nchain. The modifier should be saved into somewhere around the frame\nrecord. Inevitably, FP should be preserved to make it easy to find this\nmodifier in case of some exception scenarios (Recall the reason why we\nfail to use SP as the modifier).\n\nFinally, we choose to use value zero as the modifier. Trivially, it's\ncompatible with virtual threads. However, compared to FP modifier, this\nsolution would reduce the strength of PAC-RET protection to some extent.\nE.g., you get the same authentication code for each call to the\nfunction, whereas using FP gives you different codes as long as the\nstack depth is different.\n\n* Implementation of Zero modifier\n\nHere list the key updates of this patch.\n\n1. vm_version_aarch64.cpp\n\nRemove the constraint on \"enable-preview\" and \"PreserveFramePointer\".\n\n2. macroAssembler_aarch64.cpp\n\nFor utility protect_return_address(), 1) use PACIAZ\/PACIZA instructions\ndirectly. 2) argument \"temp_reg\" is removed since all functions use the\nsame modifier. 3) all the use sites are updated accordingly. This\ninvolves the updates in many files.\n\nSimilar updates are done to utility authenticate_return_address().\n\nBesides, aarch64.ad and AArch64TestAssembler.java are updated\naccordingly.\n\n3. pauth_linux_aarch64.inline.hpp\n\nFor utilities pauth_sign_return_address() and\npauth_authenticate_return_address(), remove the second argument and pass\nvalue zero to r16 register.\n\nSimilarly, all the use sites are updated as well. This involves the\nupdates in many files.\n\n4. continuationHelper_aarch64.inline.hpp\n\nIntroduce return_pc_at() and patch_pc_at() to avoid directly\nreading the saved PC or writing new signed PC on the stack in shared\ncode.\n\n5. Minor updates\n\n1) sharedRuntime_aarch64.cpp: Add the missing\nauthenticate_return_address() use for function gen_continuation_enter().\nIn functions generate_deopt_blob() and generate_uncommon_trap_blob(),\nremove the authentication on the caller (3) frame since the return\naddress is not used.\n\n2) stubGenerator_aarch64.cpp: Add the missing\nauthenticate_return_address() use for function generate_cont_thaw().\n\n3) runtime.cpp: enable the authentication.\n\n* Test\n\n1. Cross compilations on arm32\/s390\/ppc\/riscv passed.\n2. zero build and x86 build passed.\n3. tier1~3 passed on Linux\/AArch64 w\/ and w\/o PAC-RET.\n\nCo-Developed-by: Nick Gasson <Nick.Gasson@arm.com>\n\n[1] https:\/\/bugs.openjdk.org\/browse\/JDK-8277204\n[2] https:\/\/openjdk.org\/jeps\/425\n[3] https:\/\/github.com\/openjdk\/jdk\/pull\/9067\n[4] https:\/\/bugs.openjdk.org\/browse\/JDK-8288023\n[5] https:\/\/bugs.openjdk.org\/browse\/JDK-8301819\n[6] https:\/\/openjdk.org\/jeps\/444\n[7] https:\/\/www.usenix.org\/conference\/usenixsecurity21\/presentation\/liljestrand\n[8] https:\/\/github.com\/openjdk\/jdk\/pull\/10441"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp"},{"filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp"},{"filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/windows_aarch64\/pauth_windows_aarch64.inline.hpp"},{"filename":"src\/hotspot\/share\/opto\/runtime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java"}],"sha":"0403fbdea41e07ca5b9d5aade0d573d617fbd562"}]