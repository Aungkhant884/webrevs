{"files":[{"patch":"@@ -77,1 +77,2 @@\n-inline void ContinuationHelper::patch_return_address_at(intptr_t* sp, address pc) {\n+inline void ContinuationHelper::patch_return_address_at(intptr_t* sp,\n+                                                        address pc) {\n@@ -93,1 +94,2 @@\n-  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(\n+                 sp - frame::sender_sp_ret_address_offset());\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -143,1 +143,0 @@\n-\n@@ -480,1 +479,2 @@\n-  \/\/ For ROP protection, Interpreter will have signed the sender_pc, but there is no requirement to authenticate it here.\n+  \/\/ For ROP protection, Interpreter will have signed the sender_pc,\n+  \/\/ but there is no requirement to authenticate it here.\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,3 @@\n-  : frame(sp, sp, *(intptr_t**)(sp - frame::sender_sp_offset), pauth_strip_verifiable(*(address*)(sp - 1))) {}\n+  : frame(sp, sp,\n+          *(intptr_t**)(sp - frame::sender_sp_offset),\n+          pauth_strip_verifiable(*(address*)(sp - 1))) {}\n@@ -421,2 +423,3 @@\n-  \/\/ the return_address is always the word on the stack\n-  \/\/ For ROP protection, C1\/C2 will have signed the sender_pc, but there is no requirement to authenticate it here.\n+  \/\/ The return_address is always the word on the stack.\n+  \/\/ For ROP protection, C1\/C2 will have signed the sender_pc,\n+  \/\/ but there is no requirement to authenticate it here.\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -7014,1 +7014,2 @@\n-      __ mov(r19, r0); \/\/ save return value containing the exception oop in callee-saved R19\n+      \/\/ save return value containing the exception oop in callee-saved R19\n+      __ mov(r19, r0);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -138,1 +138,2 @@\n-  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(\n+                 sp - frame::sender_sp_ret_address_offset());\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -302,1 +302,2 @@\n-  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(\n+                 sp - frame::sender_sp_ret_address_offset());\n@@ -595,1 +596,8 @@\n-    assert(ContinuationHelper::return_address_at(chunk->sp_address() - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n+#ifdef ASSERT\n+    {\n+      intptr_t* retaddr_slot = (chunk->sp_address()\n+                                - frame::sender_sp_ret_address_offset());\n+      assert(ContinuationHelper::return_address_at(retaddr_slot) == chunk->pc(),\n+             \"unexpected saved return address\");\n+    }\n+#endif\n@@ -609,2 +617,9 @@\n-    assert(ContinuationHelper::return_address_at(bottom_sp - frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(),\n-           \"should be the continuation return barrier\");\n+#ifdef ASSERT\n+    {\n+      intptr_t* retaddr_slot = (bottom_sp\n+                                - frame::sender_sp_ret_address_offset());\n+      assert(ContinuationHelper::return_address_at(retaddr_slot)\n+             == StubRoutines::cont_returnBarrier(),\n+             \"should be the continuation return barrier\");\n+    }\n+#endif\n@@ -680,1 +695,2 @@\n-    intptr_t* retaddr_slot = _orig_chunk_sp - frame::sender_sp_ret_address_offset();\n+    intptr_t* retaddr_slot = (_orig_chunk_sp\n+                              - frame::sender_sp_ret_address_offset());\n@@ -697,2 +713,4 @@\n-    intptr_t* retaddr_slot = chunk_bottom_sp - frame::sender_sp_ret_address_offset();\n-    assert(ContinuationHelper::return_address_at(retaddr_slot) == StubRoutines::cont_returnBarrier(),\n+    intptr_t* retaddr_slot = (chunk_bottom_sp\n+                              - frame::sender_sp_ret_address_offset());\n+    assert(ContinuationHelper::return_address_at(retaddr_slot)\n+           == StubRoutines::cont_returnBarrier(),\n@@ -702,1 +720,3 @@\n-  ContinuationHelper::patch_return_address_at(chunk_bottom_sp - frame::sender_sp_ret_address_offset(), chunk->pc());\n+  ContinuationHelper::patch_return_address_at(\n+    chunk_bottom_sp - frame::sender_sp_ret_address_offset(),\n+    chunk->pc());\n@@ -707,1 +727,2 @@\n-  chunk->set_pc(ContinuationHelper::return_address_at(_cont_stack_top - frame::sender_sp_ret_address_offset()));\n+  chunk->set_pc(ContinuationHelper::return_address_at(\n+                  _cont_stack_top - frame::sender_sp_ret_address_offset()));\n@@ -1861,1 +1882,9 @@\n-    assert(f.pc() == ContinuationHelper::return_address_at(chunk_sp + frame_size - frame::sender_sp_ret_address_offset()), \"unexpected pc\");\n+#ifdef ASSERT\n+    {\n+      intptr_t* retaddr_slot = (chunk_sp\n+                                + frame_size\n+                                - frame::sender_sp_ret_address_offset());\n+      assert(f.pc() == ContinuationHelper::return_address_at(retaddr_slot),\n+             \"unexpected pc\");\n+    }\n+#endif\n@@ -1881,1 +1910,3 @@\n-  ContinuationHelper::patch_return_address_at(sp - frame::sender_sp_ret_address_offset(), pc);\n+  ContinuationHelper::patch_return_address_at(\n+    sp - frame::sender_sp_ret_address_offset(),\n+    pc);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":42,"deletions":11,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-inline void ContinuationHelper::patch_return_address_at(intptr_t* sp, address pc) {\n+inline void ContinuationHelper::patch_return_address_at(intptr_t* sp,\n+                                                        address pc) {\n@@ -48,1 +49,1 @@\n-#endif\n+#endif \/\/ !CPU_OVERRIDES_RETURN_ADDRESS_ACCESSORS\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}