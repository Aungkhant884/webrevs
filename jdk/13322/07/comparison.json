{"files":[{"patch":"@@ -1724,2 +1724,2 @@\n-    st->print(\"ldr zr, [lr]\\n\\t\");\n-    st->print(\"pacia  lr, rfp\\n\\t\");\n+    st->print(\"ldr  zr, [lr]\\n\\t\");\n+    st->print(\"paciaz\\n\\t\");\n@@ -1854,2 +1854,2 @@\n-    st->print(\"autia lr, rfp\\n\\t\");\n-    st->print(\"ldr zr, [lr]\\n\\t\");\n+    st->print(\"autiaz\\n\\t\");\n+    st->print(\"ldr  zr, [lr]\\n\\t\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-    __ authenticate_return_address(exception_pc, rscratch1);\n+    __ authenticate_return_address(exception_pc);\n@@ -437,1 +437,1 @@\n-  __ protect_return_address(exception_pc, rscratch1);\n+  __ protect_return_address(exception_pc);\n@@ -453,1 +453,1 @@\n-  __ protect_return_address(r0, rscratch1);\n+  __ protect_return_address(r0);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  address sender_pc = (address) *(sender_sp-1);\n+  address sender_pc = ContinuationHelper::return_address_at(sender_sp - 1);\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,10 @@\n+#define CPU_OVERRIDES_RETURN_ADDRESS_ACCESSORS\n+\n+inline address ContinuationHelper::return_address_at(intptr_t* sp) {\n+  return pauth_strip_verifiable(*(address*)sp);\n+}\n+\n+inline void ContinuationHelper::patch_return_address_at(intptr_t* sp, address pc) {\n+  *(address*)sp = pauth_sign_return_address(pc);\n+}\n+\n@@ -83,1 +93,1 @@\n-  address pc = *(address*)(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n@@ -111,0 +121,1 @@\n+  \/\/ Always used in assertions. Just strip it.\n@@ -112,1 +123,1 @@\n-  return *pc_addr;\n+  return pauth_strip_pointer(*pc_addr);\n@@ -117,1 +128,1 @@\n-  *pc_addr = pc;\n+  *pc_addr = pauth_sign_return_address(pc);\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-      sender_pc = pauth_strip_verifiable((address) this->fp()[return_addr_offset], (address)saved_fp);\n+      sender_pc = pauth_strip_verifiable((address) this->fp()[return_addr_offset]);\n@@ -161,1 +161,3 @@\n-      sender_pc = pauth_strip_verifiable((address) *(sender_sp-1), (address)saved_fp);\n+      \/\/ Note: PAC authentication may fail in case broken frame is passed in.\n+      \/\/ Just strip it for now.\n+      sender_pc = pauth_strip_pointer((address) *(sender_sp - 1));\n@@ -279,3 +281,2 @@\n-  address signing_sp = (((address*) sp())[-2]);\n-  address signed_pc = pauth_sign_return_address(pc, (address)signing_sp);\n-  address pc_old = pauth_strip_verifiable(*pc_addr, (address)signing_sp);\n+  address signed_pc = pauth_sign_return_address(pc);\n+  address pc_old = pauth_strip_verifiable(*pc_addr);\n@@ -480,1 +481,1 @@\n-  address sender_pc = pauth_strip_verifiable(sender_pc_maybe_signed(), (address)link());\n+  address sender_pc = pauth_strip_verifiable(sender_pc_maybe_signed());\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -154,1 +154,2 @@\n-inline frame::frame(intptr_t* sp) : frame(sp, sp, *(intptr_t**)(sp - frame::sender_sp_offset), *(address*)(sp - 1)) {}\n+inline frame::frame(intptr_t* sp)\n+  : frame(sp, sp, *(intptr_t**)(sp - frame::sender_sp_offset), pauth_strip_verifiable(*(address*)(sp - 1))) {}\n@@ -422,1 +423,1 @@\n-  address sender_pc = pauth_strip_verifiable((address) *(l_sender_sp-1), (address) *(l_sender_sp-2));\n+  address sender_pc = pauth_strip_verifiable((address) *(l_sender_sp - 1));\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6070,1 +6070,1 @@\n-\/\/ Uses the FP as the modifier.\n+\/\/ Uses value zero as the modifier.\n@@ -6075,4 +6075,1 @@\n-    \/\/ The standard convention for C code is to use paciasp, which uses SP as the modifier. This\n-    \/\/ works because in C code, FP and SP match on function entry. In the JDK, SP and FP may not\n-    \/\/ match, so instead explicitly use the FP.\n-    pacia(lr, rfp);\n+    paciaz();\n@@ -6084,2 +6081,1 @@\n-\/\/ Uses the FP from the start of the function as the modifier - which is stored at the address of\n-\/\/ the current FP.\n+\/\/ Uses value zero as the modifier.\n@@ -6087,1 +6083,1 @@\n-void MacroAssembler::protect_return_address(Register return_reg, Register temp_reg) {\n+void MacroAssembler::protect_return_address(Register return_reg) {\n@@ -6089,1 +6085,0 @@\n-    assert(PreserveFramePointer, \"PreserveFramePointer must be set for ROP protection\");\n@@ -6091,2 +6086,1 @@\n-    ldr(temp_reg, Address(rfp));\n-    pacia(return_reg, temp_reg);\n+    paciza(return_reg);\n@@ -6097,0 +6091,1 @@\n+\/\/ Uses value zero as the modifier.\n@@ -6098,1 +6093,1 @@\n-void MacroAssembler::authenticate_return_address(Register return_reg) {\n+void MacroAssembler::authenticate_return_address() {\n@@ -6100,2 +6095,2 @@\n-    autia(return_reg, rfp);\n-    check_return_address(return_reg);\n+    autiaz();\n+    check_return_address();\n@@ -6107,2 +6102,1 @@\n-\/\/ Uses the FP from the start of the function as the modifier - which is stored at the address of\n-\/\/ the current FP.\n+\/\/ Uses value zero as the modifier.\n@@ -6110,1 +6104,1 @@\n-void MacroAssembler::authenticate_return_address(Register return_reg, Register temp_reg) {\n+void MacroAssembler::authenticate_return_address(Register return_reg) {\n@@ -6112,3 +6106,1 @@\n-    assert(PreserveFramePointer, \"PreserveFramePointer must be set for ROP protection\");\n-    ldr(temp_reg, Address(rfp));\n-    autia(return_reg, temp_reg);\n+    autiza(return_reg);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -720,3 +720,3 @@\n-  void protect_return_address(Register return_reg, Register temp_reg);\n-  void authenticate_return_address(Register return_reg = lr);\n-  void authenticate_return_address(Register return_reg, Register temp_reg);\n+  void protect_return_address(Register return_reg);\n+  void authenticate_return_address();\n+  void authenticate_return_address(Register return_reg);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2023, Arm Limited. All rights reserved.\n@@ -80,1 +80,1 @@\n-inline address pauth_strip_verifiable(address ret_addr, address modifier) {\n+inline address pauth_strip_verifiable(address ret_addr) {\n@@ -82,1 +82,1 @@\n-    DEBUG_ONLY(ret_addr = pauth_authenticate_return_address(ret_addr, modifier);)\n+    DEBUG_ONLY(ret_addr = pauth_authenticate_return_address(ret_addr);)\n","filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -393,1 +393,1 @@\n-  __ authenticate_return_address(c_rarg1, rscratch1);\n+  __ authenticate_return_address(c_rarg1);\n@@ -1170,0 +1170,1 @@\n+      __ authenticate_return_address(c_rarg1);\n@@ -2335,1 +2336,1 @@\n-  __ protect_return_address(r3, rscratch1);\n+  __ protect_return_address(r3);\n@@ -2441,3 +2442,1 @@\n-  __ ldp(rfp, lr, __ post(sp, 2 * wordSize));\n-  __ authenticate_return_address();\n-  \/\/ LR should now be the return address to the caller (3)\n+  __ ldp(rfp, zr, __ post(sp, 2 * wordSize));\n@@ -2658,3 +2657,1 @@\n-  __ ldp(rfp, lr, __ post(sp, 2 * wordSize));\n-  __ authenticate_return_address();\n-  \/\/ LR should now be the return address to the caller (3) frame\n+  __ ldp(rfp, zr, __ post(sp, 2 * wordSize));\n@@ -2806,1 +2803,1 @@\n-    __ protect_return_address(r20, rscratch1);\n+    __ protect_return_address(r20);\n@@ -2847,1 +2844,1 @@\n-    __ authenticate_return_address(r20, rscratch1);\n+    __ authenticate_return_address(r20);\n@@ -2862,1 +2859,1 @@\n-    __ protect_return_address(r20, rscratch1);\n+    __ protect_return_address(r20);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"pauth_aarch64.hpp\"\n@@ -55,1 +56,2 @@\n-  return *(address*)(_sp - 1);\n+  \/\/ Just strip it for frames on the heap.\n+  return pauth_strip_pointer(*(address*)(_sp - 1));\n","filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7012,0 +7012,1 @@\n+      __ authenticate_return_address(c_rarg1);\n@@ -7013,1 +7014,1 @@\n-      __ mov(r19, r0); \/\/ save return value contaning the exception oop in callee-saved R19\n+      __ mov(r19, r0); \/\/ save return value containing the exception oop in callee-saved R19\n@@ -7023,1 +7024,1 @@\n-      __ mov(r0, r19); \/\/ restore return value contaning the exception oop\n+      __ mov(r0, r19); \/\/ restore return value containing the exception oop\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1836,1 +1836,1 @@\n-    __ authenticate_return_address(c_rarg1, rscratch1);\n+    __ authenticate_return_address(c_rarg1);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,3 +448,2 @@\n-    \/\/ 1) this code has been built with branch-protection,\n-    \/\/ 2) the CPU\/OS supports it, and\n-    \/\/ 3) incompatible VMContinuations isn't enabled.\n+    \/\/ 1) this code has been built with branch-protection and\n+    \/\/ 2) the CPU\/OS supports it\n@@ -455,3 +454,0 @@\n-    } else if (VMContinuations) {\n-      \/\/ Not currently compatible with continuation freeze\/thaw.\n-      warning(\"ROP-protection is incompatible with VMContinuations. Disabling ROP-protection.\");\n@@ -472,6 +468,0 @@\n-\n-    \/\/ The frame pointer must be preserved for ROP protection.\n-    if (FLAG_IS_DEFAULT(PreserveFramePointer) == false && PreserveFramePointer == false ) {\n-      vm_exit_during_initialization(err_msg(\"PreserveFramePointer cannot be disabled for ROP-protection\"));\n-    }\n-    PreserveFramePointer = true;\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2023, Arm Limited. All rights reserved.\n@@ -36,1 +36,1 @@\n-inline address pauth_sign_return_address(address ret_addr, address sp) {\n+inline address pauth_sign_return_address(address ret_addr) {\n@@ -41,1 +41,1 @@\n-inline address pauth_authenticate_return_address(address ret_addr, address sp) {\n+inline address pauth_authenticate_return_address(address ret_addr) {\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2023, Arm Limited. All rights reserved.\n@@ -49,1 +49,1 @@\n-\/\/ Sign a return value, using the given modifier.\n+\/\/ Sign a return value, using value zero as the modifier.\n@@ -51,1 +51,1 @@\n-inline address pauth_sign_return_address(address ret_addr, address sp) {\n+inline address pauth_sign_return_address(address ret_addr) {\n@@ -56,1 +56,1 @@\n-    register address r16 __asm(\"r16\") = sp;\n+    register address r16 __asm(\"r16\") = 0;\n@@ -63,1 +63,1 @@\n-\/\/ Authenticate a return value, using the given modifier.\n+\/\/ Authenticate a return value, using value zero as the modifier.\n@@ -65,1 +65,1 @@\n-inline address pauth_authenticate_return_address(address ret_addr, address sp) {\n+inline address pauth_authenticate_return_address(address ret_addr) {\n@@ -68,1 +68,1 @@\n-    register address r16 __asm(\"r16\") = sp;\n+    register address r16 __asm(\"r16\") = 0;\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2023, Arm Limited. All rights reserved.\n@@ -36,1 +36,1 @@\n-inline address pauth_sign_return_address(address ret_addr, address sp) {\n+inline address pauth_sign_return_address(address ret_addr) {\n@@ -41,1 +41,1 @@\n-inline address pauth_authenticate_return_address(address ret_addr, address sp) {\n+inline address pauth_authenticate_return_address(address ret_addr) {\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/pauth_windows_aarch64.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1566,4 +1566,1 @@\n-  \/\/ This needs authenticating, but to do that here requires the fp of the previous frame.\n-  \/\/ A better way of doing it would be authenticate in the caller by adding a\n-  \/\/ AuthPAuthNode and using it in GraphKit::gen_stub. For now, just strip it.\n-  AARCH64_PORT_ONLY(ret_pc = pauth_strip_pointer(ret_pc));\n+  AARCH64_PORT_ONLY(ret_pc = pauth_strip_verifiable(ret_pc));\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/continuationHelper.inline.hpp\"\n@@ -137,1 +138,1 @@\n-  address pc = *(address*)(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-  address pc = *(address*)(sp - frame::sender_sp_ret_address_offset());\n+  address pc = ContinuationHelper::return_address_at(sp - frame::sender_sp_ret_address_offset());\n@@ -595,1 +595,1 @@\n-    assert(*(address*)(chunk->sp_address() - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n+    assert(ContinuationHelper::return_address_at(chunk->sp_address() - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n@@ -609,1 +609,1 @@\n-    assert(*(address*)(bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(),\n+    assert(ContinuationHelper::return_address_at(bottom_sp - frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(),\n@@ -678,1 +678,1 @@\n-  assert(_empty || *(address*)(_orig_chunk_sp - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n+  assert(_empty || ContinuationHelper::return_address_at(_orig_chunk_sp - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n@@ -689,2 +689,2 @@\n-  assert(_empty || *(address*)(chunk_bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n-  *(address*)(chunk_bottom_sp - frame::sender_sp_ret_address_offset()) = chunk->pc();\n+  assert(_empty || ContinuationHelper::return_address_at(chunk_bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n+  ContinuationHelper::patch_return_address_at(chunk_bottom_sp - frame::sender_sp_ret_address_offset(), chunk->pc());\n@@ -695,1 +695,1 @@\n-  chunk->set_pc(*(address*)(_cont_stack_top - frame::sender_sp_ret_address_offset()));\n+  chunk->set_pc(ContinuationHelper::return_address_at(_cont_stack_top - frame::sender_sp_ret_address_offset()));\n@@ -1849,1 +1849,1 @@\n-    assert(f.pc() == *(address*)(chunk_sp + frame_size - frame::sender_sp_ret_address_offset()), \"unexpected pc\");\n+    assert(f.pc() == ContinuationHelper::return_address_at(chunk_sp + frame_size - frame::sender_sp_ret_address_offset()), \"unexpected pc\");\n@@ -1869,1 +1869,1 @@\n-  *(address*)(sp - frame::sender_sp_ret_address_offset()) = pc;\n+  ContinuationHelper::patch_return_address_at(sp - frame::sender_sp_ret_address_offset(), pc);\n@@ -2406,1 +2406,0 @@\n-  address pc0 = *(address*)(sp - frame::sender_sp_ret_address_offset());\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,3 @@\n+  static inline address return_address_at(intptr_t* sp);\n+  static inline void patch_return_address_at(intptr_t* sp, address pc);\n+\n@@ -71,1 +74,1 @@\n-  static address return_pc(const frame& f) { return *return_pc_address(f); }\n+  static address return_pc(const frame& f);\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,10 @@\n+#ifndef CPU_OVERRIDES_RETURN_ADDRESS_ACCESSORS\n+inline address ContinuationHelper::return_address_at(intptr_t* sp) {\n+  return *(address*)sp;\n+}\n+\n+inline void ContinuationHelper::patch_return_address_at(intptr_t* sp, address pc) {\n+  *(address*)sp = pc;\n+}\n+#endif\n+\n@@ -52,0 +62,4 @@\n+inline address ContinuationHelper::Frame::return_pc(const frame& f) {\n+  return return_address_at((intptr_t *)return_pc_address(f));\n+}\n+\n@@ -78,1 +92,1 @@\n-  return *return_pc_address(f);\n+  return return_address_at((intptr_t *)return_pc_address(f));\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -258,1 +258,2 @@\n-            code.emitInt(0xdac103be);  \/\/ pacia x30, x29\n+            code.emitInt(0xf94003df);  \/\/ ldr xzr, [x30]\n+            code.emitInt(0xd503231f);  \/\/ paciaz\n@@ -260,2 +261,2 @@\n-        code.emitInt(0xa9be7bfd);  \/\/ stp x29, x30, [sp, #-32]!\n-        code.emitInt(0x910003fd);  \/\/ mov x29, sp\n+        code.emitInt(0xa9bf7bfd);      \/\/ stp x29, x30, [sp, #-16]!\n+        code.emitInt(0x910003fd);      \/\/ mov x29, sp\n@@ -471,2 +472,2 @@\n-        code.emitInt(0x910003bf);  \/\/ mov sp, x29\n-        code.emitInt(0xa8c27bfd);  \/\/ ldp x29, x30, [sp], #32\n+        code.emitInt(0x910003bf);      \/\/ mov sp, x29\n+        code.emitInt(0xa8c17bfd);      \/\/ ldp x29, x30, [sp], #16\n@@ -474,1 +475,2 @@\n-            code.emitInt(0xdac113be);  \/\/ autia x30, x29\n+            code.emitInt(0xd503239f);  \/\/ autiaz\n+            code.emitInt(0xf94003df);  \/\/ ldr xzr, [x30]\n@@ -476,1 +478,1 @@\n-        code.emitInt(0xd65f03c0);  \/\/ ret\n+        code.emitInt(0xd65f03c0);      \/\/ ret\n@@ -482,2 +484,2 @@\n-        code.emitInt(0x910003bf);  \/\/ mov sp, x29\n-        code.emitInt(0xa8c27bfd);  \/\/ ldp x29, x30, [sp], #32\n+        code.emitInt(0x910003bf);      \/\/ mov sp, x29\n+        code.emitInt(0xa8c17bfd);      \/\/ ldp x29, x30, [sp], #16\n@@ -485,1 +487,2 @@\n-            code.emitInt(0xdac113be);  \/\/ autia x30, x29\n+            code.emitInt(0xd503239f);  \/\/ autiaz\n+            code.emitInt(0xf94003df);  \/\/ ldr xzr, [x30]\n@@ -487,1 +490,1 @@\n-        code.emitInt(0xd65f03c0);  \/\/ ret\n+        code.emitInt(0xd65f03c0);      \/\/ ret\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"}]}