{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/concurrentHashTable.hpp\"\n@@ -283,1 +284,1 @@\n-    _table(mm, initial_log_table_size) {\n+    _table(mm, initial_log_table_size, false) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  _local_table  = new ResolvedMethodTableHash(ResolvedMethodTableSizeLog, END_SIZE, GROW_HINT);\n+  _local_table  = new ResolvedMethodTableHash(ResolvedMethodTableSizeLog, END_SIZE, GROW_HINT, nullptr, false);\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,2 @@\n-  _table = new FinalizerHashtable(start_size_log_2, MAX_SIZE);\n+  _table = new FinalizerHashtable(start_size_log_2, MAX_SIZE, FinalizerHashtable::DEFAULT_GROW_HINT,\n+                                  nullptr, false);\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -125,1 +125,2 @@\n-  _local_table = new ThreadIdTableHash(start_size_log, END_SIZE);\n+  _local_table = new ThreadIdTableHash(start_size_log, END_SIZE,\n+                                       ThreadIdTableHash::DEFAULT_GROW_HINT, nullptr, false);\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,16 @@\n+  \/\/ _stats_rate is null if statistics are not enabled.\n+  TableRateStatistics* _stats_rate  = nullptr;\n+  void safe_stats_add() {\n+    if (_stats_rate != nullptr) {\n+      _stats_rate->add();\n+    }\n+  }\n+  void safe_stats_remove() {\n+    if (_stats_rate != nullptr) {\n+      _stats_rate->remove();\n+    }\n+  }\n+  \/\/ Calculate statistics. Item sizes are calculated with VALUE_SIZE_FUNC.\n+  template <typename VALUE_SIZE_FUNC>\n+  TableStatistics statistics_calculate(Thread* thread, VALUE_SIZE_FUNC& vs_f);\n+\n@@ -212,5 +228,0 @@\n-  \/\/ Default sizes\n-  static const size_t DEFAULT_MAX_SIZE_LOG2 = 21;\n-  static const size_t DEFAULT_START_SIZE_LOG2 = 13;\n-  static const size_t DEFAULT_GROW_HINT = 4; \/\/ Chain length\n-\n@@ -379,0 +390,5 @@\n+  \/\/ Default sizes\n+  static const size_t DEFAULT_MAX_SIZE_LOG2 = 21;\n+  static const size_t DEFAULT_START_SIZE_LOG2 = 13;\n+  static const size_t DEFAULT_GROW_HINT = 4; \/\/ Chain length\n+  static const bool DEFAULT_ENABLE_STATISTICS = true;\n@@ -382,1 +398,2 @@\n-                      void* context = NULL);\n+                      void* context = nullptr,\n+                      bool enable_statistics = DEFAULT_ENABLE_STATISTICS);\n@@ -384,2 +401,2 @@\n-  explicit ConcurrentHashTable(void* context, size_t log2size = DEFAULT_START_SIZE_LOG2) :\n-    ConcurrentHashTable(log2size, DEFAULT_MAX_SIZE_LOG2, DEFAULT_GROW_HINT, context) {}\n+  explicit ConcurrentHashTable(void* context, size_t log2size = DEFAULT_START_SIZE_LOG2, bool enable_statistics = DEFAULT_ENABLE_STATISTICS) :\n+    ConcurrentHashTable(log2size, DEFAULT_MAX_SIZE_LOG2, DEFAULT_GROW_HINT, context, enable_statistics) {}\n@@ -389,2 +406,0 @@\n-  TableRateStatistics _stats_rate;\n-\n@@ -485,4 +500,0 @@\n-  \/\/ Calculate statistics. Item sizes are calculated with VALUE_SIZE_FUNC.\n-  template <typename VALUE_SIZE_FUNC>\n-  TableStatistics statistics_calculate(Thread* thread, VALUE_SIZE_FUNC& vs_f);\n-\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":25,"deletions":14,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-  JFR_ONLY(_stats_rate.remove();)\n+  JFR_ONLY(safe_stats_remove();)\n@@ -524,1 +524,1 @@\n-      JFR_ONLY(_stats_rate.remove();)\n+      JFR_ONLY(safe_stats_remove();)\n@@ -563,1 +563,1 @@\n-      JFR_ONLY(_stats_rate.remove();)\n+      JFR_ONLY(safe_stats_remove();)\n@@ -905,1 +905,1 @@\n-          JFR_ONLY(_stats_rate.add();)\n+          JFR_ONLY(safe_stats_add();)\n@@ -1010,1 +1010,1 @@\n-  ConcurrentHashTable(size_t log2size, size_t log2size_limit, size_t grow_hint, void* context)\n+ConcurrentHashTable(size_t log2size, size_t log2size_limit, size_t grow_hint, void* context, bool enable_statistics)\n@@ -1016,1 +1016,3 @@\n-  _stats_rate = TableRateStatistics();\n+  if (enable_statistics) {\n+    _stats_rate = new TableRateStatistics();\n+  }\n@@ -1031,0 +1033,1 @@\n+  delete _stats_rate;\n@@ -1105,1 +1108,1 @@\n-  JFR_ONLY(_stats_rate.add();)\n+  JFR_ONLY(safe_stats_add();)\n@@ -1227,1 +1230,1 @@\n-  return TableStatistics(_stats_rate, summary, literal_bytes, sizeof(Bucket), sizeof(Node));\n+  return TableStatistics(*_stats_rate, summary, literal_bytes, sizeof(Bucket), sizeof(Node));\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class TableRateStatistics : CHeapObj<mtStatistics> {\n+class TableRateStatistics : public CHeapObj<mtStatistics> {\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}