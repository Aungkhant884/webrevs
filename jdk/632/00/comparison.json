{"files":[{"patch":"@@ -120,4 +120,0 @@\n-                \/\/ Start from an \"empty\" heap.\n-                WHITE_BOX.fullGC();\n-                \/\/ The queue only holds all elements, so all humongous object\n-                \/\/ will be reachable and the concurrent operation should be a regular mark.\n@@ -127,0 +123,6 @@\n+                \/\/ At this point we keep humongousObjectAllocations humongous objects live\n+                \/\/ in \"a\" which is larger than the IHOP. We just waited for any pending\n+                \/\/ marking cycles. Another dummy allocation must trigger a humongous\n+                \/\/ allocation that is not an Undo Cycle.\n+                allocateHumongous(1, humongousObjectSize, new ArrayBlockingQueue(1));\n+                Helpers.waitTillCMCFinished(WHITE_BOX, 1);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}