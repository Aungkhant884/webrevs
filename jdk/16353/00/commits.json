[{"commit":{"message":"8315361: C2: Create a superclass of SuperWord\n\nAs discussed in JDK-8308994, we should first do some refactoring\nwork before proceeding with the new post loop vectorization. In\nthis patch, we have done the following refactoring. (Most of\nchanges are just moving the code around without real change on\nlogic.)\n\n1) We have created a superclass for shared data structures and\nutilities for C2's auto-vectorization.\n\n2) We have moved data structures for basic loop info and the\nfield _vector_loop_debug to the superclass. We also drop the\nclass member \"_visited\" and \"_post_visited\", and instead use\nlocal variables, namely allocating them when using them.\n\n3) Both two vectorizers traverse and store loop body nodes in\nRPO (Reverse Post-Order) separately. So we withdraw the logic\ninto a new function `collect_nodes_in_reverse_postorder()`, and\nmove the function and related data structures to the superclass.\nBefore, the code for counting the number of reduction uses is\nmixed in the RPO logic. Now, we have decoupled the code and put\nit into SuperWord separately.\n\nTested tier1~3 on x86 and AArch64."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/superword.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectorization.hpp"}],"sha":"b388240eb97fdff6ca4465d5d75dc3498ec7a31a"}]