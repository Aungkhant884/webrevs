{"files":[{"patch":"@@ -1838,3 +1838,4 @@\n-     * {@code position()}&nbsp;+&nbsp;{@code start}, and its limit will be\n-     * {@code position()}&nbsp;+&nbsp;{@code end}.  The new buffer will be\n-     * direct if, and only if, this buffer is direct, and it will be read-only\n+     * {@code position()}&nbsp;+&nbsp;{@code start}, its limit will be\n+     * {@code position()}&nbsp;+&nbsp;{@code end}, and its byte order\n+     * will be identical to that of this buffer. The new buffer will be direct\n+     * if, and only if, this buffer is direct, and it will be read-only\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+#if[char]\n+        ck(buf.subSequence(buf.position(), buf.remaining()).order(), expected);\n+        ck(buf.subSequence(buf.position(), buf.position()).order(), expected);\n+#end[char]\n@@ -55,0 +59,21 @@\n+#if[char]\n+        buf = $Type$Buffer.wrap(\"abcdefghijk\");\n+        ck(buf.order(), nord);\n+        ck$Type$Buffer(buf, nord);\n+\n+        buf = $Type$Buffer.wrap(\"abcdefghijk\", 0, 5);\n+        ck(buf.order(), nord);\n+        ck$Type$Buffer(buf, nord);\n+\n+        buf = $Type$Buffer.wrap(array).subSequence(0, LENGTH);\n+        ck(buf.order(), nord);\n+        ck$Type$Buffer(buf, nord);\n+\n+        buf = ByteBuffer.wrap(new byte[LENGTH]).as$Type$Buffer();\n+        ck(buf.order(), be);\n+        ck$Type$Buffer(buf, be);\n+\n+        buf = ByteBuffer.wrap(new byte[LENGTH]).order(le).as$Type$Buffer();\n+        ck(buf.order(), le);\n+        ck$Type$Buffer(buf, le);\n+#end[char]\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/Order-X.java.template","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+        ck(buf.subSequence(buf.position(), buf.remaining()).order(), expected);\n+        ck(buf.subSequence(buf.position(), buf.position()).order(), expected);\n+\n@@ -55,0 +59,21 @@\n+\n+        buf = CharBuffer.wrap(\"abcdefghijk\");\n+        ck(buf.order(), nord);\n+        ckCharBuffer(buf, nord);\n+\n+        buf = CharBuffer.wrap(\"abcdefghijk\", 0, 5);\n+        ck(buf.order(), nord);\n+        ckCharBuffer(buf, nord);\n+\n+        buf = CharBuffer.wrap(array).subSequence(0, LENGTH);\n+        ck(buf.order(), nord);\n+        ckCharBuffer(buf, nord);\n+\n+        buf = ByteBuffer.wrap(new byte[LENGTH]).asCharBuffer();\n+        ck(buf.order(), be);\n+        ckCharBuffer(buf, be);\n+\n+        buf = ByteBuffer.wrap(new byte[LENGTH]).order(le).asCharBuffer();\n+        ck(buf.order(), le);\n+        ckCharBuffer(buf, le);\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderChar.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+\n+\n+\n@@ -55,0 +59,21 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderDouble.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+\n+\n+\n@@ -55,0 +59,21 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderFloat.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+\n+\n+\n@@ -55,0 +59,21 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderInt.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+\n+\n+\n@@ -55,0 +59,21 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderLong.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+\n+\n+\n+\n@@ -55,0 +59,21 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -57,0 +82,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/OrderShort.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}