{"files":[{"patch":"@@ -107,1 +107,1 @@\n-    -serialwarn -encoding ISO-8859-1 -docencoding UTF-8 -breakiterator \\\n+    -encoding ISO-8859-1 -docencoding UTF-8 -breakiterator \\\n@@ -114,1 +114,1 @@\n-    -serialwarn -encoding ISO-8859-1 -breakiterator -splitIndex --system none \\\n+    -encoding ISO-8859-1 -breakiterator -splitIndex --system none \\\n","filename":"make\/Docs.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -406,10 +406,0 @@\n-    @Override\n-    public boolean showMessage(DocTreePath path, String key) {\n-        return (path == null || !haveDocLint());\n-    }\n-\n-    @Override\n-    public boolean showMessage(Element e, String key) {\n-        return (e == null || !haveDocLint());\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1057,4 +1057,6 @@\n-                    messages.warning(ch.getDocTreePath(see),\n-                            \"doclet.see.class_or_package_not_found\",\n-                            \"@\" + tagName,\n-                            seeText);\n+                    if (!configuration.isDocLintReferenceGroupEnabled()) {\n+                        messages.warning(ch.getDocTreePath(see),\n+                                \"doclet.see.class_or_package_not_found\",\n+                                \"@\" + tagName,\n+                                seeText);\n+                    }\n@@ -1110,3 +1112,5 @@\n-                    messages.warning(\n-                        ch.getDocTreePath(see), \"doclet.see.class_or_package_not_found\",\n-                        tagName, seeText);\n+                    if (!configuration.isDocLintReferenceGroupEnabled()) {\n+                        messages.warning(\n+                                ch.getDocTreePath(see), \"doclet.see.class_or_package_not_found\",\n+                                tagName, seeText);\n+                    }\n@@ -1602,1 +1606,3 @@\n-                            messages.warning(dtp, \"doclet.tag.invalid_input\", body);\n+                            if (!configuration.isDocLintSyntaxGroupEnabled()) {\n+                                messages.warning(dtp, \"doclet.tag.invalid_input\", body);\n+                            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.io.InputStream;\n@@ -63,1 +62,0 @@\n-import com.sun.source.util.DocTreePath;\n@@ -77,1 +75,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n@@ -88,0 +85,1 @@\n+import jdk.javadoc.internal.doclint.Env;\n@@ -643,4 +641,0 @@\n-    public abstract boolean showMessage(DocTreePath path, String key);\n-\n-    public abstract boolean showMessage(Element e, String key);\n-\n@@ -806,2 +800,14 @@\n-    public boolean haveDocLint() {\n-        return (doclint != null);\n+    public boolean isDocLintReferenceGroupEnabled() {\n+        return isDocLintGroupEnabled(jdk.javadoc.internal.doclint.Messages.Group.REFERENCE);\n+    }\n+\n+    public boolean isDocLintSyntaxGroupEnabled() {\n+        return isDocLintGroupEnabled(jdk.javadoc.internal.doclint.Messages.Group.SYNTAX);\n+    }\n+\n+    private boolean isDocLintGroupEnabled(jdk.javadoc.internal.doclint.Messages.Group group) {\n+        \/\/ Use AccessKind.PUBLIC as a stand-in, since it is not common to\n+        \/\/ set DocLint options per access kind (as is common with javac.)\n+        \/\/ A more sophisticated solution might be to derive the access kind from the\n+        \/\/ element owning the comment, and its enclosing elements.\n+        return doclint != null && doclint.isGroupEnabled(group, Env.AccessKind.PUBLIC);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseConfiguration.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -146,3 +146,1 @@\n-        if (configuration.showMessage(path, key)) {\n-            report(WARNING, path, resources.getText(key, args));\n-        }\n+        report(WARNING, path, resources.getText(key, args));\n@@ -173,3 +171,1 @@\n-        if (configuration.showMessage(e, key)) {\n-            report(WARNING, e, resources.getText(key, args));\n-        }\n+        report(WARNING, e, resources.getText(key, args));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Messages.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -225,1 +225,3 @@\n-                    messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                    if (!writer.configuration().isDocLintReferenceGroupEnabled()) {\n+                        messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                    }\n@@ -235,1 +237,3 @@\n-                        messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                        if (!writer.configuration().isDocLintReferenceGroupEnabled()) {\n+                            messages.warning(ch.getDocTreePath(dt), key, paramName);\n+                        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            if (!tags.isEmpty()) {\n+            if (!tags.isEmpty() && !writer.configuration().isDocLintReferenceGroupEnabled()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ReturnTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,0 +387,4 @@\n+    public boolean isGroupEnabled(Messages.Group group, Env.AccessKind accessKind) {\n+        return env.messages.isEnabled(group, accessKind);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/DocLint.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,0 +107,4 @@\n+    boolean isEnabled(Group group, Env.AccessKind ak) {\n+        return options.isEnabled(group, ak);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Messages.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8252717\n+ * @summary  Integrate\/merge legacy standard doclet diagnostics and doclint\n+ * @library  ..\/..\/lib \/tools\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestDocLintDocletMessages\n+ *\/\n+\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ * Some conditions may be detected by both DocLint and the Standard Doclet.\n+ * This test is to verify that in such cases, only one of those generates\n+ * a message.\n+ *\/\n+public class TestDocLintDocletMessages extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestDocLintDocletMessages tester = new TestDocLintDocletMessages();\n+        tester.runTests();\n+    }\n+\n+    final ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testSyntaxError(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * Comment.\n+                 * Bad < HTML.\n+                 * End of comment.\n+                 *\/\n+                public class C {\n+                    private C() { }\n+                }\n+                \"\"\");\n+\n+        var doclintResult = new Result(Exit.ERROR,\"C.java:3: error: malformed HTML\");\n+        var docletResult  = new Result(Exit.OK, \"C.java:3: warning: invalid input: '<'\");\n+\n+        testSingle(base, \"syntax\", doclintResult, docletResult);\n+    }\n+\n+    @Test\n+    public void testReferenceNotFoundError(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * Comment.\n+                 * @see DoesNotExist\n+                 *\/\n+                public class C {\n+                    private C() { }\n+                }\n+                \"\"\");\n+\n+        var doclintResult = new Result(Exit.ERROR, \"C.java:3: error: reference not found\");\n+        var docletResult  = new Result(Exit.OK, \"C.java:3: warning: Tag @see: reference not found: DoesNotExist\");\n+\n+        testSingle(base, \"reference\", doclintResult, docletResult);\n+    }\n+\n+    @Test\n+    public void testParamNotFoundError(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * Comment.\n+                 *\/\n+                public class C {\n+                    \/**\n+                     * Comment.\n+                     * @param y wrong name\n+                     *\/\n+                    public C(int x) { }\n+                }\n+                \"\"\");\n+\n+        var doclintResult = new Result(Exit.ERROR, \"C.java:7: error: @param name not found\");\n+        var docletResult  = new Result(Exit.OK, \"C.java:7: warning: @param argument \\\"y\\\" is not a parameter name.\");\n+\n+        testSingle(base, \"reference\", doclintResult, docletResult);\n+    }\n+\n+    @Test\n+    public void testParamDuplicateError(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * Comment.\n+                 *\/\n+                public class C {\n+                    \/**\n+                     * Comment.\n+                     * @param x first\n+                     * @param x second\n+                     *\/\n+                    public C(int x) { }\n+                }\n+                \"\"\");\n+\n+        var doclintResult = new Result(Exit.OK, \"C.java:8: warning: @param \\\"x\\\" has already been specified\");\n+        var docletResult  = new Result(Exit.OK, \"C.java:8: warning: Parameter \\\"x\\\" is documented more than once.\");\n+\n+        testSingle(base, \"reference\", doclintResult, docletResult);\n+    }\n+\n+    @Test\n+    public void testReturnOnVoid(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * Comment.\n+                 *\/\n+                public class C {\n+                    private C() { }\n+                    \/**\n+                     * Comment.\n+                     * @return nothing\n+                     *\/\n+                    public void m() { }\n+                }\n+                \"\"\");\n+\n+        var doclintResult = new Result(Exit.ERROR, \"C.java:8: error: invalid use of @return\");\n+        var docletResult  = new Result(Exit.OK, \"C.java:10: warning: @return tag cannot be used in method with void return type.\");\n+\n+        testSingle(base, \"reference\", doclintResult, docletResult);\n+    }\n+\n+    \/** Captures an expected exit code and diagnostic message. *\/\n+    record Result(Exit exit, String message) { }\n+\n+    void testSingle(Path base, String group, Result doclintResult, Result docletResult) {\n+        int index = 1;\n+\n+        \/\/ test options that should trigger the doclint message\n+        for (String o : List.of(\"\", \"-Xdoclint\", \"-Xdoclint:\" + group)) {\n+            testSingle(base, index++, o.isEmpty() ? List.of() : List.of(o), doclintResult, docletResult);\n+        }\n+\n+        \/\/ test options that should trigger the doclet message\n+        for (String o : List.of(\"-Xdoclint:none\", \"-Xdoclint:all,-\" + group)) {\n+            testSingle(base, index++, List.of(o), docletResult, doclintResult);\n+        }\n+    }\n+\n+    void testSingle(Path base, int index, List<String> options, Result expect, Result doNotExpect) {\n+        var allOptions = new ArrayList<String>();\n+        allOptions.addAll(List.of(\"-d\", base.resolve(\"out-\" + index).toString()));\n+        allOptions.addAll(options);\n+        allOptions.addAll(List.of(\"-noindex\", \"-nohelp\")); \/\/ omit unnecessary files\n+        allOptions.add(base.resolve(\"src\").resolve(\"C.java\").toString());\n+\n+        javadoc(allOptions.toArray(String[]::new));\n+        checkExit(expect.exit);\n+\n+        checkOutput(Output.OUT, true,expect.message);\n+\n+        \/\/ allow that the \"other\" result might be the same as the main result\n+        if (!doNotExpect.message.equals(expect.message)) {\n+            checkOutput(Output.OUT, false, doNotExpect.message);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDoclintDocletMessages\/TestDocLintDocletMessages.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -259,1 +259,1 @@\n-            if (ignore.matcher(line).matches())\n+            if (ignore.matcher(line).matches() || line.contains(\"javadoc.warn.message\"))\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/doclint\/DocLintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}