{"files":[{"patch":"@@ -572,0 +572,3 @@\n+\/\/ Return a Symbol for the input Java string. A new Symbol is created if one\n+\/\/ does not exist. If the length of the input string exceeds Symbol::max_length,\n+\/\/ the string is truncated to Symbol::max_length.\n@@ -575,0 +578,4 @@\n+  if (length > Symbol::max_length()) {\n+    length = Symbol::max_length();\n+  }\n+\n@@ -589,0 +596,2 @@\n+\/\/ Find the Symbol for the input Java string. If the length of the input string\n+\/\/ exceeds Symbol::max_length, the string is truncated to Symbol::max_length.\n@@ -592,0 +601,4 @@\n+  if (length > Symbol::max_length()) {\n+    length = Symbol::max_length();\n+  }\n+\n@@ -2764,1 +2777,0 @@\n-  Symbol* message = java_lang_Throwable::detail_message(throwable());\n@@ -2766,0 +2778,5 @@\n+  const char *message = nullptr;\n+  oop detailed_message = java_lang_Throwable::message(throwable());\n+  if (detailed_message != nullptr) {\n+    message = java_lang_String::as_utf8_string(detailed_message);\n+  }\n@@ -2772,1 +2789,1 @@\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message, current->name());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -191,0 +191,2 @@\n+  \/\/ If the length of the input string exceeds Symbol::max_length, the string\n+  \/\/ is truncated to Symbol::max_length.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -340,0 +340,1 @@\n+  assert(len <= Symbol::max_length(), \"sanity\");\n@@ -355,0 +356,1 @@\n+  assert(len <= Symbol::max_length(), \"sanity\");\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test to verify throwing an exception with extra long message does\n+ *          not cause hang.\n+ * @bug 8312401\n+ * @run main\/othervm LongExceptionMessageTest\n+ *\/\n+\n+class ClassWithLongExceptionMessage {\n+  static {\n+    if (true) throw new AssertionError(\"lorem ipsum \".repeat(16000));\n+  }\n+}\n+\n+public class LongExceptionMessageTest {\n+  public static void main(String[] args) {\n+    try {\n+      new ClassWithLongExceptionMessage();\n+    } catch(Throwable t) {}\n+  }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/LongExceptionMessageTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}