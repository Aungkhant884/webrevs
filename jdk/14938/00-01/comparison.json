{"files":[{"patch":"@@ -572,0 +572,3 @@\n+\/\/ Return a Symbol for the input Java string. A new Symbol is created if one\n+\/\/ does not exist. If the length of the input string exceeds Symbol::max_length,\n+\/\/ the string is truncated to Symbol::max_length.\n@@ -576,1 +579,1 @@\n-    return nullptr;\n+    length = Symbol::max_length();\n@@ -593,0 +596,2 @@\n+\/\/ Find the Symbol for the input Java string. If the length of the input string\n+\/\/ exceeds Symbol::max_length, the string is truncated to Symbol::max_length.\n@@ -596,0 +601,4 @@\n+  if (length > Symbol::max_length()) {\n+    length = Symbol::max_length();\n+  }\n+\n@@ -2088,1 +2097,0 @@\n-    \/\/ May return nullptrr if the message length > Symbol::max_length().\n@@ -2769,1 +2777,0 @@\n-  Symbol* message = java_lang_Throwable::detail_message(throwable());\n@@ -2771,0 +2778,5 @@\n+  const char *message = nullptr;\n+  oop detailed_message = java_lang_Throwable::message(throwable());\n+  if (detailed_message != nullptr) {\n+    message = java_lang_String::as_utf8_string(detailed_message);\n+  }\n@@ -2777,1 +2789,1 @@\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message, current->name());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -191,0 +191,2 @@\n+  \/\/ If the length of the input string exceeds Symbol::max_length, the string\n+  \/\/ is truncated to Symbol::max_length.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -340,0 +340,1 @@\n+  assert(len <= Symbol::max_length(), \"sanity\");\n@@ -355,0 +356,1 @@\n+  assert(len <= Symbol::max_length(), \"sanity\");\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}