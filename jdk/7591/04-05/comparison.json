{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/safefetch.inline.hpp\"\n@@ -154,1 +153,7 @@\n-inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), (intptr_t)NULL); }\n+inline intptr_t* frame::link_or_null() const {\n+  auto ptr = (intptr_t **)addr_at(link_offset);\n+  if (os::is_readable_pointer((const void*)ptr)) {\n+    return *ptr;\n+  }\n+  return NULL;\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/safefetch.inline.hpp\"\n@@ -130,1 +129,7 @@\n-inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), (intptr_t)NULL); }\n+inline intptr_t* frame::link_or_null() const {\n+  auto ptr = (intptr_t **)addr_at(link_offset);\n+  if (os::is_readable_pointer((const void*)ptr)) {\n+    return *ptr;\n+  }\n+  return NULL;\n+}\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/safefetch.inline.hpp\"\n@@ -144,1 +143,7 @@\n-inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), (intptr_t)NULL); }\n+inline intptr_t* frame::link_or_null() const {\n+  auto ptr = (intptr_t **)addr_at(link_offset);\n+  if (os::is_readable_pointer((const void*)ptr)) {\n+    return *ptr;\n+  }\n+  return NULL;\n+}\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1179,1 +1179,1 @@\n-\/\/ Returns false if this is the case\n+\/\/ Returns false if this is the cas\n@@ -1193,1 +1193,1 @@\n-  if ((usp & sp_align_mask) != 0 || SafeFetchN(fr->sp(), (intptr_t)0) == 0) return true;\n+  if ((usp & sp_align_mask) != 0 || !os::is_readable_pointer((const void*)usp)) return true;\n@@ -1196,1 +1196,1 @@\n-  if ((ufp & fp_align_mask) != 0 || SafeFetchN(fr->fp(), (intptr_t)0) == 0) return true;\n+  if ((ufp & fp_align_mask) != 0 || !os::is_readable_pointer((const void*)ufp)) return true;\n@@ -1201,1 +1201,1 @@\n-    SafeFetchN(fr->sender_sp(), (intptr_t)0) == 0) return true;\n+    !os::is_readable_pointer((const void*)old_sp)) return true;\n@@ -1206,1 +1206,1 @@\n-    SafeFetchN((intptr_t*)old_fp, (intptr_t)0) == 0) return true;\n+    !os::is_readable_pointer((const void*)old_fp)) return true;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -212,1 +212,33 @@\n-#ifndef _WIN32\n+TEST_VM(os, iso8601_time) {\n+  char buffer[os::iso8601_timestamp_size + 1]; \/\/ + space for canary\n+  buffer[os::iso8601_timestamp_size] = 'X'; \/\/ canary\n+  const char* result = NULL;\n+  \/\/ YYYY-MM-DDThh:mm:ss.mmm+zzzz\n+  const char* const pattern_utc = \"dddd-dd-dd.dd:dd:dd.ddd.0000\";\n+  const char* const pattern_local = \"dddd-dd-dd.dd:dd:dd.ddd.dddd\";\n+\n+  result = os::iso8601_time(buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(pattern_utc, result));\n+\n+  result = os::iso8601_time(buffer, sizeof(buffer), false);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(pattern_local, result));\n+\n+  \/\/ Test with explicit timestamps\n+  result = os::iso8601_time(0, buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(\"1970-01-01.00:00:00.000+0000\", result));\n+\n+  result = os::iso8601_time(17, buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(\"1970-01-01.00:00:00.017+0000\", result));\n+\n+  \/\/ Canary should still be intact\n+  EXPECT_EQ(buffer[os::iso8601_timestamp_size], 'X');\n+}\n+\n@@ -868,0 +900,13 @@\n+\n+\n+TEST_VM(os, is_first_C_frame) {\n+  #ifndef _WIN32\n+  \n+  frame invalid_frame;\n+  EXPECT_TRUE(os::is_first_C_frame(&invalid_frame)); \/\/ the frame has zeroes for all values\n+\n+  auto cur_frame = os::current_frame(); \/\/ this frame has to have a sender\n+  EXPECT_FALSE(!os::is_first_C_frame(&cur_frame));\n+\n+  #endif \/\/ _WIN32\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}