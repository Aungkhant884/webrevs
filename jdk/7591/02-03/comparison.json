{"files":[{"patch":"@@ -152,0 +152,1 @@\n+inline intptr_t* frame::link() const              { return (intptr_t*) *(intptr_t **)addr_at(link_offset); }\n@@ -153,2 +154,1 @@\n-\n-inline intptr_t* frame::link() const              { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n+inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+inline intptr_t* frame::link() const              { return (intptr_t*) *(intptr_t **)addr_at(link_offset); }\n@@ -129,1 +130,1 @@\n-inline intptr_t* frame::link() const              { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n+inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -120,0 +120,4 @@\n+inline intptr_t* frame::link_or_null() const {\n+  return link();\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,0 +158,4 @@\n+inline intptr_t* frame::link_or_null() const {\n+  return link();\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+inline intptr_t* frame::link() const              { return (intptr_t*) *(intptr_t **)addr_at(link_offset); }\n@@ -143,2 +144,1 @@\n-\n-inline intptr_t* frame::link() const              { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n+inline intptr_t* frame::link_or_null() const      { return (intptr_t*) SafeFetchN((intptr_t *)addr_at(link_offset), NULL); }\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,5 @@\n+inline intptr_t* frame::link_or_null() const {\n+  ShouldNotCallThis();\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -210,0 +210,1 @@\n+  \/\/ might crash if the frame has no parent\n@@ -212,0 +213,3 @@\n+  \/\/ Link (i.e., the pointer to the previous frame) or null if the link cannot be accessed\n+  intptr_t* link_or_null() const;\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1179,0 +1179,1 @@\n+\/\/ Returns false if this is the case\n@@ -1199,1 +1200,2 @@\n-  if (old_sp == 0 || old_sp == (uintptr_t)-1 || SafeFetchN(fr->sender_sp(), 0) == 0) return true;\n+  if (old_sp == 0 || old_sp == (uintptr_t)-1 ||\n+    SafeFetchN(fr->sender_sp(), 0) == 0) return true;\n@@ -1201,3 +1203,4 @@\n-  uintptr_t old_fp = (uintptr_t)fr->link();\n-  if ((old_fp & fp_align_mask) == 0) return true;\n-  if (old_fp == 0 || old_fp == (uintptr_t)-1 || old_fp == ufp || SafeFetchN(fr->link(), 0) == 0) return true;\n+  uintptr_t old_fp = (uintptr_t)fr->link_or_null();\n+  if ((old_fp & fp_align_mask) != 0) return true;\n+  if (old_fp == 0 || old_fp == (uintptr_t)-1 || old_fp == ufp ||\n+    SafeFetchN((intptr_t*)old_fp, 0) == 0) return true;\n@@ -1214,0 +1217,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}