{"files":[{"patch":"@@ -151,2 +151,0 @@\n-\n-\n@@ -155,0 +153,4 @@\n+inline intptr_t* frame::link_or_null() const {\n+  intptr_t** ptr = (intptr_t **)addr_at(link_offset);\n+  return os::is_readable_pointer(ptr) ? *ptr : NULL;\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-\n@@ -130,0 +129,5 @@\n+inline intptr_t* frame::link_or_null() const {\n+  intptr_t** ptr = (intptr_t **)addr_at(link_offset);\n+  return os::is_readable_pointer(ptr) ? *ptr : NULL;\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -120,0 +120,4 @@\n+inline intptr_t* frame::link_or_null() const {\n+  return link();\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,0 +158,4 @@\n+inline intptr_t* frame::link_or_null() const {\n+  return link();\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,2 +141,0 @@\n-\n-\n@@ -145,0 +143,5 @@\n+inline intptr_t* frame::link_or_null() const {\n+  intptr_t** ptr = (intptr_t **)addr_at(link_offset);\n+  return os::is_readable_pointer(ptr) ? *ptr : NULL;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -85,0 +85,5 @@\n+inline intptr_t* frame::link_or_null() const {\n+  ShouldNotCallThis();\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -210,0 +210,1 @@\n+  \/\/ might crash if the frame has no parent\n@@ -212,0 +213,3 @@\n+  \/\/ Link (i.e., the pointer to the previous frame) or null if the link cannot be accessed\n+  intptr_t* link_or_null() const;\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1177,0 +1177,4 @@\n+bool is_pointer_bad(intptr_t* ptr) {\n+  return !is_aligned(ptr, sizeof(uintptr_t)) || !os::is_readable_pointer(ptr);\n+}\n+\n@@ -1179,0 +1183,1 @@\n+\/\/ Returns false if this is the cas\n@@ -1184,1 +1189,0 @@\n-\n@@ -1188,3 +1192,0 @@\n-  uintptr_t fp_align_mask = (uintptr_t)(sizeof(address)-1);\n-  \/\/ sp on amd can be 32 bit aligned.\n-  uintptr_t sp_align_mask = (uintptr_t)(sizeof(int)-1);\n@@ -1192,2 +1193,1 @@\n-  uintptr_t usp    = (uintptr_t)fr->sp();\n-  if ((usp & sp_align_mask) != 0) return true;\n+  if (is_pointer_bad(fr->sp())) return true;\n@@ -1196,1 +1196,1 @@\n-  if ((ufp & fp_align_mask) != 0) return true;\n+  if (is_pointer_bad(fr->fp())) return true;\n@@ -1199,2 +1199,1 @@\n-  if ((old_sp & sp_align_mask) != 0) return true;\n-  if (old_sp == 0 || old_sp == (uintptr_t)-1) return true;\n+  if ((uintptr_t)fr->sender_sp() == (uintptr_t)-1 || is_pointer_bad(fr->sender_sp())) return true;\n@@ -1202,3 +1201,3 @@\n-  uintptr_t old_fp = (uintptr_t)fr->link();\n-  if ((old_fp & fp_align_mask) != 0) return true;\n-  if (old_fp == 0 || old_fp == (uintptr_t)-1 || old_fp == ufp) return true;\n+  uintptr_t old_fp = (uintptr_t)fr->link_or_null();\n+  if (old_fp == 0 || old_fp == (uintptr_t)-1 || old_fp == ufp ||\n+    is_pointer_bad(fr->link_or_null())) return true;\n@@ -1216,1 +1215,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -339,2 +339,0 @@\n-  register_thread_stack_with_NMT();\n-\n@@ -343,0 +341,2 @@\n+  register_thread_stack_with_NMT();\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/frame.inline.hpp\"\n@@ -868,0 +869,10 @@\n+\n+TEST_VM(os, is_first_C_frame) {\n+  #ifndef _WIN32\n+  frame invalid_frame;\n+  EXPECT_TRUE(os::is_first_C_frame(&invalid_frame)); \/\/ the frame has zeroes for all values\n+\n+  frame cur_frame = os::current_frame(); \/\/ this frame has to have a sender\n+  EXPECT_FALSE(os::is_first_C_frame(&cur_frame));\n+  #endif \/\/ _WIN32\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}