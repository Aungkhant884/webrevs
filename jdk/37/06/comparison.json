{"files":[{"patch":"@@ -104,1 +104,1 @@\n-  JavaThread *thread = (JavaThread*)Thread::current();\n+  JavaThread *thread = JavaThread::current();\n@@ -114,3 +114,0 @@\n-    Thread* thread = Thread::current();\n-    assert(thread->is_Java_thread(), \"must be JavaThread\");\n-    JavaThread* jth = (JavaThread*) thread;\n@@ -120,2 +117,2 @@\n-                                nm, *(address *) return_address_ptr, nm->is_osr_method(), jth,\n-                                jth->get_thread_name(), frame.sp(), nm->verified_entry_point());\n+                                nm, *(address *) return_address_ptr, nm->is_osr_method(), thread,\n+                                thread->get_thread_name(), frame.sp(), nm->verified_entry_point());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,3 +131,1 @@\n-    Thread* thread = Thread::current();\n-    assert(thread->is_Java_thread(), \"must be JavaThread\");\n-    JavaThread* jth = (JavaThread*) thread;\n+    JavaThread* jth = JavaThread::current();\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    get_interpreterState()->set_thread((JavaThread *) thread);\n+    get_interpreterState()->set_thread(thread->as_Java_thread());\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -58,1 +58,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -73,1 +73,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -104,1 +104,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -135,1 +135,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -175,1 +175,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/cpu\/zero\/stack_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-    JavaThread *thread = (JavaThread *) THREAD;\n+    JavaThread *thread = THREAD->as_Java_thread();\n@@ -319,1 +319,1 @@\n-  ZeroStack *stack = ((JavaThread *) THREAD)->zero_stack();\n+  ZeroStack *stack = THREAD->as_Java_thread()->zero_stack();\n","filename":"src\/hotspot\/cpu\/zero\/stubGenerator_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -147,1 +147,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -280,1 +280,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -549,1 +549,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -682,1 +682,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -701,1 +701,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -715,1 +715,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -748,1 +748,1 @@\n-  JavaThread *thread = (JavaThread *) THREAD;\n+  JavaThread *thread = THREAD->as_Java_thread();\n@@ -824,1 +824,1 @@\n-  ZeroStack *stack = ((JavaThread *) THREAD)->zero_stack();\n+  ZeroStack *stack = THREAD->as_Java_thread()->zero_stack();\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1043,2 +1043,1 @@\n-    JavaThread *jt = (JavaThread *)thread;\n-    address addr = jt->stack_reserved_zone_base();\n+    address addr = thread->stack_reserved_zone_base();\n@@ -1046,1 +1045,1 @@\n-    assert(jt->stack_available(addr) > 0, \"stack guard should not be enabled\");\n+    assert(thread->stack_available(addr) > 0, \"stack guard should not be enabled\");\n@@ -1049,1 +1048,1 @@\n-    os::Linux::manually_expand_stack(jt, addr);\n+    os::Linux::manually_expand_stack(thread, addr);\n@@ -1784,1 +1783,0 @@\n-        assert(Thread::current()->is_Java_thread(), \"must be Java thread\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2076,3 +2076,1 @@\n-  Thread* thread = Thread::current();\n-  assert(thread->is_Java_thread(), \"Must be JavaThread\");\n-  JavaThread *jt = (JavaThread *)thread;\n+  JavaThread *jt = JavaThread::current();\n@@ -2123,1 +2121,1 @@\n-  OSThreadWaitState osts(thread->osthread(), false \/* not Object.wait() *\/);\n+  OSThreadWaitState osts(jt->osthread(), false \/* not Object.wait() *\/);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2139,1 +2139,1 @@\n-  JavaThread* thread = (JavaThread*) Thread::current_or_null();\n+  Thread* thread = Thread::current_or_null();\n@@ -2143,2 +2143,2 @@\n-  if (thread) {\n-    thread->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Rip);\n+  if (thread != NULL) {\n+    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Rip);\n@@ -2150,2 +2150,2 @@\n-  if (thread) {\n-    thread->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Eip);\n+  if (thread != NULL) {\n+    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Eip);\n@@ -2480,1 +2480,1 @@\n-    JavaThread* thread = (JavaThread*) t;\n+    JavaThread* thread = t->as_Java_thread();\n@@ -2573,1 +2573,0 @@\n-      JavaThread* thread = (JavaThread*)t;\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n-  JavaThread* jt = (JavaThread *)this;\n-\n@@ -54,2 +51,2 @@\n-  if (jt->has_last_Java_frame() && jt->frame_anchor()->walkable()) {\n-    *fr_addr = jt->pd_last_frame();\n+  if (has_last_Java_frame() && frame_anchor()->walkable()) {\n+    *fr_addr = pd_last_frame();\n@@ -80,1 +77,1 @@\n-    if (!ret_frame.safe_for_sender(jt)) {\n+    if (!ret_frame.safe_for_sender(this)) {\n@@ -84,1 +81,1 @@\n-      if (!ret_frame2.safe_for_sender(jt)) {\n+      if (!ret_frame2.safe_for_sender(this)) {\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/thread_bsd_x86.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,3 +50,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n-  JavaThread* jt = (JavaThread *)this;\n-\n@@ -55,2 +52,2 @@\n-  if (jt->has_last_Java_frame() && jt->frame_anchor()->walkable()) {\n-    *fr_addr = jt->pd_last_frame();\n+  if (has_last_Java_frame() && frame_anchor()->walkable()) {\n+    *fr_addr = pd_last_frame();\n@@ -81,1 +78,1 @@\n-    if (!ret_frame.safe_for_sender(jt)) {\n+    if (!ret_frame.safe_for_sender(this)) {\n@@ -84,1 +81,1 @@\n-      if (!ret_frame2.safe_for_sender(jt)) {\n+      if (!ret_frame2.safe_for_sender(this)) {\n@@ -103,1 +100,0 @@\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/thread_linux_aarch64.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,4 +77,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n-\n-  JavaThread* jt = (JavaThread *)this;\n-\n@@ -83,2 +79,2 @@\n-  if (jt->has_last_Java_frame()) {\n-    *fr_addr = jt->pd_last_frame();\n+  if (has_last_Java_frame()) {\n+    *fr_addr = pd_last_frame();\n@@ -90,1 +86,1 @@\n-  if (jt->in_top_frame_unsafe_section()) {\n+  if (in_top_frame_unsafe_section()) {\n@@ -115,1 +111,1 @@\n-    if (!ret_frame.safe_for_sender(jt)) {\n+    if (!ret_frame.safe_for_sender(this)) {\n@@ -119,1 +115,1 @@\n-      if (!ret_frame2.safe_for_sender(jt)) {\n+      if (!ret_frame2.safe_for_sender(this)) {\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/thread_linux_arm.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/thread_linux_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/thread_linux_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,3 +50,0 @@\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n-  JavaThread* jt = (JavaThread *)this;\n-\n@@ -55,2 +52,2 @@\n-  if (jt->has_last_Java_frame() && jt->frame_anchor()->walkable()) {\n-    *fr_addr = jt->pd_last_frame();\n+  if (has_last_Java_frame() && frame_anchor()->walkable()) {\n+    *fr_addr = pd_last_frame();\n@@ -81,1 +78,1 @@\n-    if (!ret_frame.safe_for_sender(jt)) {\n+    if (!ret_frame.safe_for_sender(this)) {\n@@ -85,1 +82,1 @@\n-      if (!ret_frame2.safe_for_sender(jt)) {\n+      if (!ret_frame2.safe_for_sender(this)) {\n@@ -104,1 +101,0 @@\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/thread_linux_x86.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-        thread = (JavaThread*)t;\n+        thread = t->as_Java_thread();\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,5 +50,0 @@\n-\n-  assert(this->is_Java_thread(), \"must be JavaThread\");\n-\n-  JavaThread* jt = (JavaThread *)this;\n-\n@@ -57,2 +52,2 @@\n-  if (jt->has_last_Java_frame() && jt->frame_anchor()->walkable()) {\n-    *fr_addr = jt->pd_last_frame();\n+  if (has_last_Java_frame() && frame_anchor()->walkable()) {\n+    *fr_addr = pd_last_frame();\n@@ -78,1 +73,1 @@\n-    if (!ret_frame.safe_for_sender(jt)) {\n+    if (!ret_frame.safe_for_sender(this)) {\n@@ -82,1 +77,1 @@\n-      if (!ret_frame2.safe_for_sender(jt)) {\n+      if (!ret_frame2.safe_for_sender(this)) {\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/thread_windows_x86.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1244,1 +1244,1 @@\n-    bool has_unloaded = Method::has_unloaded_classes_in_signature(m, (JavaThread *)THREAD);\n+    bool has_unloaded = Method::has_unloaded_classes_in_signature(m, thread);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-                               ((JavaThread*) THREAD)->get_thread_stat()->perf_timers_addr(),\n+                               THREAD->as_Java_thread()->get_thread_stat()->perf_timers_addr(),\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -411,2 +411,1 @@\n-    assert(THREAD->is_Java_thread(), \"must be java thread\");\n-    JavaThread* thread = (JavaThread*)THREAD;\n+    JavaThread* thread = THREAD->as_Java_thread();\n@@ -438,2 +437,1 @@\n-  { JavaThread* thread = (JavaThread*)THREAD;\n-    assert(thread->is_Java_thread(), \"must be java thread\");\n+  { JavaThread* thread = THREAD->as_Java_thread();\n@@ -2419,1 +2417,1 @@\n-  JavaThread* thread = (JavaThread*)THREAD;\n+  JavaThread* thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,2 +123,1 @@\n-    assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n-    const JavaThread* jt = (JavaThread*)THREAD;\n+    const JavaThread* jt = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-      = ObjectSynchronizer::current_thread_holds_lock((JavaThread*)THREAD, lockObject);\n+      = ObjectSynchronizer::current_thread_holds_lock(THREAD->as_Java_thread(), lockObject);\n@@ -901,3 +901,1 @@\n-            Thread *thread = THREAD;\n-            assert(thread->is_Java_thread(), \"thread->is_Java_thread()\");\n-            JvmtiExport::post_class_load((JavaThread *) thread, k);\n+            JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n@@ -1087,2 +1085,1 @@\n-        assert(THREAD->is_Java_thread(), \"thread->is_Java_thread()\");\n-        JvmtiExport::post_class_load((JavaThread *) THREAD, k);\n+      JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n@@ -1586,2 +1583,1 @@\n-    assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n-    JavaThread* jt = (JavaThread*) THREAD;\n+    JavaThread* jt = THREAD->as_Java_thread();\n@@ -1650,9 +1646,9 @@\n- \/\/ for bootstrap and other parallel classloaders don't acquire lock,\n- \/\/ use placeholder token\n- \/\/ If a parallelCapable class loader calls define_instance_class instead of\n- \/\/ find_or_define_instance_class to get here, we have a timing\n- \/\/ hole with systemDictionary updates and check_constraints\n- if (!class_loader_h.is_null() && !is_parallelCapable(class_loader_h)) {\n-    assert(ObjectSynchronizer::current_thread_holds_lock((JavaThread*)THREAD,\n-         compute_loader_lock_object(class_loader_h, THREAD)),\n-         \"define called without lock\");\n+  \/\/ for bootstrap and other parallel classloaders don't acquire lock,\n+  \/\/ use placeholder token\n+  \/\/ If a parallelCapable class loader calls define_instance_class instead of\n+  \/\/ find_or_define_instance_class to get here, we have a timing\n+  \/\/ hole with systemDictionary updates and check_constraints\n+  if (!class_loader_h.is_null() && !is_parallelCapable(class_loader_h)) {\n+    assert(ObjectSynchronizer::current_thread_holds_lock(THREAD->as_Java_thread(),\n+           compute_loader_lock_object(class_loader_h, THREAD)),\n+           \"define called without lock\");\n@@ -1708,3 +1704,1 @@\n-      assert(THREAD->is_Java_thread(), \"thread->is_Java_thread()\");\n-      JvmtiExport::post_class_load((JavaThread *) THREAD, k);\n-\n+    JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n@@ -1835,1 +1829,1 @@\n-  if (ObjectSynchronizer::query_lock_ownership((JavaThread*)THREAD, loader_lock)\n+  if (ObjectSynchronizer::query_lock_ownership(THREAD->as_Java_thread(), loader_lock)\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1619,2 +1619,1 @@\n-    assert(THREAD->is_Java_thread(), \"thread->is_Java_thread()\");\n-    JvmtiExport::post_class_load((JavaThread *) THREAD, loaded_lambda);\n+    JvmtiExport::post_class_load(THREAD->as_Java_thread(), loaded_lambda);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  JavaThread* jt = (JavaThread*)THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n@@ -299,1 +299,1 @@\n-  JavaThread* thread = (JavaThread*)THREAD;\n+  JavaThread* thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/vmThread.hpp\"\n@@ -51,1 +52,1 @@\n-    return ((JavaThread*)thread)->thread_state() == _thread_in_vm;\n+    return thread->as_Java_thread()->thread_state() == _thread_in_vm;\n@@ -53,1 +54,1 @@\n-    return true;  \/\/something like this: thread->is_VM_thread();\n+    return thread->is_VM_thread();\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1186,1 +1186,1 @@\n-        vframeStream vfst((JavaThread*) thread);\n+        vframeStream vfst(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1741,2 +1741,1 @@\n-        JavaThread* jt = (JavaThread*)thread;\n-        jt->nmethods_do(&_code_cl);\n+        thread->as_Java_thread()->nmethods_do(&_code_cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,1 +190,1 @@\n-    flush_deferred_card_mark_barrier((JavaThread*)thread);\n+    flush_deferred_card_mark_barrier(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,2 +209,1 @@\n-          JavaThread* jt = (JavaThread*)thread;\n-          jt->nmethods_do(_code_cl);\n+          thread->as_Java_thread()->nmethods_do(_code_cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2165,1 +2165,2 @@\n-    if (Thread::current()->is_Java_thread()) {\n+    Thread* thread = Thread::current();\n+    if (thread->is_Java_thread()) {\n@@ -2168,1 +2169,1 @@\n-      ThreadBlockInVM sp(JavaThread::current());\n+      ThreadBlockInVM sp(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    _sema.wait_with_safepoint_check((JavaThread*)thread);\n+    _sema.wait_with_safepoint_check(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/gc\/z\/zFuture.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-      ThreadBlockInVM tbivm((JavaThread*)_thread);\n+      ThreadBlockInVM tbivm(_thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,6 +71,0 @@\n-static JavaThread* current_java_thread() {\n-  Thread* this_thread = Thread::current();\n-  assert(this_thread != NULL && this_thread->is_Java_thread(), \"invariant\");\n-  return static_cast<JavaThread*>(this_thread);\n-}\n-\n@@ -107,1 +101,1 @@\n-  ThreadInVMfromNative tvmfn((JavaThread*)THREAD);\n+  ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n@@ -124,1 +118,1 @@\n-    ThreadInVMfromNative tvmfn((JavaThread*)THREAD);\n+    ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n@@ -145,1 +139,1 @@\n-    ThreadInVMfromNative tvmfn((JavaThread*)THREAD);\n+    ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n@@ -174,1 +168,1 @@\n-    ThreadInVMfromNative transition((JavaThread*)THREAD);\n+    ThreadInVMfromNative transition(THREAD->as_Java_thread());\n@@ -236,1 +230,1 @@\n-  JavaThread* jt = current_java_thread();\n+  JavaThread* jt = JavaThread::current();\n@@ -276,1 +270,1 @@\n-  JavaThread* const jt = current_java_thread();\n+  JavaThread* const jt = JavaThread::current();\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-  assert(t->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread*)t)->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(t->as_Java_thread()->thread_state() == _thread_in_vm, \"invariant\");\n@@ -60,2 +59,1 @@\n-  assert(t->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread*)t)->thread_state() == _thread_in_native, \"invariant\");\n+  assert(t->as_Java_thread()->thread_state() == _thread_in_native, \"invariant\");\n@@ -66,2 +64,1 @@\n-  assert(t->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread*)t)->thread_state() == _thread_new, \"invariant\");\n+  assert(t->as_Java_thread()->thread_state() == _thread_new, \"invariant\");\n@@ -839,1 +836,1 @@\n-  if (check_exclusion_state_on_thread_start((JavaThread*)t)) {\n+  if (check_exclusion_state_on_thread_start(t->as_Java_thread())) {\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-  Thread* const thread = Thread::current();\n+  JavaThread* const thread = JavaThread::current();\n@@ -267,1 +267,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)thread);\n+  ThreadInVMfromNative transition(thread);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-    ThreadToNativeFromVM transition((JavaThread*)Thread::current());\n+    ThreadToNativeFromVM transition(JavaThread::current());\n@@ -262,1 +262,1 @@\n-    ThreadToNativeFromVM transition((JavaThread*)Thread::current());\n+    ThreadToNativeFromVM transition(JavaThread::current());\n@@ -646,1 +646,0 @@\n-\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  JavaThread* jth = (JavaThread*)context.thread();\n+  JavaThread* jth = context.thread()->as_Java_thread();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)thread);\n+  ThreadInVMfromNative transition(thread->as_Java_thread());\n@@ -415,1 +415,1 @@\n-  Thread* t = Thread::current();\n+  JavaThread* t = JavaThread::current();\n@@ -418,1 +418,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)t);\n+  ThreadInVMfromNative transition(t);\n@@ -427,1 +427,1 @@\n-    Thread* const thread = Thread::current();\n+    JavaThread* const thread = JavaThread::current();\n@@ -430,1 +430,1 @@\n-    ThreadInVMfromNative transition((JavaThread*)thread);\n+    ThreadInVMfromNative transition(thread);\n@@ -470,1 +470,1 @@\n-      ThreadInVMfromNative transition((JavaThread*)thread);\n+      ThreadInVMfromNative transition(thread->as_Java_thread());\n@@ -499,1 +499,0 @@\n-    assert(thread->is_Java_thread(), \"invariant\");\n@@ -501,1 +500,1 @@\n-    JfrJavaEventWriter::notify((JavaThread*)thread);\n+    JfrJavaEventWriter::notify(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  JavaThread* const jt = (JavaThread*)Thread::current();\n+  JavaThread* const jt = JavaThread::current();\n@@ -79,2 +79,1 @@\n-  JavaThread* thread = (JavaThread*)Thread::current();\n-  assert(thread->is_Java_thread(), \"invariant\");\n+  JavaThread* thread = JavaThread::current();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrMetadataEvent.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,2 +92,1 @@\n-  const JavaThread* const jt = (JavaThread*)t;\n-  const oop thread_obj = jt->threadObj();\n+  const oop thread_obj = t->as_Java_thread()->threadObj();\n@@ -111,2 +110,1 @@\n-  assert(t->is_Java_thread(), \"invariant\");\n-  const JavaThread* const jt = ((JavaThread*)t);\n+  const JavaThread* const jt = t->as_Java_thread();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    _writer.write(JfrThreadGroup::thread_group_id((JavaThread*)t, _curthread));\n+    _writer.write(JfrThreadGroup::thread_group_id(t->as_Java_thread(), _curthread));\n@@ -277,1 +277,1 @@\n-    JavaThread* const jt = (JavaThread*)_thread;\n+    JavaThread* const jt = _thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  assert(((JavaThread*)Thread::current())->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(JavaThread::current()->thread_state() == _thread_in_vm, \"invariant\");\n@@ -193,1 +193,1 @@\n-  assert(((JavaThread*)Thread::current())->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(JavaThread::current()->thread_state() == _thread_in_vm, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  assert(((JavaThread*)Thread::current())->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(JavaThread::current()->thread_state() == _thread_in_vm, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  assert(((JavaThread*)Thread::current())->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(JavaThread::current()->thread_state() == _thread_in_vm, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  Thread* const thread = Thread::current();\n+  JavaThread* const thread = JavaThread::current();\n@@ -58,1 +58,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)thread);\n+  ThreadInVMfromNative transition(thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? (JavaThread*)t : NULL),\n+  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? t->as_Java_thread() : NULL),\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  return (thread->is_Java_thread() && ((JavaThread*)thread)->thread_state() != _thread_in_vm) || thread->is_VM_thread();\n+  return (thread->is_Java_thread() && thread->as_Java_thread()->thread_state() != _thread_in_vm) || thread->is_VM_thread();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)Thread::current());\n+  ThreadInVMfromNative transition(JavaThread::current());\n@@ -564,1 +564,1 @@\n-  ThreadInVMfromNative transition((JavaThread*)Thread::current());\n+  ThreadInVMfromNative transition(JavaThread::current());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -145,1 +145,1 @@\n-  return instance().record_for((JavaThread*)thread, skip, frames, tl->stackdepth());\n+  return instance().record_for(thread->as_Java_thread(), skip, frames, tl->stackdepth());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-    assert(thread->is_Java_thread(), \"invariant\");\n@@ -35,1 +34,1 @@\n-    LeakProfiler::sample(obj, alloc_size, (JavaThread*)thread);\n+    LeakProfiler::sample(obj, alloc_size, thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,4 +34,1 @@\n-    Thread* thread = Thread::current();\n-    assert(thread != NULL, \"invariant\");\n-    assert(thread->is_Java_thread(), \"invariant\");\n-    JavaThread* const jt = (JavaThread*)thread;\n+    JavaThread* const jt = JavaThread::current();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrEpochSynchronization.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        send_java_thread_start_event((JavaThread*)t);\n+        send_java_thread_start_event(t->as_Java_thread());\n@@ -163,1 +163,1 @@\n-      JavaThread* const jt = (JavaThread*)t;\n+      JavaThread* const jt = t->as_Java_thread();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-       JfrJavaEventWriter::notify((JavaThread*)t);\n+       JfrJavaEventWriter::notify(t->as_Java_thread());\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-      ((JavaThread*)THREAD)->sleep(100);\n+      THREAD->as_Java_thread()->sleep(100);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,2 +143,1 @@\n-  assert(thread->is_Java_thread(), \"must be\");\n-  return (JavaThread*) thread;\n+  return thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current();\n@@ -246,1 +246,1 @@\n-    JNIAccessMark jni(this);\n+    JNIAccessMark jni(this, THREAD);\n@@ -256,1 +256,1 @@\n-      JVMCIRuntime::describe_pending_hotspot_exception((JavaThread*) THREAD, clear);\n+      JVMCIRuntime::describe_pending_hotspot_exception(THREAD, clear);\n@@ -295,2 +295,3 @@\n-      if (Thread::current()->is_Java_thread()) {\n-        JavaThread* THREAD = JavaThread::current();\n+      Thread* thread = Thread::current();\n+      if (thread->is_Java_thread()) {\n+        JavaThread* THREAD = thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -495,2 +495,1 @@\n-  assert(THREAD->is_Java_thread(), \"must be a Java thread\");\n-  JavaThread* javaThread = (JavaThread*)THREAD;\n+  JavaThread* javaThread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -901,2 +901,1 @@\n-  assert(THREAD->is_Java_thread(), \"non-JavaThread in link_class_impl\");\n-  JavaThread* jt = (JavaThread*)THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n@@ -1004,3 +1003,1 @@\n-        Thread *thread = THREAD;\n-        assert(thread->is_Java_thread(), \"thread->is_Java_thread()\");\n-        JvmtiExport::post_class_prepare((JavaThread *) thread, this);\n+        JvmtiExport::post_class_prepare(THREAD->as_Java_thread(), this);\n@@ -1070,2 +1067,1 @@\n-  assert(THREAD->is_Java_thread(), \"non-JavaThread in initialize_impl\");\n-  JavaThread* jt = (JavaThread*)THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n@@ -1447,1 +1443,1 @@\n-    JavaThread *jt = (JavaThread *)THREAD;\n+    JavaThread *jt = THREAD->as_Java_thread();\n@@ -3638,1 +3634,1 @@\n-                ? ((JavaThread*)THREAD)->security_get_caller_class(1)\n+                ? THREAD->as_Java_thread()->security_get_caller_class(1)\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    JavaThread *jt = (JavaThread *)THREAD;\n+    JavaThread *jt = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    JavaThread *jt = (JavaThread *)THREAD;\n+    JavaThread *jt = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-        query_lock_ownership((JavaThread*)THREAD, class_loader) !=\n+        query_lock_ownership(thread, class_loader) !=\n@@ -3943,1 +3943,1 @@\n-      *(JNIEnv**)penv = ((JavaThread*) t)->jni_environment();\n+      *(JNIEnv**)penv = t->as_Java_thread()->jni_environment();\n@@ -4081,1 +4081,1 @@\n-  JavaThread* thread = (JavaThread*) current;\n+  JavaThread* thread = current->as_Java_thread();\n@@ -4136,1 +4136,1 @@\n-      *(JNIEnv**)penv = ((JavaThread*) thread)->jni_environment();\n+      *(JNIEnv**)penv = thread->as_Java_thread()->jni_environment();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-    JavaThread* thr = (JavaThread*) Thread::current_or_null();           \\\n-    if (thr == NULL || !thr->is_Java_thread()) {                         \\\n+    Thread* cur = Thread::current_or_null();                             \\\n+    if (cur == NULL || !cur->is_Java_thread()) {                         \\\n@@ -101,0 +101,1 @@\n+    JavaThread* thr = cur->as_Java_thread();                             \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  JavaThread* jthread = (JavaThread*) THREAD;\n+  JavaThread* jthread = THREAD->as_Java_thread();\n@@ -614,2 +614,1 @@\n-  JavaThread* jt = (JavaThread*) THREAD;\n-  if (!jt->is_Java_thread() || !jt->has_last_Java_frame()) {\n+  if (!thread->has_last_Java_frame()) {\n@@ -674,1 +673,1 @@\n-    JvmtiExport::post_monitor_wait((JavaThread *)THREAD, (oop)obj(), ms);\n+    JvmtiExport::post_monitor_wait(thread, (oop)obj(), ms);\n@@ -924,1 +923,1 @@\n-  if (ObjectSynchronizer::query_lock_ownership((JavaThread*)THREAD, loader) !=\n+  if (ObjectSynchronizer::query_lock_ownership(THREAD->as_Java_thread(), loader) !=\n@@ -937,2 +936,1 @@\n-  assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n-  JavaThread* jt = (JavaThread*) THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n@@ -992,1 +990,0 @@\n-  assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n@@ -3313,1 +3310,0 @@\n-  assert(THREAD->is_Java_thread(), \"sanity check\");\n@@ -3318,1 +3314,1 @@\n-  return ObjectSynchronizer::current_thread_holds_lock((JavaThread*)THREAD, h_obj);\n+  return ObjectSynchronizer::current_thread_holds_lock(thread, h_obj);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-<?xml version=\"1.0\"?> \n+<?xml version=\"1.0\"?>\n@@ -23,1 +23,1 @@\n-  \n+\n@@ -66,1 +66,1 @@\n-    <xsl:call-template name=\"fillEntityName\"> \n+    <xsl:call-template name=\"fillEntityName\">\n@@ -76,1 +76,1 @@\n-    <xsl:call-template name=\"fillEventThreaded\"> \n+    <xsl:call-template name=\"fillEventThreaded\">\n@@ -95,1 +95,1 @@\n-    <\/xsl:for-each>    \n+    <\/xsl:for-each>\n@@ -109,1 +109,1 @@\n-    <xsl:call-template name=\"fillEntityName\"> \n+    <xsl:call-template name=\"fillEntityName\">\n@@ -206,1 +206,1 @@\n-    <\/xsl:for-each>    \n+    <\/xsl:for-each>\n@@ -251,1 +251,1 @@\n- \n+\n@@ -284,1 +284,1 @@\n-      NULL<\/xsl:text>        \n+      NULL<\/xsl:text>\n@@ -317,1 +317,1 @@\n-      <xsl:text>  NULL<\/xsl:text>        \n+      <xsl:text>  NULL<\/xsl:text>\n@@ -350,1 +350,1 @@\n-          <xsl:text>  true<\/xsl:text>        \n+          <xsl:text>  true<\/xsl:text>\n@@ -355,1 +355,1 @@\n-      <xsl:text>  false<\/xsl:text>        \n+      <xsl:text>  false<\/xsl:text>\n@@ -390,1 +390,1 @@\n-  \/\/ \n+  \/\/\n@@ -401,2 +401,2 @@\n-  \n-  <xsl:choose> \n+\n+  <xsl:choose>\n@@ -404,3 +404,3 @@\n-      <xsl:text>if (this_thread == NULL || !this_thread->is_Java_thread()) {<\/xsl:text> \n-    <\/xsl:when> \n-    <xsl:otherwise> \n+      <xsl:text>if (this_thread == NULL || !this_thread->is_Java_thread()) {<\/xsl:text>\n+    <\/xsl:when>\n+    <xsl:otherwise>\n@@ -412,1 +412,1 @@\n-          <xsl:text>if (!this_thread->is_Java_thread()) {<\/xsl:text> \n+          <xsl:text>if (!this_thread->is_Java_thread()) {<\/xsl:text>\n@@ -415,3 +415,3 @@\n-     <\/xsl:otherwise> \n-  <\/xsl:choose> \n-  \n+     <\/xsl:otherwise>\n+  <\/xsl:choose>\n+\n@@ -431,2 +431,2 @@\n-  <xsl:text>}<\/xsl:text>  \n-  <xsl:value-of select=\"$space\"\/>  \n+  <xsl:text>}<\/xsl:text>\n+  <xsl:value-of select=\"$space\"\/>\n@@ -434,1 +434,1 @@\n-    <xsl:text>JavaThread* current_thread = (JavaThread*)this_thread;<\/xsl:text>   \n+    <xsl:text>JavaThread* current_thread = this_thread->as_Java_thread();<\/xsl:text>\n@@ -459,1 +459,1 @@\n-          log_trace(jvmti)(\"[%s] %s %s\",  curr_thread_name, func_name, \n+          log_trace(jvmti)(\"[%s] %s %s\",  curr_thread_name, func_name,\n@@ -499,1 +499,1 @@\n-  }<\/xsl:text>  \n+  }<\/xsl:text>\n@@ -501,1 +501,1 @@\n-      <xsl:text>  \n+      <xsl:text>\n@@ -516,1 +516,1 @@\n-          log_trace(jvmti)(\"[-] %s %s\",  func_name, \n+          log_trace(jvmti)(\"[-] %s %s\",  func_name,\n@@ -529,1 +529,1 @@\n-          log_trace(jvmti)(\"[-] %s %s\",  func_name, \n+          log_trace(jvmti)(\"[-] %s %s\",  func_name,\n@@ -548,1 +548,1 @@\n-          log_trace(jvmti)(\"[%s] %s %s  env=\" PTR_FORMAT,  curr_thread_name, func_name, \n+          log_trace(jvmti)(\"[%s] %s %s  env=\" PTR_FORMAT,  curr_thread_name, func_name,\n@@ -558,1 +558,1 @@\n-  \n+\n@@ -562,1 +562,1 @@\n-    <xsl:when test=\"count(@phase)=1 and not(contains(@phase,'live')) and not(contains(@phase,'start'))\">    \n+    <xsl:when test=\"count(@phase)=1 and not(contains(@phase,'live')) and not(contains(@phase,'start'))\">\n@@ -592,1 +592,1 @@\n-      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>     \n+      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>\n@@ -596,1 +596,1 @@\n-      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>     \n+      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>\n@@ -601,1 +601,1 @@\n-      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>      \n+      <xsl:apply-templates select=\".\" mode=\"doCall\"\/>\n@@ -616,1 +616,1 @@\n-  <xsl:apply-templates select=\".\" mode=\"traceBefore\"\/>  \n+  <xsl:apply-templates select=\".\" mode=\"traceBefore\"\/>\n@@ -677,1 +677,1 @@\n-    <xsl:text>\",  curr_thread_name, func_name, \n+    <xsl:text>\",  curr_thread_name, func_name,\n@@ -699,1 +699,1 @@\n-    log_error(jvmti)(\"[%s] %s } %s\",  curr_thread_name, func_name, \n+    log_error(jvmti)(\"[%s] %s } %s\",  curr_thread_name, func_name,\n@@ -712,1 +712,1 @@\n-    <xsl:with-param name=\"endParam\" select=\"$endParam\"\/>    \n+    <xsl:with-param name=\"endParam\" select=\"$endParam\"\/>\n@@ -716,1 +716,1 @@\n-    <xsl:with-param name=\"endParam\" select=\"$endParam\"\/>    \n+    <xsl:with-param name=\"endParam\" select=\"$endParam\"\/>\n@@ -739,1 +739,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -755,1 +755,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -763,1 +763,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -780,1 +780,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -825,1 +825,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -839,1 +839,1 @@\n-  <xsl:text>  oop k_mirror = JNIHandles::resolve_external_guard(<\/xsl:text>  \n+  <xsl:text>  oop k_mirror = JNIHandles::resolve_external_guard(<\/xsl:text>\n@@ -844,1 +844,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -853,1 +853,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -865,1 +865,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -875,1 +875,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -894,1 +894,1 @@\n-  <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+  <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -902,3 +902,3 @@\n-    <xsl:text>  if (checked_method->is_native()) {&#xA;<\/xsl:text>   \n-    <xsl:text>    return JVMTI_ERROR_NATIVE_METHOD;&#xA;<\/xsl:text>   \n-    <xsl:text>  }&#xA;<\/xsl:text>   \n+    <xsl:text>  if (checked_method->is_native()) {&#xA;<\/xsl:text>\n+    <xsl:text>    return JVMTI_ERROR_NATIVE_METHOD;&#xA;<\/xsl:text>\n+    <xsl:text>  }&#xA;<\/xsl:text>\n@@ -916,1 +916,1 @@\n-  <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+  <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -933,1 +933,1 @@\n-    <xsl:apply-templates select=\"..\" mode=\"traceError\">     \n+    <xsl:apply-templates select=\"..\" mode=\"traceError\">\n@@ -1053,1 +1053,1 @@\n-      <xsl:apply-templates select=\"$child\" mode=\"traceInFormat\"\/> \n+      <xsl:apply-templates select=\"$child\" mode=\"traceInFormat\"\/>\n@@ -1069,1 +1069,1 @@\n-  <\/xsl:choose> \n+  <\/xsl:choose>\n@@ -1121,2 +1121,2 @@\n-    <xsl:text>, \n-                    JvmtiTrace::safe_get_thread_name(java_thread)<\/xsl:text>  \n+    <xsl:text>,\n+                    JvmtiTrace::safe_get_thread_name(java_thread)<\/xsl:text>\n@@ -1140,1 +1140,1 @@\n-    <xsl:text>, \n+    <xsl:text>,\n@@ -1154,1 +1154,1 @@\n-  <xsl:text>, \n+  <xsl:text>,\n@@ -1176,1 +1176,1 @@\n-  <xsl:text>, \n+  <xsl:text>,\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":64,"deletions":64,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -3311,1 +3311,1 @@\n-      JavaThread* current_thread = (JavaThread*)thread;\n+      JavaThread* current_thread = thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1080,1 +1080,1 @@\n-            JavaThread *wjava_thread = (JavaThread *)t;\n+            JavaThread *wjava_thread = t->as_Java_thread();\n@@ -1271,2 +1271,1 @@\n-  assert(target->is_Java_thread(), \"just checking\");\n-  JavaThread *jt = (JavaThread *)target;\n+  JavaThread *jt = target->as_Java_thread();\n@@ -1529,2 +1528,1 @@\n-  assert(target->is_Java_thread(), \"just checking\");\n-  JavaThread *jt = (JavaThread *)target;\n+  JavaThread *jt = target->as_Java_thread();\n@@ -1540,2 +1538,1 @@\n-  assert(target->is_Java_thread(), \"just checking\");\n-  JavaThread *jt = (JavaThread *)target;\n+  JavaThread *jt = target->as_Java_thread();\n@@ -1551,2 +1548,1 @@\n-  assert(target->is_Java_thread(), \"just checking\");\n-  JavaThread *jt = (JavaThread *)target;\n+  JavaThread *jt = target->as_Java_thread();\n@@ -1571,2 +1567,1 @@\n-  assert(target->is_Java_thread(), \"just checking\");\n-  JavaThread *jt = (JavaThread *)target;\n+  JavaThread *jt = target->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-    JavaThread *jt = (JavaThread *)target;\n+    JavaThread *jt = target->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-    JavaThread* jt = (JavaThread*) th;\n+    JavaThread* jt = th->as_Java_thread();\n@@ -334,2 +334,1 @@\n-  assert(state->get_thread()->is_Java_thread(), \"just checking\");\n-  JavaThread *target = (JavaThread *)state->get_thread();\n+  JavaThread *target = state->get_thread();\n@@ -648,1 +647,0 @@\n-  assert(thread->is_Java_thread(), \"Must be JavaThread\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-       _jthread = (JavaThread *)thread;\n+       _jthread = thread->as_Java_thread();\n@@ -2309,1 +2309,1 @@\n-    JvmtiThreadState *state = ((JavaThread*)thread)->jvmti_thread_state();\n+    JvmtiThreadState *state = thread->as_Java_thread()->jvmti_thread_state();\n@@ -2333,1 +2333,1 @@\n-    JvmtiThreadState *state = ((JavaThread*)thread)->jvmti_thread_state();\n+    JvmtiThreadState *state = thread->as_Java_thread()->jvmti_thread_state();\n@@ -2870,1 +2870,1 @@\n-    JavaThread* current_thread = (JavaThread*)thread;\n+    JavaThread* current_thread = thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-    assert(thread->is_Java_thread(), \"debugger thread should be a Java Thread\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,1 +237,1 @@\n-    JavaThread* jt = (JavaThread*) self;\n+    JavaThread* jt = self->as_Java_thread();\n@@ -317,1 +317,1 @@\n-    jt = (JavaThread*)self;\n+    jt = self->as_Java_thread();\n@@ -413,1 +413,1 @@\n-    JavaThread* jt = (JavaThread*)self;\n+    JavaThread* jt = self->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-         (JavaThread *)Thread::current() == get_thread() ||\n+         JavaThread::current() == get_thread() ||\n@@ -275,1 +275,1 @@\n-  Thread *current = Thread::current();\n+  JavaThread *current = JavaThread::current();\n@@ -277,1 +277,1 @@\n-            \"must be current thread or direct handshake\");\n+                    \"must be current thread or direct handshake\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,2 +279,1 @@\n-  JavaThread *java_thread = (JavaThread *)thread;\n-  oop threadObj = java_thread->threadObj();\n+  oop threadObj = thread->as_Java_thread()->threadObj();\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-  assert(thread != NULL && thread->is_Java_thread(), \"\");\n@@ -341,1 +340,1 @@\n-  JavaThread* jt = (JavaThread*)THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n@@ -461,1 +460,1 @@\n-  JavaThread* jt = (JavaThread*)THREAD;\n+  JavaThread* jt = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2000,2 +2000,1 @@\n-      assert(th->is_Java_thread(), \"sanity\");\n-      JavaThread* jt = (JavaThread*)th;\n+      JavaThread* jt = th->as_Java_thread();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -728,2 +728,1 @@\n-  assert(THREAD->is_Java_thread(), \"must be called by a JavaThread\");\n-  JavaThread* thread = (JavaThread*)THREAD;\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -743,1 +742,1 @@\n-  BiasedLocking::walk_stack_and_revoke(obj(), (JavaThread*) thread);\n+  BiasedLocking::walk_stack_and_revoke(obj(), thread);\n@@ -833,1 +832,1 @@\n-        BiasedLocking::Condition cond = single_revoke_with_handshake(obj, (JavaThread*)THREAD, blt);\n+        BiasedLocking::Condition cond = single_revoke_with_handshake(obj, THREAD->as_Java_thread(), blt);\n@@ -842,1 +841,1 @@\n-      VM_BulkRevokeBias bulk_revoke(&obj, (JavaThread*)THREAD,\n+      VM_BulkRevokeBias bulk_revoke(&obj, THREAD->as_Java_thread(),\n","filename":"src\/hotspot\/share\/runtime\/biasedLocking.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -813,1 +813,1 @@\n-    JavaThread* jt = (JavaThread*)thread;\n+    JavaThread* jt = thread->as_Java_thread();\n@@ -1700,2 +1700,1 @@\n-    assert(THREAD->is_Java_thread(), \"only a java thread can be here\");\n-    JavaThread* thread = (JavaThread*)THREAD;\n+    JavaThread* thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-        wait_blocked((JavaThread*)self, now);\n+        wait_blocked(self->as_Java_thread(), now);\n@@ -396,1 +396,0 @@\n-    assert(Thread::current()->is_Java_thread(), \"should be a JavaThread\");\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  JavaThread *current_thread = (JavaThread *)thread;\n+  JavaThread *current_thread = thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    assert(thread != NULL && thread->is_Java_thread(), \"must be Java thread\");\n+    assert(thread != NULL, \"must be active Java thread\");\n@@ -189,1 +189,1 @@\n-      JavaThread* t2 = (JavaThread*) t;\n+      JavaThread* t2 = t->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-      ((JavaThread*)thread)->set_thread_state(_thread_in_vm);\n+      thread->as_Java_thread()->set_thread_state(_thread_in_vm);\n@@ -580,1 +580,1 @@\n-      JavaThread* jt = (JavaThread*)thread;\n+      JavaThread* jt = thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  JavaThread* thread = (JavaThread *)THREAD;\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -91,1 +91,1 @@\n-  _thread       = (JavaThread *)thread;\n+  _thread       = thread;\n@@ -346,2 +346,1 @@\n-  JavaThread* thread = (JavaThread*)THREAD;\n-  assert(thread->is_Java_thread(), \"must be called by a java thread\");\n+  JavaThread* thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-           is_frame_handle((JavaThread*)thread, handle))) {\n+           is_frame_handle(thread->as_Java_thread(), handle))) {\n@@ -304,1 +304,1 @@\n-          JavaThread::current()->thread_state() == _thread_in_native);\n+          thread->as_Java_thread()->thread_state() == _thread_in_native);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-      { ThreadBlockInVMWithDeadlockCheck tbivmdc((JavaThread *) self, &in_flight_mutex);\n+      { ThreadBlockInVMWithDeadlockCheck tbivmdc(self->as_Java_thread(), &in_flight_mutex);\n@@ -209,1 +209,1 @@\n-  Thread* const self = Thread::current();\n+  JavaThread* const self = JavaThread::current();\n@@ -226,1 +226,1 @@\n-  JavaThread *jt = (JavaThread *)self;\n+\n@@ -230,1 +230,1 @@\n-    ThreadBlockInVMWithDeadlockCheck tbivmdc(jt, &in_flight_mutex);\n+    ThreadBlockInVMWithDeadlockCheck tbivmdc(self, &in_flight_mutex);\n@@ -233,1 +233,1 @@\n-      jt->set_suspend_equivalent();\n+      self->set_suspend_equivalent();\n@@ -242,1 +242,1 @@\n-    if (as_suspend_equivalent && jt->handle_special_suspend_equivalent_condition()) {\n+    if (as_suspend_equivalent && self->handle_special_suspend_equivalent_condition()) {\n@@ -248,1 +248,1 @@\n-      jt->java_suspend_self();\n+      self->java_suspend_self();\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -289,2 +289,1 @@\n-  assert(Self->is_Java_thread(), \"invariant\");\n-  JavaThread * jt = (JavaThread *) Self;\n+  JavaThread * jt = Self->as_Java_thread();\n@@ -509,2 +508,1 @@\n-  assert(Self->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread *) Self)->thread_state() == _thread_blocked, \"invariant\");\n+  assert(Self->as_Java_thread()->thread_state() == _thread_blocked, \"invariant\");\n@@ -779,2 +777,3 @@\n-  assert(((JavaThread *)Self)->thread_state() != _thread_blocked, \"invariant\");\n-  JavaThread * jt = (JavaThread *) Self;\n+\n+  JavaThread * jt = Self->as_Java_thread();\n+  assert(jt->thread_state() != _thread_blocked, \"invariant\");\n@@ -1233,2 +1232,1 @@\n-  assert(Self->is_Java_thread(), \"Must be Java thread!\");\n-  JavaThread *jt = (JavaThread *)THREAD;\n+  JavaThread * jt = Self->as_Java_thread();\n@@ -1259,2 +1257,1 @@\n-  assert(Self->is_Java_thread(), \"Must be Java thread!\");\n-  JavaThread *jt = (JavaThread *)THREAD;\n+  JavaThread * jt = Self->as_Java_thread();\n@@ -1325,2 +1322,1 @@\n-  assert(Self->is_Java_thread(), \"Must be Java thread!\");\n-  JavaThread *jt = (JavaThread *)THREAD;\n+  JavaThread * jt = Self->as_Java_thread();\n@@ -1954,1 +1950,1 @@\n-  JavaThread *jt = (JavaThread *)this->_thread;\n+  JavaThread *jt = this->_thread->as_Java_thread();\n@@ -1959,1 +1955,1 @@\n-  JavaThread *jt = (JavaThread *)this->_thread;\n+  JavaThread *jt = this->_thread->as_Java_thread();\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1378,1 +1378,1 @@\n-  address limit = ((JavaThread*)thread)->stack_end() +\n+  address limit = thread->as_Java_thread()->stack_end() +\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1036,1 +1036,1 @@\n-            JvmtiExport::clear_detected_exception((JavaThread*)THREAD);\n+            JvmtiExport::clear_detected_exception(THREAD->as_Java_thread());\n@@ -1150,1 +1150,1 @@\n-      JvmtiExport::clear_detected_exception((JavaThread*)THREAD);\n+      JvmtiExport::clear_detected_exception(THREAD->as_Java_thread());\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -696,1 +696,0 @@\n-  assert(thread->is_Java_thread(), \"not a Java thread\");\n@@ -786,1 +785,0 @@\n-  assert(thread->is_Java_thread(), \"polling reference encountered by VM thread\");\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    return local_poll_armed((JavaThread*)thread);\n+    return local_poll_armed(thread->as_Java_thread());\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -953,1 +953,1 @@\n-      oop obj = ((JavaThread*)thread)->threadObj();\n+      oop obj = thread->as_Java_thread()->threadObj();\n@@ -3150,1 +3150,0 @@\n-  assert(thread->is_Java_thread(), \"Only Java threads have a stack reserved zone\");\n@@ -3152,1 +3151,1 @@\n-  thread->enable_stack_reserved_zone();\n+    thread->enable_stack_reserved_zone();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -161,2 +161,1 @@\n-      JavaThread* jt = (JavaThread*) thread;\n-      jt->nmethods_do(_cl);\n+      thread->as_Java_thread()->nmethods_do(_cl);\n","filename":"src\/hotspot\/share\/runtime\/sweeper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -452,2 +452,1 @@\n-  assert(self->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread *) self)->thread_state() == _thread_in_Java, \"invariant\");\n+  assert(self->as_Java_thread()->thread_state() == _thread_in_Java, \"invariant\");\n@@ -502,2 +501,1 @@\n-  assert(self->is_Java_thread(), \"invariant\");\n-  assert(((JavaThread *) self)->thread_state() == _thread_in_Java, \"invariant\");\n+  assert(self->as_Java_thread()->thread_state() == _thread_in_Java, \"invariant\");\n@@ -563,2 +561,1 @@\n-  assert(current->is_Java_thread(), \"must be for java object synchronization\");\n-  JavaThread* self = (JavaThread*) current;\n+  JavaThread* self = current->as_Java_thread();\n@@ -2429,1 +2426,0 @@\n-  assert(Thread::current()->is_Java_thread(), \"precondition\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -358,2 +358,2 @@\n-    ((JavaThread*) this)->set_stack_overflow_limit();\n-    ((JavaThread*) this)->set_reserved_stack_activation(stack_base());\n+    this->as_Java_thread()->set_stack_overflow_limit();\n+    this->as_Java_thread()->set_reserved_stack_activation(stack_base());\n@@ -486,1 +486,1 @@\n-         !((JavaThread *) thread)->on_thread_list() ||\n+         !thread->as_Java_thread()->on_thread_list() ||\n@@ -488,1 +488,1 @@\n-         ThreadsSMRSupport::is_a_protected_JavaThread_with_lock((JavaThread *) thread),\n+         ThreadsSMRSupport::is_a_protected_JavaThread_with_lock(thread->as_Java_thread()),\n@@ -517,1 +517,1 @@\n-      java_lang_Thread::set_thread_status(((JavaThread*)thread)->threadObj(),\n+      java_lang_Thread::set_thread_status(thread->as_Java_thread()->threadObj(),\n@@ -530,1 +530,1 @@\n-    JavaThread* target = (JavaThread*)thr;\n+    JavaThread* target = thr->as_Java_thread();\n@@ -1008,1 +1008,1 @@\n-  if (((JavaThread*)this)->thread_state() != _thread_in_vm) {\n+  if (this->as_Java_thread()->thread_state() != _thread_in_vm) {\n@@ -1033,1 +1033,1 @@\n-  return os::create_main_thread((JavaThread*)this);\n+  return os::create_main_thread(this->as_Java_thread());\n@@ -2281,1 +2281,1 @@\n-    return (JavaThread*) thread;\n+    return thread->as_Java_thread();\n@@ -2285,2 +2285,1 @@\n-    JavaThread *ret=op == NULL ? NULL : (JavaThread *)op->calling_thread();\n-    assert(ret->is_Java_thread(), \"must be a Java thread\");\n+    JavaThread *ret = op == NULL ? NULL : op->calling_thread()->as_Java_thread();\n@@ -2557,2 +2556,1 @@\n-  assert(_anchor.walkable() ||\n-         (is_Java_thread() && !((JavaThread*)this)->has_last_Java_frame()),\n+  assert(_anchor.walkable() || !has_last_Java_frame(),\n@@ -3205,4 +3203,3 @@\n-    Thread *cur = Thread::current();\n-    if (!(cur->is_Java_thread() && cur == this)) {\n-      \/\/ Current JavaThreads are allowed to get their own name without\n-      \/\/ the Threads_lock.\n+    \/\/ Current JavaThreads are allowed to get their own name without\n+    \/\/ the Threads_lock.\n+    if (Thread::current() != this) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -101,0 +101,2 @@\n+class JavaThread;\n+\n@@ -504,0 +506,2 @@\n+  inline JavaThread* as_Java_thread();\n+  inline const JavaThread* as_Java_thread() const;\n@@ -2113,3 +2117,1 @@\n-  Thread* thread = Thread::current();\n-  assert(thread->is_Java_thread(), \"just checking\");\n-  return (JavaThread*)thread;\n+  return Thread::current()->as_Java_thread();\n@@ -2212,0 +2214,10 @@\n+inline JavaThread* Thread::as_Java_thread() {\n+  assert(is_Java_thread(), \"incorrect cast to JavaThread\");\n+  return static_cast<JavaThread*>(this);\n+}\n+\n+inline const JavaThread* Thread::as_Java_thread() const {\n+  assert(is_Java_thread(), \"incorrect cast to const JavaThread\");\n+  return static_cast<const JavaThread*>(this);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  JavaThread* thread = (JavaThread*) Thread::current();\n+  JavaThread* thread = JavaThread::current();\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,3 +153,1 @@\n-  JavaThread *thread = (JavaThread *)calling_thread();\n-  assert(thread->is_Java_thread(), \"must be a Java thread\");\n-  thread->make_zombies();\n+  calling_thread()->as_Java_thread()->make_zombies();\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,2 +312,1 @@\n-  assert(Thread::current()->is_Java_thread(), \"Should be a JavaThread\");\n-  assert(((JavaThread*)Thread::current())->is_terminated(), \"Should be terminated\");\n+  assert(JavaThread::current()->is_terminated(), \"Should be terminated\");\n@@ -380,3 +379,1 @@\n-    assert(thread->is_Java_thread(), \"must be\");\n-    JavaThread* jt = (JavaThread*)thread;\n-    jt->verify_states_for_handshake();\n+    thread->as_Java_thread()->verify_states_for_handshake();\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1076,1 +1076,1 @@\n-  JavaThread* thread = (JavaThread*) THREAD;\n+  JavaThread* thread = THREAD->as_Java_thread();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2074,6 +2074,2 @@\n-  if (thread_id == 0) {\n-    \/\/ current thread\n-    if (THREAD->is_Java_thread()) {\n-      return ((JavaThread*)THREAD)->cooked_allocated_bytes();\n-    }\n-    return -1;\n+  if (thread_id == 0) { \/\/ current thread\n+    return thread->cooked_allocated_bytes();\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -425,2 +425,1 @@\n-          \/\/ only JavaThreads can be reported here\n-          currentThread = (JavaThread*) owner;\n+          currentThread = owner->as_Java_thread();\n@@ -989,1 +988,1 @@\n-          currentThread = (JavaThread*) owner;\n+          currentThread = owner->as_Java_thread();\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,2 +147,1 @@\n-    JavaThread* jt = (JavaThread*)thread;\n-    if (jt->thread_state() == _thread_in_native) {\n+    if (thread->as_Java_thread()->thread_state() == _thread_in_native) {\n@@ -262,1 +261,1 @@\n-          RegisterMap map((JavaThread*)t, false); \/\/ No update\n+          RegisterMap map(t->as_Java_thread(), false); \/\/ No update\n@@ -746,1 +745,1 @@\n-       print_stack_trace(st, (JavaThread*)_thread, buf, sizeof(buf));\n+       print_stack_trace(st, _thread->as_Java_thread(), buf, sizeof(buf));\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}