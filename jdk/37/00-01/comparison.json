{"files":[{"patch":"@@ -32,1 +32,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/thread_linux_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/thread_linux_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    return thread->is_VM_thread();\n+    return true;  \/\/something like this: thread->is_VM_thread();\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/concurrentGCBreakpoints.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zFuture.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrEpochSynchronization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"runtime\/thread.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3452,0 +3452,15 @@\n+void JavaThread::check_and_wait_while_suspended() {\n+  assert(JavaThread::current() == this, \"sanity check\");\n+\n+  bool do_self_suspend;\n+  do {\n+    \/\/ were we externally suspended while we were waiting?\n+    do_self_suspend = handle_special_suspend_equivalent_condition();\n+    if (do_self_suspend) {\n+      \/\/ don't surprise the thread that suspended us by returning\n+      java_suspend_self();\n+      set_suspend_equivalent();\n+    }\n+  } while (do_self_suspend);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -506,8 +506,2 @@\n-  JavaThread* as_Java_thread() {\n-    assert(is_Java_thread(), \"incorrect cast to JavaThread\");\n-    return (JavaThread*)this;\n-  }\n-  JavaThread * as_const_Java_thread() const {\n-    assert(is_Java_thread(), \"incorrect cast to JavaThread\");\n-    return (JavaThread*)this;\n-  }\n+  JavaThread* as_Java_thread();\n+  const JavaThread* as_const_Java_thread() const;\n@@ -1398,14 +1392,1 @@\n-  void check_and_wait_while_suspended() {\n-    assert(JavaThread::current() == this, \"sanity check\");\n-\n-    bool do_self_suspend;\n-    do {\n-      \/\/ were we externally suspended while we were waiting?\n-      do_self_suspend = handle_special_suspend_equivalent_condition();\n-      if (do_self_suspend) {\n-        \/\/ don't surprise the thread that suspended us by returning\n-        java_suspend_self();\n-        set_suspend_equivalent();\n-      }\n-    } while (do_self_suspend);\n-  }\n+  void check_and_wait_while_suspended();\n@@ -1955,1 +1936,1 @@\n-  static inline JavaThread* current();\n+  static JavaThread* current();\n@@ -2121,5 +2102,0 @@\n-\/\/ Inline implementation of JavaThread::current\n-inline JavaThread* JavaThread::current() {\n-  return Thread::current()->as_Java_thread();\n-}\n-\n@@ -2220,4 +2196,0 @@\n-inline CompilerThread* CompilerThread::current() {\n-  return JavaThread::current()->as_CompilerThread();\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":4,"deletions":32,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -35,0 +35,18 @@\n+inline JavaThread* Thread::as_Java_thread() {\n+  assert(is_Java_thread(), \"incorrect cast to JavaThread\");\n+  return static_cast<JavaThread*>(this);\n+}\n+\n+inline const JavaThread* Thread::as_const_Java_thread() const {\n+  assert(is_Java_thread(), \"incorrect cast to const JavaThread\");\n+  return static_cast<const JavaThread*>(this);\n+}\n+\n+inline JavaThread* JavaThread::current() {\n+  return Thread::current()->as_Java_thread();\n+}\n+\n+inline CompilerThread* CompilerThread::current() {\n+  return JavaThread::current()->as_CompilerThread();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}