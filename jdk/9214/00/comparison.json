{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.jmh.annotations.Fork;\n@@ -28,0 +29,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Atomic.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -46,0 +49,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/AtomicIntegerUpdateAndGet.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -46,0 +49,3 @@\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(3)\n@@ -59,3 +65,0 @@\n-    @Param(\"0\")\n-    private int workers;\n-\n@@ -65,2 +68,3 @@\n-    @Param(\"10\")\n-    private int threshold;\n+    \/** Encapsulate all the state depended on only by actual test. This avoids running baselines for every parameter value. *\/\n+    @State(Scope.Benchmark)\n+    public static class TestState {\n@@ -68,3 +72,2 @@\n-    private Problem problem;\n-    private ForkJoinPool fjpSync;\n-    private ForkJoinPool fjpAsync;\n+        @Param(\"0\")\n+        private int workers;\n@@ -72,5 +75,13 @@\n-    @Setup\n-    public void setup() {\n-        problem = new Problem(size);\n-        if (workers == 0) {\n-            workers = Runtime.getRuntime().availableProcessors();\n+        @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"})\n+        private int threshold;\n+\n+        private ForkJoinPool fjpSync;\n+        private ForkJoinPool fjpAsync;\n+\n+        @Setup\n+        public void setup() {\n+            if (workers == 0) {\n+                workers = Runtime.getRuntime().availableProcessors();\n+            }\n+            fjpSync = new ForkJoinPool(workers, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, false);\n+            fjpAsync = new ForkJoinPool(workers, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);\n@@ -78,3 +89,0 @@\n-        fjpSync = new ForkJoinPool(workers, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, false);\n-        fjpAsync = new ForkJoinPool(workers, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);\n-    }\n@@ -82,4 +90,6 @@\n-    @TearDown\n-    public void teardown() {\n-        fjpSync.shutdownNow();\n-        fjpAsync.shutdownNow();\n+\n+        @TearDown\n+        public void teardown() {\n+            fjpSync.shutdownNow();\n+            fjpAsync.shutdownNow();\n+        }\n@@ -87,0 +97,1 @@\n+    private Problem problem;\n@@ -88,3 +99,3 @@\n-    @Benchmark\n-    public long baselineRaw() {\n-        return problem.solve();\n+    @Setup\n+    public void setup() {\n+        problem = new Problem(size);\n@@ -94,2 +105,2 @@\n-    public Long testExplicit_Sync() throws ExecutionException, InterruptedException {\n-        return fjpSync.invoke(new ExplicitTask(problem, 0, problem.size(), threshold));\n+    public Long testExplicit_Sync(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjpSync.invoke(new ExplicitTask(problem, 0, problem.size(), state.threshold));\n@@ -99,2 +110,2 @@\n-    public Long testExplicit_Async() throws ExecutionException, InterruptedException {\n-        return fjpAsync.invoke(new ExplicitTask(problem, 0, problem.size(), threshold));\n+    public Long testExplicit_Async(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjpAsync.invoke(new ExplicitTask(problem, 0, problem.size(), state.threshold));\n@@ -104,2 +115,2 @@\n-    public Long testStandard_Sync() throws ExecutionException, InterruptedException {\n-        return fjpSync.invoke(new StandardTask(problem, 0, problem.size(), threshold));\n+    public Long testStandard_Sync(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjpSync.invoke(new StandardTask(problem, 0, problem.size(), state.threshold));\n@@ -109,2 +120,2 @@\n-    public Long testStandard_Async() throws ExecutionException, InterruptedException {\n-        return fjpAsync.invoke(new StandardTask(problem, 0, problem.size(), threshold));\n+    public Long testStandard_Async(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjpAsync.invoke(new StandardTask(problem, 0, problem.size(), state.threshold));\n@@ -176,2 +187,0 @@\n-\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ForkJoinPoolForking.java","additions":43,"deletions":34,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -51,0 +54,3 @@\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ForkJoinPoolRawCallable.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(3)\n@@ -57,3 +63,0 @@\n-    @Param(\"0\")\n-    private int workers;\n-\n@@ -63,2 +66,3 @@\n-    @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"})\n-    private int threshold;\n+    \/** Encapsulate all the state depended on only by actual test. This avoids running baselines for every parameter value. *\/\n+    @State(Scope.Benchmark)\n+    public static class TestState {\n@@ -66,2 +70,2 @@\n-    private ForkJoinPool fjp;\n-    private Problem problem;\n+        @Param(\"0\")\n+        private int workers;\n@@ -69,4 +73,11 @@\n-    @Setup\n-    public void setup() {\n-        if (workers == 0) {\n-            workers = Runtime.getRuntime().availableProcessors();\n+        @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"})\n+        private int threshold;\n+\n+        private ForkJoinPool fjp;\n+\n+        @Setup\n+        public void setup() {\n+            if (workers == 0) {\n+                workers = Runtime.getRuntime().availableProcessors();\n+            }\n+            fjp = new ForkJoinPool(workers);\n@@ -75,2 +86,4 @@\n-        problem = new Problem(size);\n-        fjp = new ForkJoinPool(workers);\n+        @TearDown\n+        public void teardown() {\n+            fjp.shutdownNow();\n+        }\n@@ -79,3 +92,5 @@\n-    @TearDown\n-    public void teardown() {\n-        fjp.shutdownNow();\n+    private Problem problem;\n+\n+    @Setup\n+    public void setup() {\n+        problem = new Problem(size);\n@@ -90,2 +105,2 @@\n-    public Long test() throws ExecutionException, InterruptedException {\n-        return fjp.invoke(new AutoQueuedTask(threshold, problem, 0, problem.size()));\n+    public Long test(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjp.invoke(new AutoQueuedTask(state.threshold, problem, 0, problem.size()));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ForkJoinPoolThresholdAutoQueued.java","additions":34,"deletions":19,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(3)\n@@ -57,3 +63,0 @@\n-    @Param(\"0\")\n-    private int workers;\n-\n@@ -63,2 +66,3 @@\n-    @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"})\n-    private int threshold;\n+    \/** Encapsulate all the state depended on only by actual test. This avoids running baselines for every parameter value. *\/\n+    @State(Scope.Benchmark)\n+    public static class TestState {\n@@ -66,2 +70,2 @@\n-    private ForkJoinPool fjp;\n-    private Problem problem;\n+        @Param(\"0\")\n+        private int workers;\n@@ -69,4 +73,11 @@\n-    @Setup\n-    public void setup() {\n-        if (workers == 0) {\n-            workers = Runtime.getRuntime().availableProcessors();\n+        @Param({\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"})\n+        private int threshold;\n+\n+        private ForkJoinPool fjp;\n+\n+        @Setup\n+        public void setup() {\n+            if (workers == 0) {\n+                workers = Runtime.getRuntime().availableProcessors();\n+            }\n+            fjp = new ForkJoinPool(workers);\n@@ -75,2 +86,4 @@\n-        problem = new Problem(size);\n-        fjp = new ForkJoinPool(workers);\n+        @TearDown\n+        public void teardown() {\n+            fjp.shutdownNow();\n+        }\n@@ -79,3 +92,5 @@\n-    @TearDown\n-    public void teardown() {\n-        fjp.shutdownNow();\n+    private Problem problem;\n+\n+    @Setup\n+    public void setup() {\n+        problem = new Problem(size);\n@@ -90,2 +105,2 @@\n-    public Long test() throws ExecutionException, InterruptedException {\n-        return fjp.invoke(new AutoQueuedTask(threshold, problem, 0, problem.size()));\n+    public Long test(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjp.invoke(new AutoQueuedTask(state.threshold, problem, 0, problem.size()));\n@@ -125,3 +140,0 @@\n-\n-\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ForkJoinPoolThresholdAutoSurplus.java","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(3)\n@@ -59,3 +65,0 @@\n-    @Param(\"0\")\n-    private int workers;\n-\n@@ -65,2 +68,3 @@\n-    @Param({\"1\", \"5\", \"10\", \"50\", \"100\", \"500\", \"1000\", \"5000\", \"10000\", \"50000\", \"100000\", \"500000\", \"1000000\", \"5000000\", \"10000000\"})\n-    private int threshold;\n+    \/** Encapsulate all the state depended on only by actual test. This avoids running baselines for every parameter value. *\/\n+    @State(Scope.Benchmark)\n+    public static class TestState {\n@@ -68,2 +72,2 @@\n-    private ForkJoinPool fjp;\n-    private Problem problem;\n+        @Param(\"0\")\n+        private int workers;\n@@ -71,4 +75,11 @@\n-    @Setup\n-    public void setup() {\n-        if (workers == 0) {\n-            workers = Runtime.getRuntime().availableProcessors();\n+        @Param({\"1\", \"5\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"})\n+        private int threshold;\n+\n+        private ForkJoinPool fjp;\n+\n+        @Setup\n+        public void setup() {\n+            if (workers == 0) {\n+                workers = Runtime.getRuntime().availableProcessors();\n+            }\n+            fjp = new ForkJoinPool(workers);\n@@ -77,2 +88,4 @@\n-        problem = new Problem(size);\n-        fjp = new ForkJoinPool(workers);\n+        @TearDown\n+        public void teardown() {\n+            fjp.shutdownNow();\n+        }\n@@ -81,3 +94,5 @@\n-    @TearDown\n-    public void teardown() {\n-        fjp.shutdownNow();\n+    private Problem problem;\n+\n+    @Setup\n+    public void setup() {\n+        problem = new Problem(size);\n@@ -92,2 +107,2 @@\n-    public Long test() throws ExecutionException, InterruptedException {\n-        return fjp.invoke(new AdjustableThreshTask(threshold, problem, 0, problem.size()));\n+    public Long test(TestState state) throws ExecutionException, InterruptedException {\n+        return state.fjp.invoke(new AdjustableThreshTask(state.threshold, problem, 0, problem.size()));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ForkJoinPoolThresholdStatic.java","additions":34,"deletions":19,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -47,0 +50,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Locks.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Maps.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -50,0 +53,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ProducerConsumer.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Queues.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ThreadLocalRandomNextInt.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}