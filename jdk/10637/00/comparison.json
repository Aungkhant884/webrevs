{"files":[{"patch":"@@ -617,1 +617,0 @@\n-sun\/security\/provider\/PolicyParser\/ExtDirsChange.java           8039280 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -599,3 +599,0 @@\n-    sun\/security\/provider\/PolicyParser\/ExtDirs.java \\\n-    sun\/security\/provider\/PolicyParser\/ExtDirsChange.java \\\n-    sun\/security\/provider\/PolicyParser\/ExtDirsDefaultPolicy.java \\\n","filename":"test\/jdk\/TEST.groups","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- *\n+ * @test\n@@ -29,1 +29,2 @@\n- * @run main\/manual Root\n+ * @library \/test\/lib\n+ * @run driver Root\n@@ -32,4 +33,2 @@\n-\/*\n- * Place Root.policy in the root home directory (\/),\n- * as \/.java.policy and run as test as root user.\n- *\/\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -37,0 +36,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -40,6 +43,33 @@\n-    public static void main(String[] args) {\n-        Policy p = Policy.getPolicy();\n-        if (p.implies(Root.class.getProtectionDomain(), new AllPermission())) {\n-            System.out.println(\"Test succeeded\");\n-        } else {\n-            throw new SecurityException(\"Test failed\");\n+    private static final String SRC = System.getProperty(\"test.src\");\n+    private static final String ROOT = System.getProperty(\"user.home\");\n+    private static final Path SOURCE = Paths.get(SRC, \"Root.policy\");\n+    private static final Path TARGET = Paths.get(ROOT, \".java.policy\");\n+    public static void main(String[] args) throws Exception {\n+        Files.copy(SOURCE, TARGET, StandardCopyOption.REPLACE_EXISTING);\n+        try {\n+            test();\n+        } finally {\n+            Files.delete(TARGET);\n+        }\n+    }\n+\n+    private static void test() throws Exception{\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                RootTest.class.getName()\n+        );\n+\n+        Process proc = pb.start();\n+        OutputAnalyzer output = new OutputAnalyzer(proc);\n+        output.stdoutShouldNotBeEmpty();\n+        output.shouldContain(\"Test succeeded\");\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    class RootTest {\n+        public static void main(String[] args) {\n+            Policy p = Policy.getPolicy();\n+            if (p.implies(Root.class.getProtectionDomain(), new AllPermission())) {\n+                System.out.println(\"Test succeeded\");\n+            } else {\n+                throw new SecurityException(\"Test failed\");\n+            }\n","filename":"test\/jdk\/java\/security\/Policy\/Root\/Root.java","additions":43,"deletions":13,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/**\n+\/*\n@@ -30,1 +30,2 @@\n- * @run main\/manual InconsistentEntries\n+ * @library \/test\/lib\n+ * @run driver InconsistentEntries\n@@ -32,0 +33,4 @@\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -36,0 +41,2 @@\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -40,14 +47,5 @@\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"***********************************************************\");\n-        System.out.println(\"\/\/ This is a manual test to test a custom \\\"default_local.policy\\\" containing inconsistent entries\");\n-        System.out.println(\"\/\/ under a new subfolder \\\"$JAVA_HOME\/conf\/security\/policy\\\" directory.\");\n-        System.out.println(\"\/\/ This test fails when the policy directory \\\"testlimited\\\" or the policy \\\"default_local.policy\");\n-        System.out.println(\"\/\/ does not exist or is empty.\");\n-        System.out.println(\"\/\/ - Create a new subfolder \\\"testlimited\\\" under \\\"$JAVA_HOME\/conf\/security\/policy\\\"\");\n-        System.out.println(\"\/\/ - Place the custom \\\"default_local.policy\\\" under \\\"testlimited\\\" directory\");\n-        System.out.println(\"\/\/ - default_local.policy contains:\");\n-        System.out.println(\"\/\/   grant {\");\n-        System.out.println(\"\/\/       permission javax.crypto.CryptoAllPermission;\");\n-        System.out.println(\"\/\/       permission javax.crypto.CryptoPermission \\\"DES\\\", 64;\");\n-        System.out.println(\"\/\/   };\");\n-        System.out.println(\"***********************************************************\");\n+    private static final String JDK_HOME = System.getProperty(\"test.jdk\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+    private static final Path POLICY_DIR = Paths.get(JDK_HOME, \"conf\", \"security\",\n+            \"policy\", \"testlimited\");\n+    private static final Path POLICY_FILE = Paths.get(TEST_SRC, \"default_local.policy\");\n@@ -55,6 +53,3 @@\n-        String JAVA_HOME = System.getProperty(\"java.home\");\n-        String FS = System.getProperty(\"file.separator\");\n-        Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                FS + \"policy\" + FS + \"testlimited\");\n-        if (!Files.exists(testlimited)) {\n-            throw new RuntimeException(\"custom policy subdirectory: testlimited does not exist\");\n+    public static void main(String[] args) throws Exception {\n+        if (!POLICY_DIR.toFile().exists()) {\n+            Files.createDirectory(POLICY_DIR);\n@@ -63,4 +58,7 @@\n-        File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n-        if (testpolicy.length() == 0) {\n-            throw new RuntimeException(\"policy: default_local.policy does not exist or is empty\");\n+        Path targetFile = POLICY_DIR.resolve(POLICY_FILE.getFileName());\n+        Files.copy(POLICY_FILE, targetFile, StandardCopyOption.REPLACE_EXISTING);\n+\n+        try {\n+            test();\n+        } finally {\n+            Files.delete(targetFile);\n@@ -68,0 +66,1 @@\n+    }\n@@ -69,1 +68,4 @@\n-        Security.setProperty(\"crypto.policy\", \"testlimited\");\n+    private static void test() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                InconsistentEntriesTest.class.getName()\n+        );\n@@ -71,6 +73,34 @@\n-        try {\n-            int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n-            throw new RuntimeException(\"Should fail due to inconsistent entries in policy file\");\n-        } catch (ExceptionInInitializerError e) {\n-            e.printStackTrace();\n-            System.out.println(\"Test completed successfully\");\n+        Process proc = pb.start();\n+        OutputAnalyzer output = new OutputAnalyzer(proc);\n+        output.shouldContain(\"Test completed successfully\");\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    class InconsistentEntriesTest {\n+        public static void main(String[] args) throws Exception {\n+            String JAVA_HOME = System.getProperty(\"java.home\");\n+            String FS = System.getProperty(\"file.separator\");\n+            Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                    FS + \"policy\" + FS + \"testlimited\");\n+            if (!Files.exists(testlimited)) {\n+                throw new RuntimeException(\n+                        \"custom policy subdirectory: testlimited does not exist\");\n+            }\n+\n+            File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                    FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n+            if (testpolicy.length() == 0) {\n+                throw new RuntimeException(\n+                        \"policy: default_local.policy does not exist or is empty\");\n+            }\n+\n+            Security.setProperty(\"crypto.policy\", \"testlimited\");\n+\n+            try {\n+                int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n+                throw new RuntimeException(\n+                        \"Should fail due to inconsistent entries in policy file\");\n+            } catch (ExceptionInInitializerError e) {\n+                e.printStackTrace();\n+                System.out.println(\"Test completed successfully\");\n+            }\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":63,"deletions":33,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+grant {\n+    permission javax.crypto.CryptoAllPermission;\n+    permission javax.crypto.CryptoPermission \"DES\", 64;\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/default_local.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/manual ExtDirs\n+ * @run main ExtDirs\n@@ -33,6 +33,5 @@\n- * Run this test manually with:\n- * java    -Djava.security.manager \\\n- *         -Djava.ext.dirs=.\/ExtDirsA:.\/ExtDirsB \\\n- *         -Djava.security.policy==.\/ExtDirs.policy \\\n- *         -Djava.security.debug=parser \\\n- *         ExtDirs\n+ * @test\n+ * @bug 4215035\n+ * @summary standard extensions path is hard-coded in default\n+ *      system policy file\n+ * @run main\/othervm\/policy=ExtDirs.policy\/secure=default ExtDirs\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-grant codebase \"${java.ext.dirs}\" {\n+grant codebase \"file:${test.classes}\" {\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs.policy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-grant codebase \"file:${{java.ext.dirs}}\/*\" {\n+grant codebase \"file:${test.classes}\" {\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs1.policy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-grant codebase \"file:${{java.ext.dirs}}\" {\n+grant codebase \"file:${test.classes}\/*\" {\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs2.policy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-grant codebase \"${{java.ext.dirs}}\" {\n+grant codebase \"file:${test.classes}\/-\" {\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs3.policy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/manual ExtDirsChange\n+ * @run main\/othervm\/policy=ExtDirsChange.policy\/secure=default ExtDirsChange\n@@ -32,13 +32,0 @@\n-\/*\n- * Run this test manually with:\n- * javac ExtDirChange\n- * rm ExtDirsA*.class ExtDirsB*.class\n- * java    -Djava.security.manager \\\n- *         -Dtest.src=. \\\n- *         -Djava.security.policy=ExtDirsChange.policy \\\n- *         -Djava.security.debug=parser \\\n- *         -cp ExtDirsA\/a.jar:ExtDirsB\/b.jar:. \\\n- *         ExtDirsChange\n- *\/\n-\n-import java.io.File;\n@@ -49,2 +36,2 @@\n-        System.out.println(\"java.ext.dirs: \" +\n-            System.getProperty(\"java.ext.dirs\"));\n+        System.out.println(\"java.policy.dirs: \" +\n+                System.getProperty(\"java.policy.dirs\"));\n@@ -52,1 +39,1 @@\n-        \/\/ Uses default security policy and java.ext.dirs\n+        \/\/ Uses default security policy and java.policy.dirs\n@@ -61,1 +48,1 @@\n-        \/\/ Change java.ext.dirs and refresh policy\n+        \/\/ Change java.policy.dirs and refresh policy\n@@ -64,5 +51,5 @@\n-                \/\/ Change java.ext.dirs\n-                System.setProperty(\"java.ext.dirs\",\n-                    \"ExtDirsA\" + File.pathSeparator + \"ExtDirsB\");\n-                System.out.println(\"java.ext.dirs: \" +\n-                    System.getProperty(\"java.ext.dirs\"));\n+                \/\/ Change java.policy.dirs\n+                System.setProperty(\"java.policy.dirs\",\n+                        System.getProperty(\"test.classes\"));\n+                System.out.println(\"java.policy.dirs: \" +\n+                        System.getProperty(\"java.policy.dirs\"));\n@@ -82,1 +69,1 @@\n-        \/\/ Refresh policy using updated java.ext.dirs\n+        \/\/ Refresh policy using updated java.policy.dirs\n@@ -102,1 +89,1 @@\n-        \/\/ Change java.ext.dirs and refresh policy\n+        \/\/ Change java.policy.dirs and refresh policy\n@@ -105,4 +92,4 @@\n-                \/\/ Change java.ext.dirs\n-                System.setProperty(\"java.ext.dirs\", \" \");\n-                System.out.println(\"java.ext.dirs: \" +\n-                    System.getProperty(\"java.ext.dirs\"));\n+                \/\/ Change java.policy.dirs\n+                System.setProperty(\"java.policy.dirs\", \" \");\n+                System.out.println(\"java.policy.dirs: \" +\n+                        System.getProperty(\"java.policy.dirs\"));\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsChange.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -1,2 +1,4 @@\n-grant codebase \"file:${test.src}\/*\" {\n-    permission java.security.AllPermission;\n+grant {\n+    permission java.util.PropertyPermission \"test.classes\", \"read\";\n+    permission java.security.SecurityPermission \"getPolicy\";\n+    permission java.security.SecurityPermission \"setPolicy\";\n@@ -5,1 +7,7 @@\n-grant codebase \"${java.ext.dirs}\" {\n+grant codebase \"file:${test.classes}\/*\" {\n+    permission java.util.PropertyPermission \"java.policy.dirs\", \"read, write\";\n+    permission java.util.PropertyPermission \"user.name\", \"write\";\n+    permission java.util.PropertyPermission \"user.home\", \"write\";\n+};\n+\n+grant codebase \"file:${java.policy.dirs}\" {\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsChange.policy","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/manual ExtDirsDefaultPolicy\n+ * @run main ExtDirsDefaultPolicy\n@@ -33,5 +33,4 @@\n- * Run this test manually with:\n- * java    -Djava.security.manager \\\n- *         -Djava.ext.dirs=.\/ExtDirsA:.\/ExtDirsB \\\n- *         -Djava.security.debug=parser \\\n- *         ExtDirsDefaultPolicy\n+ * @test\n+ * @bug 4993819\n+ * @summary standard extensions path is hard-coded in default\n+ *      system policy file\n@@ -39,3 +38,17 @@\n- * To test other varients of the ${{java.ext.dirs}} protocol, remove\n- * the grant statement for java.ext.dirs in $JAVA_HOME\/lib\/security\/java.policy\n- * and then run against the 3 different policy files.\n+ * @run main\/othervm\/policy=ExtDirs1.policy\/secure=default ExtDirsDefaultPolicy\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4993819\n+ * @summary standard extensions path is hard-coded in default\n+ *      system policy file\n+ *\n+ * @run main\/othervm\/policy=ExtDirs2.policy\/secure=default ExtDirsDefaultPolicy\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4993819\n+ * @summary standard extensions path is hard-coded in default\n+ *      system policy file\n@@ -43,5 +56,1 @@\n- * java    -Djava.security.manager \\\n- *         -Djava.ext.dirs=.\/ExtDirsA:.\/ExtDirsB \\\n- *         -Djava.security.debug=parser \\\n- *         -Djava.security.policy=ExtDirs{1,2,3}.policy \\\n- *         ExtDirsDefaultPolicy\n+ * @run main\/othervm\/policy=ExtDirs3.policy\/secure=default ExtDirsDefaultPolicy\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsDefaultPolicy.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"}]}