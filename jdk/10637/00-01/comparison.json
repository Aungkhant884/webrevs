{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @run driver Root\n+ * @run testng\/othervm Root\n@@ -33,2 +33,4 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n@@ -36,0 +38,1 @@\n+import java.io.IOException;\n@@ -47,1 +50,3 @@\n-    public static void main(String[] args) throws Exception {\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n@@ -49,5 +54,0 @@\n-        try {\n-            test();\n-        } finally {\n-            Files.delete(TARGET);\n-        }\n@@ -56,10 +56,3 @@\n-    private static void test() throws Exception{\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                RootTest.class.getName()\n-        );\n-\n-        Process proc = pb.start();\n-        OutputAnalyzer output = new OutputAnalyzer(proc);\n-        output.stdoutShouldNotBeEmpty();\n-        output.shouldContain(\"Test succeeded\");\n-        System.out.println(\"Test passed.\");\n+    @AfterTest\n+    public void cleanUp() throws IOException {\n+        Files.delete(TARGET);\n@@ -68,9 +61,5 @@\n-    class RootTest {\n-        public static void main(String[] args) {\n-            Policy p = Policy.getPolicy();\n-            if (p.implies(Root.class.getProtectionDomain(), new AllPermission())) {\n-                System.out.println(\"Test succeeded\");\n-            } else {\n-                throw new SecurityException(\"Test failed\");\n-            }\n-        }\n+    @Test\n+    private void test() {\n+        Policy p = Policy.getPolicy();\n+        Assert.assertTrue(p.implies(Root.class.getProtectionDomain(),\n+                new AllPermission()));\n","filename":"test\/jdk\/java\/security\/Policy\/Root\/Root.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run driver InconsistentEntries\n+ * @run testng\/othervm InconsistentEntries\n@@ -34,2 +34,3 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n@@ -39,0 +40,1 @@\n+import java.io.IOException;\n@@ -53,1 +55,4 @@\n-    public static void main(String[] args) throws Exception {\n+    Path targetFile = null;\n+\n+    @BeforeTest\n+    public void setUp() throws IOException {\n@@ -58,1 +63,1 @@\n-        Path targetFile = POLICY_DIR.resolve(POLICY_FILE.getFileName());\n+        targetFile = POLICY_DIR.resolve(POLICY_FILE.getFileName());\n@@ -60,6 +65,0 @@\n-\n-        try {\n-            test();\n-        } finally {\n-            Files.delete(targetFile);\n-        }\n@@ -68,9 +67,3 @@\n-    private static void test() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                InconsistentEntriesTest.class.getName()\n-        );\n-\n-        Process proc = pb.start();\n-        OutputAnalyzer output = new OutputAnalyzer(proc);\n-        output.shouldContain(\"Test completed successfully\");\n-        System.out.println(\"Test passed.\");\n+    @AfterTest\n+    public void cleanUp() throws IOException {\n+        Files.delete(targetFile);\n@@ -79,10 +72,10 @@\n-    class InconsistentEntriesTest {\n-        public static void main(String[] args) throws Exception {\n-            String JAVA_HOME = System.getProperty(\"java.home\");\n-            String FS = System.getProperty(\"file.separator\");\n-            Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                    FS + \"policy\" + FS + \"testlimited\");\n-            if (!Files.exists(testlimited)) {\n-                throw new RuntimeException(\n-                        \"custom policy subdirectory: testlimited does not exist\");\n-            }\n+    @Test\n+    public void test() throws Exception {\n+        String JAVA_HOME = System.getProperty(\"java.home\");\n+        String FS = System.getProperty(\"file.separator\");\n+        Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                FS + \"policy\" + FS + \"testlimited\");\n+        if (!Files.exists(testlimited)) {\n+            throw new RuntimeException(\n+                    \"custom policy subdirectory: testlimited does not exist\");\n+        }\n@@ -90,6 +83,6 @@\n-            File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                    FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n-            if (testpolicy.length() == 0) {\n-                throw new RuntimeException(\n-                        \"policy: default_local.policy does not exist or is empty\");\n-            }\n+        File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n+        if (testpolicy.length() == 0) {\n+            throw new RuntimeException(\n+                    \"policy: default_local.policy does not exist or is empty\");\n+        }\n@@ -97,1 +90,1 @@\n-            Security.setProperty(\"crypto.policy\", \"testlimited\");\n+        Security.setProperty(\"crypto.policy\", \"testlimited\");\n@@ -99,8 +92,7 @@\n-            try {\n-                int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n-                throw new RuntimeException(\n-                        \"Should fail due to inconsistent entries in policy file\");\n-            } catch (ExceptionInInitializerError e) {\n-                e.printStackTrace();\n-                System.out.println(\"Test completed successfully\");\n-            }\n+        try {\n+            int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n+            throw new RuntimeException(\n+                    \"Should fail due to inconsistent entries in policy file\");\n+        } catch (ExceptionInInitializerError e) {\n+            e.printStackTrace();\n+            System.out.println(\"Test completed successfully\");\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":37,"deletions":45,"binary":false,"changes":82,"status":"modified"}]}