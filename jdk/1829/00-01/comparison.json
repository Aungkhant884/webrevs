{"files":[{"patch":"@@ -176,1 +176,1 @@\n-    static void exec(ProcessBuilder pb, boolean testForPresenceOnly,\n+    static synchronized void exec(ProcessBuilder pb, boolean testForPresenceOnly,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-    private static void runJLink(Path output, List<Path> modulePath,\n+    private static synchronized void runJLink(Path output, List<Path> modulePath,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/JLinkBundlerHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,15 +63,0 @@\n-    public static PackageType getDefault() {\n-        if (TKit.isWindows()) {\n-            return WIN_EXE;\n-        } else if (TKit.isOSX()) {\n-            return MAC_DMG;\n-        } else if (TKit.isLinux()) {\n-            if (LINUX_DEB.isSupported()) {\n-                return LINUX_DEB;\n-            } else if (LINUX_RPM.isSupported()) {\n-                return LINUX_RPM;\n-            }\n-        }\n-        throw new RuntimeException(\"Failed to determine default package type\");\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageType.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.util.Date;\n@@ -26,2 +25,2 @@\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.JavaAppDesc;\n@@ -29,0 +28,10 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Functional;\n+import jdk.jpackage.test.HelloApp;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.nio.file.Path;\n+\n@@ -42,1 +51,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=480 -Xmx512m jdk.jpackage.test.Main\n@@ -47,8 +56,1 @@\n-    @Test\n-    public static void test() {\n-\n-        final JPackageCommand cmd1 =\n-                JPackageCommand.helloAppImage(\"com.other\/com.other.Hello\")\n-        .useToolProvider(true)\n-        .setPackageType(PackageType.getDefault())\n-        .setArgumentValue(\"--name\", \"ConcurrentOtherInstaller\");\n+    final int TEST_COUNT = 3; \/\/ default number of jpackage commands to run\n@@ -56,10 +58,14 @@\n-        final JPackageCommand cmd2 =\n-                JPackageCommand.helloAppImage(\"Hello\")\n-        .useToolProvider(true)\n-        .setPackageType(PackageType.IMAGE)\n-        .setArgumentValue(\"--name\", \"ConcurrentAppImage\");\n-\n-        Date[] times = race(cmd1, cmd2);\n-        TKit.assertTrue(times[0].after(times[1]),\n-                \"We expected app-image command to finish first, but times[0] is \"\n-                + times[0] + \" and times[1] is\" + times[1]);\n+    @Test\n+    public void test() throws Exception {\n+        final Path inputDir = TKit.workDir().resolve(\"input\");\n+        int count = TEST_COUNT;\n+        String propValue = System.getProperty(\"jpackage.concurrent.count\");\n+        if (propValue != null) {\n+            try {\n+                count = Integer.parseInt(propValue);\n+            } catch (Exception e) {\n+                \/\/ ignore - use default count\n+            }\n+        }\n+        long timeout = 2L * count; \/\/ minutes to run tests before timeout\n+        HelloApp.createBundle(JavaAppDesc.parse(\"hello.jar:Hello\"), inputDir);\n@@ -67,2 +73,6 @@\n-        cmd1.useToolProvider(false);\n-        cmd1.useToolProvider(false);\n+        List<Runnable> tasks = new ArrayList<>();\n+        for (int i = 0; i < count; i++) {\n+            tasks.add(Functional.ThrowingRunnable.toRunnable(() ->\n+                    initTest(inputDir).run(\n+                    PackageTest.Action.CREATE)));\n+        }\n@@ -70,4 +80,11 @@\n-        times = race(cmd1, cmd2);\n-        TKit.assertTrue(times[0].after(times[1]),\n-                \"We expected app-image command to finish first, but times[0] is \"\n-                + times[0] + \" and times[1] is\" + times[1]);\n+        ExecutorService exec = Executors.newCachedThreadPool();\n+        tasks.stream().forEach(exec::execute);\n+        exec.shutdown();\n+        boolean finished = exec.awaitTermination(timeout, TimeUnit.MINUTES);\n+        \/\/ even if we are throwing assertion below we need to try to stop these\n+        \/\/ threads before exiting\n+        if (!finished) {\n+            exec.shutdownNow();\n+        }\n+        TKit.assertTrue(finished, \"Executing jpackage \" + count +\n+                \" times timed out after \" + timeout + \" minutes.\");\n@@ -76,25 +93,5 @@\n-    private static Date[] race(JPackageCommand cmd1, JPackageCommand cmd2) {\n-        final Date[] times = new Date[2];\n-\n-        Thread t1 = new Thread(new Runnable() {\n-            public void run() {\n-                cmd1.execute();\n-                times[0] = new Date();\n-            }\n-        });\n-\n-        Thread t2 = new Thread(new Runnable() {\n-            public void run() {\n-                cmd2.execute();\n-                times[1] = new Date();\n-            }\n-        });\n-        try {\n-            t1.start();\n-            t2.start();\n-\n-            t1.join();\n-            t2.join();\n-            return times;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+    private PackageTest initTest(Path inputDir)\n+            throws Exception {\n+        final Path outputDir;\n+        synchronized (this) {\n+            outputDir = TKit.createTempDirectory(\"output\");\n@@ -102,0 +99,8 @@\n+        return new PackageTest().addInitializer(cmd -> {\n+            cmd.useToolProvider(true);\n+            cmd.setArgumentValue(\"--input\", inputDir);\n+            cmd.setArgumentValue(\"--main-class\", \"Hello\");\n+            cmd.setArgumentValue(\"--main-jar\", \"hello.jar\");\n+            cmd.setArgumentValue(\"--dest\", outputDir);\n+            cmd.addArguments(\"--verbose\");\n+        });\n","filename":"test\/jdk\/tools\/jpackage\/share\/ConcurrentTest.java","additions":58,"deletions":53,"binary":false,"changes":111,"status":"modified"}]}