{"files":[{"patch":"@@ -175,8 +175,4 @@\n-                \/* todo\n-                 * Our generic code for rasters does not support alpha channels,\n-                 * but it would be good to improve it when it is used from here.\n-                 * See \"createImageLayout(image.getRaster())\" below.\n-                 *\/\n-                if (!cm.hasAlpha() && cm instanceof ComponentColorModel) {\n-                    ComponentColorModel ccm = (ComponentColorModel) cm;\n-\n+                \/\/ lcms as of now does not support pre-alpha\n+                if (!cm.isAlphaPremultiplied()\n+                        && cm instanceof ComponentColorModel ccm)\n+                {\n@@ -190,3 +186,1 @@\n-\n-                    return createImageLayout(image.getRaster());\n-\n+                    return createImageLayout(image.getRaster(), cm.hasAlpha());\n@@ -329,1 +323,1 @@\n-    static LCMSImageLayout createImageLayout(Raster r) {\n+    static LCMSImageLayout createImageLayout(Raster r, boolean hasAlpha) {\n@@ -338,1 +332,2 @@\n-            l.pixelType = CHANNELS_SH(numBands) | BYTES_SH(1);\n+            l.pixelType = (hasAlpha ? CHANNELS_SH(numBands - 1) | EXTRA_SH(1)\n+                                    : CHANNELS_SH(numBands)) | BYTES_SH(1);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,1 +427,1 @@\n-        dstIL = LCMSImageLayout.createImageLayout(dst);\n+        dstIL = LCMSImageLayout.createImageLayout(dst, false);\n@@ -429,1 +429,1 @@\n-            srcIL = LCMSImageLayout.createImageLayout(src);\n+            srcIL = LCMSImageLayout.createImageLayout(src, false);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n@@ -46,1 +48,1 @@\n- * @bug 8012229\n+ * @bug 8012229 8300725\n@@ -59,0 +61,28 @@\n+        differentToNullDst();\n+    }\n+\n+    \/**\n+     * Various types of source images transform to the null destination.\n+     *\/\n+    private static void differentToNullDst() {\n+        nullDst(TYPE_INT_RGB);\n+        nullDst(TYPE_INT_ARGB);\n+\/\/ TODO DirectColorModel and ComponentColorModel have different precision for pre\n+\/\/        nullDst(TYPE_INT_ARGB_PRE);\n+\n+        nullDst(TYPE_INT_BGR);\n+        nullDst(TYPE_3BYTE_BGR);\n+        nullDst(TYPE_4BYTE_ABGR);\n+\n+\/\/ TODO DirectColorModel and ComponentColorModel have different precision for pre\n+\/\/        nullDst(TYPE_4BYTE_ABGR_PRE);\n+\n+\/\/ Default destination for null is always 8 bit per component\n+\/\/        nullDst(TYPE_USHORT_565_RGB);\n+\/\/        nullDst(TYPE_USHORT_555_RGB);\n+        nullDst(TYPE_BYTE_GRAY);\n+\/\/ Default destination for null is always 8 bit per component\n+\/\/        nullDst(TYPE_USHORT_GRAY);\n+        nullDst(TYPE_BYTE_BINARY);\n+\/\/ Default destination for null is always 8 bit per component\n+\/\/        nullDst(TYPE_BYTE_INDEXED);\n@@ -95,0 +125,23 @@\n+    \/**\n+     * Compares the rendering to the default destination created by the\n+     * ColorConvertOp and the destination format equal to the source.\n+     *\/\n+    private static void nullDst(int typeSrc) {\n+        BufferedImage src = createSrc(typeSrc);\n+        BufferedImage gold = createDst(typeSrc);\n+        \/\/ just a round trip from src to src color space\n+        ICC_Profile[] profs = {\n+                ((ICC_ColorSpace) (src.getColorModel().getColorSpace())).getProfile(),\n+                ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB),\n+                ICC_Profile.getInstance(ColorSpace.CS_GRAY),\n+                ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB),\n+                ((ICC_ColorSpace) (src.getColorModel().getColorSpace())).getProfile(),\n+        };\n+        ColorConvertOp op = new ColorConvertOp(profs, null);\n+\n+        op.filter(src, gold);\n+        BufferedImage dst = op.filter(src, null);\n+\n+        validate(gold, dst, false);\n+    }\n+\n@@ -137,2 +190,2 @@\n-                    System.out.println(\"rgb1 = \" + Integer.toHexString(rgb1));\n-                    System.out.println(\"rgb2 = \" + Integer.toHexString(rgb2));\n+                    System.err.println(\"rgb1 = \" + Integer.toHexString(rgb1));\n+                    System.err.println(\"rgb2 = \" + Integer.toHexString(rgb2));\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/ColCvtAlphaDifferentSrcDst.java","additions":57,"deletions":4,"binary":false,"changes":61,"status":"modified"}]}