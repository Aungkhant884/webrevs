{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -314,1 +314,1 @@\n-  assert(st != NULL, \"need an output stream (no default)!\");\n+  assert(st != nullptr, \"need an output stream (no default)!\");\n@@ -318,1 +318,1 @@\n-  while ((pos != NULL) && (pos < range_end)) {\n+  while ((pos != nullptr) && (pos < range_end)) {\n@@ -352,1 +352,1 @@\n-  outputStream* st = (ost == NULL) ? tty : ost;\n+  outputStream* st = (ost == nullptr) ? tty : ost;\n","filename":"src\/hotspot\/share\/compiler\/abstractDisassembler.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  task->print(&sstr, NULL, true, false);\n+  task->print(&sstr, nullptr, true, false);\n@@ -56,1 +56,1 @@\n-  if (retry_message != NULL) {\n+  if (retry_message != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/compilationLog.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-  for (CompileTask* task = compile_queue->first(); task != NULL; ) {\n+  for (CompileTask* task = compile_queue->first(); task != nullptr; ) {\n@@ -180,1 +180,1 @@\n-    for (CompileTask* task = compile_queue->first(); task != NULL; task = task->next()) {\n+    for (CompileTask* task = compile_queue->first(); task != nullptr; task = task->next()) {\n@@ -205,1 +205,1 @@\n-      if (comp != NULL && comp->is_jvmci() && ((JVMCICompiler*) comp)->force_comp_at_level_simple(method)) {\n+      if (comp != nullptr && comp->is_jvmci() && ((JVMCICompiler*) comp)->force_comp_at_level_simple(method)) {\n@@ -216,1 +216,1 @@\n-  if (nm != NULL && nm->is_in_use()) {\n+  if (nm != nullptr && nm->is_in_use()) {\n@@ -332,1 +332,1 @@\n-  if (mdh != NULL) {\n+  if (mdh != nullptr) {\n@@ -609,1 +609,1 @@\n-  if (mcs != NULL) {\n+  if (mcs != nullptr) {\n@@ -614,1 +614,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -622,3 +622,3 @@\n-  CompileTask *max_blocking_task = NULL;\n-  CompileTask *max_task = NULL;\n-  Method* max_method = NULL;\n+  CompileTask *max_blocking_task = nullptr;\n+  CompileTask *max_task = nullptr;\n+  Method* max_method = nullptr;\n@@ -628,1 +628,1 @@\n-  for (CompileTask* task = compile_queue->first(); task != NULL;) {\n+  for (CompileTask* task = compile_queue->first(); task != nullptr;) {\n@@ -649,1 +649,1 @@\n-    if (max_task == NULL || compare_methods(method, max_method)) {\n+    if (max_task == nullptr || compare_methods(method, max_method)) {\n@@ -656,1 +656,1 @@\n-      if (max_blocking_task == NULL || compare_methods(method, max_blocking_task->method())) {\n+      if (max_blocking_task == nullptr || compare_methods(method, max_blocking_task->method())) {\n@@ -664,1 +664,1 @@\n-  if (max_blocking_task != NULL) {\n+  if (max_blocking_task != nullptr) {\n@@ -676,2 +676,2 @@\n-  if (max_task != NULL && max_task->comp_level() == CompLevel_full_profile && TieredStopAtLevel > CompLevel_full_profile &&\n-      max_method != NULL && is_method_profiled(max_method_h) && !Arguments::is_compiler_only()) {\n+  if (max_task != nullptr && max_task->comp_level() == CompLevel_full_profile && TieredStopAtLevel > CompLevel_full_profile &&\n+      max_method != nullptr && is_method_profiled(max_method_h) && !Arguments::is_compiler_only()) {\n@@ -686,1 +686,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -703,1 +703,1 @@\n-    if (mdo != NULL) {\n+    if (mdo != nullptr) {\n@@ -719,1 +719,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -723,1 +723,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -745,2 +745,2 @@\n-      assert(osr_nm == NULL || osr_nm->comp_level() >= expected_comp_level, \"lookup_osr_nmethod_for is broken\");\n-      if (osr_nm != NULL && osr_nm->comp_level() != comp_level) {\n+      assert(osr_nm == nullptr || osr_nm->comp_level() >= expected_comp_level, \"lookup_osr_nmethod_for is broken\");\n+      if (osr_nm != nullptr && osr_nm->comp_level() != comp_level) {\n@@ -752,1 +752,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -793,1 +793,1 @@\n-        if (osr_nm != NULL && osr_nm->comp_level() > CompLevel_simple) {\n+        if (osr_nm != nullptr && osr_nm->comp_level() > CompLevel_simple) {\n@@ -819,1 +819,1 @@\n-  if (method->method_counters() == NULL)  return;\n+  if (method->method_counters() == nullptr)  return;\n@@ -897,1 +897,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -914,1 +914,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -963,1 +963,1 @@\n-  if (mh->method_data() == NULL) {\n+  if (mh->method_data() == nullptr) {\n@@ -968,1 +968,1 @@\n-    if (mdo != NULL) {\n+    if (mdo != nullptr) {\n@@ -1060,1 +1060,1 @@\n-          if (mdo != NULL) {\n+          if (mdo != nullptr) {\n@@ -1083,1 +1083,1 @@\n-          if (mdo != NULL) {\n+          if (mdo != nullptr) {\n@@ -1114,1 +1114,1 @@\n-    guarantee(mdo != NULL, \"MDO should not be NULL\");\n+    guarantee(mdo != nullptr, \"MDO should not be nullptr\");\n@@ -1177,1 +1177,1 @@\n-        guarantee(nm != NULL, \"Should have nmethod here\");\n+        guarantee(nm != nullptr, \"Should have nmethod here\");\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-  \/\/ Select task is called by CompileBroker. We should return a task or NULL.\n+  \/\/ Select task is called by CompileBroker. We should return a task or nullptr.\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,2 +135,2 @@\n-jobject* CompileBroker::_compiler1_objects = NULL;\n-jobject* CompileBroker::_compiler2_objects = NULL;\n+jobject* CompileBroker::_compiler1_objects = nullptr;\n+jobject* CompileBroker::_compiler2_objects = nullptr;\n@@ -138,2 +138,2 @@\n-CompileLog** CompileBroker::_compiler1_logs = NULL;\n-CompileLog** CompileBroker::_compiler2_logs = NULL;\n+CompileLog** CompileBroker::_compiler1_logs = nullptr;\n+CompileLog** CompileBroker::_compiler2_logs = nullptr;\n@@ -147,22 +147,22 @@\n-PerfCounter* CompileBroker::_perf_total_compilation = NULL;\n-PerfCounter* CompileBroker::_perf_osr_compilation = NULL;\n-PerfCounter* CompileBroker::_perf_standard_compilation = NULL;\n-\n-PerfCounter* CompileBroker::_perf_total_bailout_count = NULL;\n-PerfCounter* CompileBroker::_perf_total_invalidated_count = NULL;\n-PerfCounter* CompileBroker::_perf_total_compile_count = NULL;\n-PerfCounter* CompileBroker::_perf_total_osr_compile_count = NULL;\n-PerfCounter* CompileBroker::_perf_total_standard_compile_count = NULL;\n-\n-PerfCounter* CompileBroker::_perf_sum_osr_bytes_compiled = NULL;\n-PerfCounter* CompileBroker::_perf_sum_standard_bytes_compiled = NULL;\n-PerfCounter* CompileBroker::_perf_sum_nmethod_size = NULL;\n-PerfCounter* CompileBroker::_perf_sum_nmethod_code_size = NULL;\n-\n-PerfStringVariable* CompileBroker::_perf_last_method = NULL;\n-PerfStringVariable* CompileBroker::_perf_last_failed_method = NULL;\n-PerfStringVariable* CompileBroker::_perf_last_invalidated_method = NULL;\n-PerfVariable*       CompileBroker::_perf_last_compile_type = NULL;\n-PerfVariable*       CompileBroker::_perf_last_compile_size = NULL;\n-PerfVariable*       CompileBroker::_perf_last_failed_type = NULL;\n-PerfVariable*       CompileBroker::_perf_last_invalidated_type = NULL;\n+PerfCounter* CompileBroker::_perf_total_compilation = nullptr;\n+PerfCounter* CompileBroker::_perf_osr_compilation = nullptr;\n+PerfCounter* CompileBroker::_perf_standard_compilation = nullptr;\n+\n+PerfCounter* CompileBroker::_perf_total_bailout_count = nullptr;\n+PerfCounter* CompileBroker::_perf_total_invalidated_count = nullptr;\n+PerfCounter* CompileBroker::_perf_total_compile_count = nullptr;\n+PerfCounter* CompileBroker::_perf_total_osr_compile_count = nullptr;\n+PerfCounter* CompileBroker::_perf_total_standard_compile_count = nullptr;\n+\n+PerfCounter* CompileBroker::_perf_sum_osr_bytes_compiled = nullptr;\n+PerfCounter* CompileBroker::_perf_sum_standard_bytes_compiled = nullptr;\n+PerfCounter* CompileBroker::_perf_sum_nmethod_size = nullptr;\n+PerfCounter* CompileBroker::_perf_sum_nmethod_code_size = nullptr;\n+\n+PerfStringVariable* CompileBroker::_perf_last_method = nullptr;\n+PerfStringVariable* CompileBroker::_perf_last_failed_method = nullptr;\n+PerfStringVariable* CompileBroker::_perf_last_invalidated_method = nullptr;\n+PerfVariable*       CompileBroker::_perf_last_compile_type = nullptr;\n+PerfVariable*       CompileBroker::_perf_last_compile_size = nullptr;\n+PerfVariable*       CompileBroker::_perf_last_failed_type = nullptr;\n+PerfVariable*       CompileBroker::_perf_last_invalidated_type = nullptr;\n@@ -194,2 +194,2 @@\n-CompileQueue* CompileBroker::_c2_compile_queue     = NULL;\n-CompileQueue* CompileBroker::_c1_compile_queue     = NULL;\n+CompileQueue* CompileBroker::_c2_compile_queue     = nullptr;\n+CompileQueue* CompileBroker::_c1_compile_queue     = nullptr;\n@@ -219,1 +219,1 @@\n-  if (log != NULL && !task->is_unloaded())  task->log_task_start(log);\n+  if (log != nullptr && !task->is_unloaded())  task->log_task_start(log);\n@@ -226,3 +226,3 @@\n-  if (log != NULL && !task->is_unloaded())  task->log_task_done(log);\n-  thread->set_task(NULL);\n-  thread->set_env(NULL);\n+  if (log != nullptr && !task->is_unloaded())  task->log_task_done(log);\n+  thread->set_task(nullptr);\n+  thread->set_env(nullptr);\n@@ -240,1 +240,1 @@\n-        task->set_blocking_jvmci_compile_state(NULL);\n+        task->set_blocking_jvmci_compile_state(nullptr);\n@@ -302,1 +302,1 @@\n-        _compiler2_objects[compiler_count - 1] = NULL;\n+        _compiler2_objects[compiler_count - 1] = nullptr;\n@@ -317,2 +317,2 @@\n-  task->set_next(NULL);\n-  task->set_prev(NULL);\n+  task->set_next(nullptr);\n+  task->set_prev(nullptr);\n@@ -320,1 +320,1 @@\n-  if (_last == NULL) {\n+  if (_last == nullptr) {\n@@ -322,1 +322,1 @@\n-    assert(_first == NULL, \"queue is empty\");\n+    assert(_first == nullptr, \"queue is empty\");\n@@ -327,1 +327,1 @@\n-    assert(_last->next() == NULL, \"not last\");\n+    assert(_last->next() == nullptr, \"not last\");\n@@ -341,1 +341,1 @@\n-  if (LogCompilation && xtty != NULL) {\n+  if (LogCompilation && xtty != nullptr) {\n@@ -360,1 +360,1 @@\n-  while (next != NULL) {\n+  while (next != nullptr) {\n@@ -371,2 +371,2 @@\n-  _first = NULL;\n-  _last = NULL;\n+  _first = nullptr;\n+  _last = nullptr;\n@@ -388,1 +388,1 @@\n-  \/\/ If _first is NULL we have no more compile jobs. There are two reasons for\n+  \/\/ If _first is nullptr we have no more compile jobs. There are two reasons for\n@@ -393,1 +393,1 @@\n-  while (_first == NULL) {\n+  while (_first == nullptr) {\n@@ -396,1 +396,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -416,1 +416,1 @@\n-    if (UseDynamicNumberOfCompilerThreads && _first == NULL) {\n+    if (UseDynamicNumberOfCompilerThreads && _first == nullptr) {\n@@ -418,1 +418,1 @@\n-      if (CompileBroker::can_remove(CompilerThread::current(), false)) return NULL;\n+      if (CompileBroker::can_remove(CompilerThread::current(), false)) return nullptr;\n@@ -423,1 +423,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -430,1 +430,1 @@\n-    if (task != NULL) {\n+    if (task != nullptr) {\n@@ -435,1 +435,1 @@\n-  if (task != NULL) {\n+  if (task != nullptr) {\n@@ -452,1 +452,1 @@\n-  if (_first_stale != NULL) {\n+  if (_first_stale != nullptr) {\n@@ -458,1 +458,1 @@\n-    _first_stale = NULL;\n+    _first_stale = nullptr;\n@@ -461,1 +461,1 @@\n-      for (CompileTask* task = head; task != NULL; ) {\n+      for (CompileTask* task = head; task != nullptr; ) {\n@@ -473,1 +473,1 @@\n-  if (task->prev() != NULL) {\n+  if (task->prev() != nullptr) {\n@@ -481,1 +481,1 @@\n-  if (task->next() != NULL) {\n+  if (task->next() != nullptr) {\n@@ -497,1 +497,1 @@\n-  task->set_prev(NULL);\n+  task->set_prev(nullptr);\n@@ -505,1 +505,1 @@\n-  while (task != NULL) {\n+  while (task != nullptr) {\n@@ -515,1 +515,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -526,1 +526,1 @@\n-  if (_c1_compile_queue != NULL) {\n+  if (_c1_compile_queue != nullptr) {\n@@ -529,1 +529,1 @@\n-  if (_c2_compile_queue != NULL) {\n+  if (_c2_compile_queue != nullptr) {\n@@ -538,1 +538,1 @@\n-  if (task == NULL) {\n+  if (task == nullptr) {\n@@ -541,2 +541,2 @@\n-    while (task != NULL) {\n-      task->print(st, NULL, true, true);\n+    while (task != nullptr) {\n+      task->print(st, nullptr, true, true);\n@@ -835,1 +835,1 @@\n-  JavaThread* new_thread = NULL;\n+  JavaThread* new_thread = nullptr;\n@@ -839,1 +839,1 @@\n-      assert(comp != NULL, \"Compiler instance missing.\");\n+      assert(comp != nullptr, \"Compiler instance missing.\");\n@@ -864,1 +864,1 @@\n-  if (new_thread != NULL && new_thread->osthread() != NULL) {\n+  if (new_thread != nullptr && new_thread->osthread() != nullptr) {\n@@ -895,1 +895,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -930,1 +930,1 @@\n-    jobject thread_handle = NULL;\n+    jobject thread_handle = nullptr;\n@@ -940,1 +940,1 @@\n-    _compiler2_logs[i] = NULL;\n+    _compiler2_logs[i] = nullptr;\n@@ -944,1 +944,1 @@\n-      assert(ct != NULL, \"should have been handled for initial thread\");\n+      assert(ct != nullptr, \"should have been handled for initial thread\");\n@@ -961,1 +961,1 @@\n-    _compiler1_logs[i] = NULL;\n+    _compiler1_logs[i] = nullptr;\n@@ -965,1 +965,1 @@\n-      assert(ct != NULL, \"should have been handled for initial thread\");\n+      assert(ct != nullptr, \"should have been handled for initial thread\");\n@@ -987,1 +987,1 @@\n-      make_thread(deoptimizer_t, thread_handle, NULL, NULL, THREAD);\n+      make_thread(deoptimizer_t, thread_handle, nullptr, nullptr, THREAD);\n@@ -1003,1 +1003,1 @@\n-  if (_c2_compile_queue != NULL) {\n+  if (_c2_compile_queue != nullptr) {\n@@ -1040,1 +1040,1 @@\n-        assert(compiler2_object(i) == NULL, \"Old one must be released!\");\n+        assert(compiler2_object(i) == nullptr, \"Old one must be released!\");\n@@ -1045,1 +1045,1 @@\n-      if (ct == NULL) break;\n+      if (ct == nullptr) break;\n@@ -1057,1 +1057,1 @@\n-  if (_c1_compile_queue != NULL) {\n+  if (_c1_compile_queue != nullptr) {\n@@ -1066,1 +1066,1 @@\n-      if (ct == NULL) break;\n+      if (ct == nullptr) break;\n@@ -1090,1 +1090,1 @@\n-  if (_c2_compile_queue != NULL) {\n+  if (_c2_compile_queue != nullptr) {\n@@ -1093,1 +1093,1 @@\n-  if (_c1_compile_queue != NULL) {\n+  if (_c1_compile_queue != nullptr) {\n@@ -1170,1 +1170,1 @@\n-  CompileTask* task     = NULL;\n+  CompileTask* task     = nullptr;\n@@ -1292,1 +1292,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1296,1 +1296,1 @@\n-  assert(comp != NULL, \"Ensure we have a compiler\");\n+  assert(comp != nullptr, \"Ensure we have a compiler\");\n@@ -1322,2 +1322,2 @@\n-  if (comp == NULL || compilation_is_prohibited(method, osr_bci, comp_level, directive->ExcludeOption)) {\n-    return NULL;\n+  if (comp == nullptr || compilation_is_prohibited(method, osr_bci, comp_level, directive->ExcludeOption)) {\n+    return nullptr;\n@@ -1328,1 +1328,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1335,1 +1335,1 @@\n-    if (method_code != NULL && method_code->is_nmethod()) {\n+    if (method_code != nullptr && method_code->is_nmethod()) {\n@@ -1341,1 +1341,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1347,2 +1347,2 @@\n-    if (nm != NULL) return nm;\n-    if (method->is_not_osr_compilable(comp_level)) return NULL;\n+    if (nm != nullptr) return nm;\n+    if (method->is_not_osr_compilable(comp_level)) return nullptr;\n@@ -1373,1 +1373,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1380,1 +1380,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1412,1 +1412,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -1423,1 +1423,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1429,1 +1429,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1439,1 +1439,1 @@\n-    if (code == NULL) {\n+    if (code == nullptr) {\n@@ -1462,1 +1462,1 @@\n-      return (result != NULL);\n+      return (result != nullptr);\n@@ -1469,1 +1469,1 @@\n-      if (result == NULL) return false;\n+      if (result == nullptr) return false;\n@@ -1498,1 +1498,1 @@\n-  if (is_native && (!CICompileNatives || comp == NULL)) {\n+  if (is_native && (!CICompileNatives || comp == nullptr)) {\n@@ -1505,1 +1505,1 @@\n-  if (is_osr && (!CICompileOSR || comp == NULL)) {\n+  if (is_osr && (!CICompileOSR || comp == nullptr)) {\n@@ -1625,1 +1625,1 @@\n-    if (jvmci_compile_state != NULL) {\n+    if (jvmci_compile_state != nullptr) {\n@@ -1715,1 +1715,1 @@\n-  guarantee(comp != NULL, \"Compiler object must exist\");\n+  guarantee(comp != nullptr, \"Compiler object must exist\");\n@@ -1720,1 +1720,1 @@\n-    ciEnv ci_env((CompileTask*)NULL);\n+    ciEnv ci_env((CompileTask*)nullptr);\n@@ -1742,1 +1742,1 @@\n-  if (comp->is_c1() && (thread->get_buffer_blob() == NULL)) {\n+  if (comp->is_c1() && (thread->get_buffer_blob() == nullptr)) {\n@@ -1757,1 +1757,1 @@\n-  if (thread->get_buffer_blob() != NULL) {\n+  if (thread->get_buffer_blob() != nullptr) {\n@@ -1773,1 +1773,1 @@\n-    if (_c1_compile_queue != NULL) {\n+    if (_c1_compile_queue != nullptr) {\n@@ -1777,1 +1777,1 @@\n-    if (_c2_compile_queue != NULL) {\n+    if (_c2_compile_queue != nullptr) {\n@@ -1795,1 +1795,1 @@\n-  if (!LogCompilation) return NULL;\n+  if (!LogCompilation) return nullptr;\n@@ -1800,1 +1800,1 @@\n-  assert(compiler_objects != NULL, \"must be initialized at this point\");\n+  assert(compiler_objects != nullptr, \"must be initialized at this point\");\n@@ -1802,1 +1802,1 @@\n-  assert(logs != NULL, \"must be initialized at this point\");\n+  assert(logs != nullptr, \"must be initialized at this point\");\n@@ -1822,1 +1822,1 @@\n-  if (log != NULL) {\n+  if (log != nullptr) {\n@@ -1857,1 +1857,1 @@\n-  if (log != NULL) {\n+  if (log != nullptr) {\n@@ -1883,1 +1883,1 @@\n-    if (task == NULL) {\n+    if (task == nullptr) {\n@@ -1897,1 +1897,1 @@\n-          if (thread->get_buffer_blob() != NULL) {\n+          if (thread->get_buffer_blob() != nullptr) {\n@@ -1945,1 +1945,1 @@\n-    FILE* fp = NULL;\n+    FILE* fp = nullptr;\n@@ -1948,2 +1948,2 @@\n-      const char* dir = (try_temp_dir ? os::get_temp_directory() : NULL);\n-      if (dir == NULL) {\n+      const char* dir = (try_temp_dir ? os::get_temp_directory() : nullptr);\n+      if (dir == nullptr) {\n@@ -1959,1 +1959,1 @@\n-      if (fp != NULL) {\n+      if (fp != nullptr) {\n@@ -1964,1 +1964,1 @@\n-        if (log == NULL) {\n+        if (log == nullptr) {\n@@ -1970,1 +1970,1 @@\n-        if (xtty != NULL) {\n+        if (xtty != nullptr) {\n@@ -1984,1 +1984,1 @@\n-  if (CompilationLog::log() != NULL) {\n+  if (CompilationLog::log() != nullptr) {\n@@ -2048,1 +2048,1 @@\n-    if (eol == NULL) {\n+    if (eol == nullptr) {\n@@ -2073,1 +2073,1 @@\n-  assert(task != NULL, \"invariant\");\n+  assert(task != nullptr, \"invariant\");\n@@ -2086,2 +2086,2 @@\n-CompilerDirectives* DirectivesStack::_top = NULL;\n-CompilerDirectives* DirectivesStack::_bottom = NULL;\n+CompilerDirectives* DirectivesStack::_top = nullptr;\n+CompilerDirectives* DirectivesStack::_bottom = nullptr;\n@@ -2107,1 +2107,1 @@\n-  if (CompilationLog::log() != NULL) {\n+  if (CompilationLog::log() != nullptr) {\n@@ -2115,1 +2115,1 @@\n-  bool should_log = (thread->log() != NULL);\n+  bool should_log = (thread->log() != nullptr);\n@@ -2145,1 +2145,1 @@\n-  const char* failure_reason = NULL;\n+  const char* failure_reason = nullptr;\n@@ -2147,1 +2147,1 @@\n-  const char* retry_message = NULL;\n+  const char* retry_message = nullptr;\n@@ -2150,1 +2150,1 @@\n-  if (UseJVMCICompiler && comp != NULL && comp->is_jvmci()) {\n+  if (UseJVMCICompiler && comp != nullptr && comp->is_jvmci()) {\n@@ -2156,1 +2156,1 @@\n-    JVMCIRuntime *runtime = NULL;\n+    JVMCIRuntime *runtime = nullptr;\n@@ -2182,1 +2182,1 @@\n-          assert(failure_reason != NULL, \"must specify failure_reason\");\n+          assert(failure_reason != nullptr, \"must specify failure_reason\");\n@@ -2187,1 +2187,1 @@\n-      handle_compile_error(thread, task, NULL, compilable, failure_reason);\n+      handle_compile_error(thread, task, nullptr, compilable, failure_reason);\n@@ -2228,1 +2228,1 @@\n-    if (comp == NULL) {\n+    if (comp == nullptr) {\n@@ -2275,1 +2275,1 @@\n-  if (failure_reason != NULL) {\n+  if (failure_reason != nullptr) {\n@@ -2277,1 +2277,1 @@\n-    if (CompilationLog::log() != NULL) {\n+    if (CompilationLog::log() != nullptr) {\n@@ -2281,1 +2281,1 @@\n-      FormatBufferResource msg = retry_message != NULL ?\n+      FormatBufferResource msg = retry_message != nullptr ?\n@@ -2347,1 +2347,1 @@\n-    if (xtty != NULL) {\n+    if (xtty != nullptr) {\n@@ -2561,1 +2561,1 @@\n-  if (comp == NULL) {\n+  if (comp == nullptr) {\n@@ -2569,1 +2569,1 @@\n-  return _perf_total_compilation != NULL ? _perf_total_compilation->get_value() : 0;\n+  return _perf_total_compilation != nullptr ? _perf_total_compilation->get_value() : 0;\n@@ -2590,1 +2590,1 @@\n-      if (comp != NULL) {\n+      if (comp != nullptr) {\n@@ -2648,1 +2648,1 @@\n-  if (comp != NULL) {\n+  if (comp != nullptr) {\n@@ -2653,1 +2653,1 @@\n-  if (comp != NULL) {\n+  if (comp != nullptr) {\n@@ -2685,1 +2685,1 @@\n-  if (out == NULL) out = tty;\n+  if (out == nullptr) out = tty;\n@@ -2723,1 +2723,1 @@\n-  if (out == NULL) {\n+  if (out == nullptr) {\n@@ -2769,4 +2769,4 @@\n-  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock   : NULL) : NULL;\n-  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock : NULL) : NULL;\n-  Mutex*   function_lock_1 = allFun ? NULL : (should_take_Compile_lock   ? Compile_lock    : NULL);\n-  Monitor* function_lock_2 = allFun ? NULL : (should_take_CodeCache_lock ? CodeCache_lock  : NULL);\n+  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock   : nullptr) : nullptr;\n+  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock : nullptr) : nullptr;\n+  Mutex*   function_lock_1 = allFun ? nullptr : (should_take_Compile_lock   ? Compile_lock    : nullptr);\n+  Monitor* function_lock_2 = allFun ? nullptr : (should_take_CodeCache_lock ? CodeCache_lock  : nullptr);\n@@ -2776,1 +2776,1 @@\n-  if ((global_lock_1 != NULL) || (global_lock_2 != NULL)) {\n+  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n@@ -2785,1 +2785,1 @@\n-    if ((function_lock_1 != NULL) || (function_lock_1 != NULL)) {\n+    if ((function_lock_1 != nullptr) || (function_lock_1 != nullptr)) {\n@@ -2791,1 +2791,1 @@\n-    if ((function_lock_1 != NULL) || (function_lock_1 != NULL)) {\n+    if ((function_lock_1 != nullptr) || (function_lock_1 != nullptr)) {\n@@ -2812,1 +2812,1 @@\n-  if ((global_lock_1 != NULL) || (global_lock_2 != NULL)) {\n+  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":155,"deletions":155,"binary":false,"changes":310,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,2 +96,2 @@\n-    _first = NULL;\n-    _last = NULL;\n+    _first = nullptr;\n+    _last = nullptr;\n@@ -99,1 +99,1 @@\n-    _first_stale = NULL;\n+    _first_stale = nullptr;\n@@ -112,1 +112,1 @@\n-  bool         is_empty() const                  { return _first == NULL; }\n+  bool         is_empty() const                  { return _first == nullptr; }\n@@ -284,1 +284,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -292,1 +292,1 @@\n-    return q != NULL ? q->size() : 0;\n+    return q != nullptr ? q->size() : 0;\n@@ -382,1 +382,1 @@\n-    assert(_compiler1_objects != NULL, \"must be initialized\");\n+    assert(_compiler1_objects != nullptr, \"must be initialized\");\n@@ -388,1 +388,1 @@\n-    assert(_compiler2_objects != NULL, \"must be initialized\");\n+    assert(_compiler2_objects != nullptr, \"must be initialized\");\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-CompileLog* CompileLog::_first = NULL;\n+CompileLog* CompileLog::_first = nullptr;\n@@ -61,1 +61,1 @@\n-  _out = NULL;\n+  _out = nullptr;\n@@ -72,1 +72,1 @@\n-  if (_context.size() > 0 && _out != NULL) {\n+  if (_context.size() > 0 && _out != nullptr) {\n@@ -87,1 +87,1 @@\n-  if (obj == NULL)  return 0;\n+  if (obj == nullptr)  return 0;\n@@ -172,1 +172,1 @@\n-  if (name == NULL)  return;\n+  if (name == nullptr)  return;\n@@ -207,1 +207,1 @@\n-  while (log != NULL) {\n+  while (log != nullptr) {\n@@ -294,1 +294,1 @@\n-  _first = NULL;\n+  _first = nullptr;\n","filename":"src\/hotspot\/share\/compiler\/compileLog.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-CompileTask*  CompileTask::_task_free_list = NULL;\n+CompileTask*  CompileTask::_task_free_list = nullptr;\n@@ -46,1 +46,1 @@\n-  CompileTask* task = NULL;\n+  CompileTask* task = nullptr;\n@@ -48,1 +48,1 @@\n-  if (_task_free_list != NULL) {\n+  if (_task_free_list != nullptr) {\n@@ -51,1 +51,1 @@\n-    task->set_next(NULL);\n+    task->set_next(nullptr);\n@@ -54,1 +54,1 @@\n-    task->set_next(NULL);\n+    task->set_next(nullptr);\n@@ -69,2 +69,2 @@\n-    if ((task->_method_holder != NULL && JNIHandles::is_weak_global_handle(task->_method_holder)) ||\n-        (task->_hot_method_holder != NULL && JNIHandles::is_weak_global_handle(task->_hot_method_holder))) {\n+    if ((task->_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_method_holder)) ||\n+        (task->_hot_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_hot_method_holder))) {\n@@ -77,1 +77,1 @@\n-    if (task->_failure_reason_on_C_heap && task->_failure_reason != NULL) {\n+    if (task->_failure_reason_on_C_heap && task->_failure_reason != nullptr) {\n@@ -80,1 +80,1 @@\n-    task->_failure_reason = NULL;\n+    task->_failure_reason = nullptr;\n@@ -106,1 +106,1 @@\n-  JVMCI_ONLY(_blocking_jvmci_compile_state = NULL;)\n+  JVMCI_ONLY(_blocking_jvmci_compile_state = nullptr;)\n@@ -113,2 +113,2 @@\n-  _hot_method = NULL;\n-  _hot_method_holder = NULL;\n+  _hot_method = nullptr;\n+  _hot_method_holder = nullptr;\n@@ -124,1 +124,1 @@\n-  _failure_reason = NULL;\n+  _failure_reason = nullptr;\n@@ -139,1 +139,1 @@\n-  _next = NULL;\n+  _next = nullptr;\n@@ -153,1 +153,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -161,1 +161,1 @@\n-  if (_hot_method != NULL) {\n+  if (_hot_method != nullptr) {\n@@ -173,1 +173,1 @@\n-  if (_hot_method != NULL) {\n+  if (_hot_method != nullptr) {\n@@ -179,1 +179,1 @@\n-  return _method_holder != NULL && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_global_weak_cleared(_method_holder);\n+  return _method_holder != nullptr && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_global_weak_cleared(_method_holder);\n@@ -188,1 +188,1 @@\n-  if (hot_method() != NULL && hot_method() != method()) {\n+  if (hot_method() != nullptr && hot_method() != method()) {\n@@ -247,1 +247,1 @@\n-  if (method != NULL) {\n+  if (method != nullptr) {\n@@ -268,1 +268,1 @@\n-  if (method == NULL) {\n+  if (method == nullptr) {\n@@ -281,1 +281,1 @@\n-  if (msg != NULL) {\n+  if (msg != nullptr) {\n@@ -308,1 +308,1 @@\n-  print_impl(st, is_unloaded() ? NULL : method(), compile_id(), comp_level(), is_osr_method, osr_bci(), is_blocking(), msg, short_form, cr, _time_queued, _time_started);\n+  print_impl(st, is_unloaded() ? nullptr : method(), compile_id(), comp_level(), is_osr_method, osr_bci(), is_blocking(), msg, short_form, cr, _time_queued, _time_started);\n@@ -347,1 +347,1 @@\n-  if (_hot_method != NULL && _hot_method != _method) {\n+  if (_hot_method != nullptr && _hot_method != _method) {\n@@ -374,2 +374,2 @@\n-    assert(_failure_reason != NULL, \"missing\");\n-    const char* reason = _failure_reason != NULL ? _failure_reason : \"unknown\";\n+    assert(_failure_reason != nullptr, \"missing\");\n+    const char* reason = _failure_reason != nullptr ? _failure_reason : \"unknown\";\n@@ -449,1 +449,1 @@\n-  if (msg != NULL) {\n+  if (msg != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-  CompileTask() : _failure_reason(NULL), _failure_reason_on_C_heap(false) {\n+  CompileTask() : _failure_reason(nullptr), _failure_reason_on_C_heap(false) {\n@@ -198,1 +198,1 @@\n-                                      const char* msg = NULL, bool short_form = false, bool cr = true,\n+                                      const char* msg = nullptr, bool short_form = false, bool cr = true,\n@@ -202,3 +202,3 @@\n-  void         print(outputStream* st = tty, const char* msg = NULL, bool short_form = false, bool cr = true);\n-  void         print_ul(const char* msg = NULL);\n-  static void  print(outputStream* st, const nmethod* nm, const char* msg = NULL, bool short_form = false, bool cr = true) {\n+  void         print(outputStream* st = tty, const char* msg = nullptr, bool short_form = false, bool cr = true);\n+  void         print_ul(const char* msg = nullptr);\n+  static void  print(outputStream* st, const nmethod* nm, const char* msg = nullptr, bool short_form = false, bool cr = true) {\n@@ -209,1 +209,1 @@\n-  static void  print_ul(const nmethod* nm, const char* msg = NULL);\n+  static void  print_ul(const nmethod* nm, const char* msg = nullptr);\n@@ -228,2 +228,2 @@\n-  static void print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, const char* msg = NULL);\n-  static void print_inlining_tty(ciMethod* method, int inline_level, int bci, const char* msg = NULL) {\n+  static void print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, const char* msg = nullptr);\n+  static void print_inlining_tty(ciMethod* method, int inline_level, int bci, const char* msg = nullptr) {\n@@ -232,1 +232,1 @@\n-  static void print_inlining_ul(ciMethod* method, int inline_level, int bci, const char* msg = NULL);\n+  static void print_inlining_ul(ciMethod* method, int inline_level, int bci, const char* msg = nullptr);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  if (CompilationMode != NULL) {\n+  if (CompilationMode != nullptr) {\n@@ -328,1 +328,1 @@\n-    vm_exit_during_initialization(\"Negative value specified for CompileThresholdScaling\", NULL);\n+    vm_exit_during_initialization(\"Negative value specified for CompileThresholdScaling\", nullptr);\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-inline const char* compilertype2name(CompilerType t) { return (uint)t < compiler_number_of_types ? compilertype2name_tab[t] : NULL; }\n+inline const char* compilertype2name(CompilerType t) { return (uint)t < compiler_number_of_types ? compilertype2name_tab[t] : nullptr; }\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-CompilerDirectives::CompilerDirectives() : _next(NULL), _match(NULL), _ref_count(0) {\n+CompilerDirectives::CompilerDirectives() : _next(nullptr), _match(nullptr), _ref_count(0) {\n@@ -45,1 +45,1 @@\n-  if (_c1_store != NULL) {\n+  if (_c1_store != nullptr) {\n@@ -48,1 +48,1 @@\n-  if (_c2_store != NULL) {\n+  if (_c2_store != nullptr) {\n@@ -54,1 +54,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -63,1 +63,1 @@\n-  if (_match != NULL) {\n+  if (_match != nullptr) {\n@@ -74,1 +74,1 @@\n-    while (tmp != NULL) {\n+    while (tmp != nullptr) {\n@@ -84,1 +84,1 @@\n-  if (_c1_store != NULL) {\n+  if (_c1_store != nullptr) {\n@@ -88,1 +88,1 @@\n-  if (_c2_store != NULL) {\n+  if (_c2_store != nullptr) {\n@@ -97,1 +97,1 @@\n-  if (_c1_store != NULL) {\n+  if (_c1_store != nullptr) {\n@@ -100,1 +100,1 @@\n-  if (_c2_store != NULL) {\n+  if (_c2_store != nullptr) {\n@@ -126,1 +126,1 @@\n-    if (_inlinematchers != NULL) {\n+    if (_inlinematchers != nullptr) {\n@@ -148,1 +148,1 @@\n-  if (method == NULL) {\n+  if (method == nullptr) {\n@@ -159,2 +159,2 @@\n-  if (bm == NULL) {\n-    assert(error_msg != NULL, \"Must have error message\");\n+  if (bm == nullptr) {\n+    assert(error_msg != nullptr, \"Must have error message\");\n@@ -186,1 +186,1 @@\n-  if (comp == NULL) { \/\/ Xint\n+  if (comp == nullptr) { \/\/ Xint\n@@ -244,1 +244,1 @@\n-  _token = strtok_r(NULL, \",\", &_saved_ptr);\n+  _token = strtok_r(nullptr, \",\", &_saved_ptr);\n@@ -263,1 +263,1 @@\n-  for (ControlIntrinsicIter iter(ControlIntrinsic); *iter != NULL; ++iter) {\n+  for (ControlIntrinsicIter iter(ControlIntrinsic); *iter != nullptr; ++iter) {\n@@ -272,1 +272,1 @@\n-  for (ControlIntrinsicIter iter(DisableIntrinsic, true\/*disable_all*\/); *iter != NULL; ++iter) {\n+  for (ControlIntrinsicIter iter(DisableIntrinsic, true\/*disable_all*\/); *iter != nullptr; ++iter) {\n@@ -281,1 +281,1 @@\n-DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(NULL), _directive(d) {\n+DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d) {\n@@ -294,1 +294,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -318,1 +318,1 @@\n-    assert(origin != nullptr, \"DirectiveSetPtr cannot be initialized with a NULL pointer.\");\n+    assert(origin != nullptr, \"DirectiveSetPtr cannot be initialized with a nullptr pointer.\");\n@@ -434,1 +434,1 @@\n-      while (*iter != NULL) {\n+      while (*iter != nullptr) {\n@@ -454,1 +454,1 @@\n-      while (*iter != NULL) {\n+      while (*iter != nullptr) {\n@@ -471,1 +471,1 @@\n-  assert(_directive != NULL, \"Must have been initialized\");\n+  assert(_directive != nullptr, \"Must have been initialized\");\n@@ -476,1 +476,1 @@\n-  if (_inlinematchers != NULL) {\n+  if (_inlinematchers != nullptr) {\n@@ -489,1 +489,1 @@\n-  if (_inlinematchers != NULL) {\n+  if (_inlinematchers != nullptr) {\n@@ -503,1 +503,1 @@\n-  if (_inlinematchers != NULL) {\n+  if (_inlinematchers != nullptr) {\n@@ -514,1 +514,1 @@\n-  if (m != NULL) {\n+  if (m != nullptr) {\n@@ -519,1 +519,1 @@\n-    assert(error_msg != NULL, \"Error message must be set\");\n+    assert(error_msg != nullptr, \"Error message must be set\");\n@@ -525,1 +525,1 @@\n-  if (_inlinematchers == NULL) {\n+  if (_inlinematchers == nullptr) {\n@@ -530,1 +530,1 @@\n-  while (tmp->next() != NULL) {\n+  while (tmp->next() != nullptr) {\n@@ -537,1 +537,1 @@\n-  if (_inlinematchers == NULL) {\n+  if (_inlinematchers == nullptr) {\n@@ -543,1 +543,1 @@\n-    while (tmp != NULL) {\n+    while (tmp != nullptr) {\n@@ -565,1 +565,1 @@\n-  DirectiveSet* set = new DirectiveSet(NULL);\n+  DirectiveSet* set = new DirectiveSet(nullptr);\n@@ -575,1 +575,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -594,1 +594,1 @@\n-  const char* error_msg = NULL;\n+  const char* error_msg = nullptr;\n@@ -604,1 +604,1 @@\n-  assert(error_msg == NULL, \"Must succeed.\");\n+  assert(error_msg == nullptr, \"Must succeed.\");\n@@ -611,1 +611,1 @@\n-  assert(_bottom != NULL, \"Must never be empty\");\n+  assert(_bottom != nullptr, \"Must never be empty\");\n@@ -620,2 +620,2 @@\n-  if (_top == NULL) {\n-    assert(_bottom == NULL, \"There can only be one default directive\");\n+  if (_top == nullptr) {\n+    assert(_bottom == nullptr, \"There can only be one default directive\");\n@@ -641,1 +641,1 @@\n-  if (_top->next() == NULL) {\n+  if (_top->next() == nullptr) {\n@@ -662,1 +662,1 @@\n-  while (_top->next() != NULL) {\n+  while (_top->next() != nullptr) {\n@@ -670,1 +670,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -678,1 +678,1 @@\n-  assert(set != NULL, \"Never NULL\");\n+  assert(set != nullptr, \"Never nullptr\");\n@@ -684,1 +684,1 @@\n-    assert(set->directive() != NULL, \"Never NULL\");\n+    assert(set->directive() != nullptr, \"Never nullptr\");\n@@ -701,1 +701,1 @@\n-  DirectiveSet* match = NULL;\n+  DirectiveSet* match = nullptr;\n@@ -706,1 +706,1 @@\n-    assert(dir != NULL, \"Must be initialized\");\n+    assert(dir != nullptr, \"Must be initialized\");\n@@ -708,1 +708,1 @@\n-    while (dir != NULL) {\n+    while (dir != nullptr) {\n@@ -711,1 +711,1 @@\n-        assert(match != NULL, \"Consistency\");\n+        assert(match != nullptr, \"Consistency\");\n@@ -721,1 +721,1 @@\n-  guarantee(match != NULL, \"There should always be a default directive that matches\");\n+  guarantee(match != nullptr, \"There should always be a default directive that matches\");\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-  bool is_exclusive_copy() { return _directive == NULL; }\n+  bool is_exclusive_copy() { return _directive == nullptr; }\n@@ -209,1 +209,1 @@\n-    for (ControlIntrinsicIter iter(option, disable_all); *iter != NULL && _valid; ++iter) {\n+    for (ControlIntrinsicIter iter(option, disable_all); *iter != nullptr && _valid; ++iter) {\n@@ -213,1 +213,1 @@\n-        \/\/ strncpy always writes len characters. If the source string is shorter, the function fills the remaining bytes with NULLs.\n+        \/\/ strncpy always writes len characters. If the source string is shorter, the function fills the remaining bytes with nullptrs.\n@@ -221,1 +221,1 @@\n-    if (_bad != NULL) {\n+    if (_bad != nullptr) {\n@@ -254,1 +254,1 @@\n-  bool is_default_directive() { return _next == NULL; }\n+  bool is_default_directive() { return _next == nullptr; }\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-static GrowableArray<const char*>* phase_names = NULL;\n+static GrowableArray<const char*>* phase_names = nullptr;\n@@ -66,1 +66,1 @@\n-    assert(phase_names != NULL, \"invariant\");\n+    assert(phase_names != nullptr, \"invariant\");\n@@ -92,1 +92,1 @@\n-    if (phase_names == NULL) {\n+    if (phase_names == nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-static TypedMethodOptionMatcher* option_list = NULL;\n+static TypedMethodOptionMatcher* option_list = nullptr;\n@@ -139,1 +139,1 @@\n-    _next(NULL),\n+    _next(nullptr),\n@@ -239,1 +239,1 @@\n-   if (_next != NULL) {\n+   if (_next != nullptr) {\n@@ -253,1 +253,1 @@\n-  if (_class_name != NULL) {\n+  if (_class_name != nullptr) {\n@@ -256,1 +256,1 @@\n-  if (_method_name != NULL) {\n+  if (_method_name != nullptr) {\n@@ -259,1 +259,1 @@\n-  if (_signature != NULL) {\n+  if (_signature != nullptr) {\n@@ -275,1 +275,1 @@\n-  const char* error_msg = NULL;\n+  const char* error_msg = nullptr;\n@@ -278,1 +278,1 @@\n-  if (error_msg != NULL) {\n+  if (error_msg != nullptr) {\n@@ -281,1 +281,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -288,1 +288,1 @@\n-  while (current != NULL) {\n+  while (current != nullptr) {\n@@ -296,1 +296,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -335,1 +335,1 @@\n-  if (option_list != NULL) {\n+  if (option_list != nullptr) {\n@@ -337,1 +337,1 @@\n-    if (m != NULL) {\n+    if (m != nullptr) {\n@@ -358,1 +358,1 @@\n-      while (current != NULL) {\n+      while (current != nullptr) {\n@@ -752,1 +752,1 @@\n-\/\/ Scan next option and value in line, return MethodMatcher object on success, NULL on failure.\n+\/\/ Scan next option and value in line, return MethodMatcher object on success, nullptr on failure.\n@@ -855,1 +855,1 @@\n-    if (archetype == NULL) {\n+    if (archetype == nullptr) {\n@@ -894,1 +894,1 @@\n-      assert(typed_matcher != NULL, \"sanity\");\n+      assert(typed_matcher != nullptr, \"sanity\");\n@@ -908,1 +908,1 @@\n-    if (matcher == NULL) {\n+    if (matcher == nullptr) {\n@@ -929,1 +929,1 @@\n-    assert(matcher != NULL, \"consistency\");\n+    assert(matcher != nullptr, \"consistency\");\n@@ -937,1 +937,1 @@\n-  if (CompileCommandFile == NULL)\n+  if (CompileCommandFile == nullptr)\n@@ -944,1 +944,1 @@\n-  return cc_file() != NULL;\n+  return cc_file() != nullptr;\n@@ -952,1 +952,1 @@\n-  if (stream == NULL) return;\n+  if (stream == nullptr) return;\n@@ -1015,2 +1015,2 @@\n-  const char* className = NULL;\n-  const char* methodName = NULL;\n+  const char* className = nullptr;\n+  const char* methodName = nullptr;\n@@ -1018,1 +1018,1 @@\n-  bool have_colon = (strstr(line, \"::\") != NULL);\n+  bool have_colon = (strstr(line, \"::\") != nullptr);\n@@ -1039,1 +1039,1 @@\n-      if (newName == NULL)\n+      if (newName == nullptr)\n@@ -1044,1 +1044,1 @@\n-      if (className == NULL) {\n+      if (className == nullptr) {\n@@ -1052,1 +1052,1 @@\n-      if (className == NULL) {\n+      if (className == nullptr) {\n@@ -1058,1 +1058,1 @@\n-      if (className == NULL) {\n+      if (className == nullptr) {\n@@ -1070,1 +1070,1 @@\n-      if (methodName == NULL) {\n+      if (methodName == nullptr) {\n@@ -1080,1 +1080,1 @@\n-      Symbol* signature = NULL;\n+      Symbol* signature = nullptr;\n@@ -1090,2 +1090,2 @@\n-      className = NULL;\n-      methodName = NULL;\n+      className = nullptr;\n+      methodName = nullptr;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n-  _env   = NULL;\n-  _log   = NULL;\n-  _task  = NULL;\n+  _env   = nullptr;\n+  _log   = nullptr;\n+  _task  = nullptr;\n@@ -40,2 +40,2 @@\n-  _buffer_blob = NULL;\n-  _compiler = NULL;\n+  _buffer_blob = nullptr;\n+  _compiler = nullptr;\n@@ -47,1 +47,1 @@\n-  _ideal_graph_printer = NULL;\n+  _ideal_graph_printer = nullptr;\n@@ -62,1 +62,1 @@\n-  return _compiler != NULL && _compiler->is_jvmci();\n+  return _compiler != nullptr && _compiler->is_jvmci();\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-    assert(_log == NULL, \"set only once\");\n+    assert(_log == nullptr, \"set only once\");\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -299,1 +299,1 @@\n-  product(ccstr, CompileCommandFile, NULL,                                  \\\n+  product(ccstr, CompileCommandFile, nullptr,                               \\\n@@ -302,1 +302,1 @@\n-  product(ccstr, CompilerDirectivesFile, NULL, DIAGNOSTIC,                  \\\n+  product(ccstr, CompilerDirectivesFile, nullptr, DIAGNOSTIC,               \\\n@@ -314,1 +314,1 @@\n-  product(ccstr, ReplayDataFile, NULL,                                      \\\n+  product(ccstr, ReplayDataFile, nullptr,                                   \\\n@@ -318,1 +318,1 @@\n-  product(ccstr, InlineDataFile, NULL,                                      \\\n+  product(ccstr, InlineDataFile, nullptr,                                   \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-  if (_tmp_top == NULL) {\n-    return NULL;\n+  if (_tmp_top == nullptr) {\n+    return nullptr;\n@@ -46,1 +46,1 @@\n-  tmp->set_next(NULL);\n+  tmp->set_next(nullptr);\n@@ -53,1 +53,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -73,1 +73,1 @@\n-  return CompilerDirectivesFile != NULL;\n+  return CompilerDirectivesFile != nullptr;\n@@ -81,1 +81,1 @@\n-  assert(filename != NULL, \"Test before calling this\");\n+  assert(filename != nullptr, \"Test before calling this\");\n@@ -120,1 +120,1 @@\n-  while (tmp != NULL) {\n+  while (tmp != nullptr) {\n@@ -139,1 +139,1 @@\n-: JSON(text, silent, st), depth(0), current_directive(NULL), current_directiveset(NULL), _tmp_top(NULL), _tmp_depth(0) {\n+: JSON(text, silent, st), depth(0), current_directive(nullptr), current_directiveset(nullptr), _tmp_top(nullptr), _tmp_depth(0) {\n@@ -147,1 +147,1 @@\n-  assert(_tmp_top == NULL, \"Consistency\");\n+  assert(_tmp_top == nullptr, \"Consistency\");\n@@ -153,4 +153,4 @@\n-    { \"c1\",     type_c1,     0, mask(type_directives), NULL, UnknownFlagType },\n-    { \"c2\",     type_c2,     0, mask(type_directives), NULL, UnknownFlagType },\n-    { \"match\",  type_match,  1, mask(type_directives), NULL, UnknownFlagType },\n-    { \"inline\", type_inline, 1, mask(type_directives) | mask(type_c1) | mask(type_c2), NULL, UnknownFlagType },\n+    { \"c1\",     type_c1,     0, mask(type_directives), nullptr, UnknownFlagType },\n+    { \"c2\",     type_c2,     0, mask(type_directives), nullptr, UnknownFlagType },\n+    { \"match\",  type_match,  1, mask(type_directives), nullptr, UnknownFlagType },\n+    { \"inline\", type_inline, 1, mask(type_directives) | mask(type_c1) | mask(type_c2), nullptr, UnknownFlagType },\n@@ -183,1 +183,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -194,1 +194,1 @@\n-  if (k == NULL) {\n+  if (k == nullptr) {\n@@ -218,1 +218,1 @@\n-  assert(stack[depth] == NULL, \"element not nulled, something is wrong\");\n+  assert(stack[depth] == nullptr, \"element not nulled, something is wrong\");\n@@ -241,1 +241,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -250,1 +250,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -256,1 +256,1 @@\n-  stack[depth] = NULL;\n+  stack[depth] = nullptr;\n@@ -377,1 +377,1 @@\n-    if (current_directiveset == NULL) {\n+    if (current_directiveset == nullptr) {\n@@ -409,1 +409,1 @@\n-      const char* error_msg = NULL;\n+      const char* error_msg = nullptr;\n@@ -411,1 +411,1 @@\n-        assert (error_msg != NULL, \"Must have valid error message\");\n+        assert (error_msg != nullptr, \"Must have valid error message\");\n@@ -429,2 +429,2 @@\n-      const char* error_msg = NULL;\n-      if (current_directiveset == NULL) {\n+      const char* error_msg = nullptr;\n+      if (current_directiveset == nullptr) {\n@@ -433,1 +433,1 @@\n-            assert (error_msg != NULL, \"Must have valid error message\");\n+            assert (error_msg != nullptr, \"Must have valid error message\");\n@@ -437,1 +437,1 @@\n-          assert (error_msg != NULL, \"Must have valid error message\");\n+          assert (error_msg != nullptr, \"Must have valid error message\");\n@@ -442,1 +442,1 @@\n-          assert (error_msg != NULL, \"Must have valid error message\");\n+          assert (error_msg != nullptr, \"Must have valid error message\");\n@@ -539,1 +539,1 @@\n-        current_directiveset = NULL;\n+        current_directiveset = nullptr;\n@@ -544,1 +544,1 @@\n-        if (current_directive->match() == NULL) {\n+        if (current_directive->match() == nullptr) {\n@@ -550,1 +550,1 @@\n-        current_directive = NULL;\n+        current_directive = nullptr;\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-void*       Disassembler::_library               = NULL;\n+void*       Disassembler::_library               = nullptr;\n@@ -50,1 +50,1 @@\n-Disassembler::decode_func_virtual Disassembler::_decode_instructions_virtual = NULL;\n+Disassembler::decode_func_virtual Disassembler::_decode_instructions_virtual = nullptr;\n@@ -60,2 +60,2 @@\n-  CodeBlob*     _codeBlob;    \/\/ != NULL only when decoding a CodeBlob\n-  nmethod*      _nm;          \/\/ != NULL only when decoding a nmethod\n+  CodeBlob*     _codeBlob;    \/\/ != nullptr only when decoding a CodeBlob\n+  nmethod*      _nm;          \/\/ != nullptr only when decoding a nmethod\n@@ -63,2 +63,2 @@\n-  address       _start;       \/\/ != NULL when decoding a range of unknown type\n-  address       _end;         \/\/ != NULL when decoding a range of unknown type\n+  address       _start;       \/\/ != nullptr when decoding a range of unknown type\n+  address       _end;         \/\/ != nullptr when decoding a range of unknown type\n@@ -101,1 +101,1 @@\n-    if (p == NULL || p[0] == '\\0')  return;\n+    if (p == nullptr || p[0] == '\\0')  return;\n@@ -109,1 +109,1 @@\n-    while ((q = strpbrk(q, \" \\t\\n\")) != NULL)\n+    while ((q = strpbrk(q, \" \\t\\n\")) != nullptr)\n@@ -149,1 +149,1 @@\n-      if ((_nm != NULL) && _nm->has_code_comment(pc0, pc)) {\n+      if ((_nm != nullptr) && _nm->has_code_comment(pc0, pc)) {\n@@ -156,1 +156,1 @@\n-      print_hook_comments(pc0, _nm != NULL);\n+      print_hook_comments(pc0, _nm != nullptr);\n@@ -169,1 +169,1 @@\n-      Link(const char* f, int l) : file(f), line(l), next(NULL) {}\n+      Link(const char* f, int l) : file(f), line(l), next(nullptr) {}\n@@ -174,1 +174,1 @@\n-      if (tail != NULL && tail->file == file && tail->line == line) {\n+      if (tail != nullptr && tail->file == file && tail->line == line) {\n@@ -180,1 +180,1 @@\n-      if (head == NULL) {\n+      if (head == nullptr) {\n@@ -187,1 +187,1 @@\n-    SourceFileInfo(const char* file, int line) : head(NULL), tail(NULL) {\n+    SourceFileInfo(const char* file, int line) : head(nullptr), tail(nullptr) {\n@@ -202,1 +202,1 @@\n-    if (_src_table == NULL) {\n+    if (_src_table == nullptr) {\n@@ -214,1 +214,1 @@\n-             NOT_PRODUCT(COMMA const AsmRemarks* remarks = NULL COMMA ptrdiff_t disp = 0));\n+             NOT_PRODUCT(COMMA const AsmRemarks* remarks = nullptr COMMA ptrdiff_t disp = 0));\n@@ -218,1 +218,1 @@\n-  address decode_instructions(address start, address end, address original_start = NULL);\n+  address decode_instructions(address start, address end, address original_start = nullptr);\n@@ -231,3 +231,3 @@\n-decode_env::SourceFileInfoTable* decode_env::_src_table = NULL;\n-const char* decode_env::_cached_src = NULL;\n-GrowableArray<const char*>* decode_env::_cached_src_lines = NULL;\n+decode_env::SourceFileInfoTable* decode_env::_src_table = nullptr;\n+const char* decode_env::_cached_src = nullptr;\n+GrowableArray<const char*>* decode_env::_cached_src_lines = nullptr;\n@@ -241,1 +241,1 @@\n-  if (found != NULL) {\n+  if (found != nullptr) {\n@@ -252,1 +252,1 @@\n-  if (found != NULL) {\n+  if (found != nullptr) {\n@@ -256,1 +256,1 @@\n-      if (_cached_src == NULL || strcmp(_cached_src, file) != 0) {\n+      if (_cached_src == nullptr || strcmp(_cached_src, file) != 0) {\n@@ -262,1 +262,1 @@\n-        if (_cached_src_lines != NULL) {\n+        if (_cached_src_lines != nullptr) {\n@@ -271,2 +271,2 @@\n-        if ((fp = os::fopen(file, \"r\")) == NULL) {\n-          _cached_src = NULL;\n+        if ((fp = os::fopen(file, \"r\")) == nullptr) {\n+          _cached_src = nullptr;\n@@ -278,1 +278,1 @@\n-        while (fgets(line, sizeof(line), fp) != NULL) {\n+        while (fgets(line, sizeof(line), fp) != nullptr) {\n@@ -320,3 +320,3 @@\n-  _nm(_codeBlob != NULL && _codeBlob->is_nmethod() ? (nmethod*) code : NULL),\n-  _start(NULL),\n-  _end(NULL),\n+  _nm(_codeBlob != nullptr && _codeBlob->is_nmethod() ? (nmethod*) code : nullptr),\n+  _start(nullptr),\n+  _end(nullptr),\n@@ -325,1 +325,1 @@\n-  _cur_insn(NULL),\n+  _cur_insn(nullptr),\n@@ -341,1 +341,1 @@\n-  _codeBlob(NULL),\n+  _codeBlob(nullptr),\n@@ -347,1 +347,1 @@\n-  _cur_insn(NULL),\n+  _cur_insn(nullptr),\n@@ -366,2 +366,2 @@\n-  _codeBlob(NULL),\n-  _nm(NULL),\n+  _codeBlob(nullptr),\n+  _nm(nullptr),\n@@ -372,1 +372,1 @@\n-  _cur_insn(NULL),\n+  _cur_insn(nullptr),\n@@ -472,1 +472,1 @@\n-\/\/ - NULL for all standard invocations. The function result is not\n+\/\/ - nullptr for all standard invocations. The function result is not\n@@ -498,1 +498,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -504,1 +504,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -511,1 +511,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -520,1 +520,1 @@\n-    if (arg != NULL) {\n+    if (arg != nullptr) {\n@@ -526,1 +526,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -546,1 +546,1 @@\n-    guarantee(arg != NULL, \"event_to_env - arg must not be NULL for event 'mach'\");\n+    guarantee(arg != nullptr, \"event_to_env - arg must not be nullptr for event 'mach'\");\n@@ -557,1 +557,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -563,1 +563,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -566,1 +566,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -578,2 +578,2 @@\n-  if (adr == NULL) {\n-    st->print(\"NULL\");\n+  if (adr == nullptr) {\n+    st->print(\"nullptr\");\n@@ -593,1 +593,1 @@\n-      if (desc == NULL) {\n+      if (desc == nullptr) {\n@@ -596,1 +596,1 @@\n-      if (desc != NULL) {\n+      if (desc != nullptr) {\n@@ -618,1 +618,1 @@\n-  if (_nm == NULL) {\n+  if (_nm == nullptr) {\n@@ -674,1 +674,1 @@\n-  const char* raw = NULL;\n+  const char* raw = nullptr;\n@@ -678,1 +678,1 @@\n-      strchr(format, '%') == NULL) {\n+      strchr(format, '%') == nullptr) {\n@@ -681,1 +681,1 @@\n-             strchr(format+2, '%') == NULL) {\n+             strchr(format+2, '%') == nullptr) {\n@@ -686,1 +686,1 @@\n-  if (raw != NULL) {\n+  if (raw != nullptr) {\n@@ -700,1 +700,1 @@\n-\/\/ the instructions were located in the originating system. If zero (NULL)\n+\/\/ the instructions were located in the originating system. If zero (nullptr)\n@@ -706,5 +706,5 @@\n-  assert((_start == NULL) || (start == NULL) || (_start == start), \"don't overwrite CTOR values\");\n-  assert((_end   == NULL) || (end   == NULL) || (_end   == end  ), \"don't overwrite CTOR values\");\n-  if (start != NULL) set_start(start);\n-  if (end   != NULL) set_end(end);\n-  if (original_start == NULL) {\n+  assert((_start == nullptr) || (start == nullptr) || (_start == start), \"don't overwrite CTOR values\");\n+  assert((_end   == nullptr) || (end   == nullptr) || (_end   == end  ), \"don't overwrite CTOR values\");\n+  if (start != nullptr) set_start(start);\n+  if (end   != nullptr) set_end(end);\n+  if (original_start == nullptr) {\n@@ -724,1 +724,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -733,1 +733,1 @@\n-    FILE* xmlout = (_print_raw > 1 ? out : NULL);\n+    FILE* xmlout = (_print_raw > 1 ? out : nullptr);\n@@ -738,2 +738,2 @@\n-                                                    NULL, (void*) xmlout,\n-                                                    NULL, (void*) out,\n+                                                    nullptr, (void*) xmlout,\n+                                                    nullptr, (void*) out,\n@@ -767,1 +767,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -780,1 +780,1 @@\n-  st = ((st == NULL) && Verbose) ? tty : st;\n+  st = ((st == nullptr) && Verbose) ? tty : st;\n@@ -799,1 +799,1 @@\n-    if (p != NULL) lib_offset = p - base + 1; \/\/ this points to the first char after separator\n+    if (p != nullptr) lib_offset = p - base + 1; \/\/ this points to the first char after separator\n@@ -802,1 +802,1 @@\n-    if (p != NULL) jvm_offset = p - base;     \/\/ this points to 'j' in jvm.\n+    if (p != nullptr) jvm_offset = p - base;     \/\/ this points to 'j' in jvm.\n@@ -805,1 +805,1 @@\n-    if (p != NULL) jvm_offset = p - base + 3; \/\/ this points to 'j' in libjvm.\n+    if (p != nullptr) jvm_offset = p - base + 3; \/\/ this points to 'j' in libjvm.\n@@ -819,1 +819,1 @@\n-    if (_library == NULL && lib_offset >= 0) {\n+    if (_library == nullptr && lib_offset >= 0) {\n@@ -823,1 +823,1 @@\n-    if (_library == NULL && lib_offset > 0) {\n+    if (_library == nullptr && lib_offset > 0) {\n@@ -827,1 +827,1 @@\n-      if (p != NULL) {\n+      if (p != nullptr) {\n@@ -833,1 +833,1 @@\n-  if (_library == NULL) {\n+  if (_library == nullptr) {\n@@ -838,1 +838,1 @@\n-  if (_library != NULL) {\n+  if (_library != nullptr) {\n@@ -845,1 +845,1 @@\n-  _library_usable        = _decode_instructions_virtual != NULL;\n+  _library_usable        = _decode_instructions_virtual != nullptr;\n@@ -852,1 +852,1 @@\n-  if (st != NULL) {\n+  if (st != nullptr) {\n@@ -859,1 +859,1 @@\n-                   ((_library != NULL)\n+                   ((_library != nullptr)\n@@ -885,1 +885,1 @@\n-  if (cb->name() != NULL) {\n+  if (cb->name() != nullptr) {\n@@ -926,2 +926,2 @@\n-    \/\/---<  Allow output suppression, but prevent writing to a NULL stream. Could happen with +PrintStubCode.  >---\n-    if (st != NULL) {\n+    \/\/---<  Allow output suppression, but prevent writing to a nullptr stream. Could happen with +PrintStubCode.  >---\n+    if (st != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":82,"deletions":82,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  \/\/ No output at all if stream is NULL. Can be overridden\n+  \/\/ No output at all if stream is nullptr. Can be overridden\n@@ -67,1 +67,1 @@\n-  static bool load_library(outputStream* st = NULL);\n+  static bool load_library(outputStream* st = nullptr);\n@@ -103,1 +103,1 @@\n-  static void decode(CodeBlob* cb,               outputStream* st = NULL);\n+  static void decode(CodeBlob* cb,               outputStream* st = nullptr);\n@@ -105,1 +105,1 @@\n-  static void decode(nmethod* nm,                outputStream* st = NULL);\n+  static void decode(nmethod* nm,                outputStream* st = nullptr);\n@@ -107,2 +107,2 @@\n-  static void decode(address start, address end, outputStream* st = NULL\n-                     NOT_PRODUCT(COMMA const AsmRemarks* remarks = NULL COMMA ptrdiff_t disp = 0));\n+  static void decode(address start, address end, outputStream* st = nullptr\n+                     NOT_PRODUCT(COMMA const AsmRemarks* remarks = nullptr COMMA ptrdiff_t disp = 0));\n","filename":"src\/hotspot\/share\/compiler\/disassembler.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-  _block_map = new (arena()) GrowableArray<BasicBlock*>(arena(), method_len, method_len, NULL);\n+  _block_map = new (arena()) GrowableArray<BasicBlock*>(arena(), method_len, method_len, nullptr);\n@@ -135,1 +135,1 @@\n-        assert( next != NULL, \"must be a block immediately following this one.\");\n+        assert( next != nullptr, \"must be a block immediately following this one.\");\n@@ -146,1 +146,1 @@\n-    assert (current_block != NULL, \"we must have a current block\");\n+    assert (current_block != nullptr, \"we must have a current block\");\n@@ -167,1 +167,1 @@\n-          assert(dest != NULL, \"must be a block immediately following this one.\");\n+          assert(dest != nullptr, \"must be a block immediately following this one.\");\n@@ -171,1 +171,1 @@\n-        assert(dest != NULL, \"branch destination must start a block.\");\n+        assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -176,1 +176,1 @@\n-        assert(dest != NULL, \"branch destination must start a block.\");\n+        assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -181,1 +181,1 @@\n-        assert(dest != NULL, \"branch destination must start a block.\");\n+        assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -191,1 +191,1 @@\n-          assert(dest != NULL, \"branch destination must start a block.\");\n+          assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -195,1 +195,1 @@\n-            assert(dest != NULL, \"branch destination must start a block.\");\n+            assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -208,1 +208,1 @@\n-          assert(dest != NULL, \"branch destination must start a block.\");\n+          assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -213,1 +213,1 @@\n-            assert(dest != NULL, \"branch destination must start a block.\");\n+            assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -223,1 +223,1 @@\n-          assert(dest != NULL, \"branch destination must start a block.\");\n+          assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -226,1 +226,1 @@\n-          assert(jsrExit != NULL, \"jsr return bci must start a block.\");\n+          assert(jsrExit != nullptr, \"jsr return bci must start a block.\");\n@@ -233,1 +233,1 @@\n-          assert(dest != NULL, \"branch destination must start a block.\");\n+          assert(dest != nullptr, \"branch destination must start a block.\");\n@@ -236,1 +236,1 @@\n-          assert(jsrExit != NULL, \"jsr return bci must start a block.\");\n+          assert(jsrExit != nullptr, \"jsr return bci must start a block.\");\n@@ -328,1 +328,1 @@\n-  _work_list = NULL;\n+  _work_list = nullptr;\n@@ -337,1 +337,1 @@\n-  while ((block = work_list_get()) != NULL) {\n+  while ((block = work_list_get()) != nullptr) {\n@@ -352,1 +352,1 @@\n-  if (block != NULL) {\n+  if (block != nullptr) {\n@@ -377,1 +377,1 @@\n-    while (block == NULL && t > 0) {\n+    while (block == nullptr && t > 0) {\n@@ -380,1 +380,1 @@\n-    guarantee(block != NULL, \"invalid bytecode index; must be instruction index\");\n+    guarantee(block != nullptr, \"invalid bytecode index; must be instruction index\");\n@@ -414,1 +414,1 @@\n-    new (analyzer->arena()) GrowableArray<MethodLiveness::BasicBlock*>(analyzer->arena(), 5, 0, NULL);\n+    new (analyzer->arena()) GrowableArray<MethodLiveness::BasicBlock*>(analyzer->arena(), 5, 0, nullptr);\n@@ -416,1 +416,1 @@\n-    new (analyzer->arena()) GrowableArray<MethodLiveness::BasicBlock*>(analyzer->arena(), 5, 0, NULL);\n+    new (analyzer->arena()) GrowableArray<MethodLiveness::BasicBlock*>(analyzer->arena(), 5, 0, nullptr);\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,3 +75,3 @@\n-    _class_name(NULL)\n-  , _method_name(NULL)\n-  , _signature(NULL)\n+    _class_name(nullptr)\n+  , _method_name(nullptr)\n+  , _signature(nullptr)\n@@ -83,1 +83,1 @@\n-  if (_class_name != NULL) {\n+  if (_class_name != nullptr) {\n@@ -86,1 +86,1 @@\n-  if (_method_name != NULL) {\n+  if (_method_name != nullptr) {\n@@ -89,1 +89,1 @@\n-  if (_signature != NULL) {\n+  if (_signature != nullptr) {\n@@ -106,1 +106,1 @@\n-  bool have_colon = (colon != NULL);\n+  bool have_colon = (colon != nullptr);\n@@ -117,1 +117,1 @@\n-    if (pos != NULL) {\n+    if (pos != nullptr) {\n@@ -133,1 +133,1 @@\n-    if (pos != NULL) {\n+    if (pos != nullptr) {\n@@ -213,1 +213,1 @@\n-    return strstr(candidate_string, match_string) != NULL;\n+    return strstr(candidate_string, match_string) != nullptr;\n@@ -241,1 +241,1 @@\n-  if (strstr(name, \"*\") != NULL) {\n+  if (strstr(name, \"*\") != nullptr) {\n@@ -267,1 +267,1 @@\n-  assert(error_msg == NULL, \"Dont call here with error_msg already set\");\n+  assert(error_msg == nullptr, \"Dont call here with error_msg already set\");\n@@ -270,1 +270,1 @@\n-    assert(error_msg != NULL, \"Message must be set if parsing failed\");\n+    assert(error_msg != nullptr, \"Message must be set if parsing failed\");\n@@ -291,1 +291,1 @@\n-        strstr(line + bytes_read, method_name) == NULL) {\n+        strstr(line + bytes_read, method_name) == nullptr) {\n@@ -297,2 +297,2 @@\n-    if ((strchr(class_name, JVM_SIGNATURE_SPECIAL) != NULL) ||\n-        (strchr(class_name, JVM_SIGNATURE_ENDSPECIAL) != NULL)) {\n+    if ((strchr(class_name, JVM_SIGNATURE_SPECIAL) != nullptr) ||\n+        (strchr(class_name, JVM_SIGNATURE_ENDSPECIAL) != nullptr)) {\n@@ -303,2 +303,2 @@\n-    if ((strchr(method_name, JVM_SIGNATURE_SPECIAL) != NULL) ||\n-        (strchr(method_name, JVM_SIGNATURE_ENDSPECIAL) != NULL)) {\n+    if ((strchr(method_name, JVM_SIGNATURE_SPECIAL) != nullptr) ||\n+        (strchr(method_name, JVM_SIGNATURE_ENDSPECIAL) != nullptr)) {\n@@ -313,1 +313,1 @@\n-      assert(error_msg != NULL, \"Must have been set by check_mode()\");\n+      assert(error_msg != nullptr, \"Must have been set by check_mode()\");\n@@ -318,1 +318,1 @@\n-    Symbol* signature = NULL;\n+    Symbol* signature = nullptr;\n@@ -331,1 +331,1 @@\n-        if (strchr(sig, '*') != NULL) {\n+        if (strchr(sig, '*') != nullptr) {\n@@ -356,1 +356,1 @@\n-      ((this->signature() == NULL) || match(signature, this->signature(), Prefix))) {\n+      ((this->signature() == nullptr) || match(signature, this->signature(), Prefix))) {\n@@ -380,1 +380,1 @@\n-  if (signature() != NULL) {\n+  if (signature() != nullptr) {\n@@ -386,1 +386,1 @@\n-  assert(error_msg == NULL, \"Don't call here with error_msg already set\");\n+  assert(error_msg == nullptr, \"Don't call here with error_msg already set\");\n@@ -389,1 +389,1 @@\n-  if (error_msg != NULL) {\n+  if (error_msg != nullptr) {\n@@ -391,1 +391,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -400,1 +400,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -407,1 +407,1 @@\n-  for (BasicMatcher* current = this; current != NULL; current = current->next()) {\n+  for (BasicMatcher* current = this; current != nullptr; current = current->next()) {\n@@ -425,1 +425,1 @@\n-  assert(error_msg == NULL, \"Dont call here with error_msg already set\");\n+  assert(error_msg == nullptr, \"Dont call here with error_msg already set\");\n@@ -428,1 +428,1 @@\n-  if (error_msg != NULL) {\n+  if (error_msg != nullptr) {\n@@ -430,1 +430,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -436,1 +436,1 @@\n-  for (InlineMatcher* current = this; current != NULL; current = current->next()) {\n+  for (InlineMatcher* current = this; current != nullptr; current = current->next()) {\n@@ -456,1 +456,1 @@\n-     return NULL;\n+     return nullptr;\n@@ -460,1 +460,1 @@\n-   assert(error_msg == NULL, \"error_msg must not be set yet\");\n+   assert(error_msg == nullptr, \"error_msg must not be set yet\");\n@@ -462,3 +462,3 @@\n-   if (im == NULL) {\n-     assert(error_msg != NULL, \"Must have error message\");\n-     return NULL;\n+   if (im == nullptr) {\n+     assert(error_msg != nullptr, \"Must have error message\");\n+     return nullptr;\n@@ -476,1 +476,1 @@\n-   if(_class_name != NULL) {\n+   if(_class_name != nullptr) {\n@@ -480,1 +480,1 @@\n-   if (_method_name != NULL) {\n+   if (_method_name != nullptr) {\n@@ -484,1 +484,1 @@\n-   if (_signature != NULL) {\n+   if (_signature != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    _next(NULL) {\n+    _next(nullptr) {\n@@ -92,1 +92,1 @@\n-    if (_next != NULL) {\n+    if (_next != nullptr) {\n@@ -111,1 +111,1 @@\n-    _inline_action(unknown_inline), _next(NULL) {\n+    _inline_action(unknown_inline), _next(nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -446,1 +446,1 @@\n-  assert(derived_oop_fn != NULL, \"sanity\");\n+  assert(derived_oop_fn != nullptr, \"sanity\");\n@@ -509,1 +509,1 @@\n-  assert(cb != NULL, \"no codeblob\");\n+  assert(cb != nullptr, \"no codeblob\");\n@@ -511,1 +511,1 @@\n-  assert( reg_map->_update_for_id == NULL || fr->is_older(reg_map->_update_for_id),\n+  assert( reg_map->_update_for_id == nullptr || fr->is_older(reg_map->_update_for_id),\n@@ -528,1 +528,1 @@\n-  assert(cb == NULL || cb->is_compiled_by_c1() || cb->is_compiled_by_jvmci() || !cb->is_runtime_stub() ||\n+  assert(cb == nullptr || cb->is_compiled_by_c1() || cb->is_compiled_by_jvmci() || !cb->is_runtime_stub() ||\n@@ -539,1 +539,1 @@\n-  assert(cb != NULL, \"no codeblob\");\n+  assert(cb != nullptr, \"no codeblob\");\n@@ -541,1 +541,1 @@\n-  assert(map != NULL, \"no ptr map found\");\n+  assert(map != nullptr, \"no ptr map found\");\n@@ -575,1 +575,1 @@\n-  if (reg_map != NULL) {\n+  if (reg_map != nullptr) {\n@@ -643,1 +643,1 @@\n-  const ImmutableOopMap* last = NULL;\n+  const ImmutableOopMap* last = nullptr;\n@@ -707,1 +707,1 @@\n-  ImmutableOopMapPair* last  = NULL;\n+  ImmutableOopMapPair* last  = nullptr;\n@@ -717,1 +717,1 @@\n-  guarantee(last != NULL, \"last may not be null\");\n+  guarantee(last != nullptr, \"last may not be null\");\n@@ -750,1 +750,1 @@\n-ImmutableOopMapBuilder::ImmutableOopMapBuilder(const OopMapSet* set) : _set(set), _empty(NULL), _last(NULL), _empty_offset(-1), _last_offset(-1), _offset(0), _required(-1), _new_set(NULL) {\n+ImmutableOopMapBuilder::ImmutableOopMapBuilder(const OopMapSet* set) : _set(set), _empty(nullptr), _last(nullptr), _empty_offset(-1), _last_offset(-1), _offset(0), _required(-1), _new_set(nullptr) {\n@@ -819,1 +819,1 @@\n-    ImmutableOopMapPair* pair = NULL;\n+    ImmutableOopMapPair* pair = nullptr;\n@@ -888,1 +888,1 @@\n-    _location(location), _offset(offset), _next(NULL) {}\n+    _location(location), _offset(offset), _next(nullptr) {}\n@@ -898,1 +898,1 @@\n-DerivedPointerTable::Entry::List* DerivedPointerTable::Entry::_list = NULL;\n+DerivedPointerTable::Entry::List* DerivedPointerTable::Entry::_list = nullptr;\n@@ -902,1 +902,1 @@\n-  return Entry::_list == NULL || Entry::_list->empty();\n+  return Entry::_list == nullptr || Entry::_list->empty();\n@@ -911,1 +911,1 @@\n-  if (Entry::_list == NULL) {\n+  if (Entry::_list == nullptr) {\n@@ -924,1 +924,1 @@\n-  assert(Entry::_list != NULL, \"list must exist\");\n+  assert(Entry::_list != nullptr, \"list must exist\");\n@@ -946,1 +946,1 @@\n-  assert(Entry::_list != NULL, \"list must exist\");\n+  assert(Entry::_list != nullptr, \"list must exist\");\n@@ -948,1 +948,1 @@\n-  while (entries != NULL) {\n+  while (entries != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-  \/\/ Methods oops_do() and all_do() filter out NULL oops and\n+  \/\/ Methods oops_do() and all_do() filter out nullptr oops and\n@@ -407,1 +407,1 @@\n-    Mapping() : _kind(OOPMAP_UNKNOWN), _offset(-1), _size(-1), _map(NULL) {}\n+    Mapping() : _kind(OOPMAP_UNKNOWN), _offset(-1), _size(-1), _map(nullptr) {}\n@@ -430,1 +430,1 @@\n-    if (_last != NULL && _last->count() > 0 && _last->equals(map)) {\n+    if (_last != nullptr && _last->count() > 0 && _last->equals(map)) {\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  return val == (oop)NULL || CompressedOops::is_base(val);\n+  return val == (oop)nullptr || CompressedOops::is_base(val);\n@@ -58,1 +58,1 @@\n-  assert(fr != NULL, \"\");\n+  assert(fr != nullptr, \"\");\n@@ -79,1 +79,1 @@\n-      DEBUG_ONLY(if (loc == NULL && reg_map->should_skip_missing()) continue;)\n+      DEBUG_ONLY(if (loc == nullptr && reg_map->should_skip_missing()) continue;)\n@@ -81,1 +81,1 @@\n-      if (loc == NULL) {\n+      if (loc == nullptr) {\n@@ -85,1 +85,1 @@\n-      guarantee(loc != NULL, \"missing saved register\");\n+      guarantee(loc != nullptr, \"missing saved register\");\n@@ -88,1 +88,1 @@\n-      \/\/ Ignore NULL oops and decoded NULL narrow oops which\n+      \/\/ Ignore nullptr oops and decoded nullptr narrow oops which\n@@ -91,1 +91,1 @@\n-      \/\/ The narrow_oop_base could be NULL or be the address\n+      \/\/ The narrow_oop_base could be nullptr or be the address\n@@ -93,1 +93,1 @@\n-      if (base_loc != NULL && *base_loc != (oop)NULL && !CompressedOops::is_base(*base_loc)) {\n+      if (base_loc != nullptr && *base_loc != (oop)nullptr && !CompressedOops::is_base(*base_loc)) {\n@@ -111,1 +111,1 @@\n-      if (loc == NULL) {\n+      if (loc == nullptr) {\n@@ -119,1 +119,1 @@\n-      if (loc == NULL) {\n+      if (loc == nullptr) {\n@@ -123,1 +123,1 @@\n-      guarantee(loc != NULL, \"missing saved register\");\n+      guarantee(loc != nullptr, \"missing saved register\");\n@@ -127,1 +127,1 @@\n-          \/\/ Ignore NULL oops and decoded NULL narrow oops which\n+          \/\/ Ignore nullptr oops and decoded nullptr narrow oops which\n@@ -130,1 +130,1 @@\n-          \/\/ The narrow_oop_base could be NULL or be the address\n+          \/\/ The narrow_oop_base could be nullptr or be the address\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}