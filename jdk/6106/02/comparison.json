{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.lang.reflect.Field;\n@@ -36,2 +35,0 @@\n-import sun.security.util.HexDumpEncoder;\n-\n@@ -112,5 +109,4 @@\n-                    CertAttrSet<?> certExt = (CertAttrSet<?>)\n-                            cons.newInstance(passed);\n-                    if (map.put(certExt.getName(), (Extension)certExt) != null) {\n-                        throw new IOException(\"Duplicate extensions not allowed\");\n-                    }\n+            CertAttrSet<?> certExt = (CertAttrSet<?>) cons.newInstance(passed);\n+            if (map.put(certExt.getName(), (Extension)certExt) != null) {\n+                throw new IOException(\"Duplicate extensions not allowed\");\n+            }\n@@ -355,29 +351,0 @@\n-\n-class UnparseableExtension extends Extension {\n-    private String name;\n-    private String exceptionDescription;\n-\n-    public UnparseableExtension(Extension ext, Throwable why) {\n-        super(ext);\n-\n-        name = \"\";\n-        try {\n-            Class<?> extClass = OIDMap.getClass(ext.getExtensionId());\n-            if (extClass != null) {\n-                Field field = extClass.getDeclaredField(\"NAME\");\n-                name = (String)(field.get(null)) + \" \";\n-            }\n-        } catch (Exception e) {\n-            \/\/ If we cannot find the name, just ignore it\n-        }\n-\n-        this.exceptionDescription = why.toString();\n-    }\n-\n-    @Override public String toString() {\n-        return super.toString() +\n-                \"Unparseable \" + name + \"extension due to\\n\" +\n-                exceptionDescription + \"\\n\\n\" +\n-                new HexDumpEncoder().encodeBuffer(getExtensionValue());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateExtensions.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.x509;\n+\n+import java.lang.reflect.Field;\n+import sun.security.util.HexDumpEncoder;\n+\n+\/**\n+ * An extension that cannot be parsed due to decoding errors or invalid\n+ * content.\n+ *\/\n+class UnparseableExtension extends Extension {\n+    private String name;\n+    private String exceptionDescription;\n+    private String exceptionMessage;\n+\n+    UnparseableExtension(Extension ext, Throwable why) {\n+        super(ext);\n+\n+        name = \"\";\n+        try {\n+            Class<?> extClass = OIDMap.getClass(ext.getExtensionId());\n+            if (extClass != null) {\n+                Field field = extClass.getDeclaredField(\"NAME\");\n+                name = (String)(field.get(null)) + \" \";\n+            }\n+        } catch (Exception e) {\n+            \/\/ If we cannot find the name, just ignore it\n+        }\n+\n+        this.exceptionDescription = why.toString();\n+        this.exceptionMessage = why.getMessage();\n+    }\n+\n+    String exceptionMessage() {\n+        return exceptionMessage;\n+    }\n+\n+    @Override public String toString() {\n+        return super.toString() +\n+                \"Unparseable \" + name + \"extension due to\\n\" +\n+                exceptionDescription + \"\\n\\n\" +\n+                new HexDumpEncoder().encodeBuffer(getExtensionValue());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/UnparseableExtension.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -1442,1 +1442,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1447,0 +1447,1 @@\n+    @Override\n@@ -1451,4 +1452,26 @@\n-        } else {\n-            ExtendedKeyUsageExtension ext = getExtendedKeyUsageExtension();\n-            if (ext == null) {\n-                return null;\n+        }\n+        ExtendedKeyUsageExtension ext = (ExtendedKeyUsageExtension)\n+            getExtensionIfParseable(PKIXExtensions.ExtendedKeyUsage_Id);\n+        if (ext == null) {\n+            return null;\n+        }\n+        extKeyUsage = Collections.unmodifiableList(ext.getExtendedKeyUsage());\n+        return extKeyUsage;\n+    }\n+\n+    \/**\n+     * Returns the extension identified by OID or null if it doesn't exist\n+     * and is not unparseable.\n+     *\n+     * @throws CertificateParsingException if extension is unparseable\n+     *\/\n+    private Extension getExtensionIfParseable(ObjectIdentifier oid)\n+            throws CertificateParsingException {\n+        Extension ext = getExtension(oid);\n+        if (ext == null) {\n+            \/\/ check if unparseable\n+            UnparseableExtension unparseableExt =\n+                   (UnparseableExtension)getUnparseableExtension(oid);\n+            if (unparseableExt != null) {\n+                throw new CertificateParsingException(\n+                        unparseableExt.exceptionMessage());\n@@ -1456,3 +1479,0 @@\n-            extKeyUsage =\n-                Collections.unmodifiableList(ext.getExtendedKeyUsage());\n-            return extKeyUsage;\n@@ -1460,0 +1480,1 @@\n+        return ext;\n@@ -1605,1 +1626,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1610,0 +1631,1 @@\n+    @Override\n@@ -1617,1 +1639,2 @@\n-            getSubjectAlternativeNameExtension();\n+            (SubjectAlternativeNameExtension)getExtensionIfParseable(\n+                PKIXExtensions.SubjectAlternativeName_Id);\n@@ -1635,1 +1658,1 @@\n-     * getSubjectAlternaitveNames method in X509Certificate. A\n+     * getSubjectAlternativeNames method in X509Certificate. A\n@@ -1669,1 +1692,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1674,0 +1697,1 @@\n+    @Override\n@@ -1681,1 +1705,2 @@\n-            getIssuerAlternativeNameExtension();\n+            (IssuerAlternativeNameExtension)getExtensionIfParseable(\n+                PKIXExtensions.IssuerAlternativeName_Id);\n@@ -1699,1 +1724,1 @@\n-     * getIssuerAlternaitveNames method in X509Certificate. A\n+     * getIssuerAlternativeNames method in X509Certificate. A\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":39,"deletions":14,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.X509Certificate;\n+import jdk.test.lib.security.CertUtils;\n+\n+\/*\n+ * @test\n+ * @bug 8251468\n+ * @library \/test\/lib\n+ * @summary Check that X509Certificate.getSubjectAlternativeNames,\n+ *          getIssuerAlternativeNames and getExtendedKeyUsage throw\n+ *          CertificateParsingException if extension is unparseable\/invalid.\n+ *\/\n+public class GetUnparseableExtensions {\n+\n+    \/\/ Cert has 3 badly encoded extensions:\n+    \/\/ 1. SubjectAlternativeNameExtension with a null RFC822Name\n+    \/\/ 2. IssuerAlternativeNameExtension with a null RFC822Name\n+    \/\/ 3. ExtendedKeyUsageExtension encoded as a Set instead of a Sequence\n+    private final static String CERT_WITH_UNPARSEABLE_EXTS = \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIIDDTCCAfWgAwIBAgIIc\/2fukmBqZgwDQYJKoZIhvcNAQELBQAwDTELMAkGA1UE\n+        AxMCQ0EwHhcNMjExMDI2MTgxNzU4WhcNMjIwMTI0MTgxNzU4WjANMQswCQYDVQQD\n+        EwJFMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKIIIsP6ghZ94hIl\n+        U3G+D11vASSP7JMmX6G6opGKel60dZ5So3Tdj0E6VHehwcxEdh94LEIxvOkS3Cdh\n+        hd1iiB4\/q2InvLuGzSVvWAwYNkB7GbR31pIst0GAFdH+z\/tVjjHcacBGwmysk8DN\n+        Rmxm66AyJxHA1U\/v64vx5kSGNoUAEcWm+OslxfdJ7nygnU+S6a\/06sRvifVn7q7c\n+        Kg4AIFE1+vWrcgYbApkPNjLiRGAr33TAb1y+nN1zW\/luEMEQIJBd+YJW9OrPGMUr\n+        SDSXfB06HscH1bTUfN2ngsxT2hy9eiCiDtagPIwYA0sVNjyUtfPsjAH1oxDPXzC5\n+        quJB5\/sCAwEAAaNxMG8wHQYDVR0OBBYEFCqWMQBki21cSqKIHp4rFitf6pQ2MAsG\n+        A1UdEQQEMAKBADALBgNVHRIEBDACgQAwHwYDVR0jBBgwFoAUJbvRN17hEohYsg1M\n+        icq1mMpIwoAwEwYDVR0lBAwxCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEB\n+        ABBqJ\/yYXD1xueB63GRY4ZotO6ukEkJiPZIwrr2vZW+GMws2b9gqNoD+dL9AeYCA\n+        Zb6RYbaNDY5OoJmEty9KbtON7Rt1LtCFuZbYKxrhW0dJgXLyNOgXr+x0g2btbvWV\n+        r8U1icwHapZM5IqDKLivzZNzwv52mrJDuzWqmlhAIlPLIU1QfNQ1oC8HpFkL71Bb\n+        sB\/4OIxxjRzf0AGmb7aeQNfxag2oKlOwqzum1FLt8BaVjylc0aUATPtkgothK8nK\n+        m5jXJmA4zA11ck0uJW39gDRuR0D1k4qm\/s\/5Iuhd6MRVDXEhVbJXuH2yzHcmbgRs\n+        paD\/he6C1JszWf7YrTsX3Fc=\n+        -----END CERTIFICATE-----\n+        \"\"\";\n+\n+    @FunctionalInterface\n+    public interface TestCase<T> {\n+        T test() throws Exception;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        X509Certificate cert =\n+                CertUtils.getCertFromString(CERT_WITH_UNPARSEABLE_EXTS);\n+        getExtension(() -> cert.getSubjectAlternativeNames());\n+        getExtension(() -> cert.getIssuerAlternativeNames());\n+        getExtension(() -> cert.getExtendedKeyUsage());\n+    }\n+\n+    private static void getExtension(TestCase<?> t) throws Exception {\n+        try {\n+            t.test();\n+            throw new Exception(\"Test FAILED\");\n+        } catch (CertificateParsingException cpe) {\n+            System.out.println(cpe.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/cert\/X509Certificate\/GetUnparseableExtensions.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}