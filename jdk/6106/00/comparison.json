{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.lang.reflect.Field;\n@@ -36,2 +35,0 @@\n-import sun.security.util.HexDumpEncoder;\n-\n@@ -112,5 +109,4 @@\n-                    CertAttrSet<?> certExt = (CertAttrSet<?>)\n-                            cons.newInstance(passed);\n-                    if (map.put(certExt.getName(), (Extension)certExt) != null) {\n-                        throw new IOException(\"Duplicate extensions not allowed\");\n-                    }\n+            CertAttrSet<?> certExt = (CertAttrSet<?>) cons.newInstance(passed);\n+            if (map.put(certExt.getName(), (Extension)certExt) != null) {\n+                throw new IOException(\"Duplicate extensions not allowed\");\n+            }\n@@ -355,29 +351,0 @@\n-\n-class UnparseableExtension extends Extension {\n-    private String name;\n-    private String exceptionDescription;\n-\n-    public UnparseableExtension(Extension ext, Throwable why) {\n-        super(ext);\n-\n-        name = \"\";\n-        try {\n-            Class<?> extClass = OIDMap.getClass(ext.getExtensionId());\n-            if (extClass != null) {\n-                Field field = extClass.getDeclaredField(\"NAME\");\n-                name = (String)(field.get(null)) + \" \";\n-            }\n-        } catch (Exception e) {\n-            \/\/ If we cannot find the name, just ignore it\n-        }\n-\n-        this.exceptionDescription = why.toString();\n-    }\n-\n-    @Override public String toString() {\n-        return super.toString() +\n-                \"Unparseable \" + name + \"extension due to\\n\" +\n-                exceptionDescription + \"\\n\\n\" +\n-                new HexDumpEncoder().encodeBuffer(getExtensionValue());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateExtensions.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.x509;\n+\n+import java.lang.reflect.Field;\n+import sun.security.util.HexDumpEncoder;\n+\n+\/**\n+ * An extension that cannot be parsed due to decoding errors or invalid\n+ * content.\n+ *\/\n+class UnparseableExtension extends Extension {\n+    private String name;\n+    private String exceptionDescription;\n+    private String exceptionMessage;\n+\n+    UnparseableExtension(Extension ext, Throwable why) {\n+        super(ext);\n+\n+        name = \"\";\n+        try {\n+            Class<?> extClass = OIDMap.getClass(ext.getExtensionId());\n+            if (extClass != null) {\n+                Field field = extClass.getDeclaredField(\"NAME\");\n+                name = (String)(field.get(null)) + \" \";\n+            }\n+        } catch (Exception e) {\n+            \/\/ If we cannot find the name, just ignore it\n+        }\n+\n+        this.exceptionDescription = why.toString();\n+        this.exceptionMessage = why.getMessage();\n+    }\n+\n+    String exceptionMessage() {\n+        return exceptionMessage;\n+    }\n+\n+    @Override public String toString() {\n+        return super.toString() +\n+                \"Unparseable \" + name + \"extension due to\\n\" +\n+                exceptionDescription + \"\\n\\n\" +\n+                new HexDumpEncoder().encodeBuffer(getExtensionValue());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/UnparseableExtension.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -1605,1 +1605,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1610,0 +1610,1 @@\n+    @Override\n@@ -1619,0 +1620,8 @@\n+            \/\/ check unparseable extensions\n+            UnparseableExtension unparseableExt =\n+                    (UnparseableExtension)getUnparseableExtension(\n+                            PKIXExtensions.SubjectAlternativeName_Id);\n+            if (unparseableExt != null) {\n+                throw new CertificateParsingException(\n+                        unparseableExt.exceptionMessage());\n+            }\n@@ -1635,1 +1644,1 @@\n-     * getSubjectAlternaitveNames method in X509Certificate. A\n+     * getSubjectAlternativeNames method in X509Certificate. A\n@@ -1669,1 +1678,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1674,0 +1683,1 @@\n+    @Override\n@@ -1683,0 +1693,8 @@\n+            \/\/ check unparseable extensions\n+            UnparseableExtension unparseableExt =\n+                    (UnparseableExtension)getUnparseableExtension(\n+                            PKIXExtensions.IssuerAlternativeName_Id);\n+            if (unparseableExt != null) {\n+                throw new CertificateParsingException(\n+                        unparseableExt.exceptionMessage());\n+            }\n@@ -1699,1 +1717,1 @@\n-     * getIssuerAlternaitveNames method in X509Certificate. A\n+     * getIssuerAlternativeNames method in X509Certificate. A\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.X509Certificate;\n+import jdk.test.lib.security.CertUtils;\n+\n+\/*\n+ * @test\n+ * @bug 8251468\n+ * @library \/test\/lib\n+ * @summary Check that X509Certificate.getSubjectAlternativeNames throws\n+ *          CertificateParsingException if extension is unparseable\/invalid.\n+ *\/\n+public class NullRFC822Name {\n+\n+    private final static String CERT_WITH_NULL_RFC822NAME = \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIIC7DCCAdSgAwIBAgIJAOERuseHYHV2MA0GCSqGSIb3DQEBCwUAMA0xCzAJBgNV\n+        BAMTAkNBMB4XDTIxMTAyMTIwNTcyMVoXDTIyMDExOTIwNTcyMVowDTELMAkGA1UE\n+        AxMCRTEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCiCCLD+oIWfeIS\n+        JVNxvg9dbwEkj+yTJl+huqKRinpetHWeUqN03Y9BOlR3ocHMRHYfeCxCMbzpEtwn\n+        YYXdYogeP6tiJ7y7hs0lb1gMGDZAexm0d9aSLLdBgBXR\/s\/7VY4x3GnARsJsrJPA\n+        zUZsZuugMicRwNVP7+uL8eZEhjaFABHFpvjrJcX3Se58oJ1Pkumv9OrEb4n1Z+6u\n+        3CoOACBRNfr1q3IGGwKZDzYy4kRgK990wG9cvpzdc1v5bhDBECCQXfmCVvTqzxjF\n+        K0g0l3wdOh7HB9W01Hzdp4LMU9ocvXogog7WoDyMGANLFTY8lLXz7IwB9aMQz18w\n+        uariQef7AgMBAAGjTzBNMB0GA1UdDgQWBBQqljEAZIttXEqiiB6eKxYrX+qUNjAL\n+        BgNVHREEBDACgQAwHwYDVR0jBBgwFoAUJbvRN17hEohYsg1Micq1mMpIwoAwDQYJ\n+        KoZIhvcNAQELBQADggEBADYOkYHRDeWEdem8bv\/xUISwavKi53QIjxoaaJ0bmVDz\n+        xuGQ6JK+M++fp6PlnsF3Fg\/SE\/q1keyuCj5qqawJpm18JhZUpmzbXnYh9ZZum31i\n+        Z5aMWgphn\/pAPkHnVppJWtSTuDNSvQR2WifvQ493p\/+WtLIy9ZLufhXqRXFTsWeD\n+        3myNbuQIO1j7uJFk1VtG8eGRqPjYotzHfwYFK7XbOMrgTbWAvGAbOaPdszkLOme+\n+        C\/c7DDA\/6aZNGh9NkKQMiUS3d9FwWJEexsBB4TsZ3GvHMyz8IjMVdaBsBhsl7a8t\n+        5eZPNXL5hDogw\/E6P8I1Ay1ellzuYVzh7IpiAcHpPLg=\n+        -----END CERTIFICATE-----\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        X509Certificate cert =\n+                CertUtils.getCertFromString(CERT_WITH_NULL_RFC822NAME);\n+        try {\n+            cert.getSubjectAlternativeNames();\n+            throw new Exception(\"Test FAILED\");\n+        } catch (CertificateParsingException cpe) {\n+            System.out.println(cpe.getMessage());\n+            System.out.println(\"Test PASSED\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/cert\/GetSubjectAlternativeNames\/NullRFC822Name.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}