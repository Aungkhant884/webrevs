{"files":[{"patch":"@@ -1442,1 +1442,1 @@\n-     * This method are the overridden implementation of\n+     * This method is the overridden implementation of the\n@@ -1447,0 +1447,1 @@\n+    @Override\n@@ -1451,4 +1452,23 @@\n-        } else {\n-            ExtendedKeyUsageExtension ext = getExtendedKeyUsageExtension();\n-            if (ext == null) {\n-                return null;\n+        }\n+        ExtendedKeyUsageExtension ext = (ExtendedKeyUsageExtension)\n+            getExtensionIfParseable(PKIXExtensions.ExtendedKeyUsage_Id);\n+        extKeyUsage = Collections.unmodifiableList(ext.getExtendedKeyUsage());\n+        return extKeyUsage;\n+    }\n+\n+    \/**\n+     * Returns the extension identified by OID or null if it doesn't exist\n+     * and is not unparseable.\n+     *\n+     * @throws CertificateParsingException if extension is unparseable\n+     *\/\n+    private Extension getExtensionIfParseable(ObjectIdentifier oid)\n+            throws CertificateParsingException {\n+        Extension ext = getExtension(oid);\n+        if (ext == null) {\n+            \/\/ check if unparseable\n+            UnparseableExtension unparseableExt =\n+                   (UnparseableExtension)getUnparseableExtension(oid);\n+            if (unparseableExt != null) {\n+                throw new CertificateParsingException(\n+                        unparseableExt.exceptionMessage());\n@@ -1456,3 +1476,0 @@\n-            extKeyUsage =\n-                Collections.unmodifiableList(ext.getExtendedKeyUsage());\n-            return extKeyUsage;\n@@ -1460,0 +1477,1 @@\n+        return ext;\n@@ -1618,12 +1636,2 @@\n-            getSubjectAlternativeNameExtension();\n-        if (subjectAltNameExt == null) {\n-            \/\/ check unparseable extensions\n-            UnparseableExtension unparseableExt =\n-                    (UnparseableExtension)getUnparseableExtension(\n-                            PKIXExtensions.SubjectAlternativeName_Id);\n-            if (unparseableExt != null) {\n-                throw new CertificateParsingException(\n-                        unparseableExt.exceptionMessage());\n-            }\n-            return null;\n-        }\n+            (SubjectAlternativeNameExtension)getExtensionIfParseable(\n+                PKIXExtensions.SubjectAlternativeName_Id);\n@@ -1691,12 +1699,2 @@\n-            getIssuerAlternativeNameExtension();\n-        if (issuerAltNameExt == null) {\n-            \/\/ check unparseable extensions\n-            UnparseableExtension unparseableExt =\n-                    (UnparseableExtension)getUnparseableExtension(\n-                            PKIXExtensions.IssuerAlternativeName_Id);\n-            if (unparseableExt != null) {\n-                throw new CertificateParsingException(\n-                        unparseableExt.exceptionMessage());\n-            }\n-            return null;\n-        }\n+            (IssuerAlternativeNameExtension)getExtensionIfParseable(\n+                PKIXExtensions.IssuerAlternativeName_Id);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":30,"deletions":32,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.security.cert.CertificateParsingException;\n-import java.security.cert.X509Certificate;\n-import jdk.test.lib.security.CertUtils;\n-\n-\/*\n- * @test\n- * @bug 8251468\n- * @library \/test\/lib\n- * @summary Check that X509Certificate.getSubjectAlternativeNames throws\n- *          CertificateParsingException if extension is unparseable\/invalid.\n- *\/\n-public class NullRFC822Name {\n-\n-    private final static String CERT_WITH_NULL_RFC822NAME = \"\"\"\n-        -----BEGIN CERTIFICATE-----\n-        MIIC7DCCAdSgAwIBAgIJAOERuseHYHV2MA0GCSqGSIb3DQEBCwUAMA0xCzAJBgNV\n-        BAMTAkNBMB4XDTIxMTAyMTIwNTcyMVoXDTIyMDExOTIwNTcyMVowDTELMAkGA1UE\n-        AxMCRTEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCiCCLD+oIWfeIS\n-        JVNxvg9dbwEkj+yTJl+huqKRinpetHWeUqN03Y9BOlR3ocHMRHYfeCxCMbzpEtwn\n-        YYXdYogeP6tiJ7y7hs0lb1gMGDZAexm0d9aSLLdBgBXR\/s\/7VY4x3GnARsJsrJPA\n-        zUZsZuugMicRwNVP7+uL8eZEhjaFABHFpvjrJcX3Se58oJ1Pkumv9OrEb4n1Z+6u\n-        3CoOACBRNfr1q3IGGwKZDzYy4kRgK990wG9cvpzdc1v5bhDBECCQXfmCVvTqzxjF\n-        K0g0l3wdOh7HB9W01Hzdp4LMU9ocvXogog7WoDyMGANLFTY8lLXz7IwB9aMQz18w\n-        uariQef7AgMBAAGjTzBNMB0GA1UdDgQWBBQqljEAZIttXEqiiB6eKxYrX+qUNjAL\n-        BgNVHREEBDACgQAwHwYDVR0jBBgwFoAUJbvRN17hEohYsg1Micq1mMpIwoAwDQYJ\n-        KoZIhvcNAQELBQADggEBADYOkYHRDeWEdem8bv\/xUISwavKi53QIjxoaaJ0bmVDz\n-        xuGQ6JK+M++fp6PlnsF3Fg\/SE\/q1keyuCj5qqawJpm18JhZUpmzbXnYh9ZZum31i\n-        Z5aMWgphn\/pAPkHnVppJWtSTuDNSvQR2WifvQ493p\/+WtLIy9ZLufhXqRXFTsWeD\n-        3myNbuQIO1j7uJFk1VtG8eGRqPjYotzHfwYFK7XbOMrgTbWAvGAbOaPdszkLOme+\n-        C\/c7DDA\/6aZNGh9NkKQMiUS3d9FwWJEexsBB4TsZ3GvHMyz8IjMVdaBsBhsl7a8t\n-        5eZPNXL5hDogw\/E6P8I1Ay1ellzuYVzh7IpiAcHpPLg=\n-        -----END CERTIFICATE-----\n-        \"\"\";\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        X509Certificate cert =\n-                CertUtils.getCertFromString(CERT_WITH_NULL_RFC822NAME);\n-        try {\n-            cert.getSubjectAlternativeNames();\n-            throw new Exception(\"Test FAILED\");\n-        } catch (CertificateParsingException cpe) {\n-            System.out.println(cpe.getMessage());\n-            System.out.println(\"Test PASSED\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/cert\/GetSubjectAlternativeNames\/NullRFC822Name.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.X509Certificate;\n+import jdk.test.lib.security.CertUtils;\n+\n+\/*\n+ * @test\n+ * @bug 8251468\n+ * @library \/test\/lib\n+ * @summary Check that X509Certificate.getSubjectAlternativeNames,\n+ *          getIssuerAlternativeNames and getExtendedKeyUsage throw\n+ *          CertificateParsingException if extension is unparseable\/invalid.\n+ *\/\n+public class GetUnparseableExtensions {\n+\n+    \/\/ Cert has 3 badly encoded extensions:\n+    \/\/ 1. SubjectAlternativeNameExtension with a null RFC822Name\n+    \/\/ 2. IssuerAlternativeNameExtension with a null RFC822Name\n+    \/\/ 3. ExtendedKeyUsageExtension encoded as a Set instead of a Sequence\n+    private final static String CERT_WITH_UNPARSEABLE_EXTS = \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIIDDTCCAfWgAwIBAgIIc\/2fukmBqZgwDQYJKoZIhvcNAQELBQAwDTELMAkGA1UE\n+        AxMCQ0EwHhcNMjExMDI2MTgxNzU4WhcNMjIwMTI0MTgxNzU4WjANMQswCQYDVQQD\n+        EwJFMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKIIIsP6ghZ94hIl\n+        U3G+D11vASSP7JMmX6G6opGKel60dZ5So3Tdj0E6VHehwcxEdh94LEIxvOkS3Cdh\n+        hd1iiB4\/q2InvLuGzSVvWAwYNkB7GbR31pIst0GAFdH+z\/tVjjHcacBGwmysk8DN\n+        Rmxm66AyJxHA1U\/v64vx5kSGNoUAEcWm+OslxfdJ7nygnU+S6a\/06sRvifVn7q7c\n+        Kg4AIFE1+vWrcgYbApkPNjLiRGAr33TAb1y+nN1zW\/luEMEQIJBd+YJW9OrPGMUr\n+        SDSXfB06HscH1bTUfN2ngsxT2hy9eiCiDtagPIwYA0sVNjyUtfPsjAH1oxDPXzC5\n+        quJB5\/sCAwEAAaNxMG8wHQYDVR0OBBYEFCqWMQBki21cSqKIHp4rFitf6pQ2MAsG\n+        A1UdEQQEMAKBADALBgNVHRIEBDACgQAwHwYDVR0jBBgwFoAUJbvRN17hEohYsg1M\n+        icq1mMpIwoAwEwYDVR0lBAwxCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEB\n+        ABBqJ\/yYXD1xueB63GRY4ZotO6ukEkJiPZIwrr2vZW+GMws2b9gqNoD+dL9AeYCA\n+        Zb6RYbaNDY5OoJmEty9KbtON7Rt1LtCFuZbYKxrhW0dJgXLyNOgXr+x0g2btbvWV\n+        r8U1icwHapZM5IqDKLivzZNzwv52mrJDuzWqmlhAIlPLIU1QfNQ1oC8HpFkL71Bb\n+        sB\/4OIxxjRzf0AGmb7aeQNfxag2oKlOwqzum1FLt8BaVjylc0aUATPtkgothK8nK\n+        m5jXJmA4zA11ck0uJW39gDRuR0D1k4qm\/s\/5Iuhd6MRVDXEhVbJXuH2yzHcmbgRs\n+        paD\/he6C1JszWf7YrTsX3Fc=\n+        -----END CERTIFICATE-----\n+        \"\"\";\n+\n+    @FunctionalInterface\n+    public interface TestCase<T> {\n+        T test() throws Exception;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        X509Certificate cert =\n+                CertUtils.getCertFromString(CERT_WITH_UNPARSEABLE_EXTS);\n+        getExtension(() -> cert.getSubjectAlternativeNames());\n+        getExtension(() -> cert.getIssuerAlternativeNames());\n+        getExtension(() -> cert.getExtendedKeyUsage());\n+    }\n+\n+    private static void getExtension(TestCase<?> t) throws Exception {\n+        try {\n+            t.test();\n+            throw new Exception(\"Test FAILED\");\n+        } catch (CertificateParsingException cpe) {\n+            System.out.println(cpe.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/cert\/X509Certificate\/GetUnparseableExtensions.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}