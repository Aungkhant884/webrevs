{"files":[{"patch":"@@ -63,13 +63,0 @@\n-    public class HelloClient {\n-\n-        public void runClient(Remote stub) throws IOException {\n-            System.out.println(\"Inside HelloClient::runClient\");\n-            \/\/ \"obj\" is the identifier that we'll use to refer\n-            \/\/ to the remote object that implements the \"Hello\"\n-            \/\/ interface\n-            Hello obj = (Hello) stub;\n-            String message = obj.sayHello();\n-            System.out.println(message);\n-        }\n-    }\n-\n@@ -80,2 +67,2 @@\n-        HelloClient client = new HelloClient();\n-        client.runClient(stub);\n+        String msg = stub.sayHello();\n+        Asserts.assertEquals(\"Hello World!\", msg);\n@@ -107,1 +94,1 @@\n-                Exception exc = Asserts.assertThrownException(IllegalArgumentException.class,\n+                Exception exc = Asserts.assertThrows(IllegalArgumentException.class,\n@@ -116,1 +103,1 @@\n-                Exception thrown = Asserts.assertThrownException(IllegalArgumentException.class,\n+                Exception thrown = Asserts.assertThrows(IllegalArgumentException.class,\n@@ -127,1 +114,1 @@\n-                Asserts.assertThrownException(ConnectIOException.class,\n+                Asserts.assertThrows(ConnectIOException.class,\n@@ -135,1 +122,1 @@\n-                Asserts.assertThrownException(ConnectIOException.class,\n+                Asserts.assertThrows(ConnectIOException.class,\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.java","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -560,1 +560,6 @@\n-        void execute() throws Exception;\n+        void execute() throws Throwable;\n+    }\n+\n+\n+    public static <T extends Throwable> T assertThrows(Class<T> expected, TestMethod testMethod) {\n+        return assertThrows(expected, testMethod, \"An unexpected exception was thrown.\");\n@@ -573,0 +578,1 @@\n+     * @param msg A description of the assumption\n@@ -575,1 +581,1 @@\n-    public static Exception assertThrownException(Class<? extends Exception> expected, TestMethod testMethod) {\n+    public static <T extends Throwable> T assertThrows(Class<T> expected, TestMethod testMethod, String msg) {\n@@ -578,4 +584,3 @@\n-            fail(\"No exception was thrown. Expected: \" + expected.getName());\n-        } catch (Exception exc) {\n-            if (expected.isAssignableFrom(exc.getClass())) {\n-                return exc;\n+        } catch (Throwable exc) {\n+            if (expected.isInstance(exc)) {\n+                return (T) exc;\n@@ -583,2 +588,2 @@\n-                fail(\"An unexpected exception was thrown. Expected: \"\n-                        + expected.getName() + \" Got: \" + exc.getClass().getName());\n+                fail(Objects.toString(msg, \"An unexpected exception was thrown.\")\n+                        + \" Expected \" + expected.getName(), exc);\n@@ -587,2 +592,1 @@\n-        \/\/ fail() throws a RuntimeException so this is unreachable.\n-        return null;\n+        throw new RuntimeException(\"No exception was thrown. Expected: \" + expected.getName());\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}