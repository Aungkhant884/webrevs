{"files":[{"patch":"@@ -4268,0 +4268,20 @@\n+            \/\/ always non-critical\n+            setExt(result, new SubjectKeyIdentifierExtension(\n+                    new KeyIdentifier(pkey).getIdentifier()));\n+            if (akey != null && !pkey.equals(akey)) {\n+                if (aSubjectKeyIdExt == null) {\n+                    setExt(result, new AuthorityKeyIdentifierExtension(\n+                            new KeyIdentifier(akey), null, null));\n+                } else {\n+                    \/\/ To enforce compliance with RFC 5280 section 4.2.1.1: \"Where a key\n+                    \/\/ identifier has been previously established, the CA SHOULD use the\n+                    \/\/ previously established identifier.\"\n+                    \/\/ SubjectKeyIdentifierExtension in X509Certificate encapsulates its\n+                    \/\/ value with two levels of OCTET_STRING wrapper.\n+                    byte[] subjectKeyId1 = new DerValue(aSubjectKeyIdExt).getOctetString();\n+                    byte[] subjectKeyId2 = new DerValue(subjectKeyId1).getOctetString();\n+                    setExt(result, new AuthorityKeyIdentifierExtension(\n+                            new KeyIdentifier(subjectKeyId2), null, null));\n+                }\n+            }\n+\n@@ -4590,19 +4610,0 @@\n-            \/\/ always non-critical\n-            setExt(result, new SubjectKeyIdentifierExtension(\n-                    new KeyIdentifier(pkey).getIdentifier()));\n-            if (akey != null && !pkey.equals(akey)) {\n-                if (aSubjectKeyIdExt == null) {\n-                    setExt(result, new AuthorityKeyIdentifierExtension(\n-                            new KeyIdentifier(akey), null, null));\n-                } else {\n-                    \/\/ To enforce compliance with RFC 5280 section 4.2.1.1: \"Where a key\n-                    \/\/ identifier has been previously established, the CA SHOULD use the\n-                    \/\/ previously established identifier.\"\n-                    \/\/ SubjectKeyIdentifierExtension in X509Certificate encapsulates its\n-                    \/\/ value with two levels of OCTET_STRING wrapper.\n-                    byte[] subjectKeyId1 = new DerValue(aSubjectKeyIdExt).getOctetString();\n-                    byte[] subjectKeyId2 = new DerValue(subjectKeyId1).getOctetString();\n-                    setExt(result, new AuthorityKeyIdentifierExtension(\n-                            new KeyIdentifier(subjectKeyId2), null, null));\n-                }\n-            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257497\n+ * @summary Check if issuer's SKID is used to establish the AKID for the subject cert\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class CheckCertAKID {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        System.out.println(\"Generating a root cert with SubjectKeyIdentifier extension\");\n+        kt(\"-genkeypair -keyalg rsa -alias ca -dname CN=CA -ext bc:c \" +\n+                \"-ext 2.5.29.14=04:14:00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19\",\n+                \"ks\");\n+\n+        kt(\"-exportcert -alias ca -rfc -file root.cert\", \"ks\");\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-printcert -file root.cert\")\n+                .shouldNotContain(\"AuthorityKeyIdentifier\")\n+                .shouldContain(\"SubjectKeyIdentifier\")\n+                .shouldContain(\"0000: 00 01 02 03 04 05 06 07   08 09 10 11 12 13 14 15\")\n+                .shouldContain(\"0010: 16 17 18 19\")\n+                .shouldHaveExitValue(0);\n+\n+        System.out.println(\"Generating an end entity cert using issuer CA's SKID as its AKID\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        kt(\"-certreq -alias e1 -file tmp.req\", \"ks\");\n+        kt(\"-gencert -alias ca -ext san=dns:e1 -infile tmp.req -outfile tmp.cert \",\n+                \"ks\");\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-printcert -file tmp.cert\")\n+                .shouldContain(\"AuthorityKeyIdentifier\")\n+                .shouldContain(\"0000: 00 01 02 03 04 05 06 07   08 09 10 11 12 13 14 15\")\n+                .shouldContain(\"0010: 16 17 18 19\")\n+                .shouldHaveExitValue(0);\n+\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/CheckCertAKID.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}