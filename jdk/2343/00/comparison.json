{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1479,0 +1479,4 @@\n+\n+        byte[] signerSubjectKeyIdExt = ((X509Certificate)signerCert).getExtensionValue(\n+                KnownOIDs.SubjectKeyID.value());\n+\n@@ -1484,1 +1488,2 @@\n-                signerCert.getPublicKey());\n+                signerCert.getPublicKey(),\n+                signerSubjectKeyIdExt);\n@@ -1578,1 +1583,1 @@\n-        CertificateExtensions ext = createV3Extensions(null, null, v3ext, cert.getPublicKey(), null);\n+        CertificateExtensions ext = createV3Extensions(null, null, v3ext, cert.getPublicKey(), null, null);\n@@ -1904,0 +1909,1 @@\n+                null,\n@@ -2966,0 +2972,1 @@\n+                null,\n@@ -4227,0 +4234,1 @@\n+     * @param aSubjectKeyIdExt the subject key identifier extension for the authority (issuer)\n@@ -4234,1 +4242,2 @@\n-            PublicKey akey) throws Exception {\n+            PublicKey akey,\n+            byte[] aSubjectKeyIdExt) throws Exception {\n@@ -4585,2 +4594,14 @@\n-                setExt(result, new AuthorityKeyIdentifierExtension(\n-                                new KeyIdentifier(akey), null, null));\n+                if (aSubjectKeyIdExt == null) {\n+                    setExt(result, new AuthorityKeyIdentifierExtension(\n+                            new KeyIdentifier(akey), null, null));\n+                } else {\n+                    \/\/ To enforce compliance with RFC 5280 section 4.2.1.1: \"Where a key\n+                    \/\/ identifier has been previously established, the CA SHOULD use the\n+                    \/\/ previously established identifier.\"\n+                    \/\/ SubjectKeyIdentifierExtension in X509Certificate encapsulates its\n+                    \/\/ value with two levels of OCTET_STRING wrapper.\n+                    byte[] subjectKeyId1 = new DerValue(aSubjectKeyIdExt).getOctetString();\n+                    byte[] subjectKeyId2 = new DerValue(subjectKeyId1).getOctetString();\n+                    setExt(result, new AuthorityKeyIdentifierExtension(\n+                            new KeyIdentifier(subjectKeyId2), null, null));\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8231950\n+ * @bug 8231950 8257497\n@@ -157,1 +157,2 @@\n-                PublicKey.class);\n+                PublicKey.class,\n+                byte[].class);\n@@ -200,1 +201,1 @@\n-                            null, null, List.of(option), pk, null);\n+                            null, null, List.of(option), pk, null, null);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ExtOptionCamelCase.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}