{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1479,0 +1479,27 @@\n+\n+        PublicKey subjectPubKey = req.getSubjectPublicKeyInfo();\n+        PublicKey issuerPubKey = signerCert.getPublicKey();\n+\n+        KeyIdentifier signerSubjectKeyId;\n+        if (subjectPubKey.equals(issuerPubKey)) {\n+            \/\/ No AKID for self-signed cert\n+            signerSubjectKeyId = null;\n+        } else {\n+            X509CertImpl certImpl;\n+            if (signerCert instanceof X509CertImpl) {\n+                certImpl = (X509CertImpl) signerCert;\n+            } else {\n+                certImpl = new X509CertImpl(signerCert.getEncoded());\n+            }\n+\n+            \/\/ To enforce compliance with RFC 5280 section 4.2.1.1: \"Where a key\n+            \/\/ identifier has been previously established, the CA SHOULD use the\n+            \/\/ previously established identifier.\"\n+            \/\/ Use issuer's SKID to establish the AKID in createV3Extensions() method.\n+            signerSubjectKeyId = certImpl.getSubjectKeyId();\n+\n+            if (signerSubjectKeyId == null) {\n+                signerSubjectKeyId = new KeyIdentifier(issuerPubKey);\n+            }\n+        }\n+\n@@ -1483,2 +1510,2 @@\n-                req.getSubjectPublicKeyInfo(),\n-                signerCert.getPublicKey());\n+                subjectPubKey,\n+                signerSubjectKeyId);\n@@ -4227,0 +4254,1 @@\n+     * @param aSubjectKeyId the subject key identifier for the authority (issuer)\n@@ -4234,1 +4262,1 @@\n-            PublicKey akey) throws Exception {\n+            KeyIdentifier aSubjectKeyId) throws Exception {\n@@ -4259,0 +4287,8 @@\n+            \/\/ always non-critical\n+            setExt(result, new SubjectKeyIdentifierExtension(\n+                    new KeyIdentifier(pkey).getIdentifier()));\n+            if (aSubjectKeyId != null) {\n+                setExt(result, new AuthorityKeyIdentifierExtension(aSubjectKeyId,\n+                        null, null));\n+            }\n+\n@@ -4581,7 +4617,0 @@\n-            \/\/ always non-critical\n-            setExt(result, new SubjectKeyIdentifierExtension(\n-                    new KeyIdentifier(pkey).getIdentifier()));\n-            if (akey != null && !pkey.equals(akey)) {\n-                setExt(result, new AuthorityKeyIdentifierExtension(\n-                                new KeyIdentifier(akey), null, null));\n-            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":40,"deletions":11,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257497\n+ * @summary Check if issuer's SKID is used to establish the AKID for the subject cert\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.*;\n+import java.security.KeyStore;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import sun.security.util.DerValue;\n+import sun.security.util.KnownOIDs;\n+import static sun.security.util.KnownOIDs.*;\n+\n+public class CheckCertAKID {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        System.out.println(\"Generating a root cert with SubjectKeyIdentifier extension\");\n+        kt(\"-genkeypair -keyalg rsa -alias ca -dname CN=CA -ext bc:c \" +\n+                \"-ext 2.5.29.14=04:14:00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19\",\n+                \"ks\");\n+\n+        kt(\"-exportcert -alias ca -rfc -file root.cert\", \"ks\");\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-printcert -file root.cert\")\n+                .shouldNotContain(\"AuthorityKeyIdentifier\")\n+                .shouldContain(\"SubjectKeyIdentifier\")\n+                .shouldContain(\"0000: 00 01 02 03 04 05 06 07   08 09 10 11 12 13 14 15\")\n+                .shouldContain(\"0010: 16 17 18 19\")\n+                .shouldHaveExitValue(0);\n+\n+        System.out.println(\"Generating an end entity cert using issuer CA's SKID as its AKID\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        kt(\"-certreq -alias e1 -file tmp.req\", \"ks\");\n+        kt(\"-gencert -alias ca -ext san=dns:e1 -infile tmp.req -outfile tmp.cert \",\n+                \"ks\");\n+        kt(\"-importcert -alias e1 -file tmp.cert\", \"ks\");\n+\n+        byte[] expectedId = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n+                0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};\n+\n+        KeyStore kstore = KeyStore.getInstance(new File(\"ks\"),\n+                \"changeit\".toCharArray());\n+        X509Certificate cert = (X509Certificate)kstore.getCertificate(\"e1\");\n+        byte[] authorityKeyIdExt = cert.getExtensionValue(\n+                KnownOIDs.AuthorityKeyID.value());\n+\n+        byte[] authorityKeyId = null;\n+        if (authorityKeyIdExt == null) {\n+            System.out.println(\"Failed to get AKID extension from the cert\");\n+            System.exit(1);\n+        } else {\n+            try {\n+                authorityKeyId = new DerValue(authorityKeyIdExt).getOctetString();\n+            } catch (IOException e) {\n+                System.out.println(\"Failed to get AKID encoded OctetString in the cert\");\n+                System.exit(1);\n+            }\n+        }\n+\n+        authorityKeyId = Arrays.copyOfRange(authorityKeyId, 4, authorityKeyId.length);\n+        if (!Arrays.equals(authorityKeyId, expectedId)) {\n+            System.out.println(\"Failed due to AKID mismatch\");\n+            System.exit(1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/CheckCertAKID.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8231950\n+ * @bug 8231950 8257497\n@@ -41,0 +41,1 @@\n+import sun.security.x509.KeyIdentifier;\n@@ -157,1 +158,1 @@\n-                PublicKey.class);\n+                KeyIdentifier.class);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ExtOptionCamelCase.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}