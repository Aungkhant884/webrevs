{"files":[{"patch":"@@ -215,7 +215,7 @@\n- * @apiNote Care should be exercised if {@code BigDecimal} objects\n- * are used as keys in a {@link java.util.SortedMap SortedMap} or\n- * elements in a {@link java.util.SortedSet SortedSet} since\n- * {@code BigDecimal}'s <i>natural ordering<\/i> is <em>inconsistent\n- * with equals<\/em>.  See {@link Comparable}, {@link\n- * java.util.SortedMap} or {@link java.util.SortedSet} for more\n- * information.\n+ * @apiNote Care should be exercised if {@code BigDecimal} objects are\n+ * used as keys in a {@link java.util.SortedMap SortedMap} or elements\n+ * in a {@link java.util.SortedSet SortedSet} since {@code\n+ * BigDecimal}'s <i>{@linkplain compareTo(BigDecimal) natural\n+ * ordering}<\/i> is <em>inconsistent with equals<\/em>.  See {@link\n+ * Comparable}, {@link java.util.SortedMap} or {@link\n+ * java.util.SortedSet} for more information.\n@@ -3144,1 +3144,12 @@\n-     * method.\n+     * method since the former has [{@code BigInteger}, {@code scale}]\n+     * components equal to [20, 1] while the latter has components\n+     * equal to [200, 2].\n+     *\n+     * @apiNote\n+     * One example that shows how 2.0 and 2.00 are <em>not<\/em>\n+     * substitutable for each other under some arithmetic operations\n+     * are the two expressions:<br>\n+     * {@code new BigDecimal(\"2.0\" ).divide(BigDecimal.valueOf(3),\n+     * HALF_UP)} which evaluates to 0.7 and <br>\n+     * {@code new BigDecimal(\"2.00\").divide(BigDecimal.valueOf(3),\n+     * HALF_UP)} which evaluates to 0.67.\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"}]}