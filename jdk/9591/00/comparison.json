{"files":[{"patch":"@@ -713,0 +713,6 @@\n+void CompilationResourceObj::print() const       { print_on(tty); }\n+\n+void CompilationResourceObj::print_on(outputStream* st) const {\n+  st->print_cr(\"CompilationResourceObj(\" INTPTR_FORMAT \")\", p2i(this));\n+}\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-class CompilationResourceObj ALLOCATION_SUPER_CLASS_SPEC {\n+class CompilationResourceObj {\n@@ -336,0 +336,6 @@\n+\n+#ifndef PRODUCT\n+  \/\/ Printing support\n+  void print() const;\n+  virtual void print_on(outputStream* st) const;\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2523,1 +2523,1 @@\n-      hrrs->print();\n+      tty->print_cr(\"hrrs \" INTPTR_FORMAT, p2i(hrrs));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,2 +242,1 @@\n-void AllocatedObj::print() const       { print_on(tty); }\n-void AllocatedObj::print_value() const { print_value_on(tty); }\n+void ResourceObj::print() const       { print_on(tty); }\n@@ -245,6 +244,2 @@\n-void AllocatedObj::print_on(outputStream* st) const {\n-  st->print_cr(\"AllocatedObj(\" INTPTR_FORMAT \")\", p2i(this));\n-}\n-\n-void AllocatedObj::print_value_on(outputStream* st) const {\n-  st->print(\"AllocatedObj(\" INTPTR_FORMAT \")\", p2i(this));\n+void ResourceObj::print_on(outputStream* st) const {\n+  st->print_cr(\"ResourceObj(\" INTPTR_FORMAT \")\", p2i(this));\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -100,18 +100,0 @@\n-\/\/ In non product mode we introduce a super class for all allocation classes\n-\/\/ that supports printing.\n-\/\/ We avoid the superclass in product mode to save space.\n-\n-#ifdef PRODUCT\n-#define ALLOCATION_SUPER_CLASS_SPEC\n-#else\n-#define ALLOCATION_SUPER_CLASS_SPEC : public AllocatedObj\n-class AllocatedObj {\n- public:\n-  \/\/ Printing support\n-  void print() const;\n-  void print_value() const;\n-\n-  virtual void print_on(outputStream* st) const;\n-  virtual void print_value_on(outputStream* st) const;\n-};\n-#endif\n@@ -195,1 +177,1 @@\n-template <MEMFLAGS F> class CHeapObj ALLOCATION_SUPER_CLASS_SPEC {\n+template <MEMFLAGS F> class CHeapObj {\n@@ -240,1 +222,1 @@\n-class StackObj ALLOCATION_SUPER_CLASS_SPEC {\n+class StackObj {\n@@ -389,1 +371,1 @@\n-class ResourceObj ALLOCATION_SUPER_CLASS_SPEC {\n+class ResourceObj {\n@@ -441,0 +423,6 @@\n+\n+#ifndef PRODUCT\n+  \/\/ Printing support\n+  void print() const;\n+  virtual void print_on(outputStream* st) const;\n+#endif \/\/ PRODUCT\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-      f.print_value_on(&ls);\n+      f.print_on(&ls);\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}