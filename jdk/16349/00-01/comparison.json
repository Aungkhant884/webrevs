{"files":[{"patch":"@@ -46,1 +46,4 @@\n-                            init();\n+                            if (!init()) {\n+                                \/\/ library failed to initialize. Do not silently mark as unsupported\n+                                throw new ExceptionInInitializerError(\"Fallback library failed to initialize\");\n+                            }\n@@ -204,1 +207,1 @@\n-    private static native void init();\n+    private static native boolean init();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,6 @@\n-JNIEXPORT void JNICALL\n+#define CHECK_NULL(expr) \\\n+  if (expr == NULL) { \\\n+    return JNI_FALSE; \\\n+  }\n+\n+JNIEXPORT jboolean JNICALL\n@@ -47,4 +52,3 @@\n-  (*env)->GetJavaVM(env, &VM);\n-  jclass LibFallback_class_local = (*env)->FindClass(env, \"jdk\/internal\/foreign\/abi\/fallback\/LibFallback\");\n-  if (LibFallback_class_local == NULL) {\n-    return; \/\/ let caller deal with exception\n+  jint result = (*env)->GetJavaVM(env, &VM);\n+  if (result != 0) {\n+    return JNI_FALSE;\n@@ -52,0 +56,4 @@\n+\n+  jclass LibFallback_class_local = (*env)->FindClass(env, \"jdk\/internal\/foreign\/abi\/fallback\/LibFallback\");\n+  CHECK_NULL(LibFallback_class_local)\n+\n@@ -53,0 +61,2 @@\n+  CHECK_NULL(LibFallback_class)\n+\n@@ -55,0 +65,3 @@\n+  CHECK_NULL(LibFallback_doUpcall_ID)\n+\n+  return JNI_TRUE;\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"}]}