{"files":[{"patch":"@@ -133,3 +133,1 @@\n-  intptr_t* vfp = f.fp();\n-  intptr_t* hfp = hf.fp();\n-  assert(hfp == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n+  assert(hf.fp() == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n@@ -283,2 +281,0 @@\n-  intptr_t* vfp = f.fp();\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-  void save_interpreter_state(Register scratch1, Register scratch2);\n+  void save_interpreter_state(Register scratch);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1242,1 +1242,1 @@\n-  save_interpreter_state(Rscratch2, Rscratch1);\n+  save_interpreter_state(Rscratch2);\n@@ -2192,1 +2192,1 @@\n-  save_interpreter_state(Rscratch1, Rscratch2);\n+  save_interpreter_state(Rtmp);\n@@ -2200,1 +2200,1 @@\n-  save_interpreter_state(R11_scratch1, R12_scratch2);\n+  save_interpreter_state(R11_scratch1);\n@@ -2243,9 +2243,8 @@\n-void InterpreterMacroAssembler::save_interpreter_state(Register scratch1, Register scratch2) {\n-  assert_different_registers(scratch1, scratch2);\n-  ld(scratch1, 0, R1_SP);\n-  std(R15_esp, _ijava_state_neg(esp), scratch1);\n-  std(R14_bcp, _ijava_state_neg(bcp), scratch1);\n-  subf(scratch2, scratch1, R26_monitor);\n-  sradi(scratch2, scratch2, Interpreter::logStackElementSize);\n-  std(scratch2, _ijava_state_neg(monitors), scratch1);\n-  if (ProfileInterpreter) { std(R28_mdx, _ijava_state_neg(mdx), scratch1); }\n+void InterpreterMacroAssembler::save_interpreter_state(Register scratch) {\n+  ld(scratch, 0, R1_SP);\n+  std(R15_esp, _ijava_state_neg(esp), scratch);\n+  std(R14_bcp, _ijava_state_neg(bcp), scratch);\n+  subf(R0, scratch, R26_monitor);\n+  sradi(R0, R0, Interpreter::logStackElementSize);\n+  std(R0, _ijava_state_neg(monitors), scratch);\n+  if (ProfileInterpreter) { std(R28_mdx, _ijava_state_neg(mdx), scratch); }\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -131,3 +131,1 @@\n-  intptr_t* vfp = f.fp();\n-  intptr_t* hfp = hf.fp();\n-  assert(hfp == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n+  assert(hf.fp() == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n@@ -285,2 +283,0 @@\n-  intptr_t* vfp = f.fp();\n-\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-    shadd(c_rarg1, c_rarg1, fp,  c_rarg1, LogBytesPerWord);\n+    shadd(c_rarg1, c_rarg1, fp, c_rarg1, LogBytesPerWord);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,3 +130,1 @@\n-  intptr_t* vfp = f.fp();\n-  intptr_t* hfp = hf.fp();\n-  assert(hfp == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n+  assert(hf.fp() == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n@@ -272,2 +270,0 @@\n-  intptr_t* vfp = f.fp();\n-\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}