{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -54,12 +55,13 @@\n-    public static String newB =\n-        \"class B {\" +\n-        \"    public static int operate(int a, int b, MathOperation mathOperation) {\" +\n-        \"        return mathOperation.operation(a, b);\" +\n-        \"    }\" +\n-        \"    static int test_math(String p) {\" +\n-        \"        MathOperation addition = (int a, int b) -> a + b;\" +\n-        \"        System.out.println(p + \\\" from class B's test_math method\\\");\" +\n-        \"        MathOperation subtraction = (int a, int b) -> a - b;\" +\n-        \"        return operate(10, 5, subtraction);\" +\n-        \"    }\" +\n-        \"}\";\n+    public static String newB = \"\"\"\n+        class B {\n+            public static int operate(int a, int b, MathOperation mathOperation) {\n+                return mathOperation.operation(a, b);\n+            }\n+            static int test_math(String p) {\n+                MathOperation addition = (int a, int b) -> a + b;\n+                System.out.println(p + \" from class B's test_math method\");\n+                MathOperation subtraction = (int a, int b) -> a - b;\n+                return operate(10, 5, subtraction);\n+            }\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineAddLambdaExpression.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -49,9 +50,11 @@\n-    public static String newB =\n-                \"class RedefineDoubleDelete_B {\" +\n-                \"   int count1 = 0;\" +\n-                \"}\";\n-\n-    public static String newerB =\n-                \"class RedefineDoubleDelete_B { \" +\n-                \"   int faa() { System.out.println(\\\"baa\\\"); return 2; }\" +\n-                \"}\";\n+    public static String newB = \"\"\"\n+                class RedefineDoubleDelete_B {\n+                   int count1 = 0;\n+                }\n+                \"\"\";\n+\n+    public static String newerB = \"\"\"\n+                class RedefineDoubleDelete_B {\n+                   int faa() { System.out.println(\"baa\"); return 2; }\n+                }\n+                \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineDoubleDelete.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -57,6 +58,7 @@\n-    public static String newB =\n-                \"class RedefineFinalizer_B {\" +\n-                \"   protected void finalize() { \" +\n-                \"       System.out.println(\\\"Finalizer called\\\");\" +\n-                \"   }\" +\n-                \"}\";\n+    public static String newB = \"\"\"\n+                class RedefineFinalizer_B {\n+                    protected void finalize() {\n+                        System.out.println(\"Finalizer called\");\n+                    }\n+                }\n+                \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineFinalizer.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -56,6 +57,7 @@\n-    static String newC =\n-        \"class RedefineInterfaceCall_C implements I2 { \" +\n-        \"  public int test(I2 i) { \" +\n-        \"    return i.m(); \" +\n-        \"  } \" +\n-        \"} \";\n+    static String newC = \"\"\"\n+        class RedefineInterfaceCall_C implements I2 {\n+            public int test(I2 i) {\n+                return i.m();\n+            }\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineInterfaceCall.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -56,11 +57,12 @@\n-    public static String redefinedPrivateMethod =\n-        \"interface RedefineInterfaceMethods_B {\" +\n-        \"    int ORIGINAL_RETURN = 1;\" +\n-        \"    int NEW_RETURN = 2;\" +\n-        \"    private int privateMethod() {\" +\n-        \"        return NEW_RETURN;\" +\n-        \"    }\" +\n-        \"    public default int defaultMethod() {\" +\n-        \"       return privateMethod();\" +\n-        \"    }\" +\n-        \"}\";\n+    public static String redefinedPrivateMethod = \"\"\"\n+        interface RedefineInterfaceMethods_B {\n+            int ORIGINAL_RETURN = 1;\n+            int NEW_RETURN = 2;\n+            private int privateMethod() {\n+                return NEW_RETURN;\n+            }\n+            public default int defaultMethod() {\n+                return privateMethod();\n+            }\n+        }\n+        \"\"\";\n@@ -68,11 +70,12 @@\n-    public static String redefinedDefaultMethod =\n-        \"interface RedefineInterfaceMethods_B {\" +\n-        \"    int ORIGINAL_RETURN = 1;\" +\n-        \"    int NEW_RETURN = 2;\" +\n-        \"    private int privateMethod() {\" +\n-        \"        return ORIGINAL_RETURN;\" +\n-        \"    }\" +\n-        \"    public default int defaultMethod() {\" +\n-        \"       return RedefineInterfaceMethods.RET;\" +\n-        \"    }\" +\n-        \"}\";\n+    public static String redefinedDefaultMethod = \"\"\"\n+        interface RedefineInterfaceMethods_B {\n+            int ORIGINAL_RETURN = 1;\n+            int NEW_RETURN = 2;\n+            private int privateMethod() {\n+                return ORIGINAL_RETURN;\n+            }\n+            public default int defaultMethod() {\n+                return RedefineInterfaceMethods.RET;\n+            }\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineInterfaceMethods.java","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,3 +68,4 @@\n-    public static String newB =\n-                \"class RedefinePreviousVersions_B {\" +\n-                \"}\";\n+    public static String newB = \"\"\"\n+                class RedefinePreviousVersions_B {\n+                }\n+                \"\"\";\n@@ -72,7 +73,8 @@\n-    public static String newRunning =\n-        \"class RedefinePreviousVersions_Running {\" +\n-        \"    public static volatile boolean stop = true;\" +\n-        \"    public static volatile boolean running = true;\" +\n-        \"    static void localSleep() { }\" +\n-        \"    public static void infinite() { }\" +\n-        \"}\";\n+    public static String newRunning = \"\"\"\n+        class RedefinePreviousVersions_Running {\n+            public static volatile boolean stop = true;\n+            public static volatile boolean running = true;\n+            static void localSleep() { }\n+            public static void infinite() { }\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefinePreviousVersions.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -62,18 +63,19 @@\n-    public static String newB =\n-                \"class RedefineRunningMethods_B {\" +\n-                \"   static int count1 = 0;\" +\n-                \"   static int count2 = 0;\" +\n-                \"   public static volatile boolean stop = false;\" +\n-                \"  static void localSleep() { \" +\n-                \"    try{ \" +\n-                \"      Thread.currentThread().sleep(10);\" +\n-                \"    } catch(InterruptedException ie) { \" +\n-                \"    } \" +\n-                \" } \" +\n-                \"   public static void infinite() { \" +\n-                \"       System.out.println(\\\"infinite called\\\");\" +\n-                \"   }\" +\n-                \"   public static void infinite_emcp() { \" +\n-                \"       while (!stop) { count2++; localSleep(); }\" +\n-                \"   }\" +\n-                \"}\";\n+    public static String newB = \"\"\"\n+                class RedefineRunningMethods_B {\n+                    static int count1 = 0;\n+                    static int count2 = 0;\n+                    public static volatile boolean stop = false;\n+                    static void localSleep() {\n+                        try {\n+                            Thread.currentThread().sleep(10);\n+                        } catch(InterruptedException ie) {\n+                        }\n+                    }\n+                    public static void infinite() {\n+                        System.out.println(\"infinite called\");\n+                    }\n+                    public static void infinite_emcp() {\n+                        while (!stop) { count2++; localSleep(); }\n+                    }\n+                }\n+                \"\"\";\n@@ -81,16 +83,17 @@\n-    public static String evenNewerB =\n-                \"class RedefineRunningMethods_B {\" +\n-                \"   static int count1 = 0;\" +\n-                \"   static int count2 = 0;\" +\n-                \"   public static volatile boolean stop = false;\" +\n-                \"  static void localSleep() { \" +\n-                \"    try{ \" +\n-                \"      Thread.currentThread().sleep(1);\" +\n-                \"    } catch(InterruptedException ie) { \" +\n-                \"    } \" +\n-                \" } \" +\n-                \"   public static void infinite() { }\" +\n-                \"   public static void infinite_emcp() { \" +\n-                \"       System.out.println(\\\"infinite_emcp now obsolete called\\\");\" +\n-                \"   }\" +\n-                \"}\";\n+    public static String evenNewerB = \"\"\"\n+                class RedefineRunningMethods_B {\n+                    static int count1 = 0;\n+                    static int count2 = 0;\n+                    public static volatile boolean stop = false;\n+                    static void localSleep() {\n+                        try {\n+                            Thread.currentThread().sleep(1);\n+                        } catch(InterruptedException ie) {\n+                        }\n+                    }\n+                    public static void infinite() { }\n+                    public static void infinite_emcp() {\n+                        System.out.println(\"infinite_emcp now obsolete called\");\n+                    }\n+                }\n+                \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethods.java","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -84,18 +85,19 @@\n-    public static String newB =\n-                \"class RedefineRunningMethodsWithBacktrace_B {\" +\n-                \"   static int count1 = 0;\" +\n-                \"   static int count2 = 0;\" +\n-                \"   public static volatile boolean stop = false;\" +\n-                \"  static void localSleep() { \" +\n-                \"    try{ \" +\n-                \"      Thread.sleep(10);\" +\n-                \"    } catch(InterruptedException ie) { \" +\n-                \"    } \" +\n-                \" } \" +\n-                \"   public static void infinite() { \" +\n-                \"       System.out.println(\\\"infinite called\\\");\" +\n-                \"   }\" +\n-                \"   public static void throwable() { \" +\n-                \"       throw new RuntimeException(\\\"throwable called\\\");\" +\n-                \"   }\" +\n-                \"}\";\n+    public static String newB = \"\"\"\n+                class RedefineRunningMethodsWithBacktrace_B {\n+                    static int count1 = 0;\n+                    static int count2 = 0;\n+                    public static volatile boolean stop = false;\n+                    static void localSleep() {\n+                        try {\n+                            Thread.sleep(10);\n+                        } catch(InterruptedException ie) {\n+                        }\n+                    }\n+                    public static void infinite() {\n+                        System.out.println(\"infinite called\");\n+                    }\n+                    public static void throwable() {\n+                        throw new RuntimeException(\"throwable called\");\n+                    }\n+                }\n+                \"\"\";\n@@ -103,16 +105,17 @@\n-    public static String evenNewerB =\n-                \"class RedefineRunningMethodsWithBacktrace_B {\" +\n-                \"   static int count1 = 0;\" +\n-                \"   static int count2 = 0;\" +\n-                \"   public static volatile boolean stop = false;\" +\n-                \"  static void localSleep() { \" +\n-                \"    try{ \" +\n-                \"      Thread.sleep(1);\" +\n-                \"    } catch(InterruptedException ie) { \" +\n-                \"    } \" +\n-                \" } \" +\n-                \"   public static void infinite() { }\" +\n-                \"   public static void throwable() { \" +\n-                \"       throw new RuntimeException(\\\"throwable called\\\");\" +\n-                \"   }\" +\n-                \"}\";\n+    public static String evenNewerB = \"\"\"\n+                class RedefineRunningMethodsWithBacktrace_B {\n+                    static int count1 = 0;\n+                    static int count2 = 0;\n+                    public static volatile boolean stop = false;\n+                    static void localSleep() {\n+                        try {\n+                            Thread.sleep(1);\n+                        } catch(InterruptedException ie) {\n+                        }\n+                    }\n+                    public static void infinite() {}\n+                    public static void throwable() {\n+                        throw new RuntimeException(\"throwable called\");\n+                    }\n+                }\n+                \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethodsWithBacktrace.java","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -56,10 +57,11 @@\n-    public static String newB =\n-        \"class B {\" +\n-        \"    public static int operate(int a, int b, MathOperation mathOperation) {\" +\n-        \"        return mathOperation.operation(a, b);\" +\n-        \"    }\" +\n-        \"    static int test_math(String p) {\" +\n-        \"        MathOperation subtraction = (int a, int b) -> a - b;\" +\n-        \"        return operate(10, 5, subtraction);\" +\n-        \"    }\" +\n-        \"}\";\n+    public static String newB = \"\"\"\n+        class B {\n+            public static int operate(int a, int b, MathOperation mathOperation) {\n+                return mathOperation.operation(a, b);\n+            }\n+            static int test_math(String p) {\n+                MathOperation subtraction = (int a, int b) -> a - b;\n+                return operate(10, 5, subtraction);\n+            }\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSubtractLambdaExpression.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.lib.compiler.InMemoryJavaCompiler\n@@ -46,4 +47,6 @@\n-    static String newClass =\n-        \"public class RedefineCondy { \" +\n-        \"public RedefineCondy(java.lang.invoke.MethodHandles.Lookup l, java.lang.String s, java.lang.Class c) { } \" +\n-    \"public static void main(String argv[]) { } } \";\n+    static String newClass = \"\"\"\n+        public class RedefineCondy {\n+            public RedefineCondy(java.lang.invoke.MethodHandles.Lookup l, java.lang.String s, java.lang.Class c) {}\n+            public static void main(String argv[]) {}\n+        }\n+        \"\"\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestRedefineCondy.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}