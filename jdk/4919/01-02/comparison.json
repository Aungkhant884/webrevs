{"files":[{"patch":"@@ -188,0 +188,2 @@\n+  assert(t1 == r10 && t2 == r11, \"must be\");\n+\n@@ -194,5 +196,0 @@\n-  RegSet savedRegs;\n-  if (t1 != r10 || t2 != r11)  savedRegs = RegSet::of(r10, r11);\n-\n-  push(savedRegs, sp);\n-\n@@ -201,5 +198,3 @@\n-  lea(r10, Address(obj, hdr_size_in_bytes));\n-  lsr(r11, rscratch1, LogBytesPerWord);\n-  zero_words(r10, r11);\n-\n-  pop(savedRegs, sp);\n+  lea(t1, Address(obj, hdr_size_in_bytes));\n+  lsr(t2, rscratch1, LogBytesPerWord);\n+  zero_words(t1, t2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -659,3 +659,3 @@\n-          Register obj_size = r2;\n-          Register t1       = r19;\n-          Register t2       = r4;\n+          Register obj_size = r19;\n+          Register t1       = r10;\n+          Register t2       = r11;\n@@ -700,1 +700,1 @@\n-          __ ldp(r19, zr, Address(__ post(sp, 2 * wordSize)));\n+          __ ldp(t1, zr, Address(__ post(sp, 2 * wordSize)));\n@@ -772,3 +772,3 @@\n-          Register arr_size = r4;\n-          Register t1       = r2;\n-          Register t2       = r5;\n+          Register arr_size = r5;\n+          Register t1       = r10;\n+          Register t2       = r11;\n@@ -804,1 +804,1 @@\n-          __ initialize_body(t1, arr_size, 0, t2, noreg);\n+          __ initialize_body(t1, arr_size, 0, t1, t2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4634,1 +4634,8 @@\n-    if (StubRoutines::aarch64::complete()) {\n+    \/\/ Make sure this is a C2 compilation. C1 allocates space only for\n+    \/\/ trampoline stubs generated by Call LIR ops, and in any case it\n+    \/\/ makes sense for a C1 compilation task to proceed as quickly as\n+    \/\/ possible.\n+    CompileTask* task;\n+    if (StubRoutines::aarch64::complete()\n+        && (task = ciEnv::current()->task())\n+        && is_c2_compile(task->comp_level())) {\n@@ -4638,1 +4645,1 @@\n-        postcond(pc() == badAddress);\n+        assert(false, \"failed to allocate space for trampoline\");\n@@ -4642,1 +4649,1 @@\n-      bl(zero_blocks);\n+      far_call(zero_blocks);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}