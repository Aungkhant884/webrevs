[{"commit":{"message":"Address comments and align AD file code"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"}],"sha":"14735a2de837a5c4ff7116f5aba0ab24a0692e7a"},{"commit":{"message":"Merge branch 'master' into indexvector"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"7e24eeb3e56ad110b68d546b224fbdffa985ebdd"},{"commit":{"message":"Fix cut-and-paste error"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"}],"sha":"2fdb3e0cfa8e84be2db9ae71454271cb59e3d3e6"},{"commit":{"message":"Merge branch 'master' into indexvector"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"bc8a4d8b45bb716aa847b3f35cf62e94a196ac75"},{"commit":{"message":"8280510: AArch64: Vectorize operations with loop induction variable\n\nAArch64 has SVE instruction of populating incrementing indices into an\nSVE vector register. With this we can vectorize some operations in loop\nwith the induction variable operand, such as below.\n\n  for (int i = 0; i < count; i++) {\n    b[i] = a[i] * i;\n  }\n\nThis patch enables the vectorization of operations with loop induction\nvariable by extending current scope of C2 superword vectorizable packs.\nBefore this patch, any scalar input node in a vectorizable pack must be\nan out-of-loop invariant. This patch takes the induction variable input\nas consideration. It allows the input to be the iv phi node or phi plus\nits index offset, and creates a PopulateIndexNode to generate a vector\nfilled with incrementing indices. On AArch64 SVE, final generated code\nfor above loop expression is like below.\n\n  add     x12, x16, x10\n  add     x12, x12, #0x10\n  ld1w    {z16.s}, p7\/z, [x12]\n  index   z17.s, w1, #1\n  mul     z17.s, p7\/m, z17.s, z16.s\n  add     x10, x17, x10\n  add     x10, x10, #0x10\n  st1w    {z17.s}, p7, [x10]\n\nAs there is no populating index instruction on AArch64 NEON or other\nplatforms like x86, a function named is_populate_index_supported() is\ncreated in the VectorNode class for the backend support check.\n\nJtreg hotspot::hotspot_all_no_apps, jdk::tier1~3 and langtools::tier1\nare tested and no issue is found. Hotspot jtreg has existing tests in\ncompiler\/c2\/cr7192963\/Test*Vect.java covering this kind of use cases so\nno new jtreg is created within this patch. A new JMH is created in this\npatch and tested on a 512-bit SVE machine. Below test result shows the\nperformance can be significantly improved in some cases.\n\n  Benchmark                       Performance\n  IndexVector.exprWithIndex1            ~7.7x\n  IndexVector.exprWithIndex2           ~13.3x\n  IndexVector.indexArrayFill            ~5.7x"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/IndexVector.java"}],"sha":"e85e8ef4010bd49d5f8faefa32fda4fb062cb605"}]