{"files":[{"patch":"@@ -756,2 +756,3 @@\n-    \/\/ Using atomic load to prevent compilers from reloading (ThreadService::get_current_contended_monitor).\n-    \/\/ In case of concurrent modification, reloading pointer after NULL check must be prevented.\n+    \/\/ Use Atomic::load() to prevent data race between concurrent modification and\n+    \/\/ concurrent readers, e.g. ThreadService::get_current_contended_monitor().\n+    \/\/ Especially, reloading pointer from thread after NULL check must be prevented.\n@@ -770,1 +771,1 @@\n-    \/\/ Using atomic load as in current_pending_monitor.\n+    \/\/ See the comment in current_pending_monitor() above.\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}