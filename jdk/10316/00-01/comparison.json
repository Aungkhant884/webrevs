{"files":[{"patch":"@@ -274,2 +274,5 @@\n-            appImageFile.setIsSigned(true);\n-            AppImageFile.save(predefinedAppImage, null, appImageFile);\n+            if (!appImageFile.isSigned()) {\n+                appImageFile.copyAsSigned().save(predefinedAppImage);\n+            } else {\n+                appImageFile = null;\n+            }\n@@ -277,1 +280,0 @@\n-            boolean markUnsigned = false;\n@@ -279,1 +281,1 @@\n-                markUnsigned = !doSigning(params);\n+                doSigning(params);\n@@ -281,6 +283,3 @@\n-                markUnsigned = true;\n-            } finally {\n-                \/\/ Undo marking image as signed if needed.\n-                if (markUnsigned) {\n-                    appImageFile.setIsSigned(false);\n-                    AppImageFile.save(predefinedAppImage, null, appImageFile);\n+                \/\/ Restore original app image file if signing failed\n+                if (appImageFile != null) {\n+                    appImageFile.save(predefinedAppImage);\n@@ -385,1 +384,1 @@\n-    private boolean doSigning(Map<String, ? super Object> params)\n+    private void doSigning(Map<String, ? super Object> params)\n@@ -409,1 +408,0 @@\n-            return false; \/\/ Since we unsigned app image\n@@ -411,2 +409,0 @@\n-\n-        return true;\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        AppImageFile.save(root, params, null);\n+        AppImageFile.save(root, params);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-    private final String creatorVersion;\n-    private final String creatorPlatform;\n+    private final Path appImageDir;\n@@ -70,1 +69,3 @@\n-    private boolean signed;\n+    private final String creatorVersion;\n+    private final String creatorPlatform;\n+    private final boolean signed;\n@@ -84,3 +85,0 @@\n-        if (!Objects.equals(getVersion(), creatorVersion)) {\n-            isValid = false;\n-        }\n@@ -88,1 +86,1 @@\n-        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n+        if (appImageDir == null) {\n@@ -110,0 +108,8 @@\n+        if (!Objects.equals(getVersion(), creatorVersion)) {\n+            isValid = false;\n+        }\n+\n+        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n+            isValid = false;\n+        }\n+\n@@ -126,0 +132,1 @@\n+        this.appImageDir = appImageDir;\n@@ -145,0 +152,7 @@\n+    \/**\n+     * Returns application image directory. Never returns null.\n+     *\/\n+    Path getAppImageDir() {\n+        return appImageDir;\n+    }\n+\n@@ -166,4 +180,0 @@\n-    public void setIsSigned(boolean v) {\n-        signed = v;\n-    }\n-\n@@ -189,0 +199,21 @@\n+    \/**\n+     * Saves file with application image info in application image using values\n+     * from current instance.\n+     * @param appImageDir - path to application image\n+     * @throws IOException\n+     *\/\n+    void save(Path appImageDir) throws IOException {\n+        AppImageFile.save(appImageDir, null, this);\n+    }\n+\n+    \/**\n+     * Saves file with application image info in application image.\n+     * @param appImageDir - path to application image\n+     * @param params - parameters used to generate application image\n+     * @throws IOException\n+     *\/\n+    static void save(Path appImageDir, Map<String, Object> params)\n+            throws IOException {\n+        AppImageFile.save(appImageDir, params, null);\n+    }\n+\n@@ -199,1 +230,1 @@\n-    static void save(Path appImageDir,\n+    private static void save(Path appImageDir,\n@@ -338,4 +369,14 @@\n-    private static String getAttribute(Node item, String attr) {\n-        NamedNodeMap attrs = item.getAttributes();\n-        Node attrNode = attrs.getNamedItem(attr);\n-        return ((attrNode == null) ? null : attrNode.getNodeValue());\n+    \/**\n+     * Returns copy of AppImageFile, but with signed set to true if AppImageFile\n+     * is not marked as signed. If AppImageFile already signed it will return\n+     * instance to itself.\n+     * @return\n+     *\/\n+    public AppImageFile copyAsSigned() {\n+        if (isSigned()) {\n+            return this;\n+        }\n+\n+        return new AppImageFile(getAppImageDir(), getAppVersion(),\n+                getLauncherName(), getMainClass(), getAddLaunchers(),\n+                getVersion(), getPlatform(), \"true\", String.valueOf(isAppStore()));\n@@ -434,0 +475,6 @@\n+        private String getAttribute(Node item, String attr) {\n+            NamedNodeMap attrs = item.getAttributes();\n+            Node attrNode = attrs.getNamedItem(attr);\n+            return ((attrNode == null) ? null : attrNode.getNodeValue());\n+        }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":63,"deletions":16,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -172,0 +172,15 @@\n+    @Test\n+    public void testCopyAsSigned() throws IOException {\n+        Map<String, Object> params = new LinkedHashMap<>();\n+        params.put(\"name\", \"Foo\");\n+        params.put(\"main-class\", \"main.Class\");\n+        params.put(\"description\", \"Duck App Description\");\n+        params.put(\"mac-sign\", Boolean.FALSE);\n+\n+        AppImageFile aif = create(params);\n+        Assert.assertFalse(aif.isSigned());\n+\n+        aif = aif.copyAsSigned();\n+        Assert.assertTrue(aif.isSigned());\n+    }\n+\n@@ -214,1 +229,1 @@\n-        AppImageFile.save(tempFolder.getRoot().toPath(), params, null);\n+        AppImageFile.save(tempFolder.getRoot().toPath(), params);\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}