{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,3 +75,3 @@\n-\/\/ Also has outputStream compatible API for the different log-levels.\n-\/\/ The streams are resource allocated when requested and are accessed through\n-\/\/ calls to <level>_stream() functions (trace_stream(), debug_stream(), etc).\n+\/\/ The (trace(), debug(), etc) functions can also be used along with the LogStream\n+\/\/ class to obtain an outputStream object, to be passed to various printing\n+\/\/ functions that accept an outputStream:\n@@ -80,1 +80,1 @@\n-\/\/   Log(logging) log;\n+\/\/   Log(codecache, sweep) log;\n@@ -82,1 +82,0 @@\n-\/\/     ...\n@@ -84,1 +83,2 @@\n-\/\/     obj->print_on(log.debug_stream());\n+\/\/     LogStream ls(log.debug());\n+\/\/     CodeCache::print_summary(&ls, false);\n@@ -96,1 +96,1 @@\n-\/\/   LogTarget(Debug, gc) out;\n+\/\/   LogTarget(Debug, codecache, sweep) out;\n@@ -98,5 +98,3 @@\n-\/\/     ...\n-\/\/     out.print(\"Worker: %u\", i);\n-\/\/     out.print(\" data: %d\", x);\n-\/\/     ...\n-\/\/     print_stats(out.stream());\n+\/\/     out.print(\"result = %d\", result);\n+\/\/     LogStream ls(out);\n+\/\/     CodeCache::print_summary(&ls, false);\n","filename":"src\/hotspot\/share\/logging\/log.hpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}