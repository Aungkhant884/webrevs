{"files":[{"patch":"@@ -24,1 +24,3 @@\n-import java.text.*;\n+import java.text.CollationElementIterator;\n+import java.text.CollationKey;\n+import java.text.Collator;\n@@ -35,3 +37,3 @@\n-    \/\/------------------------------------------------------------------------\n-    \/\/ These methods are utilities specific to the Collation tests..\n-    \/\/------------------------------------------------------------------------\n+    \/*\n+     * These methods are utilities specific to the Collation tests..\n+     *\/\n@@ -39,0 +41,4 @@\n+    \/**\n+     * Compares two CollationElementIterators and throws an exception\n+     * with a message detailing which collation elements were not equal\n+     *\/\n@@ -51,1 +57,1 @@\n-    \/\/ Replace nonprintable characters with unicode escapes\n+    \/\/ Replace non-printable characters with unicode escapes\n@@ -53,1 +59,1 @@\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n@@ -62,1 +68,1 @@\n-                result.append(\"\\\\u\" + zero.substring(0, 4 - hex.length()) + hex);\n+                result.append(\"\\\\u\").append(zero.substring(0, 4 - hex.length())).append(hex);\n@@ -72,1 +78,1 @@\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n@@ -77,1 +83,1 @@\n-            result.append(Integer.toString(val, 16) + \" \");\n+            result.append(Integer.toString(val, 16)).append(\" \");\n@@ -82,4 +88,4 @@\n-    \/\/------------------------------------------------------------------------\n-    \/\/ Everything below here is boilerplate code that makes it possible\n-    \/\/ to add a new test by simply adding a function to an existing class\n-    \/\/------------------------------------------------------------------------\n+    \/*\n+     * Everything below here is boilerplate code that makes it possible\n+     * to add a new test by simply adding a function to an existing class\n+     *\/\n@@ -87,0 +93,4 @@\n+    \/**\n+     * Utility to test a collator with an array of test values.\n+     * See the other doTest() method for specific comparison details.\n+     *\/\n@@ -104,0 +114,5 @@\n+    \/**\n+     * Test that a collator returns the correct relation result value when\n+     * comparing a source and target string. Also tests that the compare and collation\n+     * key results return the same value.\n+     *\/\n","filename":"test\/jdk\/java\/text\/testlib\/CollatorTestUtils.java","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -40,1 +41,5 @@\n-public class HexDumpReader {\n+public final class HexDumpReader {\n+\n+    \/\/ Utility class should not be instantiated\n+    private HexDumpReader() {}\n+\n@@ -51,1 +56,1 @@\n-                                                            \"us-ascii\"))) {\n+                StandardCharsets.US_ASCII))) {\n","filename":"test\/jdk\/java\/text\/testlib\/HexDumpReader.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.util.Locale.Builder;\n-\n@@ -40,1 +38,1 @@\n-public class TestUtils {\n+public final class TestUtils {\n","filename":"test\/jdk\/java\/text\/testlib\/TestUtils.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}