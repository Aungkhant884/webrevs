{"files":[{"patch":"@@ -58,2 +58,1 @@\n-            fail(\"ERROR: \");\n-            fail(message);\n+            fail(\"ERROR: \" + message);\n@@ -93,2 +92,2 @@\n-            fail(\"Error : \" + foo.getMessage());\n-            fail(\"Default Collator creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default Collator creation failed.\");\n@@ -114,2 +113,2 @@\n-            fail(\"Error :  \" + bar.getMessage());\n-            fail(\"Creating French collation failed.\");\n+            fail(\"Error :  \" + bar.getMessage()\n+            + \"\\n Creating French collation failed.\");\n@@ -124,2 +123,2 @@\n-            fail(\"Error : \" + err.getMessage());\n-            fail(\"Junk collation creation failed, should at least return the collator for the base bundle.\");\n+            fail(\"Error : \" + err.getMessage()\n+            + \"\\n Junk collation creation failed, should at least return the collator for the base bundle.\");\n@@ -131,2 +130,2 @@\n-            fail(\"Error : \" + exc.getMessage());\n-            fail(\"Default collation comparison, caching not working.\");\n+            fail(\"Error : \" + exc.getMessage()\n+            + \"\\n Default collation comparison, caching not working.\");\n@@ -145,2 +144,2 @@\n-            fail(\"Error : \" + foo.getMessage());\n-            fail(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n@@ -153,2 +152,2 @@\n-            fail(\"Error : \" + bar.getMessage());\n-            fail(\"Danish collation creation failed.\");\n+            fail(\"Error : \" + bar.getMessage()\n+            + \"\\n Danish collation creation failed.\");\n@@ -161,2 +160,2 @@\n-            fail(\"Error : \" + err.getMessage());\n-            fail(\"2nd default collation creation failed.\");\n+            fail(\"Error : \" + err.getMessage()\n+            + \"\\n 2nd default collation creation failed.\");\n@@ -186,2 +185,2 @@\n-            fail(\"Error : \" + foo.getMessage());\n-            fail(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n@@ -225,2 +224,2 @@\n-            fail(\"Error : \" + foo.getMessage());\n-            fail(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n","filename":"test\/jdk\/java\/text\/Collator\/APITest.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1308,3 +1308,3 @@\n-            fail(\"Test failed\");\n-            fail(\" Minimum integer digits : \" + minIntDig);\n-            fail(\" new pattern: \" + sdf.toPattern());\n+            fail(\"Test failed\"\n+            + \"\\n Minimum integer digits : \" + minIntDig\n+            + \"\\n new pattern: \" + sdf.toPattern());\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberRegression.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1186,3 +1186,3 @@\n-                fail(\"test failed with zone \" + zones[i].getID());\n-                fail(\" cutover date is Date(Long.MAX_VALUE)\");\n-                fail(\" isLeapYear(100) returns: \" + is100Leap);\n+                fail(\"test failed with zone \" + zones[i].getID()\n+                + \"\\n cutover date is Date(Long.MAX_VALUE)\"\n+                + \"\\n isLeapYear(100) returns: \" + is100Leap);\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarRegression.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEqual;\n@@ -91,7 +92,2 @@\n-                if (!(expected.equals(loc))) {\n-                    fail(\"Locale didn't maintain invariants for: \"+lang);\n-                    fail(\"         got: \"+loc);\n-                    fail(\"    excpeted: \"+expected);\n-                } else {\n-                    System.out.println(\"Locale \"+lang+\" worked\");\n-                }\n+                assertEquals(expected, loc,\n+                        \"Locale didn't maintain invariants for: \"+lang);\n","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -385,4 +385,4 @@\n-            fail(\"Fail: Expected GMT-08:00 or something similar\");\n-            fail(\"************************************************************\");\n-            fail(\"THE ABOVE FAILURE MAY JUST MEAN THE LOCALE DATA HAS CHANGED\");\n-            fail(\"************************************************************\");\n+            fail(\"Fail: Expected GMT-08:00 or something similar\\n\"\n+            + \"************************************************************\\n\"\n+            + \"THE ABOVE FAILURE MAY JUST MEAN THE LOCALE DATA HAS CHANGED\\n\"\n+            + \"************************************************************\\n\");\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}