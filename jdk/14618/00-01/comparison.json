{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,4 +170,0 @@\n-     * When two values represent the same instant, the local date-time is compared\n-     * to distinguish them. This step is needed to make the ordering\n-     * consistent with {@code equals()}.\n-     *\n@@ -179,1 +175,0 @@\n-        int cmp;\n@@ -181,6 +176,1 @@\n-            cmp = 0;\n-        } else {\n-            cmp = Long.compare(datetime1.toEpochSecond(), datetime2.toEpochSecond());\n-            if (cmp == 0) {\n-                cmp = datetime1.toLocalTime().getNano() - datetime2.toLocalTime().getNano();\n-            }\n+            return datetime1.toLocalDateTime().compareTo(datetime2.toLocalDateTime());\n@@ -188,0 +178,1 @@\n+        int cmp = Long.compare(datetime1.toEpochSecond(), datetime2.toEpochSecond());\n@@ -189,1 +180,1 @@\n-            cmp = datetime1.toLocalDateTime().compareTo(datetime2.toLocalDateTime());\n+            cmp = datetime1.toLocalTime().getNano() - datetime2.toLocalTime().getNano();\n@@ -1817,1 +1808,11 @@\n-        return compareInstant(this, other);\n+        int cmp = getOffset().compareTo(other.getOffset());\n+        if (cmp != 0) {\n+            cmp = Long.compare(toEpochSecond(), other.toEpochSecond());\n+            if (cmp == 0) {\n+                cmp = toLocalTime().getNano() - other.toLocalTime().getNano();\n+            }\n+        }\n+        if (cmp == 0) {\n+            cmp = toLocalDateTime().compareTo(other.toLocalDateTime());\n+        }\n+        return cmp;\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1384,0 +1384,1 @@\n+        assertEquals(OffsetDateTime.timeLineOrder().compare(a,b) == 0, true);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/TCKOffsetDateTime.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}