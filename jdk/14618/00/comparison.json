{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,0 +170,4 @@\n+     * When two values represent the same instant, the local date-time is compared\n+     * to distinguish them. This step is needed to make the ordering\n+     * consistent with {@code equals()}.\n+     *\n@@ -175,0 +179,1 @@\n+        int cmp;\n@@ -176,1 +181,6 @@\n-            return datetime1.toLocalDateTime().compareTo(datetime2.toLocalDateTime());\n+            cmp = 0;\n+        } else {\n+            cmp = Long.compare(datetime1.toEpochSecond(), datetime2.toEpochSecond());\n+            if (cmp == 0) {\n+                cmp = datetime1.toLocalTime().getNano() - datetime2.toLocalTime().getNano();\n+            }\n@@ -178,1 +188,0 @@\n-        int cmp = Long.compare(datetime1.toEpochSecond(), datetime2.toEpochSecond());\n@@ -180,1 +189,1 @@\n-            cmp = datetime1.toLocalTime().getNano() - datetime2.toLocalTime().getNano();\n+            cmp = datetime1.toLocalDateTime().compareTo(datetime2.toLocalDateTime());\n@@ -1808,5 +1817,1 @@\n-        int cmp = compareInstant(this, other);\n-        if (cmp == 0) {\n-            cmp = toLocalDateTime().compareTo(other.toLocalDateTime());\n-        }\n-        return cmp;\n+        return compareInstant(this, other);\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}