{"files":[{"patch":"@@ -79,0 +79,1 @@\n+  _zero_count = 0;\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,5 @@\n-\n+\/\/ Compress stream implementation over the Unsigned5 compression algorithm\n+\/\/ mixed with Zero-Run-Length-Encoding (variation of RLE compression schema).\n+\/\/ unsigned5(int) takes 1..5 bytes, and zero byte is never produced (see\n+\/\/ unsigned5 description). Once we see a zero byte, it is a special mark\n+\/\/ followed by byte representing number of zero values in a stream.\n@@ -56,1 +60,2 @@\n-  inline u_char read()                 { return _buffer[_position++]; }\n+  u_char _remaining_zeroes;\n+  inline u_char read()                 { _remaining_zeroes = 0; return _buffer[_position++]; }\n@@ -60,1 +65,1 @@\n-  : CompressedStream(buffer, position) {}\n+  : CompressedStream(buffer, position), _remaining_zeroes(0) {}\n@@ -72,0 +77,11 @@\n+    if (_remaining_zeroes > 0) {\n+      _remaining_zeroes--;\n+      return 0;\n+    }\n+    if (_buffer[_position] == 0) {\n+      _position++;\n+      _remaining_zeroes = _buffer[_position++];\n+      assert(_remaining_zeroes > 0, \"corrupted stream\");\n+      _remaining_zeroes--;\n+      return 0;\n+    }\n@@ -74,0 +90,5 @@\n+\n+  void set_position(int position) {\n+    _position = position;\n+    _remaining_zeroes = 0;\n+  }\n@@ -84,0 +105,2 @@\n+    \/\/ Writing unencoded data ends the RLE sequence of zero integers\n+    _zero_count = 0;\n@@ -91,0 +114,15 @@\n+  \/\/ Handle encoding of subsequent zeroes. Return true if\n+  \/\/ input value is completely handled and no unsigned5 encoding required\n+  bool handle_zero(juint value) {\n+    if (value == 0) {\n+      _zero_count = (_zero_count == 0xFF) ? 0 : _zero_count;\n+      if (++_zero_count > 2) {\n+        _buffer[_position - 2] = 0;\n+        _buffer[_position - 1] = _zero_count;\n+        return true;\n+      }\n+    } else { \/\/ value != 0\n+      _zero_count = 0;\n+    }\n+    return false;\n+  }\n@@ -93,0 +131,1 @@\n+  u_char _zero_count;\n@@ -97,1 +136,1 @@\n-  : CompressedStream(buffer, position) { _size = initial_size; }\n+  : CompressedStream(buffer, position) { _size = initial_size; _zero_count = 0; }\n@@ -109,0 +148,1 @@\n+    if (handle_zero(value)) return;\n@@ -112,0 +152,2 @@\n+\n+  int position() { _zero_count = 0; return _position; }\n","filename":"src\/hotspot\/share\/code\/compressedStream.hpp","additions":46,"deletions":4,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+  private int remainingZeroes;\n+\n@@ -40,0 +42,1 @@\n+    remainingZeroes = 0;\n@@ -82,0 +85,11 @@\n+    if (remainingZeroes > 0) {\n+      remainingZeroes--;\n+      return 0;\n+    }\n+    short nextByte = read(position);\n+    if ((int) nextByte == 0) {\n+      remainingZeroes = read(++position);\n+      position++;\n+      remainingZeroes--;\n+      return 0;\n+    }\n@@ -90,0 +104,6 @@\n+  @Override\n+  public void setPosition(int position) {\n+    this.position = position;\n+    remainingZeroes = 0;\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CompressedReadStream.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}