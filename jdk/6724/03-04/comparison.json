{"files":[{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,1 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n@@ -44,9 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseAVX=1\");\n-        String testMethods = String.join(\",\", TestCastMethods.AVX1_CAST_TESTS.stream()\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX1_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=1\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX1.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,1 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n@@ -44,9 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseAVX=2\");\n-        String testMethods = String.join(\",\", TestCastMethods.AVX2_CAST_TESTS.stream()\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX2_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=2\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX2.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,1 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n@@ -44,9 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseAVX=3\");\n-        String testMethods = String.join(\",\", TestCastMethods.AVX512_CAST_TESTS.stream()\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX512_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=3\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,1 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n@@ -44,9 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseAVX=3\");\n-        String testMethods = String.join(\",\", TestCastMethods.AVX512DQ_CAST_TESTS.stream()\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX512DQ_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=3\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512DQ.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,1 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n@@ -44,9 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:+UseNeon\");\n-        String testMethods = String.join(\",\", TestCastMethods.NEON_CAST_TESTS.stream()\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.NEON_CAST_TESTS.stream(),\n+                \"-XX:+UseNeon\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastNeon.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -30,2 +29,0 @@\n-import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n-import jdk.incubator.vector.VectorShape;\n@@ -45,10 +42,4 @@\n-        var cast = new TestFramework(TestVectorCast.class);\n-        cast.setDefaultWarmup(1);\n-        cast.addHelperClasses(VectorReshapeHelper.class);\n-        cast.addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseSVE=1\");\n-        String testMethods = String.join(\",\", TestCastMethods.SVE_CAST_TESTS.stream()\n-                .filter(p -> Math.max(p.isp().vectorBitSize(), p.osp().vectorBitSize()) <= VectorShape.preferredShape().vectorBitSize())\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        cast.addFlags(\"-DTest=\" + testMethods);\n-        cast.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.SVE_CAST_TESTS.stream(),\n+                \"-XX:UseSVE=1\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastSVE.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.TestFramework;\n@@ -46,3 +45,1 @@\n-    private static final List<VectorShape> SHAPE_LIST = List.of(\n-            VectorShape.S_64_BIT, VectorShape.S_128_BIT, VectorShape.S_256_BIT, VectorShape.S_512_BIT\n-    );\n+    private static final List<VectorShape> SHAPE_LIST = List.of(VectorShape.values());\n@@ -54,13 +51,8 @@\n-        var expandShrink = new TestFramework(TestVectorExpandShrink.class);\n-        expandShrink.setDefaultWarmup(1);\n-        expandShrink.addHelperClasses(VectorReshapeHelper.class);\n-        expandShrink.addFlags(\"--add-modules=jdk.incubator.vector\");\n-        var expandShrinkTests = String.join(\",\", SHAPE_LIST.stream()\n-                .flatMap(s -> SHAPE_LIST.stream()\n-                        .map(t -> VectorSpeciesPair.makePair(VectorSpecies.of(byte.class, s), VectorSpecies.of(byte.class, t))))\n-                .filter(p -> !p.isp().equals(p.osp()))\n-                .filter(p -> Math.max(p.isp().vectorBitSize(), p.osp().vectorBitSize()) <= VectorShape.preferredShape().vectorBitSize())\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        expandShrink.addFlags(\"-DTest=\" + expandShrinkTests);\n-        expandShrink.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorExpandShrink.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(s -> SHAPE_LIST.stream()\n+                                .filter(t -> t.vectorBitSize() != s.vectorBitSize())\n+                                .map(t -> VectorSpeciesPair.makePair(VectorSpecies.of(byte.class, s),\n+                                        VectorSpecies.of(byte.class, t))))\n+        );\n@@ -68,6 +60,8 @@\n-        var doubleExpandShrink = new TestFramework(TestVectorDoubleExpandShrink.class);\n-        doubleExpandShrink.setDefaultWarmup(1);\n-        doubleExpandShrink.addHelperClasses(VectorReshapeHelper.class);\n-        doubleExpandShrink.addFlags(\"--add-modules=jdk.incubator.vector\");\n-        doubleExpandShrink.addFlags(\"-DTest=\" + expandShrinkTests);\n-        doubleExpandShrink.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorDoubleExpandShrink.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(s -> SHAPE_LIST.stream()\n+                                .filter(t -> t.vectorBitSize() != s.vectorBitSize())\n+                                .map(t -> VectorSpeciesPair.makePair(VectorSpecies.of(byte.class, s),\n+                                        VectorSpecies.of(byte.class, t))))\n+        );\n@@ -75,15 +69,11 @@\n-        var rebracket = new TestFramework(TestVectorRebracket.class);\n-        rebracket.setDefaultWarmup(1);\n-        rebracket.addHelperClasses(VectorReshapeHelper.class);\n-        rebracket.addFlags(\"--add-modules=jdk.incubator.vector\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n-        var rebracketTests = String.join(\",\", SHAPE_LIST.stream()\n-                .filter(s -> s.vectorBitSize() <= VectorShape.preferredShape().vectorBitSize())\n-                .flatMap(shape -> ETYPE_LIST.stream()\n-                        .flatMap(etype -> ETYPE_LIST.stream()\n-                                .map(ftype -> VectorSpeciesPair.makePair(VectorSpecies.of(etype, shape), VectorSpecies.of(ftype, shape)))))\n-                .filter(p -> p.isp().length() > 1 && p.osp().length() > 1)\n-                .filter(p -> p.isp().elementType() != p.osp().elementType())\n-                .map(VectorSpeciesPair::format)\n-                .toList());\n-        rebracket.addFlags(\"-DTest=\" + rebracketTests);\n-        rebracket.start();\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorRebracket.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(shape -> ETYPE_LIST.stream()\n+                                .flatMap(etype -> ETYPE_LIST.stream()\n+                                        .filter(ftype -> ftype != etype)\n+                                        .map(ftype -> VectorSpeciesPair.makePair(VectorSpecies.of(etype, shape),\n+                                                VectorSpecies.of(ftype, shape)))))\n+                        .filter(p -> p.isp().length() > 1 && p.osp().length() > 1),\n+                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\"\n+        );\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorReinterpret.java","additions":28,"deletions":38,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.ir_framework.TestFramework;\n@@ -34,0 +35,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -79,0 +82,15 @@\n+    public static void runMainHelper(Class<?> testClass, Stream<VectorSpeciesPair> testMethods, String... flags) {\n+        var test = new TestFramework(testClass);\n+        test.setDefaultWarmup(1);\n+        test.addHelperClasses(VectorReshapeHelper.class);\n+        test.addFlags(\"--add-modules=jdk.incubator.vector\");\n+        test.addFlags(flags);\n+        String testMethodNames = testMethods\n+                .filter(p -> p.isp().length() <= VectorSpecies.ofLargestShape(p.isp().elementType()).length())\n+                .filter(p -> p.osp().length() <= VectorSpecies.ofLargestShape(p.osp().elementType()).length())\n+                .map(VectorSpeciesPair::format)\n+                .collect(Collectors.joining(\",\"));\n+        test.addFlags(\"-DTest=\" + testMethodNames);\n+        test.start();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/VectorReshapeHelper.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}