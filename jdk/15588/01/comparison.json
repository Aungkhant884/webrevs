{"files":[{"patch":"@@ -773,3 +773,5 @@\n-  for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n-    if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n-      indy_index = i;\n+  if (is_indy) {\n+    for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n+      if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n+        indy_index = i;\n+      }\n@@ -841,0 +843,5 @@\n+C2V_VMENTRY_0(jint, bootstrapArgumentIndexAt, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint cpi, jint index))\n+  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));\n+  return cp->bootstrap_argument_index_at(cpi, index);\n+C2V_END\n+\n@@ -3137,0 +3144,1 @@\n+  {CC \"bootstrapArgumentIndexAt\",                     CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(bootstrapArgumentIndexAt)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -479,0 +479,15 @@\n+    \/**\n+     * Gets the constant pool index of a static argument of a bootstrap specifier. Used when the list\n+     * of static arguments in the {@link BootstrapMethodInvocation} is an {@code int[]}. The list has\n+     * two elements. The first one is the number of arguments and the second one is the {@code cpi}.\n+     *\n+     * @param cpi the index of a bootstrap specifier in the constant pool\n+     * @param index the index of the static argument in the list of static arguments\n+     * @return the constant pool index associated with the static argument\n+     *\/\n+    int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, int cpi, int index) {\n+        return bootstrapArgumentIndexAt(constantPool, constantPool.getConstantPoolPointer(), cpi, index);\n+    }\n+\n+    private native int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi, int index);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -586,0 +586,5 @@\n+    @Override\n+    public int bootstrapArgumentIndexAt(int cpi, int index) {\n+        return compilerToVM().bootstrapArgumentIndexAt(this, cpi, index);\n+    }\n+\n@@ -607,2 +612,1 @@\n-                    String message = String.format(\"Resolving bootstrap static arguments for %s using BootstrapCallInfo %s not supported\", method.format(\"%H.%n(%p)\"), Arrays.toString(bsciArgs));\n-                    throw new IllegalArgumentException(message);\n+                    staticArgumentsList = List.of(Arrays.stream(bsciArgs).mapToObj(i -> JavaConstant.forInt(i)).toArray(JavaConstant[]::new));\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -173,0 +173,13 @@\n+    \/**\n+     * Gets the constant pool index of a static argument of a bootstrap specifier. Used when the list\n+     * of static arguments in the {@link BootstrapMethodInvocation} is an {@code int[]}. The list has\n+     * two elements. The first one is the number of arguments and the second one is the {@code cpi}.\n+     *\n+     * @param cpi the index of a bootstrap specifier in the constant pool\n+     * @param index the index of the static argument in the list of static arguments\n+     * @return the constant pool index associated with the static argument\n+     *\/\n+    default int bootstrapArgumentIndexAt(int cpi, int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -185,2 +198,0 @@\n-     * @throws IllegalArgumentException if the bootstrap method invocation makes use of\n-     *             {@code java.lang.invoke.BootstrapCallInfo}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}