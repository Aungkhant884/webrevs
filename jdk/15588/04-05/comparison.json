{"files":[{"patch":"@@ -532,0 +532,6 @@\n+    \/**\n+     * Represents a list of static arguments from a {@link BootstrapMethodInvocation} of the form\n+     * {{@code arg_count}, {@code pool_index}}, meaning the arguments are not already resolved\n+     * and that the JDK has to lookup the arguments when they are needed. The {@code bssIndex}\n+     * corresponds to {@code pool_index} and the {@code size} corresponds to {@code arg_count}.\n+     *\/\n@@ -543,0 +549,11 @@\n+        \/**\n+         * Lazily resolves and caches the argument at the given index and returns it. The method\n+         * {@link CompilerToVM#bootstrapArgumentIndexAt} is used to obtain the constant pool\n+         * index of the entry and the method {@link CompilerToVM#lookupConstantInPool} is used\n+         * to resolve it. If the resolution failed, the index is returned as a\n+         * {@link PrimitiveConstant}.\n+         *\n+         * @param index index of the element to return\n+         * @return A {@link PrimitiveConstant} representing a {@code CONSTANT_Dynamic_info}\n+         *         entry or a {@link JavaConstant} representing the static argument requested\n+         *\/\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -172,7 +172,9 @@\n-         * resolveIndyOrCondy(int index, int opcode) {\n-         *     bsmInvocation = cp.lookupBootstrapMethodInvocation(index, opcode);\n-         *     staticArguments = bsmInvocation.getStaticArguments();\n-         *     for each argument in staticArguments {\n-         *         if argument is PrimitiveArgument {\n-         *             \/\/ argument is a condy, so opcode becomes -1\n-         *             resolveIndyOrCondy(argument.asInt(), -1);\n+         * lookupConstant(int index, boolean resolve) {\n+         *     constant = cp.lookupConstant(index, resolve);\n+         *     if constant is null {\n+         *         bsmInvocation = cp.lookupBootstrapMethodInvocation(index, -1);\n+         *         staticArguments = bsmInvocation.getStaticArguments();\n+         *         for each argument in staticArguments {\n+         *             if argument is PrimitiveArgument {\n+         *                 lookupConstant(argument.asInt(), resolve);\n+         *             }\n@@ -180,0 +182,1 @@\n+         *         call boostrap method with resolved arguments to get constant\n@@ -181,1 +184,1 @@\n-         *     call original boostrap method with resolved arguments\n+         *     return constant;\n@@ -185,0 +188,2 @@\n+         * The other types of entries are already resolved an can be used directly.\n+         *\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}