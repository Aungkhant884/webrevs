{"files":[{"patch":"@@ -773,3 +773,5 @@\n-  for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n-    if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n-      indy_index = i;\n+  if (is_indy) {\n+    for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n+      if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n+        indy_index = i;\n+      }\n@@ -841,0 +843,5 @@\n+C2V_VMENTRY_0(jint, bootstrapArgumentIndexAt, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint cpi, jint index))\n+  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));\n+  return cp->bootstrap_argument_index_at(cpi, index);\n+C2V_END\n+\n@@ -3137,0 +3144,1 @@\n+  {CC \"bootstrapArgumentIndexAt\",                     CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(bootstrapArgumentIndexAt)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -479,0 +479,18 @@\n+    \/**\n+     * Gets the constant pool index of a static argument of a {@code CONSTANT_Dynamic_info} or\n+     * @{code CONSTANT_InvokeDynamic_info} entry. Used when the list of static arguments in the\n+     * {@link BootstrapMethodInvocation} is a {@code List<PrimitiveConstant>} of the form\n+     * {{@code arg_count}, {@code pool_index}}, meaning the arguments are not already resolved and that\n+     * the JDK has to lookup the arguments when they are needed. The {@code cpi} corresponds to\n+     * {@code pool_index} and the {@code index} has to be smaller than {@code arg_count}.\n+     *\n+     * @param cpi the index of a {@code CONSTANT_Dynamic_info} or @{code CONSTANT_InvokeDynamic_info} entry\n+     * @param index the index of the static argument in the list of static arguments\n+     * @return the constant pool index associated with the static argument\n+     *\/\n+    int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, int cpi, int index) {\n+        return bootstrapArgumentIndexAt(constantPool, constantPool.getConstantPoolPointer(), cpi, index);\n+    }\n+\n+    private native int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi, int index);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n@@ -41,0 +43,1 @@\n+import jdk.vm.ci.meta.PrimitiveConstant;\n@@ -529,0 +532,31 @@\n+    static class CachedBSMArgs extends AbstractList<JavaConstant> {\n+        private final JavaConstant[] cache;\n+        private final HotSpotConstantPool cp;\n+        private final int bssIndex;\n+\n+        CachedBSMArgs(HotSpotConstantPool cp, int bssIndex, int size) {\n+            this.cp = cp;\n+            this.bssIndex = bssIndex;\n+            this.cache = new JavaConstant[size];\n+        }\n+\n+        @Override\n+        public JavaConstant get(int index) {\n+            JavaConstant res = cache[index];\n+            if (res == null) {\n+                int argCpi = compilerToVM().bootstrapArgumentIndexAt(cp, bssIndex, index);\n+                res = compilerToVM().lookupConstantInPool(cp, argCpi, false);\n+                if (res == null) {\n+                    res = JavaConstant.forInt(argCpi);\n+                }\n+                cache[index] = res;\n+            }\n+            return res;\n+        }\n+\n+        @Override\n+        public int size() {\n+            return cache.length;\n+        }\n+    }\n+\n@@ -607,2 +641,3 @@\n-                    String message = String.format(\"Resolving bootstrap static arguments for %s using BootstrapCallInfo %s not supported\", method.format(\"%H.%n(%p)\"), Arrays.toString(bsciArgs));\n-                    throw new IllegalArgumentException(message);\n+                    int argCount = bsciArgs[0];\n+                    int bss_index = bsciArgs[1];\n+                    staticArgumentsList = new CachedBSMArgs(this, bss_index, argCount);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-     * or {@code CONSTANT_InvokeDynamic_info} pool entry .\n+     * or {@code CONSTANT_InvokeDynamic_info} pool entry.\n@@ -168,0 +168,17 @@\n+         * An argument of type {@link PrimitiveConstant} represents a {@code CONSTANT_Dynamic_info}\n+         * entry. To resolve this entry, the corresponding bootstrap method has to be called first:\n+         *\n+         * <pre>\n+         * resolveIndyOrCondy(int index, int opcode) {\n+         *     bsmInvocation = cp.lookupBootstrapMethodInvocation(index, opcode);\n+         *     staticArguments = bsmInvocation.getStaticArguments();\n+         *     for each argument in staticArguments {\n+         *         if argument is PrimitiveArgument {\n+         *             \/\/ argument is a condy, so opcode becomes -1\n+         *             resolveIndyOrCondy(argument.asInt(), -1);\n+         *         }\n+         *     }\n+         *     call original boostrap method with resolved arguments\n+         * }\n+         * <\/pre>\n+         *\n@@ -185,2 +202,0 @@\n-     * @throws IllegalArgumentException if the bootstrap method invocation makes use of\n-     *             {@code java.lang.invoke.BootstrapCallInfo}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}