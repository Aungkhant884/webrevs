{"files":[{"patch":"@@ -172,11 +172,8 @@\n-         * lookupConstant(int index, boolean resolve) {\n-         *     constant = cp.lookupConstant(index, resolve);\n-         *     if constant is null {\n-         *         bsmInvocation = cp.lookupBootstrapMethodInvocation(index, -1);\n-         *         staticArguments = bsmInvocation.getStaticArguments();\n-         *         for each argument in staticArguments {\n-         *             if argument is PrimitiveArgument {\n-         *                 lookupConstant(argument.asInt(), resolve);\n-         *             }\n-         *         }\n-         *         call boostrap method with resolved arguments to get constant\n+         * List<JavaConstant> args = bmi.getStaticArguments();\n+         * List<JavaConstant> resolvedArgs = new ArrayList<>(args.size());\n+         * for (JavaConstant c : args) {\n+         *     JavaConstant r = c;\n+         *     if (c instanceof PrimitiveConstant pc) {\n+         *         \/\/ If needed, access corresponding BootstrapMethodInvocation using\n+         *         \/\/ cp.lookupBootstrapMethodInvocation(pc.asInt(), -1)\n+         *         r = cp.lookupConstant(pc.asInt(), true);\n@@ -184,1 +181,1 @@\n-         *     return constant;\n+         *     resolvedArgs.append(r);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import jdk.vm.ci.meta.JavaConstant;\n@@ -89,0 +90,6 @@\n+        \/**\n+         * Condy whose bootstrap method is one of the {@code TestDynamicConstant.get<type>BSM(<type> constant, int i)}\n+         * methods with one condy arg and one int arg.\n+         *\/\n+        CALL_DIRECT_WITH_ARGS_BSM,\n+\n@@ -167,0 +174,18 @@\n+             } else if (condyType == CondyType.CALL_DIRECT_WITH_ARGS_BSM) {\n+                \/\/ Example: int TestDynamicConstant.getIntBSM(MethodHandles.Lookup l, String name,\n+                \/\/ Class<?> type, int constant, int i)\n+                String sig1 = \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)\" + desc;\n+                String sig2 = \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;\" + desc + \"I)\" + desc;\n+\n+                Handle handle1 = new Handle(H_INVOKESTATIC, testClassInternalName, getter + \"BSM\", sig1, false);\n+                Handle handle2 = new Handle(H_INVOKESTATIC, testClassInternalName, getter + \"BSM\", sig2, false);\n+\n+                ConstantDynamic condy1 = new ConstantDynamic(\"const1\", desc, handle1);\n+                ConstantDynamic condy2 = new ConstantDynamic(\"const2\", desc, handle2, condy1, Integer.MAX_VALUE);\n+\n+                condy = condy2;\n+                MethodVisitor run = cw.visitMethod(PUBLIC_STATIC, \"run\", \"()\" + desc, null, null);\n+                run.visitLdcInsn(condy);\n+                run.visitInsn(type.getOpcode(IRETURN));\n+                run.visitMaxs(0, 0);\n+                run.visitEnd();\n@@ -312,0 +337,6 @@\n+                if (type != Object.class) {\n+                    testLookupBootstrapMethodInvocation(condyType, metaAccess, testClass, getTagAt);\n+                } else {\n+                    \/\/ StringConcatFactoryStringConcatFactory cannot accept null constants\n+                }\n+\n@@ -333,6 +364,0 @@\n-\n-                if (type != Object.class) {\n-                    testLookupBootstrapMethodInvocation(condyType, metaAccess, testClass, getTagAt);\n-                } else {\n-                    \/\/ StringConcatFactoryStringConcatFactory cannot accept null constants\n-                }\n@@ -367,1 +392,1 @@\n-                    if (condyType == CondyType.CALL_DIRECT_BSM) {\n+                    if (condyType == CondyType.CALL_DIRECT_BSM || condyType == CondyType.CALL_DIRECT_WITH_ARGS_BSM) {\n@@ -369,0 +394,11 @@\n+                        if (condyType == CondyType.CALL_DIRECT_WITH_ARGS_BSM) {\n+                            List<JavaConstant> staticArguments = bsmi.getStaticArguments();\n+                            if (staticArguments.size() > 0) {\n+                                JavaConstant primitiveConstant = staticArguments.get(0);\n+                                Assert.assertTrue(primitiveConstant instanceof PrimitiveConstant);\n+                                BootstrapMethodInvocation innerBsmi = cp.lookupBootstrapMethodInvocation(primitiveConstant.asInt(), -1);\n+                                String innerBsm = innerBsmi.getMethod().format(\"%H.%n\");\n+                                Assert.assertTrue(innerBsm.startsWith(\"jdk.vm.ci.hotspot.test.TestDynamicConstant.get\") && bsm.endsWith(\"BSM\"), bsm);\n+                                Assert.assertTrue(staticArguments.get(1) instanceof HotSpotObjectConstant);\n+                            }\n+                        }\n@@ -428,0 +464,12 @@\n+    @SuppressWarnings(\"unused\") public static boolean getBooleanBSM(MethodHandles.Lookup l, String name, Class<?> type, boolean constant, int i) { return true; }\n+    @SuppressWarnings(\"unused\") public static char    getCharBSM   (MethodHandles.Lookup l, String name, Class<?> type, char constant, int i) { return '*'; }\n+    @SuppressWarnings(\"unused\") public static short   getShortBSM  (MethodHandles.Lookup l, String name, Class<?> type, short constant, int i) { return Short.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static byte    getByteBSM   (MethodHandles.Lookup l, String name, Class<?> type, byte constant, int i) { return Byte.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static int     getIntBSM    (MethodHandles.Lookup l, String name, Class<?> type, int constant, int i) { return Integer.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static float   getFloatBSM  (MethodHandles.Lookup l, String name, Class<?> type, float constant, int i) { return Float.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static long    getLongBSM   (MethodHandles.Lookup l, String name, Class<?> type, long constant, int i) { return Long.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static double  getDoubleBSM (MethodHandles.Lookup l, String name, Class<?> type, double constant, int i) { return Double.MAX_VALUE; }\n+    @SuppressWarnings(\"unused\") public static String  getStringBSM (MethodHandles.Lookup l, String name, Class<?> type, String constant, int i) { return \"a string\"; }\n+    @SuppressWarnings(\"unused\") public static Object  getObjectBSM (MethodHandles.Lookup l, String name, Class<?> type, Object constant, int i) { return null; }\n+    @SuppressWarnings(\"unused\") public static List<?> getListBSM   (MethodHandles.Lookup l, String name, Class<?> type, List<?> constant, int i) { return List.of(\"element\"); }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestDynamicConstant.java","additions":55,"deletions":7,"binary":false,"changes":62,"status":"modified"}]}