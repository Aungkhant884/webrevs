{"files":[{"patch":"@@ -773,3 +773,5 @@\n-  for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n-    if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n-      indy_index = i;\n+  if (is_indy) {\n+    for (int i = 0; i < cp->resolved_indy_entries_length(); i++) {\n+      if (cp->resolved_indy_entry_at(i)->constant_pool_index() == index) {\n+        indy_index = i;\n+      }\n@@ -841,0 +843,5 @@\n+C2V_VMENTRY_0(jint, bootstrapArgumentIndexAt, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint cpi, jint index))\n+  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));\n+  return cp->bootstrap_argument_index_at(cpi, index);\n+C2V_END\n+\n@@ -3137,0 +3144,1 @@\n+  {CC \"bootstrapArgumentIndexAt\",                     CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(bootstrapArgumentIndexAt)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -479,0 +479,18 @@\n+    \/**\n+     * Gets the constant pool index of a static argument of a bootstrap specifier (a constant pool entry\n+     * containing information about a bootstrap method). Used when the list of static arguments in the\n+     * {@link BootstrapMethodInvocation} is a {@code List<PrimitiveConstant>} of the form\n+     * {{@code arg_count}, {@code pool_index}}, meaning the arguments are not already resolved and that\n+     * the JDK has to lookup the arguments when they are needed. The {@code cpi} corresponds to\n+     * {@code pool_index} and the {@code index} has to be smaller than {@code arg_count}.\n+     *\n+     * @param cpi the index of a bootstrap specifier in the constant pool\n+     * @param index the index of the static argument in the list of static arguments\n+     * @return the constant pool index associated with the static argument\n+     *\/\n+    int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, int cpi, int index) {\n+        return bootstrapArgumentIndexAt(constantPool, constantPool.getConstantPoolPointer(), cpi, index);\n+    }\n+\n+    private native int bootstrapArgumentIndexAt(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi, int index);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -586,0 +586,5 @@\n+    @Override\n+    public int bootstrapArgumentIndexAt(int cpi, int index) {\n+        return compilerToVM().bootstrapArgumentIndexAt(this, cpi, index);\n+    }\n+\n@@ -607,2 +612,1 @@\n-                    String message = String.format(\"Resolving bootstrap static arguments for %s using BootstrapCallInfo %s not supported\", method.format(\"%H.%n(%p)\"), Arrays.toString(bsciArgs));\n-                    throw new IllegalArgumentException(message);\n+                    staticArgumentsList = List.of(Arrays.stream(bsciArgs).mapToObj(i -> JavaConstant.forInt(i)).toArray(JavaConstant[]::new));\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,18 @@\n-     * or {@code CONSTANT_InvokeDynamic_info} pool entry .\n+     * or {@code CONSTANT_InvokeDynamic_info} pool entry.\n+     *\n+     * The procedure to obtain and use a {@link BootstrapMethodInvocation} is the following:\n+     *\n+     * <pre>\n+     * bsmInvocation = lookupBootstrapMethodInvocation(index, opcode);\n+     * staticArguments = bsmInvocation.getStaticArguments();\n+     * if staticArguments are PrimitiveConstant {\n+     *     argCount = staticArguments.get(0).asInt();\n+     *     cpi = staticArguments.get(1).asInt();\n+     *     for (int i = 0; i < argCount; ++i) {\n+     *         arguments[i] = lookupConstant(cpi, i);\n+     *     }\n+     *     call bootstrap method with newly resolved arguments\n+     * } else {\n+     *     call bootstrap method with provided arguments\n+     * }\n+     * <\/pre>\n@@ -173,0 +190,16 @@\n+    \/**\n+     * Gets the constant pool index of a static argument of a bootstrap specifier (a constant pool entry\n+     * containing information about a bootstrap method). Used when the list of static arguments in the\n+     * {@link BootstrapMethodInvocation} is a {@code List<PrimitiveConstant>} of the form\n+     * {{@code arg_count}, {@code pool_index}}, meaning the arguments are not already resolved and that\n+     * the JDK has to lookup the arguments when they are needed. The {@code cpi} corresponds to\n+     * {@code pool_index} and the {@code index} has to be smaller than {@code arg_count}.\n+     *\n+     * @param cpi the index of a bootstrap specifier in the constant pool\n+     * @param index the index of the static argument in the list of static arguments\n+     * @return the constant pool index associated with the static argument\n+     *\/\n+    default int bootstrapArgumentIndexAt(int cpi, int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -185,2 +218,0 @@\n-     * @throws IllegalArgumentException if the bootstrap method invocation makes use of\n-     *             {@code java.lang.invoke.BootstrapCallInfo}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"}]}